Resolved forward reference PIECES to (word[]) PIECES
Resolved forward reference next_piece_idx to (byte) next_piece_idx
Resolved forward reference PIECES_NEXT_CHARS to (byte[]) PIECES_NEXT_CHARS
Resolved forward reference next_piece_idx to (byte) next_piece_idx
Resolved forward reference sprites_irq to interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
Resolved forward reference COLLISION_NONE to (byte) COLLISION_NONE
Resolved forward reference COLLISION_NONE to (byte) COLLISION_NONE
Resolved forward reference COLLISION_NONE to (byte) COLLISION_NONE
Resolved forward reference COLLISION_NONE to (byte) COLLISION_NONE
Setting inferred volatile on symbol affected by address-of (dword*~) render_score::$1 ← & (dword) score_bcd
Fixing pointer array-indexing *((byte*[PLAYFIELD_LINES]) screen_lines_1 + (byte) render_init::i)
Fixing pointer array-indexing *((byte*[PLAYFIELD_LINES]) screen_lines_2 + (byte) render_init::i)
Fixing pointer array-indexing *((byte*[PLAYFIELD_LINES]) screen_lines_1 + (byte~) render_playfield::$2)
Fixing pointer array-indexing *((byte*[PLAYFIELD_LINES]) screen_lines_1 + (byte~) render_moving::$1)
Fixing pointer array-indexing *((word[]) PIECES + (byte) next_piece_idx)
Fixing pointer array-indexing *((byte*[PLAYFIELD_LINES]) playfield_lines + (byte) play_init::j)
Fixing pointer array-indexing *((dword[]) SCORE_BASE_BCD + (byte) play_init::b)
Fixing pointer array-indexing *((dword[5]) score_add_bcd + (byte) play_init::b)
Fixing pointer array-indexing *((byte*[PLAYFIELD_LINES]) playfield_lines + (byte) play_collision::yp)
Fixing pointer array-indexing *((byte*[PLAYFIELD_LINES]) playfield_lines + (byte) play_lock_current::yp)
Fixing pointer array-indexing *((word[]) PIECES + (byte) play_spawn_current::current_piece_idx)
Fixing pointer array-indexing *((dword[5]) score_add_bcd + (byte) play_update_score::removed)
Fixing pointer array-indexing *((dword[5]) score_add_bcd + (byte) play_increase_level::b)
Fixing pointer array-indexing *((dword[]) SCORE_BASE_BCD + (byte) play_increase_level::b)
Fixing pointer array-indexing *((dword[5]) score_add_bcd + (byte) play_increase_level::b)
Identified constant variable (word) render_score::score_offset
Identified constant variable (word) render_score::lines_offset
Identified constant variable (word) render_score::level_offset
Identified constant variable (byte) render_screen_original::SPACE
Identified constant variable (word) render_next::next_area_offset
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call vicSelectGfxBank (byte*) PLAYFIELD_CHARSET 
Inlined call (byte~) render_show::$2 ← call toD018 (byte*) PLAYFIELD_SCREEN_1 (byte*) PLAYFIELD_CHARSET 
Inlined call (byte~) render_show::$1 ← call toD018 (byte*) PLAYFIELD_SCREEN_2 (byte*) PLAYFIELD_CHARSET 
Inlined call (byte~) $6 ← call toSpritePtr (byte*) PLAYFIELD_SPRITES 
Inlined call (byte~) sprites_irq::$5 ← call toSpritePtr (byte*) PLAYFIELD_SPRITES 
Inlined call (byte~) play_spawn_current::$5 ← call sid_rnd 
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @3
Culled Empty Block (label) @5
Culled Empty Block (label) keyboard_matrix_read::@1
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) keyboard_event_scan::@22
Culled Empty Block (label) keyboard_event_scan::@13
Culled Empty Block (label) keyboard_event_scan::@15
Culled Empty Block (label) keyboard_event_scan::@19
Culled Empty Block (label) keyboard_event_scan::@4
Culled Empty Block (label) @9
Culled Empty Block (label) keyboard_event_pressed::@1
Culled Empty Block (label) @10
Culled Empty Block (label) keyboard_event_get::@4
Culled Empty Block (label) keyboard_event_get::@2
Culled Empty Block (label) keyboard_event_get::@5
Culled Empty Block (label) keyboard_event_get::@6
Culled Empty Block (label) @12
Culled Empty Block (label) render_init::vicSelectGfxBank1_toDd001_@1
Culled Empty Block (label) render_init::vicSelectGfxBank1_@return
Culled Empty Block (label) @14
Culled Empty Block (label) render_show::toD0181_@1
Culled Empty Block (label) render_show::toD0182_@1
Culled Empty Block (label) render_show::@4
Culled Empty Block (label) @15
Culled Empty Block (label) @16
Culled Empty Block (label) render_score::@4
Culled Empty Block (label) @17
Culled Empty Block (label) @18
Culled Empty Block (label) render_screen_original::@3
Culled Empty Block (label) render_screen_original::@5
Culled Empty Block (label) render_screen_original::@8
Culled Empty Block (label) @19
Culled Empty Block (label) render_playfield::@4
Culled Empty Block (label) @20
Culled Empty Block (label) render_moving::@9
Culled Empty Block (label) render_moving::@7
Culled Empty Block (label) render_moving::@10
Culled Empty Block (label) @21
Culled Empty Block (label) render_next::@4
Culled Empty Block (label) render_next::@10
Culled Empty Block (label) render_next::@12
Culled Empty Block (label) sprites_init::@2
Culled Empty Block (label) toSpritePtr1_@1
Culled Empty Block (label) @24
Culled Empty Block (label) sprites_irq::@14
Culled Empty Block (label) sprites_irq::toSpritePtr2_@1
Culled Empty Block (label) sprites_irq::@5
Culled Empty Block (label) sprites_irq::@9
Culled Empty Block (label) sprites_irq::@10
Culled Empty Block (label) play_init::@4
Culled Empty Block (label) @26
Culled Empty Block (label) play_movement::@3
Culled Empty Block (label) play_movement::@4
Culled Empty Block (label) @27
Culled Empty Block (label) play_move_down::@13
Culled Empty Block (label) play_move_down::@11
Culled Empty Block (label) play_move_down::@16
Culled Empty Block (label) play_move_down::@12
Culled Empty Block (label) @28
Culled Empty Block (label) play_move_leftright::@2
Culled Empty Block (label) play_move_leftright::@12
Culled Empty Block (label) play_move_leftright::@7
Culled Empty Block (label) play_move_leftright::@8
Culled Empty Block (label) play_move_leftright::@13
Culled Empty Block (label) play_move_leftright::@10
Culled Empty Block (label) play_move_leftright::@11
Culled Empty Block (label) @29
Culled Empty Block (label) play_move_rotate::@8
Culled Empty Block (label) play_move_rotate::@3
Culled Empty Block (label) play_move_rotate::@9
Culled Empty Block (label) play_move_rotate::@10
Culled Empty Block (label) play_move_rotate::@12
Culled Empty Block (label) play_move_rotate::@13
Culled Empty Block (label) play_collision::@16
Culled Empty Block (label) play_collision::@9
Culled Empty Block (label) play_collision::@11
Culled Empty Block (label) play_collision::@7
Culled Empty Block (label) play_collision::@13
Culled Empty Block (label) play_collision::@19
Culled Empty Block (label) @31
Culled Empty Block (label) play_lock_current::@6
Culled Empty Block (label) @32
Culled Empty Block (label) play_spawn_current::@4
Culled Empty Block (label) play_spawn_current::sid_rnd1_@1
Culled Empty Block (label) play_spawn_current::@6
Culled Empty Block (label) play_spawn_current::@7
Culled Empty Block (label) play_spawn_current::@8
Culled Empty Block (label) @33
Culled Empty Block (label) play_remove_lines::@8
Culled Empty Block (label) play_remove_lines::@12
Culled Empty Block (label) play_remove_lines::@13
Culled Empty Block (label) play_remove_lines::@14
Culled Empty Block (label) play_remove_lines::@15
Culled Empty Block (label) @34
Culled Empty Block (label) play_update_score::@1
Culled Empty Block (label) play_update_score::@4
Culled Empty Block (label) @35
Culled Empty Block (label) play_increase_level::@5
Culled Empty Block (label) @36
Culled Empty Block (label) main::@2
Culled Empty Block (label) main::@21
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@22
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@7
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@9
Culled Empty Block (label) main::@10
Culled Empty Block (label) main::@15
Culled Empty Block (label) main::@14
Culled Empty Block (label) main::@16
Culled Empty Block (label) main::@17
Culled Empty Block (label) main::@18
Culled Empty Block (label) main::@20
Culled Empty Block (label) main::@24

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) PROCPORT_DDR#0 ← ((byte*)) (number) 0
  (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (number) 7
  (byte*) PROCPORT#0 ← ((byte*)) (number) 1
  (byte) PROCPORT_RAM_IO#0 ← (number) 5
  (word) SPRITE_PTRS#0 ← (number) $3f8
  (byte*) SPRITES_XPOS#0 ← ((byte*)) (number) $d000
  (byte*) SPRITES_YPOS#0 ← ((byte*)) (number) $d001
  (byte*) RASTER#0 ← ((byte*)) (number) $d012
  (byte*) SPRITES_ENABLE#0 ← ((byte*)) (number) $d015
  (byte*) SPRITES_EXPAND_Y#0 ← ((byte*)) (number) $d017
  (byte*) SPRITES_MC#0 ← ((byte*)) (number) $d01c
  (byte*) SPRITES_EXPAND_X#0 ← ((byte*)) (number) $d01d
  (byte*) BORDERCOL#0 ← ((byte*)) (number) $d020
  (byte*) BGCOL1#0 ← ((byte*)) (number) $d021
  (byte*) BGCOL2#0 ← ((byte*)) (number) $d022
  (byte*) BGCOL3#0 ← ((byte*)) (number) $d023
  (byte*) BGCOL4#0 ← ((byte*)) (number) $d024
  (byte*) SPRITES_COLS#0 ← ((byte*)) (number) $d027
  (byte*) VIC_CONTROL#0 ← ((byte*)) (number) $d011
  (byte*) D011#0 ← ((byte*)) (number) $d011
  (byte) VIC_ECM#0 ← (number) $40
  (byte) VIC_DEN#0 ← (number) $10
  (byte) VIC_RSEL#0 ← (number) 8
  (byte*) D018#0 ← ((byte*)) (number) $d018
  (byte*) IRQ_STATUS#0 ← ((byte*)) (number) $d019
  (byte*) IRQ_ENABLE#0 ← ((byte*)) (number) $d01a
  (byte) IRQ_RASTER#0 ← (number) 1
  (byte*) COLS#0 ← ((byte*)) (number) $d800
  (byte*) CIA1_PORT_A#0 ← ((byte*)) (number) $dc00
  (byte*) CIA1_PORT_B#0 ← ((byte*)) (number) $dc01
  (byte*) CIA1_INTERRUPT#0 ← ((byte*)) (number) $dc0d
  (byte*) CIA2_PORT_A#0 ← ((byte*)) (number) $dd00
  (byte*) CIA2_PORT_A_DDR#0 ← ((byte*)) (number) $dd02
  (byte) CIA_INTERRUPT_CLEAR#0 ← (number) $7f
  (void()**) HARDWARE_IRQ#0 ← ((void()**)) (number) $fffe
  (byte) BLACK#0 ← (number) 0
  (byte) RED#0 ← (number) 2
  (byte) CYAN#0 ← (number) 3
  (byte) PURPLE#0 ← (number) 4
  (byte) GREEN#0 ← (number) 5
  (byte) BLUE#0 ← (number) 6
  (byte) ORANGE#0 ← (number) 8
  (byte) PINK#0 ← (number) $a
  (byte) DARK_GREY#0 ← (number) $b
  (byte) GREY#0 ← (number) $c
  (byte) LIGHT_GREEN#0 ← (number) $d
  (byte) LIGHT_BLUE#0 ← (number) $e
  to:@4
@4: scope:[]  from @begin
  (byte) KEY_Z#0 ← (number) $c
  (byte) KEY_LSHIFT#0 ← (number) $f
  (byte) KEY_X#0 ← (number) $17
  (byte) KEY_DOT#0 ← (number) $2c
  (byte) KEY_COMMA#0 ← (number) $2f
  (byte) KEY_RSHIFT#0 ← (number) $34
  (byte) KEY_CTRL#0 ← (number) $3a
  (byte) KEY_SPACE#0 ← (number) $3c
  (byte) KEY_COMMODORE#0 ← (number) $3d
  (byte[8]) keyboard_matrix_row_bitmask#0 ← { (number) $fe, (number) $fd, (number) $fb, (number) $f7, (number) $ef, (number) $df, (number) $bf, (number) $7f }
  (byte[8]) keyboard_matrix_col_bitmask#0 ← { (number) 1, (number) 2, (number) 4, (number) 8, (number) $10, (number) $20, (number) $40, (number) $80 }
  to:@8
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@8
  (byte) keyboard_matrix_read::rowid#1 ← phi( keyboard_event_scan::@8/(byte) keyboard_matrix_read::rowid#0 )
  *((byte*) CIA1_PORT_A#0) ← *((byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#1)
  (byte~) keyboard_matrix_read::$0 ← ~ *((byte*) CIA1_PORT_B#0)
  (byte) keyboard_matrix_read::row_pressed_bits#0 ← (byte~) keyboard_matrix_read::$0
  (byte) keyboard_matrix_read::return#0 ← (byte) keyboard_matrix_read::row_pressed_bits#0
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  (byte) keyboard_matrix_read::return#3 ← phi( keyboard_matrix_read/(byte) keyboard_matrix_read::return#0 )
  (byte) keyboard_matrix_read::return#1 ← (byte) keyboard_matrix_read::return#3
  return 
  to:@return
@8: scope:[]  from @4
  (byte[8]) keyboard_events#0 ← { fill( 8, 0) }
  (byte) keyboard_events_size#0 ← (number) 0
  (byte) keyboard_modifiers#0 ← (number) 0
  (byte) KEY_MODIFIER_LSHIFT#0 ← (number) 1
  (byte) KEY_MODIFIER_RSHIFT#0 ← (number) 2
  (byte) KEY_MODIFIER_CTRL#0 ← (number) 4
  (byte) KEY_MODIFIER_COMMODORE#0 ← (number) 8
  (byte[8]) keyboard_scan_values#0 ← { fill( 8, 0) }
  to:@11
keyboard_event_scan: scope:[keyboard_event_scan]  from main::@35
  (byte) keyboard_events_size#53 ← phi( main::@35/(byte) keyboard_events_size#26 )
  (byte) keyboard_event_scan::keycode#0 ← (number) 0
  (byte) keyboard_event_scan::row#0 ← (byte) 0
  to:keyboard_event_scan::@8
keyboard_event_scan::@8: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@10
  (byte) keyboard_events_size#46 ← phi( keyboard_event_scan/(byte) keyboard_events_size#53 keyboard_event_scan::@10/(byte) keyboard_events_size#54 )
  (byte) keyboard_event_scan::keycode#11 ← phi( keyboard_event_scan/(byte) keyboard_event_scan::keycode#0 keyboard_event_scan::@10/(byte) keyboard_event_scan::keycode#13 )
  (byte) keyboard_event_scan::row#2 ← phi( keyboard_event_scan/(byte) keyboard_event_scan::row#0 keyboard_event_scan::@10/(byte) keyboard_event_scan::row#1 )
  (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2
  call keyboard_matrix_read 
  (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#1
  to:keyboard_event_scan::@25
keyboard_event_scan::@25: scope:[keyboard_event_scan]  from keyboard_event_scan::@8
  (byte) keyboard_events_size#37 ← phi( keyboard_event_scan::@8/(byte) keyboard_events_size#46 )
  (byte) keyboard_event_scan::keycode#7 ← phi( keyboard_event_scan::@8/(byte) keyboard_event_scan::keycode#11 )
  (byte) keyboard_event_scan::row#3 ← phi( keyboard_event_scan::@8/(byte) keyboard_event_scan::row#2 )
  (byte) keyboard_matrix_read::return#4 ← phi( keyboard_event_scan::@8/(byte) keyboard_matrix_read::return#2 )
  (byte~) keyboard_event_scan::$12 ← (byte) keyboard_matrix_read::return#4
  (byte) keyboard_event_scan::row_scan#0 ← (byte~) keyboard_event_scan::$12
  (bool~) keyboard_event_scan::$13 ← (byte) keyboard_event_scan::row_scan#0 != *((byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#3)
  if((bool~) keyboard_event_scan::$13) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@21
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@25
  (byte) keyboard_events_size#30 ← phi( keyboard_event_scan::@25/(byte) keyboard_events_size#37 )
  (byte) keyboard_event_scan::keycode#12 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::keycode#7 )
  (byte) keyboard_event_scan::row#9 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::row#3 )
  (byte) keyboard_event_scan::row_scan#5 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::row_scan#0 )
  (byte) keyboard_event_scan::col#0 ← (byte) 0
  to:keyboard_event_scan::@11
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@25
  (byte) keyboard_events_size#61 ← phi( keyboard_event_scan::@25/(byte) keyboard_events_size#37 )
  (byte) keyboard_event_scan::row#7 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::row#3 )
  (byte) keyboard_event_scan::keycode#3 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::keycode#7 )
  (number~) keyboard_event_scan::$14 ← (byte) keyboard_event_scan::keycode#3 + (number) 8
  (byte) keyboard_event_scan::keycode#1 ← (number~) keyboard_event_scan::$14
  to:keyboard_event_scan::@10
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@20 keyboard_event_scan::@21
  (byte) keyboard_events_size#54 ← phi( keyboard_event_scan::@20/(byte) keyboard_events_size#60 keyboard_event_scan::@21/(byte) keyboard_events_size#61 )
  (byte) keyboard_event_scan::keycode#13 ← phi( keyboard_event_scan::@20/(byte) keyboard_event_scan::keycode#14 keyboard_event_scan::@21/(byte) keyboard_event_scan::keycode#1 )
  (byte) keyboard_event_scan::row#4 ← phi( keyboard_event_scan::@20/(byte) keyboard_event_scan::row#6 keyboard_event_scan::@21/(byte) keyboard_event_scan::row#7 )
  (byte) keyboard_event_scan::row#1 ← (byte) keyboard_event_scan::row#4 + rangenext(0,7)
  (bool~) keyboard_event_scan::$25 ← (byte) keyboard_event_scan::row#1 != rangelast(0,7)
  if((bool~) keyboard_event_scan::$25) goto keyboard_event_scan::@8
  to:keyboard_event_scan::@23
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@12 keyboard_event_scan::@9
  (byte) keyboard_events_size#21 ← phi( keyboard_event_scan::@12/(byte) keyboard_events_size#29 keyboard_event_scan::@9/(byte) keyboard_events_size#30 )
  (byte) keyboard_event_scan::keycode#8 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::keycode#2 keyboard_event_scan::@9/(byte) keyboard_event_scan::keycode#12 )
  (byte) keyboard_event_scan::col#2 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::col#1 keyboard_event_scan::@9/(byte) keyboard_event_scan::col#0 )
  (byte) keyboard_event_scan::row#5 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::row#8 keyboard_event_scan::@9/(byte) keyboard_event_scan::row#9 )
  (byte) keyboard_event_scan::row_scan#1 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::row_scan#4 keyboard_event_scan::@9/(byte) keyboard_event_scan::row_scan#5 )
  (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#1 ^ *((byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#5)
  (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2)
  (bool~) keyboard_event_scan::$17 ← (byte~) keyboard_event_scan::$16 != (number) 0
  (bool~) keyboard_event_scan::$18 ← ! (bool~) keyboard_event_scan::$17
  if((bool~) keyboard_event_scan::$18) goto keyboard_event_scan::@12
  to:keyboard_event_scan::@16
keyboard_event_scan::@12: scope:[keyboard_event_scan]  from keyboard_event_scan::@11 keyboard_event_scan::@14 keyboard_event_scan::@16 keyboard_event_scan::@18
  (byte) keyboard_events_size#29 ← phi( keyboard_event_scan::@11/(byte) keyboard_events_size#21 keyboard_event_scan::@14/(byte) keyboard_events_size#1 keyboard_event_scan::@16/(byte) keyboard_events_size#10 keyboard_event_scan::@18/(byte) keyboard_events_size#2 )
  (byte) keyboard_event_scan::row#8 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row#5 keyboard_event_scan::@14/(byte) keyboard_event_scan::row#10 keyboard_event_scan::@16/(byte) keyboard_event_scan::row#11 keyboard_event_scan::@18/(byte) keyboard_event_scan::row#12 )
  (byte) keyboard_event_scan::row_scan#4 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row_scan#1 keyboard_event_scan::@14/(byte) keyboard_event_scan::row_scan#7 keyboard_event_scan::@16/(byte) keyboard_event_scan::row_scan#6 keyboard_event_scan::@18/(byte) keyboard_event_scan::row_scan#8 )
  (byte) keyboard_event_scan::col#3 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::col#2 keyboard_event_scan::@14/(byte) keyboard_event_scan::col#5 keyboard_event_scan::@16/(byte) keyboard_event_scan::col#6 keyboard_event_scan::@18/(byte) keyboard_event_scan::col#7 )
  (byte) keyboard_event_scan::keycode#4 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::keycode#8 keyboard_event_scan::@14/(byte) keyboard_event_scan::keycode#5 keyboard_event_scan::@16/(byte) keyboard_event_scan::keycode#9 keyboard_event_scan::@18/(byte) keyboard_event_scan::keycode#6 )
  (byte) keyboard_event_scan::keycode#2 ← ++ (byte) keyboard_event_scan::keycode#4
  (byte) keyboard_event_scan::col#1 ← (byte) keyboard_event_scan::col#3 + rangenext(0,7)
  (bool~) keyboard_event_scan::$24 ← (byte) keyboard_event_scan::col#1 != rangelast(0,7)
  if((bool~) keyboard_event_scan::$24) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@20
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@11
  (byte) keyboard_event_scan::row#11 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row#5 )
  (byte) keyboard_event_scan::row_scan#6 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row_scan#1 )
  (byte) keyboard_event_scan::col#6 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::col#2 )
  (byte) keyboard_event_scan::keycode#9 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::keycode#8 )
  (byte) keyboard_events_size#10 ← phi( keyboard_event_scan::@11/(byte) keyboard_events_size#21 )
  (bool~) keyboard_event_scan::$19 ← (byte) keyboard_events_size#10 != (number) 8
  (bool~) keyboard_event_scan::$20 ← ! (bool~) keyboard_event_scan::$19
  if((bool~) keyboard_event_scan::$20) goto keyboard_event_scan::@12
  to:keyboard_event_scan::@17
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@16
  (byte) keyboard_event_scan::row#13 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::row#11 )
  (byte) keyboard_events_size#22 ← phi( keyboard_event_scan::@16/(byte) keyboard_events_size#10 )
  (byte) keyboard_event_scan::keycode#10 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::keycode#9 )
  (byte) keyboard_event_scan::col#4 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::col#6 )
  (byte) keyboard_event_scan::row_scan#2 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::row_scan#6 )
  (byte~) keyboard_event_scan::$21 ← (byte) keyboard_event_scan::row_scan#2 & *((byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#4)
  (byte) keyboard_event_scan::event_type#0 ← (byte~) keyboard_event_scan::$21
  (bool~) keyboard_event_scan::$22 ← (byte) keyboard_event_scan::event_type#0 == (number) 0
  if((bool~) keyboard_event_scan::$22) goto keyboard_event_scan::@14
  to:keyboard_event_scan::@18
keyboard_event_scan::@14: scope:[keyboard_event_scan]  from keyboard_event_scan::@17
  (byte) keyboard_event_scan::row#10 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::row#13 )
  (byte) keyboard_event_scan::row_scan#7 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::row_scan#2 )
  (byte) keyboard_event_scan::col#5 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::col#4 )
  (byte) keyboard_events_size#11 ← phi( keyboard_event_scan::@17/(byte) keyboard_events_size#22 )
  (byte) keyboard_event_scan::keycode#5 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::keycode#10 )
  (number~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#5 | (number) $40
  *((byte[8]) keyboard_events#0 + (byte) keyboard_events_size#11) ← (number~) keyboard_event_scan::$23
  (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#11
  to:keyboard_event_scan::@12
keyboard_event_scan::@18: scope:[keyboard_event_scan]  from keyboard_event_scan::@17
  (byte) keyboard_event_scan::row#12 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::row#13 )
  (byte) keyboard_event_scan::row_scan#8 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::row_scan#2 )
  (byte) keyboard_event_scan::col#7 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::col#4 )
  (byte) keyboard_events_size#12 ← phi( keyboard_event_scan::@17/(byte) keyboard_events_size#22 )
  (byte) keyboard_event_scan::keycode#6 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::keycode#10 )
  *((byte[8]) keyboard_events#0 + (byte) keyboard_events_size#12) ← (byte) keyboard_event_scan::keycode#6
  (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#12
  to:keyboard_event_scan::@12
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@12
  (byte) keyboard_events_size#60 ← phi( keyboard_event_scan::@12/(byte) keyboard_events_size#29 )
  (byte) keyboard_event_scan::keycode#14 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::keycode#2 )
  (byte) keyboard_event_scan::row#6 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::row#8 )
  (byte) keyboard_event_scan::row_scan#3 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::row_scan#4 )
  *((byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#6) ← (byte) keyboard_event_scan::row_scan#3
  to:keyboard_event_scan::@10
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  (byte) keyboard_events_size#71 ← phi( keyboard_event_scan::@10/(byte) keyboard_events_size#54 )
  (byte) keyboard_modifiers#1 ← (number) 0
  (byte) keyboard_event_pressed::keycode#0 ← (byte) KEY_LSHIFT#0
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@26
keyboard_event_scan::@26: scope:[keyboard_event_scan]  from keyboard_event_scan::@23
  (byte) keyboard_events_size#67 ← phi( keyboard_event_scan::@23/(byte) keyboard_events_size#71 )
  (byte) keyboard_modifiers#18 ← phi( keyboard_event_scan::@23/(byte) keyboard_modifiers#1 )
  (byte) keyboard_event_pressed::return#7 ← phi( keyboard_event_scan::@23/(byte) keyboard_event_pressed::return#0 )
  (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#7
  (bool~) keyboard_event_scan::$1 ← (byte~) keyboard_event_scan::$0 != (number) 0
  (bool~) keyboard_event_scan::$2 ← ! (bool~) keyboard_event_scan::$1
  if((bool~) keyboard_event_scan::$2) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@24
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan::@24 keyboard_event_scan::@26
  (byte) keyboard_events_size#62 ← phi( keyboard_event_scan::@24/(byte) keyboard_events_size#66 keyboard_event_scan::@26/(byte) keyboard_events_size#67 )
  (byte) keyboard_modifiers#25 ← phi( keyboard_event_scan::@24/(byte) keyboard_modifiers#2 keyboard_event_scan::@26/(byte) keyboard_modifiers#18 )
  (byte) keyboard_event_pressed::keycode#1 ← (byte) KEY_RSHIFT#0
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@27
keyboard_event_scan::@27: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  (byte) keyboard_events_size#55 ← phi( keyboard_event_scan::@1/(byte) keyboard_events_size#62 )
  (byte) keyboard_modifiers#19 ← phi( keyboard_event_scan::@1/(byte) keyboard_modifiers#25 )
  (byte) keyboard_event_pressed::return#8 ← phi( keyboard_event_scan::@1/(byte) keyboard_event_pressed::return#1 )
  (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#8
  (bool~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 != (number) 0
  (bool~) keyboard_event_scan::$5 ← ! (bool~) keyboard_event_scan::$4
  if((bool~) keyboard_event_scan::$5) goto keyboard_event_scan::@2
  to:keyboard_event_scan::@5
keyboard_event_scan::@24: scope:[keyboard_event_scan]  from keyboard_event_scan::@26
  (byte) keyboard_events_size#66 ← phi( keyboard_event_scan::@26/(byte) keyboard_events_size#67 )
  (byte) keyboard_modifiers#10 ← phi( keyboard_event_scan::@26/(byte) keyboard_modifiers#18 )
  (byte~) keyboard_event_scan::$26 ← (byte) keyboard_modifiers#10 | (byte) KEY_MODIFIER_LSHIFT#0
  (byte) keyboard_modifiers#2 ← (byte~) keyboard_event_scan::$26
  to:keyboard_event_scan::@1
keyboard_event_scan::@2: scope:[keyboard_event_scan]  from keyboard_event_scan::@27 keyboard_event_scan::@5
  (byte) keyboard_events_size#47 ← phi( keyboard_event_scan::@27/(byte) keyboard_events_size#55 keyboard_event_scan::@5/(byte) keyboard_events_size#56 )
  (byte) keyboard_modifiers#26 ← phi( keyboard_event_scan::@27/(byte) keyboard_modifiers#19 keyboard_event_scan::@5/(byte) keyboard_modifiers#3 )
  (byte) keyboard_event_pressed::keycode#2 ← (byte) KEY_CTRL#0
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@28
keyboard_event_scan::@28: scope:[keyboard_event_scan]  from keyboard_event_scan::@2
  (byte) keyboard_events_size#38 ← phi( keyboard_event_scan::@2/(byte) keyboard_events_size#47 )
  (byte) keyboard_modifiers#20 ← phi( keyboard_event_scan::@2/(byte) keyboard_modifiers#26 )
  (byte) keyboard_event_pressed::return#9 ← phi( keyboard_event_scan::@2/(byte) keyboard_event_pressed::return#2 )
  (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#9
  (bool~) keyboard_event_scan::$7 ← (byte~) keyboard_event_scan::$6 != (number) 0
  (bool~) keyboard_event_scan::$8 ← ! (bool~) keyboard_event_scan::$7
  if((bool~) keyboard_event_scan::$8) goto keyboard_event_scan::@3
  to:keyboard_event_scan::@6
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@27
  (byte) keyboard_events_size#56 ← phi( keyboard_event_scan::@27/(byte) keyboard_events_size#55 )
  (byte) keyboard_modifiers#11 ← phi( keyboard_event_scan::@27/(byte) keyboard_modifiers#19 )
  (byte~) keyboard_event_scan::$27 ← (byte) keyboard_modifiers#11 | (byte) KEY_MODIFIER_RSHIFT#0
  (byte) keyboard_modifiers#3 ← (byte~) keyboard_event_scan::$27
  to:keyboard_event_scan::@2
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@28 keyboard_event_scan::@6
  (byte) keyboard_events_size#31 ← phi( keyboard_event_scan::@28/(byte) keyboard_events_size#38 keyboard_event_scan::@6/(byte) keyboard_events_size#39 )
  (byte) keyboard_modifiers#27 ← phi( keyboard_event_scan::@28/(byte) keyboard_modifiers#20 keyboard_event_scan::@6/(byte) keyboard_modifiers#4 )
  (byte) keyboard_event_pressed::keycode#3 ← (byte) KEY_COMMODORE#0
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#3 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@29
keyboard_event_scan::@29: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  (byte) keyboard_events_size#23 ← phi( keyboard_event_scan::@3/(byte) keyboard_events_size#31 )
  (byte) keyboard_modifiers#21 ← phi( keyboard_event_scan::@3/(byte) keyboard_modifiers#27 )
  (byte) keyboard_event_pressed::return#10 ← phi( keyboard_event_scan::@3/(byte) keyboard_event_pressed::return#3 )
  (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#10
  (bool~) keyboard_event_scan::$10 ← (byte~) keyboard_event_scan::$9 != (number) 0
  (bool~) keyboard_event_scan::$11 ← ! (bool~) keyboard_event_scan::$10
  if((bool~) keyboard_event_scan::$11) goto keyboard_event_scan::@return
  to:keyboard_event_scan::@7
keyboard_event_scan::@6: scope:[keyboard_event_scan]  from keyboard_event_scan::@28
  (byte) keyboard_events_size#39 ← phi( keyboard_event_scan::@28/(byte) keyboard_events_size#38 )
  (byte) keyboard_modifiers#12 ← phi( keyboard_event_scan::@28/(byte) keyboard_modifiers#20 )
  (byte~) keyboard_event_scan::$28 ← (byte) keyboard_modifiers#12 | (byte) KEY_MODIFIER_CTRL#0
  (byte) keyboard_modifiers#4 ← (byte~) keyboard_event_scan::$28
  to:keyboard_event_scan::@3
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan::@29
  (byte) keyboard_events_size#24 ← phi( keyboard_event_scan::@29/(byte) keyboard_events_size#23 )
  (byte) keyboard_modifiers#13 ← phi( keyboard_event_scan::@29/(byte) keyboard_modifiers#21 )
  (byte~) keyboard_event_scan::$29 ← (byte) keyboard_modifiers#13 | (byte) KEY_MODIFIER_COMMODORE#0
  (byte) keyboard_modifiers#5 ← (byte~) keyboard_event_scan::$29
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@29 keyboard_event_scan::@7
  (byte) keyboard_modifiers#14 ← phi( keyboard_event_scan::@29/(byte) keyboard_modifiers#21 keyboard_event_scan::@7/(byte) keyboard_modifiers#5 )
  (byte) keyboard_events_size#13 ← phi( keyboard_event_scan::@29/(byte) keyboard_events_size#23 keyboard_event_scan::@7/(byte) keyboard_events_size#24 )
  (byte) keyboard_events_size#3 ← (byte) keyboard_events_size#13
  (byte) keyboard_modifiers#6 ← (byte) keyboard_modifiers#14
  return 
  to:@return
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@1 keyboard_event_scan::@2 keyboard_event_scan::@23 keyboard_event_scan::@3 play_move_down::@1
  (byte) keyboard_event_pressed::keycode#5 ← phi( keyboard_event_scan::@1/(byte) keyboard_event_pressed::keycode#1 keyboard_event_scan::@2/(byte) keyboard_event_pressed::keycode#2 keyboard_event_scan::@23/(byte) keyboard_event_pressed::keycode#0 keyboard_event_scan::@3/(byte) keyboard_event_pressed::keycode#3 play_move_down::@1/(byte) keyboard_event_pressed::keycode#4 )
  (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (number) 3
  (byte) keyboard_event_pressed::row_bits#0 ← *((byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0)
  (number~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (number) 7
  (byte~) keyboard_event_pressed::$2 ← (byte) keyboard_event_pressed::row_bits#0 & *((byte[8]) keyboard_matrix_col_bitmask#0 + (number~) keyboard_event_pressed::$1)
  (byte) keyboard_event_pressed::return#4 ← (byte~) keyboard_event_pressed::$2
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  (byte) keyboard_event_pressed::return#11 ← phi( keyboard_event_pressed/(byte) keyboard_event_pressed::return#4 )
  (byte) keyboard_event_pressed::return#5 ← (byte) keyboard_event_pressed::return#11
  return 
  to:@return
keyboard_event_get: scope:[keyboard_event_get]  from main::@36
  (byte) keyboard_events_size#14 ← phi( main::@36/(byte) keyboard_events_size#6 )
  (bool~) keyboard_event_get::$0 ← (byte) keyboard_events_size#14 == (number) 0
  if((bool~) keyboard_event_get::$0) goto keyboard_event_get::@1
  to:keyboard_event_get::@3
keyboard_event_get::@1: scope:[keyboard_event_get]  from keyboard_event_get
  (byte) keyboard_events_size#25 ← phi( keyboard_event_get/(byte) keyboard_events_size#14 )
  (byte) keyboard_event_get::return#0 ← (number) $ff
  to:keyboard_event_get::@return
keyboard_event_get::@3: scope:[keyboard_event_get]  from keyboard_event_get
  (byte) keyboard_events_size#15 ← phi( keyboard_event_get/(byte) keyboard_events_size#14 )
  (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#15
  (byte) keyboard_event_get::return#1 ← *((byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4)
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get::@1 keyboard_event_get::@3
  (byte) keyboard_events_size#16 ← phi( keyboard_event_get::@1/(byte) keyboard_events_size#25 keyboard_event_get::@3/(byte) keyboard_events_size#4 )
  (byte) keyboard_event_get::return#4 ← phi( keyboard_event_get::@1/(byte) keyboard_event_get::return#0 keyboard_event_get::@3/(byte) keyboard_event_get::return#1 )
  (byte) keyboard_event_get::return#2 ← (byte) keyboard_event_get::return#4
  (byte) keyboard_events_size#5 ← (byte) keyboard_events_size#16
  return 
  to:@return
@11: scope:[]  from @8
  (byte) keyboard_modifiers#58 ← phi( @8/(byte) keyboard_modifiers#0 )
  (byte) keyboard_events_size#76 ← phi( @8/(byte) keyboard_events_size#0 )
  (word*) SID_VOICE3_FREQ#0 ← ((word*)) (number) $d40e
  (byte*) SID_VOICE3_CONTROL#0 ← ((byte*)) (number) $d412
  (byte) SID_CONTROL_NOISE#0 ← (number) $80
  (byte*) SID_VOICE3_OSC#0 ← ((byte*)) (number) $d41b
  to:@13
sid_rnd_init: scope:[sid_rnd_init]  from main
  *((word*) SID_VOICE3_FREQ#0) ← (number) $ffff
  *((byte*) SID_VOICE3_CONTROL#0) ← (byte) SID_CONTROL_NOISE#0
  to:sid_rnd_init::@return
sid_rnd_init::@return: scope:[sid_rnd_init]  from sid_rnd_init
  return 
  to:@return
@13: scope:[]  from @11
  (byte) keyboard_modifiers#56 ← phi( @11/(byte) keyboard_modifiers#58 )
  (byte) keyboard_events_size#74 ← phi( @11/(byte) keyboard_events_size#76 )
  (byte*) PLAYFIELD_SCREEN_1#0 ← ((byte*)) (number) $400
  (byte*) PLAYFIELD_SCREEN_2#0 ← ((byte*)) (number) $2c00
  (byte*~) $1 ← (byte*) PLAYFIELD_SCREEN_1#0 + (word) SPRITE_PTRS#0
  (byte*) PLAYFIELD_SPRITE_PTRS_1#0 ← (byte*~) $1
  (byte*~) $2 ← (byte*) PLAYFIELD_SCREEN_2#0 + (word) SPRITE_PTRS#0
  (byte*) PLAYFIELD_SPRITE_PTRS_2#0 ← (byte*~) $2
  (byte*) PLAYFIELD_SCREEN_ORIGINAL#0 ← ((byte*)) (number) $1800
  (byte*) PLAYFIELD_COLORS_ORIGINAL#0 ← ((byte*)) (number) $1c00
  (byte*) PLAYFIELD_SPRITES#0 ← ((byte*)) (number) $2000
  (byte*) PLAYFIELD_CHARSET#0 ← ((byte*)) (number) $2800
  (byte) PLAYFIELD_LINES#0 ← (number) $16
  (byte) PLAYFIELD_COLS#0 ← (number) $a
  (byte~) $3 ← (byte) PLAYFIELD_LINES#0 * (byte) PLAYFIELD_COLS#0
  (byte[$3]) playfield#0 ← { fill( $3, 0) }
  (byte*) current_piece_gfx#0 ← (byte*) 0
  (byte) current_piece_char#0 ← (byte) 0
  (byte) current_xpos#0 ← (byte) 0
  (byte) current_ypos#0 ← (byte) 0
  (byte) render_screen_render#0 ← (number) $20
  (byte) render_screen_show#0 ← (number) 0
  (byte) render_screen_showing#0 ← (number) 0
  (dword) score_bcd#0 ← (number) 0
  (word) lines_bcd#0 ← (number) 0
  (byte) level_bcd#0 ← (number) 0
  (byte) level#0 ← (number) 0
  (byte) game_over#0 ← (number) 0
  kickasm(location (byte*) PLAYFIELD_CHARSET#0) {{ .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "playfield-screen.imap"
 }}
  kickasm(location (byte*) PLAYFIELD_SCREEN_ORIGINAL#0) {{ // Load chars for the screen
  .var screen = LoadBinary("playfield-screen.iscr")
   // Load extended colors for the screen
  .var extended = LoadBinary("playfield-extended.col")
  // screen.get(i)+1 because the charset is loaded into PLAYFIELD_CHARSET+8
  // extended.get(i)-1 because the extended colors are 1-based (1/2/3/4)
  // <<6 to move extended colors to the upper 2 bits
  .fill screen.getSize(), ( (screen.get(i)+1) | (extended.get(i)-1)<<6 )
 }}
  kickasm(location (byte*) PLAYFIELD_COLORS_ORIGINAL#0) {{ .import binary "playfield-screen.col"
 }}
  (byte[]) PIECES_COLORS_1#0 ← { (byte) BLUE#0, (byte) GREEN#0, (byte) PURPLE#0, (byte) BLUE#0, (byte) RED#0, (byte) LIGHT_GREEN#0, (byte) RED#0, (byte) BLUE#0, (byte) LIGHT_BLUE#0, (byte) RED#0, (byte) BLUE#0, (byte) GREEN#0, (byte) PURPLE#0, (byte) BLUE#0, (byte) RED#0, (byte) LIGHT_GREEN#0, (byte) RED#0, (byte) BLUE#0, (byte) LIGHT_BLUE#0, (byte) RED#0, (byte) BLUE#0, (byte) GREEN#0, (byte) PURPLE#0, (byte) BLUE#0, (byte) RED#0, (byte) LIGHT_GREEN#0, (byte) RED#0, (byte) BLUE#0, (byte) LIGHT_BLUE#0, (byte) RED#0 }
  (byte[]) PIECES_COLORS_2#0 ← { (byte) CYAN#0, (byte) LIGHT_GREEN#0, (byte) PINK#0, (byte) LIGHT_GREEN#0, (byte) LIGHT_GREEN#0, (byte) LIGHT_BLUE#0, (byte) DARK_GREY#0, (byte) PURPLE#0, (byte) RED#0, (byte) ORANGE#0, (byte) CYAN#0, (byte) LIGHT_GREEN#0, (byte) PINK#0, (byte) LIGHT_GREEN#0, (byte) LIGHT_GREEN#0, (byte) LIGHT_BLUE#0, (byte) DARK_GREY#0, (byte) PURPLE#0, (byte) RED#0, (byte) ORANGE#0, (byte) CYAN#0, (byte) LIGHT_GREEN#0, (byte) PINK#0, (byte) LIGHT_GREEN#0, (byte) LIGHT_GREEN#0, (byte) LIGHT_BLUE#0, (byte) DARK_GREY#0, (byte) PURPLE#0, (byte) RED#0, (byte) ORANGE#0 }
  (byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 ← { fill( PLAYFIELD_LINES#0, 0) }
  (byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 ← { fill( PLAYFIELD_LINES#0, 0) }
  to:@22
render_init: scope:[render_init]  from main::@25
  (byte*) render_init::vicSelectGfxBank1_gfx#0 ← (byte*) PLAYFIELD_CHARSET#0
  to:render_init::vicSelectGfxBank1
render_init::vicSelectGfxBank1: scope:[render_init]  from render_init
  (byte*) render_init::vicSelectGfxBank1_gfx#1 ← phi( render_init/(byte*) render_init::vicSelectGfxBank1_gfx#0 )
  *((byte*) CIA2_PORT_A_DDR#0) ← (number) 3
  (byte*) render_init::vicSelectGfxBank1_toDd001_gfx#0 ← (byte*) render_init::vicSelectGfxBank1_gfx#1
  to:render_init::vicSelectGfxBank1_toDd001
render_init::vicSelectGfxBank1_toDd001: scope:[render_init]  from render_init::vicSelectGfxBank1
  (byte*) render_init::vicSelectGfxBank1_toDd001_gfx#1 ← phi( render_init::vicSelectGfxBank1/(byte*) render_init::vicSelectGfxBank1_toDd001_gfx#0 )
  (word~) render_init::vicSelectGfxBank1_toDd001_$0#0 ← ((word)) (byte*) render_init::vicSelectGfxBank1_toDd001_gfx#1
  (byte~) render_init::vicSelectGfxBank1_toDd001_$1#0 ← > (word~) render_init::vicSelectGfxBank1_toDd001_$0#0
  (number~) render_init::vicSelectGfxBank1_toDd001_$2#0 ← (byte~) render_init::vicSelectGfxBank1_toDd001_$1#0 / (number) $40
  (number~) render_init::vicSelectGfxBank1_toDd001_$3#0 ← (number) 3 ^ (number~) render_init::vicSelectGfxBank1_toDd001_$2#0
  (byte) render_init::vicSelectGfxBank1_toDd001_return#0 ← (number~) render_init::vicSelectGfxBank1_toDd001_$3#0
  to:render_init::vicSelectGfxBank1_toDd001_@return
render_init::vicSelectGfxBank1_toDd001_@return: scope:[render_init]  from render_init::vicSelectGfxBank1_toDd001
  (byte) render_init::vicSelectGfxBank1_toDd001_return#2 ← phi( render_init::vicSelectGfxBank1_toDd001/(byte) render_init::vicSelectGfxBank1_toDd001_return#0 )
  (byte) render_init::vicSelectGfxBank1_toDd001_return#1 ← (byte) render_init::vicSelectGfxBank1_toDd001_return#2
  to:render_init::vicSelectGfxBank1_@1
render_init::vicSelectGfxBank1_@1: scope:[render_init]  from render_init::vicSelectGfxBank1_toDd001_@return
  (byte) render_init::vicSelectGfxBank1_toDd001_return#3 ← phi( render_init::vicSelectGfxBank1_toDd001_@return/(byte) render_init::vicSelectGfxBank1_toDd001_return#1 )
  (byte~) render_init::vicSelectGfxBank1_$0#0 ← (byte) render_init::vicSelectGfxBank1_toDd001_return#3
  *((byte*) CIA2_PORT_A#0) ← (byte~) render_init::vicSelectGfxBank1_$0#0
  to:render_init::@3
render_init::@3: scope:[render_init]  from render_init::vicSelectGfxBank1_@1
  (byte~) render_init::$1 ← (byte) VIC_ECM#0 | (byte) VIC_DEN#0
  (byte~) render_init::$2 ← (byte~) render_init::$1 | (byte) VIC_RSEL#0
  (number~) render_init::$3 ← (byte~) render_init::$2 | (number) 3
  *((byte*) D011#0) ← (number~) render_init::$3
  *((byte*) BORDERCOL#0) ← (byte) BLACK#0
  *((byte*) BGCOL1#0) ← (byte) BLACK#0
  *((byte*) BGCOL2#0) ← *((byte[]) PIECES_COLORS_1#0 + (number) 0)
  *((byte*) BGCOL3#0) ← *((byte[]) PIECES_COLORS_2#0 + (number) 0)
  *((byte*) BGCOL4#0) ← (byte) GREY#0
  (byte*) render_screen_original::screen#0 ← (byte*) PLAYFIELD_SCREEN_1#0
  call render_screen_original 
  to:render_init::@4
render_init::@4: scope:[render_init]  from render_init::@3
  (byte*) render_screen_original::screen#1 ← (byte*) PLAYFIELD_SCREEN_2#0
  call render_screen_original 
  to:render_init::@5
render_init::@5: scope:[render_init]  from render_init::@4
  (byte*~) render_init::$6 ← (byte*) PLAYFIELD_SCREEN_1#0 + (number) 2*(number) $28
  (byte*~) render_init::$7 ← (byte*~) render_init::$6 + (number) $10
  (byte*) render_init::li_1#0 ← (byte*~) render_init::$7
  (byte*~) render_init::$8 ← (byte*) PLAYFIELD_SCREEN_2#0 + (number) 2*(number) $28
  (byte*~) render_init::$9 ← (byte*~) render_init::$8 + (number) $10
  (byte*) render_init::li_2#0 ← (byte*~) render_init::$9
  (number~) render_init::$10 ← (byte) PLAYFIELD_LINES#0 - (number) 1
  (byte) render_init::i#0 ← (byte) 0
  to:render_init::@1
render_init::@1: scope:[render_init]  from render_init::@1 render_init::@5
  (byte*) render_init::li_2#2 ← phi( render_init::@1/(byte*) render_init::li_2#1 render_init::@5/(byte*) render_init::li_2#0 )
  (byte*) render_init::li_1#2 ← phi( render_init::@1/(byte*) render_init::li_1#1 render_init::@5/(byte*) render_init::li_1#0 )
  (byte) render_init::i#2 ← phi( render_init::@1/(byte) render_init::i#1 render_init::@5/(byte) render_init::i#0 )
  (byte~) render_init::$12 ← (byte) render_init::i#2 * (const byte) SIZEOF_POINTER
  *((byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_init::$12) ← (byte*) render_init::li_1#2
  (byte~) render_init::$13 ← (byte) render_init::i#2 * (const byte) SIZEOF_POINTER
  *((byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 + (byte~) render_init::$13) ← (byte*) render_init::li_2#2
  (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (number) $28
  (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (number) $28
  (byte) render_init::i#1 ← (byte) render_init::i#2 + rangenext(0,render_init::$10)
  (bool~) render_init::$11 ← (byte) render_init::i#1 != rangelast(0,render_init::$10)
  if((bool~) render_init::$11) goto render_init::@1
  to:render_init::@2
render_init::@2: scope:[render_init]  from render_init::@1
  (byte) render_screen_show#1 ← (number) 0
  (byte) render_screen_render#1 ← (number) $20
  to:render_init::@return
render_init::@return: scope:[render_init]  from render_init::@2
  (byte) render_screen_render#9 ← phi( render_init::@2/(byte) render_screen_render#1 )
  (byte) render_screen_show#9 ← phi( render_init::@2/(byte) render_screen_show#1 )
  (byte) render_screen_show#2 ← (byte) render_screen_show#9
  (byte) render_screen_render#2 ← (byte) render_screen_render#9
  return 
  to:@return
render_show: scope:[render_show]  from main::@6
  (byte) level#84 ← phi( main::@6/(byte) level#90 )
  (byte) render_screen_show#10 ← phi( main::@6/(byte) render_screen_show#18 )
  (byte) render_show::d018val#0 ← (number) 0
  (bool~) render_show::$0 ← (byte) render_screen_show#10 == (number) 0
  if((bool~) render_show::$0) goto render_show::@1
  to:render_show::@3
render_show::@1: scope:[render_show]  from render_show
  (byte) render_screen_show#40 ← phi( render_show/(byte) render_screen_show#10 )
  (byte) level#70 ← phi( render_show/(byte) level#84 )
  (byte*) render_show::toD0181_screen#0 ← (byte*) PLAYFIELD_SCREEN_1#0
  (byte*) render_show::toD0181_gfx#0 ← (byte*) PLAYFIELD_CHARSET#0
  to:render_show::toD0181
render_show::toD0181: scope:[render_show]  from render_show::@1
  (byte) render_screen_show#33 ← phi( render_show::@1/(byte) render_screen_show#40 )
  (byte) level#56 ← phi( render_show::@1/(byte) level#70 )
  (byte*) render_show::toD0181_gfx#1 ← phi( render_show::@1/(byte*) render_show::toD0181_gfx#0 )
  (byte*) render_show::toD0181_screen#1 ← phi( render_show::@1/(byte*) render_show::toD0181_screen#0 )
  (word~) render_show::toD0181_$0#0 ← ((word)) (byte*) render_show::toD0181_screen#1
  (number~) render_show::toD0181_$1#0 ← (word~) render_show::toD0181_$0#0 & (number) $3fff
  (number~) render_show::toD0181_$2#0 ← (number~) render_show::toD0181_$1#0 * (number) 4
  (number~) render_show::toD0181_$3#0 ← > (number~) render_show::toD0181_$2#0
  (word~) render_show::toD0181_$4#0 ← ((word)) (byte*) render_show::toD0181_gfx#1
  (byte~) render_show::toD0181_$5#0 ← > (word~) render_show::toD0181_$4#0
  (number~) render_show::toD0181_$6#0 ← (byte~) render_show::toD0181_$5#0 / (number) 4
  (number~) render_show::toD0181_$7#0 ← (number~) render_show::toD0181_$6#0 & (number) $f
  (number~) render_show::toD0181_$8#0 ← (number~) render_show::toD0181_$3#0 | (number~) render_show::toD0181_$7#0
  (byte) render_show::toD0181_return#0 ← (number~) render_show::toD0181_$8#0
  to:render_show::toD0181_@return
render_show::toD0181_@return: scope:[render_show]  from render_show::toD0181
  (byte) render_screen_show#25 ← phi( render_show::toD0181/(byte) render_screen_show#33 )
  (byte) level#42 ← phi( render_show::toD0181/(byte) level#56 )
  (byte) render_show::toD0181_return#2 ← phi( render_show::toD0181/(byte) render_show::toD0181_return#0 )
  (byte) render_show::toD0181_return#1 ← (byte) render_show::toD0181_return#2
  to:render_show::@5
render_show::@5: scope:[render_show]  from render_show::toD0181_@return
  (byte) render_screen_show#19 ← phi( render_show::toD0181_@return/(byte) render_screen_show#25 )
  (byte) level#26 ← phi( render_show::toD0181_@return/(byte) level#42 )
  (byte) render_show::toD0181_return#3 ← phi( render_show::toD0181_@return/(byte) render_show::toD0181_return#1 )
  (byte~) render_show::$2 ← (byte) render_show::toD0181_return#3
  (byte) render_show::d018val#1 ← (byte~) render_show::$2
  to:render_show::@2
render_show::@3: scope:[render_show]  from render_show
  (byte) render_screen_show#41 ← phi( render_show/(byte) render_screen_show#10 )
  (byte) level#71 ← phi( render_show/(byte) level#84 )
  (byte*) render_show::toD0182_screen#0 ← (byte*) PLAYFIELD_SCREEN_2#0
  (byte*) render_show::toD0182_gfx#0 ← (byte*) PLAYFIELD_CHARSET#0
  to:render_show::toD0182
render_show::toD0182: scope:[render_show]  from render_show::@3
  (byte) render_screen_show#34 ← phi( render_show::@3/(byte) render_screen_show#41 )
  (byte) level#57 ← phi( render_show::@3/(byte) level#71 )
  (byte*) render_show::toD0182_gfx#1 ← phi( render_show::@3/(byte*) render_show::toD0182_gfx#0 )
  (byte*) render_show::toD0182_screen#1 ← phi( render_show::@3/(byte*) render_show::toD0182_screen#0 )
  (word~) render_show::toD0182_$0#0 ← ((word)) (byte*) render_show::toD0182_screen#1
  (number~) render_show::toD0182_$1#0 ← (word~) render_show::toD0182_$0#0 & (number) $3fff
  (number~) render_show::toD0182_$2#0 ← (number~) render_show::toD0182_$1#0 * (number) 4
  (number~) render_show::toD0182_$3#0 ← > (number~) render_show::toD0182_$2#0
  (word~) render_show::toD0182_$4#0 ← ((word)) (byte*) render_show::toD0182_gfx#1
  (byte~) render_show::toD0182_$5#0 ← > (word~) render_show::toD0182_$4#0
  (number~) render_show::toD0182_$6#0 ← (byte~) render_show::toD0182_$5#0 / (number) 4
  (number~) render_show::toD0182_$7#0 ← (number~) render_show::toD0182_$6#0 & (number) $f
  (number~) render_show::toD0182_$8#0 ← (number~) render_show::toD0182_$3#0 | (number~) render_show::toD0182_$7#0
  (byte) render_show::toD0182_return#0 ← (number~) render_show::toD0182_$8#0
  to:render_show::toD0182_@return
render_show::toD0182_@return: scope:[render_show]  from render_show::toD0182
  (byte) render_screen_show#26 ← phi( render_show::toD0182/(byte) render_screen_show#34 )
  (byte) level#43 ← phi( render_show::toD0182/(byte) level#57 )
  (byte) render_show::toD0182_return#2 ← phi( render_show::toD0182/(byte) render_show::toD0182_return#0 )
  (byte) render_show::toD0182_return#1 ← (byte) render_show::toD0182_return#2
  to:render_show::@6
render_show::@6: scope:[render_show]  from render_show::toD0182_@return
  (byte) render_screen_show#20 ← phi( render_show::toD0182_@return/(byte) render_screen_show#26 )
  (byte) level#27 ← phi( render_show::toD0182_@return/(byte) level#43 )
  (byte) render_show::toD0182_return#3 ← phi( render_show::toD0182_@return/(byte) render_show::toD0182_return#1 )
  (byte~) render_show::$1 ← (byte) render_show::toD0182_return#3
  (byte) render_show::d018val#2 ← (byte~) render_show::$1
  to:render_show::@2
render_show::@2: scope:[render_show]  from render_show::@5 render_show::@6
  (byte) render_screen_show#11 ← phi( render_show::@5/(byte) render_screen_show#19 render_show::@6/(byte) render_screen_show#20 )
  (byte) level#12 ← phi( render_show::@5/(byte) level#26 render_show::@6/(byte) level#27 )
  (byte) render_show::d018val#3 ← phi( render_show::@5/(byte) render_show::d018val#1 render_show::@6/(byte) render_show::d018val#2 )
  *((byte*) D018#0) ← (byte) render_show::d018val#3
  *((byte*) BGCOL2#0) ← *((byte[]) PIECES_COLORS_1#0 + (byte) level#12)
  *((byte*) BGCOL3#0) ← *((byte[]) PIECES_COLORS_2#0 + (byte) level#12)
  (byte) render_screen_showing#1 ← (byte) render_screen_show#11
  to:render_show::@return
render_show::@return: scope:[render_show]  from render_show::@2
  (byte) render_screen_showing#6 ← phi( render_show::@2/(byte) render_screen_showing#1 )
  (byte) render_screen_showing#2 ← (byte) render_screen_showing#6
  return 
  to:@return
render_screen_swap: scope:[render_screen_swap]  from main::@42
  (byte) render_screen_show#12 ← phi( main::@42/(byte) render_screen_show#21 )
  (byte) render_screen_render#10 ← phi( main::@42/(byte) render_screen_render#20 )
  (byte) render_screen_render#3 ← (byte) render_screen_render#10 ^ (number) $20
  (byte) render_screen_show#3 ← (byte) render_screen_show#12 ^ (number) $20
  to:render_screen_swap::@return
render_screen_swap::@return: scope:[render_screen_swap]  from render_screen_swap
  (byte) render_screen_show#13 ← phi( render_screen_swap/(byte) render_screen_show#3 )
  (byte) render_screen_render#11 ← phi( render_screen_swap/(byte) render_screen_render#3 )
  (byte) render_screen_render#4 ← (byte) render_screen_render#11
  (byte) render_screen_show#4 ← (byte) render_screen_show#13
  return 
  to:@return
render_score: scope:[render_score]  from main::@41
  (byte) level_bcd#91 ← phi( main::@41/(byte) level_bcd#76 )
  (word) lines_bcd#67 ← phi( main::@41/(word) lines_bcd#66 )
  (dword) score_bcd#33 ← phi( main::@41/(dword) score_bcd#45 )
  (byte) render_screen_render#12 ← phi( main::@41/(byte) render_screen_render#21 )
  (byte*) render_score::screen#0 ← (byte*) 0
  (bool~) render_score::$0 ← (byte) render_screen_render#12 == (number) 0
  if((bool~) render_score::$0) goto render_score::@1
  to:render_score::@3
render_score::@1: scope:[render_score]  from render_score
  (byte) level_bcd#83 ← phi( render_score/(byte) level_bcd#91 )
  (word) lines_bcd#56 ← phi( render_score/(word) lines_bcd#67 )
  (dword) score_bcd#20 ← phi( render_score/(dword) score_bcd#33 )
  (byte*) render_score::screen#1 ← (byte*) PLAYFIELD_SCREEN_1#0
  to:render_score::@2
render_score::@3: scope:[render_score]  from render_score
  (byte) level_bcd#84 ← phi( render_score/(byte) level_bcd#91 )
  (word) lines_bcd#57 ← phi( render_score/(word) lines_bcd#67 )
  (dword) score_bcd#21 ← phi( render_score/(dword) score_bcd#33 )
  (byte*) render_score::screen#2 ← (byte*) PLAYFIELD_SCREEN_2#0
  to:render_score::@2
render_score::@2: scope:[render_score]  from render_score::@1 render_score::@3
  (byte) level_bcd#77 ← phi( render_score::@1/(byte) level_bcd#83 render_score::@3/(byte) level_bcd#84 )
  (word) lines_bcd#45 ← phi( render_score::@1/(word) lines_bcd#56 render_score::@3/(word) lines_bcd#57 )
  (byte*) render_score::screen#3 ← phi( render_score::@1/(byte*) render_score::screen#1 render_score::@3/(byte*) render_score::screen#2 )
  (dword) score_bcd#10 ← phi( render_score::@1/(dword) score_bcd#20 render_score::@3/(dword) score_bcd#21 )
  (dword*~) render_score::$1 ← & (dword) score_bcd#10
  (byte*~) render_score::$2 ← ((byte*)) (dword*~) render_score::$1
  (byte*) render_score::score_bytes#0 ← (byte*~) render_score::$2
  (word) render_score::score_offset#0 ← (number) $28*(number) 5+(number) $1c
  (byte*) render_bcd::screen#0 ← (byte*) render_score::screen#3
  (word) render_bcd::offset#0 ← (word) render_score::score_offset#0
  (byte) render_bcd::bcd#0 ← *((byte*) render_score::score_bytes#0 + (number) 2)
  (byte) render_bcd::only_low#0 ← (number) 0
  call render_bcd 
  to:render_score::@5
render_score::@5: scope:[render_score]  from render_score::@2
  (byte) level_bcd#67 ← phi( render_score::@2/(byte) level_bcd#77 )
  (word) lines_bcd#33 ← phi( render_score::@2/(word) lines_bcd#45 )
  (byte*) render_score::score_bytes#1 ← phi( render_score::@2/(byte*) render_score::score_bytes#0 )
  (byte*) render_score::screen#4 ← phi( render_score::@2/(byte*) render_score::screen#3 )
  (number~) render_score::$4 ← (word) render_score::score_offset#0 + (number) 2
  (byte*) render_bcd::screen#1 ← (byte*) render_score::screen#4
  (word) render_bcd::offset#1 ← (number~) render_score::$4
  (byte) render_bcd::bcd#1 ← *((byte*) render_score::score_bytes#1 + (number) 1)
  (byte) render_bcd::only_low#1 ← (number) 0
  call render_bcd 
  to:render_score::@6
render_score::@6: scope:[render_score]  from render_score::@5
  (byte) level_bcd#55 ← phi( render_score::@5/(byte) level_bcd#67 )
  (word) lines_bcd#21 ← phi( render_score::@5/(word) lines_bcd#33 )
  (byte*) render_score::score_bytes#2 ← phi( render_score::@5/(byte*) render_score::score_bytes#1 )
  (byte*) render_score::screen#5 ← phi( render_score::@5/(byte*) render_score::screen#4 )
  (number~) render_score::$6 ← (word) render_score::score_offset#0 + (number) 4
  (byte*) render_bcd::screen#2 ← (byte*) render_score::screen#5
  (word) render_bcd::offset#2 ← (number~) render_score::$6
  (byte) render_bcd::bcd#2 ← *((byte*) render_score::score_bytes#2 + (number) 0)
  (byte) render_bcd::only_low#2 ← (number) 0
  call render_bcd 
  to:render_score::@7
render_score::@7: scope:[render_score]  from render_score::@6
  (byte) level_bcd#42 ← phi( render_score::@6/(byte) level_bcd#55 )
  (byte*) render_score::screen#6 ← phi( render_score::@6/(byte*) render_score::screen#5 )
  (word) lines_bcd#10 ← phi( render_score::@6/(word) lines_bcd#21 )
  (word) render_score::lines_offset#0 ← (number) $28*(number) 1+(number) $16
  (byte~) render_score::$8 ← > (word) lines_bcd#10
  (byte*) render_bcd::screen#3 ← (byte*) render_score::screen#6
  (word) render_bcd::offset#3 ← (word) render_score::lines_offset#0
  (byte) render_bcd::bcd#3 ← (byte~) render_score::$8
  (byte) render_bcd::only_low#3 ← (number) 1
  call render_bcd 
  to:render_score::@8
render_score::@8: scope:[render_score]  from render_score::@7
  (byte) level_bcd#26 ← phi( render_score::@7/(byte) level_bcd#42 )
  (byte*) render_score::screen#7 ← phi( render_score::@7/(byte*) render_score::screen#6 )
  (word) lines_bcd#11 ← phi( render_score::@7/(word) lines_bcd#10 )
  (number~) render_score::$10 ← (word) render_score::lines_offset#0 + (number) 1
  (byte~) render_score::$11 ← < (word) lines_bcd#11
  (byte*) render_bcd::screen#4 ← (byte*) render_score::screen#7
  (word) render_bcd::offset#4 ← (number~) render_score::$10
  (byte) render_bcd::bcd#4 ← (byte~) render_score::$11
  (byte) render_bcd::only_low#4 ← (number) 0
  call render_bcd 
  to:render_score::@9
render_score::@9: scope:[render_score]  from render_score::@8
  (byte) level_bcd#13 ← phi( render_score::@8/(byte) level_bcd#26 )
  (byte*) render_score::screen#8 ← phi( render_score::@8/(byte*) render_score::screen#7 )
  (word) render_score::level_offset#0 ← (number) $28*(number) $13+(number) $1f
  (byte*) render_bcd::screen#5 ← (byte*) render_score::screen#8
  (word) render_bcd::offset#5 ← (word) render_score::level_offset#0
  (byte) render_bcd::bcd#5 ← (byte) level_bcd#13
  (byte) render_bcd::only_low#5 ← (number) 0
  call render_bcd 
  to:render_score::@10
render_score::@10: scope:[render_score]  from render_score::@9
  to:render_score::@return
render_score::@return: scope:[render_score]  from render_score::@10
  return 
  to:@return
render_bcd: scope:[render_bcd]  from render_score::@2 render_score::@5 render_score::@6 render_score::@7 render_score::@8 render_score::@9
  (byte) render_bcd::bcd#8 ← phi( render_score::@2/(byte) render_bcd::bcd#0 render_score::@5/(byte) render_bcd::bcd#1 render_score::@6/(byte) render_bcd::bcd#2 render_score::@7/(byte) render_bcd::bcd#3 render_score::@8/(byte) render_bcd::bcd#4 render_score::@9/(byte) render_bcd::bcd#5 )
  (byte) render_bcd::only_low#6 ← phi( render_score::@2/(byte) render_bcd::only_low#0 render_score::@5/(byte) render_bcd::only_low#1 render_score::@6/(byte) render_bcd::only_low#2 render_score::@7/(byte) render_bcd::only_low#3 render_score::@8/(byte) render_bcd::only_low#4 render_score::@9/(byte) render_bcd::only_low#5 )
  (word) render_bcd::offset#6 ← phi( render_score::@2/(word) render_bcd::offset#0 render_score::@5/(word) render_bcd::offset#1 render_score::@6/(word) render_bcd::offset#2 render_score::@7/(word) render_bcd::offset#3 render_score::@8/(word) render_bcd::offset#4 render_score::@9/(word) render_bcd::offset#5 )
  (byte*) render_bcd::screen#6 ← phi( render_score::@2/(byte*) render_bcd::screen#0 render_score::@5/(byte*) render_bcd::screen#1 render_score::@6/(byte*) render_bcd::screen#2 render_score::@7/(byte*) render_bcd::screen#3 render_score::@8/(byte*) render_bcd::screen#4 render_score::@9/(byte*) render_bcd::screen#5 )
  (byte) render_bcd::ZERO_CHAR#0 ← (number) $35
  (byte*~) render_bcd::$0 ← (byte*) render_bcd::screen#6 + (word) render_bcd::offset#6
  (byte*) render_bcd::screen_pos#0 ← (byte*~) render_bcd::$0
  (bool~) render_bcd::$1 ← (byte) render_bcd::only_low#6 == (number) 0
  (bool~) render_bcd::$2 ← ! (bool~) render_bcd::$1
  if((bool~) render_bcd::$2) goto render_bcd::@1
  to:render_bcd::@2
render_bcd::@1: scope:[render_bcd]  from render_bcd render_bcd::@2
  (byte*) render_bcd::screen_pos#3 ← phi( render_bcd/(byte*) render_bcd::screen_pos#0 render_bcd::@2/(byte*) render_bcd::screen_pos#2 )
  (byte) render_bcd::bcd#6 ← phi( render_bcd/(byte) render_bcd::bcd#8 render_bcd::@2/(byte) render_bcd::bcd#7 )
  (number~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (number) $f
  (number~) render_bcd::$4 ← (byte) render_bcd::ZERO_CHAR#0 + (number~) render_bcd::$3
  *((byte*) render_bcd::screen_pos#3) ← (number~) render_bcd::$4
  (byte*) render_bcd::screen_pos#1 ← ++ (byte*) render_bcd::screen_pos#3
  to:render_bcd::@return
render_bcd::@2: scope:[render_bcd]  from render_bcd
  (byte*) render_bcd::screen_pos#4 ← phi( render_bcd/(byte*) render_bcd::screen_pos#0 )
  (byte) render_bcd::bcd#7 ← phi( render_bcd/(byte) render_bcd::bcd#8 )
  (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#7 >> (number) 4
  (byte~) render_bcd::$6 ← (byte) render_bcd::ZERO_CHAR#0 + (byte~) render_bcd::$5
  *((byte*) render_bcd::screen_pos#4) ← (byte~) render_bcd::$6
  (byte*) render_bcd::screen_pos#2 ← ++ (byte*) render_bcd::screen_pos#4
  to:render_bcd::@1
render_bcd::@return: scope:[render_bcd]  from render_bcd::@1
  return 
  to:@return
render_screen_original: scope:[render_screen_original]  from render_init::@3 render_init::@4
  (byte*) render_screen_original::screen#9 ← phi( render_init::@3/(byte*) render_screen_original::screen#0 render_init::@4/(byte*) render_screen_original::screen#1 )
  (byte) render_screen_original::SPACE#0 ← (number) 0
  (byte*~) render_screen_original::$0 ← (byte*) PLAYFIELD_SCREEN_ORIGINAL#0 + (number) $20*(number) 2
  (byte*) render_screen_original::oscr#0 ← (byte*~) render_screen_original::$0
  (byte*~) render_screen_original::$1 ← (byte*) PLAYFIELD_COLORS_ORIGINAL#0 + (number) $20*(number) 2
  (byte*) render_screen_original::ocols#0 ← (byte*~) render_screen_original::$1
  (byte*) render_screen_original::cols#0 ← (byte*) COLS#0
  (byte) render_screen_original::y#0 ← (byte) 0
  to:render_screen_original::@1
render_screen_original::@1: scope:[render_screen_original]  from render_screen_original render_screen_original::@7
  (byte) render_screen_original::y#6 ← phi( render_screen_original/(byte) render_screen_original::y#0 render_screen_original::@7/(byte) render_screen_original::y#1 )
  (byte*) render_screen_original::ocols#4 ← phi( render_screen_original/(byte*) render_screen_original::ocols#0 render_screen_original::@7/(byte*) render_screen_original::ocols#5 )
  (byte*) render_screen_original::oscr#4 ← phi( render_screen_original/(byte*) render_screen_original::oscr#0 render_screen_original::@7/(byte*) render_screen_original::oscr#5 )
  (byte*) render_screen_original::cols#7 ← phi( render_screen_original/(byte*) render_screen_original::cols#0 render_screen_original::@7/(byte*) render_screen_original::cols#8 )
  (byte*) render_screen_original::screen#8 ← phi( render_screen_original/(byte*) render_screen_original::screen#9 render_screen_original::@7/(byte*) render_screen_original::screen#10 )
  (byte) render_screen_original::x#0 ← (number) 0
  to:render_screen_original::@2
render_screen_original::@2: scope:[render_screen_original]  from render_screen_original::@1 render_screen_original::@2
  (byte) render_screen_original::y#5 ← phi( render_screen_original::@1/(byte) render_screen_original::y#6 render_screen_original::@2/(byte) render_screen_original::y#5 )
  (byte*) render_screen_original::ocols#3 ← phi( render_screen_original::@1/(byte*) render_screen_original::ocols#4 render_screen_original::@2/(byte*) render_screen_original::ocols#3 )
  (byte*) render_screen_original::oscr#3 ← phi( render_screen_original::@1/(byte*) render_screen_original::oscr#4 render_screen_original::@2/(byte*) render_screen_original::oscr#3 )
  (byte) render_screen_original::x#4 ← phi( render_screen_original::@1/(byte) render_screen_original::x#0 render_screen_original::@2/(byte) render_screen_original::x#1 )
  (byte*) render_screen_original::cols#4 ← phi( render_screen_original::@1/(byte*) render_screen_original::cols#7 render_screen_original::@2/(byte*) render_screen_original::cols#1 )
  (byte*) render_screen_original::screen#5 ← phi( render_screen_original::@1/(byte*) render_screen_original::screen#8 render_screen_original::@2/(byte*) render_screen_original::screen#2 )
  *((byte*) render_screen_original::screen#5) ← (byte) render_screen_original::SPACE#0
  (byte*) render_screen_original::screen#2 ← ++ (byte*) render_screen_original::screen#5
  *((byte*) render_screen_original::cols#4) ← (byte) BLACK#0
  (byte*) render_screen_original::cols#1 ← ++ (byte*) render_screen_original::cols#4
  (byte) render_screen_original::x#1 ← ++ (byte) render_screen_original::x#4
  (bool~) render_screen_original::$2 ← (byte) render_screen_original::x#1 != (number) 4
  if((bool~) render_screen_original::$2) goto render_screen_original::@2
  to:render_screen_original::@4
render_screen_original::@4: scope:[render_screen_original]  from render_screen_original::@2 render_screen_original::@4
  (byte) render_screen_original::y#4 ← phi( render_screen_original::@2/(byte) render_screen_original::y#5 render_screen_original::@4/(byte) render_screen_original::y#4 )
  (byte) render_screen_original::x#5 ← phi( render_screen_original::@2/(byte) render_screen_original::x#1 render_screen_original::@4/(byte) render_screen_original::x#2 )
  (byte*) render_screen_original::cols#5 ← phi( render_screen_original::@2/(byte*) render_screen_original::cols#1 render_screen_original::@4/(byte*) render_screen_original::cols#2 )
  (byte*) render_screen_original::ocols#2 ← phi( render_screen_original::@2/(byte*) render_screen_original::ocols#3 render_screen_original::@4/(byte*) render_screen_original::ocols#1 )
  (byte*) render_screen_original::screen#6 ← phi( render_screen_original::@2/(byte*) render_screen_original::screen#2 render_screen_original::@4/(byte*) render_screen_original::screen#3 )
  (byte*) render_screen_original::oscr#2 ← phi( render_screen_original::@2/(byte*) render_screen_original::oscr#3 render_screen_original::@4/(byte*) render_screen_original::oscr#1 )
  *((byte*) render_screen_original::screen#6) ← *((byte*) render_screen_original::oscr#2)
  (byte*) render_screen_original::screen#3 ← ++ (byte*) render_screen_original::screen#6
  (byte*) render_screen_original::oscr#1 ← ++ (byte*) render_screen_original::oscr#2
  *((byte*) render_screen_original::cols#5) ← *((byte*) render_screen_original::ocols#2)
  (byte*) render_screen_original::cols#2 ← ++ (byte*) render_screen_original::cols#5
  (byte*) render_screen_original::ocols#1 ← ++ (byte*) render_screen_original::ocols#2
  (byte) render_screen_original::x#2 ← ++ (byte) render_screen_original::x#5
  (bool~) render_screen_original::$3 ← (byte) render_screen_original::x#2 != (number) $24
  if((bool~) render_screen_original::$3) goto render_screen_original::@4
  to:render_screen_original::@6
render_screen_original::@6: scope:[render_screen_original]  from render_screen_original::@4 render_screen_original::@6
  (byte*) render_screen_original::ocols#6 ← phi( render_screen_original::@4/(byte*) render_screen_original::ocols#1 render_screen_original::@6/(byte*) render_screen_original::ocols#6 )
  (byte*) render_screen_original::oscr#6 ← phi( render_screen_original::@4/(byte*) render_screen_original::oscr#1 render_screen_original::@6/(byte*) render_screen_original::oscr#6 )
  (byte) render_screen_original::y#3 ← phi( render_screen_original::@4/(byte) render_screen_original::y#4 render_screen_original::@6/(byte) render_screen_original::y#3 )
  (byte) render_screen_original::x#6 ← phi( render_screen_original::@4/(byte) render_screen_original::x#2 render_screen_original::@6/(byte) render_screen_original::x#3 )
  (byte*) render_screen_original::cols#6 ← phi( render_screen_original::@4/(byte*) render_screen_original::cols#2 render_screen_original::@6/(byte*) render_screen_original::cols#3 )
  (byte*) render_screen_original::screen#7 ← phi( render_screen_original::@4/(byte*) render_screen_original::screen#3 render_screen_original::@6/(byte*) render_screen_original::screen#4 )
  *((byte*) render_screen_original::screen#7) ← (byte) render_screen_original::SPACE#0
  (byte*) render_screen_original::screen#4 ← ++ (byte*) render_screen_original::screen#7
  *((byte*) render_screen_original::cols#6) ← (byte) BLACK#0
  (byte*) render_screen_original::cols#3 ← ++ (byte*) render_screen_original::cols#6
  (byte) render_screen_original::x#3 ← ++ (byte) render_screen_original::x#6
  (bool~) render_screen_original::$4 ← (byte) render_screen_original::x#3 != (number) $28
  if((bool~) render_screen_original::$4) goto render_screen_original::@6
  to:render_screen_original::@7
render_screen_original::@7: scope:[render_screen_original]  from render_screen_original::@6
  (byte*) render_screen_original::ocols#5 ← phi( render_screen_original::@6/(byte*) render_screen_original::ocols#6 )
  (byte*) render_screen_original::oscr#5 ← phi( render_screen_original::@6/(byte*) render_screen_original::oscr#6 )
  (byte*) render_screen_original::cols#8 ← phi( render_screen_original::@6/(byte*) render_screen_original::cols#3 )
  (byte*) render_screen_original::screen#10 ← phi( render_screen_original::@6/(byte*) render_screen_original::screen#4 )
  (byte) render_screen_original::y#2 ← phi( render_screen_original::@6/(byte) render_screen_original::y#3 )
  (byte) render_screen_original::y#1 ← (byte) render_screen_original::y#2 + rangenext(0,$18)
  (bool~) render_screen_original::$5 ← (byte) render_screen_original::y#1 != rangelast(0,$18)
  if((bool~) render_screen_original::$5) goto render_screen_original::@1
  to:render_screen_original::@return
render_screen_original::@return: scope:[render_screen_original]  from render_screen_original::@7
  return 
  to:@return
render_playfield: scope:[render_playfield]  from main::@23 main::@31
  (byte) render_screen_render#22 ← phi( main::@23/(byte) render_screen_render#30 main::@31/(byte) render_screen_render#31 )
  (number~) render_playfield::$0 ← (byte) PLAYFIELD_COLS#0 * (number) 2
  (byte) render_playfield::i#0 ← (number~) render_playfield::$0
  (number~) render_playfield::$1 ← (byte) PLAYFIELD_LINES#0 - (number) 1
  (byte) render_playfield::l#0 ← (byte) 2
  to:render_playfield::@1
render_playfield::@1: scope:[render_playfield]  from render_playfield render_playfield::@3
  (byte) render_playfield::i#3 ← phi( render_playfield/(byte) render_playfield::i#0 render_playfield::@3/(byte) render_playfield::i#4 )
  (byte) render_playfield::l#2 ← phi( render_playfield/(byte) render_playfield::l#0 render_playfield::@3/(byte) render_playfield::l#1 )
  (byte) render_screen_render#13 ← phi( render_playfield/(byte) render_screen_render#22 render_playfield::@3/(byte) render_screen_render#23 )
  (byte~) render_playfield::$2 ← (byte) render_screen_render#13 + (byte) render_playfield::l#2
  (byte~) render_playfield::$6 ← (byte~) render_playfield::$2 * (const byte) SIZEOF_POINTER
  (byte*) render_playfield::screen_line#0 ← *((byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_playfield::$6)
  (number~) render_playfield::$3 ← (byte) PLAYFIELD_COLS#0 - (number) 1
  (byte) render_playfield::c#0 ← (byte) 0
  to:render_playfield::@2
render_playfield::@2: scope:[render_playfield]  from render_playfield::@1 render_playfield::@2
  (byte) render_screen_render#32 ← phi( render_playfield::@1/(byte) render_screen_render#13 render_playfield::@2/(byte) render_screen_render#32 )
  (byte) render_playfield::l#4 ← phi( render_playfield::@1/(byte) render_playfield::l#2 render_playfield::@2/(byte) render_playfield::l#4 )
  (byte) render_playfield::c#2 ← phi( render_playfield::@1/(byte) render_playfield::c#0 render_playfield::@2/(byte) render_playfield::c#1 )
  (byte*) render_playfield::screen_line#2 ← phi( render_playfield::@1/(byte*) render_playfield::screen_line#0 render_playfield::@2/(byte*) render_playfield::screen_line#1 )
  (byte) render_playfield::i#2 ← phi( render_playfield::@1/(byte) render_playfield::i#3 render_playfield::@2/(byte) render_playfield::i#1 )
  *((byte*) render_playfield::screen_line#2) ← *((byte[$3]) playfield#0 + (byte) render_playfield::i#2)
  (byte*) render_playfield::screen_line#1 ← ++ (byte*) render_playfield::screen_line#2
  (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2
  (byte) render_playfield::c#1 ← (byte) render_playfield::c#2 + rangenext(0,render_playfield::$3)
  (bool~) render_playfield::$4 ← (byte) render_playfield::c#1 != rangelast(0,render_playfield::$3)
  if((bool~) render_playfield::$4) goto render_playfield::@2
  to:render_playfield::@3
render_playfield::@3: scope:[render_playfield]  from render_playfield::@2
  (byte) render_playfield::i#4 ← phi( render_playfield::@2/(byte) render_playfield::i#1 )
  (byte) render_screen_render#23 ← phi( render_playfield::@2/(byte) render_screen_render#32 )
  (byte) render_playfield::l#3 ← phi( render_playfield::@2/(byte) render_playfield::l#4 )
  (byte) render_playfield::l#1 ← (byte) render_playfield::l#3 + rangenext(2,render_playfield::$1)
  (bool~) render_playfield::$5 ← (byte) render_playfield::l#1 != rangelast(2,render_playfield::$1)
  if((bool~) render_playfield::$5) goto render_playfield::@1
  to:render_playfield::@return
render_playfield::@return: scope:[render_playfield]  from render_playfield::@3
  return 
  to:@return
render_moving: scope:[render_moving]  from main::@32 main::@39
  (byte) current_piece_char#68 ← phi( main::@32/(byte) current_piece_char#80 main::@39/(byte) current_piece_char#84 )
  (byte*) current_piece_gfx#64 ← phi( main::@32/(byte*) current_piece_gfx#81 main::@39/(byte*) current_piece_gfx#82 )
  (byte) current_xpos#59 ← phi( main::@32/(byte) current_xpos#76 main::@39/(byte) current_xpos#77 )
  (byte) render_screen_render#33 ← phi( main::@32/(byte) render_screen_render#36 main::@39/(byte) render_screen_render#39 )
  (byte) current_ypos#13 ← phi( main::@32/(byte) current_ypos#30 main::@39/(byte) current_ypos#31 )
  (byte) render_moving::i#0 ← (number) 0
  (byte) render_moving::ypos#0 ← (byte) current_ypos#13
  (byte) render_moving::l#0 ← (byte) 0
  to:render_moving::@1
render_moving::@1: scope:[render_moving]  from render_moving render_moving::@3
  (byte) current_piece_char#52 ← phi( render_moving/(byte) current_piece_char#68 render_moving::@3/(byte) current_piece_char#69 )
  (byte) render_moving::l#5 ← phi( render_moving/(byte) render_moving::l#0 render_moving::@3/(byte) render_moving::l#1 )
  (byte*) current_piece_gfx#46 ← phi( render_moving/(byte*) current_piece_gfx#64 render_moving::@3/(byte*) current_piece_gfx#65 )
  (byte) render_moving::i#5 ← phi( render_moving/(byte) render_moving::i#0 render_moving::@3/(byte) render_moving::i#8 )
  (byte) current_xpos#36 ← phi( render_moving/(byte) current_xpos#59 render_moving::@3/(byte) current_xpos#60 )
  (byte) render_screen_render#24 ← phi( render_moving/(byte) render_screen_render#33 render_moving::@3/(byte) render_screen_render#34 )
  (byte) render_moving::ypos#2 ← phi( render_moving/(byte) render_moving::ypos#0 render_moving::@3/(byte) render_moving::ypos#1 )
  (bool~) render_moving::$0 ← (byte) render_moving::ypos#2 > (number) 1
  if((bool~) render_moving::$0) goto render_moving::@2
  to:render_moving::@8
render_moving::@2: scope:[render_moving]  from render_moving::@1
  (byte) render_moving::l#8 ← phi( render_moving::@1/(byte) render_moving::l#5 )
  (byte) current_piece_char#37 ← phi( render_moving::@1/(byte) current_piece_char#52 )
  (byte) render_moving::i#6 ← phi( render_moving::@1/(byte) render_moving::i#5 )
  (byte*) current_piece_gfx#29 ← phi( render_moving::@1/(byte*) current_piece_gfx#46 )
  (byte) current_xpos#16 ← phi( render_moving::@1/(byte) current_xpos#36 )
  (byte) render_moving::ypos#3 ← phi( render_moving::@1/(byte) render_moving::ypos#2 )
  (byte) render_screen_render#14 ← phi( render_moving::@1/(byte) render_screen_render#24 )
  (byte~) render_moving::$1 ← (byte) render_screen_render#14 + (byte) render_moving::ypos#3
  (byte~) render_moving::$6 ← (byte~) render_moving::$1 * (const byte) SIZEOF_POINTER
  (byte*) render_moving::screen_line#0 ← *((byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_moving::$6)
  (byte) render_moving::xpos#0 ← (byte) current_xpos#16
  (byte) render_moving::c#0 ← (byte) 0
  to:render_moving::@4
render_moving::@8: scope:[render_moving]  from render_moving::@1
  (byte) current_piece_char#85 ← phi( render_moving::@1/(byte) current_piece_char#52 )
  (byte*) current_piece_gfx#83 ← phi( render_moving::@1/(byte*) current_piece_gfx#46 )
  (byte) current_xpos#79 ← phi( render_moving::@1/(byte) current_xpos#36 )
  (byte) render_screen_render#42 ← phi( render_moving::@1/(byte) render_screen_render#24 )
  (byte) render_moving::l#4 ← phi( render_moving::@1/(byte) render_moving::l#5 )
  (byte) render_moving::ypos#6 ← phi( render_moving::@1/(byte) render_moving::ypos#2 )
  (byte) render_moving::i#3 ← phi( render_moving::@1/(byte) render_moving::i#5 )
  (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (number) 4
  to:render_moving::@3
render_moving::@3: scope:[render_moving]  from render_moving::@5 render_moving::@8
  (byte) current_piece_char#69 ← phi( render_moving::@5/(byte) current_piece_char#38 render_moving::@8/(byte) current_piece_char#85 )
  (byte*) current_piece_gfx#65 ← phi( render_moving::@5/(byte*) current_piece_gfx#30 render_moving::@8/(byte*) current_piece_gfx#83 )
  (byte) render_moving::i#8 ← phi( render_moving::@5/(byte) render_moving::i#7 render_moving::@8/(byte) render_moving::i#1 )
  (byte) current_xpos#60 ← phi( render_moving::@5/(byte) current_xpos#78 render_moving::@8/(byte) current_xpos#79 )
  (byte) render_screen_render#34 ← phi( render_moving::@5/(byte) render_screen_render#41 render_moving::@8/(byte) render_screen_render#42 )
  (byte) render_moving::l#2 ← phi( render_moving::@5/(byte) render_moving::l#3 render_moving::@8/(byte) render_moving::l#4 )
  (byte) render_moving::ypos#4 ← phi( render_moving::@5/(byte) render_moving::ypos#5 render_moving::@8/(byte) render_moving::ypos#6 )
  (byte) render_moving::ypos#1 ← ++ (byte) render_moving::ypos#4
  (byte) render_moving::l#1 ← (byte) render_moving::l#2 + rangenext(0,3)
  (bool~) render_moving::$5 ← (byte) render_moving::l#1 != rangelast(0,3)
  if((bool~) render_moving::$5) goto render_moving::@1
  to:render_moving::@return
render_moving::@4: scope:[render_moving]  from render_moving::@2 render_moving::@5
  (byte) current_xpos#95 ← phi( render_moving::@2/(byte) current_xpos#16 render_moving::@5/(byte) current_xpos#78 )
  (byte) render_screen_render#47 ← phi( render_moving::@2/(byte) render_screen_render#14 render_moving::@5/(byte) render_screen_render#41 )
  (byte) render_moving::l#6 ← phi( render_moving::@2/(byte) render_moving::l#8 render_moving::@5/(byte) render_moving::l#3 )
  (byte) render_moving::ypos#7 ← phi( render_moving::@2/(byte) render_moving::ypos#3 render_moving::@5/(byte) render_moving::ypos#5 )
  (byte*) render_moving::screen_line#2 ← phi( render_moving::@2/(byte*) render_moving::screen_line#0 render_moving::@5/(byte*) render_moving::screen_line#3 )
  (byte) current_piece_char#24 ← phi( render_moving::@2/(byte) current_piece_char#37 render_moving::@5/(byte) current_piece_char#38 )
  (byte) render_moving::c#3 ← phi( render_moving::@2/(byte) render_moving::c#0 render_moving::@5/(byte) render_moving::c#1 )
  (byte) render_moving::xpos#4 ← phi( render_moving::@2/(byte) render_moving::xpos#0 render_moving::@5/(byte) render_moving::xpos#1 )
  (byte) render_moving::i#4 ← phi( render_moving::@2/(byte) render_moving::i#6 render_moving::@5/(byte) render_moving::i#7 )
  (byte*) current_piece_gfx#15 ← phi( render_moving::@2/(byte*) current_piece_gfx#29 render_moving::@5/(byte*) current_piece_gfx#30 )
  (byte) render_moving::current_cell#0 ← *((byte*) current_piece_gfx#15 + (byte) render_moving::i#4)
  (byte) render_moving::i#2 ← ++ (byte) render_moving::i#4
  (bool~) render_moving::$2 ← (byte) render_moving::current_cell#0 != (number) 0
  (bool~) render_moving::$3 ← ! (bool~) render_moving::$2
  if((bool~) render_moving::$3) goto render_moving::@5
  to:render_moving::@6
render_moving::@5: scope:[render_moving]  from render_moving::@4 render_moving::@6
  (byte) current_xpos#78 ← phi( render_moving::@4/(byte) current_xpos#95 render_moving::@6/(byte) current_xpos#96 )
  (byte) render_screen_render#41 ← phi( render_moving::@4/(byte) render_screen_render#47 render_moving::@6/(byte) render_screen_render#48 )
  (byte*) render_moving::screen_line#3 ← phi( render_moving::@4/(byte*) render_moving::screen_line#2 render_moving::@6/(byte*) render_moving::screen_line#1 )
  (byte) current_piece_char#38 ← phi( render_moving::@4/(byte) current_piece_char#24 render_moving::@6/(byte) current_piece_char#12 )
  (byte) render_moving::i#7 ← phi( render_moving::@4/(byte) render_moving::i#2 render_moving::@6/(byte) render_moving::i#9 )
  (byte*) current_piece_gfx#30 ← phi( render_moving::@4/(byte*) current_piece_gfx#15 render_moving::@6/(byte*) current_piece_gfx#47 )
  (byte) render_moving::l#3 ← phi( render_moving::@4/(byte) render_moving::l#6 render_moving::@6/(byte) render_moving::l#7 )
  (byte) render_moving::ypos#5 ← phi( render_moving::@4/(byte) render_moving::ypos#7 render_moving::@6/(byte) render_moving::ypos#8 )
  (byte) render_moving::c#2 ← phi( render_moving::@4/(byte) render_moving::c#3 render_moving::@6/(byte) render_moving::c#4 )
  (byte) render_moving::xpos#2 ← phi( render_moving::@4/(byte) render_moving::xpos#4 render_moving::@6/(byte) render_moving::xpos#3 )
  (byte) render_moving::xpos#1 ← ++ (byte) render_moving::xpos#2
  (byte) render_moving::c#1 ← (byte) render_moving::c#2 + rangenext(0,3)
  (bool~) render_moving::$4 ← (byte) render_moving::c#1 != rangelast(0,3)
  if((bool~) render_moving::$4) goto render_moving::@4
  to:render_moving::@3
render_moving::@6: scope:[render_moving]  from render_moving::@4
  (byte) current_xpos#96 ← phi( render_moving::@4/(byte) current_xpos#95 )
  (byte) render_screen_render#48 ← phi( render_moving::@4/(byte) render_screen_render#47 )
  (byte) render_moving::i#9 ← phi( render_moving::@4/(byte) render_moving::i#2 )
  (byte*) current_piece_gfx#47 ← phi( render_moving::@4/(byte*) current_piece_gfx#15 )
  (byte) render_moving::l#7 ← phi( render_moving::@4/(byte) render_moving::l#6 )
  (byte) render_moving::ypos#8 ← phi( render_moving::@4/(byte) render_moving::ypos#7 )
  (byte) render_moving::c#4 ← phi( render_moving::@4/(byte) render_moving::c#3 )
  (byte) render_moving::xpos#3 ← phi( render_moving::@4/(byte) render_moving::xpos#4 )
  (byte*) render_moving::screen_line#1 ← phi( render_moving::@4/(byte*) render_moving::screen_line#2 )
  (byte) current_piece_char#12 ← phi( render_moving::@4/(byte) current_piece_char#24 )
  *((byte*) render_moving::screen_line#1 + (byte) render_moving::xpos#3) ← (byte) current_piece_char#12
  to:render_moving::@5
render_moving::@return: scope:[render_moving]  from render_moving::@3
  return 
  to:@return
render_next: scope:[render_next]  from main::@33 main::@40
  (byte) next_piece_idx#36 ← phi( main::@33/(byte) next_piece_idx#47 main::@40/(byte) next_piece_idx#48 )
  (byte) render_screen_render#15 ← phi( main::@33/(byte) render_screen_render#25 main::@40/(byte) render_screen_render#26 )
  (word) render_next::next_area_offset#0 ← (number) $28*(number) $c+(number) $18+(number) 4
  (byte*) render_next::screen_next_area#0 ← (byte*) 0
  (bool~) render_next::$0 ← (byte) render_screen_render#15 == (number) 0
  if((bool~) render_next::$0) goto render_next::@1
  to:render_next::@3
render_next::@1: scope:[render_next]  from render_next
  (byte) next_piece_idx#24 ← phi( render_next/(byte) next_piece_idx#36 )
  (byte*~) render_next::$2 ← (byte*) PLAYFIELD_SCREEN_1#0 + (word) render_next::next_area_offset#0
  (byte*) render_next::screen_next_area#1 ← (byte*~) render_next::$2
  to:render_next::@2
render_next::@3: scope:[render_next]  from render_next
  (byte) next_piece_idx#25 ← phi( render_next/(byte) next_piece_idx#36 )
  (byte*~) render_next::$1 ← (byte*) PLAYFIELD_SCREEN_2#0 + (word) render_next::next_area_offset#0
  (byte*) render_next::screen_next_area#2 ← (byte*~) render_next::$1
  to:render_next::@2
render_next::@2: scope:[render_next]  from render_next::@1 render_next::@3
  (byte*) render_next::screen_next_area#11 ← phi( render_next::@1/(byte*) render_next::screen_next_area#1 render_next::@3/(byte*) render_next::screen_next_area#2 )
  (byte) next_piece_idx#12 ← phi( render_next::@1/(byte) next_piece_idx#24 render_next::@3/(byte) next_piece_idx#25 )
  (byte~) render_next::$6 ← (byte) next_piece_idx#12 * (const byte) SIZEOF_WORD
  (byte*) render_next::next_piece_gfx#0 ← ((byte*)) *((word[]) PIECES#0 + (byte~) render_next::$6)
  (byte) render_next::next_piece_char#0 ← *((byte[]) PIECES_NEXT_CHARS#0 + (byte) next_piece_idx#12)
  (byte) render_next::l#0 ← (byte) 0
  to:render_next::@5
render_next::@5: scope:[render_next]  from render_next::@11 render_next::@2
  (byte) render_next::l#7 ← phi( render_next::@11/(byte) render_next::l#1 render_next::@2/(byte) render_next::l#0 )
  (byte*) render_next::screen_next_area#10 ← phi( render_next::@11/(byte*) render_next::screen_next_area#4 render_next::@2/(byte*) render_next::screen_next_area#11 )
  (byte) render_next::next_piece_char#3 ← phi( render_next::@11/(byte) render_next::next_piece_char#5 render_next::@2/(byte) render_next::next_piece_char#0 )
  (byte*) render_next::next_piece_gfx#3 ← phi( render_next::@11/(byte*) render_next::next_piece_gfx#5 render_next::@2/(byte*) render_next::next_piece_gfx#0 )
  (byte) render_next::c#0 ← (byte) 0
  to:render_next::@6
render_next::@6: scope:[render_next]  from render_next::@5 render_next::@8
  (byte) render_next::l#6 ← phi( render_next::@5/(byte) render_next::l#7 render_next::@8/(byte) render_next::l#3 )
  (byte) render_next::c#5 ← phi( render_next::@5/(byte) render_next::c#0 render_next::@8/(byte) render_next::c#1 )
  (byte*) render_next::screen_next_area#9 ← phi( render_next::@5/(byte*) render_next::screen_next_area#10 render_next::@8/(byte*) render_next::screen_next_area#3 )
  (byte) render_next::next_piece_char#2 ← phi( render_next::@5/(byte) render_next::next_piece_char#3 render_next::@8/(byte) render_next::next_piece_char#4 )
  (byte*) render_next::next_piece_gfx#2 ← phi( render_next::@5/(byte*) render_next::next_piece_gfx#3 render_next::@8/(byte*) render_next::next_piece_gfx#4 )
  (byte) render_next::cell#0 ← *((byte*) render_next::next_piece_gfx#2)
  (byte*) render_next::next_piece_gfx#1 ← ++ (byte*) render_next::next_piece_gfx#2
  (bool~) render_next::$3 ← (byte) render_next::cell#0 != (number) 0
  if((bool~) render_next::$3) goto render_next::@7
  to:render_next::@9
render_next::@7: scope:[render_next]  from render_next::@6
  (byte) render_next::l#4 ← phi( render_next::@6/(byte) render_next::l#6 )
  (byte*) render_next::next_piece_gfx#6 ← phi( render_next::@6/(byte*) render_next::next_piece_gfx#1 )
  (byte) render_next::c#3 ← phi( render_next::@6/(byte) render_next::c#5 )
  (byte*) render_next::screen_next_area#5 ← phi( render_next::@6/(byte*) render_next::screen_next_area#9 )
  (byte) render_next::next_piece_char#1 ← phi( render_next::@6/(byte) render_next::next_piece_char#2 )
  *((byte*) render_next::screen_next_area#5) ← (byte) render_next::next_piece_char#1
  to:render_next::@8
render_next::@9: scope:[render_next]  from render_next::@6
  (byte) render_next::next_piece_char#6 ← phi( render_next::@6/(byte) render_next::next_piece_char#2 )
  (byte) render_next::l#5 ← phi( render_next::@6/(byte) render_next::l#6 )
  (byte*) render_next::next_piece_gfx#7 ← phi( render_next::@6/(byte*) render_next::next_piece_gfx#1 )
  (byte) render_next::c#4 ← phi( render_next::@6/(byte) render_next::c#5 )
  (byte*) render_next::screen_next_area#6 ← phi( render_next::@6/(byte*) render_next::screen_next_area#9 )
  *((byte*) render_next::screen_next_area#6) ← (number) 0
  to:render_next::@8
render_next::@8: scope:[render_next]  from render_next::@7 render_next::@9
  (byte) render_next::next_piece_char#4 ← phi( render_next::@7/(byte) render_next::next_piece_char#1 render_next::@9/(byte) render_next::next_piece_char#6 )
  (byte) render_next::l#3 ← phi( render_next::@7/(byte) render_next::l#4 render_next::@9/(byte) render_next::l#5 )
  (byte*) render_next::next_piece_gfx#4 ← phi( render_next::@7/(byte*) render_next::next_piece_gfx#6 render_next::@9/(byte*) render_next::next_piece_gfx#7 )
  (byte) render_next::c#2 ← phi( render_next::@7/(byte) render_next::c#3 render_next::@9/(byte) render_next::c#4 )
  (byte*) render_next::screen_next_area#7 ← phi( render_next::@7/(byte*) render_next::screen_next_area#5 render_next::@9/(byte*) render_next::screen_next_area#6 )
  (byte*) render_next::screen_next_area#3 ← ++ (byte*) render_next::screen_next_area#7
  (byte) render_next::c#1 ← (byte) render_next::c#2 + rangenext(0,3)
  (bool~) render_next::$4 ← (byte) render_next::c#1 != rangelast(0,3)
  if((bool~) render_next::$4) goto render_next::@6
  to:render_next::@11
render_next::@11: scope:[render_next]  from render_next::@8
  (byte) render_next::next_piece_char#5 ← phi( render_next::@8/(byte) render_next::next_piece_char#4 )
  (byte*) render_next::next_piece_gfx#5 ← phi( render_next::@8/(byte*) render_next::next_piece_gfx#4 )
  (byte) render_next::l#2 ← phi( render_next::@8/(byte) render_next::l#3 )
  (byte*) render_next::screen_next_area#8 ← phi( render_next::@8/(byte*) render_next::screen_next_area#3 )
  (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#8 + (number) $24
  (byte) render_next::l#1 ← (byte) render_next::l#2 + rangenext(0,3)
  (bool~) render_next::$5 ← (byte) render_next::l#1 != rangelast(0,3)
  if((bool~) render_next::$5) goto render_next::@5
  to:render_next::@return
render_next::@return: scope:[render_next]  from render_next::@11
  return 
  to:@return
@22: scope:[]  from @13
  (byte) level_bcd#95 ← phi( @13/(byte) level_bcd#0 )
  (byte) level#103 ← phi( @13/(byte) level#0 )
  (dword) score_bcd#78 ← phi( @13/(dword) score_bcd#0 )
  (word) lines_bcd#82 ← phi( @13/(word) lines_bcd#0 )
  (byte) keyboard_modifiers#54 ← phi( @13/(byte) keyboard_modifiers#56 )
  (byte) keyboard_events_size#72 ← phi( @13/(byte) keyboard_events_size#74 )
  (byte) render_screen_showing#42 ← phi( @13/(byte) render_screen_showing#0 )
  (byte) game_over#85 ← phi( @13/(byte) game_over#0 )
  (byte) current_ypos#97 ← phi( @13/(byte) current_ypos#0 )
  (byte) current_xpos#118 ← phi( @13/(byte) current_xpos#0 )
  (byte*) current_piece_gfx#111 ← phi( @13/(byte*) current_piece_gfx#0 )
  (byte) current_piece_char#99 ← phi( @13/(byte) current_piece_char#0 )
  (byte) render_screen_render#62 ← phi( @13/(byte) render_screen_render#0 )
  (byte) render_screen_show#57 ← phi( @13/(byte) render_screen_show#0 )
  kickasm(location (byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000))
	// Put the sprites into memory 
	.for(var sy=0;sy<10;sy++) {
	    .var sprite_gfx_y = sy*20
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21)
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y)
	            }
	        }
	    	.byte 0
	  	}
	}
 }}
  to:@23
sprites_init: scope:[sprites_init]  from main::@26
  *((byte*) SPRITES_ENABLE#0) ← (number) $f
  *((byte*) SPRITES_MC#0) ← (number) 0
  *((byte*) SPRITES_EXPAND_Y#0) ← *((byte*) SPRITES_MC#0)
  *((byte*) SPRITES_EXPAND_X#0) ← *((byte*) SPRITES_EXPAND_Y#0)
  (byte) sprites_init::xpos#0 ← (number) $18+(number) $f*(number) 8
  (byte) sprites_init::s#0 ← (byte) 0
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  (byte) sprites_init::xpos#2 ← phi( sprites_init/(byte) sprites_init::xpos#0 sprites_init::@1/(byte) sprites_init::xpos#1 )
  (byte) sprites_init::s#2 ← phi( sprites_init/(byte) sprites_init::s#0 sprites_init::@1/(byte) sprites_init::s#1 )
  (number~) sprites_init::$0 ← (byte) sprites_init::s#2 * (number) 2
  (byte) sprites_init::s2#0 ← (number~) sprites_init::$0
  *((byte*) SPRITES_XPOS#0 + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2
  *((byte*) SPRITES_COLS#0 + (byte) sprites_init::s#2) ← (byte) BLACK#0
  (number~) sprites_init::$1 ← (byte) sprites_init::xpos#2 + (number) $18
  (byte) sprites_init::xpos#1 ← (number~) sprites_init::$1
  (byte) sprites_init::s#1 ← (byte) sprites_init::s#2 + rangenext(0,3)
  (bool~) sprites_init::$2 ← (byte) sprites_init::s#1 != rangelast(0,3)
  if((bool~) sprites_init::$2) goto sprites_init::@1
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  return 
  to:@return
@23: scope:[]  from @22
  (byte) level_bcd#92 ← phi( @22/(byte) level_bcd#95 )
  (byte) level#99 ← phi( @22/(byte) level#103 )
  (dword) score_bcd#76 ← phi( @22/(dword) score_bcd#78 )
  (word) lines_bcd#79 ← phi( @22/(word) lines_bcd#82 )
  (byte) keyboard_modifiers#51 ← phi( @22/(byte) keyboard_modifiers#54 )
  (byte) keyboard_events_size#68 ← phi( @22/(byte) keyboard_events_size#72 )
  (byte) render_screen_showing#39 ← phi( @22/(byte) render_screen_showing#42 )
  (byte) game_over#83 ← phi( @22/(byte) game_over#85 )
  (byte) current_ypos#96 ← phi( @22/(byte) current_ypos#97 )
  (byte) current_xpos#117 ← phi( @22/(byte) current_xpos#118 )
  (byte*) current_piece_gfx#110 ← phi( @22/(byte*) current_piece_gfx#111 )
  (byte) current_piece_char#98 ← phi( @22/(byte) current_piece_char#99 )
  (byte) render_screen_render#60 ← phi( @22/(byte) render_screen_render#62 )
  (byte) render_screen_show#55 ← phi( @22/(byte) render_screen_show#57 )
  (byte) SPRITES_FIRST_YPOS#0 ← (number) $31
  (number~) $4 ← (byte) SPRITES_FIRST_YPOS#0 + (number) $13
  (byte) IRQ_RASTER_FIRST#0 ← (number~) $4
  (byte) irq_raster_next#0 ← (byte) IRQ_RASTER_FIRST#0
  (number~) $5 ← (byte) SPRITES_FIRST_YPOS#0 + (number) $15
  (byte) irq_sprite_ypos#0 ← (number~) $5
  (byte*) toSpritePtr1_sprite#0 ← (byte*) PLAYFIELD_SPRITES#0
  to:toSpritePtr1
toSpritePtr1: scope:[]  from @23
  (byte) level_bcd#85 ← phi( @23/(byte) level_bcd#92 )
  (byte) level#92 ← phi( @23/(byte) level#99 )
  (dword) score_bcd#70 ← phi( @23/(dword) score_bcd#76 )
  (word) lines_bcd#73 ← phi( @23/(word) lines_bcd#79 )
  (byte) keyboard_modifiers#48 ← phi( @23/(byte) keyboard_modifiers#51 )
  (byte) keyboard_events_size#63 ← phi( @23/(byte) keyboard_events_size#68 )
  (byte) render_screen_showing#36 ← phi( @23/(byte) render_screen_showing#39 )
  (byte) game_over#78 ← phi( @23/(byte) game_over#83 )
  (byte) current_ypos#93 ← phi( @23/(byte) current_ypos#96 )
  (byte) current_xpos#114 ← phi( @23/(byte) current_xpos#117 )
  (byte*) current_piece_gfx#105 ← phi( @23/(byte*) current_piece_gfx#110 )
  (byte) current_piece_char#92 ← phi( @23/(byte) current_piece_char#98 )
  (byte) render_screen_render#57 ← phi( @23/(byte) render_screen_render#60 )
  (byte) render_screen_show#52 ← phi( @23/(byte) render_screen_show#55 )
  (byte) irq_raster_next#24 ← phi( @23/(byte) irq_raster_next#0 )
  (byte) irq_sprite_ypos#24 ← phi( @23/(byte) irq_sprite_ypos#0 )
  (byte*) toSpritePtr1_sprite#1 ← phi( @23/(byte*) toSpritePtr1_sprite#0 )
  (word~) toSpritePtr1_$0#0 ← ((word)) (byte*) toSpritePtr1_sprite#1
  (number~) toSpritePtr1_$1#0 ← (word~) toSpritePtr1_$0#0 / (number) $40
  (byte~) toSpritePtr1_$2#0 ← ((byte)) (number~) toSpritePtr1_$1#0
  (byte) toSpritePtr1_return#0 ← (byte~) toSpritePtr1_$2#0
  to:toSpritePtr1_@return
toSpritePtr1_@return: scope:[]  from toSpritePtr1
  (byte) level_bcd#78 ← phi( toSpritePtr1/(byte) level_bcd#85 )
  (byte) level#85 ← phi( toSpritePtr1/(byte) level#92 )
  (dword) score_bcd#65 ← phi( toSpritePtr1/(dword) score_bcd#70 )
  (word) lines_bcd#68 ← phi( toSpritePtr1/(word) lines_bcd#73 )
  (byte) keyboard_modifiers#45 ← phi( toSpritePtr1/(byte) keyboard_modifiers#48 )
  (byte) keyboard_events_size#57 ← phi( toSpritePtr1/(byte) keyboard_events_size#63 )
  (byte) render_screen_showing#32 ← phi( toSpritePtr1/(byte) render_screen_showing#36 )
  (byte) game_over#72 ← phi( toSpritePtr1/(byte) game_over#78 )
  (byte) current_ypos#86 ← phi( toSpritePtr1/(byte) current_ypos#93 )
  (byte) current_xpos#107 ← phi( toSpritePtr1/(byte) current_xpos#114 )
  (byte*) current_piece_gfx#98 ← phi( toSpritePtr1/(byte*) current_piece_gfx#105 )
  (byte) current_piece_char#86 ← phi( toSpritePtr1/(byte) current_piece_char#92 )
  (byte) render_screen_render#54 ← phi( toSpritePtr1/(byte) render_screen_render#57 )
  (byte) render_screen_show#48 ← phi( toSpritePtr1/(byte) render_screen_show#52 )
  (byte) irq_raster_next#23 ← phi( toSpritePtr1/(byte) irq_raster_next#24 )
  (byte) irq_sprite_ypos#22 ← phi( toSpritePtr1/(byte) irq_sprite_ypos#24 )
  (byte) toSpritePtr1_return#2 ← phi( toSpritePtr1/(byte) toSpritePtr1_return#0 )
  (byte) toSpritePtr1_return#1 ← (byte) toSpritePtr1_return#2
  to:@38
@38: scope:[]  from toSpritePtr1_@return
  (byte) level_bcd#68 ← phi( toSpritePtr1_@return/(byte) level_bcd#78 )
  (byte) level#72 ← phi( toSpritePtr1_@return/(byte) level#85 )
  (dword) score_bcd#56 ← phi( toSpritePtr1_@return/(dword) score_bcd#65 )
  (word) lines_bcd#58 ← phi( toSpritePtr1_@return/(word) lines_bcd#68 )
  (byte) keyboard_modifiers#39 ← phi( toSpritePtr1_@return/(byte) keyboard_modifiers#45 )
  (byte) keyboard_events_size#48 ← phi( toSpritePtr1_@return/(byte) keyboard_events_size#57 )
  (byte) render_screen_showing#26 ← phi( toSpritePtr1_@return/(byte) render_screen_showing#32 )
  (byte) game_over#59 ← phi( toSpritePtr1_@return/(byte) game_over#72 )
  (byte) current_ypos#77 ← phi( toSpritePtr1_@return/(byte) current_ypos#86 )
  (byte) current_xpos#97 ← phi( toSpritePtr1_@return/(byte) current_xpos#107 )
  (byte*) current_piece_gfx#84 ← phi( toSpritePtr1_@return/(byte*) current_piece_gfx#98 )
  (byte) current_piece_char#70 ← phi( toSpritePtr1_@return/(byte) current_piece_char#86 )
  (byte) render_screen_render#49 ← phi( toSpritePtr1_@return/(byte) render_screen_render#54 )
  (byte) render_screen_show#42 ← phi( toSpritePtr1_@return/(byte) render_screen_show#48 )
  (byte) irq_raster_next#22 ← phi( toSpritePtr1_@return/(byte) irq_raster_next#23 )
  (byte) irq_sprite_ypos#21 ← phi( toSpritePtr1_@return/(byte) irq_sprite_ypos#22 )
  (byte) toSpritePtr1_return#3 ← phi( toSpritePtr1_@return/(byte) toSpritePtr1_return#1 )
  (byte~) $6 ← (byte) toSpritePtr1_return#3
  (number~) $7 ← (byte~) $6 + (number) 3
  (byte) irq_sprite_ptr#0 ← (number~) $7
  (byte) irq_cnt#0 ← (number) 0
  to:@25
sprites_irq_init: scope:[sprites_irq_init]  from main::@27
  asm { sei  }
  *((byte*) IRQ_STATUS#0) ← (byte) IRQ_RASTER#0
  asm { ldaCIA1_INTERRUPT  }
  *((byte*) PROCPORT_DDR#0) ← (byte) PROCPORT_DDR_MEMORY_MASK#0
  *((byte*) PROCPORT#0) ← (byte) PROCPORT_RAM_IO#0
  *((byte*) CIA1_INTERRUPT#0) ← (byte) CIA_INTERRUPT_CLEAR#0
  *((byte*) VIC_CONTROL#0) ← *((byte*) VIC_CONTROL#0) & (number) $7f
  *((byte*) RASTER#0) ← (byte) IRQ_RASTER_FIRST#0
  *((byte*) IRQ_ENABLE#0) ← (byte) IRQ_RASTER#0
  (void()*~) sprites_irq_init::$0 ← & interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
  *((void()**) HARDWARE_IRQ#0) ← (void()*~) sprites_irq_init::$0
  asm { cli  }
  to:sprites_irq_init::@return
sprites_irq_init::@return: scope:[sprites_irq_init]  from sprites_irq_init
  return 
  to:@return
sprites_irq: scope:[sprites_irq]  from
  (byte) irq_cnt#15 ← phi( @37/(byte) irq_cnt#17 )
  (byte) render_screen_showing#15 ← phi( @37/(byte) render_screen_showing#14 )
  (byte) irq_sprite_ptr#12 ← phi( @37/(byte) irq_sprite_ptr#14 )
  (byte) irq_raster_next#5 ← phi( @37/(byte) irq_raster_next#10 )
  (byte) irq_sprite_ypos#5 ← phi( @37/(byte) irq_sprite_ypos#9 )
  asm { cld  }
  (byte) sprites_irq::ypos#0 ← (byte) irq_sprite_ypos#5
  *((byte*) SPRITES_YPOS#0 + (number) 0) ← (byte) sprites_irq::ypos#0
  *((byte*) SPRITES_YPOS#0 + (number) 2) ← (byte) sprites_irq::ypos#0
  *((byte*) SPRITES_YPOS#0 + (number) 4) ← (byte) sprites_irq::ypos#0
  *((byte*) SPRITES_YPOS#0 + (number) 6) ← (byte) sprites_irq::ypos#0
  (number~) sprites_irq::$0 ← (byte) irq_raster_next#5 + (number) 1
  (byte) sprites_irq::raster_sprite_gfx_modify#0 ← (number~) sprites_irq::$0
  to:sprites_irq::@11
sprites_irq::@11: scope:[sprites_irq]  from sprites_irq sprites_irq::@11
  (byte) irq_sprite_ypos#23 ← phi( sprites_irq/(byte) irq_sprite_ypos#5 sprites_irq::@11/(byte) irq_sprite_ypos#23 )
  (byte) irq_raster_next#21 ← phi( sprites_irq/(byte) irq_raster_next#5 sprites_irq::@11/(byte) irq_raster_next#21 )
  (byte) irq_cnt#13 ← phi( sprites_irq/(byte) irq_cnt#15 sprites_irq::@11/(byte) irq_cnt#13 )
  (byte) render_screen_showing#11 ← phi( sprites_irq/(byte) render_screen_showing#15 sprites_irq::@11/(byte) render_screen_showing#11 )
  (byte) irq_sprite_ptr#9 ← phi( sprites_irq/(byte) irq_sprite_ptr#12 sprites_irq::@11/(byte) irq_sprite_ptr#9 )
  (byte) sprites_irq::raster_sprite_gfx_modify#1 ← phi( sprites_irq/(byte) sprites_irq::raster_sprite_gfx_modify#0 sprites_irq::@11/(byte) sprites_irq::raster_sprite_gfx_modify#1 )
  (bool~) sprites_irq::$4 ← *((byte*) RASTER#0) < (byte) sprites_irq::raster_sprite_gfx_modify#1
  if((bool~) sprites_irq::$4) goto sprites_irq::@11
  to:sprites_irq::@12
sprites_irq::@12: scope:[sprites_irq]  from sprites_irq::@11
  (byte) irq_sprite_ypos#19 ← phi( sprites_irq::@11/(byte) irq_sprite_ypos#23 )
  (byte) irq_raster_next#18 ← phi( sprites_irq::@11/(byte) irq_raster_next#21 )
  (byte) irq_cnt#10 ← phi( sprites_irq::@11/(byte) irq_cnt#13 )
  (byte) render_screen_showing#7 ← phi( sprites_irq::@11/(byte) render_screen_showing#11 )
  (byte) irq_sprite_ptr#5 ← phi( sprites_irq::@11/(byte) irq_sprite_ptr#9 )
  (byte) sprites_irq::ptr#0 ← (byte) irq_sprite_ptr#5
  (bool~) sprites_irq::$1 ← (byte) render_screen_showing#7 == (number) 0
  if((bool~) sprites_irq::$1) goto sprites_irq::@1
  to:sprites_irq::@13
sprites_irq::@1: scope:[sprites_irq]  from sprites_irq::@12
  (byte) irq_sprite_ptr#15 ← phi( sprites_irq::@12/(byte) irq_sprite_ptr#5 )
  (byte) irq_sprite_ypos#15 ← phi( sprites_irq::@12/(byte) irq_sprite_ypos#19 )
  (byte) irq_raster_next#14 ← phi( sprites_irq::@12/(byte) irq_raster_next#18 )
  (byte) irq_cnt#7 ← phi( sprites_irq::@12/(byte) irq_cnt#10 )
  (byte) sprites_irq::ptr#5 ← phi( sprites_irq::@12/(byte) sprites_irq::ptr#0 )
  *((byte*) PLAYFIELD_SPRITE_PTRS_1#0 + (number) 0) ← (byte) sprites_irq::ptr#5
  (byte) sprites_irq::ptr#1 ← ++ (byte) sprites_irq::ptr#5
  *((byte*) PLAYFIELD_SPRITE_PTRS_1#0 + (number) 1) ← (byte) sprites_irq::ptr#1
  *((byte*) PLAYFIELD_SPRITE_PTRS_1#0 + (number) 2) ← (byte) sprites_irq::ptr#1
  (byte) sprites_irq::ptr#2 ← ++ (byte) sprites_irq::ptr#1
  *((byte*) PLAYFIELD_SPRITE_PTRS_1#0 + (number) 3) ← (byte) sprites_irq::ptr#2
  to:sprites_irq::@2
sprites_irq::@13: scope:[sprites_irq]  from sprites_irq::@12
  (byte) irq_sprite_ptr#16 ← phi( sprites_irq::@12/(byte) irq_sprite_ptr#5 )
  (byte) irq_sprite_ypos#16 ← phi( sprites_irq::@12/(byte) irq_sprite_ypos#19 )
  (byte) irq_raster_next#15 ← phi( sprites_irq::@12/(byte) irq_raster_next#18 )
  (byte) irq_cnt#8 ← phi( sprites_irq::@12/(byte) irq_cnt#10 )
  (byte) sprites_irq::ptr#6 ← phi( sprites_irq::@12/(byte) sprites_irq::ptr#0 )
  *((byte*) PLAYFIELD_SPRITE_PTRS_2#0 + (number) 0) ← (byte) sprites_irq::ptr#6
  (byte) sprites_irq::ptr#3 ← ++ (byte) sprites_irq::ptr#6
  *((byte*) PLAYFIELD_SPRITE_PTRS_2#0 + (number) 1) ← (byte) sprites_irq::ptr#3
  *((byte*) PLAYFIELD_SPRITE_PTRS_2#0 + (number) 2) ← (byte) sprites_irq::ptr#3
  (byte) sprites_irq::ptr#4 ← ++ (byte) sprites_irq::ptr#3
  *((byte*) PLAYFIELD_SPRITE_PTRS_2#0 + (number) 3) ← (byte) sprites_irq::ptr#4
  to:sprites_irq::@2
sprites_irq::@2: scope:[sprites_irq]  from sprites_irq::@1 sprites_irq::@13
  (byte) irq_sprite_ptr#13 ← phi( sprites_irq::@1/(byte) irq_sprite_ptr#15 sprites_irq::@13/(byte) irq_sprite_ptr#16 )
  (byte) irq_sprite_ypos#12 ← phi( sprites_irq::@1/(byte) irq_sprite_ypos#15 sprites_irq::@13/(byte) irq_sprite_ypos#16 )
  (byte) irq_raster_next#11 ← phi( sprites_irq::@1/(byte) irq_raster_next#14 sprites_irq::@13/(byte) irq_raster_next#15 )
  (byte) irq_cnt#4 ← phi( sprites_irq::@1/(byte) irq_cnt#7 sprites_irq::@13/(byte) irq_cnt#8 )
  (byte) irq_cnt#1 ← ++ (byte) irq_cnt#4
  (bool~) sprites_irq::$2 ← (byte) irq_cnt#1 == (number) 9
  if((bool~) sprites_irq::$2) goto sprites_irq::@3
  to:sprites_irq::@7
sprites_irq::@3: scope:[sprites_irq]  from sprites_irq::@2
  (byte) irq_cnt#18 ← phi( sprites_irq::@2/(byte) irq_cnt#1 )
  (byte) irq_raster_next#6 ← phi( sprites_irq::@2/(byte) irq_raster_next#11 )
  (byte) irq_raster_next#1 ← (byte) irq_raster_next#6 + (number) $15
  (byte) irq_sprite_ypos#1 ← (byte) SPRITES_FIRST_YPOS#0
  (byte*) sprites_irq::toSpritePtr2_sprite#0 ← (byte*) PLAYFIELD_SPRITES#0
  to:sprites_irq::toSpritePtr2
sprites_irq::toSpritePtr2: scope:[sprites_irq]  from sprites_irq::@3
  (byte) irq_sprite_ypos#20 ← phi( sprites_irq::@3/(byte) irq_sprite_ypos#1 )
  (byte) irq_cnt#16 ← phi( sprites_irq::@3/(byte) irq_cnt#18 )
  (byte) irq_raster_next#19 ← phi( sprites_irq::@3/(byte) irq_raster_next#1 )
  (byte*) sprites_irq::toSpritePtr2_sprite#1 ← phi( sprites_irq::@3/(byte*) sprites_irq::toSpritePtr2_sprite#0 )
  (word~) sprites_irq::toSpritePtr2_$0#0 ← ((word)) (byte*) sprites_irq::toSpritePtr2_sprite#1
  (number~) sprites_irq::toSpritePtr2_$1#0 ← (word~) sprites_irq::toSpritePtr2_$0#0 / (number) $40
  (byte~) sprites_irq::toSpritePtr2_$2#0 ← ((byte)) (number~) sprites_irq::toSpritePtr2_$1#0
  (byte) sprites_irq::toSpritePtr2_return#0 ← (byte~) sprites_irq::toSpritePtr2_$2#0
  to:sprites_irq::toSpritePtr2_@return
sprites_irq::toSpritePtr2_@return: scope:[sprites_irq]  from sprites_irq::toSpritePtr2
  (byte) irq_sprite_ypos#17 ← phi( sprites_irq::toSpritePtr2/(byte) irq_sprite_ypos#20 )
  (byte) irq_cnt#14 ← phi( sprites_irq::toSpritePtr2/(byte) irq_cnt#16 )
  (byte) irq_raster_next#16 ← phi( sprites_irq::toSpritePtr2/(byte) irq_raster_next#19 )
  (byte) sprites_irq::toSpritePtr2_return#2 ← phi( sprites_irq::toSpritePtr2/(byte) sprites_irq::toSpritePtr2_return#0 )
  (byte) sprites_irq::toSpritePtr2_return#1 ← (byte) sprites_irq::toSpritePtr2_return#2
  to:sprites_irq::@15
sprites_irq::@15: scope:[sprites_irq]  from sprites_irq::toSpritePtr2_@return
  (byte) irq_sprite_ypos#13 ← phi( sprites_irq::toSpritePtr2_@return/(byte) irq_sprite_ypos#17 )
  (byte) irq_cnt#11 ← phi( sprites_irq::toSpritePtr2_@return/(byte) irq_cnt#14 )
  (byte) irq_raster_next#13 ← phi( sprites_irq::toSpritePtr2_@return/(byte) irq_raster_next#16 )
  (byte) sprites_irq::toSpritePtr2_return#3 ← phi( sprites_irq::toSpritePtr2_@return/(byte) sprites_irq::toSpritePtr2_return#1 )
  (byte~) sprites_irq::$5 ← (byte) sprites_irq::toSpritePtr2_return#3
  (byte) irq_sprite_ptr#1 ← (byte~) sprites_irq::$5
  to:sprites_irq::@6
sprites_irq::@7: scope:[sprites_irq]  from sprites_irq::@2
  (byte) irq_raster_next#12 ← phi( sprites_irq::@2/(byte) irq_raster_next#11 )
  (byte) irq_sprite_ptr#10 ← phi( sprites_irq::@2/(byte) irq_sprite_ptr#13 )
  (byte) irq_sprite_ypos#10 ← phi( sprites_irq::@2/(byte) irq_sprite_ypos#12 )
  (byte) irq_cnt#5 ← phi( sprites_irq::@2/(byte) irq_cnt#1 )
  (bool~) sprites_irq::$3 ← (byte) irq_cnt#5 == (number) $a
  if((bool~) sprites_irq::$3) goto sprites_irq::@4
  to:sprites_irq::@8
sprites_irq::@4: scope:[sprites_irq]  from sprites_irq::@7
  (byte) irq_sprite_ptr#6 ← phi( sprites_irq::@7/(byte) irq_sprite_ptr#10 )
  (byte) irq_sprite_ypos#6 ← phi( sprites_irq::@7/(byte) irq_sprite_ypos#10 )
  (byte) irq_cnt#2 ← (number) 0
  (byte) irq_raster_next#2 ← (byte) IRQ_RASTER_FIRST#0
  (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#6 + (number) $15
  (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#6 + (number) 3
  to:sprites_irq::@6
sprites_irq::@8: scope:[sprites_irq]  from sprites_irq::@7
  (byte) irq_cnt#12 ← phi( sprites_irq::@7/(byte) irq_cnt#5 )
  (byte) irq_sprite_ptr#7 ← phi( sprites_irq::@7/(byte) irq_sprite_ptr#10 )
  (byte) irq_sprite_ypos#7 ← phi( sprites_irq::@7/(byte) irq_sprite_ypos#10 )
  (byte) irq_raster_next#7 ← phi( sprites_irq::@7/(byte) irq_raster_next#12 )
  (byte) irq_raster_next#3 ← (byte) irq_raster_next#7 + (number) $14
  (byte) irq_sprite_ypos#3 ← (byte) irq_sprite_ypos#7 + (number) $15
  (byte) irq_sprite_ptr#3 ← (byte) irq_sprite_ptr#7 + (number) 3
  to:sprites_irq::@6
sprites_irq::@6: scope:[sprites_irq]  from sprites_irq::@15 sprites_irq::@4 sprites_irq::@8
  (byte) irq_sprite_ptr#11 ← phi( sprites_irq::@15/(byte) irq_sprite_ptr#1 sprites_irq::@4/(byte) irq_sprite_ptr#2 sprites_irq::@8/(byte) irq_sprite_ptr#3 )
  (byte) irq_sprite_ypos#11 ← phi( sprites_irq::@15/(byte) irq_sprite_ypos#13 sprites_irq::@4/(byte) irq_sprite_ypos#2 sprites_irq::@8/(byte) irq_sprite_ypos#3 )
  (byte) irq_cnt#9 ← phi( sprites_irq::@15/(byte) irq_cnt#11 sprites_irq::@4/(byte) irq_cnt#2 sprites_irq::@8/(byte) irq_cnt#12 )
  (byte) irq_raster_next#8 ← phi( sprites_irq::@15/(byte) irq_raster_next#13 sprites_irq::@4/(byte) irq_raster_next#2 sprites_irq::@8/(byte) irq_raster_next#3 )
  *((byte*) RASTER#0) ← (byte) irq_raster_next#8
  *((byte*) IRQ_STATUS#0) ← (byte) IRQ_RASTER#0
  to:sprites_irq::@return
sprites_irq::@return: scope:[sprites_irq]  from sprites_irq::@6
  (byte) irq_sprite_ptr#8 ← phi( sprites_irq::@6/(byte) irq_sprite_ptr#11 )
  (byte) irq_sprite_ypos#8 ← phi( sprites_irq::@6/(byte) irq_sprite_ypos#11 )
  (byte) irq_raster_next#9 ← phi( sprites_irq::@6/(byte) irq_raster_next#8 )
  (byte) irq_cnt#6 ← phi( sprites_irq::@6/(byte) irq_cnt#9 )
  (byte) irq_cnt#3 ← (byte) irq_cnt#6
  (byte) irq_raster_next#4 ← (byte) irq_raster_next#9
  (byte) irq_sprite_ypos#4 ← (byte) irq_sprite_ypos#8
  (byte) irq_sprite_ptr#4 ← (byte) irq_sprite_ptr#8
  return 
  to:@return
@25: scope:[]  from @38
  (byte) irq_cnt#20 ← phi( @38/(byte) irq_cnt#0 )
  (byte) irq_sprite_ptr#18 ← phi( @38/(byte) irq_sprite_ptr#0 )
  (byte) level_bcd#61 ← phi( @38/(byte) level_bcd#68 )
  (byte) level#64 ← phi( @38/(byte) level#72 )
  (dword) score_bcd#51 ← phi( @38/(dword) score_bcd#56 )
  (word) lines_bcd#51 ← phi( @38/(word) lines_bcd#58 )
  (byte) keyboard_modifiers#33 ← phi( @38/(byte) keyboard_modifiers#39 )
  (byte) keyboard_events_size#40 ← phi( @38/(byte) keyboard_events_size#48 )
  (byte) render_screen_showing#21 ← phi( @38/(byte) render_screen_showing#26 )
  (byte) game_over#51 ← phi( @38/(byte) game_over#59 )
  (byte) current_ypos#69 ← phi( @38/(byte) current_ypos#77 )
  (byte) current_xpos#85 ← phi( @38/(byte) current_xpos#97 )
  (byte*) current_piece_gfx#72 ← phi( @38/(byte*) current_piece_gfx#84 )
  (byte) current_piece_char#58 ← phi( @38/(byte) current_piece_char#70 )
  (byte) render_screen_render#43 ← phi( @38/(byte) render_screen_render#49 )
  (byte) render_screen_show#35 ← phi( @38/(byte) render_screen_show#42 )
  (byte) irq_raster_next#20 ← phi( @38/(byte) irq_raster_next#22 )
  (byte) irq_sprite_ypos#18 ← phi( @38/(byte) irq_sprite_ypos#21 )
  (byte[4*4*4]) PIECE_T#0 ← { (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 1, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 1, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte[4*4*4]) PIECE_S#0 ← { (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte[4*4*4]) PIECE_Z#0 ← { (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte[4*4*4]) PIECE_L#0 ← { (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 1, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 1, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte[4*4*4]) PIECE_J#0 ← { (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte[4*4*4]) PIECE_O#0 ← { (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte[4*4*4]) PIECE_I#0 ← { (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0 }
  (word~) $8 ← ((word)) (byte[4*4*4]) PIECE_T#0
  (word~) $9 ← ((word)) (byte[4*4*4]) PIECE_S#0
  (word~) $10 ← ((word)) (byte[4*4*4]) PIECE_Z#0
  (word~) $11 ← ((word)) (byte[4*4*4]) PIECE_J#0
  (word~) $12 ← ((word)) (byte[4*4*4]) PIECE_O#0
  (word~) $13 ← ((word)) (byte[4*4*4]) PIECE_I#0
  (word~) $14 ← ((word)) (byte[4*4*4]) PIECE_L#0
  (word[]) PIECES#0 ← { (word~) $8, (word~) $9, (word~) $10, (word~) $11, (word~) $12, (word~) $13, (word~) $14 }
  (byte[]) PIECES_CHARS#0 ← { (number) $65, (number) $66, (number) $a6, (number) $66, (number) $65, (number) $65, (number) $a6 }
  (byte[]) PIECES_NEXT_CHARS#0 ← { (number) $63, (number) $64, (number) $a4, (number) $64, (number) $63, (number) $63, (number) $a4 }
  (byte[]) PIECES_START_X#0 ← { (number) 4, (number) 4, (number) 4, (number) 4, (number) 4, (number) 4, (number) 4 }
  (byte[]) PIECES_START_Y#0 ← { (number) 1, (number) 1, (number) 1, (number) 1, (number) 1, (number) 0, (number) 1 }
  (byte*[PLAYFIELD_LINES#0]) playfield_lines#0 ← { fill( PLAYFIELD_LINES#0, 0) }
  (number~) $15 ← (byte) PLAYFIELD_LINES#0 + (number) 1
  (byte[$15]) playfield_lines_idx#0 ← { fill( $15, 0) }
  (byte) next_piece_idx#0 ← (number) 0
  (byte*) current_piece#0 ← ((byte*)) (number) 0
  (byte) current_orientation#0 ← (number) 0
  (byte[]) MOVEDOWN_SLOW_SPEEDS#0 ← { (number) $30, (number) $2b, (number) $26, (number) $21, (number) $1c, (number) $17, (number) $12, (number) $d, (number) 8, (number) 6, (number) 5, (number) 5, (number) 5, (number) 4, (number) 4, (number) 4, (number) 3, (number) 3, (number) 3, (number) 2, (number) 2, (number) 2, (number) 2, (number) 2, (number) 2, (number) 2, (number) 2, (number) 2, (number) 2, (number) 1 }
  (byte) current_movedown_slow#0 ← (number) $30
  (byte) current_movedown_fast#0 ← (number) $a
  (byte) current_movedown_counter#0 ← (number) 0
  (dword[]) SCORE_BASE_BCD#0 ← { (number) 0, (number) $40, (number) $100, (number) $300, (number) $1200 }
  (dword[5]) score_add_bcd#0 ← { fill( 5, 0) }
  to:@30
play_init: scope:[play_init]  from main::@28
  (byte) level#44 ← phi( main::@28/(byte) level#58 )
  (byte) play_init::idx#0 ← (number) 0
  (byte*) play_init::pli#0 ← (byte[$3]) playfield#0
  (number~) play_init::$1 ← (byte) PLAYFIELD_LINES#0 - (number) 1
  (byte) play_init::j#0 ← (byte) 0
  to:play_init::@1
play_init::@1: scope:[play_init]  from play_init play_init::@1
  (byte) level#28 ← phi( play_init/(byte) level#44 play_init::@1/(byte) level#28 )
  (byte) play_init::idx#2 ← phi( play_init/(byte) play_init::idx#0 play_init::@1/(byte) play_init::idx#1 )
  (byte*) play_init::pli#2 ← phi( play_init/(byte*) play_init::pli#0 play_init::@1/(byte*) play_init::pli#1 )
  (byte) play_init::j#2 ← phi( play_init/(byte) play_init::j#0 play_init::@1/(byte) play_init::j#1 )
  (byte~) play_init::$4 ← (byte) play_init::j#2 * (const byte) SIZEOF_POINTER
  *((byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_init::$4) ← (byte*) play_init::pli#2
  *((byte[$15]) playfield_lines_idx#0 + (byte) play_init::j#2) ← (byte) play_init::idx#2
  (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (byte) PLAYFIELD_COLS#0
  (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (byte) PLAYFIELD_COLS#0
  (byte) play_init::j#1 ← (byte) play_init::j#2 + rangenext(0,play_init::$1)
  (bool~) play_init::$2 ← (byte) play_init::j#1 != rangelast(0,play_init::$1)
  if((bool~) play_init::$2) goto play_init::@1
  to:play_init::@2
play_init::@2: scope:[play_init]  from play_init::@1
  (byte) level#13 ← phi( play_init::@1/(byte) level#28 )
  (byte~) play_init::$0 ← (byte) PLAYFIELD_COLS#0 * (byte) PLAYFIELD_LINES#0
  *((byte[$15]) playfield_lines_idx#0 + (byte) PLAYFIELD_LINES#0) ← (byte~) play_init::$0
  (byte) current_movedown_slow#1 ← *((byte[]) MOVEDOWN_SLOW_SPEEDS#0 + (byte) level#13)
  (byte) play_init::b#0 ← (byte) 0
  to:play_init::@3
play_init::@3: scope:[play_init]  from play_init::@2 play_init::@3
  (byte) current_movedown_slow#29 ← phi( play_init::@2/(byte) current_movedown_slow#1 play_init::@3/(byte) current_movedown_slow#29 )
  (byte) play_init::b#2 ← phi( play_init::@2/(byte) play_init::b#0 play_init::@3/(byte) play_init::b#1 )
  (byte~) play_init::$5 ← (byte) play_init::b#2 * (const byte) SIZEOF_DWORD
  *((dword[5]) score_add_bcd#0 + (byte~) play_init::$5) ← *((dword[]) SCORE_BASE_BCD#0 + (byte~) play_init::$5)
  (byte) play_init::b#1 ← (byte) play_init::b#2 + rangenext(0,4)
  (bool~) play_init::$3 ← (byte) play_init::b#1 != rangelast(0,4)
  if((bool~) play_init::$3) goto play_init::@3
  to:play_init::@return
play_init::@return: scope:[play_init]  from play_init::@3
  (byte) current_movedown_slow#16 ← phi( play_init::@3/(byte) current_movedown_slow#29 )
  (byte) current_movedown_slow#2 ← (byte) current_movedown_slow#16
  return 
  to:@return
play_movement: scope:[play_movement]  from main::@11
  (byte) next_piece_idx#26 ← phi( main::@11/(byte) next_piece_idx#33 )
  (byte) game_over#23 ← phi( main::@11/(byte) game_over#32 )
  (byte) current_xpos#37 ← phi( main::@11/(byte) current_xpos#56 )
  (byte*) current_piece_gfx#31 ← phi( main::@11/(byte*) current_piece_gfx#43 )
  (byte) current_orientation#32 ← phi( main::@11/(byte) current_orientation#47 )
  (byte) current_piece_char#25 ← phi( main::@11/(byte) current_piece_char#34 )
  (byte*) current_piece#24 ← phi( main::@11/(byte*) current_piece#37 )
  (byte) level_bcd#27 ← phi( main::@11/(byte) level_bcd#39 )
  (byte) current_movedown_slow#30 ← phi( main::@11/(byte) current_movedown_slow#44 )
  (byte) level#29 ← phi( main::@11/(byte) level#39 )
  (dword) score_bcd#22 ← phi( main::@11/(dword) score_bcd#30 )
  (word) lines_bcd#22 ← phi( main::@11/(word) lines_bcd#30 )
  (byte) current_ypos#32 ← phi( main::@11/(byte) current_ypos#47 )
  (byte) current_movedown_counter#18 ← phi( main::@11/(byte) current_movedown_counter#24 )
  (byte) play_movement::key_event#1 ← phi( main::@11/(byte) play_movement::key_event#0 )
  (byte) play_movement::render#0 ← (number) 0
  (byte) play_move_down::key_event#0 ← (byte) play_movement::key_event#1
  call play_move_down 
  (byte) play_move_down::return#0 ← (byte) play_move_down::return#3
  to:play_movement::@5
play_movement::@5: scope:[play_movement]  from play_movement
  (byte) play_movement::key_event#4 ← phi( play_movement/(byte) play_movement::key_event#1 )
  (byte) play_movement::render#4 ← phi( play_movement/(byte) play_movement::render#0 )
  (byte) next_piece_idx#13 ← phi( play_movement/(byte) next_piece_idx#4 )
  (byte) game_over#12 ← phi( play_movement/(byte) game_over#4 )
  (byte) current_xpos#17 ← phi( play_movement/(byte) current_xpos#5 )
  (byte*) current_piece_gfx#16 ← phi( play_movement/(byte*) current_piece_gfx#5 )
  (byte) current_orientation#15 ← phi( play_movement/(byte) current_orientation#5 )
  (byte) current_piece_char#13 ← phi( play_movement/(byte) current_piece_char#4 )
  (byte*) current_piece#12 ← phi( play_movement/(byte*) current_piece#4 )
  (byte) level_bcd#14 ← phi( play_movement/(byte) level_bcd#4 )
  (byte) current_movedown_slow#17 ← phi( play_movement/(byte) current_movedown_slow#6 )
  (byte) level#14 ← phi( play_movement/(byte) level#4 )
  (dword) score_bcd#11 ← phi( play_movement/(dword) score_bcd#4 )
  (word) lines_bcd#12 ← phi( play_movement/(word) lines_bcd#4 )
  (byte) current_ypos#14 ← phi( play_movement/(byte) current_ypos#5 )
  (byte) current_movedown_counter#9 ← phi( play_movement/(byte) current_movedown_counter#5 )
  (byte) play_move_down::return#4 ← phi( play_movement/(byte) play_move_down::return#0 )
  (byte~) play_movement::$0 ← (byte) play_move_down::return#4
  (byte) current_movedown_counter#1 ← (byte) current_movedown_counter#9
  (byte) current_ypos#1 ← (byte) current_ypos#14
  (word) lines_bcd#1 ← (word) lines_bcd#12
  (dword) score_bcd#1 ← (dword) score_bcd#11
  (byte) level#1 ← (byte) level#14
  (byte) current_movedown_slow#3 ← (byte) current_movedown_slow#17
  (byte) level_bcd#1 ← (byte) level_bcd#14
  (byte*) current_piece#1 ← (byte*) current_piece#12
  (byte) current_piece_char#1 ← (byte) current_piece_char#13
  (byte) current_orientation#1 ← (byte) current_orientation#15
  (byte*) current_piece_gfx#1 ← (byte*) current_piece_gfx#16
  (byte) current_xpos#1 ← (byte) current_xpos#17
  (byte) game_over#1 ← (byte) game_over#12
  (byte) next_piece_idx#1 ← (byte) next_piece_idx#13
  (byte) play_movement::render#1 ← (byte) play_movement::render#4 + (byte~) play_movement::$0
  (bool~) play_movement::$1 ← (byte) game_over#1 != (number) 0
  (bool~) play_movement::$2 ← ! (bool~) play_movement::$1
  if((bool~) play_movement::$2) goto play_movement::@1
  to:play_movement::@2
play_movement::@1: scope:[play_movement]  from play_movement::@5
  (byte) next_piece_idx#49 ← phi( play_movement::@5/(byte) next_piece_idx#1 )
  (byte) game_over#46 ← phi( play_movement::@5/(byte) game_over#1 )
  (byte) current_piece_char#53 ← phi( play_movement::@5/(byte) current_piece_char#1 )
  (byte*) current_piece#55 ← phi( play_movement::@5/(byte*) current_piece#1 )
  (byte) level_bcd#56 ← phi( play_movement::@5/(byte) level_bcd#1 )
  (byte) current_movedown_slow#60 ← phi( play_movement::@5/(byte) current_movedown_slow#3 )
  (byte) level#59 ← phi( play_movement::@5/(byte) level#1 )
  (dword) score_bcd#46 ← phi( play_movement::@5/(dword) score_bcd#1 )
  (word) lines_bcd#46 ← phi( play_movement::@5/(word) lines_bcd#1 )
  (byte) current_movedown_counter#35 ← phi( play_movement::@5/(byte) current_movedown_counter#1 )
  (byte) current_ypos#54 ← phi( play_movement::@5/(byte) current_ypos#1 )
  (byte*) current_piece_gfx#48 ← phi( play_movement::@5/(byte*) current_piece_gfx#1 )
  (byte) current_orientation#50 ← phi( play_movement::@5/(byte) current_orientation#1 )
  (byte) play_movement::render#8 ← phi( play_movement::@5/(byte) play_movement::render#1 )
  (byte) current_xpos#38 ← phi( play_movement::@5/(byte) current_xpos#1 )
  (byte) play_movement::key_event#2 ← phi( play_movement::@5/(byte) play_movement::key_event#4 )
  (byte) play_move_leftright::key_event#0 ← (byte) play_movement::key_event#2
  call play_move_leftright 
  (byte) play_move_leftright::return#0 ← (byte) play_move_leftright::return#2
  to:play_movement::@6
play_movement::@6: scope:[play_movement]  from play_movement::@1
  (byte) next_piece_idx#37 ← phi( play_movement::@1/(byte) next_piece_idx#49 )
  (byte) game_over#35 ← phi( play_movement::@1/(byte) game_over#46 )
  (byte) current_piece_char#39 ← phi( play_movement::@1/(byte) current_piece_char#53 )
  (byte*) current_piece#40 ← phi( play_movement::@1/(byte*) current_piece#55 )
  (byte) level_bcd#43 ← phi( play_movement::@1/(byte) level_bcd#56 )
  (byte) current_movedown_slow#47 ← phi( play_movement::@1/(byte) current_movedown_slow#60 )
  (byte) level#45 ← phi( play_movement::@1/(byte) level#59 )
  (dword) score_bcd#34 ← phi( play_movement::@1/(dword) score_bcd#46 )
  (word) lines_bcd#34 ← phi( play_movement::@1/(word) lines_bcd#46 )
  (byte) current_ypos#50 ← phi( play_movement::@1/(byte) current_ypos#54 )
  (byte) current_movedown_counter#27 ← phi( play_movement::@1/(byte) current_movedown_counter#35 )
  (byte*) current_piece_gfx#32 ← phi( play_movement::@1/(byte*) current_piece_gfx#48 )
  (byte) current_orientation#33 ← phi( play_movement::@1/(byte) current_orientation#50 )
  (byte) play_movement::key_event#3 ← phi( play_movement::@1/(byte) play_movement::key_event#2 )
  (byte) play_movement::render#5 ← phi( play_movement::@1/(byte) play_movement::render#8 )
  (byte) current_xpos#18 ← phi( play_movement::@1/(byte) current_xpos#7 )
  (byte) play_move_leftright::return#5 ← phi( play_movement::@1/(byte) play_move_leftright::return#0 )
  (byte~) play_movement::$3 ← (byte) play_move_leftright::return#5
  (byte) current_xpos#2 ← (byte) current_xpos#18
  (byte) play_movement::render#2 ← (byte) play_movement::render#5 + (byte~) play_movement::$3
  (byte) play_move_rotate::key_event#0 ← (byte) play_movement::key_event#3
  call play_move_rotate 
  (byte) play_move_rotate::return#0 ← (byte) play_move_rotate::return#2
  to:play_movement::@7
play_movement::@7: scope:[play_movement]  from play_movement::@6
  (byte) next_piece_idx#28 ← phi( play_movement::@6/(byte) next_piece_idx#37 )
  (byte) game_over#25 ← phi( play_movement::@6/(byte) game_over#35 )
  (byte) current_xpos#40 ← phi( play_movement::@6/(byte) current_xpos#2 )
  (byte) current_piece_char#27 ← phi( play_movement::@6/(byte) current_piece_char#39 )
  (byte*) current_piece#26 ← phi( play_movement::@6/(byte*) current_piece#40 )
  (byte) level_bcd#29 ← phi( play_movement::@6/(byte) level_bcd#43 )
  (byte) current_movedown_slow#32 ← phi( play_movement::@6/(byte) current_movedown_slow#47 )
  (byte) level#31 ← phi( play_movement::@6/(byte) level#45 )
  (dword) score_bcd#24 ← phi( play_movement::@6/(dword) score_bcd#34 )
  (word) lines_bcd#24 ← phi( play_movement::@6/(word) lines_bcd#34 )
  (byte) current_ypos#34 ← phi( play_movement::@6/(byte) current_ypos#50 )
  (byte) current_movedown_counter#20 ← phi( play_movement::@6/(byte) current_movedown_counter#27 )
  (byte) play_movement::render#6 ← phi( play_movement::@6/(byte) play_movement::render#2 )
  (byte*) current_piece_gfx#17 ← phi( play_movement::@6/(byte*) current_piece_gfx#6 )
  (byte) current_orientation#16 ← phi( play_movement::@6/(byte) current_orientation#6 )
  (byte) play_move_rotate::return#5 ← phi( play_movement::@6/(byte) play_move_rotate::return#0 )
  (byte~) play_movement::$4 ← (byte) play_move_rotate::return#5
  (byte) current_orientation#2 ← (byte) current_orientation#16
  (byte*) current_piece_gfx#2 ← (byte*) current_piece_gfx#17
  (byte) play_movement::render#3 ← (byte) play_movement::render#6 + (byte~) play_movement::$4
  (byte) play_movement::return#0 ← (byte) play_movement::render#3
  to:play_movement::@return
play_movement::@2: scope:[play_movement]  from play_movement::@5
  (byte) next_piece_idx#27 ← phi( play_movement::@5/(byte) next_piece_idx#1 )
  (byte) game_over#24 ← phi( play_movement::@5/(byte) game_over#1 )
  (byte) current_xpos#39 ← phi( play_movement::@5/(byte) current_xpos#1 )
  (byte*) current_piece_gfx#33 ← phi( play_movement::@5/(byte*) current_piece_gfx#1 )
  (byte) current_orientation#34 ← phi( play_movement::@5/(byte) current_orientation#1 )
  (byte) current_piece_char#26 ← phi( play_movement::@5/(byte) current_piece_char#1 )
  (byte*) current_piece#25 ← phi( play_movement::@5/(byte*) current_piece#1 )
  (byte) level_bcd#28 ← phi( play_movement::@5/(byte) level_bcd#1 )
  (byte) current_movedown_slow#31 ← phi( play_movement::@5/(byte) current_movedown_slow#3 )
  (byte) level#30 ← phi( play_movement::@5/(byte) level#1 )
  (dword) score_bcd#23 ← phi( play_movement::@5/(dword) score_bcd#1 )
  (word) lines_bcd#23 ← phi( play_movement::@5/(word) lines_bcd#1 )
  (byte) current_ypos#33 ← phi( play_movement::@5/(byte) current_ypos#1 )
  (byte) current_movedown_counter#19 ← phi( play_movement::@5/(byte) current_movedown_counter#1 )
  (byte) play_movement::render#7 ← phi( play_movement::@5/(byte) play_movement::render#1 )
  (byte) play_movement::return#1 ← (byte) play_movement::render#7
  to:play_movement::@return
play_movement::@return: scope:[play_movement]  from play_movement::@2 play_movement::@7
  (byte) next_piece_idx#14 ← phi( play_movement::@2/(byte) next_piece_idx#27 play_movement::@7/(byte) next_piece_idx#28 )
  (byte) game_over#13 ← phi( play_movement::@2/(byte) game_over#24 play_movement::@7/(byte) game_over#25 )
  (byte) current_xpos#19 ← phi( play_movement::@2/(byte) current_xpos#39 play_movement::@7/(byte) current_xpos#40 )
  (byte*) current_piece_gfx#18 ← phi( play_movement::@2/(byte*) current_piece_gfx#33 play_movement::@7/(byte*) current_piece_gfx#2 )
  (byte) current_orientation#17 ← phi( play_movement::@2/(byte) current_orientation#34 play_movement::@7/(byte) current_orientation#2 )
  (byte) current_piece_char#14 ← phi( play_movement::@2/(byte) current_piece_char#26 play_movement::@7/(byte) current_piece_char#27 )
  (byte*) current_piece#13 ← phi( play_movement::@2/(byte*) current_piece#25 play_movement::@7/(byte*) current_piece#26 )
  (byte) level_bcd#15 ← phi( play_movement::@2/(byte) level_bcd#28 play_movement::@7/(byte) level_bcd#29 )
  (byte) current_movedown_slow#18 ← phi( play_movement::@2/(byte) current_movedown_slow#31 play_movement::@7/(byte) current_movedown_slow#32 )
  (byte) level#15 ← phi( play_movement::@2/(byte) level#30 play_movement::@7/(byte) level#31 )
  (dword) score_bcd#12 ← phi( play_movement::@2/(dword) score_bcd#23 play_movement::@7/(dword) score_bcd#24 )
  (word) lines_bcd#13 ← phi( play_movement::@2/(word) lines_bcd#23 play_movement::@7/(word) lines_bcd#24 )
  (byte) current_ypos#15 ← phi( play_movement::@2/(byte) current_ypos#33 play_movement::@7/(byte) current_ypos#34 )
  (byte) current_movedown_counter#10 ← phi( play_movement::@2/(byte) current_movedown_counter#19 play_movement::@7/(byte) current_movedown_counter#20 )
  (byte) play_movement::return#4 ← phi( play_movement::@2/(byte) play_movement::return#1 play_movement::@7/(byte) play_movement::return#0 )
  (byte) play_movement::return#2 ← (byte) play_movement::return#4
  (byte) current_movedown_counter#2 ← (byte) current_movedown_counter#10
  (byte) current_ypos#2 ← (byte) current_ypos#15
  (word) lines_bcd#2 ← (word) lines_bcd#13
  (dword) score_bcd#2 ← (dword) score_bcd#12
  (byte) level#2 ← (byte) level#15
  (byte) current_movedown_slow#4 ← (byte) current_movedown_slow#18
  (byte) level_bcd#2 ← (byte) level_bcd#15
  (byte*) current_piece#2 ← (byte*) current_piece#13
  (byte) current_piece_char#2 ← (byte) current_piece_char#14
  (byte) current_orientation#3 ← (byte) current_orientation#17
  (byte*) current_piece_gfx#3 ← (byte*) current_piece_gfx#18
  (byte) current_xpos#3 ← (byte) current_xpos#19
  (byte) game_over#2 ← (byte) game_over#13
  (byte) next_piece_idx#2 ← (byte) next_piece_idx#14
  return 
  to:@return
play_move_down: scope:[play_move_down]  from play_movement
  (byte) next_piece_idx#73 ← phi( play_movement/(byte) next_piece_idx#26 )
  (byte) game_over#79 ← phi( play_movement/(byte) game_over#23 )
  (byte*) current_piece_gfx#106 ← phi( play_movement/(byte*) current_piece_gfx#31 )
  (byte) current_piece_char#93 ← phi( play_movement/(byte) current_piece_char#25 )
  (byte*) current_piece#86 ← phi( play_movement/(byte*) current_piece#24 )
  (byte) level_bcd#86 ← phi( play_movement/(byte) level_bcd#27 )
  (byte) level#93 ← phi( play_movement/(byte) level#29 )
  (dword) score_bcd#71 ← phi( play_movement/(dword) score_bcd#22 )
  (word) lines_bcd#74 ← phi( play_movement/(word) lines_bcd#22 )
  (byte) current_orientation#86 ← phi( play_movement/(byte) current_orientation#32 )
  (byte) current_xpos#108 ← phi( play_movement/(byte) current_xpos#37 )
  (byte) current_ypos#87 ← phi( play_movement/(byte) current_ypos#32 )
  (byte) current_movedown_slow#61 ← phi( play_movement/(byte) current_movedown_slow#30 )
  (byte) play_move_down::key_event#1 ← phi( play_movement/(byte) play_move_down::key_event#0 )
  (byte) current_movedown_counter#11 ← phi( play_movement/(byte) current_movedown_counter#18 )
  (byte) current_movedown_counter#3 ← ++ (byte) current_movedown_counter#11
  (byte) play_move_down::movedown#0 ← (number) 0
  (bool~) play_move_down::$0 ← (byte) play_move_down::key_event#1 == (byte) KEY_SPACE#0
  (bool~) play_move_down::$1 ← ! (bool~) play_move_down::$0
  if((bool~) play_move_down::$1) goto play_move_down::@1
  to:play_move_down::@5
play_move_down::@1: scope:[play_move_down]  from play_move_down play_move_down::@5
  (byte) next_piece_idx#69 ← phi( play_move_down/(byte) next_piece_idx#73 play_move_down::@5/(byte) next_piece_idx#74 )
  (byte) game_over#73 ← phi( play_move_down/(byte) game_over#79 play_move_down::@5/(byte) game_over#80 )
  (byte*) current_piece_gfx#99 ← phi( play_move_down/(byte*) current_piece_gfx#106 play_move_down::@5/(byte*) current_piece_gfx#107 )
  (byte) current_piece_char#87 ← phi( play_move_down/(byte) current_piece_char#93 play_move_down::@5/(byte) current_piece_char#94 )
  (byte*) current_piece#81 ← phi( play_move_down/(byte*) current_piece#86 play_move_down::@5/(byte*) current_piece#87 )
  (byte) level_bcd#79 ← phi( play_move_down/(byte) level_bcd#86 play_move_down::@5/(byte) level_bcd#87 )
  (byte) level#86 ← phi( play_move_down/(byte) level#93 play_move_down::@5/(byte) level#94 )
  (dword) score_bcd#66 ← phi( play_move_down/(dword) score_bcd#71 play_move_down::@5/(dword) score_bcd#72 )
  (word) lines_bcd#69 ← phi( play_move_down/(word) lines_bcd#74 play_move_down::@5/(word) lines_bcd#75 )
  (byte) current_orientation#76 ← phi( play_move_down/(byte) current_orientation#86 play_move_down::@5/(byte) current_orientation#87 )
  (byte) current_xpos#98 ← phi( play_move_down/(byte) current_xpos#108 play_move_down::@5/(byte) current_xpos#109 )
  (byte) current_ypos#78 ← phi( play_move_down/(byte) current_ypos#87 play_move_down::@5/(byte) current_ypos#88 )
  (byte) play_move_down::movedown#11 ← phi( play_move_down/(byte) play_move_down::movedown#0 play_move_down::@5/(byte) play_move_down::movedown#1 )
  (byte) current_movedown_slow#48 ← phi( play_move_down/(byte) current_movedown_slow#61 play_move_down::@5/(byte) current_movedown_slow#62 )
  (byte) current_movedown_counter#28 ← phi( play_move_down/(byte) current_movedown_counter#3 play_move_down::@5/(byte) current_movedown_counter#36 )
  (byte) keyboard_event_pressed::keycode#4 ← (byte) KEY_SPACE#0
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#6 ← (byte) keyboard_event_pressed::return#5
  to:play_move_down::@17
play_move_down::@17: scope:[play_move_down]  from play_move_down::@1
  (byte) next_piece_idx#58 ← phi( play_move_down::@1/(byte) next_piece_idx#69 )
  (byte) game_over#60 ← phi( play_move_down::@1/(byte) game_over#73 )
  (byte*) current_piece_gfx#85 ← phi( play_move_down::@1/(byte*) current_piece_gfx#99 )
  (byte) current_piece_char#71 ← phi( play_move_down::@1/(byte) current_piece_char#87 )
  (byte*) current_piece#69 ← phi( play_move_down::@1/(byte*) current_piece#81 )
  (byte) level_bcd#69 ← phi( play_move_down::@1/(byte) level_bcd#79 )
  (byte) level#73 ← phi( play_move_down::@1/(byte) level#86 )
  (dword) score_bcd#57 ← phi( play_move_down::@1/(dword) score_bcd#66 )
  (word) lines_bcd#59 ← phi( play_move_down::@1/(word) lines_bcd#69 )
  (byte) current_orientation#63 ← phi( play_move_down::@1/(byte) current_orientation#76 )
  (byte) current_xpos#80 ← phi( play_move_down::@1/(byte) current_xpos#98 )
  (byte) current_ypos#65 ← phi( play_move_down::@1/(byte) current_ypos#78 )
  (byte) play_move_down::movedown#10 ← phi( play_move_down::@1/(byte) play_move_down::movedown#11 )
  (byte) current_movedown_slow#33 ← phi( play_move_down::@1/(byte) current_movedown_slow#48 )
  (byte) current_movedown_counter#21 ← phi( play_move_down::@1/(byte) current_movedown_counter#28 )
  (byte) keyboard_event_pressed::return#12 ← phi( play_move_down::@1/(byte) keyboard_event_pressed::return#6 )
  (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
  (bool~) play_move_down::$3 ← (byte~) play_move_down::$2 != (number) 0
  (bool~) play_move_down::$4 ← ! (bool~) play_move_down::$3
  if((bool~) play_move_down::$4) goto play_move_down::@2
  to:play_move_down::@6
play_move_down::@5: scope:[play_move_down]  from play_move_down
  (byte) next_piece_idx#74 ← phi( play_move_down/(byte) next_piece_idx#73 )
  (byte) game_over#80 ← phi( play_move_down/(byte) game_over#79 )
  (byte*) current_piece_gfx#107 ← phi( play_move_down/(byte*) current_piece_gfx#106 )
  (byte) current_piece_char#94 ← phi( play_move_down/(byte) current_piece_char#93 )
  (byte*) current_piece#87 ← phi( play_move_down/(byte*) current_piece#86 )
  (byte) level_bcd#87 ← phi( play_move_down/(byte) level_bcd#86 )
  (byte) level#94 ← phi( play_move_down/(byte) level#93 )
  (dword) score_bcd#72 ← phi( play_move_down/(dword) score_bcd#71 )
  (word) lines_bcd#75 ← phi( play_move_down/(word) lines_bcd#74 )
  (byte) current_orientation#87 ← phi( play_move_down/(byte) current_orientation#86 )
  (byte) current_xpos#109 ← phi( play_move_down/(byte) current_xpos#108 )
  (byte) current_ypos#88 ← phi( play_move_down/(byte) current_ypos#87 )
  (byte) current_movedown_slow#62 ← phi( play_move_down/(byte) current_movedown_slow#61 )
  (byte) current_movedown_counter#36 ← phi( play_move_down/(byte) current_movedown_counter#3 )
  (byte) play_move_down::movedown#4 ← phi( play_move_down/(byte) play_move_down::movedown#0 )
  (byte) play_move_down::movedown#1 ← ++ (byte) play_move_down::movedown#4
  to:play_move_down::@1
play_move_down::@2: scope:[play_move_down]  from play_move_down::@17 play_move_down::@6 play_move_down::@7
  (byte) next_piece_idx#50 ← phi( play_move_down::@17/(byte) next_piece_idx#58 play_move_down::@6/(byte) next_piece_idx#59 play_move_down::@7/(byte) next_piece_idx#60 )
  (byte) game_over#47 ← phi( play_move_down::@17/(byte) game_over#60 play_move_down::@6/(byte) game_over#61 play_move_down::@7/(byte) game_over#62 )
  (byte*) current_piece_gfx#66 ← phi( play_move_down::@17/(byte*) current_piece_gfx#85 play_move_down::@6/(byte*) current_piece_gfx#86 play_move_down::@7/(byte*) current_piece_gfx#87 )
  (byte) current_piece_char#54 ← phi( play_move_down::@17/(byte) current_piece_char#71 play_move_down::@6/(byte) current_piece_char#72 play_move_down::@7/(byte) current_piece_char#73 )
  (byte*) current_piece#56 ← phi( play_move_down::@17/(byte*) current_piece#69 play_move_down::@6/(byte*) current_piece#70 play_move_down::@7/(byte*) current_piece#71 )
  (byte) level_bcd#57 ← phi( play_move_down::@17/(byte) level_bcd#69 play_move_down::@6/(byte) level_bcd#70 play_move_down::@7/(byte) level_bcd#71 )
  (byte) level#60 ← phi( play_move_down::@17/(byte) level#73 play_move_down::@6/(byte) level#74 play_move_down::@7/(byte) level#75 )
  (dword) score_bcd#47 ← phi( play_move_down::@17/(dword) score_bcd#57 play_move_down::@6/(dword) score_bcd#58 play_move_down::@7/(dword) score_bcd#59 )
  (word) lines_bcd#47 ← phi( play_move_down::@17/(word) lines_bcd#59 play_move_down::@6/(word) lines_bcd#60 play_move_down::@7/(word) lines_bcd#61 )
  (byte) current_orientation#51 ← phi( play_move_down::@17/(byte) current_orientation#63 play_move_down::@6/(byte) current_orientation#64 play_move_down::@7/(byte) current_orientation#65 )
  (byte) current_xpos#61 ← phi( play_move_down::@17/(byte) current_xpos#80 play_move_down::@6/(byte) current_xpos#81 play_move_down::@7/(byte) current_xpos#82 )
  (byte) current_ypos#51 ← phi( play_move_down::@17/(byte) current_ypos#65 play_move_down::@6/(byte) current_ypos#66 play_move_down::@7/(byte) current_ypos#67 )
  (byte) play_move_down::movedown#9 ← phi( play_move_down::@17/(byte) play_move_down::movedown#10 play_move_down::@6/(byte) play_move_down::movedown#8 play_move_down::@7/(byte) play_move_down::movedown#2 )
  (byte) current_movedown_slow#19 ← phi( play_move_down::@17/(byte) current_movedown_slow#33 play_move_down::@6/(byte) current_movedown_slow#34 play_move_down::@7/(byte) current_movedown_slow#35 )
  (byte) current_movedown_counter#12 ← phi( play_move_down::@17/(byte) current_movedown_counter#21 play_move_down::@6/(byte) current_movedown_counter#13 play_move_down::@7/(byte) current_movedown_counter#22 )
  (bool~) play_move_down::$5 ← (byte) current_movedown_counter#12 >= (byte) current_movedown_slow#19
  (bool~) play_move_down::$6 ← ! (bool~) play_move_down::$5
  if((bool~) play_move_down::$6) goto play_move_down::@3
  to:play_move_down::@8
play_move_down::@6: scope:[play_move_down]  from play_move_down::@17
  (byte) next_piece_idx#59 ← phi( play_move_down::@17/(byte) next_piece_idx#58 )
  (byte) game_over#61 ← phi( play_move_down::@17/(byte) game_over#60 )
  (byte*) current_piece_gfx#86 ← phi( play_move_down::@17/(byte*) current_piece_gfx#85 )
  (byte) current_piece_char#72 ← phi( play_move_down::@17/(byte) current_piece_char#71 )
  (byte*) current_piece#70 ← phi( play_move_down::@17/(byte*) current_piece#69 )
  (byte) level_bcd#70 ← phi( play_move_down::@17/(byte) level_bcd#69 )
  (byte) level#74 ← phi( play_move_down::@17/(byte) level#73 )
  (dword) score_bcd#58 ← phi( play_move_down::@17/(dword) score_bcd#57 )
  (word) lines_bcd#60 ← phi( play_move_down::@17/(word) lines_bcd#59 )
  (byte) current_orientation#64 ← phi( play_move_down::@17/(byte) current_orientation#63 )
  (byte) current_xpos#81 ← phi( play_move_down::@17/(byte) current_xpos#80 )
  (byte) current_ypos#66 ← phi( play_move_down::@17/(byte) current_ypos#65 )
  (byte) play_move_down::movedown#8 ← phi( play_move_down::@17/(byte) play_move_down::movedown#10 )
  (byte) current_movedown_slow#34 ← phi( play_move_down::@17/(byte) current_movedown_slow#33 )
  (byte) current_movedown_counter#13 ← phi( play_move_down::@17/(byte) current_movedown_counter#21 )
  (bool~) play_move_down::$9 ← (byte) current_movedown_counter#13 >= (byte) current_movedown_fast#0
  (bool~) play_move_down::$10 ← ! (bool~) play_move_down::$9
  if((bool~) play_move_down::$10) goto play_move_down::@2
  to:play_move_down::@7
play_move_down::@7: scope:[play_move_down]  from play_move_down::@6
  (byte) next_piece_idx#60 ← phi( play_move_down::@6/(byte) next_piece_idx#59 )
  (byte) game_over#62 ← phi( play_move_down::@6/(byte) game_over#61 )
  (byte*) current_piece_gfx#87 ← phi( play_move_down::@6/(byte*) current_piece_gfx#86 )
  (byte) current_piece_char#73 ← phi( play_move_down::@6/(byte) current_piece_char#72 )
  (byte*) current_piece#71 ← phi( play_move_down::@6/(byte*) current_piece#70 )
  (byte) level_bcd#71 ← phi( play_move_down::@6/(byte) level_bcd#70 )
  (byte) level#75 ← phi( play_move_down::@6/(byte) level#74 )
  (dword) score_bcd#59 ← phi( play_move_down::@6/(dword) score_bcd#58 )
  (word) lines_bcd#61 ← phi( play_move_down::@6/(word) lines_bcd#60 )
  (byte) current_orientation#65 ← phi( play_move_down::@6/(byte) current_orientation#64 )
  (byte) current_xpos#82 ← phi( play_move_down::@6/(byte) current_xpos#81 )
  (byte) current_ypos#67 ← phi( play_move_down::@6/(byte) current_ypos#66 )
  (byte) current_movedown_slow#35 ← phi( play_move_down::@6/(byte) current_movedown_slow#34 )
  (byte) current_movedown_counter#22 ← phi( play_move_down::@6/(byte) current_movedown_counter#13 )
  (byte) play_move_down::movedown#5 ← phi( play_move_down::@6/(byte) play_move_down::movedown#8 )
  (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#5
  to:play_move_down::@2
play_move_down::@3: scope:[play_move_down]  from play_move_down::@2 play_move_down::@8
  (byte) next_piece_idx#38 ← phi( play_move_down::@2/(byte) next_piece_idx#50 play_move_down::@8/(byte) next_piece_idx#51 )
  (byte) game_over#36 ← phi( play_move_down::@2/(byte) game_over#47 play_move_down::@8/(byte) game_over#48 )
  (byte*) current_piece_gfx#49 ← phi( play_move_down::@2/(byte*) current_piece_gfx#66 play_move_down::@8/(byte*) current_piece_gfx#67 )
  (byte) current_piece_char#40 ← phi( play_move_down::@2/(byte) current_piece_char#54 play_move_down::@8/(byte) current_piece_char#55 )
  (byte*) current_piece#41 ← phi( play_move_down::@2/(byte*) current_piece#56 play_move_down::@8/(byte*) current_piece#57 )
  (byte) level_bcd#44 ← phi( play_move_down::@2/(byte) level_bcd#57 play_move_down::@8/(byte) level_bcd#58 )
  (byte) current_movedown_slow#49 ← phi( play_move_down::@2/(byte) current_movedown_slow#19 play_move_down::@8/(byte) current_movedown_slow#63 )
  (byte) level#46 ← phi( play_move_down::@2/(byte) level#60 play_move_down::@8/(byte) level#61 )
  (dword) score_bcd#35 ← phi( play_move_down::@2/(dword) score_bcd#47 play_move_down::@8/(dword) score_bcd#48 )
  (word) lines_bcd#35 ← phi( play_move_down::@2/(word) lines_bcd#47 play_move_down::@8/(word) lines_bcd#48 )
  (byte) current_movedown_counter#29 ← phi( play_move_down::@2/(byte) current_movedown_counter#12 play_move_down::@8/(byte) current_movedown_counter#37 )
  (byte) current_orientation#35 ← phi( play_move_down::@2/(byte) current_orientation#51 play_move_down::@8/(byte) current_orientation#52 )
  (byte) current_xpos#41 ← phi( play_move_down::@2/(byte) current_xpos#61 play_move_down::@8/(byte) current_xpos#62 )
  (byte) current_ypos#35 ← phi( play_move_down::@2/(byte) current_ypos#51 play_move_down::@8/(byte) current_ypos#52 )
  (byte) play_move_down::movedown#6 ← phi( play_move_down::@2/(byte) play_move_down::movedown#9 play_move_down::@8/(byte) play_move_down::movedown#3 )
  (bool~) play_move_down::$7 ← (byte) play_move_down::movedown#6 != (number) 0
  (bool~) play_move_down::$8 ← ! (bool~) play_move_down::$7
  if((bool~) play_move_down::$8) goto play_move_down::@4
  to:play_move_down::@9
play_move_down::@8: scope:[play_move_down]  from play_move_down::@2
  (byte) next_piece_idx#51 ← phi( play_move_down::@2/(byte) next_piece_idx#50 )
  (byte) game_over#48 ← phi( play_move_down::@2/(byte) game_over#47 )
  (byte*) current_piece_gfx#67 ← phi( play_move_down::@2/(byte*) current_piece_gfx#66 )
  (byte) current_piece_char#55 ← phi( play_move_down::@2/(byte) current_piece_char#54 )
  (byte*) current_piece#57 ← phi( play_move_down::@2/(byte*) current_piece#56 )
  (byte) level_bcd#58 ← phi( play_move_down::@2/(byte) level_bcd#57 )
  (byte) current_movedown_slow#63 ← phi( play_move_down::@2/(byte) current_movedown_slow#19 )
  (byte) level#61 ← phi( play_move_down::@2/(byte) level#60 )
  (dword) score_bcd#48 ← phi( play_move_down::@2/(dword) score_bcd#47 )
  (word) lines_bcd#48 ← phi( play_move_down::@2/(word) lines_bcd#47 )
  (byte) current_movedown_counter#37 ← phi( play_move_down::@2/(byte) current_movedown_counter#12 )
  (byte) current_orientation#52 ← phi( play_move_down::@2/(byte) current_orientation#51 )
  (byte) current_xpos#62 ← phi( play_move_down::@2/(byte) current_xpos#61 )
  (byte) current_ypos#52 ← phi( play_move_down::@2/(byte) current_ypos#51 )
  (byte) play_move_down::movedown#7 ← phi( play_move_down::@2/(byte) play_move_down::movedown#9 )
  (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7
  to:play_move_down::@3
play_move_down::@4: scope:[play_move_down]  from play_move_down::@3
  (byte) next_piece_idx#31 ← phi( play_move_down::@3/(byte) next_piece_idx#38 )
  (byte) game_over#28 ← phi( play_move_down::@3/(byte) game_over#36 )
  (byte) current_xpos#44 ← phi( play_move_down::@3/(byte) current_xpos#41 )
  (byte*) current_piece_gfx#36 ← phi( play_move_down::@3/(byte*) current_piece_gfx#49 )
  (byte) current_orientation#38 ← phi( play_move_down::@3/(byte) current_orientation#35 )
  (byte) current_piece_char#30 ← phi( play_move_down::@3/(byte) current_piece_char#40 )
  (byte*) current_piece#29 ← phi( play_move_down::@3/(byte*) current_piece#41 )
  (byte) level_bcd#32 ← phi( play_move_down::@3/(byte) level_bcd#44 )
  (byte) current_movedown_slow#38 ← phi( play_move_down::@3/(byte) current_movedown_slow#49 )
  (byte) level#34 ← phi( play_move_down::@3/(byte) level#46 )
  (dword) score_bcd#27 ← phi( play_move_down::@3/(dword) score_bcd#35 )
  (word) lines_bcd#27 ← phi( play_move_down::@3/(word) lines_bcd#35 )
  (byte) current_ypos#39 ← phi( play_move_down::@3/(byte) current_ypos#35 )
  (byte) current_movedown_counter#23 ← phi( play_move_down::@3/(byte) current_movedown_counter#29 )
  (byte) play_move_down::return#1 ← (number) 0
  to:play_move_down::@return
play_move_down::@9: scope:[play_move_down]  from play_move_down::@3
  (byte) next_piece_idx#61 ← phi( play_move_down::@3/(byte) next_piece_idx#38 )
  (byte) game_over#63 ← phi( play_move_down::@3/(byte) game_over#36 )
  (byte*) current_piece_gfx#88 ← phi( play_move_down::@3/(byte*) current_piece_gfx#49 )
  (byte) current_piece_char#74 ← phi( play_move_down::@3/(byte) current_piece_char#40 )
  (byte) level_bcd#72 ← phi( play_move_down::@3/(byte) level_bcd#44 )
  (byte) current_movedown_slow#72 ← phi( play_move_down::@3/(byte) current_movedown_slow#49 )
  (byte) level#76 ← phi( play_move_down::@3/(byte) level#46 )
  (dword) score_bcd#60 ← phi( play_move_down::@3/(dword) score_bcd#35 )
  (word) lines_bcd#62 ← phi( play_move_down::@3/(word) lines_bcd#35 )
  (byte*) current_piece#31 ← phi( play_move_down::@3/(byte*) current_piece#41 )
  (byte) current_orientation#18 ← phi( play_move_down::@3/(byte) current_orientation#35 )
  (byte) current_xpos#20 ← phi( play_move_down::@3/(byte) current_xpos#41 )
  (byte) current_ypos#16 ← phi( play_move_down::@3/(byte) current_ypos#35 )
  (number~) play_move_down::$11 ← (byte) current_ypos#16 + (number) 1
  (byte) play_collision::xpos#0 ← (byte) current_xpos#20
  (byte) play_collision::ypos#0 ← (number~) play_move_down::$11
  (byte) play_collision::orientation#0 ← (byte) current_orientation#18
  call play_collision 
  (byte) play_collision::return#0 ← (byte) play_collision::return#5
  to:play_move_down::@18
play_move_down::@18: scope:[play_move_down]  from play_move_down::@9
  (byte) next_piece_idx#52 ← phi( play_move_down::@9/(byte) next_piece_idx#61 )
  (byte) game_over#49 ← phi( play_move_down::@9/(byte) game_over#63 )
  (byte) current_xpos#83 ← phi( play_move_down::@9/(byte) current_xpos#20 )
  (byte*) current_piece_gfx#68 ← phi( play_move_down::@9/(byte*) current_piece_gfx#88 )
  (byte) current_orientation#66 ← phi( play_move_down::@9/(byte) current_orientation#18 )
  (byte) current_piece_char#56 ← phi( play_move_down::@9/(byte) current_piece_char#74 )
  (byte*) current_piece#58 ← phi( play_move_down::@9/(byte*) current_piece#31 )
  (byte) level_bcd#59 ← phi( play_move_down::@9/(byte) level_bcd#72 )
  (byte) current_movedown_slow#64 ← phi( play_move_down::@9/(byte) current_movedown_slow#72 )
  (byte) level#62 ← phi( play_move_down::@9/(byte) level#76 )
  (dword) score_bcd#49 ← phi( play_move_down::@9/(dword) score_bcd#60 )
  (word) lines_bcd#49 ← phi( play_move_down::@9/(word) lines_bcd#62 )
  (byte) current_ypos#36 ← phi( play_move_down::@9/(byte) current_ypos#16 )
  (byte) play_collision::return#11 ← phi( play_move_down::@9/(byte) play_collision::return#0 )
  (byte~) play_move_down::$12 ← (byte) play_collision::return#11
  (bool~) play_move_down::$13 ← (byte~) play_move_down::$12 == (byte) COLLISION_NONE#0
  if((bool~) play_move_down::$13) goto play_move_down::@14
  to:play_move_down::@10
play_move_down::@14: scope:[play_move_down]  from play_move_down::@18
  (byte) next_piece_idx#40 ← phi( play_move_down::@18/(byte) next_piece_idx#52 )
  (byte) game_over#38 ← phi( play_move_down::@18/(byte) game_over#49 )
  (byte) current_xpos#64 ← phi( play_move_down::@18/(byte) current_xpos#83 )
  (byte*) current_piece_gfx#51 ← phi( play_move_down::@18/(byte*) current_piece_gfx#68 )
  (byte) current_orientation#54 ← phi( play_move_down::@18/(byte) current_orientation#66 )
  (byte) current_piece_char#42 ← phi( play_move_down::@18/(byte) current_piece_char#56 )
  (byte*) current_piece#43 ← phi( play_move_down::@18/(byte*) current_piece#58 )
  (byte) level_bcd#46 ← phi( play_move_down::@18/(byte) level_bcd#59 )
  (byte) current_movedown_slow#51 ← phi( play_move_down::@18/(byte) current_movedown_slow#64 )
  (byte) level#48 ← phi( play_move_down::@18/(byte) level#62 )
  (dword) score_bcd#37 ← phi( play_move_down::@18/(dword) score_bcd#49 )
  (word) lines_bcd#37 ← phi( play_move_down::@18/(word) lines_bcd#49 )
  (byte) current_ypos#17 ← phi( play_move_down::@18/(byte) current_ypos#36 )
  (byte) current_ypos#3 ← ++ (byte) current_ypos#17
  to:play_move_down::@15
play_move_down::@10: scope:[play_move_down]  from play_move_down::@18
  (byte) next_piece_idx#62 ← phi( play_move_down::@18/(byte) next_piece_idx#52 )
  (byte) game_over#64 ← phi( play_move_down::@18/(byte) game_over#49 )
  (byte) current_orientation#77 ← phi( play_move_down::@18/(byte) current_orientation#66 )
  (byte) current_piece_char#75 ← phi( play_move_down::@18/(byte) current_piece_char#56 )
  (byte*) current_piece#72 ← phi( play_move_down::@18/(byte*) current_piece#58 )
  (byte*) current_piece_gfx#73 ← phi( play_move_down::@18/(byte*) current_piece_gfx#68 )
  (byte) level_bcd#60 ← phi( play_move_down::@18/(byte) level_bcd#59 )
  (byte) current_movedown_slow#65 ← phi( play_move_down::@18/(byte) current_movedown_slow#64 )
  (byte) level#63 ← phi( play_move_down::@18/(byte) level#62 )
  (dword) score_bcd#50 ← phi( play_move_down::@18/(dword) score_bcd#49 )
  (word) lines_bcd#50 ← phi( play_move_down::@18/(word) lines_bcd#49 )
  (byte) current_xpos#67 ← phi( play_move_down::@18/(byte) current_xpos#83 )
  (byte) current_ypos#44 ← phi( play_move_down::@18/(byte) current_ypos#36 )
  call play_lock_current 
  to:play_move_down::@19
play_move_down::@19: scope:[play_move_down]  from play_move_down::@10
  (byte) next_piece_idx#53 ← phi( play_move_down::@10/(byte) next_piece_idx#62 )
  (byte) game_over#50 ← phi( play_move_down::@10/(byte) game_over#64 )
  (byte) current_ypos#68 ← phi( play_move_down::@10/(byte) current_ypos#44 )
  (byte) current_xpos#84 ← phi( play_move_down::@10/(byte) current_xpos#67 )
  (byte*) current_piece_gfx#69 ← phi( play_move_down::@10/(byte*) current_piece_gfx#73 )
  (byte) current_orientation#67 ← phi( play_move_down::@10/(byte) current_orientation#77 )
  (byte) current_piece_char#57 ← phi( play_move_down::@10/(byte) current_piece_char#75 )
  (byte*) current_piece#59 ← phi( play_move_down::@10/(byte*) current_piece#72 )
  (byte) level_bcd#45 ← phi( play_move_down::@10/(byte) level_bcd#60 )
  (byte) current_movedown_slow#50 ← phi( play_move_down::@10/(byte) current_movedown_slow#65 )
  (byte) level#47 ← phi( play_move_down::@10/(byte) level#63 )
  (dword) score_bcd#36 ← phi( play_move_down::@10/(dword) score_bcd#50 )
  (word) lines_bcd#36 ← phi( play_move_down::@10/(word) lines_bcd#50 )
  call play_remove_lines 
  (byte) play_remove_lines::return#0 ← (byte) play_remove_lines::return#2
  to:play_move_down::@20
play_move_down::@20: scope:[play_move_down]  from play_move_down::@19
  (byte) next_piece_idx#39 ← phi( play_move_down::@19/(byte) next_piece_idx#53 )
  (byte) game_over#37 ← phi( play_move_down::@19/(byte) game_over#50 )
  (byte) current_ypos#53 ← phi( play_move_down::@19/(byte) current_ypos#68 )
  (byte) current_xpos#63 ← phi( play_move_down::@19/(byte) current_xpos#84 )
  (byte*) current_piece_gfx#50 ← phi( play_move_down::@19/(byte*) current_piece_gfx#69 )
  (byte) current_orientation#53 ← phi( play_move_down::@19/(byte) current_orientation#67 )
  (byte) current_piece_char#41 ← phi( play_move_down::@19/(byte) current_piece_char#57 )
  (byte*) current_piece#42 ← phi( play_move_down::@19/(byte*) current_piece#59 )
  (byte) level_bcd#30 ← phi( play_move_down::@19/(byte) level_bcd#45 )
  (byte) current_movedown_slow#36 ← phi( play_move_down::@19/(byte) current_movedown_slow#50 )
  (byte) level#32 ← phi( play_move_down::@19/(byte) level#47 )
  (dword) score_bcd#25 ← phi( play_move_down::@19/(dword) score_bcd#36 )
  (word) lines_bcd#25 ← phi( play_move_down::@19/(word) lines_bcd#36 )
  (byte) play_remove_lines::return#3 ← phi( play_move_down::@19/(byte) play_remove_lines::return#0 )
  (byte~) play_move_down::$15 ← (byte) play_remove_lines::return#3
  (byte) play_move_down::removed#0 ← (byte~) play_move_down::$15
  (byte) play_update_score::removed#0 ← (byte) play_move_down::removed#0
  call play_update_score 
  to:play_move_down::@21
play_move_down::@21: scope:[play_move_down]  from play_move_down::@20
  (byte) next_piece_idx#29 ← phi( play_move_down::@20/(byte) next_piece_idx#39 )
  (byte) game_over#26 ← phi( play_move_down::@20/(byte) game_over#37 )
  (byte) current_ypos#37 ← phi( play_move_down::@20/(byte) current_ypos#53 )
  (byte) current_xpos#42 ← phi( play_move_down::@20/(byte) current_xpos#63 )
  (byte*) current_piece_gfx#34 ← phi( play_move_down::@20/(byte*) current_piece_gfx#50 )
  (byte) current_orientation#36 ← phi( play_move_down::@20/(byte) current_orientation#53 )
  (byte) current_piece_char#28 ← phi( play_move_down::@20/(byte) current_piece_char#41 )
  (byte*) current_piece#27 ← phi( play_move_down::@20/(byte*) current_piece#42 )
  (byte) level_bcd#16 ← phi( play_move_down::@20/(byte) level_bcd#6 )
  (byte) current_movedown_slow#20 ← phi( play_move_down::@20/(byte) current_movedown_slow#8 )
  (byte) level#16 ← phi( play_move_down::@20/(byte) level#6 )
  (dword) score_bcd#13 ← phi( play_move_down::@20/(dword) score_bcd#6 )
  (word) lines_bcd#14 ← phi( play_move_down::@20/(word) lines_bcd#6 )
  (word) lines_bcd#3 ← (word) lines_bcd#14
  (dword) score_bcd#3 ← (dword) score_bcd#13
  (byte) level#3 ← (byte) level#16
  (byte) current_movedown_slow#5 ← (byte) current_movedown_slow#20
  (byte) level_bcd#3 ← (byte) level_bcd#16
  call play_spawn_current 
  to:play_move_down::@22
play_move_down::@22: scope:[play_move_down]  from play_move_down::@21
  (byte) level_bcd#47 ← phi( play_move_down::@21/(byte) level_bcd#3 )
  (byte) current_movedown_slow#52 ← phi( play_move_down::@21/(byte) current_movedown_slow#5 )
  (byte) level#49 ← phi( play_move_down::@21/(byte) level#3 )
  (dword) score_bcd#38 ← phi( play_move_down::@21/(dword) score_bcd#3 )
  (word) lines_bcd#38 ← phi( play_move_down::@21/(word) lines_bcd#3 )
  (byte) next_piece_idx#15 ← phi( play_move_down::@21/(byte) next_piece_idx#6 )
  (byte) game_over#14 ← phi( play_move_down::@21/(byte) game_over#6 )
  (byte) current_ypos#18 ← phi( play_move_down::@21/(byte) current_ypos#7 )
  (byte) current_xpos#21 ← phi( play_move_down::@21/(byte) current_xpos#10 )
  (byte*) current_piece_gfx#19 ← phi( play_move_down::@21/(byte*) current_piece_gfx#9 )
  (byte) current_orientation#19 ← phi( play_move_down::@21/(byte) current_orientation#9 )
  (byte) current_piece_char#15 ← phi( play_move_down::@21/(byte) current_piece_char#6 )
  (byte*) current_piece#14 ← phi( play_move_down::@21/(byte*) current_piece#6 )
  (byte*) current_piece#3 ← (byte*) current_piece#14
  (byte) current_piece_char#3 ← (byte) current_piece_char#15
  (byte) current_orientation#4 ← (byte) current_orientation#19
  (byte*) current_piece_gfx#4 ← (byte*) current_piece_gfx#19
  (byte) current_xpos#4 ← (byte) current_xpos#21
  (byte) current_ypos#4 ← (byte) current_ypos#18
  (byte) game_over#3 ← (byte) game_over#14
  (byte) next_piece_idx#3 ← (byte) next_piece_idx#15
  to:play_move_down::@15
play_move_down::@15: scope:[play_move_down]  from play_move_down::@14 play_move_down::@22
  (byte) next_piece_idx#30 ← phi( play_move_down::@14/(byte) next_piece_idx#40 play_move_down::@22/(byte) next_piece_idx#3 )
  (byte) game_over#27 ← phi( play_move_down::@14/(byte) game_over#38 play_move_down::@22/(byte) game_over#3 )
  (byte) current_xpos#43 ← phi( play_move_down::@14/(byte) current_xpos#64 play_move_down::@22/(byte) current_xpos#4 )
  (byte*) current_piece_gfx#35 ← phi( play_move_down::@14/(byte*) current_piece_gfx#51 play_move_down::@22/(byte*) current_piece_gfx#4 )
  (byte) current_orientation#37 ← phi( play_move_down::@14/(byte) current_orientation#54 play_move_down::@22/(byte) current_orientation#4 )
  (byte) current_piece_char#29 ← phi( play_move_down::@14/(byte) current_piece_char#42 play_move_down::@22/(byte) current_piece_char#3 )
  (byte*) current_piece#28 ← phi( play_move_down::@14/(byte*) current_piece#43 play_move_down::@22/(byte*) current_piece#3 )
  (byte) level_bcd#31 ← phi( play_move_down::@14/(byte) level_bcd#46 play_move_down::@22/(byte) level_bcd#47 )
  (byte) current_movedown_slow#37 ← phi( play_move_down::@14/(byte) current_movedown_slow#51 play_move_down::@22/(byte) current_movedown_slow#52 )
  (byte) level#33 ← phi( play_move_down::@14/(byte) level#48 play_move_down::@22/(byte) level#49 )
  (dword) score_bcd#26 ← phi( play_move_down::@14/(dword) score_bcd#37 play_move_down::@22/(dword) score_bcd#38 )
  (word) lines_bcd#26 ← phi( play_move_down::@14/(word) lines_bcd#37 play_move_down::@22/(word) lines_bcd#38 )
  (byte) current_ypos#38 ← phi( play_move_down::@14/(byte) current_ypos#3 play_move_down::@22/(byte) current_ypos#4 )
  (byte) current_movedown_counter#4 ← (number) 0
  (byte) play_move_down::return#2 ← (number) 1
  to:play_move_down::@return
play_move_down::@return: scope:[play_move_down]  from play_move_down::@15 play_move_down::@4
  (byte) next_piece_idx#16 ← phi( play_move_down::@15/(byte) next_piece_idx#30 play_move_down::@4/(byte) next_piece_idx#31 )
  (byte) game_over#15 ← phi( play_move_down::@15/(byte) game_over#27 play_move_down::@4/(byte) game_over#28 )
  (byte) current_xpos#22 ← phi( play_move_down::@15/(byte) current_xpos#43 play_move_down::@4/(byte) current_xpos#44 )
  (byte*) current_piece_gfx#20 ← phi( play_move_down::@15/(byte*) current_piece_gfx#35 play_move_down::@4/(byte*) current_piece_gfx#36 )
  (byte) current_orientation#20 ← phi( play_move_down::@15/(byte) current_orientation#37 play_move_down::@4/(byte) current_orientation#38 )
  (byte) current_piece_char#16 ← phi( play_move_down::@15/(byte) current_piece_char#29 play_move_down::@4/(byte) current_piece_char#30 )
  (byte*) current_piece#15 ← phi( play_move_down::@15/(byte*) current_piece#28 play_move_down::@4/(byte*) current_piece#29 )
  (byte) level_bcd#17 ← phi( play_move_down::@15/(byte) level_bcd#31 play_move_down::@4/(byte) level_bcd#32 )
  (byte) current_movedown_slow#21 ← phi( play_move_down::@15/(byte) current_movedown_slow#37 play_move_down::@4/(byte) current_movedown_slow#38 )
  (byte) level#17 ← phi( play_move_down::@15/(byte) level#33 play_move_down::@4/(byte) level#34 )
  (dword) score_bcd#14 ← phi( play_move_down::@15/(dword) score_bcd#26 play_move_down::@4/(dword) score_bcd#27 )
  (word) lines_bcd#15 ← phi( play_move_down::@15/(word) lines_bcd#26 play_move_down::@4/(word) lines_bcd#27 )
  (byte) current_ypos#19 ← phi( play_move_down::@15/(byte) current_ypos#38 play_move_down::@4/(byte) current_ypos#39 )
  (byte) current_movedown_counter#14 ← phi( play_move_down::@15/(byte) current_movedown_counter#4 play_move_down::@4/(byte) current_movedown_counter#23 )
  (byte) play_move_down::return#5 ← phi( play_move_down::@15/(byte) play_move_down::return#2 play_move_down::@4/(byte) play_move_down::return#1 )
  (byte) play_move_down::return#3 ← (byte) play_move_down::return#5
  (byte) current_movedown_counter#5 ← (byte) current_movedown_counter#14
  (byte) current_ypos#5 ← (byte) current_ypos#19
  (word) lines_bcd#4 ← (word) lines_bcd#15
  (dword) score_bcd#4 ← (dword) score_bcd#14
  (byte) level#4 ← (byte) level#17
  (byte) current_movedown_slow#6 ← (byte) current_movedown_slow#21
  (byte) level_bcd#4 ← (byte) level_bcd#17
  (byte*) current_piece#4 ← (byte*) current_piece#15
  (byte) current_piece_char#4 ← (byte) current_piece_char#16
  (byte) current_orientation#5 ← (byte) current_orientation#20
  (byte*) current_piece_gfx#5 ← (byte*) current_piece_gfx#20
  (byte) current_xpos#5 ← (byte) current_xpos#22
  (byte) game_over#4 ← (byte) game_over#15
  (byte) next_piece_idx#4 ← (byte) next_piece_idx#16
  return 
  to:@return
play_move_leftright: scope:[play_move_leftright]  from play_movement::@1
  (byte*) current_piece#44 ← phi( play_movement::@1/(byte*) current_piece#55 )
  (byte) current_orientation#39 ← phi( play_movement::@1/(byte) current_orientation#50 )
  (byte) current_ypos#40 ← phi( play_movement::@1/(byte) current_ypos#54 )
  (byte) current_xpos#45 ← phi( play_movement::@1/(byte) current_xpos#38 )
  (byte) play_move_leftright::key_event#1 ← phi( play_movement::@1/(byte) play_move_leftright::key_event#0 )
  (bool~) play_move_leftright::$0 ← (byte) play_move_leftright::key_event#1 == (byte) KEY_COMMA#0
  if((bool~) play_move_leftright::$0) goto play_move_leftright::@1
  to:play_move_leftright::@4
play_move_leftright::@1: scope:[play_move_leftright]  from play_move_leftright
  (byte*) current_piece#32 ← phi( play_move_leftright/(byte*) current_piece#44 )
  (byte) current_orientation#21 ← phi( play_move_leftright/(byte) current_orientation#39 )
  (byte) current_ypos#20 ← phi( play_move_leftright/(byte) current_ypos#40 )
  (byte) current_xpos#23 ← phi( play_move_leftright/(byte) current_xpos#45 )
  (number~) play_move_leftright::$7 ← (byte) current_xpos#23 - (number) 1
  (byte) play_collision::xpos#1 ← (number~) play_move_leftright::$7
  (byte) play_collision::ypos#1 ← (byte) current_ypos#20
  (byte) play_collision::orientation#1 ← (byte) current_orientation#21
  call play_collision 
  (byte) play_collision::return#1 ← (byte) play_collision::return#5
  to:play_move_leftright::@14
play_move_leftright::@14: scope:[play_move_leftright]  from play_move_leftright::@1
  (byte) current_xpos#49 ← phi( play_move_leftright::@1/(byte) current_xpos#23 )
  (byte) play_collision::return#12 ← phi( play_move_leftright::@1/(byte) play_collision::return#1 )
  (byte~) play_move_leftright::$8 ← (byte) play_collision::return#12
  (bool~) play_move_leftright::$9 ← (byte~) play_move_leftright::$8 == (byte) COLLISION_NONE#0
  (bool~) play_move_leftright::$10 ← ! (bool~) play_move_leftright::$9
  if((bool~) play_move_leftright::$10) goto play_move_leftright::@3
  to:play_move_leftright::@9
play_move_leftright::@4: scope:[play_move_leftright]  from play_move_leftright
  (byte*) current_piece#45 ← phi( play_move_leftright/(byte*) current_piece#44 )
  (byte) current_orientation#40 ← phi( play_move_leftright/(byte) current_orientation#39 )
  (byte) current_ypos#41 ← phi( play_move_leftright/(byte) current_ypos#40 )
  (byte) current_xpos#46 ← phi( play_move_leftright/(byte) current_xpos#45 )
  (byte) play_move_leftright::key_event#2 ← phi( play_move_leftright/(byte) play_move_leftright::key_event#1 )
  (bool~) play_move_leftright::$1 ← (byte) play_move_leftright::key_event#2 == (byte) KEY_DOT#0
  (bool~) play_move_leftright::$2 ← ! (bool~) play_move_leftright::$1
  if((bool~) play_move_leftright::$2) goto play_move_leftright::@3
  to:play_move_leftright::@5
play_move_leftright::@5: scope:[play_move_leftright]  from play_move_leftright::@4
  (byte*) current_piece#33 ← phi( play_move_leftright::@4/(byte*) current_piece#45 )
  (byte) current_orientation#22 ← phi( play_move_leftright::@4/(byte) current_orientation#40 )
  (byte) current_ypos#21 ← phi( play_move_leftright::@4/(byte) current_ypos#41 )
  (byte) current_xpos#24 ← phi( play_move_leftright::@4/(byte) current_xpos#46 )
  (number~) play_move_leftright::$3 ← (byte) current_xpos#24 + (number) 1
  (byte) play_collision::xpos#2 ← (number~) play_move_leftright::$3
  (byte) play_collision::ypos#2 ← (byte) current_ypos#21
  (byte) play_collision::orientation#2 ← (byte) current_orientation#22
  call play_collision 
  (byte) play_collision::return#2 ← (byte) play_collision::return#5
  to:play_move_leftright::@15
play_move_leftright::@15: scope:[play_move_leftright]  from play_move_leftright::@5
  (byte) current_xpos#47 ← phi( play_move_leftright::@5/(byte) current_xpos#24 )
  (byte) play_collision::return#13 ← phi( play_move_leftright::@5/(byte) play_collision::return#2 )
  (byte~) play_move_leftright::$4 ← (byte) play_collision::return#13
  (bool~) play_move_leftright::$5 ← (byte~) play_move_leftright::$4 == (byte) COLLISION_NONE#0
  (bool~) play_move_leftright::$6 ← ! (bool~) play_move_leftright::$5
  if((bool~) play_move_leftright::$6) goto play_move_leftright::@3
  to:play_move_leftright::@6
play_move_leftright::@6: scope:[play_move_leftright]  from play_move_leftright::@15
  (byte) current_xpos#25 ← phi( play_move_leftright::@15/(byte) current_xpos#47 )
  (byte) current_xpos#6 ← ++ (byte) current_xpos#25
  (byte) play_move_leftright::return#1 ← (number) 1
  to:play_move_leftright::@return
play_move_leftright::@return: scope:[play_move_leftright]  from play_move_leftright::@3 play_move_leftright::@6 play_move_leftright::@9
  (byte) current_xpos#26 ← phi( play_move_leftright::@3/(byte) current_xpos#48 play_move_leftright::@6/(byte) current_xpos#6 play_move_leftright::@9/(byte) current_xpos#8 )
  (byte) play_move_leftright::return#6 ← phi( play_move_leftright::@3/(byte) play_move_leftright::return#3 play_move_leftright::@6/(byte) play_move_leftright::return#1 play_move_leftright::@9/(byte) play_move_leftright::return#4 )
  (byte) play_move_leftright::return#2 ← (byte) play_move_leftright::return#6
  (byte) current_xpos#7 ← (byte) current_xpos#26
  return 
  to:@return
play_move_leftright::@3: scope:[play_move_leftright]  from play_move_leftright::@14 play_move_leftright::@15 play_move_leftright::@4
  (byte) current_xpos#48 ← phi( play_move_leftright::@14/(byte) current_xpos#49 play_move_leftright::@15/(byte) current_xpos#47 play_move_leftright::@4/(byte) current_xpos#46 )
  (byte) play_move_leftright::return#3 ← (number) 0
  to:play_move_leftright::@return
play_move_leftright::@9: scope:[play_move_leftright]  from play_move_leftright::@14
  (byte) current_xpos#27 ← phi( play_move_leftright::@14/(byte) current_xpos#49 )
  (byte) current_xpos#8 ← -- (byte) current_xpos#27
  (byte) play_move_leftright::return#4 ← (number) 1
  to:play_move_leftright::@return
play_move_rotate: scope:[play_move_rotate]  from play_movement::@6
  (byte*) current_piece_gfx#70 ← phi( play_movement::@6/(byte*) current_piece_gfx#32 )
  (byte*) current_piece#60 ← phi( play_movement::@6/(byte*) current_piece#40 )
  (byte) current_ypos#55 ← phi( play_movement::@6/(byte) current_ypos#50 )
  (byte) current_xpos#65 ← phi( play_movement::@6/(byte) current_xpos#2 )
  (byte) current_orientation#41 ← phi( play_movement::@6/(byte) current_orientation#33 )
  (byte) play_move_rotate::key_event#1 ← phi( play_movement::@6/(byte) play_move_rotate::key_event#0 )
  (byte) play_move_rotate::orientation#0 ← (number) $80
  (bool~) play_move_rotate::$0 ← (byte) play_move_rotate::key_event#1 == (byte) KEY_Z#0
  if((bool~) play_move_rotate::$0) goto play_move_rotate::@1
  to:play_move_rotate::@6
play_move_rotate::@1: scope:[play_move_rotate]  from play_move_rotate
  (byte*) current_piece_gfx#89 ← phi( play_move_rotate/(byte*) current_piece_gfx#70 )
  (byte*) current_piece#46 ← phi( play_move_rotate/(byte*) current_piece#60 )
  (byte) current_ypos#42 ← phi( play_move_rotate/(byte) current_ypos#55 )
  (byte) current_xpos#50 ← phi( play_move_rotate/(byte) current_xpos#65 )
  (byte) current_orientation#23 ← phi( play_move_rotate/(byte) current_orientation#41 )
  (number~) play_move_rotate::$7 ← (byte) current_orientation#23 - (number) $10
  (number~) play_move_rotate::$8 ← (number~) play_move_rotate::$7 & (number) $3f
  (byte) play_move_rotate::orientation#1 ← (number~) play_move_rotate::$8
  to:play_move_rotate::@4
play_move_rotate::@6: scope:[play_move_rotate]  from play_move_rotate
  (byte*) current_piece#61 ← phi( play_move_rotate/(byte*) current_piece#60 )
  (byte*) current_piece_gfx#52 ← phi( play_move_rotate/(byte*) current_piece_gfx#70 )
  (byte) current_ypos#56 ← phi( play_move_rotate/(byte) current_ypos#55 )
  (byte) current_xpos#66 ← phi( play_move_rotate/(byte) current_xpos#65 )
  (byte) current_orientation#42 ← phi( play_move_rotate/(byte) current_orientation#41 )
  (byte) play_move_rotate::key_event#2 ← phi( play_move_rotate/(byte) play_move_rotate::key_event#1 )
  (bool~) play_move_rotate::$1 ← (byte) play_move_rotate::key_event#2 == (byte) KEY_X#0
  if((bool~) play_move_rotate::$1) goto play_move_rotate::@2
  to:play_move_rotate::@7
play_move_rotate::@2: scope:[play_move_rotate]  from play_move_rotate::@6
  (byte*) current_piece_gfx#90 ← phi( play_move_rotate::@6/(byte*) current_piece_gfx#52 )
  (byte*) current_piece#47 ← phi( play_move_rotate::@6/(byte*) current_piece#61 )
  (byte) current_ypos#43 ← phi( play_move_rotate::@6/(byte) current_ypos#56 )
  (byte) current_xpos#51 ← phi( play_move_rotate::@6/(byte) current_xpos#66 )
  (byte) current_orientation#24 ← phi( play_move_rotate::@6/(byte) current_orientation#42 )
  (number~) play_move_rotate::$5 ← (byte) current_orientation#24 + (number) $10
  (number~) play_move_rotate::$6 ← (number~) play_move_rotate::$5 & (number) $3f
  (byte) play_move_rotate::orientation#2 ← (number~) play_move_rotate::$6
  to:play_move_rotate::@4
play_move_rotate::@7: scope:[play_move_rotate]  from play_move_rotate::@6
  (byte*) current_piece_gfx#38 ← phi( play_move_rotate::@6/(byte*) current_piece_gfx#52 )
  (byte) current_orientation#44 ← phi( play_move_rotate::@6/(byte) current_orientation#42 )
  (byte) play_move_rotate::return#1 ← (number) 0
  to:play_move_rotate::@return
play_move_rotate::@return: scope:[play_move_rotate]  from play_move_rotate::@11 play_move_rotate::@5 play_move_rotate::@7
  (byte*) current_piece_gfx#21 ← phi( play_move_rotate::@11/(byte*) current_piece_gfx#7 play_move_rotate::@5/(byte*) current_piece_gfx#37 play_move_rotate::@7/(byte*) current_piece_gfx#38 )
  (byte) current_orientation#25 ← phi( play_move_rotate::@11/(byte) current_orientation#7 play_move_rotate::@5/(byte) current_orientation#43 play_move_rotate::@7/(byte) current_orientation#44 )
  (byte) play_move_rotate::return#6 ← phi( play_move_rotate::@11/(byte) play_move_rotate::return#4 play_move_rotate::@5/(byte) play_move_rotate::return#3 play_move_rotate::@7/(byte) play_move_rotate::return#1 )
  (byte) play_move_rotate::return#2 ← (byte) play_move_rotate::return#6
  (byte) current_orientation#6 ← (byte) current_orientation#25
  (byte*) current_piece_gfx#6 ← (byte*) current_piece_gfx#21
  return 
  to:@return
play_move_rotate::@4: scope:[play_move_rotate]  from play_move_rotate::@1 play_move_rotate::@2
  (byte*) current_piece_gfx#71 ← phi( play_move_rotate::@1/(byte*) current_piece_gfx#89 play_move_rotate::@2/(byte*) current_piece_gfx#90 )
  (byte) current_orientation#68 ← phi( play_move_rotate::@1/(byte) current_orientation#23 play_move_rotate::@2/(byte) current_orientation#24 )
  (byte*) current_piece#34 ← phi( play_move_rotate::@1/(byte*) current_piece#46 play_move_rotate::@2/(byte*) current_piece#47 )
  (byte) play_move_rotate::orientation#3 ← phi( play_move_rotate::@1/(byte) play_move_rotate::orientation#1 play_move_rotate::@2/(byte) play_move_rotate::orientation#2 )
  (byte) current_ypos#22 ← phi( play_move_rotate::@1/(byte) current_ypos#42 play_move_rotate::@2/(byte) current_ypos#43 )
  (byte) current_xpos#28 ← phi( play_move_rotate::@1/(byte) current_xpos#50 play_move_rotate::@2/(byte) current_xpos#51 )
  (byte) play_collision::xpos#3 ← (byte) current_xpos#28
  (byte) play_collision::ypos#3 ← (byte) current_ypos#22
  (byte) play_collision::orientation#3 ← (byte) play_move_rotate::orientation#3
  call play_collision 
  (byte) play_collision::return#3 ← (byte) play_collision::return#5
  to:play_move_rotate::@14
play_move_rotate::@14: scope:[play_move_rotate]  from play_move_rotate::@4
  (byte*) current_piece_gfx#53 ← phi( play_move_rotate::@4/(byte*) current_piece_gfx#71 )
  (byte) current_orientation#55 ← phi( play_move_rotate::@4/(byte) current_orientation#68 )
  (byte*) current_piece#30 ← phi( play_move_rotate::@4/(byte*) current_piece#34 )
  (byte) play_move_rotate::orientation#5 ← phi( play_move_rotate::@4/(byte) play_move_rotate::orientation#3 )
  (byte) play_collision::return#14 ← phi( play_move_rotate::@4/(byte) play_collision::return#3 )
  (byte~) play_move_rotate::$2 ← (byte) play_collision::return#14
  (bool~) play_move_rotate::$3 ← (byte~) play_move_rotate::$2 == (byte) COLLISION_NONE#0
  (bool~) play_move_rotate::$4 ← ! (bool~) play_move_rotate::$3
  if((bool~) play_move_rotate::$4) goto play_move_rotate::@5
  to:play_move_rotate::@11
play_move_rotate::@5: scope:[play_move_rotate]  from play_move_rotate::@14
  (byte*) current_piece_gfx#37 ← phi( play_move_rotate::@14/(byte*) current_piece_gfx#53 )
  (byte) current_orientation#43 ← phi( play_move_rotate::@14/(byte) current_orientation#55 )
  (byte) play_move_rotate::return#3 ← (number) 0
  to:play_move_rotate::@return
play_move_rotate::@11: scope:[play_move_rotate]  from play_move_rotate::@14
  (byte*) current_piece#16 ← phi( play_move_rotate::@14/(byte*) current_piece#30 )
  (byte) play_move_rotate::orientation#4 ← phi( play_move_rotate::@14/(byte) play_move_rotate::orientation#5 )
  (byte) current_orientation#7 ← (byte) play_move_rotate::orientation#4
  (byte*~) play_move_rotate::$9 ← (byte*) current_piece#16 + (byte) current_orientation#7
  (byte*) current_piece_gfx#7 ← (byte*~) play_move_rotate::$9
  (byte) play_move_rotate::return#4 ← (number) 1
  to:play_move_rotate::@return
@30: scope:[]  from @25
  (byte) irq_cnt#19 ← phi( @25/(byte) irq_cnt#20 )
  (byte) irq_sprite_ptr#17 ← phi( @25/(byte) irq_sprite_ptr#18 )
  (byte) level_bcd#54 ← phi( @25/(byte) level_bcd#61 )
  (byte) level#55 ← phi( @25/(byte) level#64 )
  (dword) score_bcd#44 ← phi( @25/(dword) score_bcd#51 )
  (word) lines_bcd#44 ← phi( @25/(word) lines_bcd#51 )
  (byte) current_movedown_counter#34 ← phi( @25/(byte) current_movedown_counter#0 )
  (byte) keyboard_modifiers#32 ← phi( @25/(byte) keyboard_modifiers#33 )
  (byte) keyboard_events_size#36 ← phi( @25/(byte) keyboard_events_size#40 )
  (byte) render_screen_showing#20 ← phi( @25/(byte) render_screen_showing#21 )
  (byte) next_piece_idx#46 ← phi( @25/(byte) next_piece_idx#0 )
  (byte) game_over#45 ← phi( @25/(byte) game_over#51 )
  (byte) current_ypos#64 ← phi( @25/(byte) current_ypos#69 )
  (byte) current_xpos#75 ← phi( @25/(byte) current_xpos#85 )
  (byte*) current_piece_gfx#63 ← phi( @25/(byte*) current_piece_gfx#72 )
  (byte) current_orientation#62 ← phi( @25/(byte) current_orientation#0 )
  (byte) current_piece_char#51 ← phi( @25/(byte) current_piece_char#58 )
  (byte*) current_piece#54 ← phi( @25/(byte*) current_piece#0 )
  (byte) current_movedown_slow#59 ← phi( @25/(byte) current_movedown_slow#0 )
  (byte) render_screen_render#40 ← phi( @25/(byte) render_screen_render#43 )
  (byte) render_screen_show#32 ← phi( @25/(byte) render_screen_show#35 )
  (byte) irq_raster_next#17 ← phi( @25/(byte) irq_raster_next#20 )
  (byte) irq_sprite_ypos#14 ← phi( @25/(byte) irq_sprite_ypos#18 )
  (byte) COLLISION_NONE#0 ← (number) 0
  (byte) COLLISION_PLAYFIELD#0 ← (number) 1
  (byte) COLLISION_BOTTOM#0 ← (number) 2
  (byte) COLLISION_LEFT#0 ← (number) 4
  (byte) COLLISION_RIGHT#0 ← (number) 8
  to:@37
play_collision: scope:[play_collision]  from play_move_down::@9 play_move_leftright::@1 play_move_leftright::@5 play_move_rotate::@4 play_spawn_current
  (byte) play_collision::xpos#6 ← phi( play_move_down::@9/(byte) play_collision::xpos#0 play_move_leftright::@1/(byte) play_collision::xpos#1 play_move_leftright::@5/(byte) play_collision::xpos#2 play_move_rotate::@4/(byte) play_collision::xpos#3 play_spawn_current/(byte) play_collision::xpos#4 )
  (byte) play_collision::ypos#5 ← phi( play_move_down::@9/(byte) play_collision::ypos#0 play_move_leftright::@1/(byte) play_collision::ypos#1 play_move_leftright::@5/(byte) play_collision::ypos#2 play_move_rotate::@4/(byte) play_collision::ypos#3 play_spawn_current/(byte) play_collision::ypos#4 )
  (byte) play_collision::orientation#5 ← phi( play_move_down::@9/(byte) play_collision::orientation#0 play_move_leftright::@1/(byte) play_collision::orientation#1 play_move_leftright::@5/(byte) play_collision::orientation#2 play_move_rotate::@4/(byte) play_collision::orientation#3 play_spawn_current/(byte) play_collision::orientation#4 )
  (byte*) current_piece#17 ← phi( play_move_down::@9/(byte*) current_piece#31 play_move_leftright::@1/(byte*) current_piece#32 play_move_leftright::@5/(byte*) current_piece#33 play_move_rotate::@4/(byte*) current_piece#34 play_spawn_current/(byte*) current_piece#5 )
  (byte*~) play_collision::$0 ← (byte*) current_piece#17 + (byte) play_collision::orientation#5
  (byte*) play_collision::piece_gfx#0 ← (byte*~) play_collision::$0
  (byte) play_collision::i#0 ← (number) 0
  (byte) play_collision::yp#0 ← (byte) play_collision::ypos#5
  (byte) play_collision::l#0 ← (byte) 0
  to:play_collision::@1
play_collision::@1: scope:[play_collision]  from play_collision play_collision::@17
  (byte) play_collision::l#6 ← phi( play_collision/(byte) play_collision::l#0 play_collision::@17/(byte) play_collision::l#1 )
  (byte) play_collision::i#3 ← phi( play_collision/(byte) play_collision::i#0 play_collision::@17/(byte) play_collision::i#5 )
  (byte*) play_collision::piece_gfx#2 ← phi( play_collision/(byte*) play_collision::piece_gfx#0 play_collision::@17/(byte*) play_collision::piece_gfx#4 )
  (byte) play_collision::xpos#5 ← phi( play_collision/(byte) play_collision::xpos#6 play_collision::@17/(byte) play_collision::xpos#7 )
  (byte) play_collision::yp#2 ← phi( play_collision/(byte) play_collision::yp#0 play_collision::@17/(byte) play_collision::yp#1 )
  (byte~) play_collision::$14 ← (byte) play_collision::yp#2 * (const byte) SIZEOF_POINTER
  (byte*) play_collision::playfield_line#0 ← *((byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_collision::$14)
  (byte) play_collision::xp#0 ← (byte) play_collision::xpos#5
  (byte) play_collision::c#0 ← (byte) 0
  to:play_collision::@2
play_collision::@2: scope:[play_collision]  from play_collision::@1 play_collision::@3
  (byte*) play_collision::playfield_line#5 ← phi( play_collision::@1/(byte*) play_collision::playfield_line#0 play_collision::@3/(byte*) play_collision::playfield_line#6 )
  (byte) play_collision::xpos#9 ← phi( play_collision::@1/(byte) play_collision::xpos#5 play_collision::@3/(byte) play_collision::xpos#8 )
  (byte) play_collision::l#4 ← phi( play_collision::@1/(byte) play_collision::l#6 play_collision::@3/(byte) play_collision::l#3 )
  (byte) play_collision::yp#5 ← phi( play_collision::@1/(byte) play_collision::yp#2 play_collision::@3/(byte) play_collision::yp#6 )
  (byte) play_collision::c#3 ← phi( play_collision::@1/(byte) play_collision::c#0 play_collision::@3/(byte) play_collision::c#1 )
  (byte) play_collision::xp#6 ← phi( play_collision::@1/(byte) play_collision::xp#0 play_collision::@3/(byte) play_collision::xp#1 )
  (byte) play_collision::i#2 ← phi( play_collision::@1/(byte) play_collision::i#3 play_collision::@3/(byte) play_collision::i#4 )
  (byte*) play_collision::piece_gfx#1 ← phi( play_collision::@1/(byte*) play_collision::piece_gfx#2 play_collision::@3/(byte*) play_collision::piece_gfx#3 )
  (bool~) play_collision::$1 ← *((byte*) play_collision::piece_gfx#1 + (byte) play_collision::i#2) != (number) 0
  (bool~) play_collision::$2 ← ! (bool~) play_collision::$1
  (byte) play_collision::i#1 ← ++ (byte) play_collision::i#2
  if((bool~) play_collision::$2) goto play_collision::@3
  to:play_collision::@14
play_collision::@3: scope:[play_collision]  from play_collision::@2 play_collision::@6
  (byte*) play_collision::playfield_line#6 ← phi( play_collision::@2/(byte*) play_collision::playfield_line#5 play_collision::@6/(byte*) play_collision::playfield_line#1 )
  (byte) play_collision::xpos#8 ← phi( play_collision::@2/(byte) play_collision::xpos#9 play_collision::@6/(byte) play_collision::xpos#10 )
  (byte) play_collision::l#3 ← phi( play_collision::@2/(byte) play_collision::l#4 play_collision::@6/(byte) play_collision::l#5 )
  (byte) play_collision::yp#6 ← phi( play_collision::@2/(byte) play_collision::yp#5 play_collision::@6/(byte) play_collision::yp#7 )
  (byte) play_collision::i#4 ← phi( play_collision::@2/(byte) play_collision::i#1 play_collision::@6/(byte) play_collision::i#6 )
  (byte*) play_collision::piece_gfx#3 ← phi( play_collision::@2/(byte*) play_collision::piece_gfx#1 play_collision::@6/(byte*) play_collision::piece_gfx#5 )
  (byte) play_collision::c#2 ← phi( play_collision::@2/(byte) play_collision::c#3 play_collision::@6/(byte) play_collision::c#4 )
  (byte) play_collision::xp#2 ← phi( play_collision::@2/(byte) play_collision::xp#6 play_collision::@6/(byte) play_collision::xp#5 )
  (byte) play_collision::xp#1 ← ++ (byte) play_collision::xp#2
  (byte) play_collision::c#1 ← (byte) play_collision::c#2 + rangenext(0,3)
  (bool~) play_collision::$12 ← (byte) play_collision::c#1 != rangelast(0,3)
  if((bool~) play_collision::$12) goto play_collision::@2
  to:play_collision::@17
play_collision::@14: scope:[play_collision]  from play_collision::@2
  (byte) play_collision::xpos#13 ← phi( play_collision::@2/(byte) play_collision::xpos#9 )
  (byte) play_collision::l#9 ← phi( play_collision::@2/(byte) play_collision::l#4 )
  (byte) play_collision::i#9 ← phi( play_collision::@2/(byte) play_collision::i#1 )
  (byte*) play_collision::piece_gfx#8 ← phi( play_collision::@2/(byte*) play_collision::piece_gfx#1 )
  (byte) play_collision::c#7 ← phi( play_collision::@2/(byte) play_collision::c#3 )
  (byte*) play_collision::playfield_line#4 ← phi( play_collision::@2/(byte*) play_collision::playfield_line#5 )
  (byte) play_collision::xp#7 ← phi( play_collision::@2/(byte) play_collision::xp#6 )
  (byte) play_collision::yp#3 ← phi( play_collision::@2/(byte) play_collision::yp#5 )
  (bool~) play_collision::$3 ← (byte) play_collision::yp#3 >= (byte) PLAYFIELD_LINES#0
  (bool~) play_collision::$4 ← ! (bool~) play_collision::$3
  if((bool~) play_collision::$4) goto play_collision::@4
  to:play_collision::@15
play_collision::@4: scope:[play_collision]  from play_collision::@14
  (byte) play_collision::xpos#12 ← phi( play_collision::@14/(byte) play_collision::xpos#13 )
  (byte) play_collision::l#8 ← phi( play_collision::@14/(byte) play_collision::l#9 )
  (byte) play_collision::yp#9 ← phi( play_collision::@14/(byte) play_collision::yp#3 )
  (byte) play_collision::i#8 ← phi( play_collision::@14/(byte) play_collision::i#9 )
  (byte*) play_collision::piece_gfx#7 ← phi( play_collision::@14/(byte*) play_collision::piece_gfx#8 )
  (byte) play_collision::c#6 ← phi( play_collision::@14/(byte) play_collision::c#7 )
  (byte*) play_collision::playfield_line#3 ← phi( play_collision::@14/(byte*) play_collision::playfield_line#4 )
  (byte) play_collision::xp#3 ← phi( play_collision::@14/(byte) play_collision::xp#7 )
  (number~) play_collision::$5 ← (byte) play_collision::xp#3 & (number) $80
  (bool~) play_collision::$6 ← (number~) play_collision::$5 != (number) 0
  (bool~) play_collision::$7 ← ! (bool~) play_collision::$6
  if((bool~) play_collision::$7) goto play_collision::@5
  to:play_collision::@8
play_collision::@15: scope:[play_collision]  from play_collision::@14
  (byte) play_collision::return#4 ← (byte) COLLISION_BOTTOM#0
  to:play_collision::@return
play_collision::@return: scope:[play_collision]  from play_collision::@10 play_collision::@12 play_collision::@15 play_collision::@18 play_collision::@8
  (byte) play_collision::return#15 ← phi( play_collision::@10/(byte) play_collision::return#7 play_collision::@12/(byte) play_collision::return#8 play_collision::@15/(byte) play_collision::return#4 play_collision::@18/(byte) play_collision::return#9 play_collision::@8/(byte) play_collision::return#6 )
  (byte) play_collision::return#5 ← (byte) play_collision::return#15
  return 
  to:@return
play_collision::@5: scope:[play_collision]  from play_collision::@4
  (byte) play_collision::xpos#11 ← phi( play_collision::@4/(byte) play_collision::xpos#12 )
  (byte) play_collision::l#7 ← phi( play_collision::@4/(byte) play_collision::l#8 )
  (byte) play_collision::yp#8 ← phi( play_collision::@4/(byte) play_collision::yp#9 )
  (byte) play_collision::i#7 ← phi( play_collision::@4/(byte) play_collision::i#8 )
  (byte*) play_collision::piece_gfx#6 ← phi( play_collision::@4/(byte*) play_collision::piece_gfx#7 )
  (byte) play_collision::c#5 ← phi( play_collision::@4/(byte) play_collision::c#6 )
  (byte*) play_collision::playfield_line#2 ← phi( play_collision::@4/(byte*) play_collision::playfield_line#3 )
  (byte) play_collision::xp#4 ← phi( play_collision::@4/(byte) play_collision::xp#3 )
  (bool~) play_collision::$8 ← (byte) play_collision::xp#4 >= (byte) PLAYFIELD_COLS#0
  (bool~) play_collision::$9 ← ! (bool~) play_collision::$8
  if((bool~) play_collision::$9) goto play_collision::@6
  to:play_collision::@10
play_collision::@8: scope:[play_collision]  from play_collision::@4
  (byte) play_collision::return#6 ← (byte) COLLISION_LEFT#0
  to:play_collision::@return
play_collision::@6: scope:[play_collision]  from play_collision::@5
  (byte) play_collision::xpos#10 ← phi( play_collision::@5/(byte) play_collision::xpos#11 )
  (byte) play_collision::l#5 ← phi( play_collision::@5/(byte) play_collision::l#7 )
  (byte) play_collision::yp#7 ← phi( play_collision::@5/(byte) play_collision::yp#8 )
  (byte) play_collision::i#6 ← phi( play_collision::@5/(byte) play_collision::i#7 )
  (byte*) play_collision::piece_gfx#5 ← phi( play_collision::@5/(byte*) play_collision::piece_gfx#6 )
  (byte) play_collision::c#4 ← phi( play_collision::@5/(byte) play_collision::c#5 )
  (byte) play_collision::xp#5 ← phi( play_collision::@5/(byte) play_collision::xp#4 )
  (byte*) play_collision::playfield_line#1 ← phi( play_collision::@5/(byte*) play_collision::playfield_line#2 )
  (bool~) play_collision::$10 ← *((byte*) play_collision::playfield_line#1 + (byte) play_collision::xp#5) != (number) 0
  (bool~) play_collision::$11 ← ! (bool~) play_collision::$10
  if((bool~) play_collision::$11) goto play_collision::@3
  to:play_collision::@12
play_collision::@10: scope:[play_collision]  from play_collision::@5
  (byte) play_collision::return#7 ← (byte) COLLISION_RIGHT#0
  to:play_collision::@return
play_collision::@12: scope:[play_collision]  from play_collision::@6
  (byte) play_collision::return#8 ← (byte) COLLISION_PLAYFIELD#0
  to:play_collision::@return
play_collision::@17: scope:[play_collision]  from play_collision::@3
  (byte) play_collision::i#5 ← phi( play_collision::@3/(byte) play_collision::i#4 )
  (byte*) play_collision::piece_gfx#4 ← phi( play_collision::@3/(byte*) play_collision::piece_gfx#3 )
  (byte) play_collision::xpos#7 ← phi( play_collision::@3/(byte) play_collision::xpos#8 )
  (byte) play_collision::l#2 ← phi( play_collision::@3/(byte) play_collision::l#3 )
  (byte) play_collision::yp#4 ← phi( play_collision::@3/(byte) play_collision::yp#6 )
  (byte) play_collision::yp#1 ← ++ (byte) play_collision::yp#4
  (byte) play_collision::l#1 ← (byte) play_collision::l#2 + rangenext(0,3)
  (bool~) play_collision::$13 ← (byte) play_collision::l#1 != rangelast(0,3)
  if((bool~) play_collision::$13) goto play_collision::@1
  to:play_collision::@18
play_collision::@18: scope:[play_collision]  from play_collision::@17
  (byte) play_collision::return#9 ← (byte) COLLISION_NONE#0
  to:play_collision::@return
play_lock_current: scope:[play_lock_current]  from play_move_down::@10
  (byte) current_piece_char#59 ← phi( play_move_down::@10/(byte) current_piece_char#75 )
  (byte*) current_piece_gfx#54 ← phi( play_move_down::@10/(byte*) current_piece_gfx#73 )
  (byte) current_xpos#52 ← phi( play_move_down::@10/(byte) current_xpos#67 )
  (byte) current_ypos#23 ← phi( play_move_down::@10/(byte) current_ypos#44 )
  (byte) play_lock_current::i#0 ← (number) 0
  (byte) play_lock_current::yp#0 ← (byte) current_ypos#23
  (byte) play_lock_current::l#0 ← (byte) 0
  to:play_lock_current::@1
play_lock_current::@1: scope:[play_lock_current]  from play_lock_current play_lock_current::@5
  (byte) play_lock_current::l#6 ← phi( play_lock_current/(byte) play_lock_current::l#0 play_lock_current::@5/(byte) play_lock_current::l#1 )
  (byte) current_piece_char#43 ← phi( play_lock_current/(byte) current_piece_char#59 play_lock_current::@5/(byte) current_piece_char#60 )
  (byte) play_lock_current::i#3 ← phi( play_lock_current/(byte) play_lock_current::i#0 play_lock_current::@5/(byte) play_lock_current::i#5 )
  (byte*) current_piece_gfx#39 ← phi( play_lock_current/(byte*) current_piece_gfx#54 play_lock_current::@5/(byte*) current_piece_gfx#55 )
  (byte) current_xpos#29 ← phi( play_lock_current/(byte) current_xpos#52 play_lock_current::@5/(byte) current_xpos#53 )
  (byte) play_lock_current::yp#2 ← phi( play_lock_current/(byte) play_lock_current::yp#0 play_lock_current::@5/(byte) play_lock_current::yp#1 )
  (byte~) play_lock_current::$4 ← (byte) play_lock_current::yp#2 * (const byte) SIZEOF_POINTER
  (byte*) play_lock_current::playfield_line#0 ← *((byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_lock_current::$4)
  (byte) play_lock_current::xp#0 ← (byte) current_xpos#29
  (byte) play_lock_current::c#0 ← (byte) 0
  to:play_lock_current::@2
play_lock_current::@2: scope:[play_lock_current]  from play_lock_current::@1 play_lock_current::@3
  (byte) current_xpos#86 ← phi( play_lock_current::@1/(byte) current_xpos#29 play_lock_current::@3/(byte) current_xpos#68 )
  (byte) play_lock_current::l#4 ← phi( play_lock_current::@1/(byte) play_lock_current::l#6 play_lock_current::@3/(byte) play_lock_current::l#3 )
  (byte) play_lock_current::yp#5 ← phi( play_lock_current::@1/(byte) play_lock_current::yp#2 play_lock_current::@3/(byte) play_lock_current::yp#4 )
  (byte*) play_lock_current::playfield_line#2 ← phi( play_lock_current::@1/(byte*) play_lock_current::playfield_line#0 play_lock_current::@3/(byte*) play_lock_current::playfield_line#3 )
  (byte) current_piece_char#31 ← phi( play_lock_current::@1/(byte) current_piece_char#43 play_lock_current::@3/(byte) current_piece_char#44 )
  (byte) play_lock_current::c#3 ← phi( play_lock_current::@1/(byte) play_lock_current::c#0 play_lock_current::@3/(byte) play_lock_current::c#1 )
  (byte) play_lock_current::xp#4 ← phi( play_lock_current::@1/(byte) play_lock_current::xp#0 play_lock_current::@3/(byte) play_lock_current::xp#1 )
  (byte) play_lock_current::i#2 ← phi( play_lock_current::@1/(byte) play_lock_current::i#3 play_lock_current::@3/(byte) play_lock_current::i#4 )
  (byte*) current_piece_gfx#22 ← phi( play_lock_current::@1/(byte*) current_piece_gfx#39 play_lock_current::@3/(byte*) current_piece_gfx#40 )
  (bool~) play_lock_current::$0 ← *((byte*) current_piece_gfx#22 + (byte) play_lock_current::i#2) != (number) 0
  (bool~) play_lock_current::$1 ← ! (bool~) play_lock_current::$0
  (byte) play_lock_current::i#1 ← ++ (byte) play_lock_current::i#2
  if((bool~) play_lock_current::$1) goto play_lock_current::@3
  to:play_lock_current::@4
play_lock_current::@3: scope:[play_lock_current]  from play_lock_current::@2 play_lock_current::@4
  (byte) current_xpos#68 ← phi( play_lock_current::@2/(byte) current_xpos#86 play_lock_current::@4/(byte) current_xpos#87 )
  (byte*) play_lock_current::playfield_line#3 ← phi( play_lock_current::@2/(byte*) play_lock_current::playfield_line#2 play_lock_current::@4/(byte*) play_lock_current::playfield_line#1 )
  (byte) current_piece_char#44 ← phi( play_lock_current::@2/(byte) current_piece_char#31 play_lock_current::@4/(byte) current_piece_char#17 )
  (byte) play_lock_current::l#3 ← phi( play_lock_current::@2/(byte) play_lock_current::l#4 play_lock_current::@4/(byte) play_lock_current::l#5 )
  (byte) play_lock_current::yp#4 ← phi( play_lock_current::@2/(byte) play_lock_current::yp#5 play_lock_current::@4/(byte) play_lock_current::yp#6 )
  (byte) play_lock_current::i#4 ← phi( play_lock_current::@2/(byte) play_lock_current::i#1 play_lock_current::@4/(byte) play_lock_current::i#6 )
  (byte*) current_piece_gfx#40 ← phi( play_lock_current::@2/(byte*) current_piece_gfx#22 play_lock_current::@4/(byte*) current_piece_gfx#56 )
  (byte) play_lock_current::c#2 ← phi( play_lock_current::@2/(byte) play_lock_current::c#3 play_lock_current::@4/(byte) play_lock_current::c#4 )
  (byte) play_lock_current::xp#2 ← phi( play_lock_current::@2/(byte) play_lock_current::xp#4 play_lock_current::@4/(byte) play_lock_current::xp#3 )
  (byte) play_lock_current::xp#1 ← ++ (byte) play_lock_current::xp#2
  (byte) play_lock_current::c#1 ← (byte) play_lock_current::c#2 + rangenext(0,3)
  (bool~) play_lock_current::$2 ← (byte) play_lock_current::c#1 != rangelast(0,3)
  if((bool~) play_lock_current::$2) goto play_lock_current::@2
  to:play_lock_current::@5
play_lock_current::@4: scope:[play_lock_current]  from play_lock_current::@2
  (byte) current_xpos#87 ← phi( play_lock_current::@2/(byte) current_xpos#86 )
  (byte) play_lock_current::l#5 ← phi( play_lock_current::@2/(byte) play_lock_current::l#4 )
  (byte) play_lock_current::yp#6 ← phi( play_lock_current::@2/(byte) play_lock_current::yp#5 )
  (byte) play_lock_current::i#6 ← phi( play_lock_current::@2/(byte) play_lock_current::i#1 )
  (byte*) current_piece_gfx#56 ← phi( play_lock_current::@2/(byte*) current_piece_gfx#22 )
  (byte) play_lock_current::c#4 ← phi( play_lock_current::@2/(byte) play_lock_current::c#3 )
  (byte) play_lock_current::xp#3 ← phi( play_lock_current::@2/(byte) play_lock_current::xp#4 )
  (byte*) play_lock_current::playfield_line#1 ← phi( play_lock_current::@2/(byte*) play_lock_current::playfield_line#2 )
  (byte) current_piece_char#17 ← phi( play_lock_current::@2/(byte) current_piece_char#31 )
  *((byte*) play_lock_current::playfield_line#1 + (byte) play_lock_current::xp#3) ← (byte) current_piece_char#17
  to:play_lock_current::@3
play_lock_current::@5: scope:[play_lock_current]  from play_lock_current::@3
  (byte) current_piece_char#60 ← phi( play_lock_current::@3/(byte) current_piece_char#44 )
  (byte) play_lock_current::i#5 ← phi( play_lock_current::@3/(byte) play_lock_current::i#4 )
  (byte*) current_piece_gfx#55 ← phi( play_lock_current::@3/(byte*) current_piece_gfx#40 )
  (byte) current_xpos#53 ← phi( play_lock_current::@3/(byte) current_xpos#68 )
  (byte) play_lock_current::l#2 ← phi( play_lock_current::@3/(byte) play_lock_current::l#3 )
  (byte) play_lock_current::yp#3 ← phi( play_lock_current::@3/(byte) play_lock_current::yp#4 )
  (byte) play_lock_current::yp#1 ← ++ (byte) play_lock_current::yp#3
  (byte) play_lock_current::l#1 ← (byte) play_lock_current::l#2 + rangenext(0,3)
  (bool~) play_lock_current::$3 ← (byte) play_lock_current::l#1 != rangelast(0,3)
  if((bool~) play_lock_current::$3) goto play_lock_current::@1
  to:play_lock_current::@return
play_lock_current::@return: scope:[play_lock_current]  from play_lock_current::@5
  return 
  to:@return
play_spawn_current: scope:[play_spawn_current]  from main::@29 main::@30 play_move_down::@21
  (byte) game_over#74 ← phi( main::@29/(byte) game_over#30 main::@30/(byte) game_over#7 play_move_down::@21/(byte) game_over#26 )
  (byte) next_piece_idx#17 ← phi( main::@29/(byte) next_piece_idx#32 main::@30/(byte) next_piece_idx#7 play_move_down::@21/(byte) next_piece_idx#29 )
  (byte) play_spawn_current::current_piece_idx#0 ← (byte) next_piece_idx#17
  (byte~) play_spawn_current::$7 ← (byte) play_spawn_current::current_piece_idx#0 * (const byte) SIZEOF_WORD
  (byte*) current_piece#5 ← ((byte*)) *((word[]) PIECES#0 + (byte~) play_spawn_current::$7)
  (byte) current_piece_char#5 ← *((byte[]) PIECES_CHARS#0 + (byte) play_spawn_current::current_piece_idx#0)
  (byte) current_orientation#8 ← (number) 0
  (byte*~) play_spawn_current::$0 ← (byte*) current_piece#5 + (byte) current_orientation#8
  (byte*) current_piece_gfx#8 ← (byte*~) play_spawn_current::$0
  (byte) current_xpos#9 ← *((byte[]) PIECES_START_X#0 + (byte) play_spawn_current::current_piece_idx#0)
  (byte) current_ypos#6 ← *((byte[]) PIECES_START_Y#0 + (byte) play_spawn_current::current_piece_idx#0)
  (byte) play_collision::xpos#4 ← (byte) current_xpos#9
  (byte) play_collision::ypos#4 ← (byte) current_ypos#6
  (byte) play_collision::orientation#4 ← (byte) current_orientation#8
  call play_collision 
  (byte) play_collision::return#10 ← (byte) play_collision::return#5
  to:play_spawn_current::@10
play_spawn_current::@10: scope:[play_spawn_current]  from play_spawn_current
  (byte) game_over#65 ← phi( play_spawn_current/(byte) game_over#74 )
  (byte) current_ypos#79 ← phi( play_spawn_current/(byte) current_ypos#6 )
  (byte) current_xpos#99 ← phi( play_spawn_current/(byte) current_xpos#9 )
  (byte*) current_piece_gfx#91 ← phi( play_spawn_current/(byte*) current_piece_gfx#8 )
  (byte) current_orientation#78 ← phi( play_spawn_current/(byte) current_orientation#8 )
  (byte) current_piece_char#76 ← phi( play_spawn_current/(byte) current_piece_char#5 )
  (byte*) current_piece#73 ← phi( play_spawn_current/(byte*) current_piece#5 )
  (byte) play_collision::return#16 ← phi( play_spawn_current/(byte) play_collision::return#10 )
  (byte~) play_spawn_current::$1 ← (byte) play_collision::return#16
  (bool~) play_spawn_current::$2 ← (byte~) play_spawn_current::$1 == (byte) COLLISION_PLAYFIELD#0
  (bool~) play_spawn_current::$3 ← ! (bool~) play_spawn_current::$2
  if((bool~) play_spawn_current::$3) goto play_spawn_current::@1
  to:play_spawn_current::@2
play_spawn_current::@1: scope:[play_spawn_current]  from play_spawn_current::@10 play_spawn_current::@2
  (byte) game_over#52 ← phi( play_spawn_current::@10/(byte) game_over#65 play_spawn_current::@2/(byte) game_over#5 )
  (byte) current_ypos#70 ← phi( play_spawn_current::@10/(byte) current_ypos#79 play_spawn_current::@2/(byte) current_ypos#80 )
  (byte) current_xpos#88 ← phi( play_spawn_current::@10/(byte) current_xpos#99 play_spawn_current::@2/(byte) current_xpos#100 )
  (byte*) current_piece_gfx#74 ← phi( play_spawn_current::@10/(byte*) current_piece_gfx#91 play_spawn_current::@2/(byte*) current_piece_gfx#92 )
  (byte) current_orientation#69 ← phi( play_spawn_current::@10/(byte) current_orientation#78 play_spawn_current::@2/(byte) current_orientation#79 )
  (byte) current_piece_char#61 ← phi( play_spawn_current::@10/(byte) current_piece_char#76 play_spawn_current::@2/(byte) current_piece_char#77 )
  (byte*) current_piece#62 ← phi( play_spawn_current::@10/(byte*) current_piece#73 play_spawn_current::@2/(byte*) current_piece#74 )
  (byte) play_spawn_current::piece_idx#0 ← (number) 7
  to:play_spawn_current::@3
play_spawn_current::@2: scope:[play_spawn_current]  from play_spawn_current::@10
  (byte) current_ypos#80 ← phi( play_spawn_current::@10/(byte) current_ypos#79 )
  (byte) current_xpos#100 ← phi( play_spawn_current::@10/(byte) current_xpos#99 )
  (byte*) current_piece_gfx#92 ← phi( play_spawn_current::@10/(byte*) current_piece_gfx#91 )
  (byte) current_orientation#79 ← phi( play_spawn_current::@10/(byte) current_orientation#78 )
  (byte) current_piece_char#77 ← phi( play_spawn_current::@10/(byte) current_piece_char#76 )
  (byte*) current_piece#74 ← phi( play_spawn_current::@10/(byte*) current_piece#73 )
  (byte) game_over#5 ← (number) 1
  to:play_spawn_current::@1
play_spawn_current::@3: scope:[play_spawn_current]  from play_spawn_current::@1 play_spawn_current::@9
  (byte) game_over#39 ← phi( play_spawn_current::@1/(byte) game_over#52 play_spawn_current::@9/(byte) game_over#53 )
  (byte) current_ypos#57 ← phi( play_spawn_current::@1/(byte) current_ypos#70 play_spawn_current::@9/(byte) current_ypos#71 )
  (byte) current_xpos#69 ← phi( play_spawn_current::@1/(byte) current_xpos#88 play_spawn_current::@9/(byte) current_xpos#89 )
  (byte*) current_piece_gfx#57 ← phi( play_spawn_current::@1/(byte*) current_piece_gfx#74 play_spawn_current::@9/(byte*) current_piece_gfx#75 )
  (byte) current_orientation#56 ← phi( play_spawn_current::@1/(byte) current_orientation#69 play_spawn_current::@9/(byte) current_orientation#70 )
  (byte) current_piece_char#45 ← phi( play_spawn_current::@1/(byte) current_piece_char#61 play_spawn_current::@9/(byte) current_piece_char#62 )
  (byte*) current_piece#48 ← phi( play_spawn_current::@1/(byte*) current_piece#62 play_spawn_current::@9/(byte*) current_piece#63 )
  (byte) play_spawn_current::piece_idx#2 ← phi( play_spawn_current::@1/(byte) play_spawn_current::piece_idx#0 play_spawn_current::@9/(byte) play_spawn_current::piece_idx#1 )
  (bool~) play_spawn_current::$4 ← (byte) play_spawn_current::piece_idx#2 == (number) 7
  if((bool~) play_spawn_current::$4) goto play_spawn_current::sid_rnd1
  to:play_spawn_current::@5
play_spawn_current::sid_rnd1: scope:[play_spawn_current]  from play_spawn_current::@3
  (byte) game_over#75 ← phi( play_spawn_current::@3/(byte) game_over#39 )
  (byte) current_ypos#89 ← phi( play_spawn_current::@3/(byte) current_ypos#57 )
  (byte) current_xpos#110 ← phi( play_spawn_current::@3/(byte) current_xpos#69 )
  (byte*) current_piece_gfx#100 ← phi( play_spawn_current::@3/(byte*) current_piece_gfx#57 )
  (byte) current_orientation#88 ← phi( play_spawn_current::@3/(byte) current_orientation#56 )
  (byte) current_piece_char#88 ← phi( play_spawn_current::@3/(byte) current_piece_char#45 )
  (byte*) current_piece#82 ← phi( play_spawn_current::@3/(byte*) current_piece#48 )
  (byte) play_spawn_current::sid_rnd1_return#0 ← *((byte*) SID_VOICE3_OSC#0)
  to:play_spawn_current::sid_rnd1_@return
play_spawn_current::sid_rnd1_@return: scope:[play_spawn_current]  from play_spawn_current::sid_rnd1
  (byte) game_over#66 ← phi( play_spawn_current::sid_rnd1/(byte) game_over#75 )
  (byte) current_ypos#81 ← phi( play_spawn_current::sid_rnd1/(byte) current_ypos#89 )
  (byte) current_xpos#101 ← phi( play_spawn_current::sid_rnd1/(byte) current_xpos#110 )
  (byte*) current_piece_gfx#93 ← phi( play_spawn_current::sid_rnd1/(byte*) current_piece_gfx#100 )
  (byte) current_orientation#80 ← phi( play_spawn_current::sid_rnd1/(byte) current_orientation#88 )
  (byte) current_piece_char#78 ← phi( play_spawn_current::sid_rnd1/(byte) current_piece_char#88 )
  (byte*) current_piece#75 ← phi( play_spawn_current::sid_rnd1/(byte*) current_piece#82 )
  (byte) play_spawn_current::sid_rnd1_return#2 ← phi( play_spawn_current::sid_rnd1/(byte) play_spawn_current::sid_rnd1_return#0 )
  (byte) play_spawn_current::sid_rnd1_return#1 ← (byte) play_spawn_current::sid_rnd1_return#2
  to:play_spawn_current::@9
play_spawn_current::@9: scope:[play_spawn_current]  from play_spawn_current::sid_rnd1_@return
  (byte) game_over#53 ← phi( play_spawn_current::sid_rnd1_@return/(byte) game_over#66 )
  (byte) current_ypos#71 ← phi( play_spawn_current::sid_rnd1_@return/(byte) current_ypos#81 )
  (byte) current_xpos#89 ← phi( play_spawn_current::sid_rnd1_@return/(byte) current_xpos#101 )
  (byte*) current_piece_gfx#75 ← phi( play_spawn_current::sid_rnd1_@return/(byte*) current_piece_gfx#93 )
  (byte) current_orientation#70 ← phi( play_spawn_current::sid_rnd1_@return/(byte) current_orientation#80 )
  (byte) current_piece_char#62 ← phi( play_spawn_current::sid_rnd1_@return/(byte) current_piece_char#78 )
  (byte*) current_piece#63 ← phi( play_spawn_current::sid_rnd1_@return/(byte*) current_piece#75 )
  (byte) play_spawn_current::sid_rnd1_return#3 ← phi( play_spawn_current::sid_rnd1_@return/(byte) play_spawn_current::sid_rnd1_return#1 )
  (byte~) play_spawn_current::$5 ← (byte) play_spawn_current::sid_rnd1_return#3
  (number~) play_spawn_current::$6 ← (byte~) play_spawn_current::$5 & (number) 7
  (byte) play_spawn_current::piece_idx#1 ← (number~) play_spawn_current::$6
  to:play_spawn_current::@3
play_spawn_current::@5: scope:[play_spawn_current]  from play_spawn_current::@3
  (byte) game_over#29 ← phi( play_spawn_current::@3/(byte) game_over#39 )
  (byte) current_ypos#45 ← phi( play_spawn_current::@3/(byte) current_ypos#57 )
  (byte) current_xpos#54 ← phi( play_spawn_current::@3/(byte) current_xpos#69 )
  (byte*) current_piece_gfx#41 ← phi( play_spawn_current::@3/(byte*) current_piece_gfx#57 )
  (byte) current_orientation#45 ← phi( play_spawn_current::@3/(byte) current_orientation#56 )
  (byte) current_piece_char#32 ← phi( play_spawn_current::@3/(byte) current_piece_char#45 )
  (byte*) current_piece#35 ← phi( play_spawn_current::@3/(byte*) current_piece#48 )
  (byte) play_spawn_current::piece_idx#3 ← phi( play_spawn_current::@3/(byte) play_spawn_current::piece_idx#2 )
  (byte) next_piece_idx#5 ← (byte) play_spawn_current::piece_idx#3
  to:play_spawn_current::@return
play_spawn_current::@return: scope:[play_spawn_current]  from play_spawn_current::@5
  (byte) next_piece_idx#18 ← phi( play_spawn_current::@5/(byte) next_piece_idx#5 )
  (byte) game_over#16 ← phi( play_spawn_current::@5/(byte) game_over#29 )
  (byte) current_ypos#24 ← phi( play_spawn_current::@5/(byte) current_ypos#45 )
  (byte) current_xpos#30 ← phi( play_spawn_current::@5/(byte) current_xpos#54 )
  (byte*) current_piece_gfx#23 ← phi( play_spawn_current::@5/(byte*) current_piece_gfx#41 )
  (byte) current_orientation#26 ← phi( play_spawn_current::@5/(byte) current_orientation#45 )
  (byte) current_piece_char#18 ← phi( play_spawn_current::@5/(byte) current_piece_char#32 )
  (byte*) current_piece#18 ← phi( play_spawn_current::@5/(byte*) current_piece#35 )
  (byte*) current_piece#6 ← (byte*) current_piece#18
  (byte) current_piece_char#6 ← (byte) current_piece_char#18
  (byte) current_orientation#9 ← (byte) current_orientation#26
  (byte*) current_piece_gfx#9 ← (byte*) current_piece_gfx#23
  (byte) current_xpos#10 ← (byte) current_xpos#30
  (byte) current_ypos#7 ← (byte) current_ypos#24
  (byte) game_over#6 ← (byte) game_over#16
  (byte) next_piece_idx#6 ← (byte) next_piece_idx#18
  return 
  to:@return
play_remove_lines: scope:[play_remove_lines]  from play_move_down::@19
  (byte~) play_remove_lines::$0 ← (byte) PLAYFIELD_LINES#0 * (byte) PLAYFIELD_COLS#0
  (number~) play_remove_lines::$1 ← (byte~) play_remove_lines::$0 - (number) 1
  (byte) play_remove_lines::r#0 ← (number~) play_remove_lines::$1
  (byte~) play_remove_lines::$2 ← (byte) PLAYFIELD_LINES#0 * (byte) PLAYFIELD_COLS#0
  (number~) play_remove_lines::$3 ← (byte~) play_remove_lines::$2 - (number) 1
  (byte) play_remove_lines::w#0 ← (number~) play_remove_lines::$3
  (byte) play_remove_lines::removed#0 ← (number) 0
  (number~) play_remove_lines::$4 ← (byte) PLAYFIELD_LINES#0 - (number) 1
  (byte) play_remove_lines::y#0 ← (byte) 0
  to:play_remove_lines::@1
play_remove_lines::@1: scope:[play_remove_lines]  from play_remove_lines play_remove_lines::@7
  (byte) play_remove_lines::removed#11 ← phi( play_remove_lines/(byte) play_remove_lines::removed#0 play_remove_lines::@7/(byte) play_remove_lines::removed#8 )
  (byte) play_remove_lines::y#8 ← phi( play_remove_lines/(byte) play_remove_lines::y#0 play_remove_lines::@7/(byte) play_remove_lines::y#1 )
  (byte) play_remove_lines::w#12 ← phi( play_remove_lines/(byte) play_remove_lines::w#0 play_remove_lines::@7/(byte) play_remove_lines::w#11 )
  (byte) play_remove_lines::r#3 ← phi( play_remove_lines/(byte) play_remove_lines::r#0 play_remove_lines::@7/(byte) play_remove_lines::r#5 )
  (byte) play_remove_lines::full#0 ← (number) 1
  (number~) play_remove_lines::$5 ← (byte) PLAYFIELD_COLS#0 - (number) 1
  (byte) play_remove_lines::x#0 ← (byte) 0
  to:play_remove_lines::@2
play_remove_lines::@2: scope:[play_remove_lines]  from play_remove_lines::@1 play_remove_lines::@3
  (byte) play_remove_lines::removed#9 ← phi( play_remove_lines::@1/(byte) play_remove_lines::removed#11 play_remove_lines::@3/(byte) play_remove_lines::removed#6 )
  (byte) play_remove_lines::y#6 ← phi( play_remove_lines::@1/(byte) play_remove_lines::y#8 play_remove_lines::@3/(byte) play_remove_lines::y#5 )
  (byte) play_remove_lines::full#4 ← phi( play_remove_lines::@1/(byte) play_remove_lines::full#0 play_remove_lines::@3/(byte) play_remove_lines::full#3 )
  (byte) play_remove_lines::x#3 ← phi( play_remove_lines::@1/(byte) play_remove_lines::x#0 play_remove_lines::@3/(byte) play_remove_lines::x#1 )
  (byte) play_remove_lines::w#8 ← phi( play_remove_lines::@1/(byte) play_remove_lines::w#12 play_remove_lines::@3/(byte) play_remove_lines::w#1 )
  (byte) play_remove_lines::r#2 ← phi( play_remove_lines::@1/(byte) play_remove_lines::r#3 play_remove_lines::@3/(byte) play_remove_lines::r#4 )
  (byte) play_remove_lines::c#0 ← *((byte[$3]) playfield#0 + (byte) play_remove_lines::r#2)
  (byte) play_remove_lines::r#1 ← -- (byte) play_remove_lines::r#2
  (bool~) play_remove_lines::$6 ← (byte) play_remove_lines::c#0 == (number) 0
  (bool~) play_remove_lines::$7 ← ! (bool~) play_remove_lines::$6
  if((bool~) play_remove_lines::$7) goto play_remove_lines::@3
  to:play_remove_lines::@4
play_remove_lines::@3: scope:[play_remove_lines]  from play_remove_lines::@2 play_remove_lines::@4
  (byte) play_remove_lines::removed#6 ← phi( play_remove_lines::@2/(byte) play_remove_lines::removed#9 play_remove_lines::@4/(byte) play_remove_lines::removed#10 )
  (byte) play_remove_lines::y#5 ← phi( play_remove_lines::@2/(byte) play_remove_lines::y#6 play_remove_lines::@4/(byte) play_remove_lines::y#7 )
  (byte) play_remove_lines::full#3 ← phi( play_remove_lines::@2/(byte) play_remove_lines::full#4 play_remove_lines::@4/(byte) play_remove_lines::full#1 )
  (byte) play_remove_lines::r#4 ← phi( play_remove_lines::@2/(byte) play_remove_lines::r#1 play_remove_lines::@4/(byte) play_remove_lines::r#6 )
  (byte) play_remove_lines::x#2 ← phi( play_remove_lines::@2/(byte) play_remove_lines::x#3 play_remove_lines::@4/(byte) play_remove_lines::x#4 )
  (byte) play_remove_lines::w#4 ← phi( play_remove_lines::@2/(byte) play_remove_lines::w#8 play_remove_lines::@4/(byte) play_remove_lines::w#9 )
  (byte) play_remove_lines::c#1 ← phi( play_remove_lines::@2/(byte) play_remove_lines::c#0 play_remove_lines::@4/(byte) play_remove_lines::c#2 )
  *((byte[$3]) playfield#0 + (byte) play_remove_lines::w#4) ← (byte) play_remove_lines::c#1
  (byte) play_remove_lines::w#1 ← -- (byte) play_remove_lines::w#4
  (byte) play_remove_lines::x#1 ← (byte) play_remove_lines::x#2 + rangenext(0,play_remove_lines::$5)
  (bool~) play_remove_lines::$8 ← (byte) play_remove_lines::x#1 != rangelast(0,play_remove_lines::$5)
  if((bool~) play_remove_lines::$8) goto play_remove_lines::@2
  to:play_remove_lines::@5
play_remove_lines::@4: scope:[play_remove_lines]  from play_remove_lines::@2
  (byte) play_remove_lines::removed#10 ← phi( play_remove_lines::@2/(byte) play_remove_lines::removed#9 )
  (byte) play_remove_lines::y#7 ← phi( play_remove_lines::@2/(byte) play_remove_lines::y#6 )
  (byte) play_remove_lines::r#6 ← phi( play_remove_lines::@2/(byte) play_remove_lines::r#1 )
  (byte) play_remove_lines::x#4 ← phi( play_remove_lines::@2/(byte) play_remove_lines::x#3 )
  (byte) play_remove_lines::w#9 ← phi( play_remove_lines::@2/(byte) play_remove_lines::w#8 )
  (byte) play_remove_lines::c#2 ← phi( play_remove_lines::@2/(byte) play_remove_lines::c#0 )
  (byte) play_remove_lines::full#1 ← (number) 0
  to:play_remove_lines::@3
play_remove_lines::@5: scope:[play_remove_lines]  from play_remove_lines::@3
  (byte) play_remove_lines::r#7 ← phi( play_remove_lines::@3/(byte) play_remove_lines::r#4 )
  (byte) play_remove_lines::removed#4 ← phi( play_remove_lines::@3/(byte) play_remove_lines::removed#6 )
  (byte) play_remove_lines::w#10 ← phi( play_remove_lines::@3/(byte) play_remove_lines::w#1 )
  (byte) play_remove_lines::y#3 ← phi( play_remove_lines::@3/(byte) play_remove_lines::y#5 )
  (byte) play_remove_lines::full#2 ← phi( play_remove_lines::@3/(byte) play_remove_lines::full#3 )
  (bool~) play_remove_lines::$9 ← (byte) play_remove_lines::full#2 == (number) 1
  (bool~) play_remove_lines::$10 ← ! (bool~) play_remove_lines::$9
  if((bool~) play_remove_lines::$10) goto play_remove_lines::@7
  to:play_remove_lines::@6
play_remove_lines::@7: scope:[play_remove_lines]  from play_remove_lines::@5 play_remove_lines::@6
  (byte) play_remove_lines::removed#8 ← phi( play_remove_lines::@5/(byte) play_remove_lines::removed#4 play_remove_lines::@6/(byte) play_remove_lines::removed#1 )
  (byte) play_remove_lines::r#5 ← phi( play_remove_lines::@5/(byte) play_remove_lines::r#7 play_remove_lines::@6/(byte) play_remove_lines::r#8 )
  (byte) play_remove_lines::w#11 ← phi( play_remove_lines::@5/(byte) play_remove_lines::w#10 play_remove_lines::@6/(byte) play_remove_lines::w#2 )
  (byte) play_remove_lines::y#2 ← phi( play_remove_lines::@5/(byte) play_remove_lines::y#3 play_remove_lines::@6/(byte) play_remove_lines::y#4 )
  (byte) play_remove_lines::y#1 ← (byte) play_remove_lines::y#2 + rangenext(0,play_remove_lines::$4)
  (bool~) play_remove_lines::$12 ← (byte) play_remove_lines::y#1 != rangelast(0,play_remove_lines::$4)
  if((bool~) play_remove_lines::$12) goto play_remove_lines::@1
  to:play_remove_lines::@9
play_remove_lines::@6: scope:[play_remove_lines]  from play_remove_lines::@5
  (byte) play_remove_lines::r#8 ← phi( play_remove_lines::@5/(byte) play_remove_lines::r#7 )
  (byte) play_remove_lines::y#4 ← phi( play_remove_lines::@5/(byte) play_remove_lines::y#3 )
  (byte) play_remove_lines::removed#2 ← phi( play_remove_lines::@5/(byte) play_remove_lines::removed#4 )
  (byte) play_remove_lines::w#5 ← phi( play_remove_lines::@5/(byte) play_remove_lines::w#10 )
  (byte~) play_remove_lines::$11 ← (byte) play_remove_lines::w#5 + (byte) PLAYFIELD_COLS#0
  (byte) play_remove_lines::w#2 ← (byte~) play_remove_lines::$11
  (byte) play_remove_lines::removed#1 ← ++ (byte) play_remove_lines::removed#2
  to:play_remove_lines::@7
play_remove_lines::@9: scope:[play_remove_lines]  from play_remove_lines::@10 play_remove_lines::@7
  (byte) play_remove_lines::removed#5 ← phi( play_remove_lines::@10/(byte) play_remove_lines::removed#7 play_remove_lines::@7/(byte) play_remove_lines::removed#8 )
  (byte) play_remove_lines::w#6 ← phi( play_remove_lines::@10/(byte) play_remove_lines::w#3 play_remove_lines::@7/(byte) play_remove_lines::w#11 )
  (bool~) play_remove_lines::$13 ← (byte) play_remove_lines::w#6 != (number) $ff
  if((bool~) play_remove_lines::$13) goto play_remove_lines::@10
  to:play_remove_lines::@11
play_remove_lines::@10: scope:[play_remove_lines]  from play_remove_lines::@9
  (byte) play_remove_lines::removed#7 ← phi( play_remove_lines::@9/(byte) play_remove_lines::removed#5 )
  (byte) play_remove_lines::w#7 ← phi( play_remove_lines::@9/(byte) play_remove_lines::w#6 )
  *((byte[$3]) playfield#0 + (byte) play_remove_lines::w#7) ← (number) 0
  (byte) play_remove_lines::w#3 ← -- (byte) play_remove_lines::w#7
  to:play_remove_lines::@9
play_remove_lines::@11: scope:[play_remove_lines]  from play_remove_lines::@9
  (byte) play_remove_lines::removed#3 ← phi( play_remove_lines::@9/(byte) play_remove_lines::removed#5 )
  (byte) play_remove_lines::return#1 ← (byte) play_remove_lines::removed#3
  to:play_remove_lines::@return
play_remove_lines::@return: scope:[play_remove_lines]  from play_remove_lines::@11
  (byte) play_remove_lines::return#4 ← phi( play_remove_lines::@11/(byte) play_remove_lines::return#1 )
  (byte) play_remove_lines::return#2 ← (byte) play_remove_lines::return#4
  return 
  to:@return
play_update_score: scope:[play_update_score]  from play_move_down::@20
  (byte) level_bcd#34 ← phi( play_move_down::@20/(byte) level_bcd#30 )
  (byte) current_movedown_slow#40 ← phi( play_move_down::@20/(byte) current_movedown_slow#36 )
  (byte) level#36 ← phi( play_move_down::@20/(byte) level#32 )
  (dword) score_bcd#28 ← phi( play_move_down::@20/(dword) score_bcd#25 )
  (word) lines_bcd#28 ← phi( play_move_down::@20/(word) lines_bcd#25 )
  (byte) play_update_score::removed#1 ← phi( play_move_down::@20/(byte) play_update_score::removed#0 )
  (bool~) play_update_score::$0 ← (byte) play_update_score::removed#1 != (number) 0
  (bool~) play_update_score::$1 ← ! (bool~) play_update_score::$0
  if((bool~) play_update_score::$1) goto play_update_score::@return
  to:play_update_score::@2
play_update_score::@2: scope:[play_update_score]  from play_update_score
  (byte) level_bcd#35 ← phi( play_update_score/(byte) level_bcd#34 )
  (byte) current_movedown_slow#41 ← phi( play_update_score/(byte) current_movedown_slow#40 )
  (byte) level#37 ← phi( play_update_score/(byte) level#36 )
  (dword) score_bcd#15 ← phi( play_update_score/(dword) score_bcd#28 )
  (byte) play_update_score::removed#2 ← phi( play_update_score/(byte) play_update_score::removed#1 )
  (word) lines_bcd#16 ← phi( play_update_score/(word) lines_bcd#28 )
  (byte~) play_update_score::$2 ← < (word) lines_bcd#16
  (number~) play_update_score::$3 ← (byte~) play_update_score::$2 & (number) $f0
  (byte) play_update_score::lines_before#0 ← (number~) play_update_score::$3
  (byte~) play_update_score::$9 ← (byte) play_update_score::removed#2 * (const byte) SIZEOF_DWORD
  (dword) play_update_score::add_bcd#0 ← *((dword[5]) score_add_bcd#0 + (byte~) play_update_score::$9)
  asm { sed  }
  (word) lines_bcd#5 ← (word) lines_bcd#16 + (byte) play_update_score::removed#2
  (dword) score_bcd#5 ← (dword) score_bcd#15 + (dword) play_update_score::add_bcd#0
  asm { cld  }
  (byte~) play_update_score::$4 ← < (word) lines_bcd#5
  (number~) play_update_score::$5 ← (byte~) play_update_score::$4 & (number) $f0
  (byte) play_update_score::lines_after#0 ← (number~) play_update_score::$5
  (bool~) play_update_score::$6 ← (byte) play_update_score::lines_before#0 != (byte) play_update_score::lines_after#0
  (bool~) play_update_score::$7 ← ! (bool~) play_update_score::$6
  if((bool~) play_update_score::$7) goto play_update_score::@return
  to:play_update_score::@3
play_update_score::@3: scope:[play_update_score]  from play_update_score::@2
  (dword) score_bcd#39 ← phi( play_update_score::@2/(dword) score_bcd#5 )
  (word) lines_bcd#39 ← phi( play_update_score::@2/(word) lines_bcd#5 )
  (byte) level_bcd#33 ← phi( play_update_score::@2/(byte) level_bcd#35 )
  (byte) current_movedown_slow#39 ← phi( play_update_score::@2/(byte) current_movedown_slow#41 )
  (byte) level#35 ← phi( play_update_score::@2/(byte) level#37 )
  call play_increase_level 
  to:play_update_score::@5
play_update_score::@5: scope:[play_update_score]  from play_update_score::@3
  (dword) score_bcd#29 ← phi( play_update_score::@3/(dword) score_bcd#39 )
  (word) lines_bcd#29 ← phi( play_update_score::@3/(word) lines_bcd#39 )
  (byte) level_bcd#18 ← phi( play_update_score::@3/(byte) level_bcd#9 )
  (byte) current_movedown_slow#22 ← phi( play_update_score::@3/(byte) current_movedown_slow#11 )
  (byte) level#18 ← phi( play_update_score::@3/(byte) level#8 )
  (byte) level#5 ← (byte) level#18
  (byte) current_movedown_slow#7 ← (byte) current_movedown_slow#22
  (byte) level_bcd#5 ← (byte) level_bcd#18
  to:play_update_score::@return
play_update_score::@return: scope:[play_update_score]  from play_update_score play_update_score::@2 play_update_score::@5
  (byte) level_bcd#19 ← phi( play_update_score/(byte) level_bcd#34 play_update_score::@2/(byte) level_bcd#35 play_update_score::@5/(byte) level_bcd#5 )
  (byte) current_movedown_slow#23 ← phi( play_update_score/(byte) current_movedown_slow#40 play_update_score::@2/(byte) current_movedown_slow#41 play_update_score::@5/(byte) current_movedown_slow#7 )
  (byte) level#19 ← phi( play_update_score/(byte) level#36 play_update_score::@2/(byte) level#37 play_update_score::@5/(byte) level#5 )
  (dword) score_bcd#16 ← phi( play_update_score/(dword) score_bcd#28 play_update_score::@2/(dword) score_bcd#5 play_update_score::@5/(dword) score_bcd#29 )
  (word) lines_bcd#17 ← phi( play_update_score/(word) lines_bcd#28 play_update_score::@2/(word) lines_bcd#5 play_update_score::@5/(word) lines_bcd#29 )
  (word) lines_bcd#6 ← (word) lines_bcd#17
  (dword) score_bcd#6 ← (dword) score_bcd#16
  (byte) level#6 ← (byte) level#19
  (byte) current_movedown_slow#8 ← (byte) current_movedown_slow#23
  (byte) level_bcd#6 ← (byte) level_bcd#19
  return 
  to:@return
play_increase_level: scope:[play_increase_level]  from play_update_score::@3
  (byte) level_bcd#48 ← phi( play_update_score::@3/(byte) level_bcd#33 )
  (byte) level#20 ← phi( play_update_score::@3/(byte) level#35 )
  (byte) level#7 ← ++ (byte) level#20
  (bool~) play_increase_level::$0 ← (byte) level#7 > (number) $1d
  if((bool~) play_increase_level::$0) goto play_increase_level::@1
  to:play_increase_level::@4
play_increase_level::@1: scope:[play_increase_level]  from play_increase_level
  (byte) level#87 ← phi( play_increase_level/(byte) level#7 )
  (byte) level_bcd#36 ← phi( play_increase_level/(byte) level_bcd#48 )
  (byte) current_movedown_slow#9 ← (number) 1
  to:play_increase_level::@2
play_increase_level::@4: scope:[play_increase_level]  from play_increase_level
  (byte) level_bcd#37 ← phi( play_increase_level/(byte) level_bcd#48 )
  (byte) level#21 ← phi( play_increase_level/(byte) level#7 )
  (byte) current_movedown_slow#10 ← *((byte[]) MOVEDOWN_SLOW_SPEEDS#0 + (byte) level#21)
  to:play_increase_level::@2
play_increase_level::@2: scope:[play_increase_level]  from play_increase_level::@1 play_increase_level::@4
  (byte) current_movedown_slow#73 ← phi( play_increase_level::@1/(byte) current_movedown_slow#9 play_increase_level::@4/(byte) current_movedown_slow#10 )
  (byte) level#77 ← phi( play_increase_level::@1/(byte) level#87 play_increase_level::@4/(byte) level#21 )
  (byte) level_bcd#20 ← phi( play_increase_level::@1/(byte) level_bcd#36 play_increase_level::@4/(byte) level_bcd#37 )
  (byte) level_bcd#7 ← ++ (byte) level_bcd#20
  (number~) play_increase_level::$1 ← (byte) level_bcd#7 & (number) $f
  (bool~) play_increase_level::$2 ← (number~) play_increase_level::$1 == (number) $a
  (bool~) play_increase_level::$3 ← ! (bool~) play_increase_level::$2
  if((bool~) play_increase_level::$3) goto play_increase_level::@3
  to:play_increase_level::@6
play_increase_level::@3: scope:[play_increase_level]  from play_increase_level::@2 play_increase_level::@6
  (byte) level_bcd#62 ← phi( play_increase_level::@2/(byte) level_bcd#7 play_increase_level::@6/(byte) level_bcd#8 )
  (byte) current_movedown_slow#66 ← phi( play_increase_level::@2/(byte) current_movedown_slow#73 play_increase_level::@6/(byte) current_movedown_slow#74 )
  (byte) level#65 ← phi( play_increase_level::@2/(byte) level#77 play_increase_level::@6/(byte) level#78 )
  asm { sed  }
  (byte) play_increase_level::b#0 ← (byte) 0
  to:play_increase_level::@7
play_increase_level::@6: scope:[play_increase_level]  from play_increase_level::@2
  (byte) current_movedown_slow#74 ← phi( play_increase_level::@2/(byte) current_movedown_slow#73 )
  (byte) level#78 ← phi( play_increase_level::@2/(byte) level#77 )
  (byte) level_bcd#21 ← phi( play_increase_level::@2/(byte) level_bcd#7 )
  (byte) level_bcd#8 ← (byte) level_bcd#21 + (number) 6
  to:play_increase_level::@3
play_increase_level::@7: scope:[play_increase_level]  from play_increase_level::@3 play_increase_level::@7
  (byte) level_bcd#49 ← phi( play_increase_level::@3/(byte) level_bcd#62 play_increase_level::@7/(byte) level_bcd#49 )
  (byte) current_movedown_slow#53 ← phi( play_increase_level::@3/(byte) current_movedown_slow#66 play_increase_level::@7/(byte) current_movedown_slow#53 )
  (byte) level#50 ← phi( play_increase_level::@3/(byte) level#65 play_increase_level::@7/(byte) level#50 )
  (byte) play_increase_level::b#2 ← phi( play_increase_level::@3/(byte) play_increase_level::b#0 play_increase_level::@7/(byte) play_increase_level::b#1 )
  (byte~) play_increase_level::$5 ← (byte) play_increase_level::b#2 * (const byte) SIZEOF_DWORD
  *((dword[5]) score_add_bcd#0 + (byte~) play_increase_level::$5) ← *((dword[5]) score_add_bcd#0 + (byte~) play_increase_level::$5) + *((dword[]) SCORE_BASE_BCD#0 + (byte~) play_increase_level::$5)
  (byte) play_increase_level::b#1 ← (byte) play_increase_level::b#2 + rangenext(0,4)
  (bool~) play_increase_level::$4 ← (byte) play_increase_level::b#1 != rangelast(0,4)
  if((bool~) play_increase_level::$4) goto play_increase_level::@7
  to:play_increase_level::@8
play_increase_level::@8: scope:[play_increase_level]  from play_increase_level::@7
  (byte) level_bcd#38 ← phi( play_increase_level::@7/(byte) level_bcd#49 )
  (byte) current_movedown_slow#42 ← phi( play_increase_level::@7/(byte) current_movedown_slow#53 )
  (byte) level#38 ← phi( play_increase_level::@7/(byte) level#50 )
  asm { cld  }
  to:play_increase_level::@return
play_increase_level::@return: scope:[play_increase_level]  from play_increase_level::@8
  (byte) level_bcd#22 ← phi( play_increase_level::@8/(byte) level_bcd#38 )
  (byte) current_movedown_slow#24 ← phi( play_increase_level::@8/(byte) current_movedown_slow#42 )
  (byte) level#22 ← phi( play_increase_level::@8/(byte) level#38 )
  (byte) level#8 ← (byte) level#22
  (byte) current_movedown_slow#11 ← (byte) current_movedown_slow#24
  (byte) level_bcd#9 ← (byte) level_bcd#22
  return 
  to:@return
main: scope:[main]  from @37
  (byte) level_bcd#100 ← phi( @37/(byte) level_bcd#41 )
  (dword) score_bcd#83 ← phi( @37/(dword) score_bcd#32 )
  (word) lines_bcd#87 ← phi( @37/(word) lines_bcd#32 )
  (byte) current_movedown_counter#58 ← phi( @37/(byte) current_movedown_counter#26 )
  (byte) keyboard_modifiers#61 ← phi( @37/(byte) keyboard_modifiers#24 )
  (byte) keyboard_events_size#79 ← phi( @37/(byte) keyboard_events_size#28 )
  (byte) render_screen_showing#47 ← phi( @37/(byte) render_screen_showing#14 )
  (byte) level#100 ← phi( @37/(byte) level#41 )
  (byte) game_over#81 ← phi( @37/(byte) game_over#34 )
  (byte) current_ypos#94 ← phi( @37/(byte) current_ypos#49 )
  (byte) current_xpos#115 ← phi( @37/(byte) current_xpos#58 )
  (byte*) current_piece_gfx#108 ← phi( @37/(byte*) current_piece_gfx#45 )
  (byte) current_orientation#92 ← phi( @37/(byte) current_orientation#49 )
  (byte) current_piece_char#95 ← phi( @37/(byte) current_piece_char#36 )
  (byte*) current_piece#88 ← phi( @37/(byte*) current_piece#39 )
  (byte) next_piece_idx#75 ← phi( @37/(byte) next_piece_idx#35 )
  (byte) current_movedown_slow#80 ← phi( @37/(byte) current_movedown_slow#46 )
  (byte) render_screen_render#35 ← phi( @37/(byte) render_screen_render#29 )
  (byte) render_screen_show#27 ← phi( @37/(byte) render_screen_show#24 )
  call sid_rnd_init 
  to:main::@25
main::@25: scope:[main]  from main
  (byte) level_bcd#99 ← phi( main/(byte) level_bcd#100 )
  (dword) score_bcd#82 ← phi( main/(dword) score_bcd#83 )
  (word) lines_bcd#86 ← phi( main/(word) lines_bcd#87 )
  (byte) current_movedown_counter#57 ← phi( main/(byte) current_movedown_counter#58 )
  (byte) keyboard_modifiers#60 ← phi( main/(byte) keyboard_modifiers#61 )
  (byte) keyboard_events_size#78 ← phi( main/(byte) keyboard_events_size#79 )
  (byte) render_screen_showing#46 ← phi( main/(byte) render_screen_showing#47 )
  (byte) level#95 ← phi( main/(byte) level#100 )
  (byte) game_over#76 ← phi( main/(byte) game_over#81 )
  (byte) current_ypos#90 ← phi( main/(byte) current_ypos#94 )
  (byte) current_xpos#111 ← phi( main/(byte) current_xpos#115 )
  (byte*) current_piece_gfx#101 ← phi( main/(byte*) current_piece_gfx#108 )
  (byte) current_orientation#89 ← phi( main/(byte) current_orientation#92 )
  (byte) current_piece_char#89 ← phi( main/(byte) current_piece_char#95 )
  (byte*) current_piece#83 ← phi( main/(byte*) current_piece#88 )
  (byte) next_piece_idx#70 ← phi( main/(byte) next_piece_idx#75 )
  (byte) current_movedown_slow#75 ← phi( main/(byte) current_movedown_slow#80 )
  (byte) render_screen_render#27 ← phi( main/(byte) render_screen_render#35 )
  (byte) render_screen_show#22 ← phi( main/(byte) render_screen_show#27 )
  asm { sei  }
  call render_init 
  to:main::@26
main::@26: scope:[main]  from main::@25
  (byte) level_bcd#98 ← phi( main::@25/(byte) level_bcd#99 )
  (dword) score_bcd#81 ← phi( main::@25/(dword) score_bcd#82 )
  (word) lines_bcd#85 ← phi( main::@25/(word) lines_bcd#86 )
  (byte) current_movedown_counter#56 ← phi( main::@25/(byte) current_movedown_counter#57 )
  (byte) keyboard_modifiers#59 ← phi( main::@25/(byte) keyboard_modifiers#60 )
  (byte) keyboard_events_size#77 ← phi( main::@25/(byte) keyboard_events_size#78 )
  (byte) render_screen_showing#45 ← phi( main::@25/(byte) render_screen_showing#46 )
  (byte) level#88 ← phi( main::@25/(byte) level#95 )
  (byte) game_over#67 ← phi( main::@25/(byte) game_over#76 )
  (byte) current_ypos#82 ← phi( main::@25/(byte) current_ypos#90 )
  (byte) current_xpos#102 ← phi( main::@25/(byte) current_xpos#111 )
  (byte*) current_piece_gfx#94 ← phi( main::@25/(byte*) current_piece_gfx#101 )
  (byte) current_orientation#81 ← phi( main::@25/(byte) current_orientation#89 )
  (byte) current_piece_char#79 ← phi( main::@25/(byte) current_piece_char#89 )
  (byte*) current_piece#76 ← phi( main::@25/(byte*) current_piece#83 )
  (byte) next_piece_idx#63 ← phi( main::@25/(byte) next_piece_idx#70 )
  (byte) current_movedown_slow#67 ← phi( main::@25/(byte) current_movedown_slow#75 )
  (byte) render_screen_render#16 ← phi( main::@25/(byte) render_screen_render#2 )
  (byte) render_screen_show#14 ← phi( main::@25/(byte) render_screen_show#2 )
  (byte) render_screen_show#5 ← (byte) render_screen_show#14
  (byte) render_screen_render#5 ← (byte) render_screen_render#16
  call sprites_init 
  to:main::@27
main::@27: scope:[main]  from main::@26
  (byte) level_bcd#97 ← phi( main::@26/(byte) level_bcd#98 )
  (dword) score_bcd#80 ← phi( main::@26/(dword) score_bcd#81 )
  (word) lines_bcd#84 ← phi( main::@26/(word) lines_bcd#85 )
  (byte) current_movedown_counter#55 ← phi( main::@26/(byte) current_movedown_counter#56 )
  (byte) keyboard_modifiers#57 ← phi( main::@26/(byte) keyboard_modifiers#59 )
  (byte) keyboard_events_size#75 ← phi( main::@26/(byte) keyboard_events_size#77 )
  (byte) render_screen_showing#44 ← phi( main::@26/(byte) render_screen_showing#45 )
  (byte) render_screen_show#59 ← phi( main::@26/(byte) render_screen_show#5 )
  (byte) render_screen_render#58 ← phi( main::@26/(byte) render_screen_render#5 )
  (byte) level#79 ← phi( main::@26/(byte) level#88 )
  (byte) game_over#54 ← phi( main::@26/(byte) game_over#67 )
  (byte) current_ypos#72 ← phi( main::@26/(byte) current_ypos#82 )
  (byte) current_xpos#90 ← phi( main::@26/(byte) current_xpos#102 )
  (byte*) current_piece_gfx#76 ← phi( main::@26/(byte*) current_piece_gfx#94 )
  (byte) current_orientation#71 ← phi( main::@26/(byte) current_orientation#81 )
  (byte) current_piece_char#63 ← phi( main::@26/(byte) current_piece_char#79 )
  (byte*) current_piece#64 ← phi( main::@26/(byte*) current_piece#76 )
  (byte) next_piece_idx#54 ← phi( main::@26/(byte) next_piece_idx#63 )
  (byte) current_movedown_slow#54 ← phi( main::@26/(byte) current_movedown_slow#67 )
  call sprites_irq_init 
  to:main::@28
main::@28: scope:[main]  from main::@27
  (byte) level_bcd#96 ← phi( main::@27/(byte) level_bcd#97 )
  (dword) score_bcd#79 ← phi( main::@27/(dword) score_bcd#80 )
  (word) lines_bcd#83 ← phi( main::@27/(word) lines_bcd#84 )
  (byte) current_movedown_counter#54 ← phi( main::@27/(byte) current_movedown_counter#55 )
  (byte) keyboard_modifiers#55 ← phi( main::@27/(byte) keyboard_modifiers#57 )
  (byte) keyboard_events_size#73 ← phi( main::@27/(byte) keyboard_events_size#75 )
  (byte) render_screen_showing#43 ← phi( main::@27/(byte) render_screen_showing#44 )
  (byte) render_screen_show#58 ← phi( main::@27/(byte) render_screen_show#59 )
  (byte) render_screen_render#55 ← phi( main::@27/(byte) render_screen_render#58 )
  (byte) level#58 ← phi( main::@27/(byte) level#79 )
  (byte) game_over#40 ← phi( main::@27/(byte) game_over#54 )
  (byte) current_ypos#58 ← phi( main::@27/(byte) current_ypos#72 )
  (byte) current_xpos#70 ← phi( main::@27/(byte) current_xpos#90 )
  (byte*) current_piece_gfx#58 ← phi( main::@27/(byte*) current_piece_gfx#76 )
  (byte) current_orientation#57 ← phi( main::@27/(byte) current_orientation#71 )
  (byte) current_piece_char#46 ← phi( main::@27/(byte) current_piece_char#63 )
  (byte*) current_piece#49 ← phi( main::@27/(byte*) current_piece#64 )
  (byte) next_piece_idx#41 ← phi( main::@27/(byte) next_piece_idx#54 )
  (byte) current_movedown_slow#43 ← phi( main::@27/(byte) current_movedown_slow#54 )
  call play_init 
  to:main::@29
main::@29: scope:[main]  from main::@28
  (byte) level_bcd#93 ← phi( main::@28/(byte) level_bcd#96 )
  (byte) level#101 ← phi( main::@28/(byte) level#58 )
  (dword) score_bcd#77 ← phi( main::@28/(dword) score_bcd#79 )
  (word) lines_bcd#80 ← phi( main::@28/(word) lines_bcd#83 )
  (byte) current_movedown_counter#52 ← phi( main::@28/(byte) current_movedown_counter#54 )
  (byte) keyboard_modifiers#52 ← phi( main::@28/(byte) keyboard_modifiers#55 )
  (byte) keyboard_events_size#69 ← phi( main::@28/(byte) keyboard_events_size#73 )
  (byte) render_screen_showing#40 ← phi( main::@28/(byte) render_screen_showing#43 )
  (byte) render_screen_show#56 ← phi( main::@28/(byte) render_screen_show#58 )
  (byte) render_screen_render#50 ← phi( main::@28/(byte) render_screen_render#55 )
  (byte) game_over#30 ← phi( main::@28/(byte) game_over#40 )
  (byte) current_ypos#46 ← phi( main::@28/(byte) current_ypos#58 )
  (byte) current_xpos#55 ← phi( main::@28/(byte) current_xpos#70 )
  (byte*) current_piece_gfx#42 ← phi( main::@28/(byte*) current_piece_gfx#58 )
  (byte) current_orientation#46 ← phi( main::@28/(byte) current_orientation#57 )
  (byte) current_piece_char#33 ← phi( main::@28/(byte) current_piece_char#46 )
  (byte*) current_piece#36 ← phi( main::@28/(byte*) current_piece#49 )
  (byte) next_piece_idx#32 ← phi( main::@28/(byte) next_piece_idx#41 )
  (byte) current_movedown_slow#25 ← phi( main::@28/(byte) current_movedown_slow#2 )
  (byte) current_movedown_slow#12 ← (byte) current_movedown_slow#25
  call play_spawn_current 
  to:main::@30
main::@30: scope:[main]  from main::@29
  (byte) level_bcd#88 ← phi( main::@29/(byte) level_bcd#93 )
  (byte) level#96 ← phi( main::@29/(byte) level#101 )
  (dword) score_bcd#73 ← phi( main::@29/(dword) score_bcd#77 )
  (word) lines_bcd#76 ← phi( main::@29/(word) lines_bcd#80 )
  (byte) current_movedown_counter#49 ← phi( main::@29/(byte) current_movedown_counter#52 )
  (byte) keyboard_modifiers#49 ← phi( main::@29/(byte) keyboard_modifiers#52 )
  (byte) keyboard_events_size#64 ← phi( main::@29/(byte) keyboard_events_size#69 )
  (byte) render_screen_showing#37 ← phi( main::@29/(byte) render_screen_showing#40 )
  (byte) current_movedown_slow#84 ← phi( main::@29/(byte) current_movedown_slow#12 )
  (byte) render_screen_show#53 ← phi( main::@29/(byte) render_screen_show#56 )
  (byte) render_screen_render#44 ← phi( main::@29/(byte) render_screen_render#50 )
  (byte) next_piece_idx#19 ← phi( main::@29/(byte) next_piece_idx#6 )
  (byte) game_over#17 ← phi( main::@29/(byte) game_over#6 )
  (byte) current_ypos#25 ← phi( main::@29/(byte) current_ypos#7 )
  (byte) current_xpos#31 ← phi( main::@29/(byte) current_xpos#10 )
  (byte*) current_piece_gfx#24 ← phi( main::@29/(byte*) current_piece_gfx#9 )
  (byte) current_orientation#27 ← phi( main::@29/(byte) current_orientation#9 )
  (byte) current_piece_char#19 ← phi( main::@29/(byte) current_piece_char#6 )
  (byte*) current_piece#19 ← phi( main::@29/(byte*) current_piece#6 )
  (byte*) current_piece#7 ← (byte*) current_piece#19
  (byte) current_piece_char#7 ← (byte) current_piece_char#19
  (byte) current_orientation#10 ← (byte) current_orientation#27
  (byte*) current_piece_gfx#10 ← (byte*) current_piece_gfx#24
  (byte) current_xpos#11 ← (byte) current_xpos#31
  (byte) current_ypos#8 ← (byte) current_ypos#25
  (byte) game_over#7 ← (byte) game_over#17
  (byte) next_piece_idx#7 ← (byte) next_piece_idx#19
  call play_spawn_current 
  to:main::@31
main::@31: scope:[main]  from main::@30
  (byte) level_bcd#80 ← phi( main::@30/(byte) level_bcd#88 )
  (byte) level#89 ← phi( main::@30/(byte) level#96 )
  (dword) score_bcd#67 ← phi( main::@30/(dword) score_bcd#73 )
  (word) lines_bcd#70 ← phi( main::@30/(word) lines_bcd#76 )
  (byte) current_movedown_counter#46 ← phi( main::@30/(byte) current_movedown_counter#49 )
  (byte) keyboard_modifiers#46 ← phi( main::@30/(byte) keyboard_modifiers#49 )
  (byte) keyboard_events_size#58 ← phi( main::@30/(byte) keyboard_events_size#64 )
  (byte) render_screen_showing#33 ← phi( main::@30/(byte) render_screen_showing#37 )
  (byte) current_movedown_slow#81 ← phi( main::@30/(byte) current_movedown_slow#84 )
  (byte) render_screen_show#49 ← phi( main::@30/(byte) render_screen_show#53 )
  (byte) render_screen_render#31 ← phi( main::@30/(byte) render_screen_render#44 )
  (byte) next_piece_idx#20 ← phi( main::@30/(byte) next_piece_idx#6 )
  (byte) game_over#18 ← phi( main::@30/(byte) game_over#6 )
  (byte) current_ypos#26 ← phi( main::@30/(byte) current_ypos#7 )
  (byte) current_xpos#32 ← phi( main::@30/(byte) current_xpos#10 )
  (byte*) current_piece_gfx#25 ← phi( main::@30/(byte*) current_piece_gfx#9 )
  (byte) current_orientation#28 ← phi( main::@30/(byte) current_orientation#9 )
  (byte) current_piece_char#20 ← phi( main::@30/(byte) current_piece_char#6 )
  (byte*) current_piece#20 ← phi( main::@30/(byte*) current_piece#6 )
  (byte*) current_piece#8 ← (byte*) current_piece#20
  (byte) current_piece_char#8 ← (byte) current_piece_char#20
  (byte) current_orientation#11 ← (byte) current_orientation#28
  (byte*) current_piece_gfx#11 ← (byte*) current_piece_gfx#25
  (byte) current_xpos#12 ← (byte) current_xpos#32
  (byte) current_ypos#9 ← (byte) current_ypos#26
  (byte) game_over#8 ← (byte) game_over#18
  (byte) next_piece_idx#8 ← (byte) next_piece_idx#20
  call render_playfield 
  to:main::@32
main::@32: scope:[main]  from main::@31
  (byte) level_bcd#73 ← phi( main::@31/(byte) level_bcd#80 )
  (byte) level#80 ← phi( main::@31/(byte) level#89 )
  (dword) score_bcd#61 ← phi( main::@31/(dword) score_bcd#67 )
  (word) lines_bcd#63 ← phi( main::@31/(word) lines_bcd#70 )
  (byte) current_movedown_counter#42 ← phi( main::@31/(byte) current_movedown_counter#46 )
  (byte) keyboard_modifiers#40 ← phi( main::@31/(byte) keyboard_modifiers#46 )
  (byte) keyboard_events_size#49 ← phi( main::@31/(byte) keyboard_events_size#58 )
  (byte) render_screen_showing#27 ← phi( main::@31/(byte) render_screen_showing#33 )
  (byte) game_over#68 ← phi( main::@31/(byte) game_over#8 )
  (byte) current_orientation#82 ← phi( main::@31/(byte) current_orientation#11 )
  (byte) current_piece_char#80 ← phi( main::@31/(byte) current_piece_char#8 )
  (byte*) current_piece#77 ← phi( main::@31/(byte*) current_piece#8 )
  (byte) current_movedown_slow#76 ← phi( main::@31/(byte) current_movedown_slow#81 )
  (byte) render_screen_show#43 ← phi( main::@31/(byte) render_screen_show#49 )
  (byte) next_piece_idx#64 ← phi( main::@31/(byte) next_piece_idx#8 )
  (byte*) current_piece_gfx#81 ← phi( main::@31/(byte*) current_piece_gfx#11 )
  (byte) current_xpos#76 ← phi( main::@31/(byte) current_xpos#12 )
  (byte) render_screen_render#36 ← phi( main::@31/(byte) render_screen_render#31 )
  (byte) current_ypos#30 ← phi( main::@31/(byte) current_ypos#9 )
  call render_moving 
  to:main::@33
main::@33: scope:[main]  from main::@32
  (byte) level_bcd#63 ← phi( main::@32/(byte) level_bcd#73 )
  (byte) level#66 ← phi( main::@32/(byte) level#80 )
  (dword) score_bcd#52 ← phi( main::@32/(dword) score_bcd#61 )
  (word) lines_bcd#52 ← phi( main::@32/(word) lines_bcd#63 )
  (byte) current_movedown_counter#38 ← phi( main::@32/(byte) current_movedown_counter#42 )
  (byte) keyboard_modifiers#34 ← phi( main::@32/(byte) keyboard_modifiers#40 )
  (byte) keyboard_events_size#41 ← phi( main::@32/(byte) keyboard_events_size#49 )
  (byte) render_screen_showing#22 ← phi( main::@32/(byte) render_screen_showing#27 )
  (byte) game_over#55 ← phi( main::@32/(byte) game_over#68 )
  (byte) current_ypos#73 ← phi( main::@32/(byte) current_ypos#30 )
  (byte) current_xpos#91 ← phi( main::@32/(byte) current_xpos#76 )
  (byte*) current_piece_gfx#77 ← phi( main::@32/(byte*) current_piece_gfx#81 )
  (byte) current_orientation#72 ← phi( main::@32/(byte) current_orientation#82 )
  (byte) current_piece_char#64 ← phi( main::@32/(byte) current_piece_char#80 )
  (byte*) current_piece#65 ← phi( main::@32/(byte*) current_piece#77 )
  (byte) current_movedown_slow#68 ← phi( main::@32/(byte) current_movedown_slow#76 )
  (byte) render_screen_show#36 ← phi( main::@32/(byte) render_screen_show#43 )
  (byte) next_piece_idx#47 ← phi( main::@32/(byte) next_piece_idx#64 )
  (byte) render_screen_render#25 ← phi( main::@32/(byte) render_screen_render#36 )
  call render_next 
  to:main::@34
main::@34: scope:[main]  from main::@33
  (byte) level_bcd#51 ← phi( main::@33/(byte) level_bcd#63 )
  (byte) level#52 ← phi( main::@33/(byte) level#66 )
  (dword) score_bcd#41 ← phi( main::@33/(dword) score_bcd#52 )
  (word) lines_bcd#41 ← phi( main::@33/(word) lines_bcd#52 )
  (byte) current_movedown_counter#31 ← phi( main::@33/(byte) current_movedown_counter#38 )
  (byte) keyboard_modifiers#29 ← phi( main::@33/(byte) keyboard_modifiers#34 )
  (byte) keyboard_events_size#33 ← phi( main::@33/(byte) keyboard_events_size#41 )
  (byte) render_screen_showing#17 ← phi( main::@33/(byte) render_screen_showing#22 )
  (byte) next_piece_idx#43 ← phi( main::@33/(byte) next_piece_idx#47 )
  (byte) game_over#42 ← phi( main::@33/(byte) game_over#55 )
  (byte) current_ypos#60 ← phi( main::@33/(byte) current_ypos#73 )
  (byte) current_xpos#72 ← phi( main::@33/(byte) current_xpos#91 )
  (byte*) current_piece_gfx#60 ← phi( main::@33/(byte*) current_piece_gfx#77 )
  (byte) current_orientation#59 ← phi( main::@33/(byte) current_orientation#72 )
  (byte) current_piece_char#48 ← phi( main::@33/(byte) current_piece_char#64 )
  (byte*) current_piece#51 ← phi( main::@33/(byte*) current_piece#65 )
  (byte) current_movedown_slow#56 ← phi( main::@33/(byte) current_movedown_slow#68 )
  (byte) render_screen_render#38 ← phi( main::@33/(byte) render_screen_render#25 )
  (byte) render_screen_show#29 ← phi( main::@33/(byte) render_screen_show#36 )
  to:main::@1
main::@1: scope:[main]  from main::@19 main::@34 main::@43
  (byte) level_bcd#40 ← phi( main::@19/(byte) level_bcd#50 main::@34/(byte) level_bcd#51 main::@43/(byte) level_bcd#52 )
  (byte) level#40 ← phi( main::@19/(byte) level#51 main::@34/(byte) level#52 main::@43/(byte) level#53 )
  (dword) score_bcd#31 ← phi( main::@19/(dword) score_bcd#40 main::@34/(dword) score_bcd#41 main::@43/(dword) score_bcd#42 )
  (word) lines_bcd#31 ← phi( main::@19/(word) lines_bcd#40 main::@34/(word) lines_bcd#41 main::@43/(word) lines_bcd#42 )
  (byte) current_movedown_counter#25 ← phi( main::@19/(byte) current_movedown_counter#30 main::@34/(byte) current_movedown_counter#31 main::@43/(byte) current_movedown_counter#32 )
  (byte) keyboard_modifiers#23 ← phi( main::@19/(byte) keyboard_modifiers#28 main::@34/(byte) keyboard_modifiers#29 main::@43/(byte) keyboard_modifiers#30 )
  (byte) keyboard_events_size#27 ← phi( main::@19/(byte) keyboard_events_size#32 main::@34/(byte) keyboard_events_size#33 main::@43/(byte) keyboard_events_size#34 )
  (byte) render_screen_showing#13 ← phi( main::@19/(byte) render_screen_showing#16 main::@34/(byte) render_screen_showing#17 main::@43/(byte) render_screen_showing#18 )
  (byte) next_piece_idx#34 ← phi( main::@19/(byte) next_piece_idx#42 main::@34/(byte) next_piece_idx#43 main::@43/(byte) next_piece_idx#44 )
  (byte) game_over#33 ← phi( main::@19/(byte) game_over#41 main::@34/(byte) game_over#42 main::@43/(byte) game_over#43 )
  (byte) current_ypos#48 ← phi( main::@19/(byte) current_ypos#59 main::@34/(byte) current_ypos#60 main::@43/(byte) current_ypos#61 )
  (byte) current_xpos#57 ← phi( main::@19/(byte) current_xpos#71 main::@34/(byte) current_xpos#72 main::@43/(byte) current_xpos#73 )
  (byte*) current_piece_gfx#44 ← phi( main::@19/(byte*) current_piece_gfx#59 main::@34/(byte*) current_piece_gfx#60 main::@43/(byte*) current_piece_gfx#61 )
  (byte) current_orientation#48 ← phi( main::@19/(byte) current_orientation#58 main::@34/(byte) current_orientation#59 main::@43/(byte) current_orientation#60 )
  (byte) current_piece_char#35 ← phi( main::@19/(byte) current_piece_char#47 main::@34/(byte) current_piece_char#48 main::@43/(byte) current_piece_char#49 )
  (byte*) current_piece#38 ← phi( main::@19/(byte*) current_piece#50 main::@34/(byte*) current_piece#51 main::@43/(byte*) current_piece#52 )
  (byte) current_movedown_slow#45 ← phi( main::@19/(byte) current_movedown_slow#55 main::@34/(byte) current_movedown_slow#56 main::@43/(byte) current_movedown_slow#57 )
  (byte) render_screen_render#28 ← phi( main::@19/(byte) render_screen_render#37 main::@34/(byte) render_screen_render#38 main::@43/(byte) render_screen_render#6 )
  (byte) render_screen_show#23 ← phi( main::@19/(byte) render_screen_show#28 main::@34/(byte) render_screen_show#29 main::@43/(byte) render_screen_show#6 )
  if(true) goto main::@4
  to:main::@return
main::@4: scope:[main]  from main::@1 main::@4
  (byte) render_screen_render#63 ← phi( main::@1/(byte) render_screen_render#28 main::@4/(byte) render_screen_render#63 )
  (byte) next_piece_idx#76 ← phi( main::@1/(byte) next_piece_idx#34 main::@4/(byte) next_piece_idx#76 )
  (byte) current_xpos#116 ← phi( main::@1/(byte) current_xpos#57 main::@4/(byte) current_xpos#116 )
  (byte*) current_piece_gfx#109 ← phi( main::@1/(byte*) current_piece_gfx#44 main::@4/(byte*) current_piece_gfx#109 )
  (byte) current_orientation#93 ← phi( main::@1/(byte) current_orientation#48 main::@4/(byte) current_orientation#93 )
  (byte) current_piece_char#96 ← phi( main::@1/(byte) current_piece_char#35 main::@4/(byte) current_piece_char#96 )
  (byte*) current_piece#89 ← phi( main::@1/(byte*) current_piece#38 main::@4/(byte*) current_piece#89 )
  (byte) level_bcd#89 ← phi( main::@1/(byte) level_bcd#40 main::@4/(byte) level_bcd#89 )
  (byte) current_movedown_slow#85 ← phi( main::@1/(byte) current_movedown_slow#45 main::@4/(byte) current_movedown_slow#85 )
  (byte) level#97 ← phi( main::@1/(byte) level#40 main::@4/(byte) level#97 )
  (dword) score_bcd#74 ← phi( main::@1/(dword) score_bcd#31 main::@4/(dword) score_bcd#74 )
  (word) lines_bcd#77 ← phi( main::@1/(word) lines_bcd#31 main::@4/(word) lines_bcd#77 )
  (byte) current_ypos#95 ← phi( main::@1/(byte) current_ypos#48 main::@4/(byte) current_ypos#95 )
  (byte) current_movedown_counter#50 ← phi( main::@1/(byte) current_movedown_counter#25 main::@4/(byte) current_movedown_counter#50 )
  (byte) game_over#69 ← phi( main::@1/(byte) game_over#33 main::@4/(byte) game_over#69 )
  (byte) keyboard_modifiers#35 ← phi( main::@1/(byte) keyboard_modifiers#23 main::@4/(byte) keyboard_modifiers#35 )
  (byte) keyboard_events_size#42 ← phi( main::@1/(byte) keyboard_events_size#27 main::@4/(byte) keyboard_events_size#42 )
  (byte) render_screen_showing#19 ← phi( main::@1/(byte) render_screen_showing#13 main::@4/(byte) render_screen_showing#19 )
  (byte) render_screen_show#30 ← phi( main::@1/(byte) render_screen_show#23 main::@4/(byte) render_screen_show#30 )
  (bool~) main::$10 ← *((byte*) RASTER#0) != (number) $ff
  if((bool~) main::$10) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) render_screen_render#61 ← phi( main::@4/(byte) render_screen_render#63 )
  (byte) next_piece_idx#71 ← phi( main::@4/(byte) next_piece_idx#76 )
  (byte) current_xpos#112 ← phi( main::@4/(byte) current_xpos#116 )
  (byte*) current_piece_gfx#102 ← phi( main::@4/(byte*) current_piece_gfx#109 )
  (byte) current_orientation#90 ← phi( main::@4/(byte) current_orientation#93 )
  (byte) current_piece_char#90 ← phi( main::@4/(byte) current_piece_char#96 )
  (byte*) current_piece#84 ← phi( main::@4/(byte*) current_piece#89 )
  (byte) level_bcd#81 ← phi( main::@4/(byte) level_bcd#89 )
  (byte) current_movedown_slow#82 ← phi( main::@4/(byte) current_movedown_slow#85 )
  (byte) level#90 ← phi( main::@4/(byte) level#97 )
  (dword) score_bcd#68 ← phi( main::@4/(dword) score_bcd#74 )
  (word) lines_bcd#71 ← phi( main::@4/(word) lines_bcd#77 )
  (byte) current_ypos#91 ← phi( main::@4/(byte) current_ypos#95 )
  (byte) current_movedown_counter#47 ← phi( main::@4/(byte) current_movedown_counter#50 )
  (byte) game_over#56 ← phi( main::@4/(byte) game_over#69 )
  (byte) keyboard_modifiers#31 ← phi( main::@4/(byte) keyboard_modifiers#35 )
  (byte) keyboard_events_size#35 ← phi( main::@4/(byte) keyboard_events_size#42 )
  (byte) render_screen_showing#12 ← phi( main::@4/(byte) render_screen_showing#19 )
  (byte) render_screen_show#18 ← phi( main::@4/(byte) render_screen_show#30 )
  call render_show 
  to:main::@35
main::@35: scope:[main]  from main::@6
  (byte) render_screen_render#59 ← phi( main::@6/(byte) render_screen_render#61 )
  (byte) render_screen_show#54 ← phi( main::@6/(byte) render_screen_show#18 )
  (byte) next_piece_idx#65 ← phi( main::@6/(byte) next_piece_idx#71 )
  (byte) current_xpos#103 ← phi( main::@6/(byte) current_xpos#112 )
  (byte*) current_piece_gfx#95 ← phi( main::@6/(byte*) current_piece_gfx#102 )
  (byte) current_orientation#83 ← phi( main::@6/(byte) current_orientation#90 )
  (byte) current_piece_char#81 ← phi( main::@6/(byte) current_piece_char#90 )
  (byte*) current_piece#78 ← phi( main::@6/(byte*) current_piece#84 )
  (byte) level_bcd#74 ← phi( main::@6/(byte) level_bcd#81 )
  (byte) current_movedown_slow#77 ← phi( main::@6/(byte) current_movedown_slow#82 )
  (byte) level#81 ← phi( main::@6/(byte) level#90 )
  (dword) score_bcd#62 ← phi( main::@6/(dword) score_bcd#68 )
  (word) lines_bcd#64 ← phi( main::@6/(word) lines_bcd#71 )
  (byte) current_ypos#83 ← phi( main::@6/(byte) current_ypos#91 )
  (byte) current_movedown_counter#43 ← phi( main::@6/(byte) current_movedown_counter#47 )
  (byte) game_over#44 ← phi( main::@6/(byte) game_over#56 )
  (byte) keyboard_modifiers#22 ← phi( main::@6/(byte) keyboard_modifiers#31 )
  (byte) keyboard_events_size#26 ← phi( main::@6/(byte) keyboard_events_size#35 )
  (byte) render_screen_showing#8 ← phi( main::@6/(byte) render_screen_showing#2 )
  (byte) render_screen_showing#3 ← (byte) render_screen_showing#8
  call keyboard_event_scan 
  to:main::@36
main::@36: scope:[main]  from main::@35
  (byte) render_screen_showing#34 ← phi( main::@35/(byte) render_screen_showing#3 )
  (byte) render_screen_render#56 ← phi( main::@35/(byte) render_screen_render#59 )
  (byte) render_screen_show#50 ← phi( main::@35/(byte) render_screen_show#54 )
  (byte) next_piece_idx#55 ← phi( main::@35/(byte) next_piece_idx#65 )
  (byte) current_xpos#92 ← phi( main::@35/(byte) current_xpos#103 )
  (byte*) current_piece_gfx#78 ← phi( main::@35/(byte*) current_piece_gfx#95 )
  (byte) current_orientation#73 ← phi( main::@35/(byte) current_orientation#83 )
  (byte) current_piece_char#65 ← phi( main::@35/(byte) current_piece_char#81 )
  (byte*) current_piece#66 ← phi( main::@35/(byte*) current_piece#78 )
  (byte) level_bcd#64 ← phi( main::@35/(byte) level_bcd#74 )
  (byte) current_movedown_slow#69 ← phi( main::@35/(byte) current_movedown_slow#77 )
  (byte) level#67 ← phi( main::@35/(byte) level#81 )
  (dword) score_bcd#53 ← phi( main::@35/(dword) score_bcd#62 )
  (word) lines_bcd#53 ← phi( main::@35/(word) lines_bcd#64 )
  (byte) current_ypos#74 ← phi( main::@35/(byte) current_ypos#83 )
  (byte) current_movedown_counter#39 ← phi( main::@35/(byte) current_movedown_counter#43 )
  (byte) game_over#31 ← phi( main::@35/(byte) game_over#44 )
  (byte) keyboard_modifiers#15 ← phi( main::@35/(byte) keyboard_modifiers#6 )
  (byte) keyboard_events_size#17 ← phi( main::@35/(byte) keyboard_events_size#3 )
  (byte) keyboard_events_size#6 ← (byte) keyboard_events_size#17
  (byte) keyboard_modifiers#7 ← (byte) keyboard_modifiers#15
  call keyboard_event_get 
  (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
  to:main::@37
main::@37: scope:[main]  from main::@36
  (byte) keyboard_modifiers#43 ← phi( main::@36/(byte) keyboard_modifiers#7 )
  (byte) render_screen_showing#30 ← phi( main::@36/(byte) render_screen_showing#34 )
  (byte) render_screen_render#53 ← phi( main::@36/(byte) render_screen_render#56 )
  (byte) render_screen_show#46 ← phi( main::@36/(byte) render_screen_show#50 )
  (byte) next_piece_idx#45 ← phi( main::@36/(byte) next_piece_idx#55 )
  (byte) current_xpos#74 ← phi( main::@36/(byte) current_xpos#92 )
  (byte*) current_piece_gfx#62 ← phi( main::@36/(byte*) current_piece_gfx#78 )
  (byte) current_orientation#61 ← phi( main::@36/(byte) current_orientation#73 )
  (byte) current_piece_char#50 ← phi( main::@36/(byte) current_piece_char#65 )
  (byte*) current_piece#53 ← phi( main::@36/(byte*) current_piece#66 )
  (byte) level_bcd#53 ← phi( main::@36/(byte) level_bcd#64 )
  (byte) current_movedown_slow#58 ← phi( main::@36/(byte) current_movedown_slow#69 )
  (byte) level#54 ← phi( main::@36/(byte) level#67 )
  (dword) score_bcd#43 ← phi( main::@36/(dword) score_bcd#53 )
  (word) lines_bcd#43 ← phi( main::@36/(word) lines_bcd#53 )
  (byte) current_ypos#62 ← phi( main::@36/(byte) current_ypos#74 )
  (byte) current_movedown_counter#33 ← phi( main::@36/(byte) current_movedown_counter#39 )
  (byte) game_over#19 ← phi( main::@36/(byte) game_over#31 )
  (byte) keyboard_events_size#18 ← phi( main::@36/(byte) keyboard_events_size#5 )
  (byte) keyboard_event_get::return#5 ← phi( main::@36/(byte) keyboard_event_get::return#3 )
  (byte~) main::$13 ← (byte) keyboard_event_get::return#5
  (byte) keyboard_events_size#7 ← (byte) keyboard_events_size#18
  (byte) main::key_event#0 ← (byte~) main::$13
  (byte) main::render#0 ← (number) 0
  (bool~) main::$14 ← (byte) game_over#19 == (number) 0
  if((bool~) main::$14) goto main::@11
  to:main::@12
main::@11: scope:[main]  from main::@37
  (byte) keyboard_modifiers#41 ← phi( main::@37/(byte) keyboard_modifiers#43 )
  (byte) keyboard_events_size#50 ← phi( main::@37/(byte) keyboard_events_size#7 )
  (byte) render_screen_showing#28 ← phi( main::@37/(byte) render_screen_showing#30 )
  (byte) render_screen_render#51 ← phi( main::@37/(byte) render_screen_render#53 )
  (byte) render_screen_show#44 ← phi( main::@37/(byte) render_screen_show#46 )
  (byte) next_piece_idx#33 ← phi( main::@37/(byte) next_piece_idx#45 )
  (byte) game_over#32 ← phi( main::@37/(byte) game_over#19 )
  (byte) current_xpos#56 ← phi( main::@37/(byte) current_xpos#74 )
  (byte*) current_piece_gfx#43 ← phi( main::@37/(byte*) current_piece_gfx#62 )
  (byte) current_orientation#47 ← phi( main::@37/(byte) current_orientation#61 )
  (byte) current_piece_char#34 ← phi( main::@37/(byte) current_piece_char#50 )
  (byte*) current_piece#37 ← phi( main::@37/(byte*) current_piece#53 )
  (byte) level_bcd#39 ← phi( main::@37/(byte) level_bcd#53 )
  (byte) current_movedown_slow#44 ← phi( main::@37/(byte) current_movedown_slow#58 )
  (byte) level#39 ← phi( main::@37/(byte) level#54 )
  (dword) score_bcd#30 ← phi( main::@37/(dword) score_bcd#43 )
  (word) lines_bcd#30 ← phi( main::@37/(word) lines_bcd#43 )
  (byte) current_ypos#47 ← phi( main::@37/(byte) current_ypos#62 )
  (byte) current_movedown_counter#24 ← phi( main::@37/(byte) current_movedown_counter#33 )
  (byte) main::key_event#1 ← phi( main::@37/(byte) main::key_event#0 )
  (byte) play_movement::key_event#0 ← (byte) main::key_event#1
  call play_movement 
  (byte) play_movement::return#3 ← (byte) play_movement::return#2
  to:main::@38
main::@38: scope:[main]  from main::@11
  (byte) keyboard_modifiers#37 ← phi( main::@11/(byte) keyboard_modifiers#41 )
  (byte) keyboard_events_size#44 ← phi( main::@11/(byte) keyboard_events_size#50 )
  (byte) render_screen_showing#24 ← phi( main::@11/(byte) render_screen_showing#28 )
  (byte) render_screen_render#46 ← phi( main::@11/(byte) render_screen_render#51 )
  (byte) render_screen_show#38 ← phi( main::@11/(byte) render_screen_show#44 )
  (byte) next_piece_idx#21 ← phi( main::@11/(byte) next_piece_idx#2 )
  (byte) game_over#20 ← phi( main::@11/(byte) game_over#2 )
  (byte) current_xpos#33 ← phi( main::@11/(byte) current_xpos#3 )
  (byte*) current_piece_gfx#26 ← phi( main::@11/(byte*) current_piece_gfx#3 )
  (byte) current_orientation#29 ← phi( main::@11/(byte) current_orientation#3 )
  (byte) current_piece_char#21 ← phi( main::@11/(byte) current_piece_char#2 )
  (byte*) current_piece#21 ← phi( main::@11/(byte*) current_piece#2 )
  (byte) level_bcd#23 ← phi( main::@11/(byte) level_bcd#2 )
  (byte) current_movedown_slow#26 ← phi( main::@11/(byte) current_movedown_slow#4 )
  (byte) level#23 ← phi( main::@11/(byte) level#2 )
  (dword) score_bcd#17 ← phi( main::@11/(dword) score_bcd#2 )
  (word) lines_bcd#18 ← phi( main::@11/(word) lines_bcd#2 )
  (byte) current_ypos#27 ← phi( main::@11/(byte) current_ypos#2 )
  (byte) current_movedown_counter#15 ← phi( main::@11/(byte) current_movedown_counter#2 )
  (byte) play_movement::return#5 ← phi( main::@11/(byte) play_movement::return#3 )
  (byte~) main::$16 ← (byte) play_movement::return#5
  (byte) current_movedown_counter#6 ← (byte) current_movedown_counter#15
  (byte) current_ypos#10 ← (byte) current_ypos#27
  (word) lines_bcd#7 ← (word) lines_bcd#18
  (dword) score_bcd#7 ← (dword) score_bcd#17
  (byte) level#9 ← (byte) level#23
  (byte) current_movedown_slow#13 ← (byte) current_movedown_slow#26
  (byte) level_bcd#10 ← (byte) level_bcd#23
  (byte*) current_piece#9 ← (byte*) current_piece#21
  (byte) current_piece_char#9 ← (byte) current_piece_char#21
  (byte) current_orientation#12 ← (byte) current_orientation#29
  (byte*) current_piece_gfx#12 ← (byte*) current_piece_gfx#26
  (byte) current_xpos#13 ← (byte) current_xpos#33
  (byte) game_over#9 ← (byte) game_over#20
  (byte) next_piece_idx#9 ← (byte) next_piece_idx#21
  (byte) main::render#1 ← (byte~) main::$16
  to:main::@19
main::@12: scope:[main]  from main::@13 main::@37
  (byte) level_bcd#65 ← phi( main::@13/(byte) level_bcd#75 main::@37/(byte) level_bcd#53 )
  (byte) level#68 ← phi( main::@13/(byte) level#82 main::@37/(byte) level#54 )
  (dword) score_bcd#54 ← phi( main::@13/(dword) score_bcd#63 main::@37/(dword) score_bcd#43 )
  (word) lines_bcd#54 ← phi( main::@13/(word) lines_bcd#65 main::@37/(word) lines_bcd#43 )
  (byte) current_movedown_counter#40 ← phi( main::@13/(byte) current_movedown_counter#44 main::@37/(byte) current_movedown_counter#33 )
  (byte) keyboard_modifiers#36 ← phi( main::@13/(byte) keyboard_modifiers#42 main::@37/(byte) keyboard_modifiers#43 )
  (byte) keyboard_events_size#43 ← phi( main::@13/(byte) keyboard_events_size#51 main::@37/(byte) keyboard_events_size#7 )
  (byte) render_screen_showing#23 ← phi( main::@13/(byte) render_screen_showing#29 main::@37/(byte) render_screen_showing#30 )
  (byte) next_piece_idx#56 ← phi( main::@13/(byte) next_piece_idx#66 main::@37/(byte) next_piece_idx#45 )
  (byte) game_over#57 ← phi( main::@13/(byte) game_over#70 main::@37/(byte) game_over#19 )
  (byte) current_ypos#75 ← phi( main::@13/(byte) current_ypos#84 main::@37/(byte) current_ypos#62 )
  (byte) current_xpos#93 ← phi( main::@13/(byte) current_xpos#104 main::@37/(byte) current_xpos#74 )
  (byte*) current_piece_gfx#79 ← phi( main::@13/(byte*) current_piece_gfx#96 main::@37/(byte*) current_piece_gfx#62 )
  (byte) current_orientation#74 ← phi( main::@13/(byte) current_orientation#84 main::@37/(byte) current_orientation#61 )
  (byte) current_piece_char#66 ← phi( main::@13/(byte) current_piece_char#82 main::@37/(byte) current_piece_char#50 )
  (byte*) current_piece#67 ← phi( main::@13/(byte*) current_piece#79 main::@37/(byte*) current_piece#53 )
  (byte) current_movedown_slow#70 ← phi( main::@13/(byte) current_movedown_slow#78 main::@37/(byte) current_movedown_slow#58 )
  (byte) render_screen_render#45 ← phi( main::@13/(byte) render_screen_render#52 main::@37/(byte) render_screen_render#53 )
  (byte) render_screen_show#37 ← phi( main::@13/(byte) render_screen_show#45 main::@37/(byte) render_screen_show#46 )
  (byte) main::render#3 ← phi( main::@13/(byte) main::render#4 main::@37/(byte) main::render#0 )
  if(true) goto main::@13
  to:main::@19
main::@13: scope:[main]  from main::@12
  (byte) level_bcd#75 ← phi( main::@12/(byte) level_bcd#65 )
  (byte) level#82 ← phi( main::@12/(byte) level#68 )
  (dword) score_bcd#63 ← phi( main::@12/(dword) score_bcd#54 )
  (word) lines_bcd#65 ← phi( main::@12/(word) lines_bcd#54 )
  (byte) current_movedown_counter#44 ← phi( main::@12/(byte) current_movedown_counter#40 )
  (byte) keyboard_modifiers#42 ← phi( main::@12/(byte) keyboard_modifiers#36 )
  (byte) keyboard_events_size#51 ← phi( main::@12/(byte) keyboard_events_size#43 )
  (byte) render_screen_showing#29 ← phi( main::@12/(byte) render_screen_showing#23 )
  (byte) next_piece_idx#66 ← phi( main::@12/(byte) next_piece_idx#56 )
  (byte) game_over#70 ← phi( main::@12/(byte) game_over#57 )
  (byte) current_ypos#84 ← phi( main::@12/(byte) current_ypos#75 )
  (byte) current_xpos#104 ← phi( main::@12/(byte) current_xpos#93 )
  (byte*) current_piece_gfx#96 ← phi( main::@12/(byte*) current_piece_gfx#79 )
  (byte) current_orientation#84 ← phi( main::@12/(byte) current_orientation#74 )
  (byte) current_piece_char#82 ← phi( main::@12/(byte) current_piece_char#66 )
  (byte*) current_piece#79 ← phi( main::@12/(byte*) current_piece#67 )
  (byte) current_movedown_slow#78 ← phi( main::@12/(byte) current_movedown_slow#70 )
  (byte) render_screen_render#52 ← phi( main::@12/(byte) render_screen_render#45 )
  (byte) render_screen_show#45 ← phi( main::@12/(byte) render_screen_show#37 )
  (byte) main::render#4 ← phi( main::@12/(byte) main::render#3 )
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  to:main::@12
main::@19: scope:[main]  from main::@12 main::@38
  (byte) level_bcd#50 ← phi( main::@12/(byte) level_bcd#65 main::@38/(byte) level_bcd#10 )
  (byte) level#51 ← phi( main::@12/(byte) level#68 main::@38/(byte) level#9 )
  (dword) score_bcd#40 ← phi( main::@12/(dword) score_bcd#54 main::@38/(dword) score_bcd#7 )
  (word) lines_bcd#40 ← phi( main::@12/(word) lines_bcd#54 main::@38/(word) lines_bcd#7 )
  (byte) current_movedown_counter#30 ← phi( main::@12/(byte) current_movedown_counter#40 main::@38/(byte) current_movedown_counter#6 )
  (byte) keyboard_modifiers#28 ← phi( main::@12/(byte) keyboard_modifiers#36 main::@38/(byte) keyboard_modifiers#37 )
  (byte) keyboard_events_size#32 ← phi( main::@12/(byte) keyboard_events_size#43 main::@38/(byte) keyboard_events_size#44 )
  (byte) render_screen_showing#16 ← phi( main::@12/(byte) render_screen_showing#23 main::@38/(byte) render_screen_showing#24 )
  (byte) next_piece_idx#42 ← phi( main::@12/(byte) next_piece_idx#56 main::@38/(byte) next_piece_idx#9 )
  (byte) game_over#41 ← phi( main::@12/(byte) game_over#57 main::@38/(byte) game_over#9 )
  (byte) current_ypos#59 ← phi( main::@12/(byte) current_ypos#75 main::@38/(byte) current_ypos#10 )
  (byte) current_xpos#71 ← phi( main::@12/(byte) current_xpos#93 main::@38/(byte) current_xpos#13 )
  (byte*) current_piece_gfx#59 ← phi( main::@12/(byte*) current_piece_gfx#79 main::@38/(byte*) current_piece_gfx#12 )
  (byte) current_orientation#58 ← phi( main::@12/(byte) current_orientation#74 main::@38/(byte) current_orientation#12 )
  (byte) current_piece_char#47 ← phi( main::@12/(byte) current_piece_char#66 main::@38/(byte) current_piece_char#9 )
  (byte*) current_piece#50 ← phi( main::@12/(byte*) current_piece#67 main::@38/(byte*) current_piece#9 )
  (byte) current_movedown_slow#55 ← phi( main::@12/(byte) current_movedown_slow#70 main::@38/(byte) current_movedown_slow#13 )
  (byte) render_screen_render#37 ← phi( main::@12/(byte) render_screen_render#45 main::@38/(byte) render_screen_render#46 )
  (byte) render_screen_show#28 ← phi( main::@12/(byte) render_screen_show#37 main::@38/(byte) render_screen_show#38 )
  (byte) main::render#2 ← phi( main::@12/(byte) main::render#3 main::@38/(byte) main::render#1 )
  (bool~) main::$17 ← (byte) main::render#2 != (number) 0
  (bool~) main::$18 ← ! (bool~) main::$17
  if((bool~) main::$18) goto main::@1
  to:main::@23
main::@23: scope:[main]  from main::@19
  (byte) level_bcd#94 ← phi( main::@19/(byte) level_bcd#50 )
  (byte) level#102 ← phi( main::@19/(byte) level#51 )
  (word) lines_bcd#81 ← phi( main::@19/(word) lines_bcd#40 )
  (byte) current_movedown_counter#53 ← phi( main::@19/(byte) current_movedown_counter#30 )
  (byte) keyboard_modifiers#53 ← phi( main::@19/(byte) keyboard_modifiers#28 )
  (byte) keyboard_events_size#70 ← phi( main::@19/(byte) keyboard_events_size#32 )
  (byte) render_screen_showing#41 ← phi( main::@19/(byte) render_screen_showing#16 )
  (byte) game_over#84 ← phi( main::@19/(byte) game_over#41 )
  (byte) current_orientation#95 ← phi( main::@19/(byte) current_orientation#58 )
  (byte*) current_piece#91 ← phi( main::@19/(byte*) current_piece#50 )
  (byte) current_movedown_slow#87 ← phi( main::@19/(byte) current_movedown_slow#55 )
  (dword) score_bcd#75 ← phi( main::@19/(dword) score_bcd#40 )
  (byte) current_piece_char#97 ← phi( main::@19/(byte) current_piece_char#47 )
  (byte) render_screen_show#51 ← phi( main::@19/(byte) render_screen_show#28 )
  (byte) next_piece_idx#72 ← phi( main::@19/(byte) next_piece_idx#42 )
  (byte*) current_piece_gfx#103 ← phi( main::@19/(byte*) current_piece_gfx#59 )
  (byte) current_xpos#105 ← phi( main::@19/(byte) current_xpos#71 )
  (byte) current_ypos#63 ← phi( main::@19/(byte) current_ypos#59 )
  (byte) render_screen_render#30 ← phi( main::@19/(byte) render_screen_render#37 )
  call render_playfield 
  to:main::@39
main::@39: scope:[main]  from main::@23
  (byte) level_bcd#90 ← phi( main::@23/(byte) level_bcd#94 )
  (byte) level#98 ← phi( main::@23/(byte) level#102 )
  (word) lines_bcd#78 ← phi( main::@23/(word) lines_bcd#81 )
  (byte) current_movedown_counter#51 ← phi( main::@23/(byte) current_movedown_counter#53 )
  (byte) keyboard_modifiers#50 ← phi( main::@23/(byte) keyboard_modifiers#53 )
  (byte) keyboard_events_size#65 ← phi( main::@23/(byte) keyboard_events_size#70 )
  (byte) render_screen_showing#38 ← phi( main::@23/(byte) render_screen_showing#41 )
  (byte) game_over#82 ← phi( main::@23/(byte) game_over#84 )
  (byte) current_orientation#94 ← phi( main::@23/(byte) current_orientation#95 )
  (byte*) current_piece#90 ← phi( main::@23/(byte*) current_piece#91 )
  (byte) current_movedown_slow#86 ← phi( main::@23/(byte) current_movedown_slow#87 )
  (dword) score_bcd#69 ← phi( main::@23/(dword) score_bcd#75 )
  (byte) current_piece_char#84 ← phi( main::@23/(byte) current_piece_char#97 )
  (byte) render_screen_show#47 ← phi( main::@23/(byte) render_screen_show#51 )
  (byte) next_piece_idx#67 ← phi( main::@23/(byte) next_piece_idx#72 )
  (byte*) current_piece_gfx#82 ← phi( main::@23/(byte*) current_piece_gfx#103 )
  (byte) current_xpos#77 ← phi( main::@23/(byte) current_xpos#105 )
  (byte) render_screen_render#39 ← phi( main::@23/(byte) render_screen_render#30 )
  (byte) current_ypos#31 ← phi( main::@23/(byte) current_ypos#63 )
  call render_moving 
  to:main::@40
main::@40: scope:[main]  from main::@39
  (byte) level_bcd#82 ← phi( main::@39/(byte) level_bcd#90 )
  (byte) level#91 ← phi( main::@39/(byte) level#98 )
  (word) lines_bcd#72 ← phi( main::@39/(word) lines_bcd#78 )
  (byte) current_movedown_counter#48 ← phi( main::@39/(byte) current_movedown_counter#51 )
  (byte) keyboard_modifiers#47 ← phi( main::@39/(byte) keyboard_modifiers#50 )
  (byte) keyboard_events_size#59 ← phi( main::@39/(byte) keyboard_events_size#65 )
  (byte) render_screen_showing#35 ← phi( main::@39/(byte) render_screen_showing#38 )
  (byte) game_over#77 ← phi( main::@39/(byte) game_over#82 )
  (byte) current_ypos#92 ← phi( main::@39/(byte) current_ypos#31 )
  (byte) current_xpos#113 ← phi( main::@39/(byte) current_xpos#77 )
  (byte*) current_piece_gfx#104 ← phi( main::@39/(byte*) current_piece_gfx#82 )
  (byte) current_orientation#91 ← phi( main::@39/(byte) current_orientation#94 )
  (byte) current_piece_char#91 ← phi( main::@39/(byte) current_piece_char#84 )
  (byte*) current_piece#85 ← phi( main::@39/(byte*) current_piece#90 )
  (byte) current_movedown_slow#83 ← phi( main::@39/(byte) current_movedown_slow#86 )
  (dword) score_bcd#64 ← phi( main::@39/(dword) score_bcd#69 )
  (byte) render_screen_show#39 ← phi( main::@39/(byte) render_screen_show#47 )
  (byte) next_piece_idx#48 ← phi( main::@39/(byte) next_piece_idx#67 )
  (byte) render_screen_render#26 ← phi( main::@39/(byte) render_screen_render#39 )
  call render_next 
  to:main::@41
main::@41: scope:[main]  from main::@40
  (byte) level_bcd#76 ← phi( main::@40/(byte) level_bcd#82 )
  (byte) level#83 ← phi( main::@40/(byte) level#91 )
  (word) lines_bcd#66 ← phi( main::@40/(word) lines_bcd#72 )
  (byte) current_movedown_counter#45 ← phi( main::@40/(byte) current_movedown_counter#48 )
  (byte) keyboard_modifiers#44 ← phi( main::@40/(byte) keyboard_modifiers#47 )
  (byte) keyboard_events_size#52 ← phi( main::@40/(byte) keyboard_events_size#59 )
  (byte) render_screen_showing#31 ← phi( main::@40/(byte) render_screen_showing#35 )
  (byte) next_piece_idx#68 ← phi( main::@40/(byte) next_piece_idx#48 )
  (byte) game_over#71 ← phi( main::@40/(byte) game_over#77 )
  (byte) current_ypos#85 ← phi( main::@40/(byte) current_ypos#92 )
  (byte) current_xpos#106 ← phi( main::@40/(byte) current_xpos#113 )
  (byte*) current_piece_gfx#97 ← phi( main::@40/(byte*) current_piece_gfx#104 )
  (byte) current_orientation#85 ← phi( main::@40/(byte) current_orientation#91 )
  (byte) current_piece_char#83 ← phi( main::@40/(byte) current_piece_char#91 )
  (byte*) current_piece#80 ← phi( main::@40/(byte*) current_piece#85 )
  (byte) current_movedown_slow#79 ← phi( main::@40/(byte) current_movedown_slow#83 )
  (dword) score_bcd#45 ← phi( main::@40/(dword) score_bcd#64 )
  (byte) render_screen_show#31 ← phi( main::@40/(byte) render_screen_show#39 )
  (byte) render_screen_render#21 ← phi( main::@40/(byte) render_screen_render#26 )
  call render_score 
  to:main::@42
main::@42: scope:[main]  from main::@41
  (byte) level_bcd#66 ← phi( main::@41/(byte) level_bcd#76 )
  (byte) level#69 ← phi( main::@41/(byte) level#83 )
  (dword) score_bcd#55 ← phi( main::@41/(dword) score_bcd#45 )
  (word) lines_bcd#55 ← phi( main::@41/(word) lines_bcd#66 )
  (byte) current_movedown_counter#41 ← phi( main::@41/(byte) current_movedown_counter#45 )
  (byte) keyboard_modifiers#38 ← phi( main::@41/(byte) keyboard_modifiers#44 )
  (byte) keyboard_events_size#45 ← phi( main::@41/(byte) keyboard_events_size#52 )
  (byte) render_screen_showing#25 ← phi( main::@41/(byte) render_screen_showing#31 )
  (byte) next_piece_idx#57 ← phi( main::@41/(byte) next_piece_idx#68 )
  (byte) game_over#58 ← phi( main::@41/(byte) game_over#71 )
  (byte) current_ypos#76 ← phi( main::@41/(byte) current_ypos#85 )
  (byte) current_xpos#94 ← phi( main::@41/(byte) current_xpos#106 )
  (byte*) current_piece_gfx#80 ← phi( main::@41/(byte*) current_piece_gfx#97 )
  (byte) current_orientation#75 ← phi( main::@41/(byte) current_orientation#85 )
  (byte) current_piece_char#67 ← phi( main::@41/(byte) current_piece_char#83 )
  (byte*) current_piece#68 ← phi( main::@41/(byte*) current_piece#80 )
  (byte) current_movedown_slow#71 ← phi( main::@41/(byte) current_movedown_slow#79 )
  (byte) render_screen_show#21 ← phi( main::@41/(byte) render_screen_show#31 )
  (byte) render_screen_render#20 ← phi( main::@41/(byte) render_screen_render#21 )
  call render_screen_swap 
  to:main::@43
main::@43: scope:[main]  from main::@42
  (byte) level_bcd#52 ← phi( main::@42/(byte) level_bcd#66 )
  (byte) level#53 ← phi( main::@42/(byte) level#69 )
  (dword) score_bcd#42 ← phi( main::@42/(dword) score_bcd#55 )
  (word) lines_bcd#42 ← phi( main::@42/(word) lines_bcd#55 )
  (byte) current_movedown_counter#32 ← phi( main::@42/(byte) current_movedown_counter#41 )
  (byte) keyboard_modifiers#30 ← phi( main::@42/(byte) keyboard_modifiers#38 )
  (byte) keyboard_events_size#34 ← phi( main::@42/(byte) keyboard_events_size#45 )
  (byte) render_screen_showing#18 ← phi( main::@42/(byte) render_screen_showing#25 )
  (byte) next_piece_idx#44 ← phi( main::@42/(byte) next_piece_idx#57 )
  (byte) game_over#43 ← phi( main::@42/(byte) game_over#58 )
  (byte) current_ypos#61 ← phi( main::@42/(byte) current_ypos#76 )
  (byte) current_xpos#73 ← phi( main::@42/(byte) current_xpos#94 )
  (byte*) current_piece_gfx#61 ← phi( main::@42/(byte*) current_piece_gfx#80 )
  (byte) current_orientation#60 ← phi( main::@42/(byte) current_orientation#75 )
  (byte) current_piece_char#49 ← phi( main::@42/(byte) current_piece_char#67 )
  (byte*) current_piece#52 ← phi( main::@42/(byte*) current_piece#68 )
  (byte) current_movedown_slow#57 ← phi( main::@42/(byte) current_movedown_slow#71 )
  (byte) render_screen_show#15 ← phi( main::@42/(byte) render_screen_show#4 )
  (byte) render_screen_render#17 ← phi( main::@42/(byte) render_screen_render#4 )
  (byte) render_screen_render#6 ← (byte) render_screen_render#17
  (byte) render_screen_show#6 ← (byte) render_screen_show#15
  to:main::@1
main::@return: scope:[main]  from main::@1
  (byte) level_bcd#24 ← phi( main::@1/(byte) level_bcd#40 )
  (byte) level#24 ← phi( main::@1/(byte) level#40 )
  (dword) score_bcd#18 ← phi( main::@1/(dword) score_bcd#31 )
  (word) lines_bcd#19 ← phi( main::@1/(word) lines_bcd#31 )
  (byte) current_movedown_counter#16 ← phi( main::@1/(byte) current_movedown_counter#25 )
  (byte) keyboard_modifiers#16 ← phi( main::@1/(byte) keyboard_modifiers#23 )
  (byte) keyboard_events_size#19 ← phi( main::@1/(byte) keyboard_events_size#27 )
  (byte) render_screen_showing#9 ← phi( main::@1/(byte) render_screen_showing#13 )
  (byte) next_piece_idx#22 ← phi( main::@1/(byte) next_piece_idx#34 )
  (byte) game_over#21 ← phi( main::@1/(byte) game_over#33 )
  (byte) current_ypos#28 ← phi( main::@1/(byte) current_ypos#48 )
  (byte) current_xpos#34 ← phi( main::@1/(byte) current_xpos#57 )
  (byte*) current_piece_gfx#27 ← phi( main::@1/(byte*) current_piece_gfx#44 )
  (byte) current_orientation#30 ← phi( main::@1/(byte) current_orientation#48 )
  (byte) current_piece_char#22 ← phi( main::@1/(byte) current_piece_char#35 )
  (byte*) current_piece#22 ← phi( main::@1/(byte*) current_piece#38 )
  (byte) current_movedown_slow#27 ← phi( main::@1/(byte) current_movedown_slow#45 )
  (byte) render_screen_render#18 ← phi( main::@1/(byte) render_screen_render#28 )
  (byte) render_screen_show#16 ← phi( main::@1/(byte) render_screen_show#23 )
  (byte) render_screen_show#7 ← (byte) render_screen_show#16
  (byte) render_screen_render#7 ← (byte) render_screen_render#18
  (byte) current_movedown_slow#14 ← (byte) current_movedown_slow#27
  (byte*) current_piece#10 ← (byte*) current_piece#22
  (byte) current_piece_char#10 ← (byte) current_piece_char#22
  (byte) current_orientation#13 ← (byte) current_orientation#30
  (byte*) current_piece_gfx#13 ← (byte*) current_piece_gfx#27
  (byte) current_xpos#14 ← (byte) current_xpos#34
  (byte) current_ypos#11 ← (byte) current_ypos#28
  (byte) game_over#10 ← (byte) game_over#21
  (byte) next_piece_idx#10 ← (byte) next_piece_idx#22
  (byte) render_screen_showing#4 ← (byte) render_screen_showing#9
  (byte) keyboard_events_size#8 ← (byte) keyboard_events_size#19
  (byte) keyboard_modifiers#8 ← (byte) keyboard_modifiers#16
  (byte) current_movedown_counter#7 ← (byte) current_movedown_counter#16
  (word) lines_bcd#8 ← (word) lines_bcd#19
  (dword) score_bcd#8 ← (dword) score_bcd#18
  (byte) level#10 ← (byte) level#24
  (byte) level_bcd#11 ← (byte) level_bcd#24
  return 
  to:@return
@37: scope:[]  from @30
  (byte) irq_cnt#17 ← phi( @30/(byte) irq_cnt#19 )
  (byte) irq_sprite_ptr#14 ← phi( @30/(byte) irq_sprite_ptr#17 )
  (byte) level_bcd#41 ← phi( @30/(byte) level_bcd#54 )
  (byte) level#41 ← phi( @30/(byte) level#55 )
  (dword) score_bcd#32 ← phi( @30/(dword) score_bcd#44 )
  (word) lines_bcd#32 ← phi( @30/(word) lines_bcd#44 )
  (byte) current_movedown_counter#26 ← phi( @30/(byte) current_movedown_counter#34 )
  (byte) keyboard_modifiers#24 ← phi( @30/(byte) keyboard_modifiers#32 )
  (byte) keyboard_events_size#28 ← phi( @30/(byte) keyboard_events_size#36 )
  (byte) render_screen_showing#14 ← phi( @30/(byte) render_screen_showing#20 )
  (byte) next_piece_idx#35 ← phi( @30/(byte) next_piece_idx#46 )
  (byte) game_over#34 ← phi( @30/(byte) game_over#45 )
  (byte) current_ypos#49 ← phi( @30/(byte) current_ypos#64 )
  (byte) current_xpos#58 ← phi( @30/(byte) current_xpos#75 )
  (byte*) current_piece_gfx#45 ← phi( @30/(byte*) current_piece_gfx#63 )
  (byte) current_orientation#49 ← phi( @30/(byte) current_orientation#62 )
  (byte) current_piece_char#36 ← phi( @30/(byte) current_piece_char#51 )
  (byte*) current_piece#39 ← phi( @30/(byte*) current_piece#54 )
  (byte) current_movedown_slow#46 ← phi( @30/(byte) current_movedown_slow#59 )
  (byte) render_screen_render#29 ← phi( @30/(byte) render_screen_render#40 )
  (byte) render_screen_show#24 ← phi( @30/(byte) render_screen_show#32 )
  (byte) irq_raster_next#10 ← phi( @30/(byte) irq_raster_next#17 )
  (byte) irq_sprite_ypos#9 ← phi( @30/(byte) irq_sprite_ypos#14 )
  call main 
  to:@39
@39: scope:[]  from @37
  (byte) level_bcd#25 ← phi( @37/(byte) level_bcd#11 )
  (byte) level#25 ← phi( @37/(byte) level#10 )
  (dword) score_bcd#19 ← phi( @37/(dword) score_bcd#8 )
  (word) lines_bcd#20 ← phi( @37/(word) lines_bcd#8 )
  (byte) current_movedown_counter#17 ← phi( @37/(byte) current_movedown_counter#7 )
  (byte) keyboard_modifiers#17 ← phi( @37/(byte) keyboard_modifiers#8 )
  (byte) keyboard_events_size#20 ← phi( @37/(byte) keyboard_events_size#8 )
  (byte) render_screen_showing#10 ← phi( @37/(byte) render_screen_showing#4 )
  (byte) next_piece_idx#23 ← phi( @37/(byte) next_piece_idx#10 )
  (byte) game_over#22 ← phi( @37/(byte) game_over#10 )
  (byte) current_ypos#29 ← phi( @37/(byte) current_ypos#11 )
  (byte) current_xpos#35 ← phi( @37/(byte) current_xpos#14 )
  (byte*) current_piece_gfx#28 ← phi( @37/(byte*) current_piece_gfx#13 )
  (byte) current_orientation#31 ← phi( @37/(byte) current_orientation#13 )
  (byte) current_piece_char#23 ← phi( @37/(byte) current_piece_char#10 )
  (byte*) current_piece#23 ← phi( @37/(byte*) current_piece#10 )
  (byte) current_movedown_slow#28 ← phi( @37/(byte) current_movedown_slow#14 )
  (byte) render_screen_render#19 ← phi( @37/(byte) render_screen_render#7 )
  (byte) render_screen_show#17 ← phi( @37/(byte) render_screen_show#7 )
  (byte) render_screen_show#8 ← (byte) render_screen_show#17
  (byte) render_screen_render#8 ← (byte) render_screen_render#19
  (byte) current_movedown_slow#15 ← (byte) current_movedown_slow#28
  (byte*) current_piece#11 ← (byte*) current_piece#23
  (byte) current_piece_char#11 ← (byte) current_piece_char#23
  (byte) current_orientation#14 ← (byte) current_orientation#31
  (byte*) current_piece_gfx#14 ← (byte*) current_piece_gfx#28
  (byte) current_xpos#15 ← (byte) current_xpos#35
  (byte) current_ypos#12 ← (byte) current_ypos#29
  (byte) game_over#11 ← (byte) game_over#22
  (byte) next_piece_idx#11 ← (byte) next_piece_idx#23
  (byte) render_screen_showing#5 ← (byte) render_screen_showing#10
  (byte) keyboard_events_size#9 ← (byte) keyboard_events_size#20
  (byte) keyboard_modifiers#9 ← (byte) keyboard_modifiers#17
  (byte) current_movedown_counter#8 ← (byte) current_movedown_counter#17
  (word) lines_bcd#9 ← (word) lines_bcd#20
  (dword) score_bcd#9 ← (dword) score_bcd#19
  (byte) level#11 ← (byte) level#25
  (byte) level_bcd#12 ← (byte) level_bcd#25
  to:@end
@end: scope:[]  from @39

SYMBOL TABLE SSA
(byte*~) $1
(word~) $10
(word~) $11
(word~) $12
(word~) $13
(word~) $14
(number~) $15
(byte*~) $2
(byte~) $3
(number~) $4
(number~) $5
(byte~) $6
(number~) $7
(word~) $8
(word~) $9
(label) @11
(label) @13
(label) @22
(label) @23
(label) @25
(label) @30
(label) @37
(label) @38
(label) @39
(label) @4
(label) @8
(label) @begin
(label) @end
(byte*) BGCOL1
(byte*) BGCOL1#0
(byte*) BGCOL2
(byte*) BGCOL2#0
(byte*) BGCOL3
(byte*) BGCOL3#0
(byte*) BGCOL4
(byte*) BGCOL4#0
(byte) BLACK
(byte) BLACK#0
(byte) BLUE
(byte) BLUE#0
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte*) CIA1_INTERRUPT
(byte*) CIA1_INTERRUPT#0
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A#0
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B#0
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A#0
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_A_DDR#0
(byte) CIA_INTERRUPT_CLEAR
(byte) CIA_INTERRUPT_CLEAR#0
(byte) COLLISION_BOTTOM
(byte) COLLISION_BOTTOM#0
(byte) COLLISION_LEFT
(byte) COLLISION_LEFT#0
(byte) COLLISION_NONE
(byte) COLLISION_NONE#0
(byte) COLLISION_PLAYFIELD
(byte) COLLISION_PLAYFIELD#0
(byte) COLLISION_RIGHT
(byte) COLLISION_RIGHT#0
(byte*) COLS
(byte*) COLS#0
(byte) CYAN
(byte) CYAN#0
(byte*) D011
(byte*) D011#0
(byte*) D018
(byte*) D018#0
(byte) DARK_GREY
(byte) DARK_GREY#0
(byte) GREEN
(byte) GREEN#0
(byte) GREY
(byte) GREY#0
(void()**) HARDWARE_IRQ
(void()**) HARDWARE_IRQ#0
(byte*) IRQ_ENABLE
(byte*) IRQ_ENABLE#0
(byte) IRQ_RASTER
(byte) IRQ_RASTER#0
(byte) IRQ_RASTER_FIRST
(byte) IRQ_RASTER_FIRST#0
(byte*) IRQ_STATUS
(byte*) IRQ_STATUS#0
(byte) KEY_COMMA
(byte) KEY_COMMA#0
(byte) KEY_COMMODORE
(byte) KEY_COMMODORE#0
(byte) KEY_CTRL
(byte) KEY_CTRL#0
(byte) KEY_DOT
(byte) KEY_DOT#0
(byte) KEY_LSHIFT
(byte) KEY_LSHIFT#0
(byte) KEY_MODIFIER_COMMODORE
(byte) KEY_MODIFIER_COMMODORE#0
(byte) KEY_MODIFIER_CTRL
(byte) KEY_MODIFIER_CTRL#0
(byte) KEY_MODIFIER_LSHIFT
(byte) KEY_MODIFIER_LSHIFT#0
(byte) KEY_MODIFIER_RSHIFT
(byte) KEY_MODIFIER_RSHIFT#0
(byte) KEY_RSHIFT
(byte) KEY_RSHIFT#0
(byte) KEY_SPACE
(byte) KEY_SPACE#0
(byte) KEY_X
(byte) KEY_X#0
(byte) KEY_Z
(byte) KEY_Z#0
(byte) LIGHT_BLUE
(byte) LIGHT_BLUE#0
(byte) LIGHT_GREEN
(byte) LIGHT_GREEN#0
(byte[]) MOVEDOWN_SLOW_SPEEDS
(byte[]) MOVEDOWN_SLOW_SPEEDS#0
(byte) ORANGE
(byte) ORANGE#0
(word[]) PIECES
(word[]) PIECES#0
(byte[]) PIECES_CHARS
(byte[]) PIECES_CHARS#0
(byte[]) PIECES_COLORS_1
(byte[]) PIECES_COLORS_1#0
(byte[]) PIECES_COLORS_2
(byte[]) PIECES_COLORS_2#0
(byte[]) PIECES_NEXT_CHARS
(byte[]) PIECES_NEXT_CHARS#0
(byte[]) PIECES_START_X
(byte[]) PIECES_START_X#0
(byte[]) PIECES_START_Y
(byte[]) PIECES_START_Y#0
(byte[4*4*4]) PIECE_I
(byte[4*4*4]) PIECE_I#0
(byte[4*4*4]) PIECE_J
(byte[4*4*4]) PIECE_J#0
(byte[4*4*4]) PIECE_L
(byte[4*4*4]) PIECE_L#0
(byte[4*4*4]) PIECE_O
(byte[4*4*4]) PIECE_O#0
(byte[4*4*4]) PIECE_S
(byte[4*4*4]) PIECE_S#0
(byte[4*4*4]) PIECE_T
(byte[4*4*4]) PIECE_T#0
(byte[4*4*4]) PIECE_Z
(byte[4*4*4]) PIECE_Z#0
(byte) PINK
(byte) PINK#0
(byte*) PLAYFIELD_CHARSET
(byte*) PLAYFIELD_CHARSET#0
(byte*) PLAYFIELD_COLORS_ORIGINAL
(byte*) PLAYFIELD_COLORS_ORIGINAL#0
(byte) PLAYFIELD_COLS
(byte) PLAYFIELD_COLS#0
(byte) PLAYFIELD_LINES
(byte) PLAYFIELD_LINES#0
(byte*) PLAYFIELD_SCREEN_1
(byte*) PLAYFIELD_SCREEN_1#0
(byte*) PLAYFIELD_SCREEN_2
(byte*) PLAYFIELD_SCREEN_2#0
(byte*) PLAYFIELD_SCREEN_ORIGINAL
(byte*) PLAYFIELD_SCREEN_ORIGINAL#0
(byte*) PLAYFIELD_SPRITES
(byte*) PLAYFIELD_SPRITES#0
(byte*) PLAYFIELD_SPRITE_PTRS_1
(byte*) PLAYFIELD_SPRITE_PTRS_1#0
(byte*) PLAYFIELD_SPRITE_PTRS_2
(byte*) PLAYFIELD_SPRITE_PTRS_2#0
(byte*) PROCPORT
(byte*) PROCPORT#0
(byte*) PROCPORT_DDR
(byte*) PROCPORT_DDR#0
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_DDR_MEMORY_MASK#0
(byte) PROCPORT_RAM_IO
(byte) PROCPORT_RAM_IO#0
(byte) PURPLE
(byte) PURPLE#0
(byte*) RASTER
(byte*) RASTER#0
(byte) RED
(byte) RED#0
(dword[]) SCORE_BASE_BCD
(dword[]) SCORE_BASE_BCD#0
(byte) SID_CONTROL_NOISE
(byte) SID_CONTROL_NOISE#0
(byte*) SID_VOICE3_CONTROL
(byte*) SID_VOICE3_CONTROL#0
(word*) SID_VOICE3_FREQ
(word*) SID_VOICE3_FREQ#0
(byte*) SID_VOICE3_OSC
(byte*) SID_VOICE3_OSC#0
(const byte) SIZEOF_DWORD = (byte) 4
(const byte) SIZEOF_POINTER = (byte) 2
(const byte) SIZEOF_WORD = (byte) 2
(byte*) SPRITES_COLS
(byte*) SPRITES_COLS#0
(byte*) SPRITES_ENABLE
(byte*) SPRITES_ENABLE#0
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_X#0
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_EXPAND_Y#0
(byte) SPRITES_FIRST_YPOS
(byte) SPRITES_FIRST_YPOS#0
(byte*) SPRITES_MC
(byte*) SPRITES_MC#0
(byte*) SPRITES_XPOS
(byte*) SPRITES_XPOS#0
(byte*) SPRITES_YPOS
(byte*) SPRITES_YPOS#0
(word) SPRITE_PTRS
(word) SPRITE_PTRS#0
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL#0
(byte) VIC_DEN
(byte) VIC_DEN#0
(byte) VIC_ECM
(byte) VIC_ECM#0
(byte) VIC_RSEL
(byte) VIC_RSEL#0
(byte) current_movedown_counter
(byte) current_movedown_counter#0
(byte) current_movedown_counter#1
(byte) current_movedown_counter#10
(byte) current_movedown_counter#11
(byte) current_movedown_counter#12
(byte) current_movedown_counter#13
(byte) current_movedown_counter#14
(byte) current_movedown_counter#15
(byte) current_movedown_counter#16
(byte) current_movedown_counter#17
(byte) current_movedown_counter#18
(byte) current_movedown_counter#19
(byte) current_movedown_counter#2
(byte) current_movedown_counter#20
(byte) current_movedown_counter#21
(byte) current_movedown_counter#22
(byte) current_movedown_counter#23
(byte) current_movedown_counter#24
(byte) current_movedown_counter#25
(byte) current_movedown_counter#26
(byte) current_movedown_counter#27
(byte) current_movedown_counter#28
(byte) current_movedown_counter#29
(byte) current_movedown_counter#3
(byte) current_movedown_counter#30
(byte) current_movedown_counter#31
(byte) current_movedown_counter#32
(byte) current_movedown_counter#33
(byte) current_movedown_counter#34
(byte) current_movedown_counter#35
(byte) current_movedown_counter#36
(byte) current_movedown_counter#37
(byte) current_movedown_counter#38
(byte) current_movedown_counter#39
(byte) current_movedown_counter#4
(byte) current_movedown_counter#40
(byte) current_movedown_counter#41
(byte) current_movedown_counter#42
(byte) current_movedown_counter#43
(byte) current_movedown_counter#44
(byte) current_movedown_counter#45
(byte) current_movedown_counter#46
(byte) current_movedown_counter#47
(byte) current_movedown_counter#48
(byte) current_movedown_counter#49
(byte) current_movedown_counter#5
(byte) current_movedown_counter#50
(byte) current_movedown_counter#51
(byte) current_movedown_counter#52
(byte) current_movedown_counter#53
(byte) current_movedown_counter#54
(byte) current_movedown_counter#55
(byte) current_movedown_counter#56
(byte) current_movedown_counter#57
(byte) current_movedown_counter#58
(byte) current_movedown_counter#6
(byte) current_movedown_counter#7
(byte) current_movedown_counter#8
(byte) current_movedown_counter#9
(byte) current_movedown_fast
(byte) current_movedown_fast#0
(byte) current_movedown_slow
(byte) current_movedown_slow#0
(byte) current_movedown_slow#1
(byte) current_movedown_slow#10
(byte) current_movedown_slow#11
(byte) current_movedown_slow#12
(byte) current_movedown_slow#13
(byte) current_movedown_slow#14
(byte) current_movedown_slow#15
(byte) current_movedown_slow#16
(byte) current_movedown_slow#17
(byte) current_movedown_slow#18
(byte) current_movedown_slow#19
(byte) current_movedown_slow#2
(byte) current_movedown_slow#20
(byte) current_movedown_slow#21
(byte) current_movedown_slow#22
(byte) current_movedown_slow#23
(byte) current_movedown_slow#24
(byte) current_movedown_slow#25
(byte) current_movedown_slow#26
(byte) current_movedown_slow#27
(byte) current_movedown_slow#28
(byte) current_movedown_slow#29
(byte) current_movedown_slow#3
(byte) current_movedown_slow#30
(byte) current_movedown_slow#31
(byte) current_movedown_slow#32
(byte) current_movedown_slow#33
(byte) current_movedown_slow#34
(byte) current_movedown_slow#35
(byte) current_movedown_slow#36
(byte) current_movedown_slow#37
(byte) current_movedown_slow#38
(byte) current_movedown_slow#39
(byte) current_movedown_slow#4
(byte) current_movedown_slow#40
(byte) current_movedown_slow#41
(byte) current_movedown_slow#42
(byte) current_movedown_slow#43
(byte) current_movedown_slow#44
(byte) current_movedown_slow#45
(byte) current_movedown_slow#46
(byte) current_movedown_slow#47
(byte) current_movedown_slow#48
(byte) current_movedown_slow#49
(byte) current_movedown_slow#5
(byte) current_movedown_slow#50
(byte) current_movedown_slow#51
(byte) current_movedown_slow#52
(byte) current_movedown_slow#53
(byte) current_movedown_slow#54
(byte) current_movedown_slow#55
(byte) current_movedown_slow#56
(byte) current_movedown_slow#57
(byte) current_movedown_slow#58
(byte) current_movedown_slow#59
(byte) current_movedown_slow#6
(byte) current_movedown_slow#60
(byte) current_movedown_slow#61
(byte) current_movedown_slow#62
(byte) current_movedown_slow#63
(byte) current_movedown_slow#64
(byte) current_movedown_slow#65
(byte) current_movedown_slow#66
(byte) current_movedown_slow#67
(byte) current_movedown_slow#68
(byte) current_movedown_slow#69
(byte) current_movedown_slow#7
(byte) current_movedown_slow#70
(byte) current_movedown_slow#71
(byte) current_movedown_slow#72
(byte) current_movedown_slow#73
(byte) current_movedown_slow#74
(byte) current_movedown_slow#75
(byte) current_movedown_slow#76
(byte) current_movedown_slow#77
(byte) current_movedown_slow#78
(byte) current_movedown_slow#79
(byte) current_movedown_slow#8
(byte) current_movedown_slow#80
(byte) current_movedown_slow#81
(byte) current_movedown_slow#82
(byte) current_movedown_slow#83
(byte) current_movedown_slow#84
(byte) current_movedown_slow#85
(byte) current_movedown_slow#86
(byte) current_movedown_slow#87
(byte) current_movedown_slow#9
(byte) current_orientation
(byte) current_orientation#0
(byte) current_orientation#1
(byte) current_orientation#10
(byte) current_orientation#11
(byte) current_orientation#12
(byte) current_orientation#13
(byte) current_orientation#14
(byte) current_orientation#15
(byte) current_orientation#16
(byte) current_orientation#17
(byte) current_orientation#18
(byte) current_orientation#19
(byte) current_orientation#2
(byte) current_orientation#20
(byte) current_orientation#21
(byte) current_orientation#22
(byte) current_orientation#23
(byte) current_orientation#24
(byte) current_orientation#25
(byte) current_orientation#26
(byte) current_orientation#27
(byte) current_orientation#28
(byte) current_orientation#29
(byte) current_orientation#3
(byte) current_orientation#30
(byte) current_orientation#31
(byte) current_orientation#32
(byte) current_orientation#33
(byte) current_orientation#34
(byte) current_orientation#35
(byte) current_orientation#36
(byte) current_orientation#37
(byte) current_orientation#38
(byte) current_orientation#39
(byte) current_orientation#4
(byte) current_orientation#40
(byte) current_orientation#41
(byte) current_orientation#42
(byte) current_orientation#43
(byte) current_orientation#44
(byte) current_orientation#45
(byte) current_orientation#46
(byte) current_orientation#47
(byte) current_orientation#48
(byte) current_orientation#49
(byte) current_orientation#5
(byte) current_orientation#50
(byte) current_orientation#51
(byte) current_orientation#52
(byte) current_orientation#53
(byte) current_orientation#54
(byte) current_orientation#55
(byte) current_orientation#56
(byte) current_orientation#57
(byte) current_orientation#58
(byte) current_orientation#59
(byte) current_orientation#6
(byte) current_orientation#60
(byte) current_orientation#61
(byte) current_orientation#62
(byte) current_orientation#63
(byte) current_orientation#64
(byte) current_orientation#65
(byte) current_orientation#66
(byte) current_orientation#67
(byte) current_orientation#68
(byte) current_orientation#69
(byte) current_orientation#7
(byte) current_orientation#70
(byte) current_orientation#71
(byte) current_orientation#72
(byte) current_orientation#73
(byte) current_orientation#74
(byte) current_orientation#75
(byte) current_orientation#76
(byte) current_orientation#77
(byte) current_orientation#78
(byte) current_orientation#79
(byte) current_orientation#8
(byte) current_orientation#80
(byte) current_orientation#81
(byte) current_orientation#82
(byte) current_orientation#83
(byte) current_orientation#84
(byte) current_orientation#85
(byte) current_orientation#86
(byte) current_orientation#87
(byte) current_orientation#88
(byte) current_orientation#89
(byte) current_orientation#9
(byte) current_orientation#90
(byte) current_orientation#91
(byte) current_orientation#92
(byte) current_orientation#93
(byte) current_orientation#94
(byte) current_orientation#95
(byte*) current_piece
(byte*) current_piece#0
(byte*) current_piece#1
(byte*) current_piece#10
(byte*) current_piece#11
(byte*) current_piece#12
(byte*) current_piece#13
(byte*) current_piece#14
(byte*) current_piece#15
(byte*) current_piece#16
(byte*) current_piece#17
(byte*) current_piece#18
(byte*) current_piece#19
(byte*) current_piece#2
(byte*) current_piece#20
(byte*) current_piece#21
(byte*) current_piece#22
(byte*) current_piece#23
(byte*) current_piece#24
(byte*) current_piece#25
(byte*) current_piece#26
(byte*) current_piece#27
(byte*) current_piece#28
(byte*) current_piece#29
(byte*) current_piece#3
(byte*) current_piece#30
(byte*) current_piece#31
(byte*) current_piece#32
(byte*) current_piece#33
(byte*) current_piece#34
(byte*) current_piece#35
(byte*) current_piece#36
(byte*) current_piece#37
(byte*) current_piece#38
(byte*) current_piece#39
(byte*) current_piece#4
(byte*) current_piece#40
(byte*) current_piece#41
(byte*) current_piece#42
(byte*) current_piece#43
(byte*) current_piece#44
(byte*) current_piece#45
(byte*) current_piece#46
(byte*) current_piece#47
(byte*) current_piece#48
(byte*) current_piece#49
(byte*) current_piece#5
(byte*) current_piece#50
(byte*) current_piece#51
(byte*) current_piece#52
(byte*) current_piece#53
(byte*) current_piece#54
(byte*) current_piece#55
(byte*) current_piece#56
(byte*) current_piece#57
(byte*) current_piece#58
(byte*) current_piece#59
(byte*) current_piece#6
(byte*) current_piece#60
(byte*) current_piece#61
(byte*) current_piece#62
(byte*) current_piece#63
(byte*) current_piece#64
(byte*) current_piece#65
(byte*) current_piece#66
(byte*) current_piece#67
(byte*) current_piece#68
(byte*) current_piece#69
(byte*) current_piece#7
(byte*) current_piece#70
(byte*) current_piece#71
(byte*) current_piece#72
(byte*) current_piece#73
(byte*) current_piece#74
(byte*) current_piece#75
(byte*) current_piece#76
(byte*) current_piece#77
(byte*) current_piece#78
(byte*) current_piece#79
(byte*) current_piece#8
(byte*) current_piece#80
(byte*) current_piece#81
(byte*) current_piece#82
(byte*) current_piece#83
(byte*) current_piece#84
(byte*) current_piece#85
(byte*) current_piece#86
(byte*) current_piece#87
(byte*) current_piece#88
(byte*) current_piece#89
(byte*) current_piece#9
(byte*) current_piece#90
(byte*) current_piece#91
(byte) current_piece_char
(byte) current_piece_char#0
(byte) current_piece_char#1
(byte) current_piece_char#10
(byte) current_piece_char#11
(byte) current_piece_char#12
(byte) current_piece_char#13
(byte) current_piece_char#14
(byte) current_piece_char#15
(byte) current_piece_char#16
(byte) current_piece_char#17
(byte) current_piece_char#18
(byte) current_piece_char#19
(byte) current_piece_char#2
(byte) current_piece_char#20
(byte) current_piece_char#21
(byte) current_piece_char#22
(byte) current_piece_char#23
(byte) current_piece_char#24
(byte) current_piece_char#25
(byte) current_piece_char#26
(byte) current_piece_char#27
(byte) current_piece_char#28
(byte) current_piece_char#29
(byte) current_piece_char#3
(byte) current_piece_char#30
(byte) current_piece_char#31
(byte) current_piece_char#32
(byte) current_piece_char#33
(byte) current_piece_char#34
(byte) current_piece_char#35
(byte) current_piece_char#36
(byte) current_piece_char#37
(byte) current_piece_char#38
(byte) current_piece_char#39
(byte) current_piece_char#4
(byte) current_piece_char#40
(byte) current_piece_char#41
(byte) current_piece_char#42
(byte) current_piece_char#43
(byte) current_piece_char#44
(byte) current_piece_char#45
(byte) current_piece_char#46
(byte) current_piece_char#47
(byte) current_piece_char#48
(byte) current_piece_char#49
(byte) current_piece_char#5
(byte) current_piece_char#50
(byte) current_piece_char#51
(byte) current_piece_char#52
(byte) current_piece_char#53
(byte) current_piece_char#54
(byte) current_piece_char#55
(byte) current_piece_char#56
(byte) current_piece_char#57
(byte) current_piece_char#58
(byte) current_piece_char#59
(byte) current_piece_char#6
(byte) current_piece_char#60
(byte) current_piece_char#61
(byte) current_piece_char#62
(byte) current_piece_char#63
(byte) current_piece_char#64
(byte) current_piece_char#65
(byte) current_piece_char#66
(byte) current_piece_char#67
(byte) current_piece_char#68
(byte) current_piece_char#69
(byte) current_piece_char#7
(byte) current_piece_char#70
(byte) current_piece_char#71
(byte) current_piece_char#72
(byte) current_piece_char#73
(byte) current_piece_char#74
(byte) current_piece_char#75
(byte) current_piece_char#76
(byte) current_piece_char#77
(byte) current_piece_char#78
(byte) current_piece_char#79
(byte) current_piece_char#8
(byte) current_piece_char#80
(byte) current_piece_char#81
(byte) current_piece_char#82
(byte) current_piece_char#83
(byte) current_piece_char#84
(byte) current_piece_char#85
(byte) current_piece_char#86
(byte) current_piece_char#87
(byte) current_piece_char#88
(byte) current_piece_char#89
(byte) current_piece_char#9
(byte) current_piece_char#90
(byte) current_piece_char#91
(byte) current_piece_char#92
(byte) current_piece_char#93
(byte) current_piece_char#94
(byte) current_piece_char#95
(byte) current_piece_char#96
(byte) current_piece_char#97
(byte) current_piece_char#98
(byte) current_piece_char#99
(byte*) current_piece_gfx
(byte*) current_piece_gfx#0
(byte*) current_piece_gfx#1
(byte*) current_piece_gfx#10
(byte*) current_piece_gfx#100
(byte*) current_piece_gfx#101
(byte*) current_piece_gfx#102
(byte*) current_piece_gfx#103
(byte*) current_piece_gfx#104
(byte*) current_piece_gfx#105
(byte*) current_piece_gfx#106
(byte*) current_piece_gfx#107
(byte*) current_piece_gfx#108
(byte*) current_piece_gfx#109
(byte*) current_piece_gfx#11
(byte*) current_piece_gfx#110
(byte*) current_piece_gfx#111
(byte*) current_piece_gfx#12
(byte*) current_piece_gfx#13
(byte*) current_piece_gfx#14
(byte*) current_piece_gfx#15
(byte*) current_piece_gfx#16
(byte*) current_piece_gfx#17
(byte*) current_piece_gfx#18
(byte*) current_piece_gfx#19
(byte*) current_piece_gfx#2
(byte*) current_piece_gfx#20
(byte*) current_piece_gfx#21
(byte*) current_piece_gfx#22
(byte*) current_piece_gfx#23
(byte*) current_piece_gfx#24
(byte*) current_piece_gfx#25
(byte*) current_piece_gfx#26
(byte*) current_piece_gfx#27
(byte*) current_piece_gfx#28
(byte*) current_piece_gfx#29
(byte*) current_piece_gfx#3
(byte*) current_piece_gfx#30
(byte*) current_piece_gfx#31
(byte*) current_piece_gfx#32
(byte*) current_piece_gfx#33
(byte*) current_piece_gfx#34
(byte*) current_piece_gfx#35
(byte*) current_piece_gfx#36
(byte*) current_piece_gfx#37
(byte*) current_piece_gfx#38
(byte*) current_piece_gfx#39
(byte*) current_piece_gfx#4
(byte*) current_piece_gfx#40
(byte*) current_piece_gfx#41
(byte*) current_piece_gfx#42
(byte*) current_piece_gfx#43
(byte*) current_piece_gfx#44
(byte*) current_piece_gfx#45
(byte*) current_piece_gfx#46
(byte*) current_piece_gfx#47
(byte*) current_piece_gfx#48
(byte*) current_piece_gfx#49
(byte*) current_piece_gfx#5
(byte*) current_piece_gfx#50
(byte*) current_piece_gfx#51
(byte*) current_piece_gfx#52
(byte*) current_piece_gfx#53
(byte*) current_piece_gfx#54
(byte*) current_piece_gfx#55
(byte*) current_piece_gfx#56
(byte*) current_piece_gfx#57
(byte*) current_piece_gfx#58
(byte*) current_piece_gfx#59
(byte*) current_piece_gfx#6
(byte*) current_piece_gfx#60
(byte*) current_piece_gfx#61
(byte*) current_piece_gfx#62
(byte*) current_piece_gfx#63
(byte*) current_piece_gfx#64
(byte*) current_piece_gfx#65
(byte*) current_piece_gfx#66
(byte*) current_piece_gfx#67
(byte*) current_piece_gfx#68
(byte*) current_piece_gfx#69
(byte*) current_piece_gfx#7
(byte*) current_piece_gfx#70
(byte*) current_piece_gfx#71
(byte*) current_piece_gfx#72
(byte*) current_piece_gfx#73
(byte*) current_piece_gfx#74
(byte*) current_piece_gfx#75
(byte*) current_piece_gfx#76
(byte*) current_piece_gfx#77
(byte*) current_piece_gfx#78
(byte*) current_piece_gfx#79
(byte*) current_piece_gfx#8
(byte*) current_piece_gfx#80
(byte*) current_piece_gfx#81
(byte*) current_piece_gfx#82
(byte*) current_piece_gfx#83
(byte*) current_piece_gfx#84
(byte*) current_piece_gfx#85
(byte*) current_piece_gfx#86
(byte*) current_piece_gfx#87
(byte*) current_piece_gfx#88
(byte*) current_piece_gfx#89
(byte*) current_piece_gfx#9
(byte*) current_piece_gfx#90
(byte*) current_piece_gfx#91
(byte*) current_piece_gfx#92
(byte*) current_piece_gfx#93
(byte*) current_piece_gfx#94
(byte*) current_piece_gfx#95
(byte*) current_piece_gfx#96
(byte*) current_piece_gfx#97
(byte*) current_piece_gfx#98
(byte*) current_piece_gfx#99
(byte) current_xpos
(byte) current_xpos#0
(byte) current_xpos#1
(byte) current_xpos#10
(byte) current_xpos#100
(byte) current_xpos#101
(byte) current_xpos#102
(byte) current_xpos#103
(byte) current_xpos#104
(byte) current_xpos#105
(byte) current_xpos#106
(byte) current_xpos#107
(byte) current_xpos#108
(byte) current_xpos#109
(byte) current_xpos#11
(byte) current_xpos#110
(byte) current_xpos#111
(byte) current_xpos#112
(byte) current_xpos#113
(byte) current_xpos#114
(byte) current_xpos#115
(byte) current_xpos#116
(byte) current_xpos#117
(byte) current_xpos#118
(byte) current_xpos#12
(byte) current_xpos#13
(byte) current_xpos#14
(byte) current_xpos#15
(byte) current_xpos#16
(byte) current_xpos#17
(byte) current_xpos#18
(byte) current_xpos#19
(byte) current_xpos#2
(byte) current_xpos#20
(byte) current_xpos#21
(byte) current_xpos#22
(byte) current_xpos#23
(byte) current_xpos#24
(byte) current_xpos#25
(byte) current_xpos#26
(byte) current_xpos#27
(byte) current_xpos#28
(byte) current_xpos#29
(byte) current_xpos#3
(byte) current_xpos#30
(byte) current_xpos#31
(byte) current_xpos#32
(byte) current_xpos#33
(byte) current_xpos#34
(byte) current_xpos#35
(byte) current_xpos#36
(byte) current_xpos#37
(byte) current_xpos#38
(byte) current_xpos#39
(byte) current_xpos#4
(byte) current_xpos#40
(byte) current_xpos#41
(byte) current_xpos#42
(byte) current_xpos#43
(byte) current_xpos#44
(byte) current_xpos#45
(byte) current_xpos#46
(byte) current_xpos#47
(byte) current_xpos#48
(byte) current_xpos#49
(byte) current_xpos#5
(byte) current_xpos#50
(byte) current_xpos#51
(byte) current_xpos#52
(byte) current_xpos#53
(byte) current_xpos#54
(byte) current_xpos#55
(byte) current_xpos#56
(byte) current_xpos#57
(byte) current_xpos#58
(byte) current_xpos#59
(byte) current_xpos#6
(byte) current_xpos#60
(byte) current_xpos#61
(byte) current_xpos#62
(byte) current_xpos#63
(byte) current_xpos#64
(byte) current_xpos#65
(byte) current_xpos#66
(byte) current_xpos#67
(byte) current_xpos#68
(byte) current_xpos#69
(byte) current_xpos#7
(byte) current_xpos#70
(byte) current_xpos#71
(byte) current_xpos#72
(byte) current_xpos#73
(byte) current_xpos#74
(byte) current_xpos#75
(byte) current_xpos#76
(byte) current_xpos#77
(byte) current_xpos#78
(byte) current_xpos#79
(byte) current_xpos#8
(byte) current_xpos#80
(byte) current_xpos#81
(byte) current_xpos#82
(byte) current_xpos#83
(byte) current_xpos#84
(byte) current_xpos#85
(byte) current_xpos#86
(byte) current_xpos#87
(byte) current_xpos#88
(byte) current_xpos#89
(byte) current_xpos#9
(byte) current_xpos#90
(byte) current_xpos#91
(byte) current_xpos#92
(byte) current_xpos#93
(byte) current_xpos#94
(byte) current_xpos#95
(byte) current_xpos#96
(byte) current_xpos#97
(byte) current_xpos#98
(byte) current_xpos#99
(byte) current_ypos
(byte) current_ypos#0
(byte) current_ypos#1
(byte) current_ypos#10
(byte) current_ypos#11
(byte) current_ypos#12
(byte) current_ypos#13
(byte) current_ypos#14
(byte) current_ypos#15
(byte) current_ypos#16
(byte) current_ypos#17
(byte) current_ypos#18
(byte) current_ypos#19
(byte) current_ypos#2
(byte) current_ypos#20
(byte) current_ypos#21
(byte) current_ypos#22
(byte) current_ypos#23
(byte) current_ypos#24
(byte) current_ypos#25
(byte) current_ypos#26
(byte) current_ypos#27
(byte) current_ypos#28
(byte) current_ypos#29
(byte) current_ypos#3
(byte) current_ypos#30
(byte) current_ypos#31
(byte) current_ypos#32
(byte) current_ypos#33
(byte) current_ypos#34
(byte) current_ypos#35
(byte) current_ypos#36
(byte) current_ypos#37
(byte) current_ypos#38
(byte) current_ypos#39
(byte) current_ypos#4
(byte) current_ypos#40
(byte) current_ypos#41
(byte) current_ypos#42
(byte) current_ypos#43
(byte) current_ypos#44
(byte) current_ypos#45
(byte) current_ypos#46
(byte) current_ypos#47
(byte) current_ypos#48
(byte) current_ypos#49
(byte) current_ypos#5
(byte) current_ypos#50
(byte) current_ypos#51
(byte) current_ypos#52
(byte) current_ypos#53
(byte) current_ypos#54
(byte) current_ypos#55
(byte) current_ypos#56
(byte) current_ypos#57
(byte) current_ypos#58
(byte) current_ypos#59
(byte) current_ypos#6
(byte) current_ypos#60
(byte) current_ypos#61
(byte) current_ypos#62
(byte) current_ypos#63
(byte) current_ypos#64
(byte) current_ypos#65
(byte) current_ypos#66
(byte) current_ypos#67
(byte) current_ypos#68
(byte) current_ypos#69
(byte) current_ypos#7
(byte) current_ypos#70
(byte) current_ypos#71
(byte) current_ypos#72
(byte) current_ypos#73
(byte) current_ypos#74
(byte) current_ypos#75
(byte) current_ypos#76
(byte) current_ypos#77
(byte) current_ypos#78
(byte) current_ypos#79
(byte) current_ypos#8
(byte) current_ypos#80
(byte) current_ypos#81
(byte) current_ypos#82
(byte) current_ypos#83
(byte) current_ypos#84
(byte) current_ypos#85
(byte) current_ypos#86
(byte) current_ypos#87
(byte) current_ypos#88
(byte) current_ypos#89
(byte) current_ypos#9
(byte) current_ypos#90
(byte) current_ypos#91
(byte) current_ypos#92
(byte) current_ypos#93
(byte) current_ypos#94
(byte) current_ypos#95
(byte) current_ypos#96
(byte) current_ypos#97
(byte) game_over
(byte) game_over#0
(byte) game_over#1
(byte) game_over#10
(byte) game_over#11
(byte) game_over#12
(byte) game_over#13
(byte) game_over#14
(byte) game_over#15
(byte) game_over#16
(byte) game_over#17
(byte) game_over#18
(byte) game_over#19
(byte) game_over#2
(byte) game_over#20
(byte) game_over#21
(byte) game_over#22
(byte) game_over#23
(byte) game_over#24
(byte) game_over#25
(byte) game_over#26
(byte) game_over#27
(byte) game_over#28
(byte) game_over#29
(byte) game_over#3
(byte) game_over#30
(byte) game_over#31
(byte) game_over#32
(byte) game_over#33
(byte) game_over#34
(byte) game_over#35
(byte) game_over#36
(byte) game_over#37
(byte) game_over#38
(byte) game_over#39
(byte) game_over#4
(byte) game_over#40
(byte) game_over#41
(byte) game_over#42
(byte) game_over#43
(byte) game_over#44
(byte) game_over#45
(byte) game_over#46
(byte) game_over#47
(byte) game_over#48
(byte) game_over#49
(byte) game_over#5
(byte) game_over#50
(byte) game_over#51
(byte) game_over#52
(byte) game_over#53
(byte) game_over#54
(byte) game_over#55
(byte) game_over#56
(byte) game_over#57
(byte) game_over#58
(byte) game_over#59
(byte) game_over#6
(byte) game_over#60
(byte) game_over#61
(byte) game_over#62
(byte) game_over#63
(byte) game_over#64
(byte) game_over#65
(byte) game_over#66
(byte) game_over#67
(byte) game_over#68
(byte) game_over#69
(byte) game_over#7
(byte) game_over#70
(byte) game_over#71
(byte) game_over#72
(byte) game_over#73
(byte) game_over#74
(byte) game_over#75
(byte) game_over#76
(byte) game_over#77
(byte) game_over#78
(byte) game_over#79
(byte) game_over#8
(byte) game_over#80
(byte) game_over#81
(byte) game_over#82
(byte) game_over#83
(byte) game_over#84
(byte) game_over#85
(byte) game_over#9
(byte) irq_cnt
(byte) irq_cnt#0
(byte) irq_cnt#1
(byte) irq_cnt#10
(byte) irq_cnt#11
(byte) irq_cnt#12
(byte) irq_cnt#13
(byte) irq_cnt#14
(byte) irq_cnt#15
(byte) irq_cnt#16
(byte) irq_cnt#17
(byte) irq_cnt#18
(byte) irq_cnt#19
(byte) irq_cnt#2
(byte) irq_cnt#20
(byte) irq_cnt#3
(byte) irq_cnt#4
(byte) irq_cnt#5
(byte) irq_cnt#6
(byte) irq_cnt#7
(byte) irq_cnt#8
(byte) irq_cnt#9
(byte) irq_raster_next
(byte) irq_raster_next#0
(byte) irq_raster_next#1
(byte) irq_raster_next#10
(byte) irq_raster_next#11
(byte) irq_raster_next#12
(byte) irq_raster_next#13
(byte) irq_raster_next#14
(byte) irq_raster_next#15
(byte) irq_raster_next#16
(byte) irq_raster_next#17
(byte) irq_raster_next#18
(byte) irq_raster_next#19
(byte) irq_raster_next#2
(byte) irq_raster_next#20
(byte) irq_raster_next#21
(byte) irq_raster_next#22
(byte) irq_raster_next#23
(byte) irq_raster_next#24
(byte) irq_raster_next#3
(byte) irq_raster_next#4
(byte) irq_raster_next#5
(byte) irq_raster_next#6
(byte) irq_raster_next#7
(byte) irq_raster_next#8
(byte) irq_raster_next#9
(byte) irq_sprite_ptr
(byte) irq_sprite_ptr#0
(byte) irq_sprite_ptr#1
(byte) irq_sprite_ptr#10
(byte) irq_sprite_ptr#11
(byte) irq_sprite_ptr#12
(byte) irq_sprite_ptr#13
(byte) irq_sprite_ptr#14
(byte) irq_sprite_ptr#15
(byte) irq_sprite_ptr#16
(byte) irq_sprite_ptr#17
(byte) irq_sprite_ptr#18
(byte) irq_sprite_ptr#2
(byte) irq_sprite_ptr#3
(byte) irq_sprite_ptr#4
(byte) irq_sprite_ptr#5
(byte) irq_sprite_ptr#6
(byte) irq_sprite_ptr#7
(byte) irq_sprite_ptr#8
(byte) irq_sprite_ptr#9
(byte) irq_sprite_ypos
(byte) irq_sprite_ypos#0
(byte) irq_sprite_ypos#1
(byte) irq_sprite_ypos#10
(byte) irq_sprite_ypos#11
(byte) irq_sprite_ypos#12
(byte) irq_sprite_ypos#13
(byte) irq_sprite_ypos#14
(byte) irq_sprite_ypos#15
(byte) irq_sprite_ypos#16
(byte) irq_sprite_ypos#17
(byte) irq_sprite_ypos#18
(byte) irq_sprite_ypos#19
(byte) irq_sprite_ypos#2
(byte) irq_sprite_ypos#20
(byte) irq_sprite_ypos#21
(byte) irq_sprite_ypos#22
(byte) irq_sprite_ypos#23
(byte) irq_sprite_ypos#24
(byte) irq_sprite_ypos#3
(byte) irq_sprite_ypos#4
(byte) irq_sprite_ypos#5
(byte) irq_sprite_ypos#6
(byte) irq_sprite_ypos#7
(byte) irq_sprite_ypos#8
(byte) irq_sprite_ypos#9
(byte()) keyboard_event_get()
(bool~) keyboard_event_get::$0
(label) keyboard_event_get::@1
(label) keyboard_event_get::@3
(label) keyboard_event_get::@return
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#0
(byte) keyboard_event_get::return#1
(byte) keyboard_event_get::return#2
(byte) keyboard_event_get::return#3
(byte) keyboard_event_get::return#4
(byte) keyboard_event_get::return#5
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0
(number~) keyboard_event_pressed::$1
(byte~) keyboard_event_pressed::$2
(label) keyboard_event_pressed::@return
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#0
(byte) keyboard_event_pressed::keycode#1
(byte) keyboard_event_pressed::keycode#2
(byte) keyboard_event_pressed::keycode#3
(byte) keyboard_event_pressed::keycode#4
(byte) keyboard_event_pressed::keycode#5
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0
(byte) keyboard_event_pressed::return#1
(byte) keyboard_event_pressed::return#10
(byte) keyboard_event_pressed::return#11
(byte) keyboard_event_pressed::return#12
(byte) keyboard_event_pressed::return#2
(byte) keyboard_event_pressed::return#3
(byte) keyboard_event_pressed::return#4
(byte) keyboard_event_pressed::return#5
(byte) keyboard_event_pressed::return#6
(byte) keyboard_event_pressed::return#7
(byte) keyboard_event_pressed::return#8
(byte) keyboard_event_pressed::return#9
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0
(void()) keyboard_event_scan()
(byte~) keyboard_event_scan::$0
(bool~) keyboard_event_scan::$1
(bool~) keyboard_event_scan::$10
(bool~) keyboard_event_scan::$11
(byte~) keyboard_event_scan::$12
(bool~) keyboard_event_scan::$13
(number~) keyboard_event_scan::$14
(byte~) keyboard_event_scan::$15
(byte~) keyboard_event_scan::$16
(bool~) keyboard_event_scan::$17
(bool~) keyboard_event_scan::$18
(bool~) keyboard_event_scan::$19
(bool~) keyboard_event_scan::$2
(bool~) keyboard_event_scan::$20
(byte~) keyboard_event_scan::$21
(bool~) keyboard_event_scan::$22
(number~) keyboard_event_scan::$23
(bool~) keyboard_event_scan::$24
(bool~) keyboard_event_scan::$25
(byte~) keyboard_event_scan::$26
(byte~) keyboard_event_scan::$27
(byte~) keyboard_event_scan::$28
(byte~) keyboard_event_scan::$29
(byte~) keyboard_event_scan::$3
(bool~) keyboard_event_scan::$4
(bool~) keyboard_event_scan::$5
(byte~) keyboard_event_scan::$6
(bool~) keyboard_event_scan::$7
(bool~) keyboard_event_scan::$8
(byte~) keyboard_event_scan::$9
(label) keyboard_event_scan::@1
(label) keyboard_event_scan::@10
(label) keyboard_event_scan::@11
(label) keyboard_event_scan::@12
(label) keyboard_event_scan::@14
(label) keyboard_event_scan::@16
(label) keyboard_event_scan::@17
(label) keyboard_event_scan::@18
(label) keyboard_event_scan::@2
(label) keyboard_event_scan::@20
(label) keyboard_event_scan::@21
(label) keyboard_event_scan::@23
(label) keyboard_event_scan::@24
(label) keyboard_event_scan::@25
(label) keyboard_event_scan::@26
(label) keyboard_event_scan::@27
(label) keyboard_event_scan::@28
(label) keyboard_event_scan::@29
(label) keyboard_event_scan::@3
(label) keyboard_event_scan::@5
(label) keyboard_event_scan::@6
(label) keyboard_event_scan::@7
(label) keyboard_event_scan::@8
(label) keyboard_event_scan::@9
(label) keyboard_event_scan::@return
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#0
(byte) keyboard_event_scan::col#1
(byte) keyboard_event_scan::col#2
(byte) keyboard_event_scan::col#3
(byte) keyboard_event_scan::col#4
(byte) keyboard_event_scan::col#5
(byte) keyboard_event_scan::col#6
(byte) keyboard_event_scan::col#7
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#0
(byte) keyboard_event_scan::keycode#1
(byte) keyboard_event_scan::keycode#10
(byte) keyboard_event_scan::keycode#11
(byte) keyboard_event_scan::keycode#12
(byte) keyboard_event_scan::keycode#13
(byte) keyboard_event_scan::keycode#14
(byte) keyboard_event_scan::keycode#2
(byte) keyboard_event_scan::keycode#3
(byte) keyboard_event_scan::keycode#4
(byte) keyboard_event_scan::keycode#5
(byte) keyboard_event_scan::keycode#6
(byte) keyboard_event_scan::keycode#7
(byte) keyboard_event_scan::keycode#8
(byte) keyboard_event_scan::keycode#9
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#0
(byte) keyboard_event_scan::row#1
(byte) keyboard_event_scan::row#10
(byte) keyboard_event_scan::row#11
(byte) keyboard_event_scan::row#12
(byte) keyboard_event_scan::row#13
(byte) keyboard_event_scan::row#2
(byte) keyboard_event_scan::row#3
(byte) keyboard_event_scan::row#4
(byte) keyboard_event_scan::row#5
(byte) keyboard_event_scan::row#6
(byte) keyboard_event_scan::row#7
(byte) keyboard_event_scan::row#8
(byte) keyboard_event_scan::row#9
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0
(byte) keyboard_event_scan::row_scan#1
(byte) keyboard_event_scan::row_scan#2
(byte) keyboard_event_scan::row_scan#3
(byte) keyboard_event_scan::row_scan#4
(byte) keyboard_event_scan::row_scan#5
(byte) keyboard_event_scan::row_scan#6
(byte) keyboard_event_scan::row_scan#7
(byte) keyboard_event_scan::row_scan#8
(byte[8]) keyboard_events
(byte[8]) keyboard_events#0
(byte) keyboard_events_size
(byte) keyboard_events_size#0
(byte) keyboard_events_size#1
(byte) keyboard_events_size#10
(byte) keyboard_events_size#11
(byte) keyboard_events_size#12
(byte) keyboard_events_size#13
(byte) keyboard_events_size#14
(byte) keyboard_events_size#15
(byte) keyboard_events_size#16
(byte) keyboard_events_size#17
(byte) keyboard_events_size#18
(byte) keyboard_events_size#19
(byte) keyboard_events_size#2
(byte) keyboard_events_size#20
(byte) keyboard_events_size#21
(byte) keyboard_events_size#22
(byte) keyboard_events_size#23
(byte) keyboard_events_size#24
(byte) keyboard_events_size#25
(byte) keyboard_events_size#26
(byte) keyboard_events_size#27
(byte) keyboard_events_size#28
(byte) keyboard_events_size#29
(byte) keyboard_events_size#3
(byte) keyboard_events_size#30
(byte) keyboard_events_size#31
(byte) keyboard_events_size#32
(byte) keyboard_events_size#33
(byte) keyboard_events_size#34
(byte) keyboard_events_size#35
(byte) keyboard_events_size#36
(byte) keyboard_events_size#37
(byte) keyboard_events_size#38
(byte) keyboard_events_size#39
(byte) keyboard_events_size#4
(byte) keyboard_events_size#40
(byte) keyboard_events_size#41
(byte) keyboard_events_size#42
(byte) keyboard_events_size#43
(byte) keyboard_events_size#44
(byte) keyboard_events_size#45
(byte) keyboard_events_size#46
(byte) keyboard_events_size#47
(byte) keyboard_events_size#48
(byte) keyboard_events_size#49
(byte) keyboard_events_size#5
(byte) keyboard_events_size#50
(byte) keyboard_events_size#51
(byte) keyboard_events_size#52
(byte) keyboard_events_size#53
(byte) keyboard_events_size#54
(byte) keyboard_events_size#55
(byte) keyboard_events_size#56
(byte) keyboard_events_size#57
(byte) keyboard_events_size#58
(byte) keyboard_events_size#59
(byte) keyboard_events_size#6
(byte) keyboard_events_size#60
(byte) keyboard_events_size#61
(byte) keyboard_events_size#62
(byte) keyboard_events_size#63
(byte) keyboard_events_size#64
(byte) keyboard_events_size#65
(byte) keyboard_events_size#66
(byte) keyboard_events_size#67
(byte) keyboard_events_size#68
(byte) keyboard_events_size#69
(byte) keyboard_events_size#7
(byte) keyboard_events_size#70
(byte) keyboard_events_size#71
(byte) keyboard_events_size#72
(byte) keyboard_events_size#73
(byte) keyboard_events_size#74
(byte) keyboard_events_size#75
(byte) keyboard_events_size#76
(byte) keyboard_events_size#77
(byte) keyboard_events_size#78
(byte) keyboard_events_size#79
(byte) keyboard_events_size#8
(byte) keyboard_events_size#9
(byte[8]) keyboard_matrix_col_bitmask
(byte[8]) keyboard_matrix_col_bitmask#0
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte~) keyboard_matrix_read::$0
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0
(byte) keyboard_matrix_read::return#1
(byte) keyboard_matrix_read::return#2
(byte) keyboard_matrix_read::return#3
(byte) keyboard_matrix_read::return#4
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::row_pressed_bits#0
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0
(byte) keyboard_matrix_read::rowid#1
(byte[8]) keyboard_matrix_row_bitmask
(byte[8]) keyboard_matrix_row_bitmask#0
(byte) keyboard_modifiers
(byte) keyboard_modifiers#0
(byte) keyboard_modifiers#1
(byte) keyboard_modifiers#10
(byte) keyboard_modifiers#11
(byte) keyboard_modifiers#12
(byte) keyboard_modifiers#13
(byte) keyboard_modifiers#14
(byte) keyboard_modifiers#15
(byte) keyboard_modifiers#16
(byte) keyboard_modifiers#17
(byte) keyboard_modifiers#18
(byte) keyboard_modifiers#19
(byte) keyboard_modifiers#2
(byte) keyboard_modifiers#20
(byte) keyboard_modifiers#21
(byte) keyboard_modifiers#22
(byte) keyboard_modifiers#23
(byte) keyboard_modifiers#24
(byte) keyboard_modifiers#25
(byte) keyboard_modifiers#26
(byte) keyboard_modifiers#27
(byte) keyboard_modifiers#28
(byte) keyboard_modifiers#29
(byte) keyboard_modifiers#3
(byte) keyboard_modifiers#30
(byte) keyboard_modifiers#31
(byte) keyboard_modifiers#32
(byte) keyboard_modifiers#33
(byte) keyboard_modifiers#34
(byte) keyboard_modifiers#35
(byte) keyboard_modifiers#36
(byte) keyboard_modifiers#37
(byte) keyboard_modifiers#38
(byte) keyboard_modifiers#39
(byte) keyboard_modifiers#4
(byte) keyboard_modifiers#40
(byte) keyboard_modifiers#41
(byte) keyboard_modifiers#42
(byte) keyboard_modifiers#43
(byte) keyboard_modifiers#44
(byte) keyboard_modifiers#45
(byte) keyboard_modifiers#46
(byte) keyboard_modifiers#47
(byte) keyboard_modifiers#48
(byte) keyboard_modifiers#49
(byte) keyboard_modifiers#5
(byte) keyboard_modifiers#50
(byte) keyboard_modifiers#51
(byte) keyboard_modifiers#52
(byte) keyboard_modifiers#53
(byte) keyboard_modifiers#54
(byte) keyboard_modifiers#55
(byte) keyboard_modifiers#56
(byte) keyboard_modifiers#57
(byte) keyboard_modifiers#58
(byte) keyboard_modifiers#59
(byte) keyboard_modifiers#6
(byte) keyboard_modifiers#60
(byte) keyboard_modifiers#61
(byte) keyboard_modifiers#7
(byte) keyboard_modifiers#8
(byte) keyboard_modifiers#9
(byte[8]) keyboard_scan_values
(byte[8]) keyboard_scan_values#0
(byte) level
(byte) level#0
(byte) level#1
(byte) level#10
(byte) level#100
(byte) level#101
(byte) level#102
(byte) level#103
(byte) level#11
(byte) level#12
(byte) level#13
(byte) level#14
(byte) level#15
(byte) level#16
(byte) level#17
(byte) level#18
(byte) level#19
(byte) level#2
(byte) level#20
(byte) level#21
(byte) level#22
(byte) level#23
(byte) level#24
(byte) level#25
(byte) level#26
(byte) level#27
(byte) level#28
(byte) level#29
(byte) level#3
(byte) level#30
(byte) level#31
(byte) level#32
(byte) level#33
(byte) level#34
(byte) level#35
(byte) level#36
(byte) level#37
(byte) level#38
(byte) level#39
(byte) level#4
(byte) level#40
(byte) level#41
(byte) level#42
(byte) level#43
(byte) level#44
(byte) level#45
(byte) level#46
(byte) level#47
(byte) level#48
(byte) level#49
(byte) level#5
(byte) level#50
(byte) level#51
(byte) level#52
(byte) level#53
(byte) level#54
(byte) level#55
(byte) level#56
(byte) level#57
(byte) level#58
(byte) level#59
(byte) level#6
(byte) level#60
(byte) level#61
(byte) level#62
(byte) level#63
(byte) level#64
(byte) level#65
(byte) level#66
(byte) level#67
(byte) level#68
(byte) level#69
(byte) level#7
(byte) level#70
(byte) level#71
(byte) level#72
(byte) level#73
(byte) level#74
(byte) level#75
(byte) level#76
(byte) level#77
(byte) level#78
(byte) level#79
(byte) level#8
(byte) level#80
(byte) level#81
(byte) level#82
(byte) level#83
(byte) level#84
(byte) level#85
(byte) level#86
(byte) level#87
(byte) level#88
(byte) level#89
(byte) level#9
(byte) level#90
(byte) level#91
(byte) level#92
(byte) level#93
(byte) level#94
(byte) level#95
(byte) level#96
(byte) level#97
(byte) level#98
(byte) level#99
(byte) level_bcd
(byte) level_bcd#0
(byte) level_bcd#1
(byte) level_bcd#10
(byte) level_bcd#100
(byte) level_bcd#11
(byte) level_bcd#12
(byte) level_bcd#13
(byte) level_bcd#14
(byte) level_bcd#15
(byte) level_bcd#16
(byte) level_bcd#17
(byte) level_bcd#18
(byte) level_bcd#19
(byte) level_bcd#2
(byte) level_bcd#20
(byte) level_bcd#21
(byte) level_bcd#22
(byte) level_bcd#23
(byte) level_bcd#24
(byte) level_bcd#25
(byte) level_bcd#26
(byte) level_bcd#27
(byte) level_bcd#28
(byte) level_bcd#29
(byte) level_bcd#3
(byte) level_bcd#30
(byte) level_bcd#31
(byte) level_bcd#32
(byte) level_bcd#33
(byte) level_bcd#34
(byte) level_bcd#35
(byte) level_bcd#36
(byte) level_bcd#37
(byte) level_bcd#38
(byte) level_bcd#39
(byte) level_bcd#4
(byte) level_bcd#40
(byte) level_bcd#41
(byte) level_bcd#42
(byte) level_bcd#43
(byte) level_bcd#44
(byte) level_bcd#45
(byte) level_bcd#46
(byte) level_bcd#47
(byte) level_bcd#48
(byte) level_bcd#49
(byte) level_bcd#5
(byte) level_bcd#50
(byte) level_bcd#51
(byte) level_bcd#52
(byte) level_bcd#53
(byte) level_bcd#54
(byte) level_bcd#55
(byte) level_bcd#56
(byte) level_bcd#57
(byte) level_bcd#58
(byte) level_bcd#59
(byte) level_bcd#6
(byte) level_bcd#60
(byte) level_bcd#61
(byte) level_bcd#62
(byte) level_bcd#63
(byte) level_bcd#64
(byte) level_bcd#65
(byte) level_bcd#66
(byte) level_bcd#67
(byte) level_bcd#68
(byte) level_bcd#69
(byte) level_bcd#7
(byte) level_bcd#70
(byte) level_bcd#71
(byte) level_bcd#72
(byte) level_bcd#73
(byte) level_bcd#74
(byte) level_bcd#75
(byte) level_bcd#76
(byte) level_bcd#77
(byte) level_bcd#78
(byte) level_bcd#79
(byte) level_bcd#8
(byte) level_bcd#80
(byte) level_bcd#81
(byte) level_bcd#82
(byte) level_bcd#83
(byte) level_bcd#84
(byte) level_bcd#85
(byte) level_bcd#86
(byte) level_bcd#87
(byte) level_bcd#88
(byte) level_bcd#89
(byte) level_bcd#9
(byte) level_bcd#90
(byte) level_bcd#91
(byte) level_bcd#92
(byte) level_bcd#93
(byte) level_bcd#94
(byte) level_bcd#95
(byte) level_bcd#96
(byte) level_bcd#97
(byte) level_bcd#98
(byte) level_bcd#99
(word) lines_bcd
(word) lines_bcd#0
(word) lines_bcd#1
(word) lines_bcd#10
(word) lines_bcd#11
(word) lines_bcd#12
(word) lines_bcd#13
(word) lines_bcd#14
(word) lines_bcd#15
(word) lines_bcd#16
(word) lines_bcd#17
(word) lines_bcd#18
(word) lines_bcd#19
(word) lines_bcd#2
(word) lines_bcd#20
(word) lines_bcd#21
(word) lines_bcd#22
(word) lines_bcd#23
(word) lines_bcd#24
(word) lines_bcd#25
(word) lines_bcd#26
(word) lines_bcd#27
(word) lines_bcd#28
(word) lines_bcd#29
(word) lines_bcd#3
(word) lines_bcd#30
(word) lines_bcd#31
(word) lines_bcd#32
(word) lines_bcd#33
(word) lines_bcd#34
(word) lines_bcd#35
(word) lines_bcd#36
(word) lines_bcd#37
(word) lines_bcd#38
(word) lines_bcd#39
(word) lines_bcd#4
(word) lines_bcd#40
(word) lines_bcd#41
(word) lines_bcd#42
(word) lines_bcd#43
(word) lines_bcd#44
(word) lines_bcd#45
(word) lines_bcd#46
(word) lines_bcd#47
(word) lines_bcd#48
(word) lines_bcd#49
(word) lines_bcd#5
(word) lines_bcd#50
(word) lines_bcd#51
(word) lines_bcd#52
(word) lines_bcd#53
(word) lines_bcd#54
(word) lines_bcd#55
(word) lines_bcd#56
(word) lines_bcd#57
(word) lines_bcd#58
(word) lines_bcd#59
(word) lines_bcd#6
(word) lines_bcd#60
(word) lines_bcd#61
(word) lines_bcd#62
(word) lines_bcd#63
(word) lines_bcd#64
(word) lines_bcd#65
(word) lines_bcd#66
(word) lines_bcd#67
(word) lines_bcd#68
(word) lines_bcd#69
(word) lines_bcd#7
(word) lines_bcd#70
(word) lines_bcd#71
(word) lines_bcd#72
(word) lines_bcd#73
(word) lines_bcd#74
(word) lines_bcd#75
(word) lines_bcd#76
(word) lines_bcd#77
(word) lines_bcd#78
(word) lines_bcd#79
(word) lines_bcd#8
(word) lines_bcd#80
(word) lines_bcd#81
(word) lines_bcd#82
(word) lines_bcd#83
(word) lines_bcd#84
(word) lines_bcd#85
(word) lines_bcd#86
(word) lines_bcd#87
(word) lines_bcd#9
(void()) main()
(bool~) main::$10
(byte~) main::$13
(bool~) main::$14
(byte~) main::$16
(bool~) main::$17
(bool~) main::$18
(label) main::@1
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@19
(label) main::@23
(label) main::@25
(label) main::@26
(label) main::@27
(label) main::@28
(label) main::@29
(label) main::@30
(label) main::@31
(label) main::@32
(label) main::@33
(label) main::@34
(label) main::@35
(label) main::@36
(label) main::@37
(label) main::@38
(label) main::@39
(label) main::@4
(label) main::@40
(label) main::@41
(label) main::@42
(label) main::@43
(label) main::@6
(label) main::@return
(byte) main::key_event
(byte) main::key_event#0
(byte) main::key_event#1
(byte) main::render
(byte) main::render#0
(byte) main::render#1
(byte) main::render#2
(byte) main::render#3
(byte) main::render#4
(byte) next_piece_idx
(byte) next_piece_idx#0
(byte) next_piece_idx#1
(byte) next_piece_idx#10
(byte) next_piece_idx#11
(byte) next_piece_idx#12
(byte) next_piece_idx#13
(byte) next_piece_idx#14
(byte) next_piece_idx#15
(byte) next_piece_idx#16
(byte) next_piece_idx#17
(byte) next_piece_idx#18
(byte) next_piece_idx#19
(byte) next_piece_idx#2
(byte) next_piece_idx#20
(byte) next_piece_idx#21
(byte) next_piece_idx#22
(byte) next_piece_idx#23
(byte) next_piece_idx#24
(byte) next_piece_idx#25
(byte) next_piece_idx#26
(byte) next_piece_idx#27
(byte) next_piece_idx#28
(byte) next_piece_idx#29
(byte) next_piece_idx#3
(byte) next_piece_idx#30
(byte) next_piece_idx#31
(byte) next_piece_idx#32
(byte) next_piece_idx#33
(byte) next_piece_idx#34
(byte) next_piece_idx#35
(byte) next_piece_idx#36
(byte) next_piece_idx#37
(byte) next_piece_idx#38
(byte) next_piece_idx#39
(byte) next_piece_idx#4
(byte) next_piece_idx#40
(byte) next_piece_idx#41
(byte) next_piece_idx#42
(byte) next_piece_idx#43
(byte) next_piece_idx#44
(byte) next_piece_idx#45
(byte) next_piece_idx#46
(byte) next_piece_idx#47
(byte) next_piece_idx#48
(byte) next_piece_idx#49
(byte) next_piece_idx#5
(byte) next_piece_idx#50
(byte) next_piece_idx#51
(byte) next_piece_idx#52
(byte) next_piece_idx#53
(byte) next_piece_idx#54
(byte) next_piece_idx#55
(byte) next_piece_idx#56
(byte) next_piece_idx#57
(byte) next_piece_idx#58
(byte) next_piece_idx#59
(byte) next_piece_idx#6
(byte) next_piece_idx#60
(byte) next_piece_idx#61
(byte) next_piece_idx#62
(byte) next_piece_idx#63
(byte) next_piece_idx#64
(byte) next_piece_idx#65
(byte) next_piece_idx#66
(byte) next_piece_idx#67
(byte) next_piece_idx#68
(byte) next_piece_idx#69
(byte) next_piece_idx#7
(byte) next_piece_idx#70
(byte) next_piece_idx#71
(byte) next_piece_idx#72
(byte) next_piece_idx#73
(byte) next_piece_idx#74
(byte) next_piece_idx#75
(byte) next_piece_idx#76
(byte) next_piece_idx#8
(byte) next_piece_idx#9
(byte()) play_collision((byte) play_collision::xpos , (byte) play_collision::ypos , (byte) play_collision::orientation)
(byte*~) play_collision::$0
(bool~) play_collision::$1
(bool~) play_collision::$10
(bool~) play_collision::$11
(bool~) play_collision::$12
(bool~) play_collision::$13
(byte~) play_collision::$14
(bool~) play_collision::$2
(bool~) play_collision::$3
(bool~) play_collision::$4
(number~) play_collision::$5
(bool~) play_collision::$6
(bool~) play_collision::$7
(bool~) play_collision::$8
(bool~) play_collision::$9
(label) play_collision::@1
(label) play_collision::@10
(label) play_collision::@12
(label) play_collision::@14
(label) play_collision::@15
(label) play_collision::@17
(label) play_collision::@18
(label) play_collision::@2
(label) play_collision::@3
(label) play_collision::@4
(label) play_collision::@5
(label) play_collision::@6
(label) play_collision::@8
(label) play_collision::@return
(byte) play_collision::c
(byte) play_collision::c#0
(byte) play_collision::c#1
(byte) play_collision::c#2
(byte) play_collision::c#3
(byte) play_collision::c#4
(byte) play_collision::c#5
(byte) play_collision::c#6
(byte) play_collision::c#7
(byte) play_collision::i
(byte) play_collision::i#0
(byte) play_collision::i#1
(byte) play_collision::i#2
(byte) play_collision::i#3
(byte) play_collision::i#4
(byte) play_collision::i#5
(byte) play_collision::i#6
(byte) play_collision::i#7
(byte) play_collision::i#8
(byte) play_collision::i#9
(byte) play_collision::l
(byte) play_collision::l#0
(byte) play_collision::l#1
(byte) play_collision::l#2
(byte) play_collision::l#3
(byte) play_collision::l#4
(byte) play_collision::l#5
(byte) play_collision::l#6
(byte) play_collision::l#7
(byte) play_collision::l#8
(byte) play_collision::l#9
(byte) play_collision::orientation
(byte) play_collision::orientation#0
(byte) play_collision::orientation#1
(byte) play_collision::orientation#2
(byte) play_collision::orientation#3
(byte) play_collision::orientation#4
(byte) play_collision::orientation#5
(byte*) play_collision::piece_gfx
(byte*) play_collision::piece_gfx#0
(byte*) play_collision::piece_gfx#1
(byte*) play_collision::piece_gfx#2
(byte*) play_collision::piece_gfx#3
(byte*) play_collision::piece_gfx#4
(byte*) play_collision::piece_gfx#5
(byte*) play_collision::piece_gfx#6
(byte*) play_collision::piece_gfx#7
(byte*) play_collision::piece_gfx#8
(byte*) play_collision::playfield_line
(byte*) play_collision::playfield_line#0
(byte*) play_collision::playfield_line#1
(byte*) play_collision::playfield_line#2
(byte*) play_collision::playfield_line#3
(byte*) play_collision::playfield_line#4
(byte*) play_collision::playfield_line#5
(byte*) play_collision::playfield_line#6
(byte) play_collision::return
(byte) play_collision::return#0
(byte) play_collision::return#1
(byte) play_collision::return#10
(byte) play_collision::return#11
(byte) play_collision::return#12
(byte) play_collision::return#13
(byte) play_collision::return#14
(byte) play_collision::return#15
(byte) play_collision::return#16
(byte) play_collision::return#2
(byte) play_collision::return#3
(byte) play_collision::return#4
(byte) play_collision::return#5
(byte) play_collision::return#6
(byte) play_collision::return#7
(byte) play_collision::return#8
(byte) play_collision::return#9
(byte) play_collision::xp
(byte) play_collision::xp#0
(byte) play_collision::xp#1
(byte) play_collision::xp#2
(byte) play_collision::xp#3
(byte) play_collision::xp#4
(byte) play_collision::xp#5
(byte) play_collision::xp#6
(byte) play_collision::xp#7
(byte) play_collision::xpos
(byte) play_collision::xpos#0
(byte) play_collision::xpos#1
(byte) play_collision::xpos#10
(byte) play_collision::xpos#11
(byte) play_collision::xpos#12
(byte) play_collision::xpos#13
(byte) play_collision::xpos#2
(byte) play_collision::xpos#3
(byte) play_collision::xpos#4
(byte) play_collision::xpos#5
(byte) play_collision::xpos#6
(byte) play_collision::xpos#7
(byte) play_collision::xpos#8
(byte) play_collision::xpos#9
(byte) play_collision::yp
(byte) play_collision::yp#0
(byte) play_collision::yp#1
(byte) play_collision::yp#2
(byte) play_collision::yp#3
(byte) play_collision::yp#4
(byte) play_collision::yp#5
(byte) play_collision::yp#6
(byte) play_collision::yp#7
(byte) play_collision::yp#8
(byte) play_collision::yp#9
(byte) play_collision::ypos
(byte) play_collision::ypos#0
(byte) play_collision::ypos#1
(byte) play_collision::ypos#2
(byte) play_collision::ypos#3
(byte) play_collision::ypos#4
(byte) play_collision::ypos#5
(void()) play_increase_level()
(bool~) play_increase_level::$0
(number~) play_increase_level::$1
(bool~) play_increase_level::$2
(bool~) play_increase_level::$3
(bool~) play_increase_level::$4
(byte~) play_increase_level::$5
(label) play_increase_level::@1
(label) play_increase_level::@2
(label) play_increase_level::@3
(label) play_increase_level::@4
(label) play_increase_level::@6
(label) play_increase_level::@7
(label) play_increase_level::@8
(label) play_increase_level::@return
(byte) play_increase_level::b
(byte) play_increase_level::b#0
(byte) play_increase_level::b#1
(byte) play_increase_level::b#2
(void()) play_init()
(byte~) play_init::$0
(number~) play_init::$1
(bool~) play_init::$2
(bool~) play_init::$3
(byte~) play_init::$4
(byte~) play_init::$5
(label) play_init::@1
(label) play_init::@2
(label) play_init::@3
(label) play_init::@return
(byte) play_init::b
(byte) play_init::b#0
(byte) play_init::b#1
(byte) play_init::b#2
(byte) play_init::idx
(byte) play_init::idx#0
(byte) play_init::idx#1
(byte) play_init::idx#2
(byte) play_init::j
(byte) play_init::j#0
(byte) play_init::j#1
(byte) play_init::j#2
(byte*) play_init::pli
(byte*) play_init::pli#0
(byte*) play_init::pli#1
(byte*) play_init::pli#2
(void()) play_lock_current()
(bool~) play_lock_current::$0
(bool~) play_lock_current::$1
(bool~) play_lock_current::$2
(bool~) play_lock_current::$3
(byte~) play_lock_current::$4
(label) play_lock_current::@1
(label) play_lock_current::@2
(label) play_lock_current::@3
(label) play_lock_current::@4
(label) play_lock_current::@5
(label) play_lock_current::@return
(byte) play_lock_current::c
(byte) play_lock_current::c#0
(byte) play_lock_current::c#1
(byte) play_lock_current::c#2
(byte) play_lock_current::c#3
(byte) play_lock_current::c#4
(byte) play_lock_current::i
(byte) play_lock_current::i#0
(byte) play_lock_current::i#1
(byte) play_lock_current::i#2
(byte) play_lock_current::i#3
(byte) play_lock_current::i#4
(byte) play_lock_current::i#5
(byte) play_lock_current::i#6
(byte) play_lock_current::l
(byte) play_lock_current::l#0
(byte) play_lock_current::l#1
(byte) play_lock_current::l#2
(byte) play_lock_current::l#3
(byte) play_lock_current::l#4
(byte) play_lock_current::l#5
(byte) play_lock_current::l#6
(byte*) play_lock_current::playfield_line
(byte*) play_lock_current::playfield_line#0
(byte*) play_lock_current::playfield_line#1
(byte*) play_lock_current::playfield_line#2
(byte*) play_lock_current::playfield_line#3
(byte) play_lock_current::xp
(byte) play_lock_current::xp#0
(byte) play_lock_current::xp#1
(byte) play_lock_current::xp#2
(byte) play_lock_current::xp#3
(byte) play_lock_current::xp#4
(byte) play_lock_current::yp
(byte) play_lock_current::yp#0
(byte) play_lock_current::yp#1
(byte) play_lock_current::yp#2
(byte) play_lock_current::yp#3
(byte) play_lock_current::yp#4
(byte) play_lock_current::yp#5
(byte) play_lock_current::yp#6
(byte()) play_move_down((byte) play_move_down::key_event)
(bool~) play_move_down::$0
(bool~) play_move_down::$1
(bool~) play_move_down::$10
(number~) play_move_down::$11
(byte~) play_move_down::$12
(bool~) play_move_down::$13
(byte~) play_move_down::$15
(byte~) play_move_down::$2
(bool~) play_move_down::$3
(bool~) play_move_down::$4
(bool~) play_move_down::$5
(bool~) play_move_down::$6
(bool~) play_move_down::$7
(bool~) play_move_down::$8
(bool~) play_move_down::$9
(label) play_move_down::@1
(label) play_move_down::@10
(label) play_move_down::@14
(label) play_move_down::@15
(label) play_move_down::@17
(label) play_move_down::@18
(label) play_move_down::@19
(label) play_move_down::@2
(label) play_move_down::@20
(label) play_move_down::@21
(label) play_move_down::@22
(label) play_move_down::@3
(label) play_move_down::@4
(label) play_move_down::@5
(label) play_move_down::@6
(label) play_move_down::@7
(label) play_move_down::@8
(label) play_move_down::@9
(label) play_move_down::@return
(byte) play_move_down::key_event
(byte) play_move_down::key_event#0
(byte) play_move_down::key_event#1
(byte) play_move_down::movedown
(byte) play_move_down::movedown#0
(byte) play_move_down::movedown#1
(byte) play_move_down::movedown#10
(byte) play_move_down::movedown#11
(byte) play_move_down::movedown#2
(byte) play_move_down::movedown#3
(byte) play_move_down::movedown#4
(byte) play_move_down::movedown#5
(byte) play_move_down::movedown#6
(byte) play_move_down::movedown#7
(byte) play_move_down::movedown#8
(byte) play_move_down::movedown#9
(byte) play_move_down::removed
(byte) play_move_down::removed#0
(byte) play_move_down::return
(byte) play_move_down::return#0
(byte) play_move_down::return#1
(byte) play_move_down::return#2
(byte) play_move_down::return#3
(byte) play_move_down::return#4
(byte) play_move_down::return#5
(byte()) play_move_leftright((byte) play_move_leftright::key_event)
(bool~) play_move_leftright::$0
(bool~) play_move_leftright::$1
(bool~) play_move_leftright::$10
(bool~) play_move_leftright::$2
(number~) play_move_leftright::$3
(byte~) play_move_leftright::$4
(bool~) play_move_leftright::$5
(bool~) play_move_leftright::$6
(number~) play_move_leftright::$7
(byte~) play_move_leftright::$8
(bool~) play_move_leftright::$9
(label) play_move_leftright::@1
(label) play_move_leftright::@14
(label) play_move_leftright::@15
(label) play_move_leftright::@3
(label) play_move_leftright::@4
(label) play_move_leftright::@5
(label) play_move_leftright::@6
(label) play_move_leftright::@9
(label) play_move_leftright::@return
(byte) play_move_leftright::key_event
(byte) play_move_leftright::key_event#0
(byte) play_move_leftright::key_event#1
(byte) play_move_leftright::key_event#2
(byte) play_move_leftright::return
(byte) play_move_leftright::return#0
(byte) play_move_leftright::return#1
(byte) play_move_leftright::return#2
(byte) play_move_leftright::return#3
(byte) play_move_leftright::return#4
(byte) play_move_leftright::return#5
(byte) play_move_leftright::return#6
(byte()) play_move_rotate((byte) play_move_rotate::key_event)
(bool~) play_move_rotate::$0
(bool~) play_move_rotate::$1
(byte~) play_move_rotate::$2
(bool~) play_move_rotate::$3
(bool~) play_move_rotate::$4
(number~) play_move_rotate::$5
(number~) play_move_rotate::$6
(number~) play_move_rotate::$7
(number~) play_move_rotate::$8
(byte*~) play_move_rotate::$9
(label) play_move_rotate::@1
(label) play_move_rotate::@11
(label) play_move_rotate::@14
(label) play_move_rotate::@2
(label) play_move_rotate::@4
(label) play_move_rotate::@5
(label) play_move_rotate::@6
(label) play_move_rotate::@7
(label) play_move_rotate::@return
(byte) play_move_rotate::key_event
(byte) play_move_rotate::key_event#0
(byte) play_move_rotate::key_event#1
(byte) play_move_rotate::key_event#2
(byte) play_move_rotate::orientation
(byte) play_move_rotate::orientation#0
(byte) play_move_rotate::orientation#1
(byte) play_move_rotate::orientation#2
(byte) play_move_rotate::orientation#3
(byte) play_move_rotate::orientation#4
(byte) play_move_rotate::orientation#5
(byte) play_move_rotate::return
(byte) play_move_rotate::return#0
(byte) play_move_rotate::return#1
(byte) play_move_rotate::return#2
(byte) play_move_rotate::return#3
(byte) play_move_rotate::return#4
(byte) play_move_rotate::return#5
(byte) play_move_rotate::return#6
(byte()) play_movement((byte) play_movement::key_event)
(byte~) play_movement::$0
(bool~) play_movement::$1
(bool~) play_movement::$2
(byte~) play_movement::$3
(byte~) play_movement::$4
(label) play_movement::@1
(label) play_movement::@2
(label) play_movement::@5
(label) play_movement::@6
(label) play_movement::@7
(label) play_movement::@return
(byte) play_movement::key_event
(byte) play_movement::key_event#0
(byte) play_movement::key_event#1
(byte) play_movement::key_event#2
(byte) play_movement::key_event#3
(byte) play_movement::key_event#4
(byte) play_movement::render
(byte) play_movement::render#0
(byte) play_movement::render#1
(byte) play_movement::render#2
(byte) play_movement::render#3
(byte) play_movement::render#4
(byte) play_movement::render#5
(byte) play_movement::render#6
(byte) play_movement::render#7
(byte) play_movement::render#8
(byte) play_movement::return
(byte) play_movement::return#0
(byte) play_movement::return#1
(byte) play_movement::return#2
(byte) play_movement::return#3
(byte) play_movement::return#4
(byte) play_movement::return#5
(byte()) play_remove_lines()
(byte~) play_remove_lines::$0
(number~) play_remove_lines::$1
(bool~) play_remove_lines::$10
(byte~) play_remove_lines::$11
(bool~) play_remove_lines::$12
(bool~) play_remove_lines::$13
(byte~) play_remove_lines::$2
(number~) play_remove_lines::$3
(number~) play_remove_lines::$4
(number~) play_remove_lines::$5
(bool~) play_remove_lines::$6
(bool~) play_remove_lines::$7
(bool~) play_remove_lines::$8
(bool~) play_remove_lines::$9
(label) play_remove_lines::@1
(label) play_remove_lines::@10
(label) play_remove_lines::@11
(label) play_remove_lines::@2
(label) play_remove_lines::@3
(label) play_remove_lines::@4
(label) play_remove_lines::@5
(label) play_remove_lines::@6
(label) play_remove_lines::@7
(label) play_remove_lines::@9
(label) play_remove_lines::@return
(byte) play_remove_lines::c
(byte) play_remove_lines::c#0
(byte) play_remove_lines::c#1
(byte) play_remove_lines::c#2
(byte) play_remove_lines::full
(byte) play_remove_lines::full#0
(byte) play_remove_lines::full#1
(byte) play_remove_lines::full#2
(byte) play_remove_lines::full#3
(byte) play_remove_lines::full#4
(byte) play_remove_lines::r
(byte) play_remove_lines::r#0
(byte) play_remove_lines::r#1
(byte) play_remove_lines::r#2
(byte) play_remove_lines::r#3
(byte) play_remove_lines::r#4
(byte) play_remove_lines::r#5
(byte) play_remove_lines::r#6
(byte) play_remove_lines::r#7
(byte) play_remove_lines::r#8
(byte) play_remove_lines::removed
(byte) play_remove_lines::removed#0
(byte) play_remove_lines::removed#1
(byte) play_remove_lines::removed#10
(byte) play_remove_lines::removed#11
(byte) play_remove_lines::removed#2
(byte) play_remove_lines::removed#3
(byte) play_remove_lines::removed#4
(byte) play_remove_lines::removed#5
(byte) play_remove_lines::removed#6
(byte) play_remove_lines::removed#7
(byte) play_remove_lines::removed#8
(byte) play_remove_lines::removed#9
(byte) play_remove_lines::return
(byte) play_remove_lines::return#0
(byte) play_remove_lines::return#1
(byte) play_remove_lines::return#2
(byte) play_remove_lines::return#3
(byte) play_remove_lines::return#4
(byte) play_remove_lines::w
(byte) play_remove_lines::w#0
(byte) play_remove_lines::w#1
(byte) play_remove_lines::w#10
(byte) play_remove_lines::w#11
(byte) play_remove_lines::w#12
(byte) play_remove_lines::w#2
(byte) play_remove_lines::w#3
(byte) play_remove_lines::w#4
(byte) play_remove_lines::w#5
(byte) play_remove_lines::w#6
(byte) play_remove_lines::w#7
(byte) play_remove_lines::w#8
(byte) play_remove_lines::w#9
(byte) play_remove_lines::x
(byte) play_remove_lines::x#0
(byte) play_remove_lines::x#1
(byte) play_remove_lines::x#2
(byte) play_remove_lines::x#3
(byte) play_remove_lines::x#4
(byte) play_remove_lines::y
(byte) play_remove_lines::y#0
(byte) play_remove_lines::y#1
(byte) play_remove_lines::y#2
(byte) play_remove_lines::y#3
(byte) play_remove_lines::y#4
(byte) play_remove_lines::y#5
(byte) play_remove_lines::y#6
(byte) play_remove_lines::y#7
(byte) play_remove_lines::y#8
(void()) play_spawn_current()
(byte*~) play_spawn_current::$0
(byte~) play_spawn_current::$1
(bool~) play_spawn_current::$2
(bool~) play_spawn_current::$3
(bool~) play_spawn_current::$4
(byte~) play_spawn_current::$5
(number~) play_spawn_current::$6
(byte~) play_spawn_current::$7
(label) play_spawn_current::@1
(label) play_spawn_current::@10
(label) play_spawn_current::@2
(label) play_spawn_current::@3
(label) play_spawn_current::@5
(label) play_spawn_current::@9
(label) play_spawn_current::@return
(byte) play_spawn_current::current_piece_idx
(byte) play_spawn_current::current_piece_idx#0
(byte) play_spawn_current::piece_idx
(byte) play_spawn_current::piece_idx#0
(byte) play_spawn_current::piece_idx#1
(byte) play_spawn_current::piece_idx#2
(byte) play_spawn_current::piece_idx#3
(label) play_spawn_current::sid_rnd1
(label) play_spawn_current::sid_rnd1_@return
(byte) play_spawn_current::sid_rnd1_return
(byte) play_spawn_current::sid_rnd1_return#0
(byte) play_spawn_current::sid_rnd1_return#1
(byte) play_spawn_current::sid_rnd1_return#2
(byte) play_spawn_current::sid_rnd1_return#3
(void()) play_update_score((byte) play_update_score::removed)
(bool~) play_update_score::$0
(bool~) play_update_score::$1
(byte~) play_update_score::$2
(number~) play_update_score::$3
(byte~) play_update_score::$4
(number~) play_update_score::$5
(bool~) play_update_score::$6
(bool~) play_update_score::$7
(byte~) play_update_score::$9
(label) play_update_score::@2
(label) play_update_score::@3
(label) play_update_score::@5
(label) play_update_score::@return
(dword) play_update_score::add_bcd
(dword) play_update_score::add_bcd#0
(byte) play_update_score::lines_after
(byte) play_update_score::lines_after#0
(byte) play_update_score::lines_before
(byte) play_update_score::lines_before#0
(byte) play_update_score::removed
(byte) play_update_score::removed#0
(byte) play_update_score::removed#1
(byte) play_update_score::removed#2
(byte[$3]) playfield
(byte[$3]) playfield#0
(byte*[PLAYFIELD_LINES#0]) playfield_lines
(byte*[PLAYFIELD_LINES#0]) playfield_lines#0
(byte[$15]) playfield_lines_idx
(byte[$15]) playfield_lines_idx#0
(void()) render_bcd((byte*) render_bcd::screen , (word) render_bcd::offset , (byte) render_bcd::bcd , (byte) render_bcd::only_low)
(byte*~) render_bcd::$0
(bool~) render_bcd::$1
(bool~) render_bcd::$2
(number~) render_bcd::$3
(number~) render_bcd::$4
(byte~) render_bcd::$5
(byte~) render_bcd::$6
(label) render_bcd::@1
(label) render_bcd::@2
(label) render_bcd::@return
(byte) render_bcd::ZERO_CHAR
(byte) render_bcd::ZERO_CHAR#0
(byte) render_bcd::bcd
(byte) render_bcd::bcd#0
(byte) render_bcd::bcd#1
(byte) render_bcd::bcd#2
(byte) render_bcd::bcd#3
(byte) render_bcd::bcd#4
(byte) render_bcd::bcd#5
(byte) render_bcd::bcd#6
(byte) render_bcd::bcd#7
(byte) render_bcd::bcd#8
(word) render_bcd::offset
(word) render_bcd::offset#0
(word) render_bcd::offset#1
(word) render_bcd::offset#2
(word) render_bcd::offset#3
(word) render_bcd::offset#4
(word) render_bcd::offset#5
(word) render_bcd::offset#6
(byte) render_bcd::only_low
(byte) render_bcd::only_low#0
(byte) render_bcd::only_low#1
(byte) render_bcd::only_low#2
(byte) render_bcd::only_low#3
(byte) render_bcd::only_low#4
(byte) render_bcd::only_low#5
(byte) render_bcd::only_low#6
(byte*) render_bcd::screen
(byte*) render_bcd::screen#0
(byte*) render_bcd::screen#1
(byte*) render_bcd::screen#2
(byte*) render_bcd::screen#3
(byte*) render_bcd::screen#4
(byte*) render_bcd::screen#5
(byte*) render_bcd::screen#6
(byte*) render_bcd::screen_pos
(byte*) render_bcd::screen_pos#0
(byte*) render_bcd::screen_pos#1
(byte*) render_bcd::screen_pos#2
(byte*) render_bcd::screen_pos#3
(byte*) render_bcd::screen_pos#4
(void()) render_init()
(byte~) render_init::$1
(number~) render_init::$10
(bool~) render_init::$11
(byte~) render_init::$12
(byte~) render_init::$13
(byte~) render_init::$2
(number~) render_init::$3
(byte*~) render_init::$6
(byte*~) render_init::$7
(byte*~) render_init::$8
(byte*~) render_init::$9
(label) render_init::@1
(label) render_init::@2
(label) render_init::@3
(label) render_init::@4
(label) render_init::@5
(label) render_init::@return
(byte) render_init::i
(byte) render_init::i#0
(byte) render_init::i#1
(byte) render_init::i#2
(byte*) render_init::li_1
(byte*) render_init::li_1#0
(byte*) render_init::li_1#1
(byte*) render_init::li_1#2
(byte*) render_init::li_2
(byte*) render_init::li_2#0
(byte*) render_init::li_2#1
(byte*) render_init::li_2#2
(label) render_init::vicSelectGfxBank1
(byte~) render_init::vicSelectGfxBank1_$0
(byte~) render_init::vicSelectGfxBank1_$0#0
(label) render_init::vicSelectGfxBank1_@1
(byte*) render_init::vicSelectGfxBank1_gfx
(byte*) render_init::vicSelectGfxBank1_gfx#0
(byte*) render_init::vicSelectGfxBank1_gfx#1
(label) render_init::vicSelectGfxBank1_toDd001
(word~) render_init::vicSelectGfxBank1_toDd001_$0
(word~) render_init::vicSelectGfxBank1_toDd001_$0#0
(byte~) render_init::vicSelectGfxBank1_toDd001_$1
(byte~) render_init::vicSelectGfxBank1_toDd001_$1#0
(number~) render_init::vicSelectGfxBank1_toDd001_$2
(number~) render_init::vicSelectGfxBank1_toDd001_$2#0
(number~) render_init::vicSelectGfxBank1_toDd001_$3
(number~) render_init::vicSelectGfxBank1_toDd001_$3#0
(label) render_init::vicSelectGfxBank1_toDd001_@return
(byte*) render_init::vicSelectGfxBank1_toDd001_gfx
(byte*) render_init::vicSelectGfxBank1_toDd001_gfx#0
(byte*) render_init::vicSelectGfxBank1_toDd001_gfx#1
(byte) render_init::vicSelectGfxBank1_toDd001_return
(byte) render_init::vicSelectGfxBank1_toDd001_return#0
(byte) render_init::vicSelectGfxBank1_toDd001_return#1
(byte) render_init::vicSelectGfxBank1_toDd001_return#2
(byte) render_init::vicSelectGfxBank1_toDd001_return#3
(void()) render_moving()
(bool~) render_moving::$0
(byte~) render_moving::$1
(bool~) render_moving::$2
(bool~) render_moving::$3
(bool~) render_moving::$4
(bool~) render_moving::$5
(byte~) render_moving::$6
(label) render_moving::@1
(label) render_moving::@2
(label) render_moving::@3
(label) render_moving::@4
(label) render_moving::@5
(label) render_moving::@6
(label) render_moving::@8
(label) render_moving::@return
(byte) render_moving::c
(byte) render_moving::c#0
(byte) render_moving::c#1
(byte) render_moving::c#2
(byte) render_moving::c#3
(byte) render_moving::c#4
(byte) render_moving::current_cell
(byte) render_moving::current_cell#0
(byte) render_moving::i
(byte) render_moving::i#0
(byte) render_moving::i#1
(byte) render_moving::i#2
(byte) render_moving::i#3
(byte) render_moving::i#4
(byte) render_moving::i#5
(byte) render_moving::i#6
(byte) render_moving::i#7
(byte) render_moving::i#8
(byte) render_moving::i#9
(byte) render_moving::l
(byte) render_moving::l#0
(byte) render_moving::l#1
(byte) render_moving::l#2
(byte) render_moving::l#3
(byte) render_moving::l#4
(byte) render_moving::l#5
(byte) render_moving::l#6
(byte) render_moving::l#7
(byte) render_moving::l#8
(byte*) render_moving::screen_line
(byte*) render_moving::screen_line#0
(byte*) render_moving::screen_line#1
(byte*) render_moving::screen_line#2
(byte*) render_moving::screen_line#3
(byte) render_moving::xpos
(byte) render_moving::xpos#0
(byte) render_moving::xpos#1
(byte) render_moving::xpos#2
(byte) render_moving::xpos#3
(byte) render_moving::xpos#4
(byte) render_moving::ypos
(byte) render_moving::ypos#0
(byte) render_moving::ypos#1
(byte) render_moving::ypos#2
(byte) render_moving::ypos#3
(byte) render_moving::ypos#4
(byte) render_moving::ypos#5
(byte) render_moving::ypos#6
(byte) render_moving::ypos#7
(byte) render_moving::ypos#8
(void()) render_next()
(bool~) render_next::$0
(byte*~) render_next::$1
(byte*~) render_next::$2
(bool~) render_next::$3
(bool~) render_next::$4
(bool~) render_next::$5
(byte~) render_next::$6
(label) render_next::@1
(label) render_next::@11
(label) render_next::@2
(label) render_next::@3
(label) render_next::@5
(label) render_next::@6
(label) render_next::@7
(label) render_next::@8
(label) render_next::@9
(label) render_next::@return
(byte) render_next::c
(byte) render_next::c#0
(byte) render_next::c#1
(byte) render_next::c#2
(byte) render_next::c#3
(byte) render_next::c#4
(byte) render_next::c#5
(byte) render_next::cell
(byte) render_next::cell#0
(byte) render_next::l
(byte) render_next::l#0
(byte) render_next::l#1
(byte) render_next::l#2
(byte) render_next::l#3
(byte) render_next::l#4
(byte) render_next::l#5
(byte) render_next::l#6
(byte) render_next::l#7
(word) render_next::next_area_offset
(word) render_next::next_area_offset#0
(byte) render_next::next_piece_char
(byte) render_next::next_piece_char#0
(byte) render_next::next_piece_char#1
(byte) render_next::next_piece_char#2
(byte) render_next::next_piece_char#3
(byte) render_next::next_piece_char#4
(byte) render_next::next_piece_char#5
(byte) render_next::next_piece_char#6
(byte*) render_next::next_piece_gfx
(byte*) render_next::next_piece_gfx#0
(byte*) render_next::next_piece_gfx#1
(byte*) render_next::next_piece_gfx#2
(byte*) render_next::next_piece_gfx#3
(byte*) render_next::next_piece_gfx#4
(byte*) render_next::next_piece_gfx#5
(byte*) render_next::next_piece_gfx#6
(byte*) render_next::next_piece_gfx#7
(byte*) render_next::screen_next_area
(byte*) render_next::screen_next_area#0
(byte*) render_next::screen_next_area#1
(byte*) render_next::screen_next_area#10
(byte*) render_next::screen_next_area#11
(byte*) render_next::screen_next_area#2
(byte*) render_next::screen_next_area#3
(byte*) render_next::screen_next_area#4
(byte*) render_next::screen_next_area#5
(byte*) render_next::screen_next_area#6
(byte*) render_next::screen_next_area#7
(byte*) render_next::screen_next_area#8
(byte*) render_next::screen_next_area#9
(void()) render_playfield()
(number~) render_playfield::$0
(number~) render_playfield::$1
(byte~) render_playfield::$2
(number~) render_playfield::$3
(bool~) render_playfield::$4
(bool~) render_playfield::$5
(byte~) render_playfield::$6
(label) render_playfield::@1
(label) render_playfield::@2
(label) render_playfield::@3
(label) render_playfield::@return
(byte) render_playfield::c
(byte) render_playfield::c#0
(byte) render_playfield::c#1
(byte) render_playfield::c#2
(byte) render_playfield::i
(byte) render_playfield::i#0
(byte) render_playfield::i#1
(byte) render_playfield::i#2
(byte) render_playfield::i#3
(byte) render_playfield::i#4
(byte) render_playfield::l
(byte) render_playfield::l#0
(byte) render_playfield::l#1
(byte) render_playfield::l#2
(byte) render_playfield::l#3
(byte) render_playfield::l#4
(byte*) render_playfield::screen_line
(byte*) render_playfield::screen_line#0
(byte*) render_playfield::screen_line#1
(byte*) render_playfield::screen_line#2
(void()) render_score()
(bool~) render_score::$0
(dword*~) render_score::$1
(number~) render_score::$10
(byte~) render_score::$11
(byte*~) render_score::$2
(number~) render_score::$4
(number~) render_score::$6
(byte~) render_score::$8
(label) render_score::@1
(label) render_score::@10
(label) render_score::@2
(label) render_score::@3
(label) render_score::@5
(label) render_score::@6
(label) render_score::@7
(label) render_score::@8
(label) render_score::@9
(label) render_score::@return
(word) render_score::level_offset
(word) render_score::level_offset#0
(word) render_score::lines_offset
(word) render_score::lines_offset#0
(byte*) render_score::score_bytes
(byte*) render_score::score_bytes#0
(byte*) render_score::score_bytes#1
(byte*) render_score::score_bytes#2
(word) render_score::score_offset
(word) render_score::score_offset#0
(byte*) render_score::screen
(byte*) render_score::screen#0
(byte*) render_score::screen#1
(byte*) render_score::screen#2
(byte*) render_score::screen#3
(byte*) render_score::screen#4
(byte*) render_score::screen#5
(byte*) render_score::screen#6
(byte*) render_score::screen#7
(byte*) render_score::screen#8
(void()) render_screen_original((byte*) render_screen_original::screen)
(byte*~) render_screen_original::$0
(byte*~) render_screen_original::$1
(bool~) render_screen_original::$2
(bool~) render_screen_original::$3
(bool~) render_screen_original::$4
(bool~) render_screen_original::$5
(label) render_screen_original::@1
(label) render_screen_original::@2
(label) render_screen_original::@4
(label) render_screen_original::@6
(label) render_screen_original::@7
(label) render_screen_original::@return
(byte) render_screen_original::SPACE
(byte) render_screen_original::SPACE#0
(byte*) render_screen_original::cols
(byte*) render_screen_original::cols#0
(byte*) render_screen_original::cols#1
(byte*) render_screen_original::cols#2
(byte*) render_screen_original::cols#3
(byte*) render_screen_original::cols#4
(byte*) render_screen_original::cols#5
(byte*) render_screen_original::cols#6
(byte*) render_screen_original::cols#7
(byte*) render_screen_original::cols#8
(byte*) render_screen_original::ocols
(byte*) render_screen_original::ocols#0
(byte*) render_screen_original::ocols#1
(byte*) render_screen_original::ocols#2
(byte*) render_screen_original::ocols#3
(byte*) render_screen_original::ocols#4
(byte*) render_screen_original::ocols#5
(byte*) render_screen_original::ocols#6
(byte*) render_screen_original::oscr
(byte*) render_screen_original::oscr#0
(byte*) render_screen_original::oscr#1
(byte*) render_screen_original::oscr#2
(byte*) render_screen_original::oscr#3
(byte*) render_screen_original::oscr#4
(byte*) render_screen_original::oscr#5
(byte*) render_screen_original::oscr#6
(byte*) render_screen_original::screen
(byte*) render_screen_original::screen#0
(byte*) render_screen_original::screen#1
(byte*) render_screen_original::screen#10
(byte*) render_screen_original::screen#2
(byte*) render_screen_original::screen#3
(byte*) render_screen_original::screen#4
(byte*) render_screen_original::screen#5
(byte*) render_screen_original::screen#6
(byte*) render_screen_original::screen#7
(byte*) render_screen_original::screen#8
(byte*) render_screen_original::screen#9
(byte) render_screen_original::x
(byte) render_screen_original::x#0
(byte) render_screen_original::x#1
(byte) render_screen_original::x#2
(byte) render_screen_original::x#3
(byte) render_screen_original::x#4
(byte) render_screen_original::x#5
(byte) render_screen_original::x#6
(byte) render_screen_original::y
(byte) render_screen_original::y#0
(byte) render_screen_original::y#1
(byte) render_screen_original::y#2
(byte) render_screen_original::y#3
(byte) render_screen_original::y#4
(byte) render_screen_original::y#5
(byte) render_screen_original::y#6
(byte) render_screen_render
(byte) render_screen_render#0
(byte) render_screen_render#1
(byte) render_screen_render#10
(byte) render_screen_render#11
(byte) render_screen_render#12
(byte) render_screen_render#13
(byte) render_screen_render#14
(byte) render_screen_render#15
(byte) render_screen_render#16
(byte) render_screen_render#17
(byte) render_screen_render#18
(byte) render_screen_render#19
(byte) render_screen_render#2
(byte) render_screen_render#20
(byte) render_screen_render#21
(byte) render_screen_render#22
(byte) render_screen_render#23
(byte) render_screen_render#24
(byte) render_screen_render#25
(byte) render_screen_render#26
(byte) render_screen_render#27
(byte) render_screen_render#28
(byte) render_screen_render#29
(byte) render_screen_render#3
(byte) render_screen_render#30
(byte) render_screen_render#31
(byte) render_screen_render#32
(byte) render_screen_render#33
(byte) render_screen_render#34
(byte) render_screen_render#35
(byte) render_screen_render#36
(byte) render_screen_render#37
(byte) render_screen_render#38
(byte) render_screen_render#39
(byte) render_screen_render#4
(byte) render_screen_render#40
(byte) render_screen_render#41
(byte) render_screen_render#42
(byte) render_screen_render#43
(byte) render_screen_render#44
(byte) render_screen_render#45
(byte) render_screen_render#46
(byte) render_screen_render#47
(byte) render_screen_render#48
(byte) render_screen_render#49
(byte) render_screen_render#5
(byte) render_screen_render#50
(byte) render_screen_render#51
(byte) render_screen_render#52
(byte) render_screen_render#53
(byte) render_screen_render#54
(byte) render_screen_render#55
(byte) render_screen_render#56
(byte) render_screen_render#57
(byte) render_screen_render#58
(byte) render_screen_render#59
(byte) render_screen_render#6
(byte) render_screen_render#60
(byte) render_screen_render#61
(byte) render_screen_render#62
(byte) render_screen_render#63
(byte) render_screen_render#7
(byte) render_screen_render#8
(byte) render_screen_render#9
(byte) render_screen_show
(byte) render_screen_show#0
(byte) render_screen_show#1
(byte) render_screen_show#10
(byte) render_screen_show#11
(byte) render_screen_show#12
(byte) render_screen_show#13
(byte) render_screen_show#14
(byte) render_screen_show#15
(byte) render_screen_show#16
(byte) render_screen_show#17
(byte) render_screen_show#18
(byte) render_screen_show#19
(byte) render_screen_show#2
(byte) render_screen_show#20
(byte) render_screen_show#21
(byte) render_screen_show#22
(byte) render_screen_show#23
(byte) render_screen_show#24
(byte) render_screen_show#25
(byte) render_screen_show#26
(byte) render_screen_show#27
(byte) render_screen_show#28
(byte) render_screen_show#29
(byte) render_screen_show#3
(byte) render_screen_show#30
(byte) render_screen_show#31
(byte) render_screen_show#32
(byte) render_screen_show#33
(byte) render_screen_show#34
(byte) render_screen_show#35
(byte) render_screen_show#36
(byte) render_screen_show#37
(byte) render_screen_show#38
(byte) render_screen_show#39
(byte) render_screen_show#4
(byte) render_screen_show#40
(byte) render_screen_show#41
(byte) render_screen_show#42
(byte) render_screen_show#43
(byte) render_screen_show#44
(byte) render_screen_show#45
(byte) render_screen_show#46
(byte) render_screen_show#47
(byte) render_screen_show#48
(byte) render_screen_show#49
(byte) render_screen_show#5
(byte) render_screen_show#50
(byte) render_screen_show#51
(byte) render_screen_show#52
(byte) render_screen_show#53
(byte) render_screen_show#54
(byte) render_screen_show#55
(byte) render_screen_show#56
(byte) render_screen_show#57
(byte) render_screen_show#58
(byte) render_screen_show#59
(byte) render_screen_show#6
(byte) render_screen_show#7
(byte) render_screen_show#8
(byte) render_screen_show#9
(byte) render_screen_showing
(byte) render_screen_showing#0
(byte) render_screen_showing#1
(byte) render_screen_showing#10
(byte) render_screen_showing#11
(byte) render_screen_showing#12
(byte) render_screen_showing#13
(byte) render_screen_showing#14
(byte) render_screen_showing#15
(byte) render_screen_showing#16
(byte) render_screen_showing#17
(byte) render_screen_showing#18
(byte) render_screen_showing#19
(byte) render_screen_showing#2
(byte) render_screen_showing#20
(byte) render_screen_showing#21
(byte) render_screen_showing#22
(byte) render_screen_showing#23
(byte) render_screen_showing#24
(byte) render_screen_showing#25
(byte) render_screen_showing#26
(byte) render_screen_showing#27
(byte) render_screen_showing#28
(byte) render_screen_showing#29
(byte) render_screen_showing#3
(byte) render_screen_showing#30
(byte) render_screen_showing#31
(byte) render_screen_showing#32
(byte) render_screen_showing#33
(byte) render_screen_showing#34
(byte) render_screen_showing#35
(byte) render_screen_showing#36
(byte) render_screen_showing#37
(byte) render_screen_showing#38
(byte) render_screen_showing#39
(byte) render_screen_showing#4
(byte) render_screen_showing#40
(byte) render_screen_showing#41
(byte) render_screen_showing#42
(byte) render_screen_showing#43
(byte) render_screen_showing#44
(byte) render_screen_showing#45
(byte) render_screen_showing#46
(byte) render_screen_showing#47
(byte) render_screen_showing#5
(byte) render_screen_showing#6
(byte) render_screen_showing#7
(byte) render_screen_showing#8
(byte) render_screen_showing#9
(void()) render_screen_swap()
(label) render_screen_swap::@return
(void()) render_show()
(bool~) render_show::$0
(byte~) render_show::$1
(byte~) render_show::$2
(label) render_show::@1
(label) render_show::@2
(label) render_show::@3
(label) render_show::@5
(label) render_show::@6
(label) render_show::@return
(byte) render_show::d018val
(byte) render_show::d018val#0
(byte) render_show::d018val#1
(byte) render_show::d018val#2
(byte) render_show::d018val#3
(label) render_show::toD0181
(word~) render_show::toD0181_$0
(word~) render_show::toD0181_$0#0
(number~) render_show::toD0181_$1
(number~) render_show::toD0181_$1#0
(number~) render_show::toD0181_$2
(number~) render_show::toD0181_$2#0
(number~) render_show::toD0181_$3
(number~) render_show::toD0181_$3#0
(word~) render_show::toD0181_$4
(word~) render_show::toD0181_$4#0
(byte~) render_show::toD0181_$5
(byte~) render_show::toD0181_$5#0
(number~) render_show::toD0181_$6
(number~) render_show::toD0181_$6#0
(number~) render_show::toD0181_$7
(number~) render_show::toD0181_$7#0
(number~) render_show::toD0181_$8
(number~) render_show::toD0181_$8#0
(label) render_show::toD0181_@return
(byte*) render_show::toD0181_gfx
(byte*) render_show::toD0181_gfx#0
(byte*) render_show::toD0181_gfx#1
(byte) render_show::toD0181_return
(byte) render_show::toD0181_return#0
(byte) render_show::toD0181_return#1
(byte) render_show::toD0181_return#2
(byte) render_show::toD0181_return#3
(byte*) render_show::toD0181_screen
(byte*) render_show::toD0181_screen#0
(byte*) render_show::toD0181_screen#1
(label) render_show::toD0182
(word~) render_show::toD0182_$0
(word~) render_show::toD0182_$0#0
(number~) render_show::toD0182_$1
(number~) render_show::toD0182_$1#0
(number~) render_show::toD0182_$2
(number~) render_show::toD0182_$2#0
(number~) render_show::toD0182_$3
(number~) render_show::toD0182_$3#0
(word~) render_show::toD0182_$4
(word~) render_show::toD0182_$4#0
(byte~) render_show::toD0182_$5
(byte~) render_show::toD0182_$5#0
(number~) render_show::toD0182_$6
(number~) render_show::toD0182_$6#0
(number~) render_show::toD0182_$7
(number~) render_show::toD0182_$7#0
(number~) render_show::toD0182_$8
(number~) render_show::toD0182_$8#0
(label) render_show::toD0182_@return
(byte*) render_show::toD0182_gfx
(byte*) render_show::toD0182_gfx#0
(byte*) render_show::toD0182_gfx#1
(byte) render_show::toD0182_return
(byte) render_show::toD0182_return#0
(byte) render_show::toD0182_return#1
(byte) render_show::toD0182_return#2
(byte) render_show::toD0182_return#3
(byte*) render_show::toD0182_screen
(byte*) render_show::toD0182_screen#0
(byte*) render_show::toD0182_screen#1
(dword[5]) score_add_bcd
(dword[5]) score_add_bcd#0
(dword) score_bcd
(dword) score_bcd#0
(dword) score_bcd#1
(dword) score_bcd#10
(dword) score_bcd#11
(dword) score_bcd#12
(dword) score_bcd#13
(dword) score_bcd#14
(dword) score_bcd#15
(dword) score_bcd#16
(dword) score_bcd#17
(dword) score_bcd#18
(dword) score_bcd#19
(dword) score_bcd#2
(dword) score_bcd#20
(dword) score_bcd#21
(dword) score_bcd#22
(dword) score_bcd#23
(dword) score_bcd#24
(dword) score_bcd#25
(dword) score_bcd#26
(dword) score_bcd#27
(dword) score_bcd#28
(dword) score_bcd#29
(dword) score_bcd#3
(dword) score_bcd#30
(dword) score_bcd#31
(dword) score_bcd#32
(dword) score_bcd#33
(dword) score_bcd#34
(dword) score_bcd#35
(dword) score_bcd#36
(dword) score_bcd#37
(dword) score_bcd#38
(dword) score_bcd#39
(dword) score_bcd#4
(dword) score_bcd#40
(dword) score_bcd#41
(dword) score_bcd#42
(dword) score_bcd#43
(dword) score_bcd#44
(dword) score_bcd#45
(dword) score_bcd#46
(dword) score_bcd#47
(dword) score_bcd#48
(dword) score_bcd#49
(dword) score_bcd#5
(dword) score_bcd#50
(dword) score_bcd#51
(dword) score_bcd#52
(dword) score_bcd#53
(dword) score_bcd#54
(dword) score_bcd#55
(dword) score_bcd#56
(dword) score_bcd#57
(dword) score_bcd#58
(dword) score_bcd#59
(dword) score_bcd#6
(dword) score_bcd#60
(dword) score_bcd#61
(dword) score_bcd#62
(dword) score_bcd#63
(dword) score_bcd#64
(dword) score_bcd#65
(dword) score_bcd#66
(dword) score_bcd#67
(dword) score_bcd#68
(dword) score_bcd#69
(dword) score_bcd#7
(dword) score_bcd#70
(dword) score_bcd#71
(dword) score_bcd#72
(dword) score_bcd#73
(dword) score_bcd#74
(dword) score_bcd#75
(dword) score_bcd#76
(dword) score_bcd#77
(dword) score_bcd#78
(dword) score_bcd#79
(dword) score_bcd#8
(dword) score_bcd#80
(dword) score_bcd#81
(dword) score_bcd#82
(dword) score_bcd#83
(dword) score_bcd#9
(byte*[PLAYFIELD_LINES#0]) screen_lines_1
(byte*[PLAYFIELD_LINES#0]) screen_lines_1#0
(byte*[PLAYFIELD_LINES#0]) screen_lines_2
(byte*[PLAYFIELD_LINES#0]) screen_lines_2#0
(void()) sid_rnd_init()
(label) sid_rnd_init::@return
(void()) sprites_init()
(number~) sprites_init::$0
(number~) sprites_init::$1
(bool~) sprites_init::$2
(label) sprites_init::@1
(label) sprites_init::@return
(byte) sprites_init::s
(byte) sprites_init::s#0
(byte) sprites_init::s#1
(byte) sprites_init::s#2
(byte) sprites_init::s2
(byte) sprites_init::s2#0
(byte) sprites_init::xpos
(byte) sprites_init::xpos#0
(byte) sprites_init::xpos#1
(byte) sprites_init::xpos#2
interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
(number~) sprites_irq::$0
(bool~) sprites_irq::$1
(bool~) sprites_irq::$2
(bool~) sprites_irq::$3
(bool~) sprites_irq::$4
(byte~) sprites_irq::$5
(label) sprites_irq::@1
(label) sprites_irq::@11
(label) sprites_irq::@12
(label) sprites_irq::@13
(label) sprites_irq::@15
(label) sprites_irq::@2
(label) sprites_irq::@3
(label) sprites_irq::@4
(label) sprites_irq::@6
(label) sprites_irq::@7
(label) sprites_irq::@8
(label) sprites_irq::@return
(byte) sprites_irq::ptr
(byte) sprites_irq::ptr#0
(byte) sprites_irq::ptr#1
(byte) sprites_irq::ptr#2
(byte) sprites_irq::ptr#3
(byte) sprites_irq::ptr#4
(byte) sprites_irq::ptr#5
(byte) sprites_irq::ptr#6
(byte) sprites_irq::raster_sprite_gfx_modify
(byte) sprites_irq::raster_sprite_gfx_modify#0
(byte) sprites_irq::raster_sprite_gfx_modify#1
(label) sprites_irq::toSpritePtr2
(word~) sprites_irq::toSpritePtr2_$0
(word~) sprites_irq::toSpritePtr2_$0#0
(number~) sprites_irq::toSpritePtr2_$1
(number~) sprites_irq::toSpritePtr2_$1#0
(byte~) sprites_irq::toSpritePtr2_$2
(byte~) sprites_irq::toSpritePtr2_$2#0
(label) sprites_irq::toSpritePtr2_@return
(byte) sprites_irq::toSpritePtr2_return
(byte) sprites_irq::toSpritePtr2_return#0
(byte) sprites_irq::toSpritePtr2_return#1
(byte) sprites_irq::toSpritePtr2_return#2
(byte) sprites_irq::toSpritePtr2_return#3
(byte*) sprites_irq::toSpritePtr2_sprite
(byte*) sprites_irq::toSpritePtr2_sprite#0
(byte*) sprites_irq::toSpritePtr2_sprite#1
(byte) sprites_irq::ypos
(byte) sprites_irq::ypos#0
(void()) sprites_irq_init()
(void()*~) sprites_irq_init::$0
(label) sprites_irq_init::@return
(label) toSpritePtr1
(word~) toSpritePtr1_$0
(word~) toSpritePtr1_$0#0
(number~) toSpritePtr1_$1
(number~) toSpritePtr1_$1#0
(byte~) toSpritePtr1_$2
(byte~) toSpritePtr1_$2#0
(label) toSpritePtr1_@return
(byte) toSpritePtr1_return
(byte) toSpritePtr1_return#0
(byte) toSpritePtr1_return#1
(byte) toSpritePtr1_return#2
(byte) toSpritePtr1_return#3
(byte*) toSpritePtr1_sprite
(byte*) toSpritePtr1_sprite#0
(byte*) toSpritePtr1_sprite#1

Adding number conversion cast (unumber) 7 in (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (number) 7
Adding number conversion cast (unumber) 5 in (byte) PROCPORT_RAM_IO#0 ← (number) 5
Adding number conversion cast (unumber) $3f8 in (word) SPRITE_PTRS#0 ← (number) $3f8
Adding number conversion cast (unumber) $40 in (byte) VIC_ECM#0 ← (number) $40
Adding number conversion cast (unumber) $10 in (byte) VIC_DEN#0 ← (number) $10
Adding number conversion cast (unumber) 8 in (byte) VIC_RSEL#0 ← (number) 8
Adding number conversion cast (unumber) 1 in (byte) IRQ_RASTER#0 ← (number) 1
Adding number conversion cast (unumber) $7f in (byte) CIA_INTERRUPT_CLEAR#0 ← (number) $7f
Adding number conversion cast (unumber) 0 in (byte) BLACK#0 ← (number) 0
Adding number conversion cast (unumber) 2 in (byte) RED#0 ← (number) 2
Adding number conversion cast (unumber) 3 in (byte) CYAN#0 ← (number) 3
Adding number conversion cast (unumber) 4 in (byte) PURPLE#0 ← (number) 4
Adding number conversion cast (unumber) 5 in (byte) GREEN#0 ← (number) 5
Adding number conversion cast (unumber) 6 in (byte) BLUE#0 ← (number) 6
Adding number conversion cast (unumber) 8 in (byte) ORANGE#0 ← (number) 8
Adding number conversion cast (unumber) $a in (byte) PINK#0 ← (number) $a
Adding number conversion cast (unumber) $b in (byte) DARK_GREY#0 ← (number) $b
Adding number conversion cast (unumber) $c in (byte) GREY#0 ← (number) $c
Adding number conversion cast (unumber) $d in (byte) LIGHT_GREEN#0 ← (number) $d
Adding number conversion cast (unumber) $e in (byte) LIGHT_BLUE#0 ← (number) $e
Adding number conversion cast (unumber) $c in (byte) KEY_Z#0 ← (number) $c
Adding number conversion cast (unumber) $f in (byte) KEY_LSHIFT#0 ← (number) $f
Adding number conversion cast (unumber) $17 in (byte) KEY_X#0 ← (number) $17
Adding number conversion cast (unumber) $2c in (byte) KEY_DOT#0 ← (number) $2c
Adding number conversion cast (unumber) $2f in (byte) KEY_COMMA#0 ← (number) $2f
Adding number conversion cast (unumber) $34 in (byte) KEY_RSHIFT#0 ← (number) $34
Adding number conversion cast (unumber) $3a in (byte) KEY_CTRL#0 ← (number) $3a
Adding number conversion cast (unumber) $3c in (byte) KEY_SPACE#0 ← (number) $3c
Adding number conversion cast (unumber) $3d in (byte) KEY_COMMODORE#0 ← (number) $3d
Adding number conversion cast (unumber) 0 in (byte) keyboard_events_size#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) keyboard_modifiers#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) KEY_MODIFIER_LSHIFT#0 ← (number) 1
Adding number conversion cast (unumber) 2 in (byte) KEY_MODIFIER_RSHIFT#0 ← (number) 2
Adding number conversion cast (unumber) 4 in (byte) KEY_MODIFIER_CTRL#0 ← (number) 4
Adding number conversion cast (unumber) 8 in (byte) KEY_MODIFIER_COMMODORE#0 ← (number) 8
Adding number conversion cast (unumber) 0 in (byte) keyboard_event_scan::keycode#0 ← (number) 0
Adding number conversion cast (unumber) 8 in (number~) keyboard_event_scan::$14 ← (byte) keyboard_event_scan::keycode#3 + (number) 8
Adding number conversion cast (unumber) keyboard_event_scan::$14 in (number~) keyboard_event_scan::$14 ← (byte) keyboard_event_scan::keycode#3 + (unumber)(number) 8
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$17 ← (byte~) keyboard_event_scan::$16 != (number) 0
Adding number conversion cast (unumber) 8 in (bool~) keyboard_event_scan::$19 ← (byte) keyboard_events_size#10 != (number) 8
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$22 ← (byte) keyboard_event_scan::event_type#0 == (number) 0
Adding number conversion cast (unumber) $40 in (number~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#5 | (number) $40
Adding number conversion cast (unumber) keyboard_event_scan::$23 in (number~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#5 | (unumber)(number) $40
Adding number conversion cast (unumber) 0 in (byte) keyboard_modifiers#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$1 ← (byte~) keyboard_event_scan::$0 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$7 ← (byte~) keyboard_event_scan::$6 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$10 ← (byte~) keyboard_event_scan::$9 != (number) 0
Adding number conversion cast (unumber) 3 in (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (number) 3
Adding number conversion cast (unumber) 7 in (number~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (number) 7
Adding number conversion cast (unumber) keyboard_event_pressed::$1 in (number~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (unumber)(number) 7
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_get::$0 ← (byte) keyboard_events_size#14 == (number) 0
Adding number conversion cast (unumber) $ff in (byte) keyboard_event_get::return#0 ← (number) $ff
Adding number conversion cast (unumber) $80 in (byte) SID_CONTROL_NOISE#0 ← (number) $80
Adding number conversion cast (unumber) $ffff in *((word*) SID_VOICE3_FREQ#0) ← (number) $ffff
Adding number conversion cast (unumber) $16 in (byte) PLAYFIELD_LINES#0 ← (number) $16
Adding number conversion cast (unumber) $a in (byte) PLAYFIELD_COLS#0 ← (number) $a
Adding number conversion cast (unumber) $20 in (byte) render_screen_render#0 ← (number) $20
Adding number conversion cast (unumber) 0 in (byte) render_screen_show#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) render_screen_showing#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (dword) score_bcd#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (word) lines_bcd#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) level_bcd#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) level#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) game_over#0 ← (number) 0
Adding number conversion cast (unumber) 3 in *((byte*) CIA2_PORT_A_DDR#0) ← (number) 3
Adding number conversion cast (unumber) $40 in (number~) render_init::vicSelectGfxBank1_toDd001_$2#0 ← (byte~) render_init::vicSelectGfxBank1_toDd001_$1#0 / (number) $40
Adding number conversion cast (unumber) render_init::vicSelectGfxBank1_toDd001_$2#0 in (number~) render_init::vicSelectGfxBank1_toDd001_$2#0 ← (byte~) render_init::vicSelectGfxBank1_toDd001_$1#0 / (unumber)(number) $40
Adding number conversion cast (unumber) 3 in (number~) render_init::vicSelectGfxBank1_toDd001_$3#0 ← (number) 3 ^ (unumber~) render_init::vicSelectGfxBank1_toDd001_$2#0
Adding number conversion cast (unumber) render_init::vicSelectGfxBank1_toDd001_$3#0 in (number~) render_init::vicSelectGfxBank1_toDd001_$3#0 ← (unumber)(number) 3 ^ (unumber~) render_init::vicSelectGfxBank1_toDd001_$2#0
Adding number conversion cast (unumber) 3 in (number~) render_init::$3 ← (byte~) render_init::$2 | (number) 3
Adding number conversion cast (unumber) render_init::$3 in (number~) render_init::$3 ← (byte~) render_init::$2 | (unumber)(number) 3
Adding number conversion cast (unumber) 0 in *((byte*) BGCOL2#0) ← *((byte[]) PIECES_COLORS_1#0 + (number) 0)
Adding number conversion cast (unumber) 0 in *((byte*) BGCOL3#0) ← *((byte[]) PIECES_COLORS_2#0 + (number) 0)
Adding number conversion cast (unumber) 2*$28 in (byte*~) render_init::$6 ← (byte*) PLAYFIELD_SCREEN_1#0 + (number) 2*(number) $28
Adding number conversion cast (unumber) $10 in (byte*~) render_init::$7 ← (byte*~) render_init::$6 + (number) $10
Adding number conversion cast (unumber) 2*$28 in (byte*~) render_init::$8 ← (byte*) PLAYFIELD_SCREEN_2#0 + (number) 2*(number) $28
Adding number conversion cast (unumber) $10 in (byte*~) render_init::$9 ← (byte*~) render_init::$8 + (number) $10
Adding number conversion cast (unumber) 1 in (number~) render_init::$10 ← (byte) PLAYFIELD_LINES#0 - (number) 1
Adding number conversion cast (unumber) render_init::$10 in (number~) render_init::$10 ← (byte) PLAYFIELD_LINES#0 - (unumber)(number) 1
Adding number conversion cast (unumber) $28 in (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (number) $28
Adding number conversion cast (unumber) $28 in (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (number) $28
Adding number conversion cast (unumber) 0 in (byte) render_screen_show#1 ← (number) 0
Adding number conversion cast (unumber) $20 in (byte) render_screen_render#1 ← (number) $20
Adding number conversion cast (unumber) 0 in (byte) render_show::d018val#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) render_show::$0 ← (byte) render_screen_show#10 == (number) 0
Adding number conversion cast (unumber) $3fff in (number~) render_show::toD0181_$1#0 ← (word~) render_show::toD0181_$0#0 & (number) $3fff
Adding number conversion cast (unumber) render_show::toD0181_$1#0 in (number~) render_show::toD0181_$1#0 ← (word~) render_show::toD0181_$0#0 & (unumber)(number) $3fff
Adding number conversion cast (unumber) 4 in (number~) render_show::toD0181_$2#0 ← (unumber~) render_show::toD0181_$1#0 * (number) 4
Adding number conversion cast (unumber) render_show::toD0181_$2#0 in (number~) render_show::toD0181_$2#0 ← (unumber~) render_show::toD0181_$1#0 * (unumber)(number) 4
Adding number conversion cast (unumber) render_show::toD0181_$3#0 in (number~) render_show::toD0181_$3#0 ← > (unumber~) render_show::toD0181_$2#0
Adding number conversion cast (unumber) 4 in (number~) render_show::toD0181_$6#0 ← (byte~) render_show::toD0181_$5#0 / (number) 4
Adding number conversion cast (unumber) render_show::toD0181_$6#0 in (number~) render_show::toD0181_$6#0 ← (byte~) render_show::toD0181_$5#0 / (unumber)(number) 4
Adding number conversion cast (unumber) $f in (number~) render_show::toD0181_$7#0 ← (unumber~) render_show::toD0181_$6#0 & (number) $f
Adding number conversion cast (unumber) render_show::toD0181_$7#0 in (number~) render_show::toD0181_$7#0 ← (unumber~) render_show::toD0181_$6#0 & (unumber)(number) $f
Adding number conversion cast (unumber) render_show::toD0181_$8#0 in (number~) render_show::toD0181_$8#0 ← (unumber~) render_show::toD0181_$3#0 | (unumber~) render_show::toD0181_$7#0
Adding number conversion cast (unumber) $3fff in (number~) render_show::toD0182_$1#0 ← (word~) render_show::toD0182_$0#0 & (number) $3fff
Adding number conversion cast (unumber) render_show::toD0182_$1#0 in (number~) render_show::toD0182_$1#0 ← (word~) render_show::toD0182_$0#0 & (unumber)(number) $3fff
Adding number conversion cast (unumber) 4 in (number~) render_show::toD0182_$2#0 ← (unumber~) render_show::toD0182_$1#0 * (number) 4
Adding number conversion cast (unumber) render_show::toD0182_$2#0 in (number~) render_show::toD0182_$2#0 ← (unumber~) render_show::toD0182_$1#0 * (unumber)(number) 4
Adding number conversion cast (unumber) render_show::toD0182_$3#0 in (number~) render_show::toD0182_$3#0 ← > (unumber~) render_show::toD0182_$2#0
Adding number conversion cast (unumber) 4 in (number~) render_show::toD0182_$6#0 ← (byte~) render_show::toD0182_$5#0 / (number) 4
Adding number conversion cast (unumber) render_show::toD0182_$6#0 in (number~) render_show::toD0182_$6#0 ← (byte~) render_show::toD0182_$5#0 / (unumber)(number) 4
Adding number conversion cast (unumber) $f in (number~) render_show::toD0182_$7#0 ← (unumber~) render_show::toD0182_$6#0 & (number) $f
Adding number conversion cast (unumber) render_show::toD0182_$7#0 in (number~) render_show::toD0182_$7#0 ← (unumber~) render_show::toD0182_$6#0 & (unumber)(number) $f
Adding number conversion cast (unumber) render_show::toD0182_$8#0 in (number~) render_show::toD0182_$8#0 ← (unumber~) render_show::toD0182_$3#0 | (unumber~) render_show::toD0182_$7#0
Adding number conversion cast (unumber) $20 in (byte) render_screen_render#3 ← (byte) render_screen_render#10 ^ (number) $20
Adding number conversion cast (unumber) $20 in (byte) render_screen_show#3 ← (byte) render_screen_show#12 ^ (number) $20
Adding number conversion cast (unumber) 0 in (bool~) render_score::$0 ← (byte) render_screen_render#12 == (number) 0
Adding number conversion cast (unumber) $28*5+$1c in (word) render_score::score_offset#0 ← (number) $28*(number) 5+(number) $1c
Adding number conversion cast (unumber) 2 in (byte) render_bcd::bcd#0 ← *((byte*) render_score::score_bytes#0 + (number) 2)
Adding number conversion cast (unumber) 0 in (byte) render_bcd::only_low#0 ← (number) 0
Adding number conversion cast (unumber) 2 in (number~) render_score::$4 ← (word) render_score::score_offset#0 + (number) 2
Adding number conversion cast (unumber) render_score::$4 in (number~) render_score::$4 ← (word) render_score::score_offset#0 + (unumber)(number) 2
Adding number conversion cast (unumber) 1 in (byte) render_bcd::bcd#1 ← *((byte*) render_score::score_bytes#1 + (number) 1)
Adding number conversion cast (unumber) 0 in (byte) render_bcd::only_low#1 ← (number) 0
Adding number conversion cast (unumber) 4 in (number~) render_score::$6 ← (word) render_score::score_offset#0 + (number) 4
Adding number conversion cast (unumber) render_score::$6 in (number~) render_score::$6 ← (word) render_score::score_offset#0 + (unumber)(number) 4
Adding number conversion cast (unumber) 0 in (byte) render_bcd::bcd#2 ← *((byte*) render_score::score_bytes#2 + (number) 0)
Adding number conversion cast (unumber) 0 in (byte) render_bcd::only_low#2 ← (number) 0
Adding number conversion cast (unumber) $28*1+$16 in (word) render_score::lines_offset#0 ← (number) $28*(number) 1+(number) $16
Adding number conversion cast (unumber) 1 in (byte) render_bcd::only_low#3 ← (number) 1
Adding number conversion cast (unumber) 1 in (number~) render_score::$10 ← (word) render_score::lines_offset#0 + (number) 1
Adding number conversion cast (unumber) render_score::$10 in (number~) render_score::$10 ← (word) render_score::lines_offset#0 + (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (byte) render_bcd::only_low#4 ← (number) 0
Adding number conversion cast (unumber) $28*$13+$1f in (word) render_score::level_offset#0 ← (number) $28*(number) $13+(number) $1f
Adding number conversion cast (unumber) 0 in (byte) render_bcd::only_low#5 ← (number) 0
Adding number conversion cast (unumber) $35 in (byte) render_bcd::ZERO_CHAR#0 ← (number) $35
Adding number conversion cast (unumber) 0 in (bool~) render_bcd::$1 ← (byte) render_bcd::only_low#6 == (number) 0
Adding number conversion cast (unumber) $f in (number~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (number) $f
Adding number conversion cast (unumber) render_bcd::$3 in (number~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (unumber)(number) $f
Adding number conversion cast (unumber) render_bcd::$4 in (number~) render_bcd::$4 ← (byte) render_bcd::ZERO_CHAR#0 + (unumber~) render_bcd::$3
Adding number conversion cast (unumber) 4 in (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#7 >> (number) 4
Adding number conversion cast (unumber) 0 in (byte) render_screen_original::SPACE#0 ← (number) 0
Adding number conversion cast (unumber) $20*2 in (byte*~) render_screen_original::$0 ← (byte*) PLAYFIELD_SCREEN_ORIGINAL#0 + (number) $20*(number) 2
Adding number conversion cast (unumber) $20*2 in (byte*~) render_screen_original::$1 ← (byte*) PLAYFIELD_COLORS_ORIGINAL#0 + (number) $20*(number) 2
Adding number conversion cast (unumber) 0 in (byte) render_screen_original::x#0 ← (number) 0
Adding number conversion cast (unumber) 4 in (bool~) render_screen_original::$2 ← (byte) render_screen_original::x#1 != (number) 4
Adding number conversion cast (unumber) $24 in (bool~) render_screen_original::$3 ← (byte) render_screen_original::x#2 != (number) $24
Adding number conversion cast (unumber) $28 in (bool~) render_screen_original::$4 ← (byte) render_screen_original::x#3 != (number) $28
Adding number conversion cast (unumber) 2 in (number~) render_playfield::$0 ← (byte) PLAYFIELD_COLS#0 * (number) 2
Adding number conversion cast (unumber) render_playfield::$0 in (number~) render_playfield::$0 ← (byte) PLAYFIELD_COLS#0 * (unumber)(number) 2
Adding number conversion cast (unumber) 1 in (number~) render_playfield::$1 ← (byte) PLAYFIELD_LINES#0 - (number) 1
Adding number conversion cast (unumber) render_playfield::$1 in (number~) render_playfield::$1 ← (byte) PLAYFIELD_LINES#0 - (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (number~) render_playfield::$3 ← (byte) PLAYFIELD_COLS#0 - (number) 1
Adding number conversion cast (unumber) render_playfield::$3 in (number~) render_playfield::$3 ← (byte) PLAYFIELD_COLS#0 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (byte) render_moving::i#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (bool~) render_moving::$0 ← (byte) render_moving::ypos#2 > (number) 1
Adding number conversion cast (unumber) 4 in (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (number) 4
Adding number conversion cast (unumber) 0 in (bool~) render_moving::$2 ← (byte) render_moving::current_cell#0 != (number) 0
Adding number conversion cast (unumber) $28*$c+$18+4 in (word) render_next::next_area_offset#0 ← (number) $28*(number) $c+(number) $18+(number) 4
Adding number conversion cast (unumber) 0 in (bool~) render_next::$0 ← (byte) render_screen_render#15 == (number) 0
Adding number conversion cast (unumber) 0 in (bool~) render_next::$3 ← (byte) render_next::cell#0 != (number) 0
Adding number conversion cast (unumber) 0 in *((byte*) render_next::screen_next_area#6) ← (number) 0
Adding number conversion cast (unumber) $24 in (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#8 + (number) $24
Adding number conversion cast (unumber) $f in *((byte*) SPRITES_ENABLE#0) ← (number) $f
Adding number conversion cast (unumber) 0 in *((byte*) SPRITES_MC#0) ← (number) 0
Adding number conversion cast (unumber) $18+$f*8 in (byte) sprites_init::xpos#0 ← (number) $18+(number) $f*(number) 8
Adding number conversion cast (unumber) 2 in (number~) sprites_init::$0 ← (byte) sprites_init::s#2 * (number) 2
Adding number conversion cast (unumber) sprites_init::$0 in (number~) sprites_init::$0 ← (byte) sprites_init::s#2 * (unumber)(number) 2
Adding number conversion cast (unumber) $18 in (number~) sprites_init::$1 ← (byte) sprites_init::xpos#2 + (number) $18
Adding number conversion cast (unumber) sprites_init::$1 in (number~) sprites_init::$1 ← (byte) sprites_init::xpos#2 + (unumber)(number) $18
Adding number conversion cast (unumber) $31 in (byte) SPRITES_FIRST_YPOS#0 ← (number) $31
Adding number conversion cast (unumber) $13 in (number~) $4 ← (byte) SPRITES_FIRST_YPOS#0 + (number) $13
Adding number conversion cast (unumber) $4 in (number~) $4 ← (byte) SPRITES_FIRST_YPOS#0 + (unumber)(number) $13
Adding number conversion cast (unumber) $15 in (number~) $5 ← (byte) SPRITES_FIRST_YPOS#0 + (number) $15
Adding number conversion cast (unumber) $5 in (number~) $5 ← (byte) SPRITES_FIRST_YPOS#0 + (unumber)(number) $15
Adding number conversion cast (unumber) $40 in (number~) toSpritePtr1_$1#0 ← (word~) toSpritePtr1_$0#0 / (number) $40
Adding number conversion cast (unumber) toSpritePtr1_$1#0 in (number~) toSpritePtr1_$1#0 ← (word~) toSpritePtr1_$0#0 / (unumber)(number) $40
Adding number conversion cast (unumber) 3 in (number~) $7 ← (byte~) $6 + (number) 3
Adding number conversion cast (unumber) $7 in (number~) $7 ← (byte~) $6 + (unumber)(number) 3
Adding number conversion cast (unumber) 0 in (byte) irq_cnt#0 ← (number) 0
Adding number conversion cast (unumber) $7f in *((byte*) VIC_CONTROL#0) ← *((byte*) VIC_CONTROL#0) & (number) $7f
Adding number conversion cast (unumber) 0 in *((byte*) SPRITES_YPOS#0 + (number) 0) ← (byte) sprites_irq::ypos#0
Adding number conversion cast (unumber) 2 in *((byte*) SPRITES_YPOS#0 + (number) 2) ← (byte) sprites_irq::ypos#0
Adding number conversion cast (unumber) 4 in *((byte*) SPRITES_YPOS#0 + (number) 4) ← (byte) sprites_irq::ypos#0
Adding number conversion cast (unumber) 6 in *((byte*) SPRITES_YPOS#0 + (number) 6) ← (byte) sprites_irq::ypos#0
Adding number conversion cast (unumber) 1 in (number~) sprites_irq::$0 ← (byte) irq_raster_next#5 + (number) 1
Adding number conversion cast (unumber) sprites_irq::$0 in (number~) sprites_irq::$0 ← (byte) irq_raster_next#5 + (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) sprites_irq::$1 ← (byte) render_screen_showing#7 == (number) 0
Adding number conversion cast (unumber) 0 in *((byte*) PLAYFIELD_SPRITE_PTRS_1#0 + (number) 0) ← (byte) sprites_irq::ptr#5
Adding number conversion cast (unumber) 1 in *((byte*) PLAYFIELD_SPRITE_PTRS_1#0 + (number) 1) ← (byte) sprites_irq::ptr#1
Adding number conversion cast (unumber) 2 in *((byte*) PLAYFIELD_SPRITE_PTRS_1#0 + (number) 2) ← (byte) sprites_irq::ptr#1
Adding number conversion cast (unumber) 3 in *((byte*) PLAYFIELD_SPRITE_PTRS_1#0 + (number) 3) ← (byte) sprites_irq::ptr#2
Adding number conversion cast (unumber) 0 in *((byte*) PLAYFIELD_SPRITE_PTRS_2#0 + (number) 0) ← (byte) sprites_irq::ptr#6
Adding number conversion cast (unumber) 1 in *((byte*) PLAYFIELD_SPRITE_PTRS_2#0 + (number) 1) ← (byte) sprites_irq::ptr#3
Adding number conversion cast (unumber) 2 in *((byte*) PLAYFIELD_SPRITE_PTRS_2#0 + (number) 2) ← (byte) sprites_irq::ptr#3
Adding number conversion cast (unumber) 3 in *((byte*) PLAYFIELD_SPRITE_PTRS_2#0 + (number) 3) ← (byte) sprites_irq::ptr#4
Adding number conversion cast (unumber) 9 in (bool~) sprites_irq::$2 ← (byte) irq_cnt#1 == (number) 9
Adding number conversion cast (unumber) $15 in (byte) irq_raster_next#1 ← (byte) irq_raster_next#6 + (number) $15
Adding number conversion cast (unumber) $40 in (number~) sprites_irq::toSpritePtr2_$1#0 ← (word~) sprites_irq::toSpritePtr2_$0#0 / (number) $40
Adding number conversion cast (unumber) sprites_irq::toSpritePtr2_$1#0 in (number~) sprites_irq::toSpritePtr2_$1#0 ← (word~) sprites_irq::toSpritePtr2_$0#0 / (unumber)(number) $40
Adding number conversion cast (unumber) $a in (bool~) sprites_irq::$3 ← (byte) irq_cnt#5 == (number) $a
Adding number conversion cast (unumber) 0 in (byte) irq_cnt#2 ← (number) 0
Adding number conversion cast (unumber) $15 in (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#6 + (number) $15
Adding number conversion cast (unumber) 3 in (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#6 + (number) 3
Adding number conversion cast (unumber) $14 in (byte) irq_raster_next#3 ← (byte) irq_raster_next#7 + (number) $14
Adding number conversion cast (unumber) $15 in (byte) irq_sprite_ypos#3 ← (byte) irq_sprite_ypos#7 + (number) $15
Adding number conversion cast (unumber) 3 in (byte) irq_sprite_ptr#3 ← (byte) irq_sprite_ptr#7 + (number) 3
Adding number conversion cast (unumber) 1 in (number~) $15 ← (byte) PLAYFIELD_LINES#0 + (number) 1
Adding number conversion cast (unumber) $15 in (number~) $15 ← (byte) PLAYFIELD_LINES#0 + (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (byte) next_piece_idx#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) current_orientation#0 ← (number) 0
Adding number conversion cast (unumber) $30 in (byte) current_movedown_slow#0 ← (number) $30
Adding number conversion cast (unumber) $a in (byte) current_movedown_fast#0 ← (number) $a
Adding number conversion cast (unumber) 0 in (byte) current_movedown_counter#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) play_init::idx#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) play_init::$1 ← (byte) PLAYFIELD_LINES#0 - (number) 1
Adding number conversion cast (unumber) play_init::$1 in (number~) play_init::$1 ← (byte) PLAYFIELD_LINES#0 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (byte) play_movement::render#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) play_movement::$1 ← (byte) game_over#1 != (number) 0
Adding number conversion cast (unumber) 0 in (byte) play_move_down::movedown#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) play_move_down::$3 ← (byte~) play_move_down::$2 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) play_move_down::$7 ← (byte) play_move_down::movedown#6 != (number) 0
Adding number conversion cast (unumber) 0 in (byte) play_move_down::return#1 ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) play_move_down::$11 ← (byte) current_ypos#16 + (number) 1
Adding number conversion cast (unumber) play_move_down::$11 in (number~) play_move_down::$11 ← (byte) current_ypos#16 + (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (byte) current_movedown_counter#4 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) play_move_down::return#2 ← (number) 1
Adding number conversion cast (unumber) 1 in (number~) play_move_leftright::$7 ← (byte) current_xpos#23 - (number) 1
Adding number conversion cast (unumber) play_move_leftright::$7 in (number~) play_move_leftright::$7 ← (byte) current_xpos#23 - (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (number~) play_move_leftright::$3 ← (byte) current_xpos#24 + (number) 1
Adding number conversion cast (unumber) play_move_leftright::$3 in (number~) play_move_leftright::$3 ← (byte) current_xpos#24 + (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (byte) play_move_leftright::return#1 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) play_move_leftright::return#3 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) play_move_leftright::return#4 ← (number) 1
Adding number conversion cast (unumber) $80 in (byte) play_move_rotate::orientation#0 ← (number) $80
Adding number conversion cast (unumber) $10 in (number~) play_move_rotate::$7 ← (byte) current_orientation#23 - (number) $10
Adding number conversion cast (unumber) play_move_rotate::$7 in (number~) play_move_rotate::$7 ← (byte) current_orientation#23 - (unumber)(number) $10
Adding number conversion cast (unumber) $3f in (number~) play_move_rotate::$8 ← (unumber~) play_move_rotate::$7 & (number) $3f
Adding number conversion cast (unumber) play_move_rotate::$8 in (number~) play_move_rotate::$8 ← (unumber~) play_move_rotate::$7 & (unumber)(number) $3f
Adding number conversion cast (unumber) $10 in (number~) play_move_rotate::$5 ← (byte) current_orientation#24 + (number) $10
Adding number conversion cast (unumber) play_move_rotate::$5 in (number~) play_move_rotate::$5 ← (byte) current_orientation#24 + (unumber)(number) $10
Adding number conversion cast (unumber) $3f in (number~) play_move_rotate::$6 ← (unumber~) play_move_rotate::$5 & (number) $3f
Adding number conversion cast (unumber) play_move_rotate::$6 in (number~) play_move_rotate::$6 ← (unumber~) play_move_rotate::$5 & (unumber)(number) $3f
Adding number conversion cast (unumber) 0 in (byte) play_move_rotate::return#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) play_move_rotate::return#3 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) play_move_rotate::return#4 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) COLLISION_NONE#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) COLLISION_PLAYFIELD#0 ← (number) 1
Adding number conversion cast (unumber) 2 in (byte) COLLISION_BOTTOM#0 ← (number) 2
Adding number conversion cast (unumber) 4 in (byte) COLLISION_LEFT#0 ← (number) 4
Adding number conversion cast (unumber) 8 in (byte) COLLISION_RIGHT#0 ← (number) 8
Adding number conversion cast (unumber) 0 in (byte) play_collision::i#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) play_collision::$1 ← *((byte*) play_collision::piece_gfx#1 + (byte) play_collision::i#2) != (number) 0
Adding number conversion cast (unumber) $80 in (number~) play_collision::$5 ← (byte) play_collision::xp#3 & (number) $80
Adding number conversion cast (unumber) play_collision::$5 in (number~) play_collision::$5 ← (byte) play_collision::xp#3 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) play_collision::$6 ← (unumber~) play_collision::$5 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) play_collision::$10 ← *((byte*) play_collision::playfield_line#1 + (byte) play_collision::xp#5) != (number) 0
Adding number conversion cast (unumber) 0 in (byte) play_lock_current::i#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) play_lock_current::$0 ← *((byte*) current_piece_gfx#22 + (byte) play_lock_current::i#2) != (number) 0
Adding number conversion cast (unumber) 0 in (byte) current_orientation#8 ← (number) 0
Adding number conversion cast (unumber) 7 in (byte) play_spawn_current::piece_idx#0 ← (number) 7
Adding number conversion cast (unumber) 1 in (byte) game_over#5 ← (number) 1
Adding number conversion cast (unumber) 7 in (bool~) play_spawn_current::$4 ← (byte) play_spawn_current::piece_idx#2 == (number) 7
Adding number conversion cast (unumber) 7 in (number~) play_spawn_current::$6 ← (byte~) play_spawn_current::$5 & (number) 7
Adding number conversion cast (unumber) play_spawn_current::$6 in (number~) play_spawn_current::$6 ← (byte~) play_spawn_current::$5 & (unumber)(number) 7
Adding number conversion cast (unumber) 1 in (number~) play_remove_lines::$1 ← (byte~) play_remove_lines::$0 - (number) 1
Adding number conversion cast (unumber) play_remove_lines::$1 in (number~) play_remove_lines::$1 ← (byte~) play_remove_lines::$0 - (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (number~) play_remove_lines::$3 ← (byte~) play_remove_lines::$2 - (number) 1
Adding number conversion cast (unumber) play_remove_lines::$3 in (number~) play_remove_lines::$3 ← (byte~) play_remove_lines::$2 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (byte) play_remove_lines::removed#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) play_remove_lines::$4 ← (byte) PLAYFIELD_LINES#0 - (number) 1
Adding number conversion cast (unumber) play_remove_lines::$4 in (number~) play_remove_lines::$4 ← (byte) PLAYFIELD_LINES#0 - (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (byte) play_remove_lines::full#0 ← (number) 1
Adding number conversion cast (unumber) 1 in (number~) play_remove_lines::$5 ← (byte) PLAYFIELD_COLS#0 - (number) 1
Adding number conversion cast (unumber) play_remove_lines::$5 in (number~) play_remove_lines::$5 ← (byte) PLAYFIELD_COLS#0 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) play_remove_lines::$6 ← (byte) play_remove_lines::c#0 == (number) 0
Adding number conversion cast (unumber) 0 in (byte) play_remove_lines::full#1 ← (number) 0
Adding number conversion cast (unumber) 1 in (bool~) play_remove_lines::$9 ← (byte) play_remove_lines::full#2 == (number) 1
Adding number conversion cast (unumber) $ff in (bool~) play_remove_lines::$13 ← (byte) play_remove_lines::w#6 != (number) $ff
Adding number conversion cast (unumber) 0 in *((byte[$3]) playfield#0 + (byte) play_remove_lines::w#7) ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) play_update_score::$0 ← (byte) play_update_score::removed#1 != (number) 0
Adding number conversion cast (unumber) $f0 in (number~) play_update_score::$3 ← (byte~) play_update_score::$2 & (number) $f0
Adding number conversion cast (unumber) play_update_score::$3 in (number~) play_update_score::$3 ← (byte~) play_update_score::$2 & (unumber)(number) $f0
Adding number conversion cast (unumber) $f0 in (number~) play_update_score::$5 ← (byte~) play_update_score::$4 & (number) $f0
Adding number conversion cast (unumber) play_update_score::$5 in (number~) play_update_score::$5 ← (byte~) play_update_score::$4 & (unumber)(number) $f0
Adding number conversion cast (unumber) $1d in (bool~) play_increase_level::$0 ← (byte) level#7 > (number) $1d
Adding number conversion cast (unumber) 1 in (byte) current_movedown_slow#9 ← (number) 1
Adding number conversion cast (unumber) $f in (number~) play_increase_level::$1 ← (byte) level_bcd#7 & (number) $f
Adding number conversion cast (unumber) play_increase_level::$1 in (number~) play_increase_level::$1 ← (byte) level_bcd#7 & (unumber)(number) $f
Adding number conversion cast (unumber) $a in (bool~) play_increase_level::$2 ← (unumber~) play_increase_level::$1 == (number) $a
Adding number conversion cast (unumber) 6 in (byte) level_bcd#8 ← (byte) level_bcd#21 + (number) 6
Adding number conversion cast (unumber) $ff in (bool~) main::$10 ← *((byte*) RASTER#0) != (number) $ff
Adding number conversion cast (unumber) 0 in (byte) main::render#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) main::$14 ← (byte) game_over#19 == (number) 0
Adding number conversion cast (unumber) 0 in (bool~) main::$17 ← (byte) main::render#2 != (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Added casts to value list in (byte[8]) keyboard_matrix_row_bitmask#0 ← (byte[8]){ (byte)(number) $fe, (byte)(number) $fd, (byte)(number) $fb, (byte)(number) $f7, (byte)(number) $ef, (byte)(number) $df, (byte)(number) $bf, (byte)(number) $7f }
Added casts to value list in (byte[8]) keyboard_matrix_col_bitmask#0 ← (byte[8]){ (byte)(number) 1, (byte)(number) 2, (byte)(number) 4, (byte)(number) 8, (byte)(number) $10, (byte)(number) $20, (byte)(number) $40, (byte)(number) $80 }
Added casts to value list in (byte[4*4*4]) PIECE_T#0 ← (byte[4*4*4]){ (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Added casts to value list in (byte[4*4*4]) PIECE_S#0 ← (byte[4*4*4]){ (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Added casts to value list in (byte[4*4*4]) PIECE_Z#0 ← (byte[4*4*4]){ (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Added casts to value list in (byte[4*4*4]) PIECE_L#0 ← (byte[4*4*4]){ (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Added casts to value list in (byte[4*4*4]) PIECE_J#0 ← (byte[4*4*4]){ (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Added casts to value list in (byte[4*4*4]) PIECE_O#0 ← (byte[4*4*4]){ (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Added casts to value list in (byte[4*4*4]) PIECE_I#0 ← (byte[4*4*4]){ (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0 }
Added casts to value list in (byte[]) PIECES_CHARS#0 ← (byte[]){ (byte)(number) $65, (byte)(number) $66, (byte)(number) $a6, (byte)(number) $66, (byte)(number) $65, (byte)(number) $65, (byte)(number) $a6 }
Added casts to value list in (byte[]) PIECES_NEXT_CHARS#0 ← (byte[]){ (byte)(number) $63, (byte)(number) $64, (byte)(number) $a4, (byte)(number) $64, (byte)(number) $63, (byte)(number) $63, (byte)(number) $a4 }
Added casts to value list in (byte[]) PIECES_START_X#0 ← (byte[]){ (byte)(number) 4, (byte)(number) 4, (byte)(number) 4, (byte)(number) 4, (byte)(number) 4, (byte)(number) 4, (byte)(number) 4 }
Added casts to value list in (byte[]) PIECES_START_Y#0 ← (byte[]){ (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 1 }
Added casts to value list in (byte[]) MOVEDOWN_SLOW_SPEEDS#0 ← (byte[]){ (byte)(number) $30, (byte)(number) $2b, (byte)(number) $26, (byte)(number) $21, (byte)(number) $1c, (byte)(number) $17, (byte)(number) $12, (byte)(number) $d, (byte)(number) 8, (byte)(number) 6, (byte)(number) 5, (byte)(number) 5, (byte)(number) 5, (byte)(number) 4, (byte)(number) 4, (byte)(number) 4, (byte)(number) 3, (byte)(number) 3, (byte)(number) 3, (byte)(number) 2, (byte)(number) 2, (byte)(number) 2, (byte)(number) 2, (byte)(number) 2, (byte)(number) 2, (byte)(number) 2, (byte)(number) 2, (byte)(number) 2, (byte)(number) 2, (byte)(number) 1 }
Added casts to value list in (dword[]) SCORE_BASE_BCD#0 ← (dword[]){ (dword)(number) 0, (dword)(number) $40, (dword)(number) $100, (dword)(number) $300, (dword)(number) $1200 }
Successful SSA optimization PassNAddInitializerValueListTypeCasts
Inlining cast (byte*) PROCPORT_DDR#0 ← (byte*)(number) 0
Inlining cast (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (unumber)(number) 7
Inlining cast (byte*) PROCPORT#0 ← (byte*)(number) 1
Inlining cast (byte) PROCPORT_RAM_IO#0 ← (unumber)(number) 5
Inlining cast (word) SPRITE_PTRS#0 ← (unumber)(number) $3f8
Inlining cast (byte*) SPRITES_XPOS#0 ← (byte*)(number) $d000
Inlining cast (byte*) SPRITES_YPOS#0 ← (byte*)(number) $d001
Inlining cast (byte*) RASTER#0 ← (byte*)(number) $d012
Inlining cast (byte*) SPRITES_ENABLE#0 ← (byte*)(number) $d015
Inlining cast (byte*) SPRITES_EXPAND_Y#0 ← (byte*)(number) $d017
Inlining cast (byte*) SPRITES_MC#0 ← (byte*)(number) $d01c
Inlining cast (byte*) SPRITES_EXPAND_X#0 ← (byte*)(number) $d01d
Inlining cast (byte*) BORDERCOL#0 ← (byte*)(number) $d020
Inlining cast (byte*) BGCOL1#0 ← (byte*)(number) $d021
Inlining cast (byte*) BGCOL2#0 ← (byte*)(number) $d022
Inlining cast (byte*) BGCOL3#0 ← (byte*)(number) $d023
Inlining cast (byte*) BGCOL4#0 ← (byte*)(number) $d024
Inlining cast (byte*) SPRITES_COLS#0 ← (byte*)(number) $d027
Inlining cast (byte*) VIC_CONTROL#0 ← (byte*)(number) $d011
Inlining cast (byte*) D011#0 ← (byte*)(number) $d011
Inlining cast (byte) VIC_ECM#0 ← (unumber)(number) $40
Inlining cast (byte) VIC_DEN#0 ← (unumber)(number) $10
Inlining cast (byte) VIC_RSEL#0 ← (unumber)(number) 8
Inlining cast (byte*) D018#0 ← (byte*)(number) $d018
Inlining cast (byte*) IRQ_STATUS#0 ← (byte*)(number) $d019
Inlining cast (byte*) IRQ_ENABLE#0 ← (byte*)(number) $d01a
Inlining cast (byte) IRQ_RASTER#0 ← (unumber)(number) 1
Inlining cast (byte*) COLS#0 ← (byte*)(number) $d800
Inlining cast (byte*) CIA1_PORT_A#0 ← (byte*)(number) $dc00
Inlining cast (byte*) CIA1_PORT_B#0 ← (byte*)(number) $dc01
Inlining cast (byte*) CIA1_INTERRUPT#0 ← (byte*)(number) $dc0d
Inlining cast (byte*) CIA2_PORT_A#0 ← (byte*)(number) $dd00
Inlining cast (byte*) CIA2_PORT_A_DDR#0 ← (byte*)(number) $dd02
Inlining cast (byte) CIA_INTERRUPT_CLEAR#0 ← (unumber)(number) $7f
Inlining cast (void()**) HARDWARE_IRQ#0 ← (void()**)(number) $fffe
Inlining cast (byte) BLACK#0 ← (unumber)(number) 0
Inlining cast (byte) RED#0 ← (unumber)(number) 2
Inlining cast (byte) CYAN#0 ← (unumber)(number) 3
Inlining cast (byte) PURPLE#0 ← (unumber)(number) 4
Inlining cast (byte) GREEN#0 ← (unumber)(number) 5
Inlining cast (byte) BLUE#0 ← (unumber)(number) 6
Inlining cast (byte) ORANGE#0 ← (unumber)(number) 8
Inlining cast (byte) PINK#0 ← (unumber)(number) $a
Inlining cast (byte) DARK_GREY#0 ← (unumber)(number) $b
Inlining cast (byte) GREY#0 ← (unumber)(number) $c
Inlining cast (byte) LIGHT_GREEN#0 ← (unumber)(number) $d
Inlining cast (byte) LIGHT_BLUE#0 ← (unumber)(number) $e
Inlining cast (byte) KEY_Z#0 ← (unumber)(number) $c
Inlining cast (byte) KEY_LSHIFT#0 ← (unumber)(number) $f
Inlining cast (byte) KEY_X#0 ← (unumber)(number) $17
Inlining cast (byte) KEY_DOT#0 ← (unumber)(number) $2c
Inlining cast (byte) KEY_COMMA#0 ← (unumber)(number) $2f
Inlining cast (byte) KEY_RSHIFT#0 ← (unumber)(number) $34
Inlining cast (byte) KEY_CTRL#0 ← (unumber)(number) $3a
Inlining cast (byte) KEY_SPACE#0 ← (unumber)(number) $3c
Inlining cast (byte) KEY_COMMODORE#0 ← (unumber)(number) $3d
Inlining cast (byte) keyboard_events_size#0 ← (unumber)(number) 0
Inlining cast (byte) keyboard_modifiers#0 ← (unumber)(number) 0
Inlining cast (byte) KEY_MODIFIER_LSHIFT#0 ← (unumber)(number) 1
Inlining cast (byte) KEY_MODIFIER_RSHIFT#0 ← (unumber)(number) 2
Inlining cast (byte) KEY_MODIFIER_CTRL#0 ← (unumber)(number) 4
Inlining cast (byte) KEY_MODIFIER_COMMODORE#0 ← (unumber)(number) 8
Inlining cast (byte) keyboard_event_scan::keycode#0 ← (unumber)(number) 0
Inlining cast (byte) keyboard_modifiers#1 ← (unumber)(number) 0
Inlining cast (byte) keyboard_event_get::return#0 ← (unumber)(number) $ff
Inlining cast (word*) SID_VOICE3_FREQ#0 ← (word*)(number) $d40e
Inlining cast (byte*) SID_VOICE3_CONTROL#0 ← (byte*)(number) $d412
Inlining cast (byte) SID_CONTROL_NOISE#0 ← (unumber)(number) $80
Inlining cast (byte*) SID_VOICE3_OSC#0 ← (byte*)(number) $d41b
Inlining cast *((word*) SID_VOICE3_FREQ#0) ← (unumber)(number) $ffff
Inlining cast (byte*) PLAYFIELD_SCREEN_1#0 ← (byte*)(number) $400
Inlining cast (byte*) PLAYFIELD_SCREEN_2#0 ← (byte*)(number) $2c00
Inlining cast (byte*) PLAYFIELD_SCREEN_ORIGINAL#0 ← (byte*)(number) $1800
Inlining cast (byte*) PLAYFIELD_COLORS_ORIGINAL#0 ← (byte*)(number) $1c00
Inlining cast (byte*) PLAYFIELD_SPRITES#0 ← (byte*)(number) $2000
Inlining cast (byte*) PLAYFIELD_CHARSET#0 ← (byte*)(number) $2800
Inlining cast (byte) PLAYFIELD_LINES#0 ← (unumber)(number) $16
Inlining cast (byte) PLAYFIELD_COLS#0 ← (unumber)(number) $a
Inlining cast (byte) render_screen_render#0 ← (unumber)(number) $20
Inlining cast (byte) render_screen_show#0 ← (unumber)(number) 0
Inlining cast (byte) render_screen_showing#0 ← (unumber)(number) 0
Inlining cast (dword) score_bcd#0 ← (unumber)(number) 0
Inlining cast (word) lines_bcd#0 ← (unumber)(number) 0
Inlining cast (byte) level_bcd#0 ← (unumber)(number) 0
Inlining cast (byte) level#0 ← (unumber)(number) 0
Inlining cast (byte) game_over#0 ← (unumber)(number) 0
Inlining cast *((byte*) CIA2_PORT_A_DDR#0) ← (unumber)(number) 3
Inlining cast (word~) render_init::vicSelectGfxBank1_toDd001_$0#0 ← (word)(byte*) render_init::vicSelectGfxBank1_toDd001_gfx#1
Inlining cast (byte) render_screen_show#1 ← (unumber)(number) 0
Inlining cast (byte) render_screen_render#1 ← (unumber)(number) $20
Inlining cast (byte) render_show::d018val#0 ← (unumber)(number) 0
Inlining cast (word~) render_show::toD0181_$0#0 ← (word)(byte*) render_show::toD0181_screen#1
Inlining cast (word~) render_show::toD0181_$4#0 ← (word)(byte*) render_show::toD0181_gfx#1
Inlining cast (word~) render_show::toD0182_$0#0 ← (word)(byte*) render_show::toD0182_screen#1
Inlining cast (word~) render_show::toD0182_$4#0 ← (word)(byte*) render_show::toD0182_gfx#1
Inlining cast (byte*~) render_score::$2 ← (byte*)(dword*~) render_score::$1
Inlining cast (word) render_score::score_offset#0 ← (unumber)(number) $28*(number) 5+(number) $1c
Inlining cast (byte) render_bcd::only_low#0 ← (unumber)(number) 0
Inlining cast (byte) render_bcd::only_low#1 ← (unumber)(number) 0
Inlining cast (byte) render_bcd::only_low#2 ← (unumber)(number) 0
Inlining cast (word) render_score::lines_offset#0 ← (unumber)(number) $28*(number) 1+(number) $16
Inlining cast (byte) render_bcd::only_low#3 ← (unumber)(number) 1
Inlining cast (byte) render_bcd::only_low#4 ← (unumber)(number) 0
Inlining cast (word) render_score::level_offset#0 ← (unumber)(number) $28*(number) $13+(number) $1f
Inlining cast (byte) render_bcd::only_low#5 ← (unumber)(number) 0
Inlining cast (byte) render_bcd::ZERO_CHAR#0 ← (unumber)(number) $35
Inlining cast (byte) render_screen_original::SPACE#0 ← (unumber)(number) 0
Inlining cast (byte) render_screen_original::x#0 ← (unumber)(number) 0
Inlining cast (byte) render_moving::i#0 ← (unumber)(number) 0
Inlining cast (word) render_next::next_area_offset#0 ← (unumber)(number) $28*(number) $c+(number) $18+(number) 4
Inlining cast (byte*) render_next::next_piece_gfx#0 ← (byte*)*((word[]) PIECES#0 + (byte~) render_next::$6)
Inlining cast *((byte*) render_next::screen_next_area#6) ← (unumber)(number) 0
Inlining cast *((byte*) SPRITES_ENABLE#0) ← (unumber)(number) $f
Inlining cast *((byte*) SPRITES_MC#0) ← (unumber)(number) 0
Inlining cast (byte) sprites_init::xpos#0 ← (unumber)(number) $18+(number) $f*(number) 8
Inlining cast (byte) SPRITES_FIRST_YPOS#0 ← (unumber)(number) $31
Inlining cast (word~) toSpritePtr1_$0#0 ← (word)(byte*) toSpritePtr1_sprite#1
Inlining cast (byte~) toSpritePtr1_$2#0 ← (byte)(unumber~) toSpritePtr1_$1#0
Inlining cast (byte) irq_cnt#0 ← (unumber)(number) 0
Inlining cast (word~) sprites_irq::toSpritePtr2_$0#0 ← (word)(byte*) sprites_irq::toSpritePtr2_sprite#1
Inlining cast (byte~) sprites_irq::toSpritePtr2_$2#0 ← (byte)(unumber~) sprites_irq::toSpritePtr2_$1#0
Inlining cast (byte) irq_cnt#2 ← (unumber)(number) 0
Inlining cast (word~) $8 ← (word)(byte[4*4*4]) PIECE_T#0
Inlining cast (word~) $9 ← (word)(byte[4*4*4]) PIECE_S#0
Inlining cast (word~) $10 ← (word)(byte[4*4*4]) PIECE_Z#0
Inlining cast (word~) $11 ← (word)(byte[4*4*4]) PIECE_J#0
Inlining cast (word~) $12 ← (word)(byte[4*4*4]) PIECE_O#0
Inlining cast (word~) $13 ← (word)(byte[4*4*4]) PIECE_I#0
Inlining cast (word~) $14 ← (word)(byte[4*4*4]) PIECE_L#0
Inlining cast (byte) next_piece_idx#0 ← (unumber)(number) 0
Inlining cast (byte*) current_piece#0 ← (byte*)(number) 0
Inlining cast (byte) current_orientation#0 ← (unumber)(number) 0
Inlining cast (byte) current_movedown_slow#0 ← (unumber)(number) $30
Inlining cast (byte) current_movedown_fast#0 ← (unumber)(number) $a
Inlining cast (byte) current_movedown_counter#0 ← (unumber)(number) 0
Inlining cast (byte) play_init::idx#0 ← (unumber)(number) 0
Inlining cast (byte) play_movement::render#0 ← (unumber)(number) 0
Inlining cast (byte) play_move_down::movedown#0 ← (unumber)(number) 0
Inlining cast (byte) play_move_down::return#1 ← (unumber)(number) 0
Inlining cast (byte) current_movedown_counter#4 ← (unumber)(number) 0
Inlining cast (byte) play_move_down::return#2 ← (unumber)(number) 1
Inlining cast (byte) play_move_leftright::return#1 ← (unumber)(number) 1
Inlining cast (byte) play_move_leftright::return#3 ← (unumber)(number) 0
Inlining cast (byte) play_move_leftright::return#4 ← (unumber)(number) 1
Inlining cast (byte) play_move_rotate::orientation#0 ← (unumber)(number) $80
Inlining cast (byte) play_move_rotate::return#1 ← (unumber)(number) 0
Inlining cast (byte) play_move_rotate::return#3 ← (unumber)(number) 0
Inlining cast (byte) play_move_rotate::return#4 ← (unumber)(number) 1
Inlining cast (byte) COLLISION_NONE#0 ← (unumber)(number) 0
Inlining cast (byte) COLLISION_PLAYFIELD#0 ← (unumber)(number) 1
Inlining cast (byte) COLLISION_BOTTOM#0 ← (unumber)(number) 2
Inlining cast (byte) COLLISION_LEFT#0 ← (unumber)(number) 4
Inlining cast (byte) COLLISION_RIGHT#0 ← (unumber)(number) 8
Inlining cast (byte) play_collision::i#0 ← (unumber)(number) 0
Inlining cast (byte) play_lock_current::i#0 ← (unumber)(number) 0
Inlining cast (byte*) current_piece#5 ← (byte*)*((word[]) PIECES#0 + (byte~) play_spawn_current::$7)
Inlining cast (byte) current_orientation#8 ← (unumber)(number) 0
Inlining cast (byte) play_spawn_current::piece_idx#0 ← (unumber)(number) 7
Inlining cast (byte) game_over#5 ← (unumber)(number) 1
Inlining cast (byte) play_remove_lines::removed#0 ← (unumber)(number) 0
Inlining cast (byte) play_remove_lines::full#0 ← (unumber)(number) 1
Inlining cast (byte) play_remove_lines::full#1 ← (unumber)(number) 0
Inlining cast *((byte[$3]) playfield#0 + (byte) play_remove_lines::w#7) ← (unumber)(number) 0
Inlining cast (byte) current_movedown_slow#9 ← (unumber)(number) 1
Inlining cast (byte) main::render#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 0
Simplifying constant integer cast 7
Simplifying constant pointer cast (byte*) 1
Simplifying constant integer cast 5
Simplifying constant integer cast $3f8
Simplifying constant pointer cast (byte*) 53248
Simplifying constant pointer cast (byte*) 53249
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53269
Simplifying constant pointer cast (byte*) 53271
Simplifying constant pointer cast (byte*) 53276
Simplifying constant pointer cast (byte*) 53277
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53281
Simplifying constant pointer cast (byte*) 53282
Simplifying constant pointer cast (byte*) 53283
Simplifying constant pointer cast (byte*) 53284
Simplifying constant pointer cast (byte*) 53287
Simplifying constant pointer cast (byte*) 53265
Simplifying constant pointer cast (byte*) 53265
Simplifying constant integer cast $40
Simplifying constant integer cast $10
Simplifying constant integer cast 8
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (byte*) 53273
Simplifying constant pointer cast (byte*) 53274
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 56320
Simplifying constant pointer cast (byte*) 56321
Simplifying constant pointer cast (byte*) 56333
Simplifying constant pointer cast (byte*) 56576
Simplifying constant pointer cast (byte*) 56578
Simplifying constant integer cast $7f
Simplifying constant pointer cast (void()**) 65534
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast 8
Simplifying constant integer cast $a
Simplifying constant integer cast $b
Simplifying constant integer cast $c
Simplifying constant integer cast $d
Simplifying constant integer cast $e
Simplifying constant integer cast $c
Simplifying constant integer cast $f
Simplifying constant integer cast $17
Simplifying constant integer cast $2c
Simplifying constant integer cast $2f
Simplifying constant integer cast $34
Simplifying constant integer cast $3a
Simplifying constant integer cast $3c
Simplifying constant integer cast $3d
Simplifying constant integer cast $fe
Simplifying constant integer cast $fd
Simplifying constant integer cast $fb
Simplifying constant integer cast $f7
Simplifying constant integer cast $ef
Simplifying constant integer cast $df
Simplifying constant integer cast $bf
Simplifying constant integer cast $7f
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast 8
Simplifying constant integer cast $10
Simplifying constant integer cast $20
Simplifying constant integer cast $40
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant pointer cast (word*) 54286
Simplifying constant pointer cast (byte*) 54290
Simplifying constant integer cast $80
Simplifying constant pointer cast (byte*) 54299
Simplifying constant integer cast $ffff
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 11264
Simplifying constant pointer cast (byte*) 6144
Simplifying constant pointer cast (byte*) 7168
Simplifying constant pointer cast (byte*) 8192
Simplifying constant pointer cast (byte*) 10240
Simplifying constant integer cast $16
Simplifying constant integer cast $a
Simplifying constant integer cast $20
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast $40
Simplifying constant integer cast 3
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast 1
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $20
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $20
Simplifying constant integer cast $20
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $35
Simplifying constant integer cast 0
Simplifying constant integer cast $f
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $24
Simplifying constant integer cast $28
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $24
Simplifying constant integer cast $f
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast $18
Simplifying constant integer cast $31
Simplifying constant integer cast $13
Simplifying constant integer cast $15
Simplifying constant integer cast $40
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast $7f
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 9
Simplifying constant integer cast $15
Simplifying constant integer cast $40
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast $15
Simplifying constant integer cast 3
Simplifying constant integer cast $14
Simplifying constant integer cast $15
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $65
Simplifying constant integer cast $66
Simplifying constant integer cast $a6
Simplifying constant integer cast $66
Simplifying constant integer cast $65
Simplifying constant integer cast $65
Simplifying constant integer cast $a6
Simplifying constant integer cast $63
Simplifying constant integer cast $64
Simplifying constant integer cast $a4
Simplifying constant integer cast $64
Simplifying constant integer cast $63
Simplifying constant integer cast $63
Simplifying constant integer cast $a4
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 0
Simplifying constant integer cast 0
Simplifying constant integer cast $30
Simplifying constant integer cast $2b
Simplifying constant integer cast $26
Simplifying constant integer cast $21
Simplifying constant integer cast $1c
Simplifying constant integer cast $17
Simplifying constant integer cast $12
Simplifying constant integer cast $d
Simplifying constant integer cast 8
Simplifying constant integer cast 6
Simplifying constant integer cast 5
Simplifying constant integer cast 5
Simplifying constant integer cast 5
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 3
Simplifying constant integer cast 3
Simplifying constant integer cast 3
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast $30
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast $100
Simplifying constant integer cast $300
Simplifying constant integer cast $1200
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast $10
Simplifying constant integer cast $3f
Simplifying constant integer cast $10
Simplifying constant integer cast $3f
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 1
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $f0
Simplifying constant integer cast $f0
Simplifying constant integer cast $1d
Simplifying constant integer cast 1
Simplifying constant integer cast $f
Simplifying constant integer cast $a
Simplifying constant integer cast 6
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 5
Finalized unsigned number type (word) $3f8
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) $d
Finalized unsigned number type (byte) $e
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $17
Finalized unsigned number type (byte) $2c
Finalized unsigned number type (byte) $2f
Finalized unsigned number type (byte) $34
Finalized unsigned number type (byte) $3a
Finalized unsigned number type (byte) $3c
Finalized unsigned number type (byte) $3d
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) $80
Finalized unsigned number type (word) $ffff
Finalized unsigned number type (byte) $16
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $35
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $24
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $24
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) $31
Finalized unsigned number type (byte) $13
Finalized unsigned number type (byte) $15
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $15
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $15
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $14
Finalized unsigned number type (byte) $15
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $30
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $3f
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $3f
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $f0
Finalized unsigned number type (byte) $f0
Finalized unsigned number type (byte) $1d
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) keyboard_event_scan::$14 ← (byte) keyboard_event_scan::keycode#3 + (byte) 8
Inferred type updated to byte in (unumber~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#5 | (byte) $40
Inferred type updated to byte in (unumber~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte) 7
Inferred type updated to byte in (unumber~) render_init::vicSelectGfxBank1_toDd001_$2#0 ← (byte~) render_init::vicSelectGfxBank1_toDd001_$1#0 / (byte) $40
Inferred type updated to byte in (unumber~) render_init::vicSelectGfxBank1_toDd001_$3#0 ← (byte) 3 ^ (byte~) render_init::vicSelectGfxBank1_toDd001_$2#0
Inferred type updated to byte in (unumber~) render_init::$3 ← (byte~) render_init::$2 | (byte) 3
Inferred type updated to byte in (unumber~) render_init::$10 ← (byte) PLAYFIELD_LINES#0 - (byte) 1
Inferred type updated to word in (unumber~) render_show::toD0181_$1#0 ← (word~) render_show::toD0181_$0#0 & (word) $3fff
Inferred type updated to word in (unumber~) render_show::toD0181_$2#0 ← (word~) render_show::toD0181_$1#0 * (byte) 4
Inferred type updated to byte in (unumber~) render_show::toD0181_$3#0 ← > (word~) render_show::toD0181_$2#0
Inferred type updated to byte in (unumber~) render_show::toD0181_$6#0 ← (byte~) render_show::toD0181_$5#0 / (byte) 4
Inferred type updated to byte in (unumber~) render_show::toD0181_$7#0 ← (byte~) render_show::toD0181_$6#0 & (byte) $f
Inferred type updated to byte in (unumber~) render_show::toD0181_$8#0 ← (byte~) render_show::toD0181_$3#0 | (byte~) render_show::toD0181_$7#0
Inferred type updated to word in (unumber~) render_show::toD0182_$1#0 ← (word~) render_show::toD0182_$0#0 & (word) $3fff
Inferred type updated to word in (unumber~) render_show::toD0182_$2#0 ← (word~) render_show::toD0182_$1#0 * (byte) 4
Inferred type updated to byte in (unumber~) render_show::toD0182_$3#0 ← > (word~) render_show::toD0182_$2#0
Inferred type updated to byte in (unumber~) render_show::toD0182_$6#0 ← (byte~) render_show::toD0182_$5#0 / (byte) 4
Inferred type updated to byte in (unumber~) render_show::toD0182_$7#0 ← (byte~) render_show::toD0182_$6#0 & (byte) $f
Inferred type updated to byte in (unumber~) render_show::toD0182_$8#0 ← (byte~) render_show::toD0182_$3#0 | (byte~) render_show::toD0182_$7#0
Inferred type updated to word in (unumber~) render_score::$4 ← (word) render_score::score_offset#0 + (byte) 2
Inferred type updated to word in (unumber~) render_score::$6 ← (word) render_score::score_offset#0 + (byte) 4
Inferred type updated to word in (unumber~) render_score::$10 ← (word) render_score::lines_offset#0 + (byte) 1
Inferred type updated to byte in (unumber~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (byte) $f
Inferred type updated to byte in (unumber~) render_bcd::$4 ← (byte) render_bcd::ZERO_CHAR#0 + (byte~) render_bcd::$3
Inferred type updated to byte in (unumber~) render_playfield::$0 ← (byte) PLAYFIELD_COLS#0 * (byte) 2
Inferred type updated to byte in (unumber~) render_playfield::$1 ← (byte) PLAYFIELD_LINES#0 - (byte) 1
Inferred type updated to byte in (unumber~) render_playfield::$3 ← (byte) PLAYFIELD_COLS#0 - (byte) 1
Inferred type updated to byte in (unumber~) sprites_init::$0 ← (byte) sprites_init::s#2 * (byte) 2
Inferred type updated to byte in (unumber~) sprites_init::$1 ← (byte) sprites_init::xpos#2 + (byte) $18
Inferred type updated to byte in (unumber~) $4 ← (byte) SPRITES_FIRST_YPOS#0 + (byte) $13
Inferred type updated to byte in (unumber~) $5 ← (byte) SPRITES_FIRST_YPOS#0 + (byte) $15
Inferred type updated to word in (unumber~) toSpritePtr1_$1#0 ← (word~) toSpritePtr1_$0#0 / (byte) $40
Inferred type updated to byte in (unumber~) $7 ← (byte~) $6 + (byte) 3
Inferred type updated to byte in (unumber~) sprites_irq::$0 ← (byte) irq_raster_next#5 + (byte) 1
Inferred type updated to word in (unumber~) sprites_irq::toSpritePtr2_$1#0 ← (word~) sprites_irq::toSpritePtr2_$0#0 / (byte) $40
Inferred type updated to byte in (unumber~) $15 ← (byte) PLAYFIELD_LINES#0 + (byte) 1
Inferred type updated to byte in (unumber~) play_init::$1 ← (byte) PLAYFIELD_LINES#0 - (byte) 1
Inferred type updated to byte in (unumber~) play_move_down::$11 ← (byte) current_ypos#16 + (byte) 1
Inferred type updated to byte in (unumber~) play_move_leftright::$7 ← (byte) current_xpos#23 - (byte) 1
Inferred type updated to byte in (unumber~) play_move_leftright::$3 ← (byte) current_xpos#24 + (byte) 1
Inferred type updated to byte in (unumber~) play_move_rotate::$7 ← (byte) current_orientation#23 - (byte) $10
Inferred type updated to byte in (unumber~) play_move_rotate::$8 ← (byte~) play_move_rotate::$7 & (byte) $3f
Inferred type updated to byte in (unumber~) play_move_rotate::$5 ← (byte) current_orientation#24 + (byte) $10
Inferred type updated to byte in (unumber~) play_move_rotate::$6 ← (byte~) play_move_rotate::$5 & (byte) $3f
Inferred type updated to byte in (unumber~) play_collision::$5 ← (byte) play_collision::xp#3 & (byte) $80
Inferred type updated to byte in (unumber~) play_spawn_current::$6 ← (byte~) play_spawn_current::$5 & (byte) 7
Inferred type updated to byte in (unumber~) play_remove_lines::$1 ← (byte~) play_remove_lines::$0 - (byte) 1
Inferred type updated to byte in (unumber~) play_remove_lines::$3 ← (byte~) play_remove_lines::$2 - (byte) 1
Inferred type updated to byte in (unumber~) play_remove_lines::$4 ← (byte) PLAYFIELD_LINES#0 - (byte) 1
Inferred type updated to byte in (unumber~) play_remove_lines::$5 ← (byte) PLAYFIELD_COLS#0 - (byte) 1
Inferred type updated to byte in (unumber~) play_update_score::$3 ← (byte~) play_update_score::$2 & (byte) $f0
Inferred type updated to byte in (unumber~) play_update_score::$5 ← (byte~) play_update_score::$4 & (byte) $f0
Inferred type updated to byte in (unumber~) play_increase_level::$1 ← (byte) level_bcd#7 & (byte) $f
Inversing boolean not [99] (bool~) keyboard_event_scan::$18 ← (byte~) keyboard_event_scan::$16 == (byte) 0 from [98] (bool~) keyboard_event_scan::$17 ← (byte~) keyboard_event_scan::$16 != (byte) 0
Inversing boolean not [108] (bool~) keyboard_event_scan::$20 ← (byte) keyboard_events_size#10 == (byte) 8 from [107] (bool~) keyboard_event_scan::$19 ← (byte) keyboard_events_size#10 != (byte) 8
Inversing boolean not [132] (bool~) keyboard_event_scan::$2 ← (byte~) keyboard_event_scan::$0 == (byte) 0 from [131] (bool~) keyboard_event_scan::$1 ← (byte~) keyboard_event_scan::$0 != (byte) 0
Inversing boolean not [141] (bool~) keyboard_event_scan::$5 ← (byte~) keyboard_event_scan::$3 == (byte) 0 from [140] (bool~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 != (byte) 0
Inversing boolean not [153] (bool~) keyboard_event_scan::$8 ← (byte~) keyboard_event_scan::$6 == (byte) 0 from [152] (bool~) keyboard_event_scan::$7 ← (byte~) keyboard_event_scan::$6 != (byte) 0
Inversing boolean not [165] (bool~) keyboard_event_scan::$11 ← (byte~) keyboard_event_scan::$9 == (byte) 0 from [164] (bool~) keyboard_event_scan::$10 ← (byte~) keyboard_event_scan::$9 != (byte) 0
Inversing boolean not [410] (bool~) render_bcd::$2 ← (byte) render_bcd::only_low#6 != (byte) 0 from [409] (bool~) render_bcd::$1 ← (byte) render_bcd::only_low#6 == (byte) 0
Inversing boolean not [511] (bool~) render_moving::$3 ← (byte) render_moving::current_cell#0 == (byte) 0 from [510] (bool~) render_moving::$2 ← (byte) render_moving::current_cell#0 != (byte) 0
Inversing boolean not [763] (bool~) play_movement::$2 ← (byte) game_over#1 == (byte) 0 from [762] (bool~) play_movement::$1 ← (byte) game_over#1 != (byte) 0
Inversing boolean not [805] (bool~) play_move_down::$1 ← (byte) play_move_down::key_event#1 != (byte) KEY_SPACE#0 from [804] (bool~) play_move_down::$0 ← (byte) play_move_down::key_event#1 == (byte) KEY_SPACE#0
Inversing boolean not [814] (bool~) play_move_down::$4 ← (byte~) play_move_down::$2 == (byte) 0 from [813] (bool~) play_move_down::$3 ← (byte~) play_move_down::$2 != (byte) 0
Inversing boolean not [820] (bool~) play_move_down::$6 ← (byte) current_movedown_counter#12 < (byte) current_movedown_slow#19 from [819] (bool~) play_move_down::$5 ← (byte) current_movedown_counter#12 >= (byte) current_movedown_slow#19
Inversing boolean not [824] (bool~) play_move_down::$10 ← (byte) current_movedown_counter#13 < (byte) current_movedown_fast#0 from [823] (bool~) play_move_down::$9 ← (byte) current_movedown_counter#13 >= (byte) current_movedown_fast#0
Inversing boolean not [830] (bool~) play_move_down::$8 ← (byte) play_move_down::movedown#6 == (byte) 0 from [829] (bool~) play_move_down::$7 ← (byte) play_move_down::movedown#6 != (byte) 0
Inversing boolean not [908] (bool~) play_move_leftright::$10 ← (byte~) play_move_leftright::$8 != (byte) COLLISION_NONE#0 from [907] (bool~) play_move_leftright::$9 ← (byte~) play_move_leftright::$8 == (byte) COLLISION_NONE#0
Inversing boolean not [912] (bool~) play_move_leftright::$2 ← (byte) play_move_leftright::key_event#2 != (byte) KEY_DOT#0 from [911] (bool~) play_move_leftright::$1 ← (byte) play_move_leftright::key_event#2 == (byte) KEY_DOT#0
Inversing boolean not [924] (bool~) play_move_leftright::$6 ← (byte~) play_move_leftright::$4 != (byte) COLLISION_NONE#0 from [923] (bool~) play_move_leftright::$5 ← (byte~) play_move_leftright::$4 == (byte) COLLISION_NONE#0
Inversing boolean not [969] (bool~) play_move_rotate::$4 ← (byte~) play_move_rotate::$2 != (byte) COLLISION_NONE#0 from [968] (bool~) play_move_rotate::$3 ← (byte~) play_move_rotate::$2 == (byte) COLLISION_NONE#0
Inversing boolean not [997] (bool~) play_collision::$2 ← *((byte*) play_collision::piece_gfx#1 + (byte) play_collision::i#2) == (byte) 0 from [996] (bool~) play_collision::$1 ← *((byte*) play_collision::piece_gfx#1 + (byte) play_collision::i#2) != (byte) 0
Inversing boolean not [1007] (bool~) play_collision::$4 ← (byte) play_collision::yp#3 < (byte) PLAYFIELD_LINES#0 from [1006] (bool~) play_collision::$3 ← (byte) play_collision::yp#3 >= (byte) PLAYFIELD_LINES#0
Inversing boolean not [1012] (bool~) play_collision::$7 ← (byte~) play_collision::$5 == (byte) 0 from [1011] (bool~) play_collision::$6 ← (byte~) play_collision::$5 != (byte) 0
Inversing boolean not [1020] (bool~) play_collision::$9 ← (byte) play_collision::xp#4 < (byte) PLAYFIELD_COLS#0 from [1019] (bool~) play_collision::$8 ← (byte) play_collision::xp#4 >= (byte) PLAYFIELD_COLS#0
Inversing boolean not [1025] (bool~) play_collision::$11 ← *((byte*) play_collision::playfield_line#1 + (byte) play_collision::xp#5) == (byte) 0 from [1024] (bool~) play_collision::$10 ← *((byte*) play_collision::playfield_line#1 + (byte) play_collision::xp#5) != (byte) 0
Inversing boolean not [1046] (bool~) play_lock_current::$1 ← *((byte*) current_piece_gfx#22 + (byte) play_lock_current::i#2) == (byte) 0 from [1045] (bool~) play_lock_current::$0 ← *((byte*) current_piece_gfx#22 + (byte) play_lock_current::i#2) != (byte) 0
Inversing boolean not [1080] (bool~) play_spawn_current::$3 ← (byte~) play_spawn_current::$1 != (byte) COLLISION_PLAYFIELD#0 from [1079] (bool~) play_spawn_current::$2 ← (byte~) play_spawn_current::$1 == (byte) COLLISION_PLAYFIELD#0
Inversing boolean not [1126] (bool~) play_remove_lines::$7 ← (byte) play_remove_lines::c#0 != (byte) 0 from [1125] (bool~) play_remove_lines::$6 ← (byte) play_remove_lines::c#0 == (byte) 0
Inversing boolean not [1138] (bool~) play_remove_lines::$10 ← (byte) play_remove_lines::full#2 != (byte) 1 from [1137] (bool~) play_remove_lines::$9 ← (byte) play_remove_lines::full#2 == (byte) 1
Inversing boolean not [1161] (bool~) play_update_score::$1 ← (byte) play_update_score::removed#1 == (byte) 0 from [1160] (bool~) play_update_score::$0 ← (byte) play_update_score::removed#1 != (byte) 0
Inversing boolean not [1177] (bool~) play_update_score::$7 ← (byte) play_update_score::lines_before#0 == (byte) play_update_score::lines_after#0 from [1176] (bool~) play_update_score::$6 ← (byte) play_update_score::lines_before#0 != (byte) play_update_score::lines_after#0
Inversing boolean not [1204] (bool~) play_increase_level::$3 ← (byte~) play_increase_level::$1 != (byte) $a from [1203] (bool~) play_increase_level::$2 ← (byte~) play_increase_level::$1 == (byte) $a
Inversing boolean not [1314] (bool~) main::$18 ← (byte) main::render#2 == (byte) 0 from [1313] (bool~) main::$17 ← (byte) main::render#2 != (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)(byte) render_screen_showing#1 = (byte) render_screen_show#11 (byte) render_screen_showing#6 (byte) render_screen_showing#2 
Alias candidate removed (volatile)(byte) IRQ_RASTER_FIRST#0 = (byte~) $4 (byte) irq_raster_next#0 (byte) irq_raster_next#24 (byte) irq_raster_next#23 (byte) irq_raster_next#22 (byte) irq_raster_next#20 (byte) irq_raster_next#17 (byte) irq_raster_next#10 
Alias candidate removed (volatile)(byte) irq_sprite_ypos#0 = (byte~) $5 (byte) irq_sprite_ypos#24 (byte) irq_sprite_ypos#22 (byte) irq_sprite_ypos#21 (byte) irq_sprite_ypos#18 (byte) irq_sprite_ypos#14 (byte) irq_sprite_ypos#9 
Alias candidate removed (volatile)(byte) irq_sprite_ptr#0 = (byte~) $7 (byte) irq_sprite_ptr#18 (byte) irq_sprite_ptr#17 (byte) irq_sprite_ptr#14 
Alias candidate removed (volatile)(byte) sprites_irq::raster_sprite_gfx_modify#0 = (byte~) sprites_irq::$0 
Alias candidate removed (volatile)(byte) sprites_irq::toSpritePtr2_return#0 = (byte~) sprites_irq::toSpritePtr2_$2#0 (byte) sprites_irq::toSpritePtr2_return#2 (byte) sprites_irq::toSpritePtr2_return#1 (byte) sprites_irq::toSpritePtr2_return#3 (byte~) sprites_irq::$5 (byte) irq_sprite_ptr#1 
Alias (byte) keyboard_matrix_read::return#0 = (byte) keyboard_matrix_read::row_pressed_bits#0 (byte~) keyboard_matrix_read::$0 (byte) keyboard_matrix_read::return#3 (byte) keyboard_matrix_read::return#1 
Alias (byte) keyboard_matrix_read::return#2 = (byte) keyboard_matrix_read::return#4 
Alias (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#3 (byte) keyboard_event_scan::row#9 (byte) keyboard_event_scan::row#7 
Alias (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#7 (byte) keyboard_event_scan::keycode#12 (byte) keyboard_event_scan::keycode#3 
Alias (byte) keyboard_events_size#30 = (byte) keyboard_events_size#37 (byte) keyboard_events_size#46 (byte) keyboard_events_size#61 
Alias (byte) keyboard_event_scan::row_scan#0 = (byte~) keyboard_event_scan::$12 (byte) keyboard_event_scan::row_scan#5 
Alias (byte) keyboard_event_scan::keycode#1 = (byte~) keyboard_event_scan::$14 
Alias (byte) keyboard_events_size#10 = (byte) keyboard_events_size#21 (byte) keyboard_events_size#22 (byte) keyboard_events_size#11 (byte) keyboard_events_size#12 
Alias (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#9 (byte) keyboard_event_scan::keycode#8 (byte) keyboard_event_scan::keycode#5 (byte) keyboard_event_scan::keycode#6 
Alias (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#6 (byte) keyboard_event_scan::col#4 (byte) keyboard_event_scan::col#5 (byte) keyboard_event_scan::col#7 
Alias (byte) keyboard_event_scan::row_scan#1 = (byte) keyboard_event_scan::row_scan#6 (byte) keyboard_event_scan::row_scan#2 (byte) keyboard_event_scan::row_scan#7 (byte) keyboard_event_scan::row_scan#8 
Alias (byte) keyboard_event_scan::row#10 = (byte) keyboard_event_scan::row#11 (byte) keyboard_event_scan::row#5 (byte) keyboard_event_scan::row#13 (byte) keyboard_event_scan::row#12 
Alias (byte) keyboard_event_scan::event_type#0 = (byte~) keyboard_event_scan::$21 
Alias (byte) keyboard_event_scan::row_scan#3 = (byte) keyboard_event_scan::row_scan#4 
Alias (byte) keyboard_event_scan::row#6 = (byte) keyboard_event_scan::row#8 
Alias (byte) keyboard_event_scan::keycode#14 = (byte) keyboard_event_scan::keycode#2 
Alias (byte) keyboard_events_size#29 = (byte) keyboard_events_size#60 
Alias (byte) keyboard_events_size#54 = (byte) keyboard_events_size#71 (byte) keyboard_events_size#67 (byte) keyboard_events_size#66 
Alias (byte) keyboard_event_pressed::return#0 = (byte) keyboard_event_pressed::return#7 
Alias (byte) keyboard_modifiers#1 = (byte) keyboard_modifiers#18 (byte) keyboard_modifiers#10 
Alias (byte) keyboard_event_pressed::return#1 = (byte) keyboard_event_pressed::return#8 
Alias (byte) keyboard_modifiers#11 = (byte) keyboard_modifiers#19 (byte) keyboard_modifiers#25 
Alias (byte) keyboard_events_size#55 = (byte) keyboard_events_size#62 (byte) keyboard_events_size#56 
Alias (byte) keyboard_modifiers#2 = (byte~) keyboard_event_scan::$26 
Alias (byte) keyboard_event_pressed::return#2 = (byte) keyboard_event_pressed::return#9 
Alias (byte) keyboard_modifiers#12 = (byte) keyboard_modifiers#20 (byte) keyboard_modifiers#26 
Alias (byte) keyboard_events_size#38 = (byte) keyboard_events_size#47 (byte) keyboard_events_size#39 
Alias (byte) keyboard_modifiers#3 = (byte~) keyboard_event_scan::$27 
Alias (byte) keyboard_event_pressed::return#10 = (byte) keyboard_event_pressed::return#3 
Alias (byte) keyboard_modifiers#13 = (byte) keyboard_modifiers#21 (byte) keyboard_modifiers#27 
Alias (byte) keyboard_events_size#23 = (byte) keyboard_events_size#31 (byte) keyboard_events_size#24 
Alias (byte) keyboard_modifiers#4 = (byte~) keyboard_event_scan::$28 
Alias (byte) keyboard_modifiers#5 = (byte~) keyboard_event_scan::$29 
Alias (byte) keyboard_events_size#13 = (byte) keyboard_events_size#3 
Alias (byte) keyboard_modifiers#14 = (byte) keyboard_modifiers#6 
Alias (byte) keyboard_event_pressed::return#11 = (byte) keyboard_event_pressed::return#4 (byte~) keyboard_event_pressed::$2 (byte) keyboard_event_pressed::return#5 
Alias (byte) keyboard_events_size#14 = (byte) keyboard_events_size#25 (byte) keyboard_events_size#15 
Alias (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#4 
Alias (byte) keyboard_events_size#16 = (byte) keyboard_events_size#5 
Alias (byte) keyboard_events_size#0 = (byte) keyboard_events_size#76 (byte) keyboard_events_size#74 (byte) keyboard_events_size#72 (byte) keyboard_events_size#68 (byte) keyboard_events_size#63 (byte) keyboard_events_size#57 (byte) keyboard_events_size#48 (byte) keyboard_events_size#40 (byte) keyboard_events_size#36 (byte) keyboard_events_size#28 
Alias (byte) keyboard_modifiers#0 = (byte) keyboard_modifiers#58 (byte) keyboard_modifiers#56 (byte) keyboard_modifiers#54 (byte) keyboard_modifiers#51 (byte) keyboard_modifiers#48 (byte) keyboard_modifiers#45 (byte) keyboard_modifiers#39 (byte) keyboard_modifiers#33 (byte) keyboard_modifiers#32 (byte) keyboard_modifiers#24 
Alias (byte*) PLAYFIELD_SPRITE_PTRS_1#0 = (byte*~) $1 
Alias (byte*) PLAYFIELD_SPRITE_PTRS_2#0 = (byte*~) $2 
Alias (byte*) render_init::vicSelectGfxBank1_gfx#0 = (byte*) render_init::vicSelectGfxBank1_gfx#1 (byte*) render_init::vicSelectGfxBank1_toDd001_gfx#0 (byte*) render_init::vicSelectGfxBank1_toDd001_gfx#1 
Alias (byte) render_init::vicSelectGfxBank1_toDd001_return#0 = (byte~) render_init::vicSelectGfxBank1_toDd001_$3#0 (byte) render_init::vicSelectGfxBank1_toDd001_return#2 (byte) render_init::vicSelectGfxBank1_toDd001_return#1 (byte) render_init::vicSelectGfxBank1_toDd001_return#3 (byte~) render_init::vicSelectGfxBank1_$0#0 
Alias (byte*) render_init::li_1#0 = (byte*~) render_init::$7 
Alias (byte*) render_init::li_2#0 = (byte*~) render_init::$9 
Alias (byte) render_screen_show#1 = (byte) render_screen_show#9 (byte) render_screen_show#2 
Alias (byte) render_screen_render#1 = (byte) render_screen_render#9 (byte) render_screen_render#2 
Alias (byte) level#26 = (byte) level#70 (byte) level#84 (byte) level#56 (byte) level#42 (byte) level#71 (byte) level#57 (byte) level#43 (byte) level#27 
Alias (byte) render_screen_show#10 = (byte) render_screen_show#40 (byte) render_screen_show#33 (byte) render_screen_show#25 (byte) render_screen_show#19 (byte) render_screen_show#41 (byte) render_screen_show#34 (byte) render_screen_show#26 (byte) render_screen_show#20 
Alias (byte*) render_show::toD0181_screen#0 = (byte*) render_show::toD0181_screen#1 
Alias (byte*) render_show::toD0181_gfx#0 = (byte*) render_show::toD0181_gfx#1 
Alias (byte) render_show::toD0181_return#0 = (byte~) render_show::toD0181_$8#0 (byte) render_show::toD0181_return#2 (byte) render_show::toD0181_return#1 (byte) render_show::toD0181_return#3 (byte~) render_show::$2 (byte) render_show::d018val#1 
Alias (byte*) render_show::toD0182_screen#0 = (byte*) render_show::toD0182_screen#1 
Alias (byte*) render_show::toD0182_gfx#0 = (byte*) render_show::toD0182_gfx#1 
Alias (byte) render_show::toD0182_return#0 = (byte~) render_show::toD0182_$8#0 (byte) render_show::toD0182_return#2 (byte) render_show::toD0182_return#1 (byte) render_show::toD0182_return#3 (byte~) render_show::$1 (byte) render_show::d018val#2 
Alias (byte) render_screen_render#11 = (byte) render_screen_render#3 (byte) render_screen_render#4 
Alias (byte) render_screen_show#13 = (byte) render_screen_show#3 (byte) render_screen_show#4 
Alias (dword) score_bcd#20 = (dword) score_bcd#33 (dword) score_bcd#21 
Alias (word) lines_bcd#56 = (word) lines_bcd#67 (word) lines_bcd#57 
Alias (byte) level_bcd#83 = (byte) level_bcd#91 (byte) level_bcd#84 
Alias (byte*) render_score::score_bytes#0 = (byte*~) render_score::$2 (byte*) render_score::score_bytes#1 (byte*) render_score::score_bytes#2 
Alias (byte*) render_score::screen#3 = (byte*) render_score::screen#4 (byte*) render_score::screen#5 (byte*) render_score::screen#6 (byte*) render_score::screen#7 (byte*) render_score::screen#8 
Alias (word) lines_bcd#10 = (word) lines_bcd#33 (word) lines_bcd#45 (word) lines_bcd#21 (word) lines_bcd#11 
Alias (byte) level_bcd#13 = (byte) level_bcd#67 (byte) level_bcd#77 (byte) level_bcd#55 (byte) level_bcd#42 (byte) level_bcd#26 
Alias (word) render_bcd::offset#1 = (word~) render_score::$4 
Alias (word) render_bcd::offset#2 = (word~) render_score::$6 
Alias (byte) render_bcd::bcd#3 = (byte~) render_score::$8 
Alias (word) render_bcd::offset#4 = (word~) render_score::$10 
Alias (byte) render_bcd::bcd#4 = (byte~) render_score::$11 
Alias (byte*) render_bcd::screen_pos#0 = (byte*~) render_bcd::$0 (byte*) render_bcd::screen_pos#4 
Alias (byte) render_bcd::bcd#7 = (byte) render_bcd::bcd#8 
Alias (byte*) render_screen_original::oscr#0 = (byte*~) render_screen_original::$0 
Alias (byte*) render_screen_original::ocols#0 = (byte*~) render_screen_original::$1 
Alias (byte) render_screen_original::y#2 = (byte) render_screen_original::y#3 
Alias (byte*) render_screen_original::screen#10 = (byte*) render_screen_original::screen#4 
Alias (byte*) render_screen_original::cols#3 = (byte*) render_screen_original::cols#8 
Alias (byte*) render_screen_original::oscr#5 = (byte*) render_screen_original::oscr#6 
Alias (byte*) render_screen_original::ocols#5 = (byte*) render_screen_original::ocols#6 
Alias (byte) render_playfield::i#0 = (byte~) render_playfield::$0 
Alias (byte) render_playfield::l#3 = (byte) render_playfield::l#4 
Alias (byte) render_screen_render#23 = (byte) render_screen_render#32 
Alias (byte) render_playfield::i#1 = (byte) render_playfield::i#4 
Alias (byte) render_screen_render#14 = (byte) render_screen_render#24 (byte) render_screen_render#42 
Alias (byte) render_moving::ypos#2 = (byte) render_moving::ypos#3 (byte) render_moving::ypos#6 
Alias (byte) current_xpos#16 = (byte) current_xpos#36 (byte) current_xpos#79 
Alias (byte*) current_piece_gfx#29 = (byte*) current_piece_gfx#46 (byte*) current_piece_gfx#83 
Alias (byte) render_moving::i#3 = (byte) render_moving::i#6 (byte) render_moving::i#5 
Alias (byte) current_piece_char#37 = (byte) current_piece_char#52 (byte) current_piece_char#85 
Alias (byte) render_moving::l#4 = (byte) render_moving::l#8 (byte) render_moving::l#5 
Alias (byte) current_piece_char#12 = (byte) current_piece_char#24 
Alias (byte*) render_moving::screen_line#1 = (byte*) render_moving::screen_line#2 
Alias (byte) render_moving::xpos#3 = (byte) render_moving::xpos#4 
Alias (byte) render_moving::c#3 = (byte) render_moving::c#4 
Alias (byte) render_moving::ypos#7 = (byte) render_moving::ypos#8 
Alias (byte) render_moving::l#6 = (byte) render_moving::l#7 
Alias (byte*) current_piece_gfx#15 = (byte*) current_piece_gfx#47 
Alias (byte) render_moving::i#2 = (byte) render_moving::i#9 
Alias (byte) render_screen_render#47 = (byte) render_screen_render#48 
Alias (byte) current_xpos#95 = (byte) current_xpos#96 
Alias (byte) next_piece_idx#24 = (byte) next_piece_idx#36 (byte) next_piece_idx#25 
Alias (byte*) render_next::screen_next_area#1 = (byte*~) render_next::$2 
Alias (byte*) render_next::screen_next_area#2 = (byte*~) render_next::$1 
Alias (byte) render_next::next_piece_char#1 = (byte) render_next::next_piece_char#2 (byte) render_next::next_piece_char#6 
Alias (byte*) render_next::screen_next_area#5 = (byte*) render_next::screen_next_area#9 (byte*) render_next::screen_next_area#6 
Alias (byte) render_next::c#3 = (byte) render_next::c#5 (byte) render_next::c#4 
Alias (byte*) render_next::next_piece_gfx#1 = (byte*) render_next::next_piece_gfx#6 (byte*) render_next::next_piece_gfx#7 
Alias (byte) render_next::l#4 = (byte) render_next::l#6 (byte) render_next::l#5 
Alias (byte*) render_next::screen_next_area#3 = (byte*) render_next::screen_next_area#8 
Alias (byte) render_next::l#2 = (byte) render_next::l#3 
Alias (byte*) render_next::next_piece_gfx#4 = (byte*) render_next::next_piece_gfx#5 
Alias (byte) render_next::next_piece_char#4 = (byte) render_next::next_piece_char#5 
Alias (byte) render_screen_show#0 = (byte) render_screen_show#57 (byte) render_screen_show#55 (byte) render_screen_show#52 (byte) render_screen_show#48 (byte) render_screen_show#42 (byte) render_screen_show#35 (byte) render_screen_show#32 (byte) render_screen_show#24 
Alias (byte) render_screen_render#0 = (byte) render_screen_render#62 (byte) render_screen_render#60 (byte) render_screen_render#57 (byte) render_screen_render#54 (byte) render_screen_render#49 (byte) render_screen_render#43 (byte) render_screen_render#40 (byte) render_screen_render#29 
Alias (byte) current_piece_char#0 = (byte) current_piece_char#99 (byte) current_piece_char#98 (byte) current_piece_char#92 (byte) current_piece_char#86 (byte) current_piece_char#70 (byte) current_piece_char#58 (byte) current_piece_char#51 (byte) current_piece_char#36 
Alias (byte*) current_piece_gfx#0 = (byte*) current_piece_gfx#111 (byte*) current_piece_gfx#110 (byte*) current_piece_gfx#105 (byte*) current_piece_gfx#98 (byte*) current_piece_gfx#84 (byte*) current_piece_gfx#72 (byte*) current_piece_gfx#63 (byte*) current_piece_gfx#45 
Alias (byte) current_xpos#0 = (byte) current_xpos#118 (byte) current_xpos#117 (byte) current_xpos#114 (byte) current_xpos#107 (byte) current_xpos#97 (byte) current_xpos#85 (byte) current_xpos#75 (byte) current_xpos#58 
Alias (byte) current_ypos#0 = (byte) current_ypos#97 (byte) current_ypos#96 (byte) current_ypos#93 (byte) current_ypos#86 (byte) current_ypos#77 (byte) current_ypos#69 (byte) current_ypos#64 (byte) current_ypos#49 
Alias (byte) game_over#0 = (byte) game_over#85 (byte) game_over#83 (byte) game_over#78 (byte) game_over#72 (byte) game_over#59 (byte) game_over#51 (byte) game_over#45 (byte) game_over#34 
Alias (byte) render_screen_showing#0 = (byte) render_screen_showing#42 (byte) render_screen_showing#39 (byte) render_screen_showing#36 (byte) render_screen_showing#32 (byte) render_screen_showing#26 (byte) render_screen_showing#21 (byte) render_screen_showing#20 (byte) render_screen_showing#14 
Alias (word) lines_bcd#0 = (word) lines_bcd#82 (word) lines_bcd#79 (word) lines_bcd#73 (word) lines_bcd#68 (word) lines_bcd#58 (word) lines_bcd#51 (word) lines_bcd#44 (word) lines_bcd#32 
Alias (dword) score_bcd#0 = (dword) score_bcd#78 (dword) score_bcd#76 (dword) score_bcd#70 (dword) score_bcd#65 (dword) score_bcd#56 (dword) score_bcd#51 (dword) score_bcd#44 (dword) score_bcd#32 
Alias (byte) level#0 = (byte) level#103 (byte) level#99 (byte) level#92 (byte) level#85 (byte) level#72 (byte) level#64 (byte) level#55 (byte) level#41 
Alias (byte) level_bcd#0 = (byte) level_bcd#95 (byte) level_bcd#92 (byte) level_bcd#85 (byte) level_bcd#78 (byte) level_bcd#68 (byte) level_bcd#61 (byte) level_bcd#54 (byte) level_bcd#41 
Alias (byte) sprites_init::s2#0 = (byte~) sprites_init::$0 
Alias (byte) sprites_init::xpos#1 = (byte~) sprites_init::$1 
Alias (byte*) PLAYFIELD_SPRITES#0 = (byte*) toSpritePtr1_sprite#0 (byte*) toSpritePtr1_sprite#1 
Alias (byte) toSpritePtr1_return#0 = (byte~) toSpritePtr1_$2#0 (byte) toSpritePtr1_return#2 (byte) toSpritePtr1_return#1 (byte) toSpritePtr1_return#3 (byte~) $6 
Alias (byte) irq_sprite_ptr#15 = (byte) irq_sprite_ptr#5 (byte) irq_sprite_ptr#9 (byte) irq_sprite_ptr#16 
Alias (byte) render_screen_showing#11 = (byte) render_screen_showing#7 
Alias (byte) irq_cnt#10 = (byte) irq_cnt#13 (byte) irq_cnt#7 (byte) irq_cnt#8 
Alias (byte) irq_raster_next#14 = (byte) irq_raster_next#18 (byte) irq_raster_next#21 (byte) irq_raster_next#15 
Alias (byte) irq_sprite_ypos#15 = (byte) irq_sprite_ypos#19 (byte) irq_sprite_ypos#23 (byte) irq_sprite_ypos#16 
Alias (byte) sprites_irq::ptr#0 = (byte) sprites_irq::ptr#5 (byte) sprites_irq::ptr#6 
Alias (byte) irq_raster_next#11 = (byte) irq_raster_next#6 (byte) irq_raster_next#12 (byte) irq_raster_next#7 
Alias (byte) irq_cnt#1 = (byte) irq_cnt#18 (byte) irq_cnt#16 (byte) irq_cnt#14 (byte) irq_cnt#11 (byte) irq_cnt#5 (byte) irq_cnt#12 
Alias (byte*) sprites_irq::toSpritePtr2_sprite#0 = (byte*) sprites_irq::toSpritePtr2_sprite#1 
Alias (byte) irq_raster_next#1 = (byte) irq_raster_next#19 (byte) irq_raster_next#16 (byte) irq_raster_next#13 
Alias (byte) irq_sprite_ypos#1 = (byte) irq_sprite_ypos#20 (byte) irq_sprite_ypos#17 (byte) irq_sprite_ypos#13 
Alias (byte) irq_sprite_ypos#10 = (byte) irq_sprite_ypos#12 (byte) irq_sprite_ypos#6 (byte) irq_sprite_ypos#7 
Alias (byte) irq_sprite_ptr#10 = (byte) irq_sprite_ptr#13 (byte) irq_sprite_ptr#6 (byte) irq_sprite_ptr#7 
Alias (byte) irq_cnt#3 = (byte) irq_cnt#6 (byte) irq_cnt#9 
Alias (byte) irq_raster_next#4 = (byte) irq_raster_next#9 (byte) irq_raster_next#8 
Alias (byte) irq_sprite_ypos#11 = (byte) irq_sprite_ypos#8 (byte) irq_sprite_ypos#4 
Alias (byte) irq_sprite_ptr#11 = (byte) irq_sprite_ptr#8 (byte) irq_sprite_ptr#4 
Alias (byte) irq_cnt#0 = (byte) irq_cnt#20 (byte) irq_cnt#19 (byte) irq_cnt#17 
Alias (byte) level#13 = (byte) level#28 
Alias (byte) current_movedown_slow#16 = (byte) current_movedown_slow#29 (byte) current_movedown_slow#2 
Alias (byte) play_move_down::return#0 = (byte) play_move_down::return#4 
Alias (byte) play_movement::render#0 = (byte) play_movement::render#4 
Alias (byte) play_movement::key_event#1 = (byte) play_movement::key_event#4 (byte) play_movement::key_event#2 (byte) play_movement::key_event#3 
Alias (byte) current_movedown_counter#1 = (byte) current_movedown_counter#9 (byte) current_movedown_counter#35 (byte) current_movedown_counter#27 (byte) current_movedown_counter#20 (byte) current_movedown_counter#19 
Alias (byte) current_ypos#1 = (byte) current_ypos#14 (byte) current_ypos#54 (byte) current_ypos#50 (byte) current_ypos#34 (byte) current_ypos#33 
Alias (word) lines_bcd#1 = (word) lines_bcd#12 (word) lines_bcd#46 (word) lines_bcd#34 (word) lines_bcd#24 (word) lines_bcd#23 
Alias (dword) score_bcd#1 = (dword) score_bcd#11 (dword) score_bcd#46 (dword) score_bcd#34 (dword) score_bcd#24 (dword) score_bcd#23 
Alias (byte) level#1 = (byte) level#14 (byte) level#59 (byte) level#45 (byte) level#31 (byte) level#30 
Alias (byte) current_movedown_slow#17 = (byte) current_movedown_slow#3 (byte) current_movedown_slow#60 (byte) current_movedown_slow#47 (byte) current_movedown_slow#32 (byte) current_movedown_slow#31 
Alias (byte) level_bcd#1 = (byte) level_bcd#14 (byte) level_bcd#56 (byte) level_bcd#43 (byte) level_bcd#29 (byte) level_bcd#28 
Alias (byte*) current_piece#1 = (byte*) current_piece#12 (byte*) current_piece#55 (byte*) current_piece#40 (byte*) current_piece#26 (byte*) current_piece#25 
Alias (byte) current_piece_char#1 = (byte) current_piece_char#13 (byte) current_piece_char#53 (byte) current_piece_char#39 (byte) current_piece_char#27 (byte) current_piece_char#26 
Alias (byte) current_orientation#1 = (byte) current_orientation#15 (byte) current_orientation#50 (byte) current_orientation#33 (byte) current_orientation#34 
Alias (byte*) current_piece_gfx#1 = (byte*) current_piece_gfx#16 (byte*) current_piece_gfx#48 (byte*) current_piece_gfx#32 (byte*) current_piece_gfx#33 
Alias (byte) current_xpos#1 = (byte) current_xpos#17 (byte) current_xpos#38 (byte) current_xpos#39 
Alias (byte) game_over#1 = (byte) game_over#12 (byte) game_over#46 (byte) game_over#35 (byte) game_over#25 (byte) game_over#24 
Alias (byte) next_piece_idx#1 = (byte) next_piece_idx#13 (byte) next_piece_idx#49 (byte) next_piece_idx#37 (byte) next_piece_idx#28 (byte) next_piece_idx#27 
Alias (byte) play_movement::render#1 = (byte) play_movement::render#8 (byte) play_movement::render#5 (byte) play_movement::render#7 (byte) play_movement::return#1 
Alias (byte) play_move_leftright::return#0 = (byte) play_move_leftright::return#5 
Alias (byte) current_xpos#18 = (byte) current_xpos#2 (byte) current_xpos#40 
Alias (byte) play_move_rotate::return#0 = (byte) play_move_rotate::return#5 
Alias (byte) play_movement::render#2 = (byte) play_movement::render#6 
Alias (byte) current_orientation#16 = (byte) current_orientation#2 
Alias (byte*) current_piece_gfx#17 = (byte*) current_piece_gfx#2 
Alias (byte) play_movement::return#0 = (byte) play_movement::render#3 
Alias (byte) play_movement::return#2 = (byte) play_movement::return#4 
Alias (byte) current_movedown_counter#10 = (byte) current_movedown_counter#2 
Alias (byte) current_ypos#15 = (byte) current_ypos#2 
Alias (word) lines_bcd#13 = (word) lines_bcd#2 
Alias (dword) score_bcd#12 = (dword) score_bcd#2 
Alias (byte) level#15 = (byte) level#2 
Alias (byte) current_movedown_slow#18 = (byte) current_movedown_slow#4 
Alias (byte) level_bcd#15 = (byte) level_bcd#2 
Alias (byte*) current_piece#13 = (byte*) current_piece#2 
Alias (byte) current_piece_char#14 = (byte) current_piece_char#2 
Alias (byte) current_orientation#17 = (byte) current_orientation#3 
Alias (byte*) current_piece_gfx#18 = (byte*) current_piece_gfx#3 
Alias (byte) current_xpos#19 = (byte) current_xpos#3 
Alias (byte) game_over#13 = (byte) game_over#2 
Alias (byte) next_piece_idx#14 = (byte) next_piece_idx#2 
Alias (byte) keyboard_event_pressed::return#12 = (byte) keyboard_event_pressed::return#6 
Alias (byte) current_movedown_counter#13 = (byte) current_movedown_counter#21 (byte) current_movedown_counter#28 (byte) current_movedown_counter#22 
Alias (byte) current_movedown_slow#33 = (byte) current_movedown_slow#48 (byte) current_movedown_slow#34 (byte) current_movedown_slow#35 
Alias (byte) play_move_down::movedown#10 = (byte) play_move_down::movedown#11 (byte) play_move_down::movedown#8 (byte) play_move_down::movedown#5 
Alias (byte) current_ypos#65 = (byte) current_ypos#78 (byte) current_ypos#66 (byte) current_ypos#67 
Alias (byte) current_xpos#80 = (byte) current_xpos#98 (byte) current_xpos#81 (byte) current_xpos#82 
Alias (byte) current_orientation#63 = (byte) current_orientation#76 (byte) current_orientation#64 (byte) current_orientation#65 
Alias (word) lines_bcd#59 = (word) lines_bcd#69 (word) lines_bcd#60 (word) lines_bcd#61 
Alias (dword) score_bcd#57 = (dword) score_bcd#66 (dword) score_bcd#58 (dword) score_bcd#59 
Alias (byte) level#73 = (byte) level#86 (byte) level#74 (byte) level#75 
Alias (byte) level_bcd#69 = (byte) level_bcd#79 (byte) level_bcd#70 (byte) level_bcd#71 
Alias (byte*) current_piece#69 = (byte*) current_piece#81 (byte*) current_piece#70 (byte*) current_piece#71 
Alias (byte) current_piece_char#71 = (byte) current_piece_char#87 (byte) current_piece_char#72 (byte) current_piece_char#73 
Alias (byte*) current_piece_gfx#85 = (byte*) current_piece_gfx#99 (byte*) current_piece_gfx#86 (byte*) current_piece_gfx#87 
Alias (byte) game_over#60 = (byte) game_over#73 (byte) game_over#61 (byte) game_over#62 
Alias (byte) next_piece_idx#58 = (byte) next_piece_idx#69 (byte) next_piece_idx#59 (byte) next_piece_idx#60 
Alias (byte) play_move_down::movedown#0 = (byte) play_move_down::movedown#4 
Alias (byte) current_movedown_counter#3 = (byte) current_movedown_counter#36 
Alias (byte) current_movedown_slow#61 = (byte) current_movedown_slow#62 
Alias (byte) current_ypos#87 = (byte) current_ypos#88 
Alias (byte) current_xpos#108 = (byte) current_xpos#109 
Alias (byte) current_orientation#86 = (byte) current_orientation#87 
Alias (word) lines_bcd#74 = (word) lines_bcd#75 
Alias (dword) score_bcd#71 = (dword) score_bcd#72 
Alias (byte) level#93 = (byte) level#94 
Alias (byte) level_bcd#86 = (byte) level_bcd#87 
Alias (byte*) current_piece#86 = (byte*) current_piece#87 
Alias (byte) current_piece_char#93 = (byte) current_piece_char#94 
Alias (byte*) current_piece_gfx#106 = (byte*) current_piece_gfx#107 
Alias (byte) game_over#79 = (byte) game_over#80 
Alias (byte) next_piece_idx#73 = (byte) next_piece_idx#74 
Alias (byte) play_move_down::movedown#7 = (byte) play_move_down::movedown#9 
Alias (byte) current_ypos#51 = (byte) current_ypos#52 
Alias (byte) current_xpos#61 = (byte) current_xpos#62 
Alias (byte) current_orientation#51 = (byte) current_orientation#52 
Alias (byte) current_movedown_counter#12 = (byte) current_movedown_counter#37 
Alias (word) lines_bcd#47 = (word) lines_bcd#48 
Alias (dword) score_bcd#47 = (dword) score_bcd#48 
Alias (byte) level#60 = (byte) level#61 
Alias (byte) current_movedown_slow#19 = (byte) current_movedown_slow#63 
Alias (byte) level_bcd#57 = (byte) level_bcd#58 
Alias (byte*) current_piece#56 = (byte*) current_piece#57 
Alias (byte) current_piece_char#54 = (byte) current_piece_char#55 
Alias (byte*) current_piece_gfx#66 = (byte*) current_piece_gfx#67 
Alias (byte) game_over#47 = (byte) game_over#48 
Alias (byte) next_piece_idx#50 = (byte) next_piece_idx#51 
Alias (byte) current_movedown_counter#23 = (byte) current_movedown_counter#29 
Alias (byte) current_ypos#16 = (byte) current_ypos#39 (byte) current_ypos#35 (byte) current_ypos#36 (byte) current_ypos#17 (byte) current_ypos#44 (byte) current_ypos#68 (byte) current_ypos#53 (byte) current_ypos#37 
Alias (word) lines_bcd#25 = (word) lines_bcd#27 (word) lines_bcd#35 (word) lines_bcd#62 (word) lines_bcd#49 (word) lines_bcd#37 (word) lines_bcd#50 (word) lines_bcd#36 
Alias (dword) score_bcd#25 = (dword) score_bcd#27 (dword) score_bcd#35 (dword) score_bcd#60 (dword) score_bcd#49 (dword) score_bcd#37 (dword) score_bcd#50 (dword) score_bcd#36 
Alias (byte) level#32 = (byte) level#34 (byte) level#46 (byte) level#76 (byte) level#62 (byte) level#48 (byte) level#63 (byte) level#47 
Alias (byte) current_movedown_slow#36 = (byte) current_movedown_slow#38 (byte) current_movedown_slow#49 (byte) current_movedown_slow#72 (byte) current_movedown_slow#64 (byte) current_movedown_slow#51 (byte) current_movedown_slow#65 (byte) current_movedown_slow#50 
Alias (byte) level_bcd#30 = (byte) level_bcd#32 (byte) level_bcd#44 (byte) level_bcd#72 (byte) level_bcd#59 (byte) level_bcd#46 (byte) level_bcd#60 (byte) level_bcd#45 
Alias (byte*) current_piece#27 = (byte*) current_piece#29 (byte*) current_piece#41 (byte*) current_piece#31 (byte*) current_piece#58 (byte*) current_piece#43 (byte*) current_piece#72 (byte*) current_piece#59 (byte*) current_piece#42 
Alias (byte) current_piece_char#28 = (byte) current_piece_char#30 (byte) current_piece_char#40 (byte) current_piece_char#74 (byte) current_piece_char#56 (byte) current_piece_char#42 (byte) current_piece_char#75 (byte) current_piece_char#57 (byte) current_piece_char#41 
Alias (byte) current_orientation#18 = (byte) current_orientation#38 (byte) current_orientation#35 (byte) current_orientation#66 (byte) current_orientation#54 (byte) current_orientation#77 (byte) current_orientation#67 (byte) current_orientation#53 (byte) current_orientation#36 
Alias (byte*) current_piece_gfx#34 = (byte*) current_piece_gfx#36 (byte*) current_piece_gfx#49 (byte*) current_piece_gfx#88 (byte*) current_piece_gfx#68 (byte*) current_piece_gfx#51 (byte*) current_piece_gfx#73 (byte*) current_piece_gfx#69 (byte*) current_piece_gfx#50 
Alias (byte) current_xpos#20 = (byte) current_xpos#44 (byte) current_xpos#41 (byte) current_xpos#83 (byte) current_xpos#64 (byte) current_xpos#67 (byte) current_xpos#84 (byte) current_xpos#63 (byte) current_xpos#42 
Alias (byte) game_over#26 = (byte) game_over#28 (byte) game_over#36 (byte) game_over#63 (byte) game_over#49 (byte) game_over#38 (byte) game_over#64 (byte) game_over#50 (byte) game_over#37 
Alias (byte) next_piece_idx#29 = (byte) next_piece_idx#31 (byte) next_piece_idx#38 (byte) next_piece_idx#61 (byte) next_piece_idx#52 (byte) next_piece_idx#40 (byte) next_piece_idx#62 (byte) next_piece_idx#53 (byte) next_piece_idx#39 
Alias (byte) play_collision::ypos#0 = (byte~) play_move_down::$11 
Alias (byte) play_collision::return#0 = (byte) play_collision::return#11 
Alias (byte) play_remove_lines::return#0 = (byte) play_remove_lines::return#3 
Alias (byte) play_move_down::removed#0 = (byte~) play_move_down::$15 
Alias (word) lines_bcd#14 = (word) lines_bcd#3 (word) lines_bcd#38 
Alias (dword) score_bcd#13 = (dword) score_bcd#3 (dword) score_bcd#38 
Alias (byte) level#16 = (byte) level#3 (byte) level#49 
Alias (byte) current_movedown_slow#20 = (byte) current_movedown_slow#5 (byte) current_movedown_slow#52 
Alias (byte) level_bcd#16 = (byte) level_bcd#3 (byte) level_bcd#47 
Alias (byte*) current_piece#14 = (byte*) current_piece#3 
Alias (byte) current_piece_char#15 = (byte) current_piece_char#3 
Alias (byte) current_orientation#19 = (byte) current_orientation#4 
Alias (byte*) current_piece_gfx#19 = (byte*) current_piece_gfx#4 
Alias (byte) current_xpos#21 = (byte) current_xpos#4 
Alias (byte) current_ypos#18 = (byte) current_ypos#4 
Alias (byte) game_over#14 = (byte) game_over#3 
Alias (byte) next_piece_idx#15 = (byte) next_piece_idx#3 
Alias (byte) play_move_down::return#3 = (byte) play_move_down::return#5 
Alias (byte) current_movedown_counter#14 = (byte) current_movedown_counter#5 
Alias (byte) current_ypos#19 = (byte) current_ypos#5 
Alias (word) lines_bcd#15 = (word) lines_bcd#4 
Alias (dword) score_bcd#14 = (dword) score_bcd#4 
Alias (byte) level#17 = (byte) level#4 
Alias (byte) current_movedown_slow#21 = (byte) current_movedown_slow#6 
Alias (byte) level_bcd#17 = (byte) level_bcd#4 
Alias (byte*) current_piece#15 = (byte*) current_piece#4 
Alias (byte) current_piece_char#16 = (byte) current_piece_char#4 
Alias (byte) current_orientation#20 = (byte) current_orientation#5 
Alias (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#5 
Alias (byte) current_xpos#22 = (byte) current_xpos#5 
Alias (byte) game_over#15 = (byte) game_over#4 
Alias (byte) next_piece_idx#16 = (byte) next_piece_idx#4 
Alias (byte) current_xpos#23 = (byte) current_xpos#45 (byte) current_xpos#49 (byte) current_xpos#46 (byte) current_xpos#24 (byte) current_xpos#47 (byte) current_xpos#25 (byte) current_xpos#27 
Alias (byte) current_ypos#20 = (byte) current_ypos#40 (byte) current_ypos#41 (byte) current_ypos#21 
Alias (byte) current_orientation#21 = (byte) current_orientation#39 (byte) current_orientation#40 (byte) current_orientation#22 
Alias (byte*) current_piece#32 = (byte*) current_piece#44 (byte*) current_piece#45 (byte*) current_piece#33 
Alias (byte) play_collision::xpos#1 = (byte~) play_move_leftright::$7 
Alias (byte) play_collision::return#1 = (byte) play_collision::return#12 
Alias (byte) play_move_leftright::key_event#1 = (byte) play_move_leftright::key_event#2 
Alias (byte) play_collision::xpos#2 = (byte~) play_move_leftright::$3 
Alias (byte) play_collision::return#13 = (byte) play_collision::return#2 
Alias (byte) play_move_leftright::return#2 = (byte) play_move_leftright::return#6 
Alias (byte) current_xpos#26 = (byte) current_xpos#7 
Alias (byte) current_orientation#23 = (byte) current_orientation#41 (byte) current_orientation#42 (byte) current_orientation#24 (byte) current_orientation#44 
Alias (byte) current_xpos#50 = (byte) current_xpos#65 (byte) current_xpos#66 (byte) current_xpos#51 
Alias (byte) current_ypos#42 = (byte) current_ypos#55 (byte) current_ypos#56 (byte) current_ypos#43 
Alias (byte*) current_piece#46 = (byte*) current_piece#60 (byte*) current_piece#61 (byte*) current_piece#47 
Alias (byte*) current_piece_gfx#38 = (byte*) current_piece_gfx#89 (byte*) current_piece_gfx#70 (byte*) current_piece_gfx#52 (byte*) current_piece_gfx#90 
Alias (byte) play_move_rotate::orientation#1 = (byte~) play_move_rotate::$8 
Alias (byte) play_move_rotate::key_event#1 = (byte) play_move_rotate::key_event#2 
Alias (byte) play_move_rotate::orientation#2 = (byte~) play_move_rotate::$6 
Alias (byte) play_move_rotate::return#2 = (byte) play_move_rotate::return#6 
Alias (byte) current_orientation#25 = (byte) current_orientation#6 
Alias (byte*) current_piece_gfx#21 = (byte*) current_piece_gfx#6 
Alias (byte) play_collision::return#14 = (byte) play_collision::return#3 
Alias (byte) play_move_rotate::orientation#3 = (byte) play_move_rotate::orientation#5 (byte) play_move_rotate::orientation#4 
Alias (byte*) current_piece#16 = (byte*) current_piece#30 (byte*) current_piece#34 
Alias (byte) current_orientation#43 = (byte) current_orientation#55 (byte) current_orientation#68 
Alias (byte*) current_piece_gfx#37 = (byte*) current_piece_gfx#53 (byte*) current_piece_gfx#71 
Alias (byte*) current_piece_gfx#7 = (byte*~) play_move_rotate::$9 
Alias (byte) current_movedown_slow#0 = (byte) current_movedown_slow#59 (byte) current_movedown_slow#46 
Alias (byte*) current_piece#0 = (byte*) current_piece#54 (byte*) current_piece#39 
Alias (byte) current_orientation#0 = (byte) current_orientation#62 (byte) current_orientation#49 
Alias (byte) next_piece_idx#0 = (byte) next_piece_idx#46 (byte) next_piece_idx#35 
Alias (byte) current_movedown_counter#0 = (byte) current_movedown_counter#34 (byte) current_movedown_counter#26 
Alias (byte*) play_collision::piece_gfx#0 = (byte*~) play_collision::$0 
Alias (byte) play_collision::yp#0 = (byte) play_collision::ypos#5 
Alias (byte) play_collision::xp#0 = (byte) play_collision::xpos#5 
Alias (byte) play_collision::yp#3 = (byte) play_collision::yp#5 (byte) play_collision::yp#9 (byte) play_collision::yp#8 (byte) play_collision::yp#7 
Alias (byte) play_collision::xp#3 = (byte) play_collision::xp#7 (byte) play_collision::xp#6 (byte) play_collision::xp#4 (byte) play_collision::xp#5 
Alias (byte*) play_collision::playfield_line#1 = (byte*) play_collision::playfield_line#4 (byte*) play_collision::playfield_line#5 (byte*) play_collision::playfield_line#3 (byte*) play_collision::playfield_line#2 
Alias (byte) play_collision::c#3 = (byte) play_collision::c#7 (byte) play_collision::c#6 (byte) play_collision::c#5 (byte) play_collision::c#4 
Alias (byte*) play_collision::piece_gfx#1 = (byte*) play_collision::piece_gfx#8 (byte*) play_collision::piece_gfx#7 (byte*) play_collision::piece_gfx#6 (byte*) play_collision::piece_gfx#5 
Alias (byte) play_collision::i#1 = (byte) play_collision::i#9 (byte) play_collision::i#8 (byte) play_collision::i#7 (byte) play_collision::i#6 
Alias (byte) play_collision::l#4 = (byte) play_collision::l#9 (byte) play_collision::l#8 (byte) play_collision::l#7 (byte) play_collision::l#5 
Alias (byte) play_collision::xpos#10 = (byte) play_collision::xpos#13 (byte) play_collision::xpos#9 (byte) play_collision::xpos#12 (byte) play_collision::xpos#11 
Alias (byte) play_collision::return#15 = (byte) play_collision::return#5 
Alias (byte) play_collision::yp#4 = (byte) play_collision::yp#6 
Alias (byte) play_collision::l#2 = (byte) play_collision::l#3 
Alias (byte) play_collision::xpos#7 = (byte) play_collision::xpos#8 
Alias (byte*) play_collision::piece_gfx#3 = (byte*) play_collision::piece_gfx#4 
Alias (byte) play_collision::i#4 = (byte) play_collision::i#5 
Alias (byte) current_piece_char#17 = (byte) current_piece_char#31 
Alias (byte*) play_lock_current::playfield_line#1 = (byte*) play_lock_current::playfield_line#2 
Alias (byte) play_lock_current::xp#3 = (byte) play_lock_current::xp#4 
Alias (byte) play_lock_current::c#3 = (byte) play_lock_current::c#4 
Alias (byte*) current_piece_gfx#22 = (byte*) current_piece_gfx#56 
Alias (byte) play_lock_current::i#1 = (byte) play_lock_current::i#6 
Alias (byte) play_lock_current::yp#5 = (byte) play_lock_current::yp#6 
Alias (byte) play_lock_current::l#4 = (byte) play_lock_current::l#5 
Alias (byte) current_xpos#86 = (byte) current_xpos#87 
Alias (byte) play_lock_current::yp#3 = (byte) play_lock_current::yp#4 
Alias (byte) play_lock_current::l#2 = (byte) play_lock_current::l#3 
Alias (byte) current_xpos#53 = (byte) current_xpos#68 
Alias (byte*) current_piece_gfx#40 = (byte*) current_piece_gfx#55 
Alias (byte) play_lock_current::i#4 = (byte) play_lock_current::i#5 
Alias (byte) current_piece_char#44 = (byte) current_piece_char#60 
Alias (byte*) current_piece_gfx#8 = (byte*~) play_spawn_current::$0 (byte*) current_piece_gfx#91 (byte*) current_piece_gfx#92 
Alias (byte) play_collision::return#10 = (byte) play_collision::return#16 
Alias (byte*) current_piece#5 = (byte*) current_piece#73 (byte*) current_piece#74 
Alias (byte) current_piece_char#5 = (byte) current_piece_char#76 (byte) current_piece_char#77 
Alias (byte) current_orientation#78 = (byte) current_orientation#8 (byte) current_orientation#79 
Alias (byte) current_xpos#100 = (byte) current_xpos#99 (byte) current_xpos#9 
Alias (byte) current_ypos#6 = (byte) current_ypos#79 (byte) current_ypos#80 
Alias (byte) game_over#65 = (byte) game_over#74 
Alias (byte*) current_piece#18 = (byte*) current_piece#82 (byte*) current_piece#48 (byte*) current_piece#75 (byte*) current_piece#63 (byte*) current_piece#35 (byte*) current_piece#6 
Alias (byte) current_piece_char#18 = (byte) current_piece_char#88 (byte) current_piece_char#45 (byte) current_piece_char#78 (byte) current_piece_char#62 (byte) current_piece_char#32 (byte) current_piece_char#6 
Alias (byte) current_orientation#26 = (byte) current_orientation#88 (byte) current_orientation#56 (byte) current_orientation#80 (byte) current_orientation#70 (byte) current_orientation#45 (byte) current_orientation#9 
Alias (byte*) current_piece_gfx#100 = (byte*) current_piece_gfx#57 (byte*) current_piece_gfx#93 (byte*) current_piece_gfx#75 (byte*) current_piece_gfx#41 (byte*) current_piece_gfx#23 (byte*) current_piece_gfx#9 
Alias (byte) current_xpos#10 = (byte) current_xpos#110 (byte) current_xpos#69 (byte) current_xpos#101 (byte) current_xpos#89 (byte) current_xpos#54 (byte) current_xpos#30 
Alias (byte) current_ypos#24 = (byte) current_ypos#89 (byte) current_ypos#57 (byte) current_ypos#81 (byte) current_ypos#71 (byte) current_ypos#45 (byte) current_ypos#7 
Alias (byte) game_over#16 = (byte) game_over#75 (byte) game_over#39 (byte) game_over#66 (byte) game_over#53 (byte) game_over#29 (byte) game_over#6 
Alias (byte) play_spawn_current::sid_rnd1_return#0 = (byte) play_spawn_current::sid_rnd1_return#2 (byte) play_spawn_current::sid_rnd1_return#1 (byte) play_spawn_current::sid_rnd1_return#3 (byte~) play_spawn_current::$5 
Alias (byte) play_spawn_current::piece_idx#1 = (byte~) play_spawn_current::$6 
Alias (byte) play_spawn_current::piece_idx#2 = (byte) play_spawn_current::piece_idx#3 
Alias (byte) next_piece_idx#18 = (byte) next_piece_idx#5 (byte) next_piece_idx#6 
Alias (byte) play_remove_lines::r#0 = (byte~) play_remove_lines::$1 
Alias (byte) play_remove_lines::w#0 = (byte~) play_remove_lines::$3 
Alias (byte) play_remove_lines::c#0 = (byte) play_remove_lines::c#2 
Alias (byte) play_remove_lines::w#8 = (byte) play_remove_lines::w#9 
Alias (byte) play_remove_lines::x#3 = (byte) play_remove_lines::x#4 
Alias (byte) play_remove_lines::r#1 = (byte) play_remove_lines::r#6 
Alias (byte) play_remove_lines::y#6 = (byte) play_remove_lines::y#7 
Alias (byte) play_remove_lines::removed#10 = (byte) play_remove_lines::removed#9 
Alias (byte) play_remove_lines::full#2 = (byte) play_remove_lines::full#3 
Alias (byte) play_remove_lines::y#3 = (byte) play_remove_lines::y#5 (byte) play_remove_lines::y#4 
Alias (byte) play_remove_lines::w#1 = (byte) play_remove_lines::w#10 (byte) play_remove_lines::w#5 
Alias (byte) play_remove_lines::removed#2 = (byte) play_remove_lines::removed#4 (byte) play_remove_lines::removed#6 
Alias (byte) play_remove_lines::r#4 = (byte) play_remove_lines::r#7 (byte) play_remove_lines::r#8 
Alias (byte) play_remove_lines::w#2 = (byte~) play_remove_lines::$11 
Alias (byte) play_remove_lines::w#6 = (byte) play_remove_lines::w#7 
Alias (byte) play_remove_lines::removed#3 = (byte) play_remove_lines::removed#7 (byte) play_remove_lines::removed#5 (byte) play_remove_lines::return#1 (byte) play_remove_lines::return#4 (byte) play_remove_lines::return#2 
Alias (word) lines_bcd#16 = (word) lines_bcd#28 
Alias (byte) play_update_score::removed#1 = (byte) play_update_score::removed#2 
Alias (dword) score_bcd#15 = (dword) score_bcd#28 
Alias (byte) level#35 = (byte) level#37 (byte) level#36 
Alias (byte) current_movedown_slow#39 = (byte) current_movedown_slow#41 (byte) current_movedown_slow#40 
Alias (byte) level_bcd#33 = (byte) level_bcd#35 (byte) level_bcd#34 
Alias (byte) play_update_score::lines_before#0 = (byte~) play_update_score::$3 
Alias (byte) play_update_score::lines_after#0 = (byte~) play_update_score::$5 
Alias (word) lines_bcd#29 = (word) lines_bcd#39 (word) lines_bcd#5 
Alias (dword) score_bcd#29 = (dword) score_bcd#39 (dword) score_bcd#5 
Alias (byte) level#18 = (byte) level#5 
Alias (byte) current_movedown_slow#22 = (byte) current_movedown_slow#7 
Alias (byte) level_bcd#18 = (byte) level_bcd#5 
Alias (word) lines_bcd#17 = (word) lines_bcd#6 
Alias (dword) score_bcd#16 = (dword) score_bcd#6 
Alias (byte) level#19 = (byte) level#6 
Alias (byte) current_movedown_slow#23 = (byte) current_movedown_slow#8 
Alias (byte) level_bcd#19 = (byte) level_bcd#6 
Alias (byte) level_bcd#36 = (byte) level_bcd#48 (byte) level_bcd#37 
Alias (byte) level#21 = (byte) level#87 (byte) level#7 
Alias (byte) level_bcd#21 = (byte) level_bcd#7 
Alias (byte) level#77 = (byte) level#78 
Alias (byte) current_movedown_slow#73 = (byte) current_movedown_slow#74 
Alias (byte) level#22 = (byte) level#38 (byte) level#50 (byte) level#8 
Alias (byte) current_movedown_slow#11 = (byte) current_movedown_slow#42 (byte) current_movedown_slow#53 (byte) current_movedown_slow#24 
Alias (byte) level_bcd#22 = (byte) level_bcd#38 (byte) level_bcd#49 (byte) level_bcd#9 
Alias (byte) render_screen_show#22 = (byte) render_screen_show#27 
Alias (byte) render_screen_render#27 = (byte) render_screen_render#35 
Alias (byte) current_movedown_slow#43 = (byte) current_movedown_slow#75 (byte) current_movedown_slow#80 (byte) current_movedown_slow#67 (byte) current_movedown_slow#54 
Alias (byte) next_piece_idx#32 = (byte) next_piece_idx#70 (byte) next_piece_idx#75 (byte) next_piece_idx#63 (byte) next_piece_idx#54 (byte) next_piece_idx#41 
Alias (byte*) current_piece#36 = (byte*) current_piece#83 (byte*) current_piece#88 (byte*) current_piece#76 (byte*) current_piece#64 (byte*) current_piece#49 
Alias (byte) current_piece_char#33 = (byte) current_piece_char#89 (byte) current_piece_char#95 (byte) current_piece_char#79 (byte) current_piece_char#63 (byte) current_piece_char#46 
Alias (byte) current_orientation#46 = (byte) current_orientation#89 (byte) current_orientation#92 (byte) current_orientation#81 (byte) current_orientation#71 (byte) current_orientation#57 
Alias (byte*) current_piece_gfx#101 = (byte*) current_piece_gfx#108 (byte*) current_piece_gfx#94 (byte*) current_piece_gfx#76 (byte*) current_piece_gfx#58 (byte*) current_piece_gfx#42 
Alias (byte) current_xpos#102 = (byte) current_xpos#111 (byte) current_xpos#115 (byte) current_xpos#90 (byte) current_xpos#70 (byte) current_xpos#55 
Alias (byte) current_ypos#46 = (byte) current_ypos#90 (byte) current_ypos#94 (byte) current_ypos#82 (byte) current_ypos#72 (byte) current_ypos#58 
Alias (byte) game_over#30 = (byte) game_over#76 (byte) game_over#81 (byte) game_over#67 (byte) game_over#54 (byte) game_over#40 
Alias (byte) level#100 = (byte) level#95 (byte) level#88 (byte) level#79 (byte) level#58 (byte) level#101 (byte) level#96 (byte) level#89 (byte) level#80 (byte) level#66 (byte) level#52 
Alias (byte) render_screen_showing#17 = (byte) render_screen_showing#46 (byte) render_screen_showing#47 (byte) render_screen_showing#45 (byte) render_screen_showing#44 (byte) render_screen_showing#43 (byte) render_screen_showing#40 (byte) render_screen_showing#37 (byte) render_screen_showing#33 (byte) render_screen_showing#27 (byte) render_screen_showing#22 
Alias (byte) keyboard_events_size#33 = (byte) keyboard_events_size#78 (byte) keyboard_events_size#79 (byte) keyboard_events_size#77 (byte) keyboard_events_size#75 (byte) keyboard_events_size#73 (byte) keyboard_events_size#69 (byte) keyboard_events_size#64 (byte) keyboard_events_size#58 (byte) keyboard_events_size#49 (byte) keyboard_events_size#41 
Alias (byte) keyboard_modifiers#29 = (byte) keyboard_modifiers#60 (byte) keyboard_modifiers#61 (byte) keyboard_modifiers#59 (byte) keyboard_modifiers#57 (byte) keyboard_modifiers#55 (byte) keyboard_modifiers#52 (byte) keyboard_modifiers#49 (byte) keyboard_modifiers#46 (byte) keyboard_modifiers#40 (byte) keyboard_modifiers#34 
Alias (byte) current_movedown_counter#31 = (byte) current_movedown_counter#57 (byte) current_movedown_counter#58 (byte) current_movedown_counter#56 (byte) current_movedown_counter#55 (byte) current_movedown_counter#54 (byte) current_movedown_counter#52 (byte) current_movedown_counter#49 (byte) current_movedown_counter#46 (byte) current_movedown_counter#42 (byte) current_movedown_counter#38 
Alias (word) lines_bcd#41 = (word) lines_bcd#86 (word) lines_bcd#87 (word) lines_bcd#85 (word) lines_bcd#84 (word) lines_bcd#83 (word) lines_bcd#80 (word) lines_bcd#76 (word) lines_bcd#70 (word) lines_bcd#63 (word) lines_bcd#52 
Alias (dword) score_bcd#41 = (dword) score_bcd#82 (dword) score_bcd#83 (dword) score_bcd#81 (dword) score_bcd#80 (dword) score_bcd#79 (dword) score_bcd#77 (dword) score_bcd#73 (dword) score_bcd#67 (dword) score_bcd#61 (dword) score_bcd#52 
Alias (byte) level_bcd#100 = (byte) level_bcd#99 (byte) level_bcd#98 (byte) level_bcd#97 (byte) level_bcd#96 (byte) level_bcd#93 (byte) level_bcd#88 (byte) level_bcd#80 (byte) level_bcd#73 (byte) level_bcd#63 (byte) level_bcd#51 
Alias (byte) render_screen_show#14 = (byte) render_screen_show#5 (byte) render_screen_show#59 (byte) render_screen_show#58 (byte) render_screen_show#56 (byte) render_screen_show#53 (byte) render_screen_show#49 (byte) render_screen_show#43 (byte) render_screen_show#36 (byte) render_screen_show#29 
Alias (byte) render_screen_render#16 = (byte) render_screen_render#5 (byte) render_screen_render#58 (byte) render_screen_render#55 (byte) render_screen_render#50 (byte) render_screen_render#44 (byte) render_screen_render#31 (byte) render_screen_render#36 (byte) render_screen_render#25 (byte) render_screen_render#38 
Alias (byte) current_movedown_slow#12 = (byte) current_movedown_slow#25 (byte) current_movedown_slow#84 (byte) current_movedown_slow#81 (byte) current_movedown_slow#76 (byte) current_movedown_slow#68 (byte) current_movedown_slow#56 
Alias (byte*) current_piece#19 = (byte*) current_piece#7 
Alias (byte) current_piece_char#19 = (byte) current_piece_char#7 
Alias (byte) current_orientation#10 = (byte) current_orientation#27 
Alias (byte*) current_piece_gfx#10 = (byte*) current_piece_gfx#24 
Alias (byte) current_xpos#11 = (byte) current_xpos#31 
Alias (byte) current_ypos#25 = (byte) current_ypos#8 
Alias (byte) game_over#17 = (byte) game_over#7 
Alias (byte) next_piece_idx#19 = (byte) next_piece_idx#7 
Alias (byte*) current_piece#20 = (byte*) current_piece#8 (byte*) current_piece#77 (byte*) current_piece#65 (byte*) current_piece#51 
Alias (byte) current_piece_char#20 = (byte) current_piece_char#8 (byte) current_piece_char#80 (byte) current_piece_char#64 (byte) current_piece_char#48 
Alias (byte) current_orientation#11 = (byte) current_orientation#28 (byte) current_orientation#82 (byte) current_orientation#72 (byte) current_orientation#59 
Alias (byte*) current_piece_gfx#11 = (byte*) current_piece_gfx#25 (byte*) current_piece_gfx#81 (byte*) current_piece_gfx#77 (byte*) current_piece_gfx#60 
Alias (byte) current_xpos#12 = (byte) current_xpos#32 (byte) current_xpos#76 (byte) current_xpos#91 (byte) current_xpos#72 
Alias (byte) current_ypos#26 = (byte) current_ypos#9 (byte) current_ypos#30 (byte) current_ypos#73 (byte) current_ypos#60 
Alias (byte) game_over#18 = (byte) game_over#8 (byte) game_over#68 (byte) game_over#55 (byte) game_over#42 
Alias (byte) next_piece_idx#20 = (byte) next_piece_idx#8 (byte) next_piece_idx#64 (byte) next_piece_idx#47 (byte) next_piece_idx#43 
Alias (byte) render_screen_show#18 = (byte) render_screen_show#30 (byte) render_screen_show#54 (byte) render_screen_show#50 (byte) render_screen_show#46 (byte) render_screen_show#44 (byte) render_screen_show#38 
Alias (byte) render_screen_showing#12 = (byte) render_screen_showing#19 
Alias (byte) keyboard_events_size#26 = (byte) keyboard_events_size#35 (byte) keyboard_events_size#42 
Alias (byte) keyboard_modifiers#22 = (byte) keyboard_modifiers#31 (byte) keyboard_modifiers#35 
Alias (byte) game_over#19 = (byte) game_over#56 (byte) game_over#69 (byte) game_over#44 (byte) game_over#31 (byte) game_over#32 
Alias (byte) current_movedown_counter#24 = (byte) current_movedown_counter#47 (byte) current_movedown_counter#50 (byte) current_movedown_counter#43 (byte) current_movedown_counter#39 (byte) current_movedown_counter#33 
Alias (byte) current_ypos#47 = (byte) current_ypos#91 (byte) current_ypos#95 (byte) current_ypos#83 (byte) current_ypos#74 (byte) current_ypos#62 
Alias (word) lines_bcd#30 = (word) lines_bcd#71 (word) lines_bcd#77 (word) lines_bcd#64 (word) lines_bcd#53 (word) lines_bcd#43 
Alias (dword) score_bcd#30 = (dword) score_bcd#68 (dword) score_bcd#74 (dword) score_bcd#62 (dword) score_bcd#53 (dword) score_bcd#43 
Alias (byte) level#39 = (byte) level#90 (byte) level#97 (byte) level#81 (byte) level#67 (byte) level#54 
Alias (byte) current_movedown_slow#44 = (byte) current_movedown_slow#82 (byte) current_movedown_slow#85 (byte) current_movedown_slow#77 (byte) current_movedown_slow#69 (byte) current_movedown_slow#58 
Alias (byte) level_bcd#39 = (byte) level_bcd#81 (byte) level_bcd#89 (byte) level_bcd#74 (byte) level_bcd#64 (byte) level_bcd#53 
Alias (byte*) current_piece#37 = (byte*) current_piece#84 (byte*) current_piece#89 (byte*) current_piece#78 (byte*) current_piece#66 (byte*) current_piece#53 
Alias (byte) current_piece_char#34 = (byte) current_piece_char#90 (byte) current_piece_char#96 (byte) current_piece_char#81 (byte) current_piece_char#65 (byte) current_piece_char#50 
Alias (byte) current_orientation#47 = (byte) current_orientation#90 (byte) current_orientation#93 (byte) current_orientation#83 (byte) current_orientation#73 (byte) current_orientation#61 
Alias (byte*) current_piece_gfx#102 = (byte*) current_piece_gfx#109 (byte*) current_piece_gfx#95 (byte*) current_piece_gfx#78 (byte*) current_piece_gfx#62 (byte*) current_piece_gfx#43 
Alias (byte) current_xpos#103 = (byte) current_xpos#112 (byte) current_xpos#116 (byte) current_xpos#92 (byte) current_xpos#74 (byte) current_xpos#56 
Alias (byte) next_piece_idx#33 = (byte) next_piece_idx#71 (byte) next_piece_idx#76 (byte) next_piece_idx#65 (byte) next_piece_idx#55 (byte) next_piece_idx#45 
Alias (byte) render_screen_render#46 = (byte) render_screen_render#61 (byte) render_screen_render#63 (byte) render_screen_render#59 (byte) render_screen_render#56 (byte) render_screen_render#53 (byte) render_screen_render#51 
Alias (byte) render_screen_showing#24 = (byte) render_screen_showing#3 (byte) render_screen_showing#8 (byte) render_screen_showing#34 (byte) render_screen_showing#30 (byte) render_screen_showing#28 
Alias (byte) keyboard_events_size#17 = (byte) keyboard_events_size#6 
Alias (byte) keyboard_modifiers#15 = (byte) keyboard_modifiers#7 (byte) keyboard_modifiers#43 (byte) keyboard_modifiers#41 (byte) keyboard_modifiers#37 
Alias (byte) keyboard_event_get::return#3 = (byte) keyboard_event_get::return#5 
Alias (byte) keyboard_events_size#18 = (byte) keyboard_events_size#7 (byte) keyboard_events_size#50 (byte) keyboard_events_size#44 
Alias (byte) main::key_event#0 = (byte~) main::$13 (byte) main::key_event#1 
Alias (byte) play_movement::return#3 = (byte) play_movement::return#5 
Alias (byte) current_movedown_counter#15 = (byte) current_movedown_counter#6 
Alias (byte) current_ypos#10 = (byte) current_ypos#27 
Alias (word) lines_bcd#18 = (word) lines_bcd#7 
Alias (dword) score_bcd#17 = (dword) score_bcd#7 
Alias (byte) level#23 = (byte) level#9 
Alias (byte) current_movedown_slow#13 = (byte) current_movedown_slow#26 
Alias (byte) level_bcd#10 = (byte) level_bcd#23 
Alias (byte*) current_piece#21 = (byte*) current_piece#9 
Alias (byte) current_piece_char#21 = (byte) current_piece_char#9 
Alias (byte) current_orientation#12 = (byte) current_orientation#29 
Alias (byte*) current_piece_gfx#12 = (byte*) current_piece_gfx#26 
Alias (byte) current_xpos#13 = (byte) current_xpos#33 
Alias (byte) game_over#20 = (byte) game_over#9 
Alias (byte) next_piece_idx#21 = (byte) next_piece_idx#9 
Alias (byte) main::render#1 = (byte~) main::$16 
Alias (byte) main::render#3 = (byte) main::render#4 
Alias (byte) render_screen_show#37 = (byte) render_screen_show#45 
Alias (byte) render_screen_render#45 = (byte) render_screen_render#52 
Alias (byte) current_movedown_slow#70 = (byte) current_movedown_slow#78 
Alias (byte*) current_piece#67 = (byte*) current_piece#79 
Alias (byte) current_piece_char#66 = (byte) current_piece_char#82 
Alias (byte) current_orientation#74 = (byte) current_orientation#84 
Alias (byte*) current_piece_gfx#79 = (byte*) current_piece_gfx#96 
Alias (byte) current_xpos#104 = (byte) current_xpos#93 
Alias (byte) current_ypos#75 = (byte) current_ypos#84 
Alias (byte) game_over#57 = (byte) game_over#70 
Alias (byte) next_piece_idx#56 = (byte) next_piece_idx#66 
Alias (byte) render_screen_showing#23 = (byte) render_screen_showing#29 
Alias (byte) keyboard_events_size#43 = (byte) keyboard_events_size#51 
Alias (byte) keyboard_modifiers#36 = (byte) keyboard_modifiers#42 
Alias (byte) current_movedown_counter#40 = (byte) current_movedown_counter#44 
Alias (word) lines_bcd#54 = (word) lines_bcd#65 
Alias (dword) score_bcd#54 = (dword) score_bcd#63 
Alias (byte) level#68 = (byte) level#82 
Alias (byte) level_bcd#65 = (byte) level_bcd#75 
Alias (byte) render_screen_render#20 = (byte) render_screen_render#30 (byte) render_screen_render#37 (byte) render_screen_render#39 (byte) render_screen_render#26 (byte) render_screen_render#21 
Alias (byte) current_ypos#31 = (byte) current_ypos#63 (byte) current_ypos#59 (byte) current_ypos#92 (byte) current_ypos#85 (byte) current_ypos#76 (byte) current_ypos#61 
Alias (byte) current_xpos#105 = (byte) current_xpos#71 (byte) current_xpos#77 (byte) current_xpos#113 (byte) current_xpos#106 (byte) current_xpos#94 (byte) current_xpos#73 
Alias (byte*) current_piece_gfx#103 = (byte*) current_piece_gfx#59 (byte*) current_piece_gfx#82 (byte*) current_piece_gfx#104 (byte*) current_piece_gfx#97 (byte*) current_piece_gfx#80 (byte*) current_piece_gfx#61 
Alias (byte) next_piece_idx#42 = (byte) next_piece_idx#72 (byte) next_piece_idx#67 (byte) next_piece_idx#48 (byte) next_piece_idx#68 (byte) next_piece_idx#57 (byte) next_piece_idx#44 
Alias (byte) render_screen_show#21 = (byte) render_screen_show#51 (byte) render_screen_show#28 (byte) render_screen_show#47 (byte) render_screen_show#39 (byte) render_screen_show#31 
Alias (byte) current_piece_char#47 = (byte) current_piece_char#97 (byte) current_piece_char#84 (byte) current_piece_char#91 (byte) current_piece_char#83 (byte) current_piece_char#67 (byte) current_piece_char#49 
Alias (dword) score_bcd#40 = (dword) score_bcd#75 (dword) score_bcd#69 (dword) score_bcd#64 (dword) score_bcd#45 (dword) score_bcd#55 (dword) score_bcd#42 
Alias (byte) current_movedown_slow#55 = (byte) current_movedown_slow#87 (byte) current_movedown_slow#86 (byte) current_movedown_slow#83 (byte) current_movedown_slow#79 (byte) current_movedown_slow#71 (byte) current_movedown_slow#57 
Alias (byte*) current_piece#50 = (byte*) current_piece#91 (byte*) current_piece#90 (byte*) current_piece#85 (byte*) current_piece#80 (byte*) current_piece#68 (byte*) current_piece#52 
Alias (byte) current_orientation#58 = (byte) current_orientation#95 (byte) current_orientation#94 (byte) current_orientation#91 (byte) current_orientation#85 (byte) current_orientation#75 (byte) current_orientation#60 
Alias (byte) game_over#41 = (byte) game_over#84 (byte) game_over#82 (byte) game_over#77 (byte) game_over#71 (byte) game_over#58 (byte) game_over#43 
Alias (byte) render_screen_showing#16 = (byte) render_screen_showing#41 (byte) render_screen_showing#38 (byte) render_screen_showing#35 (byte) render_screen_showing#31 (byte) render_screen_showing#25 (byte) render_screen_showing#18 
Alias (byte) keyboard_events_size#32 = (byte) keyboard_events_size#70 (byte) keyboard_events_size#65 (byte) keyboard_events_size#59 (byte) keyboard_events_size#52 (byte) keyboard_events_size#45 (byte) keyboard_events_size#34 
Alias (byte) keyboard_modifiers#28 = (byte) keyboard_modifiers#53 (byte) keyboard_modifiers#50 (byte) keyboard_modifiers#47 (byte) keyboard_modifiers#44 (byte) keyboard_modifiers#38 (byte) keyboard_modifiers#30 
Alias (byte) current_movedown_counter#30 = (byte) current_movedown_counter#53 (byte) current_movedown_counter#51 (byte) current_movedown_counter#48 (byte) current_movedown_counter#45 (byte) current_movedown_counter#41 (byte) current_movedown_counter#32 
Alias (word) lines_bcd#40 = (word) lines_bcd#81 (word) lines_bcd#78 (word) lines_bcd#72 (word) lines_bcd#66 (word) lines_bcd#55 (word) lines_bcd#42 
Alias (byte) level#102 = (byte) level#51 (byte) level#98 (byte) level#91 (byte) level#83 (byte) level#69 (byte) level#53 
Alias (byte) level_bcd#50 = (byte) level_bcd#94 (byte) level_bcd#90 (byte) level_bcd#82 (byte) level_bcd#76 (byte) level_bcd#66 (byte) level_bcd#52 
Alias (byte) render_screen_render#17 = (byte) render_screen_render#6 
Alias (byte) render_screen_show#15 = (byte) render_screen_show#6 
Alias (byte) render_screen_show#16 = (byte) render_screen_show#23 (byte) render_screen_show#7 
Alias (byte) render_screen_render#18 = (byte) render_screen_render#28 (byte) render_screen_render#7 
Alias (byte) current_movedown_slow#14 = (byte) current_movedown_slow#27 (byte) current_movedown_slow#45 
Alias (byte*) current_piece#10 = (byte*) current_piece#22 (byte*) current_piece#38 
Alias (byte) current_piece_char#10 = (byte) current_piece_char#22 (byte) current_piece_char#35 
Alias (byte) current_orientation#13 = (byte) current_orientation#30 (byte) current_orientation#48 
Alias (byte*) current_piece_gfx#13 = (byte*) current_piece_gfx#27 (byte*) current_piece_gfx#44 
Alias (byte) current_xpos#14 = (byte) current_xpos#34 (byte) current_xpos#57 
Alias (byte) current_ypos#11 = (byte) current_ypos#28 (byte) current_ypos#48 
Alias (byte) game_over#10 = (byte) game_over#21 (byte) game_over#33 
Alias (byte) next_piece_idx#10 = (byte) next_piece_idx#22 (byte) next_piece_idx#34 
Alias (byte) render_screen_showing#13 = (byte) render_screen_showing#9 (byte) render_screen_showing#4 
Alias (byte) keyboard_events_size#19 = (byte) keyboard_events_size#27 (byte) keyboard_events_size#8 
Alias (byte) keyboard_modifiers#16 = (byte) keyboard_modifiers#23 (byte) keyboard_modifiers#8 
Alias (byte) current_movedown_counter#16 = (byte) current_movedown_counter#25 (byte) current_movedown_counter#7 
Alias (word) lines_bcd#19 = (word) lines_bcd#31 (word) lines_bcd#8 
Alias (dword) score_bcd#18 = (dword) score_bcd#31 (dword) score_bcd#8 
Alias (byte) level#10 = (byte) level#24 (byte) level#40 
Alias (byte) level_bcd#11 = (byte) level_bcd#24 (byte) level_bcd#40 
Alias (byte) render_screen_show#17 = (byte) render_screen_show#8 
Alias (byte) render_screen_render#19 = (byte) render_screen_render#8 
Alias (byte) current_movedown_slow#15 = (byte) current_movedown_slow#28 
Alias (byte*) current_piece#11 = (byte*) current_piece#23 
Alias (byte) current_piece_char#11 = (byte) current_piece_char#23 
Alias (byte) current_orientation#14 = (byte) current_orientation#31 
Alias (byte*) current_piece_gfx#14 = (byte*) current_piece_gfx#28 
Alias (byte) current_xpos#15 = (byte) current_xpos#35 
Alias (byte) current_ypos#12 = (byte) current_ypos#29 
Alias (byte) game_over#11 = (byte) game_over#22 
Alias (byte) next_piece_idx#11 = (byte) next_piece_idx#23 
Alias (byte) render_screen_showing#10 = (byte) render_screen_showing#5 
Alias (byte) keyboard_events_size#20 = (byte) keyboard_events_size#9 
Alias (byte) keyboard_modifiers#17 = (byte) keyboard_modifiers#9 
Alias (byte) current_movedown_counter#17 = (byte) current_movedown_counter#8 
Alias (word) lines_bcd#20 = (word) lines_bcd#9 
Alias (dword) score_bcd#19 = (dword) score_bcd#9 
Alias (byte) level#11 = (byte) level#25 
Alias (byte) level_bcd#12 = (byte) level_bcd#25 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)(byte) render_screen_showing#1 = (byte) render_screen_show#11 (byte) render_screen_show#10 (byte) render_screen_showing#6 (byte) render_screen_showing#2 
Alias candidate removed (volatile)(byte) IRQ_RASTER_FIRST#0 = (byte~) $4 (byte) irq_raster_next#0 (byte) irq_raster_next#24 (byte) irq_raster_next#23 (byte) irq_raster_next#22 (byte) irq_raster_next#20 (byte) irq_raster_next#17 (byte) irq_raster_next#10 
Alias candidate removed (volatile)(byte) irq_sprite_ypos#0 = (byte~) $5 (byte) irq_sprite_ypos#24 (byte) irq_sprite_ypos#22 (byte) irq_sprite_ypos#21 (byte) irq_sprite_ypos#18 (byte) irq_sprite_ypos#14 (byte) irq_sprite_ypos#9 
Alias candidate removed (volatile)(byte) irq_sprite_ptr#0 = (byte~) $7 (byte) irq_sprite_ptr#18 (byte) irq_sprite_ptr#17 (byte) irq_sprite_ptr#14 
Alias candidate removed (volatile)(byte) sprites_irq::raster_sprite_gfx_modify#0 = (byte~) sprites_irq::$0 
Alias candidate removed (volatile)(byte) sprites_irq::toSpritePtr2_return#0 = (byte~) sprites_irq::toSpritePtr2_$2#0 (byte) sprites_irq::toSpritePtr2_return#2 (byte) sprites_irq::toSpritePtr2_return#1 (byte) sprites_irq::toSpritePtr2_return#3 (byte~) sprites_irq::$5 (byte) irq_sprite_ptr#1 
Alias (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#4 
Alias (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#3 
Alias (byte) keyboard_event_scan::row_scan#1 = (byte) keyboard_event_scan::row_scan#3 
Alias (byte) keyboard_event_scan::row#10 = (byte) keyboard_event_scan::row#6 
Alias (byte) keyboard_events_size#13 = (byte) keyboard_events_size#55 (byte) keyboard_events_size#54 (byte) keyboard_events_size#38 (byte) keyboard_events_size#23 
Alias (byte) level#12 = (byte) level#26 
Alias (dword) score_bcd#10 = (dword) score_bcd#20 
Alias (word) lines_bcd#10 = (word) lines_bcd#56 
Alias (byte) level_bcd#13 = (byte) level_bcd#83 
Alias (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#7 
Alias (byte) render_moving::xpos#2 = (byte) render_moving::xpos#3 
Alias (byte) render_moving::c#2 = (byte) render_moving::c#3 
Alias (byte) render_moving::ypos#5 = (byte) render_moving::ypos#7 
Alias (byte) render_moving::l#3 = (byte) render_moving::l#6 
Alias (byte*) current_piece_gfx#15 = (byte*) current_piece_gfx#30 
Alias (byte) render_moving::i#2 = (byte) render_moving::i#7 
Alias (byte) current_piece_char#12 = (byte) current_piece_char#38 
Alias (byte*) render_moving::screen_line#1 = (byte*) render_moving::screen_line#3 
Alias (byte) render_screen_render#41 = (byte) render_screen_render#47 
Alias (byte) current_xpos#78 = (byte) current_xpos#95 
Alias (byte) next_piece_idx#12 = (byte) next_piece_idx#24 
Alias (byte*) render_next::screen_next_area#5 = (byte*) render_next::screen_next_area#7 
Alias (byte) render_next::c#2 = (byte) render_next::c#3 
Alias (byte*) render_next::next_piece_gfx#1 = (byte*) render_next::next_piece_gfx#4 
Alias (byte) render_next::l#2 = (byte) render_next::l#4 
Alias (byte) render_next::next_piece_char#1 = (byte) render_next::next_piece_char#4 
Alias (byte) irq_cnt#10 = (byte) irq_cnt#4 
Alias (byte) irq_raster_next#11 = (byte) irq_raster_next#14 
Alias (byte) irq_sprite_ypos#10 = (byte) irq_sprite_ypos#15 
Alias (byte) irq_sprite_ptr#10 = (byte) irq_sprite_ptr#15 
Alias (byte) current_movedown_counter#1 = (byte) current_movedown_counter#10 
Alias (byte) current_ypos#1 = (byte) current_ypos#15 
Alias (word) lines_bcd#1 = (word) lines_bcd#13 
Alias (dword) score_bcd#1 = (dword) score_bcd#12 
Alias (byte) level#1 = (byte) level#15 
Alias (byte) current_movedown_slow#17 = (byte) current_movedown_slow#18 
Alias (byte) level_bcd#1 = (byte) level_bcd#15 
Alias (byte*) current_piece#1 = (byte*) current_piece#13 
Alias (byte) current_piece_char#1 = (byte) current_piece_char#14 
Alias (byte) game_over#1 = (byte) game_over#13 
Alias (byte) next_piece_idx#1 = (byte) next_piece_idx#14 
Alias (byte) current_movedown_counter#12 = (byte) current_movedown_counter#13 (byte) current_movedown_counter#3 (byte) current_movedown_counter#23 
Alias (byte) current_movedown_slow#19 = (byte) current_movedown_slow#33 (byte) current_movedown_slow#61 (byte) current_movedown_slow#36 
Alias (byte) current_ypos#16 = (byte) current_ypos#65 (byte) current_ypos#87 (byte) current_ypos#51 
Alias (byte) current_xpos#108 = (byte) current_xpos#80 (byte) current_xpos#61 (byte) current_xpos#20 
Alias (byte) current_orientation#18 = (byte) current_orientation#63 (byte) current_orientation#86 (byte) current_orientation#51 
Alias (word) lines_bcd#25 = (word) lines_bcd#59 (word) lines_bcd#74 (word) lines_bcd#47 
Alias (dword) score_bcd#25 = (dword) score_bcd#57 (dword) score_bcd#71 (dword) score_bcd#47 
Alias (byte) level#32 = (byte) level#73 (byte) level#93 (byte) level#60 
Alias (byte) level_bcd#30 = (byte) level_bcd#69 (byte) level_bcd#86 (byte) level_bcd#57 
Alias (byte*) current_piece#27 = (byte*) current_piece#69 (byte*) current_piece#86 (byte*) current_piece#56 
Alias (byte) current_piece_char#28 = (byte) current_piece_char#71 (byte) current_piece_char#93 (byte) current_piece_char#54 
Alias (byte*) current_piece_gfx#106 = (byte*) current_piece_gfx#85 (byte*) current_piece_gfx#66 (byte*) current_piece_gfx#34 
Alias (byte) game_over#26 = (byte) game_over#60 (byte) game_over#79 (byte) game_over#47 
Alias (byte) next_piece_idx#29 = (byte) next_piece_idx#58 (byte) next_piece_idx#73 (byte) next_piece_idx#50 
Alias (byte) current_xpos#23 = (byte) current_xpos#48 
Alias (byte) current_xpos#28 = (byte) current_xpos#50 
Alias (byte) current_ypos#22 = (byte) current_ypos#42 
Alias (byte*) current_piece#16 = (byte*) current_piece#46 
Alias (byte) current_orientation#23 = (byte) current_orientation#43 
Alias (byte*) current_piece_gfx#37 = (byte*) current_piece_gfx#38 
Alias (byte) play_collision::xp#2 = (byte) play_collision::xp#3 
Alias (byte) play_collision::c#2 = (byte) play_collision::c#3 
Alias (byte*) play_collision::piece_gfx#1 = (byte*) play_collision::piece_gfx#3 
Alias (byte) play_collision::i#1 = (byte) play_collision::i#4 
Alias (byte) play_collision::yp#3 = (byte) play_collision::yp#4 
Alias (byte) play_collision::l#2 = (byte) play_collision::l#4 
Alias (byte) play_collision::xpos#10 = (byte) play_collision::xpos#7 
Alias (byte*) play_collision::playfield_line#1 = (byte*) play_collision::playfield_line#6 
Alias (byte) play_lock_current::xp#2 = (byte) play_lock_current::xp#3 
Alias (byte) play_lock_current::c#2 = (byte) play_lock_current::c#3 
Alias (byte*) current_piece_gfx#22 = (byte*) current_piece_gfx#40 
Alias (byte) play_lock_current::i#1 = (byte) play_lock_current::i#4 
Alias (byte) play_lock_current::yp#3 = (byte) play_lock_current::yp#5 
Alias (byte) play_lock_current::l#2 = (byte) play_lock_current::l#4 
Alias (byte) current_piece_char#17 = (byte) current_piece_char#44 
Alias (byte*) play_lock_current::playfield_line#1 = (byte*) play_lock_current::playfield_line#3 
Alias (byte) current_xpos#53 = (byte) current_xpos#86 
Alias (byte*) current_piece#5 = (byte*) current_piece#62 
Alias (byte) current_piece_char#5 = (byte) current_piece_char#61 
Alias (byte) current_orientation#69 = (byte) current_orientation#78 
Alias (byte*) current_piece_gfx#74 = (byte*) current_piece_gfx#8 
Alias (byte) current_xpos#100 = (byte) current_xpos#88 
Alias (byte) current_ypos#6 = (byte) current_ypos#70 
Alias (byte) play_remove_lines::c#0 = (byte) play_remove_lines::c#1 
Alias (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#8 
Alias (byte) play_remove_lines::x#2 = (byte) play_remove_lines::x#3 
Alias (byte) play_remove_lines::r#1 = (byte) play_remove_lines::r#4 (byte) play_remove_lines::r#5 
Alias (byte) play_remove_lines::y#2 = (byte) play_remove_lines::y#3 (byte) play_remove_lines::y#6 
Alias (byte) play_remove_lines::removed#10 = (byte) play_remove_lines::removed#2 
Alias (byte) level_bcd#20 = (byte) level_bcd#36 
Alias (byte) level#21 = (byte) level#77 (byte) level#65 
Alias (byte) current_movedown_slow#66 = (byte) current_movedown_slow#73 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)(byte) render_screen_showing#1 = (byte) render_screen_show#11 (byte) render_screen_show#10 (byte) render_screen_showing#6 (byte) render_screen_showing#2 
Alias candidate removed (volatile)(byte) IRQ_RASTER_FIRST#0 = (byte~) $4 (byte) irq_raster_next#0 (byte) irq_raster_next#24 (byte) irq_raster_next#23 (byte) irq_raster_next#22 (byte) irq_raster_next#20 (byte) irq_raster_next#17 (byte) irq_raster_next#10 
Alias candidate removed (volatile)(byte) irq_sprite_ypos#0 = (byte~) $5 (byte) irq_sprite_ypos#24 (byte) irq_sprite_ypos#22 (byte) irq_sprite_ypos#21 (byte) irq_sprite_ypos#18 (byte) irq_sprite_ypos#14 (byte) irq_sprite_ypos#9 
Alias candidate removed (volatile)(byte) irq_sprite_ptr#0 = (byte~) $7 (byte) irq_sprite_ptr#18 (byte) irq_sprite_ptr#17 (byte) irq_sprite_ptr#14 
Alias candidate removed (volatile)(byte) sprites_irq::raster_sprite_gfx_modify#0 = (byte~) sprites_irq::$0 
Alias candidate removed (volatile)(byte) sprites_irq::toSpritePtr2_return#0 = (byte~) sprites_irq::toSpritePtr2_$2#0 (byte) sprites_irq::toSpritePtr2_return#2 (byte) sprites_irq::toSpritePtr2_return#1 (byte) sprites_irq::toSpritePtr2_return#3 (byte~) sprites_irq::$5 (byte) irq_sprite_ptr#1 
Identical Phi Values (byte) keyboard_matrix_read::rowid#1 (byte) keyboard_matrix_read::rowid#0
Identical Phi Values (byte) keyboard_events_size#53 (byte) keyboard_events_size#26
Identical Phi Values (byte) keyboard_event_scan::row_scan#1 (byte) keyboard_event_scan::row_scan#0
Identical Phi Values (byte) keyboard_event_scan::row#10 (byte) keyboard_event_scan::row#2
Identical Phi Values (byte) keyboard_events_size#14 (byte) keyboard_events_size#17
Identical Phi Values (byte) render_screen_show#10 (byte) render_screen_show#18
Identical Phi Values (byte) level#12 (byte) level#39
Identical Phi Values (byte) render_screen_show#11 (byte) render_screen_show#10
Identical Phi Values (byte) render_screen_showing#6 (byte) render_screen_showing#1
Identical Phi Values (byte) render_screen_render#10 (byte) render_screen_render#20
Identical Phi Values (byte) render_screen_show#12 (byte) render_screen_show#21
Identical Phi Values (byte) render_screen_render#12 (byte) render_screen_render#20
Identical Phi Values (dword) score_bcd#10 (dword) score_bcd#40
Identical Phi Values (word) lines_bcd#10 (word) lines_bcd#40
Identical Phi Values (byte) level_bcd#13 (byte) level_bcd#50
Identical Phi Values (byte*) render_screen_original::oscr#3 (byte*) render_screen_original::oscr#4
Identical Phi Values (byte*) render_screen_original::ocols#3 (byte*) render_screen_original::ocols#4
Identical Phi Values (byte) render_screen_original::y#5 (byte) render_screen_original::y#6
Identical Phi Values (byte) render_screen_original::y#4 (byte) render_screen_original::y#5
Identical Phi Values (byte) render_screen_original::y#2 (byte) render_screen_original::y#4
Identical Phi Values (byte*) render_screen_original::oscr#5 (byte*) render_screen_original::oscr#1
Identical Phi Values (byte*) render_screen_original::ocols#5 (byte*) render_screen_original::ocols#1
Identical Phi Values (byte) render_playfield::l#3 (byte) render_playfield::l#2
Identical Phi Values (byte) render_screen_render#23 (byte) render_screen_render#13
Identical Phi Values (byte*) current_piece_gfx#15 (byte*) current_piece_gfx#29
Identical Phi Values (byte) current_piece_char#12 (byte) current_piece_char#37
Identical Phi Values (byte*) render_moving::screen_line#1 (byte*) render_moving::screen_line#0
Identical Phi Values (byte) render_moving::ypos#5 (byte) render_moving::ypos#2
Identical Phi Values (byte) render_moving::l#3 (byte) render_moving::l#4
Identical Phi Values (byte) render_screen_render#41 (byte) render_screen_render#14
Identical Phi Values (byte) current_xpos#78 (byte) current_xpos#16
Identical Phi Values (byte) render_next::next_piece_char#1 (byte) render_next::next_piece_char#3
Identical Phi Values (byte) render_next::l#2 (byte) render_next::l#7
Identical Phi Values (byte) irq_sprite_ypos#24 (byte) irq_sprite_ypos#0
Identical Phi Values (byte) irq_raster_next#24 (byte) irq_raster_next#0
Identical Phi Values (byte) irq_sprite_ypos#22 (byte) irq_sprite_ypos#24
Identical Phi Values (byte) irq_raster_next#23 (byte) irq_raster_next#24
Identical Phi Values (byte) irq_sprite_ypos#21 (byte) irq_sprite_ypos#22
Identical Phi Values (byte) irq_raster_next#22 (byte) irq_raster_next#23
Identical Phi Values (byte) irq_sprite_ypos#5 (byte) irq_sprite_ypos#9
Identical Phi Values (byte) irq_raster_next#5 (byte) irq_raster_next#10
Identical Phi Values (byte) irq_sprite_ptr#12 (byte) irq_sprite_ptr#14
Identical Phi Values (byte) render_screen_showing#15 (byte) render_screen_showing#0
Identical Phi Values (byte) irq_cnt#15 (byte) irq_cnt#0
Identical Phi Values (byte) sprites_irq::raster_sprite_gfx_modify#1 (byte) sprites_irq::raster_sprite_gfx_modify#0
Identical Phi Values (byte) irq_sprite_ptr#10 (byte) irq_sprite_ptr#12
Identical Phi Values (byte) render_screen_showing#11 (byte) render_screen_showing#15
Identical Phi Values (byte) irq_cnt#10 (byte) irq_cnt#15
Identical Phi Values (byte) irq_raster_next#11 (byte) irq_raster_next#5
Identical Phi Values (byte) irq_sprite_ypos#10 (byte) irq_sprite_ypos#5
Identical Phi Values (byte) sprites_irq::toSpritePtr2_return#2 (byte) sprites_irq::toSpritePtr2_return#0
Identical Phi Values (byte) sprites_irq::toSpritePtr2_return#3 (byte) sprites_irq::toSpritePtr2_return#1
Identical Phi Values (byte) irq_sprite_ypos#18 (byte) irq_sprite_ypos#21
Identical Phi Values (byte) irq_raster_next#20 (byte) irq_raster_next#22
Identical Phi Values (byte) irq_sprite_ptr#18 (byte) irq_sprite_ptr#0
Identical Phi Values (byte) level#44 (byte) level#100
Identical Phi Values (byte) level#13 (byte) level#44
Identical Phi Values (byte) current_movedown_slow#16 (byte) current_movedown_slow#1
Identical Phi Values (byte) play_movement::key_event#1 (byte) play_movement::key_event#0
Identical Phi Values (byte) current_movedown_counter#18 (byte) current_movedown_counter#24
Identical Phi Values (byte) current_ypos#32 (byte) current_ypos#47
Identical Phi Values (word) lines_bcd#22 (word) lines_bcd#30
Identical Phi Values (dword) score_bcd#22 (dword) score_bcd#30
Identical Phi Values (byte) level#29 (byte) level#39
Identical Phi Values (byte) current_movedown_slow#30 (byte) current_movedown_slow#44
Identical Phi Values (byte) level_bcd#27 (byte) level_bcd#39
Identical Phi Values (byte*) current_piece#24 (byte*) current_piece#37
Identical Phi Values (byte) current_piece_char#25 (byte) current_piece_char#34
Identical Phi Values (byte) current_orientation#32 (byte) current_orientation#47
Identical Phi Values (byte*) current_piece_gfx#31 (byte*) current_piece_gfx#102
Identical Phi Values (byte) current_xpos#37 (byte) current_xpos#103
Identical Phi Values (byte) game_over#23 (byte) game_over#19
Identical Phi Values (byte) next_piece_idx#26 (byte) next_piece_idx#33
Identical Phi Values (byte) current_movedown_counter#1 (byte) current_movedown_counter#14
Identical Phi Values (byte) current_ypos#1 (byte) current_ypos#19
Identical Phi Values (word) lines_bcd#1 (word) lines_bcd#15
Identical Phi Values (dword) score_bcd#1 (dword) score_bcd#14
Identical Phi Values (byte) level#1 (byte) level#17
Identical Phi Values (byte) current_movedown_slow#17 (byte) current_movedown_slow#21
Identical Phi Values (byte) level_bcd#1 (byte) level_bcd#17
Identical Phi Values (byte*) current_piece#1 (byte*) current_piece#15
Identical Phi Values (byte) current_piece_char#1 (byte) current_piece_char#16
Identical Phi Values (byte) current_orientation#1 (byte) current_orientation#20
Identical Phi Values (byte*) current_piece_gfx#1 (byte*) current_piece_gfx#20
Identical Phi Values (byte) current_xpos#1 (byte) current_xpos#22
Identical Phi Values (byte) game_over#1 (byte) game_over#15
Identical Phi Values (byte) next_piece_idx#1 (byte) next_piece_idx#16
Identical Phi Values (byte) current_xpos#18 (byte) current_xpos#26
Identical Phi Values (byte) current_orientation#16 (byte) current_orientation#25
Identical Phi Values (byte*) current_piece_gfx#17 (byte*) current_piece_gfx#21
Identical Phi Values (byte) current_movedown_counter#11 (byte) current_movedown_counter#18
Identical Phi Values (byte) play_move_down::key_event#1 (byte) play_move_down::key_event#0
Identical Phi Values (byte) current_movedown_slow#19 (byte) current_movedown_slow#30
Identical Phi Values (byte) current_ypos#16 (byte) current_ypos#32
Identical Phi Values (byte) current_xpos#108 (byte) current_xpos#37
Identical Phi Values (byte) current_orientation#18 (byte) current_orientation#32
Identical Phi Values (word) lines_bcd#25 (word) lines_bcd#22
Identical Phi Values (dword) score_bcd#25 (dword) score_bcd#22
Identical Phi Values (byte) level#32 (byte) level#29
Identical Phi Values (byte) level_bcd#30 (byte) level_bcd#27
Identical Phi Values (byte*) current_piece#27 (byte*) current_piece#24
Identical Phi Values (byte) current_piece_char#28 (byte) current_piece_char#25
Identical Phi Values (byte*) current_piece_gfx#106 (byte*) current_piece_gfx#31
Identical Phi Values (byte) game_over#26 (byte) game_over#23
Identical Phi Values (byte) next_piece_idx#29 (byte) next_piece_idx#26
Identical Phi Values (word) lines_bcd#14 (word) lines_bcd#17
Identical Phi Values (dword) score_bcd#13 (dword) score_bcd#16
Identical Phi Values (byte) level#16 (byte) level#19
Identical Phi Values (byte) current_movedown_slow#20 (byte) current_movedown_slow#23
Identical Phi Values (byte) level_bcd#16 (byte) level_bcd#19
Identical Phi Values (byte*) current_piece#14 (byte*) current_piece#18
Identical Phi Values (byte) current_piece_char#15 (byte) current_piece_char#18
Identical Phi Values (byte) current_orientation#19 (byte) current_orientation#26
Identical Phi Values (byte*) current_piece_gfx#19 (byte*) current_piece_gfx#100
Identical Phi Values (byte) current_xpos#21 (byte) current_xpos#10
Identical Phi Values (byte) current_ypos#18 (byte) current_ypos#24
Identical Phi Values (byte) game_over#14 (byte) game_over#16
Identical Phi Values (byte) next_piece_idx#15 (byte) next_piece_idx#18
Identical Phi Values (byte) play_move_leftright::key_event#1 (byte) play_move_leftright::key_event#0
Identical Phi Values (byte) current_xpos#23 (byte) current_xpos#1
Identical Phi Values (byte) current_ypos#20 (byte) current_ypos#1
Identical Phi Values (byte) current_orientation#21 (byte) current_orientation#1
Identical Phi Values (byte*) current_piece#32 (byte*) current_piece#1
Identical Phi Values (byte) play_move_rotate::key_event#1 (byte) play_move_rotate::key_event#0
Identical Phi Values (byte) current_orientation#23 (byte) current_orientation#1
Identical Phi Values (byte) current_xpos#28 (byte) current_xpos#18
Identical Phi Values (byte) current_ypos#22 (byte) current_ypos#1
Identical Phi Values (byte*) current_piece#16 (byte*) current_piece#1
Identical Phi Values (byte*) current_piece_gfx#37 (byte*) current_piece_gfx#1
Identical Phi Values (byte) irq_sprite_ypos#14 (byte) irq_sprite_ypos#18
Identical Phi Values (byte) irq_raster_next#17 (byte) irq_raster_next#20
Identical Phi Values (byte) irq_sprite_ptr#17 (byte) irq_sprite_ptr#18
Identical Phi Values (byte*) play_collision::piece_gfx#1 (byte*) play_collision::piece_gfx#2
Identical Phi Values (byte) play_collision::yp#3 (byte) play_collision::yp#2
Identical Phi Values (byte) play_collision::l#2 (byte) play_collision::l#6
Identical Phi Values (byte) play_collision::xpos#10 (byte) play_collision::xp#0
Identical Phi Values (byte*) play_collision::playfield_line#1 (byte*) play_collision::playfield_line#0
Identical Phi Values (byte) current_ypos#23 (byte) current_ypos#16
Identical Phi Values (byte) current_xpos#52 (byte) current_xpos#108
Identical Phi Values (byte*) current_piece_gfx#54 (byte*) current_piece_gfx#106
Identical Phi Values (byte) current_piece_char#59 (byte) current_piece_char#28
Identical Phi Values (byte*) current_piece_gfx#22 (byte*) current_piece_gfx#39
Identical Phi Values (byte) current_piece_char#17 (byte) current_piece_char#43
Identical Phi Values (byte*) play_lock_current::playfield_line#1 (byte*) play_lock_current::playfield_line#0
Identical Phi Values (byte) play_lock_current::yp#3 (byte) play_lock_current::yp#2
Identical Phi Values (byte) play_lock_current::l#2 (byte) play_lock_current::l#6
Identical Phi Values (byte) current_xpos#53 (byte) current_xpos#29
Identical Phi Values (byte*) current_piece#18 (byte*) current_piece#5
Identical Phi Values (byte) current_piece_char#18 (byte) current_piece_char#5
Identical Phi Values (byte) current_orientation#26 (byte) current_orientation#69
Identical Phi Values (byte*) current_piece_gfx#100 (byte*) current_piece_gfx#74
Identical Phi Values (byte) current_xpos#10 (byte) current_xpos#100
Identical Phi Values (byte) current_ypos#24 (byte) current_ypos#6
Identical Phi Values (byte) game_over#16 (byte) game_over#52
Identical Phi Values (byte) play_remove_lines::y#2 (byte) play_remove_lines::y#8
Identical Phi Values (byte) play_remove_lines::removed#10 (byte) play_remove_lines::removed#11
Identical Phi Values (byte) play_remove_lines::removed#3 (byte) play_remove_lines::removed#8
Identical Phi Values (byte) play_update_score::removed#1 (byte) play_update_score::removed#0
Identical Phi Values (word) lines_bcd#16 (word) lines_bcd#25
Identical Phi Values (dword) score_bcd#15 (dword) score_bcd#25
Identical Phi Values (byte) level#35 (byte) level#32
Identical Phi Values (byte) current_movedown_slow#39 (byte) current_movedown_slow#19
Identical Phi Values (byte) level_bcd#33 (byte) level_bcd#30
Identical Phi Values (byte) level#18 (byte) level#22
Identical Phi Values (byte) current_movedown_slow#22 (byte) current_movedown_slow#11
Identical Phi Values (byte) level_bcd#18 (byte) level_bcd#22
Identical Phi Values (byte) level#20 (byte) level#35
Identical Phi Values (byte) level_bcd#20 (byte) level_bcd#33
Identical Phi Values (byte) level#22 (byte) level#21
Identical Phi Values (byte) current_movedown_slow#11 (byte) current_movedown_slow#66
Identical Phi Values (byte) level_bcd#22 (byte) level_bcd#62
Identical Phi Values (byte) render_screen_show#22 (byte) render_screen_show#0
Identical Phi Values (byte) render_screen_render#27 (byte) render_screen_render#0
Identical Phi Values (byte) current_movedown_slow#43 (byte) current_movedown_slow#0
Identical Phi Values (byte) next_piece_idx#32 (byte) next_piece_idx#0
Identical Phi Values (byte*) current_piece#36 (byte*) current_piece#0
Identical Phi Values (byte) current_piece_char#33 (byte) current_piece_char#0
Identical Phi Values (byte) current_orientation#46 (byte) current_orientation#0
Identical Phi Values (byte*) current_piece_gfx#101 (byte*) current_piece_gfx#0
Identical Phi Values (byte) current_xpos#102 (byte) current_xpos#0
Identical Phi Values (byte) current_ypos#46 (byte) current_ypos#0
Identical Phi Values (byte) game_over#30 (byte) game_over#0
Identical Phi Values (byte) level#100 (byte) level#0
Identical Phi Values (byte) render_screen_showing#17 (byte) render_screen_showing#0
Identical Phi Values (byte) keyboard_events_size#33 (byte) keyboard_events_size#0
Identical Phi Values (byte) keyboard_modifiers#29 (byte) keyboard_modifiers#0
Identical Phi Values (byte) current_movedown_counter#31 (byte) current_movedown_counter#0
Identical Phi Values (word) lines_bcd#41 (word) lines_bcd#0
Identical Phi Values (dword) score_bcd#41 (dword) score_bcd#0
Identical Phi Values (byte) level_bcd#100 (byte) level_bcd#0
Identical Phi Values (byte) render_screen_show#14 (byte) render_screen_show#1
Identical Phi Values (byte) render_screen_render#16 (byte) render_screen_render#1
Identical Phi Values (byte) current_movedown_slow#12 (byte) current_movedown_slow#16
Identical Phi Values (byte*) current_piece#19 (byte*) current_piece#18
Identical Phi Values (byte) current_piece_char#19 (byte) current_piece_char#18
Identical Phi Values (byte) current_orientation#10 (byte) current_orientation#26
Identical Phi Values (byte*) current_piece_gfx#10 (byte*) current_piece_gfx#100
Identical Phi Values (byte) current_xpos#11 (byte) current_xpos#10
Identical Phi Values (byte) current_ypos#25 (byte) current_ypos#24
Identical Phi Values (byte) game_over#17 (byte) game_over#16
Identical Phi Values (byte) next_piece_idx#19 (byte) next_piece_idx#18
Identical Phi Values (byte*) current_piece#20 (byte*) current_piece#18
Identical Phi Values (byte) current_piece_char#20 (byte) current_piece_char#18
Identical Phi Values (byte) current_orientation#11 (byte) current_orientation#26
Identical Phi Values (byte*) current_piece_gfx#11 (byte*) current_piece_gfx#100
Identical Phi Values (byte) current_xpos#12 (byte) current_xpos#10
Identical Phi Values (byte) current_ypos#26 (byte) current_ypos#24
Identical Phi Values (byte) game_over#18 (byte) game_over#16
Identical Phi Values (byte) next_piece_idx#20 (byte) next_piece_idx#18
Identical Phi Values (byte) render_screen_show#18 (byte) render_screen_show#16
Identical Phi Values (byte) render_screen_showing#12 (byte) render_screen_showing#13
Identical Phi Values (byte) keyboard_events_size#26 (byte) keyboard_events_size#19
Identical Phi Values (byte) keyboard_modifiers#22 (byte) keyboard_modifiers#16
Identical Phi Values (byte) game_over#19 (byte) game_over#10
Identical Phi Values (byte) current_movedown_counter#24 (byte) current_movedown_counter#16
Identical Phi Values (byte) current_ypos#47 (byte) current_ypos#11
Identical Phi Values (word) lines_bcd#30 (word) lines_bcd#19
Identical Phi Values (dword) score_bcd#30 (dword) score_bcd#18
Identical Phi Values (byte) level#39 (byte) level#10
Identical Phi Values (byte) current_movedown_slow#44 (byte) current_movedown_slow#14
Identical Phi Values (byte) level_bcd#39 (byte) level_bcd#11
Identical Phi Values (byte*) current_piece#37 (byte*) current_piece#10
Identical Phi Values (byte) current_piece_char#34 (byte) current_piece_char#10
Identical Phi Values (byte) current_orientation#47 (byte) current_orientation#13
Identical Phi Values (byte*) current_piece_gfx#102 (byte*) current_piece_gfx#13
Identical Phi Values (byte) current_xpos#103 (byte) current_xpos#14
Identical Phi Values (byte) next_piece_idx#33 (byte) next_piece_idx#10
Identical Phi Values (byte) render_screen_render#46 (byte) render_screen_render#18
Identical Phi Values (byte) render_screen_showing#24 (byte) render_screen_showing#2
Identical Phi Values (byte) keyboard_events_size#17 (byte) keyboard_events_size#13
Identical Phi Values (byte) keyboard_modifiers#15 (byte) keyboard_modifiers#14
Identical Phi Values (byte) keyboard_events_size#18 (byte) keyboard_events_size#16
Identical Phi Values (byte) current_movedown_counter#15 (byte) current_movedown_counter#1
Identical Phi Values (byte) current_ypos#10 (byte) current_ypos#1
Identical Phi Values (word) lines_bcd#18 (word) lines_bcd#1
Identical Phi Values (dword) score_bcd#17 (dword) score_bcd#1
Identical Phi Values (byte) level#23 (byte) level#1
Identical Phi Values (byte) current_movedown_slow#13 (byte) current_movedown_slow#17
Identical Phi Values (byte) level_bcd#10 (byte) level_bcd#1
Identical Phi Values (byte*) current_piece#21 (byte*) current_piece#1
Identical Phi Values (byte) current_piece_char#21 (byte) current_piece_char#1
Identical Phi Values (byte) current_orientation#12 (byte) current_orientation#17
Identical Phi Values (byte*) current_piece_gfx#12 (byte*) current_piece_gfx#18
Identical Phi Values (byte) current_xpos#13 (byte) current_xpos#19
Identical Phi Values (byte) game_over#20 (byte) game_over#1
Identical Phi Values (byte) next_piece_idx#21 (byte) next_piece_idx#1
Identical Phi Values (byte) main::render#3 (byte) main::render#0
Identical Phi Values (byte) render_screen_show#37 (byte) render_screen_show#18
Identical Phi Values (byte) render_screen_render#45 (byte) render_screen_render#46
Identical Phi Values (byte) current_movedown_slow#70 (byte) current_movedown_slow#44
Identical Phi Values (byte*) current_piece#67 (byte*) current_piece#37
Identical Phi Values (byte) current_piece_char#66 (byte) current_piece_char#34
Identical Phi Values (byte) current_orientation#74 (byte) current_orientation#47
Identical Phi Values (byte*) current_piece_gfx#79 (byte*) current_piece_gfx#102
Identical Phi Values (byte) current_xpos#104 (byte) current_xpos#103
Identical Phi Values (byte) current_ypos#75 (byte) current_ypos#47
Identical Phi Values (byte) game_over#57 (byte) game_over#19
Identical Phi Values (byte) next_piece_idx#56 (byte) next_piece_idx#33
Identical Phi Values (byte) render_screen_showing#23 (byte) render_screen_showing#24
Identical Phi Values (byte) keyboard_events_size#43 (byte) keyboard_events_size#18
Identical Phi Values (byte) keyboard_modifiers#36 (byte) keyboard_modifiers#15
Identical Phi Values (byte) current_movedown_counter#40 (byte) current_movedown_counter#24
Identical Phi Values (word) lines_bcd#54 (word) lines_bcd#30
Identical Phi Values (dword) score_bcd#54 (dword) score_bcd#30
Identical Phi Values (byte) level#68 (byte) level#39
Identical Phi Values (byte) level_bcd#65 (byte) level_bcd#39
Identical Phi Values (byte) render_screen_render#17 (byte) render_screen_render#11
Identical Phi Values (byte) render_screen_show#15 (byte) render_screen_show#13
Identical Phi Values (byte) irq_sprite_ypos#9 (byte) irq_sprite_ypos#14
Identical Phi Values (byte) irq_raster_next#10 (byte) irq_raster_next#17
Identical Phi Values (byte) irq_sprite_ptr#14 (byte) irq_sprite_ptr#17
Identical Phi Values (byte) render_screen_show#17 (byte) render_screen_show#16
Identical Phi Values (byte) render_screen_render#19 (byte) render_screen_render#18
Identical Phi Values (byte) current_movedown_slow#15 (byte) current_movedown_slow#14
Identical Phi Values (byte*) current_piece#11 (byte*) current_piece#10
Identical Phi Values (byte) current_piece_char#11 (byte) current_piece_char#10
Identical Phi Values (byte) current_orientation#14 (byte) current_orientation#13
Identical Phi Values (byte*) current_piece_gfx#14 (byte*) current_piece_gfx#13
Identical Phi Values (byte) current_xpos#15 (byte) current_xpos#14
Identical Phi Values (byte) current_ypos#12 (byte) current_ypos#11
Identical Phi Values (byte) game_over#11 (byte) game_over#10
Identical Phi Values (byte) next_piece_idx#11 (byte) next_piece_idx#10
Identical Phi Values (byte) render_screen_showing#10 (byte) render_screen_showing#13
Identical Phi Values (byte) keyboard_events_size#20 (byte) keyboard_events_size#19
Identical Phi Values (byte) keyboard_modifiers#17 (byte) keyboard_modifiers#16
Identical Phi Values (byte) current_movedown_counter#17 (byte) current_movedown_counter#16
Identical Phi Values (word) lines_bcd#20 (word) lines_bcd#19
Identical Phi Values (dword) score_bcd#19 (dword) score_bcd#18
Identical Phi Values (byte) level#11 (byte) level#10
Identical Phi Values (byte) level_bcd#12 (byte) level_bcd#11
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte) keyboard_event_scan::row#4 (byte) keyboard_event_scan::row#2
Identical Phi Values (byte) render_screen_render#13 (byte) render_screen_render#22
Identical Phi Values (byte) render_moving::ypos#4 (byte) render_moving::ypos#2
Identical Phi Values (byte) render_moving::l#2 (byte) render_moving::l#4
Identical Phi Values (byte) render_screen_render#34 (byte) render_screen_render#14
Identical Phi Values (byte) current_xpos#60 (byte) current_xpos#16
Identical Phi Values (byte*) current_piece_gfx#65 (byte*) current_piece_gfx#29
Identical Phi Values (byte) current_piece_char#69 (byte) current_piece_char#37
Identical Phi Values (byte) render_next::next_piece_char#3 (byte) render_next::next_piece_char#0
Identical Phi Values (byte) play_collision::xp#0 (byte) play_collision::xpos#6
Identical Phi Values (byte*) play_collision::piece_gfx#2 (byte*) play_collision::piece_gfx#0
Identical Phi Values (byte) current_xpos#29 (byte) current_xpos#14
Identical Phi Values (byte*) current_piece_gfx#39 (byte*) current_piece_gfx#13
Identical Phi Values (byte) current_piece_char#43 (byte) current_piece_char#10
Identical Phi Values (byte) render_screen_show#21 (byte) render_screen_show#16
Identical Phi Values (byte) render_screen_render#20 (byte) render_screen_render#18
Identical Phi Values (byte) render_screen_showing#16 (byte) render_screen_showing#2
Identical Phi Values (byte) keyboard_events_size#32 (byte) keyboard_events_size#16
Identical Phi Values (byte) keyboard_modifiers#28 (byte) keyboard_modifiers#14
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte) render_screen_render#14 (byte) render_screen_render#33
Identical Phi Values (byte) current_xpos#16 (byte) current_xpos#59
Identical Phi Values (byte*) current_piece_gfx#29 (byte*) current_piece_gfx#64
Identical Phi Values (byte) current_piece_char#37 (byte) current_piece_char#68
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [279] (byte~) render_init::$13 ← (byte) render_init::i#2 * (const byte) SIZEOF_POINTER
Identified duplicate assignment right side [1112] (byte~) play_remove_lines::$2 ← (byte) PLAYFIELD_LINES#0 * (byte) PLAYFIELD_COLS#0
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) keyboard_event_scan::$13 [85] if((byte) keyboard_event_scan::row_scan#0!=*((byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9
Simple Condition (bool~) keyboard_event_scan::$25 [94] if((byte) keyboard_event_scan::row#1!=rangelast(0,7)) goto keyboard_event_scan::@8
Simple Condition (bool~) keyboard_event_scan::$18 [100] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@12
Simple Condition (bool~) keyboard_event_scan::$24 [105] if((byte) keyboard_event_scan::col#1!=rangelast(0,7)) goto keyboard_event_scan::@11
Simple Condition (bool~) keyboard_event_scan::$20 [109] if((byte) keyboard_events_size#10==(byte) 8) goto keyboard_event_scan::@12
Simple Condition (bool~) keyboard_event_scan::$22 [114] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@14
Simple Condition (bool~) keyboard_event_scan::$2 [133] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1
Simple Condition (bool~) keyboard_event_scan::$5 [142] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2
Simple Condition (bool~) keyboard_event_scan::$8 [154] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3
Simple Condition (bool~) keyboard_event_scan::$11 [166] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return
Simple Condition (bool~) keyboard_event_get::$0 [188] if((byte) keyboard_events_size#13==(byte) 0) goto keyboard_event_get::@1
Simple Condition (bool~) render_init::$11 [285] if((byte) render_init::i#1!=rangelast(0,render_init::$10)) goto render_init::@1
Simple Condition (bool~) render_show::$0 [295] if((byte) render_screen_show#16==(byte) 0) goto render_show::@1
Simple Condition (bool~) render_score::$0 [352] if((byte) render_screen_render#18==(byte) 0) goto render_score::@1
Simple Condition (bool~) render_bcd::$2 [411] if((byte) render_bcd::only_low#6!=(byte) 0) goto render_bcd::@1
Simple Condition (bool~) render_screen_original::$2 [440] if((byte) render_screen_original::x#1!=(byte) 4) goto render_screen_original::@2
Simple Condition (bool~) render_screen_original::$3 [450] if((byte) render_screen_original::x#2!=(byte) $24) goto render_screen_original::@4
Simple Condition (bool~) render_screen_original::$4 [458] if((byte) render_screen_original::x#3!=(byte) $28) goto render_screen_original::@6
Simple Condition (bool~) render_screen_original::$5 [462] if((byte) render_screen_original::y#1!=rangelast(0,$18)) goto render_screen_original::@1
Simple Condition (bool~) render_playfield::$4 [481] if((byte) render_playfield::c#1!=rangelast(0,render_playfield::$3)) goto render_playfield::@2
Simple Condition (bool~) render_playfield::$5 [485] if((byte) render_playfield::l#1!=rangelast(2,render_playfield::$1)) goto render_playfield::@1
Simple Condition (bool~) render_moving::$0 [493] if((byte) render_moving::ypos#2>(byte) 1) goto render_moving::@2
Simple Condition (bool~) render_moving::$5 [506] if((byte) render_moving::l#1!=rangelast(0,3)) goto render_moving::@1
Simple Condition (bool~) render_moving::$3 [512] if((byte) render_moving::current_cell#0==(byte) 0) goto render_moving::@5
Simple Condition (bool~) render_moving::$4 [517] if((byte) render_moving::c#1!=rangelast(0,3)) goto render_moving::@4
Simple Condition (bool~) render_next::$0 [525] if((byte) render_screen_render#15==(byte) 0) goto render_next::@1
Simple Condition (bool~) render_next::$3 [543] if((byte) render_next::cell#0!=(byte) 0) goto render_next::@7
Simple Condition (bool~) render_next::$4 [552] if((byte) render_next::c#1!=rangelast(0,3)) goto render_next::@6
Simple Condition (bool~) render_next::$5 [557] if((byte) render_next::l#1!=rangelast(0,3)) goto render_next::@5
Simple Condition (bool~) sprites_init::$2 [576] if((byte) sprites_init::s#1!=rangelast(0,3)) goto sprites_init::@1
Simple Condition (bool~) sprites_irq::$4 [622] if(*((byte*) RASTER#0)<(byte) sprites_irq::raster_sprite_gfx_modify#0) goto sprites_irq::@11
Simple Condition (bool~) sprites_irq::$1 [626] if((byte) render_screen_showing#0==(byte) 0) goto sprites_irq::@1
Simple Condition (bool~) sprites_irq::$2 [644] if((byte) irq_cnt#1==(byte) 9) goto sprites_irq::@3
Simple Condition (bool~) sprites_irq::$3 [661] if((byte) irq_cnt#1==(byte) $a) goto sprites_irq::@4
Simple Condition (bool~) play_init::$2 [725] if((byte) play_init::j#1!=rangelast(0,play_init::$1)) goto play_init::@1
Simple Condition (bool~) play_init::$3 [736] if((byte) play_init::b#1!=rangelast(0,4)) goto play_init::@3
Simple Condition (bool~) play_movement::$2 [764] if((byte) game_over#15==(byte) 0) goto play_movement::@1
Simple Condition (bool~) play_move_down::$1 [806] if((byte) play_move_down::key_event#0!=(byte) KEY_SPACE#0) goto play_move_down::@1
Simple Condition (bool~) play_move_down::$4 [815] if((byte~) play_move_down::$2==(byte) 0) goto play_move_down::@2
Simple Condition (bool~) play_move_down::$6 [821] if((byte) current_movedown_counter#12<(byte) current_movedown_slow#14) goto play_move_down::@3
Simple Condition (bool~) play_move_down::$10 [825] if((byte) current_movedown_counter#12<(byte) current_movedown_fast#0) goto play_move_down::@2
Simple Condition (bool~) play_move_down::$8 [831] if((byte) play_move_down::movedown#6==(byte) 0) goto play_move_down::@4
Simple Condition (bool~) play_move_down::$13 [846] if((byte~) play_move_down::$12==(byte) COLLISION_NONE#0) goto play_move_down::@14
Simple Condition (bool~) play_move_leftright::$0 [897] if((byte) play_move_leftright::key_event#0==(byte) KEY_COMMA#0) goto play_move_leftright::@1
Simple Condition (bool~) play_move_leftright::$10 [909] if((byte~) play_move_leftright::$8!=(byte) COLLISION_NONE#0) goto play_move_leftright::@3
Simple Condition (bool~) play_move_leftright::$2 [913] if((byte) play_move_leftright::key_event#0!=(byte) KEY_DOT#0) goto play_move_leftright::@3
Simple Condition (bool~) play_move_leftright::$6 [925] if((byte~) play_move_leftright::$4!=(byte) COLLISION_NONE#0) goto play_move_leftright::@3
Simple Condition (bool~) play_move_rotate::$0 [941] if((byte) play_move_rotate::key_event#0==(byte) KEY_Z#0) goto play_move_rotate::@1
Simple Condition (bool~) play_move_rotate::$1 [948] if((byte) play_move_rotate::key_event#0==(byte) KEY_X#0) goto play_move_rotate::@2
Simple Condition (bool~) play_move_rotate::$4 [970] if((byte~) play_move_rotate::$2!=(byte) COLLISION_NONE#0) goto play_move_rotate::@5
Simple Condition (bool~) play_collision::$2 [999] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte) 0) goto play_collision::@3
Simple Condition (bool~) play_collision::$12 [1004] if((byte) play_collision::c#1!=rangelast(0,3)) goto play_collision::@2
Simple Condition (bool~) play_collision::$4 [1008] if((byte) play_collision::yp#2<(byte) PLAYFIELD_LINES#0) goto play_collision::@4
Simple Condition (bool~) play_collision::$7 [1013] if((byte~) play_collision::$5==(byte) 0) goto play_collision::@5
Simple Condition (bool~) play_collision::$9 [1021] if((byte) play_collision::xp#2<(byte) PLAYFIELD_COLS#0) goto play_collision::@6
Simple Condition (bool~) play_collision::$11 [1026] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::xp#2)==(byte) 0) goto play_collision::@3
Simple Condition (bool~) play_collision::$13 [1033] if((byte) play_collision::l#1!=rangelast(0,3)) goto play_collision::@1
Simple Condition (bool~) play_lock_current::$1 [1048] if(*((byte*) current_piece_gfx#13 + (byte) play_lock_current::i#2)==(byte) 0) goto play_lock_current::@3
Simple Condition (bool~) play_lock_current::$2 [1053] if((byte) play_lock_current::c#1!=rangelast(0,3)) goto play_lock_current::@2
Simple Condition (bool~) play_lock_current::$3 [1060] if((byte) play_lock_current::l#1!=rangelast(0,3)) goto play_lock_current::@1
Simple Condition (bool~) play_spawn_current::$3 [1081] if((byte~) play_spawn_current::$1!=(byte) COLLISION_PLAYFIELD#0) goto play_spawn_current::@1
Simple Condition (bool~) play_spawn_current::$4 [1088] if((byte) play_spawn_current::piece_idx#2==(byte) 7) goto play_spawn_current::sid_rnd1
Simple Condition (bool~) play_remove_lines::$7 [1127] if((byte) play_remove_lines::c#0!=(byte) 0) goto play_remove_lines::@3
Simple Condition (bool~) play_remove_lines::$8 [1133] if((byte) play_remove_lines::x#1!=rangelast(0,play_remove_lines::$5)) goto play_remove_lines::@2
Simple Condition (bool~) play_remove_lines::$10 [1139] if((byte) play_remove_lines::full#2!=(byte) 1) goto play_remove_lines::@7
Simple Condition (bool~) play_remove_lines::$12 [1143] if((byte) play_remove_lines::y#1!=rangelast(0,play_remove_lines::$4)) goto play_remove_lines::@1
Simple Condition (bool~) play_remove_lines::$13 [1150] if((byte) play_remove_lines::w#6!=(byte) $ff) goto play_remove_lines::@10
Simple Condition (bool~) play_update_score::$1 [1162] if((byte) play_update_score::removed#0==(byte) 0) goto play_update_score::@return
Simple Condition (bool~) play_update_score::$7 [1178] if((byte) play_update_score::lines_before#0==(byte) play_update_score::lines_after#0) goto play_update_score::@return
Simple Condition (bool~) play_increase_level::$0 [1195] if((byte) level#21>(byte) $1d) goto play_increase_level::@1
Simple Condition (bool~) play_increase_level::$3 [1205] if((byte~) play_increase_level::$1!=(byte) $a) goto play_increase_level::@3
Simple Condition (bool~) play_increase_level::$4 [1216] if((byte) play_increase_level::b#1!=rangelast(0,4)) goto play_increase_level::@7
Simple Condition (bool~) main::$10 [1269] if(*((byte*) RASTER#0)!=(byte) $ff) goto main::@4
Simple Condition (bool~) main::$14 [1286] if((byte) game_over#10==(byte) 0) goto main::@11
Simple Condition (bool~) main::$18 [1315] if((byte) main::render#2==(byte) 0) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [66] (byte[8]) keyboard_events#0 ← { fill( 8, 0) }
Constant right-side identified [73] (byte[8]) keyboard_scan_values#0 ← { fill( 8, 0) }
Constant right-side identified [358] (dword*~) render_score::$1 ← & (dword) score_bcd#40
Constant right-side identified [361] (word) render_score::score_offset#0 ← (unumber)(number) $28*(number) 5+(number) $1c
Constant right-side identified [382] (word) render_score::lines_offset#0 ← (unumber)(number) $28*(number) 1+(number) $16
Constant right-side identified [398] (word) render_score::level_offset#0 ← (unumber)(number) $28*(number) $13+(number) $1f
Constant right-side identified [522] (word) render_next::next_area_offset#0 ← (unumber)(number) $28*(number) $c+(number) $18+(number) 4
Constant right-side identified [565] (byte) sprites_init::xpos#0 ← (unumber)(number) $18+(number) $f*(number) 8
Constant right-side identified [607] (void()*~) sprites_irq_init::$0 ← & interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
Constant right-side identified [711] (dword[5]) score_add_bcd#0 ← { fill( 5, 0) }
Successful SSA optimization Pass2ConstantRValueConsolidation
Identified constant from value list (byte[8]) { (byte) $fe, (byte) $fd, (byte) $fb, (byte) $f7, (byte) $ef, (byte) $df, (byte) $bf, (byte) $7f }
Identified constant from value list (byte[8]) { (byte) 1, (byte) 2, (byte) 4, (byte) 8, (byte) $10, (byte) $20, (byte) $40, (byte) $80 }
Identified constant from value list (byte[4*4*4]) { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Identified constant from value list (byte[4*4*4]) { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Identified constant from value list (byte[4*4*4]) { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Identified constant from value list (byte[4*4*4]) { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Identified constant from value list (byte[4*4*4]) { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Identified constant from value list (byte[4*4*4]) { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Identified constant from value list (byte[4*4*4]) { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0 }
Identified constant from value list (byte[]) { (byte) $65, (byte) $66, (byte) $a6, (byte) $66, (byte) $65, (byte) $65, (byte) $a6 }
Identified constant from value list (byte[]) { (byte) $63, (byte) $64, (byte) $a4, (byte) $64, (byte) $63, (byte) $63, (byte) $a4 }
Identified constant from value list (byte[]) { (byte) 4, (byte) 4, (byte) 4, (byte) 4, (byte) 4, (byte) 4, (byte) 4 }
Identified constant from value list (byte[]) { (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 1 }
Identified constant from value list (byte[]) { (byte) $30, (byte) $2b, (byte) $26, (byte) $21, (byte) $1c, (byte) $17, (byte) $12, (byte) $d, (byte) 8, (byte) 6, (byte) 5, (byte) 5, (byte) 5, (byte) 4, (byte) 4, (byte) 4, (byte) 3, (byte) 3, (byte) 3, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 1 }
Identified constant from value list (dword[]) { (dword) 0, (dword) $40, (dword) $100, (dword) $300, (dword) $1200 }
Successful SSA optimization Pass2ConstantInitializerValueLists
Constant (const byte*) PROCPORT_DDR#0 = (byte*) 0
Constant (const byte) PROCPORT_DDR_MEMORY_MASK#0 = 7
Constant (const byte*) PROCPORT#0 = (byte*) 1
Constant (const byte) PROCPORT_RAM_IO#0 = 5
Constant (const word) SPRITE_PTRS#0 = $3f8
Constant (const byte*) SPRITES_XPOS#0 = (byte*) 53248
Constant (const byte*) SPRITES_YPOS#0 = (byte*) 53249
Constant (const byte*) RASTER#0 = (byte*) 53266
Constant (const byte*) SPRITES_ENABLE#0 = (byte*) 53269
Constant (const byte*) SPRITES_EXPAND_Y#0 = (byte*) 53271
Constant (const byte*) SPRITES_MC#0 = (byte*) 53276
Constant (const byte*) SPRITES_EXPAND_X#0 = (byte*) 53277
Constant (const byte*) BORDERCOL#0 = (byte*) 53280
Constant (const byte*) BGCOL1#0 = (byte*) 53281
Constant (const byte*) BGCOL2#0 = (byte*) 53282
Constant (const byte*) BGCOL3#0 = (byte*) 53283
Constant (const byte*) BGCOL4#0 = (byte*) 53284
Constant (const byte*) SPRITES_COLS#0 = (byte*) 53287
Constant (const byte*) VIC_CONTROL#0 = (byte*) 53265
Constant (const byte*) D011#0 = (byte*) 53265
Constant (const byte) VIC_ECM#0 = $40
Constant (const byte) VIC_DEN#0 = $10
Constant (const byte) VIC_RSEL#0 = 8
Constant (const byte*) D018#0 = (byte*) 53272
Constant (const byte*) IRQ_STATUS#0 = (byte*) 53273
Constant (const byte*) IRQ_ENABLE#0 = (byte*) 53274
Constant (const byte) IRQ_RASTER#0 = 1
Constant (const byte*) COLS#0 = (byte*) 55296
Constant (const byte*) CIA1_PORT_A#0 = (byte*) 56320
Constant (const byte*) CIA1_PORT_B#0 = (byte*) 56321
Constant (const byte*) CIA1_INTERRUPT#0 = (byte*) 56333
Constant (const byte*) CIA2_PORT_A#0 = (byte*) 56576
Constant (const byte*) CIA2_PORT_A_DDR#0 = (byte*) 56578
Constant (const byte) CIA_INTERRUPT_CLEAR#0 = $7f
Constant (const void()**) HARDWARE_IRQ#0 = (void()**) 65534
Constant (const byte) BLACK#0 = 0
Constant (const byte) RED#0 = 2
Constant (const byte) CYAN#0 = 3
Constant (const byte) PURPLE#0 = 4
Constant (const byte) GREEN#0 = 5
Constant (const byte) BLUE#0 = 6
Constant (const byte) ORANGE#0 = 8
Constant (const byte) PINK#0 = $a
Constant (const byte) DARK_GREY#0 = $b
Constant (const byte) GREY#0 = $c
Constant (const byte) LIGHT_GREEN#0 = $d
Constant (const byte) LIGHT_BLUE#0 = $e
Constant (const byte) KEY_Z#0 = $c
Constant (const byte) KEY_LSHIFT#0 = $f
Constant (const byte) KEY_X#0 = $17
Constant (const byte) KEY_DOT#0 = $2c
Constant (const byte) KEY_COMMA#0 = $2f
Constant (const byte) KEY_RSHIFT#0 = $34
Constant (const byte) KEY_CTRL#0 = $3a
Constant (const byte) KEY_SPACE#0 = $3c
Constant (const byte) KEY_COMMODORE#0 = $3d
Constant (const byte[8]) keyboard_matrix_row_bitmask#0 = { $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f }
Constant (const byte[8]) keyboard_matrix_col_bitmask#0 = { 1, 2, 4, 8, $10, $20, $40, $80 }
Constant (const byte[8]) keyboard_events#0 = { fill( 8, 0) }
Constant (const byte) keyboard_events_size#0 = 0
Constant (const byte) keyboard_modifiers#0 = 0
Constant (const byte) KEY_MODIFIER_LSHIFT#0 = 1
Constant (const byte) KEY_MODIFIER_RSHIFT#0 = 2
Constant (const byte) KEY_MODIFIER_CTRL#0 = 4
Constant (const byte) KEY_MODIFIER_COMMODORE#0 = 8
Constant (const byte[8]) keyboard_scan_values#0 = { fill( 8, 0) }
Constant (const byte) keyboard_event_scan::keycode#0 = 0
Constant (const byte) keyboard_event_scan::row#0 = 0
Constant (const byte) keyboard_event_scan::col#0 = 0
Constant (const byte) keyboard_modifiers#1 = 0
Constant (const byte) keyboard_event_get::return#0 = $ff
Constant (const word*) SID_VOICE3_FREQ#0 = (word*) 54286
Constant (const byte*) SID_VOICE3_CONTROL#0 = (byte*) 54290
Constant (const byte) SID_CONTROL_NOISE#0 = $80
Constant (const byte*) SID_VOICE3_OSC#0 = (byte*) 54299
Constant (const byte*) PLAYFIELD_SCREEN_1#0 = (byte*) 1024
Constant (const byte*) PLAYFIELD_SCREEN_2#0 = (byte*) 11264
Constant (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0 = (byte*) 6144
Constant (const byte*) PLAYFIELD_COLORS_ORIGINAL#0 = (byte*) 7168
Constant (const byte*) PLAYFIELD_SPRITES#0 = (byte*) 8192
Constant (const byte*) PLAYFIELD_CHARSET#0 = (byte*) 10240
Constant (const byte) PLAYFIELD_LINES#0 = $16
Constant (const byte) PLAYFIELD_COLS#0 = $a
Constant (const byte*) current_piece_gfx#0 = (byte*) 0
Constant (const byte) current_piece_char#0 = 0
Constant (const byte) current_xpos#0 = 0
Constant (const byte) current_ypos#0 = 0
Constant (const byte) render_screen_render#0 = $20
Constant (const byte) render_screen_show#0 = 0
Constant (const word) lines_bcd#0 = 0
Constant (const byte) level_bcd#0 = 0
Constant (const byte) level#0 = 0
Constant (const byte) game_over#0 = 0
Constant (const byte) render_init::i#0 = 0
Constant (const byte) render_screen_show#1 = 0
Constant (const byte) render_screen_render#1 = $20
Constant (const byte) render_show::d018val#0 = 0
Constant (const byte*) render_score::screen#0 = (byte*) 0
Constant (const dword*) render_score::$1 = &score_bcd#40
Constant (const word) render_score::score_offset#0 = (unumber)$28*5+$1c
Constant (const byte) render_bcd::only_low#0 = 0
Constant (const byte) render_bcd::only_low#1 = 0
Constant (const byte) render_bcd::only_low#2 = 0
Constant (const word) render_score::lines_offset#0 = (unumber)$28*1+$16
Constant (const byte) render_bcd::only_low#3 = 1
Constant (const byte) render_bcd::only_low#4 = 0
Constant (const word) render_score::level_offset#0 = (unumber)$28*$13+$1f
Constant (const byte) render_bcd::only_low#5 = 0
Constant (const byte) render_bcd::ZERO_CHAR#0 = $35
Constant (const byte) render_screen_original::SPACE#0 = 0
Constant (const byte) render_screen_original::y#0 = 0
Constant (const byte) render_screen_original::x#0 = 0
Constant (const byte) render_playfield::l#0 = 2
Constant (const byte) render_playfield::c#0 = 0
Constant (const byte) render_moving::i#0 = 0
Constant (const byte) render_moving::l#0 = 0
Constant (const byte) render_moving::c#0 = 0
Constant (const word) render_next::next_area_offset#0 = (unumber)$28*$c+$18+4
Constant (const byte*) render_next::screen_next_area#0 = (byte*) 0
Constant (const byte) render_next::l#0 = 0
Constant (const byte) render_next::c#0 = 0
Constant (const byte) sprites_init::xpos#0 = (unumber)$18+$f*8
Constant (const byte) sprites_init::s#0 = 0
Constant (const byte) SPRITES_FIRST_YPOS#0 = $31
Constant (const void()*) sprites_irq_init::$0 = &sprites_irq
Constant (const byte[4*4*4]) PIECE_T#0 = { 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0 }
Constant (const byte[4*4*4]) PIECE_S#0 = { 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0 }
Constant (const byte[4*4*4]) PIECE_Z#0 = { 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0 }
Constant (const byte[4*4*4]) PIECE_L#0 = { 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0 }
Constant (const byte[4*4*4]) PIECE_J#0 = { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 }
Constant (const byte[4*4*4]) PIECE_O#0 = { 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0 }
Constant (const byte[4*4*4]) PIECE_I#0 = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0 }
Constant (const byte[]) PIECES_CHARS#0 = { $65, $66, $a6, $66, $65, $65, $a6 }
Constant (const byte[]) PIECES_NEXT_CHARS#0 = { $63, $64, $a4, $64, $63, $63, $a4 }
Constant (const byte[]) PIECES_START_X#0 = { 4, 4, 4, 4, 4, 4, 4 }
Constant (const byte[]) PIECES_START_Y#0 = { 1, 1, 1, 1, 1, 0, 1 }
Constant (const byte) next_piece_idx#0 = 0
Constant (const byte*) current_piece#0 = (byte*) 0
Constant (const byte) current_orientation#0 = 0
Constant (const byte[]) MOVEDOWN_SLOW_SPEEDS#0 = { $30, $2b, $26, $21, $1c, $17, $12, $d, 8, 6, 5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 }
Constant (const byte) current_movedown_slow#0 = $30
Constant (const byte) current_movedown_fast#0 = $a
Constant (const byte) current_movedown_counter#0 = 0
Constant (const dword[]) SCORE_BASE_BCD#0 = { 0, $40, $100, $300, $1200 }
Constant (const dword[5]) score_add_bcd#0 = { fill( 5, 0) }
Constant (const byte) play_init::idx#0 = 0
Constant (const byte) play_init::j#0 = 0
Constant (const byte) play_init::b#0 = 0
Constant (const byte) play_movement::render#0 = 0
Constant (const byte) play_move_down::movedown#0 = 0
Constant (const byte) play_move_down::return#1 = 0
Constant (const byte) current_movedown_counter#4 = 0
Constant (const byte) play_move_down::return#2 = 1
Constant (const byte) play_move_leftright::return#1 = 1
Constant (const byte) play_move_leftright::return#3 = 0
Constant (const byte) play_move_leftright::return#4 = 1
Constant (const byte) play_move_rotate::orientation#0 = $80
Constant (const byte) play_move_rotate::return#1 = 0
Constant (const byte) play_move_rotate::return#3 = 0
Constant (const byte) play_move_rotate::return#4 = 1
Constant (const byte) COLLISION_NONE#0 = 0
Constant (const byte) COLLISION_PLAYFIELD#0 = 1
Constant (const byte) COLLISION_BOTTOM#0 = 2
Constant (const byte) COLLISION_LEFT#0 = 4
Constant (const byte) COLLISION_RIGHT#0 = 8
Constant (const byte) play_collision::i#0 = 0
Constant (const byte) play_collision::l#0 = 0
Constant (const byte) play_collision::c#0 = 0
Constant (const byte) play_lock_current::i#0 = 0
Constant (const byte) play_lock_current::l#0 = 0
Constant (const byte) play_lock_current::c#0 = 0
Constant (const byte) current_orientation#69 = 0
Constant (const byte) play_spawn_current::piece_idx#0 = 7
Constant (const byte) game_over#5 = 1
Constant (const byte) play_remove_lines::removed#0 = 0
Constant (const byte) play_remove_lines::y#0 = 0
Constant (const byte) play_remove_lines::full#0 = 1
Constant (const byte) play_remove_lines::x#0 = 0
Constant (const byte) play_remove_lines::full#1 = 0
Constant (const byte) current_movedown_slow#9 = 1
Constant (const byte) play_increase_level::b#0 = 0
Constant (const byte) main::render#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) keyboard_event_pressed::keycode#0 = KEY_LSHIFT#0
Constant (const byte) keyboard_event_pressed::keycode#1 = KEY_RSHIFT#0
Constant (const byte) keyboard_event_pressed::keycode#2 = KEY_CTRL#0
Constant (const byte) keyboard_event_pressed::keycode#3 = KEY_COMMODORE#0
Constant (const byte*) render_init::vicSelectGfxBank1_gfx#0 = PLAYFIELD_CHARSET#0
Constant (const byte*) render_screen_original::screen#0 = PLAYFIELD_SCREEN_1#0
Constant (const byte*) render_screen_original::screen#1 = PLAYFIELD_SCREEN_2#0
Constant (const byte*) render_show::toD0181_screen#0 = PLAYFIELD_SCREEN_1#0
Constant (const byte*) render_show::toD0181_gfx#0 = PLAYFIELD_CHARSET#0
Constant (const byte*) render_show::toD0182_screen#0 = PLAYFIELD_SCREEN_2#0
Constant (const byte*) render_show::toD0182_gfx#0 = PLAYFIELD_CHARSET#0
Constant (const byte*) render_score::screen#1 = PLAYFIELD_SCREEN_1#0
Constant (const byte*) render_score::screen#2 = PLAYFIELD_SCREEN_2#0
Constant (const word) render_bcd::offset#0 = render_score::score_offset#0
Constant (const word) render_bcd::offset#3 = render_score::lines_offset#0
Constant (const word) render_bcd::offset#5 = render_score::level_offset#0
Constant (const byte*) render_screen_original::cols#0 = COLS#0
Constant (const byte*) sprites_irq::toSpritePtr2_sprite#0 = PLAYFIELD_SPRITES#0
Constant (const byte) keyboard_event_pressed::keycode#4 = KEY_SPACE#0
Constant (const byte) play_collision::return#4 = COLLISION_BOTTOM#0
Constant (const byte) play_collision::return#6 = COLLISION_LEFT#0
Constant (const byte) play_collision::return#7 = COLLISION_RIGHT#0
Constant (const byte) play_collision::return#8 = COLLISION_PLAYFIELD#0
Constant (const byte) play_collision::return#9 = COLLISION_NONE#0
Constant (const byte) play_collision::orientation#4 = current_orientation#69
Successful SSA optimization Pass2ConstantIdentification
Constant value identified { fill( PLAYFIELD_LINES#0, 0) } in [238] (byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 ← { fill( PLAYFIELD_LINES#0, 0) }
Constant value identified { fill( PLAYFIELD_LINES#0, 0) } in [239] (byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 ← { fill( PLAYFIELD_LINES#0, 0) }
Constant value identified (word)render_init::vicSelectGfxBank1_gfx#0 in [245] (word~) render_init::vicSelectGfxBank1_toDd001_$0#0 ← (word)(const byte*) render_init::vicSelectGfxBank1_gfx#0
Constant value identified (word)render_show::toD0181_screen#0 in [300] (word~) render_show::toD0181_$0#0 ← (word)(const byte*) render_show::toD0181_screen#0
Constant value identified (word)render_show::toD0181_gfx#0 in [304] (word~) render_show::toD0181_$4#0 ← (word)(const byte*) render_show::toD0181_gfx#0
Constant value identified (word)render_show::toD0182_screen#0 in [319] (word~) render_show::toD0182_$0#0 ← (word)(const byte*) render_show::toD0182_screen#0
Constant value identified (word)render_show::toD0182_gfx#0 in [323] (word~) render_show::toD0182_$4#0 ← (word)(const byte*) render_show::toD0182_gfx#0
Constant value identified (byte*)render_score::$1 in [359] (byte*) render_score::score_bytes#0 ← (byte*)(const dword*) render_score::$1
Constant value identified (word)PLAYFIELD_SPRITES#0 in [587] (word~) toSpritePtr1_$0#0 ← (word)(const byte*) PLAYFIELD_SPRITES#0
Constant value identified (word)sprites_irq::toSpritePtr2_sprite#0 in [650] (word~) sprites_irq::toSpritePtr2_$0#0 ← (word)(const byte*) sprites_irq::toSpritePtr2_sprite#0
Constant value identified (word)PIECE_T#0 in [688] (word~) $8 ← (word)(const byte[4*4*4]) PIECE_T#0
Constant value identified (word)PIECE_S#0 in [689] (word~) $9 ← (word)(const byte[4*4*4]) PIECE_S#0
Constant value identified (word)PIECE_Z#0 in [690] (word~) $10 ← (word)(const byte[4*4*4]) PIECE_Z#0
Constant value identified (word)PIECE_J#0 in [691] (word~) $11 ← (word)(const byte[4*4*4]) PIECE_J#0
Constant value identified (word)PIECE_O#0 in [692] (word~) $12 ← (word)(const byte[4*4*4]) PIECE_O#0
Constant value identified (word)PIECE_I#0 in [693] (word~) $13 ← (word)(const byte[4*4*4]) PIECE_I#0
Constant value identified (word)PIECE_L#0 in [694] (word~) $14 ← (word)(const byte[4*4*4]) PIECE_L#0
Constant value identified { fill( PLAYFIELD_LINES#0, 0) } in [700] (byte*[PLAYFIELD_LINES#0]) playfield_lines#0 ← { fill( PLAYFIELD_LINES#0, 0) }
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [1266] if(true) goto main::@4
Removing PHI-reference to removed block (main::@12) in block main::@19
Removing PHI-reference to removed block (main::@12) in block main::@19
Removing PHI-reference to removed block (main::@12) in block main::@19
Removing PHI-reference to removed block (main::@12) in block main::@19
Removing PHI-reference to removed block (main::@12) in block main::@19
Removing PHI-reference to removed block (main::@12) in block main::@19
Removing PHI-reference to removed block (main::@12) in block main::@19
Removing PHI-reference to removed block (main::@12) in block main::@19
Removing PHI-reference to removed block (main::@12) in block main::@19
Removing PHI-reference to removed block (main::@12) in block main::@19
Removing PHI-reference to removed block (main::@12) in block main::@19
Removing PHI-reference to removed block (main::@12) in block main::@19
Removing PHI-reference to removed block (main::@12) in block main::@19
Removing PHI-reference to removed block (main::@12) in block main::@19
Removing PHI-reference to removed block (main::@12) in block main::@19
if() condition always true - replacing block destination [1309] if(true) goto main::@13
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [92] keyboard_event_scan::row#1 ← ++ keyboard_event_scan::row#2 to ++
Resolved ranged comparison value [94] if(keyboard_event_scan::row#1!=rangelast(0,7)) goto keyboard_event_scan::@8 to (number) 8
Resolved ranged next value [103] keyboard_event_scan::col#1 ← ++ keyboard_event_scan::col#2 to ++
Resolved ranged comparison value [105] if(keyboard_event_scan::col#1!=rangelast(0,7)) goto keyboard_event_scan::@11 to (number) 8
Resolved ranged next value [460] render_screen_original::y#1 ← ++ render_screen_original::y#6 to ++
Resolved ranged comparison value [462] if(render_screen_original::y#1!=rangelast(0,$18)) goto render_screen_original::@1 to (number) $19
Resolved ranged next value [504] render_moving::l#1 ← ++ render_moving::l#4 to ++
Resolved ranged comparison value [506] if(render_moving::l#1!=rangelast(0,3)) goto render_moving::@1 to (number) 4
Resolved ranged next value [515] render_moving::c#1 ← ++ render_moving::c#2 to ++
Resolved ranged comparison value [517] if(render_moving::c#1!=rangelast(0,3)) goto render_moving::@4 to (number) 4
Resolved ranged next value [550] render_next::c#1 ← ++ render_next::c#2 to ++
Resolved ranged comparison value [552] if(render_next::c#1!=rangelast(0,3)) goto render_next::@6 to (number) 4
Resolved ranged next value [555] render_next::l#1 ← ++ render_next::l#7 to ++
Resolved ranged comparison value [557] if(render_next::l#1!=rangelast(0,3)) goto render_next::@5 to (number) 4
Resolved ranged next value [574] sprites_init::s#1 ← ++ sprites_init::s#2 to ++
Resolved ranged comparison value [576] if(sprites_init::s#1!=rangelast(0,3)) goto sprites_init::@1 to (number) 4
Resolved ranged next value [734] play_init::b#1 ← ++ play_init::b#2 to ++
Resolved ranged comparison value [736] if(play_init::b#1!=rangelast(0,4)) goto play_init::@3 to (number) 5
Resolved ranged next value [1002] play_collision::c#1 ← ++ play_collision::c#2 to ++
Resolved ranged comparison value [1004] if(play_collision::c#1!=rangelast(0,3)) goto play_collision::@2 to (number) 4
Resolved ranged next value [1031] play_collision::l#1 ← ++ play_collision::l#6 to ++
Resolved ranged comparison value [1033] if(play_collision::l#1!=rangelast(0,3)) goto play_collision::@1 to (number) 4
Resolved ranged next value [1051] play_lock_current::c#1 ← ++ play_lock_current::c#2 to ++
Resolved ranged comparison value [1053] if(play_lock_current::c#1!=rangelast(0,3)) goto play_lock_current::@2 to (number) 4
Resolved ranged next value [1058] play_lock_current::l#1 ← ++ play_lock_current::l#6 to ++
Resolved ranged comparison value [1060] if(play_lock_current::l#1!=rangelast(0,3)) goto play_lock_current::@1 to (number) 4
Resolved ranged next value [1214] play_increase_level::b#1 ← ++ play_increase_level::b#2 to ++
Resolved ranged comparison value [1216] if(play_increase_level::b#1!=rangelast(0,4)) goto play_increase_level::@7 to (number) 5
Rewriting conditional comparison [493] if((byte) render_moving::ypos#2>(byte) 1) goto render_moving::@2
Rewriting conditional comparison [1195] if((byte) level#21>(byte) $1d) goto play_increase_level::@1
Simplifying expression containing zero KEY_MODIFIER_LSHIFT#0 in [144] (byte) keyboard_modifiers#2 ← (const byte) keyboard_modifiers#1 | (const byte) KEY_MODIFIER_LSHIFT#0
Simplifying expression containing zero PIECES_COLORS_1#0 in [261] *((const byte*) BGCOL2#0) ← *((byte[]) PIECES_COLORS_1#0 + (byte) 0)
Simplifying expression containing zero PIECES_COLORS_2#0 in [262] *((const byte*) BGCOL3#0) ← *((byte[]) PIECES_COLORS_2#0 + (byte) 0)
Simplifying expression containing zero render_score::score_bytes#0 in [378] (byte) render_bcd::bcd#2 ← *((byte*) render_score::score_bytes#0 + (byte) 0)
Simplifying expression containing zero SPRITES_YPOS#0 in [614] *((const byte*) SPRITES_YPOS#0 + (byte) 0) ← (byte) sprites_irq::ypos#0
Simplifying expression containing zero PLAYFIELD_SPRITE_PTRS_1#0 in [628] *((byte*) PLAYFIELD_SPRITE_PTRS_1#0 + (byte) 0) ← (byte) sprites_irq::ptr#0
Simplifying expression containing zero PLAYFIELD_SPRITE_PTRS_2#0 in [635] *((byte*) PLAYFIELD_SPRITE_PTRS_2#0 + (byte) 0) ← (byte) sprites_irq::ptr#0
Simplifying expression containing zero MOVEDOWN_SLOW_SPEEDS#0 in [729] (byte) current_movedown_slow#1 ← *((const byte[]) MOVEDOWN_SLOW_SPEEDS#0 + (const byte) level#0)
Simplifying expression containing zero play_movement::$0 in [761] (byte) play_movement::render#1 ← (const byte) play_movement::render#0 + (byte~) play_movement::$0
Simplifying expression containing zero current_piece#5 in [1068] (byte*) current_piece_gfx#74 ← (byte*) current_piece#5 + (const byte) current_orientation#69
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*) render_bcd::screen_pos#1 and assignment [175] (byte*) render_bcd::screen_pos#1 ← ++ (byte*) render_bcd::screen_pos#3
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#16
Eliminating unused constant (const byte) render_show::d018val#0
Eliminating unused constant (const byte*) render_score::screen#0
Eliminating unused constant (const byte*) render_next::screen_next_area#0
Eliminating unused constant (const byte) play_movement::render#0
Eliminating unused constant (const byte) play_move_rotate::orientation#0
Eliminating unused constant (const byte) main::render#0
Eliminating unused constant (const byte*) current_piece_gfx#0
Eliminating unused constant (const byte) current_piece_char#0
Eliminating unused constant (const byte) current_xpos#0
Eliminating unused constant (const byte) current_ypos#0
Eliminating unused constant (const byte) render_screen_render#0
Eliminating unused constant (const byte) render_screen_show#0
Eliminating unused constant (const byte*) current_piece#0
Eliminating unused constant (const byte) current_orientation#0
Eliminating unused constant (const byte) current_movedown_slow#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#14
Eliminating unused constant (const byte) keyboard_modifiers#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (byte) keyboard_modifiers#5 and assignment [52] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#13 | (const byte) KEY_MODIFIER_COMMODORE#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#13
Eliminating unused constant (const byte) KEY_MODIFIER_COMMODORE#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (byte) keyboard_modifiers#4 and assignment [51] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#12 | (const byte) KEY_MODIFIER_CTRL#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#12
Eliminating unused constant (const byte) KEY_MODIFIER_CTRL#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (byte) keyboard_modifiers#3 and assignment [45] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#11 | (const byte) KEY_MODIFIER_RSHIFT#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#11
Eliminating unused constant (const byte) KEY_MODIFIER_RSHIFT#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (byte) keyboard_modifiers#2 and assignment [39] (byte) keyboard_modifiers#2 ← (const byte) KEY_MODIFIER_LSHIFT#0
Eliminating unused constant (const byte) keyboard_modifiers#1
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) KEY_MODIFIER_LSHIFT#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 8 in if((byte) keyboard_event_scan::row#1!=(number) 8) goto keyboard_event_scan::@8
Adding number conversion cast (unumber) 8 in if((byte) keyboard_event_scan::col#1!=(number) 8) goto keyboard_event_scan::@11
Adding number conversion cast (unumber) $19 in if((byte) render_screen_original::y#1!=(number) $19) goto render_screen_original::@1
Adding number conversion cast (unumber) 1+1 in if((byte) render_moving::ypos#2>=(byte) 1+(number) 1) goto render_moving::@2
Adding number conversion cast (unumber) 1 in if((byte) render_moving::ypos#2>=(unumber)(byte) 1+(number) 1) goto render_moving::@2
Adding number conversion cast (unumber) 4 in if((byte) render_moving::l#1!=(number) 4) goto render_moving::@1
Adding number conversion cast (unumber) 4 in if((byte) render_moving::c#1!=(number) 4) goto render_moving::@4
Adding number conversion cast (unumber) 4 in if((byte) render_next::c#1!=(number) 4) goto render_next::@6
Adding number conversion cast (unumber) 4 in if((byte) render_next::l#1!=(number) 4) goto render_next::@5
Adding number conversion cast (unumber) 4 in if((byte) sprites_init::s#1!=(number) 4) goto sprites_init::@1
Adding number conversion cast (unumber) 5 in if((byte) play_init::b#1!=(number) 5) goto play_init::@3
Adding number conversion cast (unumber) 4 in if((byte) play_collision::c#1!=(number) 4) goto play_collision::@2
Adding number conversion cast (unumber) 4 in if((byte) play_collision::l#1!=(number) 4) goto play_collision::@1
Adding number conversion cast (unumber) 4 in if((byte) play_lock_current::c#1!=(number) 4) goto play_lock_current::@2
Adding number conversion cast (unumber) 4 in if((byte) play_lock_current::l#1!=(number) 4) goto play_lock_current::@1
Adding number conversion cast (unumber) $1d+1 in if((byte) level#21>=(byte) $1d+(number) 1) goto play_increase_level::@1
Adding number conversion cast (unumber) 1 in if((byte) level#21>=(unumber)(byte) $1d+(number) 1) goto play_increase_level::@1
Adding number conversion cast (unumber) 5 in if((byte) play_increase_level::b#1!=(number) 5) goto play_increase_level::@7
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast $19
Simplifying constant integer cast (byte) 1+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast (byte) $1d+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)(byte) IRQ_RASTER_FIRST#0 = (byte~) $4 (byte) irq_raster_next#0 
Alias candidate removed (volatile)(byte) irq_sprite_ypos#0 = (byte~) $5 
Alias candidate removed (volatile)(byte) irq_sprite_ptr#0 = (byte~) $7 
Alias candidate removed (volatile)(byte) sprites_irq::raster_sprite_gfx_modify#0 = (byte~) sprites_irq::$0 
Alias candidate removed (volatile)(byte) sprites_irq::toSpritePtr2_return#0 = (byte~) sprites_irq::toSpritePtr2_$2#0 (byte) sprites_irq::toSpritePtr2_return#1 (byte~) sprites_irq::$5 (byte) irq_sprite_ptr#1 
Alias (byte~) render_init::$13 = (byte~) render_init::$12 
Alias (byte) render_screen_showing#1 = (byte) render_screen_showing#2 
Alias (byte) play_movement::render#1 = (byte~) play_movement::$0 
Alias (byte*) current_piece_gfx#74 = (byte*) current_piece#5 
Alias (byte~) play_remove_lines::$2 = (byte~) play_remove_lines::$0 
Alias (byte) main::render#1 = (byte) main::render#2 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)(byte) IRQ_RASTER_FIRST#0 = (byte~) $4 (byte) irq_raster_next#0 
Alias candidate removed (volatile)(byte) irq_sprite_ypos#0 = (byte~) $5 
Alias candidate removed (volatile)(byte) irq_sprite_ptr#0 = (byte~) $7 
Alias candidate removed (volatile)(byte) sprites_irq::raster_sprite_gfx_modify#0 = (byte~) sprites_irq::$0 
Alias candidate removed (volatile)(byte) sprites_irq::toSpritePtr2_return#0 = (byte~) sprites_irq::toSpritePtr2_$2#0 (byte) sprites_irq::toSpritePtr2_return#1 (byte~) sprites_irq::$5 (byte) irq_sprite_ptr#1 
Identical Phi Values (byte) current_movedown_slow#55 (byte) current_movedown_slow#21
Identical Phi Values (byte*) current_piece#50 (byte*) current_piece#15
Identical Phi Values (byte) current_piece_char#47 (byte) current_piece_char#16
Identical Phi Values (byte) current_orientation#58 (byte) current_orientation#17
Identical Phi Values (byte*) current_piece_gfx#103 (byte*) current_piece_gfx#18
Identical Phi Values (byte) current_xpos#105 (byte) current_xpos#19
Identical Phi Values (byte) current_ypos#31 (byte) current_ypos#19
Identical Phi Values (byte) game_over#41 (byte) game_over#15
Identical Phi Values (byte) next_piece_idx#42 (byte) next_piece_idx#16
Identical Phi Values (byte) current_movedown_counter#30 (byte) current_movedown_counter#14
Identical Phi Values (word) lines_bcd#40 (word) lines_bcd#15
Identical Phi Values (dword) score_bcd#40 (dword) score_bcd#14
Identical Phi Values (byte) level#102 (byte) level#17
Identical Phi Values (byte) level_bcd#50 (byte) level_bcd#17
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [65] (byte*) PLAYFIELD_SPRITE_PTRS_1#0 ← (const byte*) PLAYFIELD_SCREEN_1#0 + (const word) SPRITE_PTRS#0
Constant right-side identified [66] (byte*) PLAYFIELD_SPRITE_PTRS_2#0 ← (const byte*) PLAYFIELD_SCREEN_2#0 + (const word) SPRITE_PTRS#0
Constant right-side identified [67] (byte~) $3 ← (const byte) PLAYFIELD_LINES#0 * (const byte) PLAYFIELD_COLS#0
Constant right-side identified [84] (byte~) render_init::$1 ← (const byte) VIC_ECM#0 | (const byte) VIC_DEN#0
Constant right-side identified [95] (byte*~) render_init::$6 ← (const byte*) PLAYFIELD_SCREEN_1#0 + (byte)(number) 2*(number) $28
Constant right-side identified [97] (byte*~) render_init::$8 ← (const byte*) PLAYFIELD_SCREEN_2#0 + (byte)(number) 2*(number) $28
Constant right-side identified [99] (byte~) render_init::$10 ← (const byte) PLAYFIELD_LINES#0 - (byte) 1
Constant right-side identified [145] (word) render_bcd::offset#1 ← (const word) render_score::score_offset#0 + (byte) 2
Constant right-side identified [149] (word) render_bcd::offset#2 ← (const word) render_score::score_offset#0 + (byte) 4
Constant right-side identified [156] (word) render_bcd::offset#4 ← (const word) render_score::lines_offset#0 + (byte) 1
Constant right-side identified [177] (byte*) render_screen_original::oscr#0 ← (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0 + (byte)(number) $20*(number) 2
Constant right-side identified [178] (byte*) render_screen_original::ocols#0 ← (const byte*) PLAYFIELD_COLORS_ORIGINAL#0 + (byte)(number) $20*(number) 2
Constant right-side identified [207] (byte) render_playfield::i#0 ← (const byte) PLAYFIELD_COLS#0 * (byte) 2
Constant right-side identified [208] (byte~) render_playfield::$1 ← (const byte) PLAYFIELD_LINES#0 - (byte) 1
Constant right-side identified [213] (byte~) render_playfield::$3 ← (const byte) PLAYFIELD_COLS#0 - (byte) 1
Constant right-side identified [247] (byte*) render_next::screen_next_area#1 ← (const byte*) PLAYFIELD_SCREEN_1#0 + (const word) render_next::next_area_offset#0
Constant right-side identified [248] (byte*) render_next::screen_next_area#2 ← (const byte*) PLAYFIELD_SCREEN_2#0 + (const word) render_next::next_area_offset#0
Constant right-side identified [280] (byte~) $4 ← (const byte) SPRITES_FIRST_YPOS#0 + (byte) $13
Constant right-side identified [283] (byte~) $5 ← (const byte) SPRITES_FIRST_YPOS#0 + (byte) $15
Constant right-side identified [358] (byte~) $15 ← (const byte) PLAYFIELD_LINES#0 + (byte) 1
Constant right-side identified [361] (byte~) play_init::$1 ← (const byte) PLAYFIELD_LINES#0 - (byte) 1
Constant right-side identified [370] (byte~) play_init::$0 ← (const byte) PLAYFIELD_COLS#0 * (const byte) PLAYFIELD_LINES#0
Constant right-side identified [404] (byte) play_move_down::movedown#1 ← ++ (const byte) play_move_down::movedown#0
Constant right-side identified [526] (byte~) play_remove_lines::$2 ← (const byte) PLAYFIELD_LINES#0 * (const byte) PLAYFIELD_COLS#0
Constant right-side identified [530] (byte~) play_remove_lines::$4 ← (const byte) PLAYFIELD_LINES#0 - (byte) 1
Constant right-side identified [532] (byte~) play_remove_lines::$5 ← (const byte) PLAYFIELD_COLS#0 - (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Identified constant from value list (byte[]) { (const byte) BLUE#0, (const byte) GREEN#0, (const byte) PURPLE#0, (const byte) BLUE#0, (const byte) RED#0, (const byte) LIGHT_GREEN#0, (const byte) RED#0, (const byte) BLUE#0, (const byte) LIGHT_BLUE#0, (const byte) RED#0, (const byte) BLUE#0, (const byte) GREEN#0, (const byte) PURPLE#0, (const byte) BLUE#0, (const byte) RED#0, (const byte) LIGHT_GREEN#0, (const byte) RED#0, (const byte) BLUE#0, (const byte) LIGHT_BLUE#0, (const byte) RED#0, (const byte) BLUE#0, (const byte) GREEN#0, (const byte) PURPLE#0, (const byte) BLUE#0, (const byte) RED#0, (const byte) LIGHT_GREEN#0, (const byte) RED#0, (const byte) BLUE#0, (const byte) LIGHT_BLUE#0, (const byte) RED#0 }
Identified constant from value list (byte[]) { (const byte) CYAN#0, (const byte) LIGHT_GREEN#0, (const byte) PINK#0, (const byte) LIGHT_GREEN#0, (const byte) LIGHT_GREEN#0, (const byte) LIGHT_BLUE#0, (const byte) DARK_GREY#0, (const byte) PURPLE#0, (const byte) RED#0, (const byte) ORANGE#0, (const byte) CYAN#0, (const byte) LIGHT_GREEN#0, (const byte) PINK#0, (const byte) LIGHT_GREEN#0, (const byte) LIGHT_GREEN#0, (const byte) LIGHT_BLUE#0, (const byte) DARK_GREY#0, (const byte) PURPLE#0, (const byte) RED#0, (const byte) ORANGE#0, (const byte) CYAN#0, (const byte) LIGHT_GREEN#0, (const byte) PINK#0, (const byte) LIGHT_GREEN#0, (const byte) LIGHT_GREEN#0, (const byte) LIGHT_BLUE#0, (const byte) DARK_GREY#0, (const byte) PURPLE#0, (const byte) RED#0, (const byte) ORANGE#0 }
Successful SSA optimization Pass2ConstantInitializerValueLists
Constant (const byte*) PLAYFIELD_SPRITE_PTRS_1#0 = PLAYFIELD_SCREEN_1#0+SPRITE_PTRS#0
Constant (const byte*) PLAYFIELD_SPRITE_PTRS_2#0 = PLAYFIELD_SCREEN_2#0+SPRITE_PTRS#0
Constant (const byte) $3 = PLAYFIELD_LINES#0*PLAYFIELD_COLS#0
Constant (const byte[]) PIECES_COLORS_1#0 = { BLUE#0, GREEN#0, PURPLE#0, BLUE#0, RED#0, LIGHT_GREEN#0, RED#0, BLUE#0, LIGHT_BLUE#0, RED#0, BLUE#0, GREEN#0, PURPLE#0, BLUE#0, RED#0, LIGHT_GREEN#0, RED#0, BLUE#0, LIGHT_BLUE#0, RED#0, BLUE#0, GREEN#0, PURPLE#0, BLUE#0, RED#0, LIGHT_GREEN#0, RED#0, BLUE#0, LIGHT_BLUE#0, RED#0 }
Constant (const byte[]) PIECES_COLORS_2#0 = { CYAN#0, LIGHT_GREEN#0, PINK#0, LIGHT_GREEN#0, LIGHT_GREEN#0, LIGHT_BLUE#0, DARK_GREY#0, PURPLE#0, RED#0, ORANGE#0, CYAN#0, LIGHT_GREEN#0, PINK#0, LIGHT_GREEN#0, LIGHT_GREEN#0, LIGHT_BLUE#0, DARK_GREY#0, PURPLE#0, RED#0, ORANGE#0, CYAN#0, LIGHT_GREEN#0, PINK#0, LIGHT_GREEN#0, LIGHT_GREEN#0, LIGHT_BLUE#0, DARK_GREY#0, PURPLE#0, RED#0, ORANGE#0 }
Constant (const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 = { fill( PLAYFIELD_LINES#0, 0) }
Constant (const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 = { fill( PLAYFIELD_LINES#0, 0) }
Constant (const word) render_init::vicSelectGfxBank1_toDd001_$0#0 = (word)render_init::vicSelectGfxBank1_gfx#0
Constant (const byte) render_init::$1 = VIC_ECM#0|VIC_DEN#0
Constant (const byte*) render_init::$6 = PLAYFIELD_SCREEN_1#0+(byte)2*$28
Constant (const byte*) render_init::$8 = PLAYFIELD_SCREEN_2#0+(byte)2*$28
Constant (const byte) render_init::$10 = PLAYFIELD_LINES#0-1
Constant (const word) render_show::toD0181_$0#0 = (word)render_show::toD0181_screen#0
Constant (const word) render_show::toD0181_$4#0 = (word)render_show::toD0181_gfx#0
Constant (const word) render_show::toD0182_$0#0 = (word)render_show::toD0182_screen#0
Constant (const word) render_show::toD0182_$4#0 = (word)render_show::toD0182_gfx#0
Constant (const byte*) render_score::score_bytes#0 = (byte*)render_score::$1
Constant (const word) render_bcd::offset#1 = render_score::score_offset#0+2
Constant (const word) render_bcd::offset#2 = render_score::score_offset#0+4
Constant (const word) render_bcd::offset#4 = render_score::lines_offset#0+1
Constant (const byte*) render_screen_original::oscr#0 = PLAYFIELD_SCREEN_ORIGINAL#0+(byte)$20*2
Constant (const byte*) render_screen_original::ocols#0 = PLAYFIELD_COLORS_ORIGINAL#0+(byte)$20*2
Constant (const byte) render_playfield::i#0 = PLAYFIELD_COLS#0*2
Constant (const byte) render_playfield::$1 = PLAYFIELD_LINES#0-1
Constant (const byte) render_playfield::$3 = PLAYFIELD_COLS#0-1
Constant (const byte*) render_next::screen_next_area#1 = PLAYFIELD_SCREEN_1#0+render_next::next_area_offset#0
Constant (const byte*) render_next::screen_next_area#2 = PLAYFIELD_SCREEN_2#0+render_next::next_area_offset#0
Constant (const byte) $4 = SPRITES_FIRST_YPOS#0+$13
Constant (const byte) $5 = SPRITES_FIRST_YPOS#0+$15
Constant (const word) toSpritePtr1_$0#0 = (word)PLAYFIELD_SPRITES#0
Constant (const word) sprites_irq::toSpritePtr2_$0#0 = (word)sprites_irq::toSpritePtr2_sprite#0
Constant (const word) $8 = (word)PIECE_T#0
Constant (const word) $9 = (word)PIECE_S#0
Constant (const word) $10 = (word)PIECE_Z#0
Constant (const word) $11 = (word)PIECE_J#0
Constant (const word) $12 = (word)PIECE_O#0
Constant (const word) $13 = (word)PIECE_I#0
Constant (const word) $14 = (word)PIECE_L#0
Constant (const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 = { fill( PLAYFIELD_LINES#0, 0) }
Constant (const byte) $15 = PLAYFIELD_LINES#0+1
Constant (const byte) play_init::$1 = PLAYFIELD_LINES#0-1
Constant (const byte) play_init::$0 = PLAYFIELD_COLS#0*PLAYFIELD_LINES#0
Constant (const byte) play_move_down::movedown#1 = ++play_move_down::movedown#0
Constant (const byte) play_remove_lines::$2 = PLAYFIELD_LINES#0*PLAYFIELD_COLS#0
Constant (const byte) play_remove_lines::$4 = PLAYFIELD_LINES#0-1
Constant (const byte) play_remove_lines::$5 = PLAYFIELD_COLS#0-1
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) IRQ_RASTER_FIRST#0 = $4
Successful SSA optimization Pass2ConstantIdentification
Constant value identified { fill( $3, 0) } in [68] (byte[$3]) playfield#0 ← { fill( $3, 0) }
Constant value identified { fill( $15, 0) } in [359] (byte[$15]) playfield_lines_idx#0 ← { fill( $15, 0) }
Successful SSA optimization Pass2ConstantValues
Resolved ranged next value [107] render_init::i#1 ← ++ render_init::i#2 to ++
Resolved ranged comparison value [108] if(render_init::i#1!=rangelast(0,render_init::$10)) goto render_init::@1 to (const byte) render_init::$10+(number) 1
Resolved ranged next value [218] render_playfield::c#1 ← ++ render_playfield::c#2 to ++
Resolved ranged comparison value [219] if(render_playfield::c#1!=rangelast(0,render_playfield::$3)) goto render_playfield::@2 to (const byte) render_playfield::$3+(number) 1
Resolved ranged next value [220] render_playfield::l#1 ← ++ render_playfield::l#2 to ++
Resolved ranged comparison value [221] if(render_playfield::l#1!=rangelast(2,render_playfield::$1)) goto render_playfield::@1 to (const byte) render_playfield::$1+(number) 1
Resolved ranged next value [368] play_init::j#1 ← ++ play_init::j#2 to ++
Resolved ranged comparison value [369] if(play_init::j#1!=rangelast(0,play_init::$1)) goto play_init::@1 to (const byte) play_init::$1+(number) 1
Resolved ranged next value [540] play_remove_lines::x#1 ← ++ play_remove_lines::x#2 to ++
Resolved ranged comparison value [541] if(play_remove_lines::x#1!=rangelast(0,play_remove_lines::$5)) goto play_remove_lines::@2 to (const byte) play_remove_lines::$5+(number) 1
Resolved ranged next value [544] play_remove_lines::y#1 ← ++ play_remove_lines::y#8 to ++
Resolved ranged comparison value [545] if(play_remove_lines::y#1!=rangelast(0,play_remove_lines::$4)) goto play_remove_lines::@1 to (const byte) play_remove_lines::$4+(number) 1
Adding number conversion cast (unumber) render_init::$10+1 in if((byte) render_init::i#1!=(const byte) render_init::$10+(number) 1) goto render_init::@1
Adding number conversion cast (unumber) 1 in if((byte) render_init::i#1!=(unumber)(const byte) render_init::$10+(number) 1) goto render_init::@1
Adding number conversion cast (unumber) render_playfield::$3+1 in if((byte) render_playfield::c#1!=(const byte) render_playfield::$3+(number) 1) goto render_playfield::@2
Adding number conversion cast (unumber) 1 in if((byte) render_playfield::c#1!=(unumber)(const byte) render_playfield::$3+(number) 1) goto render_playfield::@2
Adding number conversion cast (unumber) render_playfield::$1+1 in if((byte) render_playfield::l#1!=(const byte) render_playfield::$1+(number) 1) goto render_playfield::@1
Adding number conversion cast (unumber) 1 in if((byte) render_playfield::l#1!=(unumber)(const byte) render_playfield::$1+(number) 1) goto render_playfield::@1
Adding number conversion cast (unumber) play_init::$1+1 in if((byte) play_init::j#1!=(const byte) play_init::$1+(number) 1) goto play_init::@1
Adding number conversion cast (unumber) 1 in if((byte) play_init::j#1!=(unumber)(const byte) play_init::$1+(number) 1) goto play_init::@1
Adding number conversion cast (unumber) play_remove_lines::$5+1 in if((byte) play_remove_lines::x#1!=(const byte) play_remove_lines::$5+(number) 1) goto play_remove_lines::@2
Adding number conversion cast (unumber) 1 in if((byte) play_remove_lines::x#1!=(unumber)(const byte) play_remove_lines::$5+(number) 1) goto play_remove_lines::@2
Adding number conversion cast (unumber) play_remove_lines::$4+1 in if((byte) play_remove_lines::y#1!=(const byte) play_remove_lines::$4+(number) 1) goto play_remove_lines::@1
Adding number conversion cast (unumber) 1 in if((byte) play_remove_lines::y#1!=(unumber)(const byte) play_remove_lines::$4+(number) 1) goto play_remove_lines::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (const byte) render_init::$10+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (const byte) render_playfield::$3+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (const byte) render_playfield::$1+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (const byte) play_init::$1+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (const byte) play_remove_lines::$5+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (const byte) play_remove_lines::$4+(unumber)(number) 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)(byte) irq_sprite_ptr#0 = (byte~) $7 
Alias candidate removed (volatile)(byte) sprites_irq::raster_sprite_gfx_modify#0 = (byte~) sprites_irq::$0 
Alias candidate removed (volatile)(byte) sprites_irq::toSpritePtr2_return#0 = (byte~) sprites_irq::toSpritePtr2_$2#0 (byte) sprites_irq::toSpritePtr2_return#1 (byte~) sprites_irq::$5 (byte) irq_sprite_ptr#1 
Constant right-side identified [68] (byte~) render_init::vicSelectGfxBank1_toDd001_$1#0 ← > (const word) render_init::vicSelectGfxBank1_toDd001_$0#0
Constant right-side identified [72] (byte~) render_init::$2 ← (const byte) render_init::$1 | (const byte) VIC_RSEL#0
Constant right-side identified [82] (byte*) render_init::li_1#0 ← (const byte*) render_init::$6 + (byte) $10
Constant right-side identified [83] (byte*) render_init::li_2#0 ← (const byte*) render_init::$8 + (byte) $10
Constant right-side identified [94] (word~) render_show::toD0181_$1#0 ← (const word) render_show::toD0181_$0#0 & (word) $3fff
Constant right-side identified [97] (byte~) render_show::toD0181_$5#0 ← > (const word) render_show::toD0181_$4#0
Constant right-side identified [101] (word~) render_show::toD0182_$1#0 ← (const word) render_show::toD0182_$0#0 & (word) $3fff
Constant right-side identified [104] (byte~) render_show::toD0182_$5#0 ← > (const word) render_show::toD0182_$4#0
Constant right-side identified [249] (word~) toSpritePtr1_$1#0 ← (const word) toSpritePtr1_$0#0 / (byte) $40
Constant right-side identified [293] (word~) sprites_irq::toSpritePtr2_$1#0 ← (const word) sprites_irq::toSpritePtr2_$0#0 / (byte) $40
Constant right-side identified [474] (byte) play_remove_lines::r#0 ← (const byte) play_remove_lines::$2 - (byte) 1
Constant right-side identified [475] (byte) play_remove_lines::w#0 ← (const byte) play_remove_lines::$2 - (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Identified constant from value list (word[]) { (const word) $8, (const word) $9, (const word) $10, (const word) $11, (const word) $12, (const word) $13, (const word) $14 }
Successful SSA optimization Pass2ConstantInitializerValueLists
Constant (const byte[$3]) playfield#0 = { fill( $3, 0) }
Constant (const byte) render_init::vicSelectGfxBank1_toDd001_$1#0 = >render_init::vicSelectGfxBank1_toDd001_$0#0
Constant (const byte) render_init::$2 = render_init::$1|VIC_RSEL#0
Constant (const byte*) render_init::li_1#0 = render_init::$6+$10
Constant (const byte*) render_init::li_2#0 = render_init::$8+$10
Constant (const word) render_show::toD0181_$1#0 = render_show::toD0181_$0#0&$3fff
Constant (const byte) render_show::toD0181_$5#0 = >render_show::toD0181_$4#0
Constant (const word) render_show::toD0182_$1#0 = render_show::toD0182_$0#0&$3fff
Constant (const byte) render_show::toD0182_$5#0 = >render_show::toD0182_$4#0
Constant (const word) toSpritePtr1_$1#0 = toSpritePtr1_$0#0/$40
Constant (const word) sprites_irq::toSpritePtr2_$1#0 = sprites_irq::toSpritePtr2_$0#0/$40
Constant (const word[]) PIECES#0 = { $8, $9, $10, $11, $12, $13, $14 }
Constant (const byte[$15]) playfield_lines_idx#0 = { fill( $15, 0) }
Constant (const byte) play_remove_lines::r#0 = play_remove_lines::$2-1
Constant (const byte) play_remove_lines::w#0 = play_remove_lines::$2-1
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) play_init::pli#0 = playfield#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte)toSpritePtr1_$1#0 in [250] (byte) toSpritePtr1_return#0 ← (byte)(const word) toSpritePtr1_$1#0
Constant value identified (byte)sprites_irq::toSpritePtr2_$1#0 in [294] (byte~) sprites_irq::toSpritePtr2_$2#0 ← (byte)(const word) sprites_irq::toSpritePtr2_$1#0
Successful SSA optimization Pass2ConstantValues
Alias candidate removed (volatile)(byte) irq_sprite_ptr#0 = (byte~) $7 
Alias candidate removed (volatile)(byte) sprites_irq::raster_sprite_gfx_modify#0 = (byte~) sprites_irq::$0 
Alias candidate removed (volatile)(byte) sprites_irq::toSpritePtr2_return#0 = (byte~) sprites_irq::toSpritePtr2_$2#0 (byte) sprites_irq::toSpritePtr2_return#1 (byte~) sprites_irq::$5 (byte) irq_sprite_ptr#1 
Constant right-side identified [67] (byte~) render_init::vicSelectGfxBank1_toDd001_$2#0 ← (const byte) render_init::vicSelectGfxBank1_toDd001_$1#0 / (byte) $40
Constant right-side identified [70] (byte~) render_init::$3 ← (const byte) render_init::$2 | (byte) 3
Constant right-side identified [89] (word~) render_show::toD0181_$2#0 ← (const word) render_show::toD0181_$1#0 * (byte) 4
Constant right-side identified [91] (byte~) render_show::toD0181_$6#0 ← (const byte) render_show::toD0181_$5#0 / (byte) 4
Constant right-side identified [94] (word~) render_show::toD0182_$2#0 ← (const word) render_show::toD0182_$1#0 * (byte) 4
Constant right-side identified [96] (byte~) render_show::toD0182_$6#0 ← (const byte) render_show::toD0182_$5#0 / (byte) 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_init::vicSelectGfxBank1_toDd001_$2#0 = render_init::vicSelectGfxBank1_toDd001_$1#0/$40
Constant (const byte) render_init::$3 = render_init::$2|3
Constant (const word) render_show::toD0181_$2#0 = render_show::toD0181_$1#0*4
Constant (const byte) render_show::toD0181_$6#0 = render_show::toD0181_$5#0/4
Constant (const word) render_show::toD0182_$2#0 = render_show::toD0182_$1#0*4
Constant (const byte) render_show::toD0182_$6#0 = render_show::toD0182_$5#0/4
Constant (const byte) toSpritePtr1_return#0 = (byte)toSpritePtr1_$1#0
Constant (const byte) sprites_irq::toSpritePtr2_$2#0 = (byte)sprites_irq::toSpritePtr2_$1#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) sprites_irq::toSpritePtr2_return#0 = sprites_irq::toSpritePtr2_$2#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) sprites_irq::toSpritePtr2_return#1 = sprites_irq::toSpritePtr2_return#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) sprites_irq::$5 = sprites_irq::toSpritePtr2_return#1
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero (const byte) render_init::vicSelectGfxBank1_toDd001_$1#0/(byte) $40 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero 3 in [68] (byte) render_init::vicSelectGfxBank1_toDd001_return#0 ← (byte) 3 ^ (const byte) render_init::vicSelectGfxBank1_toDd001_$2#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) render_init::vicSelectGfxBank1_toDd001_$1#0
Eliminating unused constant (const byte) render_init::vicSelectGfxBank1_toDd001_$2#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const word) render_init::vicSelectGfxBank1_toDd001_$0#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte*) render_init::vicSelectGfxBank1_gfx#0
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)(byte) irq_sprite_ptr#0 = (byte~) $7 
Alias candidate removed (volatile)(byte) sprites_irq::raster_sprite_gfx_modify#0 = (byte~) sprites_irq::$0 
Constant right-side identified [87] (byte~) render_show::toD0181_$3#0 ← > (const word) render_show::toD0181_$2#0
Constant right-side identified [88] (byte~) render_show::toD0181_$7#0 ← (const byte) render_show::toD0181_$6#0 & (byte) $f
Constant right-side identified [90] (byte~) render_show::toD0182_$3#0 ← > (const word) render_show::toD0182_$2#0
Constant right-side identified [91] (byte~) render_show::toD0182_$7#0 ← (const byte) render_show::toD0182_$6#0 & (byte) $f
Constant right-side identified [234] (byte~) $7 ← (const byte) toSpritePtr1_return#0 + (byte) 3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 = 3
Constant (const byte) render_show::toD0181_$3#0 = >render_show::toD0181_$2#0
Constant (const byte) render_show::toD0181_$7#0 = render_show::toD0181_$6#0&$f
Constant (const byte) render_show::toD0182_$3#0 = >render_show::toD0182_$2#0
Constant (const byte) render_show::toD0182_$7#0 = render_show::toD0182_$6#0&$f
Constant (const byte) $7 = toSpritePtr1_return#0+3
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)(byte) sprites_irq::raster_sprite_gfx_modify#0 = (byte~) sprites_irq::$0 
Constant right-side identified [86] (byte) render_show::toD0181_return#0 ← (const byte) render_show::toD0181_$3#0 | (const byte) render_show::toD0181_$7#0
Constant right-side identified [87] (byte) render_show::toD0182_return#0 ← (const byte) render_show::toD0182_$3#0 | (const byte) render_show::toD0182_$7#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) render_show::toD0181_return#0 = render_show::toD0181_$3#0|render_show::toD0181_$7#0
Constant (const byte) render_show::toD0182_return#0 = render_show::toD0182_$3#0|render_show::toD0182_$7#0
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)(byte) sprites_irq::raster_sprite_gfx_modify#0 = (byte~) sprites_irq::$0 
Inlining Noop Cast [196] (byte*) render_next::next_piece_gfx#0 ← (byte*)*((const word[]) PIECES#0 + (byte~) render_next::$6) keeping *(PIECES#0 + render_next::$6)
Inlining Noop Cast [424] (byte*) current_piece_gfx#74 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) keeping *(PIECES#0 + play_spawn_current::$7)
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [77] (byte~) render_init::$13 ← (byte) render_init::i#2 * (const byte) SIZEOF_POINTER
Rewriting multiplication to use shift [159] (byte~) render_playfield::$6 ← (byte~) render_playfield::$2 * (const byte) SIZEOF_POINTER
Rewriting multiplication to use shift [175] (byte~) render_moving::$6 ← (byte~) render_moving::$1 * (const byte) SIZEOF_POINTER
Rewriting multiplication to use shift [195] (byte~) render_next::$6 ← (byte) next_piece_idx#12 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [218] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 * (byte) 2
Rewriting multiplication to use shift [282] (byte~) play_init::$4 ← (byte) play_init::j#2 * (const byte) SIZEOF_POINTER
Rewriting multiplication to use shift [292] (byte~) play_init::$5 ← (byte) play_init::b#2 * (const byte) SIZEOF_DWORD
Rewriting multiplication to use shift [387] (byte~) play_collision::$14 ← (byte) play_collision::yp#2 * (const byte) SIZEOF_POINTER
Rewriting multiplication to use shift [407] (byte~) play_lock_current::$4 ← (byte) play_lock_current::yp#2 * (const byte) SIZEOF_POINTER
Rewriting multiplication to use shift [423] (byte~) play_spawn_current::$7 ← (byte) play_spawn_current::current_piece_idx#0 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [465] (byte~) play_update_score::$9 ← (byte) play_update_score::removed#0 * (const byte) SIZEOF_DWORD
Rewriting multiplication to use shift [488] (byte~) play_increase_level::$5 ← (byte) play_increase_level::b#2 * (const byte) SIZEOF_DWORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) keyboard_event_scan::keycode#0
Inlining constant with var siblings (const byte) keyboard_event_scan::row#0
Inlining constant with var siblings (const byte) keyboard_event_scan::col#0
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#0
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#1
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#2
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#3
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#4
Inlining constant with var siblings (const byte) keyboard_event_get::return#0
Inlining constant with var siblings (const byte) render_init::i#0
Inlining constant with var siblings (const byte*) render_init::li_1#0
Inlining constant with var siblings (const byte*) render_init::li_2#0
Inlining constant with var siblings (const byte*) render_score::screen#1
Inlining constant with var siblings (const byte*) render_score::screen#2
Inlining constant with var siblings (const byte) render_bcd::only_low#0
Inlining constant with var siblings (const byte) render_bcd::only_low#1
Inlining constant with var siblings (const byte) render_bcd::only_low#2
Inlining constant with var siblings (const byte) render_bcd::only_low#3
Inlining constant with var siblings (const byte) render_bcd::only_low#4
Inlining constant with var siblings (const byte) render_bcd::only_low#5
Inlining constant with var siblings (const word) render_bcd::offset#0
Inlining constant with var siblings (const word) render_bcd::offset#3
Inlining constant with var siblings (const word) render_bcd::offset#5
Inlining constant with var siblings (const word) render_bcd::offset#1
Inlining constant with var siblings (const word) render_bcd::offset#2
Inlining constant with var siblings (const word) render_bcd::offset#4
Inlining constant with var siblings (const byte) render_screen_original::y#0
Inlining constant with var siblings (const byte) render_screen_original::x#0
Inlining constant with var siblings (const byte*) render_screen_original::screen#0
Inlining constant with var siblings (const byte*) render_screen_original::screen#1
Inlining constant with var siblings (const byte*) render_screen_original::cols#0
Inlining constant with var siblings (const byte*) render_screen_original::oscr#0
Inlining constant with var siblings (const byte*) render_screen_original::ocols#0
Inlining constant with var siblings (const byte) render_playfield::l#0
Inlining constant with var siblings (const byte) render_playfield::c#0
Inlining constant with var siblings (const byte) render_playfield::i#0
Inlining constant with var siblings (const byte) render_moving::i#0
Inlining constant with var siblings (const byte) render_moving::l#0
Inlining constant with var siblings (const byte) render_moving::c#0
Inlining constant with var siblings (const byte) render_next::l#0
Inlining constant with var siblings (const byte) render_next::c#0
Inlining constant with var siblings (const byte*) render_next::screen_next_area#1
Inlining constant with var siblings (const byte*) render_next::screen_next_area#2
Inlining constant with var siblings (const byte) sprites_init::xpos#0
Inlining constant with var siblings (const byte) sprites_init::s#0
Inlining constant with different constant siblings (const byte) sprites_irq::toSpritePtr2_return#1
Inlining constant with var siblings (const byte) play_init::idx#0
Inlining constant with var siblings (const byte) play_init::j#0
Inlining constant with var siblings (const byte) play_init::b#0
Inlining constant with var siblings (const byte*) play_init::pli#0
Inlining constant with var siblings (const byte) play_move_down::movedown#0
Inlining constant with var siblings (const byte) play_move_down::return#1
Inlining constant with var siblings (const byte) play_move_down::return#2
Inlining constant with var siblings (const byte) play_move_down::movedown#1
Inlining constant with var siblings (const byte) play_move_leftright::return#1
Inlining constant with var siblings (const byte) play_move_leftright::return#3
Inlining constant with var siblings (const byte) play_move_leftright::return#4
Inlining constant with var siblings (const byte) play_move_rotate::return#1
Inlining constant with var siblings (const byte) play_move_rotate::return#3
Inlining constant with var siblings (const byte) play_move_rotate::return#4
Inlining constant with var siblings (const byte) play_collision::i#0
Inlining constant with var siblings (const byte) play_collision::l#0
Inlining constant with var siblings (const byte) play_collision::c#0
Inlining constant with var siblings (const byte) play_collision::return#4
Inlining constant with var siblings (const byte) play_collision::return#6
Inlining constant with var siblings (const byte) play_collision::return#7
Inlining constant with var siblings (const byte) play_collision::return#8
Inlining constant with var siblings (const byte) play_collision::return#9
Inlining constant with var siblings (const byte) play_collision::orientation#4
Inlining constant with var siblings (const byte) play_lock_current::i#0
Inlining constant with var siblings (const byte) play_lock_current::l#0
Inlining constant with var siblings (const byte) play_lock_current::c#0
Inlining constant with var siblings (const byte) play_spawn_current::piece_idx#0
Inlining constant with var siblings (const byte) play_remove_lines::removed#0
Inlining constant with var siblings (const byte) play_remove_lines::y#0
Inlining constant with var siblings (const byte) play_remove_lines::full#0
Inlining constant with var siblings (const byte) play_remove_lines::x#0
Inlining constant with var siblings (const byte) play_remove_lines::full#1
Inlining constant with var siblings (const byte) play_remove_lines::r#0
Inlining constant with var siblings (const byte) play_remove_lines::w#0
Inlining constant with var siblings (const byte) play_increase_level::b#0
Inlining constant with var siblings (const byte) keyboard_events_size#0
Inlining constant with var siblings (const word) lines_bcd#0
Inlining constant with var siblings (const byte) level_bcd#0
Inlining constant with var siblings (const byte) level#0
Inlining constant with var siblings (const byte) game_over#0
Inlining constant with var siblings (const byte) render_screen_show#1
Inlining constant with var siblings (const byte) render_screen_render#1
Inlining constant with var siblings (const byte) next_piece_idx#0
Inlining constant with var siblings (const byte) current_movedown_counter#0
Inlining constant with var siblings (const byte) current_movedown_counter#4
Inlining constant with var siblings (const byte) current_orientation#69
Inlining constant with var siblings (const byte) game_over#5
Inlining constant with var siblings (const byte) current_movedown_slow#9
Constant inlined play_remove_lines::x#0 = (byte) 0
Constant inlined play_init::pli#0 = (const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0
Constant inlined render_show::toD0181_$7#0 = >(word)(const byte*) PLAYFIELD_CHARSET#0/(byte) 4&(byte) $f
Constant inlined play_move_rotate::return#1 = (byte) 0
Constant inlined play_move_rotate::return#4 = (byte) 1
Constant inlined play_move_rotate::return#3 = (byte) 0
Constant inlined current_movedown_counter#0 = (byte) 0
Constant inlined current_movedown_counter#4 = (byte) 0
Constant inlined render_screen_original::screen#1 = (const byte*) PLAYFIELD_SCREEN_2#0
Constant inlined render_screen_original::screen#0 = (const byte*) PLAYFIELD_SCREEN_1#0
Constant inlined render_screen_original::y#0 = (byte) 0
Constant inlined current_movedown_slow#9 = (byte) 1
Constant inlined render_show::toD0182_$7#0 = >(word)(const byte*) PLAYFIELD_CHARSET#0/(byte) 4&(byte) $f
Constant inlined render_playfield::i#0 = (const byte) PLAYFIELD_COLS#0*(byte) 2
Constant inlined render_show::toD0182_$2#0 = (word)(const byte*) PLAYFIELD_SCREEN_2#0&(word) $3fff*(byte) 4
Constant inlined render_init::$10 = (const byte) PLAYFIELD_LINES#0-(byte) 1
Constant inlined play_remove_lines::$2 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0
Constant inlined play_collision::i#0 = (byte) 0
Constant inlined play_remove_lines::$4 = (const byte) PLAYFIELD_LINES#0-(byte) 1
Constant inlined render_bcd::offset#0 = (const word) render_score::score_offset#0
Constant inlined current_orientation#69 = (byte) 0
Constant inlined render_bcd::offset#1 = (const word) render_score::score_offset#0+(byte) 2
Constant inlined sprites_irq::toSpritePtr2_$0#0 = (word)(const byte*) PLAYFIELD_SPRITES#0
Constant inlined render_bcd::offset#4 = (const word) render_score::lines_offset#0+(byte) 1
Constant inlined render_bcd::offset#5 = (const word) render_score::level_offset#0
Constant inlined render_bcd::offset#2 = (const word) render_score::score_offset#0+(byte) 4
Constant inlined render_bcd::offset#3 = (const word) render_score::lines_offset#0
Constant inlined render_show::toD0182_gfx#0 = (const byte*) PLAYFIELD_CHARSET#0
Constant inlined toSpritePtr1_$1#0 = (word)(const byte*) PLAYFIELD_SPRITES#0/(byte) $40
Constant inlined render_show::toD0181_$3#0 = >(word)(const byte*) PLAYFIELD_SCREEN_1#0&(word) $3fff*(byte) 4
Constant inlined play_lock_current::i#0 = (byte) 0
Constant inlined play_remove_lines::y#0 = (byte) 0
Constant inlined render_next::screen_next_area#1 = (const byte*) PLAYFIELD_SCREEN_1#0+(const word) render_next::next_area_offset#0
Constant inlined render_init::$8 = (const byte*) PLAYFIELD_SCREEN_2#0+(byte)(number) 2*(number) $28
Constant inlined $10 = (word)(const byte[4*4*4]) PIECE_Z#0
Constant inlined render_next::screen_next_area#2 = (const byte*) PLAYFIELD_SCREEN_2#0+(const word) render_next::next_area_offset#0
Constant inlined $11 = (word)(const byte[4*4*4]) PIECE_J#0
Constant inlined render_init::$6 = (const byte*) PLAYFIELD_SCREEN_1#0+(byte)(number) 2*(number) $28
Constant inlined $12 = (word)(const byte[4*4*4]) PIECE_O#0
Constant inlined keyboard_event_scan::col#0 = (byte) 0
Constant inlined lines_bcd#0 = (byte) 0
Constant inlined render_init::$3 = (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte) 3
Constant inlined $13 = (word)(const byte[4*4*4]) PIECE_I#0
Constant inlined $14 = (word)(const byte[4*4*4]) PIECE_L#0
Constant inlined render_init::$1 = (const byte) VIC_ECM#0|(const byte) VIC_DEN#0
Constant inlined $15 = (const byte) PLAYFIELD_LINES#0+(byte) 1
Constant inlined sprites_irq::$5 = (const byte) sprites_irq::toSpritePtr2_return#0
Constant inlined render_init::$2 = (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined render_show::toD0181_screen#0 = (const byte*) PLAYFIELD_SCREEN_1#0
Constant inlined render_playfield::l#0 = (byte) 2
Constant inlined render_moving::c#0 = (byte) 0
Constant inlined render_show::toD0182_$6#0 = >(word)(const byte*) PLAYFIELD_CHARSET#0/(byte) 4
Constant inlined render_screen_original::x#0 = (byte) 0
Constant inlined render_bcd::only_low#0 = (byte) 0
Constant inlined render_bcd::only_low#1 = (byte) 0
Constant inlined render_bcd::only_low#2 = (byte) 0
Constant inlined keyboard_event_pressed::keycode#4 = (const byte) KEY_SPACE#0
Constant inlined render_show::toD0182_$5#0 = >(word)(const byte*) PLAYFIELD_CHARSET#0
Constant inlined render_bcd::only_low#3 = (byte) 1
Constant inlined render_bcd::only_low#4 = (byte) 0
Constant inlined render_bcd::only_low#5 = (byte) 0
Constant inlined render_show::toD0182_$1#0 = (word)(const byte*) PLAYFIELD_SCREEN_2#0&(word) $3fff
Constant inlined sprites_irq_init::$0 = &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
Constant inlined game_over#5 = (byte) 1
Constant inlined keyboard_event_pressed::keycode#3 = (const byte) KEY_COMMODORE#0
Constant inlined keyboard_event_pressed::keycode#2 = (const byte) KEY_CTRL#0
Constant inlined render_init::i#0 = (byte) 0
Constant inlined keyboard_event_pressed::keycode#1 = (const byte) KEY_RSHIFT#0
Constant inlined keyboard_event_pressed::keycode#0 = (const byte) KEY_LSHIFT#0
Constant inlined play_collision::return#7 = (const byte) COLLISION_RIGHT#0
Constant inlined sprites_irq::toSpritePtr2_$1#0 = (word)(const byte*) PLAYFIELD_SPRITES#0/(byte) $40
Constant inlined play_collision::return#6 = (const byte) COLLISION_LEFT#0
Constant inlined play_collision::return#4 = (const byte) COLLISION_BOTTOM#0
Constant inlined play_init::$1 = (const byte) PLAYFIELD_LINES#0-(byte) 1
Constant inlined play_move_down::return#2 = (byte) 1
Constant inlined play_move_down::return#1 = (byte) 0
Constant inlined game_over#0 = (byte) 0
Constant inlined play_collision::return#9 = (const byte) COLLISION_NONE#0
Constant inlined play_collision::return#8 = (const byte) COLLISION_PLAYFIELD#0
Constant inlined render_show::toD0181_$4#0 = (word)(const byte*) PLAYFIELD_CHARSET#0
Constant inlined toSpritePtr1_$0#0 = (word)(const byte*) PLAYFIELD_SPRITES#0
Constant inlined render_show::toD0181_$0#0 = (word)(const byte*) PLAYFIELD_SCREEN_1#0
Constant inlined play_init::$0 = (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0
Constant inlined keyboard_events_size#0 = (byte) 0
Constant inlined render_next::l#0 = (byte) 0
Constant inlined play_remove_lines::r#0 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte) 1
Constant inlined render_show::toD0181_$5#0 = >(word)(const byte*) PLAYFIELD_CHARSET#0
Constant inlined render_screen_render#1 = (byte) $20
Constant inlined sprites_init::xpos#0 = (byte)(number) $18+(number) $f*(number) 8
Constant inlined $3 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0
Constant inlined play_lock_current::l#0 = (byte) 0
Constant inlined $4 = (const byte) SPRITES_FIRST_YPOS#0+(byte) $13
Constant inlined $5 = (const byte) SPRITES_FIRST_YPOS#0+(byte) $15
Constant inlined render_show::toD0181_gfx#0 = (const byte*) PLAYFIELD_CHARSET#0
Constant inlined $7 = (const byte) toSpritePtr1_return#0+(byte) 3
Constant inlined $8 = (word)(const byte[4*4*4]) PIECE_T#0
Constant inlined $9 = (word)(const byte[4*4*4]) PIECE_S#0
Constant inlined render_playfield::c#0 = (byte) 0
Constant inlined play_spawn_current::piece_idx#0 = (byte) 7
Constant inlined play_remove_lines::removed#0 = (byte) 0
Constant inlined play_remove_lines::full#1 = (byte) 0
Constant inlined play_remove_lines::full#0 = (byte) 1
Constant inlined sprites_init::s#0 = (byte) 0
Constant inlined render_show::toD0182_$4#0 = (word)(const byte*) PLAYFIELD_CHARSET#0
Constant inlined render_moving::l#0 = (byte) 0
Constant inlined play_move_leftright::return#1 = (byte) 1
Constant inlined render_show::toD0182_$0#0 = (word)(const byte*) PLAYFIELD_SCREEN_2#0
Constant inlined play_move_leftright::return#4 = (byte) 1
Constant inlined play_move_leftright::return#3 = (byte) 0
Constant inlined next_piece_idx#0 = (byte) 0
Constant inlined keyboard_event_scan::keycode#0 = (byte) 0
Constant inlined play_collision::c#0 = (byte) 0
Constant inlined sprites_irq::toSpritePtr2_$2#0 = (byte)(word)(const byte*) PLAYFIELD_SPRITES#0/(byte) $40
Constant inlined render_show::toD0181_$1#0 = (word)(const byte*) PLAYFIELD_SCREEN_1#0&(word) $3fff
Constant inlined render_init::li_2#0 = (const byte*) PLAYFIELD_SCREEN_2#0+(byte)(number) 2*(number) $28+(byte) $10
Constant inlined play_move_down::movedown#1 = ++(byte) 0
Constant inlined play_move_down::movedown#0 = (byte) 0
Constant inlined play_remove_lines::w#0 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte) 1
Constant inlined play_init::j#0 = (byte) 0
Constant inlined render_screen_original::ocols#0 = (const byte*) PLAYFIELD_COLORS_ORIGINAL#0+(byte)(number) $20*(number) 2
Constant inlined render_show::toD0181_$6#0 = >(word)(const byte*) PLAYFIELD_CHARSET#0/(byte) 4
Constant inlined play_lock_current::c#0 = (byte) 0
Constant inlined sprites_irq::toSpritePtr2_return#1 = (const byte) sprites_irq::toSpritePtr2_return#0
Constant inlined keyboard_event_scan::row#0 = (byte) 0
Constant inlined render_playfield::$1 = (const byte) PLAYFIELD_LINES#0-(byte) 1
Constant inlined play_init::b#0 = (byte) 0
Constant inlined render_next::c#0 = (byte) 0
Constant inlined render_playfield::$3 = (const byte) PLAYFIELD_COLS#0-(byte) 1
Constant inlined play_remove_lines::$5 = (const byte) PLAYFIELD_COLS#0-(byte) 1
Constant inlined level_bcd#0 = (byte) 0
Constant inlined level#0 = (byte) 0
Constant inlined play_init::idx#0 = (byte) 0
Constant inlined play_collision::orientation#4 = (byte) 0
Constant inlined render_moving::i#0 = (byte) 0
Constant inlined render_show::toD0182_$3#0 = >(word)(const byte*) PLAYFIELD_SCREEN_2#0&(word) $3fff*(byte) 4
Constant inlined render_show::toD0182_screen#0 = (const byte*) PLAYFIELD_SCREEN_2#0
Constant inlined render_screen_original::oscr#0 = (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0+(byte)(number) $20*(number) 2
Constant inlined render_score::screen#1 = (const byte*) PLAYFIELD_SCREEN_1#0
Constant inlined play_increase_level::b#0 = (byte) 0
Constant inlined render_screen_show#1 = (byte) 0
Constant inlined render_score::screen#2 = (const byte*) PLAYFIELD_SCREEN_2#0
Constant inlined sprites_irq::toSpritePtr2_sprite#0 = (const byte*) PLAYFIELD_SPRITES#0
Constant inlined play_collision::l#0 = (byte) 0
Constant inlined render_show::toD0181_$2#0 = (word)(const byte*) PLAYFIELD_SCREEN_1#0&(word) $3fff*(byte) 4
Constant inlined keyboard_event_get::return#0 = (byte) $ff
Constant inlined render_init::li_1#0 = (const byte*) PLAYFIELD_SCREEN_1#0+(byte)(number) 2*(number) $28+(byte) $10
Constant inlined render_score::$1 = &(dword) score_bcd#14
Constant inlined render_screen_original::cols#0 = (const byte*) COLS#0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(render_score::score_bytes#0+2)
Consolidated array index constant in *(render_score::score_bytes#0+1)
Consolidated array index constant in *(SPRITES_YPOS#0+2)
Consolidated array index constant in *(SPRITES_YPOS#0+4)
Consolidated array index constant in *(SPRITES_YPOS#0+6)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_1#0+1)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_1#0+2)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_1#0+3)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_2#0+1)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_2#0+2)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_2#0+3)
Consolidated array index constant in *(playfield_lines_idx#0+PLAYFIELD_LINES#0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Successful SSA optimization Pass2ConstantSimplification
Alias candidate removed (volatile)(byte) sprites_irq::raster_sprite_gfx_modify#0 = (byte~) sprites_irq::$0 
Eliminating unused constant (const byte) SIZEOF_POINTER
Eliminating unused constant (const byte) SIZEOF_WORD
Eliminating unused constant (const byte) SIZEOF_DWORD
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)(byte) sprites_irq::raster_sprite_gfx_modify#0 = (byte~) sprites_irq::$0 
Added new block during phi lifting keyboard_event_scan::@30(between keyboard_event_scan::@10 and keyboard_event_scan::@8)
Added new block during phi lifting keyboard_event_scan::@31(between keyboard_event_scan::@12 and keyboard_event_scan::@11)
Added new block during phi lifting keyboard_event_scan::@32(between keyboard_event_scan::@11 and keyboard_event_scan::@12)
Added new block during phi lifting keyboard_event_scan::@33(between keyboard_event_scan::@16 and keyboard_event_scan::@12)
Added new block during phi lifting render_init::@6(between render_init::@1 and render_init::@1)
Added new block during phi lifting render_bcd::@3(between render_bcd and render_bcd::@1)
Added new block during phi lifting render_screen_original::@9(between render_screen_original::@7 and render_screen_original::@1)
Added new block during phi lifting render_screen_original::@10(between render_screen_original::@2 and render_screen_original::@2)
Added new block during phi lifting render_screen_original::@11(between render_screen_original::@2 and render_screen_original::@4)
Added new block during phi lifting render_screen_original::@12(between render_screen_original::@4 and render_screen_original::@4)
Added new block during phi lifting render_screen_original::@13(between render_screen_original::@4 and render_screen_original::@6)
Added new block during phi lifting render_screen_original::@14(between render_screen_original::@6 and render_screen_original::@6)
Added new block during phi lifting render_playfield::@5(between render_playfield::@3 and render_playfield::@1)
Added new block during phi lifting render_playfield::@6(between render_playfield::@2 and render_playfield::@2)
Added new block during phi lifting render_moving::@11(between render_moving::@3 and render_moving::@1)
Added new block during phi lifting render_moving::@12(between render_moving::@5 and render_moving::@3)
Added new block during phi lifting render_moving::@13(between render_moving::@5 and render_moving::@4)
Added new block during phi lifting render_next::@13(between render_next::@11 and render_next::@5)
Added new block during phi lifting render_next::@14(between render_next::@8 and render_next::@6)
Added new block during phi lifting sprites_init::@3(between sprites_init::@1 and sprites_init::@1)
Added new block during phi lifting play_init::@5(between play_init::@1 and play_init::@1)
Added new block during phi lifting play_init::@6(between play_init::@3 and play_init::@3)
Added new block during phi lifting play_move_down::@23(between play_move_down::@17 and play_move_down::@2)
Added new block during phi lifting play_move_down::@24(between play_move_down::@6 and play_move_down::@2)
Added new block during phi lifting play_move_down::@25(between play_move_down::@2 and play_move_down::@3)
Added new block during phi lifting play_collision::@20(between play_collision::@17 and play_collision::@1)
Added new block during phi lifting play_collision::@21(between play_collision::@3 and play_collision::@2)
Added new block during phi lifting play_lock_current::@7(between play_lock_current::@5 and play_lock_current::@1)
Added new block during phi lifting play_lock_current::@8(between play_lock_current::@3 and play_lock_current::@2)
Added new block during phi lifting play_spawn_current::@11(between play_spawn_current::@10 and play_spawn_current::@1)
Added new block during phi lifting play_remove_lines::@16(between play_remove_lines::@7 and play_remove_lines::@1)
Added new block during phi lifting play_remove_lines::@17(between play_remove_lines::@3 and play_remove_lines::@2)
Added new block during phi lifting play_remove_lines::@18(between play_remove_lines::@2 and play_remove_lines::@3)
Added new block during phi lifting play_remove_lines::@19(between play_remove_lines::@5 and play_remove_lines::@7)
Added new block during phi lifting play_remove_lines::@20(between play_remove_lines::@7 and play_remove_lines::@9)
Added new block during phi lifting play_update_score::@6(between play_update_score and play_update_score::@return)
Added new block during phi lifting play_update_score::@7(between play_update_score::@2 and play_update_score::@return)
Added new block during phi lifting play_increase_level::@9(between play_increase_level::@2 and play_increase_level::@3)
Added new block during phi lifting play_increase_level::@10(between play_increase_level::@7 and play_increase_level::@7)
Added new block during phi lifting main::@44(between main::@19 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @4
Adding NOP phi() at start of @8
Adding NOP phi() at start of @11
Adding NOP phi() at start of toSpritePtr1
Adding NOP phi() at start of toSpritePtr1_@return
Adding NOP phi() at start of @25
Adding NOP phi() at start of @30
Adding NOP phi() at start of @37
Adding NOP phi() at start of @39
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@26
Adding NOP phi() at start of main::@27
Adding NOP phi() at start of main::@28
Adding NOP phi() at start of main::@29
Adding NOP phi() at start of main::@31
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@35
Adding NOP phi() at start of main::@36
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@41
Adding NOP phi() at start of main::@42
Adding NOP phi() at start of render_score::@3
Adding NOP phi() at start of render_score::@10
Adding NOP phi() at start of render_score::@1
Adding NOP phi() at start of render_next::@3
Adding NOP phi() at start of render_next::@1
Adding NOP phi() at start of play_collision::@15
Adding NOP phi() at start of play_collision::@8
Adding NOP phi() at start of play_collision::@10
Adding NOP phi() at start of play_collision::@12
Adding NOP phi() at start of play_collision::@18
Adding NOP phi() at start of play_move_down::@5
Adding NOP phi() at start of play_move_down::@10
Adding NOP phi() at start of play_move_down::@19
Adding NOP phi() at start of play_spawn_current::@2
Adding NOP phi() at start of play_spawn_current::sid_rnd1_@return
Adding NOP phi() at start of play_update_score::@3
Adding NOP phi() at start of play_increase_level::@1
Adding NOP phi() at start of play_remove_lines
Adding NOP phi() at start of play_remove_lines::@4
Adding NOP phi() at start of play_remove_lines::@11
Adding NOP phi() at start of keyboard_event_scan::@23
Adding NOP phi() at start of keyboard_event_scan::@24
Adding NOP phi() at start of keyboard_event_scan::@1
Adding NOP phi() at start of keyboard_event_scan::@5
Adding NOP phi() at start of keyboard_event_scan::@2
Adding NOP phi() at start of keyboard_event_scan::@6
Adding NOP phi() at start of keyboard_event_scan::@3
Adding NOP phi() at start of keyboard_event_scan::@7
Adding NOP phi() at start of render_show::@3
Adding NOP phi() at start of render_show::toD0182
Adding NOP phi() at start of render_show::toD0182_@return
Adding NOP phi() at start of render_show::@6
Adding NOP phi() at start of render_show::@1
Adding NOP phi() at start of render_show::toD0181
Adding NOP phi() at start of render_show::toD0181_@return
Adding NOP phi() at start of render_show::@5
Adding NOP phi() at start of play_init
Adding NOP phi() at start of render_init
Adding NOP phi() at start of render_init::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of render_init::vicSelectGfxBank1_toDd001_@return
Adding NOP phi() at start of render_init::@4
Adding NOP phi() at start of render_init::@5
Adding NOP phi() at start of render_init::@2
Adding NOP phi() at start of sprites_irq::toSpritePtr2
Adding NOP phi() at start of sprites_irq::toSpritePtr2_@return
CALL GRAPH
Calls in [] to main:19 
Calls in [main] to sid_rnd_init:23 render_init:25 sprites_init:27 sprites_irq_init:29 play_init:31 play_spawn_current:33 play_spawn_current:36 render_playfield:38 render_moving:43 render_next:45 render_show:59 keyboard_event_scan:61 keyboard_event_get:63 play_movement:70 render_playfield:75 render_moving:81 render_next:84 render_score:86 render_screen_swap:88 
Calls in [render_score] to render_bcd:135 render_bcd:140 render_bcd:145 render_bcd:150 render_bcd:155 render_bcd:160 
Calls in [play_movement] to play_move_down:264 play_move_leftright:275 play_move_rotate:280 
Calls in [play_move_rotate] to play_collision:305 
Calls in [play_move_leftright] to play_collision:362 play_collision:378 
Calls in [play_move_down] to keyboard_event_pressed:388 play_collision:408 play_lock_current:413 play_remove_lines:415 play_update_score:419 play_spawn_current:422 
Calls in [play_spawn_current] to play_collision:493 
Calls in [play_update_score] to play_increase_level:521 
Calls in [keyboard_event_scan] to keyboard_matrix_read:644 keyboard_event_pressed:655 keyboard_event_pressed:661 keyboard_event_pressed:667 keyboard_event_pressed:673 
Calls in [render_init] to render_screen_original:786 render_screen_original:788 

Created 176 initial phi equivalence classes
Coalesced [34] next_piece_idx#83 ← next_piece_idx#18
Coalesced [35] game_over#90 ← game_over#52
Not coalescing [39] current_ypos#98 ← current_ypos#6
Not coalescing [40] current_xpos#119 ← current_xpos#100
Not coalescing [42] current_piece_char#100 ← current_piece_char#5
Not coalescing [44] next_piece_idx#77 ← next_piece_idx#18
Coalesced [46] current_movedown_slow#97 ← current_movedown_slow#1
Coalesced [48] current_piece_char#107 ← current_piece_char#5
Coalesced [50] current_xpos#131 ← current_xpos#100
Coalesced [51] current_ypos#105 ← current_ypos#6
Coalesced [52] game_over#94 ← game_over#52
Coalesced [53] next_piece_idx#86 ← next_piece_idx#18
Coalesced [54] render_screen_showing#49 ← render_screen_showing#0
Coalesced [55] score_bcd#92 ← score_bcd#0
Not coalescing [74] render_screen_render#64 ← render_screen_render#18
Not coalescing [76] current_ypos#99 ← current_ypos#19
Not coalescing [77] render_screen_render#65 ← render_screen_render#18
Not coalescing [78] current_xpos#120 ← current_xpos#19
Not coalescing [79] current_piece_gfx#113 ← current_piece_gfx#18
Not coalescing [80] current_piece_char#101 ← current_piece_char#16
Not coalescing [82] render_screen_render#66 ← render_screen_render#18
Not coalescing [83] next_piece_idx#78 ← next_piece_idx#16
Coalesced [89] render_screen_show#61 ← render_screen_show#13
Coalesced [90] render_screen_render#68 ← render_screen_render#11
Coalesced [91] current_movedown_slow#98 ← current_movedown_slow#21
Coalesced [92] current_piece#103 ← current_piece#15
Coalesced [93] current_piece_char#108 ← current_piece_char#16
Coalesced [94] current_orientation#105 ← current_orientation#17
Coalesced [95] current_piece_gfx#125 ← current_piece_gfx#18
Coalesced [96] current_xpos#132 ← current_xpos#19
Coalesced [97] current_ypos#106 ← current_ypos#19
Coalesced [98] game_over#95 ← game_over#15
Coalesced [99] next_piece_idx#87 ← next_piece_idx#16
Coalesced [100] render_screen_showing#50 ← render_screen_showing#1
Coalesced [101] keyboard_events_size#93 ← keyboard_events_size#16
Coalesced [102] current_movedown_counter#61 ← current_movedown_counter#14
Coalesced [103] lines_bcd#96 ← lines_bcd#15
Coalesced [104] score_bcd#93 ← score_bcd#14
Coalesced [105] level#112 ← level#17
Coalesced [106] level_bcd#111 ← level_bcd#17
Coalesced (already) [107] render_screen_show#60 ← render_screen_show#16
Coalesced (already) [108] render_screen_render#67 ← render_screen_render#18
Coalesced (already) [109] current_movedown_slow#96 ← current_movedown_slow#21
Coalesced (already) [110] current_piece#101 ← current_piece#15
Coalesced (already) [111] current_piece_char#106 ← current_piece_char#16
Coalesced (already) [112] current_orientation#104 ← current_orientation#17
Coalesced (already) [113] current_piece_gfx#123 ← current_piece_gfx#18
Coalesced (already) [114] current_xpos#130 ← current_xpos#19
Coalesced (already) [115] current_ypos#104 ← current_ypos#19
Coalesced (already) [116] game_over#93 ← game_over#15
Coalesced (already) [117] next_piece_idx#85 ← next_piece_idx#16
Coalesced (already) [118] render_screen_showing#48 ← render_screen_showing#1
Coalesced (already) [119] keyboard_events_size#92 ← keyboard_events_size#16
Coalesced (already) [120] current_movedown_counter#60 ← current_movedown_counter#14
Coalesced (already) [121] lines_bcd#95 ← lines_bcd#15
Coalesced (already) [122] score_bcd#91 ← score_bcd#14
Coalesced (already) [123] level#111 ← level#17
Coalesced (already) [124] level_bcd#110 ← level_bcd#17
Coalesced [133] render_bcd::screen#7 ← render_bcd::screen#0
Coalesced [134] render_bcd::bcd#9 ← render_bcd::bcd#0
Coalesced [138] render_bcd::screen#8 ← render_bcd::screen#1
Coalesced [139] render_bcd::bcd#10 ← render_bcd::bcd#1
Coalesced [143] render_bcd::screen#9 ← render_bcd::screen#2
Coalesced [144] render_bcd::bcd#11 ← render_bcd::bcd#2
Coalesced [148] render_bcd::screen#10 ← render_bcd::screen#3
Coalesced [149] render_bcd::bcd#12 ← render_bcd::bcd#3
Coalesced [153] render_bcd::screen#11 ← render_bcd::screen#4
Coalesced [154] render_bcd::bcd#13 ← render_bcd::bcd#4
Coalesced [158] render_bcd::screen#12 ← render_bcd::screen#5
Coalesced [159] render_bcd::bcd#14 ← render_bcd::bcd#5
Coalesced [171] render_bcd::screen_pos#6 ← render_bcd::screen_pos#2
Coalesced [177] render_bcd::screen_pos#5 ← render_bcd::screen_pos#0
Coalesced [185] render_next::screen_next_area#13 ← render_next::screen_next_area#11
Coalesced [187] render_next::next_piece_gfx#10 ← render_next::next_piece_gfx#3
Coalesced [188] render_next::screen_next_area#14 ← render_next::screen_next_area#10
Coalesced [201] render_next::next_piece_gfx#8 ← render_next::next_piece_gfx#1
Coalesced [202] render_next::screen_next_area#12 ← render_next::screen_next_area#4
Coalesced [203] render_next::l#8 ← render_next::l#1
Coalesced (already) [204] render_next::next_piece_gfx#11 ← render_next::next_piece_gfx#1
Coalesced [205] render_next::screen_next_area#15 ← render_next::screen_next_area#3
Coalesced [206] render_next::c#6 ← render_next::c#1
Coalesced [211] render_moving::ypos#9 ← render_moving::ypos#0
Coalesced [215] render_moving::i#12 ← render_moving::i#1
Coalesced [221] render_moving::ypos#10 ← render_moving::ypos#1
Coalesced [222] render_moving::i#10 ← render_moving::i#8
Coalesced [223] render_moving::l#9 ← render_moving::l#1
Coalesced [228] render_moving::i#13 ← render_moving::i#3
Coalesced [229] render_moving::xpos#5 ← render_moving::xpos#0
Coalesced [238] render_moving::i#11 ← render_moving::i#2
Coalesced (already) [239] render_moving::i#14 ← render_moving::i#2
Coalesced [240] render_moving::xpos#6 ← render_moving::xpos#1
Coalesced [241] render_moving::c#5 ← render_moving::c#1
Coalesced [247] render_playfield::i#6 ← render_playfield::i#3
Coalesced [248] render_playfield::screen_line#3 ← render_playfield::screen_line#0
Coalesced [258] render_playfield::l#5 ← render_playfield::l#1
Coalesced [259] render_playfield::i#5 ← render_playfield::i#1
Coalesced (already) [260] render_playfield::i#7 ← render_playfield::i#1
Coalesced [261] render_playfield::screen_line#4 ← render_playfield::screen_line#1
Coalesced [262] render_playfield::c#3 ← render_playfield::c#1
Coalesced [268] play_movement::return#6 ← play_movement::render#1
Coalesced [269] current_orientation#96 ← current_orientation#20
Coalesced [270] current_piece_gfx#114 ← current_piece_gfx#20
Coalesced [271] current_xpos#121 ← current_xpos#22
Coalesced [284] play_movement::return#7 ← play_movement::return#0
Coalesced [285] current_orientation#97 ← current_orientation#25
Coalesced [286] current_piece_gfx#115 ← current_piece_gfx#21
Coalesced [287] current_xpos#122 ← current_xpos#26
Coalesced (already) [290] current_orientation#103 ← current_orientation#20
Coalesced (already) [291] current_piece_gfx#122 ← current_piece_gfx#20
Coalesced [296] play_move_rotate::orientation#7 ← play_move_rotate::orientation#2
Not coalescing [301] current_piece#99 ← current_piece#15
Coalesced [302] play_collision::orientation#9 ← play_collision::orientation#3
Coalesced [303] play_collision::yp#13 ← play_collision::ypos#3
Coalesced [304] play_collision::xpos#17 ← play_collision::xpos#3
Coalesced [311] current_orientation#101 ← current_orientation#7
Coalesced [312] current_piece_gfx#120 ← current_piece_gfx#7
Coalesced (already) [313] current_orientation#102 ← current_orientation#20
Coalesced (already) [314] current_piece_gfx#121 ← current_piece_gfx#20
Coalesced [317] play_move_rotate::orientation#6 ← play_move_rotate::orientation#1
Coalesced [320] play_collision::yp#15 ← play_collision::yp#0
Coalesced [324] play_collision::i#11 ← play_collision::i#3
Not coalescing [325] play_collision::xp#8 ← play_collision::xpos#6
Coalesced [347] play_collision::yp#16 ← play_collision::yp#1
Not coalescing [348] play_collision::i#10 ← play_collision::i#1
Coalesced [349] play_collision::l#10 ← play_collision::l#1
Not coalescing [350] play_collision::i#12 ← play_collision::i#1
Coalesced [351] play_collision::xp#9 ← play_collision::xp#1
Coalesced [352] play_collision::c#8 ← play_collision::c#1
Not coalescing [358] current_piece#98 ← current_piece#15
Coalesced [359] play_collision::orientation#8 ← play_collision::orientation#2
Coalesced [360] play_collision::yp#12 ← play_collision::ypos#2
Coalesced [361] play_collision::xpos#16 ← play_collision::xpos#2
Coalesced [367] current_xpos#128 ← current_xpos#6
Coalesced (already) [370] current_xpos#127 ← current_xpos#22
Not coalescing [374] current_piece#97 ← current_piece#15
Coalesced [375] play_collision::orientation#7 ← play_collision::orientation#1
Coalesced [376] play_collision::yp#11 ← play_collision::ypos#1
Coalesced [377] play_collision::xpos#15 ← play_collision::xpos#1
Coalesced [383] current_xpos#129 ← current_xpos#8
Coalesced [394] play_move_down::movedown#14 ← play_move_down::movedown#2
Coalesced [398] play_move_down::movedown#16 ← play_move_down::movedown#3
Not coalescing [404] current_piece#96 ← current_piece#10
Coalesced [405] play_collision::orientation#6 ← play_collision::orientation#0
Coalesced [406] play_collision::yp#10 ← play_collision::ypos#0
Coalesced [407] play_collision::xpos#14 ← play_collision::xpos#0
Coalesced (already) [420] next_piece_idx#84 ← next_piece_idx#10
Coalesced (already) [421] game_over#91 ← game_over#10
Coalesced [423] current_ypos#101 ← current_ypos#6
Coalesced [424] lines_bcd#89 ← lines_bcd#17
Coalesced [425] score_bcd#85 ← score_bcd#16
Coalesced [426] level#105 ← level#19
Coalesced [427] current_movedown_slow#89 ← current_movedown_slow#23
Coalesced [428] level_bcd#102 ← level_bcd#19
Coalesced [430] current_piece_char#103 ← current_piece_char#5
Coalesced [432] current_xpos#124 ← current_xpos#100
Coalesced [433] game_over#87 ← game_over#52
Coalesced [434] next_piece_idx#80 ← next_piece_idx#18
Coalesced (already) [436] current_ypos#102 ← current_ypos#38
Coalesced [437] lines_bcd#90 ← lines_bcd#26
Coalesced [438] score_bcd#86 ← score_bcd#26
Coalesced [439] level#106 ← level#33
Coalesced [440] current_movedown_slow#90 ← current_movedown_slow#37
Coalesced [441] level_bcd#103 ← level_bcd#31
Coalesced [442] current_piece#94 ← current_piece#28
Coalesced (already) [443] current_piece_char#104 ← current_piece_char#29
Coalesced [444] current_orientation#99 ← current_orientation#37
Coalesced [445] current_piece_gfx#118 ← current_piece_gfx#35
Coalesced (already) [446] current_xpos#125 ← current_xpos#43
Coalesced (already) [447] game_over#88 ← game_over#27
Coalesced (already) [448] next_piece_idx#81 ← next_piece_idx#30
Coalesced [452] current_ypos#100 ← current_ypos#3
Coalesced (already) [453] lines_bcd#88 ← lines_bcd#19
Coalesced (already) [454] score_bcd#84 ← score_bcd#18
Coalesced (already) [455] level#104 ← level#10
Coalesced (already) [456] current_movedown_slow#88 ← current_movedown_slow#14
Coalesced (already) [457] level_bcd#101 ← level_bcd#11
Coalesced (already) [458] current_piece#92 ← current_piece#10
Coalesced (already) [459] current_piece_char#102 ← current_piece_char#10
Coalesced (already) [460] current_orientation#98 ← current_orientation#13
Coalesced (already) [461] current_piece_gfx#116 ← current_piece_gfx#13
Coalesced (already) [462] current_xpos#123 ← current_xpos#14
Coalesced (already) [463] game_over#86 ← game_over#10
Coalesced (already) [464] next_piece_idx#79 ← next_piece_idx#10
Coalesced [465] current_movedown_counter#59 ← current_movedown_counter#12
Coalesced (already) [466] current_ypos#103 ← current_ypos#11
Coalesced (already) [467] lines_bcd#91 ← lines_bcd#19
Coalesced (already) [468] score_bcd#87 ← score_bcd#18
Coalesced (already) [469] level#107 ← level#10
Coalesced (already) [470] current_movedown_slow#91 ← current_movedown_slow#14
Coalesced (already) [471] level_bcd#104 ← level_bcd#11
Coalesced (already) [472] current_piece#95 ← current_piece#10
Coalesced (already) [473] current_piece_char#105 ← current_piece_char#10
Coalesced (already) [474] current_orientation#100 ← current_orientation#13
Coalesced (already) [475] current_piece_gfx#119 ← current_piece_gfx#13
Coalesced (already) [476] current_xpos#126 ← current_xpos#14
Coalesced (already) [477] game_over#89 ← game_over#10
Coalesced (already) [478] next_piece_idx#82 ← next_piece_idx#10
Coalesced [479] play_move_down::movedown#15 ← play_move_down::movedown#7
Coalesced [480] play_move_down::movedown#13 ← play_move_down::movedown#10
Coalesced (already) [481] play_move_down::movedown#12 ← play_move_down::movedown#10
Coalesced [491] play_collision::yp#14 ← play_collision::ypos#4
Coalesced [492] play_collision::xpos#18 ← play_collision::xpos#4
Coalesced [501] next_piece_idx#18 ← play_spawn_current::piece_idx#2
Coalesced [506] play_spawn_current::piece_idx#4 ← play_spawn_current::piece_idx#1
Coalesced (already) [507] game_over#92 ← game_over#65
Coalesced [522] lines_bcd#94 ← lines_bcd#29
Coalesced [523] score_bcd#90 ← score_bcd#29
Coalesced [524] level#110 ← level#21
Coalesced [525] current_movedown_slow#94 ← current_movedown_slow#66
Coalesced [526] level_bcd#107 ← level_bcd#62
Coalesced (already) [529] lines_bcd#93 ← lines_bcd#29
Coalesced (already) [530] score_bcd#89 ← score_bcd#29
Coalesced (already) [531] level#109 ← level#10
Coalesced (already) [532] current_movedown_slow#93 ← current_movedown_slow#14
Coalesced (already) [533] level_bcd#106 ← level_bcd#11
Coalesced (already) [534] lines_bcd#92 ← lines_bcd#19
Coalesced (already) [535] score_bcd#88 ← score_bcd#18
Coalesced (already) [536] level#108 ← level#10
Coalesced (already) [537] current_movedown_slow#92 ← current_movedown_slow#14
Coalesced (already) [538] level_bcd#105 ← level_bcd#11
Coalesced [542] current_movedown_slow#95 ← current_movedown_slow#10
Coalesced [548] level_bcd#109 ← level_bcd#8
Coalesced [558] play_increase_level::b#3 ← play_increase_level::b#1
Coalesced [559] level_bcd#108 ← level_bcd#21
Coalesced [563] play_remove_lines::r#10 ← play_remove_lines::r#3
Coalesced [564] play_remove_lines::w#14 ← play_remove_lines::w#12
Coalesced [578] play_remove_lines::w#17 ← play_remove_lines::w#2
Coalesced [579] play_remove_lines::removed#14 ← play_remove_lines::removed#1
Coalesced [583] play_remove_lines::w#19 ← play_remove_lines::w#11
Coalesced [590] play_remove_lines::w#18 ← play_remove_lines::w#3
Coalesced [591] play_remove_lines::r#9 ← play_remove_lines::r#1
Coalesced [592] play_remove_lines::w#13 ← play_remove_lines::w#11
Coalesced [593] play_remove_lines::y#9 ← play_remove_lines::y#1
Coalesced [594] play_remove_lines::removed#12 ← play_remove_lines::removed#8
Coalesced [595] play_remove_lines::w#16 ← play_remove_lines::w#1
Coalesced (already) [596] play_remove_lines::removed#13 ← play_remove_lines::removed#11
Coalesced (already) [597] play_remove_lines::r#11 ← play_remove_lines::r#1
Coalesced (already) [598] play_remove_lines::w#15 ← play_remove_lines::w#1
Coalesced [599] play_remove_lines::x#5 ← play_remove_lines::x#1
Coalesced [600] play_remove_lines::full#5 ← play_remove_lines::full#2
Coalesced (already) [601] play_remove_lines::full#6 ← play_remove_lines::full#4
Coalesced [603] play_lock_current::yp#7 ← play_lock_current::yp#0
Coalesced [608] play_lock_current::i#8 ← play_lock_current::i#3
Coalesced [609] play_lock_current::xp#5 ← play_lock_current::xp#0
Coalesced [621] play_lock_current::yp#8 ← play_lock_current::yp#1
Not coalescing [622] play_lock_current::i#7 ← play_lock_current::i#1
Coalesced [623] play_lock_current::l#7 ← play_lock_current::l#1
Not coalescing [624] play_lock_current::i#9 ← play_lock_current::i#1
Coalesced [625] play_lock_current::xp#6 ← play_lock_current::xp#1
Coalesced [626] play_lock_current::c#5 ← play_lock_current::c#1
Coalesced [636] keyboard_event_get::return#6 ← keyboard_event_get::return#1
Coalesced [637] keyboard_events_size#91 ← keyboard_events_size#4
Coalesced [640] keyboard_events_size#90 ← keyboard_events_size#13
Coalesced [641] keyboard_events_size#80 ← keyboard_events_size#19
Coalesced [649] keyboard_event_scan::keycode#17 ← keyboard_event_scan::keycode#1
Coalesced (already) [650] keyboard_events_size#83 ← keyboard_events_size#30
Coalesced [679] keyboard_event_scan::row#14 ← keyboard_event_scan::row#1
Coalesced [680] keyboard_event_scan::keycode#15 ← keyboard_event_scan::keycode#13
Coalesced (already) [681] keyboard_events_size#81 ← keyboard_events_size#13
Coalesced [682] keyboard_event_scan::keycode#19 ← keyboard_event_scan::keycode#11
Coalesced [683] keyboard_events_size#85 ← keyboard_events_size#30
Coalesced [693] keyboard_events_size#89 ← keyboard_events_size#2
Coalesced [699] keyboard_event_scan::keycode#16 ← keyboard_event_scan::keycode#14
Coalesced [700] keyboard_events_size#82 ← keyboard_events_size#29
Coalesced [701] keyboard_event_scan::col#8 ← keyboard_event_scan::col#1
Coalesced (already) [702] keyboard_event_scan::keycode#18 ← keyboard_event_scan::keycode#14
Coalesced (already) [703] keyboard_events_size#84 ← keyboard_events_size#29
Coalesced [707] keyboard_events_size#87 ← keyboard_events_size#1
Coalesced (already) [708] keyboard_events_size#88 ← keyboard_events_size#10
Coalesced (already) [709] keyboard_events_size#86 ← keyboard_events_size#10
Not coalescing [722] render_screen_showing#1 ← render_screen_show#16
Coalesced [745] play_init::b#3 ← play_init::b#1
Coalesced [746] play_init::j#3 ← play_init::j#1
Coalesced [747] play_init::pli#3 ← play_init::pli#1
Coalesced [748] play_init::idx#3 ← play_init::idx#1
Coalesced [773] sprites_init::s#3 ← sprites_init::s#1
Coalesced [774] sprites_init::xpos#3 ← sprites_init::xpos#1
Coalesced [800] render_init::i#3 ← render_init::i#1
Coalesced [801] render_init::li_1#3 ← render_init::li_1#1
Coalesced [802] render_init::li_2#3 ← render_init::li_2#1
Coalesced [804] render_screen_original::screen#11 ← render_screen_original::screen#9
Coalesced [806] render_screen_original::screen#13 ← render_screen_original::screen#8
Coalesced [807] render_screen_original::cols#10 ← render_screen_original::cols#7
Coalesced [815] render_screen_original::oscr#8 ← render_screen_original::oscr#4
Coalesced [816] render_screen_original::screen#15 ← render_screen_original::screen#2
Coalesced [817] render_screen_original::ocols#8 ← render_screen_original::ocols#4
Coalesced [818] render_screen_original::cols#12 ← render_screen_original::cols#1
Coalesced [819] render_screen_original::x#8 ← render_screen_original::x#1
Coalesced [829] render_screen_original::screen#17 ← render_screen_original::screen#3
Coalesced [830] render_screen_original::cols#14 ← render_screen_original::cols#2
Coalesced [831] render_screen_original::x#10 ← render_screen_original::x#2
Coalesced [842] render_screen_original::screen#12 ← render_screen_original::screen#10
Coalesced [843] render_screen_original::cols#9 ← render_screen_original::cols#3
Coalesced [844] render_screen_original::oscr#7 ← render_screen_original::oscr#1
Coalesced [845] render_screen_original::ocols#7 ← render_screen_original::ocols#1
Coalesced [846] render_screen_original::y#7 ← render_screen_original::y#1
Coalesced [847] render_screen_original::screen#18 ← render_screen_original::screen#10
Coalesced [848] render_screen_original::cols#15 ← render_screen_original::cols#3
Coalesced [849] render_screen_original::x#11 ← render_screen_original::x#3
Coalesced (already) [850] render_screen_original::oscr#9 ← render_screen_original::oscr#1
Coalesced [851] render_screen_original::screen#16 ← render_screen_original::screen#3
Coalesced (already) [852] render_screen_original::ocols#9 ← render_screen_original::ocols#1
Coalesced [853] render_screen_original::cols#13 ← render_screen_original::cols#2
Coalesced [854] render_screen_original::x#9 ← render_screen_original::x#2
Coalesced (already) [855] render_screen_original::screen#14 ← render_screen_original::screen#2
Coalesced (already) [856] render_screen_original::cols#11 ← render_screen_original::cols#1
Coalesced [857] render_screen_original::x#7 ← render_screen_original::x#1
Coalesced [884] irq_raster_next#27 ← irq_raster_next#3
Coalesced [885] irq_cnt#23 ← irq_cnt#1
Coalesced [886] irq_sprite_ypos#27 ← irq_sprite_ypos#3
Coalesced [887] irq_sprite_ptr#21 ← irq_sprite_ptr#3
Coalesced [896] irq_raster_next#26 ← irq_raster_next#2
Coalesced [897] irq_cnt#22 ← irq_cnt#2
Coalesced [898] irq_sprite_ypos#26 ← irq_sprite_ypos#2
Coalesced [899] irq_sprite_ptr#20 ← irq_sprite_ptr#2
Coalesced [905] irq_raster_next#25 ← irq_raster_next#1
Coalesced (already) [906] irq_cnt#21 ← irq_cnt#1
Coalesced [907] irq_sprite_ypos#25 ← irq_sprite_ypos#1
Coalesced [908] irq_sprite_ptr#19 ← irq_sprite_ptr#1
Coalesced down to 99 phi equivalence classes
Culled Empty Block (label) @4
Culled Empty Block (label) @8
Culled Empty Block (label) @11
Culled Empty Block (label) toSpritePtr1_@return
Culled Empty Block (label) @25
Culled Empty Block (label) @30
Culled Empty Block (label) @39
Culled Empty Block (label) main::@12
Culled Empty Block (label) main::@43
Culled Empty Block (label) main::@44
Culled Empty Block (label) render_score::@3
Culled Empty Block (label) render_score::@10
Culled Empty Block (label) render_bcd::@3
Culled Empty Block (label) render_next::@3
Culled Empty Block (label) render_next::@13
Culled Empty Block (label) render_next::@14
Culled Empty Block (label) render_moving::@11
Culled Empty Block (label) render_moving::@12
Culled Empty Block (label) render_moving::@13
Culled Empty Block (label) render_playfield::@5
Culled Empty Block (label) render_playfield::@6
Culled Empty Block (label) play_movement::@2
Culled Empty Block (label) play_move_rotate::@7
Culled Empty Block (label) play_move_rotate::@5
Culled Empty Block (label) play_collision::@15
Culled Empty Block (label) play_collision::@8
Culled Empty Block (label) play_collision::@10
Culled Empty Block (label) play_collision::@12
Culled Empty Block (label) play_collision::@18
Culled Empty Block (label) play_move_leftright::@3
Culled Empty Block (label) play_move_down::@4
Culled Empty Block (label) play_move_down::@25
Culled Empty Block (label) play_move_down::@24
Culled Empty Block (label) play_move_down::@23
Culled Empty Block (label) play_spawn_current::@2
Culled Empty Block (label) play_spawn_current::@5
Culled Empty Block (label) play_spawn_current::sid_rnd1_@return
Culled Empty Block (label) play_update_score::@5
Culled Empty Block (label) play_update_score::@7
Culled Empty Block (label) play_update_score::@6
Culled Empty Block (label) play_increase_level::@10
Culled Empty Block (label) play_increase_level::@9
Culled Empty Block (label) play_increase_level::@1
Culled Empty Block (label) play_remove_lines::@4
Culled Empty Block (label) play_remove_lines::@20
Culled Empty Block (label) play_remove_lines::@11
Culled Empty Block (label) play_remove_lines::@16
Culled Empty Block (label) play_remove_lines::@19
Culled Empty Block (label) play_remove_lines::@17
Culled Empty Block (label) keyboard_event_get::@1
Culled Empty Block (label) keyboard_event_scan::@30
Culled Empty Block (label) keyboard_event_scan::@9
Culled Empty Block (label) keyboard_event_scan::@31
Culled Empty Block (label) keyboard_event_scan::@33
Culled Empty Block (label) keyboard_event_scan::@32
Culled Empty Block (label) render_show::@3
Culled Empty Block (label) render_show::toD0182_@return
Culled Empty Block (label) render_show::@6
Culled Empty Block (label) render_show::@1
Culled Empty Block (label) render_show::toD0181_@return
Culled Empty Block (label) render_show::@5
Culled Empty Block (label) play_init::@6
Culled Empty Block (label) play_init::@5
Culled Empty Block (label) sprites_init::@3
Culled Empty Block (label) render_init::vicSelectGfxBank1_toDd001_@return
Culled Empty Block (label) render_init::@5
Culled Empty Block (label) render_init::@2
Culled Empty Block (label) render_init::@6
Culled Empty Block (label) render_screen_original::@11
Culled Empty Block (label) render_screen_original::@13
Culled Empty Block (label) render_screen_original::@9
Culled Empty Block (label) render_screen_original::@14
Culled Empty Block (label) render_screen_original::@12
Culled Empty Block (label) render_screen_original::@10
Culled Empty Block (label) sprites_irq::toSpritePtr2_@return
Renumbering block @13 to @1
Renumbering block @22 to @2
Renumbering block @23 to @3
Renumbering block @37 to @4
Renumbering block @38 to @5
Renumbering block keyboard_event_scan::@5 to keyboard_event_scan::@4
Renumbering block keyboard_event_scan::@6 to keyboard_event_scan::@5
Renumbering block keyboard_event_scan::@7 to keyboard_event_scan::@6
Renumbering block keyboard_event_scan::@8 to keyboard_event_scan::@7
Renumbering block keyboard_event_scan::@10 to keyboard_event_scan::@8
Renumbering block keyboard_event_scan::@11 to keyboard_event_scan::@9
Renumbering block keyboard_event_scan::@12 to keyboard_event_scan::@10
Renumbering block keyboard_event_scan::@14 to keyboard_event_scan::@11
Renumbering block keyboard_event_scan::@16 to keyboard_event_scan::@12
Renumbering block keyboard_event_scan::@17 to keyboard_event_scan::@13
Renumbering block keyboard_event_scan::@18 to keyboard_event_scan::@14
Renumbering block keyboard_event_scan::@20 to keyboard_event_scan::@15
Renumbering block keyboard_event_scan::@21 to keyboard_event_scan::@16
Renumbering block keyboard_event_scan::@23 to keyboard_event_scan::@17
Renumbering block keyboard_event_scan::@24 to keyboard_event_scan::@18
Renumbering block keyboard_event_scan::@25 to keyboard_event_scan::@19
Renumbering block keyboard_event_scan::@26 to keyboard_event_scan::@20
Renumbering block keyboard_event_scan::@27 to keyboard_event_scan::@21
Renumbering block keyboard_event_scan::@28 to keyboard_event_scan::@22
Renumbering block keyboard_event_scan::@29 to keyboard_event_scan::@23
Renumbering block keyboard_event_get::@3 to keyboard_event_get::@1
Renumbering block render_init::@3 to render_init::@2
Renumbering block render_init::@4 to render_init::@3
Renumbering block render_show::@2 to render_show::@1
Renumbering block render_score::@5 to render_score::@3
Renumbering block render_score::@6 to render_score::@4
Renumbering block render_score::@7 to render_score::@5
Renumbering block render_score::@8 to render_score::@6
Renumbering block render_score::@9 to render_score::@7
Renumbering block render_screen_original::@4 to render_screen_original::@3
Renumbering block render_screen_original::@6 to render_screen_original::@4
Renumbering block render_screen_original::@7 to render_screen_original::@5
Renumbering block render_moving::@8 to render_moving::@7
Renumbering block render_next::@5 to render_next::@3
Renumbering block render_next::@6 to render_next::@4
Renumbering block render_next::@7 to render_next::@5
Renumbering block render_next::@8 to render_next::@6
Renumbering block render_next::@9 to render_next::@7
Renumbering block render_next::@11 to render_next::@8
Renumbering block sprites_irq::@6 to sprites_irq::@5
Renumbering block sprites_irq::@7 to sprites_irq::@6
Renumbering block sprites_irq::@8 to sprites_irq::@7
Renumbering block sprites_irq::@11 to sprites_irq::@8
Renumbering block sprites_irq::@12 to sprites_irq::@9
Renumbering block sprites_irq::@13 to sprites_irq::@10
Renumbering block sprites_irq::@15 to sprites_irq::@11
Renumbering block play_movement::@5 to play_movement::@2
Renumbering block play_movement::@6 to play_movement::@3
Renumbering block play_movement::@7 to play_movement::@4
Renumbering block play_move_down::@5 to play_move_down::@4
Renumbering block play_move_down::@6 to play_move_down::@5
Renumbering block play_move_down::@7 to play_move_down::@6
Renumbering block play_move_down::@8 to play_move_down::@7
Renumbering block play_move_down::@9 to play_move_down::@8
Renumbering block play_move_down::@10 to play_move_down::@9
Renumbering block play_move_down::@14 to play_move_down::@10
Renumbering block play_move_down::@15 to play_move_down::@11
Renumbering block play_move_down::@17 to play_move_down::@12
Renumbering block play_move_down::@18 to play_move_down::@13
Renumbering block play_move_down::@19 to play_move_down::@14
Renumbering block play_move_down::@20 to play_move_down::@15
Renumbering block play_move_down::@21 to play_move_down::@16
Renumbering block play_move_down::@22 to play_move_down::@17
Renumbering block play_move_leftright::@4 to play_move_leftright::@2
Renumbering block play_move_leftright::@5 to play_move_leftright::@3
Renumbering block play_move_leftright::@6 to play_move_leftright::@4
Renumbering block play_move_leftright::@9 to play_move_leftright::@5
Renumbering block play_move_leftright::@14 to play_move_leftright::@6
Renumbering block play_move_leftright::@15 to play_move_leftright::@7
Renumbering block play_move_rotate::@4 to play_move_rotate::@3
Renumbering block play_move_rotate::@6 to play_move_rotate::@4
Renumbering block play_move_rotate::@11 to play_move_rotate::@5
Renumbering block play_move_rotate::@14 to play_move_rotate::@6
Renumbering block play_collision::@14 to play_collision::@7
Renumbering block play_collision::@17 to play_collision::@8
Renumbering block play_collision::@20 to play_collision::@9
Renumbering block play_collision::@21 to play_collision::@10
Renumbering block play_lock_current::@7 to play_lock_current::@6
Renumbering block play_lock_current::@8 to play_lock_current::@7
Renumbering block play_spawn_current::@3 to play_spawn_current::@2
Renumbering block play_spawn_current::@9 to play_spawn_current::@3
Renumbering block play_spawn_current::@10 to play_spawn_current::@4
Renumbering block play_spawn_current::@11 to play_spawn_current::@5
Renumbering block play_remove_lines::@5 to play_remove_lines::@4
Renumbering block play_remove_lines::@6 to play_remove_lines::@5
Renumbering block play_remove_lines::@7 to play_remove_lines::@6
Renumbering block play_remove_lines::@9 to play_remove_lines::@7
Renumbering block play_remove_lines::@10 to play_remove_lines::@8
Renumbering block play_remove_lines::@18 to play_remove_lines::@9
Renumbering block play_update_score::@2 to play_update_score::@1
Renumbering block play_update_score::@3 to play_update_score::@2
Renumbering block play_increase_level::@2 to play_increase_level::@1
Renumbering block play_increase_level::@3 to play_increase_level::@2
Renumbering block play_increase_level::@4 to play_increase_level::@3
Renumbering block play_increase_level::@6 to play_increase_level::@4
Renumbering block play_increase_level::@7 to play_increase_level::@5
Renumbering block play_increase_level::@8 to play_increase_level::@6
Renumbering block main::@4 to main::@2
Renumbering block main::@6 to main::@3
Renumbering block main::@11 to main::@4
Renumbering block main::@13 to main::@5
Renumbering block main::@19 to main::@6
Renumbering block main::@23 to main::@7
Renumbering block main::@25 to main::@8
Renumbering block main::@26 to main::@9
Renumbering block main::@27 to main::@10
Renumbering block main::@28 to main::@11
Renumbering block main::@29 to main::@12
Renumbering block main::@30 to main::@13
Renumbering block main::@31 to main::@14
Renumbering block main::@32 to main::@15
Renumbering block main::@33 to main::@16
Renumbering block main::@34 to main::@17
Renumbering block main::@35 to main::@18
Renumbering block main::@36 to main::@19
Renumbering block main::@37 to main::@20
Renumbering block main::@38 to main::@21
Renumbering block main::@39 to main::@22
Renumbering block main::@40 to main::@23
Renumbering block main::@41 to main::@24
Renumbering block main::@42 to main::@25
Adding NOP phi() at start of @begin
Adding NOP phi() at start of toSpritePtr1
Adding NOP phi() at start of @4
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@14
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@18
Adding NOP phi() at start of main::@19
Adding NOP phi() at start of main::@24
Adding NOP phi() at start of main::@25
Adding NOP phi() at start of render_score::@1
Adding NOP phi() at start of render_next::@1
Adding NOP phi() at start of play_move_down::@4
Adding NOP phi() at start of play_move_down::@9
Adding NOP phi() at start of play_move_down::@14
Adding NOP phi() at start of play_move_down::@16
Adding NOP phi() at start of play_spawn_current::@5
Adding NOP phi() at start of play_update_score::@2
Adding NOP phi() at start of play_remove_lines
Adding NOP phi() at start of play_remove_lines::@9
Adding NOP phi() at start of keyboard_event_scan
Adding NOP phi() at start of keyboard_event_scan::@17
Adding NOP phi() at start of keyboard_event_scan::@18
Adding NOP phi() at start of keyboard_event_scan::@1
Adding NOP phi() at start of keyboard_event_scan::@4
Adding NOP phi() at start of keyboard_event_scan::@2
Adding NOP phi() at start of keyboard_event_scan::@5
Adding NOP phi() at start of keyboard_event_scan::@3
Adding NOP phi() at start of keyboard_event_scan::@6
Adding NOP phi() at start of render_show::toD0182
Adding NOP phi() at start of render_show::toD0181
Adding NOP phi() at start of play_init
Adding NOP phi() at start of render_init
Adding NOP phi() at start of render_init::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of render_init::@3
Adding NOP phi() at start of sprites_irq::toSpritePtr2

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) render_screen_showing#0 ← (byte) 0
  [2] (dword) score_bcd#0 ← (byte) 0
  kickasm(location (const byte*) PLAYFIELD_CHARSET#0) {{ .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "playfield-screen.imap"
 }}
  kickasm(location (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0) {{ // Load chars for the screen
  .var screen = LoadBinary("playfield-screen.iscr")
   // Load extended colors for the screen
  .var extended = LoadBinary("playfield-extended.col")
  // screen.get(i)+1 because the charset is loaded into PLAYFIELD_CHARSET+8
  // extended.get(i)-1 because the extended colors are 1-based (1/2/3/4)
  // <<6 to move extended colors to the upper 2 bits
  .fill screen.getSize(), ( (screen.get(i)+1) | (extended.get(i)-1)<<6 )
 }}
  kickasm(location (const byte*) PLAYFIELD_COLORS_ORIGINAL#0) {{ .import binary "playfield-screen.col"
 }}
  to:@2
@2: scope:[]  from @1
  kickasm(location (const byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000))
	// Put the sprites into memory 
	.for(var sy=0;sy<10;sy++) {
	    .var sprite_gfx_y = sy*20
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21)
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y)
	            }
	        }
	    	.byte 0
	  	}
	}
 }}
  to:@3
@3: scope:[]  from @2
  [7] (byte) irq_raster_next#0 ← (const byte) IRQ_RASTER_FIRST#0
  [8] (byte) irq_sprite_ypos#0 ← (const byte) SPRITES_FIRST_YPOS#0+(byte) $15
  to:toSpritePtr1
toSpritePtr1: scope:[]  from @3
  [9] phi()
  to:@5
@5: scope:[]  from toSpritePtr1
  [10] (byte) irq_sprite_ptr#0 ← (const byte) toSpritePtr1_return#0+(byte) 3
  [11] (byte) irq_cnt#0 ← (byte) 0
  to:@4
@4: scope:[]  from @5
  [12] phi()
  [13] call main 
  to:@end
@end: scope:[]  from @4
  [14] phi()
main: scope:[main]  from @4
  [15] phi()
  [16] call sid_rnd_init 
  to:main::@8
main::@8: scope:[main]  from main
  asm { sei  }
  [18] call render_init 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [19] phi()
  [20] call sprites_init 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [21] phi()
  [22] call sprites_irq_init 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [23] phi()
  [24] call play_init 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [25] phi()
  [26] call play_spawn_current 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [27] phi()
  [28] call play_spawn_current 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [29] phi()
  [30] call render_playfield 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [31] (byte~) current_ypos#98 ← (byte) current_ypos#6
  [32] (byte~) current_xpos#119 ← (byte) current_xpos#100
  [33] (byte*~) current_piece_gfx#112 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7)
  [34] (byte~) current_piece_char#100 ← (byte) current_piece_char#5
  [35] call render_moving 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [36] (byte~) next_piece_idx#77 ← (byte) play_spawn_current::piece_idx#2
  [37] call render_next 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [38] (byte*~) current_piece#102 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7)
  [39] (byte*~) current_piece_gfx#124 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7)
  to:main::@1
main::@1: scope:[main]  from main::@17 main::@25 main::@6
  [40] (byte) level_bcd#11 ← phi( main::@6/(byte) level_bcd#17 main::@17/(byte) 0 main::@25/(byte) level_bcd#17 )
  [40] (byte) level#10 ← phi( main::@6/(byte) level#17 main::@17/(byte) 0 main::@25/(byte) level#17 )
  [40] (dword) score_bcd#18 ← phi( main::@6/(dword) score_bcd#14 main::@17/(dword) score_bcd#0 main::@25/(dword) score_bcd#14 )
  [40] (word) lines_bcd#19 ← phi( main::@6/(word) lines_bcd#15 main::@17/(byte) 0 main::@25/(word) lines_bcd#15 )
  [40] (byte) current_movedown_counter#16 ← phi( main::@6/(byte) current_movedown_counter#14 main::@17/(byte) 0 main::@25/(byte) current_movedown_counter#14 )
  [40] (byte) keyboard_events_size#19 ← phi( main::@6/(byte) keyboard_events_size#16 main::@17/(byte) 0 main::@25/(byte) keyboard_events_size#16 )
  [40] (byte) render_screen_showing#13 ← phi( main::@6/(byte) render_screen_showing#1 main::@17/(byte) render_screen_showing#0 main::@25/(byte) render_screen_showing#1 )
  [40] (byte) next_piece_idx#10 ← phi( main::@6/(byte) next_piece_idx#16 main::@17/(byte) play_spawn_current::piece_idx#2 main::@25/(byte) next_piece_idx#16 )
  [40] (byte) game_over#10 ← phi( main::@6/(byte) game_over#15 main::@17/(byte) game_over#52 main::@25/(byte) game_over#15 )
  [40] (byte) current_ypos#11 ← phi( main::@6/(byte) current_ypos#19 main::@17/(byte) current_ypos#6 main::@25/(byte) current_ypos#19 )
  [40] (byte) current_xpos#14 ← phi( main::@6/(byte) current_xpos#19 main::@17/(byte) current_xpos#100 main::@25/(byte) current_xpos#19 )
  [40] (byte*) current_piece_gfx#13 ← phi( main::@6/(byte*) current_piece_gfx#18 main::@17/(byte*~) current_piece_gfx#124 main::@25/(byte*) current_piece_gfx#18 )
  [40] (byte) current_orientation#13 ← phi( main::@6/(byte) current_orientation#17 main::@17/(byte) 0 main::@25/(byte) current_orientation#17 )
  [40] (byte) current_piece_char#10 ← phi( main::@6/(byte) current_piece_char#16 main::@17/(byte) current_piece_char#5 main::@25/(byte) current_piece_char#16 )
  [40] (byte*) current_piece#10 ← phi( main::@6/(byte*) current_piece#15 main::@17/(byte*~) current_piece#102 main::@25/(byte*) current_piece#15 )
  [40] (byte) current_movedown_slow#14 ← phi( main::@6/(byte) current_movedown_slow#21 main::@17/(byte) current_movedown_slow#1 main::@25/(byte) current_movedown_slow#21 )
  [40] (byte) render_screen_render#18 ← phi( main::@6/(byte) render_screen_render#18 main::@17/(byte) $20 main::@25/(byte) render_screen_render#11 )
  [40] (byte) render_screen_show#16 ← phi( main::@6/(byte) render_screen_show#16 main::@17/(byte) 0 main::@25/(byte) render_screen_show#13 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [41] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [42] phi()
  [43] call render_show 
  to:main::@18
main::@18: scope:[main]  from main::@3
  [44] phi()
  [45] call keyboard_event_scan 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [46] phi()
  [47] call keyboard_event_get 
  [48] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
  to:main::@20
main::@20: scope:[main]  from main::@19
  [49] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3
  [50] if((byte) game_over#10==(byte) 0) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@20 main::@5
  [51] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0)
  to:main::@5
main::@4: scope:[main]  from main::@20
  [52] (byte) play_movement::key_event#0 ← (byte) main::key_event#0
  [53] call play_movement 
  [54] (byte) play_movement::return#3 ← (byte) play_movement::return#2
  to:main::@21
main::@21: scope:[main]  from main::@4
  [55] (byte) main::render#1 ← (byte) play_movement::return#3
  to:main::@6
main::@6: scope:[main]  from main::@21
  [56] if((byte) main::render#1==(byte) 0) goto main::@1
  to:main::@7
main::@7: scope:[main]  from main::@6
  [57] (byte~) render_screen_render#64 ← (byte) render_screen_render#18
  [58] call render_playfield 
  to:main::@22
main::@22: scope:[main]  from main::@7
  [59] (byte~) current_ypos#99 ← (byte) current_ypos#19
  [60] (byte~) render_screen_render#65 ← (byte) render_screen_render#18
  [61] (byte~) current_xpos#120 ← (byte) current_xpos#19
  [62] (byte*~) current_piece_gfx#113 ← (byte*) current_piece_gfx#18
  [63] (byte~) current_piece_char#101 ← (byte) current_piece_char#16
  [64] call render_moving 
  to:main::@23
main::@23: scope:[main]  from main::@22
  [65] (byte~) render_screen_render#66 ← (byte) render_screen_render#18
  [66] (byte~) next_piece_idx#78 ← (byte) next_piece_idx#16
  [67] call render_next 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [68] phi()
  [69] call render_score 
  to:main::@25
main::@25: scope:[main]  from main::@24
  [70] phi()
  [71] call render_screen_swap 
  to:main::@1
render_screen_swap: scope:[render_screen_swap]  from main::@25
  [72] (byte) render_screen_render#11 ← (byte) render_screen_render#18 ^ (byte) $20
  [73] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte) $20
  to:render_screen_swap::@return
render_screen_swap::@return: scope:[render_screen_swap]  from render_screen_swap
  [74] return 
  to:@return
render_score: scope:[render_score]  from main::@24
  [75] if((byte) render_screen_render#18==(byte) 0) goto render_score::@1
  to:render_score::@2
render_score::@1: scope:[render_score]  from render_score
  [76] phi()
  to:render_score::@2
render_score::@2: scope:[render_score]  from render_score render_score::@1
  [77] (byte*) render_score::screen#3 ← phi( render_score::@1/(const byte*) PLAYFIELD_SCREEN_1#0 render_score/(const byte*) PLAYFIELD_SCREEN_2#0 )
  [78] (byte*) render_bcd::screen#0 ← (byte*) render_score::screen#3
  [79] (byte) render_bcd::bcd#0 ← *((const byte*) render_score::score_bytes#0+(byte) 2)
  [80] call render_bcd 
  to:render_score::@3
render_score::@3: scope:[render_score]  from render_score::@2
  [81] (byte*) render_bcd::screen#1 ← (byte*) render_score::screen#3
  [82] (byte) render_bcd::bcd#1 ← *((const byte*) render_score::score_bytes#0+(byte) 1)
  [83] call render_bcd 
  to:render_score::@4
render_score::@4: scope:[render_score]  from render_score::@3
  [84] (byte*) render_bcd::screen#2 ← (byte*) render_score::screen#3
  [85] (byte) render_bcd::bcd#2 ← *((const byte*) render_score::score_bytes#0)
  [86] call render_bcd 
  to:render_score::@5
render_score::@5: scope:[render_score]  from render_score::@4
  [87] (byte) render_bcd::bcd#3 ← > (word) lines_bcd#15
  [88] (byte*) render_bcd::screen#3 ← (byte*) render_score::screen#3
  [89] call render_bcd 
  to:render_score::@6
render_score::@6: scope:[render_score]  from render_score::@5
  [90] (byte) render_bcd::bcd#4 ← < (word) lines_bcd#15
  [91] (byte*) render_bcd::screen#4 ← (byte*) render_score::screen#3
  [92] call render_bcd 
  to:render_score::@7
render_score::@7: scope:[render_score]  from render_score::@6
  [93] (byte*) render_bcd::screen#5 ← (byte*) render_score::screen#3
  [94] (byte) render_bcd::bcd#5 ← (byte) level_bcd#17
  [95] call render_bcd 
  to:render_score::@return
render_score::@return: scope:[render_score]  from render_score::@7
  [96] return 
  to:@return
render_bcd: scope:[render_bcd]  from render_score::@2 render_score::@3 render_score::@4 render_score::@5 render_score::@6 render_score::@7
  [97] (byte) render_bcd::bcd#6 ← phi( render_score::@2/(byte) render_bcd::bcd#0 render_score::@3/(byte) render_bcd::bcd#1 render_score::@4/(byte) render_bcd::bcd#2 render_score::@5/(byte) render_bcd::bcd#3 render_score::@6/(byte) render_bcd::bcd#4 render_score::@7/(byte) render_bcd::bcd#5 )
  [97] (byte) render_bcd::only_low#6 ← phi( render_score::@2/(byte) 0 render_score::@3/(byte) 0 render_score::@4/(byte) 0 render_score::@5/(byte) 1 render_score::@6/(byte) 0 render_score::@7/(byte) 0 )
  [97] (word) render_bcd::offset#6 ← phi( render_score::@2/(const word) render_score::score_offset#0 render_score::@3/(const word) render_score::score_offset#0+(byte) 2 render_score::@4/(const word) render_score::score_offset#0+(byte) 4 render_score::@5/(const word) render_score::lines_offset#0 render_score::@6/(const word) render_score::lines_offset#0+(byte) 1 render_score::@7/(const word) render_score::level_offset#0 )
  [97] (byte*) render_bcd::screen#6 ← phi( render_score::@2/(byte*) render_bcd::screen#0 render_score::@3/(byte*) render_bcd::screen#1 render_score::@4/(byte*) render_bcd::screen#2 render_score::@5/(byte*) render_bcd::screen#3 render_score::@6/(byte*) render_bcd::screen#4 render_score::@7/(byte*) render_bcd::screen#5 )
  [98] (byte*) render_bcd::screen_pos#0 ← (byte*) render_bcd::screen#6 + (word) render_bcd::offset#6
  [99] if((byte) render_bcd::only_low#6!=(byte) 0) goto render_bcd::@1
  to:render_bcd::@2
render_bcd::@2: scope:[render_bcd]  from render_bcd
  [100] (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#6 >> (byte) 4
  [101] (byte~) render_bcd::$6 ← (const byte) render_bcd::ZERO_CHAR#0 + (byte~) render_bcd::$5
  [102] *((byte*) render_bcd::screen_pos#0) ← (byte~) render_bcd::$6
  [103] (byte*) render_bcd::screen_pos#2 ← ++ (byte*) render_bcd::screen_pos#0
  to:render_bcd::@1
render_bcd::@1: scope:[render_bcd]  from render_bcd render_bcd::@2
  [104] (byte*) render_bcd::screen_pos#3 ← phi( render_bcd/(byte*) render_bcd::screen_pos#0 render_bcd::@2/(byte*) render_bcd::screen_pos#2 )
  [105] (byte~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (byte) $f
  [106] (byte~) render_bcd::$4 ← (const byte) render_bcd::ZERO_CHAR#0 + (byte~) render_bcd::$3
  [107] *((byte*) render_bcd::screen_pos#3) ← (byte~) render_bcd::$4
  to:render_bcd::@return
render_bcd::@return: scope:[render_bcd]  from render_bcd::@1
  [108] return 
  to:@return
render_next: scope:[render_next]  from main::@16 main::@23
  [109] (byte) next_piece_idx#12 ← phi( main::@16/(byte~) next_piece_idx#77 main::@23/(byte~) next_piece_idx#78 )
  [109] (byte) render_screen_render#15 ← phi( main::@16/(byte) $20 main::@23/(byte~) render_screen_render#66 )
  [110] if((byte) render_screen_render#15==(byte) 0) goto render_next::@1
  to:render_next::@2
render_next::@1: scope:[render_next]  from render_next
  [111] phi()
  to:render_next::@2
render_next::@2: scope:[render_next]  from render_next render_next::@1
  [112] (byte*) render_next::screen_next_area#11 ← phi( render_next::@1/(const byte*) PLAYFIELD_SCREEN_1#0+(const word) render_next::next_area_offset#0 render_next/(const byte*) PLAYFIELD_SCREEN_2#0+(const word) render_next::next_area_offset#0 )
  [113] (byte~) render_next::$6 ← (byte) next_piece_idx#12 << (byte) 1
  [114] (byte) render_next::next_piece_char#0 ← *((const byte[]) PIECES_NEXT_CHARS#0 + (byte) next_piece_idx#12)
  [115] (byte*~) render_next::next_piece_gfx#9 ← (byte*)*((const word[]) PIECES#0 + (byte~) render_next::$6)
  to:render_next::@3
render_next::@3: scope:[render_next]  from render_next::@2 render_next::@8
  [116] (byte) render_next::l#7 ← phi( render_next::@8/(byte) render_next::l#1 render_next::@2/(byte) 0 )
  [116] (byte*) render_next::screen_next_area#10 ← phi( render_next::@8/(byte*) render_next::screen_next_area#4 render_next::@2/(byte*) render_next::screen_next_area#11 )
  [116] (byte*) render_next::next_piece_gfx#3 ← phi( render_next::@8/(byte*) render_next::next_piece_gfx#1 render_next::@2/(byte*~) render_next::next_piece_gfx#9 )
  to:render_next::@4
render_next::@4: scope:[render_next]  from render_next::@3 render_next::@6
  [117] (byte) render_next::c#2 ← phi( render_next::@3/(byte) 0 render_next::@6/(byte) render_next::c#1 )
  [117] (byte*) render_next::screen_next_area#5 ← phi( render_next::@3/(byte*) render_next::screen_next_area#10 render_next::@6/(byte*) render_next::screen_next_area#3 )
  [117] (byte*) render_next::next_piece_gfx#2 ← phi( render_next::@3/(byte*) render_next::next_piece_gfx#3 render_next::@6/(byte*) render_next::next_piece_gfx#1 )
  [118] (byte) render_next::cell#0 ← *((byte*) render_next::next_piece_gfx#2)
  [119] (byte*) render_next::next_piece_gfx#1 ← ++ (byte*) render_next::next_piece_gfx#2
  [120] if((byte) render_next::cell#0!=(byte) 0) goto render_next::@5
  to:render_next::@7
render_next::@7: scope:[render_next]  from render_next::@4
  [121] *((byte*) render_next::screen_next_area#5) ← (byte) 0
  to:render_next::@6
render_next::@6: scope:[render_next]  from render_next::@5 render_next::@7
  [122] (byte*) render_next::screen_next_area#3 ← ++ (byte*) render_next::screen_next_area#5
  [123] (byte) render_next::c#1 ← ++ (byte) render_next::c#2
  [124] if((byte) render_next::c#1!=(byte) 4) goto render_next::@4
  to:render_next::@8
render_next::@8: scope:[render_next]  from render_next::@6
  [125] (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#3 + (byte) $24
  [126] (byte) render_next::l#1 ← ++ (byte) render_next::l#7
  [127] if((byte) render_next::l#1!=(byte) 4) goto render_next::@3
  to:render_next::@return
render_next::@return: scope:[render_next]  from render_next::@8
  [128] return 
  to:@return
render_next::@5: scope:[render_next]  from render_next::@4
  [129] *((byte*) render_next::screen_next_area#5) ← (byte) render_next::next_piece_char#0
  to:render_next::@6
render_moving: scope:[render_moving]  from main::@15 main::@22
  [130] (byte) current_piece_char#68 ← phi( main::@15/(byte~) current_piece_char#100 main::@22/(byte~) current_piece_char#101 )
  [130] (byte*) current_piece_gfx#64 ← phi( main::@15/(byte*~) current_piece_gfx#112 main::@22/(byte*~) current_piece_gfx#113 )
  [130] (byte) current_xpos#59 ← phi( main::@15/(byte~) current_xpos#119 main::@22/(byte~) current_xpos#120 )
  [130] (byte) render_screen_render#33 ← phi( main::@15/(byte) $20 main::@22/(byte~) render_screen_render#65 )
  [130] (byte) current_ypos#13 ← phi( main::@15/(byte~) current_ypos#98 main::@22/(byte~) current_ypos#99 )
  [131] (byte) render_moving::ypos#0 ← (byte) current_ypos#13
  to:render_moving::@1
render_moving::@1: scope:[render_moving]  from render_moving render_moving::@3
  [132] (byte) render_moving::l#4 ← phi( render_moving/(byte) 0 render_moving::@3/(byte) render_moving::l#1 )
  [132] (byte) render_moving::i#3 ← phi( render_moving/(byte) 0 render_moving::@3/(byte) render_moving::i#8 )
  [132] (byte) render_moving::ypos#2 ← phi( render_moving/(byte) render_moving::ypos#0 render_moving::@3/(byte) render_moving::ypos#1 )
  [133] if((byte) render_moving::ypos#2>=(byte) 1+(byte) 1) goto render_moving::@2
  to:render_moving::@7
render_moving::@7: scope:[render_moving]  from render_moving::@1
  [134] (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (byte) 4
  to:render_moving::@3
render_moving::@3: scope:[render_moving]  from render_moving::@5 render_moving::@7
  [135] (byte) render_moving::i#8 ← phi( render_moving::@5/(byte) render_moving::i#2 render_moving::@7/(byte) render_moving::i#1 )
  [136] (byte) render_moving::ypos#1 ← ++ (byte) render_moving::ypos#2
  [137] (byte) render_moving::l#1 ← ++ (byte) render_moving::l#4
  [138] if((byte) render_moving::l#1!=(byte) 4) goto render_moving::@1
  to:render_moving::@return
render_moving::@return: scope:[render_moving]  from render_moving::@3
  [139] return 
  to:@return
render_moving::@2: scope:[render_moving]  from render_moving::@1
  [140] (byte~) render_moving::$1 ← (byte) render_screen_render#33 + (byte) render_moving::ypos#2
  [141] (byte~) render_moving::$6 ← (byte~) render_moving::$1 << (byte) 1
  [142] (byte*) render_moving::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_moving::$6)
  [143] (byte) render_moving::xpos#0 ← (byte) current_xpos#59
  to:render_moving::@4
render_moving::@4: scope:[render_moving]  from render_moving::@2 render_moving::@5
  [144] (byte) render_moving::c#2 ← phi( render_moving::@2/(byte) 0 render_moving::@5/(byte) render_moving::c#1 )
  [144] (byte) render_moving::xpos#2 ← phi( render_moving::@2/(byte) render_moving::xpos#0 render_moving::@5/(byte) render_moving::xpos#1 )
  [144] (byte) render_moving::i#4 ← phi( render_moving::@2/(byte) render_moving::i#3 render_moving::@5/(byte) render_moving::i#2 )
  [145] (byte) render_moving::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_moving::i#4)
  [146] (byte) render_moving::i#2 ← ++ (byte) render_moving::i#4
  [147] if((byte) render_moving::current_cell#0==(byte) 0) goto render_moving::@5
  to:render_moving::@6
render_moving::@6: scope:[render_moving]  from render_moving::@4
  [148] *((byte*) render_moving::screen_line#0 + (byte) render_moving::xpos#2) ← (byte) current_piece_char#68
  to:render_moving::@5
render_moving::@5: scope:[render_moving]  from render_moving::@4 render_moving::@6
  [149] (byte) render_moving::xpos#1 ← ++ (byte) render_moving::xpos#2
  [150] (byte) render_moving::c#1 ← ++ (byte) render_moving::c#2
  [151] if((byte) render_moving::c#1!=(byte) 4) goto render_moving::@4
  to:render_moving::@3
render_playfield: scope:[render_playfield]  from main::@14 main::@7
  [152] (byte) render_screen_render#22 ← phi( main::@7/(byte~) render_screen_render#64 main::@14/(byte) $20 )
  to:render_playfield::@1
render_playfield::@1: scope:[render_playfield]  from render_playfield render_playfield::@3
  [153] (byte) render_playfield::i#3 ← phi( render_playfield/(const byte) PLAYFIELD_COLS#0*(byte) 2 render_playfield::@3/(byte) render_playfield::i#1 )
  [153] (byte) render_playfield::l#2 ← phi( render_playfield/(byte) 2 render_playfield::@3/(byte) render_playfield::l#1 )
  [154] (byte~) render_playfield::$2 ← (byte) render_screen_render#22 + (byte) render_playfield::l#2
  [155] (byte~) render_playfield::$6 ← (byte~) render_playfield::$2 << (byte) 1
  [156] (byte*) render_playfield::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_playfield::$6)
  to:render_playfield::@2
render_playfield::@2: scope:[render_playfield]  from render_playfield::@1 render_playfield::@2
  [157] (byte) render_playfield::c#2 ← phi( render_playfield::@1/(byte) 0 render_playfield::@2/(byte) render_playfield::c#1 )
  [157] (byte*) render_playfield::screen_line#2 ← phi( render_playfield::@1/(byte*) render_playfield::screen_line#0 render_playfield::@2/(byte*) render_playfield::screen_line#1 )
  [157] (byte) render_playfield::i#2 ← phi( render_playfield::@1/(byte) render_playfield::i#3 render_playfield::@2/(byte) render_playfield::i#1 )
  [158] *((byte*) render_playfield::screen_line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2)
  [159] (byte*) render_playfield::screen_line#1 ← ++ (byte*) render_playfield::screen_line#2
  [160] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2
  [161] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2
  [162] if((byte) render_playfield::c#1!=(const byte) PLAYFIELD_COLS#0-(byte) 1+(byte) 1) goto render_playfield::@2
  to:render_playfield::@3
render_playfield::@3: scope:[render_playfield]  from render_playfield::@2
  [163] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2
  [164] if((byte) render_playfield::l#1!=(const byte) PLAYFIELD_LINES#0-(byte) 1+(byte) 1) goto render_playfield::@1
  to:render_playfield::@return
render_playfield::@return: scope:[render_playfield]  from render_playfield::@3
  [165] return 
  to:@return
play_movement: scope:[play_movement]  from main::@4
  [166] (byte) play_move_down::key_event#0 ← (byte) play_movement::key_event#0
  [167] call play_move_down 
  [168] (byte) play_move_down::return#0 ← (byte) play_move_down::return#3
  to:play_movement::@2
play_movement::@2: scope:[play_movement]  from play_movement
  [169] (byte) play_movement::render#1 ← (byte) play_move_down::return#0
  [170] if((byte) game_over#15==(byte) 0) goto play_movement::@1
  to:play_movement::@return
play_movement::@return: scope:[play_movement]  from play_movement::@2 play_movement::@4
  [171] (byte) current_xpos#19 ← phi( play_movement::@2/(byte) current_xpos#22 play_movement::@4/(byte) current_xpos#26 )
  [171] (byte*) current_piece_gfx#18 ← phi( play_movement::@2/(byte*) current_piece_gfx#20 play_movement::@4/(byte*) current_piece_gfx#21 )
  [171] (byte) current_orientation#17 ← phi( play_movement::@2/(byte) current_orientation#20 play_movement::@4/(byte) current_orientation#25 )
  [171] (byte) play_movement::return#2 ← phi( play_movement::@2/(byte) play_movement::render#1 play_movement::@4/(byte) play_movement::return#0 )
  [172] return 
  to:@return
play_movement::@1: scope:[play_movement]  from play_movement::@2
  [173] (byte) play_move_leftright::key_event#0 ← (byte) play_movement::key_event#0
  [174] call play_move_leftright 
  [175] (byte) play_move_leftright::return#0 ← (byte) play_move_leftright::return#2
  to:play_movement::@3
play_movement::@3: scope:[play_movement]  from play_movement::@1
  [176] (byte~) play_movement::$3 ← (byte) play_move_leftright::return#0
  [177] (byte) play_movement::render#2 ← (byte) play_movement::render#1 + (byte~) play_movement::$3
  [178] (byte) play_move_rotate::key_event#0 ← (byte) play_movement::key_event#0
  [179] call play_move_rotate 
  [180] (byte) play_move_rotate::return#0 ← (byte) play_move_rotate::return#2
  to:play_movement::@4
play_movement::@4: scope:[play_movement]  from play_movement::@3
  [181] (byte~) play_movement::$4 ← (byte) play_move_rotate::return#0
  [182] (byte) play_movement::return#0 ← (byte) play_movement::render#2 + (byte~) play_movement::$4
  to:play_movement::@return
play_move_rotate: scope:[play_move_rotate]  from play_movement::@3
  [183] if((byte) play_move_rotate::key_event#0==(const byte) KEY_Z#0) goto play_move_rotate::@1
  to:play_move_rotate::@4
play_move_rotate::@4: scope:[play_move_rotate]  from play_move_rotate
  [184] if((byte) play_move_rotate::key_event#0==(const byte) KEY_X#0) goto play_move_rotate::@2
  to:play_move_rotate::@return
play_move_rotate::@return: scope:[play_move_rotate]  from play_move_rotate::@4 play_move_rotate::@5 play_move_rotate::@6
  [185] (byte*) current_piece_gfx#21 ← phi( play_move_rotate::@5/(byte*) current_piece_gfx#7 play_move_rotate::@6/(byte*) current_piece_gfx#20 play_move_rotate::@4/(byte*) current_piece_gfx#20 )
  [185] (byte) current_orientation#25 ← phi( play_move_rotate::@5/(byte) current_orientation#7 play_move_rotate::@6/(byte) current_orientation#20 play_move_rotate::@4/(byte) current_orientation#20 )
  [185] (byte) play_move_rotate::return#2 ← phi( play_move_rotate::@5/(byte) 1 play_move_rotate::@6/(byte) 0 play_move_rotate::@4/(byte) 0 )
  [186] return 
  to:@return
play_move_rotate::@2: scope:[play_move_rotate]  from play_move_rotate::@4
  [187] (byte~) play_move_rotate::$5 ← (byte) current_orientation#20 + (byte) $10
  [188] (byte) play_move_rotate::orientation#2 ← (byte~) play_move_rotate::$5 & (byte) $3f
  to:play_move_rotate::@3
play_move_rotate::@3: scope:[play_move_rotate]  from play_move_rotate::@1 play_move_rotate::@2
  [189] (byte) play_move_rotate::orientation#3 ← phi( play_move_rotate::@1/(byte) play_move_rotate::orientation#1 play_move_rotate::@2/(byte) play_move_rotate::orientation#2 )
  [190] (byte) play_collision::xpos#3 ← (byte) current_xpos#26
  [191] (byte) play_collision::ypos#3 ← (byte) current_ypos#19
  [192] (byte) play_collision::orientation#3 ← (byte) play_move_rotate::orientation#3
  [193] (byte*~) current_piece#99 ← (byte*) current_piece#15
  [194] call play_collision 
  [195] (byte) play_collision::return#14 ← (byte) play_collision::return#15
  to:play_move_rotate::@6
play_move_rotate::@6: scope:[play_move_rotate]  from play_move_rotate::@3
  [196] (byte~) play_move_rotate::$2 ← (byte) play_collision::return#14
  [197] if((byte~) play_move_rotate::$2!=(const byte) COLLISION_NONE#0) goto play_move_rotate::@return
  to:play_move_rotate::@5
play_move_rotate::@5: scope:[play_move_rotate]  from play_move_rotate::@6
  [198] (byte) current_orientation#7 ← (byte) play_move_rotate::orientation#3
  [199] (byte*) current_piece_gfx#7 ← (byte*) current_piece#15 + (byte) current_orientation#7
  to:play_move_rotate::@return
play_move_rotate::@1: scope:[play_move_rotate]  from play_move_rotate
  [200] (byte~) play_move_rotate::$7 ← (byte) current_orientation#20 - (byte) $10
  [201] (byte) play_move_rotate::orientation#1 ← (byte~) play_move_rotate::$7 & (byte) $3f
  to:play_move_rotate::@3
play_collision: scope:[play_collision]  from play_move_down::@8 play_move_leftright::@1 play_move_leftright::@3 play_move_rotate::@3 play_spawn_current
  [202] (byte) play_collision::xpos#6 ← phi( play_move_down::@8/(byte) play_collision::xpos#0 play_move_leftright::@1/(byte) play_collision::xpos#1 play_move_leftright::@3/(byte) play_collision::xpos#2 play_move_rotate::@3/(byte) play_collision::xpos#3 play_spawn_current/(byte) play_collision::xpos#4 )
  [202] (byte) play_collision::yp#0 ← phi( play_move_down::@8/(byte) play_collision::ypos#0 play_move_leftright::@1/(byte) play_collision::ypos#1 play_move_leftright::@3/(byte) play_collision::ypos#2 play_move_rotate::@3/(byte) play_collision::ypos#3 play_spawn_current/(byte) play_collision::ypos#4 )
  [202] (byte) play_collision::orientation#5 ← phi( play_move_down::@8/(byte) play_collision::orientation#0 play_move_leftright::@1/(byte) play_collision::orientation#1 play_move_leftright::@3/(byte) play_collision::orientation#2 play_move_rotate::@3/(byte) play_collision::orientation#3 play_spawn_current/(byte) 0 )
  [202] (byte*) current_piece#17 ← phi( play_move_down::@8/(byte*~) current_piece#96 play_move_leftright::@1/(byte*~) current_piece#97 play_move_leftright::@3/(byte*~) current_piece#98 play_move_rotate::@3/(byte*~) current_piece#99 play_spawn_current/(byte*~) current_piece#100 )
  [203] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#17 + (byte) play_collision::orientation#5
  to:play_collision::@1
play_collision::@1: scope:[play_collision]  from play_collision play_collision::@9
  [204] (byte) play_collision::l#6 ← phi( play_collision/(byte) 0 play_collision::@9/(byte) play_collision::l#1 )
  [204] (byte) play_collision::i#3 ← phi( play_collision/(byte) 0 play_collision::@9/(byte~) play_collision::i#10 )
  [204] (byte) play_collision::yp#2 ← phi( play_collision/(byte) play_collision::yp#0 play_collision::@9/(byte) play_collision::yp#1 )
  [205] (byte~) play_collision::$14 ← (byte) play_collision::yp#2 << (byte) 1
  [206] (byte*) play_collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_collision::$14)
  [207] (byte~) play_collision::xp#8 ← (byte) play_collision::xpos#6
  to:play_collision::@2
play_collision::@2: scope:[play_collision]  from play_collision::@1 play_collision::@10
  [208] (byte) play_collision::c#2 ← phi( play_collision::@1/(byte) 0 play_collision::@10/(byte) play_collision::c#1 )
  [208] (byte) play_collision::xp#2 ← phi( play_collision::@1/(byte~) play_collision::xp#8 play_collision::@10/(byte) play_collision::xp#1 )
  [208] (byte) play_collision::i#2 ← phi( play_collision::@1/(byte) play_collision::i#3 play_collision::@10/(byte~) play_collision::i#12 )
  [209] (byte) play_collision::i#1 ← ++ (byte) play_collision::i#2
  [210] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte) 0) goto play_collision::@3
  to:play_collision::@7
play_collision::@7: scope:[play_collision]  from play_collision::@2
  [211] if((byte) play_collision::yp#2<(const byte) PLAYFIELD_LINES#0) goto play_collision::@4
  to:play_collision::@return
play_collision::@4: scope:[play_collision]  from play_collision::@7
  [212] (byte~) play_collision::$5 ← (byte) play_collision::xp#2 & (byte) $80
  [213] if((byte~) play_collision::$5==(byte) 0) goto play_collision::@5
  to:play_collision::@return
play_collision::@5: scope:[play_collision]  from play_collision::@4
  [214] if((byte) play_collision::xp#2<(const byte) PLAYFIELD_COLS#0) goto play_collision::@6
  to:play_collision::@return
play_collision::@6: scope:[play_collision]  from play_collision::@5
  [215] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::xp#2)==(byte) 0) goto play_collision::@3
  to:play_collision::@return
play_collision::@return: scope:[play_collision]  from play_collision::@4 play_collision::@5 play_collision::@6 play_collision::@7 play_collision::@8
  [216] (byte) play_collision::return#15 ← phi( play_collision::@5/(const byte) COLLISION_RIGHT#0 play_collision::@6/(const byte) COLLISION_PLAYFIELD#0 play_collision::@7/(const byte) COLLISION_BOTTOM#0 play_collision::@8/(const byte) COLLISION_NONE#0 play_collision::@4/(const byte) COLLISION_LEFT#0 )
  [217] return 
  to:@return
play_collision::@3: scope:[play_collision]  from play_collision::@2 play_collision::@6
  [218] (byte) play_collision::xp#1 ← ++ (byte) play_collision::xp#2
  [219] (byte) play_collision::c#1 ← ++ (byte) play_collision::c#2
  [220] if((byte) play_collision::c#1!=(byte) 4) goto play_collision::@10
  to:play_collision::@8
play_collision::@8: scope:[play_collision]  from play_collision::@3
  [221] (byte) play_collision::yp#1 ← ++ (byte) play_collision::yp#2
  [222] (byte) play_collision::l#1 ← ++ (byte) play_collision::l#6
  [223] if((byte) play_collision::l#1!=(byte) 4) goto play_collision::@9
  to:play_collision::@return
play_collision::@9: scope:[play_collision]  from play_collision::@8
  [224] (byte~) play_collision::i#10 ← (byte) play_collision::i#1
  to:play_collision::@1
play_collision::@10: scope:[play_collision]  from play_collision::@3
  [225] (byte~) play_collision::i#12 ← (byte) play_collision::i#1
  to:play_collision::@2
play_move_leftright: scope:[play_move_leftright]  from play_movement::@1
  [226] if((byte) play_move_leftright::key_event#0==(const byte) KEY_COMMA#0) goto play_move_leftright::@1
  to:play_move_leftright::@2
play_move_leftright::@2: scope:[play_move_leftright]  from play_move_leftright
  [227] if((byte) play_move_leftright::key_event#0!=(const byte) KEY_DOT#0) goto play_move_leftright::@return
  to:play_move_leftright::@3
play_move_leftright::@3: scope:[play_move_leftright]  from play_move_leftright::@2
  [228] (byte) play_collision::xpos#2 ← (byte) current_xpos#22 + (byte) 1
  [229] (byte) play_collision::ypos#2 ← (byte) current_ypos#19
  [230] (byte) play_collision::orientation#2 ← (byte) current_orientation#20
  [231] (byte*~) current_piece#98 ← (byte*) current_piece#15
  [232] call play_collision 
  [233] (byte) play_collision::return#13 ← (byte) play_collision::return#15
  to:play_move_leftright::@7
play_move_leftright::@7: scope:[play_move_leftright]  from play_move_leftright::@3
  [234] (byte~) play_move_leftright::$4 ← (byte) play_collision::return#13
  [235] if((byte~) play_move_leftright::$4!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return
  to:play_move_leftright::@4
play_move_leftright::@4: scope:[play_move_leftright]  from play_move_leftright::@7
  [236] (byte) current_xpos#6 ← ++ (byte) current_xpos#22
  to:play_move_leftright::@return
play_move_leftright::@return: scope:[play_move_leftright]  from play_move_leftright::@2 play_move_leftright::@4 play_move_leftright::@5 play_move_leftright::@6 play_move_leftright::@7
  [237] (byte) current_xpos#26 ← phi( play_move_leftright::@6/(byte) current_xpos#22 play_move_leftright::@4/(byte) current_xpos#6 play_move_leftright::@5/(byte) current_xpos#8 play_move_leftright::@7/(byte) current_xpos#22 play_move_leftright::@2/(byte) current_xpos#22 )
  [237] (byte) play_move_leftright::return#2 ← phi( play_move_leftright::@6/(byte) 0 play_move_leftright::@4/(byte) 1 play_move_leftright::@5/(byte) 1 play_move_leftright::@7/(byte) 0 play_move_leftright::@2/(byte) 0 )
  [238] return 
  to:@return
play_move_leftright::@1: scope:[play_move_leftright]  from play_move_leftright
  [239] (byte) play_collision::xpos#1 ← (byte) current_xpos#22 - (byte) 1
  [240] (byte) play_collision::ypos#1 ← (byte) current_ypos#19
  [241] (byte) play_collision::orientation#1 ← (byte) current_orientation#20
  [242] (byte*~) current_piece#97 ← (byte*) current_piece#15
  [243] call play_collision 
  [244] (byte) play_collision::return#1 ← (byte) play_collision::return#15
  to:play_move_leftright::@6
play_move_leftright::@6: scope:[play_move_leftright]  from play_move_leftright::@1
  [245] (byte~) play_move_leftright::$8 ← (byte) play_collision::return#1
  [246] if((byte~) play_move_leftright::$8!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return
  to:play_move_leftright::@5
play_move_leftright::@5: scope:[play_move_leftright]  from play_move_leftright::@6
  [247] (byte) current_xpos#8 ← -- (byte) current_xpos#22
  to:play_move_leftright::@return
play_move_down: scope:[play_move_down]  from play_movement
  [248] (byte) current_movedown_counter#12 ← ++ (byte) current_movedown_counter#16
  [249] if((byte) play_move_down::key_event#0!=(const byte) KEY_SPACE#0) goto play_move_down::@1
  to:play_move_down::@4
play_move_down::@4: scope:[play_move_down]  from play_move_down
  [250] phi()
  to:play_move_down::@1
play_move_down::@1: scope:[play_move_down]  from play_move_down play_move_down::@4
  [251] (byte) play_move_down::movedown#10 ← phi( play_move_down/(byte) 0 play_move_down::@4/(byte) 1 )
  [252] call keyboard_event_pressed 
  [253] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11
  to:play_move_down::@12
play_move_down::@12: scope:[play_move_down]  from play_move_down::@1
  [254] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
  [255] if((byte~) play_move_down::$2==(byte) 0) goto play_move_down::@2
  to:play_move_down::@5
play_move_down::@5: scope:[play_move_down]  from play_move_down::@12
  [256] if((byte) current_movedown_counter#12<(const byte) current_movedown_fast#0) goto play_move_down::@2
  to:play_move_down::@6
play_move_down::@6: scope:[play_move_down]  from play_move_down::@5
  [257] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10
  to:play_move_down::@2
play_move_down::@2: scope:[play_move_down]  from play_move_down::@12 play_move_down::@5 play_move_down::@6
  [258] (byte) play_move_down::movedown#7 ← phi( play_move_down::@12/(byte) play_move_down::movedown#10 play_move_down::@5/(byte) play_move_down::movedown#10 play_move_down::@6/(byte) play_move_down::movedown#2 )
  [259] if((byte) current_movedown_counter#12<(byte) current_movedown_slow#14) goto play_move_down::@3
  to:play_move_down::@7
play_move_down::@7: scope:[play_move_down]  from play_move_down::@2
  [260] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7
  to:play_move_down::@3
play_move_down::@3: scope:[play_move_down]  from play_move_down::@2 play_move_down::@7
  [261] (byte) play_move_down::movedown#6 ← phi( play_move_down::@2/(byte) play_move_down::movedown#7 play_move_down::@7/(byte) play_move_down::movedown#3 )
  [262] if((byte) play_move_down::movedown#6==(byte) 0) goto play_move_down::@return
  to:play_move_down::@8
play_move_down::@8: scope:[play_move_down]  from play_move_down::@3
  [263] (byte) play_collision::ypos#0 ← (byte) current_ypos#11 + (byte) 1
  [264] (byte) play_collision::xpos#0 ← (byte) current_xpos#14
  [265] (byte) play_collision::orientation#0 ← (byte) current_orientation#13
  [266] (byte*~) current_piece#96 ← (byte*) current_piece#10
  [267] call play_collision 
  [268] (byte) play_collision::return#0 ← (byte) play_collision::return#15
  to:play_move_down::@13
play_move_down::@13: scope:[play_move_down]  from play_move_down::@8
  [269] (byte~) play_move_down::$12 ← (byte) play_collision::return#0
  [270] if((byte~) play_move_down::$12==(const byte) COLLISION_NONE#0) goto play_move_down::@10
  to:play_move_down::@9
play_move_down::@9: scope:[play_move_down]  from play_move_down::@13
  [271] phi()
  [272] call play_lock_current 
  to:play_move_down::@14
play_move_down::@14: scope:[play_move_down]  from play_move_down::@9
  [273] phi()
  [274] call play_remove_lines 
  [275] (byte) play_remove_lines::return#0 ← (byte) play_remove_lines::removed#8
  to:play_move_down::@15
play_move_down::@15: scope:[play_move_down]  from play_move_down::@14
  [276] (byte) play_move_down::removed#0 ← (byte) play_remove_lines::return#0
  [277] (byte) play_update_score::removed#0 ← (byte) play_move_down::removed#0
  [278] call play_update_score 
  to:play_move_down::@16
play_move_down::@16: scope:[play_move_down]  from play_move_down::@15
  [279] phi()
  [280] call play_spawn_current 
  to:play_move_down::@17
play_move_down::@17: scope:[play_move_down]  from play_move_down::@16
  [281] (byte*~) current_piece#93 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7)
  [282] (byte*~) current_piece_gfx#117 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7)
  to:play_move_down::@11
play_move_down::@11: scope:[play_move_down]  from play_move_down::@10 play_move_down::@17
  [283] (byte) next_piece_idx#30 ← phi( play_move_down::@10/(byte) next_piece_idx#10 play_move_down::@17/(byte) play_spawn_current::piece_idx#2 )
  [283] (byte) game_over#27 ← phi( play_move_down::@10/(byte) game_over#10 play_move_down::@17/(byte) game_over#52 )
  [283] (byte) current_xpos#43 ← phi( play_move_down::@10/(byte) current_xpos#14 play_move_down::@17/(byte) current_xpos#100 )
  [283] (byte*) current_piece_gfx#35 ← phi( play_move_down::@10/(byte*) current_piece_gfx#13 play_move_down::@17/(byte*~) current_piece_gfx#117 )
  [283] (byte) current_orientation#37 ← phi( play_move_down::@10/(byte) current_orientation#13 play_move_down::@17/(byte) 0 )
  [283] (byte) current_piece_char#29 ← phi( play_move_down::@10/(byte) current_piece_char#10 play_move_down::@17/(byte) current_piece_char#5 )
  [283] (byte*) current_piece#28 ← phi( play_move_down::@10/(byte*) current_piece#10 play_move_down::@17/(byte*~) current_piece#93 )
  [283] (byte) level_bcd#31 ← phi( play_move_down::@10/(byte) level_bcd#11 play_move_down::@17/(byte) level_bcd#19 )
  [283] (byte) current_movedown_slow#37 ← phi( play_move_down::@10/(byte) current_movedown_slow#14 play_move_down::@17/(byte) current_movedown_slow#23 )
  [283] (byte) level#33 ← phi( play_move_down::@10/(byte) level#10 play_move_down::@17/(byte) level#19 )
  [283] (dword) score_bcd#26 ← phi( play_move_down::@10/(dword) score_bcd#18 play_move_down::@17/(dword) score_bcd#16 )
  [283] (word) lines_bcd#26 ← phi( play_move_down::@10/(word) lines_bcd#19 play_move_down::@17/(word) lines_bcd#17 )
  [283] (byte) current_ypos#38 ← phi( play_move_down::@10/(byte) current_ypos#3 play_move_down::@17/(byte) current_ypos#6 )
  to:play_move_down::@return
play_move_down::@return: scope:[play_move_down]  from play_move_down::@11 play_move_down::@3
  [284] (byte) next_piece_idx#16 ← phi( play_move_down::@11/(byte) next_piece_idx#30 play_move_down::@3/(byte) next_piece_idx#10 )
  [284] (byte) game_over#15 ← phi( play_move_down::@11/(byte) game_over#27 play_move_down::@3/(byte) game_over#10 )
  [284] (byte) current_xpos#22 ← phi( play_move_down::@11/(byte) current_xpos#43 play_move_down::@3/(byte) current_xpos#14 )
  [284] (byte*) current_piece_gfx#20 ← phi( play_move_down::@11/(byte*) current_piece_gfx#35 play_move_down::@3/(byte*) current_piece_gfx#13 )
  [284] (byte) current_orientation#20 ← phi( play_move_down::@11/(byte) current_orientation#37 play_move_down::@3/(byte) current_orientation#13 )
  [284] (byte) current_piece_char#16 ← phi( play_move_down::@11/(byte) current_piece_char#29 play_move_down::@3/(byte) current_piece_char#10 )
  [284] (byte*) current_piece#15 ← phi( play_move_down::@11/(byte*) current_piece#28 play_move_down::@3/(byte*) current_piece#10 )
  [284] (byte) level_bcd#17 ← phi( play_move_down::@11/(byte) level_bcd#31 play_move_down::@3/(byte) level_bcd#11 )
  [284] (byte) current_movedown_slow#21 ← phi( play_move_down::@11/(byte) current_movedown_slow#37 play_move_down::@3/(byte) current_movedown_slow#14 )
  [284] (byte) level#17 ← phi( play_move_down::@11/(byte) level#33 play_move_down::@3/(byte) level#10 )
  [284] (dword) score_bcd#14 ← phi( play_move_down::@11/(dword) score_bcd#26 play_move_down::@3/(dword) score_bcd#18 )
  [284] (word) lines_bcd#15 ← phi( play_move_down::@11/(word) lines_bcd#26 play_move_down::@3/(word) lines_bcd#19 )
  [284] (byte) current_ypos#19 ← phi( play_move_down::@11/(byte) current_ypos#38 play_move_down::@3/(byte) current_ypos#11 )
  [284] (byte) current_movedown_counter#14 ← phi( play_move_down::@11/(byte) 0 play_move_down::@3/(byte) current_movedown_counter#12 )
  [284] (byte) play_move_down::return#3 ← phi( play_move_down::@11/(byte) 1 play_move_down::@3/(byte) 0 )
  [285] return 
  to:@return
play_move_down::@10: scope:[play_move_down]  from play_move_down::@13
  [286] (byte) current_ypos#3 ← ++ (byte) current_ypos#11
  to:play_move_down::@11
play_spawn_current: scope:[play_spawn_current]  from main::@12 main::@13 play_move_down::@16
  [287] (byte) game_over#65 ← phi( main::@12/(byte) 0 main::@13/(byte) game_over#52 play_move_down::@16/(byte) game_over#10 )
  [287] (byte) next_piece_idx#17 ← phi( main::@12/(byte) 0 main::@13/(byte) play_spawn_current::piece_idx#2 play_move_down::@16/(byte) next_piece_idx#10 )
  [288] (byte) play_spawn_current::current_piece_idx#0 ← (byte) next_piece_idx#17
  [289] (byte~) play_spawn_current::$7 ← (byte) play_spawn_current::current_piece_idx#0 << (byte) 1
  [290] (byte) current_piece_char#5 ← *((const byte[]) PIECES_CHARS#0 + (byte) play_spawn_current::current_piece_idx#0)
  [291] (byte) current_xpos#100 ← *((const byte[]) PIECES_START_X#0 + (byte) play_spawn_current::current_piece_idx#0)
  [292] (byte) current_ypos#6 ← *((const byte[]) PIECES_START_Y#0 + (byte) play_spawn_current::current_piece_idx#0)
  [293] (byte) play_collision::xpos#4 ← (byte) current_xpos#100
  [294] (byte) play_collision::ypos#4 ← (byte) current_ypos#6
  [295] (byte*~) current_piece#100 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7)
  [296] call play_collision 
  [297] (byte) play_collision::return#10 ← (byte) play_collision::return#15
  to:play_spawn_current::@4
play_spawn_current::@4: scope:[play_spawn_current]  from play_spawn_current
  [298] (byte~) play_spawn_current::$1 ← (byte) play_collision::return#10
  [299] if((byte~) play_spawn_current::$1!=(const byte) COLLISION_PLAYFIELD#0) goto play_spawn_current::@5
  to:play_spawn_current::@1
play_spawn_current::@5: scope:[play_spawn_current]  from play_spawn_current::@4
  [300] phi()
  to:play_spawn_current::@1
play_spawn_current::@1: scope:[play_spawn_current]  from play_spawn_current::@4 play_spawn_current::@5
  [301] (byte) game_over#52 ← phi( play_spawn_current::@5/(byte) game_over#65 play_spawn_current::@4/(byte) 1 )
  to:play_spawn_current::@2
play_spawn_current::@2: scope:[play_spawn_current]  from play_spawn_current::@1 play_spawn_current::@3
  [302] (byte) play_spawn_current::piece_idx#2 ← phi( play_spawn_current::@1/(byte) 7 play_spawn_current::@3/(byte) play_spawn_current::piece_idx#1 )
  [303] if((byte) play_spawn_current::piece_idx#2==(byte) 7) goto play_spawn_current::sid_rnd1
  to:play_spawn_current::@return
play_spawn_current::@return: scope:[play_spawn_current]  from play_spawn_current::@2
  [304] return 
  to:@return
play_spawn_current::sid_rnd1: scope:[play_spawn_current]  from play_spawn_current::@2
  [305] (byte) play_spawn_current::sid_rnd1_return#0 ← *((const byte*) SID_VOICE3_OSC#0)
  to:play_spawn_current::@3
play_spawn_current::@3: scope:[play_spawn_current]  from play_spawn_current::sid_rnd1
  [306] (byte) play_spawn_current::piece_idx#1 ← (byte) play_spawn_current::sid_rnd1_return#0 & (byte) 7
  to:play_spawn_current::@2
play_update_score: scope:[play_update_score]  from play_move_down::@15
  [307] if((byte) play_update_score::removed#0==(byte) 0) goto play_update_score::@return
  to:play_update_score::@1
play_update_score::@1: scope:[play_update_score]  from play_update_score
  [308] (byte~) play_update_score::$2 ← < (word) lines_bcd#19
  [309] (byte) play_update_score::lines_before#0 ← (byte~) play_update_score::$2 & (byte) $f0
  [310] (byte~) play_update_score::$9 ← (byte) play_update_score::removed#0 << (byte) 2
  [311] (dword) play_update_score::add_bcd#0 ← *((const dword[5]) score_add_bcd#0 + (byte~) play_update_score::$9)
  asm { sed  }
  [313] (word) lines_bcd#29 ← (word) lines_bcd#19 + (byte) play_update_score::removed#0
  [314] (dword) score_bcd#29 ← (dword) score_bcd#18 + (dword) play_update_score::add_bcd#0
  asm { cld  }
  [316] (byte~) play_update_score::$4 ← < (word) lines_bcd#29
  [317] (byte) play_update_score::lines_after#0 ← (byte~) play_update_score::$4 & (byte) $f0
  [318] if((byte) play_update_score::lines_before#0==(byte) play_update_score::lines_after#0) goto play_update_score::@return
  to:play_update_score::@2
play_update_score::@2: scope:[play_update_score]  from play_update_score::@1
  [319] phi()
  [320] call play_increase_level 
  to:play_update_score::@return
play_update_score::@return: scope:[play_update_score]  from play_update_score play_update_score::@1 play_update_score::@2
  [321] (byte) level_bcd#19 ← phi( play_update_score/(byte) level_bcd#11 play_update_score::@1/(byte) level_bcd#11 play_update_score::@2/(byte) level_bcd#62 )
  [321] (byte) current_movedown_slow#23 ← phi( play_update_score/(byte) current_movedown_slow#14 play_update_score::@1/(byte) current_movedown_slow#14 play_update_score::@2/(byte) current_movedown_slow#66 )
  [321] (byte) level#19 ← phi( play_update_score/(byte) level#10 play_update_score::@1/(byte) level#10 play_update_score::@2/(byte) level#21 )
  [321] (dword) score_bcd#16 ← phi( play_update_score/(dword) score_bcd#18 play_update_score::@1/(dword) score_bcd#29 play_update_score::@2/(dword) score_bcd#29 )
  [321] (word) lines_bcd#17 ← phi( play_update_score/(word) lines_bcd#19 play_update_score::@1/(word) lines_bcd#29 play_update_score::@2/(word) lines_bcd#29 )
  [322] return 
  to:@return
play_increase_level: scope:[play_increase_level]  from play_update_score::@2
  [323] (byte) level#21 ← ++ (byte) level#10
  [324] if((byte) level#21>=(byte) $1d+(byte) 1) goto play_increase_level::@1
  to:play_increase_level::@3
play_increase_level::@3: scope:[play_increase_level]  from play_increase_level
  [325] (byte) current_movedown_slow#10 ← *((const byte[]) MOVEDOWN_SLOW_SPEEDS#0 + (byte) level#21)
  to:play_increase_level::@1
play_increase_level::@1: scope:[play_increase_level]  from play_increase_level play_increase_level::@3
  [326] (byte) current_movedown_slow#66 ← phi( play_increase_level/(byte) 1 play_increase_level::@3/(byte) current_movedown_slow#10 )
  [327] (byte) level_bcd#21 ← ++ (byte) level_bcd#11
  [328] (byte~) play_increase_level::$1 ← (byte) level_bcd#21 & (byte) $f
  [329] if((byte~) play_increase_level::$1!=(byte) $a) goto play_increase_level::@2
  to:play_increase_level::@4
play_increase_level::@4: scope:[play_increase_level]  from play_increase_level::@1
  [330] (byte) level_bcd#8 ← (byte) level_bcd#21 + (byte) 6
  to:play_increase_level::@2
play_increase_level::@2: scope:[play_increase_level]  from play_increase_level::@1 play_increase_level::@4
  [331] (byte) level_bcd#62 ← phi( play_increase_level::@1/(byte) level_bcd#21 play_increase_level::@4/(byte) level_bcd#8 )
  asm { sed  }
  to:play_increase_level::@5
play_increase_level::@5: scope:[play_increase_level]  from play_increase_level::@2 play_increase_level::@5
  [333] (byte) play_increase_level::b#2 ← phi( play_increase_level::@2/(byte) 0 play_increase_level::@5/(byte) play_increase_level::b#1 )
  [334] (byte~) play_increase_level::$5 ← (byte) play_increase_level::b#2 << (byte) 2
  [335] *((const dword[5]) score_add_bcd#0 + (byte~) play_increase_level::$5) ← *((const dword[5]) score_add_bcd#0 + (byte~) play_increase_level::$5) + *((const dword[]) SCORE_BASE_BCD#0 + (byte~) play_increase_level::$5)
  [336] (byte) play_increase_level::b#1 ← ++ (byte) play_increase_level::b#2
  [337] if((byte) play_increase_level::b#1!=(byte) 5) goto play_increase_level::@5
  to:play_increase_level::@6
play_increase_level::@6: scope:[play_increase_level]  from play_increase_level::@5
  asm { cld  }
  to:play_increase_level::@return
play_increase_level::@return: scope:[play_increase_level]  from play_increase_level::@6
  [339] return 
  to:@return
play_remove_lines: scope:[play_remove_lines]  from play_move_down::@14
  [340] phi()
  to:play_remove_lines::@1
play_remove_lines::@1: scope:[play_remove_lines]  from play_remove_lines play_remove_lines::@6
  [341] (byte) play_remove_lines::removed#11 ← phi( play_remove_lines/(byte) 0 play_remove_lines::@6/(byte) play_remove_lines::removed#8 )
  [341] (byte) play_remove_lines::y#8 ← phi( play_remove_lines/(byte) 0 play_remove_lines::@6/(byte) play_remove_lines::y#1 )
  [341] (byte) play_remove_lines::w#12 ← phi( play_remove_lines/(const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte) 1 play_remove_lines::@6/(byte) play_remove_lines::w#11 )
  [341] (byte) play_remove_lines::r#3 ← phi( play_remove_lines/(const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte) 1 play_remove_lines::@6/(byte) play_remove_lines::r#1 )
  to:play_remove_lines::@2
play_remove_lines::@2: scope:[play_remove_lines]  from play_remove_lines::@1 play_remove_lines::@3
  [342] (byte) play_remove_lines::full#4 ← phi( play_remove_lines::@1/(byte) 1 play_remove_lines::@3/(byte) play_remove_lines::full#2 )
  [342] (byte) play_remove_lines::x#2 ← phi( play_remove_lines::@1/(byte) 0 play_remove_lines::@3/(byte) play_remove_lines::x#1 )
  [342] (byte) play_remove_lines::w#4 ← phi( play_remove_lines::@1/(byte) play_remove_lines::w#12 play_remove_lines::@3/(byte) play_remove_lines::w#1 )
  [342] (byte) play_remove_lines::r#2 ← phi( play_remove_lines::@1/(byte) play_remove_lines::r#3 play_remove_lines::@3/(byte) play_remove_lines::r#1 )
  [343] (byte) play_remove_lines::c#0 ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::r#2)
  [344] (byte) play_remove_lines::r#1 ← -- (byte) play_remove_lines::r#2
  [345] if((byte) play_remove_lines::c#0!=(byte) 0) goto play_remove_lines::@9
  to:play_remove_lines::@3
play_remove_lines::@9: scope:[play_remove_lines]  from play_remove_lines::@2
  [346] phi()
  to:play_remove_lines::@3
play_remove_lines::@3: scope:[play_remove_lines]  from play_remove_lines::@2 play_remove_lines::@9
  [347] (byte) play_remove_lines::full#2 ← phi( play_remove_lines::@9/(byte) play_remove_lines::full#4 play_remove_lines::@2/(byte) 0 )
  [348] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#4) ← (byte) play_remove_lines::c#0
  [349] (byte) play_remove_lines::w#1 ← -- (byte) play_remove_lines::w#4
  [350] (byte) play_remove_lines::x#1 ← ++ (byte) play_remove_lines::x#2
  [351] if((byte) play_remove_lines::x#1!=(const byte) PLAYFIELD_COLS#0-(byte) 1+(byte) 1) goto play_remove_lines::@2
  to:play_remove_lines::@4
play_remove_lines::@4: scope:[play_remove_lines]  from play_remove_lines::@3
  [352] if((byte) play_remove_lines::full#2!=(byte) 1) goto play_remove_lines::@6
  to:play_remove_lines::@5
play_remove_lines::@5: scope:[play_remove_lines]  from play_remove_lines::@4
  [353] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0
  [354] (byte) play_remove_lines::removed#1 ← ++ (byte) play_remove_lines::removed#11
  to:play_remove_lines::@6
play_remove_lines::@6: scope:[play_remove_lines]  from play_remove_lines::@4 play_remove_lines::@5
  [355] (byte) play_remove_lines::removed#8 ← phi( play_remove_lines::@4/(byte) play_remove_lines::removed#11 play_remove_lines::@5/(byte) play_remove_lines::removed#1 )
  [355] (byte) play_remove_lines::w#11 ← phi( play_remove_lines::@4/(byte) play_remove_lines::w#1 play_remove_lines::@5/(byte) play_remove_lines::w#2 )
  [356] (byte) play_remove_lines::y#1 ← ++ (byte) play_remove_lines::y#8
  [357] if((byte) play_remove_lines::y#1!=(const byte) PLAYFIELD_LINES#0-(byte) 1+(byte) 1) goto play_remove_lines::@1
  to:play_remove_lines::@7
play_remove_lines::@7: scope:[play_remove_lines]  from play_remove_lines::@6 play_remove_lines::@8
  [358] (byte) play_remove_lines::w#6 ← phi( play_remove_lines::@8/(byte) play_remove_lines::w#3 play_remove_lines::@6/(byte) play_remove_lines::w#11 )
  [359] if((byte) play_remove_lines::w#6!=(byte) $ff) goto play_remove_lines::@8
  to:play_remove_lines::@return
play_remove_lines::@return: scope:[play_remove_lines]  from play_remove_lines::@7
  [360] return 
  to:@return
play_remove_lines::@8: scope:[play_remove_lines]  from play_remove_lines::@7
  [361] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#6) ← (byte) 0
  [362] (byte) play_remove_lines::w#3 ← -- (byte) play_remove_lines::w#6
  to:play_remove_lines::@7
play_lock_current: scope:[play_lock_current]  from play_move_down::@9
  [363] (byte) play_lock_current::yp#0 ← (byte) current_ypos#11
  to:play_lock_current::@1
play_lock_current::@1: scope:[play_lock_current]  from play_lock_current play_lock_current::@6
  [364] (byte) play_lock_current::l#6 ← phi( play_lock_current/(byte) 0 play_lock_current::@6/(byte) play_lock_current::l#1 )
  [364] (byte) play_lock_current::i#3 ← phi( play_lock_current/(byte) 0 play_lock_current::@6/(byte~) play_lock_current::i#7 )
  [364] (byte) play_lock_current::yp#2 ← phi( play_lock_current/(byte) play_lock_current::yp#0 play_lock_current::@6/(byte) play_lock_current::yp#1 )
  [365] (byte~) play_lock_current::$4 ← (byte) play_lock_current::yp#2 << (byte) 1
  [366] (byte*) play_lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_lock_current::$4)
  [367] (byte) play_lock_current::xp#0 ← (byte) current_xpos#14
  to:play_lock_current::@2
play_lock_current::@2: scope:[play_lock_current]  from play_lock_current::@1 play_lock_current::@7
  [368] (byte) play_lock_current::c#2 ← phi( play_lock_current::@1/(byte) 0 play_lock_current::@7/(byte) play_lock_current::c#1 )
  [368] (byte) play_lock_current::xp#2 ← phi( play_lock_current::@1/(byte) play_lock_current::xp#0 play_lock_current::@7/(byte) play_lock_current::xp#1 )
  [368] (byte) play_lock_current::i#2 ← phi( play_lock_current::@1/(byte) play_lock_current::i#3 play_lock_current::@7/(byte~) play_lock_current::i#9 )
  [369] (byte) play_lock_current::i#1 ← ++ (byte) play_lock_current::i#2
  [370] if(*((byte*) current_piece_gfx#13 + (byte) play_lock_current::i#2)==(byte) 0) goto play_lock_current::@3
  to:play_lock_current::@4
play_lock_current::@4: scope:[play_lock_current]  from play_lock_current::@2
  [371] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::xp#2) ← (byte) current_piece_char#10
  to:play_lock_current::@3
play_lock_current::@3: scope:[play_lock_current]  from play_lock_current::@2 play_lock_current::@4
  [372] (byte) play_lock_current::xp#1 ← ++ (byte) play_lock_current::xp#2
  [373] (byte) play_lock_current::c#1 ← ++ (byte) play_lock_current::c#2
  [374] if((byte) play_lock_current::c#1!=(byte) 4) goto play_lock_current::@7
  to:play_lock_current::@5
play_lock_current::@5: scope:[play_lock_current]  from play_lock_current::@3
  [375] (byte) play_lock_current::yp#1 ← ++ (byte) play_lock_current::yp#2
  [376] (byte) play_lock_current::l#1 ← ++ (byte) play_lock_current::l#6
  [377] if((byte) play_lock_current::l#1!=(byte) 4) goto play_lock_current::@6
  to:play_lock_current::@return
play_lock_current::@return: scope:[play_lock_current]  from play_lock_current::@5
  [378] return 
  to:@return
play_lock_current::@6: scope:[play_lock_current]  from play_lock_current::@5
  [379] (byte~) play_lock_current::i#7 ← (byte) play_lock_current::i#1
  to:play_lock_current::@1
play_lock_current::@7: scope:[play_lock_current]  from play_lock_current::@3
  [380] (byte~) play_lock_current::i#9 ← (byte) play_lock_current::i#1
  to:play_lock_current::@2
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@1 keyboard_event_scan::@17 keyboard_event_scan::@2 keyboard_event_scan::@3 play_move_down::@1
  [381] (byte) keyboard_event_pressed::keycode#5 ← phi( keyboard_event_scan::@1/(const byte) KEY_RSHIFT#0 keyboard_event_scan::@2/(const byte) KEY_CTRL#0 keyboard_event_scan::@17/(const byte) KEY_LSHIFT#0 keyboard_event_scan::@3/(const byte) KEY_COMMODORE#0 play_move_down::@1/(const byte) KEY_SPACE#0 )
  [382] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte) 3
  [383] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0)
  [384] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte) 7
  [385] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1)
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  [386] return 
  to:@return
keyboard_event_get: scope:[keyboard_event_get]  from main::@19
  [387] if((byte) keyboard_events_size#13==(byte) 0) goto keyboard_event_get::@return
  to:keyboard_event_get::@1
keyboard_event_get::@1: scope:[keyboard_event_get]  from keyboard_event_get
  [388] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#13
  [389] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4)
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get keyboard_event_get::@1
  [390] (byte) keyboard_events_size#16 ← phi( keyboard_event_get/(byte) keyboard_events_size#13 keyboard_event_get::@1/(byte) keyboard_events_size#4 )
  [390] (byte) keyboard_event_get::return#2 ← phi( keyboard_event_get/(byte) $ff keyboard_event_get::@1/(byte) keyboard_event_get::return#1 )
  [391] return 
  to:@return
keyboard_event_scan: scope:[keyboard_event_scan]  from main::@18
  [392] phi()
  to:keyboard_event_scan::@7
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@8
  [393] (byte) keyboard_events_size#30 ← phi( keyboard_event_scan/(byte) keyboard_events_size#19 keyboard_event_scan::@8/(byte) keyboard_events_size#13 )
  [393] (byte) keyboard_event_scan::keycode#11 ← phi( keyboard_event_scan/(byte) 0 keyboard_event_scan::@8/(byte) keyboard_event_scan::keycode#13 )
  [393] (byte) keyboard_event_scan::row#2 ← phi( keyboard_event_scan/(byte) 0 keyboard_event_scan::@8/(byte) keyboard_event_scan::row#1 )
  [394] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2
  [395] call keyboard_matrix_read 
  [396] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  to:keyboard_event_scan::@19
keyboard_event_scan::@19: scope:[keyboard_event_scan]  from keyboard_event_scan::@7
  [397] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2
  [398] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@16
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@19
  [399] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8
  to:keyboard_event_scan::@8
keyboard_event_scan::@8: scope:[keyboard_event_scan]  from keyboard_event_scan::@15 keyboard_event_scan::@16
  [400] (byte) keyboard_events_size#13 ← phi( keyboard_event_scan::@15/(byte) keyboard_events_size#29 keyboard_event_scan::@16/(byte) keyboard_events_size#30 )
  [400] (byte) keyboard_event_scan::keycode#13 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::keycode#14 keyboard_event_scan::@16/(byte) keyboard_event_scan::keycode#1 )
  [401] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2
  [402] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7
  to:keyboard_event_scan::@17
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@8
  [403] phi()
  [404] call keyboard_event_pressed 
  [405] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@20
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@17
  [406] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0
  [407] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@18
keyboard_event_scan::@18: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  [408] phi()
  to:keyboard_event_scan::@1
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan::@18 keyboard_event_scan::@20
  [409] phi()
  [410] call keyboard_event_pressed 
  [411] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@21
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  [412] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1
  [413] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2
  to:keyboard_event_scan::@4
keyboard_event_scan::@4: scope:[keyboard_event_scan]  from keyboard_event_scan::@21
  [414] phi()
  to:keyboard_event_scan::@2
keyboard_event_scan::@2: scope:[keyboard_event_scan]  from keyboard_event_scan::@21 keyboard_event_scan::@4
  [415] phi()
  [416] call keyboard_event_pressed 
  [417] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@22
keyboard_event_scan::@22: scope:[keyboard_event_scan]  from keyboard_event_scan::@2
  [418] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2
  [419] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3
  to:keyboard_event_scan::@5
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@22
  [420] phi()
  to:keyboard_event_scan::@3
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@22 keyboard_event_scan::@5
  [421] phi()
  [422] call keyboard_event_pressed 
  [423] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@23
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  [424] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#10
  [425] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return
  to:keyboard_event_scan::@6
keyboard_event_scan::@6: scope:[keyboard_event_scan]  from keyboard_event_scan::@23
  [426] phi()
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@23 keyboard_event_scan::@6
  [427] return 
  to:@return
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@10 keyboard_event_scan::@19
  [428] (byte) keyboard_events_size#10 ← phi( keyboard_event_scan::@10/(byte) keyboard_events_size#29 keyboard_event_scan::@19/(byte) keyboard_events_size#30 )
  [428] (byte) keyboard_event_scan::keycode#10 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::keycode#14 keyboard_event_scan::@19/(byte) keyboard_event_scan::keycode#11 )
  [428] (byte) keyboard_event_scan::col#2 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::col#1 keyboard_event_scan::@19/(byte) 0 )
  [429] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)
  [430] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2)
  [431] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@12
keyboard_event_scan::@12: scope:[keyboard_event_scan]  from keyboard_event_scan::@9
  [432] if((byte) keyboard_events_size#10==(byte) 8) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@13
keyboard_event_scan::@13: scope:[keyboard_event_scan]  from keyboard_event_scan::@12
  [433] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2)
  [434] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@14
keyboard_event_scan::@14: scope:[keyboard_event_scan]  from keyboard_event_scan::@13
  [435] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10
  [436] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#10
  to:keyboard_event_scan::@10
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9
  [437] (byte) keyboard_events_size#29 ← phi( keyboard_event_scan::@9/(byte) keyboard_events_size#10 keyboard_event_scan::@11/(byte) keyboard_events_size#1 keyboard_event_scan::@12/(byte) keyboard_events_size#10 keyboard_event_scan::@14/(byte) keyboard_events_size#2 )
  [438] (byte) keyboard_event_scan::keycode#14 ← ++ (byte) keyboard_event_scan::keycode#10
  [439] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2
  [440] if((byte) keyboard_event_scan::col#1!=(byte) 8) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@15
keyboard_event_scan::@15: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  [441] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0
  to:keyboard_event_scan::@8
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@13
  [442] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40
  [443] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte~) keyboard_event_scan::$23
  [444] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#10
  to:keyboard_event_scan::@10
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@7
  [445] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0)
  [446] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [447] return 
  to:@return
render_show: scope:[render_show]  from main::@3
  [448] if((byte) render_screen_show#16==(byte) 0) goto render_show::toD0181
  to:render_show::toD0182
render_show::toD0182: scope:[render_show]  from render_show
  [449] phi()
  to:render_show::@1
render_show::@1: scope:[render_show]  from render_show::toD0181 render_show::toD0182
  [450] (byte) render_show::d018val#3 ← phi( render_show::toD0181/(const byte) render_show::toD0181_return#0 render_show::toD0182/(const byte) render_show::toD0182_return#0 )
  [451] *((const byte*) D018#0) ← (byte) render_show::d018val#3
  [452] *((const byte*) BGCOL2#0) ← *((const byte[]) PIECES_COLORS_1#0 + (byte) level#10)
  [453] *((const byte*) BGCOL3#0) ← *((const byte[]) PIECES_COLORS_2#0 + (byte) level#10)
  [454] (byte) render_screen_showing#1 ← (byte) render_screen_show#16
  to:render_show::@return
render_show::@return: scope:[render_show]  from render_show::@1
  [455] return 
  to:@return
render_show::toD0181: scope:[render_show]  from render_show
  [456] phi()
  to:render_show::@1
play_init: scope:[play_init]  from main::@11
  [457] phi()
  to:play_init::@1
play_init::@1: scope:[play_init]  from play_init play_init::@1
  [458] (byte) play_init::idx#2 ← phi( play_init/(byte) 0 play_init::@1/(byte) play_init::idx#1 )
  [458] (byte*) play_init::pli#2 ← phi( play_init/(const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 play_init::@1/(byte*) play_init::pli#1 )
  [458] (byte) play_init::j#2 ← phi( play_init/(byte) 0 play_init::@1/(byte) play_init::j#1 )
  [459] (byte~) play_init::$4 ← (byte) play_init::j#2 << (byte) 1
  [460] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_init::$4) ← (byte*) play_init::pli#2
  [461] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) play_init::j#2) ← (byte) play_init::idx#2
  [462] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const byte) PLAYFIELD_COLS#0
  [463] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const byte) PLAYFIELD_COLS#0
  [464] (byte) play_init::j#1 ← ++ (byte) play_init::j#2
  [465] if((byte) play_init::j#1!=(const byte) PLAYFIELD_LINES#0-(byte) 1+(byte) 1) goto play_init::@1
  to:play_init::@2
play_init::@2: scope:[play_init]  from play_init::@1
  [466] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0
  [467] (byte) current_movedown_slow#1 ← *((const byte[]) MOVEDOWN_SLOW_SPEEDS#0)
  to:play_init::@3
play_init::@3: scope:[play_init]  from play_init::@2 play_init::@3
  [468] (byte) play_init::b#2 ← phi( play_init::@2/(byte) 0 play_init::@3/(byte) play_init::b#1 )
  [469] (byte~) play_init::$5 ← (byte) play_init::b#2 << (byte) 2
  [470] *((const dword[5]) score_add_bcd#0 + (byte~) play_init::$5) ← *((const dword[]) SCORE_BASE_BCD#0 + (byte~) play_init::$5)
  [471] (byte) play_init::b#1 ← ++ (byte) play_init::b#2
  [472] if((byte) play_init::b#1!=(byte) 5) goto play_init::@3
  to:play_init::@return
play_init::@return: scope:[play_init]  from play_init::@3
  [473] return 
  to:@return
sprites_irq_init: scope:[sprites_irq_init]  from main::@10
  asm { sei  }
  [475] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  asm { ldaCIA1_INTERRUPT  }
  [477] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0
  [478] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [479] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0
  [480] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f
  [481] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0
  [482] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0
  [483] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
  asm { cli  }
  to:sprites_irq_init::@return
sprites_irq_init::@return: scope:[sprites_irq_init]  from sprites_irq_init
  [485] return 
  to:@return
sprites_init: scope:[sprites_init]  from main::@9
  [486] *((const byte*) SPRITES_ENABLE#0) ← (byte) $f
  [487] *((const byte*) SPRITES_MC#0) ← (byte) 0
  [488] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0)
  [489] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0)
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  [490] (byte) sprites_init::xpos#2 ← phi( sprites_init/(byte)(number) $18+(number) $f*(number) 8 sprites_init::@1/(byte) sprites_init::xpos#1 )
  [490] (byte) sprites_init::s#2 ← phi( sprites_init/(byte) 0 sprites_init::@1/(byte) sprites_init::s#1 )
  [491] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte) 1
  [492] *((const byte*) SPRITES_XPOS#0 + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2
  [493] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::s#2) ← (const byte) BLACK#0
  [494] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte) $18
  [495] (byte) sprites_init::s#1 ← ++ (byte) sprites_init::s#2
  [496] if((byte) sprites_init::s#1!=(byte) 4) goto sprites_init::@1
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  [497] return 
  to:@return
render_init: scope:[render_init]  from main::@8
  [498] phi()
  to:render_init::vicSelectGfxBank1
render_init::vicSelectGfxBank1: scope:[render_init]  from render_init
  [499] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte) 3
  to:render_init::vicSelectGfxBank1_toDd001
render_init::vicSelectGfxBank1_toDd001: scope:[render_init]  from render_init::vicSelectGfxBank1
  [500] phi()
  to:render_init::vicSelectGfxBank1_@1
render_init::vicSelectGfxBank1_@1: scope:[render_init]  from render_init::vicSelectGfxBank1_toDd001
  [501] *((const byte*) CIA2_PORT_A#0) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0
  to:render_init::@2
render_init::@2: scope:[render_init]  from render_init::vicSelectGfxBank1_@1
  [502] *((const byte*) D011#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte) 3
  [503] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0
  [504] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0
  [505] *((const byte*) BGCOL2#0) ← *((const byte[]) PIECES_COLORS_1#0)
  [506] *((const byte*) BGCOL3#0) ← *((const byte[]) PIECES_COLORS_2#0)
  [507] *((const byte*) BGCOL4#0) ← (const byte) GREY#0
  [508] call render_screen_original 
  to:render_init::@3
render_init::@3: scope:[render_init]  from render_init::@2
  [509] phi()
  [510] call render_screen_original 
  to:render_init::@1
render_init::@1: scope:[render_init]  from render_init::@1 render_init::@3
  [511] (byte*) render_init::li_2#2 ← phi( render_init::@1/(byte*) render_init::li_2#1 render_init::@3/(const byte*) PLAYFIELD_SCREEN_2#0+(byte)(number) 2*(number) $28+(byte) $10 )
  [511] (byte*) render_init::li_1#2 ← phi( render_init::@1/(byte*) render_init::li_1#1 render_init::@3/(const byte*) PLAYFIELD_SCREEN_1#0+(byte)(number) 2*(number) $28+(byte) $10 )
  [511] (byte) render_init::i#2 ← phi( render_init::@1/(byte) render_init::i#1 render_init::@3/(byte) 0 )
  [512] (byte~) render_init::$13 ← (byte) render_init::i#2 << (byte) 1
  [513] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_init::$13) ← (byte*) render_init::li_1#2
  [514] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 + (byte~) render_init::$13) ← (byte*) render_init::li_2#2
  [515] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte) $28
  [516] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte) $28
  [517] (byte) render_init::i#1 ← ++ (byte) render_init::i#2
  [518] if((byte) render_init::i#1!=(const byte) PLAYFIELD_LINES#0-(byte) 1+(byte) 1) goto render_init::@1
  to:render_init::@return
render_init::@return: scope:[render_init]  from render_init::@1
  [519] return 
  to:@return
render_screen_original: scope:[render_screen_original]  from render_init::@2 render_init::@3
  [520] (byte*) render_screen_original::screen#9 ← phi( render_init::@2/(const byte*) PLAYFIELD_SCREEN_1#0 render_init::@3/(const byte*) PLAYFIELD_SCREEN_2#0 )
  to:render_screen_original::@1
render_screen_original::@1: scope:[render_screen_original]  from render_screen_original render_screen_original::@5
  [521] (byte) render_screen_original::y#6 ← phi( render_screen_original/(byte) 0 render_screen_original::@5/(byte) render_screen_original::y#1 )
  [521] (byte*) render_screen_original::ocols#4 ← phi( render_screen_original/(const byte*) PLAYFIELD_COLORS_ORIGINAL#0+(byte)(number) $20*(number) 2 render_screen_original::@5/(byte*) render_screen_original::ocols#1 )
  [521] (byte*) render_screen_original::oscr#4 ← phi( render_screen_original/(const byte*) PLAYFIELD_SCREEN_ORIGINAL#0+(byte)(number) $20*(number) 2 render_screen_original::@5/(byte*) render_screen_original::oscr#1 )
  [521] (byte*) render_screen_original::cols#7 ← phi( render_screen_original/(const byte*) COLS#0 render_screen_original::@5/(byte*) render_screen_original::cols#3 )
  [521] (byte*) render_screen_original::screen#8 ← phi( render_screen_original/(byte*) render_screen_original::screen#9 render_screen_original::@5/(byte*) render_screen_original::screen#10 )
  to:render_screen_original::@2
render_screen_original::@2: scope:[render_screen_original]  from render_screen_original::@1 render_screen_original::@2
  [522] (byte) render_screen_original::x#4 ← phi( render_screen_original::@1/(byte) 0 render_screen_original::@2/(byte) render_screen_original::x#1 )
  [522] (byte*) render_screen_original::cols#4 ← phi( render_screen_original::@1/(byte*) render_screen_original::cols#7 render_screen_original::@2/(byte*) render_screen_original::cols#1 )
  [522] (byte*) render_screen_original::screen#5 ← phi( render_screen_original::@1/(byte*) render_screen_original::screen#8 render_screen_original::@2/(byte*) render_screen_original::screen#2 )
  [523] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE#0
  [524] (byte*) render_screen_original::screen#2 ← ++ (byte*) render_screen_original::screen#5
  [525] *((byte*) render_screen_original::cols#4) ← (const byte) BLACK#0
  [526] (byte*) render_screen_original::cols#1 ← ++ (byte*) render_screen_original::cols#4
  [527] (byte) render_screen_original::x#1 ← ++ (byte) render_screen_original::x#4
  [528] if((byte) render_screen_original::x#1!=(byte) 4) goto render_screen_original::@2
  to:render_screen_original::@3
render_screen_original::@3: scope:[render_screen_original]  from render_screen_original::@2 render_screen_original::@3
  [529] (byte) render_screen_original::x#5 ← phi( render_screen_original::@2/(byte) render_screen_original::x#1 render_screen_original::@3/(byte) render_screen_original::x#2 )
  [529] (byte*) render_screen_original::cols#5 ← phi( render_screen_original::@2/(byte*) render_screen_original::cols#1 render_screen_original::@3/(byte*) render_screen_original::cols#2 )
  [529] (byte*) render_screen_original::ocols#2 ← phi( render_screen_original::@2/(byte*) render_screen_original::ocols#4 render_screen_original::@3/(byte*) render_screen_original::ocols#1 )
  [529] (byte*) render_screen_original::screen#6 ← phi( render_screen_original::@2/(byte*) render_screen_original::screen#2 render_screen_original::@3/(byte*) render_screen_original::screen#3 )
  [529] (byte*) render_screen_original::oscr#2 ← phi( render_screen_original::@2/(byte*) render_screen_original::oscr#4 render_screen_original::@3/(byte*) render_screen_original::oscr#1 )
  [530] *((byte*) render_screen_original::screen#6) ← *((byte*) render_screen_original::oscr#2)
  [531] (byte*) render_screen_original::screen#3 ← ++ (byte*) render_screen_original::screen#6
  [532] (byte*) render_screen_original::oscr#1 ← ++ (byte*) render_screen_original::oscr#2
  [533] *((byte*) render_screen_original::cols#5) ← *((byte*) render_screen_original::ocols#2)
  [534] (byte*) render_screen_original::cols#2 ← ++ (byte*) render_screen_original::cols#5
  [535] (byte*) render_screen_original::ocols#1 ← ++ (byte*) render_screen_original::ocols#2
  [536] (byte) render_screen_original::x#2 ← ++ (byte) render_screen_original::x#5
  [537] if((byte) render_screen_original::x#2!=(byte) $24) goto render_screen_original::@3
  to:render_screen_original::@4
render_screen_original::@4: scope:[render_screen_original]  from render_screen_original::@3 render_screen_original::@4
  [538] (byte) render_screen_original::x#6 ← phi( render_screen_original::@3/(byte) render_screen_original::x#2 render_screen_original::@4/(byte) render_screen_original::x#3 )
  [538] (byte*) render_screen_original::cols#6 ← phi( render_screen_original::@3/(byte*) render_screen_original::cols#2 render_screen_original::@4/(byte*) render_screen_original::cols#3 )
  [538] (byte*) render_screen_original::screen#7 ← phi( render_screen_original::@3/(byte*) render_screen_original::screen#3 render_screen_original::@4/(byte*) render_screen_original::screen#10 )
  [539] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE#0
  [540] (byte*) render_screen_original::screen#10 ← ++ (byte*) render_screen_original::screen#7
  [541] *((byte*) render_screen_original::cols#6) ← (const byte) BLACK#0
  [542] (byte*) render_screen_original::cols#3 ← ++ (byte*) render_screen_original::cols#6
  [543] (byte) render_screen_original::x#3 ← ++ (byte) render_screen_original::x#6
  [544] if((byte) render_screen_original::x#3!=(byte) $28) goto render_screen_original::@4
  to:render_screen_original::@5
render_screen_original::@5: scope:[render_screen_original]  from render_screen_original::@4
  [545] (byte) render_screen_original::y#1 ← ++ (byte) render_screen_original::y#6
  [546] if((byte) render_screen_original::y#1!=(byte) $19) goto render_screen_original::@1
  to:render_screen_original::@return
render_screen_original::@return: scope:[render_screen_original]  from render_screen_original::@5
  [547] return 
  to:@return
sid_rnd_init: scope:[sid_rnd_init]  from main
  [548] *((const word*) SID_VOICE3_FREQ#0) ← (word) $ffff
  [549] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0
  to:sid_rnd_init::@return
sid_rnd_init::@return: scope:[sid_rnd_init]  from sid_rnd_init
  [550] return 
  to:@return
sprites_irq: scope:[sprites_irq]  from
  asm { cld  }
  [552] (byte) sprites_irq::ypos#0 ← (byte) irq_sprite_ypos#0
  [553] *((const byte*) SPRITES_YPOS#0) ← (byte) sprites_irq::ypos#0
  [554] *((const byte*) SPRITES_YPOS#0+(byte) 2) ← (byte) sprites_irq::ypos#0
  [555] *((const byte*) SPRITES_YPOS#0+(byte) 4) ← (byte) sprites_irq::ypos#0
  [556] *((const byte*) SPRITES_YPOS#0+(byte) 6) ← (byte) sprites_irq::ypos#0
  [557] (byte~) sprites_irq::$0 ← (byte) irq_raster_next#0 + (byte) 1
  [558] (byte) sprites_irq::raster_sprite_gfx_modify#0 ← (byte~) sprites_irq::$0
  to:sprites_irq::@8
sprites_irq::@8: scope:[sprites_irq]  from sprites_irq sprites_irq::@8
  [559] if(*((const byte*) RASTER#0)<(byte) sprites_irq::raster_sprite_gfx_modify#0) goto sprites_irq::@8
  to:sprites_irq::@9
sprites_irq::@9: scope:[sprites_irq]  from sprites_irq::@8
  [560] (byte) sprites_irq::ptr#0 ← (byte) irq_sprite_ptr#0
  [561] if((byte) render_screen_showing#0==(byte) 0) goto sprites_irq::@1
  to:sprites_irq::@10
sprites_irq::@10: scope:[sprites_irq]  from sprites_irq::@9
  [562] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0) ← (byte) sprites_irq::ptr#0
  [563] (byte) sprites_irq::ptr#3 ← ++ (byte) sprites_irq::ptr#0
  [564] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte) 1) ← (byte) sprites_irq::ptr#3
  [565] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte) 2) ← (byte) sprites_irq::ptr#3
  [566] (byte) sprites_irq::ptr#4 ← ++ (byte) sprites_irq::ptr#3
  [567] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte) 3) ← (byte) sprites_irq::ptr#4
  to:sprites_irq::@2
sprites_irq::@2: scope:[sprites_irq]  from sprites_irq::@1 sprites_irq::@10
  [568] (byte) irq_cnt#1 ← ++ (byte) irq_cnt#0
  [569] if((byte) irq_cnt#1==(byte) 9) goto sprites_irq::@3
  to:sprites_irq::@6
sprites_irq::@6: scope:[sprites_irq]  from sprites_irq::@2
  [570] if((byte) irq_cnt#1==(byte) $a) goto sprites_irq::@4
  to:sprites_irq::@7
sprites_irq::@7: scope:[sprites_irq]  from sprites_irq::@6
  [571] (byte) irq_raster_next#3 ← (byte) irq_raster_next#0 + (byte) $14
  [572] (byte) irq_sprite_ypos#3 ← (byte) irq_sprite_ypos#0 + (byte) $15
  [573] (byte) irq_sprite_ptr#3 ← (byte) irq_sprite_ptr#0 + (byte) 3
  to:sprites_irq::@5
sprites_irq::@5: scope:[sprites_irq]  from sprites_irq::@11 sprites_irq::@4 sprites_irq::@7
  [574] (byte) irq_sprite_ptr#11 ← phi( sprites_irq::@11/(byte) irq_sprite_ptr#1 sprites_irq::@4/(byte) irq_sprite_ptr#2 sprites_irq::@7/(byte) irq_sprite_ptr#3 )
  [574] (byte) irq_sprite_ypos#11 ← phi( sprites_irq::@11/(byte) irq_sprite_ypos#1 sprites_irq::@4/(byte) irq_sprite_ypos#2 sprites_irq::@7/(byte) irq_sprite_ypos#3 )
  [574] (byte) irq_cnt#3 ← phi( sprites_irq::@11/(byte) irq_cnt#1 sprites_irq::@4/(byte) irq_cnt#2 sprites_irq::@7/(byte) irq_cnt#1 )
  [574] (byte) irq_raster_next#4 ← phi( sprites_irq::@11/(byte) irq_raster_next#1 sprites_irq::@4/(byte) irq_raster_next#2 sprites_irq::@7/(byte) irq_raster_next#3 )
  [575] *((const byte*) RASTER#0) ← (byte) irq_raster_next#4
  [576] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  to:sprites_irq::@return
sprites_irq::@return: scope:[sprites_irq]  from sprites_irq::@5
  [577] return 
  to:@return
sprites_irq::@4: scope:[sprites_irq]  from sprites_irq::@6
  [578] (byte) irq_cnt#2 ← (byte) 0
  [579] (byte) irq_raster_next#2 ← (const byte) IRQ_RASTER_FIRST#0
  [580] (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#0 + (byte) $15
  [581] (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#0 + (byte) 3
  to:sprites_irq::@5
sprites_irq::@3: scope:[sprites_irq]  from sprites_irq::@2
  [582] (byte) irq_raster_next#1 ← (byte) irq_raster_next#0 + (byte) $15
  [583] (byte) irq_sprite_ypos#1 ← (const byte) SPRITES_FIRST_YPOS#0
  to:sprites_irq::toSpritePtr2
sprites_irq::toSpritePtr2: scope:[sprites_irq]  from sprites_irq::@3
  [584] phi()
  to:sprites_irq::@11
sprites_irq::@11: scope:[sprites_irq]  from sprites_irq::toSpritePtr2
  [585] (byte) irq_sprite_ptr#1 ← (const byte) sprites_irq::toSpritePtr2_return#0
  to:sprites_irq::@5
sprites_irq::@1: scope:[sprites_irq]  from sprites_irq::@9
  [586] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0) ← (byte) sprites_irq::ptr#0
  [587] (byte) sprites_irq::ptr#1 ← ++ (byte) sprites_irq::ptr#0
  [588] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte) 1) ← (byte) sprites_irq::ptr#1
  [589] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte) 2) ← (byte) sprites_irq::ptr#1
  [590] (byte) sprites_irq::ptr#2 ← ++ (byte) sprites_irq::ptr#1
  [591] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte) 3) ← (byte) sprites_irq::ptr#2
  to:sprites_irq::@2


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL1
(byte*) BGCOL2
(byte*) BGCOL3
(byte*) BGCOL4
(byte) BLACK
(byte) BLUE
(byte*) BORDERCOL
(byte*) CIA1_INTERRUPT
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_B
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte) CIA_INTERRUPT_CLEAR
(byte) COLLISION_BOTTOM
(byte) COLLISION_LEFT
(byte) COLLISION_NONE
(byte) COLLISION_PLAYFIELD
(byte) COLLISION_RIGHT
(byte*) COLS
(byte) CYAN
(byte*) D011
(byte*) D018
(byte) DARK_GREY
(byte) GREEN
(byte) GREY
(void()**) HARDWARE_IRQ
(byte*) IRQ_ENABLE
(byte) IRQ_RASTER
(byte) IRQ_RASTER_FIRST
(byte*) IRQ_STATUS
(byte) KEY_COMMA
(byte) KEY_COMMODORE
(byte) KEY_CTRL
(byte) KEY_DOT
(byte) KEY_LSHIFT
(byte) KEY_MODIFIER_COMMODORE
(byte) KEY_MODIFIER_CTRL
(byte) KEY_MODIFIER_LSHIFT
(byte) KEY_MODIFIER_RSHIFT
(byte) KEY_RSHIFT
(byte) KEY_SPACE
(byte) KEY_X
(byte) KEY_Z
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte[]) MOVEDOWN_SLOW_SPEEDS
(byte) ORANGE
(word[]) PIECES
(byte[]) PIECES_CHARS
(byte[]) PIECES_COLORS_1
(byte[]) PIECES_COLORS_2
(byte[]) PIECES_NEXT_CHARS
(byte[]) PIECES_START_X
(byte[]) PIECES_START_Y
(byte[4*4*4]) PIECE_I
(byte[4*4*4]) PIECE_J
(byte[4*4*4]) PIECE_L
(byte[4*4*4]) PIECE_O
(byte[4*4*4]) PIECE_S
(byte[4*4*4]) PIECE_T
(byte[4*4*4]) PIECE_Z
(byte) PINK
(byte*) PLAYFIELD_CHARSET
(byte*) PLAYFIELD_COLORS_ORIGINAL
(byte) PLAYFIELD_COLS
(byte) PLAYFIELD_LINES
(byte*) PLAYFIELD_SCREEN_1
(byte*) PLAYFIELD_SCREEN_2
(byte*) PLAYFIELD_SCREEN_ORIGINAL
(byte*) PLAYFIELD_SPRITES
(byte*) PLAYFIELD_SPRITE_PTRS_1
(byte*) PLAYFIELD_SPRITE_PTRS_2
(byte*) PROCPORT
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_RAM_IO
(byte) PURPLE
(byte*) RASTER
(byte) RED
(dword[]) SCORE_BASE_BCD
(byte) SID_CONTROL_NOISE
(byte*) SID_VOICE3_CONTROL
(word*) SID_VOICE3_FREQ
(byte*) SID_VOICE3_OSC
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte) SPRITES_FIRST_YPOS
(byte*) SPRITES_MC
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(word) SPRITE_PTRS
(byte*) VIC_CONTROL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_RSEL
(byte) current_movedown_counter
(byte) current_movedown_counter#12 0.5333333333333333
(byte) current_movedown_counter#14 3.081081081081081
(byte) current_movedown_counter#16 8.769230769230768
(byte) current_movedown_fast
(byte) current_movedown_slow
(byte) current_movedown_slow#1 0.17391304347826086
(byte) current_movedown_slow#10 4.0
(byte) current_movedown_slow#14 2.214285714285714
(byte) current_movedown_slow#21 3.135135135135135
(byte) current_movedown_slow#23 1.1428571428571428
(byte) current_movedown_slow#37 6.0
(byte) current_movedown_slow#66 0.26666666666666666
(byte) current_orientation
(byte) current_orientation#13 3.189189189189189
(byte) current_orientation#17 5.523809523809523
(byte) current_orientation#20 0.36734693877551017
(byte) current_orientation#25 1.3333333333333333
(byte) current_orientation#37 4.0
(byte) current_orientation#7 3.0
(byte*) current_piece
(byte*) current_piece#10 3.243243243243243
(byte*~) current_piece#100 4.0
(byte*~) current_piece#102 2.0
(byte*) current_piece#15 1.5897435897435892
(byte*) current_piece#17 12.0
(byte*) current_piece#28 6.0
(byte*~) current_piece#93 2.0
(byte*~) current_piece#96 4.0
(byte*~) current_piece#97 4.0
(byte*~) current_piece#98 4.0
(byte*~) current_piece#99 4.0
(byte) current_piece_char
(byte) current_piece_char#10 183.9818181818182
(byte~) current_piece_char#100 4.0
(byte~) current_piece_char#101 22.0
(byte) current_piece_char#16 3.4324324324324325
(byte) current_piece_char#29 6.0
(byte) current_piece_char#5 0.25
(byte) current_piece_char#68 48.285714285714285
(byte*) current_piece_gfx
(byte*~) current_piece_gfx#112 2.0
(byte*~) current_piece_gfx#113 11.0
(byte*~) current_piece_gfx#117 4.0
(byte*~) current_piece_gfx#124 4.0
(byte*) current_piece_gfx#13 183.9818181818182
(byte*) current_piece_gfx#18 6.047619047619047
(byte*) current_piece_gfx#20 0.37037037037037035
(byte*) current_piece_gfx#21 1.3333333333333333
(byte*) current_piece_gfx#35 6.0
(byte*) current_piece_gfx#64 48.285714285714285
(byte*) current_piece_gfx#7 4.0
(byte) current_xpos
(byte) current_xpos#100 0.3225806451612903
(byte~) current_xpos#119 1.3333333333333333
(byte~) current_xpos#120 7.333333333333333
(byte) current_xpos#14 20.38181818181818
(byte) current_xpos#19 6.047619047619047
(byte) current_xpos#22 0.7999999999999999
(byte) current_xpos#26 0.4666666666666666
(byte) current_xpos#43 6.0
(byte) current_xpos#59 5.428571428571429
(byte) current_xpos#6 4.0
(byte) current_xpos#8 4.0
(byte) current_ypos
(byte) current_ypos#11 3.297297297297297
(byte) current_ypos#13 15.0
(byte) current_ypos#19 1.7051282051282046
(byte) current_ypos#3 4.0
(byte) current_ypos#38 6.0
(byte) current_ypos#6 0.3333333333333333
(byte~) current_ypos#98 1.0
(byte~) current_ypos#99 4.4
(byte) game_over
(byte) game_over#10 4.804347826086958
(byte) game_over#15 3.189189189189189
(byte) game_over#27 6.0
(byte) game_over#52 0.34782608695652173
(byte) game_over#65 0.42857142857142855
(byte) irq_cnt
(byte) irq_cnt#0 0.17391304347826086
(byte) irq_cnt#1 1.0
(byte) irq_cnt#2 1.0
(byte) irq_cnt#3 60.0
(byte) irq_raster_next
(byte) irq_raster_next#0 0.3076923076923077
(byte) irq_raster_next#1 1.0
(byte) irq_raster_next#2 1.3333333333333333
(byte) irq_raster_next#3 1.3333333333333333
(byte) irq_raster_next#4 8.0
(byte) irq_sprite_ptr
(byte) irq_sprite_ptr#0 0.25806451612903225
(byte) irq_sprite_ptr#1 4.0
(byte) irq_sprite_ptr#11 60.0
(byte) irq_sprite_ptr#2 4.0
(byte) irq_sprite_ptr#3 4.0
(byte) irq_sprite_ypos
(byte) irq_sprite_ypos#0 0.27586206896551724
(byte) irq_sprite_ypos#1 1.3333333333333333
(byte) irq_sprite_ypos#11 60.0
(byte) irq_sprite_ypos#2 2.0
(byte) irq_sprite_ypos#3 2.0
(byte()) keyboard_event_get()
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#1 4.0
(byte) keyboard_event_get::return#2 34.33333333333333
(byte) keyboard_event_get::return#3 202.0
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0 4.0
(byte~) keyboard_event_pressed::$1 4.0
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#5 1.3333333333333333
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0 4.0
(byte) keyboard_event_pressed::return#1 4.0
(byte) keyboard_event_pressed::return#10 4.0
(byte) keyboard_event_pressed::return#11 1.714285714285714
(byte) keyboard_event_pressed::return#12 4.0
(byte) keyboard_event_pressed::return#2 4.0
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0 2.0
(void()) keyboard_event_scan()
(byte~) keyboard_event_scan::$0 4.0
(byte~) keyboard_event_scan::$15 20002.0
(byte~) keyboard_event_scan::$16 20002.0
(byte~) keyboard_event_scan::$23 20002.0
(byte~) keyboard_event_scan::$3 4.0
(byte~) keyboard_event_scan::$6 4.0
(byte~) keyboard_event_scan::$9 4.0
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#1 15001.5
(byte) keyboard_event_scan::col#2 2857.4285714285716
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0 20002.0
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#1 2002.0
(byte) keyboard_event_scan::keycode#10 3154.230769230769
(byte) keyboard_event_scan::keycode#11 500.5
(byte) keyboard_event_scan::keycode#13 1001.0
(byte) keyboard_event_scan::keycode#14 5250.75
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#1 1501.5
(byte) keyboard_event_scan::row#2 600.24
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0 1278.0555555555554
(byte[8]) keyboard_events
(byte) keyboard_events_size
(byte) keyboard_events_size#1 20002.0
(byte) keyboard_events_size#10 8100.9000000000015
(byte) keyboard_events_size#13 97.06451612903226
(byte) keyboard_events_size#16 4.461538461538461
(byte) keyboard_events_size#19 18.999999999999996
(byte) keyboard_events_size#2 20002.0
(byte) keyboard_events_size#29 10201.2
(byte) keyboard_events_size#30 429.2857142857143
(byte) keyboard_events_size#4 3.0
(byte[8]) keyboard_matrix_col_bitmask
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 334.33333333333337
(byte) keyboard_matrix_read::return#2 2002.0
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 1003.0
(byte[8]) keyboard_matrix_row_bitmask
(byte) keyboard_modifiers
(byte[8]) keyboard_scan_values
(byte) level
(byte) level#10 1.909090909090909
(byte) level#17 3.135135135135135
(byte) level#19 1.1428571428571428
(byte) level#21 0.4444444444444444
(byte) level#33 6.0
(byte) level_bcd
(byte) level_bcd#11 2.0
(byte) level_bcd#17 1.9999999999999998
(byte) level_bcd#19 1.1428571428571428
(byte) level_bcd#21 2.6666666666666665
(byte) level_bcd#31 6.0
(byte) level_bcd#62 0.6000000000000001
(byte) level_bcd#8 4.0
(word) lines_bcd
(word) lines_bcd#15 2.0338983050847457
(word) lines_bcd#17 1.1428571428571428
(word) lines_bcd#19 2.4400000000000004
(word) lines_bcd#26 6.0
(word) lines_bcd#29 1.0
(void()) main()
(byte) main::key_event
(byte) main::key_event#0 101.0
(byte) main::render
(byte) main::render#1 202.0
(byte) next_piece_idx
(byte) next_piece_idx#10 2.608695652173914
(byte) next_piece_idx#12 3.4
(byte) next_piece_idx#16 3.4324324324324325
(byte) next_piece_idx#17 6.0
(byte) next_piece_idx#30 6.0
(byte~) next_piece_idx#77 4.0
(byte~) next_piece_idx#78 22.0
(byte()) play_collision((byte) play_collision::xpos , (byte) play_collision::ypos , (byte) play_collision::orientation)
(byte~) play_collision::$14 2002.0
(byte~) play_collision::$5 20002.0
(byte) play_collision::c
(byte) play_collision::c#1 10001.0
(byte) play_collision::c#2 2222.4444444444443
(byte) play_collision::i
(byte) play_collision::i#1 1615.6153846153845
(byte~) play_collision::i#10 2002.0
(byte~) play_collision::i#12 20002.0
(byte) play_collision::i#2 15502.0
(byte) play_collision::i#3 500.5
(byte) play_collision::l
(byte) play_collision::l#1 1001.0
(byte) play_collision::l#6 117.76470588235294
(byte) play_collision::orientation
(byte) play_collision::orientation#0 2.0
(byte) play_collision::orientation#1 2.0
(byte) play_collision::orientation#2 2.0
(byte) play_collision::orientation#3 2.0
(byte) play_collision::orientation#5 10.0
(byte*) play_collision::piece_gfx
(byte*) play_collision::piece_gfx#0 476.3333333333333
(byte*) play_collision::playfield_line
(byte*) play_collision::playfield_line#0 785.8571428571429
(byte) play_collision::return
(byte) play_collision::return#0 4.0
(byte) play_collision::return#1 4.0
(byte) play_collision::return#10 4.0
(byte) play_collision::return#13 4.0
(byte) play_collision::return#14 4.0
(byte) play_collision::return#15 1.4285714285714284
(byte) play_collision::xp
(byte) play_collision::xp#1 5000.5
(byte) play_collision::xp#2 6375.75
(byte~) play_collision::xp#8 2002.0
(byte) play_collision::xpos
(byte) play_collision::xpos#0 1.3333333333333333
(byte) play_collision::xpos#1 1.0
(byte) play_collision::xpos#2 1.0
(byte) play_collision::xpos#3 1.0
(byte) play_collision::xpos#4 1.3333333333333333
(byte) play_collision::xpos#6 45.95454545454545
(byte) play_collision::yp
(byte) play_collision::yp#0 6.0
(byte) play_collision::yp#1 500.5
(byte) play_collision::yp#2 812.875
(byte) play_collision::ypos
(byte) play_collision::ypos#0 1.0
(byte) play_collision::ypos#1 1.3333333333333333
(byte) play_collision::ypos#2 1.3333333333333333
(byte) play_collision::ypos#3 1.3333333333333333
(byte) play_collision::ypos#4 2.0
(void()) play_increase_level()
(byte~) play_increase_level::$1 4.0
(byte~) play_increase_level::$5 4004.0
(byte) play_increase_level::b
(byte) play_increase_level::b#1 1501.5
(byte) play_increase_level::b#2 1001.0
(void()) play_init()
(byte~) play_init::$4 22.0
(byte~) play_init::$5 33.0
(byte) play_init::b
(byte) play_init::b#1 16.5
(byte) play_init::b#2 11.0
(byte) play_init::idx
(byte) play_init::idx#1 7.333333333333333
(byte) play_init::idx#2 6.6000000000000005
(byte) play_init::j
(byte) play_init::j#1 16.5
(byte) play_init::j#2 7.333333333333333
(byte*) play_init::pli
(byte*) play_init::pli#1 5.5
(byte*) play_init::pli#2 8.25
(void()) play_lock_current()
(byte~) play_lock_current::$4 2002.0
(byte) play_lock_current::c
(byte) play_lock_current::c#1 10001.0
(byte) play_lock_current::c#2 4000.4
(byte) play_lock_current::i
(byte) play_lock_current::i#1 2333.6666666666665
(byte) play_lock_current::i#2 15502.0
(byte) play_lock_current::i#3 500.5
(byte~) play_lock_current::i#7 2002.0
(byte~) play_lock_current::i#9 20002.0
(byte) play_lock_current::l
(byte) play_lock_current::l#1 1001.0
(byte) play_lock_current::l#6 154.0
(byte*) play_lock_current::playfield_line
(byte*) play_lock_current::playfield_line#0 1100.2
(byte) play_lock_current::xp
(byte) play_lock_current::xp#0 2002.0
(byte) play_lock_current::xp#1 5000.5
(byte) play_lock_current::xp#2 7751.0
(byte) play_lock_current::yp
(byte) play_lock_current::yp#0 4.0
(byte) play_lock_current::yp#1 500.5
(byte) play_lock_current::yp#2 250.41666666666669
(byte()) play_move_down((byte) play_move_down::key_event)
(byte~) play_move_down::$12 4.0
(byte~) play_move_down::$2 4.0
(byte) play_move_down::key_event
(byte) play_move_down::key_event#0 2.0
(byte) play_move_down::movedown
(byte) play_move_down::movedown#10 1.0
(byte) play_move_down::movedown#2 4.0
(byte) play_move_down::movedown#3 4.0
(byte) play_move_down::movedown#6 6.0
(byte) play_move_down::movedown#7 5.0
(byte) play_move_down::removed
(byte) play_move_down::removed#0 4.0
(byte) play_move_down::return
(byte) play_move_down::return#0 4.0
(byte) play_move_down::return#3 0.6666666666666666
(byte()) play_move_leftright((byte) play_move_leftright::key_event)
(byte~) play_move_leftright::$4 4.0
(byte~) play_move_leftright::$8 4.0
(byte) play_move_leftright::key_event
(byte) play_move_leftright::key_event#0 3.0
(byte) play_move_leftright::return
(byte) play_move_leftright::return#0 4.0
(byte) play_move_leftright::return#2 0.6666666666666666
(byte()) play_move_rotate((byte) play_move_rotate::key_event)
(byte~) play_move_rotate::$2 4.0
(byte~) play_move_rotate::$5 4.0
(byte~) play_move_rotate::$7 4.0
(byte) play_move_rotate::key_event
(byte) play_move_rotate::key_event#0 3.0
(byte) play_move_rotate::orientation
(byte) play_move_rotate::orientation#1 4.0
(byte) play_move_rotate::orientation#2 4.0
(byte) play_move_rotate::orientation#3 0.8888888888888888
(byte) play_move_rotate::return
(byte) play_move_rotate::return#0 4.0
(byte) play_move_rotate::return#2 0.6666666666666666
(byte()) play_movement((byte) play_movement::key_event)
(byte~) play_movement::$3 4.0
(byte~) play_movement::$4 4.0
(byte) play_movement::key_event
(byte) play_movement::key_event#0 9.727272727272727
(byte) play_movement::render
(byte) play_movement::render#1 1.0
(byte) play_movement::render#2 0.8
(byte) play_movement::return
(byte) play_movement::return#0 4.0
(byte) play_movement::return#2 34.99999999999999
(byte) play_movement::return#3 202.0
(byte()) play_remove_lines()
(byte) play_remove_lines::c
(byte) play_remove_lines::c#0 6000.6
(byte) play_remove_lines::full
(byte) play_remove_lines::full#2 4200.6
(byte) play_remove_lines::full#4 4000.4
(byte) play_remove_lines::r
(byte) play_remove_lines::r#1 1500.2142857142858
(byte) play_remove_lines::r#2 15502.0
(byte) play_remove_lines::r#3 2002.0
(byte) play_remove_lines::removed
(byte) play_remove_lines::removed#1 2002.0
(byte) play_remove_lines::removed#11 231.0
(byte) play_remove_lines::removed#8 333.8888888888889
(byte) play_remove_lines::return
(byte) play_remove_lines::return#0 4.0
(byte) play_remove_lines::w
(byte) play_remove_lines::w#1 5501.0
(byte) play_remove_lines::w#11 1334.6666666666667
(byte) play_remove_lines::w#12 2002.0
(byte) play_remove_lines::w#2 1001.0
(byte) play_remove_lines::w#3 2002.0
(byte) play_remove_lines::w#4 4429.142857142857
(byte) play_remove_lines::w#6 1668.3333333333335
(byte) play_remove_lines::x
(byte) play_remove_lines::x#1 15001.5
(byte) play_remove_lines::x#2 2500.25
(byte) play_remove_lines::y
(byte) play_remove_lines::y#1 1501.5
(byte) play_remove_lines::y#8 133.46666666666667
(void()) play_spawn_current()
(byte~) play_spawn_current::$1 4.0
(byte~) play_spawn_current::$7 0.06451612903225806
(byte) play_spawn_current::current_piece_idx
(byte) play_spawn_current::current_piece_idx#0 2.5
(byte) play_spawn_current::piece_idx
(byte) play_spawn_current::piece_idx#1 2002.0
(byte) play_spawn_current::piece_idx#2 100.5
(byte) play_spawn_current::sid_rnd1_return
(byte) play_spawn_current::sid_rnd1_return#0 2002.0
(void()) play_update_score((byte) play_update_score::removed)
(byte~) play_update_score::$2 4.0
(byte~) play_update_score::$4 4.0
(byte~) play_update_score::$9 4.0
(dword) play_update_score::add_bcd
(dword) play_update_score::add_bcd#0 1.3333333333333333
(byte) play_update_score::lines_after
(byte) play_update_score::lines_after#0 4.0
(byte) play_update_score::lines_before
(byte) play_update_score::lines_before#0 0.4444444444444444
(byte) play_update_score::removed
(byte) play_update_score::removed#0 1.1428571428571428
(byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield
(byte*[PLAYFIELD_LINES#0]) playfield_lines
(byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx
(void()) render_bcd((byte*) render_bcd::screen , (word) render_bcd::offset , (byte) render_bcd::bcd , (byte) render_bcd::only_low)
(byte~) render_bcd::$3 4.0
(byte~) render_bcd::$4 4.0
(byte~) render_bcd::$5 4.0
(byte~) render_bcd::$6 4.0
(byte) render_bcd::ZERO_CHAR
(byte) render_bcd::bcd
(byte) render_bcd::bcd#0 4.0
(byte) render_bcd::bcd#1 4.0
(byte) render_bcd::bcd#2 4.0
(byte) render_bcd::bcd#3 2.0
(byte) render_bcd::bcd#4 2.0
(byte) render_bcd::bcd#5 4.0
(byte) render_bcd::bcd#6 2.0
(word) render_bcd::offset
(word) render_bcd::offset#6 2.0
(byte) render_bcd::only_low
(byte) render_bcd::only_low#6 1.0
(byte*) render_bcd::screen
(byte*) render_bcd::screen#0 2.0
(byte*) render_bcd::screen#1 2.0
(byte*) render_bcd::screen#2 2.0
(byte*) render_bcd::screen#3 4.0
(byte*) render_bcd::screen#4 4.0
(byte*) render_bcd::screen#5 2.0
(byte*) render_bcd::screen#6 14.0
(byte*) render_bcd::screen_pos
(byte*) render_bcd::screen_pos#0 1.6
(byte*) render_bcd::screen_pos#2 4.0
(byte*) render_bcd::screen_pos#3 2.0
(void()) render_init()
(byte~) render_init::$13 16.5
(byte) render_init::i
(byte) render_init::i#1 16.5
(byte) render_init::i#2 5.5
(byte*) render_init::li_1
(byte*) render_init::li_1#1 5.5
(byte*) render_init::li_1#2 8.25
(byte*) render_init::li_2
(byte*) render_init::li_2#1 7.333333333333333
(byte*) render_init::li_2#2 6.6000000000000005
(byte~) render_init::vicSelectGfxBank1_$0
(byte*) render_init::vicSelectGfxBank1_gfx
(word~) render_init::vicSelectGfxBank1_toDd001_$0
(byte~) render_init::vicSelectGfxBank1_toDd001_$1
(number~) render_init::vicSelectGfxBank1_toDd001_$2
(number~) render_init::vicSelectGfxBank1_toDd001_$3
(byte*) render_init::vicSelectGfxBank1_toDd001_gfx
(byte) render_init::vicSelectGfxBank1_toDd001_return
(void()) render_moving()
(byte~) render_moving::$1 202.0
(byte~) render_moving::$6 202.0
(byte) render_moving::c
(byte) render_moving::c#1 1501.5
(byte) render_moving::c#2 333.6666666666667
(byte) render_moving::current_cell
(byte) render_moving::current_cell#0 1001.0
(byte) render_moving::i
(byte) render_moving::i#1 202.0
(byte) render_moving::i#2 500.5
(byte) render_moving::i#3 50.5
(byte) render_moving::i#4 1552.0
(byte) render_moving::i#8 300.75
(byte) render_moving::l
(byte) render_moving::l#1 151.5
(byte) render_moving::l#4 11.882352941176471
(byte*) render_moving::screen_line
(byte*) render_moving::screen_line#0 110.19999999999999
(byte) render_moving::xpos
(byte) render_moving::xpos#0 202.0
(byte) render_moving::xpos#1 667.3333333333334
(byte) render_moving::xpos#2 620.8
(byte) render_moving::ypos
(byte) render_moving::ypos#0 4.0
(byte) render_moving::ypos#1 67.33333333333333
(byte) render_moving::ypos#2 25.375
(void()) render_next()
(byte~) render_next::$6 1.0
(byte) render_next::c
(byte) render_next::c#1 1501.5
(byte) render_next::c#2 286.0
(byte) render_next::cell
(byte) render_next::cell#0 1001.0
(byte) render_next::l
(byte) render_next::l#1 151.5
(byte) render_next::l#7 18.363636363636363
(word) render_next::next_area_offset
(byte) render_next::next_piece_char
(byte) render_next::next_piece_char#0 66.86666666666667
(byte*) render_next::next_piece_gfx
(byte*) render_next::next_piece_gfx#1 210.29999999999998
(byte*) render_next::next_piece_gfx#2 1552.0
(byte*) render_next::next_piece_gfx#3 204.0
(byte*~) render_next::next_piece_gfx#9 4.0
(byte*) render_next::screen_next_area
(byte*) render_next::screen_next_area#10 204.0
(byte*) render_next::screen_next_area#11 0.5
(byte*) render_next::screen_next_area#3 701.0
(byte*) render_next::screen_next_area#4 67.33333333333333
(byte*) render_next::screen_next_area#5 684.1666666666667
(void()) render_playfield()
(byte~) render_playfield::$2 202.0
(byte~) render_playfield::$6 202.0
(byte) render_playfield::c
(byte) render_playfield::c#1 1501.5
(byte) render_playfield::c#2 500.5
(byte) render_playfield::i
(byte) render_playfield::i#1 420.59999999999997
(byte) render_playfield::i#2 1034.6666666666667
(byte) render_playfield::i#3 50.5
(byte) render_playfield::l
(byte) render_playfield::l#1 151.5
(byte) render_playfield::l#2 30.299999999999997
(byte*) render_playfield::screen_line
(byte*) render_playfield::screen_line#0 202.0
(byte*) render_playfield::screen_line#1 500.5
(byte*) render_playfield::screen_line#2 1552.0
(void()) render_score()
(word) render_score::level_offset
(word) render_score::lines_offset
(byte*) render_score::score_bytes
(word) render_score::score_offset
(byte*) render_score::screen
(byte*) render_score::screen#3 0.75
(void()) render_screen_original((byte*) render_screen_original::screen)
(byte) render_screen_original::SPACE
(byte*) render_screen_original::cols
(byte*) render_screen_original::cols#1 101.0
(byte*) render_screen_original::cols#2 75.75
(byte*) render_screen_original::cols#3 42.599999999999994
(byte*) render_screen_original::cols#4 78.5
(byte*) render_screen_original::cols#5 80.8
(byte*) render_screen_original::cols#6 101.0
(byte*) render_screen_original::cols#7 22.0
(byte*) render_screen_original::ocols
(byte*) render_screen_original::ocols#1 17.75
(byte*) render_screen_original::ocols#2 67.33333333333333
(byte*) render_screen_original::ocols#4 14.0
(byte*) render_screen_original::oscr
(byte*) render_screen_original::oscr#1 14.2
(byte*) render_screen_original::oscr#2 134.66666666666666
(byte*) render_screen_original::oscr#4 14.0
(byte*) render_screen_original::screen
(byte*) render_screen_original::screen#10 30.42857142857143
(byte*) render_screen_original::screen#2 60.599999999999994
(byte*) render_screen_original::screen#3 43.285714285714285
(byte*) render_screen_original::screen#5 157.0
(byte*) render_screen_original::screen#6 202.0
(byte*) render_screen_original::screen#7 202.0
(byte*) render_screen_original::screen#8 24.0
(byte*) render_screen_original::screen#9 2.0
(byte) render_screen_original::x
(byte) render_screen_original::x#1 202.0
(byte) render_screen_original::x#2 202.0
(byte) render_screen_original::x#3 151.5
(byte) render_screen_original::x#4 40.4
(byte) render_screen_original::x#5 43.285714285714285
(byte) render_screen_original::x#6 60.599999999999994
(byte) render_screen_original::y
(byte) render_screen_original::y#1 16.5
(byte) render_screen_original::y#6 0.9166666666666666
(byte) render_screen_render
(byte) render_screen_render#11 3.25
(byte) render_screen_render#15 13.0
(byte) render_screen_render#18 4.8076923076923075
(byte) render_screen_render#22 8.615384615384615
(byte) render_screen_render#33 5.333333333333333
(byte~) render_screen_render#64 22.0
(byte~) render_screen_render#65 5.5
(byte~) render_screen_render#66 11.0
(byte) render_screen_show
(byte) render_screen_show#13 4.333333333333333
(byte) render_screen_show#16 5.474999999999999
(byte) render_screen_showing
(byte) render_screen_showing#0 0.1276595744680851
(byte) render_screen_showing#1 3.8000000000000003
(byte) render_screen_showing#13 1140.0
(void()) render_screen_swap()
(void()) render_show()
(byte) render_show::d018val
(byte) render_show::d018val#3 2.0
(word~) render_show::toD0181_$0
(number~) render_show::toD0181_$1
(number~) render_show::toD0181_$2
(number~) render_show::toD0181_$3
(word~) render_show::toD0181_$4
(byte~) render_show::toD0181_$5
(number~) render_show::toD0181_$6
(number~) render_show::toD0181_$7
(number~) render_show::toD0181_$8
(byte*) render_show::toD0181_gfx
(byte) render_show::toD0181_return
(byte*) render_show::toD0181_screen
(word~) render_show::toD0182_$0
(number~) render_show::toD0182_$1
(number~) render_show::toD0182_$2
(number~) render_show::toD0182_$3
(word~) render_show::toD0182_$4
(byte~) render_show::toD0182_$5
(number~) render_show::toD0182_$6
(number~) render_show::toD0182_$7
(number~) render_show::toD0182_$8
(byte*) render_show::toD0182_gfx
(byte) render_show::toD0182_return
(byte*) render_show::toD0182_screen
(dword[5]) score_add_bcd
(dword) score_bcd
(dword) score_bcd#0 0.1111111111111111
(dword) score_bcd#14 3.135135135135135
(dword) score_bcd#16 1.1428571428571428
(dword) score_bcd#18 2.3921568627450975
(dword) score_bcd#26 6.0
(dword) score_bcd#29 0.8571428571428571
(byte*[PLAYFIELD_LINES#0]) screen_lines_1
(byte*[PLAYFIELD_LINES#0]) screen_lines_2
(void()) sid_rnd_init()
(void()) sprites_init()
(byte) sprites_init::s
(byte) sprites_init::s#1 16.5
(byte) sprites_init::s#2 8.8
(byte) sprites_init::s2
(byte) sprites_init::s2#0 22.0
(byte) sprites_init::xpos
(byte) sprites_init::xpos#1 7.333333333333333
(byte) sprites_init::xpos#2 8.25
interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
(byte~) sprites_irq::$0 4.0
(byte) sprites_irq::ptr
(byte) sprites_irq::ptr#0 2.5
(byte) sprites_irq::ptr#1 2.6666666666666665
(byte) sprites_irq::ptr#2 4.0
(byte) sprites_irq::ptr#3 2.6666666666666665
(byte) sprites_irq::ptr#4 4.0
(byte) sprites_irq::raster_sprite_gfx_modify
(byte) sprites_irq::raster_sprite_gfx_modify#0 6.5
(word~) sprites_irq::toSpritePtr2_$0
(number~) sprites_irq::toSpritePtr2_$1
(byte~) sprites_irq::toSpritePtr2_$2
(byte) sprites_irq::toSpritePtr2_return
(byte*) sprites_irq::toSpritePtr2_sprite
(byte) sprites_irq::ypos
(byte) sprites_irq::ypos#0 2.5
(void()) sprites_irq_init()
(word~) toSpritePtr1_$0
(number~) toSpritePtr1_$1
(byte~) toSpritePtr1_$2
(byte) toSpritePtr1_return
(byte*) toSpritePtr1_sprite

Initial phi equivalence classes
[ render_screen_show#16 render_screen_show#13 ]
[ render_screen_render#18 render_screen_render#11 ]
[ render_screen_showing#13 render_screen_showing#1 render_screen_showing#0 ]
[ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ]
[ render_score::screen#3 ]
[ render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ]
[ render_bcd::offset#6 ]
[ render_bcd::only_low#6 ]
[ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ]
[ render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ]
[ render_screen_render#15 render_screen_render#66 ]
[ next_piece_idx#12 next_piece_idx#77 next_piece_idx#78 ]
[ render_next::l#7 render_next::l#1 ]
[ render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#1 render_next::next_piece_gfx#9 ]
[ render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#4 render_next::screen_next_area#11 render_next::screen_next_area#3 ]
[ render_next::c#2 render_next::c#1 ]
[ current_ypos#13 current_ypos#98 current_ypos#99 ]
[ render_screen_render#33 render_screen_render#65 ]
[ current_xpos#59 current_xpos#119 current_xpos#120 ]
[ current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 ]
[ current_piece_char#68 current_piece_char#100 current_piece_char#101 ]
[ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ]
[ render_moving::l#4 render_moving::l#1 ]
[ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ]
[ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ]
[ render_moving::c#2 render_moving::c#1 ]
[ render_screen_render#22 render_screen_render#64 ]
[ render_playfield::l#2 render_playfield::l#1 ]
[ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
[ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ]
[ render_playfield::c#2 render_playfield::c#1 ]
[ play_movement::return#2 play_movement::render#1 play_movement::return#0 ]
[ play_move_rotate::return#2 ]
[ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
[ current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 ]
[ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ]
[ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ]
[ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ]
[ play_collision::l#6 play_collision::l#1 ]
[ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ]
[ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ]
[ play_collision::c#2 play_collision::c#1 ]
[ play_collision::return#15 ]
[ play_move_leftright::return#2 ]
[ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 ]
[ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#19 current_ypos#6 ]
[ lines_bcd#26 lines_bcd#19 lines_bcd#15 lines_bcd#17 lines_bcd#29 ]
[ score_bcd#26 score_bcd#18 score_bcd#14 score_bcd#0 score_bcd#16 score_bcd#29 ]
[ level#33 level#10 level#17 level#19 level#21 ]
[ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#21 current_movedown_slow#1 current_movedown_slow#23 current_movedown_slow#66 current_movedown_slow#10 ]
[ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ]
[ current_piece#28 current_piece#10 current_piece#15 current_piece#102 current_piece#93 ]
[ current_piece_char#29 current_piece_char#10 current_piece_char#16 current_piece_char#5 ]
[ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ]
[ current_piece_gfx#35 current_piece_gfx#13 current_piece_gfx#18 current_piece_gfx#124 current_piece_gfx#20 current_piece_gfx#21 current_piece_gfx#7 current_piece_gfx#117 ]
[ current_xpos#43 current_xpos#14 current_xpos#19 current_xpos#100 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ]
[ play_move_down::return#3 ]
[ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 next_piece_idx#16 play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ]
[ game_over#65 game_over#27 game_over#10 game_over#15 game_over#52 ]
[ play_increase_level::b#2 play_increase_level::b#1 ]
[ play_remove_lines::y#8 play_remove_lines::y#1 ]
[ play_remove_lines::removed#11 play_remove_lines::removed#8 play_remove_lines::removed#1 ]
[ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ]
[ play_remove_lines::x#2 play_remove_lines::x#1 ]
[ play_remove_lines::full#4 play_remove_lines::full#2 ]
[ play_remove_lines::w#6 play_remove_lines::w#3 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 ]
[ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ]
[ play_lock_current::l#6 play_lock_current::l#1 ]
[ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ]
[ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ]
[ play_lock_current::c#2 play_lock_current::c#1 ]
[ keyboard_event_pressed::keycode#5 ]
[ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
[ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
[ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
[ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
[ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ]
[ render_show::d018val#3 ]
[ play_init::j#2 play_init::j#1 ]
[ play_init::pli#2 play_init::pli#1 ]
[ play_init::idx#2 play_init::idx#1 ]
[ play_init::b#2 play_init::b#1 ]
[ sprites_init::s#2 sprites_init::s#1 ]
[ sprites_init::xpos#2 sprites_init::xpos#1 ]
[ render_init::i#2 render_init::i#1 ]
[ render_init::li_1#2 render_init::li_1#1 ]
[ render_init::li_2#2 render_init::li_2#1 ]
[ render_screen_original::y#6 render_screen_original::y#1 ]
[ render_screen_original::oscr#2 render_screen_original::oscr#4 render_screen_original::oscr#1 ]
[ render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 ]
[ render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 ]
[ render_screen_original::cols#6 render_screen_original::cols#5 render_screen_original::cols#4 render_screen_original::cols#7 render_screen_original::cols#3 render_screen_original::cols#1 render_screen_original::cols#2 ]
[ render_screen_original::x#6 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ]
[ irq_raster_next#4 irq_raster_next#1 irq_raster_next#2 irq_raster_next#3 ]
[ irq_cnt#3 irq_cnt#1 irq_cnt#2 ]
[ irq_sprite_ypos#11 irq_sprite_ypos#1 irq_sprite_ypos#2 irq_sprite_ypos#3 ]
[ irq_sprite_ptr#11 irq_sprite_ptr#1 irq_sprite_ptr#2 irq_sprite_ptr#3 ]
Coalescing volatile variable equivalence classes [ irq_raster_next#0 ] and [ irq_raster_next#4 irq_raster_next#1 irq_raster_next#2 irq_raster_next#3 ]
Coalescing volatile variable equivalence classes [ irq_sprite_ypos#0 ] and [ irq_sprite_ypos#11 irq_sprite_ypos#1 irq_sprite_ypos#2 irq_sprite_ypos#3 ]
Coalescing volatile variable equivalence classes [ irq_sprite_ptr#0 ] and [ irq_sprite_ptr#11 irq_sprite_ptr#1 irq_sprite_ptr#2 irq_sprite_ptr#3 ]
Coalescing volatile variable equivalence classes [ irq_cnt#0 ] and [ irq_cnt#3 irq_cnt#1 irq_cnt#2 ]
Added variable keyboard_event_get::return#3 to zero page equivalence class [ keyboard_event_get::return#3 ]
Added variable main::key_event#0 to zero page equivalence class [ main::key_event#0 ]
Added variable play_movement::key_event#0 to zero page equivalence class [ play_movement::key_event#0 ]
Added variable play_movement::return#3 to zero page equivalence class [ play_movement::return#3 ]
Added variable main::render#1 to zero page equivalence class [ main::render#1 ]
Added variable render_bcd::$5 to zero page equivalence class [ render_bcd::$5 ]
Added variable render_bcd::$6 to zero page equivalence class [ render_bcd::$6 ]
Added variable render_bcd::$3 to zero page equivalence class [ render_bcd::$3 ]
Added variable render_bcd::$4 to zero page equivalence class [ render_bcd::$4 ]
Added variable render_next::$6 to zero page equivalence class [ render_next::$6 ]
Added variable render_next::next_piece_char#0 to zero page equivalence class [ render_next::next_piece_char#0 ]
Added variable render_next::cell#0 to zero page equivalence class [ render_next::cell#0 ]
Added variable render_moving::$1 to zero page equivalence class [ render_moving::$1 ]
Added variable render_moving::$6 to zero page equivalence class [ render_moving::$6 ]
Added variable render_moving::screen_line#0 to zero page equivalence class [ render_moving::screen_line#0 ]
Added variable render_moving::current_cell#0 to zero page equivalence class [ render_moving::current_cell#0 ]
Added variable render_playfield::$2 to zero page equivalence class [ render_playfield::$2 ]
Added variable render_playfield::$6 to zero page equivalence class [ render_playfield::$6 ]
Added variable play_move_down::key_event#0 to zero page equivalence class [ play_move_down::key_event#0 ]
Added variable play_move_down::return#0 to zero page equivalence class [ play_move_down::return#0 ]
Added variable play_move_leftright::key_event#0 to zero page equivalence class [ play_move_leftright::key_event#0 ]
Added variable play_move_leftright::return#0 to zero page equivalence class [ play_move_leftright::return#0 ]
Added variable play_movement::$3 to zero page equivalence class [ play_movement::$3 ]
Added variable play_movement::render#2 to zero page equivalence class [ play_movement::render#2 ]
Added variable play_move_rotate::key_event#0 to zero page equivalence class [ play_move_rotate::key_event#0 ]
Added variable play_move_rotate::return#0 to zero page equivalence class [ play_move_rotate::return#0 ]
Added variable play_movement::$4 to zero page equivalence class [ play_movement::$4 ]
Added variable play_move_rotate::$5 to zero page equivalence class [ play_move_rotate::$5 ]
Added variable play_collision::return#14 to zero page equivalence class [ play_collision::return#14 ]
Added variable play_move_rotate::$2 to zero page equivalence class [ play_move_rotate::$2 ]
Added variable play_move_rotate::$7 to zero page equivalence class [ play_move_rotate::$7 ]
Added variable play_collision::piece_gfx#0 to zero page equivalence class [ play_collision::piece_gfx#0 ]
Added variable play_collision::$14 to zero page equivalence class [ play_collision::$14 ]
Added variable play_collision::playfield_line#0 to zero page equivalence class [ play_collision::playfield_line#0 ]
Added variable play_collision::i#1 to zero page equivalence class [ play_collision::i#1 ]
Added variable play_collision::$5 to zero page equivalence class [ play_collision::$5 ]
Added variable play_collision::return#13 to zero page equivalence class [ play_collision::return#13 ]
Added variable play_move_leftright::$4 to zero page equivalence class [ play_move_leftright::$4 ]
Added variable play_collision::return#1 to zero page equivalence class [ play_collision::return#1 ]
Added variable play_move_leftright::$8 to zero page equivalence class [ play_move_leftright::$8 ]
Added variable keyboard_event_pressed::return#12 to zero page equivalence class [ keyboard_event_pressed::return#12 ]
Added variable play_move_down::$2 to zero page equivalence class [ play_move_down::$2 ]
Added variable play_collision::return#0 to zero page equivalence class [ play_collision::return#0 ]
Added variable play_move_down::$12 to zero page equivalence class [ play_move_down::$12 ]
Added variable play_remove_lines::return#0 to zero page equivalence class [ play_remove_lines::return#0 ]
Added variable play_move_down::removed#0 to zero page equivalence class [ play_move_down::removed#0 ]
Added variable play_update_score::removed#0 to zero page equivalence class [ play_update_score::removed#0 ]
Added variable play_spawn_current::current_piece_idx#0 to zero page equivalence class [ play_spawn_current::current_piece_idx#0 ]
Added variable play_spawn_current::$7 to zero page equivalence class [ play_spawn_current::$7 ]
Added variable play_collision::return#10 to zero page equivalence class [ play_collision::return#10 ]
Added variable play_spawn_current::$1 to zero page equivalence class [ play_spawn_current::$1 ]
Added variable play_spawn_current::sid_rnd1_return#0 to zero page equivalence class [ play_spawn_current::sid_rnd1_return#0 ]
Added variable play_update_score::$2 to zero page equivalence class [ play_update_score::$2 ]
Added variable play_update_score::lines_before#0 to zero page equivalence class [ play_update_score::lines_before#0 ]
Added variable play_update_score::$9 to zero page equivalence class [ play_update_score::$9 ]
Added variable play_update_score::add_bcd#0 to zero page equivalence class [ play_update_score::add_bcd#0 ]
Added variable play_update_score::$4 to zero page equivalence class [ play_update_score::$4 ]
Added variable play_update_score::lines_after#0 to zero page equivalence class [ play_update_score::lines_after#0 ]
Added variable play_increase_level::$1 to zero page equivalence class [ play_increase_level::$1 ]
Added variable play_increase_level::$5 to zero page equivalence class [ play_increase_level::$5 ]
Added variable play_remove_lines::c#0 to zero page equivalence class [ play_remove_lines::c#0 ]
Added variable play_lock_current::$4 to zero page equivalence class [ play_lock_current::$4 ]
Added variable play_lock_current::playfield_line#0 to zero page equivalence class [ play_lock_current::playfield_line#0 ]
Added variable play_lock_current::i#1 to zero page equivalence class [ play_lock_current::i#1 ]
Added variable keyboard_event_pressed::$0 to zero page equivalence class [ keyboard_event_pressed::$0 ]
Added variable keyboard_event_pressed::row_bits#0 to zero page equivalence class [ keyboard_event_pressed::row_bits#0 ]
Added variable keyboard_event_pressed::$1 to zero page equivalence class [ keyboard_event_pressed::$1 ]
Added variable keyboard_event_pressed::return#11 to zero page equivalence class [ keyboard_event_pressed::return#11 ]
Added variable keyboard_matrix_read::rowid#0 to zero page equivalence class [ keyboard_matrix_read::rowid#0 ]
Added variable keyboard_matrix_read::return#2 to zero page equivalence class [ keyboard_matrix_read::return#2 ]
Added variable keyboard_event_scan::row_scan#0 to zero page equivalence class [ keyboard_event_scan::row_scan#0 ]
Added variable keyboard_event_pressed::return#0 to zero page equivalence class [ keyboard_event_pressed::return#0 ]
Added variable keyboard_event_scan::$0 to zero page equivalence class [ keyboard_event_scan::$0 ]
Added variable keyboard_event_pressed::return#1 to zero page equivalence class [ keyboard_event_pressed::return#1 ]
Added variable keyboard_event_scan::$3 to zero page equivalence class [ keyboard_event_scan::$3 ]
Added variable keyboard_event_pressed::return#2 to zero page equivalence class [ keyboard_event_pressed::return#2 ]
Added variable keyboard_event_scan::$6 to zero page equivalence class [ keyboard_event_scan::$6 ]
Added variable keyboard_event_pressed::return#10 to zero page equivalence class [ keyboard_event_pressed::return#10 ]
Added variable keyboard_event_scan::$9 to zero page equivalence class [ keyboard_event_scan::$9 ]
Added variable keyboard_event_scan::$15 to zero page equivalence class [ keyboard_event_scan::$15 ]
Added variable keyboard_event_scan::$16 to zero page equivalence class [ keyboard_event_scan::$16 ]
Added variable keyboard_event_scan::event_type#0 to zero page equivalence class [ keyboard_event_scan::event_type#0 ]
Added variable keyboard_event_scan::$23 to zero page equivalence class [ keyboard_event_scan::$23 ]
Added variable keyboard_matrix_read::return#0 to zero page equivalence class [ keyboard_matrix_read::return#0 ]
Added variable play_init::$4 to zero page equivalence class [ play_init::$4 ]
Added variable play_init::$5 to zero page equivalence class [ play_init::$5 ]
Added variable sprites_init::s2#0 to zero page equivalence class [ sprites_init::s2#0 ]
Added variable render_init::$13 to zero page equivalence class [ render_init::$13 ]
Added variable sprites_irq::ypos#0 to zero page equivalence class [ sprites_irq::ypos#0 ]
Added variable sprites_irq::$0 to zero page equivalence class [ sprites_irq::$0 ]
Added variable sprites_irq::ptr#0 to zero page equivalence class [ sprites_irq::ptr#0 ]
Added variable sprites_irq::ptr#3 to zero page equivalence class [ sprites_irq::ptr#3 ]
Added variable sprites_irq::ptr#4 to zero page equivalence class [ sprites_irq::ptr#4 ]
Added variable sprites_irq::ptr#1 to zero page equivalence class [ sprites_irq::ptr#1 ]
Added variable sprites_irq::ptr#2 to zero page equivalence class [ sprites_irq::ptr#2 ]
Complete equivalence classes
[ render_screen_show#16 render_screen_show#13 ]
[ render_screen_render#18 render_screen_render#11 ]
[ render_screen_showing#13 render_screen_showing#1 render_screen_showing#0 ]
[ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ]
[ render_score::screen#3 ]
[ render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ]
[ render_bcd::offset#6 ]
[ render_bcd::only_low#6 ]
[ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ]
[ render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ]
[ render_screen_render#15 render_screen_render#66 ]
[ next_piece_idx#12 next_piece_idx#77 next_piece_idx#78 ]
[ render_next::l#7 render_next::l#1 ]
[ render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#1 render_next::next_piece_gfx#9 ]
[ render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#4 render_next::screen_next_area#11 render_next::screen_next_area#3 ]
[ render_next::c#2 render_next::c#1 ]
[ current_ypos#13 current_ypos#98 current_ypos#99 ]
[ render_screen_render#33 render_screen_render#65 ]
[ current_xpos#59 current_xpos#119 current_xpos#120 ]
[ current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 ]
[ current_piece_char#68 current_piece_char#100 current_piece_char#101 ]
[ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ]
[ render_moving::l#4 render_moving::l#1 ]
[ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ]
[ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ]
[ render_moving::c#2 render_moving::c#1 ]
[ render_screen_render#22 render_screen_render#64 ]
[ render_playfield::l#2 render_playfield::l#1 ]
[ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
[ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ]
[ render_playfield::c#2 render_playfield::c#1 ]
[ play_movement::return#2 play_movement::render#1 play_movement::return#0 ]
[ play_move_rotate::return#2 ]
[ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
[ current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 ]
[ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ]
[ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ]
[ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ]
[ play_collision::l#6 play_collision::l#1 ]
[ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ]
[ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ]
[ play_collision::c#2 play_collision::c#1 ]
[ play_collision::return#15 ]
[ play_move_leftright::return#2 ]
[ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 ]
[ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#19 current_ypos#6 ]
[ lines_bcd#26 lines_bcd#19 lines_bcd#15 lines_bcd#17 lines_bcd#29 ]
[ score_bcd#26 score_bcd#18 score_bcd#14 score_bcd#0 score_bcd#16 score_bcd#29 ]
[ level#33 level#10 level#17 level#19 level#21 ]
[ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#21 current_movedown_slow#1 current_movedown_slow#23 current_movedown_slow#66 current_movedown_slow#10 ]
[ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ]
[ current_piece#28 current_piece#10 current_piece#15 current_piece#102 current_piece#93 ]
[ current_piece_char#29 current_piece_char#10 current_piece_char#16 current_piece_char#5 ]
[ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ]
[ current_piece_gfx#35 current_piece_gfx#13 current_piece_gfx#18 current_piece_gfx#124 current_piece_gfx#20 current_piece_gfx#21 current_piece_gfx#7 current_piece_gfx#117 ]
[ current_xpos#43 current_xpos#14 current_xpos#19 current_xpos#100 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ]
[ play_move_down::return#3 ]
[ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 next_piece_idx#16 play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ]
[ game_over#65 game_over#27 game_over#10 game_over#15 game_over#52 ]
[ play_increase_level::b#2 play_increase_level::b#1 ]
[ play_remove_lines::y#8 play_remove_lines::y#1 ]
[ play_remove_lines::removed#11 play_remove_lines::removed#8 play_remove_lines::removed#1 ]
[ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ]
[ play_remove_lines::x#2 play_remove_lines::x#1 ]
[ play_remove_lines::full#4 play_remove_lines::full#2 ]
[ play_remove_lines::w#6 play_remove_lines::w#3 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 ]
[ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ]
[ play_lock_current::l#6 play_lock_current::l#1 ]
[ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ]
[ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ]
[ play_lock_current::c#2 play_lock_current::c#1 ]
[ keyboard_event_pressed::keycode#5 ]
[ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
[ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
[ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
[ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
[ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ]
[ render_show::d018val#3 ]
[ play_init::j#2 play_init::j#1 ]
[ play_init::pli#2 play_init::pli#1 ]
[ play_init::idx#2 play_init::idx#1 ]
[ play_init::b#2 play_init::b#1 ]
[ sprites_init::s#2 sprites_init::s#1 ]
[ sprites_init::xpos#2 sprites_init::xpos#1 ]
[ render_init::i#2 render_init::i#1 ]
[ render_init::li_1#2 render_init::li_1#1 ]
[ render_init::li_2#2 render_init::li_2#1 ]
[ render_screen_original::y#6 render_screen_original::y#1 ]
[ render_screen_original::oscr#2 render_screen_original::oscr#4 render_screen_original::oscr#1 ]
[ render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 ]
[ render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 ]
[ render_screen_original::cols#6 render_screen_original::cols#5 render_screen_original::cols#4 render_screen_original::cols#7 render_screen_original::cols#3 render_screen_original::cols#1 render_screen_original::cols#2 ]
[ render_screen_original::x#6 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ]
[ sprites_irq::raster_sprite_gfx_modify#0 ]
[ irq_raster_next#0 irq_raster_next#4 irq_raster_next#1 irq_raster_next#2 irq_raster_next#3 ]
[ irq_sprite_ypos#0 irq_sprite_ypos#11 irq_sprite_ypos#1 irq_sprite_ypos#2 irq_sprite_ypos#3 ]
[ irq_sprite_ptr#0 irq_sprite_ptr#11 irq_sprite_ptr#1 irq_sprite_ptr#2 irq_sprite_ptr#3 ]
[ irq_cnt#0 irq_cnt#3 irq_cnt#1 irq_cnt#2 ]
[ keyboard_event_get::return#3 ]
[ main::key_event#0 ]
[ play_movement::key_event#0 ]
[ play_movement::return#3 ]
[ main::render#1 ]
[ render_bcd::$5 ]
[ render_bcd::$6 ]
[ render_bcd::$3 ]
[ render_bcd::$4 ]
[ render_next::$6 ]
[ render_next::next_piece_char#0 ]
[ render_next::cell#0 ]
[ render_moving::$1 ]
[ render_moving::$6 ]
[ render_moving::screen_line#0 ]
[ render_moving::current_cell#0 ]
[ render_playfield::$2 ]
[ render_playfield::$6 ]
[ play_move_down::key_event#0 ]
[ play_move_down::return#0 ]
[ play_move_leftright::key_event#0 ]
[ play_move_leftright::return#0 ]
[ play_movement::$3 ]
[ play_movement::render#2 ]
[ play_move_rotate::key_event#0 ]
[ play_move_rotate::return#0 ]
[ play_movement::$4 ]
[ play_move_rotate::$5 ]
[ play_collision::return#14 ]
[ play_move_rotate::$2 ]
[ play_move_rotate::$7 ]
[ play_collision::piece_gfx#0 ]
[ play_collision::$14 ]
[ play_collision::playfield_line#0 ]
[ play_collision::i#1 ]
[ play_collision::$5 ]
[ play_collision::return#13 ]
[ play_move_leftright::$4 ]
[ play_collision::return#1 ]
[ play_move_leftright::$8 ]
[ keyboard_event_pressed::return#12 ]
[ play_move_down::$2 ]
[ play_collision::return#0 ]
[ play_move_down::$12 ]
[ play_remove_lines::return#0 ]
[ play_move_down::removed#0 ]
[ play_update_score::removed#0 ]
[ play_spawn_current::current_piece_idx#0 ]
[ play_spawn_current::$7 ]
[ play_collision::return#10 ]
[ play_spawn_current::$1 ]
[ play_spawn_current::sid_rnd1_return#0 ]
[ play_update_score::$2 ]
[ play_update_score::lines_before#0 ]
[ play_update_score::$9 ]
[ play_update_score::add_bcd#0 ]
[ play_update_score::$4 ]
[ play_update_score::lines_after#0 ]
[ play_increase_level::$1 ]
[ play_increase_level::$5 ]
[ play_remove_lines::c#0 ]
[ play_lock_current::$4 ]
[ play_lock_current::playfield_line#0 ]
[ play_lock_current::i#1 ]
[ keyboard_event_pressed::$0 ]
[ keyboard_event_pressed::row_bits#0 ]
[ keyboard_event_pressed::$1 ]
[ keyboard_event_pressed::return#11 ]
[ keyboard_matrix_read::rowid#0 ]
[ keyboard_matrix_read::return#2 ]
[ keyboard_event_scan::row_scan#0 ]
[ keyboard_event_pressed::return#0 ]
[ keyboard_event_scan::$0 ]
[ keyboard_event_pressed::return#1 ]
[ keyboard_event_scan::$3 ]
[ keyboard_event_pressed::return#2 ]
[ keyboard_event_scan::$6 ]
[ keyboard_event_pressed::return#10 ]
[ keyboard_event_scan::$9 ]
[ keyboard_event_scan::$15 ]
[ keyboard_event_scan::$16 ]
[ keyboard_event_scan::event_type#0 ]
[ keyboard_event_scan::$23 ]
[ keyboard_matrix_read::return#0 ]
[ play_init::$4 ]
[ play_init::$5 ]
[ sprites_init::s2#0 ]
[ render_init::$13 ]
[ sprites_irq::ypos#0 ]
[ sprites_irq::$0 ]
[ sprites_irq::ptr#0 ]
[ sprites_irq::ptr#3 ]
[ sprites_irq::ptr#4 ]
[ sprites_irq::ptr#1 ]
[ sprites_irq::ptr#2 ]
Allocated zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 ]
Allocated zp ZP_BYTE:3 [ render_screen_render#18 render_screen_render#11 ]
Allocated zp ZP_BYTE:4 [ render_screen_showing#13 render_screen_showing#1 render_screen_showing#0 ]
Allocated zp ZP_BYTE:5 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ]
Allocated zp ZP_WORD:6 [ render_score::screen#3 ]
Allocated zp ZP_WORD:8 [ render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ]
Allocated zp ZP_WORD:10 [ render_bcd::offset#6 ]
Allocated zp ZP_BYTE:12 [ render_bcd::only_low#6 ]
Allocated zp ZP_BYTE:13 [ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ]
Allocated zp ZP_WORD:14 [ render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ]
Allocated zp ZP_BYTE:16 [ render_screen_render#15 render_screen_render#66 ]
Allocated zp ZP_BYTE:17 [ next_piece_idx#12 next_piece_idx#77 next_piece_idx#78 ]
Allocated zp ZP_BYTE:18 [ render_next::l#7 render_next::l#1 ]
Allocated zp ZP_WORD:19 [ render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#1 render_next::next_piece_gfx#9 ]
Allocated zp ZP_WORD:21 [ render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#4 render_next::screen_next_area#11 render_next::screen_next_area#3 ]
Allocated zp ZP_BYTE:23 [ render_next::c#2 render_next::c#1 ]
Allocated zp ZP_BYTE:24 [ current_ypos#13 current_ypos#98 current_ypos#99 ]
Allocated zp ZP_BYTE:25 [ render_screen_render#33 render_screen_render#65 ]
Allocated zp ZP_BYTE:26 [ current_xpos#59 current_xpos#119 current_xpos#120 ]
Allocated zp ZP_WORD:27 [ current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 ]
Allocated zp ZP_BYTE:29 [ current_piece_char#68 current_piece_char#100 current_piece_char#101 ]
Allocated zp ZP_BYTE:30 [ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ]
Allocated zp ZP_BYTE:31 [ render_moving::l#4 render_moving::l#1 ]
Allocated zp ZP_BYTE:32 [ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ]
Allocated zp ZP_BYTE:33 [ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ]
Allocated zp ZP_BYTE:34 [ render_moving::c#2 render_moving::c#1 ]
Allocated zp ZP_BYTE:35 [ render_screen_render#22 render_screen_render#64 ]
Allocated zp ZP_BYTE:36 [ render_playfield::l#2 render_playfield::l#1 ]
Allocated zp ZP_BYTE:37 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Allocated zp ZP_WORD:38 [ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ]
Allocated zp ZP_BYTE:40 [ render_playfield::c#2 render_playfield::c#1 ]
Allocated zp ZP_BYTE:41 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 ]
Allocated zp ZP_BYTE:42 [ play_move_rotate::return#2 ]
Allocated zp ZP_BYTE:43 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
Allocated zp ZP_WORD:44 [ current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 ]
Allocated zp ZP_BYTE:46 [ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ]
Allocated zp ZP_BYTE:47 [ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ]
Allocated zp ZP_BYTE:48 [ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ]
Allocated zp ZP_BYTE:49 [ play_collision::l#6 play_collision::l#1 ]
Allocated zp ZP_BYTE:50 [ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ]
Allocated zp ZP_BYTE:51 [ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ]
Allocated zp ZP_BYTE:52 [ play_collision::c#2 play_collision::c#1 ]
Allocated zp ZP_BYTE:53 [ play_collision::return#15 ]
Allocated zp ZP_BYTE:54 [ play_move_leftright::return#2 ]
Allocated zp ZP_BYTE:55 [ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 ]
Allocated zp ZP_BYTE:56 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#19 current_ypos#6 ]
Allocated zp ZP_WORD:57 [ lines_bcd#26 lines_bcd#19 lines_bcd#15 lines_bcd#17 lines_bcd#29 ]
Allocated zp ZP_DWORD:59 [ score_bcd#26 score_bcd#18 score_bcd#14 score_bcd#0 score_bcd#16 score_bcd#29 ]
Allocated zp ZP_BYTE:63 [ level#33 level#10 level#17 level#19 level#21 ]
Allocated zp ZP_BYTE:64 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#21 current_movedown_slow#1 current_movedown_slow#23 current_movedown_slow#66 current_movedown_slow#10 ]
Allocated zp ZP_BYTE:65 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ]
Allocated zp ZP_WORD:66 [ current_piece#28 current_piece#10 current_piece#15 current_piece#102 current_piece#93 ]
Allocated zp ZP_BYTE:68 [ current_piece_char#29 current_piece_char#10 current_piece_char#16 current_piece_char#5 ]
Allocated zp ZP_BYTE:69 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ]
Allocated zp ZP_WORD:70 [ current_piece_gfx#35 current_piece_gfx#13 current_piece_gfx#18 current_piece_gfx#124 current_piece_gfx#20 current_piece_gfx#21 current_piece_gfx#7 current_piece_gfx#117 ]
Allocated zp ZP_BYTE:72 [ current_xpos#43 current_xpos#14 current_xpos#19 current_xpos#100 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ]
Allocated zp ZP_BYTE:73 [ play_move_down::return#3 ]
Allocated zp ZP_BYTE:74 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 next_piece_idx#16 play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ]
Allocated zp ZP_BYTE:75 [ game_over#65 game_over#27 game_over#10 game_over#15 game_over#52 ]
Allocated zp ZP_BYTE:76 [ play_increase_level::b#2 play_increase_level::b#1 ]
Allocated zp ZP_BYTE:77 [ play_remove_lines::y#8 play_remove_lines::y#1 ]
Allocated zp ZP_BYTE:78 [ play_remove_lines::removed#11 play_remove_lines::removed#8 play_remove_lines::removed#1 ]
Allocated zp ZP_BYTE:79 [ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ]
Allocated zp ZP_BYTE:80 [ play_remove_lines::x#2 play_remove_lines::x#1 ]
Allocated zp ZP_BYTE:81 [ play_remove_lines::full#4 play_remove_lines::full#2 ]
Allocated zp ZP_BYTE:82 [ play_remove_lines::w#6 play_remove_lines::w#3 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 ]
Allocated zp ZP_BYTE:83 [ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ]
Allocated zp ZP_BYTE:84 [ play_lock_current::l#6 play_lock_current::l#1 ]
Allocated zp ZP_BYTE:85 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ]
Allocated zp ZP_BYTE:86 [ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ]
Allocated zp ZP_BYTE:87 [ play_lock_current::c#2 play_lock_current::c#1 ]
Allocated zp ZP_BYTE:88 [ keyboard_event_pressed::keycode#5 ]
Allocated zp ZP_BYTE:89 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
Allocated zp ZP_BYTE:90 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Allocated zp ZP_BYTE:91 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Allocated zp ZP_BYTE:92 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
Allocated zp ZP_BYTE:93 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ]
Allocated zp ZP_BYTE:94 [ render_show::d018val#3 ]
Allocated zp ZP_BYTE:95 [ play_init::j#2 play_init::j#1 ]
Allocated zp ZP_WORD:96 [ play_init::pli#2 play_init::pli#1 ]
Allocated zp ZP_BYTE:98 [ play_init::idx#2 play_init::idx#1 ]
Allocated zp ZP_BYTE:99 [ play_init::b#2 play_init::b#1 ]
Allocated zp ZP_BYTE:100 [ sprites_init::s#2 sprites_init::s#1 ]
Allocated zp ZP_BYTE:101 [ sprites_init::xpos#2 sprites_init::xpos#1 ]
Allocated zp ZP_BYTE:102 [ render_init::i#2 render_init::i#1 ]
Allocated zp ZP_WORD:103 [ render_init::li_1#2 render_init::li_1#1 ]
Allocated zp ZP_WORD:105 [ render_init::li_2#2 render_init::li_2#1 ]
Allocated zp ZP_BYTE:107 [ render_screen_original::y#6 render_screen_original::y#1 ]
Allocated zp ZP_WORD:108 [ render_screen_original::oscr#2 render_screen_original::oscr#4 render_screen_original::oscr#1 ]
Allocated zp ZP_WORD:110 [ render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 ]
Allocated zp ZP_WORD:112 [ render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 ]
Allocated zp ZP_WORD:114 [ render_screen_original::cols#6 render_screen_original::cols#5 render_screen_original::cols#4 render_screen_original::cols#7 render_screen_original::cols#3 render_screen_original::cols#1 render_screen_original::cols#2 ]
Allocated zp ZP_BYTE:116 [ render_screen_original::x#6 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ]
Allocated zp ZP_BYTE:117 [ sprites_irq::raster_sprite_gfx_modify#0 ]
Allocated zp ZP_BYTE:118 [ irq_raster_next#0 irq_raster_next#4 irq_raster_next#1 irq_raster_next#2 irq_raster_next#3 ]
Allocated zp ZP_BYTE:119 [ irq_sprite_ypos#0 irq_sprite_ypos#11 irq_sprite_ypos#1 irq_sprite_ypos#2 irq_sprite_ypos#3 ]
Allocated zp ZP_BYTE:120 [ irq_sprite_ptr#0 irq_sprite_ptr#11 irq_sprite_ptr#1 irq_sprite_ptr#2 irq_sprite_ptr#3 ]
Allocated zp ZP_BYTE:121 [ irq_cnt#0 irq_cnt#3 irq_cnt#1 irq_cnt#2 ]
Allocated zp ZP_BYTE:122 [ keyboard_event_get::return#3 ]
Allocated zp ZP_BYTE:123 [ main::key_event#0 ]
Allocated zp ZP_BYTE:124 [ play_movement::key_event#0 ]
Allocated zp ZP_BYTE:125 [ play_movement::return#3 ]
Allocated zp ZP_BYTE:126 [ main::render#1 ]
Allocated zp ZP_BYTE:127 [ render_bcd::$5 ]
Allocated zp ZP_BYTE:128 [ render_bcd::$6 ]
Allocated zp ZP_BYTE:129 [ render_bcd::$3 ]
Allocated zp ZP_BYTE:130 [ render_bcd::$4 ]
Allocated zp ZP_BYTE:131 [ render_next::$6 ]
Allocated zp ZP_BYTE:132 [ render_next::next_piece_char#0 ]
Allocated zp ZP_BYTE:133 [ render_next::cell#0 ]
Allocated zp ZP_BYTE:134 [ render_moving::$1 ]
Allocated zp ZP_BYTE:135 [ render_moving::$6 ]
Allocated zp ZP_WORD:136 [ render_moving::screen_line#0 ]
Allocated zp ZP_BYTE:138 [ render_moving::current_cell#0 ]
Allocated zp ZP_BYTE:139 [ render_playfield::$2 ]
Allocated zp ZP_BYTE:140 [ render_playfield::$6 ]
Allocated zp ZP_BYTE:141 [ play_move_down::key_event#0 ]
Allocated zp ZP_BYTE:142 [ play_move_down::return#0 ]
Allocated zp ZP_BYTE:143 [ play_move_leftright::key_event#0 ]
Allocated zp ZP_BYTE:144 [ play_move_leftright::return#0 ]
Allocated zp ZP_BYTE:145 [ play_movement::$3 ]
Allocated zp ZP_BYTE:146 [ play_movement::render#2 ]
Allocated zp ZP_BYTE:147 [ play_move_rotate::key_event#0 ]
Allocated zp ZP_BYTE:148 [ play_move_rotate::return#0 ]
Allocated zp ZP_BYTE:149 [ play_movement::$4 ]
Allocated zp ZP_BYTE:150 [ play_move_rotate::$5 ]
Allocated zp ZP_BYTE:151 [ play_collision::return#14 ]
Allocated zp ZP_BYTE:152 [ play_move_rotate::$2 ]
Allocated zp ZP_BYTE:153 [ play_move_rotate::$7 ]
Allocated zp ZP_WORD:154 [ play_collision::piece_gfx#0 ]
Allocated zp ZP_BYTE:156 [ play_collision::$14 ]
Allocated zp ZP_WORD:157 [ play_collision::playfield_line#0 ]
Allocated zp ZP_BYTE:159 [ play_collision::i#1 ]
Allocated zp ZP_BYTE:160 [ play_collision::$5 ]
Allocated zp ZP_BYTE:161 [ play_collision::return#13 ]
Allocated zp ZP_BYTE:162 [ play_move_leftright::$4 ]
Allocated zp ZP_BYTE:163 [ play_collision::return#1 ]
Allocated zp ZP_BYTE:164 [ play_move_leftright::$8 ]
Allocated zp ZP_BYTE:165 [ keyboard_event_pressed::return#12 ]
Allocated zp ZP_BYTE:166 [ play_move_down::$2 ]
Allocated zp ZP_BYTE:167 [ play_collision::return#0 ]
Allocated zp ZP_BYTE:168 [ play_move_down::$12 ]
Allocated zp ZP_BYTE:169 [ play_remove_lines::return#0 ]
Allocated zp ZP_BYTE:170 [ play_move_down::removed#0 ]
Allocated zp ZP_BYTE:171 [ play_update_score::removed#0 ]
Allocated zp ZP_BYTE:172 [ play_spawn_current::current_piece_idx#0 ]
Allocated zp ZP_BYTE:173 [ play_spawn_current::$7 ]
Allocated zp ZP_BYTE:174 [ play_collision::return#10 ]
Allocated zp ZP_BYTE:175 [ play_spawn_current::$1 ]
Allocated zp ZP_BYTE:176 [ play_spawn_current::sid_rnd1_return#0 ]
Allocated zp ZP_BYTE:177 [ play_update_score::$2 ]
Allocated zp ZP_BYTE:178 [ play_update_score::lines_before#0 ]
Allocated zp ZP_BYTE:179 [ play_update_score::$9 ]
Allocated zp ZP_DWORD:180 [ play_update_score::add_bcd#0 ]
Allocated zp ZP_BYTE:184 [ play_update_score::$4 ]
Allocated zp ZP_BYTE:185 [ play_update_score::lines_after#0 ]
Allocated zp ZP_BYTE:186 [ play_increase_level::$1 ]
Allocated zp ZP_BYTE:187 [ play_increase_level::$5 ]
Allocated zp ZP_BYTE:188 [ play_remove_lines::c#0 ]
Allocated zp ZP_BYTE:189 [ play_lock_current::$4 ]
Allocated zp ZP_WORD:190 [ play_lock_current::playfield_line#0 ]
Allocated zp ZP_BYTE:192 [ play_lock_current::i#1 ]
Allocated zp ZP_BYTE:193 [ keyboard_event_pressed::$0 ]
Allocated zp ZP_BYTE:194 [ keyboard_event_pressed::row_bits#0 ]
Allocated zp ZP_BYTE:195 [ keyboard_event_pressed::$1 ]
Allocated zp ZP_BYTE:196 [ keyboard_event_pressed::return#11 ]
Allocated zp ZP_BYTE:197 [ keyboard_matrix_read::rowid#0 ]
Allocated zp ZP_BYTE:198 [ keyboard_matrix_read::return#2 ]
Allocated zp ZP_BYTE:199 [ keyboard_event_scan::row_scan#0 ]
Allocated zp ZP_BYTE:200 [ keyboard_event_pressed::return#0 ]
Allocated zp ZP_BYTE:201 [ keyboard_event_scan::$0 ]
Allocated zp ZP_BYTE:202 [ keyboard_event_pressed::return#1 ]
Allocated zp ZP_BYTE:203 [ keyboard_event_scan::$3 ]
Allocated zp ZP_BYTE:204 [ keyboard_event_pressed::return#2 ]
Allocated zp ZP_BYTE:205 [ keyboard_event_scan::$6 ]
Allocated zp ZP_BYTE:206 [ keyboard_event_pressed::return#10 ]
Allocated zp ZP_BYTE:207 [ keyboard_event_scan::$9 ]
Allocated zp ZP_BYTE:208 [ keyboard_event_scan::$15 ]
Allocated zp ZP_BYTE:209 [ keyboard_event_scan::$16 ]
Allocated zp ZP_BYTE:210 [ keyboard_event_scan::event_type#0 ]
Allocated zp ZP_BYTE:211 [ keyboard_event_scan::$23 ]
Allocated zp ZP_BYTE:212 [ keyboard_matrix_read::return#0 ]
Allocated zp ZP_BYTE:213 [ play_init::$4 ]
Allocated zp ZP_BYTE:214 [ play_init::$5 ]
Allocated zp ZP_BYTE:215 [ sprites_init::s2#0 ]
Allocated zp ZP_BYTE:216 [ render_init::$13 ]
Allocated zp ZP_BYTE:217 [ sprites_irq::ypos#0 ]
Allocated zp ZP_BYTE:218 [ sprites_irq::$0 ]
Allocated zp ZP_BYTE:219 [ sprites_irq::ptr#0 ]
Allocated zp ZP_BYTE:220 [ sprites_irq::ptr#3 ]
Allocated zp ZP_BYTE:221 [ sprites_irq::ptr#4 ]
Allocated zp ZP_BYTE:222 [ sprites_irq::ptr#1 ]
Allocated zp ZP_BYTE:223 [ sprites_irq::ptr#2 ]

INITIAL ASM
Target platform is c64basic
  // File Comments
// Tetris Game for the Commodore 64
// The tetris game tries to match NES tetris gameplay pretty closely
// Source: https://meatfighter.com/nintendotetrisai/
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = 5
  // The offset of the sprite pointers from the screen start address
  .const SPRITE_PTRS = $3f8
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label BORDERCOL = $d020
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label BGCOL4 = $d024
  .label SPRITES_COLS = $d027
  .label VIC_CONTROL = $d011
  .label D011 = $d011
  .const VIC_ECM = $40
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label D018 = $d018
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Bits for the IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // Color Ram
  .label COLS = $d800
  // CIA#1 Port A: keyboard matrix columns and joystick #2
  .label CIA1_PORT_A = $dc00
  // CIA#1 Port B: keyboard matrix rows and joystick #1.
  .label CIA1_PORT_B = $dc01
  // CIA#1 Interrupt Status & Control Register
  .label CIA1_INTERRUPT = $dc0d
  // CIA#2 Port A: Serial bus, RS-232, VIC memory bank
  .label CIA2_PORT_A = $dd00
  // CIA #2 Port A data direction register.
  .label CIA2_PORT_A_DDR = $dd02
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  // The colors of the C64
  .const BLACK = 0
  .const RED = 2
  .const CYAN = 3
  .const PURPLE = 4
  .const GREEN = 5
  .const BLUE = 6
  .const ORANGE = 8
  .const PINK = $a
  .const DARK_GREY = $b
  .const GREY = $c
  .const LIGHT_GREEN = $d
  .const LIGHT_BLUE = $e
  .const KEY_Z = $c
  .const KEY_LSHIFT = $f
  .const KEY_X = $17
  .const KEY_DOT = $2c
  .const KEY_COMMA = $2f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  // SID registers for random number generation
  .label SID_VOICE3_FREQ = $d40e
  .label SID_VOICE3_CONTROL = $d412
  .const SID_CONTROL_NOISE = $80
  .label SID_VOICE3_OSC = $d41b
  // Address of the first screen
  .label PLAYFIELD_SCREEN_1 = $400
  // Address of the second screen
  .label PLAYFIELD_SCREEN_2 = $2c00
  // Address of the original playscreen chars
  .label PLAYFIELD_SCREEN_ORIGINAL = $1800
  // Address of the original playscreen colors
  .label PLAYFIELD_COLORS_ORIGINAL = $1c00
  // Address of the sprites covering the playfield
  .label PLAYFIELD_SPRITES = $2000
  // Address of the charset
  .label PLAYFIELD_CHARSET = $2800
  // The size of the playfield
  .const PLAYFIELD_LINES = $16
  .const PLAYFIELD_COLS = $a
  // The Y-position of the first sprite row
  .const SPRITES_FIRST_YPOS = $31
  // The rate of moving down the current piece fast (number of frames between moves if movedown is not forced)
  .const current_movedown_fast = $a
  // No collision
  .const COLLISION_NONE = 0
  // Playfield piece collision (cell on top of other cell on the playfield)
  .const COLLISION_PLAYFIELD = 1
  // Bottom collision (cell below bottom of the playfield)
  .const COLLISION_BOTTOM = 2
  // Left side collision (cell beyond the left side of the playfield)
  .const COLLISION_LEFT = 4
  // Right side collision (cell beyond the right side of the playfield)
  .const COLLISION_RIGHT = 8
  // Screen Sprite pointers on screen 1
  .label PLAYFIELD_SPRITE_PTRS_1 = PLAYFIELD_SCREEN_1+SPRITE_PTRS
  // Screen Sprite pointers on screen 2
  .label PLAYFIELD_SPRITE_PTRS_2 = PLAYFIELD_SCREEN_2+SPRITE_PTRS
  // The line of the first IRQ
  .const IRQ_RASTER_FIRST = SPRITES_FIRST_YPOS+$13
  .const toSpritePtr1_return = PLAYFIELD_SPRITES/$40
  .label keyboard_events_size = $5d
  .label render_screen_showing = 4
  .label score_bcd = $3b
  .label irq_raster_next = $76
  .label irq_sprite_ypos = $77
  .label irq_sprite_ptr = $78
  .label irq_cnt = $79
  .label current_movedown_slow = $40
  .label current_ypos = $38
  .label current_xpos = $48
  .label current_orientation = $45
  .label current_piece_gfx = $46
  .label current_piece_char = $44
  .label level_bcd = $41
  .label current_piece = $42
  .label game_over = $4b
  .label next_piece_idx = $4a
  .label level = $3f
  .label render_screen_render = 3
  .label render_screen_show = 2
  .label current_ypos_13 = $18
  .label render_screen_render_15 = $10
  .label next_piece_idx_12 = $11
  .label current_movedown_counter = 5
  .label lines_bcd = $39
  .label current_piece_17 = $2c
  .label render_screen_render_22 = $23
  .label render_screen_render_33 = $19
  .label current_xpos_59 = $1a
  .label current_piece_gfx_64 = $1b
  .label current_piece_char_68 = $1d
  .label render_screen_render_64 = $23
  .label current_ypos_98 = $18
  .label current_ypos_99 = $18
  .label render_screen_render_65 = $19
  .label current_xpos_119 = $1a
  .label current_xpos_120 = $1a
  .label current_piece_gfx_112 = $1b
  .label current_piece_gfx_113 = $1b
  .label current_piece_char_100 = $1d
  .label current_piece_char_101 = $1d
  .label render_screen_render_66 = $10
  .label next_piece_idx_77 = $11
  .label next_piece_idx_78 = $11
  .label current_piece_96 = $2c
  .label current_piece_97 = $2c
  .label current_piece_98 = $2c
  .label current_piece_99 = $2c
  .label current_piece_100 = $2c
  // @begin
bbegin:
  jmp b1
  // @1
b1:
  // [1] (byte) render_screen_showing#0 ← (byte) 0 -- vbuz1=vbuc1 
  // The screen currently being showed to the user. $00 for screen 1 / $20 for screen 2.
  lda #0
  sta.z render_screen_showing
  // [2] (dword) score_bcd#0 ← (byte) 0 -- vduz1=vbuc1 
  // Current score in BCD-format
  lda #0
  sta.z score_bcd
  lda #0
  sta.z score_bcd+1
  sta.z score_bcd+2
  sta.z score_bcd+3
  // kickasm(location (const byte*) PLAYFIELD_CHARSET#0) {{ .fill 8,$00 // Place a filled char at the start of the charset     .import binary "playfield-screen.imap"  }}
  // kickasm(location (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0) {{ // Load chars for the screen   .var screen = LoadBinary("playfield-screen.iscr")    // Load extended colors for the screen   .var extended = LoadBinary("playfield-extended.col")   // screen.get(i)+1 because the charset is loaded into PLAYFIELD_CHARSET+8   // extended.get(i)-1 because the extended colors are 1-based (1/2/3/4)   // <<6 to move extended colors to the upper 2 bits   .fill screen.getSize(), ( (screen.get(i)+1) | (extended.get(i)-1)<<6 )  }}
  // kickasm(location (const byte*) PLAYFIELD_COLORS_ORIGINAL#0) {{ .import binary "playfield-screen.col"  }}
  // Original Color Data
  jmp b2
  // @2
b2:
  // kickasm(location (const byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000)) 	// Put the sprites into memory  	.for(var sy=0;sy<10;sy++) { 	    .var sprite_gfx_y = sy*20 		.for(var sx=0;sx<3;sx++) { 	    	.for (var y=0;y<21; y++) { 	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21) 		    	.for (var c=0; c<3; c++) { 	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y) 	            } 	        } 	    	.byte 0 	  	} 	}  }}
  jmp b3
  // @3
b3:
  // [7] (byte) irq_raster_next#0 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
  // The raster line of the next IRQ
  lda #IRQ_RASTER_FIRST
  sta.z irq_raster_next
  // [8] (byte) irq_sprite_ypos#0 ← (const byte) SPRITES_FIRST_YPOS#0+(byte) $15 -- vbuz1=vbuc1 
  // Y-pos of the sprites on the next IRQ
  lda #SPRITES_FIRST_YPOS+$15
  sta.z irq_sprite_ypos
  // [9] phi from @3 to toSpritePtr1 [phi:@3->toSpritePtr1]
toSpritePtr1_from_b3:
  jmp toSpritePtr1
  // toSpritePtr1
toSpritePtr1:
  jmp b5
  // @5
b5:
  // [10] (byte) irq_sprite_ptr#0 ← (const byte) toSpritePtr1_return#0+(byte) 3 -- vbuz1=vbuc1 
  // Index of the sprites to show on the next IRQ
  lda #toSpritePtr1_return+3
  sta.z irq_sprite_ptr
  // [11] (byte) irq_cnt#0 ← (byte) 0 -- vbuz1=vbuc1 
  // Counting the 10 IRQs
  lda #0
  sta.z irq_cnt
  // [12] phi from @5 to @4 [phi:@5->@4]
b4_from_b5:
  jmp b4
  // @4
b4:
  // [13] call main 
  // [15] phi from @4 to main [phi:@4->main]
main_from_b4:
  jsr main
  // [14] phi from @4 to @end [phi:@4->@end]
bend_from_b4:
  jmp bend
  // @end
bend:
  // main
main: {
    .label key_event = $7b
    .label render = $7e
    // [16] call sid_rnd_init 
    jsr sid_rnd_init
    jmp b8
    // main::@8
  b8:
    // asm { sei  }
    sei
    // [18] call render_init 
    // [498] phi from main::@8 to render_init [phi:main::@8->render_init]
  render_init_from_b8:
    jsr render_init
    // [19] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  b9_from_b8:
    jmp b9
    // main::@9
  b9:
    // [20] call sprites_init 
    jsr sprites_init
    // [21] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  b10_from_b9:
    jmp b10
    // main::@10
  b10:
    // [22] call sprites_irq_init 
    jsr sprites_irq_init
    // [23] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  b11_from_b10:
    jmp b11
    // main::@11
  b11:
    // [24] call play_init 
    // [457] phi from main::@11 to play_init [phi:main::@11->play_init]
  play_init_from_b11:
    jsr play_init
    // [25] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  b12_from_b11:
    jmp b12
    // main::@12
  b12:
    // [26] call play_spawn_current 
    // [287] phi from main::@12 to play_spawn_current [phi:main::@12->play_spawn_current]
  play_spawn_current_from_b12:
    // [287] phi (byte) game_over#65 = (byte) 0 [phi:main::@12->play_spawn_current#0] -- vbuz1=vbuc1 
    lda #0
    sta.z game_over
    // [287] phi (byte) next_piece_idx#17 = (byte) 0 [phi:main::@12->play_spawn_current#1] -- vbuz1=vbuc1 
    lda #0
    sta.z next_piece_idx
    jsr play_spawn_current
    // [27] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  b13_from_b12:
    jmp b13
    // main::@13
  b13:
    // [28] call play_spawn_current 
    // [287] phi from main::@13 to play_spawn_current [phi:main::@13->play_spawn_current]
  play_spawn_current_from_b13:
    // [287] phi (byte) game_over#65 = (byte) game_over#52 [phi:main::@13->play_spawn_current#0] -- register_copy 
    // [287] phi (byte) next_piece_idx#17 = (byte) play_spawn_current::piece_idx#2 [phi:main::@13->play_spawn_current#1] -- register_copy 
    jsr play_spawn_current
    // [29] phi from main::@13 to main::@14 [phi:main::@13->main::@14]
  b14_from_b13:
    jmp b14
    // main::@14
  b14:
    // [30] call render_playfield 
    // [152] phi from main::@14 to render_playfield [phi:main::@14->render_playfield]
  render_playfield_from_b14:
    // [152] phi (byte) render_screen_render#22 = (byte) $20 [phi:main::@14->render_playfield#0] -- vbuz1=vbuc1 
    lda #$20
    sta.z render_screen_render_22
    jsr render_playfield
    jmp b15
    // main::@15
  b15:
    // [31] (byte~) current_ypos#98 ← (byte) current_ypos#6 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z current_ypos_98
    // [32] (byte~) current_xpos#119 ← (byte) current_xpos#100 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z current_xpos_119
    // [33] (byte*~) current_piece_gfx#112 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current._7
    lda PIECES,y
    sta.z current_piece_gfx_112
    lda PIECES+1,y
    sta.z current_piece_gfx_112+1
    // [34] (byte~) current_piece_char#100 ← (byte) current_piece_char#5 -- vbuz1=vbuz2 
    lda.z current_piece_char
    sta.z current_piece_char_100
    // [35] call render_moving 
    // [130] phi from main::@15 to render_moving [phi:main::@15->render_moving]
  render_moving_from_b15:
    // [130] phi (byte) current_piece_char#68 = (byte~) current_piece_char#100 [phi:main::@15->render_moving#0] -- register_copy 
    // [130] phi (byte*) current_piece_gfx#64 = (byte*~) current_piece_gfx#112 [phi:main::@15->render_moving#1] -- register_copy 
    // [130] phi (byte) current_xpos#59 = (byte~) current_xpos#119 [phi:main::@15->render_moving#2] -- register_copy 
    // [130] phi (byte) render_screen_render#33 = (byte) $20 [phi:main::@15->render_moving#3] -- vbuz1=vbuc1 
    lda #$20
    sta.z render_screen_render_33
    // [130] phi (byte) current_ypos#13 = (byte~) current_ypos#98 [phi:main::@15->render_moving#4] -- register_copy 
    jsr render_moving
    jmp b16
    // main::@16
  b16:
    // [36] (byte~) next_piece_idx#77 ← (byte) play_spawn_current::piece_idx#2 -- vbuz1=vbuz2 
    lda.z play_spawn_current.piece_idx
    sta.z next_piece_idx_77
    // [37] call render_next 
    // [109] phi from main::@16 to render_next [phi:main::@16->render_next]
  render_next_from_b16:
    // [109] phi (byte) next_piece_idx#12 = (byte~) next_piece_idx#77 [phi:main::@16->render_next#0] -- register_copy 
    // [109] phi (byte) render_screen_render#15 = (byte) $20 [phi:main::@16->render_next#1] -- vbuz1=vbuc1 
    lda #$20
    sta.z render_screen_render_15
    jsr render_next
    jmp b17
    // main::@17
  b17:
    // [38] (byte*~) current_piece#102 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current._7
    lda PIECES,y
    sta.z current_piece
    lda PIECES+1,y
    sta.z current_piece+1
    // [39] (byte*~) current_piece_gfx#124 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current._7
    lda PIECES,y
    sta.z current_piece_gfx
    lda PIECES+1,y
    sta.z current_piece_gfx+1
    // [40] phi from main::@17 to main::@1 [phi:main::@17->main::@1]
  b1_from_b17:
    // [40] phi (byte) level_bcd#11 = (byte) 0 [phi:main::@17->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z level_bcd
    // [40] phi (byte) level#10 = (byte) 0 [phi:main::@17->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z level
    // [40] phi (dword) score_bcd#18 = (dword) score_bcd#0 [phi:main::@17->main::@1#2] -- register_copy 
    // [40] phi (word) lines_bcd#19 = (byte) 0 [phi:main::@17->main::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta.z lines_bcd
    lda #>0
    sta.z lines_bcd+1
    // [40] phi (byte) current_movedown_counter#16 = (byte) 0 [phi:main::@17->main::@1#4] -- vbuz1=vbuc1 
    lda #0
    sta.z current_movedown_counter
    // [40] phi (byte) keyboard_events_size#19 = (byte) 0 [phi:main::@17->main::@1#5] -- vbuz1=vbuc1 
    lda #0
    sta.z keyboard_events_size
    // [40] phi (byte) render_screen_showing#13 = (byte) render_screen_showing#0 [phi:main::@17->main::@1#6] -- register_copy 
    // [40] phi (byte) next_piece_idx#10 = (byte) play_spawn_current::piece_idx#2 [phi:main::@17->main::@1#7] -- register_copy 
    // [40] phi (byte) game_over#10 = (byte) game_over#52 [phi:main::@17->main::@1#8] -- register_copy 
    // [40] phi (byte) current_ypos#11 = (byte) current_ypos#6 [phi:main::@17->main::@1#9] -- register_copy 
    // [40] phi (byte) current_xpos#14 = (byte) current_xpos#100 [phi:main::@17->main::@1#10] -- register_copy 
    // [40] phi (byte*) current_piece_gfx#13 = (byte*~) current_piece_gfx#124 [phi:main::@17->main::@1#11] -- register_copy 
    // [40] phi (byte) current_orientation#13 = (byte) 0 [phi:main::@17->main::@1#12] -- vbuz1=vbuc1 
    lda #0
    sta.z current_orientation
    // [40] phi (byte) current_piece_char#10 = (byte) current_piece_char#5 [phi:main::@17->main::@1#13] -- register_copy 
    // [40] phi (byte*) current_piece#10 = (byte*~) current_piece#102 [phi:main::@17->main::@1#14] -- register_copy 
    // [40] phi (byte) current_movedown_slow#14 = (byte) current_movedown_slow#1 [phi:main::@17->main::@1#15] -- register_copy 
    // [40] phi (byte) render_screen_render#18 = (byte) $20 [phi:main::@17->main::@1#16] -- vbuz1=vbuc1 
    lda #$20
    sta.z render_screen_render
    // [40] phi (byte) render_screen_show#16 = (byte) 0 [phi:main::@17->main::@1#17] -- vbuz1=vbuc1 
    lda #0
    sta.z render_screen_show
    jmp b1
    // [40] phi from main::@25 main::@6 to main::@1 [phi:main::@25/main::@6->main::@1]
  b1_from_b25:
  b1_from_b6:
    // [40] phi (byte) level_bcd#11 = (byte) level_bcd#17 [phi:main::@25/main::@6->main::@1#0] -- register_copy 
    // [40] phi (byte) level#10 = (byte) level#17 [phi:main::@25/main::@6->main::@1#1] -- register_copy 
    // [40] phi (dword) score_bcd#18 = (dword) score_bcd#14 [phi:main::@25/main::@6->main::@1#2] -- register_copy 
    // [40] phi (word) lines_bcd#19 = (word) lines_bcd#15 [phi:main::@25/main::@6->main::@1#3] -- register_copy 
    // [40] phi (byte) current_movedown_counter#16 = (byte) current_movedown_counter#14 [phi:main::@25/main::@6->main::@1#4] -- register_copy 
    // [40] phi (byte) keyboard_events_size#19 = (byte) keyboard_events_size#16 [phi:main::@25/main::@6->main::@1#5] -- register_copy 
    // [40] phi (byte) render_screen_showing#13 = (byte) render_screen_showing#1 [phi:main::@25/main::@6->main::@1#6] -- register_copy 
    // [40] phi (byte) next_piece_idx#10 = (byte) next_piece_idx#16 [phi:main::@25/main::@6->main::@1#7] -- register_copy 
    // [40] phi (byte) game_over#10 = (byte) game_over#15 [phi:main::@25/main::@6->main::@1#8] -- register_copy 
    // [40] phi (byte) current_ypos#11 = (byte) current_ypos#19 [phi:main::@25/main::@6->main::@1#9] -- register_copy 
    // [40] phi (byte) current_xpos#14 = (byte) current_xpos#19 [phi:main::@25/main::@6->main::@1#10] -- register_copy 
    // [40] phi (byte*) current_piece_gfx#13 = (byte*) current_piece_gfx#18 [phi:main::@25/main::@6->main::@1#11] -- register_copy 
    // [40] phi (byte) current_orientation#13 = (byte) current_orientation#17 [phi:main::@25/main::@6->main::@1#12] -- register_copy 
    // [40] phi (byte) current_piece_char#10 = (byte) current_piece_char#16 [phi:main::@25/main::@6->main::@1#13] -- register_copy 
    // [40] phi (byte*) current_piece#10 = (byte*) current_piece#15 [phi:main::@25/main::@6->main::@1#14] -- register_copy 
    // [40] phi (byte) current_movedown_slow#14 = (byte) current_movedown_slow#21 [phi:main::@25/main::@6->main::@1#15] -- register_copy 
    // [40] phi (byte) render_screen_render#18 = (byte) render_screen_render#11 [phi:main::@25/main::@6->main::@1#16] -- register_copy 
    // [40] phi (byte) render_screen_show#16 = (byte) render_screen_show#13 [phi:main::@25/main::@6->main::@1#17] -- register_copy 
    jmp b1
    // main::@1
  b1:
    jmp b2
  // Wait for a frame to pass
    // main::@2
  b2:
    // [41] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b2
    // [42] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
    // main::@3
  b3:
    // [43] call render_show 
    jsr render_show
    // [44] phi from main::@3 to main::@18 [phi:main::@3->main::@18]
  b18_from_b3:
    jmp b18
    // main::@18
  b18:
    // [45] call keyboard_event_scan 
    // [392] phi from main::@18 to keyboard_event_scan [phi:main::@18->keyboard_event_scan]
  keyboard_event_scan_from_b18:
    jsr keyboard_event_scan
    // [46] phi from main::@18 to main::@19 [phi:main::@18->main::@19]
  b19_from_b18:
    jmp b19
    // main::@19
  b19:
    // [47] call keyboard_event_get 
    jsr keyboard_event_get
    // [48] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2 -- vbuz1=vbuz2 
    lda.z keyboard_event_get.return
    sta.z keyboard_event_get.return_3
    jmp b20
    // main::@20
  b20:
    // [49] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3 -- vbuz1=vbuz2 
    lda.z keyboard_event_get.return_3
    sta.z key_event
    // [50] if((byte) game_over#10==(byte) 0) goto main::@4 -- vbuz1_eq_0_then_la1 
    lda.z game_over
    cmp #0
    beq b4
    jmp b5
    // main::@5
  b5:
    // [51] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp b5
    // main::@4
  b4:
    // [52] (byte) play_movement::key_event#0 ← (byte) main::key_event#0 -- vbuz1=vbuz2 
    lda.z key_event
    sta.z play_movement.key_event
    // [53] call play_movement 
    jsr play_movement
    // [54] (byte) play_movement::return#3 ← (byte) play_movement::return#2 -- vbuz1=vbuz2 
    lda.z play_movement.return
    sta.z play_movement.return_3
    jmp b21
    // main::@21
  b21:
    // [55] (byte) main::render#1 ← (byte) play_movement::return#3 -- vbuz1=vbuz2 
    lda.z play_movement.return_3
    sta.z render
    jmp b6
    // main::@6
  b6:
    // [56] if((byte) main::render#1==(byte) 0) goto main::@1 -- vbuz1_eq_0_then_la1 
    lda.z render
    cmp #0
    beq b1_from_b6
    jmp b7
    // main::@7
  b7:
    // [57] (byte~) render_screen_render#64 ← (byte) render_screen_render#18 -- vbuz1=vbuz2 
    lda.z render_screen_render
    sta.z render_screen_render_64
    // [58] call render_playfield 
    // [152] phi from main::@7 to render_playfield [phi:main::@7->render_playfield]
  render_playfield_from_b7:
    // [152] phi (byte) render_screen_render#22 = (byte~) render_screen_render#64 [phi:main::@7->render_playfield#0] -- register_copy 
    jsr render_playfield
    jmp b22
    // main::@22
  b22:
    // [59] (byte~) current_ypos#99 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z current_ypos_99
    // [60] (byte~) render_screen_render#65 ← (byte) render_screen_render#18 -- vbuz1=vbuz2 
    lda.z render_screen_render
    sta.z render_screen_render_65
    // [61] (byte~) current_xpos#120 ← (byte) current_xpos#19 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z current_xpos_120
    // [62] (byte*~) current_piece_gfx#113 ← (byte*) current_piece_gfx#18 -- pbuz1=pbuz2 
    lda.z current_piece_gfx
    sta.z current_piece_gfx_113
    lda.z current_piece_gfx+1
    sta.z current_piece_gfx_113+1
    // [63] (byte~) current_piece_char#101 ← (byte) current_piece_char#16 -- vbuz1=vbuz2 
    lda.z current_piece_char
    sta.z current_piece_char_101
    // [64] call render_moving 
    // [130] phi from main::@22 to render_moving [phi:main::@22->render_moving]
  render_moving_from_b22:
    // [130] phi (byte) current_piece_char#68 = (byte~) current_piece_char#101 [phi:main::@22->render_moving#0] -- register_copy 
    // [130] phi (byte*) current_piece_gfx#64 = (byte*~) current_piece_gfx#113 [phi:main::@22->render_moving#1] -- register_copy 
    // [130] phi (byte) current_xpos#59 = (byte~) current_xpos#120 [phi:main::@22->render_moving#2] -- register_copy 
    // [130] phi (byte) render_screen_render#33 = (byte~) render_screen_render#65 [phi:main::@22->render_moving#3] -- register_copy 
    // [130] phi (byte) current_ypos#13 = (byte~) current_ypos#99 [phi:main::@22->render_moving#4] -- register_copy 
    jsr render_moving
    jmp b23
    // main::@23
  b23:
    // [65] (byte~) render_screen_render#66 ← (byte) render_screen_render#18 -- vbuz1=vbuz2 
    lda.z render_screen_render
    sta.z render_screen_render_66
    // [66] (byte~) next_piece_idx#78 ← (byte) next_piece_idx#16 -- vbuz1=vbuz2 
    lda.z next_piece_idx
    sta.z next_piece_idx_78
    // [67] call render_next 
    // [109] phi from main::@23 to render_next [phi:main::@23->render_next]
  render_next_from_b23:
    // [109] phi (byte) next_piece_idx#12 = (byte~) next_piece_idx#78 [phi:main::@23->render_next#0] -- register_copy 
    // [109] phi (byte) render_screen_render#15 = (byte~) render_screen_render#66 [phi:main::@23->render_next#1] -- register_copy 
    jsr render_next
    // [68] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
  b24_from_b23:
    jmp b24
    // main::@24
  b24:
    // [69] call render_score 
    jsr render_score
    // [70] phi from main::@24 to main::@25 [phi:main::@24->main::@25]
  b25_from_b24:
    jmp b25
    // main::@25
  b25:
    // [71] call render_screen_swap 
    jsr render_screen_swap
    jmp b1_from_b25
}
  // render_screen_swap
// Swap rendering to the other screen (used for double buffering)
render_screen_swap: {
    // [72] (byte) render_screen_render#11 ← (byte) render_screen_render#18 ^ (byte) $20 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #$20
    eor.z render_screen_render
    sta.z render_screen_render
    // [73] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte) $20 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #$20
    eor.z render_screen_show
    sta.z render_screen_show
    jmp breturn
    // render_screen_swap::@return
  breturn:
    // [74] return 
    rts
}
  // render_score
// Show the current score
render_score: {
    .const score_offset = $28*5+$1c
    .const lines_offset = $28*1+$16
    .const level_offset = $28*$13+$1f
    .label score_bytes = score_bcd
    .label screen = 6
    // [75] if((byte) render_screen_render#18==(byte) 0) goto render_score::@1 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_render
    cmp #0
    beq b1_from_render_score
    // [77] phi from render_score to render_score::@2 [phi:render_score->render_score::@2]
  b2_from_render_score:
    // [77] phi (byte*) render_score::screen#3 = (const byte*) PLAYFIELD_SCREEN_2#0 [phi:render_score->render_score::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2
    sta.z screen
    lda #>PLAYFIELD_SCREEN_2
    sta.z screen+1
    jmp b2
    // [76] phi from render_score to render_score::@1 [phi:render_score->render_score::@1]
  b1_from_render_score:
    jmp b1
    // render_score::@1
  b1:
    // [77] phi from render_score::@1 to render_score::@2 [phi:render_score::@1->render_score::@2]
  b2_from_b1:
    // [77] phi (byte*) render_score::screen#3 = (const byte*) PLAYFIELD_SCREEN_1#0 [phi:render_score::@1->render_score::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1
    sta.z screen
    lda #>PLAYFIELD_SCREEN_1
    sta.z screen+1
    jmp b2
    // render_score::@2
  b2:
    // [78] (byte*) render_bcd::screen#0 ← (byte*) render_score::screen#3 -- pbuz1=pbuz2 
    lda.z screen
    sta.z render_bcd.screen
    lda.z screen+1
    sta.z render_bcd.screen+1
    // [79] (byte) render_bcd::bcd#0 ← *((const byte*) render_score::score_bytes#0+(byte) 2) -- vbuz1=_deref_pbuc1 
    lda score_bytes+2
    sta.z render_bcd.bcd
    // [80] call render_bcd 
    // [97] phi from render_score::@2 to render_bcd [phi:render_score::@2->render_bcd]
  render_bcd_from_b2:
    // [97] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#0 [phi:render_score::@2->render_bcd#0] -- register_copy 
    // [97] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@2->render_bcd#1] -- vbuz1=vbuc1 
    lda #0
    sta.z render_bcd.only_low
    // [97] phi (word) render_bcd::offset#6 = (const word) render_score::score_offset#0 [phi:render_score::@2->render_bcd#2] -- vwuz1=vwuc1 
    lda #<score_offset
    sta.z render_bcd.offset
    lda #>score_offset
    sta.z render_bcd.offset+1
    // [97] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#0 [phi:render_score::@2->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp b3
    // render_score::@3
  b3:
    // [81] (byte*) render_bcd::screen#1 ← (byte*) render_score::screen#3 -- pbuz1=pbuz2 
    lda.z screen
    sta.z render_bcd.screen
    lda.z screen+1
    sta.z render_bcd.screen+1
    // [82] (byte) render_bcd::bcd#1 ← *((const byte*) render_score::score_bytes#0+(byte) 1) -- vbuz1=_deref_pbuc1 
    lda score_bytes+1
    sta.z render_bcd.bcd
    // [83] call render_bcd 
    // [97] phi from render_score::@3 to render_bcd [phi:render_score::@3->render_bcd]
  render_bcd_from_b3:
    // [97] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#1 [phi:render_score::@3->render_bcd#0] -- register_copy 
    // [97] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@3->render_bcd#1] -- vbuz1=vbuc1 
    lda #0
    sta.z render_bcd.only_low
    // [97] phi (word) render_bcd::offset#6 = (const word) render_score::score_offset#0+(byte) 2 [phi:render_score::@3->render_bcd#2] -- vwuz1=vwuc1 
    lda #<score_offset+2
    sta.z render_bcd.offset
    lda #>score_offset+2
    sta.z render_bcd.offset+1
    // [97] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#1 [phi:render_score::@3->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp b4
    // render_score::@4
  b4:
    // [84] (byte*) render_bcd::screen#2 ← (byte*) render_score::screen#3 -- pbuz1=pbuz2 
    lda.z screen
    sta.z render_bcd.screen
    lda.z screen+1
    sta.z render_bcd.screen+1
    // [85] (byte) render_bcd::bcd#2 ← *((const byte*) render_score::score_bytes#0) -- vbuz1=_deref_pbuc1 
    lda.z score_bytes
    sta.z render_bcd.bcd
    // [86] call render_bcd 
    // [97] phi from render_score::@4 to render_bcd [phi:render_score::@4->render_bcd]
  render_bcd_from_b4:
    // [97] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#2 [phi:render_score::@4->render_bcd#0] -- register_copy 
    // [97] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@4->render_bcd#1] -- vbuz1=vbuc1 
    lda #0
    sta.z render_bcd.only_low
    // [97] phi (word) render_bcd::offset#6 = (const word) render_score::score_offset#0+(byte) 4 [phi:render_score::@4->render_bcd#2] -- vwuz1=vwuc1 
    lda #<score_offset+4
    sta.z render_bcd.offset
    lda #>score_offset+4
    sta.z render_bcd.offset+1
    // [97] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#2 [phi:render_score::@4->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp b5
    // render_score::@5
  b5:
    // [87] (byte) render_bcd::bcd#3 ← > (word) lines_bcd#15 -- vbuz1=_hi_vwuz2 
    lda.z lines_bcd+1
    sta.z render_bcd.bcd
    // [88] (byte*) render_bcd::screen#3 ← (byte*) render_score::screen#3 -- pbuz1=pbuz2 
    lda.z screen
    sta.z render_bcd.screen
    lda.z screen+1
    sta.z render_bcd.screen+1
    // [89] call render_bcd 
    // [97] phi from render_score::@5 to render_bcd [phi:render_score::@5->render_bcd]
  render_bcd_from_b5:
    // [97] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#3 [phi:render_score::@5->render_bcd#0] -- register_copy 
    // [97] phi (byte) render_bcd::only_low#6 = (byte) 1 [phi:render_score::@5->render_bcd#1] -- vbuz1=vbuc1 
    lda #1
    sta.z render_bcd.only_low
    // [97] phi (word) render_bcd::offset#6 = (const word) render_score::lines_offset#0 [phi:render_score::@5->render_bcd#2] -- vwuz1=vwuc1 
    lda #<lines_offset
    sta.z render_bcd.offset
    lda #>lines_offset
    sta.z render_bcd.offset+1
    // [97] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#3 [phi:render_score::@5->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp b6
    // render_score::@6
  b6:
    // [90] (byte) render_bcd::bcd#4 ← < (word) lines_bcd#15 -- vbuz1=_lo_vwuz2 
    lda.z lines_bcd
    sta.z render_bcd.bcd
    // [91] (byte*) render_bcd::screen#4 ← (byte*) render_score::screen#3 -- pbuz1=pbuz2 
    lda.z screen
    sta.z render_bcd.screen
    lda.z screen+1
    sta.z render_bcd.screen+1
    // [92] call render_bcd 
    // [97] phi from render_score::@6 to render_bcd [phi:render_score::@6->render_bcd]
  render_bcd_from_b6:
    // [97] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#4 [phi:render_score::@6->render_bcd#0] -- register_copy 
    // [97] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@6->render_bcd#1] -- vbuz1=vbuc1 
    lda #0
    sta.z render_bcd.only_low
    // [97] phi (word) render_bcd::offset#6 = (const word) render_score::lines_offset#0+(byte) 1 [phi:render_score::@6->render_bcd#2] -- vwuz1=vwuc1 
    lda #<lines_offset+1
    sta.z render_bcd.offset
    lda #>lines_offset+1
    sta.z render_bcd.offset+1
    // [97] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#4 [phi:render_score::@6->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp b7
    // render_score::@7
  b7:
    // [93] (byte*) render_bcd::screen#5 ← (byte*) render_score::screen#3 -- pbuz1=pbuz2 
    lda.z screen
    sta.z render_bcd.screen
    lda.z screen+1
    sta.z render_bcd.screen+1
    // [94] (byte) render_bcd::bcd#5 ← (byte) level_bcd#17 -- vbuz1=vbuz2 
    lda.z level_bcd
    sta.z render_bcd.bcd
    // [95] call render_bcd 
    // [97] phi from render_score::@7 to render_bcd [phi:render_score::@7->render_bcd]
  render_bcd_from_b7:
    // [97] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#5 [phi:render_score::@7->render_bcd#0] -- register_copy 
    // [97] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@7->render_bcd#1] -- vbuz1=vbuc1 
    lda #0
    sta.z render_bcd.only_low
    // [97] phi (word) render_bcd::offset#6 = (const word) render_score::level_offset#0 [phi:render_score::@7->render_bcd#2] -- vwuz1=vwuc1 
    lda #<level_offset
    sta.z render_bcd.offset
    lda #>level_offset
    sta.z render_bcd.offset+1
    // [97] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#5 [phi:render_score::@7->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp breturn
    // render_score::@return
  breturn:
    // [96] return 
    rts
}
  // render_bcd
// Render BCD digits on a screen.
// - screen: pointer to the screen to render on
// - offset: offset on the screen
// - bcd: The BCD-value to render
// - only_low: if non-zero only renders the low digit
// render_bcd(byte* zeropage(8) screen, word zeropage($a) offset, byte zeropage($d) bcd, byte zeropage($c) only_low)
render_bcd: {
    .const ZERO_CHAR = $35
    .label _3 = $81
    .label _4 = $82
    .label _5 = $7f
    .label _6 = $80
    .label screen = 8
    .label bcd = $d
    .label screen_pos = $e
    .label offset = $a
    .label only_low = $c
    // [98] (byte*) render_bcd::screen_pos#0 ← (byte*) render_bcd::screen#6 + (word) render_bcd::offset#6 -- pbuz1=pbuz2_plus_vwuz3 
    lda.z screen
    clc
    adc.z offset
    sta.z screen_pos
    lda.z screen+1
    adc.z offset+1
    sta.z screen_pos+1
    // [99] if((byte) render_bcd::only_low#6!=(byte) 0) goto render_bcd::@1 -- vbuz1_neq_0_then_la1 
    lda.z only_low
    cmp #0
    bne b1_from_render_bcd
    jmp b2
    // render_bcd::@2
  b2:
    // [100] (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#6 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z bcd
    lsr
    lsr
    lsr
    lsr
    sta.z _5
    // [101] (byte~) render_bcd::$6 ← (const byte) render_bcd::ZERO_CHAR#0 + (byte~) render_bcd::$5 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z _5
    axs #-[ZERO_CHAR]
    stx.z _6
    // [102] *((byte*) render_bcd::screen_pos#0) ← (byte~) render_bcd::$6 -- _deref_pbuz1=vbuz2 
    lda.z _6
    ldy #0
    sta (screen_pos),y
    // [103] (byte*) render_bcd::screen_pos#2 ← ++ (byte*) render_bcd::screen_pos#0 -- pbuz1=_inc_pbuz1 
    inc.z screen_pos
    bne !+
    inc.z screen_pos+1
  !:
    // [104] phi from render_bcd render_bcd::@2 to render_bcd::@1 [phi:render_bcd/render_bcd::@2->render_bcd::@1]
  b1_from_render_bcd:
  b1_from_b2:
    // [104] phi (byte*) render_bcd::screen_pos#3 = (byte*) render_bcd::screen_pos#0 [phi:render_bcd/render_bcd::@2->render_bcd::@1#0] -- register_copy 
    jmp b1
    // render_bcd::@1
  b1:
    // [105] (byte~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z bcd
    sta.z _3
    // [106] (byte~) render_bcd::$4 ← (const byte) render_bcd::ZERO_CHAR#0 + (byte~) render_bcd::$3 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z _3
    axs #-[ZERO_CHAR]
    stx.z _4
    // [107] *((byte*) render_bcd::screen_pos#3) ← (byte~) render_bcd::$4 -- _deref_pbuz1=vbuz2 
    lda.z _4
    ldy #0
    sta (screen_pos),y
    jmp breturn
    // render_bcd::@return
  breturn:
    // [108] return 
    rts
}
  // render_next
// Render the next tetromino in the "next" area
render_next: {
    // Find the screen area
    .const next_area_offset = $28*$c+$18+4
    .label _6 = $83
    .label next_piece_char = $84
    .label cell = $85
    .label next_piece_gfx = $13
    .label screen_next_area = $15
    .label c = $17
    .label l = $12
    // [110] if((byte) render_screen_render#15==(byte) 0) goto render_next::@1 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_render_15
    cmp #0
    beq b1_from_render_next
    // [112] phi from render_next to render_next::@2 [phi:render_next->render_next::@2]
  b2_from_render_next:
    // [112] phi (byte*) render_next::screen_next_area#11 = (const byte*) PLAYFIELD_SCREEN_2#0+(const word) render_next::next_area_offset#0 [phi:render_next->render_next::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2+next_area_offset
    sta.z screen_next_area
    lda #>PLAYFIELD_SCREEN_2+next_area_offset
    sta.z screen_next_area+1
    jmp b2
    // [111] phi from render_next to render_next::@1 [phi:render_next->render_next::@1]
  b1_from_render_next:
    jmp b1
    // render_next::@1
  b1:
    // [112] phi from render_next::@1 to render_next::@2 [phi:render_next::@1->render_next::@2]
  b2_from_b1:
    // [112] phi (byte*) render_next::screen_next_area#11 = (const byte*) PLAYFIELD_SCREEN_1#0+(const word) render_next::next_area_offset#0 [phi:render_next::@1->render_next::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1+next_area_offset
    sta.z screen_next_area
    lda #>PLAYFIELD_SCREEN_1+next_area_offset
    sta.z screen_next_area+1
    jmp b2
    // render_next::@2
  b2:
    // [113] (byte~) render_next::$6 ← (byte) next_piece_idx#12 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z next_piece_idx_12
    asl
    sta.z _6
    // [114] (byte) render_next::next_piece_char#0 ← *((const byte[]) PIECES_NEXT_CHARS#0 + (byte) next_piece_idx#12) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z next_piece_idx_12
    lda PIECES_NEXT_CHARS,y
    sta.z next_piece_char
    // [115] (byte*~) render_next::next_piece_gfx#9 ← (byte*)*((const word[]) PIECES#0 + (byte~) render_next::$6) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z _6
    lda PIECES,y
    sta.z next_piece_gfx
    lda PIECES+1,y
    sta.z next_piece_gfx+1
    // [116] phi from render_next::@2 to render_next::@3 [phi:render_next::@2->render_next::@3]
  b3_from_b2:
    // [116] phi (byte) render_next::l#7 = (byte) 0 [phi:render_next::@2->render_next::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [116] phi (byte*) render_next::screen_next_area#10 = (byte*) render_next::screen_next_area#11 [phi:render_next::@2->render_next::@3#1] -- register_copy 
    // [116] phi (byte*) render_next::next_piece_gfx#3 = (byte*~) render_next::next_piece_gfx#9 [phi:render_next::@2->render_next::@3#2] -- register_copy 
    jmp b3
    // [116] phi from render_next::@8 to render_next::@3 [phi:render_next::@8->render_next::@3]
  b3_from_b8:
    // [116] phi (byte) render_next::l#7 = (byte) render_next::l#1 [phi:render_next::@8->render_next::@3#0] -- register_copy 
    // [116] phi (byte*) render_next::screen_next_area#10 = (byte*) render_next::screen_next_area#4 [phi:render_next::@8->render_next::@3#1] -- register_copy 
    // [116] phi (byte*) render_next::next_piece_gfx#3 = (byte*) render_next::next_piece_gfx#1 [phi:render_next::@8->render_next::@3#2] -- register_copy 
    jmp b3
    // render_next::@3
  b3:
    // [117] phi from render_next::@3 to render_next::@4 [phi:render_next::@3->render_next::@4]
  b4_from_b3:
    // [117] phi (byte) render_next::c#2 = (byte) 0 [phi:render_next::@3->render_next::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [117] phi (byte*) render_next::screen_next_area#5 = (byte*) render_next::screen_next_area#10 [phi:render_next::@3->render_next::@4#1] -- register_copy 
    // [117] phi (byte*) render_next::next_piece_gfx#2 = (byte*) render_next::next_piece_gfx#3 [phi:render_next::@3->render_next::@4#2] -- register_copy 
    jmp b4
    // [117] phi from render_next::@6 to render_next::@4 [phi:render_next::@6->render_next::@4]
  b4_from_b6:
    // [117] phi (byte) render_next::c#2 = (byte) render_next::c#1 [phi:render_next::@6->render_next::@4#0] -- register_copy 
    // [117] phi (byte*) render_next::screen_next_area#5 = (byte*) render_next::screen_next_area#3 [phi:render_next::@6->render_next::@4#1] -- register_copy 
    // [117] phi (byte*) render_next::next_piece_gfx#2 = (byte*) render_next::next_piece_gfx#1 [phi:render_next::@6->render_next::@4#2] -- register_copy 
    jmp b4
    // render_next::@4
  b4:
    // [118] (byte) render_next::cell#0 ← *((byte*) render_next::next_piece_gfx#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (next_piece_gfx),y
    sta.z cell
    // [119] (byte*) render_next::next_piece_gfx#1 ← ++ (byte*) render_next::next_piece_gfx#2 -- pbuz1=_inc_pbuz1 
    inc.z next_piece_gfx
    bne !+
    inc.z next_piece_gfx+1
  !:
    // [120] if((byte) render_next::cell#0!=(byte) 0) goto render_next::@5 -- vbuz1_neq_0_then_la1 
    lda.z cell
    cmp #0
    bne b5
    jmp b7
    // render_next::@7
  b7:
    // [121] *((byte*) render_next::screen_next_area#5) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (screen_next_area),y
    jmp b6
    // render_next::@6
  b6:
    // [122] (byte*) render_next::screen_next_area#3 ← ++ (byte*) render_next::screen_next_area#5 -- pbuz1=_inc_pbuz1 
    inc.z screen_next_area
    bne !+
    inc.z screen_next_area+1
  !:
    // [123] (byte) render_next::c#1 ← ++ (byte) render_next::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [124] if((byte) render_next::c#1!=(byte) 4) goto render_next::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z c
    bne b4_from_b6
    jmp b8
    // render_next::@8
  b8:
    // [125] (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#3 + (byte) $24 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$24
    clc
    adc.z screen_next_area
    sta.z screen_next_area
    bcc !+
    inc.z screen_next_area+1
  !:
    // [126] (byte) render_next::l#1 ← ++ (byte) render_next::l#7 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [127] if((byte) render_next::l#1!=(byte) 4) goto render_next::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne b3_from_b8
    jmp breturn
    // render_next::@return
  breturn:
    // [128] return 
    rts
    // render_next::@5
  b5:
    // [129] *((byte*) render_next::screen_next_area#5) ← (byte) render_next::next_piece_char#0 -- _deref_pbuz1=vbuz2 
    lda.z next_piece_char
    ldy #0
    sta (screen_next_area),y
    jmp b6
}
  // render_moving
// Render the current moving piece at position (current_xpos, current_ypos)
// Ignores cases where parts of the tetromino is outside the playfield (sides/bottom) since the movement collision routine prevents this.
render_moving: {
    .label _1 = $86
    .label _6 = $87
    .label ypos = $1e
    .label screen_line = $88
    .label xpos = $21
    .label i = $20
    .label l = $1f
    .label current_cell = $8a
    .label c = $22
    // [131] (byte) render_moving::ypos#0 ← (byte) current_ypos#13 -- vbuz1=vbuz2 
    lda.z current_ypos_13
    sta.z ypos
    // [132] phi from render_moving to render_moving::@1 [phi:render_moving->render_moving::@1]
  b1_from_render_moving:
    // [132] phi (byte) render_moving::l#4 = (byte) 0 [phi:render_moving->render_moving::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [132] phi (byte) render_moving::i#3 = (byte) 0 [phi:render_moving->render_moving::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [132] phi (byte) render_moving::ypos#2 = (byte) render_moving::ypos#0 [phi:render_moving->render_moving::@1#2] -- register_copy 
    jmp b1
    // [132] phi from render_moving::@3 to render_moving::@1 [phi:render_moving::@3->render_moving::@1]
  b1_from_b3:
    // [132] phi (byte) render_moving::l#4 = (byte) render_moving::l#1 [phi:render_moving::@3->render_moving::@1#0] -- register_copy 
    // [132] phi (byte) render_moving::i#3 = (byte) render_moving::i#8 [phi:render_moving::@3->render_moving::@1#1] -- register_copy 
    // [132] phi (byte) render_moving::ypos#2 = (byte) render_moving::ypos#1 [phi:render_moving::@3->render_moving::@1#2] -- register_copy 
    jmp b1
    // render_moving::@1
  b1:
    // [133] if((byte) render_moving::ypos#2>=(byte) 1+(byte) 1) goto render_moving::@2 -- vbuz1_ge_vbuc1_then_la1 
    lda.z ypos
    cmp #1+1
    bcs b2
    jmp b7
    // render_moving::@7
  b7:
    // [134] (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (byte) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z i
    axs #-[4]
    stx.z i
    // [135] phi from render_moving::@5 render_moving::@7 to render_moving::@3 [phi:render_moving::@5/render_moving::@7->render_moving::@3]
  b3_from_b5:
  b3_from_b7:
    // [135] phi (byte) render_moving::i#8 = (byte) render_moving::i#2 [phi:render_moving::@5/render_moving::@7->render_moving::@3#0] -- register_copy 
    jmp b3
    // render_moving::@3
  b3:
    // [136] (byte) render_moving::ypos#1 ← ++ (byte) render_moving::ypos#2 -- vbuz1=_inc_vbuz1 
    inc.z ypos
    // [137] (byte) render_moving::l#1 ← ++ (byte) render_moving::l#4 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [138] if((byte) render_moving::l#1!=(byte) 4) goto render_moving::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne b1_from_b3
    jmp breturn
    // render_moving::@return
  breturn:
    // [139] return 
    rts
    // render_moving::@2
  b2:
    // [140] (byte~) render_moving::$1 ← (byte) render_screen_render#33 + (byte) render_moving::ypos#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z render_screen_render_33
    clc
    adc.z ypos
    sta.z _1
    // [141] (byte~) render_moving::$6 ← (byte~) render_moving::$1 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z _1
    asl
    sta.z _6
    // [142] (byte*) render_moving::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_moving::$6) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z _6
    lda screen_lines_1,y
    sta.z screen_line
    lda screen_lines_1+1,y
    sta.z screen_line+1
    // [143] (byte) render_moving::xpos#0 ← (byte) current_xpos#59 -- vbuz1=vbuz2 
    lda.z current_xpos_59
    sta.z xpos
    // [144] phi from render_moving::@2 to render_moving::@4 [phi:render_moving::@2->render_moving::@4]
  b4_from_b2:
    // [144] phi (byte) render_moving::c#2 = (byte) 0 [phi:render_moving::@2->render_moving::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [144] phi (byte) render_moving::xpos#2 = (byte) render_moving::xpos#0 [phi:render_moving::@2->render_moving::@4#1] -- register_copy 
    // [144] phi (byte) render_moving::i#4 = (byte) render_moving::i#3 [phi:render_moving::@2->render_moving::@4#2] -- register_copy 
    jmp b4
    // [144] phi from render_moving::@5 to render_moving::@4 [phi:render_moving::@5->render_moving::@4]
  b4_from_b5:
    // [144] phi (byte) render_moving::c#2 = (byte) render_moving::c#1 [phi:render_moving::@5->render_moving::@4#0] -- register_copy 
    // [144] phi (byte) render_moving::xpos#2 = (byte) render_moving::xpos#1 [phi:render_moving::@5->render_moving::@4#1] -- register_copy 
    // [144] phi (byte) render_moving::i#4 = (byte) render_moving::i#2 [phi:render_moving::@5->render_moving::@4#2] -- register_copy 
    jmp b4
    // render_moving::@4
  b4:
    // [145] (byte) render_moving::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_moving::i#4) -- vbuz1=pbuz2_derefidx_vbuz3 
    ldy.z i
    lda (current_piece_gfx_64),y
    sta.z current_cell
    // [146] (byte) render_moving::i#2 ← ++ (byte) render_moving::i#4 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [147] if((byte) render_moving::current_cell#0==(byte) 0) goto render_moving::@5 -- vbuz1_eq_0_then_la1 
    lda.z current_cell
    cmp #0
    beq b5
    jmp b6
    // render_moving::@6
  b6:
    // [148] *((byte*) render_moving::screen_line#0 + (byte) render_moving::xpos#2) ← (byte) current_piece_char#68 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z current_piece_char_68
    ldy.z xpos
    sta (screen_line),y
    jmp b5
    // render_moving::@5
  b5:
    // [149] (byte) render_moving::xpos#1 ← ++ (byte) render_moving::xpos#2 -- vbuz1=_inc_vbuz1 
    inc.z xpos
    // [150] (byte) render_moving::c#1 ← ++ (byte) render_moving::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [151] if((byte) render_moving::c#1!=(byte) 4) goto render_moving::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z c
    bne b4_from_b5
    jmp b3_from_b5
}
  // render_playfield
// Render the static playfield on the screen (all pieces already locked into place)
render_playfield: {
    .label _2 = $8b
    .label _6 = $8c
    .label screen_line = $26
    .label i = $25
    .label c = $28
    .label l = $24
    // [153] phi from render_playfield to render_playfield::@1 [phi:render_playfield->render_playfield::@1]
  b1_from_render_playfield:
    // [153] phi (byte) render_playfield::i#3 = (const byte) PLAYFIELD_COLS#0*(byte) 2 [phi:render_playfield->render_playfield::@1#0] -- vbuz1=vbuc1 
    lda #PLAYFIELD_COLS*2
    sta.z i
    // [153] phi (byte) render_playfield::l#2 = (byte) 2 [phi:render_playfield->render_playfield::@1#1] -- vbuz1=vbuc1 
    lda #2
    sta.z l
    jmp b1
    // [153] phi from render_playfield::@3 to render_playfield::@1 [phi:render_playfield::@3->render_playfield::@1]
  b1_from_b3:
    // [153] phi (byte) render_playfield::i#3 = (byte) render_playfield::i#1 [phi:render_playfield::@3->render_playfield::@1#0] -- register_copy 
    // [153] phi (byte) render_playfield::l#2 = (byte) render_playfield::l#1 [phi:render_playfield::@3->render_playfield::@1#1] -- register_copy 
    jmp b1
    // render_playfield::@1
  b1:
    // [154] (byte~) render_playfield::$2 ← (byte) render_screen_render#22 + (byte) render_playfield::l#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z render_screen_render_22
    clc
    adc.z l
    sta.z _2
    // [155] (byte~) render_playfield::$6 ← (byte~) render_playfield::$2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z _2
    asl
    sta.z _6
    // [156] (byte*) render_playfield::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_playfield::$6) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z _6
    lda screen_lines_1,y
    sta.z screen_line
    lda screen_lines_1+1,y
    sta.z screen_line+1
    // [157] phi from render_playfield::@1 to render_playfield::@2 [phi:render_playfield::@1->render_playfield::@2]
  b2_from_b1:
    // [157] phi (byte) render_playfield::c#2 = (byte) 0 [phi:render_playfield::@1->render_playfield::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [157] phi (byte*) render_playfield::screen_line#2 = (byte*) render_playfield::screen_line#0 [phi:render_playfield::@1->render_playfield::@2#1] -- register_copy 
    // [157] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#3 [phi:render_playfield::@1->render_playfield::@2#2] -- register_copy 
    jmp b2
    // [157] phi from render_playfield::@2 to render_playfield::@2 [phi:render_playfield::@2->render_playfield::@2]
  b2_from_b2:
    // [157] phi (byte) render_playfield::c#2 = (byte) render_playfield::c#1 [phi:render_playfield::@2->render_playfield::@2#0] -- register_copy 
    // [157] phi (byte*) render_playfield::screen_line#2 = (byte*) render_playfield::screen_line#1 [phi:render_playfield::@2->render_playfield::@2#1] -- register_copy 
    // [157] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#1 [phi:render_playfield::@2->render_playfield::@2#2] -- register_copy 
    jmp b2
    // render_playfield::@2
  b2:
    // [158] *((byte*) render_playfield::screen_line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda playfield,y
    ldy #0
    sta (screen_line),y
    // [159] (byte*) render_playfield::screen_line#1 ← ++ (byte*) render_playfield::screen_line#2 -- pbuz1=_inc_pbuz1 
    inc.z screen_line
    bne !+
    inc.z screen_line+1
  !:
    // [160] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [161] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [162] if((byte) render_playfield::c#1!=(const byte) PLAYFIELD_COLS#0-(byte) 1+(byte) 1) goto render_playfield::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_COLS-1+1
    cmp.z c
    bne b2_from_b2
    jmp b3
    // render_playfield::@3
  b3:
    // [163] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [164] if((byte) render_playfield::l#1!=(const byte) PLAYFIELD_LINES#0-(byte) 1+(byte) 1) goto render_playfield::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_LINES-1+1
    cmp.z l
    bne b1_from_b3
    jmp breturn
    // render_playfield::@return
  breturn:
    // [165] return 
    rts
}
  // play_movement
// Perform any movement of the current piece
// key_event is the next keyboard_event() og $ff if no keyboard event is pending
// Returns a byte signaling whether rendering is needed. (0 no render, >0 render needed)
// play_movement(byte zeropage($7c) key_event)
play_movement: {
    .label _3 = $91
    .label _4 = $95
    .label render = $29
    .label render_2 = $92
    .label return = $29
    .label key_event = $7c
    .label return_3 = $7d
    // [166] (byte) play_move_down::key_event#0 ← (byte) play_movement::key_event#0 -- vbuz1=vbuz2 
    lda.z key_event
    sta.z play_move_down.key_event
    // [167] call play_move_down 
    jsr play_move_down
    // [168] (byte) play_move_down::return#0 ← (byte) play_move_down::return#3 -- vbuz1=vbuz2 
    lda.z play_move_down.return_3
    sta.z play_move_down.return
    jmp b2
    // play_movement::@2
  b2:
    // [169] (byte) play_movement::render#1 ← (byte) play_move_down::return#0 -- vbuz1=vbuz2 
    lda.z play_move_down.return
    sta.z render
    // [170] if((byte) game_over#15==(byte) 0) goto play_movement::@1 -- vbuz1_eq_0_then_la1 
    lda.z game_over
    cmp #0
    beq b1
    // [171] phi from play_movement::@2 play_movement::@4 to play_movement::@return [phi:play_movement::@2/play_movement::@4->play_movement::@return]
  breturn_from_b2:
  breturn_from_b4:
    // [171] phi (byte) current_xpos#19 = (byte) current_xpos#22 [phi:play_movement::@2/play_movement::@4->play_movement::@return#0] -- register_copy 
    // [171] phi (byte*) current_piece_gfx#18 = (byte*) current_piece_gfx#20 [phi:play_movement::@2/play_movement::@4->play_movement::@return#1] -- register_copy 
    // [171] phi (byte) current_orientation#17 = (byte) current_orientation#20 [phi:play_movement::@2/play_movement::@4->play_movement::@return#2] -- register_copy 
    // [171] phi (byte) play_movement::return#2 = (byte) play_movement::render#1 [phi:play_movement::@2/play_movement::@4->play_movement::@return#3] -- register_copy 
    jmp breturn
    // play_movement::@return
  breturn:
    // [172] return 
    rts
    // play_movement::@1
  b1:
    // [173] (byte) play_move_leftright::key_event#0 ← (byte) play_movement::key_event#0 -- vbuz1=vbuz2 
    lda.z key_event
    sta.z play_move_leftright.key_event
    // [174] call play_move_leftright 
    jsr play_move_leftright
    // [175] (byte) play_move_leftright::return#0 ← (byte) play_move_leftright::return#2 -- vbuz1=vbuz2 
    lda.z play_move_leftright.return_2
    sta.z play_move_leftright.return
    jmp b3
    // play_movement::@3
  b3:
    // [176] (byte~) play_movement::$3 ← (byte) play_move_leftright::return#0 -- vbuz1=vbuz2 
    lda.z play_move_leftright.return
    sta.z _3
    // [177] (byte) play_movement::render#2 ← (byte) play_movement::render#1 + (byte~) play_movement::$3 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z render
    clc
    adc.z _3
    sta.z render_2
    // [178] (byte) play_move_rotate::key_event#0 ← (byte) play_movement::key_event#0 -- vbuz1=vbuz2 
    lda.z key_event
    sta.z play_move_rotate.key_event
    // [179] call play_move_rotate 
    jsr play_move_rotate
    // [180] (byte) play_move_rotate::return#0 ← (byte) play_move_rotate::return#2 -- vbuz1=vbuz2 
    lda.z play_move_rotate.return_2
    sta.z play_move_rotate.return
    jmp b4
    // play_movement::@4
  b4:
    // [181] (byte~) play_movement::$4 ← (byte) play_move_rotate::return#0 -- vbuz1=vbuz2 
    lda.z play_move_rotate.return
    sta.z _4
    // [182] (byte) play_movement::return#0 ← (byte) play_movement::render#2 + (byte~) play_movement::$4 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z render_2
    clc
    adc.z _4
    sta.z return
    jmp breturn_from_b4
}
  // play_move_rotate
// Rotate the current piece  based on key-presses
// Return non-zero if a render is needed
// play_move_rotate(byte zeropage($93) key_event)
play_move_rotate: {
    .label _2 = $98
    .label _5 = $96
    .label _7 = $99
    .label key_event = $93
    .label return = $94
    .label orientation = $2b
    .label return_2 = $2a
    // [183] if((byte) play_move_rotate::key_event#0==(const byte) KEY_Z#0) goto play_move_rotate::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #KEY_Z
    cmp.z key_event
    beq b1
    jmp b4
    // play_move_rotate::@4
  b4:
    // [184] if((byte) play_move_rotate::key_event#0==(const byte) KEY_X#0) goto play_move_rotate::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #KEY_X
    cmp.z key_event
    beq b2
    // [185] phi from play_move_rotate::@4 play_move_rotate::@6 to play_move_rotate::@return [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return]
  breturn_from_b4:
  breturn_from_b6:
    // [185] phi (byte*) current_piece_gfx#21 = (byte*) current_piece_gfx#20 [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return#0] -- register_copy 
    // [185] phi (byte) current_orientation#25 = (byte) current_orientation#20 [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return#1] -- register_copy 
    // [185] phi (byte) play_move_rotate::return#2 = (byte) 0 [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return#2] -- vbuz1=vbuc1 
    lda #0
    sta.z return_2
    jmp breturn
    // play_move_rotate::@return
  breturn:
    // [186] return 
    rts
    // play_move_rotate::@2
  b2:
    // [187] (byte~) play_move_rotate::$5 ← (byte) current_orientation#20 + (byte) $10 -- vbuz1=vbuz2_plus_vbuc1 
    lax.z current_orientation
    axs #-[$10]
    stx.z _5
    // [188] (byte) play_move_rotate::orientation#2 ← (byte~) play_move_rotate::$5 & (byte) $3f -- vbuz1=vbuz2_band_vbuc1 
    lda #$3f
    and.z _5
    sta.z orientation
    // [189] phi from play_move_rotate::@1 play_move_rotate::@2 to play_move_rotate::@3 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@3]
  b3_from_b1:
  b3_from_b2:
    // [189] phi (byte) play_move_rotate::orientation#3 = (byte) play_move_rotate::orientation#1 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@3#0] -- register_copy 
    jmp b3
    // play_move_rotate::@3
  b3:
    // [190] (byte) play_collision::xpos#3 ← (byte) current_xpos#26 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z play_collision.xpos
    // [191] (byte) play_collision::ypos#3 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [192] (byte) play_collision::orientation#3 ← (byte) play_move_rotate::orientation#3 -- vbuz1=vbuz2 
    lda.z orientation
    sta.z play_collision.orientation
    // [193] (byte*~) current_piece#99 ← (byte*) current_piece#15 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_99
    lda.z current_piece+1
    sta.z current_piece_99+1
    // [194] call play_collision 
    // [202] phi from play_move_rotate::@3 to play_collision [phi:play_move_rotate::@3->play_collision]
  play_collision_from_b3:
    // [202] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#3 [phi:play_move_rotate::@3->play_collision#0] -- register_copy 
    // [202] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#3 [phi:play_move_rotate::@3->play_collision#1] -- register_copy 
    // [202] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#3 [phi:play_move_rotate::@3->play_collision#2] -- register_copy 
    // [202] phi (byte*) current_piece#17 = (byte*~) current_piece#99 [phi:play_move_rotate::@3->play_collision#3] -- register_copy 
    jsr play_collision
    // [195] (byte) play_collision::return#14 ← (byte) play_collision::return#15 -- vbuz1=vbuz2 
    lda.z play_collision.return_15
    sta.z play_collision.return_14
    jmp b6
    // play_move_rotate::@6
  b6:
    // [196] (byte~) play_move_rotate::$2 ← (byte) play_collision::return#14 -- vbuz1=vbuz2 
    lda.z play_collision.return_14
    sta.z _2
    // [197] if((byte~) play_move_rotate::$2!=(const byte) COLLISION_NONE#0) goto play_move_rotate::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #COLLISION_NONE
    cmp.z _2
    bne breturn_from_b6
    jmp b5
    // play_move_rotate::@5
  b5:
    // [198] (byte) current_orientation#7 ← (byte) play_move_rotate::orientation#3 -- vbuz1=vbuz2 
    lda.z orientation
    sta.z current_orientation
    // [199] (byte*) current_piece_gfx#7 ← (byte*) current_piece#15 + (byte) current_orientation#7 -- pbuz1=pbuz2_plus_vbuz3 
    lda.z current_orientation
    clc
    adc.z current_piece
    sta.z current_piece_gfx
    lda #0
    adc.z current_piece+1
    sta.z current_piece_gfx+1
    // [185] phi from play_move_rotate::@5 to play_move_rotate::@return [phi:play_move_rotate::@5->play_move_rotate::@return]
  breturn_from_b5:
    // [185] phi (byte*) current_piece_gfx#21 = (byte*) current_piece_gfx#7 [phi:play_move_rotate::@5->play_move_rotate::@return#0] -- register_copy 
    // [185] phi (byte) current_orientation#25 = (byte) current_orientation#7 [phi:play_move_rotate::@5->play_move_rotate::@return#1] -- register_copy 
    // [185] phi (byte) play_move_rotate::return#2 = (byte) 1 [phi:play_move_rotate::@5->play_move_rotate::@return#2] -- vbuz1=vbuc1 
    lda #1
    sta.z return_2
    jmp breturn
    // play_move_rotate::@1
  b1:
    // [200] (byte~) play_move_rotate::$7 ← (byte) current_orientation#20 - (byte) $10 -- vbuz1=vbuz2_minus_vbuc1 
    lax.z current_orientation
    axs #$10
    stx.z _7
    // [201] (byte) play_move_rotate::orientation#1 ← (byte~) play_move_rotate::$7 & (byte) $3f -- vbuz1=vbuz2_band_vbuc1 
    lda #$3f
    and.z _7
    sta.z orientation
    jmp b3_from_b1
}
  // play_collision
// Test if there is a collision between the current piece moved to (x, y) and anything on the playfield or the playfield boundaries
// Returns information about the type of the collision detected
// play_collision(byte zeropage($2f) xpos, byte zeropage($30) ypos, byte zeropage($2e) orientation)
play_collision: {
    .label _5 = $a0
    .label _14 = $9c
    .label xpos = $2f
    .label ypos = $30
    .label orientation = $2e
    .label return = $a7
    .label return_1 = $a3
    .label piece_gfx = $9a
    .label yp = $30
    .label playfield_line = $9d
    .label i = $9f
    .label xp = $33
    .label c = $34
    .label l = $31
    .label return_10 = $ae
    .label return_13 = $a1
    .label return_14 = $97
    .label i_2 = $32
    .label return_15 = $35
    .label i_3 = $32
    .label i_10 = $32
    .label i_12 = $32
    // [203] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#17 + (byte) play_collision::orientation#5 -- pbuz1=pbuz2_plus_vbuz3 
    lda.z orientation
    clc
    adc.z current_piece_17
    sta.z piece_gfx
    lda #0
    adc.z current_piece_17+1
    sta.z piece_gfx+1
    // [204] phi from play_collision to play_collision::@1 [phi:play_collision->play_collision::@1]
  b1_from_play_collision:
    // [204] phi (byte) play_collision::l#6 = (byte) 0 [phi:play_collision->play_collision::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [204] phi (byte) play_collision::i#3 = (byte) 0 [phi:play_collision->play_collision::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i_3
    // [204] phi (byte) play_collision::yp#2 = (byte) play_collision::yp#0 [phi:play_collision->play_collision::@1#2] -- register_copy 
    jmp b1
    // play_collision::@1
  b1:
    // [205] (byte~) play_collision::$14 ← (byte) play_collision::yp#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z yp
    asl
    sta.z _14
    // [206] (byte*) play_collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_collision::$14) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z _14
    lda playfield_lines,y
    sta.z playfield_line
    lda playfield_lines+1,y
    sta.z playfield_line+1
    // [207] (byte~) play_collision::xp#8 ← (byte) play_collision::xpos#6 -- vbuz1=vbuz2 
    lda.z xpos
    sta.z xp
    // [208] phi from play_collision::@1 to play_collision::@2 [phi:play_collision::@1->play_collision::@2]
  b2_from_b1:
    // [208] phi (byte) play_collision::c#2 = (byte) 0 [phi:play_collision::@1->play_collision::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [208] phi (byte) play_collision::xp#2 = (byte~) play_collision::xp#8 [phi:play_collision::@1->play_collision::@2#1] -- register_copy 
    // [208] phi (byte) play_collision::i#2 = (byte) play_collision::i#3 [phi:play_collision::@1->play_collision::@2#2] -- register_copy 
    jmp b2
    // play_collision::@2
  b2:
    // [209] (byte) play_collision::i#1 ← ++ (byte) play_collision::i#2 -- vbuz1=_inc_vbuz2 
    ldy.z i_2
    iny
    sty.z i
    // [210] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte) 0) goto play_collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy.z i_2
    lda (piece_gfx),y
    cmp #0
    beq b3
    jmp b7
    // play_collision::@7
  b7:
    // [211] if((byte) play_collision::yp#2<(const byte) PLAYFIELD_LINES#0) goto play_collision::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z yp
    cmp #PLAYFIELD_LINES
    bcc b4
    // [216] phi from play_collision::@7 to play_collision::@return [phi:play_collision::@7->play_collision::@return]
  breturn_from_b7:
    // [216] phi (byte) play_collision::return#15 = (const byte) COLLISION_BOTTOM#0 [phi:play_collision::@7->play_collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_BOTTOM
    sta.z return_15
    jmp breturn
    // play_collision::@4
  b4:
    // [212] (byte~) play_collision::$5 ← (byte) play_collision::xp#2 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and.z xp
    sta.z _5
    // [213] if((byte~) play_collision::$5==(byte) 0) goto play_collision::@5 -- vbuz1_eq_0_then_la1 
    lda.z _5
    cmp #0
    beq b5
    // [216] phi from play_collision::@4 to play_collision::@return [phi:play_collision::@4->play_collision::@return]
  breturn_from_b4:
    // [216] phi (byte) play_collision::return#15 = (const byte) COLLISION_LEFT#0 [phi:play_collision::@4->play_collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_LEFT
    sta.z return_15
    jmp breturn
    // play_collision::@5
  b5:
    // [214] if((byte) play_collision::xp#2<(const byte) PLAYFIELD_COLS#0) goto play_collision::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z xp
    cmp #PLAYFIELD_COLS
    bcc b6
    // [216] phi from play_collision::@5 to play_collision::@return [phi:play_collision::@5->play_collision::@return]
  breturn_from_b5:
    // [216] phi (byte) play_collision::return#15 = (const byte) COLLISION_RIGHT#0 [phi:play_collision::@5->play_collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_RIGHT
    sta.z return_15
    jmp breturn
    // play_collision::@6
  b6:
    // [215] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::xp#2)==(byte) 0) goto play_collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy.z xp
    lda (playfield_line),y
    cmp #0
    beq b3
    // [216] phi from play_collision::@6 to play_collision::@return [phi:play_collision::@6->play_collision::@return]
  breturn_from_b6:
    // [216] phi (byte) play_collision::return#15 = (const byte) COLLISION_PLAYFIELD#0 [phi:play_collision::@6->play_collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_PLAYFIELD
    sta.z return_15
    jmp breturn
    // play_collision::@return
  breturn:
    // [217] return 
    rts
    // play_collision::@3
  b3:
    // [218] (byte) play_collision::xp#1 ← ++ (byte) play_collision::xp#2 -- vbuz1=_inc_vbuz1 
    inc.z xp
    // [219] (byte) play_collision::c#1 ← ++ (byte) play_collision::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [220] if((byte) play_collision::c#1!=(byte) 4) goto play_collision::@10 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z c
    bne b10
    jmp b8
    // play_collision::@8
  b8:
    // [221] (byte) play_collision::yp#1 ← ++ (byte) play_collision::yp#2 -- vbuz1=_inc_vbuz1 
    inc.z yp
    // [222] (byte) play_collision::l#1 ← ++ (byte) play_collision::l#6 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [223] if((byte) play_collision::l#1!=(byte) 4) goto play_collision::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne b9
    // [216] phi from play_collision::@8 to play_collision::@return [phi:play_collision::@8->play_collision::@return]
  breturn_from_b8:
    // [216] phi (byte) play_collision::return#15 = (const byte) COLLISION_NONE#0 [phi:play_collision::@8->play_collision::@return#0] -- vbuz1=vbuc1 
    lda #COLLISION_NONE
    sta.z return_15
    jmp breturn
    // play_collision::@9
  b9:
    // [224] (byte~) play_collision::i#10 ← (byte) play_collision::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_10
    // [204] phi from play_collision::@9 to play_collision::@1 [phi:play_collision::@9->play_collision::@1]
  b1_from_b9:
    // [204] phi (byte) play_collision::l#6 = (byte) play_collision::l#1 [phi:play_collision::@9->play_collision::@1#0] -- register_copy 
    // [204] phi (byte) play_collision::i#3 = (byte~) play_collision::i#10 [phi:play_collision::@9->play_collision::@1#1] -- register_copy 
    // [204] phi (byte) play_collision::yp#2 = (byte) play_collision::yp#1 [phi:play_collision::@9->play_collision::@1#2] -- register_copy 
    jmp b1
    // play_collision::@10
  b10:
    // [225] (byte~) play_collision::i#12 ← (byte) play_collision::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_12
    // [208] phi from play_collision::@10 to play_collision::@2 [phi:play_collision::@10->play_collision::@2]
  b2_from_b10:
    // [208] phi (byte) play_collision::c#2 = (byte) play_collision::c#1 [phi:play_collision::@10->play_collision::@2#0] -- register_copy 
    // [208] phi (byte) play_collision::xp#2 = (byte) play_collision::xp#1 [phi:play_collision::@10->play_collision::@2#1] -- register_copy 
    // [208] phi (byte) play_collision::i#2 = (byte~) play_collision::i#12 [phi:play_collision::@10->play_collision::@2#2] -- register_copy 
    jmp b2
}
  // play_move_leftright
// Move left/right or rotate the current piece
// Return non-zero if a render is needed
// play_move_leftright(byte zeropage($8f) key_event)
play_move_leftright: {
    .label _4 = $a2
    .label _8 = $a4
    .label key_event = $8f
    .label return = $90
    .label return_2 = $36
    // [226] if((byte) play_move_leftright::key_event#0==(const byte) KEY_COMMA#0) goto play_move_leftright::@1 -- vbuz1_eq_vbuc1_then_la1 
    // Handle keyboard events
    lda #KEY_COMMA
    cmp.z key_event
    beq b1
    jmp b2
    // play_move_leftright::@2
  b2:
    // [227] if((byte) play_move_leftright::key_event#0!=(const byte) KEY_DOT#0) goto play_move_leftright::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #KEY_DOT
    cmp.z key_event
    bne breturn_from_b2
    jmp b3
    // play_move_leftright::@3
  b3:
    // [228] (byte) play_collision::xpos#2 ← (byte) current_xpos#22 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z current_xpos
    iny
    sty.z play_collision.xpos
    // [229] (byte) play_collision::ypos#2 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [230] (byte) play_collision::orientation#2 ← (byte) current_orientation#20 -- vbuz1=vbuz2 
    lda.z current_orientation
    sta.z play_collision.orientation
    // [231] (byte*~) current_piece#98 ← (byte*) current_piece#15 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_98
    lda.z current_piece+1
    sta.z current_piece_98+1
    // [232] call play_collision 
    // [202] phi from play_move_leftright::@3 to play_collision [phi:play_move_leftright::@3->play_collision]
  play_collision_from_b3:
    // [202] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#2 [phi:play_move_leftright::@3->play_collision#0] -- register_copy 
    // [202] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#2 [phi:play_move_leftright::@3->play_collision#1] -- register_copy 
    // [202] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#2 [phi:play_move_leftright::@3->play_collision#2] -- register_copy 
    // [202] phi (byte*) current_piece#17 = (byte*~) current_piece#98 [phi:play_move_leftright::@3->play_collision#3] -- register_copy 
    jsr play_collision
    // [233] (byte) play_collision::return#13 ← (byte) play_collision::return#15 -- vbuz1=vbuz2 
    lda.z play_collision.return_15
    sta.z play_collision.return_13
    jmp b7
    // play_move_leftright::@7
  b7:
    // [234] (byte~) play_move_leftright::$4 ← (byte) play_collision::return#13 -- vbuz1=vbuz2 
    lda.z play_collision.return_13
    sta.z _4
    // [235] if((byte~) play_move_leftright::$4!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #COLLISION_NONE
    cmp.z _4
    bne breturn_from_b7
    jmp b4
    // play_move_leftright::@4
  b4:
    // [236] (byte) current_xpos#6 ← ++ (byte) current_xpos#22 -- vbuz1=_inc_vbuz1 
    inc.z current_xpos
    // [237] phi from play_move_leftright::@4 play_move_leftright::@5 to play_move_leftright::@return [phi:play_move_leftright::@4/play_move_leftright::@5->play_move_leftright::@return]
  breturn_from_b4:
  breturn_from_b5:
    // [237] phi (byte) current_xpos#26 = (byte) current_xpos#6 [phi:play_move_leftright::@4/play_move_leftright::@5->play_move_leftright::@return#0] -- register_copy 
    // [237] phi (byte) play_move_leftright::return#2 = (byte) 1 [phi:play_move_leftright::@4/play_move_leftright::@5->play_move_leftright::@return#1] -- vbuz1=vbuc1 
    lda #1
    sta.z return_2
    jmp breturn
    // [237] phi from play_move_leftright::@2 play_move_leftright::@6 play_move_leftright::@7 to play_move_leftright::@return [phi:play_move_leftright::@2/play_move_leftright::@6/play_move_leftright::@7->play_move_leftright::@return]
  breturn_from_b2:
  breturn_from_b6:
  breturn_from_b7:
    // [237] phi (byte) current_xpos#26 = (byte) current_xpos#22 [phi:play_move_leftright::@2/play_move_leftright::@6/play_move_leftright::@7->play_move_leftright::@return#0] -- register_copy 
    // [237] phi (byte) play_move_leftright::return#2 = (byte) 0 [phi:play_move_leftright::@2/play_move_leftright::@6/play_move_leftright::@7->play_move_leftright::@return#1] -- vbuz1=vbuc1 
    lda #0
    sta.z return_2
    jmp breturn
    // play_move_leftright::@return
  breturn:
    // [238] return 
    rts
    // play_move_leftright::@1
  b1:
    // [239] (byte) play_collision::xpos#1 ← (byte) current_xpos#22 - (byte) 1 -- vbuz1=vbuz2_minus_1 
    ldx.z current_xpos
    dex
    stx.z play_collision.xpos
    // [240] (byte) play_collision::ypos#1 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [241] (byte) play_collision::orientation#1 ← (byte) current_orientation#20 -- vbuz1=vbuz2 
    lda.z current_orientation
    sta.z play_collision.orientation
    // [242] (byte*~) current_piece#97 ← (byte*) current_piece#15 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_97
    lda.z current_piece+1
    sta.z current_piece_97+1
    // [243] call play_collision 
    // [202] phi from play_move_leftright::@1 to play_collision [phi:play_move_leftright::@1->play_collision]
  play_collision_from_b1:
    // [202] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#1 [phi:play_move_leftright::@1->play_collision#0] -- register_copy 
    // [202] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#1 [phi:play_move_leftright::@1->play_collision#1] -- register_copy 
    // [202] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#1 [phi:play_move_leftright::@1->play_collision#2] -- register_copy 
    // [202] phi (byte*) current_piece#17 = (byte*~) current_piece#97 [phi:play_move_leftright::@1->play_collision#3] -- register_copy 
    jsr play_collision
    // [244] (byte) play_collision::return#1 ← (byte) play_collision::return#15 -- vbuz1=vbuz2 
    lda.z play_collision.return_15
    sta.z play_collision.return_1
    jmp b6
    // play_move_leftright::@6
  b6:
    // [245] (byte~) play_move_leftright::$8 ← (byte) play_collision::return#1 -- vbuz1=vbuz2 
    lda.z play_collision.return_1
    sta.z _8
    // [246] if((byte~) play_move_leftright::$8!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #COLLISION_NONE
    cmp.z _8
    bne breturn_from_b6
    jmp b5
    // play_move_leftright::@5
  b5:
    // [247] (byte) current_xpos#8 ← -- (byte) current_xpos#22 -- vbuz1=_dec_vbuz1 
    dec.z current_xpos
    jmp breturn_from_b5
}
  // play_move_down
// Move down the current piece
// Return non-zero if a render is needed
// play_move_down(byte zeropage($8d) key_event)
play_move_down: {
    .label _2 = $a6
    .label _12 = $a8
    .label key_event = $8d
    .label return = $8e
    .label movedown = $37
    .label removed = $aa
    .label return_3 = $49
    // [248] (byte) current_movedown_counter#12 ← ++ (byte) current_movedown_counter#16 -- vbuz1=_inc_vbuz1 
    inc.z current_movedown_counter
    // [249] if((byte) play_move_down::key_event#0!=(const byte) KEY_SPACE#0) goto play_move_down::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #KEY_SPACE
    cmp.z key_event
    bne b1_from_play_move_down
    // [250] phi from play_move_down to play_move_down::@4 [phi:play_move_down->play_move_down::@4]
  b4_from_play_move_down:
    jmp b4
    // play_move_down::@4
  b4:
    // [251] phi from play_move_down::@4 to play_move_down::@1 [phi:play_move_down::@4->play_move_down::@1]
  b1_from_b4:
    // [251] phi (byte) play_move_down::movedown#10 = (byte) 1 [phi:play_move_down::@4->play_move_down::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z movedown
    jmp b1
    // [251] phi from play_move_down to play_move_down::@1 [phi:play_move_down->play_move_down::@1]
  b1_from_play_move_down:
    // [251] phi (byte) play_move_down::movedown#10 = (byte) 0 [phi:play_move_down->play_move_down::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z movedown
    jmp b1
    // play_move_down::@1
  b1:
    // [252] call keyboard_event_pressed 
    // [381] phi from play_move_down::@1 to keyboard_event_pressed [phi:play_move_down::@1->keyboard_event_pressed]
  keyboard_event_pressed_from_b1:
    // [381] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_SPACE#0 [phi:play_move_down::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_SPACE
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [253] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_11
    sta.z keyboard_event_pressed.return_12
    jmp b12
    // play_move_down::@12
  b12:
    // [254] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_12
    sta.z _2
    // [255] if((byte~) play_move_down::$2==(byte) 0) goto play_move_down::@2 -- vbuz1_eq_0_then_la1 
    lda.z _2
    cmp #0
    beq b2_from_b12
    jmp b5
    // play_move_down::@5
  b5:
    // [256] if((byte) current_movedown_counter#12<(const byte) current_movedown_fast#0) goto play_move_down::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z current_movedown_counter
    cmp #current_movedown_fast
    bcc b2_from_b5
    jmp b6
    // play_move_down::@6
  b6:
    // [257] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10 -- vbuz1=_inc_vbuz1 
    inc.z movedown
    // [258] phi from play_move_down::@12 play_move_down::@5 play_move_down::@6 to play_move_down::@2 [phi:play_move_down::@12/play_move_down::@5/play_move_down::@6->play_move_down::@2]
  b2_from_b12:
  b2_from_b5:
  b2_from_b6:
    // [258] phi (byte) play_move_down::movedown#7 = (byte) play_move_down::movedown#10 [phi:play_move_down::@12/play_move_down::@5/play_move_down::@6->play_move_down::@2#0] -- register_copy 
    jmp b2
    // play_move_down::@2
  b2:
    // [259] if((byte) current_movedown_counter#12<(byte) current_movedown_slow#14) goto play_move_down::@3 -- vbuz1_lt_vbuz2_then_la1 
    lda.z current_movedown_counter
    cmp.z current_movedown_slow
    bcc b3_from_b2
    jmp b7
    // play_move_down::@7
  b7:
    // [260] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7 -- vbuz1=_inc_vbuz1 
    inc.z movedown
    // [261] phi from play_move_down::@2 play_move_down::@7 to play_move_down::@3 [phi:play_move_down::@2/play_move_down::@7->play_move_down::@3]
  b3_from_b2:
  b3_from_b7:
    // [261] phi (byte) play_move_down::movedown#6 = (byte) play_move_down::movedown#7 [phi:play_move_down::@2/play_move_down::@7->play_move_down::@3#0] -- register_copy 
    jmp b3
    // play_move_down::@3
  b3:
    // [262] if((byte) play_move_down::movedown#6==(byte) 0) goto play_move_down::@return -- vbuz1_eq_0_then_la1 
    lda.z movedown
    cmp #0
    beq breturn_from_b3
    jmp b8
    // play_move_down::@8
  b8:
    // [263] (byte) play_collision::ypos#0 ← (byte) current_ypos#11 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z current_ypos
    iny
    sty.z play_collision.ypos
    // [264] (byte) play_collision::xpos#0 ← (byte) current_xpos#14 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z play_collision.xpos
    // [265] (byte) play_collision::orientation#0 ← (byte) current_orientation#13 -- vbuz1=vbuz2 
    lda.z current_orientation
    sta.z play_collision.orientation
    // [266] (byte*~) current_piece#96 ← (byte*) current_piece#10 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_96
    lda.z current_piece+1
    sta.z current_piece_96+1
    // [267] call play_collision 
    // [202] phi from play_move_down::@8 to play_collision [phi:play_move_down::@8->play_collision]
  play_collision_from_b8:
    // [202] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#0 [phi:play_move_down::@8->play_collision#0] -- register_copy 
    // [202] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#0 [phi:play_move_down::@8->play_collision#1] -- register_copy 
    // [202] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#0 [phi:play_move_down::@8->play_collision#2] -- register_copy 
    // [202] phi (byte*) current_piece#17 = (byte*~) current_piece#96 [phi:play_move_down::@8->play_collision#3] -- register_copy 
    jsr play_collision
    // [268] (byte) play_collision::return#0 ← (byte) play_collision::return#15 -- vbuz1=vbuz2 
    lda.z play_collision.return_15
    sta.z play_collision.return
    jmp b13
    // play_move_down::@13
  b13:
    // [269] (byte~) play_move_down::$12 ← (byte) play_collision::return#0 -- vbuz1=vbuz2 
    lda.z play_collision.return
    sta.z _12
    // [270] if((byte~) play_move_down::$12==(const byte) COLLISION_NONE#0) goto play_move_down::@10 -- vbuz1_eq_vbuc1_then_la1 
    lda #COLLISION_NONE
    cmp.z _12
    beq b10
    // [271] phi from play_move_down::@13 to play_move_down::@9 [phi:play_move_down::@13->play_move_down::@9]
  b9_from_b13:
    jmp b9
    // play_move_down::@9
  b9:
    // [272] call play_lock_current 
    jsr play_lock_current
    // [273] phi from play_move_down::@9 to play_move_down::@14 [phi:play_move_down::@9->play_move_down::@14]
  b14_from_b9:
    jmp b14
    // play_move_down::@14
  b14:
    // [274] call play_remove_lines 
    // [340] phi from play_move_down::@14 to play_remove_lines [phi:play_move_down::@14->play_remove_lines]
  play_remove_lines_from_b14:
    jsr play_remove_lines
    // [275] (byte) play_remove_lines::return#0 ← (byte) play_remove_lines::removed#8 -- vbuz1=vbuz2 
    lda.z play_remove_lines.removed
    sta.z play_remove_lines.return
    jmp b15
    // play_move_down::@15
  b15:
    // [276] (byte) play_move_down::removed#0 ← (byte) play_remove_lines::return#0 -- vbuz1=vbuz2 
    lda.z play_remove_lines.return
    sta.z removed
    // [277] (byte) play_update_score::removed#0 ← (byte) play_move_down::removed#0 -- vbuz1=vbuz2 
    lda.z removed
    sta.z play_update_score.removed
    // [278] call play_update_score 
    jsr play_update_score
    // [279] phi from play_move_down::@15 to play_move_down::@16 [phi:play_move_down::@15->play_move_down::@16]
  b16_from_b15:
    jmp b16
    // play_move_down::@16
  b16:
    // [280] call play_spawn_current 
    // [287] phi from play_move_down::@16 to play_spawn_current [phi:play_move_down::@16->play_spawn_current]
  play_spawn_current_from_b16:
    // [287] phi (byte) game_over#65 = (byte) game_over#10 [phi:play_move_down::@16->play_spawn_current#0] -- register_copy 
    // [287] phi (byte) next_piece_idx#17 = (byte) next_piece_idx#10 [phi:play_move_down::@16->play_spawn_current#1] -- register_copy 
    jsr play_spawn_current
    jmp b17
    // play_move_down::@17
  b17:
    // [281] (byte*~) current_piece#93 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current._7
    lda PIECES,y
    sta.z current_piece
    lda PIECES+1,y
    sta.z current_piece+1
    // [282] (byte*~) current_piece_gfx#117 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current._7
    lda PIECES,y
    sta.z current_piece_gfx
    lda PIECES+1,y
    sta.z current_piece_gfx+1
    // [283] phi from play_move_down::@17 to play_move_down::@11 [phi:play_move_down::@17->play_move_down::@11]
  b11_from_b17:
    // [283] phi (byte) next_piece_idx#30 = (byte) play_spawn_current::piece_idx#2 [phi:play_move_down::@17->play_move_down::@11#0] -- register_copy 
    // [283] phi (byte) game_over#27 = (byte) game_over#52 [phi:play_move_down::@17->play_move_down::@11#1] -- register_copy 
    // [283] phi (byte) current_xpos#43 = (byte) current_xpos#100 [phi:play_move_down::@17->play_move_down::@11#2] -- register_copy 
    // [283] phi (byte*) current_piece_gfx#35 = (byte*~) current_piece_gfx#117 [phi:play_move_down::@17->play_move_down::@11#3] -- register_copy 
    // [283] phi (byte) current_orientation#37 = (byte) 0 [phi:play_move_down::@17->play_move_down::@11#4] -- vbuz1=vbuc1 
    lda #0
    sta.z current_orientation
    // [283] phi (byte) current_piece_char#29 = (byte) current_piece_char#5 [phi:play_move_down::@17->play_move_down::@11#5] -- register_copy 
    // [283] phi (byte*) current_piece#28 = (byte*~) current_piece#93 [phi:play_move_down::@17->play_move_down::@11#6] -- register_copy 
    // [283] phi (byte) level_bcd#31 = (byte) level_bcd#19 [phi:play_move_down::@17->play_move_down::@11#7] -- register_copy 
    // [283] phi (byte) current_movedown_slow#37 = (byte) current_movedown_slow#23 [phi:play_move_down::@17->play_move_down::@11#8] -- register_copy 
    // [283] phi (byte) level#33 = (byte) level#19 [phi:play_move_down::@17->play_move_down::@11#9] -- register_copy 
    // [283] phi (dword) score_bcd#26 = (dword) score_bcd#16 [phi:play_move_down::@17->play_move_down::@11#10] -- register_copy 
    // [283] phi (word) lines_bcd#26 = (word) lines_bcd#17 [phi:play_move_down::@17->play_move_down::@11#11] -- register_copy 
    // [283] phi (byte) current_ypos#38 = (byte) current_ypos#6 [phi:play_move_down::@17->play_move_down::@11#12] -- register_copy 
    jmp b11
    // play_move_down::@11
  b11:
    // [284] phi from play_move_down::@11 to play_move_down::@return [phi:play_move_down::@11->play_move_down::@return]
  breturn_from_b11:
    // [284] phi (byte) next_piece_idx#16 = (byte) next_piece_idx#30 [phi:play_move_down::@11->play_move_down::@return#0] -- register_copy 
    // [284] phi (byte) game_over#15 = (byte) game_over#27 [phi:play_move_down::@11->play_move_down::@return#1] -- register_copy 
    // [284] phi (byte) current_xpos#22 = (byte) current_xpos#43 [phi:play_move_down::@11->play_move_down::@return#2] -- register_copy 
    // [284] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#35 [phi:play_move_down::@11->play_move_down::@return#3] -- register_copy 
    // [284] phi (byte) current_orientation#20 = (byte) current_orientation#37 [phi:play_move_down::@11->play_move_down::@return#4] -- register_copy 
    // [284] phi (byte) current_piece_char#16 = (byte) current_piece_char#29 [phi:play_move_down::@11->play_move_down::@return#5] -- register_copy 
    // [284] phi (byte*) current_piece#15 = (byte*) current_piece#28 [phi:play_move_down::@11->play_move_down::@return#6] -- register_copy 
    // [284] phi (byte) level_bcd#17 = (byte) level_bcd#31 [phi:play_move_down::@11->play_move_down::@return#7] -- register_copy 
    // [284] phi (byte) current_movedown_slow#21 = (byte) current_movedown_slow#37 [phi:play_move_down::@11->play_move_down::@return#8] -- register_copy 
    // [284] phi (byte) level#17 = (byte) level#33 [phi:play_move_down::@11->play_move_down::@return#9] -- register_copy 
    // [284] phi (dword) score_bcd#14 = (dword) score_bcd#26 [phi:play_move_down::@11->play_move_down::@return#10] -- register_copy 
    // [284] phi (word) lines_bcd#15 = (word) lines_bcd#26 [phi:play_move_down::@11->play_move_down::@return#11] -- register_copy 
    // [284] phi (byte) current_ypos#19 = (byte) current_ypos#38 [phi:play_move_down::@11->play_move_down::@return#12] -- register_copy 
    // [284] phi (byte) current_movedown_counter#14 = (byte) 0 [phi:play_move_down::@11->play_move_down::@return#13] -- vbuz1=vbuc1 
    lda #0
    sta.z current_movedown_counter
    // [284] phi (byte) play_move_down::return#3 = (byte) 1 [phi:play_move_down::@11->play_move_down::@return#14] -- vbuz1=vbuc1 
    lda #1
    sta.z return_3
    jmp breturn
    // [284] phi from play_move_down::@3 to play_move_down::@return [phi:play_move_down::@3->play_move_down::@return]
  breturn_from_b3:
    // [284] phi (byte) next_piece_idx#16 = (byte) next_piece_idx#10 [phi:play_move_down::@3->play_move_down::@return#0] -- register_copy 
    // [284] phi (byte) game_over#15 = (byte) game_over#10 [phi:play_move_down::@3->play_move_down::@return#1] -- register_copy 
    // [284] phi (byte) current_xpos#22 = (byte) current_xpos#14 [phi:play_move_down::@3->play_move_down::@return#2] -- register_copy 
    // [284] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#13 [phi:play_move_down::@3->play_move_down::@return#3] -- register_copy 
    // [284] phi (byte) current_orientation#20 = (byte) current_orientation#13 [phi:play_move_down::@3->play_move_down::@return#4] -- register_copy 
    // [284] phi (byte) current_piece_char#16 = (byte) current_piece_char#10 [phi:play_move_down::@3->play_move_down::@return#5] -- register_copy 
    // [284] phi (byte*) current_piece#15 = (byte*) current_piece#10 [phi:play_move_down::@3->play_move_down::@return#6] -- register_copy 
    // [284] phi (byte) level_bcd#17 = (byte) level_bcd#11 [phi:play_move_down::@3->play_move_down::@return#7] -- register_copy 
    // [284] phi (byte) current_movedown_slow#21 = (byte) current_movedown_slow#14 [phi:play_move_down::@3->play_move_down::@return#8] -- register_copy 
    // [284] phi (byte) level#17 = (byte) level#10 [phi:play_move_down::@3->play_move_down::@return#9] -- register_copy 
    // [284] phi (dword) score_bcd#14 = (dword) score_bcd#18 [phi:play_move_down::@3->play_move_down::@return#10] -- register_copy 
    // [284] phi (word) lines_bcd#15 = (word) lines_bcd#19 [phi:play_move_down::@3->play_move_down::@return#11] -- register_copy 
    // [284] phi (byte) current_ypos#19 = (byte) current_ypos#11 [phi:play_move_down::@3->play_move_down::@return#12] -- register_copy 
    // [284] phi (byte) current_movedown_counter#14 = (byte) current_movedown_counter#12 [phi:play_move_down::@3->play_move_down::@return#13] -- register_copy 
    // [284] phi (byte) play_move_down::return#3 = (byte) 0 [phi:play_move_down::@3->play_move_down::@return#14] -- vbuz1=vbuc1 
    lda #0
    sta.z return_3
    jmp breturn
    // play_move_down::@return
  breturn:
    // [285] return 
    rts
    // play_move_down::@10
  b10:
    // [286] (byte) current_ypos#3 ← ++ (byte) current_ypos#11 -- vbuz1=_inc_vbuz1 
    inc.z current_ypos
    // [283] phi from play_move_down::@10 to play_move_down::@11 [phi:play_move_down::@10->play_move_down::@11]
  b11_from_b10:
    // [283] phi (byte) next_piece_idx#30 = (byte) next_piece_idx#10 [phi:play_move_down::@10->play_move_down::@11#0] -- register_copy 
    // [283] phi (byte) game_over#27 = (byte) game_over#10 [phi:play_move_down::@10->play_move_down::@11#1] -- register_copy 
    // [283] phi (byte) current_xpos#43 = (byte) current_xpos#14 [phi:play_move_down::@10->play_move_down::@11#2] -- register_copy 
    // [283] phi (byte*) current_piece_gfx#35 = (byte*) current_piece_gfx#13 [phi:play_move_down::@10->play_move_down::@11#3] -- register_copy 
    // [283] phi (byte) current_orientation#37 = (byte) current_orientation#13 [phi:play_move_down::@10->play_move_down::@11#4] -- register_copy 
    // [283] phi (byte) current_piece_char#29 = (byte) current_piece_char#10 [phi:play_move_down::@10->play_move_down::@11#5] -- register_copy 
    // [283] phi (byte*) current_piece#28 = (byte*) current_piece#10 [phi:play_move_down::@10->play_move_down::@11#6] -- register_copy 
    // [283] phi (byte) level_bcd#31 = (byte) level_bcd#11 [phi:play_move_down::@10->play_move_down::@11#7] -- register_copy 
    // [283] phi (byte) current_movedown_slow#37 = (byte) current_movedown_slow#14 [phi:play_move_down::@10->play_move_down::@11#8] -- register_copy 
    // [283] phi (byte) level#33 = (byte) level#10 [phi:play_move_down::@10->play_move_down::@11#9] -- register_copy 
    // [283] phi (dword) score_bcd#26 = (dword) score_bcd#18 [phi:play_move_down::@10->play_move_down::@11#10] -- register_copy 
    // [283] phi (word) lines_bcd#26 = (word) lines_bcd#19 [phi:play_move_down::@10->play_move_down::@11#11] -- register_copy 
    // [283] phi (byte) current_ypos#38 = (byte) current_ypos#3 [phi:play_move_down::@10->play_move_down::@11#12] -- register_copy 
    jmp b11
}
  // play_spawn_current
// Spawn a new piece
// Moves the next piece into the current and spawns a new next piece
play_spawn_current: {
    .label _1 = $af
    .label _7 = $ad
    .label current_piece_idx = $ac
    .label sid_rnd1_return = $b0
    .label piece_idx = $4a
    // [288] (byte) play_spawn_current::current_piece_idx#0 ← (byte) next_piece_idx#17 -- vbuz1=vbuz2 
    // Move next piece into current
    lda.z next_piece_idx
    sta.z current_piece_idx
    // [289] (byte~) play_spawn_current::$7 ← (byte) play_spawn_current::current_piece_idx#0 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z current_piece_idx
    asl
    sta.z _7
    // [290] (byte) current_piece_char#5 ← *((const byte[]) PIECES_CHARS#0 + (byte) play_spawn_current::current_piece_idx#0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z current_piece_idx
    lda PIECES_CHARS,y
    sta.z current_piece_char
    // [291] (byte) current_xpos#100 ← *((const byte[]) PIECES_START_X#0 + (byte) play_spawn_current::current_piece_idx#0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z current_piece_idx
    lda PIECES_START_X,y
    sta.z current_xpos
    // [292] (byte) current_ypos#6 ← *((const byte[]) PIECES_START_Y#0 + (byte) play_spawn_current::current_piece_idx#0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z current_piece_idx
    lda PIECES_START_Y,y
    sta.z current_ypos
    // [293] (byte) play_collision::xpos#4 ← (byte) current_xpos#100 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z play_collision.xpos
    // [294] (byte) play_collision::ypos#4 ← (byte) current_ypos#6 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [295] (byte*~) current_piece#100 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z _7
    lda PIECES,y
    sta.z current_piece_100
    lda PIECES+1,y
    sta.z current_piece_100+1
    // [296] call play_collision 
    // [202] phi from play_spawn_current to play_collision [phi:play_spawn_current->play_collision]
  play_collision_from_play_spawn_current:
    // [202] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#4 [phi:play_spawn_current->play_collision#0] -- register_copy 
    // [202] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#4 [phi:play_spawn_current->play_collision#1] -- register_copy 
    // [202] phi (byte) play_collision::orientation#5 = (byte) 0 [phi:play_spawn_current->play_collision#2] -- vbuz1=vbuc1 
    lda #0
    sta.z play_collision.orientation
    // [202] phi (byte*) current_piece#17 = (byte*~) current_piece#100 [phi:play_spawn_current->play_collision#3] -- register_copy 
    jsr play_collision
    // [297] (byte) play_collision::return#10 ← (byte) play_collision::return#15 -- vbuz1=vbuz2 
    lda.z play_collision.return_15
    sta.z play_collision.return_10
    jmp b4
    // play_spawn_current::@4
  b4:
    // [298] (byte~) play_spawn_current::$1 ← (byte) play_collision::return#10 -- vbuz1=vbuz2 
    lda.z play_collision.return_10
    sta.z _1
    // [299] if((byte~) play_spawn_current::$1!=(const byte) COLLISION_PLAYFIELD#0) goto play_spawn_current::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #COLLISION_PLAYFIELD
    cmp.z _1
    bne b5_from_b4
    // [301] phi from play_spawn_current::@4 to play_spawn_current::@1 [phi:play_spawn_current::@4->play_spawn_current::@1]
  b1_from_b4:
    // [301] phi (byte) game_over#52 = (byte) 1 [phi:play_spawn_current::@4->play_spawn_current::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z game_over
    jmp b1
    // [300] phi from play_spawn_current::@4 to play_spawn_current::@5 [phi:play_spawn_current::@4->play_spawn_current::@5]
  b5_from_b4:
    jmp b5
    // play_spawn_current::@5
  b5:
    // [301] phi from play_spawn_current::@5 to play_spawn_current::@1 [phi:play_spawn_current::@5->play_spawn_current::@1]
  b1_from_b5:
    // [301] phi (byte) game_over#52 = (byte) game_over#65 [phi:play_spawn_current::@5->play_spawn_current::@1#0] -- register_copy 
    jmp b1
    // play_spawn_current::@1
  b1:
    // [302] phi from play_spawn_current::@1 to play_spawn_current::@2 [phi:play_spawn_current::@1->play_spawn_current::@2]
  b2_from_b1:
    // [302] phi (byte) play_spawn_current::piece_idx#2 = (byte) 7 [phi:play_spawn_current::@1->play_spawn_current::@2#0] -- vbuz1=vbuc1 
    lda #7
    sta.z piece_idx
    jmp b2
    // play_spawn_current::@2
  b2:
    // [303] if((byte) play_spawn_current::piece_idx#2==(byte) 7) goto play_spawn_current::sid_rnd1 -- vbuz1_eq_vbuc1_then_la1 
    lda #7
    cmp.z piece_idx
    beq sid_rnd1
    jmp breturn
    // play_spawn_current::@return
  breturn:
    // [304] return 
    rts
    // play_spawn_current::sid_rnd1
  sid_rnd1:
    // [305] (byte) play_spawn_current::sid_rnd1_return#0 ← *((const byte*) SID_VOICE3_OSC#0) -- vbuz1=_deref_pbuc1 
    lda SID_VOICE3_OSC
    sta.z sid_rnd1_return
    jmp b3
    // play_spawn_current::@3
  b3:
    // [306] (byte) play_spawn_current::piece_idx#1 ← (byte) play_spawn_current::sid_rnd1_return#0 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z sid_rnd1_return
    sta.z piece_idx
    // [302] phi from play_spawn_current::@3 to play_spawn_current::@2 [phi:play_spawn_current::@3->play_spawn_current::@2]
  b2_from_b3:
    // [302] phi (byte) play_spawn_current::piece_idx#2 = (byte) play_spawn_current::piece_idx#1 [phi:play_spawn_current::@3->play_spawn_current::@2#0] -- register_copy 
    jmp b2
}
  // play_update_score
// Update the score based on the number of lines removed
// play_update_score(byte zeropage($ab) removed)
play_update_score: {
    .label _2 = $b1
    .label _4 = $b8
    .label _9 = $b3
    .label removed = $ab
    .label lines_before = $b2
    .label add_bcd = $b4
    .label lines_after = $b9
    // [307] if((byte) play_update_score::removed#0==(byte) 0) goto play_update_score::@return -- vbuz1_eq_0_then_la1 
    lda.z removed
    cmp #0
    beq breturn_from_play_update_score
    jmp b1
    // play_update_score::@1
  b1:
    // [308] (byte~) play_update_score::$2 ← < (word) lines_bcd#19 -- vbuz1=_lo_vwuz2 
    lda.z lines_bcd
    sta.z _2
    // [309] (byte) play_update_score::lines_before#0 ← (byte~) play_update_score::$2 & (byte) $f0 -- vbuz1=vbuz2_band_vbuc1 
    lda #$f0
    and.z _2
    sta.z lines_before
    // [310] (byte~) play_update_score::$9 ← (byte) play_update_score::removed#0 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z removed
    asl
    asl
    sta.z _9
    // [311] (dword) play_update_score::add_bcd#0 ← *((const dword[5]) score_add_bcd#0 + (byte~) play_update_score::$9) -- vduz1=pduc1_derefidx_vbuz2 
    ldy.z _9
    lda score_add_bcd,y
    sta.z add_bcd
    lda score_add_bcd+1,y
    sta.z add_bcd+1
    lda score_add_bcd+2,y
    sta.z add_bcd+2
    lda score_add_bcd+3,y
    sta.z add_bcd+3
    // asm { sed  }
    sed
    // [313] (word) lines_bcd#29 ← (word) lines_bcd#19 + (byte) play_update_score::removed#0 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z removed
    clc
    adc.z lines_bcd
    sta.z lines_bcd
    bcc !+
    inc.z lines_bcd+1
  !:
    // [314] (dword) score_bcd#29 ← (dword) score_bcd#18 + (dword) play_update_score::add_bcd#0 -- vduz1=vduz1_plus_vduz2 
    lda.z score_bcd
    clc
    adc.z add_bcd
    sta.z score_bcd
    lda.z score_bcd+1
    adc.z add_bcd+1
    sta.z score_bcd+1
    lda.z score_bcd+2
    adc.z add_bcd+2
    sta.z score_bcd+2
    lda.z score_bcd+3
    adc.z add_bcd+3
    sta.z score_bcd+3
    // asm { cld  }
    cld
    // [316] (byte~) play_update_score::$4 ← < (word) lines_bcd#29 -- vbuz1=_lo_vwuz2 
    lda.z lines_bcd
    sta.z _4
    // [317] (byte) play_update_score::lines_after#0 ← (byte~) play_update_score::$4 & (byte) $f0 -- vbuz1=vbuz2_band_vbuc1 
    lda #$f0
    and.z _4
    sta.z lines_after
    // [318] if((byte) play_update_score::lines_before#0==(byte) play_update_score::lines_after#0) goto play_update_score::@return -- vbuz1_eq_vbuz2_then_la1 
    lda.z lines_before
    cmp.z lines_after
    beq breturn_from_b1
    // [319] phi from play_update_score::@1 to play_update_score::@2 [phi:play_update_score::@1->play_update_score::@2]
  b2_from_b1:
    jmp b2
    // play_update_score::@2
  b2:
    // [320] call play_increase_level 
    jsr play_increase_level
    // [321] phi from play_update_score play_update_score::@1 play_update_score::@2 to play_update_score::@return [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return]
  breturn_from_play_update_score:
  breturn_from_b1:
  breturn_from_b2:
    // [321] phi (byte) level_bcd#19 = (byte) level_bcd#11 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#0] -- register_copy 
    // [321] phi (byte) current_movedown_slow#23 = (byte) current_movedown_slow#14 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#1] -- register_copy 
    // [321] phi (byte) level#19 = (byte) level#10 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#2] -- register_copy 
    // [321] phi (dword) score_bcd#16 = (dword) score_bcd#18 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#3] -- register_copy 
    // [321] phi (word) lines_bcd#17 = (word) lines_bcd#19 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#4] -- register_copy 
    jmp breturn
    // play_update_score::@return
  breturn:
    // [322] return 
    rts
}
  // play_increase_level
// Increase the level
play_increase_level: {
    .label _1 = $ba
    .label _5 = $bb
    .label b = $4c
    // [323] (byte) level#21 ← ++ (byte) level#10 -- vbuz1=_inc_vbuz1 
    inc.z level
    // [324] if((byte) level#21>=(byte) $1d+(byte) 1) goto play_increase_level::@1 -- vbuz1_ge_vbuc1_then_la1 
    // Update speed of moving tetrominos down
    lda.z level
    cmp #$1d+1
    bcs b1_from_play_increase_level
    jmp b3
    // play_increase_level::@3
  b3:
    // [325] (byte) current_movedown_slow#10 ← *((const byte[]) MOVEDOWN_SLOW_SPEEDS#0 + (byte) level#21) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z level
    lda MOVEDOWN_SLOW_SPEEDS,y
    sta.z current_movedown_slow
    // [326] phi from play_increase_level::@3 to play_increase_level::@1 [phi:play_increase_level::@3->play_increase_level::@1]
  b1_from_b3:
    // [326] phi (byte) current_movedown_slow#66 = (byte) current_movedown_slow#10 [phi:play_increase_level::@3->play_increase_level::@1#0] -- register_copy 
    jmp b1
    // [326] phi from play_increase_level to play_increase_level::@1 [phi:play_increase_level->play_increase_level::@1]
  b1_from_play_increase_level:
    // [326] phi (byte) current_movedown_slow#66 = (byte) 1 [phi:play_increase_level->play_increase_level::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z current_movedown_slow
    jmp b1
    // play_increase_level::@1
  b1:
    // [327] (byte) level_bcd#21 ← ++ (byte) level_bcd#11 -- vbuz1=_inc_vbuz1 
    inc.z level_bcd
    // [328] (byte~) play_increase_level::$1 ← (byte) level_bcd#21 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z level_bcd
    sta.z _1
    // [329] if((byte~) play_increase_level::$1!=(byte) $a) goto play_increase_level::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$a
    cmp.z _1
    bne b2_from_b1
    jmp b4
    // play_increase_level::@4
  b4:
    // [330] (byte) level_bcd#8 ← (byte) level_bcd#21 + (byte) 6 -- vbuz1=vbuz1_plus_vbuc1 
    // If level low nybble hits $a change to $10
    lax.z level_bcd
    axs #-[6]
    stx.z level_bcd
    // [331] phi from play_increase_level::@1 play_increase_level::@4 to play_increase_level::@2 [phi:play_increase_level::@1/play_increase_level::@4->play_increase_level::@2]
  b2_from_b1:
  b2_from_b4:
    // [331] phi (byte) level_bcd#62 = (byte) level_bcd#21 [phi:play_increase_level::@1/play_increase_level::@4->play_increase_level::@2#0] -- register_copy 
    jmp b2
    // play_increase_level::@2
  b2:
    // asm { sed  }
    // Increase the score values gained
    sed
    // [333] phi from play_increase_level::@2 to play_increase_level::@5 [phi:play_increase_level::@2->play_increase_level::@5]
  b5_from_b2:
    // [333] phi (byte) play_increase_level::b#2 = (byte) 0 [phi:play_increase_level::@2->play_increase_level::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta.z b
    jmp b5
    // [333] phi from play_increase_level::@5 to play_increase_level::@5 [phi:play_increase_level::@5->play_increase_level::@5]
  b5_from_b5:
    // [333] phi (byte) play_increase_level::b#2 = (byte) play_increase_level::b#1 [phi:play_increase_level::@5->play_increase_level::@5#0] -- register_copy 
    jmp b5
    // play_increase_level::@5
  b5:
    // [334] (byte~) play_increase_level::$5 ← (byte) play_increase_level::b#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z b
    asl
    asl
    sta.z _5
    // [335] *((const dword[5]) score_add_bcd#0 + (byte~) play_increase_level::$5) ← *((const dword[5]) score_add_bcd#0 + (byte~) play_increase_level::$5) + *((const dword[]) SCORE_BASE_BCD#0 + (byte~) play_increase_level::$5) -- pduc1_derefidx_vbuz1=pduc1_derefidx_vbuz1_plus_pduc2_derefidx_vbuz1 
    ldy.z _5
    clc
    lda score_add_bcd,y
    adc SCORE_BASE_BCD,y
    sta score_add_bcd,y
    lda score_add_bcd+1,y
    adc SCORE_BASE_BCD+1,y
    sta score_add_bcd+1,y
    lda score_add_bcd+2,y
    adc SCORE_BASE_BCD+2,y
    sta score_add_bcd+2,y
    lda score_add_bcd+3,y
    adc SCORE_BASE_BCD+3,y
    sta score_add_bcd+3,y
    // [336] (byte) play_increase_level::b#1 ← ++ (byte) play_increase_level::b#2 -- vbuz1=_inc_vbuz1 
    inc.z b
    // [337] if((byte) play_increase_level::b#1!=(byte) 5) goto play_increase_level::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp.z b
    bne b5_from_b5
    jmp b6
    // play_increase_level::@6
  b6:
    // asm { cld  }
    cld
    jmp breturn
    // play_increase_level::@return
  breturn:
    // [339] return 
    rts
}
  // play_remove_lines
// Look through the playfield for lines - and remove any lines found
// Utilizes two cursors on the playfield - one reading cells and one writing cells
// Whenever a full line is detected the writing cursor is instructed to write to the same line once more.
// Returns the number of lines removed
play_remove_lines: {
    .label return = $a9
    .label c = $bc
    .label r = $4f
    .label w = $52
    .label x = $50
    .label y = $4d
    .label removed = $4e
    .label full = $51
    // [341] phi from play_remove_lines to play_remove_lines::@1 [phi:play_remove_lines->play_remove_lines::@1]
  b1_from_play_remove_lines:
    // [341] phi (byte) play_remove_lines::removed#11 = (byte) 0 [phi:play_remove_lines->play_remove_lines::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z removed
    // [341] phi (byte) play_remove_lines::y#8 = (byte) 0 [phi:play_remove_lines->play_remove_lines::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [341] phi (byte) play_remove_lines::w#12 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte) 1 [phi:play_remove_lines->play_remove_lines::@1#2] -- vbuz1=vbuc1 
    lda #PLAYFIELD_LINES*PLAYFIELD_COLS-1
    sta.z w
    // [341] phi (byte) play_remove_lines::r#3 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte) 1 [phi:play_remove_lines->play_remove_lines::@1#3] -- vbuz1=vbuc1 
    lda #PLAYFIELD_LINES*PLAYFIELD_COLS-1
    sta.z r
    jmp b1
  // Read all lines and rewrite them
    // [341] phi from play_remove_lines::@6 to play_remove_lines::@1 [phi:play_remove_lines::@6->play_remove_lines::@1]
  b1_from_b6:
    // [341] phi (byte) play_remove_lines::removed#11 = (byte) play_remove_lines::removed#8 [phi:play_remove_lines::@6->play_remove_lines::@1#0] -- register_copy 
    // [341] phi (byte) play_remove_lines::y#8 = (byte) play_remove_lines::y#1 [phi:play_remove_lines::@6->play_remove_lines::@1#1] -- register_copy 
    // [341] phi (byte) play_remove_lines::w#12 = (byte) play_remove_lines::w#11 [phi:play_remove_lines::@6->play_remove_lines::@1#2] -- register_copy 
    // [341] phi (byte) play_remove_lines::r#3 = (byte) play_remove_lines::r#1 [phi:play_remove_lines::@6->play_remove_lines::@1#3] -- register_copy 
    jmp b1
    // play_remove_lines::@1
  b1:
    // [342] phi from play_remove_lines::@1 to play_remove_lines::@2 [phi:play_remove_lines::@1->play_remove_lines::@2]
  b2_from_b1:
    // [342] phi (byte) play_remove_lines::full#4 = (byte) 1 [phi:play_remove_lines::@1->play_remove_lines::@2#0] -- vbuz1=vbuc1 
    lda #1
    sta.z full
    // [342] phi (byte) play_remove_lines::x#2 = (byte) 0 [phi:play_remove_lines::@1->play_remove_lines::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [342] phi (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#12 [phi:play_remove_lines::@1->play_remove_lines::@2#2] -- register_copy 
    // [342] phi (byte) play_remove_lines::r#2 = (byte) play_remove_lines::r#3 [phi:play_remove_lines::@1->play_remove_lines::@2#3] -- register_copy 
    jmp b2
    // [342] phi from play_remove_lines::@3 to play_remove_lines::@2 [phi:play_remove_lines::@3->play_remove_lines::@2]
  b2_from_b3:
    // [342] phi (byte) play_remove_lines::full#4 = (byte) play_remove_lines::full#2 [phi:play_remove_lines::@3->play_remove_lines::@2#0] -- register_copy 
    // [342] phi (byte) play_remove_lines::x#2 = (byte) play_remove_lines::x#1 [phi:play_remove_lines::@3->play_remove_lines::@2#1] -- register_copy 
    // [342] phi (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#1 [phi:play_remove_lines::@3->play_remove_lines::@2#2] -- register_copy 
    // [342] phi (byte) play_remove_lines::r#2 = (byte) play_remove_lines::r#1 [phi:play_remove_lines::@3->play_remove_lines::@2#3] -- register_copy 
    jmp b2
    // play_remove_lines::@2
  b2:
    // [343] (byte) play_remove_lines::c#0 ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::r#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z r
    lda playfield,y
    sta.z c
    // [344] (byte) play_remove_lines::r#1 ← -- (byte) play_remove_lines::r#2 -- vbuz1=_dec_vbuz1 
    dec.z r
    // [345] if((byte) play_remove_lines::c#0!=(byte) 0) goto play_remove_lines::@9 -- vbuz1_neq_0_then_la1 
    lda.z c
    cmp #0
    bne b9_from_b2
    // [347] phi from play_remove_lines::@2 to play_remove_lines::@3 [phi:play_remove_lines::@2->play_remove_lines::@3]
  b3_from_b2:
    // [347] phi (byte) play_remove_lines::full#2 = (byte) 0 [phi:play_remove_lines::@2->play_remove_lines::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z full
    jmp b3
    // [346] phi from play_remove_lines::@2 to play_remove_lines::@9 [phi:play_remove_lines::@2->play_remove_lines::@9]
  b9_from_b2:
    jmp b9
    // play_remove_lines::@9
  b9:
    // [347] phi from play_remove_lines::@9 to play_remove_lines::@3 [phi:play_remove_lines::@9->play_remove_lines::@3]
  b3_from_b9:
    // [347] phi (byte) play_remove_lines::full#2 = (byte) play_remove_lines::full#4 [phi:play_remove_lines::@9->play_remove_lines::@3#0] -- register_copy 
    jmp b3
    // play_remove_lines::@3
  b3:
    // [348] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#4) ← (byte) play_remove_lines::c#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z c
    ldy.z w
    sta playfield,y
    // [349] (byte) play_remove_lines::w#1 ← -- (byte) play_remove_lines::w#4 -- vbuz1=_dec_vbuz1 
    dec.z w
    // [350] (byte) play_remove_lines::x#1 ← ++ (byte) play_remove_lines::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [351] if((byte) play_remove_lines::x#1!=(const byte) PLAYFIELD_COLS#0-(byte) 1+(byte) 1) goto play_remove_lines::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_COLS-1+1
    cmp.z x
    bne b2_from_b3
    jmp b4
    // play_remove_lines::@4
  b4:
    // [352] if((byte) play_remove_lines::full#2!=(byte) 1) goto play_remove_lines::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp.z full
    bne b6_from_b4
    jmp b5
    // play_remove_lines::@5
  b5:
    // [353] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z w
    axs #-[PLAYFIELD_COLS]
    stx.z w
    // [354] (byte) play_remove_lines::removed#1 ← ++ (byte) play_remove_lines::removed#11 -- vbuz1=_inc_vbuz1 
    inc.z removed
    // [355] phi from play_remove_lines::@4 play_remove_lines::@5 to play_remove_lines::@6 [phi:play_remove_lines::@4/play_remove_lines::@5->play_remove_lines::@6]
  b6_from_b4:
  b6_from_b5:
    // [355] phi (byte) play_remove_lines::removed#8 = (byte) play_remove_lines::removed#11 [phi:play_remove_lines::@4/play_remove_lines::@5->play_remove_lines::@6#0] -- register_copy 
    // [355] phi (byte) play_remove_lines::w#11 = (byte) play_remove_lines::w#1 [phi:play_remove_lines::@4/play_remove_lines::@5->play_remove_lines::@6#1] -- register_copy 
    jmp b6
    // play_remove_lines::@6
  b6:
    // [356] (byte) play_remove_lines::y#1 ← ++ (byte) play_remove_lines::y#8 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [357] if((byte) play_remove_lines::y#1!=(const byte) PLAYFIELD_LINES#0-(byte) 1+(byte) 1) goto play_remove_lines::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_LINES-1+1
    cmp.z y
    bne b1_from_b6
    // [358] phi from play_remove_lines::@6 play_remove_lines::@8 to play_remove_lines::@7 [phi:play_remove_lines::@6/play_remove_lines::@8->play_remove_lines::@7]
  b7_from_b6:
  b7_from_b8:
    // [358] phi (byte) play_remove_lines::w#6 = (byte) play_remove_lines::w#11 [phi:play_remove_lines::@6/play_remove_lines::@8->play_remove_lines::@7#0] -- register_copy 
    jmp b7
  // Write zeros in the rest of the lines
    // play_remove_lines::@7
  b7:
    // [359] if((byte) play_remove_lines::w#6!=(byte) $ff) goto play_remove_lines::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z w
    bne b8
    jmp breturn
    // play_remove_lines::@return
  breturn:
    // [360] return 
    rts
    // play_remove_lines::@8
  b8:
    // [361] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#6) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z w
    sta playfield,y
    // [362] (byte) play_remove_lines::w#3 ← -- (byte) play_remove_lines::w#6 -- vbuz1=_dec_vbuz1 
    dec.z w
    jmp b7_from_b8
}
  // play_lock_current
// Lock the current piece onto the playfield
play_lock_current: {
    .label _4 = $bd
    .label yp = $53
    .label playfield_line = $be
    .label xp = $56
    .label i = $c0
    .label c = $57
    .label l = $54
    .label i_2 = $55
    .label i_3 = $55
    .label i_7 = $55
    .label i_9 = $55
    // [363] (byte) play_lock_current::yp#0 ← (byte) current_ypos#11 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z yp
    // [364] phi from play_lock_current to play_lock_current::@1 [phi:play_lock_current->play_lock_current::@1]
  b1_from_play_lock_current:
    // [364] phi (byte) play_lock_current::l#6 = (byte) 0 [phi:play_lock_current->play_lock_current::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [364] phi (byte) play_lock_current::i#3 = (byte) 0 [phi:play_lock_current->play_lock_current::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i_3
    // [364] phi (byte) play_lock_current::yp#2 = (byte) play_lock_current::yp#0 [phi:play_lock_current->play_lock_current::@1#2] -- register_copy 
    jmp b1
    // play_lock_current::@1
  b1:
    // [365] (byte~) play_lock_current::$4 ← (byte) play_lock_current::yp#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z yp
    asl
    sta.z _4
    // [366] (byte*) play_lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_lock_current::$4) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z _4
    lda playfield_lines,y
    sta.z playfield_line
    lda playfield_lines+1,y
    sta.z playfield_line+1
    // [367] (byte) play_lock_current::xp#0 ← (byte) current_xpos#14 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z xp
    // [368] phi from play_lock_current::@1 to play_lock_current::@2 [phi:play_lock_current::@1->play_lock_current::@2]
  b2_from_b1:
    // [368] phi (byte) play_lock_current::c#2 = (byte) 0 [phi:play_lock_current::@1->play_lock_current::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [368] phi (byte) play_lock_current::xp#2 = (byte) play_lock_current::xp#0 [phi:play_lock_current::@1->play_lock_current::@2#1] -- register_copy 
    // [368] phi (byte) play_lock_current::i#2 = (byte) play_lock_current::i#3 [phi:play_lock_current::@1->play_lock_current::@2#2] -- register_copy 
    jmp b2
    // play_lock_current::@2
  b2:
    // [369] (byte) play_lock_current::i#1 ← ++ (byte) play_lock_current::i#2 -- vbuz1=_inc_vbuz2 
    ldy.z i_2
    iny
    sty.z i
    // [370] if(*((byte*) current_piece_gfx#13 + (byte) play_lock_current::i#2)==(byte) 0) goto play_lock_current::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy.z i_2
    lda (current_piece_gfx),y
    cmp #0
    beq b3
    jmp b4
    // play_lock_current::@4
  b4:
    // [371] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::xp#2) ← (byte) current_piece_char#10 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z current_piece_char
    ldy.z xp
    sta (playfield_line),y
    jmp b3
    // play_lock_current::@3
  b3:
    // [372] (byte) play_lock_current::xp#1 ← ++ (byte) play_lock_current::xp#2 -- vbuz1=_inc_vbuz1 
    inc.z xp
    // [373] (byte) play_lock_current::c#1 ← ++ (byte) play_lock_current::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [374] if((byte) play_lock_current::c#1!=(byte) 4) goto play_lock_current::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z c
    bne b7
    jmp b5
    // play_lock_current::@5
  b5:
    // [375] (byte) play_lock_current::yp#1 ← ++ (byte) play_lock_current::yp#2 -- vbuz1=_inc_vbuz1 
    inc.z yp
    // [376] (byte) play_lock_current::l#1 ← ++ (byte) play_lock_current::l#6 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [377] if((byte) play_lock_current::l#1!=(byte) 4) goto play_lock_current::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne b6
    jmp breturn
    // play_lock_current::@return
  breturn:
    // [378] return 
    rts
    // play_lock_current::@6
  b6:
    // [379] (byte~) play_lock_current::i#7 ← (byte) play_lock_current::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_7
    // [364] phi from play_lock_current::@6 to play_lock_current::@1 [phi:play_lock_current::@6->play_lock_current::@1]
  b1_from_b6:
    // [364] phi (byte) play_lock_current::l#6 = (byte) play_lock_current::l#1 [phi:play_lock_current::@6->play_lock_current::@1#0] -- register_copy 
    // [364] phi (byte) play_lock_current::i#3 = (byte~) play_lock_current::i#7 [phi:play_lock_current::@6->play_lock_current::@1#1] -- register_copy 
    // [364] phi (byte) play_lock_current::yp#2 = (byte) play_lock_current::yp#1 [phi:play_lock_current::@6->play_lock_current::@1#2] -- register_copy 
    jmp b1
    // play_lock_current::@7
  b7:
    // [380] (byte~) play_lock_current::i#9 ← (byte) play_lock_current::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_9
    // [368] phi from play_lock_current::@7 to play_lock_current::@2 [phi:play_lock_current::@7->play_lock_current::@2]
  b2_from_b7:
    // [368] phi (byte) play_lock_current::c#2 = (byte) play_lock_current::c#1 [phi:play_lock_current::@7->play_lock_current::@2#0] -- register_copy 
    // [368] phi (byte) play_lock_current::xp#2 = (byte) play_lock_current::xp#1 [phi:play_lock_current::@7->play_lock_current::@2#1] -- register_copy 
    // [368] phi (byte) play_lock_current::i#2 = (byte~) play_lock_current::i#9 [phi:play_lock_current::@7->play_lock_current::@2#2] -- register_copy 
    jmp b2
}
  // keyboard_event_pressed
// Determine if a specific key is currently pressed based on the last keyboard_event_scan()
// Returns 0 is not pressed and non-0 if pressed
// keyboard_event_pressed(byte zeropage($58) keycode)
keyboard_event_pressed: {
    .label _0 = $c1
    .label _1 = $c3
    .label return = $c8
    .label return_1 = $ca
    .label return_2 = $cc
    .label row_bits = $c2
    .label return_10 = $ce
    .label keycode = $58
    .label return_11 = $c4
    .label return_12 = $a5
    // [382] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte) 3 -- vbuz1=vbuz2_ror_3 
    lda.z keycode
    lsr
    lsr
    lsr
    sta.z _0
    // [383] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z _0
    lda keyboard_scan_values,y
    sta.z row_bits
    // [384] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z keycode
    sta.z _1
    // [385] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda.z row_bits
    ldy.z _1
    and keyboard_matrix_col_bitmask,y
    sta.z return_11
    jmp breturn
    // keyboard_event_pressed::@return
  breturn:
    // [386] return 
    rts
}
  // keyboard_event_get
// Get the next event from the keyboard event buffer.
// Returns $ff if there is no event waiting. As all events are <$7f it is enough to examine bit 7 when determining if there is any event to process.
// The buffer is filled by keyboard_event_scan()
keyboard_event_get: {
    .label return = $59
    .label return_3 = $7a
    // [387] if((byte) keyboard_events_size#13==(byte) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda.z keyboard_events_size
    cmp #0
    beq breturn_from_keyboard_event_get
    jmp b1
    // keyboard_event_get::@1
  b1:
    // [388] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#13 -- vbuz1=_dec_vbuz1 
    dec.z keyboard_events_size
    // [389] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z keyboard_events_size
    lda keyboard_events,y
    sta.z return
    // [390] phi from keyboard_event_get::@1 to keyboard_event_get::@return [phi:keyboard_event_get::@1->keyboard_event_get::@return]
  breturn_from_b1:
    // [390] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@1->keyboard_event_get::@return#0] -- register_copy 
    // [390] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@1->keyboard_event_get::@return#1] -- register_copy 
    jmp breturn
    // [390] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  breturn_from_keyboard_event_get:
    // [390] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#13 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
    // [390] phi (byte) keyboard_event_get::return#2 = (byte) $ff [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuz1=vbuc1 
    lda #$ff
    sta.z return
    jmp breturn
    // keyboard_event_get::@return
  breturn:
    // [391] return 
    rts
}
  // keyboard_event_scan
// Scans the entire matrix to determine which keys have been pressed/depressed.
// Generates keyboard events into the event buffer. Events can be read using keyboard_event_get().
// Handles debounce and only generates events when the status of a key changes.
// Also stores current status of modifiers in keyboard_modifiers.
keyboard_event_scan: {
    .label _0 = $c9
    .label _3 = $cb
    .label _6 = $cd
    .label _9 = $cf
    .label _15 = $d0
    .label _16 = $d1
    .label _23 = $d3
    .label row_scan = $c7
    .label keycode = $5c
    .label row = $5a
    .label col = $5b
    .label event_type = $d2
    // [393] phi from keyboard_event_scan to keyboard_event_scan::@7 [phi:keyboard_event_scan->keyboard_event_scan::@7]
  b7_from_keyboard_event_scan:
    // [393] phi (byte) keyboard_events_size#30 = (byte) keyboard_events_size#19 [phi:keyboard_event_scan->keyboard_event_scan::@7#0] -- register_copy 
    // [393] phi (byte) keyboard_event_scan::keycode#11 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#1] -- vbuz1=vbuc1 
    lda #0
    sta.z keycode
    // [393] phi (byte) keyboard_event_scan::row#2 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#2] -- vbuz1=vbuc1 
    lda #0
    sta.z row
    jmp b7
    // [393] phi from keyboard_event_scan::@8 to keyboard_event_scan::@7 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7]
  b7_from_b8:
    // [393] phi (byte) keyboard_events_size#30 = (byte) keyboard_events_size#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#0] -- register_copy 
    // [393] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#1] -- register_copy 
    // [393] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#2] -- register_copy 
    jmp b7
    // keyboard_event_scan::@7
  b7:
    // [394] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuz1=vbuz2 
    lda.z row
    sta.z keyboard_matrix_read.rowid
    // [395] call keyboard_matrix_read 
    jsr keyboard_matrix_read
    // [396] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0 -- vbuz1=vbuz2 
    lda.z keyboard_matrix_read.return
    sta.z keyboard_matrix_read.return_2
    jmp b19
    // keyboard_event_scan::@19
  b19:
    // [397] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuz2 
    lda.z keyboard_matrix_read.return_2
    sta.z row_scan
    // [398] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    lda.z row_scan
    ldy.z row
    cmp keyboard_scan_values,y
    bne b9_from_b19
    jmp b16
    // keyboard_event_scan::@16
  b16:
    // [399] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z keycode
    axs #-[8]
    stx.z keycode
    // [400] phi from keyboard_event_scan::@15 keyboard_event_scan::@16 to keyboard_event_scan::@8 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8]
  b8_from_b15:
  b8_from_b16:
    // [400] phi (byte) keyboard_events_size#13 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#0] -- register_copy 
    // [400] phi (byte) keyboard_event_scan::keycode#13 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#1] -- register_copy 
    jmp b8
    // keyboard_event_scan::@8
  b8:
    // [401] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc.z row
    // [402] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z row
    bne b7_from_b8
    // [403] phi from keyboard_event_scan::@8 to keyboard_event_scan::@17 [phi:keyboard_event_scan::@8->keyboard_event_scan::@17]
  b17_from_b8:
    jmp b17
    // keyboard_event_scan::@17
  b17:
    // [404] call keyboard_event_pressed 
    // [381] phi from keyboard_event_scan::@17 to keyboard_event_pressed [phi:keyboard_event_scan::@17->keyboard_event_pressed]
  keyboard_event_pressed_from_b17:
    // [381] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_LSHIFT#0 [phi:keyboard_event_scan::@17->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [405] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_11
    sta.z keyboard_event_pressed.return
    jmp b20
    // keyboard_event_scan::@20
  b20:
    // [406] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return
    sta.z _0
    // [407] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1 -- vbuz1_eq_0_then_la1 
    lda.z _0
    cmp #0
    beq b1_from_b20
    // [408] phi from keyboard_event_scan::@20 to keyboard_event_scan::@18 [phi:keyboard_event_scan::@20->keyboard_event_scan::@18]
  b18_from_b20:
    jmp b18
    // keyboard_event_scan::@18
  b18:
    // [409] phi from keyboard_event_scan::@18 keyboard_event_scan::@20 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@18/keyboard_event_scan::@20->keyboard_event_scan::@1]
  b1_from_b18:
  b1_from_b20:
    jmp b1
    // keyboard_event_scan::@1
  b1:
    // [410] call keyboard_event_pressed 
    // [381] phi from keyboard_event_scan::@1 to keyboard_event_pressed [phi:keyboard_event_scan::@1->keyboard_event_pressed]
  keyboard_event_pressed_from_b1:
    // [381] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_RSHIFT#0 [phi:keyboard_event_scan::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [411] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_11
    sta.z keyboard_event_pressed.return_1
    jmp b21
    // keyboard_event_scan::@21
  b21:
    // [412] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_1
    sta.z _3
    // [413] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2 -- vbuz1_eq_0_then_la1 
    lda.z _3
    cmp #0
    beq b2_from_b21
    // [414] phi from keyboard_event_scan::@21 to keyboard_event_scan::@4 [phi:keyboard_event_scan::@21->keyboard_event_scan::@4]
  b4_from_b21:
    jmp b4
    // keyboard_event_scan::@4
  b4:
    // [415] phi from keyboard_event_scan::@21 keyboard_event_scan::@4 to keyboard_event_scan::@2 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2]
  b2_from_b21:
  b2_from_b4:
    jmp b2
    // keyboard_event_scan::@2
  b2:
    // [416] call keyboard_event_pressed 
    // [381] phi from keyboard_event_scan::@2 to keyboard_event_pressed [phi:keyboard_event_scan::@2->keyboard_event_pressed]
  keyboard_event_pressed_from_b2:
    // [381] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_CTRL#0 [phi:keyboard_event_scan::@2->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [417] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_11
    sta.z keyboard_event_pressed.return_2
    jmp b22
    // keyboard_event_scan::@22
  b22:
    // [418] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_2
    sta.z _6
    // [419] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3 -- vbuz1_eq_0_then_la1 
    lda.z _6
    cmp #0
    beq b3_from_b22
    // [420] phi from keyboard_event_scan::@22 to keyboard_event_scan::@5 [phi:keyboard_event_scan::@22->keyboard_event_scan::@5]
  b5_from_b22:
    jmp b5
    // keyboard_event_scan::@5
  b5:
    // [421] phi from keyboard_event_scan::@22 keyboard_event_scan::@5 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3]
  b3_from_b22:
  b3_from_b5:
    jmp b3
    // keyboard_event_scan::@3
  b3:
    // [422] call keyboard_event_pressed 
    // [381] phi from keyboard_event_scan::@3 to keyboard_event_pressed [phi:keyboard_event_scan::@3->keyboard_event_pressed]
  keyboard_event_pressed_from_b3:
    // [381] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_COMMODORE#0 [phi:keyboard_event_scan::@3->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [423] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_11
    sta.z keyboard_event_pressed.return_10
    jmp b23
    // keyboard_event_scan::@23
  b23:
    // [424] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#10 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_10
    sta.z _9
    // [425] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return -- vbuz1_eq_0_then_la1 
    lda.z _9
    cmp #0
    beq breturn
    // [426] phi from keyboard_event_scan::@23 to keyboard_event_scan::@6 [phi:keyboard_event_scan::@23->keyboard_event_scan::@6]
  b6_from_b23:
    jmp b6
    // keyboard_event_scan::@6
  b6:
    jmp breturn
    // keyboard_event_scan::@return
  breturn:
    // [427] return 
    rts
  // Something has changed on the keyboard row - check each column
    // [428] phi from keyboard_event_scan::@10 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9]
  b9_from_b10:
    // [428] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#0] -- register_copy 
    // [428] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#1] -- register_copy 
    // [428] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#2] -- register_copy 
    jmp b9
    // [428] phi from keyboard_event_scan::@19 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9]
  b9_from_b19:
    // [428] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#30 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#0] -- register_copy 
    // [428] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#1] -- register_copy 
    // [428] phi (byte) keyboard_event_scan::col#2 = (byte) 0 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#2] -- vbuz1=vbuc1 
    lda #0
    sta.z col
    jmp b9
    // keyboard_event_scan::@9
  b9:
    // [429] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) -- vbuz1=vbuz2_bxor_pbuc1_derefidx_vbuz3 
    lda.z row_scan
    ldy.z row
    eor keyboard_scan_values,y
    sta.z _15
    // [430] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda.z _15
    ldy.z col
    and keyboard_matrix_col_bitmask,y
    sta.z _16
    // [431] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@10 -- vbuz1_eq_0_then_la1 
    lda.z _16
    cmp #0
    beq b10_from_b9
    jmp b12
    // keyboard_event_scan::@12
  b12:
    // [432] if((byte) keyboard_events_size#10==(byte) 8) goto keyboard_event_scan::@10 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z keyboard_events_size
    beq b10_from_b12
    jmp b13
    // keyboard_event_scan::@13
  b13:
    // [433] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda.z row_scan
    ldy.z col
    and keyboard_matrix_col_bitmask,y
    sta.z event_type
    // [434] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@11 -- vbuz1_eq_0_then_la1 
    lda.z event_type
    cmp #0
    beq b11
    jmp b14
    // keyboard_event_scan::@14
  b14:
    // [435] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key pressed
    lda.z keycode
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // [436] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    // [437] phi from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10]
  b10_from_b11:
  b10_from_b12:
  b10_from_b14:
  b10_from_b9:
    // [437] phi (byte) keyboard_events_size#29 = (byte) keyboard_events_size#1 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10#0] -- register_copy 
    jmp b10
    // keyboard_event_scan::@10
  b10:
    // [438] (byte) keyboard_event_scan::keycode#14 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc.z keycode
    // [439] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuz1=_inc_vbuz1 
    inc.z col
    // [440] if((byte) keyboard_event_scan::col#1!=(byte) 8) goto keyboard_event_scan::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z col
    bne b9_from_b10
    jmp b15
    // keyboard_event_scan::@15
  b15:
    // [441] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Store the current keyboard status for the row to debounce
    lda.z row_scan
    ldy.z row
    sta keyboard_scan_values,y
    jmp b8_from_b15
    // keyboard_event_scan::@11
  b11:
    // [442] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 -- vbuz1=vbuz2_bor_vbuc1 
    lda #$40
    ora.z keycode
    sta.z _23
    // [443] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte~) keyboard_event_scan::$23 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key released
    lda.z _23
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // [444] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    jmp b10_from_b11
}
  // keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable kill the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte zeropage($c5) rowid)
keyboard_matrix_read: {
    .label return = $d4
    .label rowid = $c5
    .label return_2 = $c6
    // [445] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy.z rowid
    lda keyboard_matrix_row_bitmask,y
    sta CIA1_PORT_A
    // [446] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) -- vbuz1=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    sta.z return
    jmp breturn
    // keyboard_matrix_read::@return
  breturn:
    // [447] return 
    rts
}
  // render_show
// Update $D018 to show the current screen (used for double buffering)
render_show: {
    .const toD0181_return = (>(PLAYFIELD_SCREEN_1&$3fff)*4)|(>PLAYFIELD_CHARSET)/4&$f
    .const toD0182_return = (>(PLAYFIELD_SCREEN_2&$3fff)*4)|(>PLAYFIELD_CHARSET)/4&$f
    .label d018val = $5e
    // [448] if((byte) render_screen_show#16==(byte) 0) goto render_show::toD0181 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_show
    cmp #0
    beq toD0181_from_render_show
    // [449] phi from render_show to render_show::toD0182 [phi:render_show->render_show::toD0182]
  toD0182_from_render_show:
    jmp toD0182
    // render_show::toD0182
  toD0182:
    // [450] phi from render_show::toD0182 to render_show::@1 [phi:render_show::toD0182->render_show::@1]
  b1_from_toD0182:
    // [450] phi (byte) render_show::d018val#3 = (const byte) render_show::toD0182_return#0 [phi:render_show::toD0182->render_show::@1#0] -- vbuz1=vbuc1 
    lda #toD0182_return
    sta.z d018val
    jmp b1
    // render_show::@1
  b1:
    // [451] *((const byte*) D018#0) ← (byte) render_show::d018val#3 -- _deref_pbuc1=vbuz1 
    lda.z d018val
    sta D018
    // [452] *((const byte*) BGCOL2#0) ← *((const byte[]) PIECES_COLORS_1#0 + (byte) level#10) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy.z level
    lda PIECES_COLORS_1,y
    sta BGCOL2
    // [453] *((const byte*) BGCOL3#0) ← *((const byte[]) PIECES_COLORS_2#0 + (byte) level#10) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy.z level
    lda PIECES_COLORS_2,y
    sta BGCOL3
    // [454] (byte) render_screen_showing#1 ← (byte) render_screen_show#16 -- vbuz1=vbuz2 
    lda.z render_screen_show
    sta.z render_screen_showing
    jmp breturn
    // render_show::@return
  breturn:
    // [455] return 
    rts
    // [456] phi from render_show to render_show::toD0181 [phi:render_show->render_show::toD0181]
  toD0181_from_render_show:
    jmp toD0181
    // render_show::toD0181
  toD0181:
    // [450] phi from render_show::toD0181 to render_show::@1 [phi:render_show::toD0181->render_show::@1]
  b1_from_toD0181:
    // [450] phi (byte) render_show::d018val#3 = (const byte) render_show::toD0181_return#0 [phi:render_show::toD0181->render_show::@1#0] -- vbuz1=vbuc1 
    lda #toD0181_return
    sta.z d018val
    jmp b1
}
  // play_init
// Initialize play data tables
play_init: {
    .label _4 = $d5
    .label _5 = $d6
    .label pli = $60
    .label idx = $62
    .label j = $5f
    .label b = $63
    // [458] phi from play_init to play_init::@1 [phi:play_init->play_init::@1]
  b1_from_play_init:
    // [458] phi (byte) play_init::idx#2 = (byte) 0 [phi:play_init->play_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [458] phi (byte*) play_init::pli#2 = (const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 [phi:play_init->play_init::@1#1] -- pbuz1=pbuc1 
    lda #<playfield
    sta.z pli
    lda #>playfield
    sta.z pli+1
    // [458] phi (byte) play_init::j#2 = (byte) 0 [phi:play_init->play_init::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    jmp b1
    // [458] phi from play_init::@1 to play_init::@1 [phi:play_init::@1->play_init::@1]
  b1_from_b1:
    // [458] phi (byte) play_init::idx#2 = (byte) play_init::idx#1 [phi:play_init::@1->play_init::@1#0] -- register_copy 
    // [458] phi (byte*) play_init::pli#2 = (byte*) play_init::pli#1 [phi:play_init::@1->play_init::@1#1] -- register_copy 
    // [458] phi (byte) play_init::j#2 = (byte) play_init::j#1 [phi:play_init::@1->play_init::@1#2] -- register_copy 
    jmp b1
    // play_init::@1
  b1:
    // [459] (byte~) play_init::$4 ← (byte) play_init::j#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z j
    asl
    sta.z _4
    // [460] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_init::$4) ← (byte*) play_init::pli#2 -- pptc1_derefidx_vbuz1=pbuz2 
    ldy.z _4
    lda.z pli
    sta playfield_lines,y
    lda.z pli+1
    sta playfield_lines+1,y
    // [461] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) play_init::j#2) ← (byte) play_init::idx#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z idx
    ldy.z j
    sta playfield_lines_idx,y
    // [462] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const byte) PLAYFIELD_COLS#0 -- pbuz1=pbuz1_plus_vbuc1 
    lda #PLAYFIELD_COLS
    clc
    adc.z pli
    sta.z pli
    bcc !+
    inc.z pli+1
  !:
    // [463] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const byte) PLAYFIELD_COLS#0 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z idx
    axs #-[PLAYFIELD_COLS]
    stx.z idx
    // [464] (byte) play_init::j#1 ← ++ (byte) play_init::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [465] if((byte) play_init::j#1!=(const byte) PLAYFIELD_LINES#0-(byte) 1+(byte) 1) goto play_init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_LINES-1+1
    cmp.z j
    bne b1_from_b1
    jmp b2
    // play_init::@2
  b2:
    // [466] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0 -- _deref_pbuc1=vbuc2 
    lda #PLAYFIELD_COLS*PLAYFIELD_LINES
    sta playfield_lines_idx+PLAYFIELD_LINES
    // [467] (byte) current_movedown_slow#1 ← *((const byte[]) MOVEDOWN_SLOW_SPEEDS#0) -- vbuz1=_deref_pbuc1 
    // Set initial speed of moving down a tetromino
    lda MOVEDOWN_SLOW_SPEEDS
    sta.z current_movedown_slow
    // [468] phi from play_init::@2 to play_init::@3 [phi:play_init::@2->play_init::@3]
  b3_from_b2:
    // [468] phi (byte) play_init::b#2 = (byte) 0 [phi:play_init::@2->play_init::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z b
    jmp b3
  // Set the initial score add values
    // [468] phi from play_init::@3 to play_init::@3 [phi:play_init::@3->play_init::@3]
  b3_from_b3:
    // [468] phi (byte) play_init::b#2 = (byte) play_init::b#1 [phi:play_init::@3->play_init::@3#0] -- register_copy 
    jmp b3
    // play_init::@3
  b3:
    // [469] (byte~) play_init::$5 ← (byte) play_init::b#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z b
    asl
    asl
    sta.z _5
    // [470] *((const dword[5]) score_add_bcd#0 + (byte~) play_init::$5) ← *((const dword[]) SCORE_BASE_BCD#0 + (byte~) play_init::$5) -- pduc1_derefidx_vbuz1=pduc2_derefidx_vbuz1 
    ldy.z _5
    lda SCORE_BASE_BCD,y
    sta score_add_bcd,y
    lda SCORE_BASE_BCD+1,y
    sta score_add_bcd+1,y
    lda SCORE_BASE_BCD+2,y
    sta score_add_bcd+2,y
    lda SCORE_BASE_BCD+3,y
    sta score_add_bcd+3,y
    // [471] (byte) play_init::b#1 ← ++ (byte) play_init::b#2 -- vbuz1=_inc_vbuz1 
    inc.z b
    // [472] if((byte) play_init::b#1!=(byte) 5) goto play_init::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp.z b
    bne b3_from_b3
    jmp breturn
    // play_init::@return
  breturn:
    // [473] return 
    rts
}
  // sprites_irq_init
// Setup the IRQ
sprites_irq_init: {
    // asm { sei  }
    sei
    // [475] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge any IRQ and setup the next one
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // asm { ldaCIA1_INTERRUPT  }
    lda CIA1_INTERRUPT
    // [477] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // [478] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [479] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
    // [480] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
    // [481] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER_FIRST
    sta RASTER
    // [482] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // [483] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq() -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<sprites_irq
    sta HARDWARE_IRQ
    lda #>sprites_irq
    sta HARDWARE_IRQ+1
    // asm { cli  }
    cli
    jmp breturn
    // sprites_irq_init::@return
  breturn:
    // [485] return 
    rts
}
  // sprites_init
// Setup the sprites
sprites_init: {
    .label s2 = $d7
    .label xpos = $65
    .label s = $64
    // [486] *((const byte*) SPRITES_ENABLE#0) ← (byte) $f -- _deref_pbuc1=vbuc2 
    lda #$f
    sta SPRITES_ENABLE
    // [487] *((const byte*) SPRITES_MC#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
    // [488] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0) -- _deref_pbuc1=_deref_pbuc2 
    lda SPRITES_MC
    sta SPRITES_EXPAND_Y
    // [489] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0) -- _deref_pbuc1=_deref_pbuc2 
    lda SPRITES_EXPAND_Y
    sta SPRITES_EXPAND_X
    // [490] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
  b1_from_sprites_init:
    // [490] phi (byte) sprites_init::xpos#2 = (byte)(number) $18+(number) $f*(number) 8 [phi:sprites_init->sprites_init::@1#0] -- vbuz1=vbuc1 
    lda #$18+$f*8
    sta.z xpos
    // [490] phi (byte) sprites_init::s#2 = (byte) 0 [phi:sprites_init->sprites_init::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z s
    jmp b1
    // [490] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
  b1_from_b1:
    // [490] phi (byte) sprites_init::xpos#2 = (byte) sprites_init::xpos#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
    // [490] phi (byte) sprites_init::s#2 = (byte) sprites_init::s#1 [phi:sprites_init::@1->sprites_init::@1#1] -- register_copy 
    jmp b1
    // sprites_init::@1
  b1:
    // [491] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z s
    asl
    sta.z s2
    // [492] *((const byte*) SPRITES_XPOS#0 + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z xpos
    ldy.z s2
    sta SPRITES_XPOS,y
    // [493] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::s#2) ← (const byte) BLACK#0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #BLACK
    ldy.z s
    sta SPRITES_COLS,y
    // [494] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte) $18 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z xpos
    axs #-[$18]
    stx.z xpos
    // [495] (byte) sprites_init::s#1 ← ++ (byte) sprites_init::s#2 -- vbuz1=_inc_vbuz1 
    inc.z s
    // [496] if((byte) sprites_init::s#1!=(byte) 4) goto sprites_init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z s
    bne b1_from_b1
    jmp breturn
    // sprites_init::@return
  breturn:
    // [497] return 
    rts
}
  // render_init
// Initialize rendering
render_init: {
    .const vicSelectGfxBank1_toDd001_return = 3
    .label _13 = $d8
    .label li_1 = $67
    .label li_2 = $69
    .label i = $66
    jmp vicSelectGfxBank1
    // render_init::vicSelectGfxBank1
  vicSelectGfxBank1:
    // [499] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
    // [500] phi from render_init::vicSelectGfxBank1 to render_init::vicSelectGfxBank1_toDd001 [phi:render_init::vicSelectGfxBank1->render_init::vicSelectGfxBank1_toDd001]
  vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
    jmp vicSelectGfxBank1_toDd001
    // render_init::vicSelectGfxBank1_toDd001
  vicSelectGfxBank1_toDd001:
    jmp vicSelectGfxBank1_b1
    // render_init::vicSelectGfxBank1_@1
  vicSelectGfxBank1_b1:
    // [501] *((const byte*) CIA2_PORT_A#0) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2_PORT_A
    jmp b2
    // render_init::@2
  b2:
    // [502] *((const byte*) D011#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte) 3 -- _deref_pbuc1=vbuc2 
    // Enable Extended Background Color Mode
    lda #VIC_ECM|VIC_DEN|VIC_RSEL|3
    sta D011
    // [503] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    // [504] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BGCOL1
    // [505] *((const byte*) BGCOL2#0) ← *((const byte[]) PIECES_COLORS_1#0) -- _deref_pbuc1=_deref_pbuc2 
    lda PIECES_COLORS_1
    sta BGCOL2
    // [506] *((const byte*) BGCOL3#0) ← *((const byte[]) PIECES_COLORS_2#0) -- _deref_pbuc1=_deref_pbuc2 
    lda PIECES_COLORS_2
    sta BGCOL3
    // [507] *((const byte*) BGCOL4#0) ← (const byte) GREY#0 -- _deref_pbuc1=vbuc2 
    lda #GREY
    sta BGCOL4
    // [508] call render_screen_original 
    // [520] phi from render_init::@2 to render_screen_original [phi:render_init::@2->render_screen_original]
  render_screen_original_from_b2:
    // [520] phi (byte*) render_screen_original::screen#9 = (const byte*) PLAYFIELD_SCREEN_1#0 [phi:render_init::@2->render_screen_original#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1
    sta.z render_screen_original.screen
    lda #>PLAYFIELD_SCREEN_1
    sta.z render_screen_original.screen+1
    jsr render_screen_original
    // [509] phi from render_init::@2 to render_init::@3 [phi:render_init::@2->render_init::@3]
  b3_from_b2:
    jmp b3
    // render_init::@3
  b3:
    // [510] call render_screen_original 
    // [520] phi from render_init::@3 to render_screen_original [phi:render_init::@3->render_screen_original]
  render_screen_original_from_b3:
    // [520] phi (byte*) render_screen_original::screen#9 = (const byte*) PLAYFIELD_SCREEN_2#0 [phi:render_init::@3->render_screen_original#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2
    sta.z render_screen_original.screen
    lda #>PLAYFIELD_SCREEN_2
    sta.z render_screen_original.screen+1
    jsr render_screen_original
    // [511] phi from render_init::@3 to render_init::@1 [phi:render_init::@3->render_init::@1]
  b1_from_b3:
    // [511] phi (byte*) render_init::li_2#2 = (const byte*) PLAYFIELD_SCREEN_2#0+(byte)(number) 2*(number) $28+(byte) $10 [phi:render_init::@3->render_init::@1#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2+2*$28+$10
    sta.z li_2
    lda #>PLAYFIELD_SCREEN_2+2*$28+$10
    sta.z li_2+1
    // [511] phi (byte*) render_init::li_1#2 = (const byte*) PLAYFIELD_SCREEN_1#0+(byte)(number) 2*(number) $28+(byte) $10 [phi:render_init::@3->render_init::@1#1] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1+2*$28+$10
    sta.z li_1
    lda #>PLAYFIELD_SCREEN_1+2*$28+$10
    sta.z li_1+1
    // [511] phi (byte) render_init::i#2 = (byte) 0 [phi:render_init::@3->render_init::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp b1
    // [511] phi from render_init::@1 to render_init::@1 [phi:render_init::@1->render_init::@1]
  b1_from_b1:
    // [511] phi (byte*) render_init::li_2#2 = (byte*) render_init::li_2#1 [phi:render_init::@1->render_init::@1#0] -- register_copy 
    // [511] phi (byte*) render_init::li_1#2 = (byte*) render_init::li_1#1 [phi:render_init::@1->render_init::@1#1] -- register_copy 
    // [511] phi (byte) render_init::i#2 = (byte) render_init::i#1 [phi:render_init::@1->render_init::@1#2] -- register_copy 
    jmp b1
    // render_init::@1
  b1:
    // [512] (byte~) render_init::$13 ← (byte) render_init::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i
    asl
    sta.z _13
    // [513] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_init::$13) ← (byte*) render_init::li_1#2 -- pptc1_derefidx_vbuz1=pbuz2 
    ldy.z _13
    lda.z li_1
    sta screen_lines_1,y
    lda.z li_1+1
    sta screen_lines_1+1,y
    // [514] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 + (byte~) render_init::$13) ← (byte*) render_init::li_2#2 -- pptc1_derefidx_vbuz1=pbuz2 
    ldy.z _13
    lda.z li_2
    sta screen_lines_2,y
    lda.z li_2+1
    sta screen_lines_2+1,y
    // [515] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z li_1
    sta.z li_1
    bcc !+
    inc.z li_1+1
  !:
    // [516] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z li_2
    sta.z li_2
    bcc !+
    inc.z li_2+1
  !:
    // [517] (byte) render_init::i#1 ← ++ (byte) render_init::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [518] if((byte) render_init::i#1!=(const byte) PLAYFIELD_LINES#0-(byte) 1+(byte) 1) goto render_init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_LINES-1+1
    cmp.z i
    bne b1_from_b1
    jmp breturn
    // render_init::@return
  breturn:
    // [519] return 
    rts
}
  // render_screen_original
// Copy the original screen data to the passed screen
// Also copies colors to $d800
// render_screen_original(byte* zeropage($70) screen)
render_screen_original: {
    .const SPACE = 0
    .label screen = $70
    .label cols = $72
    .label x = $74
    .label oscr = $6c
    .label ocols = $6e
    .label y = $6b
    // [521] phi from render_screen_original to render_screen_original::@1 [phi:render_screen_original->render_screen_original::@1]
  b1_from_render_screen_original:
    // [521] phi (byte) render_screen_original::y#6 = (byte) 0 [phi:render_screen_original->render_screen_original::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [521] phi (byte*) render_screen_original::ocols#4 = (const byte*) PLAYFIELD_COLORS_ORIGINAL#0+(byte)(number) $20*(number) 2 [phi:render_screen_original->render_screen_original::@1#1] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_COLORS_ORIGINAL+$20*2
    sta.z ocols
    lda #>PLAYFIELD_COLORS_ORIGINAL+$20*2
    sta.z ocols+1
    // [521] phi (byte*) render_screen_original::oscr#4 = (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0+(byte)(number) $20*(number) 2 [phi:render_screen_original->render_screen_original::@1#2] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_ORIGINAL+$20*2
    sta.z oscr
    lda #>PLAYFIELD_SCREEN_ORIGINAL+$20*2
    sta.z oscr+1
    // [521] phi (byte*) render_screen_original::cols#7 = (const byte*) COLS#0 [phi:render_screen_original->render_screen_original::@1#3] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z cols
    lda #>COLS
    sta.z cols+1
    // [521] phi (byte*) render_screen_original::screen#8 = (byte*) render_screen_original::screen#9 [phi:render_screen_original->render_screen_original::@1#4] -- register_copy 
    jmp b1
    // [521] phi from render_screen_original::@5 to render_screen_original::@1 [phi:render_screen_original::@5->render_screen_original::@1]
  b1_from_b5:
    // [521] phi (byte) render_screen_original::y#6 = (byte) render_screen_original::y#1 [phi:render_screen_original::@5->render_screen_original::@1#0] -- register_copy 
    // [521] phi (byte*) render_screen_original::ocols#4 = (byte*) render_screen_original::ocols#1 [phi:render_screen_original::@5->render_screen_original::@1#1] -- register_copy 
    // [521] phi (byte*) render_screen_original::oscr#4 = (byte*) render_screen_original::oscr#1 [phi:render_screen_original::@5->render_screen_original::@1#2] -- register_copy 
    // [521] phi (byte*) render_screen_original::cols#7 = (byte*) render_screen_original::cols#3 [phi:render_screen_original::@5->render_screen_original::@1#3] -- register_copy 
    // [521] phi (byte*) render_screen_original::screen#8 = (byte*) render_screen_original::screen#10 [phi:render_screen_original::@5->render_screen_original::@1#4] -- register_copy 
    jmp b1
    // render_screen_original::@1
  b1:
    // [522] phi from render_screen_original::@1 to render_screen_original::@2 [phi:render_screen_original::@1->render_screen_original::@2]
  b2_from_b1:
    // [522] phi (byte) render_screen_original::x#4 = (byte) 0 [phi:render_screen_original::@1->render_screen_original::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [522] phi (byte*) render_screen_original::cols#4 = (byte*) render_screen_original::cols#7 [phi:render_screen_original::@1->render_screen_original::@2#1] -- register_copy 
    // [522] phi (byte*) render_screen_original::screen#5 = (byte*) render_screen_original::screen#8 [phi:render_screen_original::@1->render_screen_original::@2#2] -- register_copy 
    jmp b2
    // [522] phi from render_screen_original::@2 to render_screen_original::@2 [phi:render_screen_original::@2->render_screen_original::@2]
  b2_from_b2:
    // [522] phi (byte) render_screen_original::x#4 = (byte) render_screen_original::x#1 [phi:render_screen_original::@2->render_screen_original::@2#0] -- register_copy 
    // [522] phi (byte*) render_screen_original::cols#4 = (byte*) render_screen_original::cols#1 [phi:render_screen_original::@2->render_screen_original::@2#1] -- register_copy 
    // [522] phi (byte*) render_screen_original::screen#5 = (byte*) render_screen_original::screen#2 [phi:render_screen_original::@2->render_screen_original::@2#2] -- register_copy 
    jmp b2
    // render_screen_original::@2
  b2:
    // [523] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE#0 -- _deref_pbuz1=vbuc1 
    lda #SPACE
    ldy #0
    sta (screen),y
    // [524] (byte*) render_screen_original::screen#2 ← ++ (byte*) render_screen_original::screen#5 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [525] *((byte*) render_screen_original::cols#4) ← (const byte) BLACK#0 -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (cols),y
    // [526] (byte*) render_screen_original::cols#1 ← ++ (byte*) render_screen_original::cols#4 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // [527] (byte) render_screen_original::x#1 ← ++ (byte) render_screen_original::x#4 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [528] if((byte) render_screen_original::x#1!=(byte) 4) goto render_screen_original::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z x
    bne b2_from_b2
    // [529] phi from render_screen_original::@2 render_screen_original::@3 to render_screen_original::@3 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3]
  b3_from_b2:
  b3_from_b3:
    // [529] phi (byte) render_screen_original::x#5 = (byte) render_screen_original::x#1 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#0] -- register_copy 
    // [529] phi (byte*) render_screen_original::cols#5 = (byte*) render_screen_original::cols#1 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#1] -- register_copy 
    // [529] phi (byte*) render_screen_original::ocols#2 = (byte*) render_screen_original::ocols#4 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#2] -- register_copy 
    // [529] phi (byte*) render_screen_original::screen#6 = (byte*) render_screen_original::screen#2 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#3] -- register_copy 
    // [529] phi (byte*) render_screen_original::oscr#2 = (byte*) render_screen_original::oscr#4 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#4] -- register_copy 
    jmp b3
    // render_screen_original::@3
  b3:
    // [530] *((byte*) render_screen_original::screen#6) ← *((byte*) render_screen_original::oscr#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (oscr),y
    ldy #0
    sta (screen),y
    // [531] (byte*) render_screen_original::screen#3 ← ++ (byte*) render_screen_original::screen#6 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [532] (byte*) render_screen_original::oscr#1 ← ++ (byte*) render_screen_original::oscr#2 -- pbuz1=_inc_pbuz1 
    inc.z oscr
    bne !+
    inc.z oscr+1
  !:
    // [533] *((byte*) render_screen_original::cols#5) ← *((byte*) render_screen_original::ocols#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (ocols),y
    ldy #0
    sta (cols),y
    // [534] (byte*) render_screen_original::cols#2 ← ++ (byte*) render_screen_original::cols#5 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // [535] (byte*) render_screen_original::ocols#1 ← ++ (byte*) render_screen_original::ocols#2 -- pbuz1=_inc_pbuz1 
    inc.z ocols
    bne !+
    inc.z ocols+1
  !:
    // [536] (byte) render_screen_original::x#2 ← ++ (byte) render_screen_original::x#5 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [537] if((byte) render_screen_original::x#2!=(byte) $24) goto render_screen_original::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$24
    cmp.z x
    bne b3_from_b3
    // [538] phi from render_screen_original::@3 render_screen_original::@4 to render_screen_original::@4 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4]
  b4_from_b3:
  b4_from_b4:
    // [538] phi (byte) render_screen_original::x#6 = (byte) render_screen_original::x#2 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4#0] -- register_copy 
    // [538] phi (byte*) render_screen_original::cols#6 = (byte*) render_screen_original::cols#2 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4#1] -- register_copy 
    // [538] phi (byte*) render_screen_original::screen#7 = (byte*) render_screen_original::screen#3 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4#2] -- register_copy 
    jmp b4
    // render_screen_original::@4
  b4:
    // [539] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE#0 -- _deref_pbuz1=vbuc1 
    lda #SPACE
    ldy #0
    sta (screen),y
    // [540] (byte*) render_screen_original::screen#10 ← ++ (byte*) render_screen_original::screen#7 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [541] *((byte*) render_screen_original::cols#6) ← (const byte) BLACK#0 -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (cols),y
    // [542] (byte*) render_screen_original::cols#3 ← ++ (byte*) render_screen_original::cols#6 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // [543] (byte) render_screen_original::x#3 ← ++ (byte) render_screen_original::x#6 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [544] if((byte) render_screen_original::x#3!=(byte) $28) goto render_screen_original::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z x
    bne b4_from_b4
    jmp b5
    // render_screen_original::@5
  b5:
    // [545] (byte) render_screen_original::y#1 ← ++ (byte) render_screen_original::y#6 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [546] if((byte) render_screen_original::y#1!=(byte) $19) goto render_screen_original::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z y
    bne b1_from_b5
    jmp breturn
    // render_screen_original::@return
  breturn:
    // [547] return 
    rts
}
  // sid_rnd_init
// Initialize SID voice 3 for random number generation
sid_rnd_init: {
    // [548] *((const word*) SID_VOICE3_FREQ#0) ← (word) $ffff -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID_VOICE3_FREQ
    lda #>$ffff
    sta SID_VOICE3_FREQ+1
    // [549] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID_VOICE3_CONTROL
    jmp breturn
    // sid_rnd_init::@return
  breturn:
    // [550] return 
    rts
}
  // sprites_irq
// Raster Interrupt Routine - sets up the sprites covering the playfield
// Repeats 10 timers every 2 lines from line IRQ_RASTER_FIRST
// Utilizes duplicated gfx in the sprites to allow for some leeway in updating the sprite pointers
sprites_irq: {
    .const toSpritePtr2_return = PLAYFIELD_SPRITES/$40
    .label _0 = $da
    .label ypos = $d9
    .label raster_sprite_gfx_modify = $75
    .label ptr = $db
    .label ptr_1 = $de
    .label ptr_2 = $df
    .label ptr_3 = $dc
    .label ptr_4 = $dd
    // entry interrupt(HARDWARE_CLOBBER)
    sta rega+1
    stx regx+1
    sty regy+1
    // asm { cld  }
    //(*BGCOL)++;
    // Clear decimal flag (because it is used by the score algorithm)
    cld
    // [552] (byte) sprites_irq::ypos#0 ← (byte) irq_sprite_ypos#0 -- vbuz1=vbuz2 
    // Place the sprites
    lda.z irq_sprite_ypos
    sta.z ypos
    // [553] *((const byte*) SPRITES_YPOS#0) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuz1 
    lda.z ypos
    sta SPRITES_YPOS
    // [554] *((const byte*) SPRITES_YPOS#0+(byte) 2) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuz1 
    lda.z ypos
    sta SPRITES_YPOS+2
    // [555] *((const byte*) SPRITES_YPOS#0+(byte) 4) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuz1 
    lda.z ypos
    sta SPRITES_YPOS+4
    // [556] *((const byte*) SPRITES_YPOS#0+(byte) 6) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuz1 
    lda.z ypos
    sta SPRITES_YPOS+6
    // [557] (byte~) sprites_irq::$0 ← (byte) irq_raster_next#0 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z irq_raster_next
    iny
    sty.z _0
    // [558] (byte) sprites_irq::raster_sprite_gfx_modify#0 ← (byte~) sprites_irq::$0 -- vbuz1=vbuz2 
    // Wait for the y-position before changing sprite pointers
    lda.z _0
    sta.z raster_sprite_gfx_modify
    jmp b8
    // sprites_irq::@8
  b8:
    // [559] if(*((const byte*) RASTER#0)<(byte) sprites_irq::raster_sprite_gfx_modify#0) goto sprites_irq::@8 -- _deref_pbuc1_lt_vbuz1_then_la1 
    lda RASTER
    cmp.z raster_sprite_gfx_modify
    bcc b8
    jmp b9
    // sprites_irq::@9
  b9:
    // [560] (byte) sprites_irq::ptr#0 ← (byte) irq_sprite_ptr#0 -- vbuz1=vbuz2 
    lda.z irq_sprite_ptr
    sta.z ptr
    // [561] if((byte) render_screen_showing#0==(byte) 0) goto sprites_irq::@1 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_showing
    cmp #0
    beq b1
    jmp b10
    // sprites_irq::@10
  b10:
    // [562] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0) ← (byte) sprites_irq::ptr#0 -- _deref_pbuc1=vbuz1 
    lda.z ptr
    sta PLAYFIELD_SPRITE_PTRS_2
    // [563] (byte) sprites_irq::ptr#3 ← ++ (byte) sprites_irq::ptr#0 -- vbuz1=_inc_vbuz2 
    ldy.z ptr
    iny
    sty.z ptr_3
    // [564] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte) 1) ← (byte) sprites_irq::ptr#3 -- _deref_pbuc1=vbuz1 
    lda.z ptr_3
    sta PLAYFIELD_SPRITE_PTRS_2+1
    // [565] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte) 2) ← (byte) sprites_irq::ptr#3 -- _deref_pbuc1=vbuz1 
    lda.z ptr_3
    sta PLAYFIELD_SPRITE_PTRS_2+2
    // [566] (byte) sprites_irq::ptr#4 ← ++ (byte) sprites_irq::ptr#3 -- vbuz1=_inc_vbuz2 
    ldy.z ptr_3
    iny
    sty.z ptr_4
    // [567] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte) 3) ← (byte) sprites_irq::ptr#4 -- _deref_pbuc1=vbuz1 
    lda.z ptr_4
    sta PLAYFIELD_SPRITE_PTRS_2+3
    jmp b2
    // sprites_irq::@2
  b2:
    // [568] (byte) irq_cnt#1 ← ++ (byte) irq_cnt#0 -- vbuz1=_inc_vbuz1 
    inc.z irq_cnt
    // [569] if((byte) irq_cnt#1==(byte) 9) goto sprites_irq::@3 -- vbuz1_eq_vbuc1_then_la1 
    lda #9
    cmp.z irq_cnt
    beq b3
    jmp b6
    // sprites_irq::@6
  b6:
    // [570] if((byte) irq_cnt#1==(byte) $a) goto sprites_irq::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #$a
    cmp.z irq_cnt
    beq b4
    jmp b7
    // sprites_irq::@7
  b7:
    // [571] (byte) irq_raster_next#3 ← (byte) irq_raster_next#0 + (byte) $14 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_raster_next
    axs #-[$14]
    stx.z irq_raster_next
    // [572] (byte) irq_sprite_ypos#3 ← (byte) irq_sprite_ypos#0 + (byte) $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ypos
    axs #-[$15]
    stx.z irq_sprite_ypos
    // [573] (byte) irq_sprite_ptr#3 ← (byte) irq_sprite_ptr#0 + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ptr
    axs #-[3]
    stx.z irq_sprite_ptr
    // [574] phi from sprites_irq::@11 sprites_irq::@4 sprites_irq::@7 to sprites_irq::@5 [phi:sprites_irq::@11/sprites_irq::@4/sprites_irq::@7->sprites_irq::@5]
  b5_from_b11:
  b5_from_b4:
  b5_from_b7:
    // [574] phi (byte) irq_sprite_ptr#11 = (byte) irq_sprite_ptr#1 [phi:sprites_irq::@11/sprites_irq::@4/sprites_irq::@7->sprites_irq::@5#0] -- register_copy 
    // [574] phi (byte) irq_sprite_ypos#11 = (byte) irq_sprite_ypos#1 [phi:sprites_irq::@11/sprites_irq::@4/sprites_irq::@7->sprites_irq::@5#1] -- register_copy 
    // [574] phi (byte) irq_cnt#3 = (byte) irq_cnt#1 [phi:sprites_irq::@11/sprites_irq::@4/sprites_irq::@7->sprites_irq::@5#2] -- register_copy 
    // [574] phi (byte) irq_raster_next#4 = (byte) irq_raster_next#1 [phi:sprites_irq::@11/sprites_irq::@4/sprites_irq::@7->sprites_irq::@5#3] -- register_copy 
    jmp b5
    // sprites_irq::@5
  b5:
    // [575] *((const byte*) RASTER#0) ← (byte) irq_raster_next#4 -- _deref_pbuc1=vbuz1 
    // Setup next interrupt
    lda.z irq_raster_next
    sta RASTER
    // [576] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ and setup the next one
    lda #IRQ_RASTER
    sta IRQ_STATUS
    jmp breturn
    // sprites_irq::@return
  breturn:
    // [577] return  - exit interrupt(HARDWARE_CLOBBER)
  rega:
    lda #00
  regx:
    ldx #00
  regy:
    ldy #00
    rti
    // sprites_irq::@4
  b4:
    // [578] (byte) irq_cnt#2 ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z irq_cnt
    // [579] (byte) irq_raster_next#2 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
    lda #IRQ_RASTER_FIRST
    sta.z irq_raster_next
    // [580] (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#0 + (byte) $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ypos
    axs #-[$15]
    stx.z irq_sprite_ypos
    // [581] (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#0 + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ptr
    axs #-[3]
    stx.z irq_sprite_ptr
    jmp b5_from_b4
    // sprites_irq::@3
  b3:
    // [582] (byte) irq_raster_next#1 ← (byte) irq_raster_next#0 + (byte) $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_raster_next
    axs #-[$15]
    stx.z irq_raster_next
    // [583] (byte) irq_sprite_ypos#1 ← (const byte) SPRITES_FIRST_YPOS#0 -- vbuz1=vbuc1 
    lda #SPRITES_FIRST_YPOS
    sta.z irq_sprite_ypos
    // [584] phi from sprites_irq::@3 to sprites_irq::toSpritePtr2 [phi:sprites_irq::@3->sprites_irq::toSpritePtr2]
  toSpritePtr2_from_b3:
    jmp toSpritePtr2
    // sprites_irq::toSpritePtr2
  toSpritePtr2:
    jmp b11
    // sprites_irq::@11
  b11:
    // [585] (byte) irq_sprite_ptr#1 ← (const byte) sprites_irq::toSpritePtr2_return#0 -- vbuz1=vbuc1 
    lda #toSpritePtr2_return
    sta.z irq_sprite_ptr
    jmp b5_from_b11
    // sprites_irq::@1
  b1:
    // [586] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0) ← (byte) sprites_irq::ptr#0 -- _deref_pbuc1=vbuz1 
    lda.z ptr
    sta PLAYFIELD_SPRITE_PTRS_1
    // [587] (byte) sprites_irq::ptr#1 ← ++ (byte) sprites_irq::ptr#0 -- vbuz1=_inc_vbuz2 
    ldy.z ptr
    iny
    sty.z ptr_1
    // [588] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte) 1) ← (byte) sprites_irq::ptr#1 -- _deref_pbuc1=vbuz1 
    lda.z ptr_1
    sta PLAYFIELD_SPRITE_PTRS_1+1
    // [589] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte) 2) ← (byte) sprites_irq::ptr#1 -- _deref_pbuc1=vbuz1 
    lda.z ptr_1
    sta PLAYFIELD_SPRITE_PTRS_1+2
    // [590] (byte) sprites_irq::ptr#2 ← ++ (byte) sprites_irq::ptr#1 -- vbuz1=_inc_vbuz2 
    ldy.z ptr_1
    iny
    sty.z ptr_2
    // [591] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte) 3) ← (byte) sprites_irq::ptr#2 -- _deref_pbuc1=vbuz1 
    lda.z ptr_2
    sta PLAYFIELD_SPRITE_PTRS_1+3
    jmp b2
}
  // File Data
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Keyboard event buffer. Contains keycodes for key presses/releases. Presses are represented by the keycode. Releases by keycode | $40. The buffer is filled by keyboard_scan()
  keyboard_events: .fill 8, 0
  // The values scanned values for each row. Set by keyboard_scan() and used by keyboard_get_event()
  keyboard_scan_values: .fill 8, 0
  // The T-piece
  .align $40
  PIECE_T: .byte 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0
  // The S-piece
  .align $40
  PIECE_S: .byte 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0
  // The Z-piece
  .align $40
  PIECE_Z: .byte 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0
  // The L-piece
  .align $40
  PIECE_L: .byte 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0
  // The J-piece
  .align $40
  PIECE_J: .byte 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
  // The O-piece
  .align $40
  PIECE_O: .byte 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0
  // The I-piece
  .align $40
  PIECE_I: .byte 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0
  // The chars to use for the different pieces - when inside the playing area
  PIECES_CHARS: .byte $65, $66, $a6, $66, $65, $65, $a6
  // The chars to use for the different pieces - when outside the playing area (eg. the next area).
  PIECES_NEXT_CHARS: .byte $63, $64, $a4, $64, $63, $63, $a4
  // The initial X/Y for each piece
  PIECES_START_X: .byte 4, 4, 4, 4, 4, 4, 4
  PIECES_START_Y: .byte 1, 1, 1, 1, 1, 0, 1
  // The speed of moving down the piece when soft-drop is not activated
  // This array holds the number of frames per move by level (0-29). For all levels 29+ the value is 1.
  MOVEDOWN_SLOW_SPEEDS: .byte $30, $2b, $26, $21, $1c, $17, $12, $d, 8, 6, 5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1
  // Base Score values for removing 0-4 lines (in BCD)
  // These values are added to score_add_bcd for each level gained.
  SCORE_BASE_BCD: .dword 0, $40, $100, $300, $1200
  // Score values for removing 0-4 lines (in BCD)
  // These values are updated based on the players level and the base values from SCORE_BASE_BCD
  score_add_bcd: .fill 4*5, 0
  // The color #1 to use for the pieces for each level
  PIECES_COLORS_1: .byte BLUE, GREEN, PURPLE, BLUE, RED, LIGHT_GREEN, RED, BLUE, LIGHT_BLUE, RED, BLUE, GREEN, PURPLE, BLUE, RED, LIGHT_GREEN, RED, BLUE, LIGHT_BLUE, RED, BLUE, GREEN, PURPLE, BLUE, RED, LIGHT_GREEN, RED, BLUE, LIGHT_BLUE, RED
  // The color #2 to use for the pieces for each level
  PIECES_COLORS_2: .byte CYAN, LIGHT_GREEN, PINK, LIGHT_GREEN, LIGHT_GREEN, LIGHT_BLUE, DARK_GREY, PURPLE, RED, ORANGE, CYAN, LIGHT_GREEN, PINK, LIGHT_GREEN, LIGHT_GREEN, LIGHT_BLUE, DARK_GREY, PURPLE, RED, ORANGE, CYAN, LIGHT_GREEN, PINK, LIGHT_GREEN, LIGHT_GREEN, LIGHT_BLUE, DARK_GREY, PURPLE, RED, ORANGE
  // Pointers to the screen address for rendering each playfield line
  // The lines for screen 1 is aligned with $80 and screen 2 with $40 - so XOR'ing with $40 gives screen 2 lines.
  .align $80
  screen_lines_1: .fill 2*PLAYFIELD_LINES, 0
  .align $40
  screen_lines_2: .fill 2*PLAYFIELD_LINES, 0
  // Pointers to the playfield address for each playfield line
  playfield_lines: .fill 2*PLAYFIELD_LINES, 0
  // The playfield.  0 is empty non-zero is color.
  // The playfield is layed out line by line, meaning the first 10 bytes are line 1, the next 10 line 2 and so forth,
  playfield: .fill PLAYFIELD_LINES*PLAYFIELD_COLS, 0
  // The different pieces
  PIECES: .word PIECE_T, PIECE_S, PIECE_Z, PIECE_J, PIECE_O, PIECE_I, PIECE_L
  // Indixes into the playfield  for each playfield line
  playfield_lines_idx: .fill PLAYFIELD_LINES+1, 0
.pc = PLAYFIELD_CHARSET "PLAYFIELD_CHARSET"
  .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "playfield-screen.imap"

.pc = PLAYFIELD_SCREEN_ORIGINAL "PLAYFIELD_SCREEN_ORIGINAL"
  // Load chars for the screen
  .var screen = LoadBinary("playfield-screen.iscr")
   // Load extended colors for the screen
  .var extended = LoadBinary("playfield-extended.col")
  // screen.get(i)+1 because the charset is loaded into PLAYFIELD_CHARSET+8
  // extended.get(i)-1 because the extended colors are 1-based (1/2/3/4)
  // <<6 to move extended colors to the upper 2 bits
  .fill screen.getSize(), ( (screen.get(i)+1) | (extended.get(i)-1)<<6 )

.pc = PLAYFIELD_COLORS_ORIGINAL "PLAYFIELD_COLORS_ORIGINAL"
  .import binary "playfield-screen.col"

.pc = PLAYFIELD_SPRITES "PLAYFIELD_SPRITES"
  .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000))
	// Put the sprites into memory 
	.for(var sy=0;sy<10;sy++) {
	    .var sprite_gfx_y = sy*20
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21)
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y)
	            }
	        }
	    	.byte 0
	  	}
	}


REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte) render_screen_showing#0 ← (byte) 0 [ render_screen_showing#0 ] (  [ render_screen_showing#0 ] ) always clobbers reg byte a 
Statement [2] (dword) score_bcd#0 ← (byte) 0 [ render_screen_showing#0 score_bcd#0 ] (  [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [7] (byte) irq_raster_next#0 ← (const byte) IRQ_RASTER_FIRST#0 [ render_screen_showing#0 score_bcd#0 ] (  [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [8] (byte) irq_sprite_ypos#0 ← (const byte) SPRITES_FIRST_YPOS#0+(byte) $15 [ render_screen_showing#0 score_bcd#0 ] (  [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [10] (byte) irq_sprite_ptr#0 ← (const byte) toSpritePtr1_return#0+(byte) 3 [ render_screen_showing#0 score_bcd#0 ] (  [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [11] (byte) irq_cnt#0 ← (byte) 0 [ render_screen_showing#0 score_bcd#0 ] (  [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [33] (byte*~) current_piece_gfx#112 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) [ render_screen_showing#0 score_bcd#0 current_ypos#98 current_ypos#6 current_xpos#119 current_xpos#100 current_piece_gfx#112 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 ] ( main:13 [ render_screen_showing#0 score_bcd#0 current_ypos#98 current_ypos#6 current_xpos#119 current_xpos#100 current_piece_gfx#112 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:24 [ current_ypos#13 current_ypos#98 current_ypos#99 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:56 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#19 current_ypos#6 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:26 [ current_xpos#59 current_xpos#119 current_xpos#120 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:72 [ current_xpos#43 current_xpos#14 current_xpos#19 current_xpos#100 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:173 [ play_spawn_current::$7 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:68 [ current_piece_char#29 current_piece_char#10 current_piece_char#16 current_piece_char#5 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:74 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 next_piece_idx#16 play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:64 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#21 current_movedown_slow#1 current_movedown_slow#23 current_movedown_slow#66 current_movedown_slow#10 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:75 [ game_over#65 game_over#27 game_over#10 game_over#15 game_over#52 ]
Statement [38] (byte*~) current_piece#102 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#102 current_movedown_slow#1 game_over#52 ] ( main:13 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#102 current_movedown_slow#1 game_over#52 ] ) always clobbers reg byte a 
Statement [39] (byte*~) current_piece_gfx#124 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#102 current_piece_gfx#124 current_movedown_slow#1 game_over#52 ] ( main:13 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#102 current_piece_gfx#124 current_movedown_slow#1 game_over#52 ] ) always clobbers reg byte a 
Statement [41] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@2 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 ] ( main:13 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ render_screen_render#18 render_screen_render#11 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:69 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:93 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:63 [ level#33 level#10 level#17 level#19 level#21 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:65 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ]
Statement [62] (byte*~) current_piece_gfx#113 ← (byte*) current_piece_gfx#18 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 current_ypos#99 render_screen_render#65 current_xpos#120 current_piece_gfx#113 ] ( main:13 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 current_ypos#99 render_screen_render#65 current_xpos#120 current_piece_gfx#113 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:25 [ render_screen_render#33 render_screen_render#65 ]
Statement [72] (byte) render_screen_render#11 ← (byte) render_screen_render#18 ^ (byte) $20 [ render_screen_show#16 render_screen_render#11 ] ( main:13::render_screen_swap:71 [ current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_show#16 render_screen_render#11 ] ) always clobbers reg byte a 
Statement [73] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte) $20 [ render_screen_show#13 render_screen_render#11 ] ( main:13::render_screen_swap:71 [ current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_show#13 render_screen_render#11 ] ) always clobbers reg byte a 
Statement [78] (byte*) render_bcd::screen#0 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#0 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#0 ] ) always clobbers reg byte a 
Statement [81] (byte*) render_bcd::screen#1 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#1 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#1 ] ) always clobbers reg byte a 
Statement [84] (byte*) render_bcd::screen#2 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#2 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#2 ] ) always clobbers reg byte a 
Statement [87] (byte) render_bcd::bcd#3 ← > (word) lines_bcd#15 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#3 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#3 ] ) always clobbers reg byte a 
Statement [88] (byte*) render_bcd::screen#3 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#3 render_bcd::screen#3 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#3 render_bcd::screen#3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:13 [ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ]
Statement [90] (byte) render_bcd::bcd#4 ← < (word) lines_bcd#15 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#4 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#4 ] ) always clobbers reg byte a 
Statement [91] (byte*) render_bcd::screen#4 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#4 render_bcd::screen#4 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#4 render_bcd::screen#4 ] ) always clobbers reg byte a 
Statement [93] (byte*) render_bcd::screen#5 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::screen#5 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::screen#5 ] ) always clobbers reg byte a 
Statement [98] (byte*) render_bcd::screen_pos#0 ← (byte*) render_bcd::screen#6 + (word) render_bcd::offset#6 [ render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] ( main:13::render_score:69::render_bcd:80 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:83 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:86 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:89 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:92 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:95 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:12 [ render_bcd::only_low#6 ]
Statement [100] (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#6 >> (byte) 4 [ render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] ( main:13::render_score:69::render_bcd:80 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] main:13::render_score:69::render_bcd:83 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] main:13::render_score:69::render_bcd:86 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] main:13::render_score:69::render_bcd:89 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] main:13::render_score:69::render_bcd:92 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] main:13::render_score:69::render_bcd:95 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] ) always clobbers reg byte a 
Statement [102] *((byte*) render_bcd::screen_pos#0) ← (byte~) render_bcd::$6 [ render_bcd::bcd#6 render_bcd::screen_pos#0 ] ( main:13::render_score:69::render_bcd:80 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:83 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:86 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:89 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:92 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:95 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::bcd#6 render_bcd::screen_pos#0 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:64 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#21 current_movedown_slow#1 current_movedown_slow#23 current_movedown_slow#66 current_movedown_slow#10 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:68 [ current_piece_char#29 current_piece_char#10 current_piece_char#16 current_piece_char#5 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:69 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:72 [ current_xpos#43 current_xpos#14 current_xpos#19 current_xpos#100 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:56 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#19 current_ypos#6 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:75 [ game_over#65 game_over#27 game_over#10 game_over#15 game_over#52 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:74 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 next_piece_idx#16 play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:93 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:5 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:63 [ level#33 level#10 level#17 level#19 level#21 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:3 [ render_screen_render#18 render_screen_render#11 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:65 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:13 [ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ]
Statement [105] (byte~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (byte) $f [ render_bcd::screen_pos#3 render_bcd::$3 ] ( main:13::render_score:69::render_bcd:80 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] main:13::render_score:69::render_bcd:83 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] main:13::render_score:69::render_bcd:86 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] main:13::render_score:69::render_bcd:89 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] main:13::render_score:69::render_bcd:92 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] main:13::render_score:69::render_bcd:95 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::screen_pos#3 render_bcd::$3 ] ) always clobbers reg byte a 
Statement [107] *((byte*) render_bcd::screen_pos#3) ← (byte~) render_bcd::$4 [ ] ( main:13::render_score:69::render_bcd:80 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] main:13::render_score:69::render_bcd:83 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] main:13::render_score:69::render_bcd:86 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] main:13::render_score:69::render_bcd:89 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] main:13::render_score:69::render_bcd:92 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] main:13::render_score:69::render_bcd:95 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 ] ) always clobbers reg byte y 
Statement [113] (byte~) render_next::$6 ← (byte) next_piece_idx#12 << (byte) 1 [ next_piece_idx#12 render_next::screen_next_area#11 render_next::$6 ] ( main:13::render_next:37 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 next_piece_idx#12 render_next::screen_next_area#11 render_next::$6 ] main:13::render_next:67 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 next_piece_idx#12 render_next::screen_next_area#11 render_next::$6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:17 [ next_piece_idx#12 next_piece_idx#77 next_piece_idx#78 ]
Statement [115] (byte*~) render_next::next_piece_gfx#9 ← (byte*)*((const word[]) PIECES#0 + (byte~) render_next::$6) [ render_next::screen_next_area#11 render_next::next_piece_char#0 render_next::next_piece_gfx#9 ] ( main:13::render_next:37 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::screen_next_area#11 render_next::next_piece_char#0 render_next::next_piece_gfx#9 ] main:13::render_next:67 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_next::screen_next_area#11 render_next::next_piece_char#0 render_next::next_piece_gfx#9 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:132 [ render_next::next_piece_char#0 ]
Statement [118] (byte) render_next::cell#0 ← *((byte*) render_next::next_piece_gfx#2) [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#2 render_next::screen_next_area#5 render_next::c#2 render_next::cell#0 ] ( main:13::render_next:37 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#2 render_next::screen_next_area#5 render_next::c#2 render_next::cell#0 ] main:13::render_next:67 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#2 render_next::screen_next_area#5 render_next::c#2 render_next::cell#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:173 [ play_spawn_current::$7 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:132 [ render_next::next_piece_char#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:18 [ render_next::l#7 render_next::l#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:18 [ render_next::l#7 render_next::l#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:23 [ render_next::c#2 render_next::c#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:23 [ render_next::c#2 render_next::c#1 ]
Statement [121] *((byte*) render_next::screen_next_area#5) ← (byte) 0 [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] ( main:13::render_next:37 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] main:13::render_next:67 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] ) always clobbers reg byte a reg byte y 
Statement [125] (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#3 + (byte) $24 [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#4 ] ( main:13::render_next:37 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#4 ] main:13::render_next:67 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#4 ] ) always clobbers reg byte a 
Statement [129] *((byte*) render_next::screen_next_area#5) ← (byte) render_next::next_piece_char#0 [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] ( main:13::render_next:37 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] main:13::render_next:67 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] ) always clobbers reg byte a reg byte y 
Statement [134] (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (byte) 4 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#1 ] ( main:13::render_moving:35 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#1 ] main:13::render_moving:64 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:29 [ current_piece_char#68 current_piece_char#100 current_piece_char#101 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:30 [ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:31 [ render_moving::l#4 render_moving::l#1 ]
Statement [140] (byte~) render_moving::$1 ← (byte) render_screen_render#33 + (byte) render_moving::ypos#2 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$1 ] ( main:13::render_moving:35 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$1 ] main:13::render_moving:64 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:32 [ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ]
Statement [141] (byte~) render_moving::$6 ← (byte~) render_moving::$1 << (byte) 1 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$6 ] ( main:13::render_moving:35 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$6 ] main:13::render_moving:64 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$6 ] ) always clobbers reg byte a 
Statement [142] (byte*) render_moving::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_moving::$6) [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::screen_line#0 ] ( main:13::render_moving:35 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::screen_line#0 ] main:13::render_moving:64 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::screen_line#0 ] ) always clobbers reg byte a 
Statement [145] (byte) render_moving::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_moving::i#4) [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::screen_line#0 render_moving::i#4 render_moving::xpos#2 render_moving::c#2 render_moving::current_cell#0 ] ( main:13::render_moving:35 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::screen_line#0 render_moving::i#4 render_moving::xpos#2 render_moving::c#2 render_moving::current_cell#0 ] main:13::render_moving:64 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::screen_line#0 render_moving::i#4 render_moving::xpos#2 render_moving::c#2 render_moving::current_cell#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:33 [ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:34 [ render_moving::c#2 render_moving::c#1 ]
Statement [148] *((byte*) render_moving::screen_line#0 + (byte) render_moving::xpos#2) ← (byte) current_piece_char#68 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#2 render_moving::screen_line#0 render_moving::xpos#2 render_moving::c#2 ] ( main:13::render_moving:35 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#2 render_moving::screen_line#0 render_moving::xpos#2 render_moving::c#2 ] main:13::render_moving:64 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#2 render_moving::screen_line#0 render_moving::xpos#2 render_moving::c#2 ] ) always clobbers reg byte a 
Statement [154] (byte~) render_playfield::$2 ← (byte) render_screen_render#22 + (byte) render_playfield::l#2 [ render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$2 ] ( main:13::render_playfield:30 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$2 ] main:13::render_playfield:58 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:35 [ render_screen_render#22 render_screen_render#64 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:36 [ render_playfield::l#2 render_playfield::l#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:37 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Statement [155] (byte~) render_playfield::$6 ← (byte~) render_playfield::$2 << (byte) 1 [ render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$6 ] ( main:13::render_playfield:30 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$6 ] main:13::render_playfield:58 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$6 ] ) always clobbers reg byte a 
Statement [156] (byte*) render_playfield::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_playfield::$6) [ render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] ( main:13::render_playfield:30 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] main:13::render_playfield:58 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] ) always clobbers reg byte a 
Statement [158] *((byte*) render_playfield::screen_line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2) [ render_screen_render#22 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] ( main:13::render_playfield:30 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] main:13::render_playfield:58 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:35 [ render_screen_render#22 render_screen_render#64 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:36 [ render_playfield::l#2 render_playfield::l#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:37 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:40 [ render_playfield::c#2 render_playfield::c#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:40 [ render_playfield::c#2 render_playfield::c#1 ]
Statement [177] (byte) play_movement::render#2 ← (byte) play_movement::render#1 + (byte~) play_movement::$3 [ current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_movement::render#2 ] ( main:13::play_movement:53 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_movement::render#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:124 [ play_movement::key_event#0 ]
Statement [182] (byte) play_movement::return#0 ← (byte) play_movement::render#2 + (byte~) play_movement::$4 [ current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::return#0 current_orientation#25 current_piece_gfx#21 current_xpos#26 ] ( main:13::play_movement:53 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::return#0 current_orientation#25 current_piece_gfx#21 current_xpos#26 ] ) always clobbers reg byte a 
Statement [187] (byte~) play_move_rotate::$5 ← (byte) current_orientation#20 + (byte) $10 [ current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$5 ] ( main:13::play_movement:53::play_move_rotate:179 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$5 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:146 [ play_movement::render#2 ]
Statement [193] (byte*~) current_piece#99 ← (byte*) current_piece#15 [ current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#3 play_collision::ypos#3 play_collision::orientation#3 current_piece#99 ] ( main:13::play_movement:53::play_move_rotate:179 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#3 play_collision::ypos#3 play_collision::orientation#3 current_piece#99 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:43 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:47 [ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:48 [ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:46 [ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ]
Statement [199] (byte*) current_piece_gfx#7 ← (byte*) current_piece#15 + (byte) current_orientation#7 [ current_piece#15 current_ypos#19 current_xpos#26 current_orientation#7 current_piece_gfx#7 ] ( main:13::play_movement:53::play_move_rotate:179 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_xpos#26 current_orientation#7 current_piece_gfx#7 ] ) always clobbers reg byte a 
Statement [200] (byte~) play_move_rotate::$7 ← (byte) current_orientation#20 - (byte) $10 [ current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$7 ] ( main:13::play_movement:53::play_move_rotate:179 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$7 ] ) always clobbers reg byte a 
Statement [203] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#17 + (byte) play_collision::orientation#5 [ play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] ( main:13::play_movement:53::play_move_rotate:179::play_collision:194 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] main:13::play_movement:53::play_move_leftright:174::play_collision:232 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] main:13::play_movement:53::play_move_leftright:174::play_collision:243 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] main:13::play_movement:53::play_move_down:167::play_collision:267 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] main:13::play_spawn_current:26::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] main:13::play_spawn_current:28::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280::play_collision:296 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:41 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 ]
Statement [205] (byte~) play_collision::$14 ← (byte) play_collision::yp#2 << (byte) 1 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] ( main:13::play_movement:53::play_move_rotate:179::play_collision:194 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] main:13::play_movement:53::play_move_leftright:174::play_collision:232 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] main:13::play_movement:53::play_move_leftright:174::play_collision:243 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] main:13::play_movement:53::play_move_down:167::play_collision:267 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] main:13::play_spawn_current:26::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] main:13::play_spawn_current:28::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280::play_collision:296 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:50 [ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:49 [ play_collision::l#6 play_collision::l#1 ]
Statement [206] (byte*) play_collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_collision::$14) [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] ( main:13::play_movement:53::play_move_rotate:179::play_collision:194 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:13::play_movement:53::play_move_leftright:174::play_collision:232 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:13::play_movement:53::play_move_leftright:174::play_collision:243 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:13::play_movement:53::play_move_down:167::play_collision:267 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:13::play_spawn_current:26::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:13::play_spawn_current:28::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280::play_collision:296 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] ) always clobbers reg byte a 
Statement [210] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte) 0) goto play_collision::@3 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] ( main:13::play_movement:53::play_move_rotate:179::play_collision:194 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_leftright:174::play_collision:232 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_leftright:174::play_collision:243 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_down:167::play_collision:267 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_spawn_current:26::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_spawn_current:28::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280::play_collision:296 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:51 [ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:52 [ play_collision::c#2 play_collision::c#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:159 [ play_collision::i#1 ]
Statement [212] (byte~) play_collision::$5 ← (byte) play_collision::xp#2 & (byte) $80 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] ( main:13::play_movement:53::play_move_rotate:179::play_collision:194 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] main:13::play_movement:53::play_move_leftright:174::play_collision:232 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] main:13::play_movement:53::play_move_leftright:174::play_collision:243 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] main:13::play_movement:53::play_move_down:167::play_collision:267 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] main:13::play_spawn_current:26::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] main:13::play_spawn_current:28::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280::play_collision:296 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] ) always clobbers reg byte a 
Statement [215] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::xp#2)==(byte) 0) goto play_collision::@3 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] ( main:13::play_movement:53::play_move_rotate:179::play_collision:194 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_leftright:174::play_collision:232 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_leftright:174::play_collision:243 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_down:167::play_collision:267 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_spawn_current:26::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_spawn_current:28::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280::play_collision:296 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] ) always clobbers reg byte a 
Statement [231] (byte*~) current_piece#98 ← (byte*) current_piece#15 [ current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#98 play_collision::orientation#2 play_collision::ypos#2 play_collision::xpos#2 ] ( main:13::play_movement:53::play_move_leftright:174 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#98 play_collision::orientation#2 play_collision::ypos#2 play_collision::xpos#2 ] ) always clobbers reg byte a 
Statement [242] (byte*~) current_piece#97 ← (byte*) current_piece#15 [ current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#97 play_collision::orientation#1 play_collision::ypos#1 play_collision::xpos#1 ] ( main:13::play_movement:53::play_move_leftright:174 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#97 play_collision::orientation#1 play_collision::ypos#1 play_collision::xpos#1 ] ) always clobbers reg byte a 
Statement [266] (byte*~) current_piece#96 ← (byte*) current_piece#10 [ current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_piece#96 play_collision::orientation#0 play_collision::ypos#0 play_collision::xpos#0 ] ( main:13::play_movement:53::play_move_down:167 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_piece#96 play_collision::orientation#0 play_collision::ypos#0 play_collision::xpos#0 ] ) always clobbers reg byte a 
Statement [281] (byte*~) current_piece#93 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) [ current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 ] ( main:13::play_movement:53::play_move_down:167 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 ] ) always clobbers reg byte a 
Statement [282] (byte*~) current_piece_gfx#117 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) [ current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 current_piece_gfx#117 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 ] ( main:13::play_movement:53::play_move_down:167 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 current_piece_gfx#117 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 ] ) always clobbers reg byte a 
Statement [289] (byte~) play_spawn_current::$7 ← (byte) play_spawn_current::current_piece_idx#0 << (byte) 1 [ play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] ( main:13::play_spawn_current:26 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] main:13::play_spawn_current:28 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:172 [ play_spawn_current::current_piece_idx#0 ]
Statement [295] (byte*~) current_piece#100 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) [ current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] ( main:13::play_spawn_current:26 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] main:13::play_spawn_current:28 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] ) always clobbers reg byte a 
Statement [308] (byte~) play_update_score::$2 ← < (word) lines_bcd#19 [ current_movedown_slow#14 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::$2 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 current_movedown_slow#14 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:171 [ play_update_score::removed#0 ]
Statement [310] (byte~) play_update_score::$9 ← (byte) play_update_score::removed#0 << (byte) 2 [ current_movedown_slow#14 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::$9 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 current_movedown_slow#14 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::$9 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:178 [ play_update_score::lines_before#0 ]
Statement [311] (dword) play_update_score::add_bcd#0 ← *((const dword[5]) score_add_bcd#0 + (byte~) play_update_score::$9) [ current_movedown_slow#14 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::add_bcd#0 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 current_movedown_slow#14 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::add_bcd#0 ] ) always clobbers reg byte a 
Statement [313] (word) lines_bcd#29 ← (word) lines_bcd#19 + (byte) play_update_score::removed#0 [ current_movedown_slow#14 score_bcd#18 level#10 level_bcd#11 play_update_score::lines_before#0 play_update_score::add_bcd#0 lines_bcd#29 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 current_movedown_slow#14 score_bcd#18 level#10 level_bcd#11 play_update_score::lines_before#0 play_update_score::add_bcd#0 lines_bcd#29 ] ) always clobbers reg byte a 
Statement [314] (dword) score_bcd#29 ← (dword) score_bcd#18 + (dword) play_update_score::add_bcd#0 [ current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 lines_bcd#29 score_bcd#29 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 lines_bcd#29 score_bcd#29 ] ) always clobbers reg byte a 
Statement [316] (byte~) play_update_score::$4 ← < (word) lines_bcd#29 [ current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 lines_bcd#29 score_bcd#29 play_update_score::$4 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 lines_bcd#29 score_bcd#29 play_update_score::$4 ] ) always clobbers reg byte a 
Statement [328] (byte~) play_increase_level::$1 ← (byte) level_bcd#21 & (byte) $f [ level#21 current_movedown_slow#66 level_bcd#21 play_increase_level::$1 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278::play_increase_level:320 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 lines_bcd#29 score_bcd#29 level#21 current_movedown_slow#66 level_bcd#21 play_increase_level::$1 ] ) always clobbers reg byte a 
Statement [330] (byte) level_bcd#8 ← (byte) level_bcd#21 + (byte) 6 [ level#21 current_movedown_slow#66 level_bcd#8 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278::play_increase_level:320 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 lines_bcd#29 score_bcd#29 level#21 current_movedown_slow#66 level_bcd#8 ] ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:3 [ render_screen_render#18 render_screen_render#11 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:93 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:124 [ play_movement::key_event#0 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:75 [ game_over#65 game_over#27 game_over#10 game_over#15 game_over#52 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:74 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 next_piece_idx#16 play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:63 [ level#33 level#10 level#17 level#19 level#21 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:64 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#21 current_movedown_slow#1 current_movedown_slow#23 current_movedown_slow#66 current_movedown_slow#10 ]
Statement [334] (byte~) play_increase_level::$5 ← (byte) play_increase_level::b#2 << (byte) 2 [ level#21 current_movedown_slow#66 level_bcd#62 play_increase_level::b#2 play_increase_level::$5 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278::play_increase_level:320 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 lines_bcd#29 score_bcd#29 level#21 current_movedown_slow#66 level_bcd#62 play_increase_level::b#2 play_increase_level::$5 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:76 [ play_increase_level::b#2 play_increase_level::b#1 ]
Statement [335] *((const dword[5]) score_add_bcd#0 + (byte~) play_increase_level::$5) ← *((const dword[5]) score_add_bcd#0 + (byte~) play_increase_level::$5) + *((const dword[]) SCORE_BASE_BCD#0 + (byte~) play_increase_level::$5) [ level#21 current_movedown_slow#66 level_bcd#62 play_increase_level::b#2 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278::play_increase_level:320 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 lines_bcd#29 score_bcd#29 level#21 current_movedown_slow#66 level_bcd#62 play_increase_level::b#2 ] ) always clobbers reg byte a 
Statement [353] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0 [ play_remove_lines::y#8 play_remove_lines::removed#11 play_remove_lines::r#1 play_remove_lines::w#2 ] ( main:13::play_movement:53::play_move_down:167::play_remove_lines:274 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_remove_lines::y#8 play_remove_lines::removed#11 play_remove_lines::r#1 play_remove_lines::w#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:77 [ play_remove_lines::y#8 play_remove_lines::y#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:78 [ play_remove_lines::removed#11 play_remove_lines::removed#8 play_remove_lines::removed#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:79 [ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ]
Statement [361] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#6) ← (byte) 0 [ play_remove_lines::removed#8 play_remove_lines::w#6 ] ( main:13::play_movement:53::play_move_down:167::play_remove_lines:274 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_remove_lines::removed#8 play_remove_lines::w#6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:82 [ play_remove_lines::w#6 play_remove_lines::w#3 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 ]
Statement [365] (byte~) play_lock_current::$4 ← (byte) play_lock_current::yp#2 << (byte) 1 [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::$4 ] ( main:13::play_movement:53::play_move_down:167::play_lock_current:272 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::$4 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:83 [ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:85 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:84 [ play_lock_current::l#6 play_lock_current::l#1 ]
Statement [366] (byte*) play_lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_lock_current::$4) [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::playfield_line#0 ] ( main:13::play_movement:53::play_move_down:167::play_lock_current:272 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::playfield_line#0 ] ) always clobbers reg byte a 
Statement [370] if(*((byte*) current_piece_gfx#13 + (byte) play_lock_current::i#2)==(byte) 0) goto play_lock_current::@3 [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] ( main:13::play_movement:53::play_move_down:167::play_lock_current:272 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:86 [ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:87 [ play_lock_current::c#2 play_lock_current::c#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:192 [ play_lock_current::i#1 ]
Statement [371] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::xp#2) ← (byte) current_piece_char#10 [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] ( main:13::play_movement:53::play_move_down:167::play_lock_current:272 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] ) always clobbers reg byte a 
Statement [382] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte) 3 [ keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] ( main:13::play_movement:53::play_move_down:167::keyboard_event_pressed:252 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:404 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:410 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:416 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:422 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:55 [ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:88 [ keyboard_event_pressed::keycode#5 ]
Statement [384] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte) 7 [ keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ( main:13::play_movement:53::play_move_down:167::keyboard_event_pressed:252 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:404 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:410 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:416 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:422 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:194 [ keyboard_event_pressed::row_bits#0 ]
Statement [385] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) [ keyboard_event_pressed::return#11 ] ( main:13::play_movement:53::play_move_down:167::keyboard_event_pressed:252 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 keyboard_event_pressed::return#11 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:404 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::return#11 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:410 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::return#11 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:416 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::return#11 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:422 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::return#11 ] ) always clobbers reg byte a 
Statement [387] if((byte) keyboard_events_size#13==(byte) 0) goto keyboard_event_get::@return [ keyboard_events_size#13 ] ( main:13::keyboard_event_get:47 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 ] ) always clobbers reg byte a 
Statement [389] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4) [ keyboard_events_size#4 keyboard_event_get::return#1 ] ( main:13::keyboard_event_get:47 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#4 keyboard_event_get::return#1 ] ) always clobbers reg byte y 
Statement [399] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 [ keyboard_event_scan::row#2 keyboard_events_size#30 keyboard_event_scan::keycode#1 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_events_size#30 keyboard_event_scan::keycode#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:90 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Statement [429] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$15 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$15 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:199 [ keyboard_event_scan::row_scan#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:91 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:92 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
Statement [432] if((byte) keyboard_events_size#10==(byte) 8) goto keyboard_event_scan::@10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ) always clobbers reg byte a 
Statement [433] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] ) always clobbers reg byte a 
Statement [435] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:90 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:199 [ keyboard_event_scan::row_scan#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:91 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:92 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
Statement [441] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#29 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#29 ] ) always clobbers reg byte a 
Statement [442] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$23 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$23 ] ) always clobbers reg byte a 
Statement [443] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte~) keyboard_event_scan::$23 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ) always clobbers reg byte y 
Statement [445] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:13::keyboard_event_scan:45::keyboard_matrix_read:395 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 ] ) always clobbers reg byte a 
Statement [446] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) [ keyboard_matrix_read::return#0 ] ( main:13::keyboard_event_scan:45::keyboard_matrix_read:395 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 keyboard_matrix_read::return#0 ] ) always clobbers reg byte a 
Statement [448] if((byte) render_screen_show#16==(byte) 0) goto render_show::toD0181 [ render_screen_show#16 level#10 ] ( main:13::render_show:43 [ render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level_bcd#11 render_screen_show#16 level#10 ] ) always clobbers reg byte a 
Statement [452] *((const byte*) BGCOL2#0) ← *((const byte[]) PIECES_COLORS_1#0 + (byte) level#10) [ render_screen_show#16 level#10 ] ( main:13::render_show:43 [ render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level_bcd#11 render_screen_show#16 level#10 ] ) always clobbers reg byte a reg byte y 
Statement [453] *((const byte*) BGCOL3#0) ← *((const byte[]) PIECES_COLORS_2#0 + (byte) level#10) [ render_screen_show#16 level#10 ] ( main:13::render_show:43 [ render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level_bcd#11 render_screen_show#16 level#10 ] ) always clobbers reg byte a reg byte y 
Statement [454] (byte) render_screen_showing#1 ← (byte) render_screen_show#16 [ render_screen_show#16 level#10 render_screen_showing#1 ] ( main:13::render_show:43 [ render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level_bcd#11 render_screen_show#16 level#10 render_screen_showing#1 ] ) always clobbers reg byte a 
Statement [459] (byte~) play_init::$4 ← (byte) play_init::j#2 << (byte) 1 [ play_init::j#2 play_init::pli#2 play_init::idx#2 play_init::$4 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 play_init::j#2 play_init::pli#2 play_init::idx#2 play_init::$4 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:95 [ play_init::j#2 play_init::j#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:98 [ play_init::idx#2 play_init::idx#1 ]
Statement [460] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_init::$4) ← (byte*) play_init::pli#2 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 play_init::j#2 play_init::pli#2 play_init::idx#2 ] ) always clobbers reg byte a 
Statement [461] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) play_init::j#2) ← (byte) play_init::idx#2 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 play_init::j#2 play_init::pli#2 play_init::idx#2 ] ) always clobbers reg byte a 
Statement [462] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const byte) PLAYFIELD_COLS#0 [ play_init::j#2 play_init::idx#2 play_init::pli#1 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 play_init::j#2 play_init::idx#2 play_init::pli#1 ] ) always clobbers reg byte a 
Statement [463] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const byte) PLAYFIELD_COLS#0 [ play_init::j#2 play_init::pli#1 play_init::idx#1 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 play_init::j#2 play_init::pli#1 play_init::idx#1 ] ) always clobbers reg byte a 
Statement [466] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0 [ ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [467] (byte) current_movedown_slow#1 ← *((const byte[]) MOVEDOWN_SLOW_SPEEDS#0) [ current_movedown_slow#1 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 ] ) always clobbers reg byte a 
Statement [469] (byte~) play_init::$5 ← (byte) play_init::b#2 << (byte) 2 [ current_movedown_slow#1 play_init::b#2 play_init::$5 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 play_init::b#2 play_init::$5 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:99 [ play_init::b#2 play_init::b#1 ]
Statement [470] *((const dword[5]) score_add_bcd#0 + (byte~) play_init::$5) ← *((const dword[]) SCORE_BASE_BCD#0 + (byte~) play_init::$5) [ current_movedown_slow#1 play_init::b#2 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 play_init::b#2 ] ) always clobbers reg byte a 
Statement [475] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement asm { ldaCIA1_INTERRUPT  } always clobbers reg byte a 
Statement [477] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [478] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [479] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [480] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [481] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0 [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [482] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [483] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq() [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [486] *((const byte*) SPRITES_ENABLE#0) ← (byte) $f [ ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [487] *((const byte*) SPRITES_MC#0) ← (byte) 0 [ ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [488] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0) [ ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [489] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0) [ ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [491] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte) 1 [ sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:100 [ sprites_init::s#2 sprites_init::s#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:101 [ sprites_init::xpos#2 sprites_init::xpos#1 ]
Statement [492] *((const byte*) SPRITES_XPOS#0 + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2 [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 sprites_init::s#2 sprites_init::xpos#2 ] ) always clobbers reg byte a 
Statement [493] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::s#2) ← (const byte) BLACK#0 [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 sprites_init::s#2 sprites_init::xpos#2 ] ) always clobbers reg byte a 
Statement [494] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte) $18 [ sprites_init::s#2 sprites_init::xpos#1 ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 sprites_init::s#2 sprites_init::xpos#1 ] ) always clobbers reg byte a 
Statement [499] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte) 3 [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [501] *((const byte*) CIA2_PORT_A#0) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [502] *((const byte*) D011#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte) 3 [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [503] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [504] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0 [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [505] *((const byte*) BGCOL2#0) ← *((const byte[]) PIECES_COLORS_1#0) [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [506] *((const byte*) BGCOL3#0) ← *((const byte[]) PIECES_COLORS_2#0) [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [507] *((const byte*) BGCOL4#0) ← (const byte) GREY#0 [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [512] (byte~) render_init::$13 ← (byte) render_init::i#2 << (byte) 1 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$13 ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$13 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:102 [ render_init::i#2 render_init::i#1 ]
Statement [513] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_init::$13) ← (byte*) render_init::li_1#2 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$13 ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$13 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:216 [ render_init::$13 ]
Statement [514] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 + (byte~) render_init::$13) ← (byte*) render_init::li_2#2 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] ) always clobbers reg byte a 
Statement [515] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte) $28 [ render_init::i#2 render_init::li_2#2 render_init::li_1#1 ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 render_init::i#2 render_init::li_2#2 render_init::li_1#1 ] ) always clobbers reg byte a 
Statement [516] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte) $28 [ render_init::i#2 render_init::li_1#1 render_init::li_2#1 ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 render_init::i#2 render_init::li_1#1 render_init::li_2#1 ] ) always clobbers reg byte a 
Statement [523] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE#0 [ render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::screen#5 render_screen_original::cols#4 render_screen_original::x#4 ] ( main:13::render_init:18::render_screen_original:508 [ render_screen_showing#0 score_bcd#0 render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::screen#5 render_screen_original::cols#4 render_screen_original::x#4 ] main:13::render_init:18::render_screen_original:510 [ render_screen_showing#0 score_bcd#0 render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::screen#5 render_screen_original::cols#4 render_screen_original::x#4 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:107 [ render_screen_original::y#6 render_screen_original::y#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:107 [ render_screen_original::y#6 render_screen_original::y#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:116 [ render_screen_original::x#6 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:116 [ render_screen_original::x#6 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ]
Statement [525] *((byte*) render_screen_original::cols#4) ← (const byte) BLACK#0 [ render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::cols#4 render_screen_original::x#4 render_screen_original::screen#2 ] ( main:13::render_init:18::render_screen_original:508 [ render_screen_showing#0 score_bcd#0 render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::cols#4 render_screen_original::x#4 render_screen_original::screen#2 ] main:13::render_init:18::render_screen_original:510 [ render_screen_showing#0 score_bcd#0 render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::cols#4 render_screen_original::x#4 render_screen_original::screen#2 ] ) always clobbers reg byte a reg byte y 
Statement [530] *((byte*) render_screen_original::screen#6) ← *((byte*) render_screen_original::oscr#2) [ render_screen_original::y#6 render_screen_original::oscr#2 render_screen_original::screen#6 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 ] ( main:13::render_init:18::render_screen_original:508 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::oscr#2 render_screen_original::screen#6 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 ] main:13::render_init:18::render_screen_original:510 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::oscr#2 render_screen_original::screen#6 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 ] ) always clobbers reg byte a reg byte y 
Statement [533] *((byte*) render_screen_original::cols#5) ← *((byte*) render_screen_original::ocols#2) [ render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 render_screen_original::screen#3 ] ( main:13::render_init:18::render_screen_original:508 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 render_screen_original::screen#3 ] main:13::render_init:18::render_screen_original:510 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 render_screen_original::screen#3 ] ) always clobbers reg byte a reg byte y 
Statement [539] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE#0 [ render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::screen#7 render_screen_original::cols#6 render_screen_original::x#6 ] ( main:13::render_init:18::render_screen_original:508 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::screen#7 render_screen_original::cols#6 render_screen_original::x#6 ] main:13::render_init:18::render_screen_original:510 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::screen#7 render_screen_original::cols#6 render_screen_original::x#6 ] ) always clobbers reg byte a reg byte y 
Statement [541] *((byte*) render_screen_original::cols#6) ← (const byte) BLACK#0 [ render_screen_original::y#6 render_screen_original::screen#10 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::cols#6 render_screen_original::x#6 ] ( main:13::render_init:18::render_screen_original:508 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::screen#10 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::cols#6 render_screen_original::x#6 ] main:13::render_init:18::render_screen_original:510 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::screen#10 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::cols#6 render_screen_original::x#6 ] ) always clobbers reg byte a reg byte y 
Statement [548] *((const word*) SID_VOICE3_FREQ#0) ← (word) $ffff [ ] ( main:13::sid_rnd_init:16 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [549] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 [ ] ( main:13::sid_rnd_init:16 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [559] if(*((const byte*) RASTER#0)<(byte) sprites_irq::raster_sprite_gfx_modify#0) goto sprites_irq::@8 [ render_screen_showing#0 irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 sprites_irq::raster_sprite_gfx_modify#0 ] (  [ render_screen_showing#0 irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 sprites_irq::raster_sprite_gfx_modify#0 ] ) always clobbers reg byte a 
Statement [561] if((byte) render_screen_showing#0==(byte) 0) goto sprites_irq::@1 [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 sprites_irq::ptr#0 ] (  [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 sprites_irq::ptr#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:219 [ sprites_irq::ptr#0 ]
Statement [569] if((byte) irq_cnt#1==(byte) 9) goto sprites_irq::@3 [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 ] (  [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 ] ) always clobbers reg byte a 
Statement [570] if((byte) irq_cnt#1==(byte) $a) goto sprites_irq::@4 [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 ] (  [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 ] ) always clobbers reg byte a 
Statement [571] (byte) irq_raster_next#3 ← (byte) irq_raster_next#0 + (byte) $14 [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 irq_raster_next#3 ] (  [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 irq_raster_next#3 ] ) always clobbers reg byte a reg byte x 
Statement [572] (byte) irq_sprite_ypos#3 ← (byte) irq_sprite_ypos#0 + (byte) $15 [ irq_sprite_ptr#0 irq_cnt#1 irq_raster_next#3 irq_sprite_ypos#3 ] (  [ irq_sprite_ptr#0 irq_cnt#1 irq_raster_next#3 irq_sprite_ypos#3 ] ) always clobbers reg byte a reg byte x 
Statement [573] (byte) irq_sprite_ptr#3 ← (byte) irq_sprite_ptr#0 + (byte) 3 [ irq_cnt#1 irq_raster_next#3 irq_sprite_ypos#3 irq_sprite_ptr#3 ] (  [ irq_cnt#1 irq_raster_next#3 irq_sprite_ypos#3 irq_sprite_ptr#3 ] ) always clobbers reg byte a reg byte x 
Statement [575] *((const byte*) RASTER#0) ← (byte) irq_raster_next#4 [ ] (  [ ] ) always clobbers reg byte a 
Statement [576] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [577] return  [ ] (  [ ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [578] (byte) irq_cnt#2 ← (byte) 0 [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#2 ] (  [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#2 ] ) always clobbers reg byte a 
Statement [579] (byte) irq_raster_next#2 ← (const byte) IRQ_RASTER_FIRST#0 [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_raster_next#2 irq_cnt#2 ] (  [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_raster_next#2 irq_cnt#2 ] ) always clobbers reg byte a 
Statement [580] (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#0 + (byte) $15 [ irq_sprite_ptr#0 irq_raster_next#2 irq_cnt#2 irq_sprite_ypos#2 ] (  [ irq_sprite_ptr#0 irq_raster_next#2 irq_cnt#2 irq_sprite_ypos#2 ] ) always clobbers reg byte a reg byte x 
Statement [581] (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#0 + (byte) 3 [ irq_raster_next#2 irq_cnt#2 irq_sprite_ypos#2 irq_sprite_ptr#2 ] (  [ irq_raster_next#2 irq_cnt#2 irq_sprite_ypos#2 irq_sprite_ptr#2 ] ) always clobbers reg byte a reg byte x 
Statement [582] (byte) irq_raster_next#1 ← (byte) irq_raster_next#0 + (byte) $15 [ irq_cnt#1 irq_raster_next#1 ] (  [ irq_cnt#1 irq_raster_next#1 ] ) always clobbers reg byte a reg byte x 
Statement [583] (byte) irq_sprite_ypos#1 ← (const byte) SPRITES_FIRST_YPOS#0 [ irq_cnt#1 irq_raster_next#1 irq_sprite_ypos#1 ] (  [ irq_cnt#1 irq_raster_next#1 irq_sprite_ypos#1 ] ) always clobbers reg byte a 
Statement [585] (byte) irq_sprite_ptr#1 ← (const byte) sprites_irq::toSpritePtr2_return#0 [ irq_cnt#1 irq_raster_next#1 irq_sprite_ypos#1 irq_sprite_ptr#1 ] (  [ irq_cnt#1 irq_raster_next#1 irq_sprite_ypos#1 irq_sprite_ptr#1 ] ) always clobbers reg byte a 
Statement [1] (byte) render_screen_showing#0 ← (byte) 0 [ render_screen_showing#0 ] (  [ render_screen_showing#0 ] ) always clobbers reg byte a 
Statement [2] (dword) score_bcd#0 ← (byte) 0 [ render_screen_showing#0 score_bcd#0 ] (  [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [7] (byte) irq_raster_next#0 ← (const byte) IRQ_RASTER_FIRST#0 [ render_screen_showing#0 score_bcd#0 ] (  [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [8] (byte) irq_sprite_ypos#0 ← (const byte) SPRITES_FIRST_YPOS#0+(byte) $15 [ render_screen_showing#0 score_bcd#0 ] (  [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [10] (byte) irq_sprite_ptr#0 ← (const byte) toSpritePtr1_return#0+(byte) 3 [ render_screen_showing#0 score_bcd#0 ] (  [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [11] (byte) irq_cnt#0 ← (byte) 0 [ render_screen_showing#0 score_bcd#0 ] (  [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [33] (byte*~) current_piece_gfx#112 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) [ render_screen_showing#0 score_bcd#0 current_ypos#98 current_ypos#6 current_xpos#119 current_xpos#100 current_piece_gfx#112 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 ] ( main:13 [ render_screen_showing#0 score_bcd#0 current_ypos#98 current_ypos#6 current_xpos#119 current_xpos#100 current_piece_gfx#112 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 ] ) always clobbers reg byte a 
Statement [38] (byte*~) current_piece#102 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#102 current_movedown_slow#1 game_over#52 ] ( main:13 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#102 current_movedown_slow#1 game_over#52 ] ) always clobbers reg byte a 
Statement [39] (byte*~) current_piece_gfx#124 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#102 current_piece_gfx#124 current_movedown_slow#1 game_over#52 ] ( main:13 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#102 current_piece_gfx#124 current_movedown_slow#1 game_over#52 ] ) always clobbers reg byte a 
Statement [41] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@2 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 ] ( main:13 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 ] ) always clobbers reg byte a 
Statement [50] if((byte) game_over#10==(byte) 0) goto main::@4 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#16 main::key_event#0 ] ( main:13 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#16 main::key_event#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:123 [ main::key_event#0 ]
Statement [62] (byte*~) current_piece_gfx#113 ← (byte*) current_piece_gfx#18 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 current_ypos#99 render_screen_render#65 current_xpos#120 current_piece_gfx#113 ] ( main:13 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 current_ypos#99 render_screen_render#65 current_xpos#120 current_piece_gfx#113 ] ) always clobbers reg byte a 
Statement [72] (byte) render_screen_render#11 ← (byte) render_screen_render#18 ^ (byte) $20 [ render_screen_show#16 render_screen_render#11 ] ( main:13::render_screen_swap:71 [ current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_show#16 render_screen_render#11 ] ) always clobbers reg byte a 
Statement [73] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte) $20 [ render_screen_show#13 render_screen_render#11 ] ( main:13::render_screen_swap:71 [ current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_show#13 render_screen_render#11 ] ) always clobbers reg byte a 
Statement [75] if((byte) render_screen_render#18==(byte) 0) goto render_score::@1 [ render_screen_render#18 lines_bcd#15 level_bcd#17 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 ] ) always clobbers reg byte a 
Statement [78] (byte*) render_bcd::screen#0 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#0 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#0 ] ) always clobbers reg byte a 
Statement [81] (byte*) render_bcd::screen#1 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#1 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#1 ] ) always clobbers reg byte a 
Statement [84] (byte*) render_bcd::screen#2 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#2 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#2 ] ) always clobbers reg byte a 
Statement [87] (byte) render_bcd::bcd#3 ← > (word) lines_bcd#15 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#3 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#3 ] ) always clobbers reg byte a 
Statement [88] (byte*) render_bcd::screen#3 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#3 render_bcd::screen#3 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#3 render_bcd::screen#3 ] ) always clobbers reg byte a 
Statement [90] (byte) render_bcd::bcd#4 ← < (word) lines_bcd#15 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#4 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#4 ] ) always clobbers reg byte a 
Statement [91] (byte*) render_bcd::screen#4 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#4 render_bcd::screen#4 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#4 render_bcd::screen#4 ] ) always clobbers reg byte a 
Statement [93] (byte*) render_bcd::screen#5 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::screen#5 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::screen#5 ] ) always clobbers reg byte a 
Statement [98] (byte*) render_bcd::screen_pos#0 ← (byte*) render_bcd::screen#6 + (word) render_bcd::offset#6 [ render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] ( main:13::render_score:69::render_bcd:80 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:83 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:86 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:89 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:92 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:95 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] ) always clobbers reg byte a 
Statement [100] (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#6 >> (byte) 4 [ render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] ( main:13::render_score:69::render_bcd:80 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] main:13::render_score:69::render_bcd:83 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] main:13::render_score:69::render_bcd:86 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] main:13::render_score:69::render_bcd:89 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] main:13::render_score:69::render_bcd:92 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] main:13::render_score:69::render_bcd:95 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] ) always clobbers reg byte a 
Statement [102] *((byte*) render_bcd::screen_pos#0) ← (byte~) render_bcd::$6 [ render_bcd::bcd#6 render_bcd::screen_pos#0 ] ( main:13::render_score:69::render_bcd:80 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:83 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:86 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:89 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:92 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:95 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::bcd#6 render_bcd::screen_pos#0 ] ) always clobbers reg byte y 
Statement [105] (byte~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (byte) $f [ render_bcd::screen_pos#3 render_bcd::$3 ] ( main:13::render_score:69::render_bcd:80 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] main:13::render_score:69::render_bcd:83 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] main:13::render_score:69::render_bcd:86 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] main:13::render_score:69::render_bcd:89 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] main:13::render_score:69::render_bcd:92 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] main:13::render_score:69::render_bcd:95 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::screen_pos#3 render_bcd::$3 ] ) always clobbers reg byte a 
Statement [107] *((byte*) render_bcd::screen_pos#3) ← (byte~) render_bcd::$4 [ ] ( main:13::render_score:69::render_bcd:80 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] main:13::render_score:69::render_bcd:83 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] main:13::render_score:69::render_bcd:86 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] main:13::render_score:69::render_bcd:89 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] main:13::render_score:69::render_bcd:92 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] main:13::render_score:69::render_bcd:95 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 ] ) always clobbers reg byte y 
Statement [113] (byte~) render_next::$6 ← (byte) next_piece_idx#12 << (byte) 1 [ next_piece_idx#12 render_next::screen_next_area#11 render_next::$6 ] ( main:13::render_next:37 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 next_piece_idx#12 render_next::screen_next_area#11 render_next::$6 ] main:13::render_next:67 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 next_piece_idx#12 render_next::screen_next_area#11 render_next::$6 ] ) always clobbers reg byte a 
Statement [115] (byte*~) render_next::next_piece_gfx#9 ← (byte*)*((const word[]) PIECES#0 + (byte~) render_next::$6) [ render_next::screen_next_area#11 render_next::next_piece_char#0 render_next::next_piece_gfx#9 ] ( main:13::render_next:37 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::screen_next_area#11 render_next::next_piece_char#0 render_next::next_piece_gfx#9 ] main:13::render_next:67 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_next::screen_next_area#11 render_next::next_piece_char#0 render_next::next_piece_gfx#9 ] ) always clobbers reg byte a 
Statement [118] (byte) render_next::cell#0 ← *((byte*) render_next::next_piece_gfx#2) [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#2 render_next::screen_next_area#5 render_next::c#2 render_next::cell#0 ] ( main:13::render_next:37 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#2 render_next::screen_next_area#5 render_next::c#2 render_next::cell#0 ] main:13::render_next:67 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#2 render_next::screen_next_area#5 render_next::c#2 render_next::cell#0 ] ) always clobbers reg byte a reg byte y 
Statement [121] *((byte*) render_next::screen_next_area#5) ← (byte) 0 [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] ( main:13::render_next:37 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] main:13::render_next:67 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] ) always clobbers reg byte a reg byte y 
Statement [125] (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#3 + (byte) $24 [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#4 ] ( main:13::render_next:37 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#4 ] main:13::render_next:67 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#4 ] ) always clobbers reg byte a 
Statement [129] *((byte*) render_next::screen_next_area#5) ← (byte) render_next::next_piece_char#0 [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] ( main:13::render_next:37 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] main:13::render_next:67 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] ) always clobbers reg byte a reg byte y 
Statement [134] (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (byte) 4 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#1 ] ( main:13::render_moving:35 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#1 ] main:13::render_moving:64 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#1 ] ) always clobbers reg byte a 
Statement [140] (byte~) render_moving::$1 ← (byte) render_screen_render#33 + (byte) render_moving::ypos#2 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$1 ] ( main:13::render_moving:35 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$1 ] main:13::render_moving:64 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$1 ] ) always clobbers reg byte a 
Statement [141] (byte~) render_moving::$6 ← (byte~) render_moving::$1 << (byte) 1 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$6 ] ( main:13::render_moving:35 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$6 ] main:13::render_moving:64 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$6 ] ) always clobbers reg byte a 
Statement [142] (byte*) render_moving::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_moving::$6) [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::screen_line#0 ] ( main:13::render_moving:35 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::screen_line#0 ] main:13::render_moving:64 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::screen_line#0 ] ) always clobbers reg byte a 
Statement [145] (byte) render_moving::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_moving::i#4) [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::screen_line#0 render_moving::i#4 render_moving::xpos#2 render_moving::c#2 render_moving::current_cell#0 ] ( main:13::render_moving:35 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::screen_line#0 render_moving::i#4 render_moving::xpos#2 render_moving::c#2 render_moving::current_cell#0 ] main:13::render_moving:64 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::screen_line#0 render_moving::i#4 render_moving::xpos#2 render_moving::c#2 render_moving::current_cell#0 ] ) always clobbers reg byte a 
Statement [148] *((byte*) render_moving::screen_line#0 + (byte) render_moving::xpos#2) ← (byte) current_piece_char#68 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#2 render_moving::screen_line#0 render_moving::xpos#2 render_moving::c#2 ] ( main:13::render_moving:35 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#2 render_moving::screen_line#0 render_moving::xpos#2 render_moving::c#2 ] main:13::render_moving:64 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#2 render_moving::screen_line#0 render_moving::xpos#2 render_moving::c#2 ] ) always clobbers reg byte a 
Statement [154] (byte~) render_playfield::$2 ← (byte) render_screen_render#22 + (byte) render_playfield::l#2 [ render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$2 ] ( main:13::render_playfield:30 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$2 ] main:13::render_playfield:58 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$2 ] ) always clobbers reg byte a 
Statement [155] (byte~) render_playfield::$6 ← (byte~) render_playfield::$2 << (byte) 1 [ render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$6 ] ( main:13::render_playfield:30 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$6 ] main:13::render_playfield:58 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$6 ] ) always clobbers reg byte a 
Statement [156] (byte*) render_playfield::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_playfield::$6) [ render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] ( main:13::render_playfield:30 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] main:13::render_playfield:58 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] ) always clobbers reg byte a 
Statement [158] *((byte*) render_playfield::screen_line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2) [ render_screen_render#22 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] ( main:13::render_playfield:30 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] main:13::render_playfield:58 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] ) always clobbers reg byte a reg byte y 
Statement [170] if((byte) game_over#15==(byte) 0) goto play_movement::@1 [ current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_orientation#20 current_piece_gfx#20 current_xpos#22 ] ( main:13::play_movement:53 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_orientation#20 current_piece_gfx#20 current_xpos#22 ] ) always clobbers reg byte a 
Statement [177] (byte) play_movement::render#2 ← (byte) play_movement::render#1 + (byte~) play_movement::$3 [ current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_movement::render#2 ] ( main:13::play_movement:53 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_movement::render#2 ] ) always clobbers reg byte a 
Statement [182] (byte) play_movement::return#0 ← (byte) play_movement::render#2 + (byte~) play_movement::$4 [ current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::return#0 current_orientation#25 current_piece_gfx#21 current_xpos#26 ] ( main:13::play_movement:53 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::return#0 current_orientation#25 current_piece_gfx#21 current_xpos#26 ] ) always clobbers reg byte a 
Statement [187] (byte~) play_move_rotate::$5 ← (byte) current_orientation#20 + (byte) $10 [ current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$5 ] ( main:13::play_movement:53::play_move_rotate:179 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$5 ] ) always clobbers reg byte a 
Statement [193] (byte*~) current_piece#99 ← (byte*) current_piece#15 [ current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#3 play_collision::ypos#3 play_collision::orientation#3 current_piece#99 ] ( main:13::play_movement:53::play_move_rotate:179 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#3 play_collision::ypos#3 play_collision::orientation#3 current_piece#99 ] ) always clobbers reg byte a 
Statement [199] (byte*) current_piece_gfx#7 ← (byte*) current_piece#15 + (byte) current_orientation#7 [ current_piece#15 current_ypos#19 current_xpos#26 current_orientation#7 current_piece_gfx#7 ] ( main:13::play_movement:53::play_move_rotate:179 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_xpos#26 current_orientation#7 current_piece_gfx#7 ] ) always clobbers reg byte a 
Statement [200] (byte~) play_move_rotate::$7 ← (byte) current_orientation#20 - (byte) $10 [ current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$7 ] ( main:13::play_movement:53::play_move_rotate:179 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$7 ] ) always clobbers reg byte a 
Statement [203] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#17 + (byte) play_collision::orientation#5 [ play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] ( main:13::play_movement:53::play_move_rotate:179::play_collision:194 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] main:13::play_movement:53::play_move_leftright:174::play_collision:232 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] main:13::play_movement:53::play_move_leftright:174::play_collision:243 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] main:13::play_movement:53::play_move_down:167::play_collision:267 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] main:13::play_spawn_current:26::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] main:13::play_spawn_current:28::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280::play_collision:296 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] ) always clobbers reg byte a 
Statement [205] (byte~) play_collision::$14 ← (byte) play_collision::yp#2 << (byte) 1 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] ( main:13::play_movement:53::play_move_rotate:179::play_collision:194 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] main:13::play_movement:53::play_move_leftright:174::play_collision:232 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] main:13::play_movement:53::play_move_leftright:174::play_collision:243 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] main:13::play_movement:53::play_move_down:167::play_collision:267 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] main:13::play_spawn_current:26::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] main:13::play_spawn_current:28::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280::play_collision:296 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] ) always clobbers reg byte a 
Statement [206] (byte*) play_collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_collision::$14) [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] ( main:13::play_movement:53::play_move_rotate:179::play_collision:194 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:13::play_movement:53::play_move_leftright:174::play_collision:232 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:13::play_movement:53::play_move_leftright:174::play_collision:243 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:13::play_movement:53::play_move_down:167::play_collision:267 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:13::play_spawn_current:26::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:13::play_spawn_current:28::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280::play_collision:296 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] ) always clobbers reg byte a 
Statement [210] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte) 0) goto play_collision::@3 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] ( main:13::play_movement:53::play_move_rotate:179::play_collision:194 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_leftright:174::play_collision:232 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_leftright:174::play_collision:243 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_down:167::play_collision:267 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_spawn_current:26::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_spawn_current:28::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280::play_collision:296 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] ) always clobbers reg byte a 
Statement [212] (byte~) play_collision::$5 ← (byte) play_collision::xp#2 & (byte) $80 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] ( main:13::play_movement:53::play_move_rotate:179::play_collision:194 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] main:13::play_movement:53::play_move_leftright:174::play_collision:232 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] main:13::play_movement:53::play_move_leftright:174::play_collision:243 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] main:13::play_movement:53::play_move_down:167::play_collision:267 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] main:13::play_spawn_current:26::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] main:13::play_spawn_current:28::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280::play_collision:296 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] ) always clobbers reg byte a 
Statement [215] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::xp#2)==(byte) 0) goto play_collision::@3 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] ( main:13::play_movement:53::play_move_rotate:179::play_collision:194 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_leftright:174::play_collision:232 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_leftright:174::play_collision:243 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_down:167::play_collision:267 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_spawn_current:26::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_spawn_current:28::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280::play_collision:296 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] ) always clobbers reg byte a 
Statement [231] (byte*~) current_piece#98 ← (byte*) current_piece#15 [ current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#98 play_collision::orientation#2 play_collision::ypos#2 play_collision::xpos#2 ] ( main:13::play_movement:53::play_move_leftright:174 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#98 play_collision::orientation#2 play_collision::ypos#2 play_collision::xpos#2 ] ) always clobbers reg byte a 
Statement [242] (byte*~) current_piece#97 ← (byte*) current_piece#15 [ current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#97 play_collision::orientation#1 play_collision::ypos#1 play_collision::xpos#1 ] ( main:13::play_movement:53::play_move_leftright:174 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#97 play_collision::orientation#1 play_collision::ypos#1 play_collision::xpos#1 ] ) always clobbers reg byte a 
Statement [266] (byte*~) current_piece#96 ← (byte*) current_piece#10 [ current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_piece#96 play_collision::orientation#0 play_collision::ypos#0 play_collision::xpos#0 ] ( main:13::play_movement:53::play_move_down:167 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_piece#96 play_collision::orientation#0 play_collision::ypos#0 play_collision::xpos#0 ] ) always clobbers reg byte a 
Statement [281] (byte*~) current_piece#93 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) [ current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 ] ( main:13::play_movement:53::play_move_down:167 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 ] ) always clobbers reg byte a 
Statement [282] (byte*~) current_piece_gfx#117 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) [ current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 current_piece_gfx#117 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 ] ( main:13::play_movement:53::play_move_down:167 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 current_piece_gfx#117 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 ] ) always clobbers reg byte a 
Statement [289] (byte~) play_spawn_current::$7 ← (byte) play_spawn_current::current_piece_idx#0 << (byte) 1 [ play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] ( main:13::play_spawn_current:26 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] main:13::play_spawn_current:28 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] ) always clobbers reg byte a 
Statement [295] (byte*~) current_piece#100 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) [ current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] ( main:13::play_spawn_current:26 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] main:13::play_spawn_current:28 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] ) always clobbers reg byte a 
Statement [303] if((byte) play_spawn_current::piece_idx#2==(byte) 7) goto play_spawn_current::sid_rnd1 [ current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 ] ( main:13::play_spawn_current:26 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 ] main:13::play_spawn_current:28 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 ] ) always clobbers reg byte a 
Statement [306] (byte) play_spawn_current::piece_idx#1 ← (byte) play_spawn_current::sid_rnd1_return#0 & (byte) 7 [ current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#52 play_spawn_current::piece_idx#1 ] ( main:13::play_spawn_current:26 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#52 play_spawn_current::piece_idx#1 ] main:13::play_spawn_current:28 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#52 play_spawn_current::piece_idx#1 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#52 play_spawn_current::piece_idx#1 ] ) always clobbers reg byte a 
Statement [308] (byte~) play_update_score::$2 ← < (word) lines_bcd#19 [ current_movedown_slow#14 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::$2 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 current_movedown_slow#14 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::$2 ] ) always clobbers reg byte a 
Statement [310] (byte~) play_update_score::$9 ← (byte) play_update_score::removed#0 << (byte) 2 [ current_movedown_slow#14 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::$9 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 current_movedown_slow#14 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::$9 ] ) always clobbers reg byte a 
Statement [311] (dword) play_update_score::add_bcd#0 ← *((const dword[5]) score_add_bcd#0 + (byte~) play_update_score::$9) [ current_movedown_slow#14 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::add_bcd#0 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 current_movedown_slow#14 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::add_bcd#0 ] ) always clobbers reg byte a 
Statement [313] (word) lines_bcd#29 ← (word) lines_bcd#19 + (byte) play_update_score::removed#0 [ current_movedown_slow#14 score_bcd#18 level#10 level_bcd#11 play_update_score::lines_before#0 play_update_score::add_bcd#0 lines_bcd#29 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 current_movedown_slow#14 score_bcd#18 level#10 level_bcd#11 play_update_score::lines_before#0 play_update_score::add_bcd#0 lines_bcd#29 ] ) always clobbers reg byte a 
Statement [314] (dword) score_bcd#29 ← (dword) score_bcd#18 + (dword) play_update_score::add_bcd#0 [ current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 lines_bcd#29 score_bcd#29 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 lines_bcd#29 score_bcd#29 ] ) always clobbers reg byte a 
Statement [316] (byte~) play_update_score::$4 ← < (word) lines_bcd#29 [ current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 lines_bcd#29 score_bcd#29 play_update_score::$4 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 lines_bcd#29 score_bcd#29 play_update_score::$4 ] ) always clobbers reg byte a 
Statement [324] if((byte) level#21>=(byte) $1d+(byte) 1) goto play_increase_level::@1 [ level_bcd#11 level#21 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278::play_increase_level:320 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 lines_bcd#29 score_bcd#29 level_bcd#11 level#21 ] ) always clobbers reg byte a 
Statement [325] (byte) current_movedown_slow#10 ← *((const byte[]) MOVEDOWN_SLOW_SPEEDS#0 + (byte) level#21) [ level_bcd#11 level#21 current_movedown_slow#10 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278::play_increase_level:320 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 lines_bcd#29 score_bcd#29 level_bcd#11 level#21 current_movedown_slow#10 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:124 [ play_movement::key_event#0 ]
Statement [328] (byte~) play_increase_level::$1 ← (byte) level_bcd#21 & (byte) $f [ level#21 current_movedown_slow#66 level_bcd#21 play_increase_level::$1 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278::play_increase_level:320 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 lines_bcd#29 score_bcd#29 level#21 current_movedown_slow#66 level_bcd#21 play_increase_level::$1 ] ) always clobbers reg byte a 
Statement [330] (byte) level_bcd#8 ← (byte) level_bcd#21 + (byte) 6 [ level#21 current_movedown_slow#66 level_bcd#8 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278::play_increase_level:320 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 lines_bcd#29 score_bcd#29 level#21 current_movedown_slow#66 level_bcd#8 ] ) always clobbers reg byte a reg byte x 
Statement [334] (byte~) play_increase_level::$5 ← (byte) play_increase_level::b#2 << (byte) 2 [ level#21 current_movedown_slow#66 level_bcd#62 play_increase_level::b#2 play_increase_level::$5 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278::play_increase_level:320 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 lines_bcd#29 score_bcd#29 level#21 current_movedown_slow#66 level_bcd#62 play_increase_level::b#2 play_increase_level::$5 ] ) always clobbers reg byte a 
Statement [335] *((const dword[5]) score_add_bcd#0 + (byte~) play_increase_level::$5) ← *((const dword[5]) score_add_bcd#0 + (byte~) play_increase_level::$5) + *((const dword[]) SCORE_BASE_BCD#0 + (byte~) play_increase_level::$5) [ level#21 current_movedown_slow#66 level_bcd#62 play_increase_level::b#2 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278::play_increase_level:320 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 lines_bcd#29 score_bcd#29 level#21 current_movedown_slow#66 level_bcd#62 play_increase_level::b#2 ] ) always clobbers reg byte a 
Statement [353] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0 [ play_remove_lines::y#8 play_remove_lines::removed#11 play_remove_lines::r#1 play_remove_lines::w#2 ] ( main:13::play_movement:53::play_move_down:167::play_remove_lines:274 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_remove_lines::y#8 play_remove_lines::removed#11 play_remove_lines::r#1 play_remove_lines::w#2 ] ) always clobbers reg byte a 
Statement [361] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#6) ← (byte) 0 [ play_remove_lines::removed#8 play_remove_lines::w#6 ] ( main:13::play_movement:53::play_move_down:167::play_remove_lines:274 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_remove_lines::removed#8 play_remove_lines::w#6 ] ) always clobbers reg byte a 
Statement [365] (byte~) play_lock_current::$4 ← (byte) play_lock_current::yp#2 << (byte) 1 [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::$4 ] ( main:13::play_movement:53::play_move_down:167::play_lock_current:272 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::$4 ] ) always clobbers reg byte a 
Statement [366] (byte*) play_lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_lock_current::$4) [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::playfield_line#0 ] ( main:13::play_movement:53::play_move_down:167::play_lock_current:272 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::playfield_line#0 ] ) always clobbers reg byte a 
Statement [370] if(*((byte*) current_piece_gfx#13 + (byte) play_lock_current::i#2)==(byte) 0) goto play_lock_current::@3 [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] ( main:13::play_movement:53::play_move_down:167::play_lock_current:272 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] ) always clobbers reg byte a 
Statement [371] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::xp#2) ← (byte) current_piece_char#10 [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] ( main:13::play_movement:53::play_move_down:167::play_lock_current:272 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] ) always clobbers reg byte a 
Statement [382] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte) 3 [ keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] ( main:13::play_movement:53::play_move_down:167::keyboard_event_pressed:252 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:404 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:410 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:416 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:422 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] ) always clobbers reg byte a 
Statement [384] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte) 7 [ keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ( main:13::play_movement:53::play_move_down:167::keyboard_event_pressed:252 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:404 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:410 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:416 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:422 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ) always clobbers reg byte a 
Statement [385] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) [ keyboard_event_pressed::return#11 ] ( main:13::play_movement:53::play_move_down:167::keyboard_event_pressed:252 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 keyboard_event_pressed::return#11 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:404 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::return#11 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:410 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::return#11 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:416 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::return#11 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:422 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::return#11 ] ) always clobbers reg byte a 
Statement [387] if((byte) keyboard_events_size#13==(byte) 0) goto keyboard_event_get::@return [ keyboard_events_size#13 ] ( main:13::keyboard_event_get:47 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 ] ) always clobbers reg byte a 
Statement [389] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4) [ keyboard_events_size#4 keyboard_event_get::return#1 ] ( main:13::keyboard_event_get:47 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#4 keyboard_event_get::return#1 ] ) always clobbers reg byte y 
Statement [398] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 keyboard_event_scan::row_scan#0 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 keyboard_event_scan::row_scan#0 ] ) always clobbers reg byte a 
Statement [399] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 [ keyboard_event_scan::row#2 keyboard_events_size#30 keyboard_event_scan::keycode#1 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_events_size#30 keyboard_event_scan::keycode#1 ] ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:68 [ current_piece_char#29 current_piece_char#10 current_piece_char#16 current_piece_char#5 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:69 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:72 [ current_xpos#43 current_xpos#14 current_xpos#19 current_xpos#100 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:56 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#19 current_ypos#6 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:5 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:65 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:90 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Statement [402] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7 [ keyboard_events_size#13 keyboard_event_scan::row#1 keyboard_event_scan::keycode#13 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_scan::row#1 keyboard_event_scan::keycode#13 ] ) always clobbers reg byte a 
Statement [429] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$15 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$15 ] ) always clobbers reg byte a 
Statement [430] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$16 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$16 ] ) always clobbers reg byte a 
Statement [432] if((byte) keyboard_events_size#10==(byte) 8) goto keyboard_event_scan::@10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ) always clobbers reg byte a 
Statement [433] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] ) always clobbers reg byte a 
Statement [435] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ) always clobbers reg byte a reg byte y 
Statement [441] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#29 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#29 ] ) always clobbers reg byte a reg byte y 
Statement [442] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$23 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$23 ] ) always clobbers reg byte a 
Statement [443] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte~) keyboard_event_scan::$23 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ) always clobbers reg byte y 
Statement [445] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:13::keyboard_event_scan:45::keyboard_matrix_read:395 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 ] ) always clobbers reg byte a 
Statement [446] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) [ keyboard_matrix_read::return#0 ] ( main:13::keyboard_event_scan:45::keyboard_matrix_read:395 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 keyboard_matrix_read::return#0 ] ) always clobbers reg byte a 
Statement [448] if((byte) render_screen_show#16==(byte) 0) goto render_show::toD0181 [ render_screen_show#16 level#10 ] ( main:13::render_show:43 [ render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level_bcd#11 render_screen_show#16 level#10 ] ) always clobbers reg byte a 
Statement [452] *((const byte*) BGCOL2#0) ← *((const byte[]) PIECES_COLORS_1#0 + (byte) level#10) [ render_screen_show#16 level#10 ] ( main:13::render_show:43 [ render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level_bcd#11 render_screen_show#16 level#10 ] ) always clobbers reg byte a reg byte y 
Statement [453] *((const byte*) BGCOL3#0) ← *((const byte[]) PIECES_COLORS_2#0 + (byte) level#10) [ render_screen_show#16 level#10 ] ( main:13::render_show:43 [ render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level_bcd#11 render_screen_show#16 level#10 ] ) always clobbers reg byte a reg byte y 
Statement [454] (byte) render_screen_showing#1 ← (byte) render_screen_show#16 [ render_screen_show#16 level#10 render_screen_showing#1 ] ( main:13::render_show:43 [ render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level_bcd#11 render_screen_show#16 level#10 render_screen_showing#1 ] ) always clobbers reg byte a 
Statement [459] (byte~) play_init::$4 ← (byte) play_init::j#2 << (byte) 1 [ play_init::j#2 play_init::pli#2 play_init::idx#2 play_init::$4 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 play_init::j#2 play_init::pli#2 play_init::idx#2 play_init::$4 ] ) always clobbers reg byte a 
Statement [460] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_init::$4) ← (byte*) play_init::pli#2 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 play_init::j#2 play_init::pli#2 play_init::idx#2 ] ) always clobbers reg byte a 
Statement [461] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) play_init::j#2) ← (byte) play_init::idx#2 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 play_init::j#2 play_init::pli#2 play_init::idx#2 ] ) always clobbers reg byte a 
Statement [462] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const byte) PLAYFIELD_COLS#0 [ play_init::j#2 play_init::idx#2 play_init::pli#1 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 play_init::j#2 play_init::idx#2 play_init::pli#1 ] ) always clobbers reg byte a 
Statement [463] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const byte) PLAYFIELD_COLS#0 [ play_init::j#2 play_init::pli#1 play_init::idx#1 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 play_init::j#2 play_init::pli#1 play_init::idx#1 ] ) always clobbers reg byte a 
Statement [466] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0 [ ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [467] (byte) current_movedown_slow#1 ← *((const byte[]) MOVEDOWN_SLOW_SPEEDS#0) [ current_movedown_slow#1 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 ] ) always clobbers reg byte a 
Statement [469] (byte~) play_init::$5 ← (byte) play_init::b#2 << (byte) 2 [ current_movedown_slow#1 play_init::b#2 play_init::$5 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 play_init::b#2 play_init::$5 ] ) always clobbers reg byte a 
Statement [470] *((const dword[5]) score_add_bcd#0 + (byte~) play_init::$5) ← *((const dword[]) SCORE_BASE_BCD#0 + (byte~) play_init::$5) [ current_movedown_slow#1 play_init::b#2 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 play_init::b#2 ] ) always clobbers reg byte a 
Statement [475] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement asm { ldaCIA1_INTERRUPT  } always clobbers reg byte a 
Statement [477] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [478] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [479] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [480] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [481] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0 [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [482] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [483] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq() [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [486] *((const byte*) SPRITES_ENABLE#0) ← (byte) $f [ ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [487] *((const byte*) SPRITES_MC#0) ← (byte) 0 [ ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [488] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0) [ ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [489] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0) [ ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [491] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte) 1 [ sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] ) always clobbers reg byte a 
Statement [492] *((const byte*) SPRITES_XPOS#0 + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2 [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 sprites_init::s#2 sprites_init::xpos#2 ] ) always clobbers reg byte a 
Statement [493] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::s#2) ← (const byte) BLACK#0 [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 sprites_init::s#2 sprites_init::xpos#2 ] ) always clobbers reg byte a 
Statement [494] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte) $18 [ sprites_init::s#2 sprites_init::xpos#1 ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 sprites_init::s#2 sprites_init::xpos#1 ] ) always clobbers reg byte a 
Statement [499] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte) 3 [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [501] *((const byte*) CIA2_PORT_A#0) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [502] *((const byte*) D011#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte) 3 [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [503] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [504] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0 [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [505] *((const byte*) BGCOL2#0) ← *((const byte[]) PIECES_COLORS_1#0) [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [506] *((const byte*) BGCOL3#0) ← *((const byte[]) PIECES_COLORS_2#0) [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [507] *((const byte*) BGCOL4#0) ← (const byte) GREY#0 [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [512] (byte~) render_init::$13 ← (byte) render_init::i#2 << (byte) 1 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$13 ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$13 ] ) always clobbers reg byte a 
Statement [513] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_init::$13) ← (byte*) render_init::li_1#2 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$13 ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$13 ] ) always clobbers reg byte a 
Statement [514] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 + (byte~) render_init::$13) ← (byte*) render_init::li_2#2 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] ) always clobbers reg byte a 
Statement [515] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte) $28 [ render_init::i#2 render_init::li_2#2 render_init::li_1#1 ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 render_init::i#2 render_init::li_2#2 render_init::li_1#1 ] ) always clobbers reg byte a 
Statement [516] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte) $28 [ render_init::i#2 render_init::li_1#1 render_init::li_2#1 ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 render_init::i#2 render_init::li_1#1 render_init::li_2#1 ] ) always clobbers reg byte a 
Statement [523] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE#0 [ render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::screen#5 render_screen_original::cols#4 render_screen_original::x#4 ] ( main:13::render_init:18::render_screen_original:508 [ render_screen_showing#0 score_bcd#0 render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::screen#5 render_screen_original::cols#4 render_screen_original::x#4 ] main:13::render_init:18::render_screen_original:510 [ render_screen_showing#0 score_bcd#0 render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::screen#5 render_screen_original::cols#4 render_screen_original::x#4 ] ) always clobbers reg byte a reg byte y 
Statement [525] *((byte*) render_screen_original::cols#4) ← (const byte) BLACK#0 [ render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::cols#4 render_screen_original::x#4 render_screen_original::screen#2 ] ( main:13::render_init:18::render_screen_original:508 [ render_screen_showing#0 score_bcd#0 render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::cols#4 render_screen_original::x#4 render_screen_original::screen#2 ] main:13::render_init:18::render_screen_original:510 [ render_screen_showing#0 score_bcd#0 render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::cols#4 render_screen_original::x#4 render_screen_original::screen#2 ] ) always clobbers reg byte a reg byte y 
Statement [530] *((byte*) render_screen_original::screen#6) ← *((byte*) render_screen_original::oscr#2) [ render_screen_original::y#6 render_screen_original::oscr#2 render_screen_original::screen#6 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 ] ( main:13::render_init:18::render_screen_original:508 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::oscr#2 render_screen_original::screen#6 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 ] main:13::render_init:18::render_screen_original:510 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::oscr#2 render_screen_original::screen#6 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 ] ) always clobbers reg byte a reg byte y 
Statement [533] *((byte*) render_screen_original::cols#5) ← *((byte*) render_screen_original::ocols#2) [ render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 render_screen_original::screen#3 ] ( main:13::render_init:18::render_screen_original:508 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 render_screen_original::screen#3 ] main:13::render_init:18::render_screen_original:510 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 render_screen_original::screen#3 ] ) always clobbers reg byte a reg byte y 
Statement [539] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE#0 [ render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::screen#7 render_screen_original::cols#6 render_screen_original::x#6 ] ( main:13::render_init:18::render_screen_original:508 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::screen#7 render_screen_original::cols#6 render_screen_original::x#6 ] main:13::render_init:18::render_screen_original:510 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::screen#7 render_screen_original::cols#6 render_screen_original::x#6 ] ) always clobbers reg byte a reg byte y 
Statement [541] *((byte*) render_screen_original::cols#6) ← (const byte) BLACK#0 [ render_screen_original::y#6 render_screen_original::screen#10 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::cols#6 render_screen_original::x#6 ] ( main:13::render_init:18::render_screen_original:508 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::screen#10 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::cols#6 render_screen_original::x#6 ] main:13::render_init:18::render_screen_original:510 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::screen#10 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::cols#6 render_screen_original::x#6 ] ) always clobbers reg byte a reg byte y 
Statement [548] *((const word*) SID_VOICE3_FREQ#0) ← (word) $ffff [ ] ( main:13::sid_rnd_init:16 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [549] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 [ ] ( main:13::sid_rnd_init:16 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [559] if(*((const byte*) RASTER#0)<(byte) sprites_irq::raster_sprite_gfx_modify#0) goto sprites_irq::@8 [ render_screen_showing#0 irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 sprites_irq::raster_sprite_gfx_modify#0 ] (  [ render_screen_showing#0 irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 sprites_irq::raster_sprite_gfx_modify#0 ] ) always clobbers reg byte a 
Statement [561] if((byte) render_screen_showing#0==(byte) 0) goto sprites_irq::@1 [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 sprites_irq::ptr#0 ] (  [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 sprites_irq::ptr#0 ] ) always clobbers reg byte a 
Statement [569] if((byte) irq_cnt#1==(byte) 9) goto sprites_irq::@3 [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 ] (  [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 ] ) always clobbers reg byte a 
Statement [570] if((byte) irq_cnt#1==(byte) $a) goto sprites_irq::@4 [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 ] (  [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 ] ) always clobbers reg byte a 
Statement [571] (byte) irq_raster_next#3 ← (byte) irq_raster_next#0 + (byte) $14 [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 irq_raster_next#3 ] (  [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 irq_raster_next#3 ] ) always clobbers reg byte a reg byte x 
Statement [572] (byte) irq_sprite_ypos#3 ← (byte) irq_sprite_ypos#0 + (byte) $15 [ irq_sprite_ptr#0 irq_cnt#1 irq_raster_next#3 irq_sprite_ypos#3 ] (  [ irq_sprite_ptr#0 irq_cnt#1 irq_raster_next#3 irq_sprite_ypos#3 ] ) always clobbers reg byte a reg byte x 
Statement [573] (byte) irq_sprite_ptr#3 ← (byte) irq_sprite_ptr#0 + (byte) 3 [ irq_cnt#1 irq_raster_next#3 irq_sprite_ypos#3 irq_sprite_ptr#3 ] (  [ irq_cnt#1 irq_raster_next#3 irq_sprite_ypos#3 irq_sprite_ptr#3 ] ) always clobbers reg byte a reg byte x 
Statement [575] *((const byte*) RASTER#0) ← (byte) irq_raster_next#4 [ ] (  [ ] ) always clobbers reg byte a 
Statement [576] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [577] return  [ ] (  [ ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [578] (byte) irq_cnt#2 ← (byte) 0 [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#2 ] (  [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#2 ] ) always clobbers reg byte a 
Statement [579] (byte) irq_raster_next#2 ← (const byte) IRQ_RASTER_FIRST#0 [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_raster_next#2 irq_cnt#2 ] (  [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_raster_next#2 irq_cnt#2 ] ) always clobbers reg byte a 
Statement [580] (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#0 + (byte) $15 [ irq_sprite_ptr#0 irq_raster_next#2 irq_cnt#2 irq_sprite_ypos#2 ] (  [ irq_sprite_ptr#0 irq_raster_next#2 irq_cnt#2 irq_sprite_ypos#2 ] ) always clobbers reg byte a reg byte x 
Statement [581] (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#0 + (byte) 3 [ irq_raster_next#2 irq_cnt#2 irq_sprite_ypos#2 irq_sprite_ptr#2 ] (  [ irq_raster_next#2 irq_cnt#2 irq_sprite_ypos#2 irq_sprite_ptr#2 ] ) always clobbers reg byte a reg byte x 
Statement [582] (byte) irq_raster_next#1 ← (byte) irq_raster_next#0 + (byte) $15 [ irq_cnt#1 irq_raster_next#1 ] (  [ irq_cnt#1 irq_raster_next#1 ] ) always clobbers reg byte a reg byte x 
Statement [583] (byte) irq_sprite_ypos#1 ← (const byte) SPRITES_FIRST_YPOS#0 [ irq_cnt#1 irq_raster_next#1 irq_sprite_ypos#1 ] (  [ irq_cnt#1 irq_raster_next#1 irq_sprite_ypos#1 ] ) always clobbers reg byte a 
Statement [585] (byte) irq_sprite_ptr#1 ← (const byte) sprites_irq::toSpritePtr2_return#0 [ irq_cnt#1 irq_raster_next#1 irq_sprite_ypos#1 irq_sprite_ptr#1 ] (  [ irq_cnt#1 irq_raster_next#1 irq_sprite_ypos#1 irq_sprite_ptr#1 ] ) always clobbers reg byte a 
Statement [1] (byte) render_screen_showing#0 ← (byte) 0 [ render_screen_showing#0 ] (  [ render_screen_showing#0 ] ) always clobbers reg byte a 
Statement [2] (dword) score_bcd#0 ← (byte) 0 [ render_screen_showing#0 score_bcd#0 ] (  [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [7] (byte) irq_raster_next#0 ← (const byte) IRQ_RASTER_FIRST#0 [ render_screen_showing#0 score_bcd#0 ] (  [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [8] (byte) irq_sprite_ypos#0 ← (const byte) SPRITES_FIRST_YPOS#0+(byte) $15 [ render_screen_showing#0 score_bcd#0 ] (  [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [10] (byte) irq_sprite_ptr#0 ← (const byte) toSpritePtr1_return#0+(byte) 3 [ render_screen_showing#0 score_bcd#0 ] (  [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [11] (byte) irq_cnt#0 ← (byte) 0 [ render_screen_showing#0 score_bcd#0 ] (  [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [33] (byte*~) current_piece_gfx#112 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) [ render_screen_showing#0 score_bcd#0 current_ypos#98 current_ypos#6 current_xpos#119 current_xpos#100 current_piece_gfx#112 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 ] ( main:13 [ render_screen_showing#0 score_bcd#0 current_ypos#98 current_ypos#6 current_xpos#119 current_xpos#100 current_piece_gfx#112 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 ] ) always clobbers reg byte a 
Statement [38] (byte*~) current_piece#102 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#102 current_movedown_slow#1 game_over#52 ] ( main:13 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#102 current_movedown_slow#1 game_over#52 ] ) always clobbers reg byte a 
Statement [39] (byte*~) current_piece_gfx#124 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#102 current_piece_gfx#124 current_movedown_slow#1 game_over#52 ] ( main:13 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 current_piece#102 current_piece_gfx#124 current_movedown_slow#1 game_over#52 ] ) always clobbers reg byte a 
Statement [41] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@2 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 ] ( main:13 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 ] ) always clobbers reg byte a 
Statement [50] if((byte) game_over#10==(byte) 0) goto main::@4 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#16 main::key_event#0 ] ( main:13 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#16 main::key_event#0 ] ) always clobbers reg byte a 
Statement [62] (byte*~) current_piece_gfx#113 ← (byte*) current_piece_gfx#18 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 current_ypos#99 render_screen_render#65 current_xpos#120 current_piece_gfx#113 ] ( main:13 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 current_ypos#99 render_screen_render#65 current_xpos#120 current_piece_gfx#113 ] ) always clobbers reg byte a 
Statement [72] (byte) render_screen_render#11 ← (byte) render_screen_render#18 ^ (byte) $20 [ render_screen_show#16 render_screen_render#11 ] ( main:13::render_screen_swap:71 [ current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_show#16 render_screen_render#11 ] ) always clobbers reg byte a 
Statement [73] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte) $20 [ render_screen_show#13 render_screen_render#11 ] ( main:13::render_screen_swap:71 [ current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_show#13 render_screen_render#11 ] ) always clobbers reg byte a 
Statement [75] if((byte) render_screen_render#18==(byte) 0) goto render_score::@1 [ render_screen_render#18 lines_bcd#15 level_bcd#17 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 ] ) always clobbers reg byte a 
Statement [78] (byte*) render_bcd::screen#0 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#0 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#0 ] ) always clobbers reg byte a 
Statement [81] (byte*) render_bcd::screen#1 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#1 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#1 ] ) always clobbers reg byte a 
Statement [84] (byte*) render_bcd::screen#2 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#2 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen#2 ] ) always clobbers reg byte a 
Statement [87] (byte) render_bcd::bcd#3 ← > (word) lines_bcd#15 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#3 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#3 ] ) always clobbers reg byte a 
Statement [88] (byte*) render_bcd::screen#3 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#3 render_bcd::screen#3 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#3 render_bcd::screen#3 ] ) always clobbers reg byte a 
Statement [90] (byte) render_bcd::bcd#4 ← < (word) lines_bcd#15 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#4 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#4 ] ) always clobbers reg byte a 
Statement [91] (byte*) render_bcd::screen#4 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#4 render_bcd::screen#4 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#4 render_bcd::screen#4 ] ) always clobbers reg byte a 
Statement [93] (byte*) render_bcd::screen#5 ← (byte*) render_score::screen#3 [ render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::screen#5 ] ( main:13::render_score:69 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::screen#5 ] ) always clobbers reg byte a 
Statement [98] (byte*) render_bcd::screen_pos#0 ← (byte*) render_bcd::screen#6 + (word) render_bcd::offset#6 [ render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] ( main:13::render_score:69::render_bcd:80 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:83 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:86 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:89 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:92 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:95 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::only_low#6 render_bcd::bcd#6 render_bcd::screen_pos#0 ] ) always clobbers reg byte a 
Statement [100] (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#6 >> (byte) 4 [ render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] ( main:13::render_score:69::render_bcd:80 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] main:13::render_score:69::render_bcd:83 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] main:13::render_score:69::render_bcd:86 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] main:13::render_score:69::render_bcd:89 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] main:13::render_score:69::render_bcd:92 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] main:13::render_score:69::render_bcd:95 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::bcd#6 render_bcd::screen_pos#0 render_bcd::$5 ] ) always clobbers reg byte a 
Statement [102] *((byte*) render_bcd::screen_pos#0) ← (byte~) render_bcd::$6 [ render_bcd::bcd#6 render_bcd::screen_pos#0 ] ( main:13::render_score:69::render_bcd:80 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:83 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:86 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:89 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:92 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::bcd#6 render_bcd::screen_pos#0 ] main:13::render_score:69::render_bcd:95 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::bcd#6 render_bcd::screen_pos#0 ] ) always clobbers reg byte y 
Statement [105] (byte~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (byte) $f [ render_bcd::screen_pos#3 render_bcd::$3 ] ( main:13::render_score:69::render_bcd:80 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] main:13::render_score:69::render_bcd:83 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] main:13::render_score:69::render_bcd:86 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] main:13::render_score:69::render_bcd:89 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] main:13::render_score:69::render_bcd:92 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 render_bcd::screen_pos#3 render_bcd::$3 ] main:13::render_score:69::render_bcd:95 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_bcd::screen_pos#3 render_bcd::$3 ] ) always clobbers reg byte a 
Statement [107] *((byte*) render_bcd::screen_pos#3) ← (byte~) render_bcd::$4 [ ] ( main:13::render_score:69::render_bcd:80 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] main:13::render_score:69::render_bcd:83 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] main:13::render_score:69::render_bcd:86 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] main:13::render_score:69::render_bcd:89 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] main:13::render_score:69::render_bcd:92 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 render_score::screen#3 ] main:13::render_score:69::render_bcd:95 [ render_screen_show#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 score_bcd#14 level#17 render_screen_render#18 lines_bcd#15 level_bcd#17 ] ) always clobbers reg byte y 
Statement [113] (byte~) render_next::$6 ← (byte) next_piece_idx#12 << (byte) 1 [ next_piece_idx#12 render_next::screen_next_area#11 render_next::$6 ] ( main:13::render_next:37 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 next_piece_idx#12 render_next::screen_next_area#11 render_next::$6 ] main:13::render_next:67 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 next_piece_idx#12 render_next::screen_next_area#11 render_next::$6 ] ) always clobbers reg byte a 
Statement [115] (byte*~) render_next::next_piece_gfx#9 ← (byte*)*((const word[]) PIECES#0 + (byte~) render_next::$6) [ render_next::screen_next_area#11 render_next::next_piece_char#0 render_next::next_piece_gfx#9 ] ( main:13::render_next:37 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::screen_next_area#11 render_next::next_piece_char#0 render_next::next_piece_gfx#9 ] main:13::render_next:67 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_next::screen_next_area#11 render_next::next_piece_char#0 render_next::next_piece_gfx#9 ] ) always clobbers reg byte a 
Statement [118] (byte) render_next::cell#0 ← *((byte*) render_next::next_piece_gfx#2) [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#2 render_next::screen_next_area#5 render_next::c#2 render_next::cell#0 ] ( main:13::render_next:37 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#2 render_next::screen_next_area#5 render_next::c#2 render_next::cell#0 ] main:13::render_next:67 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#2 render_next::screen_next_area#5 render_next::c#2 render_next::cell#0 ] ) always clobbers reg byte a reg byte y 
Statement [121] *((byte*) render_next::screen_next_area#5) ← (byte) 0 [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] ( main:13::render_next:37 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] main:13::render_next:67 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] ) always clobbers reg byte a reg byte y 
Statement [125] (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#3 + (byte) $24 [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#4 ] ( main:13::render_next:37 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#4 ] main:13::render_next:67 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#4 ] ) always clobbers reg byte a 
Statement [129] *((byte*) render_next::screen_next_area#5) ← (byte) render_next::next_piece_char#0 [ render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] ( main:13::render_next:37 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] main:13::render_next:67 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_next::next_piece_char#0 render_next::l#7 render_next::next_piece_gfx#1 render_next::screen_next_area#5 render_next::c#2 ] ) always clobbers reg byte a reg byte y 
Statement [134] (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (byte) 4 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#1 ] ( main:13::render_moving:35 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#1 ] main:13::render_moving:64 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#1 ] ) always clobbers reg byte a 
Statement [140] (byte~) render_moving::$1 ← (byte) render_screen_render#33 + (byte) render_moving::ypos#2 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$1 ] ( main:13::render_moving:35 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$1 ] main:13::render_moving:64 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$1 ] ) always clobbers reg byte a 
Statement [141] (byte~) render_moving::$6 ← (byte~) render_moving::$1 << (byte) 1 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$6 ] ( main:13::render_moving:35 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$6 ] main:13::render_moving:64 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::$6 ] ) always clobbers reg byte a 
Statement [142] (byte*) render_moving::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_moving::$6) [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::screen_line#0 ] ( main:13::render_moving:35 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::screen_line#0 ] main:13::render_moving:64 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::i#3 render_moving::l#4 render_moving::screen_line#0 ] ) always clobbers reg byte a 
Statement [145] (byte) render_moving::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_moving::i#4) [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::screen_line#0 render_moving::i#4 render_moving::xpos#2 render_moving::c#2 render_moving::current_cell#0 ] ( main:13::render_moving:35 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::screen_line#0 render_moving::i#4 render_moving::xpos#2 render_moving::c#2 render_moving::current_cell#0 ] main:13::render_moving:64 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::screen_line#0 render_moving::i#4 render_moving::xpos#2 render_moving::c#2 render_moving::current_cell#0 ] ) always clobbers reg byte a 
Statement [148] *((byte*) render_moving::screen_line#0 + (byte) render_moving::xpos#2) ← (byte) current_piece_char#68 [ render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#2 render_moving::screen_line#0 render_moving::xpos#2 render_moving::c#2 ] ( main:13::render_moving:35 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#2 render_moving::screen_line#0 render_moving::xpos#2 render_moving::c#2 ] main:13::render_moving:64 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#33 current_xpos#59 current_piece_gfx#64 current_piece_char#68 render_moving::ypos#2 render_moving::l#4 render_moving::i#2 render_moving::screen_line#0 render_moving::xpos#2 render_moving::c#2 ] ) always clobbers reg byte a 
Statement [154] (byte~) render_playfield::$2 ← (byte) render_screen_render#22 + (byte) render_playfield::l#2 [ render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$2 ] ( main:13::render_playfield:30 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$2 ] main:13::render_playfield:58 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$2 ] ) always clobbers reg byte a 
Statement [155] (byte~) render_playfield::$6 ← (byte~) render_playfield::$2 << (byte) 1 [ render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$6 ] ( main:13::render_playfield:30 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$6 ] main:13::render_playfield:58 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::$6 ] ) always clobbers reg byte a 
Statement [156] (byte*) render_playfield::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_playfield::$6) [ render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] ( main:13::render_playfield:30 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] main:13::render_playfield:58 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#3 render_playfield::screen_line#0 ] ) always clobbers reg byte a 
Statement [158] *((byte*) render_playfield::screen_line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2) [ render_screen_render#22 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] ( main:13::render_playfield:30 [ render_screen_showing#0 score_bcd#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 current_movedown_slow#1 game_over#52 render_screen_render#22 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] main:13::render_playfield:58 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_orientation#17 current_piece_gfx#18 current_xpos#19 current_ypos#19 game_over#15 next_piece_idx#16 render_screen_showing#1 keyboard_events_size#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 render_screen_render#22 render_playfield::l#2 render_playfield::i#2 render_playfield::screen_line#2 render_playfield::c#2 ] ) always clobbers reg byte a reg byte y 
Statement [170] if((byte) game_over#15==(byte) 0) goto play_movement::@1 [ current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_orientation#20 current_piece_gfx#20 current_xpos#22 ] ( main:13::play_movement:53 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_orientation#20 current_piece_gfx#20 current_xpos#22 ] ) always clobbers reg byte a 
Statement [177] (byte) play_movement::render#2 ← (byte) play_movement::render#1 + (byte~) play_movement::$3 [ current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_movement::render#2 ] ( main:13::play_movement:53 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_movement::render#2 ] ) always clobbers reg byte a 
Statement [182] (byte) play_movement::return#0 ← (byte) play_movement::render#2 + (byte~) play_movement::$4 [ current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::return#0 current_orientation#25 current_piece_gfx#21 current_xpos#26 ] ( main:13::play_movement:53 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece#15 current_piece_char#16 current_ypos#19 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::return#0 current_orientation#25 current_piece_gfx#21 current_xpos#26 ] ) always clobbers reg byte a 
Statement [187] (byte~) play_move_rotate::$5 ← (byte) current_orientation#20 + (byte) $10 [ current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$5 ] ( main:13::play_movement:53::play_move_rotate:179 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$5 ] ) always clobbers reg byte a 
Statement [193] (byte*~) current_piece#99 ← (byte*) current_piece#15 [ current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#3 play_collision::ypos#3 play_collision::orientation#3 current_piece#99 ] ( main:13::play_movement:53::play_move_rotate:179 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#3 play_collision::ypos#3 play_collision::orientation#3 current_piece#99 ] ) always clobbers reg byte a 
Statement [199] (byte*) current_piece_gfx#7 ← (byte*) current_piece#15 + (byte) current_orientation#7 [ current_piece#15 current_ypos#19 current_xpos#26 current_orientation#7 current_piece_gfx#7 ] ( main:13::play_movement:53::play_move_rotate:179 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_xpos#26 current_orientation#7 current_piece_gfx#7 ] ) always clobbers reg byte a 
Statement [200] (byte~) play_move_rotate::$7 ← (byte) current_orientation#20 - (byte) $10 [ current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$7 ] ( main:13::play_movement:53::play_move_rotate:179 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::$7 ] ) always clobbers reg byte a 
Statement [203] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#17 + (byte) play_collision::orientation#5 [ play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] ( main:13::play_movement:53::play_move_rotate:179::play_collision:194 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] main:13::play_movement:53::play_move_leftright:174::play_collision:232 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] main:13::play_movement:53::play_move_leftright:174::play_collision:243 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] main:13::play_movement:53::play_move_down:167::play_collision:267 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] main:13::play_spawn_current:26::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] main:13::play_spawn_current:28::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280::play_collision:296 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::yp#0 play_collision::xpos#6 play_collision::piece_gfx#0 ] ) always clobbers reg byte a 
Statement [205] (byte~) play_collision::$14 ← (byte) play_collision::yp#2 << (byte) 1 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] ( main:13::play_movement:53::play_move_rotate:179::play_collision:194 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] main:13::play_movement:53::play_move_leftright:174::play_collision:232 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] main:13::play_movement:53::play_move_leftright:174::play_collision:243 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] main:13::play_movement:53::play_move_down:167::play_collision:267 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] main:13::play_spawn_current:26::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] main:13::play_spawn_current:28::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280::play_collision:296 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::$14 ] ) always clobbers reg byte a 
Statement [206] (byte*) play_collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_collision::$14) [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] ( main:13::play_movement:53::play_move_rotate:179::play_collision:194 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:13::play_movement:53::play_move_leftright:174::play_collision:232 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:13::play_movement:53::play_move_leftright:174::play_collision:243 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:13::play_movement:53::play_move_down:167::play_collision:267 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:13::play_spawn_current:26::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:13::play_spawn_current:28::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280::play_collision:296 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::i#3 play_collision::l#6 play_collision::playfield_line#0 ] ) always clobbers reg byte a 
Statement [210] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte) 0) goto play_collision::@3 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] ( main:13::play_movement:53::play_move_rotate:179::play_collision:194 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_leftright:174::play_collision:232 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_leftright:174::play_collision:243 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_down:167::play_collision:267 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_spawn_current:26::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_spawn_current:28::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280::play_collision:296 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] ) always clobbers reg byte a 
Statement [212] (byte~) play_collision::$5 ← (byte) play_collision::xp#2 & (byte) $80 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] ( main:13::play_movement:53::play_move_rotate:179::play_collision:194 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] main:13::play_movement:53::play_move_leftright:174::play_collision:232 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] main:13::play_movement:53::play_move_leftright:174::play_collision:243 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] main:13::play_movement:53::play_move_down:167::play_collision:267 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] main:13::play_spawn_current:26::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] main:13::play_spawn_current:28::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280::play_collision:296 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 play_collision::$5 ] ) always clobbers reg byte a 
Statement [215] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::xp#2)==(byte) 0) goto play_collision::@3 [ play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] ( main:13::play_movement:53::play_move_rotate:179::play_collision:194 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::render#2 current_piece#15 current_ypos#19 current_orientation#20 current_piece_gfx#20 current_xpos#26 play_move_rotate::orientation#3 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_leftright:174::play_collision:232 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_leftright:174::play_collision:243 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_down:167::play_collision:267 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_spawn_current:26::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_spawn_current:28::play_collision:296 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280::play_collision:296 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_collision::xpos#6 play_collision::piece_gfx#0 play_collision::yp#2 play_collision::l#6 play_collision::playfield_line#0 play_collision::xp#2 play_collision::c#2 play_collision::i#1 ] ) always clobbers reg byte a 
Statement [231] (byte*~) current_piece#98 ← (byte*) current_piece#15 [ current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#98 play_collision::orientation#2 play_collision::ypos#2 play_collision::xpos#2 ] ( main:13::play_movement:53::play_move_leftright:174 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#98 play_collision::orientation#2 play_collision::ypos#2 play_collision::xpos#2 ] ) always clobbers reg byte a 
Statement [242] (byte*~) current_piece#97 ← (byte*) current_piece#15 [ current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#97 play_collision::orientation#1 play_collision::ypos#1 play_collision::xpos#1 ] ( main:13::play_movement:53::play_move_leftright:174 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 current_movedown_slow#21 current_piece_char#16 game_over#15 next_piece_idx#16 current_movedown_counter#14 lines_bcd#15 score_bcd#14 level#17 level_bcd#17 play_movement::key_event#0 play_movement::render#1 current_piece_gfx#20 current_piece#15 current_ypos#19 current_orientation#20 current_xpos#22 current_piece#97 play_collision::orientation#1 play_collision::ypos#1 play_collision::xpos#1 ] ) always clobbers reg byte a 
Statement [256] if((byte) current_movedown_counter#12<(const byte) current_movedown_fast#0) goto play_move_down::@2 [ current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 ] ( main:13::play_movement:53::play_move_down:167 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 ] ) always clobbers reg byte a 
Statement [259] if((byte) current_movedown_counter#12<(byte) current_movedown_slow#14) goto play_move_down::@3 [ current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#7 ] ( main:13::play_movement:53::play_move_down:167 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#7 ] ) always clobbers reg byte a 
Statement [266] (byte*~) current_piece#96 ← (byte*) current_piece#10 [ current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_piece#96 play_collision::orientation#0 play_collision::ypos#0 play_collision::xpos#0 ] ( main:13::play_movement:53::play_move_down:167 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_piece#96 play_collision::orientation#0 play_collision::ypos#0 play_collision::xpos#0 ] ) always clobbers reg byte a 
Statement [281] (byte*~) current_piece#93 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) [ current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 ] ( main:13::play_movement:53::play_move_down:167 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 ] ) always clobbers reg byte a 
Statement [282] (byte*~) current_piece_gfx#117 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) [ current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 current_piece_gfx#117 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 ] ( main:13::play_movement:53::play_move_down:167 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_ypos#6 current_xpos#100 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 current_piece#93 current_piece_gfx#117 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 ] ) always clobbers reg byte a 
Statement [289] (byte~) play_spawn_current::$7 ← (byte) play_spawn_current::current_piece_idx#0 << (byte) 1 [ play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] ( main:13::play_spawn_current:26 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] main:13::play_spawn_current:28 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 play_spawn_current::$7 game_over#65 play_spawn_current::current_piece_idx#0 ] ) always clobbers reg byte a 
Statement [290] (byte) current_piece_char#5 ← *((const byte[]) PIECES_CHARS#0 + (byte) play_spawn_current::current_piece_idx#0) [ play_spawn_current::$7 current_piece_char#5 game_over#65 play_spawn_current::current_piece_idx#0 ] ( main:13::play_spawn_current:26 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 play_spawn_current::$7 current_piece_char#5 game_over#65 play_spawn_current::current_piece_idx#0 ] main:13::play_spawn_current:28 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 play_spawn_current::$7 current_piece_char#5 game_over#65 play_spawn_current::current_piece_idx#0 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 play_spawn_current::$7 current_piece_char#5 game_over#65 play_spawn_current::current_piece_idx#0 ] ) always clobbers reg byte a 
Statement [291] (byte) current_xpos#100 ← *((const byte[]) PIECES_START_X#0 + (byte) play_spawn_current::current_piece_idx#0) [ current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_spawn_current::current_piece_idx#0 ] ( main:13::play_spawn_current:26 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_spawn_current::current_piece_idx#0 ] main:13::play_spawn_current:28 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_spawn_current::current_piece_idx#0 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 play_spawn_current::current_piece_idx#0 ] ) always clobbers reg byte a 
Statement [292] (byte) current_ypos#6 ← *((const byte[]) PIECES_START_Y#0 + (byte) play_spawn_current::current_piece_idx#0) [ current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 ] ( main:13::play_spawn_current:26 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 ] main:13::play_spawn_current:28 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#65 ] ) always clobbers reg byte a 
Statement [295] (byte*~) current_piece#100 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) [ current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] ( main:13::play_spawn_current:26 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] main:13::play_spawn_current:28 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 current_piece#100 play_collision::ypos#4 play_collision::xpos#4 game_over#65 ] ) always clobbers reg byte a 
Statement [303] if((byte) play_spawn_current::piece_idx#2==(byte) 7) goto play_spawn_current::sid_rnd1 [ current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 ] ( main:13::play_spawn_current:26 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 ] main:13::play_spawn_current:28 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 play_spawn_current::piece_idx#2 game_over#52 ] ) always clobbers reg byte a 
Statement [306] (byte) play_spawn_current::piece_idx#1 ← (byte) play_spawn_current::sid_rnd1_return#0 & (byte) 7 [ current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#52 play_spawn_current::piece_idx#1 ] ( main:13::play_spawn_current:26 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#52 play_spawn_current::piece_idx#1 ] main:13::play_spawn_current:28 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#52 play_spawn_current::piece_idx#1 ] main:13::play_movement:53::play_move_down:167::play_spawn_current:280 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 lines_bcd#17 score_bcd#16 level#19 current_movedown_slow#23 level_bcd#19 current_ypos#6 current_xpos#100 play_spawn_current::$7 current_piece_char#5 game_over#52 play_spawn_current::piece_idx#1 ] ) always clobbers reg byte a 
Statement [308] (byte~) play_update_score::$2 ← < (word) lines_bcd#19 [ current_movedown_slow#14 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::$2 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 current_movedown_slow#14 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::$2 ] ) always clobbers reg byte a 
Statement [310] (byte~) play_update_score::$9 ← (byte) play_update_score::removed#0 << (byte) 2 [ current_movedown_slow#14 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::$9 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 current_movedown_slow#14 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::$9 ] ) always clobbers reg byte a 
Statement [311] (dword) play_update_score::add_bcd#0 ← *((const dword[5]) score_add_bcd#0 + (byte~) play_update_score::$9) [ current_movedown_slow#14 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::add_bcd#0 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 current_movedown_slow#14 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_update_score::removed#0 play_update_score::lines_before#0 play_update_score::add_bcd#0 ] ) always clobbers reg byte a 
Statement [313] (word) lines_bcd#29 ← (word) lines_bcd#19 + (byte) play_update_score::removed#0 [ current_movedown_slow#14 score_bcd#18 level#10 level_bcd#11 play_update_score::lines_before#0 play_update_score::add_bcd#0 lines_bcd#29 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 current_movedown_slow#14 score_bcd#18 level#10 level_bcd#11 play_update_score::lines_before#0 play_update_score::add_bcd#0 lines_bcd#29 ] ) always clobbers reg byte a 
Statement [314] (dword) score_bcd#29 ← (dword) score_bcd#18 + (dword) play_update_score::add_bcd#0 [ current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 lines_bcd#29 score_bcd#29 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 lines_bcd#29 score_bcd#29 ] ) always clobbers reg byte a 
Statement [316] (byte~) play_update_score::$4 ← < (word) lines_bcd#29 [ current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 lines_bcd#29 score_bcd#29 play_update_score::$4 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 current_movedown_slow#14 level#10 level_bcd#11 play_update_score::lines_before#0 lines_bcd#29 score_bcd#29 play_update_score::$4 ] ) always clobbers reg byte a 
Statement [324] if((byte) level#21>=(byte) $1d+(byte) 1) goto play_increase_level::@1 [ level_bcd#11 level#21 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278::play_increase_level:320 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 lines_bcd#29 score_bcd#29 level_bcd#11 level#21 ] ) always clobbers reg byte a 
Statement [325] (byte) current_movedown_slow#10 ← *((const byte[]) MOVEDOWN_SLOW_SPEEDS#0 + (byte) level#21) [ level_bcd#11 level#21 current_movedown_slow#10 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278::play_increase_level:320 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 lines_bcd#29 score_bcd#29 level_bcd#11 level#21 current_movedown_slow#10 ] ) always clobbers reg byte a reg byte y 
Statement [328] (byte~) play_increase_level::$1 ← (byte) level_bcd#21 & (byte) $f [ level#21 current_movedown_slow#66 level_bcd#21 play_increase_level::$1 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278::play_increase_level:320 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 lines_bcd#29 score_bcd#29 level#21 current_movedown_slow#66 level_bcd#21 play_increase_level::$1 ] ) always clobbers reg byte a 
Statement [330] (byte) level_bcd#8 ← (byte) level_bcd#21 + (byte) 6 [ level#21 current_movedown_slow#66 level_bcd#8 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278::play_increase_level:320 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 lines_bcd#29 score_bcd#29 level#21 current_movedown_slow#66 level_bcd#8 ] ) always clobbers reg byte a reg byte x 
Statement [334] (byte~) play_increase_level::$5 ← (byte) play_increase_level::b#2 << (byte) 2 [ level#21 current_movedown_slow#66 level_bcd#62 play_increase_level::b#2 play_increase_level::$5 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278::play_increase_level:320 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 lines_bcd#29 score_bcd#29 level#21 current_movedown_slow#66 level_bcd#62 play_increase_level::b#2 play_increase_level::$5 ] ) always clobbers reg byte a 
Statement [335] *((const dword[5]) score_add_bcd#0 + (byte~) play_increase_level::$5) ← *((const dword[5]) score_add_bcd#0 + (byte~) play_increase_level::$5) + *((const dword[]) SCORE_BASE_BCD#0 + (byte~) play_increase_level::$5) [ level#21 current_movedown_slow#66 level_bcd#62 play_increase_level::b#2 ] ( main:13::play_movement:53::play_move_down:167::play_update_score:278::play_increase_level:320 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 game_over#10 next_piece_idx#10 lines_bcd#29 score_bcd#29 level#21 current_movedown_slow#66 level_bcd#62 play_increase_level::b#2 ] ) always clobbers reg byte a 
Statement [353] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0 [ play_remove_lines::y#8 play_remove_lines::removed#11 play_remove_lines::r#1 play_remove_lines::w#2 ] ( main:13::play_movement:53::play_move_down:167::play_remove_lines:274 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_remove_lines::y#8 play_remove_lines::removed#11 play_remove_lines::r#1 play_remove_lines::w#2 ] ) always clobbers reg byte a 
Statement [361] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#6) ← (byte) 0 [ play_remove_lines::removed#8 play_remove_lines::w#6 ] ( main:13::play_movement:53::play_move_down:167::play_remove_lines:274 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 play_remove_lines::removed#8 play_remove_lines::w#6 ] ) always clobbers reg byte a 
Statement [365] (byte~) play_lock_current::$4 ← (byte) play_lock_current::yp#2 << (byte) 1 [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::$4 ] ( main:13::play_movement:53::play_move_down:167::play_lock_current:272 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::$4 ] ) always clobbers reg byte a 
Statement [366] (byte*) play_lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_lock_current::$4) [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::playfield_line#0 ] ( main:13::play_movement:53::play_move_down:167::play_lock_current:272 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::i#3 play_lock_current::l#6 play_lock_current::playfield_line#0 ] ) always clobbers reg byte a 
Statement [370] if(*((byte*) current_piece_gfx#13 + (byte) play_lock_current::i#2)==(byte) 0) goto play_lock_current::@3 [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] ( main:13::play_movement:53::play_move_down:167::play_lock_current:272 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] ) always clobbers reg byte a 
Statement [371] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::xp#2) ← (byte) current_piece_char#10 [ current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] ( main:13::play_movement:53::play_move_down:167::play_lock_current:272 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_piece_char#10 current_piece_gfx#13 current_xpos#14 play_lock_current::yp#2 play_lock_current::l#6 play_lock_current::playfield_line#0 play_lock_current::xp#2 play_lock_current::c#2 play_lock_current::i#1 ] ) always clobbers reg byte a 
Statement [382] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte) 3 [ keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] ( main:13::play_movement:53::play_move_down:167::keyboard_event_pressed:252 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:404 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:410 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:416 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:422 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::keycode#5 keyboard_event_pressed::$0 ] ) always clobbers reg byte a 
Statement [384] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte) 7 [ keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ( main:13::play_movement:53::play_move_down:167::keyboard_event_pressed:252 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:404 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:410 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:416 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:422 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ) always clobbers reg byte a 
Statement [385] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) [ keyboard_event_pressed::return#11 ] ( main:13::play_movement:53::play_move_down:167::keyboard_event_pressed:252 [ render_screen_show#16 render_screen_render#18 render_screen_showing#1 keyboard_events_size#16 play_movement::key_event#0 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 current_movedown_counter#12 play_move_down::movedown#10 keyboard_event_pressed::return#11 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:404 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::return#11 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:410 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::return#11 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:416 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::return#11 ] main:13::keyboard_event_scan:45::keyboard_event_pressed:422 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_pressed::return#11 ] ) always clobbers reg byte a 
Statement [387] if((byte) keyboard_events_size#13==(byte) 0) goto keyboard_event_get::@return [ keyboard_events_size#13 ] ( main:13::keyboard_event_get:47 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 ] ) always clobbers reg byte a 
Statement [389] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4) [ keyboard_events_size#4 keyboard_event_get::return#1 ] ( main:13::keyboard_event_get:47 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#4 keyboard_event_get::return#1 ] ) always clobbers reg byte y 
Statement [398] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 keyboard_event_scan::row_scan#0 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 keyboard_event_scan::row_scan#0 ] ) always clobbers reg byte a reg byte y 
Statement [399] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 [ keyboard_event_scan::row#2 keyboard_events_size#30 keyboard_event_scan::keycode#1 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_events_size#30 keyboard_event_scan::keycode#1 ] ) always clobbers reg byte a reg byte x 
Statement [402] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7 [ keyboard_events_size#13 keyboard_event_scan::row#1 keyboard_event_scan::keycode#13 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_events_size#13 keyboard_event_scan::row#1 keyboard_event_scan::keycode#13 ] ) always clobbers reg byte a 
Statement [429] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$15 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$15 ] ) always clobbers reg byte a 
Statement [430] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$16 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$16 ] ) always clobbers reg byte a 
Statement [432] if((byte) keyboard_events_size#10==(byte) 8) goto keyboard_event_scan::@10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ) always clobbers reg byte a 
Statement [433] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::event_type#0 ] ) always clobbers reg byte a 
Statement [435] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ) always clobbers reg byte a reg byte y 
Statement [441] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#29 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#29 ] ) always clobbers reg byte a reg byte y 
Statement [442] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$23 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 keyboard_event_scan::$23 ] ) always clobbers reg byte a 
Statement [443] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte~) keyboard_event_scan::$23 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ( main:13::keyboard_event_scan:45 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#10 ] ) always clobbers reg byte y 
Statement [445] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:13::keyboard_event_scan:45::keyboard_matrix_read:395 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 ] ) always clobbers reg byte a 
Statement [446] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) [ keyboard_matrix_read::return#0 ] ( main:13::keyboard_event_scan:45::keyboard_matrix_read:395 [ render_screen_show#16 render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level#10 level_bcd#11 render_screen_showing#1 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#30 keyboard_matrix_read::return#0 ] ) always clobbers reg byte a 
Statement [448] if((byte) render_screen_show#16==(byte) 0) goto render_show::toD0181 [ render_screen_show#16 level#10 ] ( main:13::render_show:43 [ render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level_bcd#11 render_screen_show#16 level#10 ] ) always clobbers reg byte a 
Statement [452] *((const byte*) BGCOL2#0) ← *((const byte[]) PIECES_COLORS_1#0 + (byte) level#10) [ render_screen_show#16 level#10 ] ( main:13::render_show:43 [ render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level_bcd#11 render_screen_show#16 level#10 ] ) always clobbers reg byte a reg byte y 
Statement [453] *((const byte*) BGCOL3#0) ← *((const byte[]) PIECES_COLORS_2#0 + (byte) level#10) [ render_screen_show#16 level#10 ] ( main:13::render_show:43 [ render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level_bcd#11 render_screen_show#16 level#10 ] ) always clobbers reg byte a reg byte y 
Statement [454] (byte) render_screen_showing#1 ← (byte) render_screen_show#16 [ render_screen_show#16 level#10 render_screen_showing#1 ] ( main:13::render_show:43 [ render_screen_render#18 current_movedown_slow#14 current_piece#10 current_piece_char#10 current_orientation#13 current_piece_gfx#13 current_xpos#14 current_ypos#11 game_over#10 next_piece_idx#10 keyboard_events_size#19 current_movedown_counter#16 lines_bcd#19 score_bcd#18 level_bcd#11 render_screen_show#16 level#10 render_screen_showing#1 ] ) always clobbers reg byte a 
Statement [459] (byte~) play_init::$4 ← (byte) play_init::j#2 << (byte) 1 [ play_init::j#2 play_init::pli#2 play_init::idx#2 play_init::$4 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 play_init::j#2 play_init::pli#2 play_init::idx#2 play_init::$4 ] ) always clobbers reg byte a 
Statement [460] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_init::$4) ← (byte*) play_init::pli#2 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 play_init::j#2 play_init::pli#2 play_init::idx#2 ] ) always clobbers reg byte a 
Statement [461] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) play_init::j#2) ← (byte) play_init::idx#2 [ play_init::j#2 play_init::pli#2 play_init::idx#2 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 play_init::j#2 play_init::pli#2 play_init::idx#2 ] ) always clobbers reg byte a 
Statement [462] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const byte) PLAYFIELD_COLS#0 [ play_init::j#2 play_init::idx#2 play_init::pli#1 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 play_init::j#2 play_init::idx#2 play_init::pli#1 ] ) always clobbers reg byte a 
Statement [463] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const byte) PLAYFIELD_COLS#0 [ play_init::j#2 play_init::pli#1 play_init::idx#1 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 play_init::j#2 play_init::pli#1 play_init::idx#1 ] ) always clobbers reg byte a 
Statement [466] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0 [ ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [467] (byte) current_movedown_slow#1 ← *((const byte[]) MOVEDOWN_SLOW_SPEEDS#0) [ current_movedown_slow#1 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 ] ) always clobbers reg byte a 
Statement [469] (byte~) play_init::$5 ← (byte) play_init::b#2 << (byte) 2 [ current_movedown_slow#1 play_init::b#2 play_init::$5 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 play_init::b#2 play_init::$5 ] ) always clobbers reg byte a 
Statement [470] *((const dword[5]) score_add_bcd#0 + (byte~) play_init::$5) ← *((const dword[]) SCORE_BASE_BCD#0 + (byte~) play_init::$5) [ current_movedown_slow#1 play_init::b#2 ] ( main:13::play_init:24 [ render_screen_showing#0 score_bcd#0 current_movedown_slow#1 play_init::b#2 ] ) always clobbers reg byte a 
Statement [475] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement asm { ldaCIA1_INTERRUPT  } always clobbers reg byte a 
Statement [477] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [478] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [479] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [480] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [481] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0 [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [482] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [483] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq() [ ] ( main:13::sprites_irq_init:22 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [486] *((const byte*) SPRITES_ENABLE#0) ← (byte) $f [ ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [487] *((const byte*) SPRITES_MC#0) ← (byte) 0 [ ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [488] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0) [ ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [489] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0) [ ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [491] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte) 1 [ sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] ) always clobbers reg byte a 
Statement [492] *((const byte*) SPRITES_XPOS#0 + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2 [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 sprites_init::s#2 sprites_init::xpos#2 ] ) always clobbers reg byte a 
Statement [493] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::s#2) ← (const byte) BLACK#0 [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 sprites_init::s#2 sprites_init::xpos#2 ] ) always clobbers reg byte a 
Statement [494] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte) $18 [ sprites_init::s#2 sprites_init::xpos#1 ] ( main:13::sprites_init:20 [ render_screen_showing#0 score_bcd#0 sprites_init::s#2 sprites_init::xpos#1 ] ) always clobbers reg byte a 
Statement [499] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte) 3 [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [501] *((const byte*) CIA2_PORT_A#0) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [502] *((const byte*) D011#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte) 3 [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [503] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [504] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0 [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [505] *((const byte*) BGCOL2#0) ← *((const byte[]) PIECES_COLORS_1#0) [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [506] *((const byte*) BGCOL3#0) ← *((const byte[]) PIECES_COLORS_2#0) [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [507] *((const byte*) BGCOL4#0) ← (const byte) GREY#0 [ ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [512] (byte~) render_init::$13 ← (byte) render_init::i#2 << (byte) 1 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$13 ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$13 ] ) always clobbers reg byte a 
Statement [513] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_init::$13) ← (byte*) render_init::li_1#2 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$13 ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 render_init::i#2 render_init::li_1#2 render_init::li_2#2 render_init::$13 ] ) always clobbers reg byte a 
Statement [514] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 + (byte~) render_init::$13) ← (byte*) render_init::li_2#2 [ render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 render_init::i#2 render_init::li_1#2 render_init::li_2#2 ] ) always clobbers reg byte a 
Statement [515] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte) $28 [ render_init::i#2 render_init::li_2#2 render_init::li_1#1 ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 render_init::i#2 render_init::li_2#2 render_init::li_1#1 ] ) always clobbers reg byte a 
Statement [516] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte) $28 [ render_init::i#2 render_init::li_1#1 render_init::li_2#1 ] ( main:13::render_init:18 [ render_screen_showing#0 score_bcd#0 render_init::i#2 render_init::li_1#1 render_init::li_2#1 ] ) always clobbers reg byte a 
Statement [523] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE#0 [ render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::screen#5 render_screen_original::cols#4 render_screen_original::x#4 ] ( main:13::render_init:18::render_screen_original:508 [ render_screen_showing#0 score_bcd#0 render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::screen#5 render_screen_original::cols#4 render_screen_original::x#4 ] main:13::render_init:18::render_screen_original:510 [ render_screen_showing#0 score_bcd#0 render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::screen#5 render_screen_original::cols#4 render_screen_original::x#4 ] ) always clobbers reg byte a reg byte y 
Statement [525] *((byte*) render_screen_original::cols#4) ← (const byte) BLACK#0 [ render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::cols#4 render_screen_original::x#4 render_screen_original::screen#2 ] ( main:13::render_init:18::render_screen_original:508 [ render_screen_showing#0 score_bcd#0 render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::cols#4 render_screen_original::x#4 render_screen_original::screen#2 ] main:13::render_init:18::render_screen_original:510 [ render_screen_showing#0 score_bcd#0 render_screen_original::oscr#4 render_screen_original::ocols#4 render_screen_original::y#6 render_screen_original::cols#4 render_screen_original::x#4 render_screen_original::screen#2 ] ) always clobbers reg byte a reg byte y 
Statement [530] *((byte*) render_screen_original::screen#6) ← *((byte*) render_screen_original::oscr#2) [ render_screen_original::y#6 render_screen_original::oscr#2 render_screen_original::screen#6 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 ] ( main:13::render_init:18::render_screen_original:508 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::oscr#2 render_screen_original::screen#6 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 ] main:13::render_init:18::render_screen_original:510 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::oscr#2 render_screen_original::screen#6 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 ] ) always clobbers reg byte a reg byte y 
Statement [533] *((byte*) render_screen_original::cols#5) ← *((byte*) render_screen_original::ocols#2) [ render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 render_screen_original::screen#3 ] ( main:13::render_init:18::render_screen_original:508 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 render_screen_original::screen#3 ] main:13::render_init:18::render_screen_original:510 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#2 render_screen_original::cols#5 render_screen_original::x#5 render_screen_original::screen#3 ] ) always clobbers reg byte a reg byte y 
Statement [539] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE#0 [ render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::screen#7 render_screen_original::cols#6 render_screen_original::x#6 ] ( main:13::render_init:18::render_screen_original:508 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::screen#7 render_screen_original::cols#6 render_screen_original::x#6 ] main:13::render_init:18::render_screen_original:510 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::screen#7 render_screen_original::cols#6 render_screen_original::x#6 ] ) always clobbers reg byte a reg byte y 
Statement [541] *((byte*) render_screen_original::cols#6) ← (const byte) BLACK#0 [ render_screen_original::y#6 render_screen_original::screen#10 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::cols#6 render_screen_original::x#6 ] ( main:13::render_init:18::render_screen_original:508 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::screen#10 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::cols#6 render_screen_original::x#6 ] main:13::render_init:18::render_screen_original:510 [ render_screen_showing#0 score_bcd#0 render_screen_original::y#6 render_screen_original::screen#10 render_screen_original::oscr#1 render_screen_original::ocols#1 render_screen_original::cols#6 render_screen_original::x#6 ] ) always clobbers reg byte a reg byte y 
Statement [548] *((const word*) SID_VOICE3_FREQ#0) ← (word) $ffff [ ] ( main:13::sid_rnd_init:16 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [549] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 [ ] ( main:13::sid_rnd_init:16 [ render_screen_showing#0 score_bcd#0 ] ) always clobbers reg byte a 
Statement [559] if(*((const byte*) RASTER#0)<(byte) sprites_irq::raster_sprite_gfx_modify#0) goto sprites_irq::@8 [ render_screen_showing#0 irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 sprites_irq::raster_sprite_gfx_modify#0 ] (  [ render_screen_showing#0 irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 sprites_irq::raster_sprite_gfx_modify#0 ] ) always clobbers reg byte a 
Statement [561] if((byte) render_screen_showing#0==(byte) 0) goto sprites_irq::@1 [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 sprites_irq::ptr#0 ] (  [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#0 sprites_irq::ptr#0 ] ) always clobbers reg byte a 
Statement [569] if((byte) irq_cnt#1==(byte) 9) goto sprites_irq::@3 [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 ] (  [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 ] ) always clobbers reg byte a 
Statement [570] if((byte) irq_cnt#1==(byte) $a) goto sprites_irq::@4 [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 ] (  [ irq_raster_next#0 irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 ] ) always clobbers reg byte a 
Statement [571] (byte) irq_raster_next#3 ← (byte) irq_raster_next#0 + (byte) $14 [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 irq_raster_next#3 ] (  [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#1 irq_raster_next#3 ] ) always clobbers reg byte a reg byte x 
Statement [572] (byte) irq_sprite_ypos#3 ← (byte) irq_sprite_ypos#0 + (byte) $15 [ irq_sprite_ptr#0 irq_cnt#1 irq_raster_next#3 irq_sprite_ypos#3 ] (  [ irq_sprite_ptr#0 irq_cnt#1 irq_raster_next#3 irq_sprite_ypos#3 ] ) always clobbers reg byte a reg byte x 
Statement [573] (byte) irq_sprite_ptr#3 ← (byte) irq_sprite_ptr#0 + (byte) 3 [ irq_cnt#1 irq_raster_next#3 irq_sprite_ypos#3 irq_sprite_ptr#3 ] (  [ irq_cnt#1 irq_raster_next#3 irq_sprite_ypos#3 irq_sprite_ptr#3 ] ) always clobbers reg byte a reg byte x 
Statement [575] *((const byte*) RASTER#0) ← (byte) irq_raster_next#4 [ ] (  [ ] ) always clobbers reg byte a 
Statement [576] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [577] return  [ ] (  [ ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [578] (byte) irq_cnt#2 ← (byte) 0 [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#2 ] (  [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_cnt#2 ] ) always clobbers reg byte a 
Statement [579] (byte) irq_raster_next#2 ← (const byte) IRQ_RASTER_FIRST#0 [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_raster_next#2 irq_cnt#2 ] (  [ irq_sprite_ypos#0 irq_sprite_ptr#0 irq_raster_next#2 irq_cnt#2 ] ) always clobbers reg byte a 
Statement [580] (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#0 + (byte) $15 [ irq_sprite_ptr#0 irq_raster_next#2 irq_cnt#2 irq_sprite_ypos#2 ] (  [ irq_sprite_ptr#0 irq_raster_next#2 irq_cnt#2 irq_sprite_ypos#2 ] ) always clobbers reg byte a reg byte x 
Statement [581] (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#0 + (byte) 3 [ irq_raster_next#2 irq_cnt#2 irq_sprite_ypos#2 irq_sprite_ptr#2 ] (  [ irq_raster_next#2 irq_cnt#2 irq_sprite_ypos#2 irq_sprite_ptr#2 ] ) always clobbers reg byte a reg byte x 
Statement [582] (byte) irq_raster_next#1 ← (byte) irq_raster_next#0 + (byte) $15 [ irq_cnt#1 irq_raster_next#1 ] (  [ irq_cnt#1 irq_raster_next#1 ] ) always clobbers reg byte a reg byte x 
Statement [583] (byte) irq_sprite_ypos#1 ← (const byte) SPRITES_FIRST_YPOS#0 [ irq_cnt#1 irq_raster_next#1 irq_sprite_ypos#1 ] (  [ irq_cnt#1 irq_raster_next#1 irq_sprite_ypos#1 ] ) always clobbers reg byte a 
Statement [585] (byte) irq_sprite_ptr#1 ← (const byte) sprites_irq::toSpritePtr2_return#0 [ irq_cnt#1 irq_raster_next#1 irq_sprite_ypos#1 irq_sprite_ptr#1 ] (  [ irq_cnt#1 irq_raster_next#1 irq_sprite_ypos#1 irq_sprite_ptr#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 ] : zp ZP_BYTE:2 , 
Potential registers zp ZP_BYTE:3 [ render_screen_render#18 render_screen_render#11 ] : zp ZP_BYTE:3 , 
Potential registers zp ZP_BYTE:4 [ render_screen_showing#13 render_screen_showing#1 render_screen_showing#0 ] : zp ZP_BYTE:4 , 
Potential registers zp ZP_BYTE:5 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ] : zp ZP_BYTE:5 , 
Potential registers zp ZP_WORD:6 [ render_score::screen#3 ] : zp ZP_WORD:6 , 
Potential registers zp ZP_WORD:8 [ render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ] : zp ZP_WORD:8 , 
Potential registers zp ZP_WORD:10 [ render_bcd::offset#6 ] : zp ZP_WORD:10 , 
Potential registers zp ZP_BYTE:12 [ render_bcd::only_low#6 ] : zp ZP_BYTE:12 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ] : zp ZP_BYTE:13 , reg byte x , 
Potential registers zp ZP_WORD:14 [ render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ] : zp ZP_WORD:14 , 
Potential registers zp ZP_BYTE:16 [ render_screen_render#15 render_screen_render#66 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ next_piece_idx#12 next_piece_idx#77 next_piece_idx#78 ] : zp ZP_BYTE:17 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:18 [ render_next::l#7 render_next::l#1 ] : zp ZP_BYTE:18 , reg byte x , 
Potential registers zp ZP_WORD:19 [ render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#1 render_next::next_piece_gfx#9 ] : zp ZP_WORD:19 , 
Potential registers zp ZP_WORD:21 [ render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#4 render_next::screen_next_area#11 render_next::screen_next_area#3 ] : zp ZP_WORD:21 , 
Potential registers zp ZP_BYTE:23 [ render_next::c#2 render_next::c#1 ] : zp ZP_BYTE:23 , reg byte x , 
Potential registers zp ZP_BYTE:24 [ current_ypos#13 current_ypos#98 current_ypos#99 ] : zp ZP_BYTE:24 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:25 [ render_screen_render#33 render_screen_render#65 ] : zp ZP_BYTE:25 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ current_xpos#59 current_xpos#119 current_xpos#120 ] : zp ZP_BYTE:26 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:27 [ current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 ] : zp ZP_WORD:27 , 
Potential registers zp ZP_BYTE:29 [ current_piece_char#68 current_piece_char#100 current_piece_char#101 ] : zp ZP_BYTE:29 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:30 [ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ] : zp ZP_BYTE:30 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ render_moving::l#4 render_moving::l#1 ] : zp ZP_BYTE:31 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ] : zp ZP_BYTE:32 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:33 [ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ] : zp ZP_BYTE:33 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:34 [ render_moving::c#2 render_moving::c#1 ] : zp ZP_BYTE:34 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:35 [ render_screen_render#22 render_screen_render#64 ] : zp ZP_BYTE:35 , reg byte x , 
Potential registers zp ZP_BYTE:36 [ render_playfield::l#2 render_playfield::l#1 ] : zp ZP_BYTE:36 , reg byte x , 
Potential registers zp ZP_BYTE:37 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] : zp ZP_BYTE:37 , reg byte x , 
Potential registers zp ZP_WORD:38 [ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ] : zp ZP_WORD:38 , 
Potential registers zp ZP_BYTE:40 [ render_playfield::c#2 render_playfield::c#1 ] : zp ZP_BYTE:40 , reg byte x , 
Potential registers zp ZP_BYTE:41 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 ] : zp ZP_BYTE:41 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:42 [ play_move_rotate::return#2 ] : zp ZP_BYTE:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:43 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] : zp ZP_BYTE:43 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:44 [ current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 ] : zp ZP_WORD:44 , 
Potential registers zp ZP_BYTE:46 [ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ] : zp ZP_BYTE:46 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:47 [ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ] : zp ZP_BYTE:47 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:48 [ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ] : zp ZP_BYTE:48 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:49 [ play_collision::l#6 play_collision::l#1 ] : zp ZP_BYTE:49 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:50 [ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ] : zp ZP_BYTE:50 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:51 [ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ] : zp ZP_BYTE:51 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:52 [ play_collision::c#2 play_collision::c#1 ] : zp ZP_BYTE:52 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:53 [ play_collision::return#15 ] : zp ZP_BYTE:53 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:54 [ play_move_leftright::return#2 ] : zp ZP_BYTE:54 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:55 [ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 ] : zp ZP_BYTE:55 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:56 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#19 current_ypos#6 ] : zp ZP_BYTE:56 , 
Potential registers zp ZP_WORD:57 [ lines_bcd#26 lines_bcd#19 lines_bcd#15 lines_bcd#17 lines_bcd#29 ] : zp ZP_WORD:57 , 
Potential registers zp ZP_DWORD:59 [ score_bcd#26 score_bcd#18 score_bcd#14 score_bcd#0 score_bcd#16 score_bcd#29 ] : zp ZP_DWORD:59 , 
Potential registers zp ZP_BYTE:63 [ level#33 level#10 level#17 level#19 level#21 ] : zp ZP_BYTE:63 , 
Potential registers zp ZP_BYTE:64 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#21 current_movedown_slow#1 current_movedown_slow#23 current_movedown_slow#66 current_movedown_slow#10 ] : zp ZP_BYTE:64 , 
Potential registers zp ZP_BYTE:65 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ] : zp ZP_BYTE:65 , 
Potential registers zp ZP_WORD:66 [ current_piece#28 current_piece#10 current_piece#15 current_piece#102 current_piece#93 ] : zp ZP_WORD:66 , 
Potential registers zp ZP_BYTE:68 [ current_piece_char#29 current_piece_char#10 current_piece_char#16 current_piece_char#5 ] : zp ZP_BYTE:68 , 
Potential registers zp ZP_BYTE:69 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ] : zp ZP_BYTE:69 , 
Potential registers zp ZP_WORD:70 [ current_piece_gfx#35 current_piece_gfx#13 current_piece_gfx#18 current_piece_gfx#124 current_piece_gfx#20 current_piece_gfx#21 current_piece_gfx#7 current_piece_gfx#117 ] : zp ZP_WORD:70 , 
Potential registers zp ZP_BYTE:72 [ current_xpos#43 current_xpos#14 current_xpos#19 current_xpos#100 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ] : zp ZP_BYTE:72 , 
Potential registers zp ZP_BYTE:73 [ play_move_down::return#3 ] : zp ZP_BYTE:73 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:74 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 next_piece_idx#16 play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ] : zp ZP_BYTE:74 , 
Potential registers zp ZP_BYTE:75 [ game_over#65 game_over#27 game_over#10 game_over#15 game_over#52 ] : zp ZP_BYTE:75 , 
Potential registers zp ZP_BYTE:76 [ play_increase_level::b#2 play_increase_level::b#1 ] : zp ZP_BYTE:76 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:77 [ play_remove_lines::y#8 play_remove_lines::y#1 ] : zp ZP_BYTE:77 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:78 [ play_remove_lines::removed#11 play_remove_lines::removed#8 play_remove_lines::removed#1 ] : zp ZP_BYTE:78 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:79 [ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ] : zp ZP_BYTE:79 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:80 [ play_remove_lines::x#2 play_remove_lines::x#1 ] : zp ZP_BYTE:80 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:81 [ play_remove_lines::full#4 play_remove_lines::full#2 ] : zp ZP_BYTE:81 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:82 [ play_remove_lines::w#6 play_remove_lines::w#3 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 ] : zp ZP_BYTE:82 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:83 [ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ] : zp ZP_BYTE:83 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:84 [ play_lock_current::l#6 play_lock_current::l#1 ] : zp ZP_BYTE:84 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:85 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ] : zp ZP_BYTE:85 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:86 [ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ] : zp ZP_BYTE:86 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:87 [ play_lock_current::c#2 play_lock_current::c#1 ] : zp ZP_BYTE:87 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:88 [ keyboard_event_pressed::keycode#5 ] : zp ZP_BYTE:88 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:89 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] : zp ZP_BYTE:89 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:90 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] : zp ZP_BYTE:90 , 
Potential registers zp ZP_BYTE:91 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] : zp ZP_BYTE:91 , reg byte x , 
Potential registers zp ZP_BYTE:92 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] : zp ZP_BYTE:92 , reg byte x , 
Potential registers zp ZP_BYTE:93 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ] : zp ZP_BYTE:93 , 
Potential registers zp ZP_BYTE:94 [ render_show::d018val#3 ] : zp ZP_BYTE:94 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:95 [ play_init::j#2 play_init::j#1 ] : zp ZP_BYTE:95 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:96 [ play_init::pli#2 play_init::pli#1 ] : zp ZP_WORD:96 , 
Potential registers zp ZP_BYTE:98 [ play_init::idx#2 play_init::idx#1 ] : zp ZP_BYTE:98 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:99 [ play_init::b#2 play_init::b#1 ] : zp ZP_BYTE:99 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:100 [ sprites_init::s#2 sprites_init::s#1 ] : zp ZP_BYTE:100 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:101 [ sprites_init::xpos#2 sprites_init::xpos#1 ] : zp ZP_BYTE:101 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:102 [ render_init::i#2 render_init::i#1 ] : zp ZP_BYTE:102 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:103 [ render_init::li_1#2 render_init::li_1#1 ] : zp ZP_WORD:103 , 
Potential registers zp ZP_WORD:105 [ render_init::li_2#2 render_init::li_2#1 ] : zp ZP_WORD:105 , 
Potential registers zp ZP_BYTE:107 [ render_screen_original::y#6 render_screen_original::y#1 ] : zp ZP_BYTE:107 , reg byte x , 
Potential registers zp ZP_WORD:108 [ render_screen_original::oscr#2 render_screen_original::oscr#4 render_screen_original::oscr#1 ] : zp ZP_WORD:108 , 
Potential registers zp ZP_WORD:110 [ render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 ] : zp ZP_WORD:110 , 
Potential registers zp ZP_WORD:112 [ render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 ] : zp ZP_WORD:112 , 
Potential registers zp ZP_WORD:114 [ render_screen_original::cols#6 render_screen_original::cols#5 render_screen_original::cols#4 render_screen_original::cols#7 render_screen_original::cols#3 render_screen_original::cols#1 render_screen_original::cols#2 ] : zp ZP_WORD:114 , 
Potential registers zp ZP_BYTE:116 [ render_screen_original::x#6 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ] : zp ZP_BYTE:116 , reg byte x , 
Potential registers zp ZP_BYTE:117 [ sprites_irq::raster_sprite_gfx_modify#0 ] : zp ZP_BYTE:117 , 
Potential registers zp ZP_BYTE:118 [ irq_raster_next#0 irq_raster_next#4 irq_raster_next#1 irq_raster_next#2 irq_raster_next#3 ] : zp ZP_BYTE:118 , 
Potential registers zp ZP_BYTE:119 [ irq_sprite_ypos#0 irq_sprite_ypos#11 irq_sprite_ypos#1 irq_sprite_ypos#2 irq_sprite_ypos#3 ] : zp ZP_BYTE:119 , 
Potential registers zp ZP_BYTE:120 [ irq_sprite_ptr#0 irq_sprite_ptr#11 irq_sprite_ptr#1 irq_sprite_ptr#2 irq_sprite_ptr#3 ] : zp ZP_BYTE:120 , 
Potential registers zp ZP_BYTE:121 [ irq_cnt#0 irq_cnt#3 irq_cnt#1 irq_cnt#2 ] : zp ZP_BYTE:121 , 
Potential registers zp ZP_BYTE:122 [ keyboard_event_get::return#3 ] : zp ZP_BYTE:122 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:123 [ main::key_event#0 ] : zp ZP_BYTE:123 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:124 [ play_movement::key_event#0 ] : zp ZP_BYTE:124 , 
Potential registers zp ZP_BYTE:125 [ play_movement::return#3 ] : zp ZP_BYTE:125 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:126 [ main::render#1 ] : zp ZP_BYTE:126 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:127 [ render_bcd::$5 ] : zp ZP_BYTE:127 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:128 [ render_bcd::$6 ] : zp ZP_BYTE:128 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:129 [ render_bcd::$3 ] : zp ZP_BYTE:129 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:130 [ render_bcd::$4 ] : zp ZP_BYTE:130 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:131 [ render_next::$6 ] : zp ZP_BYTE:131 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:132 [ render_next::next_piece_char#0 ] : zp ZP_BYTE:132 , reg byte x , 
Potential registers zp ZP_BYTE:133 [ render_next::cell#0 ] : zp ZP_BYTE:133 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:134 [ render_moving::$1 ] : zp ZP_BYTE:134 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:135 [ render_moving::$6 ] : zp ZP_BYTE:135 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:136 [ render_moving::screen_line#0 ] : zp ZP_WORD:136 , 
Potential registers zp ZP_BYTE:138 [ render_moving::current_cell#0 ] : zp ZP_BYTE:138 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:139 [ render_playfield::$2 ] : zp ZP_BYTE:139 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:140 [ render_playfield::$6 ] : zp ZP_BYTE:140 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:141 [ play_move_down::key_event#0 ] : zp ZP_BYTE:141 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:142 [ play_move_down::return#0 ] : zp ZP_BYTE:142 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:143 [ play_move_leftright::key_event#0 ] : zp ZP_BYTE:143 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:144 [ play_move_leftright::return#0 ] : zp ZP_BYTE:144 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:145 [ play_movement::$3 ] : zp ZP_BYTE:145 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:146 [ play_movement::render#2 ] : zp ZP_BYTE:146 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:147 [ play_move_rotate::key_event#0 ] : zp ZP_BYTE:147 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:148 [ play_move_rotate::return#0 ] : zp ZP_BYTE:148 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:149 [ play_movement::$4 ] : zp ZP_BYTE:149 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:150 [ play_move_rotate::$5 ] : zp ZP_BYTE:150 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:151 [ play_collision::return#14 ] : zp ZP_BYTE:151 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:152 [ play_move_rotate::$2 ] : zp ZP_BYTE:152 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:153 [ play_move_rotate::$7 ] : zp ZP_BYTE:153 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:154 [ play_collision::piece_gfx#0 ] : zp ZP_WORD:154 , 
Potential registers zp ZP_BYTE:156 [ play_collision::$14 ] : zp ZP_BYTE:156 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:157 [ play_collision::playfield_line#0 ] : zp ZP_WORD:157 , 
Potential registers zp ZP_BYTE:159 [ play_collision::i#1 ] : zp ZP_BYTE:159 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:160 [ play_collision::$5 ] : zp ZP_BYTE:160 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:161 [ play_collision::return#13 ] : zp ZP_BYTE:161 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:162 [ play_move_leftright::$4 ] : zp ZP_BYTE:162 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:163 [ play_collision::return#1 ] : zp ZP_BYTE:163 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:164 [ play_move_leftright::$8 ] : zp ZP_BYTE:164 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:165 [ keyboard_event_pressed::return#12 ] : zp ZP_BYTE:165 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:166 [ play_move_down::$2 ] : zp ZP_BYTE:166 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:167 [ play_collision::return#0 ] : zp ZP_BYTE:167 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:168 [ play_move_down::$12 ] : zp ZP_BYTE:168 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:169 [ play_remove_lines::return#0 ] : zp ZP_BYTE:169 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:170 [ play_move_down::removed#0 ] : zp ZP_BYTE:170 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:171 [ play_update_score::removed#0 ] : zp ZP_BYTE:171 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:172 [ play_spawn_current::current_piece_idx#0 ] : zp ZP_BYTE:172 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:173 [ play_spawn_current::$7 ] : zp ZP_BYTE:173 , reg byte x , 
Potential registers zp ZP_BYTE:174 [ play_collision::return#10 ] : zp ZP_BYTE:174 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:175 [ play_spawn_current::$1 ] : zp ZP_BYTE:175 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:176 [ play_spawn_current::sid_rnd1_return#0 ] : zp ZP_BYTE:176 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:177 [ play_update_score::$2 ] : zp ZP_BYTE:177 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:178 [ play_update_score::lines_before#0 ] : zp ZP_BYTE:178 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:179 [ play_update_score::$9 ] : zp ZP_BYTE:179 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_DWORD:180 [ play_update_score::add_bcd#0 ] : zp ZP_DWORD:180 , 
Potential registers zp ZP_BYTE:184 [ play_update_score::$4 ] : zp ZP_BYTE:184 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:185 [ play_update_score::lines_after#0 ] : zp ZP_BYTE:185 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:186 [ play_increase_level::$1 ] : zp ZP_BYTE:186 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:187 [ play_increase_level::$5 ] : zp ZP_BYTE:187 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:188 [ play_remove_lines::c#0 ] : zp ZP_BYTE:188 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:189 [ play_lock_current::$4 ] : zp ZP_BYTE:189 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:190 [ play_lock_current::playfield_line#0 ] : zp ZP_WORD:190 , 
Potential registers zp ZP_BYTE:192 [ play_lock_current::i#1 ] : zp ZP_BYTE:192 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:193 [ keyboard_event_pressed::$0 ] : zp ZP_BYTE:193 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:194 [ keyboard_event_pressed::row_bits#0 ] : zp ZP_BYTE:194 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:195 [ keyboard_event_pressed::$1 ] : zp ZP_BYTE:195 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:196 [ keyboard_event_pressed::return#11 ] : zp ZP_BYTE:196 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:197 [ keyboard_matrix_read::rowid#0 ] : zp ZP_BYTE:197 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:198 [ keyboard_matrix_read::return#2 ] : zp ZP_BYTE:198 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:199 [ keyboard_event_scan::row_scan#0 ] : zp ZP_BYTE:199 , reg byte x , 
Potential registers zp ZP_BYTE:200 [ keyboard_event_pressed::return#0 ] : zp ZP_BYTE:200 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:201 [ keyboard_event_scan::$0 ] : zp ZP_BYTE:201 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:202 [ keyboard_event_pressed::return#1 ] : zp ZP_BYTE:202 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:203 [ keyboard_event_scan::$3 ] : zp ZP_BYTE:203 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:204 [ keyboard_event_pressed::return#2 ] : zp ZP_BYTE:204 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:205 [ keyboard_event_scan::$6 ] : zp ZP_BYTE:205 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:206 [ keyboard_event_pressed::return#10 ] : zp ZP_BYTE:206 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:207 [ keyboard_event_scan::$9 ] : zp ZP_BYTE:207 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:208 [ keyboard_event_scan::$15 ] : zp ZP_BYTE:208 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:209 [ keyboard_event_scan::$16 ] : zp ZP_BYTE:209 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:210 [ keyboard_event_scan::event_type#0 ] : zp ZP_BYTE:210 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:211 [ keyboard_event_scan::$23 ] : zp ZP_BYTE:211 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:212 [ keyboard_matrix_read::return#0 ] : zp ZP_BYTE:212 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:213 [ play_init::$4 ] : zp ZP_BYTE:213 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:214 [ play_init::$5 ] : zp ZP_BYTE:214 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:215 [ sprites_init::s2#0 ] : zp ZP_BYTE:215 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:216 [ render_init::$13 ] : zp ZP_BYTE:216 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:217 [ sprites_irq::ypos#0 ] : zp ZP_BYTE:217 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:218 [ sprites_irq::$0 ] : zp ZP_BYTE:218 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:219 [ sprites_irq::ptr#0 ] : zp ZP_BYTE:219 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:220 [ sprites_irq::ptr#3 ] : zp ZP_BYTE:220 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:221 [ sprites_irq::ptr#4 ] : zp ZP_BYTE:221 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:222 [ sprites_irq::ptr#1 ] : zp ZP_BYTE:222 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:223 [ sprites_irq::ptr#2 ] : zp ZP_BYTE:223 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [keyboard_event_scan] 20,002: zp ZP_BYTE:208 [ keyboard_event_scan::$15 ] 20,002: zp ZP_BYTE:209 [ keyboard_event_scan::$16 ] 20,002: zp ZP_BYTE:210 [ keyboard_event_scan::event_type#0 ] 20,002: zp ZP_BYTE:211 [ keyboard_event_scan::$23 ] 17,858.93: zp ZP_BYTE:91 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] 11,908.48: zp ZP_BYTE:92 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] 2,101.74: zp ZP_BYTE:90 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] 1,278.06: zp ZP_BYTE:199 [ keyboard_event_scan::row_scan#0 ] 4: zp ZP_BYTE:201 [ keyboard_event_scan::$0 ] 4: zp ZP_BYTE:203 [ keyboard_event_scan::$3 ] 4: zp ZP_BYTE:205 [ keyboard_event_scan::$6 ] 4: zp ZP_BYTE:207 [ keyboard_event_scan::$9 ] 
Uplift Scope [play_collision] 38,006.5: zp ZP_BYTE:50 [ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ] 20,002: zp ZP_BYTE:160 [ play_collision::$5 ] 13,378.25: zp ZP_BYTE:51 [ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ] 12,223.44: zp ZP_BYTE:52 [ play_collision::c#2 play_collision::c#1 ] 2,002: zp ZP_BYTE:156 [ play_collision::$14 ] 1,615.62: zp ZP_BYTE:159 [ play_collision::i#1 ] 1,326.38: zp ZP_BYTE:48 [ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ] 1,118.76: zp ZP_BYTE:49 [ play_collision::l#6 play_collision::l#1 ] 785.86: zp ZP_WORD:157 [ play_collision::playfield_line#0 ] 476.33: zp ZP_WORD:154 [ play_collision::piece_gfx#0 ] 51.62: zp ZP_BYTE:47 [ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ] 18: zp ZP_BYTE:46 [ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ] 4: zp ZP_BYTE:151 [ play_collision::return#14 ] 4: zp ZP_BYTE:161 [ play_collision::return#13 ] 4: zp ZP_BYTE:163 [ play_collision::return#1 ] 4: zp ZP_BYTE:167 [ play_collision::return#0 ] 4: zp ZP_BYTE:174 [ play_collision::return#10 ] 1.43: zp ZP_BYTE:53 [ play_collision::return#15 ] 
Uplift Scope [play_lock_current] 38,006.5: zp ZP_BYTE:85 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ] 14,753.5: zp ZP_BYTE:86 [ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ] 14,001.4: zp ZP_BYTE:87 [ play_lock_current::c#2 play_lock_current::c#1 ] 2,333.67: zp ZP_BYTE:192 [ play_lock_current::i#1 ] 2,002: zp ZP_BYTE:189 [ play_lock_current::$4 ] 1,155: zp ZP_BYTE:84 [ play_lock_current::l#6 play_lock_current::l#1 ] 1,100.2: zp ZP_WORD:190 [ play_lock_current::playfield_line#0 ] 754.92: zp ZP_BYTE:83 [ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ] 
Uplift Scope [play_remove_lines] 19,004.21: zp ZP_BYTE:79 [ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ] 17,938.14: zp ZP_BYTE:82 [ play_remove_lines::w#6 play_remove_lines::w#3 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 ] 17,501.75: zp ZP_BYTE:80 [ play_remove_lines::x#2 play_remove_lines::x#1 ] 8,201: zp ZP_BYTE:81 [ play_remove_lines::full#4 play_remove_lines::full#2 ] 6,000.6: zp ZP_BYTE:188 [ play_remove_lines::c#0 ] 2,566.89: zp ZP_BYTE:78 [ play_remove_lines::removed#11 play_remove_lines::removed#8 play_remove_lines::removed#1 ] 1,634.97: zp ZP_BYTE:77 [ play_remove_lines::y#8 play_remove_lines::y#1 ] 4: zp ZP_BYTE:169 [ play_remove_lines::return#0 ] 
Uplift Scope [] 58,858.91: zp ZP_BYTE:93 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ] 2,120.54: zp ZP_BYTE:74 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 next_piece_idx#16 play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ] 1,143.93: zp ZP_BYTE:4 [ render_screen_showing#13 render_screen_showing#1 render_screen_showing#0 ] 209.73: zp ZP_WORD:70 [ current_piece_gfx#35 current_piece_gfx#13 current_piece_gfx#18 current_piece_gfx#124 current_piece_gfx#20 current_piece_gfx#21 current_piece_gfx#7 current_piece_gfx#117 ] 193.66: zp ZP_BYTE:68 [ current_piece_char#29 current_piece_char#10 current_piece_char#16 current_piece_char#5 ] 74.29: zp ZP_BYTE:29 [ current_piece_char#68 current_piece_char#100 current_piece_char#101 ] 72.26: zp ZP_BYTE:120 [ irq_sprite_ptr#0 irq_sprite_ptr#11 irq_sprite_ptr#1 irq_sprite_ptr#2 irq_sprite_ptr#3 ] 65.61: zp ZP_BYTE:119 [ irq_sprite_ypos#0 irq_sprite_ypos#11 irq_sprite_ypos#1 irq_sprite_ypos#2 irq_sprite_ypos#3 ] 62.17: zp ZP_BYTE:121 [ irq_cnt#0 irq_cnt#3 irq_cnt#1 irq_cnt#2 ] 61.29: zp ZP_WORD:27 [ current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 ] 42.02: zp ZP_BYTE:72 [ current_xpos#43 current_xpos#14 current_xpos#19 current_xpos#100 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ] 32: zp ZP_WORD:44 [ current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 ] 30.62: zp ZP_BYTE:35 [ render_screen_render#22 render_screen_render#64 ] 29.4: zp ZP_BYTE:17 [ next_piece_idx#12 next_piece_idx#77 next_piece_idx#78 ] 24: zp ZP_BYTE:16 [ render_screen_render#15 render_screen_render#66 ] 20.4: zp ZP_BYTE:24 [ current_ypos#13 current_ypos#98 current_ypos#99 ] 18.41: zp ZP_BYTE:65 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ] 17.41: zp ZP_BYTE:69 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ] 16.93: zp ZP_BYTE:64 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#21 current_movedown_slow#1 current_movedown_slow#23 current_movedown_slow#66 current_movedown_slow#10 ] 15.34: zp ZP_BYTE:56 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#19 current_ypos#6 ] 14.83: zp ZP_WORD:66 [ current_piece#28 current_piece#10 current_piece#15 current_piece#102 current_piece#93 ] 14.77: zp ZP_BYTE:75 [ game_over#65 game_over#27 game_over#10 game_over#15 game_over#52 ] 14.1: zp ZP_BYTE:26 [ current_xpos#59 current_xpos#119 current_xpos#120 ] 13.64: zp ZP_DWORD:59 [ score_bcd#26 score_bcd#18 score_bcd#14 score_bcd#0 score_bcd#16 score_bcd#29 ] 12.63: zp ZP_BYTE:63 [ level#33 level#10 level#17 level#19 level#21 ] 12.62: zp ZP_WORD:57 [ lines_bcd#26 lines_bcd#19 lines_bcd#15 lines_bcd#17 lines_bcd#29 ] 12.38: zp ZP_BYTE:5 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ] 11.97: zp ZP_BYTE:118 [ irq_raster_next#0 irq_raster_next#4 irq_raster_next#1 irq_raster_next#2 irq_raster_next#3 ] 10.83: zp ZP_BYTE:25 [ render_screen_render#33 render_screen_render#65 ] 9.81: zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 ] 8.06: zp ZP_BYTE:3 [ render_screen_render#18 render_screen_render#11 ] 
Uplift Scope [render_moving] 2,605.75: zp ZP_BYTE:32 [ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ] 1,835.17: zp ZP_BYTE:34 [ render_moving::c#2 render_moving::c#1 ] 1,490.13: zp ZP_BYTE:33 [ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ] 1,001: zp ZP_BYTE:138 [ render_moving::current_cell#0 ] 202: zp ZP_BYTE:134 [ render_moving::$1 ] 202: zp ZP_BYTE:135 [ render_moving::$6 ] 163.38: zp ZP_BYTE:31 [ render_moving::l#4 render_moving::l#1 ] 110.2: zp ZP_WORD:136 [ render_moving::screen_line#0 ] 96.71: zp ZP_BYTE:30 [ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ] 
Uplift Scope [render_next] 1,970.3: zp ZP_WORD:19 [ render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#1 render_next::next_piece_gfx#9 ] 1,787.5: zp ZP_BYTE:23 [ render_next::c#2 render_next::c#1 ] 1,657: zp ZP_WORD:21 [ render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#4 render_next::screen_next_area#11 render_next::screen_next_area#3 ] 1,001: zp ZP_BYTE:133 [ render_next::cell#0 ] 169.86: zp ZP_BYTE:18 [ render_next::l#7 render_next::l#1 ] 66.87: zp ZP_BYTE:132 [ render_next::next_piece_char#0 ] 1: zp ZP_BYTE:131 [ render_next::$6 ] 
Uplift Scope [play_increase_level] 4,004: zp ZP_BYTE:187 [ play_increase_level::$5 ] 2,502.5: zp ZP_BYTE:76 [ play_increase_level::b#2 play_increase_level::b#1 ] 4: zp ZP_BYTE:186 [ play_increase_level::$1 ] 
Uplift Scope [render_playfield] 2,254.5: zp ZP_WORD:38 [ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ] 2,002: zp ZP_BYTE:40 [ render_playfield::c#2 render_playfield::c#1 ] 1,505.77: zp ZP_BYTE:37 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] 202: zp ZP_BYTE:139 [ render_playfield::$2 ] 202: zp ZP_BYTE:140 [ render_playfield::$6 ] 181.8: zp ZP_BYTE:36 [ render_playfield::l#2 render_playfield::l#1 ] 
Uplift Scope [keyboard_matrix_read] 2,002: zp ZP_BYTE:198 [ keyboard_matrix_read::return#2 ] 1,003: zp ZP_BYTE:197 [ keyboard_matrix_read::rowid#0 ] 334.33: zp ZP_BYTE:212 [ keyboard_matrix_read::return#0 ] 
Uplift Scope [render_screen_original] 721.31: zp ZP_WORD:112 [ render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 ] 699.79: zp ZP_BYTE:116 [ render_screen_original::x#6 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ] 501.65: zp ZP_WORD:114 [ render_screen_original::cols#6 render_screen_original::cols#5 render_screen_original::cols#4 render_screen_original::cols#7 render_screen_original::cols#3 render_screen_original::cols#1 render_screen_original::cols#2 ] 162.87: zp ZP_WORD:108 [ render_screen_original::oscr#2 render_screen_original::oscr#4 render_screen_original::oscr#1 ] 99.08: zp ZP_WORD:110 [ render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 ] 17.42: zp ZP_BYTE:107 [ render_screen_original::y#6 render_screen_original::y#1 ] 
Uplift Scope [play_spawn_current] 2,002: zp ZP_BYTE:176 [ play_spawn_current::sid_rnd1_return#0 ] 4: zp ZP_BYTE:175 [ play_spawn_current::$1 ] 2.5: zp ZP_BYTE:172 [ play_spawn_current::current_piece_idx#0 ] 0.06: zp ZP_BYTE:173 [ play_spawn_current::$7 ] 
Uplift Scope [main] 202: zp ZP_BYTE:126 [ main::render#1 ] 101: zp ZP_BYTE:123 [ main::key_event#0 ] 
Uplift Scope [play_movement] 202: zp ZP_BYTE:125 [ play_movement::return#3 ] 40: zp ZP_BYTE:41 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 ] 9.73: zp ZP_BYTE:124 [ play_movement::key_event#0 ] 4: zp ZP_BYTE:145 [ play_movement::$3 ] 4: zp ZP_BYTE:149 [ play_movement::$4 ] 0.8: zp ZP_BYTE:146 [ play_movement::render#2 ] 
Uplift Scope [keyboard_event_get] 202: zp ZP_BYTE:122 [ keyboard_event_get::return#3 ] 38.33: zp ZP_BYTE:89 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] 
Uplift Scope [play_init] 33: zp ZP_BYTE:214 [ play_init::$5 ] 27.5: zp ZP_BYTE:99 [ play_init::b#2 play_init::b#1 ] 23.83: zp ZP_BYTE:95 [ play_init::j#2 play_init::j#1 ] 22: zp ZP_BYTE:213 [ play_init::$4 ] 13.93: zp ZP_BYTE:98 [ play_init::idx#2 play_init::idx#1 ] 13.75: zp ZP_WORD:96 [ play_init::pli#2 play_init::pli#1 ] 
Uplift Scope [render_bcd] 30: zp ZP_WORD:8 [ render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ] 22: zp ZP_BYTE:13 [ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ] 7.6: zp ZP_WORD:14 [ render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ] 4: zp ZP_BYTE:127 [ render_bcd::$5 ] 4: zp ZP_BYTE:128 [ render_bcd::$6 ] 4: zp ZP_BYTE:129 [ render_bcd::$3 ] 4: zp ZP_BYTE:130 [ render_bcd::$4 ] 2: zp ZP_WORD:10 [ render_bcd::offset#6 ] 1: zp ZP_BYTE:12 [ render_bcd::only_low#6 ] 
Uplift Scope [render_init] 22: zp ZP_BYTE:102 [ render_init::i#2 render_init::i#1 ] 16.5: zp ZP_BYTE:216 [ render_init::$13 ] 13.93: zp ZP_WORD:105 [ render_init::li_2#2 render_init::li_2#1 ] 13.75: zp ZP_WORD:103 [ render_init::li_1#2 render_init::li_1#1 ] 
Uplift Scope [sprites_init] 25.3: zp ZP_BYTE:100 [ sprites_init::s#2 sprites_init::s#1 ] 22: zp ZP_BYTE:215 [ sprites_init::s2#0 ] 15.58: zp ZP_BYTE:101 [ sprites_init::xpos#2 sprites_init::xpos#1 ] 
Uplift Scope [play_move_down] 20: zp ZP_BYTE:55 [ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 ] 4: zp ZP_BYTE:142 [ play_move_down::return#0 ] 4: zp ZP_BYTE:166 [ play_move_down::$2 ] 4: zp ZP_BYTE:168 [ play_move_down::$12 ] 4: zp ZP_BYTE:170 [ play_move_down::removed#0 ] 2: zp ZP_BYTE:141 [ play_move_down::key_event#0 ] 0.67: zp ZP_BYTE:73 [ play_move_down::return#3 ] 
Uplift Scope [keyboard_event_pressed] 4: zp ZP_BYTE:165 [ keyboard_event_pressed::return#12 ] 4: zp ZP_BYTE:193 [ keyboard_event_pressed::$0 ] 4: zp ZP_BYTE:195 [ keyboard_event_pressed::$1 ] 4: zp ZP_BYTE:200 [ keyboard_event_pressed::return#0 ] 4: zp ZP_BYTE:202 [ keyboard_event_pressed::return#1 ] 4: zp ZP_BYTE:204 [ keyboard_event_pressed::return#2 ] 4: zp ZP_BYTE:206 [ keyboard_event_pressed::return#10 ] 2: zp ZP_BYTE:194 [ keyboard_event_pressed::row_bits#0 ] 1.71: zp ZP_BYTE:196 [ keyboard_event_pressed::return#11 ] 1.33: zp ZP_BYTE:88 [ keyboard_event_pressed::keycode#5 ] 
Uplift Scope [sprites_irq] 6.5: zp ZP_BYTE:117 [ sprites_irq::raster_sprite_gfx_modify#0 ] 4: zp ZP_BYTE:218 [ sprites_irq::$0 ] 4: zp ZP_BYTE:221 [ sprites_irq::ptr#4 ] 4: zp ZP_BYTE:223 [ sprites_irq::ptr#2 ] 2.67: zp ZP_BYTE:220 [ sprites_irq::ptr#3 ] 2.67: zp ZP_BYTE:222 [ sprites_irq::ptr#1 ] 2.5: zp ZP_BYTE:217 [ sprites_irq::ypos#0 ] 2.5: zp ZP_BYTE:219 [ sprites_irq::ptr#0 ] 
Uplift Scope [play_move_rotate] 8.89: zp ZP_BYTE:43 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] 4: zp ZP_BYTE:148 [ play_move_rotate::return#0 ] 4: zp ZP_BYTE:150 [ play_move_rotate::$5 ] 4: zp ZP_BYTE:152 [ play_move_rotate::$2 ] 4: zp ZP_BYTE:153 [ play_move_rotate::$7 ] 3: zp ZP_BYTE:147 [ play_move_rotate::key_event#0 ] 0.67: zp ZP_BYTE:42 [ play_move_rotate::return#2 ] 
Uplift Scope [play_update_score] 4: zp ZP_BYTE:177 [ play_update_score::$2 ] 4: zp ZP_BYTE:179 [ play_update_score::$9 ] 4: zp ZP_BYTE:184 [ play_update_score::$4 ] 4: zp ZP_BYTE:185 [ play_update_score::lines_after#0 ] 1.33: zp ZP_DWORD:180 [ play_update_score::add_bcd#0 ] 1.14: zp ZP_BYTE:171 [ play_update_score::removed#0 ] 0.44: zp ZP_BYTE:178 [ play_update_score::lines_before#0 ] 
Uplift Scope [play_move_leftright] 4: zp ZP_BYTE:144 [ play_move_leftright::return#0 ] 4: zp ZP_BYTE:162 [ play_move_leftright::$4 ] 4: zp ZP_BYTE:164 [ play_move_leftright::$8 ] 3: zp ZP_BYTE:143 [ play_move_leftright::key_event#0 ] 0.67: zp ZP_BYTE:54 [ play_move_leftright::return#2 ] 
Uplift Scope [render_show] 2: zp ZP_BYTE:94 [ render_show::d018val#3 ] 
Uplift Scope [render_score] 0.75: zp ZP_WORD:6 [ render_score::screen#3 ] 
Uplift Scope [sid_rnd_init] 
Uplift Scope [render_screen_swap] 
Uplift Scope [sprites_irq_init] 

Uplifting [keyboard_event_scan] best 4708853 combination reg byte a [ keyboard_event_scan::$15 ] reg byte a [ keyboard_event_scan::$16 ] reg byte a [ keyboard_event_scan::event_type#0 ] reg byte a [ keyboard_event_scan::$23 ] zp ZP_BYTE:91 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] zp ZP_BYTE:92 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] zp ZP_BYTE:90 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] zp ZP_BYTE:199 [ keyboard_event_scan::row_scan#0 ] zp ZP_BYTE:201 [ keyboard_event_scan::$0 ] zp ZP_BYTE:203 [ keyboard_event_scan::$3 ] zp ZP_BYTE:205 [ keyboard_event_scan::$6 ] zp ZP_BYTE:207 [ keyboard_event_scan::$9 ] 
Limited combination testing to 100 combinations of 524288 possible.
Uplifting [play_collision] best 4558853 combination zp ZP_BYTE:50 [ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ] reg byte a [ play_collision::$5 ] zp ZP_BYTE:51 [ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ] reg byte x [ play_collision::c#2 play_collision::c#1 ] zp ZP_BYTE:156 [ play_collision::$14 ] zp ZP_BYTE:159 [ play_collision::i#1 ] zp ZP_BYTE:48 [ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ] zp ZP_BYTE:49 [ play_collision::l#6 play_collision::l#1 ] zp ZP_WORD:157 [ play_collision::playfield_line#0 ] zp ZP_WORD:154 [ play_collision::piece_gfx#0 ] zp ZP_BYTE:47 [ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ] zp ZP_BYTE:46 [ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ] zp ZP_BYTE:151 [ play_collision::return#14 ] zp ZP_BYTE:161 [ play_collision::return#13 ] zp ZP_BYTE:163 [ play_collision::return#1 ] zp ZP_BYTE:167 [ play_collision::return#0 ] zp ZP_BYTE:174 [ play_collision::return#10 ] zp ZP_BYTE:53 [ play_collision::return#15 ] 
Limited combination testing to 100 combinations of 429981696 possible.
Uplifting [play_lock_current] best 4464853 combination zp ZP_BYTE:85 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ] zp ZP_BYTE:86 [ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ] reg byte x [ play_lock_current::c#2 play_lock_current::c#1 ] zp ZP_BYTE:192 [ play_lock_current::i#1 ] reg byte a [ play_lock_current::$4 ] zp ZP_BYTE:84 [ play_lock_current::l#6 play_lock_current::l#1 ] zp ZP_WORD:190 [ play_lock_current::playfield_line#0 ] zp ZP_BYTE:83 [ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ] 
Limited combination testing to 100 combinations of 2916 possible.
Uplifting [play_remove_lines] best 4325853 combination reg byte y [ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ] reg byte x [ play_remove_lines::w#6 play_remove_lines::w#3 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 ] zp ZP_BYTE:80 [ play_remove_lines::x#2 play_remove_lines::x#1 ] zp ZP_BYTE:81 [ play_remove_lines::full#4 play_remove_lines::full#2 ] zp ZP_BYTE:188 [ play_remove_lines::c#0 ] zp ZP_BYTE:78 [ play_remove_lines::removed#11 play_remove_lines::removed#8 play_remove_lines::removed#1 ] zp ZP_BYTE:77 [ play_remove_lines::y#8 play_remove_lines::y#1 ] zp ZP_BYTE:169 [ play_remove_lines::return#0 ] 
Limited combination testing to 100 combinations of 20736 possible.
Uplifting [] best 4325611 combination zp ZP_BYTE:93 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ] zp ZP_BYTE:74 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 next_piece_idx#16 play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ] zp ZP_BYTE:4 [ render_screen_showing#13 render_screen_showing#1 render_screen_showing#0 ] zp ZP_WORD:70 [ current_piece_gfx#35 current_piece_gfx#13 current_piece_gfx#18 current_piece_gfx#124 current_piece_gfx#20 current_piece_gfx#21 current_piece_gfx#7 current_piece_gfx#117 ] zp ZP_BYTE:68 [ current_piece_char#29 current_piece_char#10 current_piece_char#16 current_piece_char#5 ] zp ZP_BYTE:29 [ current_piece_char#68 current_piece_char#100 current_piece_char#101 ] zp ZP_BYTE:120 [ irq_sprite_ptr#0 irq_sprite_ptr#11 irq_sprite_ptr#1 irq_sprite_ptr#2 irq_sprite_ptr#3 ] zp ZP_BYTE:119 [ irq_sprite_ypos#0 irq_sprite_ypos#11 irq_sprite_ypos#1 irq_sprite_ypos#2 irq_sprite_ypos#3 ] zp ZP_BYTE:121 [ irq_cnt#0 irq_cnt#3 irq_cnt#1 irq_cnt#2 ] zp ZP_WORD:27 [ current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 ] zp ZP_BYTE:72 [ current_xpos#43 current_xpos#14 current_xpos#19 current_xpos#100 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ] zp ZP_WORD:44 [ current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 ] reg byte x [ render_screen_render#22 render_screen_render#64 ] reg byte x [ next_piece_idx#12 next_piece_idx#77 next_piece_idx#78 ] reg byte a [ render_screen_render#15 render_screen_render#66 ] reg byte x [ current_ypos#13 current_ypos#98 current_ypos#99 ] zp ZP_BYTE:65 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ] zp ZP_BYTE:69 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ] zp ZP_BYTE:64 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#21 current_movedown_slow#1 current_movedown_slow#23 current_movedown_slow#66 current_movedown_slow#10 ] zp ZP_BYTE:56 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#19 current_ypos#6 ] zp ZP_WORD:66 [ current_piece#28 current_piece#10 current_piece#15 current_piece#102 current_piece#93 ] zp ZP_BYTE:75 [ game_over#65 game_over#27 game_over#10 game_over#15 game_over#52 ] zp ZP_BYTE:26 [ current_xpos#59 current_xpos#119 current_xpos#120 ] zp ZP_DWORD:59 [ score_bcd#26 score_bcd#18 score_bcd#14 score_bcd#0 score_bcd#16 score_bcd#29 ] zp ZP_BYTE:63 [ level#33 level#10 level#17 level#19 level#21 ] zp ZP_WORD:57 [ lines_bcd#26 lines_bcd#19 lines_bcd#15 lines_bcd#17 lines_bcd#29 ] zp ZP_BYTE:5 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ] zp ZP_BYTE:118 [ irq_raster_next#0 irq_raster_next#4 irq_raster_next#1 irq_raster_next#2 irq_raster_next#3 ] zp ZP_BYTE:25 [ render_screen_render#33 render_screen_render#65 ] zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 ] zp ZP_BYTE:3 [ render_screen_render#18 render_screen_render#11 ] 
Limited combination testing to 100 combinations of 1944 possible.
Uplifting [render_moving] best 4310611 combination zp ZP_BYTE:32 [ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ] reg byte x [ render_moving::c#2 render_moving::c#1 ] zp ZP_BYTE:33 [ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ] reg byte a [ render_moving::current_cell#0 ] zp ZP_BYTE:134 [ render_moving::$1 ] zp ZP_BYTE:135 [ render_moving::$6 ] zp ZP_BYTE:31 [ render_moving::l#4 render_moving::l#1 ] zp ZP_WORD:136 [ render_moving::screen_line#0 ] zp ZP_BYTE:30 [ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ] 
Limited combination testing to 100 combinations of 15552 possible.
Uplifting [render_next] best 4295607 combination zp ZP_WORD:19 [ render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#1 render_next::next_piece_gfx#9 ] reg byte x [ render_next::c#2 render_next::c#1 ] zp ZP_WORD:21 [ render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#4 render_next::screen_next_area#11 render_next::screen_next_area#3 ] reg byte a [ render_next::cell#0 ] zp ZP_BYTE:18 [ render_next::l#7 render_next::l#1 ] zp ZP_BYTE:132 [ render_next::next_piece_char#0 ] reg byte y [ render_next::$6 ] 
Limited combination testing to 100 combinations of 128 possible.
Uplifting [play_increase_level] best 4281601 combination reg byte a [ play_increase_level::$5 ] reg byte x [ play_increase_level::b#2 play_increase_level::b#1 ] reg byte a [ play_increase_level::$1 ] 
Uplifting [render_playfield] best 4280601 combination zp ZP_WORD:38 [ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ] zp ZP_BYTE:40 [ render_playfield::c#2 render_playfield::c#1 ] zp ZP_BYTE:37 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] reg byte a [ render_playfield::$2 ] reg byte a [ render_playfield::$6 ] zp ZP_BYTE:36 [ render_playfield::l#2 render_playfield::l#1 ] 
Limited combination testing to 100 combinations of 128 possible.
Uplifting [keyboard_matrix_read] best 4268595 combination reg byte a [ keyboard_matrix_read::return#2 ] reg byte x [ keyboard_matrix_read::rowid#0 ] reg byte a [ keyboard_matrix_read::return#0 ] 
Uplifting [render_screen_original] best 4266495 combination zp ZP_WORD:112 [ render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 ] reg byte x [ render_screen_original::x#6 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ] zp ZP_WORD:114 [ render_screen_original::cols#6 render_screen_original::cols#5 render_screen_original::cols#4 render_screen_original::cols#7 render_screen_original::cols#3 render_screen_original::cols#1 render_screen_original::cols#2 ] zp ZP_WORD:108 [ render_screen_original::oscr#2 render_screen_original::oscr#4 render_screen_original::oscr#1 ] zp ZP_WORD:110 [ render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 ] zp ZP_BYTE:107 [ render_screen_original::y#6 render_screen_original::y#1 ] 
Uplifting [play_spawn_current] best 4260476 combination reg byte a [ play_spawn_current::sid_rnd1_return#0 ] reg byte a [ play_spawn_current::$1 ] reg byte x [ play_spawn_current::current_piece_idx#0 ] zp ZP_BYTE:173 [ play_spawn_current::$7 ] 
Uplifting [main] best 4259276 combination reg byte a [ main::render#1 ] reg byte x [ main::key_event#0 ] 
Uplifting [play_movement] best 4258664 combination reg byte a [ play_movement::return#3 ] zp ZP_BYTE:41 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 ] zp ZP_BYTE:124 [ play_movement::key_event#0 ] reg byte a [ play_movement::$3 ] reg byte a [ play_movement::$4 ] zp ZP_BYTE:146 [ play_movement::render#2 ] 
Limited combination testing to 100 combinations of 576 possible.
Uplifting [keyboard_event_get] best 4257758 combination reg byte x [ keyboard_event_get::return#3 ] reg byte x [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] 
Uplifting [play_init] best 4257548 combination reg byte a [ play_init::$5 ] zp ZP_BYTE:99 [ play_init::b#2 play_init::b#1 ] reg byte y [ play_init::j#2 play_init::j#1 ] reg byte x [ play_init::$4 ] zp ZP_BYTE:98 [ play_init::idx#2 play_init::idx#1 ] zp ZP_WORD:96 [ play_init::pli#2 play_init::pli#1 ] 
Limited combination testing to 100 combinations of 432 possible.
Uplifting [render_bcd] best 4257518 combination zp ZP_WORD:8 [ render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ] reg byte x [ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ] zp ZP_WORD:14 [ render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ] reg byte a [ render_bcd::$5 ] reg byte a [ render_bcd::$6 ] reg byte a [ render_bcd::$3 ] zp ZP_BYTE:130 [ render_bcd::$4 ] zp ZP_WORD:10 [ render_bcd::offset#6 ] zp ZP_BYTE:12 [ render_bcd::only_low#6 ] 
Limited combination testing to 100 combinations of 1536 possible.
Uplifting [render_init] best 4257348 combination reg byte y [ render_init::i#2 render_init::i#1 ] reg byte x [ render_init::$13 ] zp ZP_WORD:105 [ render_init::li_2#2 render_init::li_2#1 ] zp ZP_WORD:103 [ render_init::li_1#2 render_init::li_1#1 ] 
Uplifting [sprites_init] best 4257178 combination reg byte y [ sprites_init::s#2 sprites_init::s#1 ] reg byte x [ sprites_init::s2#0 ] zp ZP_BYTE:101 [ sprites_init::xpos#2 sprites_init::xpos#1 ] 
Uplifting [play_move_down] best 4257145 combination reg byte x [ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 ] reg byte a [ play_move_down::return#0 ] reg byte a [ play_move_down::$2 ] reg byte a [ play_move_down::$12 ] zp ZP_BYTE:170 [ play_move_down::removed#0 ] zp ZP_BYTE:141 [ play_move_down::key_event#0 ] zp ZP_BYTE:73 [ play_move_down::return#3 ] 
Limited combination testing to 100 combinations of 12288 possible.
Uplifting [keyboard_event_pressed] best 4257125 combination reg byte a [ keyboard_event_pressed::return#12 ] reg byte a [ keyboard_event_pressed::$0 ] reg byte a [ keyboard_event_pressed::$1 ] reg byte a [ keyboard_event_pressed::return#0 ] zp ZP_BYTE:202 [ keyboard_event_pressed::return#1 ] zp ZP_BYTE:204 [ keyboard_event_pressed::return#2 ] zp ZP_BYTE:206 [ keyboard_event_pressed::return#10 ] zp ZP_BYTE:194 [ keyboard_event_pressed::row_bits#0 ] zp ZP_BYTE:196 [ keyboard_event_pressed::return#11 ] zp ZP_BYTE:88 [ keyboard_event_pressed::keycode#5 ] 
Limited combination testing to 100 combinations of 589824 possible.
Uplifting [sprites_irq] best 4257101 combination zp ZP_BYTE:117 [ sprites_irq::raster_sprite_gfx_modify#0 ] reg byte x [ sprites_irq::$0 ] reg byte a [ sprites_irq::ptr#4 ] reg byte a [ sprites_irq::ptr#2 ] reg byte a [ sprites_irq::ptr#3 ] zp ZP_BYTE:222 [ sprites_irq::ptr#1 ] zp ZP_BYTE:217 [ sprites_irq::ypos#0 ] zp ZP_BYTE:219 [ sprites_irq::ptr#0 ] 
Limited combination testing to 100 combinations of 12288 possible.
Uplifting [play_move_rotate] best 4257083 combination zp ZP_BYTE:43 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] reg byte a [ play_move_rotate::return#0 ] reg byte x [ play_move_rotate::$5 ] reg byte a [ play_move_rotate::$2 ] zp ZP_BYTE:153 [ play_move_rotate::$7 ] zp ZP_BYTE:147 [ play_move_rotate::key_event#0 ] zp ZP_BYTE:42 [ play_move_rotate::return#2 ] 
Limited combination testing to 100 combinations of 12288 possible.
Uplifting [play_update_score] best 4257061 combination reg byte a [ play_update_score::$2 ] reg byte a [ play_update_score::$9 ] reg byte a [ play_update_score::$4 ] reg byte a [ play_update_score::lines_after#0 ] zp ZP_DWORD:180 [ play_update_score::add_bcd#0 ] zp ZP_BYTE:171 [ play_update_score::removed#0 ] zp ZP_BYTE:178 [ play_update_score::lines_before#0 ] 
Limited combination testing to 100 combinations of 2304 possible.
Uplifting [play_move_leftright] best 4257034 combination reg byte a [ play_move_leftright::return#0 ] reg byte a [ play_move_leftright::$4 ] reg byte a [ play_move_leftright::$8 ] reg byte a [ play_move_leftright::key_event#0 ] zp ZP_BYTE:54 [ play_move_leftright::return#2 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [render_show] best 4257025 combination reg byte a [ render_show::d018val#3 ] 
Uplifting [render_score] best 4257025 combination zp ZP_WORD:6 [ render_score::screen#3 ] 
Uplifting [sid_rnd_init] best 4257025 combination 
Uplifting [render_screen_swap] best 4257025 combination 
Uplifting [sprites_irq_init] best 4257025 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:93 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ]
Uplifting [] best 4257025 combination zp ZP_BYTE:93 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:50 [ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ]
Uplifting [play_collision] best 4257025 combination zp ZP_BYTE:50 [ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:85 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ]
Uplifting [play_lock_current] best 4257025 combination zp ZP_BYTE:85 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:91 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Uplifting [keyboard_event_scan] best 4107025 combination reg byte x [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:80 [ play_remove_lines::x#2 play_remove_lines::x#1 ]
Uplifting [play_remove_lines] best 4107025 combination zp ZP_BYTE:80 [ play_remove_lines::x#2 play_remove_lines::x#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:86 [ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ]
Uplifting [play_lock_current] best 4107025 combination zp ZP_BYTE:86 [ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:51 [ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ]
Uplifting [play_collision] best 4107025 combination zp ZP_BYTE:51 [ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:92 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
Uplifting [keyboard_event_scan] best 4107025 combination zp ZP_BYTE:92 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:81 [ play_remove_lines::full#4 play_remove_lines::full#2 ]
Uplifting [play_remove_lines] best 4107025 combination zp ZP_BYTE:81 [ play_remove_lines::full#4 play_remove_lines::full#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:188 [ play_remove_lines::c#0 ]
Uplifting [play_remove_lines] best 4107025 combination zp ZP_BYTE:188 [ play_remove_lines::c#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:32 [ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ]
Uplifting [render_moving] best 4107025 combination zp ZP_BYTE:32 [ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:78 [ play_remove_lines::removed#11 play_remove_lines::removed#8 play_remove_lines::removed#1 ]
Uplifting [play_remove_lines] best 4107025 combination zp ZP_BYTE:78 [ play_remove_lines::removed#11 play_remove_lines::removed#8 play_remove_lines::removed#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:192 [ play_lock_current::i#1 ]
Uplifting [play_lock_current] best 4107025 combination zp ZP_BYTE:192 [ play_lock_current::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:74 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 next_piece_idx#16 play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ]
Uplifting [] best 4107025 combination zp ZP_BYTE:74 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 next_piece_idx#16 play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:90 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Uplifting [keyboard_event_scan] best 4107025 combination zp ZP_BYTE:90 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:40 [ render_playfield::c#2 render_playfield::c#1 ]
Uplifting [render_playfield] best 4107025 combination zp ZP_BYTE:40 [ render_playfield::c#2 render_playfield::c#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:156 [ play_collision::$14 ]
Uplifting [play_collision] best 4103025 combination reg byte a [ play_collision::$14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:77 [ play_remove_lines::y#8 play_remove_lines::y#1 ]
Uplifting [play_remove_lines] best 4103025 combination zp ZP_BYTE:77 [ play_remove_lines::y#8 play_remove_lines::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:159 [ play_collision::i#1 ]
Uplifting [play_collision] best 4103025 combination zp ZP_BYTE:159 [ play_collision::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:37 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Uplifting [render_playfield] best 4103025 combination zp ZP_BYTE:37 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:33 [ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ]
Uplifting [render_moving] best 4103025 combination zp ZP_BYTE:33 [ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:48 [ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ]
Uplifting [play_collision] best 4103025 combination zp ZP_BYTE:48 [ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:199 [ keyboard_event_scan::row_scan#0 ]
Uplifting [keyboard_event_scan] best 4103025 combination zp ZP_BYTE:199 [ keyboard_event_scan::row_scan#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:84 [ play_lock_current::l#6 play_lock_current::l#1 ]
Uplifting [play_lock_current] best 4103025 combination zp ZP_BYTE:84 [ play_lock_current::l#6 play_lock_current::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:4 [ render_screen_showing#13 render_screen_showing#1 render_screen_showing#0 ]
Uplifting [] best 4103025 combination zp ZP_BYTE:4 [ render_screen_showing#13 render_screen_showing#1 render_screen_showing#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:49 [ play_collision::l#6 play_collision::l#1 ]
Uplifting [play_collision] best 4103025 combination zp ZP_BYTE:49 [ play_collision::l#6 play_collision::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:83 [ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ]
Uplifting [play_lock_current] best 4103025 combination zp ZP_BYTE:83 [ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:134 [ render_moving::$1 ]
Uplifting [render_moving] best 4102425 combination reg byte a [ render_moving::$1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:135 [ render_moving::$6 ]
Uplifting [render_moving] best 4102025 combination reg byte a [ render_moving::$6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:68 [ current_piece_char#29 current_piece_char#10 current_piece_char#16 current_piece_char#5 ]
Uplifting [] best 4102025 combination zp ZP_BYTE:68 [ current_piece_char#29 current_piece_char#10 current_piece_char#16 current_piece_char#5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:36 [ render_playfield::l#2 render_playfield::l#1 ]
Uplifting [render_playfield] best 4102025 combination zp ZP_BYTE:36 [ render_playfield::l#2 render_playfield::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ render_next::l#7 render_next::l#1 ]
Uplifting [render_next] best 4102025 combination zp ZP_BYTE:18 [ render_next::l#7 render_next::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:31 [ render_moving::l#4 render_moving::l#1 ]
Uplifting [render_moving] best 4102025 combination zp ZP_BYTE:31 [ render_moving::l#4 render_moving::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:30 [ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ]
Uplifting [render_moving] best 4102025 combination zp ZP_BYTE:30 [ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:29 [ current_piece_char#68 current_piece_char#100 current_piece_char#101 ]
Uplifting [] best 4102025 combination zp ZP_BYTE:29 [ current_piece_char#68 current_piece_char#100 current_piece_char#101 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:120 [ irq_sprite_ptr#0 irq_sprite_ptr#11 irq_sprite_ptr#1 irq_sprite_ptr#2 irq_sprite_ptr#3 ]
Uplifting [] best 4102025 combination zp ZP_BYTE:120 [ irq_sprite_ptr#0 irq_sprite_ptr#11 irq_sprite_ptr#1 irq_sprite_ptr#2 irq_sprite_ptr#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:132 [ render_next::next_piece_char#0 ]
Uplifting [render_next] best 4102025 combination zp ZP_BYTE:132 [ render_next::next_piece_char#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:119 [ irq_sprite_ypos#0 irq_sprite_ypos#11 irq_sprite_ypos#1 irq_sprite_ypos#2 irq_sprite_ypos#3 ]
Uplifting [] best 4102025 combination zp ZP_BYTE:119 [ irq_sprite_ypos#0 irq_sprite_ypos#11 irq_sprite_ypos#1 irq_sprite_ypos#2 irq_sprite_ypos#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:121 [ irq_cnt#0 irq_cnt#3 irq_cnt#1 irq_cnt#2 ]
Uplifting [] best 4102025 combination zp ZP_BYTE:121 [ irq_cnt#0 irq_cnt#3 irq_cnt#1 irq_cnt#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:47 [ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ]
Uplifting [play_collision] best 4102025 combination zp ZP_BYTE:47 [ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:72 [ current_xpos#43 current_xpos#14 current_xpos#19 current_xpos#100 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ]
Uplifting [] best 4102025 combination zp ZP_BYTE:72 [ current_xpos#43 current_xpos#14 current_xpos#19 current_xpos#100 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:41 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 ]
Uplifting [play_movement] best 4102025 combination zp ZP_BYTE:41 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:99 [ play_init::b#2 play_init::b#1 ]
Uplifting [play_init] best 4101925 combination reg byte x [ play_init::b#2 play_init::b#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:65 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ]
Uplifting [] best 4101925 combination zp ZP_BYTE:65 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:46 [ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ]
Uplifting [play_collision] best 4101909 combination reg byte x [ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:107 [ render_screen_original::y#6 render_screen_original::y#1 ]
Uplifting [render_screen_original] best 4101909 combination zp ZP_BYTE:107 [ render_screen_original::y#6 render_screen_original::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:69 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ]
Uplifting [] best 4101909 combination zp ZP_BYTE:69 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:64 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#21 current_movedown_slow#1 current_movedown_slow#23 current_movedown_slow#66 current_movedown_slow#10 ]
Uplifting [] best 4101909 combination zp ZP_BYTE:64 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#21 current_movedown_slow#1 current_movedown_slow#23 current_movedown_slow#66 current_movedown_slow#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:101 [ sprites_init::xpos#2 sprites_init::xpos#1 ]
Uplifting [sprites_init] best 4101909 combination zp ZP_BYTE:101 [ sprites_init::xpos#2 sprites_init::xpos#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:56 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#19 current_ypos#6 ]
Uplifting [] best 4101909 combination zp ZP_BYTE:56 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#19 current_ypos#6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:75 [ game_over#65 game_over#27 game_over#10 game_over#15 game_over#52 ]
Uplifting [] best 4101909 combination zp ZP_BYTE:75 [ game_over#65 game_over#27 game_over#10 game_over#15 game_over#52 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:26 [ current_xpos#59 current_xpos#119 current_xpos#120 ]
Uplifting [] best 4101909 combination zp ZP_BYTE:26 [ current_xpos#59 current_xpos#119 current_xpos#120 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:98 [ play_init::idx#2 play_init::idx#1 ]
Uplifting [play_init] best 4101909 combination zp ZP_BYTE:98 [ play_init::idx#2 play_init::idx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:63 [ level#33 level#10 level#17 level#19 level#21 ]
Uplifting [] best 4101909 combination zp ZP_BYTE:63 [ level#33 level#10 level#17 level#19 level#21 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ]
Uplifting [] best 4101909 combination zp ZP_BYTE:5 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:118 [ irq_raster_next#0 irq_raster_next#4 irq_raster_next#1 irq_raster_next#2 irq_raster_next#3 ]
Uplifting [] best 4101909 combination zp ZP_BYTE:118 [ irq_raster_next#0 irq_raster_next#4 irq_raster_next#1 irq_raster_next#2 irq_raster_next#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:25 [ render_screen_render#33 render_screen_render#65 ]
Uplifting [] best 4101909 combination zp ZP_BYTE:25 [ render_screen_render#33 render_screen_render#65 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 ]
Uplifting [] best 4101909 combination zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:124 [ play_movement::key_event#0 ]
Uplifting [play_movement] best 4101909 combination zp ZP_BYTE:124 [ play_movement::key_event#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:43 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ]
Uplifting [play_move_rotate] best 4101909 combination zp ZP_BYTE:43 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ render_screen_render#18 render_screen_render#11 ]
Uplifting [] best 4101909 combination zp ZP_BYTE:3 [ render_screen_render#18 render_screen_render#11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:117 [ sprites_irq::raster_sprite_gfx_modify#0 ]
Uplifting [sprites_irq] best 4101909 combination zp ZP_BYTE:117 [ sprites_irq::raster_sprite_gfx_modify#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:130 [ render_bcd::$4 ]
Uplifting [render_bcd] best 4101903 combination reg byte a [ render_bcd::$4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:151 [ play_collision::return#14 ]
Uplifting [play_collision] best 4101897 combination reg byte a [ play_collision::return#14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:153 [ play_move_rotate::$7 ]
Uplifting [play_move_rotate] best 4101891 combination reg byte x [ play_move_rotate::$7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:161 [ play_collision::return#13 ]
Uplifting [play_collision] best 4101885 combination reg byte a [ play_collision::return#13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:163 [ play_collision::return#1 ]
Uplifting [play_collision] best 4101879 combination reg byte a [ play_collision::return#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:167 [ play_collision::return#0 ]
Uplifting [play_collision] best 4101873 combination reg byte a [ play_collision::return#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:169 [ play_remove_lines::return#0 ]
Uplifting [play_remove_lines] best 4101867 combination reg byte a [ play_remove_lines::return#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:170 [ play_move_down::removed#0 ]
Uplifting [play_move_down] best 4101861 combination reg byte a [ play_move_down::removed#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:174 [ play_collision::return#10 ]
Uplifting [play_collision] best 4101855 combination reg byte a [ play_collision::return#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:201 [ keyboard_event_scan::$0 ]
Uplifting [keyboard_event_scan] best 4101849 combination reg byte a [ keyboard_event_scan::$0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:202 [ keyboard_event_pressed::return#1 ]
Uplifting [keyboard_event_pressed] best 4101843 combination reg byte a [ keyboard_event_pressed::return#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:203 [ keyboard_event_scan::$3 ]
Uplifting [keyboard_event_scan] best 4101837 combination reg byte a [ keyboard_event_scan::$3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:204 [ keyboard_event_pressed::return#2 ]
Uplifting [keyboard_event_pressed] best 4101831 combination reg byte a [ keyboard_event_pressed::return#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:205 [ keyboard_event_scan::$6 ]
Uplifting [keyboard_event_scan] best 4101825 combination reg byte a [ keyboard_event_scan::$6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:206 [ keyboard_event_pressed::return#10 ]
Uplifting [keyboard_event_pressed] best 4101819 combination reg byte a [ keyboard_event_pressed::return#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:207 [ keyboard_event_scan::$9 ]
Uplifting [keyboard_event_scan] best 4101813 combination reg byte a [ keyboard_event_scan::$9 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:147 [ play_move_rotate::key_event#0 ]
Uplifting [play_move_rotate] best 4101804 combination reg byte a [ play_move_rotate::key_event#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:222 [ sprites_irq::ptr#1 ]
Uplifting [sprites_irq] best 4101792 combination reg byte x [ sprites_irq::ptr#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:217 [ sprites_irq::ypos#0 ]
Uplifting [sprites_irq] best 4101777 combination reg byte a [ sprites_irq::ypos#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:219 [ sprites_irq::ptr#0 ]
Uplifting [sprites_irq] best 4101762 combination reg byte x [ sprites_irq::ptr#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:141 [ play_move_down::key_event#0 ]
Uplifting [play_move_down] best 4101756 combination reg byte a [ play_move_down::key_event#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:194 [ keyboard_event_pressed::row_bits#0 ]
Uplifting [keyboard_event_pressed] best 4101756 combination zp ZP_BYTE:194 [ keyboard_event_pressed::row_bits#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:196 [ keyboard_event_pressed::return#11 ]
Uplifting [keyboard_event_pressed] best 4101738 combination reg byte a [ keyboard_event_pressed::return#11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:53 [ play_collision::return#15 ]
Uplifting [play_collision] best 4101708 combination reg byte a [ play_collision::return#15 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:88 [ keyboard_event_pressed::keycode#5 ]
Uplifting [keyboard_event_pressed] best 4101708 combination zp ZP_BYTE:88 [ keyboard_event_pressed::keycode#5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:171 [ play_update_score::removed#0 ]
Uplifting [play_update_score] best 4101702 combination reg byte x [ play_update_score::removed#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:12 [ render_bcd::only_low#6 ]
Uplifting [render_bcd] best 4101681 combination reg byte y [ render_bcd::only_low#6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:146 [ play_movement::render#2 ]
Uplifting [play_movement] best 4101681 combination zp ZP_BYTE:146 [ play_movement::render#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:42 [ play_move_rotate::return#2 ]
Uplifting [play_move_rotate] best 4101672 combination reg byte a [ play_move_rotate::return#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:54 [ play_move_leftright::return#2 ]
Uplifting [play_move_leftright] best 4101663 combination reg byte a [ play_move_leftright::return#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:73 [ play_move_down::return#3 ]
Uplifting [play_move_down] best 4101656 combination reg byte x [ play_move_down::return#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:178 [ play_update_score::lines_before#0 ]
Uplifting [play_update_score] best 4101656 combination zp ZP_BYTE:178 [ play_update_score::lines_before#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:173 [ play_spawn_current::$7 ]
Uplifting [play_spawn_current] best 4101656 combination zp ZP_BYTE:173 [ play_spawn_current::$7 ] 
Coalescing zero page register [ zp ZP_WORD:6 [ render_score::screen#3 ] ] with [ zp ZP_WORD:8 [ render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ] ] - score: 6
Coalescing zero page register [ zp ZP_BYTE:41 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 ] ] with [ zp ZP_BYTE:146 [ play_movement::render#2 ] ] - score: 2
Coalescing zero page register [ zp ZP_WORD:10 [ render_bcd::offset#6 ] ] with [ zp ZP_WORD:14 [ render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:44 [ current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 ] ] with [ zp ZP_WORD:154 [ play_collision::piece_gfx#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_BYTE:56 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#19 current_ypos#6 ] ] with [ zp ZP_BYTE:83 [ play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:19 [ render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#1 render_next::next_piece_gfx#9 ] ] with [ zp ZP_WORD:6 [ render_score::screen#3 render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ] ]
Coalescing zero page register [ zp ZP_WORD:21 [ render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#4 render_next::screen_next_area#11 render_next::screen_next_area#3 ] ] with [ zp ZP_WORD:10 [ render_bcd::offset#6 render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ] ]
Coalescing zero page register [ zp ZP_BYTE:25 [ render_screen_render#33 render_screen_render#65 ] ] with [ zp ZP_BYTE:18 [ render_next::l#7 render_next::l#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:36 [ render_playfield::l#2 render_playfield::l#1 ] ] with [ zp ZP_BYTE:26 [ current_xpos#59 current_xpos#119 current_xpos#120 ] ]
Coalescing zero page register [ zp ZP_BYTE:37 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] ] with [ zp ZP_BYTE:29 [ current_piece_char#68 current_piece_char#100 current_piece_char#101 ] ]
Coalescing zero page register [ zp ZP_WORD:38 [ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 ] ] with [ zp ZP_WORD:27 [ current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 ] ]
Coalescing zero page register [ zp ZP_BYTE:40 [ render_playfield::c#2 render_playfield::c#1 ] ] with [ zp ZP_BYTE:30 [ render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:41 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 play_movement::render#2 ] ] with [ zp ZP_BYTE:31 [ render_moving::l#4 render_moving::l#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:43 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 ] ] with [ zp ZP_BYTE:32 [ render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:47 [ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 ] ] with [ zp ZP_BYTE:33 [ render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:77 [ play_remove_lines::y#8 play_remove_lines::y#1 ] ] with [ zp ZP_BYTE:5 [ current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ] ]
Coalescing zero page register [ zp ZP_BYTE:78 [ play_remove_lines::removed#11 play_remove_lines::removed#8 play_remove_lines::removed#1 ] ] with [ zp ZP_BYTE:48 [ play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:80 [ play_remove_lines::x#2 play_remove_lines::x#1 ] ] with [ zp ZP_BYTE:49 [ play_collision::l#6 play_collision::l#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:81 [ play_remove_lines::full#4 play_remove_lines::full#2 ] ] with [ zp ZP_BYTE:50 [ play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ] ]
Coalescing zero page register [ zp ZP_BYTE:84 [ play_lock_current::l#6 play_lock_current::l#1 ] ] with [ zp ZP_BYTE:51 [ play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:85 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 ] ] with [ zp ZP_BYTE:69 [ current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ] ]
Coalescing zero page register [ zp ZP_BYTE:88 [ keyboard_event_pressed::keycode#5 ] ] with [ zp ZP_BYTE:86 [ play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ] ]
Coalescing zero page register [ zp ZP_WORD:96 [ play_init::pli#2 play_init::pli#1 ] ] with [ zp ZP_WORD:44 [ current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 play_collision::piece_gfx#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:98 [ play_init::idx#2 play_init::idx#1 ] ] with [ zp ZP_BYTE:2 [ render_screen_show#16 render_screen_show#13 ] ]
Coalescing zero page register [ zp ZP_BYTE:101 [ sprites_init::xpos#2 sprites_init::xpos#1 ] ] with [ zp ZP_BYTE:3 [ render_screen_render#18 render_screen_render#11 ] ]
Coalescing zero page register [ zp ZP_WORD:103 [ render_init::li_1#2 render_init::li_1#1 ] ] with [ zp ZP_WORD:57 [ lines_bcd#26 lines_bcd#19 lines_bcd#15 lines_bcd#17 lines_bcd#29 ] ]
Coalescing zero page register [ zp ZP_WORD:105 [ render_init::li_2#2 render_init::li_2#1 ] ] with [ zp ZP_WORD:66 [ current_piece#28 current_piece#10 current_piece#15 current_piece#102 current_piece#93 ] ]
Coalescing zero page register [ zp ZP_BYTE:107 [ render_screen_original::y#6 render_screen_original::y#1 ] ] with [ zp ZP_BYTE:56 [ current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#19 current_ypos#6 play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ] ]
Coalescing zero page register [ zp ZP_WORD:108 [ render_screen_original::oscr#2 render_screen_original::oscr#4 render_screen_original::oscr#1 ] ] with [ zp ZP_WORD:70 [ current_piece_gfx#35 current_piece_gfx#13 current_piece_gfx#18 current_piece_gfx#124 current_piece_gfx#20 current_piece_gfx#21 current_piece_gfx#7 current_piece_gfx#117 ] ]
Coalescing zero page register [ zp ZP_BYTE:124 [ play_movement::key_event#0 ] ] with [ zp ZP_BYTE:90 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:132 [ render_next::next_piece_char#0 ] ] with [ zp ZP_BYTE:92 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] ]
Coalescing zero page register [ zp ZP_WORD:136 [ render_moving::screen_line#0 ] ] with [ zp ZP_WORD:110 [ render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 ] ]
Coalescing zero page register [ zp ZP_WORD:157 [ play_collision::playfield_line#0 ] ] with [ zp ZP_WORD:112 [ render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 ] ]
Coalescing zero page register [ zp ZP_BYTE:178 [ play_update_score::lines_before#0 ] ] with [ zp ZP_BYTE:68 [ current_piece_char#29 current_piece_char#10 current_piece_char#16 current_piece_char#5 ] ]
Coalescing zero page register [ zp ZP_BYTE:188 [ play_remove_lines::c#0 ] ] with [ zp ZP_BYTE:72 [ current_xpos#43 current_xpos#14 current_xpos#19 current_xpos#100 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ] ]
Coalescing zero page register [ zp ZP_WORD:190 [ play_lock_current::playfield_line#0 ] ] with [ zp ZP_WORD:114 [ render_screen_original::cols#6 render_screen_original::cols#5 render_screen_original::cols#4 render_screen_original::cols#7 render_screen_original::cols#3 render_screen_original::cols#1 render_screen_original::cols#2 ] ]
Coalescing zero page register [ zp ZP_BYTE:192 [ play_lock_current::i#1 ] ] with [ zp ZP_BYTE:159 [ play_collision::i#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:194 [ keyboard_event_pressed::row_bits#0 ] ] with [ zp ZP_BYTE:173 [ play_spawn_current::$7 ] ]
Coalescing zero page register [ zp ZP_WORD:38 [ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 ] ] with [ zp ZP_WORD:19 [ render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#1 render_next::next_piece_gfx#9 render_score::screen#3 render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ] ]
Coalescing zero page register [ zp ZP_BYTE:78 [ play_remove_lines::removed#11 play_remove_lines::removed#8 play_remove_lines::removed#1 play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 ] ] with [ zp ZP_BYTE:25 [ render_screen_render#33 render_screen_render#65 render_next::l#7 render_next::l#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:80 [ play_remove_lines::x#2 play_remove_lines::x#1 play_collision::l#6 play_collision::l#1 ] ] with [ zp ZP_BYTE:36 [ render_playfield::l#2 render_playfield::l#1 current_xpos#59 current_xpos#119 current_xpos#120 ] ]
Coalescing zero page register [ zp ZP_BYTE:81 [ play_remove_lines::full#4 play_remove_lines::full#2 play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 ] ] with [ zp ZP_BYTE:37 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 current_piece_char#68 current_piece_char#100 current_piece_char#101 ] ]
Coalescing zero page register [ zp ZP_BYTE:84 [ play_lock_current::l#6 play_lock_current::l#1 play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 ] ] with [ zp ZP_BYTE:40 [ render_playfield::c#2 render_playfield::c#1 render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:88 [ keyboard_event_pressed::keycode#5 play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 ] ] with [ zp ZP_BYTE:41 [ play_movement::return#2 play_movement::render#1 play_movement::return#0 play_movement::render#2 render_moving::l#4 render_moving::l#1 ] ]
Coalescing zero page register [ zp ZP_WORD:96 [ play_init::pli#2 play_init::pli#1 current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 play_collision::piece_gfx#0 ] ] with [ zp ZP_WORD:21 [ render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#4 render_next::screen_next_area#11 render_next::screen_next_area#3 render_bcd::offset#6 render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ] ]
Coalescing zero page register [ zp ZP_BYTE:124 [ play_movement::key_event#0 keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] ] with [ zp ZP_BYTE:43 [ play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:132 [ render_next::next_piece_char#0 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] ] with [ zp ZP_BYTE:47 [ play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ] ]
Coalescing zero page register [ zp ZP_WORD:190 [ play_lock_current::playfield_line#0 render_screen_original::cols#6 render_screen_original::cols#5 render_screen_original::cols#4 render_screen_original::cols#7 render_screen_original::cols#3 render_screen_original::cols#1 render_screen_original::cols#2 ] ] with [ zp ZP_WORD:105 [ render_init::li_2#2 render_init::li_2#1 current_piece#28 current_piece#10 current_piece#15 current_piece#102 current_piece#93 ] ]
Coalescing zero page register [ zp ZP_BYTE:199 [ keyboard_event_scan::row_scan#0 ] ] with [ zp ZP_BYTE:192 [ play_lock_current::i#1 play_collision::i#1 ] ]
Coalescing zero page register [ zp ZP_WORD:136 [ render_moving::screen_line#0 render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 ] ] with [ zp ZP_WORD:96 [ play_init::pli#2 play_init::pli#1 current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 play_collision::piece_gfx#0 render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#4 render_next::screen_next_area#11 render_next::screen_next_area#3 render_bcd::offset#6 render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ] ]
Coalescing zero page register [ zp ZP_WORD:157 [ play_collision::playfield_line#0 render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 ] ] with [ zp ZP_WORD:38 [ render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#1 render_next::next_piece_gfx#9 render_score::screen#3 render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ] ]
Allocated (was zp ZP_BYTE:4) zp ZP_BYTE:2 [ render_screen_showing#13 render_screen_showing#1 render_screen_showing#0 ]
Allocated (was zp ZP_DWORD:59) zp ZP_DWORD:3 [ score_bcd#26 score_bcd#18 score_bcd#14 score_bcd#0 score_bcd#16 score_bcd#29 ]
Allocated (was zp ZP_BYTE:63) zp ZP_BYTE:7 [ level#33 level#10 level#17 level#19 level#21 ]
Allocated (was zp ZP_BYTE:64) zp ZP_BYTE:8 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#21 current_movedown_slow#1 current_movedown_slow#23 current_movedown_slow#66 current_movedown_slow#10 ]
Allocated (was zp ZP_BYTE:65) zp ZP_BYTE:9 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ]
Allocated (was zp ZP_BYTE:74) zp ZP_BYTE:10 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 next_piece_idx#16 play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ]
Allocated (was zp ZP_BYTE:75) zp ZP_BYTE:11 [ game_over#65 game_over#27 game_over#10 game_over#15 game_over#52 ]
Allocated (was zp ZP_BYTE:77) zp ZP_BYTE:12 [ play_remove_lines::y#8 play_remove_lines::y#1 current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ]
Allocated (was zp ZP_BYTE:78) zp ZP_BYTE:13 [ play_remove_lines::removed#11 play_remove_lines::removed#8 play_remove_lines::removed#1 play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 render_screen_render#33 render_screen_render#65 render_next::l#7 render_next::l#1 ]
Allocated (was zp ZP_BYTE:80) zp ZP_BYTE:14 [ play_remove_lines::x#2 play_remove_lines::x#1 play_collision::l#6 play_collision::l#1 render_playfield::l#2 render_playfield::l#1 current_xpos#59 current_xpos#119 current_xpos#120 ]
Allocated (was zp ZP_BYTE:81) zp ZP_BYTE:15 [ play_remove_lines::full#4 play_remove_lines::full#2 play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 current_piece_char#68 current_piece_char#100 current_piece_char#101 ]
Allocated (was zp ZP_BYTE:84) zp ZP_BYTE:16 [ play_lock_current::l#6 play_lock_current::l#1 play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 render_playfield::c#2 render_playfield::c#1 render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ]
Allocated (was zp ZP_BYTE:85) zp ZP_BYTE:17 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ]
Allocated (was zp ZP_BYTE:88) zp ZP_BYTE:18 [ keyboard_event_pressed::keycode#5 play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 play_movement::return#2 play_movement::render#1 play_movement::return#0 play_movement::render#2 render_moving::l#4 render_moving::l#1 ]
Allocated (was zp ZP_BYTE:93) zp ZP_BYTE:19 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ]
Allocated (was zp ZP_BYTE:98) zp ZP_BYTE:20 [ play_init::idx#2 play_init::idx#1 render_screen_show#16 render_screen_show#13 ]
Allocated (was zp ZP_BYTE:101) zp ZP_BYTE:21 [ sprites_init::xpos#2 sprites_init::xpos#1 render_screen_render#18 render_screen_render#11 ]
Allocated (was zp ZP_WORD:103) zp ZP_WORD:22 [ render_init::li_1#2 render_init::li_1#1 lines_bcd#26 lines_bcd#19 lines_bcd#15 lines_bcd#17 lines_bcd#29 ]
Allocated (was zp ZP_BYTE:107) zp ZP_BYTE:24 [ render_screen_original::y#6 render_screen_original::y#1 current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#19 current_ypos#6 play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ]
Allocated (was zp ZP_WORD:108) zp ZP_WORD:25 [ render_screen_original::oscr#2 render_screen_original::oscr#4 render_screen_original::oscr#1 current_piece_gfx#35 current_piece_gfx#13 current_piece_gfx#18 current_piece_gfx#124 current_piece_gfx#20 current_piece_gfx#21 current_piece_gfx#7 current_piece_gfx#117 ]
Allocated (was zp ZP_BYTE:117) zp ZP_BYTE:27 [ sprites_irq::raster_sprite_gfx_modify#0 ]
Allocated (was zp ZP_BYTE:118) zp ZP_BYTE:28 [ irq_raster_next#0 irq_raster_next#4 irq_raster_next#1 irq_raster_next#2 irq_raster_next#3 ]
Allocated (was zp ZP_BYTE:119) zp ZP_BYTE:29 [ irq_sprite_ypos#0 irq_sprite_ypos#11 irq_sprite_ypos#1 irq_sprite_ypos#2 irq_sprite_ypos#3 ]
Allocated (was zp ZP_BYTE:120) zp ZP_BYTE:30 [ irq_sprite_ptr#0 irq_sprite_ptr#11 irq_sprite_ptr#1 irq_sprite_ptr#2 irq_sprite_ptr#3 ]
Allocated (was zp ZP_BYTE:121) zp ZP_BYTE:31 [ irq_cnt#0 irq_cnt#3 irq_cnt#1 irq_cnt#2 ]
Allocated (was zp ZP_BYTE:124) zp ZP_BYTE:32 [ play_movement::key_event#0 keyboard_event_scan::row#2 keyboard_event_scan::row#1 play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ]
Allocated (was zp ZP_BYTE:132) zp ZP_BYTE:33 [ render_next::next_piece_char#0 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ]
Allocated (was zp ZP_WORD:136) zp ZP_WORD:34 [ render_moving::screen_line#0 render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 play_init::pli#2 play_init::pli#1 current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 play_collision::piece_gfx#0 render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#4 render_next::screen_next_area#11 render_next::screen_next_area#3 render_bcd::offset#6 render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ]
Allocated (was zp ZP_WORD:157) zp ZP_WORD:36 [ play_collision::playfield_line#0 render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#1 render_next::next_piece_gfx#9 render_score::screen#3 render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ]
Allocated (was zp ZP_BYTE:178) zp ZP_BYTE:38 [ play_update_score::lines_before#0 current_piece_char#29 current_piece_char#10 current_piece_char#16 current_piece_char#5 ]
Allocated (was zp ZP_DWORD:180) zp ZP_DWORD:39 [ play_update_score::add_bcd#0 ]
Allocated (was zp ZP_BYTE:188) zp ZP_BYTE:43 [ play_remove_lines::c#0 current_xpos#43 current_xpos#14 current_xpos#19 current_xpos#100 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ]
Allocated (was zp ZP_WORD:190) zp ZP_WORD:44 [ play_lock_current::playfield_line#0 render_screen_original::cols#6 render_screen_original::cols#5 render_screen_original::cols#4 render_screen_original::cols#7 render_screen_original::cols#3 render_screen_original::cols#1 render_screen_original::cols#2 render_init::li_2#2 render_init::li_2#1 current_piece#28 current_piece#10 current_piece#15 current_piece#102 current_piece#93 ]
Allocated (was zp ZP_BYTE:194) zp ZP_BYTE:46 [ keyboard_event_pressed::row_bits#0 play_spawn_current::$7 ]
Allocated (was zp ZP_BYTE:199) zp ZP_BYTE:47 [ keyboard_event_scan::row_scan#0 play_lock_current::i#1 play_collision::i#1 ]
Interrupt procedure sprites_irq clobbers AXCNZV
Removing interrupt register storage sty regy+1 in CHU1194 entry interrupt(HARDWARE_CLOBBER)
Removing interrupt register storage regy: in CHU1233 [577] return  - exit interrupt(HARDWARE_CLOBBER)
Removing interrupt register storage ldy #00 in CHU1233 [577] return  - exit interrupt(HARDWARE_CLOBBER)

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tetris Game for the Commodore 64
// The tetris game tries to match NES tetris gameplay pretty closely
// Source: https://meatfighter.com/nintendotetrisai/
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = 5
  // The offset of the sprite pointers from the screen start address
  .const SPRITE_PTRS = $3f8
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label BORDERCOL = $d020
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label BGCOL4 = $d024
  .label SPRITES_COLS = $d027
  .label VIC_CONTROL = $d011
  .label D011 = $d011
  .const VIC_ECM = $40
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label D018 = $d018
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Bits for the IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // Color Ram
  .label COLS = $d800
  // CIA#1 Port A: keyboard matrix columns and joystick #2
  .label CIA1_PORT_A = $dc00
  // CIA#1 Port B: keyboard matrix rows and joystick #1.
  .label CIA1_PORT_B = $dc01
  // CIA#1 Interrupt Status & Control Register
  .label CIA1_INTERRUPT = $dc0d
  // CIA#2 Port A: Serial bus, RS-232, VIC memory bank
  .label CIA2_PORT_A = $dd00
  // CIA #2 Port A data direction register.
  .label CIA2_PORT_A_DDR = $dd02
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  // The colors of the C64
  .const BLACK = 0
  .const RED = 2
  .const CYAN = 3
  .const PURPLE = 4
  .const GREEN = 5
  .const BLUE = 6
  .const ORANGE = 8
  .const PINK = $a
  .const DARK_GREY = $b
  .const GREY = $c
  .const LIGHT_GREEN = $d
  .const LIGHT_BLUE = $e
  .const KEY_Z = $c
  .const KEY_LSHIFT = $f
  .const KEY_X = $17
  .const KEY_DOT = $2c
  .const KEY_COMMA = $2f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  // SID registers for random number generation
  .label SID_VOICE3_FREQ = $d40e
  .label SID_VOICE3_CONTROL = $d412
  .const SID_CONTROL_NOISE = $80
  .label SID_VOICE3_OSC = $d41b
  // Address of the first screen
  .label PLAYFIELD_SCREEN_1 = $400
  // Address of the second screen
  .label PLAYFIELD_SCREEN_2 = $2c00
  // Address of the original playscreen chars
  .label PLAYFIELD_SCREEN_ORIGINAL = $1800
  // Address of the original playscreen colors
  .label PLAYFIELD_COLORS_ORIGINAL = $1c00
  // Address of the sprites covering the playfield
  .label PLAYFIELD_SPRITES = $2000
  // Address of the charset
  .label PLAYFIELD_CHARSET = $2800
  // The size of the playfield
  .const PLAYFIELD_LINES = $16
  .const PLAYFIELD_COLS = $a
  // The Y-position of the first sprite row
  .const SPRITES_FIRST_YPOS = $31
  // The rate of moving down the current piece fast (number of frames between moves if movedown is not forced)
  .const current_movedown_fast = $a
  // No collision
  .const COLLISION_NONE = 0
  // Playfield piece collision (cell on top of other cell on the playfield)
  .const COLLISION_PLAYFIELD = 1
  // Bottom collision (cell below bottom of the playfield)
  .const COLLISION_BOTTOM = 2
  // Left side collision (cell beyond the left side of the playfield)
  .const COLLISION_LEFT = 4
  // Right side collision (cell beyond the right side of the playfield)
  .const COLLISION_RIGHT = 8
  // Screen Sprite pointers on screen 1
  .label PLAYFIELD_SPRITE_PTRS_1 = PLAYFIELD_SCREEN_1+SPRITE_PTRS
  // Screen Sprite pointers on screen 2
  .label PLAYFIELD_SPRITE_PTRS_2 = PLAYFIELD_SCREEN_2+SPRITE_PTRS
  // The line of the first IRQ
  .const IRQ_RASTER_FIRST = SPRITES_FIRST_YPOS+$13
  .const toSpritePtr1_return = PLAYFIELD_SPRITES/$40
  .label keyboard_events_size = $13
  .label render_screen_showing = 2
  .label score_bcd = 3
  .label irq_raster_next = $1c
  .label irq_sprite_ypos = $1d
  .label irq_sprite_ptr = $1e
  .label irq_cnt = $1f
  .label current_movedown_slow = 8
  .label current_ypos = $18
  .label current_xpos = $2b
  .label current_orientation = $11
  .label current_piece_gfx = $19
  .label current_piece_char = $26
  .label level_bcd = 9
  .label current_piece = $2c
  .label game_over = $b
  .label next_piece_idx = $a
  .label level = 7
  .label render_screen_render = $15
  .label render_screen_show = $14
  .label current_movedown_counter = $c
  .label lines_bcd = $16
  .label current_piece_17 = $22
  .label render_screen_render_33 = $d
  .label current_xpos_59 = $e
  .label current_piece_gfx_64 = $24
  .label current_piece_char_68 = $f
  .label render_screen_render_65 = $d
  .label current_xpos_119 = $e
  .label current_xpos_120 = $e
  .label current_piece_gfx_112 = $24
  .label current_piece_gfx_113 = $24
  .label current_piece_char_100 = $f
  .label current_piece_char_101 = $f
  .label current_piece_96 = $22
  .label current_piece_97 = $22
  .label current_piece_98 = $22
  .label current_piece_99 = $22
  .label current_piece_100 = $22
  // @begin
bbegin:
  jmp b1
  // @1
b1:
  // [1] (byte) render_screen_showing#0 ← (byte) 0 -- vbuz1=vbuc1 
  // The screen currently being showed to the user. $00 for screen 1 / $20 for screen 2.
  lda #0
  sta.z render_screen_showing
  // [2] (dword) score_bcd#0 ← (byte) 0 -- vduz1=vbuc1 
  // Current score in BCD-format
  lda #0
  sta.z score_bcd
  lda #0
  sta.z score_bcd+1
  sta.z score_bcd+2
  sta.z score_bcd+3
  // kickasm(location (const byte*) PLAYFIELD_CHARSET#0) {{ .fill 8,$00 // Place a filled char at the start of the charset     .import binary "playfield-screen.imap"  }}
  // kickasm(location (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0) {{ // Load chars for the screen   .var screen = LoadBinary("playfield-screen.iscr")    // Load extended colors for the screen   .var extended = LoadBinary("playfield-extended.col")   // screen.get(i)+1 because the charset is loaded into PLAYFIELD_CHARSET+8   // extended.get(i)-1 because the extended colors are 1-based (1/2/3/4)   // <<6 to move extended colors to the upper 2 bits   .fill screen.getSize(), ( (screen.get(i)+1) | (extended.get(i)-1)<<6 )  }}
  // kickasm(location (const byte*) PLAYFIELD_COLORS_ORIGINAL#0) {{ .import binary "playfield-screen.col"  }}
  // Original Color Data
  jmp b2
  // @2
b2:
  // kickasm(location (const byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000)) 	// Put the sprites into memory  	.for(var sy=0;sy<10;sy++) { 	    .var sprite_gfx_y = sy*20 		.for(var sx=0;sx<3;sx++) { 	    	.for (var y=0;y<21; y++) { 	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21) 		    	.for (var c=0; c<3; c++) { 	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y) 	            } 	        } 	    	.byte 0 	  	} 	}  }}
  jmp b3
  // @3
b3:
  // [7] (byte) irq_raster_next#0 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
  // The raster line of the next IRQ
  lda #IRQ_RASTER_FIRST
  sta.z irq_raster_next
  // [8] (byte) irq_sprite_ypos#0 ← (const byte) SPRITES_FIRST_YPOS#0+(byte) $15 -- vbuz1=vbuc1 
  // Y-pos of the sprites on the next IRQ
  lda #SPRITES_FIRST_YPOS+$15
  sta.z irq_sprite_ypos
  // [9] phi from @3 to toSpritePtr1 [phi:@3->toSpritePtr1]
toSpritePtr1_from_b3:
  jmp toSpritePtr1
  // toSpritePtr1
toSpritePtr1:
  jmp b5
  // @5
b5:
  // [10] (byte) irq_sprite_ptr#0 ← (const byte) toSpritePtr1_return#0+(byte) 3 -- vbuz1=vbuc1 
  // Index of the sprites to show on the next IRQ
  lda #toSpritePtr1_return+3
  sta.z irq_sprite_ptr
  // [11] (byte) irq_cnt#0 ← (byte) 0 -- vbuz1=vbuc1 
  // Counting the 10 IRQs
  lda #0
  sta.z irq_cnt
  // [12] phi from @5 to @4 [phi:@5->@4]
b4_from_b5:
  jmp b4
  // @4
b4:
  // [13] call main 
  // [15] phi from @4 to main [phi:@4->main]
main_from_b4:
  jsr main
  // [14] phi from @4 to @end [phi:@4->@end]
bend_from_b4:
  jmp bend
  // @end
bend:
  // main
main: {
    // [16] call sid_rnd_init 
    jsr sid_rnd_init
    jmp b8
    // main::@8
  b8:
    // asm { sei  }
    sei
    // [18] call render_init 
    // [498] phi from main::@8 to render_init [phi:main::@8->render_init]
  render_init_from_b8:
    jsr render_init
    // [19] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  b9_from_b8:
    jmp b9
    // main::@9
  b9:
    // [20] call sprites_init 
    jsr sprites_init
    // [21] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  b10_from_b9:
    jmp b10
    // main::@10
  b10:
    // [22] call sprites_irq_init 
    jsr sprites_irq_init
    // [23] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  b11_from_b10:
    jmp b11
    // main::@11
  b11:
    // [24] call play_init 
    // [457] phi from main::@11 to play_init [phi:main::@11->play_init]
  play_init_from_b11:
    jsr play_init
    // [25] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  b12_from_b11:
    jmp b12
    // main::@12
  b12:
    // [26] call play_spawn_current 
    // [287] phi from main::@12 to play_spawn_current [phi:main::@12->play_spawn_current]
  play_spawn_current_from_b12:
    // [287] phi (byte) game_over#65 = (byte) 0 [phi:main::@12->play_spawn_current#0] -- vbuz1=vbuc1 
    lda #0
    sta.z game_over
    // [287] phi (byte) next_piece_idx#17 = (byte) 0 [phi:main::@12->play_spawn_current#1] -- vbuz1=vbuc1 
    lda #0
    sta.z next_piece_idx
    jsr play_spawn_current
    // [27] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  b13_from_b12:
    jmp b13
    // main::@13
  b13:
    // [28] call play_spawn_current 
    // [287] phi from main::@13 to play_spawn_current [phi:main::@13->play_spawn_current]
  play_spawn_current_from_b13:
    // [287] phi (byte) game_over#65 = (byte) game_over#52 [phi:main::@13->play_spawn_current#0] -- register_copy 
    // [287] phi (byte) next_piece_idx#17 = (byte) play_spawn_current::piece_idx#2 [phi:main::@13->play_spawn_current#1] -- register_copy 
    jsr play_spawn_current
    // [29] phi from main::@13 to main::@14 [phi:main::@13->main::@14]
  b14_from_b13:
    jmp b14
    // main::@14
  b14:
    // [30] call render_playfield 
    // [152] phi from main::@14 to render_playfield [phi:main::@14->render_playfield]
  render_playfield_from_b14:
    // [152] phi (byte) render_screen_render#22 = (byte) $20 [phi:main::@14->render_playfield#0] -- vbuxx=vbuc1 
    ldx #$20
    jsr render_playfield
    jmp b15
    // main::@15
  b15:
    // [31] (byte~) current_ypos#98 ← (byte) current_ypos#6 -- vbuxx=vbuz1 
    ldx.z current_ypos
    // [32] (byte~) current_xpos#119 ← (byte) current_xpos#100 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z current_xpos_119
    // [33] (byte*~) current_piece_gfx#112 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current._7
    lda PIECES,y
    sta.z current_piece_gfx_112
    lda PIECES+1,y
    sta.z current_piece_gfx_112+1
    // [34] (byte~) current_piece_char#100 ← (byte) current_piece_char#5 -- vbuz1=vbuz2 
    lda.z current_piece_char
    sta.z current_piece_char_100
    // [35] call render_moving 
    // [130] phi from main::@15 to render_moving [phi:main::@15->render_moving]
  render_moving_from_b15:
    // [130] phi (byte) current_piece_char#68 = (byte~) current_piece_char#100 [phi:main::@15->render_moving#0] -- register_copy 
    // [130] phi (byte*) current_piece_gfx#64 = (byte*~) current_piece_gfx#112 [phi:main::@15->render_moving#1] -- register_copy 
    // [130] phi (byte) current_xpos#59 = (byte~) current_xpos#119 [phi:main::@15->render_moving#2] -- register_copy 
    // [130] phi (byte) render_screen_render#33 = (byte) $20 [phi:main::@15->render_moving#3] -- vbuz1=vbuc1 
    lda #$20
    sta.z render_screen_render_33
    // [130] phi (byte) current_ypos#13 = (byte~) current_ypos#98 [phi:main::@15->render_moving#4] -- register_copy 
    jsr render_moving
    jmp b16
    // main::@16
  b16:
    // [36] (byte~) next_piece_idx#77 ← (byte) play_spawn_current::piece_idx#2 -- vbuxx=vbuz1 
    ldx.z play_spawn_current.piece_idx
    // [37] call render_next 
    // [109] phi from main::@16 to render_next [phi:main::@16->render_next]
  render_next_from_b16:
    // [109] phi (byte) next_piece_idx#12 = (byte~) next_piece_idx#77 [phi:main::@16->render_next#0] -- register_copy 
    // [109] phi (byte) render_screen_render#15 = (byte) $20 [phi:main::@16->render_next#1] -- vbuaa=vbuc1 
    lda #$20
    jsr render_next
    jmp b17
    // main::@17
  b17:
    // [38] (byte*~) current_piece#102 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current._7
    lda PIECES,y
    sta.z current_piece
    lda PIECES+1,y
    sta.z current_piece+1
    // [39] (byte*~) current_piece_gfx#124 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current._7
    lda PIECES,y
    sta.z current_piece_gfx
    lda PIECES+1,y
    sta.z current_piece_gfx+1
    // [40] phi from main::@17 to main::@1 [phi:main::@17->main::@1]
  b1_from_b17:
    // [40] phi (byte) level_bcd#11 = (byte) 0 [phi:main::@17->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z level_bcd
    // [40] phi (byte) level#10 = (byte) 0 [phi:main::@17->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z level
    // [40] phi (dword) score_bcd#18 = (dword) score_bcd#0 [phi:main::@17->main::@1#2] -- register_copy 
    // [40] phi (word) lines_bcd#19 = (byte) 0 [phi:main::@17->main::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta.z lines_bcd
    lda #>0
    sta.z lines_bcd+1
    // [40] phi (byte) current_movedown_counter#16 = (byte) 0 [phi:main::@17->main::@1#4] -- vbuz1=vbuc1 
    lda #0
    sta.z current_movedown_counter
    // [40] phi (byte) keyboard_events_size#19 = (byte) 0 [phi:main::@17->main::@1#5] -- vbuz1=vbuc1 
    lda #0
    sta.z keyboard_events_size
    // [40] phi (byte) render_screen_showing#13 = (byte) render_screen_showing#0 [phi:main::@17->main::@1#6] -- register_copy 
    // [40] phi (byte) next_piece_idx#10 = (byte) play_spawn_current::piece_idx#2 [phi:main::@17->main::@1#7] -- register_copy 
    // [40] phi (byte) game_over#10 = (byte) game_over#52 [phi:main::@17->main::@1#8] -- register_copy 
    // [40] phi (byte) current_ypos#11 = (byte) current_ypos#6 [phi:main::@17->main::@1#9] -- register_copy 
    // [40] phi (byte) current_xpos#14 = (byte) current_xpos#100 [phi:main::@17->main::@1#10] -- register_copy 
    // [40] phi (byte*) current_piece_gfx#13 = (byte*~) current_piece_gfx#124 [phi:main::@17->main::@1#11] -- register_copy 
    // [40] phi (byte) current_orientation#13 = (byte) 0 [phi:main::@17->main::@1#12] -- vbuz1=vbuc1 
    lda #0
    sta.z current_orientation
    // [40] phi (byte) current_piece_char#10 = (byte) current_piece_char#5 [phi:main::@17->main::@1#13] -- register_copy 
    // [40] phi (byte*) current_piece#10 = (byte*~) current_piece#102 [phi:main::@17->main::@1#14] -- register_copy 
    // [40] phi (byte) current_movedown_slow#14 = (byte) current_movedown_slow#1 [phi:main::@17->main::@1#15] -- register_copy 
    // [40] phi (byte) render_screen_render#18 = (byte) $20 [phi:main::@17->main::@1#16] -- vbuz1=vbuc1 
    lda #$20
    sta.z render_screen_render
    // [40] phi (byte) render_screen_show#16 = (byte) 0 [phi:main::@17->main::@1#17] -- vbuz1=vbuc1 
    lda #0
    sta.z render_screen_show
    jmp b1
    // [40] phi from main::@25 main::@6 to main::@1 [phi:main::@25/main::@6->main::@1]
  b1_from_b25:
  b1_from_b6:
    // [40] phi (byte) level_bcd#11 = (byte) level_bcd#17 [phi:main::@25/main::@6->main::@1#0] -- register_copy 
    // [40] phi (byte) level#10 = (byte) level#17 [phi:main::@25/main::@6->main::@1#1] -- register_copy 
    // [40] phi (dword) score_bcd#18 = (dword) score_bcd#14 [phi:main::@25/main::@6->main::@1#2] -- register_copy 
    // [40] phi (word) lines_bcd#19 = (word) lines_bcd#15 [phi:main::@25/main::@6->main::@1#3] -- register_copy 
    // [40] phi (byte) current_movedown_counter#16 = (byte) current_movedown_counter#14 [phi:main::@25/main::@6->main::@1#4] -- register_copy 
    // [40] phi (byte) keyboard_events_size#19 = (byte) keyboard_events_size#16 [phi:main::@25/main::@6->main::@1#5] -- register_copy 
    // [40] phi (byte) render_screen_showing#13 = (byte) render_screen_showing#1 [phi:main::@25/main::@6->main::@1#6] -- register_copy 
    // [40] phi (byte) next_piece_idx#10 = (byte) next_piece_idx#16 [phi:main::@25/main::@6->main::@1#7] -- register_copy 
    // [40] phi (byte) game_over#10 = (byte) game_over#15 [phi:main::@25/main::@6->main::@1#8] -- register_copy 
    // [40] phi (byte) current_ypos#11 = (byte) current_ypos#19 [phi:main::@25/main::@6->main::@1#9] -- register_copy 
    // [40] phi (byte) current_xpos#14 = (byte) current_xpos#19 [phi:main::@25/main::@6->main::@1#10] -- register_copy 
    // [40] phi (byte*) current_piece_gfx#13 = (byte*) current_piece_gfx#18 [phi:main::@25/main::@6->main::@1#11] -- register_copy 
    // [40] phi (byte) current_orientation#13 = (byte) current_orientation#17 [phi:main::@25/main::@6->main::@1#12] -- register_copy 
    // [40] phi (byte) current_piece_char#10 = (byte) current_piece_char#16 [phi:main::@25/main::@6->main::@1#13] -- register_copy 
    // [40] phi (byte*) current_piece#10 = (byte*) current_piece#15 [phi:main::@25/main::@6->main::@1#14] -- register_copy 
    // [40] phi (byte) current_movedown_slow#14 = (byte) current_movedown_slow#21 [phi:main::@25/main::@6->main::@1#15] -- register_copy 
    // [40] phi (byte) render_screen_render#18 = (byte) render_screen_render#11 [phi:main::@25/main::@6->main::@1#16] -- register_copy 
    // [40] phi (byte) render_screen_show#16 = (byte) render_screen_show#13 [phi:main::@25/main::@6->main::@1#17] -- register_copy 
    jmp b1
    // main::@1
  b1:
    jmp b2
  // Wait for a frame to pass
    // main::@2
  b2:
    // [41] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b2
    // [42] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
    // main::@3
  b3:
    // [43] call render_show 
    jsr render_show
    // [44] phi from main::@3 to main::@18 [phi:main::@3->main::@18]
  b18_from_b3:
    jmp b18
    // main::@18
  b18:
    // [45] call keyboard_event_scan 
    // [392] phi from main::@18 to keyboard_event_scan [phi:main::@18->keyboard_event_scan]
  keyboard_event_scan_from_b18:
    jsr keyboard_event_scan
    // [46] phi from main::@18 to main::@19 [phi:main::@18->main::@19]
  b19_from_b18:
    jmp b19
    // main::@19
  b19:
    // [47] call keyboard_event_get 
    jsr keyboard_event_get
    // [48] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
    jmp b20
    // main::@20
  b20:
    // [49] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3
    // [50] if((byte) game_over#10==(byte) 0) goto main::@4 -- vbuz1_eq_0_then_la1 
    lda.z game_over
    cmp #0
    beq b4
    jmp b5
    // main::@5
  b5:
    // [51] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp b5
    // main::@4
  b4:
    // [52] (byte) play_movement::key_event#0 ← (byte) main::key_event#0 -- vbuz1=vbuxx 
    stx.z play_movement.key_event
    // [53] call play_movement 
    jsr play_movement
    // [54] (byte) play_movement::return#3 ← (byte) play_movement::return#2 -- vbuaa=vbuz1 
    lda.z play_movement.return
    jmp b21
    // main::@21
  b21:
    // [55] (byte) main::render#1 ← (byte) play_movement::return#3
    jmp b6
    // main::@6
  b6:
    // [56] if((byte) main::render#1==(byte) 0) goto main::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b1_from_b6
    jmp b7
    // main::@7
  b7:
    // [57] (byte~) render_screen_render#64 ← (byte) render_screen_render#18 -- vbuxx=vbuz1 
    ldx.z render_screen_render
    // [58] call render_playfield 
    // [152] phi from main::@7 to render_playfield [phi:main::@7->render_playfield]
  render_playfield_from_b7:
    // [152] phi (byte) render_screen_render#22 = (byte~) render_screen_render#64 [phi:main::@7->render_playfield#0] -- register_copy 
    jsr render_playfield
    jmp b22
    // main::@22
  b22:
    // [59] (byte~) current_ypos#99 ← (byte) current_ypos#19 -- vbuxx=vbuz1 
    ldx.z current_ypos
    // [60] (byte~) render_screen_render#65 ← (byte) render_screen_render#18 -- vbuz1=vbuz2 
    lda.z render_screen_render
    sta.z render_screen_render_65
    // [61] (byte~) current_xpos#120 ← (byte) current_xpos#19 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z current_xpos_120
    // [62] (byte*~) current_piece_gfx#113 ← (byte*) current_piece_gfx#18 -- pbuz1=pbuz2 
    lda.z current_piece_gfx
    sta.z current_piece_gfx_113
    lda.z current_piece_gfx+1
    sta.z current_piece_gfx_113+1
    // [63] (byte~) current_piece_char#101 ← (byte) current_piece_char#16 -- vbuz1=vbuz2 
    lda.z current_piece_char
    sta.z current_piece_char_101
    // [64] call render_moving 
    // [130] phi from main::@22 to render_moving [phi:main::@22->render_moving]
  render_moving_from_b22:
    // [130] phi (byte) current_piece_char#68 = (byte~) current_piece_char#101 [phi:main::@22->render_moving#0] -- register_copy 
    // [130] phi (byte*) current_piece_gfx#64 = (byte*~) current_piece_gfx#113 [phi:main::@22->render_moving#1] -- register_copy 
    // [130] phi (byte) current_xpos#59 = (byte~) current_xpos#120 [phi:main::@22->render_moving#2] -- register_copy 
    // [130] phi (byte) render_screen_render#33 = (byte~) render_screen_render#65 [phi:main::@22->render_moving#3] -- register_copy 
    // [130] phi (byte) current_ypos#13 = (byte~) current_ypos#99 [phi:main::@22->render_moving#4] -- register_copy 
    jsr render_moving
    jmp b23
    // main::@23
  b23:
    // [65] (byte~) render_screen_render#66 ← (byte) render_screen_render#18 -- vbuaa=vbuz1 
    lda.z render_screen_render
    // [66] (byte~) next_piece_idx#78 ← (byte) next_piece_idx#16 -- vbuxx=vbuz1 
    ldx.z next_piece_idx
    // [67] call render_next 
    // [109] phi from main::@23 to render_next [phi:main::@23->render_next]
  render_next_from_b23:
    // [109] phi (byte) next_piece_idx#12 = (byte~) next_piece_idx#78 [phi:main::@23->render_next#0] -- register_copy 
    // [109] phi (byte) render_screen_render#15 = (byte~) render_screen_render#66 [phi:main::@23->render_next#1] -- register_copy 
    jsr render_next
    // [68] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
  b24_from_b23:
    jmp b24
    // main::@24
  b24:
    // [69] call render_score 
    jsr render_score
    // [70] phi from main::@24 to main::@25 [phi:main::@24->main::@25]
  b25_from_b24:
    jmp b25
    // main::@25
  b25:
    // [71] call render_screen_swap 
    jsr render_screen_swap
    jmp b1_from_b25
}
  // render_screen_swap
// Swap rendering to the other screen (used for double buffering)
render_screen_swap: {
    // [72] (byte) render_screen_render#11 ← (byte) render_screen_render#18 ^ (byte) $20 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #$20
    eor.z render_screen_render
    sta.z render_screen_render
    // [73] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte) $20 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #$20
    eor.z render_screen_show
    sta.z render_screen_show
    jmp breturn
    // render_screen_swap::@return
  breturn:
    // [74] return 
    rts
}
  // render_score
// Show the current score
render_score: {
    .const score_offset = $28*5+$1c
    .const lines_offset = $28*1+$16
    .const level_offset = $28*$13+$1f
    .label score_bytes = score_bcd
    .label screen = $24
    // [75] if((byte) render_screen_render#18==(byte) 0) goto render_score::@1 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_render
    cmp #0
    beq b1_from_render_score
    // [77] phi from render_score to render_score::@2 [phi:render_score->render_score::@2]
  b2_from_render_score:
    // [77] phi (byte*) render_score::screen#3 = (const byte*) PLAYFIELD_SCREEN_2#0 [phi:render_score->render_score::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2
    sta.z screen
    lda #>PLAYFIELD_SCREEN_2
    sta.z screen+1
    jmp b2
    // [76] phi from render_score to render_score::@1 [phi:render_score->render_score::@1]
  b1_from_render_score:
    jmp b1
    // render_score::@1
  b1:
    // [77] phi from render_score::@1 to render_score::@2 [phi:render_score::@1->render_score::@2]
  b2_from_b1:
    // [77] phi (byte*) render_score::screen#3 = (const byte*) PLAYFIELD_SCREEN_1#0 [phi:render_score::@1->render_score::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1
    sta.z screen
    lda #>PLAYFIELD_SCREEN_1
    sta.z screen+1
    jmp b2
    // render_score::@2
  b2:
    // [78] (byte*) render_bcd::screen#0 ← (byte*) render_score::screen#3
    // [79] (byte) render_bcd::bcd#0 ← *((const byte*) render_score::score_bytes#0+(byte) 2) -- vbuxx=_deref_pbuc1 
    ldx score_bytes+2
    // [80] call render_bcd 
    // [97] phi from render_score::@2 to render_bcd [phi:render_score::@2->render_bcd]
  render_bcd_from_b2:
    // [97] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#0 [phi:render_score::@2->render_bcd#0] -- register_copy 
    // [97] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@2->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [97] phi (word) render_bcd::offset#6 = (const word) render_score::score_offset#0 [phi:render_score::@2->render_bcd#2] -- vwuz1=vwuc1 
    lda #<score_offset
    sta.z render_bcd.offset
    lda #>score_offset
    sta.z render_bcd.offset+1
    // [97] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#0 [phi:render_score::@2->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp b3
    // render_score::@3
  b3:
    // [81] (byte*) render_bcd::screen#1 ← (byte*) render_score::screen#3
    // [82] (byte) render_bcd::bcd#1 ← *((const byte*) render_score::score_bytes#0+(byte) 1) -- vbuxx=_deref_pbuc1 
    ldx score_bytes+1
    // [83] call render_bcd 
    // [97] phi from render_score::@3 to render_bcd [phi:render_score::@3->render_bcd]
  render_bcd_from_b3:
    // [97] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#1 [phi:render_score::@3->render_bcd#0] -- register_copy 
    // [97] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@3->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [97] phi (word) render_bcd::offset#6 = (const word) render_score::score_offset#0+(byte) 2 [phi:render_score::@3->render_bcd#2] -- vwuz1=vwuc1 
    lda #<score_offset+2
    sta.z render_bcd.offset
    lda #>score_offset+2
    sta.z render_bcd.offset+1
    // [97] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#1 [phi:render_score::@3->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp b4
    // render_score::@4
  b4:
    // [84] (byte*) render_bcd::screen#2 ← (byte*) render_score::screen#3
    // [85] (byte) render_bcd::bcd#2 ← *((const byte*) render_score::score_bytes#0) -- vbuxx=_deref_pbuc1 
    ldx.z score_bytes
    // [86] call render_bcd 
    // [97] phi from render_score::@4 to render_bcd [phi:render_score::@4->render_bcd]
  render_bcd_from_b4:
    // [97] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#2 [phi:render_score::@4->render_bcd#0] -- register_copy 
    // [97] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@4->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [97] phi (word) render_bcd::offset#6 = (const word) render_score::score_offset#0+(byte) 4 [phi:render_score::@4->render_bcd#2] -- vwuz1=vwuc1 
    lda #<score_offset+4
    sta.z render_bcd.offset
    lda #>score_offset+4
    sta.z render_bcd.offset+1
    // [97] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#2 [phi:render_score::@4->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp b5
    // render_score::@5
  b5:
    // [87] (byte) render_bcd::bcd#3 ← > (word) lines_bcd#15 -- vbuxx=_hi_vwuz1 
    lda.z lines_bcd+1
    tax
    // [88] (byte*) render_bcd::screen#3 ← (byte*) render_score::screen#3
    // [89] call render_bcd 
    // [97] phi from render_score::@5 to render_bcd [phi:render_score::@5->render_bcd]
  render_bcd_from_b5:
    // [97] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#3 [phi:render_score::@5->render_bcd#0] -- register_copy 
    // [97] phi (byte) render_bcd::only_low#6 = (byte) 1 [phi:render_score::@5->render_bcd#1] -- vbuyy=vbuc1 
    ldy #1
    // [97] phi (word) render_bcd::offset#6 = (const word) render_score::lines_offset#0 [phi:render_score::@5->render_bcd#2] -- vwuz1=vwuc1 
    lda #<lines_offset
    sta.z render_bcd.offset
    lda #>lines_offset
    sta.z render_bcd.offset+1
    // [97] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#3 [phi:render_score::@5->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp b6
    // render_score::@6
  b6:
    // [90] (byte) render_bcd::bcd#4 ← < (word) lines_bcd#15 -- vbuxx=_lo_vwuz1 
    lda.z lines_bcd
    tax
    // [91] (byte*) render_bcd::screen#4 ← (byte*) render_score::screen#3
    // [92] call render_bcd 
    // [97] phi from render_score::@6 to render_bcd [phi:render_score::@6->render_bcd]
  render_bcd_from_b6:
    // [97] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#4 [phi:render_score::@6->render_bcd#0] -- register_copy 
    // [97] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@6->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [97] phi (word) render_bcd::offset#6 = (const word) render_score::lines_offset#0+(byte) 1 [phi:render_score::@6->render_bcd#2] -- vwuz1=vwuc1 
    lda #<lines_offset+1
    sta.z render_bcd.offset
    lda #>lines_offset+1
    sta.z render_bcd.offset+1
    // [97] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#4 [phi:render_score::@6->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp b7
    // render_score::@7
  b7:
    // [93] (byte*) render_bcd::screen#5 ← (byte*) render_score::screen#3
    // [94] (byte) render_bcd::bcd#5 ← (byte) level_bcd#17 -- vbuxx=vbuz1 
    ldx.z level_bcd
    // [95] call render_bcd 
    // [97] phi from render_score::@7 to render_bcd [phi:render_score::@7->render_bcd]
  render_bcd_from_b7:
    // [97] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#5 [phi:render_score::@7->render_bcd#0] -- register_copy 
    // [97] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@7->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [97] phi (word) render_bcd::offset#6 = (const word) render_score::level_offset#0 [phi:render_score::@7->render_bcd#2] -- vwuz1=vwuc1 
    lda #<level_offset
    sta.z render_bcd.offset
    lda #>level_offset
    sta.z render_bcd.offset+1
    // [97] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#5 [phi:render_score::@7->render_bcd#3] -- register_copy 
    jsr render_bcd
    jmp breturn
    // render_score::@return
  breturn:
    // [96] return 
    rts
}
  // render_bcd
// Render BCD digits on a screen.
// - screen: pointer to the screen to render on
// - offset: offset on the screen
// - bcd: The BCD-value to render
// - only_low: if non-zero only renders the low digit
// render_bcd(byte* zeropage($24) screen, word zeropage($22) offset, byte register(X) bcd, byte register(Y) only_low)
render_bcd: {
    .const ZERO_CHAR = $35
    .label screen = $24
    .label screen_pos = $22
    .label offset = $22
    // [98] (byte*) render_bcd::screen_pos#0 ← (byte*) render_bcd::screen#6 + (word) render_bcd::offset#6 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z screen_pos
    clc
    adc.z screen
    sta.z screen_pos
    lda.z screen_pos+1
    adc.z screen+1
    sta.z screen_pos+1
    // [99] if((byte) render_bcd::only_low#6!=(byte) 0) goto render_bcd::@1 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne b1_from_render_bcd
    jmp b2
    // render_bcd::@2
  b2:
    // [100] (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#6 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [101] (byte~) render_bcd::$6 ← (const byte) render_bcd::ZERO_CHAR#0 + (byte~) render_bcd::$5 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #ZERO_CHAR
    // [102] *((byte*) render_bcd::screen_pos#0) ← (byte~) render_bcd::$6 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (screen_pos),y
    // [103] (byte*) render_bcd::screen_pos#2 ← ++ (byte*) render_bcd::screen_pos#0 -- pbuz1=_inc_pbuz1 
    inc.z screen_pos
    bne !+
    inc.z screen_pos+1
  !:
    // [104] phi from render_bcd render_bcd::@2 to render_bcd::@1 [phi:render_bcd/render_bcd::@2->render_bcd::@1]
  b1_from_render_bcd:
  b1_from_b2:
    // [104] phi (byte*) render_bcd::screen_pos#3 = (byte*) render_bcd::screen_pos#0 [phi:render_bcd/render_bcd::@2->render_bcd::@1#0] -- register_copy 
    jmp b1
    // render_bcd::@1
  b1:
    // [105] (byte~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (byte) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [106] (byte~) render_bcd::$4 ← (const byte) render_bcd::ZERO_CHAR#0 + (byte~) render_bcd::$3 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #ZERO_CHAR
    // [107] *((byte*) render_bcd::screen_pos#3) ← (byte~) render_bcd::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (screen_pos),y
    jmp breturn
    // render_bcd::@return
  breturn:
    // [108] return 
    rts
}
  // render_next
// Render the next tetromino in the "next" area
render_next: {
    // Find the screen area
    .const next_area_offset = $28*$c+$18+4
    .label next_piece_char = $21
    .label next_piece_gfx = $24
    .label screen_next_area = $22
    .label l = $d
    // [110] if((byte) render_screen_render#15==(byte) 0) goto render_next::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b1_from_render_next
    // [112] phi from render_next to render_next::@2 [phi:render_next->render_next::@2]
  b2_from_render_next:
    // [112] phi (byte*) render_next::screen_next_area#11 = (const byte*) PLAYFIELD_SCREEN_2#0+(const word) render_next::next_area_offset#0 [phi:render_next->render_next::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2+next_area_offset
    sta.z screen_next_area
    lda #>PLAYFIELD_SCREEN_2+next_area_offset
    sta.z screen_next_area+1
    jmp b2
    // [111] phi from render_next to render_next::@1 [phi:render_next->render_next::@1]
  b1_from_render_next:
    jmp b1
    // render_next::@1
  b1:
    // [112] phi from render_next::@1 to render_next::@2 [phi:render_next::@1->render_next::@2]
  b2_from_b1:
    // [112] phi (byte*) render_next::screen_next_area#11 = (const byte*) PLAYFIELD_SCREEN_1#0+(const word) render_next::next_area_offset#0 [phi:render_next::@1->render_next::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1+next_area_offset
    sta.z screen_next_area
    lda #>PLAYFIELD_SCREEN_1+next_area_offset
    sta.z screen_next_area+1
    jmp b2
    // render_next::@2
  b2:
    // [113] (byte~) render_next::$6 ← (byte) next_piece_idx#12 << (byte) 1 -- vbuyy=vbuxx_rol_1 
    txa
    asl
    tay
    // [114] (byte) render_next::next_piece_char#0 ← *((const byte[]) PIECES_NEXT_CHARS#0 + (byte) next_piece_idx#12) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_NEXT_CHARS,x
    sta.z next_piece_char
    // [115] (byte*~) render_next::next_piece_gfx#9 ← (byte*)*((const word[]) PIECES#0 + (byte~) render_next::$6) -- pbuz1=pptc1_derefidx_vbuyy 
    lda PIECES,y
    sta.z next_piece_gfx
    lda PIECES+1,y
    sta.z next_piece_gfx+1
    // [116] phi from render_next::@2 to render_next::@3 [phi:render_next::@2->render_next::@3]
  b3_from_b2:
    // [116] phi (byte) render_next::l#7 = (byte) 0 [phi:render_next::@2->render_next::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [116] phi (byte*) render_next::screen_next_area#10 = (byte*) render_next::screen_next_area#11 [phi:render_next::@2->render_next::@3#1] -- register_copy 
    // [116] phi (byte*) render_next::next_piece_gfx#3 = (byte*~) render_next::next_piece_gfx#9 [phi:render_next::@2->render_next::@3#2] -- register_copy 
    jmp b3
    // [116] phi from render_next::@8 to render_next::@3 [phi:render_next::@8->render_next::@3]
  b3_from_b8:
    // [116] phi (byte) render_next::l#7 = (byte) render_next::l#1 [phi:render_next::@8->render_next::@3#0] -- register_copy 
    // [116] phi (byte*) render_next::screen_next_area#10 = (byte*) render_next::screen_next_area#4 [phi:render_next::@8->render_next::@3#1] -- register_copy 
    // [116] phi (byte*) render_next::next_piece_gfx#3 = (byte*) render_next::next_piece_gfx#1 [phi:render_next::@8->render_next::@3#2] -- register_copy 
    jmp b3
    // render_next::@3
  b3:
    // [117] phi from render_next::@3 to render_next::@4 [phi:render_next::@3->render_next::@4]
  b4_from_b3:
    // [117] phi (byte) render_next::c#2 = (byte) 0 [phi:render_next::@3->render_next::@4#0] -- vbuxx=vbuc1 
    ldx #0
    // [117] phi (byte*) render_next::screen_next_area#5 = (byte*) render_next::screen_next_area#10 [phi:render_next::@3->render_next::@4#1] -- register_copy 
    // [117] phi (byte*) render_next::next_piece_gfx#2 = (byte*) render_next::next_piece_gfx#3 [phi:render_next::@3->render_next::@4#2] -- register_copy 
    jmp b4
    // [117] phi from render_next::@6 to render_next::@4 [phi:render_next::@6->render_next::@4]
  b4_from_b6:
    // [117] phi (byte) render_next::c#2 = (byte) render_next::c#1 [phi:render_next::@6->render_next::@4#0] -- register_copy 
    // [117] phi (byte*) render_next::screen_next_area#5 = (byte*) render_next::screen_next_area#3 [phi:render_next::@6->render_next::@4#1] -- register_copy 
    // [117] phi (byte*) render_next::next_piece_gfx#2 = (byte*) render_next::next_piece_gfx#1 [phi:render_next::@6->render_next::@4#2] -- register_copy 
    jmp b4
    // render_next::@4
  b4:
    // [118] (byte) render_next::cell#0 ← *((byte*) render_next::next_piece_gfx#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (next_piece_gfx),y
    // [119] (byte*) render_next::next_piece_gfx#1 ← ++ (byte*) render_next::next_piece_gfx#2 -- pbuz1=_inc_pbuz1 
    inc.z next_piece_gfx
    bne !+
    inc.z next_piece_gfx+1
  !:
    // [120] if((byte) render_next::cell#0!=(byte) 0) goto render_next::@5 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b5
    jmp b7
    // render_next::@7
  b7:
    // [121] *((byte*) render_next::screen_next_area#5) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (screen_next_area),y
    jmp b6
    // render_next::@6
  b6:
    // [122] (byte*) render_next::screen_next_area#3 ← ++ (byte*) render_next::screen_next_area#5 -- pbuz1=_inc_pbuz1 
    inc.z screen_next_area
    bne !+
    inc.z screen_next_area+1
  !:
    // [123] (byte) render_next::c#1 ← ++ (byte) render_next::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [124] if((byte) render_next::c#1!=(byte) 4) goto render_next::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b4_from_b6
    jmp b8
    // render_next::@8
  b8:
    // [125] (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#3 + (byte) $24 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$24
    clc
    adc.z screen_next_area
    sta.z screen_next_area
    bcc !+
    inc.z screen_next_area+1
  !:
    // [126] (byte) render_next::l#1 ← ++ (byte) render_next::l#7 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [127] if((byte) render_next::l#1!=(byte) 4) goto render_next::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne b3_from_b8
    jmp breturn
    // render_next::@return
  breturn:
    // [128] return 
    rts
    // render_next::@5
  b5:
    // [129] *((byte*) render_next::screen_next_area#5) ← (byte) render_next::next_piece_char#0 -- _deref_pbuz1=vbuz2 
    lda.z next_piece_char
    ldy #0
    sta (screen_next_area),y
    jmp b6
}
  // render_moving
// Render the current moving piece at position (current_xpos, current_ypos)
// Ignores cases where parts of the tetromino is outside the playfield (sides/bottom) since the movement collision routine prevents this.
render_moving: {
    .label ypos = $10
    .label screen_line = $22
    .label xpos = $21
    .label i = $20
    .label l = $12
    // [131] (byte) render_moving::ypos#0 ← (byte) current_ypos#13 -- vbuz1=vbuxx 
    stx.z ypos
    // [132] phi from render_moving to render_moving::@1 [phi:render_moving->render_moving::@1]
  b1_from_render_moving:
    // [132] phi (byte) render_moving::l#4 = (byte) 0 [phi:render_moving->render_moving::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [132] phi (byte) render_moving::i#3 = (byte) 0 [phi:render_moving->render_moving::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [132] phi (byte) render_moving::ypos#2 = (byte) render_moving::ypos#0 [phi:render_moving->render_moving::@1#2] -- register_copy 
    jmp b1
    // [132] phi from render_moving::@3 to render_moving::@1 [phi:render_moving::@3->render_moving::@1]
  b1_from_b3:
    // [132] phi (byte) render_moving::l#4 = (byte) render_moving::l#1 [phi:render_moving::@3->render_moving::@1#0] -- register_copy 
    // [132] phi (byte) render_moving::i#3 = (byte) render_moving::i#8 [phi:render_moving::@3->render_moving::@1#1] -- register_copy 
    // [132] phi (byte) render_moving::ypos#2 = (byte) render_moving::ypos#1 [phi:render_moving::@3->render_moving::@1#2] -- register_copy 
    jmp b1
    // render_moving::@1
  b1:
    // [133] if((byte) render_moving::ypos#2>=(byte) 1+(byte) 1) goto render_moving::@2 -- vbuz1_ge_vbuc1_then_la1 
    lda.z ypos
    cmp #1+1
    bcs b2
    jmp b7
    // render_moving::@7
  b7:
    // [134] (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (byte) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z i
    axs #-[4]
    stx.z i
    // [135] phi from render_moving::@5 render_moving::@7 to render_moving::@3 [phi:render_moving::@5/render_moving::@7->render_moving::@3]
  b3_from_b5:
  b3_from_b7:
    // [135] phi (byte) render_moving::i#8 = (byte) render_moving::i#2 [phi:render_moving::@5/render_moving::@7->render_moving::@3#0] -- register_copy 
    jmp b3
    // render_moving::@3
  b3:
    // [136] (byte) render_moving::ypos#1 ← ++ (byte) render_moving::ypos#2 -- vbuz1=_inc_vbuz1 
    inc.z ypos
    // [137] (byte) render_moving::l#1 ← ++ (byte) render_moving::l#4 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [138] if((byte) render_moving::l#1!=(byte) 4) goto render_moving::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne b1_from_b3
    jmp breturn
    // render_moving::@return
  breturn:
    // [139] return 
    rts
    // render_moving::@2
  b2:
    // [140] (byte~) render_moving::$1 ← (byte) render_screen_render#33 + (byte) render_moving::ypos#2 -- vbuaa=vbuz1_plus_vbuz2 
    lda.z render_screen_render_33
    clc
    adc.z ypos
    // [141] (byte~) render_moving::$6 ← (byte~) render_moving::$1 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [142] (byte*) render_moving::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_moving::$6) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda screen_lines_1,y
    sta.z screen_line
    lda screen_lines_1+1,y
    sta.z screen_line+1
    // [143] (byte) render_moving::xpos#0 ← (byte) current_xpos#59 -- vbuz1=vbuz2 
    lda.z current_xpos_59
    sta.z xpos
    // [144] phi from render_moving::@2 to render_moving::@4 [phi:render_moving::@2->render_moving::@4]
  b4_from_b2:
    // [144] phi (byte) render_moving::c#2 = (byte) 0 [phi:render_moving::@2->render_moving::@4#0] -- vbuxx=vbuc1 
    ldx #0
    // [144] phi (byte) render_moving::xpos#2 = (byte) render_moving::xpos#0 [phi:render_moving::@2->render_moving::@4#1] -- register_copy 
    // [144] phi (byte) render_moving::i#4 = (byte) render_moving::i#3 [phi:render_moving::@2->render_moving::@4#2] -- register_copy 
    jmp b4
    // [144] phi from render_moving::@5 to render_moving::@4 [phi:render_moving::@5->render_moving::@4]
  b4_from_b5:
    // [144] phi (byte) render_moving::c#2 = (byte) render_moving::c#1 [phi:render_moving::@5->render_moving::@4#0] -- register_copy 
    // [144] phi (byte) render_moving::xpos#2 = (byte) render_moving::xpos#1 [phi:render_moving::@5->render_moving::@4#1] -- register_copy 
    // [144] phi (byte) render_moving::i#4 = (byte) render_moving::i#2 [phi:render_moving::@5->render_moving::@4#2] -- register_copy 
    jmp b4
    // render_moving::@4
  b4:
    // [145] (byte) render_moving::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_moving::i#4) -- vbuaa=pbuz1_derefidx_vbuz2 
    ldy.z i
    lda (current_piece_gfx_64),y
    // [146] (byte) render_moving::i#2 ← ++ (byte) render_moving::i#4 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [147] if((byte) render_moving::current_cell#0==(byte) 0) goto render_moving::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5
    jmp b6
    // render_moving::@6
  b6:
    // [148] *((byte*) render_moving::screen_line#0 + (byte) render_moving::xpos#2) ← (byte) current_piece_char#68 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z current_piece_char_68
    ldy.z xpos
    sta (screen_line),y
    jmp b5
    // render_moving::@5
  b5:
    // [149] (byte) render_moving::xpos#1 ← ++ (byte) render_moving::xpos#2 -- vbuz1=_inc_vbuz1 
    inc.z xpos
    // [150] (byte) render_moving::c#1 ← ++ (byte) render_moving::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [151] if((byte) render_moving::c#1!=(byte) 4) goto render_moving::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b4_from_b5
    jmp b3_from_b5
}
  // render_playfield
// Render the static playfield on the screen (all pieces already locked into place)
render_playfield: {
    .label screen_line = $24
    .label i = $f
    .label c = $10
    .label l = $e
    // [153] phi from render_playfield to render_playfield::@1 [phi:render_playfield->render_playfield::@1]
  b1_from_render_playfield:
    // [153] phi (byte) render_playfield::i#3 = (const byte) PLAYFIELD_COLS#0*(byte) 2 [phi:render_playfield->render_playfield::@1#0] -- vbuz1=vbuc1 
    lda #PLAYFIELD_COLS*2
    sta.z i
    // [153] phi (byte) render_playfield::l#2 = (byte) 2 [phi:render_playfield->render_playfield::@1#1] -- vbuz1=vbuc1 
    lda #2
    sta.z l
    jmp b1
    // [153] phi from render_playfield::@3 to render_playfield::@1 [phi:render_playfield::@3->render_playfield::@1]
  b1_from_b3:
    // [153] phi (byte) render_playfield::i#3 = (byte) render_playfield::i#1 [phi:render_playfield::@3->render_playfield::@1#0] -- register_copy 
    // [153] phi (byte) render_playfield::l#2 = (byte) render_playfield::l#1 [phi:render_playfield::@3->render_playfield::@1#1] -- register_copy 
    jmp b1
    // render_playfield::@1
  b1:
    // [154] (byte~) render_playfield::$2 ← (byte) render_screen_render#22 + (byte) render_playfield::l#2 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z l
    // [155] (byte~) render_playfield::$6 ← (byte~) render_playfield::$2 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [156] (byte*) render_playfield::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_playfield::$6) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda screen_lines_1,y
    sta.z screen_line
    lda screen_lines_1+1,y
    sta.z screen_line+1
    // [157] phi from render_playfield::@1 to render_playfield::@2 [phi:render_playfield::@1->render_playfield::@2]
  b2_from_b1:
    // [157] phi (byte) render_playfield::c#2 = (byte) 0 [phi:render_playfield::@1->render_playfield::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [157] phi (byte*) render_playfield::screen_line#2 = (byte*) render_playfield::screen_line#0 [phi:render_playfield::@1->render_playfield::@2#1] -- register_copy 
    // [157] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#3 [phi:render_playfield::@1->render_playfield::@2#2] -- register_copy 
    jmp b2
    // [157] phi from render_playfield::@2 to render_playfield::@2 [phi:render_playfield::@2->render_playfield::@2]
  b2_from_b2:
    // [157] phi (byte) render_playfield::c#2 = (byte) render_playfield::c#1 [phi:render_playfield::@2->render_playfield::@2#0] -- register_copy 
    // [157] phi (byte*) render_playfield::screen_line#2 = (byte*) render_playfield::screen_line#1 [phi:render_playfield::@2->render_playfield::@2#1] -- register_copy 
    // [157] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#1 [phi:render_playfield::@2->render_playfield::@2#2] -- register_copy 
    jmp b2
    // render_playfield::@2
  b2:
    // [158] *((byte*) render_playfield::screen_line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda playfield,y
    ldy #0
    sta (screen_line),y
    // [159] (byte*) render_playfield::screen_line#1 ← ++ (byte*) render_playfield::screen_line#2 -- pbuz1=_inc_pbuz1 
    inc.z screen_line
    bne !+
    inc.z screen_line+1
  !:
    // [160] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [161] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [162] if((byte) render_playfield::c#1!=(const byte) PLAYFIELD_COLS#0-(byte) 1+(byte) 1) goto render_playfield::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_COLS-1+1
    cmp.z c
    bne b2_from_b2
    jmp b3
    // render_playfield::@3
  b3:
    // [163] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [164] if((byte) render_playfield::l#1!=(const byte) PLAYFIELD_LINES#0-(byte) 1+(byte) 1) goto render_playfield::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_LINES-1+1
    cmp.z l
    bne b1_from_b3
    jmp breturn
    // render_playfield::@return
  breturn:
    // [165] return 
    rts
}
  // play_movement
// Perform any movement of the current piece
// key_event is the next keyboard_event() og $ff if no keyboard event is pending
// Returns a byte signaling whether rendering is needed. (0 no render, >0 render needed)
// play_movement(byte zeropage($20) key_event)
play_movement: {
    .label render = $12
    .label return = $12
    .label key_event = $20
    // [166] (byte) play_move_down::key_event#0 ← (byte) play_movement::key_event#0 -- vbuaa=vbuz1 
    lda.z key_event
    // [167] call play_move_down 
    jsr play_move_down
    // [168] (byte) play_move_down::return#0 ← (byte) play_move_down::return#3 -- vbuaa=vbuxx 
    txa
    jmp b2
    // play_movement::@2
  b2:
    // [169] (byte) play_movement::render#1 ← (byte) play_move_down::return#0 -- vbuz1=vbuaa 
    sta.z render
    // [170] if((byte) game_over#15==(byte) 0) goto play_movement::@1 -- vbuz1_eq_0_then_la1 
    lda.z game_over
    cmp #0
    beq b1
    // [171] phi from play_movement::@2 play_movement::@4 to play_movement::@return [phi:play_movement::@2/play_movement::@4->play_movement::@return]
  breturn_from_b2:
  breturn_from_b4:
    // [171] phi (byte) current_xpos#19 = (byte) current_xpos#22 [phi:play_movement::@2/play_movement::@4->play_movement::@return#0] -- register_copy 
    // [171] phi (byte*) current_piece_gfx#18 = (byte*) current_piece_gfx#20 [phi:play_movement::@2/play_movement::@4->play_movement::@return#1] -- register_copy 
    // [171] phi (byte) current_orientation#17 = (byte) current_orientation#20 [phi:play_movement::@2/play_movement::@4->play_movement::@return#2] -- register_copy 
    // [171] phi (byte) play_movement::return#2 = (byte) play_movement::render#1 [phi:play_movement::@2/play_movement::@4->play_movement::@return#3] -- register_copy 
    jmp breturn
    // play_movement::@return
  breturn:
    // [172] return 
    rts
    // play_movement::@1
  b1:
    // [173] (byte) play_move_leftright::key_event#0 ← (byte) play_movement::key_event#0 -- vbuaa=vbuz1 
    lda.z key_event
    // [174] call play_move_leftright 
    jsr play_move_leftright
    // [175] (byte) play_move_leftright::return#0 ← (byte) play_move_leftright::return#2
    jmp b3
    // play_movement::@3
  b3:
    // [176] (byte~) play_movement::$3 ← (byte) play_move_leftright::return#0
    // [177] (byte) play_movement::render#2 ← (byte) play_movement::render#1 + (byte~) play_movement::$3 -- vbuz1=vbuz1_plus_vbuaa 
    clc
    adc.z render
    sta.z render
    // [178] (byte) play_move_rotate::key_event#0 ← (byte) play_movement::key_event#0 -- vbuaa=vbuz1 
    lda.z key_event
    // [179] call play_move_rotate 
    jsr play_move_rotate
    // [180] (byte) play_move_rotate::return#0 ← (byte) play_move_rotate::return#2
    jmp b4
    // play_movement::@4
  b4:
    // [181] (byte~) play_movement::$4 ← (byte) play_move_rotate::return#0
    // [182] (byte) play_movement::return#0 ← (byte) play_movement::render#2 + (byte~) play_movement::$4 -- vbuz1=vbuz1_plus_vbuaa 
    clc
    adc.z return
    sta.z return
    jmp breturn_from_b4
}
  // play_move_rotate
// Rotate the current piece  based on key-presses
// Return non-zero if a render is needed
// play_move_rotate(byte register(A) key_event)
play_move_rotate: {
    .label orientation = $20
    // [183] if((byte) play_move_rotate::key_event#0==(const byte) KEY_Z#0) goto play_move_rotate::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_Z
    beq b1
    jmp b4
    // play_move_rotate::@4
  b4:
    // [184] if((byte) play_move_rotate::key_event#0==(const byte) KEY_X#0) goto play_move_rotate::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_X
    beq b2
    // [185] phi from play_move_rotate::@4 play_move_rotate::@6 to play_move_rotate::@return [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return]
  breturn_from_b4:
  breturn_from_b6:
    // [185] phi (byte*) current_piece_gfx#21 = (byte*) current_piece_gfx#20 [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return#0] -- register_copy 
    // [185] phi (byte) current_orientation#25 = (byte) current_orientation#20 [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return#1] -- register_copy 
    // [185] phi (byte) play_move_rotate::return#2 = (byte) 0 [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return#2] -- vbuaa=vbuc1 
    lda #0
    jmp breturn
    // play_move_rotate::@return
  breturn:
    // [186] return 
    rts
    // play_move_rotate::@2
  b2:
    // [187] (byte~) play_move_rotate::$5 ← (byte) current_orientation#20 + (byte) $10 -- vbuxx=vbuz1_plus_vbuc1 
    lax.z current_orientation
    axs #-[$10]
    // [188] (byte) play_move_rotate::orientation#2 ← (byte~) play_move_rotate::$5 & (byte) $3f -- vbuz1=vbuxx_band_vbuc1 
    lda #$3f
    sax.z orientation
    // [189] phi from play_move_rotate::@1 play_move_rotate::@2 to play_move_rotate::@3 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@3]
  b3_from_b1:
  b3_from_b2:
    // [189] phi (byte) play_move_rotate::orientation#3 = (byte) play_move_rotate::orientation#1 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@3#0] -- register_copy 
    jmp b3
    // play_move_rotate::@3
  b3:
    // [190] (byte) play_collision::xpos#3 ← (byte) current_xpos#26 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z play_collision.xpos
    // [191] (byte) play_collision::ypos#3 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [192] (byte) play_collision::orientation#3 ← (byte) play_move_rotate::orientation#3 -- vbuxx=vbuz1 
    ldx.z orientation
    // [193] (byte*~) current_piece#99 ← (byte*) current_piece#15 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_99
    lda.z current_piece+1
    sta.z current_piece_99+1
    // [194] call play_collision 
    // [202] phi from play_move_rotate::@3 to play_collision [phi:play_move_rotate::@3->play_collision]
  play_collision_from_b3:
    // [202] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#3 [phi:play_move_rotate::@3->play_collision#0] -- register_copy 
    // [202] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#3 [phi:play_move_rotate::@3->play_collision#1] -- register_copy 
    // [202] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#3 [phi:play_move_rotate::@3->play_collision#2] -- register_copy 
    // [202] phi (byte*) current_piece#17 = (byte*~) current_piece#99 [phi:play_move_rotate::@3->play_collision#3] -- register_copy 
    jsr play_collision
    // [195] (byte) play_collision::return#14 ← (byte) play_collision::return#15
    jmp b6
    // play_move_rotate::@6
  b6:
    // [196] (byte~) play_move_rotate::$2 ← (byte) play_collision::return#14
    // [197] if((byte~) play_move_rotate::$2!=(const byte) COLLISION_NONE#0) goto play_move_rotate::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne breturn_from_b6
    jmp b5
    // play_move_rotate::@5
  b5:
    // [198] (byte) current_orientation#7 ← (byte) play_move_rotate::orientation#3 -- vbuz1=vbuz2 
    lda.z orientation
    sta.z current_orientation
    // [199] (byte*) current_piece_gfx#7 ← (byte*) current_piece#15 + (byte) current_orientation#7 -- pbuz1=pbuz2_plus_vbuz3 
    lda.z current_orientation
    clc
    adc.z current_piece
    sta.z current_piece_gfx
    lda #0
    adc.z current_piece+1
    sta.z current_piece_gfx+1
    // [185] phi from play_move_rotate::@5 to play_move_rotate::@return [phi:play_move_rotate::@5->play_move_rotate::@return]
  breturn_from_b5:
    // [185] phi (byte*) current_piece_gfx#21 = (byte*) current_piece_gfx#7 [phi:play_move_rotate::@5->play_move_rotate::@return#0] -- register_copy 
    // [185] phi (byte) current_orientation#25 = (byte) current_orientation#7 [phi:play_move_rotate::@5->play_move_rotate::@return#1] -- register_copy 
    // [185] phi (byte) play_move_rotate::return#2 = (byte) 1 [phi:play_move_rotate::@5->play_move_rotate::@return#2] -- vbuaa=vbuc1 
    lda #1
    jmp breturn
    // play_move_rotate::@1
  b1:
    // [200] (byte~) play_move_rotate::$7 ← (byte) current_orientation#20 - (byte) $10 -- vbuxx=vbuz1_minus_vbuc1 
    lax.z current_orientation
    axs #$10
    // [201] (byte) play_move_rotate::orientation#1 ← (byte~) play_move_rotate::$7 & (byte) $3f -- vbuz1=vbuxx_band_vbuc1 
    lda #$3f
    sax.z orientation
    jmp b3_from_b1
}
  // play_collision
// Test if there is a collision between the current piece moved to (x, y) and anything on the playfield or the playfield boundaries
// Returns information about the type of the collision detected
// play_collision(byte zeropage($21) xpos, byte zeropage($d) ypos, byte register(X) orientation)
play_collision: {
    .label xpos = $21
    .label ypos = $d
    .label piece_gfx = $22
    .label yp = $d
    .label playfield_line = $24
    .label i = $2f
    .label xp = $10
    .label l = $e
    .label i_2 = $f
    .label i_3 = $f
    .label i_10 = $f
    .label i_12 = $f
    // [203] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#17 + (byte) play_collision::orientation#5 -- pbuz1=pbuz1_plus_vbuxx 
    txa
    clc
    adc.z piece_gfx
    sta.z piece_gfx
    bcc !+
    inc.z piece_gfx+1
  !:
    // [204] phi from play_collision to play_collision::@1 [phi:play_collision->play_collision::@1]
  b1_from_play_collision:
    // [204] phi (byte) play_collision::l#6 = (byte) 0 [phi:play_collision->play_collision::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [204] phi (byte) play_collision::i#3 = (byte) 0 [phi:play_collision->play_collision::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i_3
    // [204] phi (byte) play_collision::yp#2 = (byte) play_collision::yp#0 [phi:play_collision->play_collision::@1#2] -- register_copy 
    jmp b1
    // play_collision::@1
  b1:
    // [205] (byte~) play_collision::$14 ← (byte) play_collision::yp#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z yp
    asl
    // [206] (byte*) play_collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_collision::$14) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda playfield_lines,y
    sta.z playfield_line
    lda playfield_lines+1,y
    sta.z playfield_line+1
    // [207] (byte~) play_collision::xp#8 ← (byte) play_collision::xpos#6 -- vbuz1=vbuz2 
    lda.z xpos
    sta.z xp
    // [208] phi from play_collision::@1 to play_collision::@2 [phi:play_collision::@1->play_collision::@2]
  b2_from_b1:
    // [208] phi (byte) play_collision::c#2 = (byte) 0 [phi:play_collision::@1->play_collision::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [208] phi (byte) play_collision::xp#2 = (byte~) play_collision::xp#8 [phi:play_collision::@1->play_collision::@2#1] -- register_copy 
    // [208] phi (byte) play_collision::i#2 = (byte) play_collision::i#3 [phi:play_collision::@1->play_collision::@2#2] -- register_copy 
    jmp b2
    // play_collision::@2
  b2:
    // [209] (byte) play_collision::i#1 ← ++ (byte) play_collision::i#2 -- vbuz1=_inc_vbuz2 
    ldy.z i_2
    iny
    sty.z i
    // [210] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte) 0) goto play_collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy.z i_2
    lda (piece_gfx),y
    cmp #0
    beq b3
    jmp b7
    // play_collision::@7
  b7:
    // [211] if((byte) play_collision::yp#2<(const byte) PLAYFIELD_LINES#0) goto play_collision::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z yp
    cmp #PLAYFIELD_LINES
    bcc b4
    // [216] phi from play_collision::@7 to play_collision::@return [phi:play_collision::@7->play_collision::@return]
  breturn_from_b7:
    // [216] phi (byte) play_collision::return#15 = (const byte) COLLISION_BOTTOM#0 [phi:play_collision::@7->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_BOTTOM
    jmp breturn
    // play_collision::@4
  b4:
    // [212] (byte~) play_collision::$5 ← (byte) play_collision::xp#2 & (byte) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z xp
    // [213] if((byte~) play_collision::$5==(byte) 0) goto play_collision::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5
    // [216] phi from play_collision::@4 to play_collision::@return [phi:play_collision::@4->play_collision::@return]
  breturn_from_b4:
    // [216] phi (byte) play_collision::return#15 = (const byte) COLLISION_LEFT#0 [phi:play_collision::@4->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_LEFT
    jmp breturn
    // play_collision::@5
  b5:
    // [214] if((byte) play_collision::xp#2<(const byte) PLAYFIELD_COLS#0) goto play_collision::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z xp
    cmp #PLAYFIELD_COLS
    bcc b6
    // [216] phi from play_collision::@5 to play_collision::@return [phi:play_collision::@5->play_collision::@return]
  breturn_from_b5:
    // [216] phi (byte) play_collision::return#15 = (const byte) COLLISION_RIGHT#0 [phi:play_collision::@5->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_RIGHT
    jmp breturn
    // play_collision::@6
  b6:
    // [215] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::xp#2)==(byte) 0) goto play_collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy.z xp
    lda (playfield_line),y
    cmp #0
    beq b3
    // [216] phi from play_collision::@6 to play_collision::@return [phi:play_collision::@6->play_collision::@return]
  breturn_from_b6:
    // [216] phi (byte) play_collision::return#15 = (const byte) COLLISION_PLAYFIELD#0 [phi:play_collision::@6->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_PLAYFIELD
    jmp breturn
    // play_collision::@return
  breturn:
    // [217] return 
    rts
    // play_collision::@3
  b3:
    // [218] (byte) play_collision::xp#1 ← ++ (byte) play_collision::xp#2 -- vbuz1=_inc_vbuz1 
    inc.z xp
    // [219] (byte) play_collision::c#1 ← ++ (byte) play_collision::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [220] if((byte) play_collision::c#1!=(byte) 4) goto play_collision::@10 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b10
    jmp b8
    // play_collision::@8
  b8:
    // [221] (byte) play_collision::yp#1 ← ++ (byte) play_collision::yp#2 -- vbuz1=_inc_vbuz1 
    inc.z yp
    // [222] (byte) play_collision::l#1 ← ++ (byte) play_collision::l#6 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [223] if((byte) play_collision::l#1!=(byte) 4) goto play_collision::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne b9
    // [216] phi from play_collision::@8 to play_collision::@return [phi:play_collision::@8->play_collision::@return]
  breturn_from_b8:
    // [216] phi (byte) play_collision::return#15 = (const byte) COLLISION_NONE#0 [phi:play_collision::@8->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_NONE
    jmp breturn
    // play_collision::@9
  b9:
    // [224] (byte~) play_collision::i#10 ← (byte) play_collision::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_10
    // [204] phi from play_collision::@9 to play_collision::@1 [phi:play_collision::@9->play_collision::@1]
  b1_from_b9:
    // [204] phi (byte) play_collision::l#6 = (byte) play_collision::l#1 [phi:play_collision::@9->play_collision::@1#0] -- register_copy 
    // [204] phi (byte) play_collision::i#3 = (byte~) play_collision::i#10 [phi:play_collision::@9->play_collision::@1#1] -- register_copy 
    // [204] phi (byte) play_collision::yp#2 = (byte) play_collision::yp#1 [phi:play_collision::@9->play_collision::@1#2] -- register_copy 
    jmp b1
    // play_collision::@10
  b10:
    // [225] (byte~) play_collision::i#12 ← (byte) play_collision::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_12
    // [208] phi from play_collision::@10 to play_collision::@2 [phi:play_collision::@10->play_collision::@2]
  b2_from_b10:
    // [208] phi (byte) play_collision::c#2 = (byte) play_collision::c#1 [phi:play_collision::@10->play_collision::@2#0] -- register_copy 
    // [208] phi (byte) play_collision::xp#2 = (byte) play_collision::xp#1 [phi:play_collision::@10->play_collision::@2#1] -- register_copy 
    // [208] phi (byte) play_collision::i#2 = (byte~) play_collision::i#12 [phi:play_collision::@10->play_collision::@2#2] -- register_copy 
    jmp b2
}
  // play_move_leftright
// Move left/right or rotate the current piece
// Return non-zero if a render is needed
// play_move_leftright(byte register(A) key_event)
play_move_leftright: {
    // [226] if((byte) play_move_leftright::key_event#0==(const byte) KEY_COMMA#0) goto play_move_leftright::@1 -- vbuaa_eq_vbuc1_then_la1 
    // Handle keyboard events
    cmp #KEY_COMMA
    beq b1
    jmp b2
    // play_move_leftright::@2
  b2:
    // [227] if((byte) play_move_leftright::key_event#0!=(const byte) KEY_DOT#0) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_DOT
    bne breturn_from_b2
    jmp b3
    // play_move_leftright::@3
  b3:
    // [228] (byte) play_collision::xpos#2 ← (byte) current_xpos#22 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z current_xpos
    iny
    sty.z play_collision.xpos
    // [229] (byte) play_collision::ypos#2 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [230] (byte) play_collision::orientation#2 ← (byte) current_orientation#20 -- vbuxx=vbuz1 
    ldx.z current_orientation
    // [231] (byte*~) current_piece#98 ← (byte*) current_piece#15 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_98
    lda.z current_piece+1
    sta.z current_piece_98+1
    // [232] call play_collision 
    // [202] phi from play_move_leftright::@3 to play_collision [phi:play_move_leftright::@3->play_collision]
  play_collision_from_b3:
    // [202] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#2 [phi:play_move_leftright::@3->play_collision#0] -- register_copy 
    // [202] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#2 [phi:play_move_leftright::@3->play_collision#1] -- register_copy 
    // [202] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#2 [phi:play_move_leftright::@3->play_collision#2] -- register_copy 
    // [202] phi (byte*) current_piece#17 = (byte*~) current_piece#98 [phi:play_move_leftright::@3->play_collision#3] -- register_copy 
    jsr play_collision
    // [233] (byte) play_collision::return#13 ← (byte) play_collision::return#15
    jmp b7
    // play_move_leftright::@7
  b7:
    // [234] (byte~) play_move_leftright::$4 ← (byte) play_collision::return#13
    // [235] if((byte~) play_move_leftright::$4!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne breturn_from_b7
    jmp b4
    // play_move_leftright::@4
  b4:
    // [236] (byte) current_xpos#6 ← ++ (byte) current_xpos#22 -- vbuz1=_inc_vbuz1 
    inc.z current_xpos
    // [237] phi from play_move_leftright::@4 play_move_leftright::@5 to play_move_leftright::@return [phi:play_move_leftright::@4/play_move_leftright::@5->play_move_leftright::@return]
  breturn_from_b4:
  breturn_from_b5:
    // [237] phi (byte) current_xpos#26 = (byte) current_xpos#6 [phi:play_move_leftright::@4/play_move_leftright::@5->play_move_leftright::@return#0] -- register_copy 
    // [237] phi (byte) play_move_leftright::return#2 = (byte) 1 [phi:play_move_leftright::@4/play_move_leftright::@5->play_move_leftright::@return#1] -- vbuaa=vbuc1 
    lda #1
    jmp breturn
    // [237] phi from play_move_leftright::@2 play_move_leftright::@6 play_move_leftright::@7 to play_move_leftright::@return [phi:play_move_leftright::@2/play_move_leftright::@6/play_move_leftright::@7->play_move_leftright::@return]
  breturn_from_b2:
  breturn_from_b6:
  breturn_from_b7:
    // [237] phi (byte) current_xpos#26 = (byte) current_xpos#22 [phi:play_move_leftright::@2/play_move_leftright::@6/play_move_leftright::@7->play_move_leftright::@return#0] -- register_copy 
    // [237] phi (byte) play_move_leftright::return#2 = (byte) 0 [phi:play_move_leftright::@2/play_move_leftright::@6/play_move_leftright::@7->play_move_leftright::@return#1] -- vbuaa=vbuc1 
    lda #0
    jmp breturn
    // play_move_leftright::@return
  breturn:
    // [238] return 
    rts
    // play_move_leftright::@1
  b1:
    // [239] (byte) play_collision::xpos#1 ← (byte) current_xpos#22 - (byte) 1 -- vbuz1=vbuz2_minus_1 
    ldx.z current_xpos
    dex
    stx.z play_collision.xpos
    // [240] (byte) play_collision::ypos#1 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [241] (byte) play_collision::orientation#1 ← (byte) current_orientation#20 -- vbuxx=vbuz1 
    ldx.z current_orientation
    // [242] (byte*~) current_piece#97 ← (byte*) current_piece#15 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_97
    lda.z current_piece+1
    sta.z current_piece_97+1
    // [243] call play_collision 
    // [202] phi from play_move_leftright::@1 to play_collision [phi:play_move_leftright::@1->play_collision]
  play_collision_from_b1:
    // [202] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#1 [phi:play_move_leftright::@1->play_collision#0] -- register_copy 
    // [202] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#1 [phi:play_move_leftright::@1->play_collision#1] -- register_copy 
    // [202] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#1 [phi:play_move_leftright::@1->play_collision#2] -- register_copy 
    // [202] phi (byte*) current_piece#17 = (byte*~) current_piece#97 [phi:play_move_leftright::@1->play_collision#3] -- register_copy 
    jsr play_collision
    // [244] (byte) play_collision::return#1 ← (byte) play_collision::return#15
    jmp b6
    // play_move_leftright::@6
  b6:
    // [245] (byte~) play_move_leftright::$8 ← (byte) play_collision::return#1
    // [246] if((byte~) play_move_leftright::$8!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne breturn_from_b6
    jmp b5
    // play_move_leftright::@5
  b5:
    // [247] (byte) current_xpos#8 ← -- (byte) current_xpos#22 -- vbuz1=_dec_vbuz1 
    dec.z current_xpos
    jmp breturn_from_b5
}
  // play_move_down
// Move down the current piece
// Return non-zero if a render is needed
// play_move_down(byte register(A) key_event)
play_move_down: {
    // [248] (byte) current_movedown_counter#12 ← ++ (byte) current_movedown_counter#16 -- vbuz1=_inc_vbuz1 
    inc.z current_movedown_counter
    // [249] if((byte) play_move_down::key_event#0!=(const byte) KEY_SPACE#0) goto play_move_down::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_SPACE
    bne b1_from_play_move_down
    // [250] phi from play_move_down to play_move_down::@4 [phi:play_move_down->play_move_down::@4]
  b4_from_play_move_down:
    jmp b4
    // play_move_down::@4
  b4:
    // [251] phi from play_move_down::@4 to play_move_down::@1 [phi:play_move_down::@4->play_move_down::@1]
  b1_from_b4:
    // [251] phi (byte) play_move_down::movedown#10 = (byte) 1 [phi:play_move_down::@4->play_move_down::@1#0] -- vbuxx=vbuc1 
    ldx #1
    jmp b1
    // [251] phi from play_move_down to play_move_down::@1 [phi:play_move_down->play_move_down::@1]
  b1_from_play_move_down:
    // [251] phi (byte) play_move_down::movedown#10 = (byte) 0 [phi:play_move_down->play_move_down::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
    // play_move_down::@1
  b1:
    // [252] call keyboard_event_pressed 
    // [381] phi from play_move_down::@1 to keyboard_event_pressed [phi:play_move_down::@1->keyboard_event_pressed]
  keyboard_event_pressed_from_b1:
    // [381] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_SPACE#0 [phi:play_move_down::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_SPACE
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [253] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11
    jmp b12
    // play_move_down::@12
  b12:
    // [254] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
    // [255] if((byte~) play_move_down::$2==(byte) 0) goto play_move_down::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b12
    jmp b5
    // play_move_down::@5
  b5:
    // [256] if((byte) current_movedown_counter#12<(const byte) current_movedown_fast#0) goto play_move_down::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z current_movedown_counter
    cmp #current_movedown_fast
    bcc b2_from_b5
    jmp b6
    // play_move_down::@6
  b6:
    // [257] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10 -- vbuxx=_inc_vbuxx 
    inx
    // [258] phi from play_move_down::@12 play_move_down::@5 play_move_down::@6 to play_move_down::@2 [phi:play_move_down::@12/play_move_down::@5/play_move_down::@6->play_move_down::@2]
  b2_from_b12:
  b2_from_b5:
  b2_from_b6:
    // [258] phi (byte) play_move_down::movedown#7 = (byte) play_move_down::movedown#10 [phi:play_move_down::@12/play_move_down::@5/play_move_down::@6->play_move_down::@2#0] -- register_copy 
    jmp b2
    // play_move_down::@2
  b2:
    // [259] if((byte) current_movedown_counter#12<(byte) current_movedown_slow#14) goto play_move_down::@3 -- vbuz1_lt_vbuz2_then_la1 
    lda.z current_movedown_counter
    cmp.z current_movedown_slow
    bcc b3_from_b2
    jmp b7
    // play_move_down::@7
  b7:
    // [260] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7 -- vbuxx=_inc_vbuxx 
    inx
    // [261] phi from play_move_down::@2 play_move_down::@7 to play_move_down::@3 [phi:play_move_down::@2/play_move_down::@7->play_move_down::@3]
  b3_from_b2:
  b3_from_b7:
    // [261] phi (byte) play_move_down::movedown#6 = (byte) play_move_down::movedown#7 [phi:play_move_down::@2/play_move_down::@7->play_move_down::@3#0] -- register_copy 
    jmp b3
    // play_move_down::@3
  b3:
    // [262] if((byte) play_move_down::movedown#6==(byte) 0) goto play_move_down::@return -- vbuxx_eq_0_then_la1 
    cpx #0
    beq breturn_from_b3
    jmp b8
    // play_move_down::@8
  b8:
    // [263] (byte) play_collision::ypos#0 ← (byte) current_ypos#11 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z current_ypos
    iny
    sty.z play_collision.ypos
    // [264] (byte) play_collision::xpos#0 ← (byte) current_xpos#14 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z play_collision.xpos
    // [265] (byte) play_collision::orientation#0 ← (byte) current_orientation#13 -- vbuxx=vbuz1 
    ldx.z current_orientation
    // [266] (byte*~) current_piece#96 ← (byte*) current_piece#10 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_96
    lda.z current_piece+1
    sta.z current_piece_96+1
    // [267] call play_collision 
    // [202] phi from play_move_down::@8 to play_collision [phi:play_move_down::@8->play_collision]
  play_collision_from_b8:
    // [202] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#0 [phi:play_move_down::@8->play_collision#0] -- register_copy 
    // [202] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#0 [phi:play_move_down::@8->play_collision#1] -- register_copy 
    // [202] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#0 [phi:play_move_down::@8->play_collision#2] -- register_copy 
    // [202] phi (byte*) current_piece#17 = (byte*~) current_piece#96 [phi:play_move_down::@8->play_collision#3] -- register_copy 
    jsr play_collision
    // [268] (byte) play_collision::return#0 ← (byte) play_collision::return#15
    jmp b13
    // play_move_down::@13
  b13:
    // [269] (byte~) play_move_down::$12 ← (byte) play_collision::return#0
    // [270] if((byte~) play_move_down::$12==(const byte) COLLISION_NONE#0) goto play_move_down::@10 -- vbuaa_eq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    beq b10
    // [271] phi from play_move_down::@13 to play_move_down::@9 [phi:play_move_down::@13->play_move_down::@9]
  b9_from_b13:
    jmp b9
    // play_move_down::@9
  b9:
    // [272] call play_lock_current 
    jsr play_lock_current
    // [273] phi from play_move_down::@9 to play_move_down::@14 [phi:play_move_down::@9->play_move_down::@14]
  b14_from_b9:
    jmp b14
    // play_move_down::@14
  b14:
    // [274] call play_remove_lines 
    // [340] phi from play_move_down::@14 to play_remove_lines [phi:play_move_down::@14->play_remove_lines]
  play_remove_lines_from_b14:
    jsr play_remove_lines
    // [275] (byte) play_remove_lines::return#0 ← (byte) play_remove_lines::removed#8 -- vbuaa=vbuz1 
    lda.z play_remove_lines.removed
    jmp b15
    // play_move_down::@15
  b15:
    // [276] (byte) play_move_down::removed#0 ← (byte) play_remove_lines::return#0
    // [277] (byte) play_update_score::removed#0 ← (byte) play_move_down::removed#0 -- vbuxx=vbuaa 
    tax
    // [278] call play_update_score 
    jsr play_update_score
    // [279] phi from play_move_down::@15 to play_move_down::@16 [phi:play_move_down::@15->play_move_down::@16]
  b16_from_b15:
    jmp b16
    // play_move_down::@16
  b16:
    // [280] call play_spawn_current 
    // [287] phi from play_move_down::@16 to play_spawn_current [phi:play_move_down::@16->play_spawn_current]
  play_spawn_current_from_b16:
    // [287] phi (byte) game_over#65 = (byte) game_over#10 [phi:play_move_down::@16->play_spawn_current#0] -- register_copy 
    // [287] phi (byte) next_piece_idx#17 = (byte) next_piece_idx#10 [phi:play_move_down::@16->play_spawn_current#1] -- register_copy 
    jsr play_spawn_current
    jmp b17
    // play_move_down::@17
  b17:
    // [281] (byte*~) current_piece#93 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current._7
    lda PIECES,y
    sta.z current_piece
    lda PIECES+1,y
    sta.z current_piece+1
    // [282] (byte*~) current_piece_gfx#117 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current._7
    lda PIECES,y
    sta.z current_piece_gfx
    lda PIECES+1,y
    sta.z current_piece_gfx+1
    // [283] phi from play_move_down::@17 to play_move_down::@11 [phi:play_move_down::@17->play_move_down::@11]
  b11_from_b17:
    // [283] phi (byte) next_piece_idx#30 = (byte) play_spawn_current::piece_idx#2 [phi:play_move_down::@17->play_move_down::@11#0] -- register_copy 
    // [283] phi (byte) game_over#27 = (byte) game_over#52 [phi:play_move_down::@17->play_move_down::@11#1] -- register_copy 
    // [283] phi (byte) current_xpos#43 = (byte) current_xpos#100 [phi:play_move_down::@17->play_move_down::@11#2] -- register_copy 
    // [283] phi (byte*) current_piece_gfx#35 = (byte*~) current_piece_gfx#117 [phi:play_move_down::@17->play_move_down::@11#3] -- register_copy 
    // [283] phi (byte) current_orientation#37 = (byte) 0 [phi:play_move_down::@17->play_move_down::@11#4] -- vbuz1=vbuc1 
    lda #0
    sta.z current_orientation
    // [283] phi (byte) current_piece_char#29 = (byte) current_piece_char#5 [phi:play_move_down::@17->play_move_down::@11#5] -- register_copy 
    // [283] phi (byte*) current_piece#28 = (byte*~) current_piece#93 [phi:play_move_down::@17->play_move_down::@11#6] -- register_copy 
    // [283] phi (byte) level_bcd#31 = (byte) level_bcd#19 [phi:play_move_down::@17->play_move_down::@11#7] -- register_copy 
    // [283] phi (byte) current_movedown_slow#37 = (byte) current_movedown_slow#23 [phi:play_move_down::@17->play_move_down::@11#8] -- register_copy 
    // [283] phi (byte) level#33 = (byte) level#19 [phi:play_move_down::@17->play_move_down::@11#9] -- register_copy 
    // [283] phi (dword) score_bcd#26 = (dword) score_bcd#16 [phi:play_move_down::@17->play_move_down::@11#10] -- register_copy 
    // [283] phi (word) lines_bcd#26 = (word) lines_bcd#17 [phi:play_move_down::@17->play_move_down::@11#11] -- register_copy 
    // [283] phi (byte) current_ypos#38 = (byte) current_ypos#6 [phi:play_move_down::@17->play_move_down::@11#12] -- register_copy 
    jmp b11
    // play_move_down::@11
  b11:
    // [284] phi from play_move_down::@11 to play_move_down::@return [phi:play_move_down::@11->play_move_down::@return]
  breturn_from_b11:
    // [284] phi (byte) next_piece_idx#16 = (byte) next_piece_idx#30 [phi:play_move_down::@11->play_move_down::@return#0] -- register_copy 
    // [284] phi (byte) game_over#15 = (byte) game_over#27 [phi:play_move_down::@11->play_move_down::@return#1] -- register_copy 
    // [284] phi (byte) current_xpos#22 = (byte) current_xpos#43 [phi:play_move_down::@11->play_move_down::@return#2] -- register_copy 
    // [284] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#35 [phi:play_move_down::@11->play_move_down::@return#3] -- register_copy 
    // [284] phi (byte) current_orientation#20 = (byte) current_orientation#37 [phi:play_move_down::@11->play_move_down::@return#4] -- register_copy 
    // [284] phi (byte) current_piece_char#16 = (byte) current_piece_char#29 [phi:play_move_down::@11->play_move_down::@return#5] -- register_copy 
    // [284] phi (byte*) current_piece#15 = (byte*) current_piece#28 [phi:play_move_down::@11->play_move_down::@return#6] -- register_copy 
    // [284] phi (byte) level_bcd#17 = (byte) level_bcd#31 [phi:play_move_down::@11->play_move_down::@return#7] -- register_copy 
    // [284] phi (byte) current_movedown_slow#21 = (byte) current_movedown_slow#37 [phi:play_move_down::@11->play_move_down::@return#8] -- register_copy 
    // [284] phi (byte) level#17 = (byte) level#33 [phi:play_move_down::@11->play_move_down::@return#9] -- register_copy 
    // [284] phi (dword) score_bcd#14 = (dword) score_bcd#26 [phi:play_move_down::@11->play_move_down::@return#10] -- register_copy 
    // [284] phi (word) lines_bcd#15 = (word) lines_bcd#26 [phi:play_move_down::@11->play_move_down::@return#11] -- register_copy 
    // [284] phi (byte) current_ypos#19 = (byte) current_ypos#38 [phi:play_move_down::@11->play_move_down::@return#12] -- register_copy 
    // [284] phi (byte) current_movedown_counter#14 = (byte) 0 [phi:play_move_down::@11->play_move_down::@return#13] -- vbuz1=vbuc1 
    lda #0
    sta.z current_movedown_counter
    // [284] phi (byte) play_move_down::return#3 = (byte) 1 [phi:play_move_down::@11->play_move_down::@return#14] -- vbuxx=vbuc1 
    ldx #1
    jmp breturn
    // [284] phi from play_move_down::@3 to play_move_down::@return [phi:play_move_down::@3->play_move_down::@return]
  breturn_from_b3:
    // [284] phi (byte) next_piece_idx#16 = (byte) next_piece_idx#10 [phi:play_move_down::@3->play_move_down::@return#0] -- register_copy 
    // [284] phi (byte) game_over#15 = (byte) game_over#10 [phi:play_move_down::@3->play_move_down::@return#1] -- register_copy 
    // [284] phi (byte) current_xpos#22 = (byte) current_xpos#14 [phi:play_move_down::@3->play_move_down::@return#2] -- register_copy 
    // [284] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#13 [phi:play_move_down::@3->play_move_down::@return#3] -- register_copy 
    // [284] phi (byte) current_orientation#20 = (byte) current_orientation#13 [phi:play_move_down::@3->play_move_down::@return#4] -- register_copy 
    // [284] phi (byte) current_piece_char#16 = (byte) current_piece_char#10 [phi:play_move_down::@3->play_move_down::@return#5] -- register_copy 
    // [284] phi (byte*) current_piece#15 = (byte*) current_piece#10 [phi:play_move_down::@3->play_move_down::@return#6] -- register_copy 
    // [284] phi (byte) level_bcd#17 = (byte) level_bcd#11 [phi:play_move_down::@3->play_move_down::@return#7] -- register_copy 
    // [284] phi (byte) current_movedown_slow#21 = (byte) current_movedown_slow#14 [phi:play_move_down::@3->play_move_down::@return#8] -- register_copy 
    // [284] phi (byte) level#17 = (byte) level#10 [phi:play_move_down::@3->play_move_down::@return#9] -- register_copy 
    // [284] phi (dword) score_bcd#14 = (dword) score_bcd#18 [phi:play_move_down::@3->play_move_down::@return#10] -- register_copy 
    // [284] phi (word) lines_bcd#15 = (word) lines_bcd#19 [phi:play_move_down::@3->play_move_down::@return#11] -- register_copy 
    // [284] phi (byte) current_ypos#19 = (byte) current_ypos#11 [phi:play_move_down::@3->play_move_down::@return#12] -- register_copy 
    // [284] phi (byte) current_movedown_counter#14 = (byte) current_movedown_counter#12 [phi:play_move_down::@3->play_move_down::@return#13] -- register_copy 
    // [284] phi (byte) play_move_down::return#3 = (byte) 0 [phi:play_move_down::@3->play_move_down::@return#14] -- vbuxx=vbuc1 
    ldx #0
    jmp breturn
    // play_move_down::@return
  breturn:
    // [285] return 
    rts
    // play_move_down::@10
  b10:
    // [286] (byte) current_ypos#3 ← ++ (byte) current_ypos#11 -- vbuz1=_inc_vbuz1 
    inc.z current_ypos
    // [283] phi from play_move_down::@10 to play_move_down::@11 [phi:play_move_down::@10->play_move_down::@11]
  b11_from_b10:
    // [283] phi (byte) next_piece_idx#30 = (byte) next_piece_idx#10 [phi:play_move_down::@10->play_move_down::@11#0] -- register_copy 
    // [283] phi (byte) game_over#27 = (byte) game_over#10 [phi:play_move_down::@10->play_move_down::@11#1] -- register_copy 
    // [283] phi (byte) current_xpos#43 = (byte) current_xpos#14 [phi:play_move_down::@10->play_move_down::@11#2] -- register_copy 
    // [283] phi (byte*) current_piece_gfx#35 = (byte*) current_piece_gfx#13 [phi:play_move_down::@10->play_move_down::@11#3] -- register_copy 
    // [283] phi (byte) current_orientation#37 = (byte) current_orientation#13 [phi:play_move_down::@10->play_move_down::@11#4] -- register_copy 
    // [283] phi (byte) current_piece_char#29 = (byte) current_piece_char#10 [phi:play_move_down::@10->play_move_down::@11#5] -- register_copy 
    // [283] phi (byte*) current_piece#28 = (byte*) current_piece#10 [phi:play_move_down::@10->play_move_down::@11#6] -- register_copy 
    // [283] phi (byte) level_bcd#31 = (byte) level_bcd#11 [phi:play_move_down::@10->play_move_down::@11#7] -- register_copy 
    // [283] phi (byte) current_movedown_slow#37 = (byte) current_movedown_slow#14 [phi:play_move_down::@10->play_move_down::@11#8] -- register_copy 
    // [283] phi (byte) level#33 = (byte) level#10 [phi:play_move_down::@10->play_move_down::@11#9] -- register_copy 
    // [283] phi (dword) score_bcd#26 = (dword) score_bcd#18 [phi:play_move_down::@10->play_move_down::@11#10] -- register_copy 
    // [283] phi (word) lines_bcd#26 = (word) lines_bcd#19 [phi:play_move_down::@10->play_move_down::@11#11] -- register_copy 
    // [283] phi (byte) current_ypos#38 = (byte) current_ypos#3 [phi:play_move_down::@10->play_move_down::@11#12] -- register_copy 
    jmp b11
}
  // play_spawn_current
// Spawn a new piece
// Moves the next piece into the current and spawns a new next piece
play_spawn_current: {
    .label _7 = $2e
    .label piece_idx = $a
    // [288] (byte) play_spawn_current::current_piece_idx#0 ← (byte) next_piece_idx#17 -- vbuxx=vbuz1 
    // Move next piece into current
    ldx.z next_piece_idx
    // [289] (byte~) play_spawn_current::$7 ← (byte) play_spawn_current::current_piece_idx#0 << (byte) 1 -- vbuz1=vbuxx_rol_1 
    txa
    asl
    sta.z _7
    // [290] (byte) current_piece_char#5 ← *((const byte[]) PIECES_CHARS#0 + (byte) play_spawn_current::current_piece_idx#0) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_CHARS,x
    sta.z current_piece_char
    // [291] (byte) current_xpos#100 ← *((const byte[]) PIECES_START_X#0 + (byte) play_spawn_current::current_piece_idx#0) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_START_X,x
    sta.z current_xpos
    // [292] (byte) current_ypos#6 ← *((const byte[]) PIECES_START_Y#0 + (byte) play_spawn_current::current_piece_idx#0) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_START_Y,x
    sta.z current_ypos
    // [293] (byte) play_collision::xpos#4 ← (byte) current_xpos#100 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z play_collision.xpos
    // [294] (byte) play_collision::ypos#4 ← (byte) current_ypos#6 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [295] (byte*~) current_piece#100 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z _7
    lda PIECES,y
    sta.z current_piece_100
    lda PIECES+1,y
    sta.z current_piece_100+1
    // [296] call play_collision 
    // [202] phi from play_spawn_current to play_collision [phi:play_spawn_current->play_collision]
  play_collision_from_play_spawn_current:
    // [202] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#4 [phi:play_spawn_current->play_collision#0] -- register_copy 
    // [202] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#4 [phi:play_spawn_current->play_collision#1] -- register_copy 
    // [202] phi (byte) play_collision::orientation#5 = (byte) 0 [phi:play_spawn_current->play_collision#2] -- vbuxx=vbuc1 
    ldx #0
    // [202] phi (byte*) current_piece#17 = (byte*~) current_piece#100 [phi:play_spawn_current->play_collision#3] -- register_copy 
    jsr play_collision
    // [297] (byte) play_collision::return#10 ← (byte) play_collision::return#15
    jmp b4
    // play_spawn_current::@4
  b4:
    // [298] (byte~) play_spawn_current::$1 ← (byte) play_collision::return#10
    // [299] if((byte~) play_spawn_current::$1!=(const byte) COLLISION_PLAYFIELD#0) goto play_spawn_current::@5 -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_PLAYFIELD
    bne b5_from_b4
    // [301] phi from play_spawn_current::@4 to play_spawn_current::@1 [phi:play_spawn_current::@4->play_spawn_current::@1]
  b1_from_b4:
    // [301] phi (byte) game_over#52 = (byte) 1 [phi:play_spawn_current::@4->play_spawn_current::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z game_over
    jmp b1
    // [300] phi from play_spawn_current::@4 to play_spawn_current::@5 [phi:play_spawn_current::@4->play_spawn_current::@5]
  b5_from_b4:
    jmp b5
    // play_spawn_current::@5
  b5:
    // [301] phi from play_spawn_current::@5 to play_spawn_current::@1 [phi:play_spawn_current::@5->play_spawn_current::@1]
  b1_from_b5:
    // [301] phi (byte) game_over#52 = (byte) game_over#65 [phi:play_spawn_current::@5->play_spawn_current::@1#0] -- register_copy 
    jmp b1
    // play_spawn_current::@1
  b1:
    // [302] phi from play_spawn_current::@1 to play_spawn_current::@2 [phi:play_spawn_current::@1->play_spawn_current::@2]
  b2_from_b1:
    // [302] phi (byte) play_spawn_current::piece_idx#2 = (byte) 7 [phi:play_spawn_current::@1->play_spawn_current::@2#0] -- vbuz1=vbuc1 
    lda #7
    sta.z piece_idx
    jmp b2
    // play_spawn_current::@2
  b2:
    // [303] if((byte) play_spawn_current::piece_idx#2==(byte) 7) goto play_spawn_current::sid_rnd1 -- vbuz1_eq_vbuc1_then_la1 
    lda #7
    cmp.z piece_idx
    beq sid_rnd1
    jmp breturn
    // play_spawn_current::@return
  breturn:
    // [304] return 
    rts
    // play_spawn_current::sid_rnd1
  sid_rnd1:
    // [305] (byte) play_spawn_current::sid_rnd1_return#0 ← *((const byte*) SID_VOICE3_OSC#0) -- vbuaa=_deref_pbuc1 
    lda SID_VOICE3_OSC
    jmp b3
    // play_spawn_current::@3
  b3:
    // [306] (byte) play_spawn_current::piece_idx#1 ← (byte) play_spawn_current::sid_rnd1_return#0 & (byte) 7 -- vbuz1=vbuaa_band_vbuc1 
    and #7
    sta.z piece_idx
    // [302] phi from play_spawn_current::@3 to play_spawn_current::@2 [phi:play_spawn_current::@3->play_spawn_current::@2]
  b2_from_b3:
    // [302] phi (byte) play_spawn_current::piece_idx#2 = (byte) play_spawn_current::piece_idx#1 [phi:play_spawn_current::@3->play_spawn_current::@2#0] -- register_copy 
    jmp b2
}
  // play_update_score
// Update the score based on the number of lines removed
// play_update_score(byte register(X) removed)
play_update_score: {
    .label lines_before = $26
    .label add_bcd = $27
    // [307] if((byte) play_update_score::removed#0==(byte) 0) goto play_update_score::@return -- vbuxx_eq_0_then_la1 
    cpx #0
    beq breturn_from_play_update_score
    jmp b1
    // play_update_score::@1
  b1:
    // [308] (byte~) play_update_score::$2 ← < (word) lines_bcd#19 -- vbuaa=_lo_vwuz1 
    lda.z lines_bcd
    // [309] (byte) play_update_score::lines_before#0 ← (byte~) play_update_score::$2 & (byte) $f0 -- vbuz1=vbuaa_band_vbuc1 
    and #$f0
    sta.z lines_before
    // [310] (byte~) play_update_score::$9 ← (byte) play_update_score::removed#0 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
    // [311] (dword) play_update_score::add_bcd#0 ← *((const dword[5]) score_add_bcd#0 + (byte~) play_update_score::$9) -- vduz1=pduc1_derefidx_vbuaa 
    tay
    lda score_add_bcd,y
    sta.z add_bcd
    lda score_add_bcd+1,y
    sta.z add_bcd+1
    lda score_add_bcd+2,y
    sta.z add_bcd+2
    lda score_add_bcd+3,y
    sta.z add_bcd+3
    // asm { sed  }
    sed
    // [313] (word) lines_bcd#29 ← (word) lines_bcd#19 + (byte) play_update_score::removed#0 -- vwuz1=vwuz1_plus_vbuxx 
    txa
    clc
    adc.z lines_bcd
    sta.z lines_bcd
    bcc !+
    inc.z lines_bcd+1
  !:
    // [314] (dword) score_bcd#29 ← (dword) score_bcd#18 + (dword) play_update_score::add_bcd#0 -- vduz1=vduz1_plus_vduz2 
    lda.z score_bcd
    clc
    adc.z add_bcd
    sta.z score_bcd
    lda.z score_bcd+1
    adc.z add_bcd+1
    sta.z score_bcd+1
    lda.z score_bcd+2
    adc.z add_bcd+2
    sta.z score_bcd+2
    lda.z score_bcd+3
    adc.z add_bcd+3
    sta.z score_bcd+3
    // asm { cld  }
    cld
    // [316] (byte~) play_update_score::$4 ← < (word) lines_bcd#29 -- vbuaa=_lo_vwuz1 
    lda.z lines_bcd
    // [317] (byte) play_update_score::lines_after#0 ← (byte~) play_update_score::$4 & (byte) $f0 -- vbuaa=vbuaa_band_vbuc1 
    and #$f0
    // [318] if((byte) play_update_score::lines_before#0==(byte) play_update_score::lines_after#0) goto play_update_score::@return -- vbuz1_eq_vbuaa_then_la1 
    cmp.z lines_before
    beq breturn_from_b1
    // [319] phi from play_update_score::@1 to play_update_score::@2 [phi:play_update_score::@1->play_update_score::@2]
  b2_from_b1:
    jmp b2
    // play_update_score::@2
  b2:
    // [320] call play_increase_level 
    jsr play_increase_level
    // [321] phi from play_update_score play_update_score::@1 play_update_score::@2 to play_update_score::@return [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return]
  breturn_from_play_update_score:
  breturn_from_b1:
  breturn_from_b2:
    // [321] phi (byte) level_bcd#19 = (byte) level_bcd#11 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#0] -- register_copy 
    // [321] phi (byte) current_movedown_slow#23 = (byte) current_movedown_slow#14 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#1] -- register_copy 
    // [321] phi (byte) level#19 = (byte) level#10 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#2] -- register_copy 
    // [321] phi (dword) score_bcd#16 = (dword) score_bcd#18 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#3] -- register_copy 
    // [321] phi (word) lines_bcd#17 = (word) lines_bcd#19 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#4] -- register_copy 
    jmp breturn
    // play_update_score::@return
  breturn:
    // [322] return 
    rts
}
  // play_increase_level
// Increase the level
play_increase_level: {
    // [323] (byte) level#21 ← ++ (byte) level#10 -- vbuz1=_inc_vbuz1 
    inc.z level
    // [324] if((byte) level#21>=(byte) $1d+(byte) 1) goto play_increase_level::@1 -- vbuz1_ge_vbuc1_then_la1 
    // Update speed of moving tetrominos down
    lda.z level
    cmp #$1d+1
    bcs b1_from_play_increase_level
    jmp b3
    // play_increase_level::@3
  b3:
    // [325] (byte) current_movedown_slow#10 ← *((const byte[]) MOVEDOWN_SLOW_SPEEDS#0 + (byte) level#21) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z level
    lda MOVEDOWN_SLOW_SPEEDS,y
    sta.z current_movedown_slow
    // [326] phi from play_increase_level::@3 to play_increase_level::@1 [phi:play_increase_level::@3->play_increase_level::@1]
  b1_from_b3:
    // [326] phi (byte) current_movedown_slow#66 = (byte) current_movedown_slow#10 [phi:play_increase_level::@3->play_increase_level::@1#0] -- register_copy 
    jmp b1
    // [326] phi from play_increase_level to play_increase_level::@1 [phi:play_increase_level->play_increase_level::@1]
  b1_from_play_increase_level:
    // [326] phi (byte) current_movedown_slow#66 = (byte) 1 [phi:play_increase_level->play_increase_level::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z current_movedown_slow
    jmp b1
    // play_increase_level::@1
  b1:
    // [327] (byte) level_bcd#21 ← ++ (byte) level_bcd#11 -- vbuz1=_inc_vbuz1 
    inc.z level_bcd
    // [328] (byte~) play_increase_level::$1 ← (byte) level_bcd#21 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z level_bcd
    // [329] if((byte~) play_increase_level::$1!=(byte) $a) goto play_increase_level::@2 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$a
    bne b2_from_b1
    jmp b4
    // play_increase_level::@4
  b4:
    // [330] (byte) level_bcd#8 ← (byte) level_bcd#21 + (byte) 6 -- vbuz1=vbuz1_plus_vbuc1 
    // If level low nybble hits $a change to $10
    lax.z level_bcd
    axs #-[6]
    stx.z level_bcd
    // [331] phi from play_increase_level::@1 play_increase_level::@4 to play_increase_level::@2 [phi:play_increase_level::@1/play_increase_level::@4->play_increase_level::@2]
  b2_from_b1:
  b2_from_b4:
    // [331] phi (byte) level_bcd#62 = (byte) level_bcd#21 [phi:play_increase_level::@1/play_increase_level::@4->play_increase_level::@2#0] -- register_copy 
    jmp b2
    // play_increase_level::@2
  b2:
    // asm { sed  }
    // Increase the score values gained
    sed
    // [333] phi from play_increase_level::@2 to play_increase_level::@5 [phi:play_increase_level::@2->play_increase_level::@5]
  b5_from_b2:
    // [333] phi (byte) play_increase_level::b#2 = (byte) 0 [phi:play_increase_level::@2->play_increase_level::@5#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b5
    // [333] phi from play_increase_level::@5 to play_increase_level::@5 [phi:play_increase_level::@5->play_increase_level::@5]
  b5_from_b5:
    // [333] phi (byte) play_increase_level::b#2 = (byte) play_increase_level::b#1 [phi:play_increase_level::@5->play_increase_level::@5#0] -- register_copy 
    jmp b5
    // play_increase_level::@5
  b5:
    // [334] (byte~) play_increase_level::$5 ← (byte) play_increase_level::b#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
    // [335] *((const dword[5]) score_add_bcd#0 + (byte~) play_increase_level::$5) ← *((const dword[5]) score_add_bcd#0 + (byte~) play_increase_level::$5) + *((const dword[]) SCORE_BASE_BCD#0 + (byte~) play_increase_level::$5) -- pduc1_derefidx_vbuaa=pduc1_derefidx_vbuaa_plus_pduc2_derefidx_vbuaa 
    tay
    clc
    lda score_add_bcd,y
    adc SCORE_BASE_BCD,y
    sta score_add_bcd,y
    lda score_add_bcd+1,y
    adc SCORE_BASE_BCD+1,y
    sta score_add_bcd+1,y
    lda score_add_bcd+2,y
    adc SCORE_BASE_BCD+2,y
    sta score_add_bcd+2,y
    lda score_add_bcd+3,y
    adc SCORE_BASE_BCD+3,y
    sta score_add_bcd+3,y
    // [336] (byte) play_increase_level::b#1 ← ++ (byte) play_increase_level::b#2 -- vbuxx=_inc_vbuxx 
    inx
    // [337] if((byte) play_increase_level::b#1!=(byte) 5) goto play_increase_level::@5 -- vbuxx_neq_vbuc1_then_la1 
    cpx #5
    bne b5_from_b5
    jmp b6
    // play_increase_level::@6
  b6:
    // asm { cld  }
    cld
    jmp breturn
    // play_increase_level::@return
  breturn:
    // [339] return 
    rts
}
  // play_remove_lines
// Look through the playfield for lines - and remove any lines found
// Utilizes two cursors on the playfield - one reading cells and one writing cells
// Whenever a full line is detected the writing cursor is instructed to write to the same line once more.
// Returns the number of lines removed
play_remove_lines: {
    .label c = $2b
    .label x = $e
    .label y = $c
    .label removed = $d
    .label full = $f
    // [341] phi from play_remove_lines to play_remove_lines::@1 [phi:play_remove_lines->play_remove_lines::@1]
  b1_from_play_remove_lines:
    // [341] phi (byte) play_remove_lines::removed#11 = (byte) 0 [phi:play_remove_lines->play_remove_lines::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z removed
    // [341] phi (byte) play_remove_lines::y#8 = (byte) 0 [phi:play_remove_lines->play_remove_lines::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [341] phi (byte) play_remove_lines::w#12 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte) 1 [phi:play_remove_lines->play_remove_lines::@1#2] -- vbuxx=vbuc1 
    ldx #PLAYFIELD_LINES*PLAYFIELD_COLS-1
    // [341] phi (byte) play_remove_lines::r#3 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte) 1 [phi:play_remove_lines->play_remove_lines::@1#3] -- vbuyy=vbuc1 
    ldy #PLAYFIELD_LINES*PLAYFIELD_COLS-1
    jmp b1
  // Read all lines and rewrite them
    // [341] phi from play_remove_lines::@6 to play_remove_lines::@1 [phi:play_remove_lines::@6->play_remove_lines::@1]
  b1_from_b6:
    // [341] phi (byte) play_remove_lines::removed#11 = (byte) play_remove_lines::removed#8 [phi:play_remove_lines::@6->play_remove_lines::@1#0] -- register_copy 
    // [341] phi (byte) play_remove_lines::y#8 = (byte) play_remove_lines::y#1 [phi:play_remove_lines::@6->play_remove_lines::@1#1] -- register_copy 
    // [341] phi (byte) play_remove_lines::w#12 = (byte) play_remove_lines::w#11 [phi:play_remove_lines::@6->play_remove_lines::@1#2] -- register_copy 
    // [341] phi (byte) play_remove_lines::r#3 = (byte) play_remove_lines::r#1 [phi:play_remove_lines::@6->play_remove_lines::@1#3] -- register_copy 
    jmp b1
    // play_remove_lines::@1
  b1:
    // [342] phi from play_remove_lines::@1 to play_remove_lines::@2 [phi:play_remove_lines::@1->play_remove_lines::@2]
  b2_from_b1:
    // [342] phi (byte) play_remove_lines::full#4 = (byte) 1 [phi:play_remove_lines::@1->play_remove_lines::@2#0] -- vbuz1=vbuc1 
    lda #1
    sta.z full
    // [342] phi (byte) play_remove_lines::x#2 = (byte) 0 [phi:play_remove_lines::@1->play_remove_lines::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [342] phi (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#12 [phi:play_remove_lines::@1->play_remove_lines::@2#2] -- register_copy 
    // [342] phi (byte) play_remove_lines::r#2 = (byte) play_remove_lines::r#3 [phi:play_remove_lines::@1->play_remove_lines::@2#3] -- register_copy 
    jmp b2
    // [342] phi from play_remove_lines::@3 to play_remove_lines::@2 [phi:play_remove_lines::@3->play_remove_lines::@2]
  b2_from_b3:
    // [342] phi (byte) play_remove_lines::full#4 = (byte) play_remove_lines::full#2 [phi:play_remove_lines::@3->play_remove_lines::@2#0] -- register_copy 
    // [342] phi (byte) play_remove_lines::x#2 = (byte) play_remove_lines::x#1 [phi:play_remove_lines::@3->play_remove_lines::@2#1] -- register_copy 
    // [342] phi (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#1 [phi:play_remove_lines::@3->play_remove_lines::@2#2] -- register_copy 
    // [342] phi (byte) play_remove_lines::r#2 = (byte) play_remove_lines::r#1 [phi:play_remove_lines::@3->play_remove_lines::@2#3] -- register_copy 
    jmp b2
    // play_remove_lines::@2
  b2:
    // [343] (byte) play_remove_lines::c#0 ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::r#2) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda playfield,y
    sta.z c
    // [344] (byte) play_remove_lines::r#1 ← -- (byte) play_remove_lines::r#2 -- vbuyy=_dec_vbuyy 
    dey
    // [345] if((byte) play_remove_lines::c#0!=(byte) 0) goto play_remove_lines::@9 -- vbuz1_neq_0_then_la1 
    lda.z c
    cmp #0
    bne b9_from_b2
    // [347] phi from play_remove_lines::@2 to play_remove_lines::@3 [phi:play_remove_lines::@2->play_remove_lines::@3]
  b3_from_b2:
    // [347] phi (byte) play_remove_lines::full#2 = (byte) 0 [phi:play_remove_lines::@2->play_remove_lines::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z full
    jmp b3
    // [346] phi from play_remove_lines::@2 to play_remove_lines::@9 [phi:play_remove_lines::@2->play_remove_lines::@9]
  b9_from_b2:
    jmp b9
    // play_remove_lines::@9
  b9:
    // [347] phi from play_remove_lines::@9 to play_remove_lines::@3 [phi:play_remove_lines::@9->play_remove_lines::@3]
  b3_from_b9:
    // [347] phi (byte) play_remove_lines::full#2 = (byte) play_remove_lines::full#4 [phi:play_remove_lines::@9->play_remove_lines::@3#0] -- register_copy 
    jmp b3
    // play_remove_lines::@3
  b3:
    // [348] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#4) ← (byte) play_remove_lines::c#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z c
    sta playfield,x
    // [349] (byte) play_remove_lines::w#1 ← -- (byte) play_remove_lines::w#4 -- vbuxx=_dec_vbuxx 
    dex
    // [350] (byte) play_remove_lines::x#1 ← ++ (byte) play_remove_lines::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [351] if((byte) play_remove_lines::x#1!=(const byte) PLAYFIELD_COLS#0-(byte) 1+(byte) 1) goto play_remove_lines::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_COLS-1+1
    cmp.z x
    bne b2_from_b3
    jmp b4
    // play_remove_lines::@4
  b4:
    // [352] if((byte) play_remove_lines::full#2!=(byte) 1) goto play_remove_lines::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp.z full
    bne b6_from_b4
    jmp b5
    // play_remove_lines::@5
  b5:
    // [353] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    axs #-[PLAYFIELD_COLS]
    // [354] (byte) play_remove_lines::removed#1 ← ++ (byte) play_remove_lines::removed#11 -- vbuz1=_inc_vbuz1 
    inc.z removed
    // [355] phi from play_remove_lines::@4 play_remove_lines::@5 to play_remove_lines::@6 [phi:play_remove_lines::@4/play_remove_lines::@5->play_remove_lines::@6]
  b6_from_b4:
  b6_from_b5:
    // [355] phi (byte) play_remove_lines::removed#8 = (byte) play_remove_lines::removed#11 [phi:play_remove_lines::@4/play_remove_lines::@5->play_remove_lines::@6#0] -- register_copy 
    // [355] phi (byte) play_remove_lines::w#11 = (byte) play_remove_lines::w#1 [phi:play_remove_lines::@4/play_remove_lines::@5->play_remove_lines::@6#1] -- register_copy 
    jmp b6
    // play_remove_lines::@6
  b6:
    // [356] (byte) play_remove_lines::y#1 ← ++ (byte) play_remove_lines::y#8 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [357] if((byte) play_remove_lines::y#1!=(const byte) PLAYFIELD_LINES#0-(byte) 1+(byte) 1) goto play_remove_lines::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_LINES-1+1
    cmp.z y
    bne b1_from_b6
    // [358] phi from play_remove_lines::@6 play_remove_lines::@8 to play_remove_lines::@7 [phi:play_remove_lines::@6/play_remove_lines::@8->play_remove_lines::@7]
  b7_from_b6:
  b7_from_b8:
    // [358] phi (byte) play_remove_lines::w#6 = (byte) play_remove_lines::w#11 [phi:play_remove_lines::@6/play_remove_lines::@8->play_remove_lines::@7#0] -- register_copy 
    jmp b7
  // Write zeros in the rest of the lines
    // play_remove_lines::@7
  b7:
    // [359] if((byte) play_remove_lines::w#6!=(byte) $ff) goto play_remove_lines::@8 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$ff
    bne b8
    jmp breturn
    // play_remove_lines::@return
  breturn:
    // [360] return 
    rts
    // play_remove_lines::@8
  b8:
    // [361] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#6) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta playfield,x
    // [362] (byte) play_remove_lines::w#3 ← -- (byte) play_remove_lines::w#6 -- vbuxx=_dec_vbuxx 
    dex
    jmp b7_from_b8
}
  // play_lock_current
// Lock the current piece onto the playfield
play_lock_current: {
    .label yp = $18
    .label playfield_line = $2c
    .label xp = $12
    .label i = $2f
    .label l = $10
    .label i_2 = $11
    .label i_3 = $11
    .label i_7 = $11
    .label i_9 = $11
    // [363] (byte) play_lock_current::yp#0 ← (byte) current_ypos#11
    // [364] phi from play_lock_current to play_lock_current::@1 [phi:play_lock_current->play_lock_current::@1]
  b1_from_play_lock_current:
    // [364] phi (byte) play_lock_current::l#6 = (byte) 0 [phi:play_lock_current->play_lock_current::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [364] phi (byte) play_lock_current::i#3 = (byte) 0 [phi:play_lock_current->play_lock_current::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i_3
    // [364] phi (byte) play_lock_current::yp#2 = (byte) play_lock_current::yp#0 [phi:play_lock_current->play_lock_current::@1#2] -- register_copy 
    jmp b1
    // play_lock_current::@1
  b1:
    // [365] (byte~) play_lock_current::$4 ← (byte) play_lock_current::yp#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z yp
    asl
    // [366] (byte*) play_lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_lock_current::$4) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda playfield_lines,y
    sta.z playfield_line
    lda playfield_lines+1,y
    sta.z playfield_line+1
    // [367] (byte) play_lock_current::xp#0 ← (byte) current_xpos#14 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z xp
    // [368] phi from play_lock_current::@1 to play_lock_current::@2 [phi:play_lock_current::@1->play_lock_current::@2]
  b2_from_b1:
    // [368] phi (byte) play_lock_current::c#2 = (byte) 0 [phi:play_lock_current::@1->play_lock_current::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [368] phi (byte) play_lock_current::xp#2 = (byte) play_lock_current::xp#0 [phi:play_lock_current::@1->play_lock_current::@2#1] -- register_copy 
    // [368] phi (byte) play_lock_current::i#2 = (byte) play_lock_current::i#3 [phi:play_lock_current::@1->play_lock_current::@2#2] -- register_copy 
    jmp b2
    // play_lock_current::@2
  b2:
    // [369] (byte) play_lock_current::i#1 ← ++ (byte) play_lock_current::i#2 -- vbuz1=_inc_vbuz2 
    ldy.z i_2
    iny
    sty.z i
    // [370] if(*((byte*) current_piece_gfx#13 + (byte) play_lock_current::i#2)==(byte) 0) goto play_lock_current::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy.z i_2
    lda (current_piece_gfx),y
    cmp #0
    beq b3
    jmp b4
    // play_lock_current::@4
  b4:
    // [371] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::xp#2) ← (byte) current_piece_char#10 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z current_piece_char
    ldy.z xp
    sta (playfield_line),y
    jmp b3
    // play_lock_current::@3
  b3:
    // [372] (byte) play_lock_current::xp#1 ← ++ (byte) play_lock_current::xp#2 -- vbuz1=_inc_vbuz1 
    inc.z xp
    // [373] (byte) play_lock_current::c#1 ← ++ (byte) play_lock_current::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [374] if((byte) play_lock_current::c#1!=(byte) 4) goto play_lock_current::@7 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b7
    jmp b5
    // play_lock_current::@5
  b5:
    // [375] (byte) play_lock_current::yp#1 ← ++ (byte) play_lock_current::yp#2 -- vbuz1=_inc_vbuz1 
    inc.z yp
    // [376] (byte) play_lock_current::l#1 ← ++ (byte) play_lock_current::l#6 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [377] if((byte) play_lock_current::l#1!=(byte) 4) goto play_lock_current::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne b6
    jmp breturn
    // play_lock_current::@return
  breturn:
    // [378] return 
    rts
    // play_lock_current::@6
  b6:
    // [379] (byte~) play_lock_current::i#7 ← (byte) play_lock_current::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_7
    // [364] phi from play_lock_current::@6 to play_lock_current::@1 [phi:play_lock_current::@6->play_lock_current::@1]
  b1_from_b6:
    // [364] phi (byte) play_lock_current::l#6 = (byte) play_lock_current::l#1 [phi:play_lock_current::@6->play_lock_current::@1#0] -- register_copy 
    // [364] phi (byte) play_lock_current::i#3 = (byte~) play_lock_current::i#7 [phi:play_lock_current::@6->play_lock_current::@1#1] -- register_copy 
    // [364] phi (byte) play_lock_current::yp#2 = (byte) play_lock_current::yp#1 [phi:play_lock_current::@6->play_lock_current::@1#2] -- register_copy 
    jmp b1
    // play_lock_current::@7
  b7:
    // [380] (byte~) play_lock_current::i#9 ← (byte) play_lock_current::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_9
    // [368] phi from play_lock_current::@7 to play_lock_current::@2 [phi:play_lock_current::@7->play_lock_current::@2]
  b2_from_b7:
    // [368] phi (byte) play_lock_current::c#2 = (byte) play_lock_current::c#1 [phi:play_lock_current::@7->play_lock_current::@2#0] -- register_copy 
    // [368] phi (byte) play_lock_current::xp#2 = (byte) play_lock_current::xp#1 [phi:play_lock_current::@7->play_lock_current::@2#1] -- register_copy 
    // [368] phi (byte) play_lock_current::i#2 = (byte~) play_lock_current::i#9 [phi:play_lock_current::@7->play_lock_current::@2#2] -- register_copy 
    jmp b2
}
  // keyboard_event_pressed
// Determine if a specific key is currently pressed based on the last keyboard_event_scan()
// Returns 0 is not pressed and non-0 if pressed
// keyboard_event_pressed(byte zeropage($12) keycode)
keyboard_event_pressed: {
    .label row_bits = $2e
    .label keycode = $12
    // [382] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte) 3 -- vbuaa=vbuz1_ror_3 
    lda.z keycode
    lsr
    lsr
    lsr
    // [383] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_scan_values,y
    sta.z row_bits
    // [384] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte) 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z keycode
    // [385] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_matrix_col_bitmask,y
    and.z row_bits
    jmp breturn
    // keyboard_event_pressed::@return
  breturn:
    // [386] return 
    rts
}
  // keyboard_event_get
// Get the next event from the keyboard event buffer.
// Returns $ff if there is no event waiting. As all events are <$7f it is enough to examine bit 7 when determining if there is any event to process.
// The buffer is filled by keyboard_event_scan()
keyboard_event_get: {
    // [387] if((byte) keyboard_events_size#13==(byte) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda.z keyboard_events_size
    cmp #0
    beq breturn_from_keyboard_event_get
    jmp b1
    // keyboard_event_get::@1
  b1:
    // [388] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#13 -- vbuz1=_dec_vbuz1 
    dec.z keyboard_events_size
    // [389] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldy.z keyboard_events_size
    ldx keyboard_events,y
    // [390] phi from keyboard_event_get::@1 to keyboard_event_get::@return [phi:keyboard_event_get::@1->keyboard_event_get::@return]
  breturn_from_b1:
    // [390] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@1->keyboard_event_get::@return#0] -- register_copy 
    // [390] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@1->keyboard_event_get::@return#1] -- register_copy 
    jmp breturn
    // [390] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  breturn_from_keyboard_event_get:
    // [390] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#13 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
    // [390] phi (byte) keyboard_event_get::return#2 = (byte) $ff [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuxx=vbuc1 
    ldx #$ff
    jmp breturn
    // keyboard_event_get::@return
  breturn:
    // [391] return 
    rts
}
  // keyboard_event_scan
// Scans the entire matrix to determine which keys have been pressed/depressed.
// Generates keyboard events into the event buffer. Events can be read using keyboard_event_get().
// Handles debounce and only generates events when the status of a key changes.
// Also stores current status of modifiers in keyboard_modifiers.
keyboard_event_scan: {
    .label row_scan = $2f
    .label keycode = $21
    .label row = $20
    // [393] phi from keyboard_event_scan to keyboard_event_scan::@7 [phi:keyboard_event_scan->keyboard_event_scan::@7]
  b7_from_keyboard_event_scan:
    // [393] phi (byte) keyboard_events_size#30 = (byte) keyboard_events_size#19 [phi:keyboard_event_scan->keyboard_event_scan::@7#0] -- register_copy 
    // [393] phi (byte) keyboard_event_scan::keycode#11 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#1] -- vbuz1=vbuc1 
    lda #0
    sta.z keycode
    // [393] phi (byte) keyboard_event_scan::row#2 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#2] -- vbuz1=vbuc1 
    lda #0
    sta.z row
    jmp b7
    // [393] phi from keyboard_event_scan::@8 to keyboard_event_scan::@7 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7]
  b7_from_b8:
    // [393] phi (byte) keyboard_events_size#30 = (byte) keyboard_events_size#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#0] -- register_copy 
    // [393] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#1] -- register_copy 
    // [393] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#2] -- register_copy 
    jmp b7
    // keyboard_event_scan::@7
  b7:
    // [394] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuxx=vbuz1 
    ldx.z row
    // [395] call keyboard_matrix_read 
    jsr keyboard_matrix_read
    // [396] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
    jmp b19
    // keyboard_event_scan::@19
  b19:
    // [397] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuaa 
    sta.z row_scan
    // [398] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    lda.z row_scan
    ldy.z row
    cmp keyboard_scan_values,y
    bne b9_from_b19
    jmp b16
    // keyboard_event_scan::@16
  b16:
    // [399] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z keycode
    axs #-[8]
    stx.z keycode
    // [400] phi from keyboard_event_scan::@15 keyboard_event_scan::@16 to keyboard_event_scan::@8 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8]
  b8_from_b15:
  b8_from_b16:
    // [400] phi (byte) keyboard_events_size#13 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#0] -- register_copy 
    // [400] phi (byte) keyboard_event_scan::keycode#13 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#1] -- register_copy 
    jmp b8
    // keyboard_event_scan::@8
  b8:
    // [401] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc.z row
    // [402] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z row
    bne b7_from_b8
    // [403] phi from keyboard_event_scan::@8 to keyboard_event_scan::@17 [phi:keyboard_event_scan::@8->keyboard_event_scan::@17]
  b17_from_b8:
    jmp b17
    // keyboard_event_scan::@17
  b17:
    // [404] call keyboard_event_pressed 
    // [381] phi from keyboard_event_scan::@17 to keyboard_event_pressed [phi:keyboard_event_scan::@17->keyboard_event_pressed]
  keyboard_event_pressed_from_b17:
    // [381] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_LSHIFT#0 [phi:keyboard_event_scan::@17->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [405] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11
    jmp b20
    // keyboard_event_scan::@20
  b20:
    // [406] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0
    // [407] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b1_from_b20
    // [408] phi from keyboard_event_scan::@20 to keyboard_event_scan::@18 [phi:keyboard_event_scan::@20->keyboard_event_scan::@18]
  b18_from_b20:
    jmp b18
    // keyboard_event_scan::@18
  b18:
    // [409] phi from keyboard_event_scan::@18 keyboard_event_scan::@20 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@18/keyboard_event_scan::@20->keyboard_event_scan::@1]
  b1_from_b18:
  b1_from_b20:
    jmp b1
    // keyboard_event_scan::@1
  b1:
    // [410] call keyboard_event_pressed 
    // [381] phi from keyboard_event_scan::@1 to keyboard_event_pressed [phi:keyboard_event_scan::@1->keyboard_event_pressed]
  keyboard_event_pressed_from_b1:
    // [381] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_RSHIFT#0 [phi:keyboard_event_scan::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [411] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11
    jmp b21
    // keyboard_event_scan::@21
  b21:
    // [412] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1
    // [413] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b21
    // [414] phi from keyboard_event_scan::@21 to keyboard_event_scan::@4 [phi:keyboard_event_scan::@21->keyboard_event_scan::@4]
  b4_from_b21:
    jmp b4
    // keyboard_event_scan::@4
  b4:
    // [415] phi from keyboard_event_scan::@21 keyboard_event_scan::@4 to keyboard_event_scan::@2 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2]
  b2_from_b21:
  b2_from_b4:
    jmp b2
    // keyboard_event_scan::@2
  b2:
    // [416] call keyboard_event_pressed 
    // [381] phi from keyboard_event_scan::@2 to keyboard_event_pressed [phi:keyboard_event_scan::@2->keyboard_event_pressed]
  keyboard_event_pressed_from_b2:
    // [381] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_CTRL#0 [phi:keyboard_event_scan::@2->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [417] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11
    jmp b22
    // keyboard_event_scan::@22
  b22:
    // [418] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2
    // [419] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3_from_b22
    // [420] phi from keyboard_event_scan::@22 to keyboard_event_scan::@5 [phi:keyboard_event_scan::@22->keyboard_event_scan::@5]
  b5_from_b22:
    jmp b5
    // keyboard_event_scan::@5
  b5:
    // [421] phi from keyboard_event_scan::@22 keyboard_event_scan::@5 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3]
  b3_from_b22:
  b3_from_b5:
    jmp b3
    // keyboard_event_scan::@3
  b3:
    // [422] call keyboard_event_pressed 
    // [381] phi from keyboard_event_scan::@3 to keyboard_event_pressed [phi:keyboard_event_scan::@3->keyboard_event_pressed]
  keyboard_event_pressed_from_b3:
    // [381] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_COMMODORE#0 [phi:keyboard_event_scan::@3->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [423] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11
    jmp b23
    // keyboard_event_scan::@23
  b23:
    // [424] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#10
    // [425] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq breturn
    // [426] phi from keyboard_event_scan::@23 to keyboard_event_scan::@6 [phi:keyboard_event_scan::@23->keyboard_event_scan::@6]
  b6_from_b23:
    jmp b6
    // keyboard_event_scan::@6
  b6:
    jmp breturn
    // keyboard_event_scan::@return
  breturn:
    // [427] return 
    rts
  // Something has changed on the keyboard row - check each column
    // [428] phi from keyboard_event_scan::@10 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9]
  b9_from_b10:
    // [428] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#0] -- register_copy 
    // [428] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#1] -- register_copy 
    // [428] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#2] -- register_copy 
    jmp b9
    // [428] phi from keyboard_event_scan::@19 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9]
  b9_from_b19:
    // [428] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#30 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#0] -- register_copy 
    // [428] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#1] -- register_copy 
    // [428] phi (byte) keyboard_event_scan::col#2 = (byte) 0 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#2] -- vbuxx=vbuc1 
    ldx #0
    jmp b9
    // keyboard_event_scan::@9
  b9:
    // [429] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) -- vbuaa=vbuz1_bxor_pbuc1_derefidx_vbuz2 
    lda.z row_scan
    ldy.z row
    eor keyboard_scan_values,y
    // [430] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuxx 
    and keyboard_matrix_col_bitmask,x
    // [431] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b10_from_b9
    jmp b12
    // keyboard_event_scan::@12
  b12:
    // [432] if((byte) keyboard_events_size#10==(byte) 8) goto keyboard_event_scan::@10 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z keyboard_events_size
    beq b10_from_b12
    jmp b13
    // keyboard_event_scan::@13
  b13:
    // [433] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuxx 
    lda keyboard_matrix_col_bitmask,x
    and.z row_scan
    // [434] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b11
    jmp b14
    // keyboard_event_scan::@14
  b14:
    // [435] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key pressed
    lda.z keycode
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // [436] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    // [437] phi from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10]
  b10_from_b11:
  b10_from_b12:
  b10_from_b14:
  b10_from_b9:
    // [437] phi (byte) keyboard_events_size#29 = (byte) keyboard_events_size#1 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10#0] -- register_copy 
    jmp b10
    // keyboard_event_scan::@10
  b10:
    // [438] (byte) keyboard_event_scan::keycode#14 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc.z keycode
    // [439] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuxx=_inc_vbuxx 
    inx
    // [440] if((byte) keyboard_event_scan::col#1!=(byte) 8) goto keyboard_event_scan::@9 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b9_from_b10
    jmp b15
    // keyboard_event_scan::@15
  b15:
    // [441] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Store the current keyboard status for the row to debounce
    lda.z row_scan
    ldy.z row
    sta keyboard_scan_values,y
    jmp b8_from_b15
    // keyboard_event_scan::@11
  b11:
    // [442] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 -- vbuaa=vbuz1_bor_vbuc1 
    lda #$40
    ora.z keycode
    // [443] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte~) keyboard_event_scan::$23 -- pbuc1_derefidx_vbuz1=vbuaa 
    // Key released
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // [444] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    jmp b10_from_b11
}
  // keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable kill the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte register(X) rowid)
keyboard_matrix_read: {
    // [445] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda keyboard_matrix_row_bitmask,x
    sta CIA1_PORT_A
    // [446] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    jmp breturn
    // keyboard_matrix_read::@return
  breturn:
    // [447] return 
    rts
}
  // render_show
// Update $D018 to show the current screen (used for double buffering)
render_show: {
    .const toD0181_return = (>(PLAYFIELD_SCREEN_1&$3fff)*4)|(>PLAYFIELD_CHARSET)/4&$f
    .const toD0182_return = (>(PLAYFIELD_SCREEN_2&$3fff)*4)|(>PLAYFIELD_CHARSET)/4&$f
    // [448] if((byte) render_screen_show#16==(byte) 0) goto render_show::toD0181 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_show
    cmp #0
    beq toD0181_from_render_show
    // [449] phi from render_show to render_show::toD0182 [phi:render_show->render_show::toD0182]
  toD0182_from_render_show:
    jmp toD0182
    // render_show::toD0182
  toD0182:
    // [450] phi from render_show::toD0182 to render_show::@1 [phi:render_show::toD0182->render_show::@1]
  b1_from_toD0182:
    // [450] phi (byte) render_show::d018val#3 = (const byte) render_show::toD0182_return#0 [phi:render_show::toD0182->render_show::@1#0] -- vbuaa=vbuc1 
    lda #toD0182_return
    jmp b1
    // render_show::@1
  b1:
    // [451] *((const byte*) D018#0) ← (byte) render_show::d018val#3 -- _deref_pbuc1=vbuaa 
    sta D018
    // [452] *((const byte*) BGCOL2#0) ← *((const byte[]) PIECES_COLORS_1#0 + (byte) level#10) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy.z level
    lda PIECES_COLORS_1,y
    sta BGCOL2
    // [453] *((const byte*) BGCOL3#0) ← *((const byte[]) PIECES_COLORS_2#0 + (byte) level#10) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy.z level
    lda PIECES_COLORS_2,y
    sta BGCOL3
    // [454] (byte) render_screen_showing#1 ← (byte) render_screen_show#16 -- vbuz1=vbuz2 
    lda.z render_screen_show
    sta.z render_screen_showing
    jmp breturn
    // render_show::@return
  breturn:
    // [455] return 
    rts
    // [456] phi from render_show to render_show::toD0181 [phi:render_show->render_show::toD0181]
  toD0181_from_render_show:
    jmp toD0181
    // render_show::toD0181
  toD0181:
    // [450] phi from render_show::toD0181 to render_show::@1 [phi:render_show::toD0181->render_show::@1]
  b1_from_toD0181:
    // [450] phi (byte) render_show::d018val#3 = (const byte) render_show::toD0181_return#0 [phi:render_show::toD0181->render_show::@1#0] -- vbuaa=vbuc1 
    lda #toD0181_return
    jmp b1
}
  // play_init
// Initialize play data tables
play_init: {
    .label pli = $22
    .label idx = $14
    // [458] phi from play_init to play_init::@1 [phi:play_init->play_init::@1]
  b1_from_play_init:
    // [458] phi (byte) play_init::idx#2 = (byte) 0 [phi:play_init->play_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [458] phi (byte*) play_init::pli#2 = (const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 [phi:play_init->play_init::@1#1] -- pbuz1=pbuc1 
    lda #<playfield
    sta.z pli
    lda #>playfield
    sta.z pli+1
    // [458] phi (byte) play_init::j#2 = (byte) 0 [phi:play_init->play_init::@1#2] -- vbuyy=vbuc1 
    ldy #0
    jmp b1
    // [458] phi from play_init::@1 to play_init::@1 [phi:play_init::@1->play_init::@1]
  b1_from_b1:
    // [458] phi (byte) play_init::idx#2 = (byte) play_init::idx#1 [phi:play_init::@1->play_init::@1#0] -- register_copy 
    // [458] phi (byte*) play_init::pli#2 = (byte*) play_init::pli#1 [phi:play_init::@1->play_init::@1#1] -- register_copy 
    // [458] phi (byte) play_init::j#2 = (byte) play_init::j#1 [phi:play_init::@1->play_init::@1#2] -- register_copy 
    jmp b1
    // play_init::@1
  b1:
    // [459] (byte~) play_init::$4 ← (byte) play_init::j#2 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [460] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_init::$4) ← (byte*) play_init::pli#2 -- pptc1_derefidx_vbuxx=pbuz1 
    lda.z pli
    sta playfield_lines,x
    lda.z pli+1
    sta playfield_lines+1,x
    // [461] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) play_init::j#2) ← (byte) play_init::idx#2 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda.z idx
    sta playfield_lines_idx,y
    // [462] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const byte) PLAYFIELD_COLS#0 -- pbuz1=pbuz1_plus_vbuc1 
    lda #PLAYFIELD_COLS
    clc
    adc.z pli
    sta.z pli
    bcc !+
    inc.z pli+1
  !:
    // [463] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const byte) PLAYFIELD_COLS#0 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z idx
    axs #-[PLAYFIELD_COLS]
    stx.z idx
    // [464] (byte) play_init::j#1 ← ++ (byte) play_init::j#2 -- vbuyy=_inc_vbuyy 
    iny
    // [465] if((byte) play_init::j#1!=(const byte) PLAYFIELD_LINES#0-(byte) 1+(byte) 1) goto play_init::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #PLAYFIELD_LINES-1+1
    bne b1_from_b1
    jmp b2
    // play_init::@2
  b2:
    // [466] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0 -- _deref_pbuc1=vbuc2 
    lda #PLAYFIELD_COLS*PLAYFIELD_LINES
    sta playfield_lines_idx+PLAYFIELD_LINES
    // [467] (byte) current_movedown_slow#1 ← *((const byte[]) MOVEDOWN_SLOW_SPEEDS#0) -- vbuz1=_deref_pbuc1 
    // Set initial speed of moving down a tetromino
    lda MOVEDOWN_SLOW_SPEEDS
    sta.z current_movedown_slow
    // [468] phi from play_init::@2 to play_init::@3 [phi:play_init::@2->play_init::@3]
  b3_from_b2:
    // [468] phi (byte) play_init::b#2 = (byte) 0 [phi:play_init::@2->play_init::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  // Set the initial score add values
    // [468] phi from play_init::@3 to play_init::@3 [phi:play_init::@3->play_init::@3]
  b3_from_b3:
    // [468] phi (byte) play_init::b#2 = (byte) play_init::b#1 [phi:play_init::@3->play_init::@3#0] -- register_copy 
    jmp b3
    // play_init::@3
  b3:
    // [469] (byte~) play_init::$5 ← (byte) play_init::b#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
    // [470] *((const dword[5]) score_add_bcd#0 + (byte~) play_init::$5) ← *((const dword[]) SCORE_BASE_BCD#0 + (byte~) play_init::$5) -- pduc1_derefidx_vbuaa=pduc2_derefidx_vbuaa 
    tay
    lda SCORE_BASE_BCD,y
    sta score_add_bcd,y
    lda SCORE_BASE_BCD+1,y
    sta score_add_bcd+1,y
    lda SCORE_BASE_BCD+2,y
    sta score_add_bcd+2,y
    lda SCORE_BASE_BCD+3,y
    sta score_add_bcd+3,y
    // [471] (byte) play_init::b#1 ← ++ (byte) play_init::b#2 -- vbuxx=_inc_vbuxx 
    inx
    // [472] if((byte) play_init::b#1!=(byte) 5) goto play_init::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #5
    bne b3_from_b3
    jmp breturn
    // play_init::@return
  breturn:
    // [473] return 
    rts
}
  // sprites_irq_init
// Setup the IRQ
sprites_irq_init: {
    // asm { sei  }
    sei
    // [475] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge any IRQ and setup the next one
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // asm { ldaCIA1_INTERRUPT  }
    lda CIA1_INTERRUPT
    // [477] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // [478] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [479] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
    // [480] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
    // [481] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER_FIRST
    sta RASTER
    // [482] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // [483] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq() -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<sprites_irq
    sta HARDWARE_IRQ
    lda #>sprites_irq
    sta HARDWARE_IRQ+1
    // asm { cli  }
    cli
    jmp breturn
    // sprites_irq_init::@return
  breturn:
    // [485] return 
    rts
}
  // sprites_init
// Setup the sprites
sprites_init: {
    .label xpos = $15
    // [486] *((const byte*) SPRITES_ENABLE#0) ← (byte) $f -- _deref_pbuc1=vbuc2 
    lda #$f
    sta SPRITES_ENABLE
    // [487] *((const byte*) SPRITES_MC#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
    // [488] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0) -- _deref_pbuc1=_deref_pbuc2 
    lda SPRITES_MC
    sta SPRITES_EXPAND_Y
    // [489] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0) -- _deref_pbuc1=_deref_pbuc2 
    lda SPRITES_EXPAND_Y
    sta SPRITES_EXPAND_X
    // [490] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
  b1_from_sprites_init:
    // [490] phi (byte) sprites_init::xpos#2 = (byte)(number) $18+(number) $f*(number) 8 [phi:sprites_init->sprites_init::@1#0] -- vbuz1=vbuc1 
    lda #$18+$f*8
    sta.z xpos
    // [490] phi (byte) sprites_init::s#2 = (byte) 0 [phi:sprites_init->sprites_init::@1#1] -- vbuyy=vbuc1 
    ldy #0
    jmp b1
    // [490] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
  b1_from_b1:
    // [490] phi (byte) sprites_init::xpos#2 = (byte) sprites_init::xpos#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
    // [490] phi (byte) sprites_init::s#2 = (byte) sprites_init::s#1 [phi:sprites_init::@1->sprites_init::@1#1] -- register_copy 
    jmp b1
    // sprites_init::@1
  b1:
    // [491] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [492] *((const byte*) SPRITES_XPOS#0 + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z xpos
    sta SPRITES_XPOS,x
    // [493] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::s#2) ← (const byte) BLACK#0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #BLACK
    sta SPRITES_COLS,y
    // [494] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte) $18 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z xpos
    axs #-[$18]
    stx.z xpos
    // [495] (byte) sprites_init::s#1 ← ++ (byte) sprites_init::s#2 -- vbuyy=_inc_vbuyy 
    iny
    // [496] if((byte) sprites_init::s#1!=(byte) 4) goto sprites_init::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #4
    bne b1_from_b1
    jmp breturn
    // sprites_init::@return
  breturn:
    // [497] return 
    rts
}
  // render_init
// Initialize rendering
render_init: {
    .const vicSelectGfxBank1_toDd001_return = 3
    .label li_1 = $16
    .label li_2 = $2c
    jmp vicSelectGfxBank1
    // render_init::vicSelectGfxBank1
  vicSelectGfxBank1:
    // [499] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
    // [500] phi from render_init::vicSelectGfxBank1 to render_init::vicSelectGfxBank1_toDd001 [phi:render_init::vicSelectGfxBank1->render_init::vicSelectGfxBank1_toDd001]
  vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
    jmp vicSelectGfxBank1_toDd001
    // render_init::vicSelectGfxBank1_toDd001
  vicSelectGfxBank1_toDd001:
    jmp vicSelectGfxBank1_b1
    // render_init::vicSelectGfxBank1_@1
  vicSelectGfxBank1_b1:
    // [501] *((const byte*) CIA2_PORT_A#0) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2_PORT_A
    jmp b2
    // render_init::@2
  b2:
    // [502] *((const byte*) D011#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte) 3 -- _deref_pbuc1=vbuc2 
    // Enable Extended Background Color Mode
    lda #VIC_ECM|VIC_DEN|VIC_RSEL|3
    sta D011
    // [503] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    // [504] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BGCOL1
    // [505] *((const byte*) BGCOL2#0) ← *((const byte[]) PIECES_COLORS_1#0) -- _deref_pbuc1=_deref_pbuc2 
    lda PIECES_COLORS_1
    sta BGCOL2
    // [506] *((const byte*) BGCOL3#0) ← *((const byte[]) PIECES_COLORS_2#0) -- _deref_pbuc1=_deref_pbuc2 
    lda PIECES_COLORS_2
    sta BGCOL3
    // [507] *((const byte*) BGCOL4#0) ← (const byte) GREY#0 -- _deref_pbuc1=vbuc2 
    lda #GREY
    sta BGCOL4
    // [508] call render_screen_original 
    // [520] phi from render_init::@2 to render_screen_original [phi:render_init::@2->render_screen_original]
  render_screen_original_from_b2:
    // [520] phi (byte*) render_screen_original::screen#9 = (const byte*) PLAYFIELD_SCREEN_1#0 [phi:render_init::@2->render_screen_original#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1
    sta.z render_screen_original.screen
    lda #>PLAYFIELD_SCREEN_1
    sta.z render_screen_original.screen+1
    jsr render_screen_original
    // [509] phi from render_init::@2 to render_init::@3 [phi:render_init::@2->render_init::@3]
  b3_from_b2:
    jmp b3
    // render_init::@3
  b3:
    // [510] call render_screen_original 
    // [520] phi from render_init::@3 to render_screen_original [phi:render_init::@3->render_screen_original]
  render_screen_original_from_b3:
    // [520] phi (byte*) render_screen_original::screen#9 = (const byte*) PLAYFIELD_SCREEN_2#0 [phi:render_init::@3->render_screen_original#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2
    sta.z render_screen_original.screen
    lda #>PLAYFIELD_SCREEN_2
    sta.z render_screen_original.screen+1
    jsr render_screen_original
    // [511] phi from render_init::@3 to render_init::@1 [phi:render_init::@3->render_init::@1]
  b1_from_b3:
    // [511] phi (byte*) render_init::li_2#2 = (const byte*) PLAYFIELD_SCREEN_2#0+(byte)(number) 2*(number) $28+(byte) $10 [phi:render_init::@3->render_init::@1#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2+2*$28+$10
    sta.z li_2
    lda #>PLAYFIELD_SCREEN_2+2*$28+$10
    sta.z li_2+1
    // [511] phi (byte*) render_init::li_1#2 = (const byte*) PLAYFIELD_SCREEN_1#0+(byte)(number) 2*(number) $28+(byte) $10 [phi:render_init::@3->render_init::@1#1] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1+2*$28+$10
    sta.z li_1
    lda #>PLAYFIELD_SCREEN_1+2*$28+$10
    sta.z li_1+1
    // [511] phi (byte) render_init::i#2 = (byte) 0 [phi:render_init::@3->render_init::@1#2] -- vbuyy=vbuc1 
    ldy #0
    jmp b1
    // [511] phi from render_init::@1 to render_init::@1 [phi:render_init::@1->render_init::@1]
  b1_from_b1:
    // [511] phi (byte*) render_init::li_2#2 = (byte*) render_init::li_2#1 [phi:render_init::@1->render_init::@1#0] -- register_copy 
    // [511] phi (byte*) render_init::li_1#2 = (byte*) render_init::li_1#1 [phi:render_init::@1->render_init::@1#1] -- register_copy 
    // [511] phi (byte) render_init::i#2 = (byte) render_init::i#1 [phi:render_init::@1->render_init::@1#2] -- register_copy 
    jmp b1
    // render_init::@1
  b1:
    // [512] (byte~) render_init::$13 ← (byte) render_init::i#2 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [513] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_init::$13) ← (byte*) render_init::li_1#2 -- pptc1_derefidx_vbuxx=pbuz1 
    lda.z li_1
    sta screen_lines_1,x
    lda.z li_1+1
    sta screen_lines_1+1,x
    // [514] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 + (byte~) render_init::$13) ← (byte*) render_init::li_2#2 -- pptc1_derefidx_vbuxx=pbuz1 
    lda.z li_2
    sta screen_lines_2,x
    lda.z li_2+1
    sta screen_lines_2+1,x
    // [515] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z li_1
    sta.z li_1
    bcc !+
    inc.z li_1+1
  !:
    // [516] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z li_2
    sta.z li_2
    bcc !+
    inc.z li_2+1
  !:
    // [517] (byte) render_init::i#1 ← ++ (byte) render_init::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [518] if((byte) render_init::i#1!=(const byte) PLAYFIELD_LINES#0-(byte) 1+(byte) 1) goto render_init::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #PLAYFIELD_LINES-1+1
    bne b1_from_b1
    jmp breturn
    // render_init::@return
  breturn:
    // [519] return 
    rts
}
  // render_screen_original
// Copy the original screen data to the passed screen
// Also copies colors to $d800
// render_screen_original(byte* zeropage($24) screen)
render_screen_original: {
    .const SPACE = 0
    .label screen = $24
    .label cols = $2c
    .label oscr = $19
    .label ocols = $22
    .label y = $18
    // [521] phi from render_screen_original to render_screen_original::@1 [phi:render_screen_original->render_screen_original::@1]
  b1_from_render_screen_original:
    // [521] phi (byte) render_screen_original::y#6 = (byte) 0 [phi:render_screen_original->render_screen_original::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [521] phi (byte*) render_screen_original::ocols#4 = (const byte*) PLAYFIELD_COLORS_ORIGINAL#0+(byte)(number) $20*(number) 2 [phi:render_screen_original->render_screen_original::@1#1] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_COLORS_ORIGINAL+$20*2
    sta.z ocols
    lda #>PLAYFIELD_COLORS_ORIGINAL+$20*2
    sta.z ocols+1
    // [521] phi (byte*) render_screen_original::oscr#4 = (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0+(byte)(number) $20*(number) 2 [phi:render_screen_original->render_screen_original::@1#2] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_ORIGINAL+$20*2
    sta.z oscr
    lda #>PLAYFIELD_SCREEN_ORIGINAL+$20*2
    sta.z oscr+1
    // [521] phi (byte*) render_screen_original::cols#7 = (const byte*) COLS#0 [phi:render_screen_original->render_screen_original::@1#3] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z cols
    lda #>COLS
    sta.z cols+1
    // [521] phi (byte*) render_screen_original::screen#8 = (byte*) render_screen_original::screen#9 [phi:render_screen_original->render_screen_original::@1#4] -- register_copy 
    jmp b1
    // [521] phi from render_screen_original::@5 to render_screen_original::@1 [phi:render_screen_original::@5->render_screen_original::@1]
  b1_from_b5:
    // [521] phi (byte) render_screen_original::y#6 = (byte) render_screen_original::y#1 [phi:render_screen_original::@5->render_screen_original::@1#0] -- register_copy 
    // [521] phi (byte*) render_screen_original::ocols#4 = (byte*) render_screen_original::ocols#1 [phi:render_screen_original::@5->render_screen_original::@1#1] -- register_copy 
    // [521] phi (byte*) render_screen_original::oscr#4 = (byte*) render_screen_original::oscr#1 [phi:render_screen_original::@5->render_screen_original::@1#2] -- register_copy 
    // [521] phi (byte*) render_screen_original::cols#7 = (byte*) render_screen_original::cols#3 [phi:render_screen_original::@5->render_screen_original::@1#3] -- register_copy 
    // [521] phi (byte*) render_screen_original::screen#8 = (byte*) render_screen_original::screen#10 [phi:render_screen_original::@5->render_screen_original::@1#4] -- register_copy 
    jmp b1
    // render_screen_original::@1
  b1:
    // [522] phi from render_screen_original::@1 to render_screen_original::@2 [phi:render_screen_original::@1->render_screen_original::@2]
  b2_from_b1:
    // [522] phi (byte) render_screen_original::x#4 = (byte) 0 [phi:render_screen_original::@1->render_screen_original::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [522] phi (byte*) render_screen_original::cols#4 = (byte*) render_screen_original::cols#7 [phi:render_screen_original::@1->render_screen_original::@2#1] -- register_copy 
    // [522] phi (byte*) render_screen_original::screen#5 = (byte*) render_screen_original::screen#8 [phi:render_screen_original::@1->render_screen_original::@2#2] -- register_copy 
    jmp b2
    // [522] phi from render_screen_original::@2 to render_screen_original::@2 [phi:render_screen_original::@2->render_screen_original::@2]
  b2_from_b2:
    // [522] phi (byte) render_screen_original::x#4 = (byte) render_screen_original::x#1 [phi:render_screen_original::@2->render_screen_original::@2#0] -- register_copy 
    // [522] phi (byte*) render_screen_original::cols#4 = (byte*) render_screen_original::cols#1 [phi:render_screen_original::@2->render_screen_original::@2#1] -- register_copy 
    // [522] phi (byte*) render_screen_original::screen#5 = (byte*) render_screen_original::screen#2 [phi:render_screen_original::@2->render_screen_original::@2#2] -- register_copy 
    jmp b2
    // render_screen_original::@2
  b2:
    // [523] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE#0 -- _deref_pbuz1=vbuc1 
    lda #SPACE
    ldy #0
    sta (screen),y
    // [524] (byte*) render_screen_original::screen#2 ← ++ (byte*) render_screen_original::screen#5 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [525] *((byte*) render_screen_original::cols#4) ← (const byte) BLACK#0 -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (cols),y
    // [526] (byte*) render_screen_original::cols#1 ← ++ (byte*) render_screen_original::cols#4 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // [527] (byte) render_screen_original::x#1 ← ++ (byte) render_screen_original::x#4 -- vbuxx=_inc_vbuxx 
    inx
    // [528] if((byte) render_screen_original::x#1!=(byte) 4) goto render_screen_original::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b2_from_b2
    // [529] phi from render_screen_original::@2 render_screen_original::@3 to render_screen_original::@3 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3]
  b3_from_b2:
  b3_from_b3:
    // [529] phi (byte) render_screen_original::x#5 = (byte) render_screen_original::x#1 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#0] -- register_copy 
    // [529] phi (byte*) render_screen_original::cols#5 = (byte*) render_screen_original::cols#1 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#1] -- register_copy 
    // [529] phi (byte*) render_screen_original::ocols#2 = (byte*) render_screen_original::ocols#4 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#2] -- register_copy 
    // [529] phi (byte*) render_screen_original::screen#6 = (byte*) render_screen_original::screen#2 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#3] -- register_copy 
    // [529] phi (byte*) render_screen_original::oscr#2 = (byte*) render_screen_original::oscr#4 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#4] -- register_copy 
    jmp b3
    // render_screen_original::@3
  b3:
    // [530] *((byte*) render_screen_original::screen#6) ← *((byte*) render_screen_original::oscr#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (oscr),y
    ldy #0
    sta (screen),y
    // [531] (byte*) render_screen_original::screen#3 ← ++ (byte*) render_screen_original::screen#6 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [532] (byte*) render_screen_original::oscr#1 ← ++ (byte*) render_screen_original::oscr#2 -- pbuz1=_inc_pbuz1 
    inc.z oscr
    bne !+
    inc.z oscr+1
  !:
    // [533] *((byte*) render_screen_original::cols#5) ← *((byte*) render_screen_original::ocols#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (ocols),y
    ldy #0
    sta (cols),y
    // [534] (byte*) render_screen_original::cols#2 ← ++ (byte*) render_screen_original::cols#5 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // [535] (byte*) render_screen_original::ocols#1 ← ++ (byte*) render_screen_original::ocols#2 -- pbuz1=_inc_pbuz1 
    inc.z ocols
    bne !+
    inc.z ocols+1
  !:
    // [536] (byte) render_screen_original::x#2 ← ++ (byte) render_screen_original::x#5 -- vbuxx=_inc_vbuxx 
    inx
    // [537] if((byte) render_screen_original::x#2!=(byte) $24) goto render_screen_original::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$24
    bne b3_from_b3
    // [538] phi from render_screen_original::@3 render_screen_original::@4 to render_screen_original::@4 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4]
  b4_from_b3:
  b4_from_b4:
    // [538] phi (byte) render_screen_original::x#6 = (byte) render_screen_original::x#2 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4#0] -- register_copy 
    // [538] phi (byte*) render_screen_original::cols#6 = (byte*) render_screen_original::cols#2 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4#1] -- register_copy 
    // [538] phi (byte*) render_screen_original::screen#7 = (byte*) render_screen_original::screen#3 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4#2] -- register_copy 
    jmp b4
    // render_screen_original::@4
  b4:
    // [539] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE#0 -- _deref_pbuz1=vbuc1 
    lda #SPACE
    ldy #0
    sta (screen),y
    // [540] (byte*) render_screen_original::screen#10 ← ++ (byte*) render_screen_original::screen#7 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [541] *((byte*) render_screen_original::cols#6) ← (const byte) BLACK#0 -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (cols),y
    // [542] (byte*) render_screen_original::cols#3 ← ++ (byte*) render_screen_original::cols#6 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // [543] (byte) render_screen_original::x#3 ← ++ (byte) render_screen_original::x#6 -- vbuxx=_inc_vbuxx 
    inx
    // [544] if((byte) render_screen_original::x#3!=(byte) $28) goto render_screen_original::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b4_from_b4
    jmp b5
    // render_screen_original::@5
  b5:
    // [545] (byte) render_screen_original::y#1 ← ++ (byte) render_screen_original::y#6 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [546] if((byte) render_screen_original::y#1!=(byte) $19) goto render_screen_original::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z y
    bne b1_from_b5
    jmp breturn
    // render_screen_original::@return
  breturn:
    // [547] return 
    rts
}
  // sid_rnd_init
// Initialize SID voice 3 for random number generation
sid_rnd_init: {
    // [548] *((const word*) SID_VOICE3_FREQ#0) ← (word) $ffff -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID_VOICE3_FREQ
    lda #>$ffff
    sta SID_VOICE3_FREQ+1
    // [549] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID_VOICE3_CONTROL
    jmp breturn
    // sid_rnd_init::@return
  breturn:
    // [550] return 
    rts
}
  // sprites_irq
// Raster Interrupt Routine - sets up the sprites covering the playfield
// Repeats 10 timers every 2 lines from line IRQ_RASTER_FIRST
// Utilizes duplicated gfx in the sprites to allow for some leeway in updating the sprite pointers
sprites_irq: {
    .const toSpritePtr2_return = PLAYFIELD_SPRITES/$40
    .label raster_sprite_gfx_modify = $1b
    // entry interrupt(HARDWARE_CLOBBER)
    sta rega+1
    stx regx+1
    // asm { cld  }
    //(*BGCOL)++;
    // Clear decimal flag (because it is used by the score algorithm)
    cld
    // [552] (byte) sprites_irq::ypos#0 ← (byte) irq_sprite_ypos#0 -- vbuaa=vbuz1 
    // Place the sprites
    lda.z irq_sprite_ypos
    // [553] *((const byte*) SPRITES_YPOS#0) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS
    // [554] *((const byte*) SPRITES_YPOS#0+(byte) 2) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+2
    // [555] *((const byte*) SPRITES_YPOS#0+(byte) 4) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+4
    // [556] *((const byte*) SPRITES_YPOS#0+(byte) 6) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+6
    // [557] (byte~) sprites_irq::$0 ← (byte) irq_raster_next#0 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z irq_raster_next
    inx
    // [558] (byte) sprites_irq::raster_sprite_gfx_modify#0 ← (byte~) sprites_irq::$0 -- vbuz1=vbuxx 
    // Wait for the y-position before changing sprite pointers
    stx.z raster_sprite_gfx_modify
    jmp b8
    // sprites_irq::@8
  b8:
    // [559] if(*((const byte*) RASTER#0)<(byte) sprites_irq::raster_sprite_gfx_modify#0) goto sprites_irq::@8 -- _deref_pbuc1_lt_vbuz1_then_la1 
    lda RASTER
    cmp.z raster_sprite_gfx_modify
    bcc b8
    jmp b9
    // sprites_irq::@9
  b9:
    // [560] (byte) sprites_irq::ptr#0 ← (byte) irq_sprite_ptr#0 -- vbuxx=vbuz1 
    ldx.z irq_sprite_ptr
    // [561] if((byte) render_screen_showing#0==(byte) 0) goto sprites_irq::@1 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_showing
    cmp #0
    beq b1
    jmp b10
    // sprites_irq::@10
  b10:
    // [562] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0) ← (byte) sprites_irq::ptr#0 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_2
    // [563] (byte) sprites_irq::ptr#3 ← ++ (byte) sprites_irq::ptr#0 -- vbuaa=_inc_vbuxx 
    inx
    txa
    // [564] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte) 1) ← (byte) sprites_irq::ptr#3 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_2+1
    // [565] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte) 2) ← (byte) sprites_irq::ptr#3 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_2+2
    // [566] (byte) sprites_irq::ptr#4 ← ++ (byte) sprites_irq::ptr#3 -- vbuaa=_inc_vbuaa 
    clc
    adc #1
    // [567] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte) 3) ← (byte) sprites_irq::ptr#4 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_2+3
    jmp b2
    // sprites_irq::@2
  b2:
    // [568] (byte) irq_cnt#1 ← ++ (byte) irq_cnt#0 -- vbuz1=_inc_vbuz1 
    inc.z irq_cnt
    // [569] if((byte) irq_cnt#1==(byte) 9) goto sprites_irq::@3 -- vbuz1_eq_vbuc1_then_la1 
    lda #9
    cmp.z irq_cnt
    beq b3
    jmp b6
    // sprites_irq::@6
  b6:
    // [570] if((byte) irq_cnt#1==(byte) $a) goto sprites_irq::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #$a
    cmp.z irq_cnt
    beq b4
    jmp b7
    // sprites_irq::@7
  b7:
    // [571] (byte) irq_raster_next#3 ← (byte) irq_raster_next#0 + (byte) $14 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_raster_next
    axs #-[$14]
    stx.z irq_raster_next
    // [572] (byte) irq_sprite_ypos#3 ← (byte) irq_sprite_ypos#0 + (byte) $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ypos
    axs #-[$15]
    stx.z irq_sprite_ypos
    // [573] (byte) irq_sprite_ptr#3 ← (byte) irq_sprite_ptr#0 + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ptr
    axs #-[3]
    stx.z irq_sprite_ptr
    // [574] phi from sprites_irq::@11 sprites_irq::@4 sprites_irq::@7 to sprites_irq::@5 [phi:sprites_irq::@11/sprites_irq::@4/sprites_irq::@7->sprites_irq::@5]
  b5_from_b11:
  b5_from_b4:
  b5_from_b7:
    // [574] phi (byte) irq_sprite_ptr#11 = (byte) irq_sprite_ptr#1 [phi:sprites_irq::@11/sprites_irq::@4/sprites_irq::@7->sprites_irq::@5#0] -- register_copy 
    // [574] phi (byte) irq_sprite_ypos#11 = (byte) irq_sprite_ypos#1 [phi:sprites_irq::@11/sprites_irq::@4/sprites_irq::@7->sprites_irq::@5#1] -- register_copy 
    // [574] phi (byte) irq_cnt#3 = (byte) irq_cnt#1 [phi:sprites_irq::@11/sprites_irq::@4/sprites_irq::@7->sprites_irq::@5#2] -- register_copy 
    // [574] phi (byte) irq_raster_next#4 = (byte) irq_raster_next#1 [phi:sprites_irq::@11/sprites_irq::@4/sprites_irq::@7->sprites_irq::@5#3] -- register_copy 
    jmp b5
    // sprites_irq::@5
  b5:
    // [575] *((const byte*) RASTER#0) ← (byte) irq_raster_next#4 -- _deref_pbuc1=vbuz1 
    // Setup next interrupt
    lda.z irq_raster_next
    sta RASTER
    // [576] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ and setup the next one
    lda #IRQ_RASTER
    sta IRQ_STATUS
    jmp breturn
    // sprites_irq::@return
  breturn:
    // [577] return  - exit interrupt(HARDWARE_CLOBBER)
  rega:
    lda #00
  regx:
    ldx #00
    rti
    // sprites_irq::@4
  b4:
    // [578] (byte) irq_cnt#2 ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z irq_cnt
    // [579] (byte) irq_raster_next#2 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
    lda #IRQ_RASTER_FIRST
    sta.z irq_raster_next
    // [580] (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#0 + (byte) $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ypos
    axs #-[$15]
    stx.z irq_sprite_ypos
    // [581] (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#0 + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ptr
    axs #-[3]
    stx.z irq_sprite_ptr
    jmp b5_from_b4
    // sprites_irq::@3
  b3:
    // [582] (byte) irq_raster_next#1 ← (byte) irq_raster_next#0 + (byte) $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_raster_next
    axs #-[$15]
    stx.z irq_raster_next
    // [583] (byte) irq_sprite_ypos#1 ← (const byte) SPRITES_FIRST_YPOS#0 -- vbuz1=vbuc1 
    lda #SPRITES_FIRST_YPOS
    sta.z irq_sprite_ypos
    // [584] phi from sprites_irq::@3 to sprites_irq::toSpritePtr2 [phi:sprites_irq::@3->sprites_irq::toSpritePtr2]
  toSpritePtr2_from_b3:
    jmp toSpritePtr2
    // sprites_irq::toSpritePtr2
  toSpritePtr2:
    jmp b11
    // sprites_irq::@11
  b11:
    // [585] (byte) irq_sprite_ptr#1 ← (const byte) sprites_irq::toSpritePtr2_return#0 -- vbuz1=vbuc1 
    lda #toSpritePtr2_return
    sta.z irq_sprite_ptr
    jmp b5_from_b11
    // sprites_irq::@1
  b1:
    // [586] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0) ← (byte) sprites_irq::ptr#0 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1
    // [587] (byte) sprites_irq::ptr#1 ← ++ (byte) sprites_irq::ptr#0 -- vbuxx=_inc_vbuxx 
    inx
    // [588] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte) 1) ← (byte) sprites_irq::ptr#1 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1+1
    // [589] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte) 2) ← (byte) sprites_irq::ptr#1 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1+2
    // [590] (byte) sprites_irq::ptr#2 ← ++ (byte) sprites_irq::ptr#1 -- vbuaa=_inc_vbuxx 
    inx
    txa
    // [591] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte) 3) ← (byte) sprites_irq::ptr#2 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_1+3
    jmp b2
}
  // File Data
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Keyboard event buffer. Contains keycodes for key presses/releases. Presses are represented by the keycode. Releases by keycode | $40. The buffer is filled by keyboard_scan()
  keyboard_events: .fill 8, 0
  // The values scanned values for each row. Set by keyboard_scan() and used by keyboard_get_event()
  keyboard_scan_values: .fill 8, 0
  // The T-piece
  .align $40
  PIECE_T: .byte 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0
  // The S-piece
  .align $40
  PIECE_S: .byte 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0
  // The Z-piece
  .align $40
  PIECE_Z: .byte 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0
  // The L-piece
  .align $40
  PIECE_L: .byte 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0
  // The J-piece
  .align $40
  PIECE_J: .byte 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
  // The O-piece
  .align $40
  PIECE_O: .byte 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0
  // The I-piece
  .align $40
  PIECE_I: .byte 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0
  // The chars to use for the different pieces - when inside the playing area
  PIECES_CHARS: .byte $65, $66, $a6, $66, $65, $65, $a6
  // The chars to use for the different pieces - when outside the playing area (eg. the next area).
  PIECES_NEXT_CHARS: .byte $63, $64, $a4, $64, $63, $63, $a4
  // The initial X/Y for each piece
  PIECES_START_X: .byte 4, 4, 4, 4, 4, 4, 4
  PIECES_START_Y: .byte 1, 1, 1, 1, 1, 0, 1
  // The speed of moving down the piece when soft-drop is not activated
  // This array holds the number of frames per move by level (0-29). For all levels 29+ the value is 1.
  MOVEDOWN_SLOW_SPEEDS: .byte $30, $2b, $26, $21, $1c, $17, $12, $d, 8, 6, 5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1
  // Base Score values for removing 0-4 lines (in BCD)
  // These values are added to score_add_bcd for each level gained.
  SCORE_BASE_BCD: .dword 0, $40, $100, $300, $1200
  // Score values for removing 0-4 lines (in BCD)
  // These values are updated based on the players level and the base values from SCORE_BASE_BCD
  score_add_bcd: .fill 4*5, 0
  // The color #1 to use for the pieces for each level
  PIECES_COLORS_1: .byte BLUE, GREEN, PURPLE, BLUE, RED, LIGHT_GREEN, RED, BLUE, LIGHT_BLUE, RED, BLUE, GREEN, PURPLE, BLUE, RED, LIGHT_GREEN, RED, BLUE, LIGHT_BLUE, RED, BLUE, GREEN, PURPLE, BLUE, RED, LIGHT_GREEN, RED, BLUE, LIGHT_BLUE, RED
  // The color #2 to use for the pieces for each level
  PIECES_COLORS_2: .byte CYAN, LIGHT_GREEN, PINK, LIGHT_GREEN, LIGHT_GREEN, LIGHT_BLUE, DARK_GREY, PURPLE, RED, ORANGE, CYAN, LIGHT_GREEN, PINK, LIGHT_GREEN, LIGHT_GREEN, LIGHT_BLUE, DARK_GREY, PURPLE, RED, ORANGE, CYAN, LIGHT_GREEN, PINK, LIGHT_GREEN, LIGHT_GREEN, LIGHT_BLUE, DARK_GREY, PURPLE, RED, ORANGE
  // Pointers to the screen address for rendering each playfield line
  // The lines for screen 1 is aligned with $80 and screen 2 with $40 - so XOR'ing with $40 gives screen 2 lines.
  .align $80
  screen_lines_1: .fill 2*PLAYFIELD_LINES, 0
  .align $40
  screen_lines_2: .fill 2*PLAYFIELD_LINES, 0
  // Pointers to the playfield address for each playfield line
  playfield_lines: .fill 2*PLAYFIELD_LINES, 0
  // The playfield.  0 is empty non-zero is color.
  // The playfield is layed out line by line, meaning the first 10 bytes are line 1, the next 10 line 2 and so forth,
  playfield: .fill PLAYFIELD_LINES*PLAYFIELD_COLS, 0
  // The different pieces
  PIECES: .word PIECE_T, PIECE_S, PIECE_Z, PIECE_J, PIECE_O, PIECE_I, PIECE_L
  // Indixes into the playfield  for each playfield line
  playfield_lines_idx: .fill PLAYFIELD_LINES+1, 0
.pc = PLAYFIELD_CHARSET "PLAYFIELD_CHARSET"
  .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "playfield-screen.imap"

.pc = PLAYFIELD_SCREEN_ORIGINAL "PLAYFIELD_SCREEN_ORIGINAL"
  // Load chars for the screen
  .var screen = LoadBinary("playfield-screen.iscr")
   // Load extended colors for the screen
  .var extended = LoadBinary("playfield-extended.col")
  // screen.get(i)+1 because the charset is loaded into PLAYFIELD_CHARSET+8
  // extended.get(i)-1 because the extended colors are 1-based (1/2/3/4)
  // <<6 to move extended colors to the upper 2 bits
  .fill screen.getSize(), ( (screen.get(i)+1) | (extended.get(i)-1)<<6 )

.pc = PLAYFIELD_COLORS_ORIGINAL "PLAYFIELD_COLORS_ORIGINAL"
  .import binary "playfield-screen.col"

.pc = PLAYFIELD_SPRITES "PLAYFIELD_SPRITES"
  .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000))
	// Put the sprites into memory 
	.for(var sy=0;sy<10;sy++) {
	    .var sprite_gfx_y = sy*20
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21)
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y)
	            }
	        }
	    	.byte 0
	  	}
	}


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp toSpritePtr1
Removing instruction jmp b5
Removing instruction jmp b4
Removing instruction jmp bend
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b14
Removing instruction jmp b15
Removing instruction jmp b16
Removing instruction jmp b17
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b18
Removing instruction jmp b19
Removing instruction jmp b20
Removing instruction jmp b5
Removing instruction jmp b21
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b22
Removing instruction jmp b23
Removing instruction jmp b24
Removing instruction jmp b25
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b7
Removing instruction jmp b6
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b7
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b6
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b7
Removing instruction jmp breturn
Removing instruction jmp b8
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b7
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b6
Removing instruction jmp b5
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b12
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b2
Removing instruction jmp b7
Removing instruction jmp b3
Removing instruction jmp b8
Removing instruction jmp b13
Removing instruction jmp b9
Removing instruction jmp b14
Removing instruction jmp b15
Removing instruction jmp b16
Removing instruction jmp b17
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b9
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b7
Removing instruction jmp b19
Removing instruction jmp b16
Removing instruction jmp b8
Removing instruction jmp b17
Removing instruction jmp b20
Removing instruction jmp b18
Removing instruction jmp b1
Removing instruction jmp b21
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b22
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b23
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b9
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b14
Removing instruction jmp b10
Removing instruction jmp b15
Removing instruction jmp breturn
Removing instruction jmp toD0182
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp toD0181
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp vicSelectGfxBank1
Removing instruction jmp vicSelectGfxBank1_toDd001
Removing instruction jmp vicSelectGfxBank1_b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b2
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp toSpritePtr2
Removing instruction jmp b11
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction ldy.z play_spawn_current._7
Removing instruction lda #0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Removing instruction lda #0
Removing instruction lda.z current_orientation
Removing instruction lda #0
Removing instruction ldy.z play_spawn_current._7
Removing instruction lda #0
Removing instruction lda.z c
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda.z row_scan
Removing instruction ldy.z level
Removing instruction lda SPRITES_MC
Removing instruction lda SPRITES_EXPAND_Y
Removing instruction lda #BLACK
Removing instruction ldy #0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b6 with b1
Replacing label b1_from_b25 with b1
Replacing label b1_from_render_score with b1
Replacing label b1_from_render_bcd with b1
Replacing label b1_from_render_next with b1
Replacing label b4_from_b6 with b4
Replacing label b3_from_b8 with b3
Replacing label b1_from_b3 with b1
Replacing label b4_from_b5 with b4
Replacing label b3_from_b5 with b3
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Replacing label breturn_from_b4 with breturn
Replacing label b3_from_b1 with b3
Replacing label breturn_from_b2 with breturn_from_b7
Replacing label breturn_from_b6 with breturn_from_b7
Replacing label b2_from_b12 with b2
Replacing label b2_from_b5 with b2
Replacing label b3_from_b2 with b3
Replacing label b5_from_b4 with b1
Replacing label breturn_from_play_update_score with breturn
Replacing label breturn_from_b1 with breturn
Replacing label b2_from_b1 with b2
Replacing label b5_from_b5 with b5
Replacing label b9_from_b2 with b3
Replacing label b2_from_b3 with b2
Replacing label b6_from_b4 with b6
Replacing label b1_from_b6 with b1
Replacing label b7_from_b8 with b7
Replacing label b1_from_b20 with b1
Replacing label b2_from_b21 with b2
Replacing label b3_from_b22 with b3
Replacing label breturn with b6
Replacing label b10_from_b9 with b10
Replacing label b10_from_b12 with b10
Replacing label b8_from_b15 with b8
Replacing label b10_from_b11 with b10
Replacing label toD0181_from_render_show with toD0181
Replacing label b1_from_b1 with b1
Replacing label b3_from_b3 with b3
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b2_from_b2 with b2
Replacing label b3_from_b3 with b3
Replacing label b4_from_b4 with b4
Replacing label b1_from_b5 with b1
Replacing label b5_from_b4 with b5
Replacing label b5_from_b11 with b5
Removing instruction b1:
Removing instruction b2:
Removing instruction toSpritePtr1_from_b3:
Removing instruction toSpritePtr1:
Removing instruction b4_from_b5:
Removing instruction main_from_b4:
Removing instruction bend_from_b4:
Removing instruction b9_from_b8:
Removing instruction b10_from_b9:
Removing instruction b11_from_b10:
Removing instruction play_init_from_b11:
Removing instruction b12_from_b11:
Removing instruction play_spawn_current_from_b12:
Removing instruction b13_from_b12:
Removing instruction play_spawn_current_from_b13:
Removing instruction b14_from_b13:
Removing instruction render_playfield_from_b14:
Removing instruction b1_from_b25:
Removing instruction b1_from_b6:
Removing instruction b3_from_b2:
Removing instruction b18_from_b3:
Removing instruction keyboard_event_scan_from_b18:
Removing instruction b19_from_b18:
Removing instruction b21:
Removing instruction b24_from_b23:
Removing instruction b25_from_b24:
Removing instruction b1_from_render_score:
Removing instruction b2_from_b1:
Removing instruction b1_from_render_bcd:
Removing instruction b1_from_b2:
Removing instruction b1_from_render_next:
Removing instruction b2_from_b1:
Removing instruction b3_from_b8:
Removing instruction b4_from_b3:
Removing instruction b4_from_b6:
Removing instruction b1_from_b3:
Removing instruction b3_from_b5:
Removing instruction b3_from_b7:
Removing instruction b4_from_b5:
Removing instruction b1_from_b3:
Removing instruction b2_from_b2:
Removing instruction breturn_from_b2:
Removing instruction breturn_from_b4:
Removing instruction breturn_from_b4:
Removing instruction b3_from_b1:
Removing instruction b3_from_b2:
Removing instruction breturn_from_b4:
Removing instruction breturn_from_b2:
Removing instruction breturn_from_b6:
Removing instruction b4_from_play_move_down:
Removing instruction b1_from_b4:
Removing instruction keyboard_event_pressed_from_b1:
Removing instruction b2_from_b12:
Removing instruction b2_from_b5:
Removing instruction b2_from_b6:
Removing instruction b3_from_b2:
Removing instruction b3_from_b7:
Removing instruction b9_from_b13:
Removing instruction b14_from_b9:
Removing instruction play_remove_lines_from_b14:
Removing instruction b16_from_b15:
Removing instruction play_spawn_current_from_b16:
Removing instruction breturn_from_b11:
Removing instruction b5_from_b4:
Removing instruction b5:
Removing instruction b1_from_b5:
Removing instruction b2_from_b1:
Removing instruction b2_from_b1:
Removing instruction breturn_from_play_update_score:
Removing instruction breturn_from_b1:
Removing instruction breturn_from_b2:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b5_from_b5:
Removing instruction b1_from_b6:
Removing instruction b2_from_b1:
Removing instruction b2_from_b3:
Removing instruction b9_from_b2:
Removing instruction b9:
Removing instruction b3_from_b9:
Removing instruction b6_from_b4:
Removing instruction b6_from_b5:
Removing instruction b7_from_b6:
Removing instruction b7_from_b8:
Removing instruction b8_from_b15:
Removing instruction b8_from_b16:
Removing instruction b17_from_b8:
Removing instruction keyboard_event_pressed_from_b17:
Removing instruction b18_from_b20:
Removing instruction b18:
Removing instruction b1_from_b18:
Removing instruction b1_from_b20:
Removing instruction keyboard_event_pressed_from_b1:
Removing instruction b4_from_b21:
Removing instruction b4:
Removing instruction b2_from_b21:
Removing instruction b2_from_b4:
Removing instruction keyboard_event_pressed_from_b2:
Removing instruction b5_from_b22:
Removing instruction b5:
Removing instruction b3_from_b22:
Removing instruction b3_from_b5:
Removing instruction keyboard_event_pressed_from_b3:
Removing instruction b6_from_b23:
Removing instruction breturn:
Removing instruction b10_from_b11:
Removing instruction b10_from_b12:
Removing instruction b10_from_b14:
Removing instruction b10_from_b9:
Removing instruction toD0182_from_render_show:
Removing instruction b1_from_toD0182:
Removing instruction toD0181_from_render_show:
Removing instruction b1_from_toD0181:
Removing instruction b1_from_b1:
Removing instruction b3_from_b3:
Removing instruction b1_from_b1:
Removing instruction vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1_toDd001:
Removing instruction b3_from_b2:
Removing instruction render_screen_original_from_b3:
Removing instruction b1_from_b1:
Removing instruction b1_from_b5:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b3_from_b2:
Removing instruction b3_from_b3:
Removing instruction b4_from_b3:
Removing instruction b4_from_b4:
Removing instruction b5_from_b11:
Removing instruction b5_from_b4:
Removing instruction b5_from_b7:
Removing instruction breturn:
Removing instruction toSpritePtr2_from_b3:
Removing instruction toSpritePtr2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b3:
Removing instruction b5:
Removing instruction b4:
Removing instruction bend:
Removing instruction b8:
Removing instruction render_init_from_b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction b13:
Removing instruction b14:
Removing instruction b15:
Removing instruction render_moving_from_b15:
Removing instruction b16:
Removing instruction render_next_from_b16:
Removing instruction b17:
Removing instruction b1_from_b17:
Removing instruction b3:
Removing instruction b18:
Removing instruction b19:
Removing instruction b20:
Removing instruction b6:
Removing instruction b7:
Removing instruction render_playfield_from_b7:
Removing instruction b22:
Removing instruction render_moving_from_b22:
Removing instruction b23:
Removing instruction render_next_from_b23:
Removing instruction b24:
Removing instruction b25:
Removing instruction breturn:
Removing instruction b2_from_render_score:
Removing instruction render_bcd_from_b2:
Removing instruction b3:
Removing instruction render_bcd_from_b3:
Removing instruction b4:
Removing instruction render_bcd_from_b4:
Removing instruction b5:
Removing instruction render_bcd_from_b5:
Removing instruction b6:
Removing instruction render_bcd_from_b6:
Removing instruction b7:
Removing instruction render_bcd_from_b7:
Removing instruction breturn:
Removing instruction b2:
Removing instruction breturn:
Removing instruction b2_from_render_next:
Removing instruction b3_from_b2:
Removing instruction b7:
Removing instruction b8:
Removing instruction breturn:
Removing instruction b1_from_render_moving:
Removing instruction b7:
Removing instruction breturn:
Removing instruction b4_from_b2:
Removing instruction b6:
Removing instruction b1_from_render_playfield:
Removing instruction b2_from_b1:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b2:
Removing instruction b3:
Removing instruction b4:
Removing instruction b4:
Removing instruction play_collision_from_b3:
Removing instruction b6:
Removing instruction b5:
Removing instruction breturn_from_b5:
Removing instruction b1_from_play_collision:
Removing instruction b2_from_b1:
Removing instruction b7:
Removing instruction breturn_from_b7:
Removing instruction breturn_from_b4:
Removing instruction breturn_from_b5:
Removing instruction breturn_from_b6:
Removing instruction b8:
Removing instruction breturn_from_b8:
Removing instruction b1_from_b9:
Removing instruction b2_from_b10:
Removing instruction b2:
Removing instruction b3:
Removing instruction play_collision_from_b3:
Removing instruction b7:
Removing instruction b4:
Removing instruction play_collision_from_b1:
Removing instruction b6:
Removing instruction b5:
Removing instruction b4:
Removing instruction b12:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction play_collision_from_b8:
Removing instruction b13:
Removing instruction b9:
Removing instruction b14:
Removing instruction b15:
Removing instruction b16:
Removing instruction b17:
Removing instruction b11_from_b17:
Removing instruction b11_from_b10:
Removing instruction play_collision_from_play_spawn_current:
Removing instruction b4:
Removing instruction b1_from_b4:
Removing instruction breturn:
Removing instruction b3:
Removing instruction b2_from_b3:
Removing instruction b1:
Removing instruction b2:
Removing instruction b3:
Removing instruction b1_from_b3:
Removing instruction b4:
Removing instruction b5_from_b2:
Removing instruction b6:
Removing instruction breturn:
Removing instruction b1_from_play_remove_lines:
Removing instruction b3_from_b2:
Removing instruction b4:
Removing instruction b5:
Removing instruction b7:
Removing instruction breturn:
Removing instruction b1_from_play_lock_current:
Removing instruction b2_from_b1:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b1_from_b6:
Removing instruction b2_from_b7:
Removing instruction breturn:
Removing instruction b1:
Removing instruction breturn_from_b1:
Removing instruction b7_from_keyboard_event_scan:
Removing instruction b19:
Removing instruction b16:
Removing instruction b17:
Removing instruction b20:
Removing instruction b21:
Removing instruction b22:
Removing instruction b23:
Removing instruction b12:
Removing instruction b13:
Removing instruction b14:
Removing instruction b15:
Removing instruction breturn:
Removing instruction toD0182:
Removing instruction breturn:
Removing instruction b1_from_play_init:
Removing instruction b2:
Removing instruction b3_from_b2:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_sprites_init:
Removing instruction breturn:
Removing instruction vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1_b1:
Removing instruction b2:
Removing instruction render_screen_original_from_b2:
Removing instruction b3:
Removing instruction b1_from_b3:
Removing instruction breturn:
Removing instruction b1_from_render_screen_original:
Removing instruction b5:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b9:
Removing instruction b10:
Removing instruction b6:
Removing instruction b7:
Removing instruction b11:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Skipping double jump to b9 in bne b9_from_b10
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label breturn_from_b6 to b4
Relabelling long label breturn_from_b5 to b2
Relabelling long label breturn_from_b7 to b3
Relabelling long label b1_from_play_move_down to b4
Relabelling long label breturn_from_b3 to b5
Relabelling long label b1_from_play_increase_level to b3
Relabelling long label b7_from_b8 to b4
Relabelling long label breturn_from_keyboard_event_get to b1
Relabelling long label b9_from_b10 to b4
Relabelling long label b9_from_b19 to b5
Succesful ASM optimization Pass5RelabelLongLabels
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b7
Removing instruction beq b1
Removing instruction beq b2
Removing instruction beq b3
Removing instruction beq b6
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b2
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldy.z level with TAY
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1:
Removing instruction b2:
Removing instruction b3:
Removing instruction b6:
Removing instruction b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp b9
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @3
(label) @4
(label) @5
(label) @begin
(label) @end
(byte*) BGCOL1
(const byte*) BGCOL1#0 BGCOL1 = (byte*) 53281
(byte*) BGCOL2
(const byte*) BGCOL2#0 BGCOL2 = (byte*) 53282
(byte*) BGCOL3
(const byte*) BGCOL3#0 BGCOL3 = (byte*) 53283
(byte*) BGCOL4
(const byte*) BGCOL4#0 BGCOL4 = (byte*) 53284
(byte) BLACK
(const byte) BLACK#0 BLACK = (byte) 0
(byte) BLUE
(const byte) BLUE#0 BLUE = (byte) 6
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = (byte*) 53280
(byte*) CIA1_INTERRUPT
(const byte*) CIA1_INTERRUPT#0 CIA1_INTERRUPT = (byte*) 56333
(byte*) CIA1_PORT_A
(const byte*) CIA1_PORT_A#0 CIA1_PORT_A = (byte*) 56320
(byte*) CIA1_PORT_B
(const byte*) CIA1_PORT_B#0 CIA1_PORT_B = (byte*) 56321
(byte*) CIA2_PORT_A
(const byte*) CIA2_PORT_A#0 CIA2_PORT_A = (byte*) 56576
(byte*) CIA2_PORT_A_DDR
(const byte*) CIA2_PORT_A_DDR#0 CIA2_PORT_A_DDR = (byte*) 56578
(byte) CIA_INTERRUPT_CLEAR
(const byte) CIA_INTERRUPT_CLEAR#0 CIA_INTERRUPT_CLEAR = (byte) $7f
(byte) COLLISION_BOTTOM
(const byte) COLLISION_BOTTOM#0 COLLISION_BOTTOM = (byte) 2
(byte) COLLISION_LEFT
(const byte) COLLISION_LEFT#0 COLLISION_LEFT = (byte) 4
(byte) COLLISION_NONE
(const byte) COLLISION_NONE#0 COLLISION_NONE = (byte) 0
(byte) COLLISION_PLAYFIELD
(const byte) COLLISION_PLAYFIELD#0 COLLISION_PLAYFIELD = (byte) 1
(byte) COLLISION_RIGHT
(const byte) COLLISION_RIGHT#0 COLLISION_RIGHT = (byte) 8
(byte*) COLS
(const byte*) COLS#0 COLS = (byte*) 55296
(byte) CYAN
(const byte) CYAN#0 CYAN = (byte) 3
(byte*) D011
(const byte*) D011#0 D011 = (byte*) 53265
(byte*) D018
(const byte*) D018#0 D018 = (byte*) 53272
(byte) DARK_GREY
(const byte) DARK_GREY#0 DARK_GREY = (byte) $b
(byte) GREEN
(const byte) GREEN#0 GREEN = (byte) 5
(byte) GREY
(const byte) GREY#0 GREY = (byte) $c
(void()**) HARDWARE_IRQ
(const void()**) HARDWARE_IRQ#0 HARDWARE_IRQ = (void()**) 65534
(byte*) IRQ_ENABLE
(const byte*) IRQ_ENABLE#0 IRQ_ENABLE = (byte*) 53274
(byte) IRQ_RASTER
(const byte) IRQ_RASTER#0 IRQ_RASTER = (byte) 1
(byte) IRQ_RASTER_FIRST
(const byte) IRQ_RASTER_FIRST#0 IRQ_RASTER_FIRST = (const byte) SPRITES_FIRST_YPOS#0+(byte) $13
(byte*) IRQ_STATUS
(const byte*) IRQ_STATUS#0 IRQ_STATUS = (byte*) 53273
(byte) KEY_COMMA
(const byte) KEY_COMMA#0 KEY_COMMA = (byte) $2f
(byte) KEY_COMMODORE
(const byte) KEY_COMMODORE#0 KEY_COMMODORE = (byte) $3d
(byte) KEY_CTRL
(const byte) KEY_CTRL#0 KEY_CTRL = (byte) $3a
(byte) KEY_DOT
(const byte) KEY_DOT#0 KEY_DOT = (byte) $2c
(byte) KEY_LSHIFT
(const byte) KEY_LSHIFT#0 KEY_LSHIFT = (byte) $f
(byte) KEY_MODIFIER_COMMODORE
(byte) KEY_MODIFIER_CTRL
(byte) KEY_MODIFIER_LSHIFT
(byte) KEY_MODIFIER_RSHIFT
(byte) KEY_RSHIFT
(const byte) KEY_RSHIFT#0 KEY_RSHIFT = (byte) $34
(byte) KEY_SPACE
(const byte) KEY_SPACE#0 KEY_SPACE = (byte) $3c
(byte) KEY_X
(const byte) KEY_X#0 KEY_X = (byte) $17
(byte) KEY_Z
(const byte) KEY_Z#0 KEY_Z = (byte) $c
(byte) LIGHT_BLUE
(const byte) LIGHT_BLUE#0 LIGHT_BLUE = (byte) $e
(byte) LIGHT_GREEN
(const byte) LIGHT_GREEN#0 LIGHT_GREEN = (byte) $d
(byte[]) MOVEDOWN_SLOW_SPEEDS
(const byte[]) MOVEDOWN_SLOW_SPEEDS#0 MOVEDOWN_SLOW_SPEEDS = { (byte) $30, (byte) $2b, (byte) $26, (byte) $21, (byte) $1c, (byte) $17, (byte) $12, (byte) $d, (byte) 8, (byte) 6, (byte) 5, (byte) 5, (byte) 5, (byte) 4, (byte) 4, (byte) 4, (byte) 3, (byte) 3, (byte) 3, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 1 }
(byte) ORANGE
(const byte) ORANGE#0 ORANGE = (byte) 8
(word[]) PIECES
(const word[]) PIECES#0 PIECES = { (word)(const byte[4*4*4]) PIECE_T#0, (word)(const byte[4*4*4]) PIECE_S#0, (word)(const byte[4*4*4]) PIECE_Z#0, (word)(const byte[4*4*4]) PIECE_J#0, (word)(const byte[4*4*4]) PIECE_O#0, (word)(const byte[4*4*4]) PIECE_I#0, (word)(const byte[4*4*4]) PIECE_L#0 }
(byte[]) PIECES_CHARS
(const byte[]) PIECES_CHARS#0 PIECES_CHARS = { (byte) $65, (byte) $66, (byte) $a6, (byte) $66, (byte) $65, (byte) $65, (byte) $a6 }
(byte[]) PIECES_COLORS_1
(const byte[]) PIECES_COLORS_1#0 PIECES_COLORS_1 = { (const byte) BLUE#0, (const byte) GREEN#0, (const byte) PURPLE#0, (const byte) BLUE#0, (const byte) RED#0, (const byte) LIGHT_GREEN#0, (const byte) RED#0, (const byte) BLUE#0, (const byte) LIGHT_BLUE#0, (const byte) RED#0, (const byte) BLUE#0, (const byte) GREEN#0, (const byte) PURPLE#0, (const byte) BLUE#0, (const byte) RED#0, (const byte) LIGHT_GREEN#0, (const byte) RED#0, (const byte) BLUE#0, (const byte) LIGHT_BLUE#0, (const byte) RED#0, (const byte) BLUE#0, (const byte) GREEN#0, (const byte) PURPLE#0, (const byte) BLUE#0, (const byte) RED#0, (const byte) LIGHT_GREEN#0, (const byte) RED#0, (const byte) BLUE#0, (const byte) LIGHT_BLUE#0, (const byte) RED#0 }
(byte[]) PIECES_COLORS_2
(const byte[]) PIECES_COLORS_2#0 PIECES_COLORS_2 = { (const byte) CYAN#0, (const byte) LIGHT_GREEN#0, (const byte) PINK#0, (const byte) LIGHT_GREEN#0, (const byte) LIGHT_GREEN#0, (const byte) LIGHT_BLUE#0, (const byte) DARK_GREY#0, (const byte) PURPLE#0, (const byte) RED#0, (const byte) ORANGE#0, (const byte) CYAN#0, (const byte) LIGHT_GREEN#0, (const byte) PINK#0, (const byte) LIGHT_GREEN#0, (const byte) LIGHT_GREEN#0, (const byte) LIGHT_BLUE#0, (const byte) DARK_GREY#0, (const byte) PURPLE#0, (const byte) RED#0, (const byte) ORANGE#0, (const byte) CYAN#0, (const byte) LIGHT_GREEN#0, (const byte) PINK#0, (const byte) LIGHT_GREEN#0, (const byte) LIGHT_GREEN#0, (const byte) LIGHT_BLUE#0, (const byte) DARK_GREY#0, (const byte) PURPLE#0, (const byte) RED#0, (const byte) ORANGE#0 }
(byte[]) PIECES_NEXT_CHARS
(const byte[]) PIECES_NEXT_CHARS#0 PIECES_NEXT_CHARS = { (byte) $63, (byte) $64, (byte) $a4, (byte) $64, (byte) $63, (byte) $63, (byte) $a4 }
(byte[]) PIECES_START_X
(const byte[]) PIECES_START_X#0 PIECES_START_X = { (byte) 4, (byte) 4, (byte) 4, (byte) 4, (byte) 4, (byte) 4, (byte) 4 }
(byte[]) PIECES_START_Y
(const byte[]) PIECES_START_Y#0 PIECES_START_Y = { (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 1 }
(byte[4*4*4]) PIECE_I
(const byte[4*4*4]) PIECE_I#0 PIECE_I = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0 }
(byte[4*4*4]) PIECE_J
(const byte[4*4*4]) PIECE_J#0 PIECE_J = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(byte[4*4*4]) PIECE_L
(const byte[4*4*4]) PIECE_L#0 PIECE_L = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(byte[4*4*4]) PIECE_O
(const byte[4*4*4]) PIECE_O#0 PIECE_O = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(byte[4*4*4]) PIECE_S
(const byte[4*4*4]) PIECE_S#0 PIECE_S = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(byte[4*4*4]) PIECE_T
(const byte[4*4*4]) PIECE_T#0 PIECE_T = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(byte[4*4*4]) PIECE_Z
(const byte[4*4*4]) PIECE_Z#0 PIECE_Z = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(byte) PINK
(const byte) PINK#0 PINK = (byte) $a
(byte*) PLAYFIELD_CHARSET
(const byte*) PLAYFIELD_CHARSET#0 PLAYFIELD_CHARSET = (byte*) 10240
(byte*) PLAYFIELD_COLORS_ORIGINAL
(const byte*) PLAYFIELD_COLORS_ORIGINAL#0 PLAYFIELD_COLORS_ORIGINAL = (byte*) 7168
(byte) PLAYFIELD_COLS
(const byte) PLAYFIELD_COLS#0 PLAYFIELD_COLS = (byte) $a
(byte) PLAYFIELD_LINES
(const byte) PLAYFIELD_LINES#0 PLAYFIELD_LINES = (byte) $16
(byte*) PLAYFIELD_SCREEN_1
(const byte*) PLAYFIELD_SCREEN_1#0 PLAYFIELD_SCREEN_1 = (byte*) 1024
(byte*) PLAYFIELD_SCREEN_2
(const byte*) PLAYFIELD_SCREEN_2#0 PLAYFIELD_SCREEN_2 = (byte*) 11264
(byte*) PLAYFIELD_SCREEN_ORIGINAL
(const byte*) PLAYFIELD_SCREEN_ORIGINAL#0 PLAYFIELD_SCREEN_ORIGINAL = (byte*) 6144
(byte*) PLAYFIELD_SPRITES
(const byte*) PLAYFIELD_SPRITES#0 PLAYFIELD_SPRITES = (byte*) 8192
(byte*) PLAYFIELD_SPRITE_PTRS_1
(const byte*) PLAYFIELD_SPRITE_PTRS_1#0 PLAYFIELD_SPRITE_PTRS_1 = (const byte*) PLAYFIELD_SCREEN_1#0+(const word) SPRITE_PTRS#0
(byte*) PLAYFIELD_SPRITE_PTRS_2
(const byte*) PLAYFIELD_SPRITE_PTRS_2#0 PLAYFIELD_SPRITE_PTRS_2 = (const byte*) PLAYFIELD_SCREEN_2#0+(const word) SPRITE_PTRS#0
(byte*) PROCPORT
(const byte*) PROCPORT#0 PROCPORT = (byte*) 1
(byte*) PROCPORT_DDR
(const byte*) PROCPORT_DDR#0 PROCPORT_DDR = (byte*) 0
(byte) PROCPORT_DDR_MEMORY_MASK
(const byte) PROCPORT_DDR_MEMORY_MASK#0 PROCPORT_DDR_MEMORY_MASK = (byte) 7
(byte) PROCPORT_RAM_IO
(const byte) PROCPORT_RAM_IO#0 PROCPORT_RAM_IO = (byte) 5
(byte) PURPLE
(const byte) PURPLE#0 PURPLE = (byte) 4
(byte*) RASTER
(const byte*) RASTER#0 RASTER = (byte*) 53266
(byte) RED
(const byte) RED#0 RED = (byte) 2
(dword[]) SCORE_BASE_BCD
(const dword[]) SCORE_BASE_BCD#0 SCORE_BASE_BCD = { (dword) 0, (dword) $40, (dword) $100, (dword) $300, (dword) $1200 }
(byte) SID_CONTROL_NOISE
(const byte) SID_CONTROL_NOISE#0 SID_CONTROL_NOISE = (byte) $80
(byte*) SID_VOICE3_CONTROL
(const byte*) SID_VOICE3_CONTROL#0 SID_VOICE3_CONTROL = (byte*) 54290
(word*) SID_VOICE3_FREQ
(const word*) SID_VOICE3_FREQ#0 SID_VOICE3_FREQ = (word*) 54286
(byte*) SID_VOICE3_OSC
(const byte*) SID_VOICE3_OSC#0 SID_VOICE3_OSC = (byte*) 54299
(byte*) SPRITES_COLS
(const byte*) SPRITES_COLS#0 SPRITES_COLS = (byte*) 53287
(byte*) SPRITES_ENABLE
(const byte*) SPRITES_ENABLE#0 SPRITES_ENABLE = (byte*) 53269
(byte*) SPRITES_EXPAND_X
(const byte*) SPRITES_EXPAND_X#0 SPRITES_EXPAND_X = (byte*) 53277
(byte*) SPRITES_EXPAND_Y
(const byte*) SPRITES_EXPAND_Y#0 SPRITES_EXPAND_Y = (byte*) 53271
(byte) SPRITES_FIRST_YPOS
(const byte) SPRITES_FIRST_YPOS#0 SPRITES_FIRST_YPOS = (byte) $31
(byte*) SPRITES_MC
(const byte*) SPRITES_MC#0 SPRITES_MC = (byte*) 53276
(byte*) SPRITES_XPOS
(const byte*) SPRITES_XPOS#0 SPRITES_XPOS = (byte*) 53248
(byte*) SPRITES_YPOS
(const byte*) SPRITES_YPOS#0 SPRITES_YPOS = (byte*) 53249
(word) SPRITE_PTRS
(const word) SPRITE_PTRS#0 SPRITE_PTRS = (word) $3f8
(byte*) VIC_CONTROL
(const byte*) VIC_CONTROL#0 VIC_CONTROL = (byte*) 53265
(byte) VIC_DEN
(const byte) VIC_DEN#0 VIC_DEN = (byte) $10
(byte) VIC_ECM
(const byte) VIC_ECM#0 VIC_ECM = (byte) $40
(byte) VIC_RSEL
(const byte) VIC_RSEL#0 VIC_RSEL = (byte) 8
(byte) current_movedown_counter
(byte) current_movedown_counter#12 current_movedown_counter zp ZP_BYTE:12 0.5333333333333333
(byte) current_movedown_counter#14 current_movedown_counter zp ZP_BYTE:12 3.081081081081081
(byte) current_movedown_counter#16 current_movedown_counter zp ZP_BYTE:12 8.769230769230768
(byte) current_movedown_fast
(const byte) current_movedown_fast#0 current_movedown_fast = (byte) $a
(byte) current_movedown_slow
(byte) current_movedown_slow#1 current_movedown_slow zp ZP_BYTE:8 0.17391304347826086
(byte) current_movedown_slow#10 current_movedown_slow zp ZP_BYTE:8 4.0
(byte) current_movedown_slow#14 current_movedown_slow zp ZP_BYTE:8 2.214285714285714
(byte) current_movedown_slow#21 current_movedown_slow zp ZP_BYTE:8 3.135135135135135
(byte) current_movedown_slow#23 current_movedown_slow zp ZP_BYTE:8 1.1428571428571428
(byte) current_movedown_slow#37 current_movedown_slow zp ZP_BYTE:8 6.0
(byte) current_movedown_slow#66 current_movedown_slow zp ZP_BYTE:8 0.26666666666666666
(byte) current_orientation
(byte) current_orientation#13 current_orientation zp ZP_BYTE:17 3.189189189189189
(byte) current_orientation#17 current_orientation zp ZP_BYTE:17 5.523809523809523
(byte) current_orientation#20 current_orientation zp ZP_BYTE:17 0.36734693877551017
(byte) current_orientation#25 current_orientation zp ZP_BYTE:17 1.3333333333333333
(byte) current_orientation#37 current_orientation zp ZP_BYTE:17 4.0
(byte) current_orientation#7 current_orientation zp ZP_BYTE:17 3.0
(byte*) current_piece
(byte*) current_piece#10 current_piece zp ZP_WORD:44 3.243243243243243
(byte*~) current_piece#100 current_piece#100 zp ZP_WORD:34 4.0
(byte*~) current_piece#102 current_piece zp ZP_WORD:44 2.0
(byte*) current_piece#15 current_piece zp ZP_WORD:44 1.5897435897435892
(byte*) current_piece#17 current_piece#17 zp ZP_WORD:34 12.0
(byte*) current_piece#28 current_piece zp ZP_WORD:44 6.0
(byte*~) current_piece#93 current_piece zp ZP_WORD:44 2.0
(byte*~) current_piece#96 current_piece#96 zp ZP_WORD:34 4.0
(byte*~) current_piece#97 current_piece#97 zp ZP_WORD:34 4.0
(byte*~) current_piece#98 current_piece#98 zp ZP_WORD:34 4.0
(byte*~) current_piece#99 current_piece#99 zp ZP_WORD:34 4.0
(byte) current_piece_char
(byte) current_piece_char#10 current_piece_char zp ZP_BYTE:38 183.9818181818182
(byte~) current_piece_char#100 current_piece_char#100 zp ZP_BYTE:15 4.0
(byte~) current_piece_char#101 current_piece_char#101 zp ZP_BYTE:15 22.0
(byte) current_piece_char#16 current_piece_char zp ZP_BYTE:38 3.4324324324324325
(byte) current_piece_char#29 current_piece_char zp ZP_BYTE:38 6.0
(byte) current_piece_char#5 current_piece_char zp ZP_BYTE:38 0.25
(byte) current_piece_char#68 current_piece_char#68 zp ZP_BYTE:15 48.285714285714285
(byte*) current_piece_gfx
(byte*~) current_piece_gfx#112 current_piece_gfx#112 zp ZP_WORD:36 2.0
(byte*~) current_piece_gfx#113 current_piece_gfx#113 zp ZP_WORD:36 11.0
(byte*~) current_piece_gfx#117 current_piece_gfx zp ZP_WORD:25 4.0
(byte*~) current_piece_gfx#124 current_piece_gfx zp ZP_WORD:25 4.0
(byte*) current_piece_gfx#13 current_piece_gfx zp ZP_WORD:25 183.9818181818182
(byte*) current_piece_gfx#18 current_piece_gfx zp ZP_WORD:25 6.047619047619047
(byte*) current_piece_gfx#20 current_piece_gfx zp ZP_WORD:25 0.37037037037037035
(byte*) current_piece_gfx#21 current_piece_gfx zp ZP_WORD:25 1.3333333333333333
(byte*) current_piece_gfx#35 current_piece_gfx zp ZP_WORD:25 6.0
(byte*) current_piece_gfx#64 current_piece_gfx#64 zp ZP_WORD:36 48.285714285714285
(byte*) current_piece_gfx#7 current_piece_gfx zp ZP_WORD:25 4.0
(byte) current_xpos
(byte) current_xpos#100 current_xpos zp ZP_BYTE:43 0.3225806451612903
(byte~) current_xpos#119 current_xpos#119 zp ZP_BYTE:14 1.3333333333333333
(byte~) current_xpos#120 current_xpos#120 zp ZP_BYTE:14 7.333333333333333
(byte) current_xpos#14 current_xpos zp ZP_BYTE:43 20.38181818181818
(byte) current_xpos#19 current_xpos zp ZP_BYTE:43 6.047619047619047
(byte) current_xpos#22 current_xpos zp ZP_BYTE:43 0.7999999999999999
(byte) current_xpos#26 current_xpos zp ZP_BYTE:43 0.4666666666666666
(byte) current_xpos#43 current_xpos zp ZP_BYTE:43 6.0
(byte) current_xpos#59 current_xpos#59 zp ZP_BYTE:14 5.428571428571429
(byte) current_xpos#6 current_xpos zp ZP_BYTE:43 4.0
(byte) current_xpos#8 current_xpos zp ZP_BYTE:43 4.0
(byte) current_ypos
(byte) current_ypos#11 current_ypos zp ZP_BYTE:24 3.297297297297297
(byte) current_ypos#13 reg byte x 15.0
(byte) current_ypos#19 current_ypos zp ZP_BYTE:24 1.7051282051282046
(byte) current_ypos#3 current_ypos zp ZP_BYTE:24 4.0
(byte) current_ypos#38 current_ypos zp ZP_BYTE:24 6.0
(byte) current_ypos#6 current_ypos zp ZP_BYTE:24 0.3333333333333333
(byte~) current_ypos#98 reg byte x 1.0
(byte~) current_ypos#99 reg byte x 4.4
(byte) game_over
(byte) game_over#10 game_over zp ZP_BYTE:11 4.804347826086958
(byte) game_over#15 game_over zp ZP_BYTE:11 3.189189189189189
(byte) game_over#27 game_over zp ZP_BYTE:11 6.0
(byte) game_over#52 game_over zp ZP_BYTE:11 0.34782608695652173
(byte) game_over#65 game_over zp ZP_BYTE:11 0.42857142857142855
(byte) irq_cnt
(byte) irq_cnt#0 irq_cnt zp ZP_BYTE:31 0.17391304347826086
(byte) irq_cnt#1 irq_cnt zp ZP_BYTE:31 1.0
(byte) irq_cnt#2 irq_cnt zp ZP_BYTE:31 1.0
(byte) irq_cnt#3 irq_cnt zp ZP_BYTE:31 60.0
(byte) irq_raster_next
(byte) irq_raster_next#0 irq_raster_next zp ZP_BYTE:28 0.3076923076923077
(byte) irq_raster_next#1 irq_raster_next zp ZP_BYTE:28 1.0
(byte) irq_raster_next#2 irq_raster_next zp ZP_BYTE:28 1.3333333333333333
(byte) irq_raster_next#3 irq_raster_next zp ZP_BYTE:28 1.3333333333333333
(byte) irq_raster_next#4 irq_raster_next zp ZP_BYTE:28 8.0
(byte) irq_sprite_ptr
(byte) irq_sprite_ptr#0 irq_sprite_ptr zp ZP_BYTE:30 0.25806451612903225
(byte) irq_sprite_ptr#1 irq_sprite_ptr zp ZP_BYTE:30 4.0
(byte) irq_sprite_ptr#11 irq_sprite_ptr zp ZP_BYTE:30 60.0
(byte) irq_sprite_ptr#2 irq_sprite_ptr zp ZP_BYTE:30 4.0
(byte) irq_sprite_ptr#3 irq_sprite_ptr zp ZP_BYTE:30 4.0
(byte) irq_sprite_ypos
(byte) irq_sprite_ypos#0 irq_sprite_ypos zp ZP_BYTE:29 0.27586206896551724
(byte) irq_sprite_ypos#1 irq_sprite_ypos zp ZP_BYTE:29 1.3333333333333333
(byte) irq_sprite_ypos#11 irq_sprite_ypos zp ZP_BYTE:29 60.0
(byte) irq_sprite_ypos#2 irq_sprite_ypos zp ZP_BYTE:29 2.0
(byte) irq_sprite_ypos#3 irq_sprite_ypos zp ZP_BYTE:29 2.0
(byte()) keyboard_event_get()
(label) keyboard_event_get::@1
(label) keyboard_event_get::@return
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#1 reg byte x 4.0
(byte) keyboard_event_get::return#2 reg byte x 34.33333333333333
(byte) keyboard_event_get::return#3 reg byte x 202.0
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0 reg byte a 4.0
(byte~) keyboard_event_pressed::$1 reg byte a 4.0
(label) keyboard_event_pressed::@return
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#5 keycode zp ZP_BYTE:18 1.3333333333333333
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0 reg byte a 4.0
(byte) keyboard_event_pressed::return#1 reg byte a 4.0
(byte) keyboard_event_pressed::return#10 reg byte a 4.0
(byte) keyboard_event_pressed::return#11 reg byte a 1.714285714285714
(byte) keyboard_event_pressed::return#12 reg byte a 4.0
(byte) keyboard_event_pressed::return#2 reg byte a 4.0
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0 row_bits zp ZP_BYTE:46 2.0
(void()) keyboard_event_scan()
(byte~) keyboard_event_scan::$0 reg byte a 4.0
(byte~) keyboard_event_scan::$15 reg byte a 20002.0
(byte~) keyboard_event_scan::$16 reg byte a 20002.0
(byte~) keyboard_event_scan::$23 reg byte a 20002.0
(byte~) keyboard_event_scan::$3 reg byte a 4.0
(byte~) keyboard_event_scan::$6 reg byte a 4.0
(byte~) keyboard_event_scan::$9 reg byte a 4.0
(label) keyboard_event_scan::@1
(label) keyboard_event_scan::@10
(label) keyboard_event_scan::@11
(label) keyboard_event_scan::@12
(label) keyboard_event_scan::@13
(label) keyboard_event_scan::@14
(label) keyboard_event_scan::@15
(label) keyboard_event_scan::@16
(label) keyboard_event_scan::@17
(label) keyboard_event_scan::@18
(label) keyboard_event_scan::@19
(label) keyboard_event_scan::@2
(label) keyboard_event_scan::@20
(label) keyboard_event_scan::@21
(label) keyboard_event_scan::@22
(label) keyboard_event_scan::@23
(label) keyboard_event_scan::@3
(label) keyboard_event_scan::@4
(label) keyboard_event_scan::@5
(label) keyboard_event_scan::@6
(label) keyboard_event_scan::@7
(label) keyboard_event_scan::@8
(label) keyboard_event_scan::@9
(label) keyboard_event_scan::@return
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#1 reg byte x 15001.5
(byte) keyboard_event_scan::col#2 reg byte x 2857.4285714285716
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0 reg byte a 20002.0
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#1 keycode zp ZP_BYTE:33 2002.0
(byte) keyboard_event_scan::keycode#10 keycode zp ZP_BYTE:33 3154.230769230769
(byte) keyboard_event_scan::keycode#11 keycode zp ZP_BYTE:33 500.5
(byte) keyboard_event_scan::keycode#13 keycode zp ZP_BYTE:33 1001.0
(byte) keyboard_event_scan::keycode#14 keycode zp ZP_BYTE:33 5250.75
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#1 row zp ZP_BYTE:32 1501.5
(byte) keyboard_event_scan::row#2 row zp ZP_BYTE:32 600.24
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0 row_scan zp ZP_BYTE:47 1278.0555555555554
(byte[8]) keyboard_events
(const byte[8]) keyboard_events#0 keyboard_events = { fill( 8, 0) }
(byte) keyboard_events_size
(byte) keyboard_events_size#1 keyboard_events_size zp ZP_BYTE:19 20002.0
(byte) keyboard_events_size#10 keyboard_events_size zp ZP_BYTE:19 8100.9000000000015
(byte) keyboard_events_size#13 keyboard_events_size zp ZP_BYTE:19 97.06451612903226
(byte) keyboard_events_size#16 keyboard_events_size zp ZP_BYTE:19 4.461538461538461
(byte) keyboard_events_size#19 keyboard_events_size zp ZP_BYTE:19 18.999999999999996
(byte) keyboard_events_size#2 keyboard_events_size zp ZP_BYTE:19 20002.0
(byte) keyboard_events_size#29 keyboard_events_size zp ZP_BYTE:19 10201.2
(byte) keyboard_events_size#30 keyboard_events_size zp ZP_BYTE:19 429.2857142857143
(byte) keyboard_events_size#4 keyboard_events_size zp ZP_BYTE:19 3.0
(byte[8]) keyboard_matrix_col_bitmask
(const byte[8]) keyboard_matrix_col_bitmask#0 keyboard_matrix_col_bitmask = { (byte) 1, (byte) 2, (byte) 4, (byte) 8, (byte) $10, (byte) $20, (byte) $40, (byte) $80 }
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 reg byte a 334.33333333333337
(byte) keyboard_matrix_read::return#2 reg byte a 2002.0
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 reg byte x 1003.0
(byte[8]) keyboard_matrix_row_bitmask
(const byte[8]) keyboard_matrix_row_bitmask#0 keyboard_matrix_row_bitmask = { (byte) $fe, (byte) $fd, (byte) $fb, (byte) $f7, (byte) $ef, (byte) $df, (byte) $bf, (byte) $7f }
(byte) keyboard_modifiers
(byte[8]) keyboard_scan_values
(const byte[8]) keyboard_scan_values#0 keyboard_scan_values = { fill( 8, 0) }
(byte) level
(byte) level#10 level zp ZP_BYTE:7 1.909090909090909
(byte) level#17 level zp ZP_BYTE:7 3.135135135135135
(byte) level#19 level zp ZP_BYTE:7 1.1428571428571428
(byte) level#21 level zp ZP_BYTE:7 0.4444444444444444
(byte) level#33 level zp ZP_BYTE:7 6.0
(byte) level_bcd
(byte) level_bcd#11 level_bcd zp ZP_BYTE:9 2.0
(byte) level_bcd#17 level_bcd zp ZP_BYTE:9 1.9999999999999998
(byte) level_bcd#19 level_bcd zp ZP_BYTE:9 1.1428571428571428
(byte) level_bcd#21 level_bcd zp ZP_BYTE:9 2.6666666666666665
(byte) level_bcd#31 level_bcd zp ZP_BYTE:9 6.0
(byte) level_bcd#62 level_bcd zp ZP_BYTE:9 0.6000000000000001
(byte) level_bcd#8 level_bcd zp ZP_BYTE:9 4.0
(word) lines_bcd
(word) lines_bcd#15 lines_bcd zp ZP_WORD:22 2.0338983050847457
(word) lines_bcd#17 lines_bcd zp ZP_WORD:22 1.1428571428571428
(word) lines_bcd#19 lines_bcd zp ZP_WORD:22 2.4400000000000004
(word) lines_bcd#26 lines_bcd zp ZP_WORD:22 6.0
(word) lines_bcd#29 lines_bcd zp ZP_WORD:22 1.0
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@18
(label) main::@19
(label) main::@2
(label) main::@20
(label) main::@21
(label) main::@22
(label) main::@23
(label) main::@24
(label) main::@25
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(byte) main::key_event
(byte) main::key_event#0 reg byte x 101.0
(byte) main::render
(byte) main::render#1 reg byte a 202.0
(byte) next_piece_idx
(byte) next_piece_idx#10 next_piece_idx zp ZP_BYTE:10 2.608695652173914
(byte) next_piece_idx#12 reg byte x 3.4
(byte) next_piece_idx#16 next_piece_idx zp ZP_BYTE:10 3.4324324324324325
(byte) next_piece_idx#17 next_piece_idx zp ZP_BYTE:10 6.0
(byte) next_piece_idx#30 next_piece_idx zp ZP_BYTE:10 6.0
(byte~) next_piece_idx#77 reg byte x 4.0
(byte~) next_piece_idx#78 reg byte x 22.0
(byte()) play_collision((byte) play_collision::xpos , (byte) play_collision::ypos , (byte) play_collision::orientation)
(byte~) play_collision::$14 reg byte a 2002.0
(byte~) play_collision::$5 reg byte a 20002.0
(label) play_collision::@1
(label) play_collision::@10
(label) play_collision::@2
(label) play_collision::@3
(label) play_collision::@4
(label) play_collision::@5
(label) play_collision::@6
(label) play_collision::@7
(label) play_collision::@8
(label) play_collision::@9
(label) play_collision::@return
(byte) play_collision::c
(byte) play_collision::c#1 reg byte x 10001.0
(byte) play_collision::c#2 reg byte x 2222.4444444444443
(byte) play_collision::i
(byte) play_collision::i#1 i zp ZP_BYTE:47 1615.6153846153845
(byte~) play_collision::i#10 i#10 zp ZP_BYTE:15 2002.0
(byte~) play_collision::i#12 i#12 zp ZP_BYTE:15 20002.0
(byte) play_collision::i#2 i#2 zp ZP_BYTE:15 15502.0
(byte) play_collision::i#3 i#3 zp ZP_BYTE:15 500.5
(byte) play_collision::l
(byte) play_collision::l#1 l zp ZP_BYTE:14 1001.0
(byte) play_collision::l#6 l zp ZP_BYTE:14 117.76470588235294
(byte) play_collision::orientation
(byte) play_collision::orientation#0 reg byte x 2.0
(byte) play_collision::orientation#1 reg byte x 2.0
(byte) play_collision::orientation#2 reg byte x 2.0
(byte) play_collision::orientation#3 reg byte x 2.0
(byte) play_collision::orientation#5 reg byte x 10.0
(byte*) play_collision::piece_gfx
(byte*) play_collision::piece_gfx#0 piece_gfx zp ZP_WORD:34 476.3333333333333
(byte*) play_collision::playfield_line
(byte*) play_collision::playfield_line#0 playfield_line zp ZP_WORD:36 785.8571428571429
(byte) play_collision::return
(byte) play_collision::return#0 reg byte a 4.0
(byte) play_collision::return#1 reg byte a 4.0
(byte) play_collision::return#10 reg byte a 4.0
(byte) play_collision::return#13 reg byte a 4.0
(byte) play_collision::return#14 reg byte a 4.0
(byte) play_collision::return#15 reg byte a 1.4285714285714284
(byte) play_collision::xp
(byte) play_collision::xp#1 xp zp ZP_BYTE:16 5000.5
(byte) play_collision::xp#2 xp zp ZP_BYTE:16 6375.75
(byte~) play_collision::xp#8 xp zp ZP_BYTE:16 2002.0
(byte) play_collision::xpos
(byte) play_collision::xpos#0 xpos zp ZP_BYTE:33 1.3333333333333333
(byte) play_collision::xpos#1 xpos zp ZP_BYTE:33 1.0
(byte) play_collision::xpos#2 xpos zp ZP_BYTE:33 1.0
(byte) play_collision::xpos#3 xpos zp ZP_BYTE:33 1.0
(byte) play_collision::xpos#4 xpos zp ZP_BYTE:33 1.3333333333333333
(byte) play_collision::xpos#6 xpos zp ZP_BYTE:33 45.95454545454545
(byte) play_collision::yp
(byte) play_collision::yp#0 yp zp ZP_BYTE:13 6.0
(byte) play_collision::yp#1 yp zp ZP_BYTE:13 500.5
(byte) play_collision::yp#2 yp zp ZP_BYTE:13 812.875
(byte) play_collision::ypos
(byte) play_collision::ypos#0 ypos zp ZP_BYTE:13 1.0
(byte) play_collision::ypos#1 ypos zp ZP_BYTE:13 1.3333333333333333
(byte) play_collision::ypos#2 ypos zp ZP_BYTE:13 1.3333333333333333
(byte) play_collision::ypos#3 ypos zp ZP_BYTE:13 1.3333333333333333
(byte) play_collision::ypos#4 ypos zp ZP_BYTE:13 2.0
(void()) play_increase_level()
(byte~) play_increase_level::$1 reg byte a 4.0
(byte~) play_increase_level::$5 reg byte a 4004.0
(label) play_increase_level::@1
(label) play_increase_level::@2
(label) play_increase_level::@3
(label) play_increase_level::@4
(label) play_increase_level::@5
(label) play_increase_level::@6
(label) play_increase_level::@return
(byte) play_increase_level::b
(byte) play_increase_level::b#1 reg byte x 1501.5
(byte) play_increase_level::b#2 reg byte x 1001.0
(void()) play_init()
(byte~) play_init::$4 reg byte x 22.0
(byte~) play_init::$5 reg byte a 33.0
(label) play_init::@1
(label) play_init::@2
(label) play_init::@3
(label) play_init::@return
(byte) play_init::b
(byte) play_init::b#1 reg byte x 16.5
(byte) play_init::b#2 reg byte x 11.0
(byte) play_init::idx
(byte) play_init::idx#1 idx zp ZP_BYTE:20 7.333333333333333
(byte) play_init::idx#2 idx zp ZP_BYTE:20 6.6000000000000005
(byte) play_init::j
(byte) play_init::j#1 reg byte y 16.5
(byte) play_init::j#2 reg byte y 7.333333333333333
(byte*) play_init::pli
(byte*) play_init::pli#1 pli zp ZP_WORD:34 5.5
(byte*) play_init::pli#2 pli zp ZP_WORD:34 8.25
(void()) play_lock_current()
(byte~) play_lock_current::$4 reg byte a 2002.0
(label) play_lock_current::@1
(label) play_lock_current::@2
(label) play_lock_current::@3
(label) play_lock_current::@4
(label) play_lock_current::@5
(label) play_lock_current::@6
(label) play_lock_current::@7
(label) play_lock_current::@return
(byte) play_lock_current::c
(byte) play_lock_current::c#1 reg byte x 10001.0
(byte) play_lock_current::c#2 reg byte x 4000.4
(byte) play_lock_current::i
(byte) play_lock_current::i#1 i zp ZP_BYTE:47 2333.6666666666665
(byte) play_lock_current::i#2 i#2 zp ZP_BYTE:17 15502.0
(byte) play_lock_current::i#3 i#3 zp ZP_BYTE:17 500.5
(byte~) play_lock_current::i#7 i#7 zp ZP_BYTE:17 2002.0
(byte~) play_lock_current::i#9 i#9 zp ZP_BYTE:17 20002.0
(byte) play_lock_current::l
(byte) play_lock_current::l#1 l zp ZP_BYTE:16 1001.0
(byte) play_lock_current::l#6 l zp ZP_BYTE:16 154.0
(byte*) play_lock_current::playfield_line
(byte*) play_lock_current::playfield_line#0 playfield_line zp ZP_WORD:44 1100.2
(byte) play_lock_current::xp
(byte) play_lock_current::xp#0 xp zp ZP_BYTE:18 2002.0
(byte) play_lock_current::xp#1 xp zp ZP_BYTE:18 5000.5
(byte) play_lock_current::xp#2 xp zp ZP_BYTE:18 7751.0
(byte) play_lock_current::yp
(byte) play_lock_current::yp#0 yp zp ZP_BYTE:24 4.0
(byte) play_lock_current::yp#1 yp zp ZP_BYTE:24 500.5
(byte) play_lock_current::yp#2 yp zp ZP_BYTE:24 250.41666666666669
(byte()) play_move_down((byte) play_move_down::key_event)
(byte~) play_move_down::$12 reg byte a 4.0
(byte~) play_move_down::$2 reg byte a 4.0
(label) play_move_down::@1
(label) play_move_down::@10
(label) play_move_down::@11
(label) play_move_down::@12
(label) play_move_down::@13
(label) play_move_down::@14
(label) play_move_down::@15
(label) play_move_down::@16
(label) play_move_down::@17
(label) play_move_down::@2
(label) play_move_down::@3
(label) play_move_down::@4
(label) play_move_down::@5
(label) play_move_down::@6
(label) play_move_down::@7
(label) play_move_down::@8
(label) play_move_down::@9
(label) play_move_down::@return
(byte) play_move_down::key_event
(byte) play_move_down::key_event#0 reg byte a 2.0
(byte) play_move_down::movedown
(byte) play_move_down::movedown#10 reg byte x 1.0
(byte) play_move_down::movedown#2 reg byte x 4.0
(byte) play_move_down::movedown#3 reg byte x 4.0
(byte) play_move_down::movedown#6 reg byte x 6.0
(byte) play_move_down::movedown#7 reg byte x 5.0
(byte) play_move_down::removed
(byte) play_move_down::removed#0 reg byte a 4.0
(byte) play_move_down::return
(byte) play_move_down::return#0 reg byte a 4.0
(byte) play_move_down::return#3 reg byte x 0.6666666666666666
(byte()) play_move_leftright((byte) play_move_leftright::key_event)
(byte~) play_move_leftright::$4 reg byte a 4.0
(byte~) play_move_leftright::$8 reg byte a 4.0
(label) play_move_leftright::@1
(label) play_move_leftright::@2
(label) play_move_leftright::@3
(label) play_move_leftright::@4
(label) play_move_leftright::@5
(label) play_move_leftright::@6
(label) play_move_leftright::@7
(label) play_move_leftright::@return
(byte) play_move_leftright::key_event
(byte) play_move_leftright::key_event#0 reg byte a 3.0
(byte) play_move_leftright::return
(byte) play_move_leftright::return#0 reg byte a 4.0
(byte) play_move_leftright::return#2 reg byte a 0.6666666666666666
(byte()) play_move_rotate((byte) play_move_rotate::key_event)
(byte~) play_move_rotate::$2 reg byte a 4.0
(byte~) play_move_rotate::$5 reg byte x 4.0
(byte~) play_move_rotate::$7 reg byte x 4.0
(label) play_move_rotate::@1
(label) play_move_rotate::@2
(label) play_move_rotate::@3
(label) play_move_rotate::@4
(label) play_move_rotate::@5
(label) play_move_rotate::@6
(label) play_move_rotate::@return
(byte) play_move_rotate::key_event
(byte) play_move_rotate::key_event#0 reg byte a 3.0
(byte) play_move_rotate::orientation
(byte) play_move_rotate::orientation#1 orientation zp ZP_BYTE:32 4.0
(byte) play_move_rotate::orientation#2 orientation zp ZP_BYTE:32 4.0
(byte) play_move_rotate::orientation#3 orientation zp ZP_BYTE:32 0.8888888888888888
(byte) play_move_rotate::return
(byte) play_move_rotate::return#0 reg byte a 4.0
(byte) play_move_rotate::return#2 reg byte a 0.6666666666666666
(byte()) play_movement((byte) play_movement::key_event)
(byte~) play_movement::$3 reg byte a 4.0
(byte~) play_movement::$4 reg byte a 4.0
(label) play_movement::@1
(label) play_movement::@2
(label) play_movement::@3
(label) play_movement::@4
(label) play_movement::@return
(byte) play_movement::key_event
(byte) play_movement::key_event#0 key_event zp ZP_BYTE:32 9.727272727272727
(byte) play_movement::render
(byte) play_movement::render#1 render zp ZP_BYTE:18 1.0
(byte) play_movement::render#2 render zp ZP_BYTE:18 0.8
(byte) play_movement::return
(byte) play_movement::return#0 return zp ZP_BYTE:18 4.0
(byte) play_movement::return#2 return zp ZP_BYTE:18 34.99999999999999
(byte) play_movement::return#3 reg byte a 202.0
(byte()) play_remove_lines()
(label) play_remove_lines::@1
(label) play_remove_lines::@2
(label) play_remove_lines::@3
(label) play_remove_lines::@4
(label) play_remove_lines::@5
(label) play_remove_lines::@6
(label) play_remove_lines::@7
(label) play_remove_lines::@8
(label) play_remove_lines::@9
(label) play_remove_lines::@return
(byte) play_remove_lines::c
(byte) play_remove_lines::c#0 c zp ZP_BYTE:43 6000.6
(byte) play_remove_lines::full
(byte) play_remove_lines::full#2 full zp ZP_BYTE:15 4200.6
(byte) play_remove_lines::full#4 full zp ZP_BYTE:15 4000.4
(byte) play_remove_lines::r
(byte) play_remove_lines::r#1 reg byte y 1500.2142857142858
(byte) play_remove_lines::r#2 reg byte y 15502.0
(byte) play_remove_lines::r#3 reg byte y 2002.0
(byte) play_remove_lines::removed
(byte) play_remove_lines::removed#1 removed zp ZP_BYTE:13 2002.0
(byte) play_remove_lines::removed#11 removed zp ZP_BYTE:13 231.0
(byte) play_remove_lines::removed#8 removed zp ZP_BYTE:13 333.8888888888889
(byte) play_remove_lines::return
(byte) play_remove_lines::return#0 reg byte a 4.0
(byte) play_remove_lines::w
(byte) play_remove_lines::w#1 reg byte x 5501.0
(byte) play_remove_lines::w#11 reg byte x 1334.6666666666667
(byte) play_remove_lines::w#12 reg byte x 2002.0
(byte) play_remove_lines::w#2 reg byte x 1001.0
(byte) play_remove_lines::w#3 reg byte x 2002.0
(byte) play_remove_lines::w#4 reg byte x 4429.142857142857
(byte) play_remove_lines::w#6 reg byte x 1668.3333333333335
(byte) play_remove_lines::x
(byte) play_remove_lines::x#1 x zp ZP_BYTE:14 15001.5
(byte) play_remove_lines::x#2 x zp ZP_BYTE:14 2500.25
(byte) play_remove_lines::y
(byte) play_remove_lines::y#1 y zp ZP_BYTE:12 1501.5
(byte) play_remove_lines::y#8 y zp ZP_BYTE:12 133.46666666666667
(void()) play_spawn_current()
(byte~) play_spawn_current::$1 reg byte a 4.0
(byte~) play_spawn_current::$7 $7 zp ZP_BYTE:46 0.06451612903225806
(label) play_spawn_current::@1
(label) play_spawn_current::@2
(label) play_spawn_current::@3
(label) play_spawn_current::@4
(label) play_spawn_current::@5
(label) play_spawn_current::@return
(byte) play_spawn_current::current_piece_idx
(byte) play_spawn_current::current_piece_idx#0 reg byte x 2.5
(byte) play_spawn_current::piece_idx
(byte) play_spawn_current::piece_idx#1 piece_idx zp ZP_BYTE:10 2002.0
(byte) play_spawn_current::piece_idx#2 piece_idx zp ZP_BYTE:10 100.5
(label) play_spawn_current::sid_rnd1
(byte) play_spawn_current::sid_rnd1_return
(byte) play_spawn_current::sid_rnd1_return#0 reg byte a 2002.0
(void()) play_update_score((byte) play_update_score::removed)
(byte~) play_update_score::$2 reg byte a 4.0
(byte~) play_update_score::$4 reg byte a 4.0
(byte~) play_update_score::$9 reg byte a 4.0
(label) play_update_score::@1
(label) play_update_score::@2
(label) play_update_score::@return
(dword) play_update_score::add_bcd
(dword) play_update_score::add_bcd#0 add_bcd zp ZP_DWORD:39 1.3333333333333333
(byte) play_update_score::lines_after
(byte) play_update_score::lines_after#0 reg byte a 4.0
(byte) play_update_score::lines_before
(byte) play_update_score::lines_before#0 lines_before zp ZP_BYTE:38 0.4444444444444444
(byte) play_update_score::removed
(byte) play_update_score::removed#0 reg byte x 1.1428571428571428
(byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield
(const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 playfield = { fill( PLAYFIELD_LINES#0*PLAYFIELD_COLS#0, 0) }
(byte*[PLAYFIELD_LINES#0]) playfield_lines
(const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 playfield_lines = { fill( PLAYFIELD_LINES#0, 0) }
(byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx
(const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 playfield_lines_idx = { fill( PLAYFIELD_LINES#0+1, 0) }
(void()) render_bcd((byte*) render_bcd::screen , (word) render_bcd::offset , (byte) render_bcd::bcd , (byte) render_bcd::only_low)
(byte~) render_bcd::$3 reg byte a 4.0
(byte~) render_bcd::$4 reg byte a 4.0
(byte~) render_bcd::$5 reg byte a 4.0
(byte~) render_bcd::$6 reg byte a 4.0
(label) render_bcd::@1
(label) render_bcd::@2
(label) render_bcd::@return
(byte) render_bcd::ZERO_CHAR
(const byte) render_bcd::ZERO_CHAR#0 ZERO_CHAR = (byte) $35
(byte) render_bcd::bcd
(byte) render_bcd::bcd#0 reg byte x 4.0
(byte) render_bcd::bcd#1 reg byte x 4.0
(byte) render_bcd::bcd#2 reg byte x 4.0
(byte) render_bcd::bcd#3 reg byte x 2.0
(byte) render_bcd::bcd#4 reg byte x 2.0
(byte) render_bcd::bcd#5 reg byte x 4.0
(byte) render_bcd::bcd#6 reg byte x 2.0
(word) render_bcd::offset
(word) render_bcd::offset#6 offset zp ZP_WORD:34 2.0
(byte) render_bcd::only_low
(byte) render_bcd::only_low#6 reg byte y 1.0
(byte*) render_bcd::screen
(byte*) render_bcd::screen#0 screen zp ZP_WORD:36 2.0
(byte*) render_bcd::screen#1 screen zp ZP_WORD:36 2.0
(byte*) render_bcd::screen#2 screen zp ZP_WORD:36 2.0
(byte*) render_bcd::screen#3 screen zp ZP_WORD:36 4.0
(byte*) render_bcd::screen#4 screen zp ZP_WORD:36 4.0
(byte*) render_bcd::screen#5 screen zp ZP_WORD:36 2.0
(byte*) render_bcd::screen#6 screen zp ZP_WORD:36 14.0
(byte*) render_bcd::screen_pos
(byte*) render_bcd::screen_pos#0 screen_pos zp ZP_WORD:34 1.6
(byte*) render_bcd::screen_pos#2 screen_pos zp ZP_WORD:34 4.0
(byte*) render_bcd::screen_pos#3 screen_pos zp ZP_WORD:34 2.0
(void()) render_init()
(byte~) render_init::$13 reg byte x 16.5
(label) render_init::@1
(label) render_init::@2
(label) render_init::@3
(label) render_init::@return
(byte) render_init::i
(byte) render_init::i#1 reg byte y 16.5
(byte) render_init::i#2 reg byte y 5.5
(byte*) render_init::li_1
(byte*) render_init::li_1#1 li_1 zp ZP_WORD:22 5.5
(byte*) render_init::li_1#2 li_1 zp ZP_WORD:22 8.25
(byte*) render_init::li_2
(byte*) render_init::li_2#1 li_2 zp ZP_WORD:44 7.333333333333333
(byte*) render_init::li_2#2 li_2 zp ZP_WORD:44 6.6000000000000005
(label) render_init::vicSelectGfxBank1
(byte~) render_init::vicSelectGfxBank1_$0
(label) render_init::vicSelectGfxBank1_@1
(byte*) render_init::vicSelectGfxBank1_gfx
(label) render_init::vicSelectGfxBank1_toDd001
(word~) render_init::vicSelectGfxBank1_toDd001_$0
(byte~) render_init::vicSelectGfxBank1_toDd001_$1
(number~) render_init::vicSelectGfxBank1_toDd001_$2
(number~) render_init::vicSelectGfxBank1_toDd001_$3
(byte*) render_init::vicSelectGfxBank1_toDd001_gfx
(byte) render_init::vicSelectGfxBank1_toDd001_return
(const byte) render_init::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = (byte) 3
(void()) render_moving()
(byte~) render_moving::$1 reg byte a 202.0
(byte~) render_moving::$6 reg byte a 202.0
(label) render_moving::@1
(label) render_moving::@2
(label) render_moving::@3
(label) render_moving::@4
(label) render_moving::@5
(label) render_moving::@6
(label) render_moving::@7
(label) render_moving::@return
(byte) render_moving::c
(byte) render_moving::c#1 reg byte x 1501.5
(byte) render_moving::c#2 reg byte x 333.6666666666667
(byte) render_moving::current_cell
(byte) render_moving::current_cell#0 reg byte a 1001.0
(byte) render_moving::i
(byte) render_moving::i#1 i zp ZP_BYTE:32 202.0
(byte) render_moving::i#2 i zp ZP_BYTE:32 500.5
(byte) render_moving::i#3 i zp ZP_BYTE:32 50.5
(byte) render_moving::i#4 i zp ZP_BYTE:32 1552.0
(byte) render_moving::i#8 i zp ZP_BYTE:32 300.75
(byte) render_moving::l
(byte) render_moving::l#1 l zp ZP_BYTE:18 151.5
(byte) render_moving::l#4 l zp ZP_BYTE:18 11.882352941176471
(byte*) render_moving::screen_line
(byte*) render_moving::screen_line#0 screen_line zp ZP_WORD:34 110.19999999999999
(byte) render_moving::xpos
(byte) render_moving::xpos#0 xpos zp ZP_BYTE:33 202.0
(byte) render_moving::xpos#1 xpos zp ZP_BYTE:33 667.3333333333334
(byte) render_moving::xpos#2 xpos zp ZP_BYTE:33 620.8
(byte) render_moving::ypos
(byte) render_moving::ypos#0 ypos zp ZP_BYTE:16 4.0
(byte) render_moving::ypos#1 ypos zp ZP_BYTE:16 67.33333333333333
(byte) render_moving::ypos#2 ypos zp ZP_BYTE:16 25.375
(void()) render_next()
(byte~) render_next::$6 reg byte y 1.0
(label) render_next::@1
(label) render_next::@2
(label) render_next::@3
(label) render_next::@4
(label) render_next::@5
(label) render_next::@6
(label) render_next::@7
(label) render_next::@8
(label) render_next::@return
(byte) render_next::c
(byte) render_next::c#1 reg byte x 1501.5
(byte) render_next::c#2 reg byte x 286.0
(byte) render_next::cell
(byte) render_next::cell#0 reg byte a 1001.0
(byte) render_next::l
(byte) render_next::l#1 l zp ZP_BYTE:13 151.5
(byte) render_next::l#7 l zp ZP_BYTE:13 18.363636363636363
(word) render_next::next_area_offset
(const word) render_next::next_area_offset#0 next_area_offset = (word)(number) $28*(number) $c+(number) $18+(number) 4
(byte) render_next::next_piece_char
(byte) render_next::next_piece_char#0 next_piece_char zp ZP_BYTE:33 66.86666666666667
(byte*) render_next::next_piece_gfx
(byte*) render_next::next_piece_gfx#1 next_piece_gfx zp ZP_WORD:36 210.29999999999998
(byte*) render_next::next_piece_gfx#2 next_piece_gfx zp ZP_WORD:36 1552.0
(byte*) render_next::next_piece_gfx#3 next_piece_gfx zp ZP_WORD:36 204.0
(byte*~) render_next::next_piece_gfx#9 next_piece_gfx zp ZP_WORD:36 4.0
(byte*) render_next::screen_next_area
(byte*) render_next::screen_next_area#10 screen_next_area zp ZP_WORD:34 204.0
(byte*) render_next::screen_next_area#11 screen_next_area zp ZP_WORD:34 0.5
(byte*) render_next::screen_next_area#3 screen_next_area zp ZP_WORD:34 701.0
(byte*) render_next::screen_next_area#4 screen_next_area zp ZP_WORD:34 67.33333333333333
(byte*) render_next::screen_next_area#5 screen_next_area zp ZP_WORD:34 684.1666666666667
(void()) render_playfield()
(byte~) render_playfield::$2 reg byte a 202.0
(byte~) render_playfield::$6 reg byte a 202.0
(label) render_playfield::@1
(label) render_playfield::@2
(label) render_playfield::@3
(label) render_playfield::@return
(byte) render_playfield::c
(byte) render_playfield::c#1 c zp ZP_BYTE:16 1501.5
(byte) render_playfield::c#2 c zp ZP_BYTE:16 500.5
(byte) render_playfield::i
(byte) render_playfield::i#1 i zp ZP_BYTE:15 420.59999999999997
(byte) render_playfield::i#2 i zp ZP_BYTE:15 1034.6666666666667
(byte) render_playfield::i#3 i zp ZP_BYTE:15 50.5
(byte) render_playfield::l
(byte) render_playfield::l#1 l zp ZP_BYTE:14 151.5
(byte) render_playfield::l#2 l zp ZP_BYTE:14 30.299999999999997
(byte*) render_playfield::screen_line
(byte*) render_playfield::screen_line#0 screen_line zp ZP_WORD:36 202.0
(byte*) render_playfield::screen_line#1 screen_line zp ZP_WORD:36 500.5
(byte*) render_playfield::screen_line#2 screen_line zp ZP_WORD:36 1552.0
(void()) render_score()
(label) render_score::@1
(label) render_score::@2
(label) render_score::@3
(label) render_score::@4
(label) render_score::@5
(label) render_score::@6
(label) render_score::@7
(label) render_score::@return
(word) render_score::level_offset
(const word) render_score::level_offset#0 level_offset = (word)(number) $28*(number) $13+(number) $1f
(word) render_score::lines_offset
(const word) render_score::lines_offset#0 lines_offset = (byte)(number) $28*(number) 1+(number) $16
(byte*) render_score::score_bytes
(const byte*) render_score::score_bytes#0 score_bytes = (byte*)&(dword) score_bcd#14
(word) render_score::score_offset
(const word) render_score::score_offset#0 score_offset = (byte)(number) $28*(number) 5+(number) $1c
(byte*) render_score::screen
(byte*) render_score::screen#3 screen zp ZP_WORD:36 0.75
(void()) render_screen_original((byte*) render_screen_original::screen)
(label) render_screen_original::@1
(label) render_screen_original::@2
(label) render_screen_original::@3
(label) render_screen_original::@4
(label) render_screen_original::@5
(label) render_screen_original::@return
(byte) render_screen_original::SPACE
(const byte) render_screen_original::SPACE#0 SPACE = (byte) 0
(byte*) render_screen_original::cols
(byte*) render_screen_original::cols#1 cols zp ZP_WORD:44 101.0
(byte*) render_screen_original::cols#2 cols zp ZP_WORD:44 75.75
(byte*) render_screen_original::cols#3 cols zp ZP_WORD:44 42.599999999999994
(byte*) render_screen_original::cols#4 cols zp ZP_WORD:44 78.5
(byte*) render_screen_original::cols#5 cols zp ZP_WORD:44 80.8
(byte*) render_screen_original::cols#6 cols zp ZP_WORD:44 101.0
(byte*) render_screen_original::cols#7 cols zp ZP_WORD:44 22.0
(byte*) render_screen_original::ocols
(byte*) render_screen_original::ocols#1 ocols zp ZP_WORD:34 17.75
(byte*) render_screen_original::ocols#2 ocols zp ZP_WORD:34 67.33333333333333
(byte*) render_screen_original::ocols#4 ocols zp ZP_WORD:34 14.0
(byte*) render_screen_original::oscr
(byte*) render_screen_original::oscr#1 oscr zp ZP_WORD:25 14.2
(byte*) render_screen_original::oscr#2 oscr zp ZP_WORD:25 134.66666666666666
(byte*) render_screen_original::oscr#4 oscr zp ZP_WORD:25 14.0
(byte*) render_screen_original::screen
(byte*) render_screen_original::screen#10 screen zp ZP_WORD:36 30.42857142857143
(byte*) render_screen_original::screen#2 screen zp ZP_WORD:36 60.599999999999994
(byte*) render_screen_original::screen#3 screen zp ZP_WORD:36 43.285714285714285
(byte*) render_screen_original::screen#5 screen zp ZP_WORD:36 157.0
(byte*) render_screen_original::screen#6 screen zp ZP_WORD:36 202.0
(byte*) render_screen_original::screen#7 screen zp ZP_WORD:36 202.0
(byte*) render_screen_original::screen#8 screen zp ZP_WORD:36 24.0
(byte*) render_screen_original::screen#9 screen zp ZP_WORD:36 2.0
(byte) render_screen_original::x
(byte) render_screen_original::x#1 reg byte x 202.0
(byte) render_screen_original::x#2 reg byte x 202.0
(byte) render_screen_original::x#3 reg byte x 151.5
(byte) render_screen_original::x#4 reg byte x 40.4
(byte) render_screen_original::x#5 reg byte x 43.285714285714285
(byte) render_screen_original::x#6 reg byte x 60.599999999999994
(byte) render_screen_original::y
(byte) render_screen_original::y#1 y zp ZP_BYTE:24 16.5
(byte) render_screen_original::y#6 y zp ZP_BYTE:24 0.9166666666666666
(byte) render_screen_render
(byte) render_screen_render#11 render_screen_render zp ZP_BYTE:21 3.25
(byte) render_screen_render#15 reg byte a 13.0
(byte) render_screen_render#18 render_screen_render zp ZP_BYTE:21 4.8076923076923075
(byte) render_screen_render#22 reg byte x 8.615384615384615
(byte) render_screen_render#33 render_screen_render#33 zp ZP_BYTE:13 5.333333333333333
(byte~) render_screen_render#64 reg byte x 22.0
(byte~) render_screen_render#65 render_screen_render#65 zp ZP_BYTE:13 5.5
(byte~) render_screen_render#66 reg byte a 11.0
(byte) render_screen_show
(byte) render_screen_show#13 render_screen_show zp ZP_BYTE:20 4.333333333333333
(byte) render_screen_show#16 render_screen_show zp ZP_BYTE:20 5.474999999999999
(byte) render_screen_showing
(byte) render_screen_showing#0 render_screen_showing zp ZP_BYTE:2 0.1276595744680851
(byte) render_screen_showing#1 render_screen_showing zp ZP_BYTE:2 3.8000000000000003
(byte) render_screen_showing#13 render_screen_showing zp ZP_BYTE:2 1140.0
(void()) render_screen_swap()
(label) render_screen_swap::@return
(void()) render_show()
(label) render_show::@1
(label) render_show::@return
(byte) render_show::d018val
(byte) render_show::d018val#3 reg byte a 2.0
(label) render_show::toD0181
(word~) render_show::toD0181_$0
(number~) render_show::toD0181_$1
(number~) render_show::toD0181_$2
(number~) render_show::toD0181_$3
(word~) render_show::toD0181_$4
(byte~) render_show::toD0181_$5
(number~) render_show::toD0181_$6
(number~) render_show::toD0181_$7
(number~) render_show::toD0181_$8
(byte*) render_show::toD0181_gfx
(byte) render_show::toD0181_return
(const byte) render_show::toD0181_return#0 toD0181_return = >(word)(const byte*) PLAYFIELD_SCREEN_1#0&(word) $3fff*(byte) 4|>(word)(const byte*) PLAYFIELD_CHARSET#0/(byte) 4&(byte) $f
(byte*) render_show::toD0181_screen
(label) render_show::toD0182
(word~) render_show::toD0182_$0
(number~) render_show::toD0182_$1
(number~) render_show::toD0182_$2
(number~) render_show::toD0182_$3
(word~) render_show::toD0182_$4
(byte~) render_show::toD0182_$5
(number~) render_show::toD0182_$6
(number~) render_show::toD0182_$7
(number~) render_show::toD0182_$8
(byte*) render_show::toD0182_gfx
(byte) render_show::toD0182_return
(const byte) render_show::toD0182_return#0 toD0182_return = >(word)(const byte*) PLAYFIELD_SCREEN_2#0&(word) $3fff*(byte) 4|>(word)(const byte*) PLAYFIELD_CHARSET#0/(byte) 4&(byte) $f
(byte*) render_show::toD0182_screen
(dword[5]) score_add_bcd
(const dword[5]) score_add_bcd#0 score_add_bcd = { fill( 5, 0) }
(dword) score_bcd
(dword) score_bcd#0 score_bcd zp ZP_DWORD:3 0.1111111111111111
(dword) score_bcd#14 score_bcd zp ZP_DWORD:3 3.135135135135135
(dword) score_bcd#16 score_bcd zp ZP_DWORD:3 1.1428571428571428
(dword) score_bcd#18 score_bcd zp ZP_DWORD:3 2.3921568627450975
(dword) score_bcd#26 score_bcd zp ZP_DWORD:3 6.0
(dword) score_bcd#29 score_bcd zp ZP_DWORD:3 0.8571428571428571
(byte*[PLAYFIELD_LINES#0]) screen_lines_1
(const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 screen_lines_1 = { fill( PLAYFIELD_LINES#0, 0) }
(byte*[PLAYFIELD_LINES#0]) screen_lines_2
(const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 screen_lines_2 = { fill( PLAYFIELD_LINES#0, 0) }
(void()) sid_rnd_init()
(label) sid_rnd_init::@return
(void()) sprites_init()
(label) sprites_init::@1
(label) sprites_init::@return
(byte) sprites_init::s
(byte) sprites_init::s#1 reg byte y 16.5
(byte) sprites_init::s#2 reg byte y 8.8
(byte) sprites_init::s2
(byte) sprites_init::s2#0 reg byte x 22.0
(byte) sprites_init::xpos
(byte) sprites_init::xpos#1 xpos zp ZP_BYTE:21 7.333333333333333
(byte) sprites_init::xpos#2 xpos zp ZP_BYTE:21 8.25
interrupt(HARDWARE_CLOBBER)(void()) sprites_irq()
(byte~) sprites_irq::$0 reg byte x 4.0
(label) sprites_irq::@1
(label) sprites_irq::@10
(label) sprites_irq::@11
(label) sprites_irq::@2
(label) sprites_irq::@3
(label) sprites_irq::@4
(label) sprites_irq::@5
(label) sprites_irq::@6
(label) sprites_irq::@7
(label) sprites_irq::@8
(label) sprites_irq::@9
(label) sprites_irq::@return
(byte) sprites_irq::ptr
(byte) sprites_irq::ptr#0 reg byte x 2.5
(byte) sprites_irq::ptr#1 reg byte x 2.6666666666666665
(byte) sprites_irq::ptr#2 reg byte a 4.0
(byte) sprites_irq::ptr#3 reg byte a 2.6666666666666665
(byte) sprites_irq::ptr#4 reg byte a 4.0
(byte) sprites_irq::raster_sprite_gfx_modify
(byte) sprites_irq::raster_sprite_gfx_modify#0 raster_sprite_gfx_modify zp ZP_BYTE:27 6.5
(label) sprites_irq::toSpritePtr2
(word~) sprites_irq::toSpritePtr2_$0
(number~) sprites_irq::toSpritePtr2_$1
(byte~) sprites_irq::toSpritePtr2_$2
(byte) sprites_irq::toSpritePtr2_return
(const byte) sprites_irq::toSpritePtr2_return#0 toSpritePtr2_return = (byte)(word)(const byte*) PLAYFIELD_SPRITES#0/(byte) $40
(byte*) sprites_irq::toSpritePtr2_sprite
(byte) sprites_irq::ypos
(byte) sprites_irq::ypos#0 reg byte a 2.5
(void()) sprites_irq_init()
(label) sprites_irq_init::@return
(label) toSpritePtr1
(word~) toSpritePtr1_$0
(number~) toSpritePtr1_$1
(byte~) toSpritePtr1_$2
(byte) toSpritePtr1_return
(const byte) toSpritePtr1_return#0 toSpritePtr1_return = (byte)(word)(const byte*) PLAYFIELD_SPRITES#0/(byte) $40
(byte*) toSpritePtr1_sprite

zp ZP_BYTE:2 [ render_screen_showing#13 render_screen_showing#1 render_screen_showing#0 ]
reg byte y [ render_bcd::only_low#6 ]
reg byte x [ render_bcd::bcd#6 render_bcd::bcd#0 render_bcd::bcd#1 render_bcd::bcd#2 render_bcd::bcd#3 render_bcd::bcd#4 render_bcd::bcd#5 ]
reg byte a [ render_screen_render#15 render_screen_render#66 ]
reg byte x [ next_piece_idx#12 next_piece_idx#77 next_piece_idx#78 ]
reg byte x [ render_next::c#2 render_next::c#1 ]
reg byte x [ current_ypos#13 current_ypos#98 current_ypos#99 ]
reg byte x [ render_moving::c#2 render_moving::c#1 ]
reg byte x [ render_screen_render#22 render_screen_render#64 ]
reg byte a [ play_move_rotate::return#2 ]
reg byte x [ play_collision::orientation#5 play_collision::orientation#0 play_collision::orientation#1 play_collision::orientation#2 play_collision::orientation#3 ]
reg byte x [ play_collision::c#2 play_collision::c#1 ]
reg byte a [ play_collision::return#15 ]
reg byte a [ play_move_leftright::return#2 ]
reg byte x [ play_move_down::movedown#6 play_move_down::movedown#7 play_move_down::movedown#10 play_move_down::movedown#2 play_move_down::movedown#3 ]
zp ZP_DWORD:3 [ score_bcd#26 score_bcd#18 score_bcd#14 score_bcd#0 score_bcd#16 score_bcd#29 ]
zp ZP_BYTE:7 [ level#33 level#10 level#17 level#19 level#21 ]
zp ZP_BYTE:8 [ current_movedown_slow#37 current_movedown_slow#14 current_movedown_slow#21 current_movedown_slow#1 current_movedown_slow#23 current_movedown_slow#66 current_movedown_slow#10 ]
zp ZP_BYTE:9 [ level_bcd#31 level_bcd#11 level_bcd#17 level_bcd#19 level_bcd#62 level_bcd#21 level_bcd#8 ]
reg byte x [ play_move_down::return#3 ]
zp ZP_BYTE:10 [ next_piece_idx#17 next_piece_idx#30 next_piece_idx#10 next_piece_idx#16 play_spawn_current::piece_idx#2 play_spawn_current::piece_idx#1 ]
zp ZP_BYTE:11 [ game_over#65 game_over#27 game_over#10 game_over#15 game_over#52 ]
reg byte x [ play_increase_level::b#2 play_increase_level::b#1 ]
zp ZP_BYTE:12 [ play_remove_lines::y#8 play_remove_lines::y#1 current_movedown_counter#16 current_movedown_counter#14 current_movedown_counter#12 ]
zp ZP_BYTE:13 [ play_remove_lines::removed#11 play_remove_lines::removed#8 play_remove_lines::removed#1 play_collision::yp#2 play_collision::yp#0 play_collision::ypos#0 play_collision::ypos#1 play_collision::ypos#2 play_collision::ypos#3 play_collision::ypos#4 play_collision::yp#1 render_screen_render#33 render_screen_render#65 render_next::l#7 render_next::l#1 ]
reg byte y [ play_remove_lines::r#2 play_remove_lines::r#3 play_remove_lines::r#1 ]
zp ZP_BYTE:14 [ play_remove_lines::x#2 play_remove_lines::x#1 play_collision::l#6 play_collision::l#1 render_playfield::l#2 render_playfield::l#1 current_xpos#59 current_xpos#119 current_xpos#120 ]
zp ZP_BYTE:15 [ play_remove_lines::full#4 play_remove_lines::full#2 play_collision::i#2 play_collision::i#3 play_collision::i#10 play_collision::i#12 render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 current_piece_char#68 current_piece_char#100 current_piece_char#101 ]
reg byte x [ play_remove_lines::w#6 play_remove_lines::w#3 play_remove_lines::w#4 play_remove_lines::w#12 play_remove_lines::w#11 play_remove_lines::w#1 play_remove_lines::w#2 ]
zp ZP_BYTE:16 [ play_lock_current::l#6 play_lock_current::l#1 play_collision::xp#2 play_collision::xp#8 play_collision::xp#1 render_playfield::c#2 render_playfield::c#1 render_moving::ypos#2 render_moving::ypos#0 render_moving::ypos#1 ]
zp ZP_BYTE:17 [ play_lock_current::i#2 play_lock_current::i#3 play_lock_current::i#7 play_lock_current::i#9 current_orientation#37 current_orientation#13 current_orientation#17 current_orientation#20 current_orientation#25 current_orientation#7 ]
reg byte x [ play_lock_current::c#2 play_lock_current::c#1 ]
zp ZP_BYTE:18 [ keyboard_event_pressed::keycode#5 play_lock_current::xp#2 play_lock_current::xp#0 play_lock_current::xp#1 play_movement::return#2 play_movement::render#1 play_movement::return#0 play_movement::render#2 render_moving::l#4 render_moving::l#1 ]
reg byte x [ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
reg byte x [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
zp ZP_BYTE:19 [ keyboard_events_size#10 keyboard_events_size#30 keyboard_events_size#19 keyboard_events_size#16 keyboard_events_size#13 keyboard_events_size#4 keyboard_events_size#29 keyboard_events_size#1 keyboard_events_size#2 ]
reg byte a [ render_show::d018val#3 ]
reg byte y [ play_init::j#2 play_init::j#1 ]
zp ZP_BYTE:20 [ play_init::idx#2 play_init::idx#1 render_screen_show#16 render_screen_show#13 ]
reg byte x [ play_init::b#2 play_init::b#1 ]
reg byte y [ sprites_init::s#2 sprites_init::s#1 ]
zp ZP_BYTE:21 [ sprites_init::xpos#2 sprites_init::xpos#1 render_screen_render#18 render_screen_render#11 ]
reg byte y [ render_init::i#2 render_init::i#1 ]
zp ZP_WORD:22 [ render_init::li_1#2 render_init::li_1#1 lines_bcd#26 lines_bcd#19 lines_bcd#15 lines_bcd#17 lines_bcd#29 ]
zp ZP_BYTE:24 [ render_screen_original::y#6 render_screen_original::y#1 current_ypos#38 current_ypos#3 current_ypos#11 current_ypos#19 current_ypos#6 play_lock_current::yp#2 play_lock_current::yp#0 play_lock_current::yp#1 ]
zp ZP_WORD:25 [ render_screen_original::oscr#2 render_screen_original::oscr#4 render_screen_original::oscr#1 current_piece_gfx#35 current_piece_gfx#13 current_piece_gfx#18 current_piece_gfx#124 current_piece_gfx#20 current_piece_gfx#21 current_piece_gfx#7 current_piece_gfx#117 ]
reg byte x [ render_screen_original::x#6 render_screen_original::x#5 render_screen_original::x#4 render_screen_original::x#1 render_screen_original::x#2 render_screen_original::x#3 ]
zp ZP_BYTE:27 [ sprites_irq::raster_sprite_gfx_modify#0 ]
zp ZP_BYTE:28 [ irq_raster_next#0 irq_raster_next#4 irq_raster_next#1 irq_raster_next#2 irq_raster_next#3 ]
zp ZP_BYTE:29 [ irq_sprite_ypos#0 irq_sprite_ypos#11 irq_sprite_ypos#1 irq_sprite_ypos#2 irq_sprite_ypos#3 ]
zp ZP_BYTE:30 [ irq_sprite_ptr#0 irq_sprite_ptr#11 irq_sprite_ptr#1 irq_sprite_ptr#2 irq_sprite_ptr#3 ]
zp ZP_BYTE:31 [ irq_cnt#0 irq_cnt#3 irq_cnt#1 irq_cnt#2 ]
reg byte x [ keyboard_event_get::return#3 ]
reg byte x [ main::key_event#0 ]
zp ZP_BYTE:32 [ play_movement::key_event#0 keyboard_event_scan::row#2 keyboard_event_scan::row#1 play_move_rotate::orientation#3 play_move_rotate::orientation#1 play_move_rotate::orientation#2 render_moving::i#4 render_moving::i#3 render_moving::i#8 render_moving::i#2 render_moving::i#1 ]
reg byte a [ play_movement::return#3 ]
reg byte a [ main::render#1 ]
reg byte a [ render_bcd::$5 ]
reg byte a [ render_bcd::$6 ]
reg byte a [ render_bcd::$3 ]
reg byte a [ render_bcd::$4 ]
reg byte y [ render_next::$6 ]
zp ZP_BYTE:33 [ render_next::next_piece_char#0 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 play_collision::xpos#6 play_collision::xpos#0 play_collision::xpos#1 play_collision::xpos#2 play_collision::xpos#3 play_collision::xpos#4 render_moving::xpos#2 render_moving::xpos#0 render_moving::xpos#1 ]
reg byte a [ render_next::cell#0 ]
reg byte a [ render_moving::$1 ]
reg byte a [ render_moving::$6 ]
zp ZP_WORD:34 [ render_moving::screen_line#0 render_screen_original::ocols#2 render_screen_original::ocols#4 render_screen_original::ocols#1 play_init::pli#2 play_init::pli#1 current_piece#17 current_piece#96 current_piece#97 current_piece#98 current_piece#99 current_piece#100 play_collision::piece_gfx#0 render_next::screen_next_area#5 render_next::screen_next_area#10 render_next::screen_next_area#4 render_next::screen_next_area#11 render_next::screen_next_area#3 render_bcd::offset#6 render_bcd::screen_pos#3 render_bcd::screen_pos#0 render_bcd::screen_pos#2 ]
reg byte a [ render_moving::current_cell#0 ]
reg byte a [ render_playfield::$2 ]
reg byte a [ render_playfield::$6 ]
reg byte a [ play_move_down::key_event#0 ]
reg byte a [ play_move_down::return#0 ]
reg byte a [ play_move_leftright::key_event#0 ]
reg byte a [ play_move_leftright::return#0 ]
reg byte a [ play_movement::$3 ]
reg byte a [ play_move_rotate::key_event#0 ]
reg byte a [ play_move_rotate::return#0 ]
reg byte a [ play_movement::$4 ]
reg byte x [ play_move_rotate::$5 ]
reg byte a [ play_collision::return#14 ]
reg byte a [ play_move_rotate::$2 ]
reg byte x [ play_move_rotate::$7 ]
reg byte a [ play_collision::$14 ]
zp ZP_WORD:36 [ play_collision::playfield_line#0 render_screen_original::screen#7 render_screen_original::screen#6 render_screen_original::screen#5 render_screen_original::screen#8 render_screen_original::screen#9 render_screen_original::screen#10 render_screen_original::screen#2 render_screen_original::screen#3 render_playfield::screen_line#2 render_playfield::screen_line#0 render_playfield::screen_line#1 current_piece_gfx#64 current_piece_gfx#112 current_piece_gfx#113 render_next::next_piece_gfx#2 render_next::next_piece_gfx#3 render_next::next_piece_gfx#1 render_next::next_piece_gfx#9 render_score::screen#3 render_bcd::screen#6 render_bcd::screen#0 render_bcd::screen#1 render_bcd::screen#2 render_bcd::screen#3 render_bcd::screen#4 render_bcd::screen#5 ]
reg byte a [ play_collision::$5 ]
reg byte a [ play_collision::return#13 ]
reg byte a [ play_move_leftright::$4 ]
reg byte a [ play_collision::return#1 ]
reg byte a [ play_move_leftright::$8 ]
reg byte a [ keyboard_event_pressed::return#12 ]
reg byte a [ play_move_down::$2 ]
reg byte a [ play_collision::return#0 ]
reg byte a [ play_move_down::$12 ]
reg byte a [ play_remove_lines::return#0 ]
reg byte a [ play_move_down::removed#0 ]
reg byte x [ play_update_score::removed#0 ]
reg byte x [ play_spawn_current::current_piece_idx#0 ]
reg byte a [ play_collision::return#10 ]
reg byte a [ play_spawn_current::$1 ]
reg byte a [ play_spawn_current::sid_rnd1_return#0 ]
reg byte a [ play_update_score::$2 ]
zp ZP_BYTE:38 [ play_update_score::lines_before#0 current_piece_char#29 current_piece_char#10 current_piece_char#16 current_piece_char#5 ]
reg byte a [ play_update_score::$9 ]
zp ZP_DWORD:39 [ play_update_score::add_bcd#0 ]
reg byte a [ play_update_score::$4 ]
reg byte a [ play_update_score::lines_after#0 ]
reg byte a [ play_increase_level::$1 ]
reg byte a [ play_increase_level::$5 ]
zp ZP_BYTE:43 [ play_remove_lines::c#0 current_xpos#43 current_xpos#14 current_xpos#19 current_xpos#100 current_xpos#22 current_xpos#26 current_xpos#6 current_xpos#8 ]
reg byte a [ play_lock_current::$4 ]
zp ZP_WORD:44 [ play_lock_current::playfield_line#0 render_screen_original::cols#6 render_screen_original::cols#5 render_screen_original::cols#4 render_screen_original::cols#7 render_screen_original::cols#3 render_screen_original::cols#1 render_screen_original::cols#2 render_init::li_2#2 render_init::li_2#1 current_piece#28 current_piece#10 current_piece#15 current_piece#102 current_piece#93 ]
reg byte a [ keyboard_event_pressed::$0 ]
zp ZP_BYTE:46 [ keyboard_event_pressed::row_bits#0 play_spawn_current::$7 ]
reg byte a [ keyboard_event_pressed::$1 ]
reg byte a [ keyboard_event_pressed::return#11 ]
reg byte x [ keyboard_matrix_read::rowid#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
zp ZP_BYTE:47 [ keyboard_event_scan::row_scan#0 play_lock_current::i#1 play_collision::i#1 ]
reg byte a [ keyboard_event_pressed::return#0 ]
reg byte a [ keyboard_event_scan::$0 ]
reg byte a [ keyboard_event_pressed::return#1 ]
reg byte a [ keyboard_event_scan::$3 ]
reg byte a [ keyboard_event_pressed::return#2 ]
reg byte a [ keyboard_event_scan::$6 ]
reg byte a [ keyboard_event_pressed::return#10 ]
reg byte a [ keyboard_event_scan::$9 ]
reg byte a [ keyboard_event_scan::$15 ]
reg byte a [ keyboard_event_scan::$16 ]
reg byte a [ keyboard_event_scan::event_type#0 ]
reg byte a [ keyboard_event_scan::$23 ]
reg byte a [ keyboard_matrix_read::return#0 ]
reg byte x [ play_init::$4 ]
reg byte a [ play_init::$5 ]
reg byte x [ sprites_init::s2#0 ]
reg byte x [ render_init::$13 ]
reg byte a [ sprites_irq::ypos#0 ]
reg byte x [ sprites_irq::$0 ]
reg byte x [ sprites_irq::ptr#0 ]
reg byte a [ sprites_irq::ptr#3 ]
reg byte a [ sprites_irq::ptr#4 ]
reg byte x [ sprites_irq::ptr#1 ]
reg byte a [ sprites_irq::ptr#2 ]


FINAL ASSEMBLER
Score: 3353851

  // File Comments
// Tetris Game for the Commodore 64
// The tetris game tries to match NES tetris gameplay pretty closely
// Source: https://meatfighter.com/nintendotetrisai/
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = 5
  // The offset of the sprite pointers from the screen start address
  .const SPRITE_PTRS = $3f8
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label BORDERCOL = $d020
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label BGCOL4 = $d024
  .label SPRITES_COLS = $d027
  .label VIC_CONTROL = $d011
  .label D011 = $d011
  .const VIC_ECM = $40
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label D018 = $d018
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Bits for the IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // Color Ram
  .label COLS = $d800
  // CIA#1 Port A: keyboard matrix columns and joystick #2
  .label CIA1_PORT_A = $dc00
  // CIA#1 Port B: keyboard matrix rows and joystick #1.
  .label CIA1_PORT_B = $dc01
  // CIA#1 Interrupt Status & Control Register
  .label CIA1_INTERRUPT = $dc0d
  // CIA#2 Port A: Serial bus, RS-232, VIC memory bank
  .label CIA2_PORT_A = $dd00
  // CIA #2 Port A data direction register.
  .label CIA2_PORT_A_DDR = $dd02
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  // The colors of the C64
  .const BLACK = 0
  .const RED = 2
  .const CYAN = 3
  .const PURPLE = 4
  .const GREEN = 5
  .const BLUE = 6
  .const ORANGE = 8
  .const PINK = $a
  .const DARK_GREY = $b
  .const GREY = $c
  .const LIGHT_GREEN = $d
  .const LIGHT_BLUE = $e
  .const KEY_Z = $c
  .const KEY_LSHIFT = $f
  .const KEY_X = $17
  .const KEY_DOT = $2c
  .const KEY_COMMA = $2f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  // SID registers for random number generation
  .label SID_VOICE3_FREQ = $d40e
  .label SID_VOICE3_CONTROL = $d412
  .const SID_CONTROL_NOISE = $80
  .label SID_VOICE3_OSC = $d41b
  // Address of the first screen
  .label PLAYFIELD_SCREEN_1 = $400
  // Address of the second screen
  .label PLAYFIELD_SCREEN_2 = $2c00
  // Address of the original playscreen chars
  .label PLAYFIELD_SCREEN_ORIGINAL = $1800
  // Address of the original playscreen colors
  .label PLAYFIELD_COLORS_ORIGINAL = $1c00
  // Address of the sprites covering the playfield
  .label PLAYFIELD_SPRITES = $2000
  // Address of the charset
  .label PLAYFIELD_CHARSET = $2800
  // The size of the playfield
  .const PLAYFIELD_LINES = $16
  .const PLAYFIELD_COLS = $a
  // The Y-position of the first sprite row
  .const SPRITES_FIRST_YPOS = $31
  // The rate of moving down the current piece fast (number of frames between moves if movedown is not forced)
  .const current_movedown_fast = $a
  // No collision
  .const COLLISION_NONE = 0
  // Playfield piece collision (cell on top of other cell on the playfield)
  .const COLLISION_PLAYFIELD = 1
  // Bottom collision (cell below bottom of the playfield)
  .const COLLISION_BOTTOM = 2
  // Left side collision (cell beyond the left side of the playfield)
  .const COLLISION_LEFT = 4
  // Right side collision (cell beyond the right side of the playfield)
  .const COLLISION_RIGHT = 8
  // Screen Sprite pointers on screen 1
  .label PLAYFIELD_SPRITE_PTRS_1 = PLAYFIELD_SCREEN_1+SPRITE_PTRS
  // Screen Sprite pointers on screen 2
  .label PLAYFIELD_SPRITE_PTRS_2 = PLAYFIELD_SCREEN_2+SPRITE_PTRS
  // The line of the first IRQ
  .const IRQ_RASTER_FIRST = SPRITES_FIRST_YPOS+$13
  .const toSpritePtr1_return = PLAYFIELD_SPRITES/$40
  .label keyboard_events_size = $13
  .label render_screen_showing = 2
  .label score_bcd = 3
  .label irq_raster_next = $1c
  .label irq_sprite_ypos = $1d
  .label irq_sprite_ptr = $1e
  .label irq_cnt = $1f
  .label current_movedown_slow = 8
  .label current_ypos = $18
  .label current_xpos = $2b
  .label current_orientation = $11
  .label current_piece_gfx = $19
  .label current_piece_char = $26
  .label level_bcd = 9
  .label current_piece = $2c
  .label game_over = $b
  .label next_piece_idx = $a
  .label level = 7
  .label render_screen_render = $15
  .label render_screen_show = $14
  .label current_movedown_counter = $c
  .label lines_bcd = $16
  .label current_piece_17 = $22
  .label render_screen_render_33 = $d
  .label current_xpos_59 = $e
  .label current_piece_gfx_64 = $24
  .label current_piece_char_68 = $f
  .label render_screen_render_65 = $d
  .label current_xpos_119 = $e
  .label current_xpos_120 = $e
  .label current_piece_gfx_112 = $24
  .label current_piece_gfx_113 = $24
  .label current_piece_char_100 = $f
  .label current_piece_char_101 = $f
  .label current_piece_96 = $22
  .label current_piece_97 = $22
  .label current_piece_98 = $22
  .label current_piece_99 = $22
  .label current_piece_100 = $22
  // @begin
bbegin:
  // @1
  // render_screen_showing = 0
  // [1] (byte) render_screen_showing#0 ← (byte) 0 -- vbuz1=vbuc1 
  // The screen currently being showed to the user. $00 for screen 1 / $20 for screen 2.
  lda #0
  sta.z render_screen_showing
  // score_bcd = 0
  // [2] (dword) score_bcd#0 ← (byte) 0 -- vduz1=vbuc1 
  // Current score in BCD-format
  sta.z score_bcd
  sta.z score_bcd+1
  sta.z score_bcd+2
  sta.z score_bcd+3
  // kickasm
  // kickasm(location (const byte*) PLAYFIELD_CHARSET#0) {{ .fill 8,$00 // Place a filled char at the start of the charset     .import binary "playfield-screen.imap"  }}
  // kickasm(location (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0) {{ // Load chars for the screen   .var screen = LoadBinary("playfield-screen.iscr")    // Load extended colors for the screen   .var extended = LoadBinary("playfield-extended.col")   // screen.get(i)+1 because the charset is loaded into PLAYFIELD_CHARSET+8   // extended.get(i)-1 because the extended colors are 1-based (1/2/3/4)   // <<6 to move extended colors to the upper 2 bits   .fill screen.getSize(), ( (screen.get(i)+1) | (extended.get(i)-1)<<6 )  }}
  // kickasm(location (const byte*) PLAYFIELD_COLORS_ORIGINAL#0) {{ .import binary "playfield-screen.col"  }}
// Original Color Data
  // @2
  // kickasm(location (const byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000)) 	// Put the sprites into memory  	.for(var sy=0;sy<10;sy++) { 	    .var sprite_gfx_y = sy*20 		.for(var sx=0;sx<3;sx++) { 	    	.for (var y=0;y<21; y++) { 	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21) 		    	.for (var c=0; c<3; c++) { 	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y) 	            } 	        } 	    	.byte 0 	  	} 	}  }}
  // @3
  // irq_raster_next = IRQ_RASTER_FIRST
  // [7] (byte) irq_raster_next#0 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
  // The raster line of the next IRQ
  lda #IRQ_RASTER_FIRST
  sta.z irq_raster_next
  // irq_sprite_ypos = SPRITES_FIRST_YPOS + 21
  // [8] (byte) irq_sprite_ypos#0 ← (const byte) SPRITES_FIRST_YPOS#0+(byte) $15 -- vbuz1=vbuc1 
  // Y-pos of the sprites on the next IRQ
  lda #SPRITES_FIRST_YPOS+$15
  sta.z irq_sprite_ypos
  // [9] phi from @3 to toSpritePtr1 [phi:@3->toSpritePtr1]
  // toSpritePtr1
  // @5
  // irq_sprite_ptr = toSpritePtr(PLAYFIELD_SPRITES) + 3
  // [10] (byte) irq_sprite_ptr#0 ← (const byte) toSpritePtr1_return#0+(byte) 3 -- vbuz1=vbuc1 
  // Index of the sprites to show on the next IRQ
  lda #toSpritePtr1_return+3
  sta.z irq_sprite_ptr
  // irq_cnt = 0
  // [11] (byte) irq_cnt#0 ← (byte) 0 -- vbuz1=vbuc1 
  // Counting the 10 IRQs
  lda #0
  sta.z irq_cnt
  // [12] phi from @5 to @4 [phi:@5->@4]
  // @4
  // [13] call main 
  // [15] phi from @4 to main [phi:@4->main]
  jsr main
  rts
  // [14] phi from @4 to @end [phi:@4->@end]
  // @end
  // main
main: {
    // sid_rnd_init()
    // [16] call sid_rnd_init 
    jsr sid_rnd_init
    // main::@8
    // asm
    // asm { sei  }
    sei
    // render_init()
    // [18] call render_init 
    // [498] phi from main::@8 to render_init [phi:main::@8->render_init]
    jsr render_init
    // [19] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
    // main::@9
    // sprites_init()
    // [20] call sprites_init 
    jsr sprites_init
    // [21] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
    // main::@10
    // sprites_irq_init()
    // [22] call sprites_irq_init 
    jsr sprites_irq_init
    // [23] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
    // main::@11
    // play_init()
    // [24] call play_init 
    // [457] phi from main::@11 to play_init [phi:main::@11->play_init]
    jsr play_init
    // [25] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
    // main::@12
    // play_spawn_current()
    // [26] call play_spawn_current 
    // [287] phi from main::@12 to play_spawn_current [phi:main::@12->play_spawn_current]
    // [287] phi (byte) game_over#65 = (byte) 0 [phi:main::@12->play_spawn_current#0] -- vbuz1=vbuc1 
    lda #0
    sta.z game_over
    // [287] phi (byte) next_piece_idx#17 = (byte) 0 [phi:main::@12->play_spawn_current#1] -- vbuz1=vbuc1 
    sta.z next_piece_idx
    jsr play_spawn_current
    // [27] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
    // main::@13
    // play_spawn_current()
    // [28] call play_spawn_current 
    // [287] phi from main::@13 to play_spawn_current [phi:main::@13->play_spawn_current]
    // [287] phi (byte) game_over#65 = (byte) game_over#52 [phi:main::@13->play_spawn_current#0] -- register_copy 
    // [287] phi (byte) next_piece_idx#17 = (byte) play_spawn_current::piece_idx#2 [phi:main::@13->play_spawn_current#1] -- register_copy 
    jsr play_spawn_current
    // [29] phi from main::@13 to main::@14 [phi:main::@13->main::@14]
    // main::@14
    // render_playfield()
    // [30] call render_playfield 
    // [152] phi from main::@14 to render_playfield [phi:main::@14->render_playfield]
    // [152] phi (byte) render_screen_render#22 = (byte) $20 [phi:main::@14->render_playfield#0] -- vbuxx=vbuc1 
    ldx #$20
    jsr render_playfield
    // main::@15
    // [31] (byte~) current_ypos#98 ← (byte) current_ypos#6 -- vbuxx=vbuz1 
    ldx.z current_ypos
    // [32] (byte~) current_xpos#119 ← (byte) current_xpos#100 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z current_xpos_119
    // [33] (byte*~) current_piece_gfx#112 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current._7
    lda PIECES,y
    sta.z current_piece_gfx_112
    lda PIECES+1,y
    sta.z current_piece_gfx_112+1
    // [34] (byte~) current_piece_char#100 ← (byte) current_piece_char#5 -- vbuz1=vbuz2 
    lda.z current_piece_char
    sta.z current_piece_char_100
    // render_moving()
    // [35] call render_moving 
    // [130] phi from main::@15 to render_moving [phi:main::@15->render_moving]
    // [130] phi (byte) current_piece_char#68 = (byte~) current_piece_char#100 [phi:main::@15->render_moving#0] -- register_copy 
    // [130] phi (byte*) current_piece_gfx#64 = (byte*~) current_piece_gfx#112 [phi:main::@15->render_moving#1] -- register_copy 
    // [130] phi (byte) current_xpos#59 = (byte~) current_xpos#119 [phi:main::@15->render_moving#2] -- register_copy 
    // [130] phi (byte) render_screen_render#33 = (byte) $20 [phi:main::@15->render_moving#3] -- vbuz1=vbuc1 
    lda #$20
    sta.z render_screen_render_33
    // [130] phi (byte) current_ypos#13 = (byte~) current_ypos#98 [phi:main::@15->render_moving#4] -- register_copy 
    jsr render_moving
    // main::@16
    // [36] (byte~) next_piece_idx#77 ← (byte) play_spawn_current::piece_idx#2 -- vbuxx=vbuz1 
    ldx.z play_spawn_current.piece_idx
    // render_next()
    // [37] call render_next 
    // [109] phi from main::@16 to render_next [phi:main::@16->render_next]
    // [109] phi (byte) next_piece_idx#12 = (byte~) next_piece_idx#77 [phi:main::@16->render_next#0] -- register_copy 
    // [109] phi (byte) render_screen_render#15 = (byte) $20 [phi:main::@16->render_next#1] -- vbuaa=vbuc1 
    lda #$20
    jsr render_next
    // main::@17
    // [38] (byte*~) current_piece#102 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current._7
    lda PIECES,y
    sta.z current_piece
    lda PIECES+1,y
    sta.z current_piece+1
    // [39] (byte*~) current_piece_gfx#124 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    lda PIECES,y
    sta.z current_piece_gfx
    lda PIECES+1,y
    sta.z current_piece_gfx+1
    // [40] phi from main::@17 to main::@1 [phi:main::@17->main::@1]
    // [40] phi (byte) level_bcd#11 = (byte) 0 [phi:main::@17->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z level_bcd
    // [40] phi (byte) level#10 = (byte) 0 [phi:main::@17->main::@1#1] -- vbuz1=vbuc1 
    sta.z level
    // [40] phi (dword) score_bcd#18 = (dword) score_bcd#0 [phi:main::@17->main::@1#2] -- register_copy 
    // [40] phi (word) lines_bcd#19 = (byte) 0 [phi:main::@17->main::@1#3] -- vwuz1=vbuc1 
    sta.z lines_bcd
    sta.z lines_bcd+1
    // [40] phi (byte) current_movedown_counter#16 = (byte) 0 [phi:main::@17->main::@1#4] -- vbuz1=vbuc1 
    sta.z current_movedown_counter
    // [40] phi (byte) keyboard_events_size#19 = (byte) 0 [phi:main::@17->main::@1#5] -- vbuz1=vbuc1 
    sta.z keyboard_events_size
    // [40] phi (byte) render_screen_showing#13 = (byte) render_screen_showing#0 [phi:main::@17->main::@1#6] -- register_copy 
    // [40] phi (byte) next_piece_idx#10 = (byte) play_spawn_current::piece_idx#2 [phi:main::@17->main::@1#7] -- register_copy 
    // [40] phi (byte) game_over#10 = (byte) game_over#52 [phi:main::@17->main::@1#8] -- register_copy 
    // [40] phi (byte) current_ypos#11 = (byte) current_ypos#6 [phi:main::@17->main::@1#9] -- register_copy 
    // [40] phi (byte) current_xpos#14 = (byte) current_xpos#100 [phi:main::@17->main::@1#10] -- register_copy 
    // [40] phi (byte*) current_piece_gfx#13 = (byte*~) current_piece_gfx#124 [phi:main::@17->main::@1#11] -- register_copy 
    // [40] phi (byte) current_orientation#13 = (byte) 0 [phi:main::@17->main::@1#12] -- vbuz1=vbuc1 
    sta.z current_orientation
    // [40] phi (byte) current_piece_char#10 = (byte) current_piece_char#5 [phi:main::@17->main::@1#13] -- register_copy 
    // [40] phi (byte*) current_piece#10 = (byte*~) current_piece#102 [phi:main::@17->main::@1#14] -- register_copy 
    // [40] phi (byte) current_movedown_slow#14 = (byte) current_movedown_slow#1 [phi:main::@17->main::@1#15] -- register_copy 
    // [40] phi (byte) render_screen_render#18 = (byte) $20 [phi:main::@17->main::@1#16] -- vbuz1=vbuc1 
    lda #$20
    sta.z render_screen_render
    // [40] phi (byte) render_screen_show#16 = (byte) 0 [phi:main::@17->main::@1#17] -- vbuz1=vbuc1 
    lda #0
    sta.z render_screen_show
    // [40] phi from main::@25 main::@6 to main::@1 [phi:main::@25/main::@6->main::@1]
    // [40] phi (byte) level_bcd#11 = (byte) level_bcd#17 [phi:main::@25/main::@6->main::@1#0] -- register_copy 
    // [40] phi (byte) level#10 = (byte) level#17 [phi:main::@25/main::@6->main::@1#1] -- register_copy 
    // [40] phi (dword) score_bcd#18 = (dword) score_bcd#14 [phi:main::@25/main::@6->main::@1#2] -- register_copy 
    // [40] phi (word) lines_bcd#19 = (word) lines_bcd#15 [phi:main::@25/main::@6->main::@1#3] -- register_copy 
    // [40] phi (byte) current_movedown_counter#16 = (byte) current_movedown_counter#14 [phi:main::@25/main::@6->main::@1#4] -- register_copy 
    // [40] phi (byte) keyboard_events_size#19 = (byte) keyboard_events_size#16 [phi:main::@25/main::@6->main::@1#5] -- register_copy 
    // [40] phi (byte) render_screen_showing#13 = (byte) render_screen_showing#1 [phi:main::@25/main::@6->main::@1#6] -- register_copy 
    // [40] phi (byte) next_piece_idx#10 = (byte) next_piece_idx#16 [phi:main::@25/main::@6->main::@1#7] -- register_copy 
    // [40] phi (byte) game_over#10 = (byte) game_over#15 [phi:main::@25/main::@6->main::@1#8] -- register_copy 
    // [40] phi (byte) current_ypos#11 = (byte) current_ypos#19 [phi:main::@25/main::@6->main::@1#9] -- register_copy 
    // [40] phi (byte) current_xpos#14 = (byte) current_xpos#19 [phi:main::@25/main::@6->main::@1#10] -- register_copy 
    // [40] phi (byte*) current_piece_gfx#13 = (byte*) current_piece_gfx#18 [phi:main::@25/main::@6->main::@1#11] -- register_copy 
    // [40] phi (byte) current_orientation#13 = (byte) current_orientation#17 [phi:main::@25/main::@6->main::@1#12] -- register_copy 
    // [40] phi (byte) current_piece_char#10 = (byte) current_piece_char#16 [phi:main::@25/main::@6->main::@1#13] -- register_copy 
    // [40] phi (byte*) current_piece#10 = (byte*) current_piece#15 [phi:main::@25/main::@6->main::@1#14] -- register_copy 
    // [40] phi (byte) current_movedown_slow#14 = (byte) current_movedown_slow#21 [phi:main::@25/main::@6->main::@1#15] -- register_copy 
    // [40] phi (byte) render_screen_render#18 = (byte) render_screen_render#11 [phi:main::@25/main::@6->main::@1#16] -- register_copy 
    // [40] phi (byte) render_screen_show#16 = (byte) render_screen_show#13 [phi:main::@25/main::@6->main::@1#17] -- register_copy 
    // main::@1
  b1:
  // Wait for a frame to pass
    // main::@2
  b2:
    // while(*RASTER!=$ff)
    // [41] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b2
    // [42] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // render_show()
    // [43] call render_show 
    jsr render_show
    // [44] phi from main::@3 to main::@18 [phi:main::@3->main::@18]
    // main::@18
    // keyboard_event_scan()
    // [45] call keyboard_event_scan 
    // [392] phi from main::@18 to keyboard_event_scan [phi:main::@18->keyboard_event_scan]
    jsr keyboard_event_scan
    // [46] phi from main::@18 to main::@19 [phi:main::@18->main::@19]
    // main::@19
    // keyboard_event_get()
    // [47] call keyboard_event_get 
    jsr keyboard_event_get
    // [48] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
    // main::@20
    // key_event = keyboard_event_get()
    // [49] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3
    // if(game_over==0)
    // [50] if((byte) game_over#10==(byte) 0) goto main::@4 -- vbuz1_eq_0_then_la1 
    lda.z game_over
    cmp #0
    beq b4
    // main::@5
  b5:
    // (*BORDERCOL)++;
    // [51] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp b5
    // main::@4
  b4:
    // play_movement(key_event)
    // [52] (byte) play_movement::key_event#0 ← (byte) main::key_event#0 -- vbuz1=vbuxx 
    stx.z play_movement.key_event
    // [53] call play_movement 
    jsr play_movement
    // [54] (byte) play_movement::return#3 ← (byte) play_movement::return#2 -- vbuaa=vbuz1 
    lda.z play_movement.return
    // main::@21
    // render = play_movement(key_event)
    // [55] (byte) main::render#1 ← (byte) play_movement::return#3
    // main::@6
    // if(render!=0)
    // [56] if((byte) main::render#1==(byte) 0) goto main::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b1
    // main::@7
    // [57] (byte~) render_screen_render#64 ← (byte) render_screen_render#18 -- vbuxx=vbuz1 
    ldx.z render_screen_render
    // render_playfield()
    // [58] call render_playfield 
    // [152] phi from main::@7 to render_playfield [phi:main::@7->render_playfield]
    // [152] phi (byte) render_screen_render#22 = (byte~) render_screen_render#64 [phi:main::@7->render_playfield#0] -- register_copy 
    jsr render_playfield
    // main::@22
    // [59] (byte~) current_ypos#99 ← (byte) current_ypos#19 -- vbuxx=vbuz1 
    ldx.z current_ypos
    // [60] (byte~) render_screen_render#65 ← (byte) render_screen_render#18 -- vbuz1=vbuz2 
    lda.z render_screen_render
    sta.z render_screen_render_65
    // [61] (byte~) current_xpos#120 ← (byte) current_xpos#19 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z current_xpos_120
    // [62] (byte*~) current_piece_gfx#113 ← (byte*) current_piece_gfx#18 -- pbuz1=pbuz2 
    lda.z current_piece_gfx
    sta.z current_piece_gfx_113
    lda.z current_piece_gfx+1
    sta.z current_piece_gfx_113+1
    // [63] (byte~) current_piece_char#101 ← (byte) current_piece_char#16 -- vbuz1=vbuz2 
    lda.z current_piece_char
    sta.z current_piece_char_101
    // render_moving()
    // [64] call render_moving 
    // [130] phi from main::@22 to render_moving [phi:main::@22->render_moving]
    // [130] phi (byte) current_piece_char#68 = (byte~) current_piece_char#101 [phi:main::@22->render_moving#0] -- register_copy 
    // [130] phi (byte*) current_piece_gfx#64 = (byte*~) current_piece_gfx#113 [phi:main::@22->render_moving#1] -- register_copy 
    // [130] phi (byte) current_xpos#59 = (byte~) current_xpos#120 [phi:main::@22->render_moving#2] -- register_copy 
    // [130] phi (byte) render_screen_render#33 = (byte~) render_screen_render#65 [phi:main::@22->render_moving#3] -- register_copy 
    // [130] phi (byte) current_ypos#13 = (byte~) current_ypos#99 [phi:main::@22->render_moving#4] -- register_copy 
    jsr render_moving
    // main::@23
    // [65] (byte~) render_screen_render#66 ← (byte) render_screen_render#18 -- vbuaa=vbuz1 
    lda.z render_screen_render
    // [66] (byte~) next_piece_idx#78 ← (byte) next_piece_idx#16 -- vbuxx=vbuz1 
    ldx.z next_piece_idx
    // render_next()
    // [67] call render_next 
    // [109] phi from main::@23 to render_next [phi:main::@23->render_next]
    // [109] phi (byte) next_piece_idx#12 = (byte~) next_piece_idx#78 [phi:main::@23->render_next#0] -- register_copy 
    // [109] phi (byte) render_screen_render#15 = (byte~) render_screen_render#66 [phi:main::@23->render_next#1] -- register_copy 
    jsr render_next
    // [68] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
    // main::@24
    // render_score()
    // [69] call render_score 
    jsr render_score
    // [70] phi from main::@24 to main::@25 [phi:main::@24->main::@25]
    // main::@25
    // render_screen_swap()
    // [71] call render_screen_swap 
    jsr render_screen_swap
    jmp b1
}
  // render_screen_swap
// Swap rendering to the other screen (used for double buffering)
render_screen_swap: {
    // render_screen_render ^= $20
    // [72] (byte) render_screen_render#11 ← (byte) render_screen_render#18 ^ (byte) $20 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #$20
    eor.z render_screen_render
    sta.z render_screen_render
    // render_screen_show ^= $20
    // [73] (byte) render_screen_show#13 ← (byte) render_screen_show#16 ^ (byte) $20 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #$20
    eor.z render_screen_show
    sta.z render_screen_show
    // render_screen_swap::@return
    // }
    // [74] return 
    rts
}
  // render_score
// Show the current score
render_score: {
    .const score_offset = $28*5+$1c
    .const lines_offset = $28*1+$16
    .const level_offset = $28*$13+$1f
    .label score_bytes = score_bcd
    .label screen = $24
    // if(render_screen_render==0)
    // [75] if((byte) render_screen_render#18==(byte) 0) goto render_score::@1 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_render
    cmp #0
    beq b1
    // [77] phi from render_score to render_score::@2 [phi:render_score->render_score::@2]
    // [77] phi (byte*) render_score::screen#3 = (const byte*) PLAYFIELD_SCREEN_2#0 [phi:render_score->render_score::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2
    sta.z screen
    lda #>PLAYFIELD_SCREEN_2
    sta.z screen+1
    jmp b2
    // [76] phi from render_score to render_score::@1 [phi:render_score->render_score::@1]
    // render_score::@1
  b1:
    // [77] phi from render_score::@1 to render_score::@2 [phi:render_score::@1->render_score::@2]
    // [77] phi (byte*) render_score::screen#3 = (const byte*) PLAYFIELD_SCREEN_1#0 [phi:render_score::@1->render_score::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1
    sta.z screen
    lda #>PLAYFIELD_SCREEN_1
    sta.z screen+1
    // render_score::@2
  b2:
    // render_bcd( screen, score_offset, score_bytes[2], 0)
    // [78] (byte*) render_bcd::screen#0 ← (byte*) render_score::screen#3
    // [79] (byte) render_bcd::bcd#0 ← *((const byte*) render_score::score_bytes#0+(byte) 2) -- vbuxx=_deref_pbuc1 
    ldx score_bytes+2
    // [80] call render_bcd 
    // [97] phi from render_score::@2 to render_bcd [phi:render_score::@2->render_bcd]
    // [97] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#0 [phi:render_score::@2->render_bcd#0] -- register_copy 
    // [97] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@2->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [97] phi (word) render_bcd::offset#6 = (const word) render_score::score_offset#0 [phi:render_score::@2->render_bcd#2] -- vwuz1=vwuc1 
    lda #<score_offset
    sta.z render_bcd.offset
    lda #>score_offset
    sta.z render_bcd.offset+1
    // [97] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#0 [phi:render_score::@2->render_bcd#3] -- register_copy 
    jsr render_bcd
    // render_score::@3
    // render_bcd( screen, score_offset+2, score_bytes[1], 0)
    // [81] (byte*) render_bcd::screen#1 ← (byte*) render_score::screen#3
    // [82] (byte) render_bcd::bcd#1 ← *((const byte*) render_score::score_bytes#0+(byte) 1) -- vbuxx=_deref_pbuc1 
    ldx score_bytes+1
    // [83] call render_bcd 
    // [97] phi from render_score::@3 to render_bcd [phi:render_score::@3->render_bcd]
    // [97] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#1 [phi:render_score::@3->render_bcd#0] -- register_copy 
    // [97] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@3->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [97] phi (word) render_bcd::offset#6 = (const word) render_score::score_offset#0+(byte) 2 [phi:render_score::@3->render_bcd#2] -- vwuz1=vwuc1 
    lda #<score_offset+2
    sta.z render_bcd.offset
    lda #>score_offset+2
    sta.z render_bcd.offset+1
    // [97] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#1 [phi:render_score::@3->render_bcd#3] -- register_copy 
    jsr render_bcd
    // render_score::@4
    // render_bcd( screen, score_offset+4, score_bytes[0], 0)
    // [84] (byte*) render_bcd::screen#2 ← (byte*) render_score::screen#3
    // [85] (byte) render_bcd::bcd#2 ← *((const byte*) render_score::score_bytes#0) -- vbuxx=_deref_pbuc1 
    ldx.z score_bytes
    // [86] call render_bcd 
    // [97] phi from render_score::@4 to render_bcd [phi:render_score::@4->render_bcd]
    // [97] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#2 [phi:render_score::@4->render_bcd#0] -- register_copy 
    // [97] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@4->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [97] phi (word) render_bcd::offset#6 = (const word) render_score::score_offset#0+(byte) 4 [phi:render_score::@4->render_bcd#2] -- vwuz1=vwuc1 
    lda #<score_offset+4
    sta.z render_bcd.offset
    lda #>score_offset+4
    sta.z render_bcd.offset+1
    // [97] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#2 [phi:render_score::@4->render_bcd#3] -- register_copy 
    jsr render_bcd
    // render_score::@5
    // render_bcd( screen, lines_offset, >lines_bcd, 1)
    // [87] (byte) render_bcd::bcd#3 ← > (word) lines_bcd#15 -- vbuxx=_hi_vwuz1 
    lda.z lines_bcd+1
    tax
    // [88] (byte*) render_bcd::screen#3 ← (byte*) render_score::screen#3
    // [89] call render_bcd 
    // [97] phi from render_score::@5 to render_bcd [phi:render_score::@5->render_bcd]
    // [97] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#3 [phi:render_score::@5->render_bcd#0] -- register_copy 
    // [97] phi (byte) render_bcd::only_low#6 = (byte) 1 [phi:render_score::@5->render_bcd#1] -- vbuyy=vbuc1 
    ldy #1
    // [97] phi (word) render_bcd::offset#6 = (const word) render_score::lines_offset#0 [phi:render_score::@5->render_bcd#2] -- vwuz1=vwuc1 
    lda #<lines_offset
    sta.z render_bcd.offset
    lda #>lines_offset
    sta.z render_bcd.offset+1
    // [97] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#3 [phi:render_score::@5->render_bcd#3] -- register_copy 
    jsr render_bcd
    // render_score::@6
    // render_bcd( screen, lines_offset+1, <lines_bcd, 0)
    // [90] (byte) render_bcd::bcd#4 ← < (word) lines_bcd#15 -- vbuxx=_lo_vwuz1 
    lda.z lines_bcd
    tax
    // [91] (byte*) render_bcd::screen#4 ← (byte*) render_score::screen#3
    // [92] call render_bcd 
    // [97] phi from render_score::@6 to render_bcd [phi:render_score::@6->render_bcd]
    // [97] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#4 [phi:render_score::@6->render_bcd#0] -- register_copy 
    // [97] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@6->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [97] phi (word) render_bcd::offset#6 = (const word) render_score::lines_offset#0+(byte) 1 [phi:render_score::@6->render_bcd#2] -- vwuz1=vwuc1 
    lda #<lines_offset+1
    sta.z render_bcd.offset
    lda #>lines_offset+1
    sta.z render_bcd.offset+1
    // [97] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#4 [phi:render_score::@6->render_bcd#3] -- register_copy 
    jsr render_bcd
    // render_score::@7
    // render_bcd( screen, level_offset, level_bcd, 0)
    // [93] (byte*) render_bcd::screen#5 ← (byte*) render_score::screen#3
    // [94] (byte) render_bcd::bcd#5 ← (byte) level_bcd#17 -- vbuxx=vbuz1 
    ldx.z level_bcd
    // [95] call render_bcd 
    // [97] phi from render_score::@7 to render_bcd [phi:render_score::@7->render_bcd]
    // [97] phi (byte) render_bcd::bcd#6 = (byte) render_bcd::bcd#5 [phi:render_score::@7->render_bcd#0] -- register_copy 
    // [97] phi (byte) render_bcd::only_low#6 = (byte) 0 [phi:render_score::@7->render_bcd#1] -- vbuyy=vbuc1 
    ldy #0
    // [97] phi (word) render_bcd::offset#6 = (const word) render_score::level_offset#0 [phi:render_score::@7->render_bcd#2] -- vwuz1=vwuc1 
    lda #<level_offset
    sta.z render_bcd.offset
    lda #>level_offset
    sta.z render_bcd.offset+1
    // [97] phi (byte*) render_bcd::screen#6 = (byte*) render_bcd::screen#5 [phi:render_score::@7->render_bcd#3] -- register_copy 
    jsr render_bcd
    // render_score::@return
    // }
    // [96] return 
    rts
}
  // render_bcd
// Render BCD digits on a screen.
// - screen: pointer to the screen to render on
// - offset: offset on the screen
// - bcd: The BCD-value to render
// - only_low: if non-zero only renders the low digit
// render_bcd(byte* zeropage($24) screen, word zeropage($22) offset, byte register(X) bcd, byte register(Y) only_low)
render_bcd: {
    .const ZERO_CHAR = $35
    .label screen = $24
    .label screen_pos = $22
    .label offset = $22
    // screen_pos = screen+offset
    // [98] (byte*) render_bcd::screen_pos#0 ← (byte*) render_bcd::screen#6 + (word) render_bcd::offset#6 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z screen_pos
    clc
    adc.z screen
    sta.z screen_pos
    lda.z screen_pos+1
    adc.z screen+1
    sta.z screen_pos+1
    // if(only_low==0)
    // [99] if((byte) render_bcd::only_low#6!=(byte) 0) goto render_bcd::@1 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne b1
    // render_bcd::@2
    // bcd >> 4
    // [100] (byte~) render_bcd::$5 ← (byte) render_bcd::bcd#6 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // ZERO_CHAR + (bcd >> 4)
    // [101] (byte~) render_bcd::$6 ← (const byte) render_bcd::ZERO_CHAR#0 + (byte~) render_bcd::$5 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #ZERO_CHAR
    // *screen_pos++ = ZERO_CHAR + (bcd >> 4)
    // [102] *((byte*) render_bcd::screen_pos#0) ← (byte~) render_bcd::$6 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (screen_pos),y
    // *screen_pos++ = ZERO_CHAR + (bcd >> 4);
    // [103] (byte*) render_bcd::screen_pos#2 ← ++ (byte*) render_bcd::screen_pos#0 -- pbuz1=_inc_pbuz1 
    inc.z screen_pos
    bne !+
    inc.z screen_pos+1
  !:
    // [104] phi from render_bcd render_bcd::@2 to render_bcd::@1 [phi:render_bcd/render_bcd::@2->render_bcd::@1]
    // [104] phi (byte*) render_bcd::screen_pos#3 = (byte*) render_bcd::screen_pos#0 [phi:render_bcd/render_bcd::@2->render_bcd::@1#0] -- register_copy 
    // render_bcd::@1
  b1:
    // bcd & $0f
    // [105] (byte~) render_bcd::$3 ← (byte) render_bcd::bcd#6 & (byte) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // ZERO_CHAR + (bcd & $0f)
    // [106] (byte~) render_bcd::$4 ← (const byte) render_bcd::ZERO_CHAR#0 + (byte~) render_bcd::$3 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #ZERO_CHAR
    // *screen_pos++ = ZERO_CHAR + (bcd & $0f)
    // [107] *((byte*) render_bcd::screen_pos#3) ← (byte~) render_bcd::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (screen_pos),y
    // render_bcd::@return
    // }
    // [108] return 
    rts
}
  // render_next
// Render the next tetromino in the "next" area
render_next: {
    // Find the screen area
    .const next_area_offset = $28*$c+$18+4
    .label next_piece_char = $21
    .label next_piece_gfx = $24
    .label screen_next_area = $22
    .label l = $d
    // if(render_screen_render==0)
    // [110] if((byte) render_screen_render#15==(byte) 0) goto render_next::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b1
    // [112] phi from render_next to render_next::@2 [phi:render_next->render_next::@2]
    // [112] phi (byte*) render_next::screen_next_area#11 = (const byte*) PLAYFIELD_SCREEN_2#0+(const word) render_next::next_area_offset#0 [phi:render_next->render_next::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2+next_area_offset
    sta.z screen_next_area
    lda #>PLAYFIELD_SCREEN_2+next_area_offset
    sta.z screen_next_area+1
    jmp b2
    // [111] phi from render_next to render_next::@1 [phi:render_next->render_next::@1]
    // render_next::@1
  b1:
    // [112] phi from render_next::@1 to render_next::@2 [phi:render_next::@1->render_next::@2]
    // [112] phi (byte*) render_next::screen_next_area#11 = (const byte*) PLAYFIELD_SCREEN_1#0+(const word) render_next::next_area_offset#0 [phi:render_next::@1->render_next::@2#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1+next_area_offset
    sta.z screen_next_area
    lda #>PLAYFIELD_SCREEN_1+next_area_offset
    sta.z screen_next_area+1
    // render_next::@2
  b2:
    // next_piece_gfx = PIECES[next_piece_idx]
    // [113] (byte~) render_next::$6 ← (byte) next_piece_idx#12 << (byte) 1 -- vbuyy=vbuxx_rol_1 
    txa
    asl
    tay
    // next_piece_char = PIECES_NEXT_CHARS[next_piece_idx]
    // [114] (byte) render_next::next_piece_char#0 ← *((const byte[]) PIECES_NEXT_CHARS#0 + (byte) next_piece_idx#12) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_NEXT_CHARS,x
    sta.z next_piece_char
    // [115] (byte*~) render_next::next_piece_gfx#9 ← (byte*)*((const word[]) PIECES#0 + (byte~) render_next::$6) -- pbuz1=pptc1_derefidx_vbuyy 
    lda PIECES,y
    sta.z next_piece_gfx
    lda PIECES+1,y
    sta.z next_piece_gfx+1
    // [116] phi from render_next::@2 to render_next::@3 [phi:render_next::@2->render_next::@3]
    // [116] phi (byte) render_next::l#7 = (byte) 0 [phi:render_next::@2->render_next::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [116] phi (byte*) render_next::screen_next_area#10 = (byte*) render_next::screen_next_area#11 [phi:render_next::@2->render_next::@3#1] -- register_copy 
    // [116] phi (byte*) render_next::next_piece_gfx#3 = (byte*~) render_next::next_piece_gfx#9 [phi:render_next::@2->render_next::@3#2] -- register_copy 
    // [116] phi from render_next::@8 to render_next::@3 [phi:render_next::@8->render_next::@3]
    // [116] phi (byte) render_next::l#7 = (byte) render_next::l#1 [phi:render_next::@8->render_next::@3#0] -- register_copy 
    // [116] phi (byte*) render_next::screen_next_area#10 = (byte*) render_next::screen_next_area#4 [phi:render_next::@8->render_next::@3#1] -- register_copy 
    // [116] phi (byte*) render_next::next_piece_gfx#3 = (byte*) render_next::next_piece_gfx#1 [phi:render_next::@8->render_next::@3#2] -- register_copy 
    // render_next::@3
  b3:
    // [117] phi from render_next::@3 to render_next::@4 [phi:render_next::@3->render_next::@4]
    // [117] phi (byte) render_next::c#2 = (byte) 0 [phi:render_next::@3->render_next::@4#0] -- vbuxx=vbuc1 
    ldx #0
    // [117] phi (byte*) render_next::screen_next_area#5 = (byte*) render_next::screen_next_area#10 [phi:render_next::@3->render_next::@4#1] -- register_copy 
    // [117] phi (byte*) render_next::next_piece_gfx#2 = (byte*) render_next::next_piece_gfx#3 [phi:render_next::@3->render_next::@4#2] -- register_copy 
    // [117] phi from render_next::@6 to render_next::@4 [phi:render_next::@6->render_next::@4]
    // [117] phi (byte) render_next::c#2 = (byte) render_next::c#1 [phi:render_next::@6->render_next::@4#0] -- register_copy 
    // [117] phi (byte*) render_next::screen_next_area#5 = (byte*) render_next::screen_next_area#3 [phi:render_next::@6->render_next::@4#1] -- register_copy 
    // [117] phi (byte*) render_next::next_piece_gfx#2 = (byte*) render_next::next_piece_gfx#1 [phi:render_next::@6->render_next::@4#2] -- register_copy 
    // render_next::@4
  b4:
    // cell = *next_piece_gfx++
    // [118] (byte) render_next::cell#0 ← *((byte*) render_next::next_piece_gfx#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (next_piece_gfx),y
    // [119] (byte*) render_next::next_piece_gfx#1 ← ++ (byte*) render_next::next_piece_gfx#2 -- pbuz1=_inc_pbuz1 
    inc.z next_piece_gfx
    bne !+
    inc.z next_piece_gfx+1
  !:
    // if(cell!=0)
    // [120] if((byte) render_next::cell#0!=(byte) 0) goto render_next::@5 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b5
    // render_next::@7
    // *screen_next_area = 0
    // [121] *((byte*) render_next::screen_next_area#5) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (screen_next_area),y
    // render_next::@6
  b6:
    // screen_next_area++;
    // [122] (byte*) render_next::screen_next_area#3 ← ++ (byte*) render_next::screen_next_area#5 -- pbuz1=_inc_pbuz1 
    inc.z screen_next_area
    bne !+
    inc.z screen_next_area+1
  !:
    // for(byte c:0..3)
    // [123] (byte) render_next::c#1 ← ++ (byte) render_next::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [124] if((byte) render_next::c#1!=(byte) 4) goto render_next::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b4
    // render_next::@8
    // screen_next_area += 36
    // [125] (byte*) render_next::screen_next_area#4 ← (byte*) render_next::screen_next_area#3 + (byte) $24 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$24
    clc
    adc.z screen_next_area
    sta.z screen_next_area
    bcc !+
    inc.z screen_next_area+1
  !:
    // for(byte l:0..3)
    // [126] (byte) render_next::l#1 ← ++ (byte) render_next::l#7 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [127] if((byte) render_next::l#1!=(byte) 4) goto render_next::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne b3
    // render_next::@return
    // }
    // [128] return 
    rts
    // render_next::@5
  b5:
    // *screen_next_area = next_piece_char
    // [129] *((byte*) render_next::screen_next_area#5) ← (byte) render_next::next_piece_char#0 -- _deref_pbuz1=vbuz2 
    lda.z next_piece_char
    ldy #0
    sta (screen_next_area),y
    jmp b6
}
  // render_moving
// Render the current moving piece at position (current_xpos, current_ypos)
// Ignores cases where parts of the tetromino is outside the playfield (sides/bottom) since the movement collision routine prevents this.
render_moving: {
    .label ypos = $10
    .label screen_line = $22
    .label xpos = $21
    .label i = $20
    .label l = $12
    // ypos = current_ypos
    // [131] (byte) render_moving::ypos#0 ← (byte) current_ypos#13 -- vbuz1=vbuxx 
    stx.z ypos
    // [132] phi from render_moving to render_moving::@1 [phi:render_moving->render_moving::@1]
    // [132] phi (byte) render_moving::l#4 = (byte) 0 [phi:render_moving->render_moving::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [132] phi (byte) render_moving::i#3 = (byte) 0 [phi:render_moving->render_moving::@1#1] -- vbuz1=vbuc1 
    sta.z i
    // [132] phi (byte) render_moving::ypos#2 = (byte) render_moving::ypos#0 [phi:render_moving->render_moving::@1#2] -- register_copy 
    // [132] phi from render_moving::@3 to render_moving::@1 [phi:render_moving::@3->render_moving::@1]
    // [132] phi (byte) render_moving::l#4 = (byte) render_moving::l#1 [phi:render_moving::@3->render_moving::@1#0] -- register_copy 
    // [132] phi (byte) render_moving::i#3 = (byte) render_moving::i#8 [phi:render_moving::@3->render_moving::@1#1] -- register_copy 
    // [132] phi (byte) render_moving::ypos#2 = (byte) render_moving::ypos#1 [phi:render_moving::@3->render_moving::@1#2] -- register_copy 
    // render_moving::@1
  b1:
    // if(ypos>1)
    // [133] if((byte) render_moving::ypos#2>=(byte) 1+(byte) 1) goto render_moving::@2 -- vbuz1_ge_vbuc1_then_la1 
    lda.z ypos
    cmp #1+1
    bcs b2
    // render_moving::@7
    // i += 4
    // [134] (byte) render_moving::i#1 ← (byte) render_moving::i#3 + (byte) 4 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z i
    axs #-[4]
    stx.z i
    // [135] phi from render_moving::@5 render_moving::@7 to render_moving::@3 [phi:render_moving::@5/render_moving::@7->render_moving::@3]
    // [135] phi (byte) render_moving::i#8 = (byte) render_moving::i#2 [phi:render_moving::@5/render_moving::@7->render_moving::@3#0] -- register_copy 
    // render_moving::@3
  b3:
    // ypos++;
    // [136] (byte) render_moving::ypos#1 ← ++ (byte) render_moving::ypos#2 -- vbuz1=_inc_vbuz1 
    inc.z ypos
    // for(byte l:0..3)
    // [137] (byte) render_moving::l#1 ← ++ (byte) render_moving::l#4 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [138] if((byte) render_moving::l#1!=(byte) 4) goto render_moving::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne b1
    // render_moving::@return
    // }
    // [139] return 
    rts
    // render_moving::@2
  b2:
    // render_screen_render+ypos
    // [140] (byte~) render_moving::$1 ← (byte) render_screen_render#33 + (byte) render_moving::ypos#2 -- vbuaa=vbuz1_plus_vbuz2 
    lda.z render_screen_render_33
    clc
    adc.z ypos
    // screen_line = screen_lines_1[render_screen_render+ypos]
    // [141] (byte~) render_moving::$6 ← (byte~) render_moving::$1 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [142] (byte*) render_moving::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_moving::$6) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda screen_lines_1,y
    sta.z screen_line
    lda screen_lines_1+1,y
    sta.z screen_line+1
    // xpos = current_xpos
    // [143] (byte) render_moving::xpos#0 ← (byte) current_xpos#59 -- vbuz1=vbuz2 
    lda.z current_xpos_59
    sta.z xpos
    // [144] phi from render_moving::@2 to render_moving::@4 [phi:render_moving::@2->render_moving::@4]
    // [144] phi (byte) render_moving::c#2 = (byte) 0 [phi:render_moving::@2->render_moving::@4#0] -- vbuxx=vbuc1 
    ldx #0
    // [144] phi (byte) render_moving::xpos#2 = (byte) render_moving::xpos#0 [phi:render_moving::@2->render_moving::@4#1] -- register_copy 
    // [144] phi (byte) render_moving::i#4 = (byte) render_moving::i#3 [phi:render_moving::@2->render_moving::@4#2] -- register_copy 
    // [144] phi from render_moving::@5 to render_moving::@4 [phi:render_moving::@5->render_moving::@4]
    // [144] phi (byte) render_moving::c#2 = (byte) render_moving::c#1 [phi:render_moving::@5->render_moving::@4#0] -- register_copy 
    // [144] phi (byte) render_moving::xpos#2 = (byte) render_moving::xpos#1 [phi:render_moving::@5->render_moving::@4#1] -- register_copy 
    // [144] phi (byte) render_moving::i#4 = (byte) render_moving::i#2 [phi:render_moving::@5->render_moving::@4#2] -- register_copy 
    // render_moving::@4
  b4:
    // current_cell = current_piece_gfx[i++]
    // [145] (byte) render_moving::current_cell#0 ← *((byte*) current_piece_gfx#64 + (byte) render_moving::i#4) -- vbuaa=pbuz1_derefidx_vbuz2 
    ldy.z i
    lda (current_piece_gfx_64),y
    // [146] (byte) render_moving::i#2 ← ++ (byte) render_moving::i#4 -- vbuz1=_inc_vbuz1 
    inc.z i
    // if(current_cell!=0)
    // [147] if((byte) render_moving::current_cell#0==(byte) 0) goto render_moving::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5
    // render_moving::@6
    // screen_line[xpos] = current_piece_char
    // [148] *((byte*) render_moving::screen_line#0 + (byte) render_moving::xpos#2) ← (byte) current_piece_char#68 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z current_piece_char_68
    ldy.z xpos
    sta (screen_line),y
    // render_moving::@5
  b5:
    // xpos++;
    // [149] (byte) render_moving::xpos#1 ← ++ (byte) render_moving::xpos#2 -- vbuz1=_inc_vbuz1 
    inc.z xpos
    // for(byte c:0..3)
    // [150] (byte) render_moving::c#1 ← ++ (byte) render_moving::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [151] if((byte) render_moving::c#1!=(byte) 4) goto render_moving::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b4
    jmp b3
}
  // render_playfield
// Render the static playfield on the screen (all pieces already locked into place)
render_playfield: {
    .label screen_line = $24
    .label i = $f
    .label c = $10
    .label l = $e
    // [153] phi from render_playfield to render_playfield::@1 [phi:render_playfield->render_playfield::@1]
    // [153] phi (byte) render_playfield::i#3 = (const byte) PLAYFIELD_COLS#0*(byte) 2 [phi:render_playfield->render_playfield::@1#0] -- vbuz1=vbuc1 
    lda #PLAYFIELD_COLS*2
    sta.z i
    // [153] phi (byte) render_playfield::l#2 = (byte) 2 [phi:render_playfield->render_playfield::@1#1] -- vbuz1=vbuc1 
    lda #2
    sta.z l
    // [153] phi from render_playfield::@3 to render_playfield::@1 [phi:render_playfield::@3->render_playfield::@1]
    // [153] phi (byte) render_playfield::i#3 = (byte) render_playfield::i#1 [phi:render_playfield::@3->render_playfield::@1#0] -- register_copy 
    // [153] phi (byte) render_playfield::l#2 = (byte) render_playfield::l#1 [phi:render_playfield::@3->render_playfield::@1#1] -- register_copy 
    // render_playfield::@1
  b1:
    // render_screen_render+l
    // [154] (byte~) render_playfield::$2 ← (byte) render_screen_render#22 + (byte) render_playfield::l#2 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z l
    // screen_line = screen_lines_1[render_screen_render+l]
    // [155] (byte~) render_playfield::$6 ← (byte~) render_playfield::$2 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [156] (byte*) render_playfield::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_playfield::$6) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda screen_lines_1,y
    sta.z screen_line
    lda screen_lines_1+1,y
    sta.z screen_line+1
    // [157] phi from render_playfield::@1 to render_playfield::@2 [phi:render_playfield::@1->render_playfield::@2]
    // [157] phi (byte) render_playfield::c#2 = (byte) 0 [phi:render_playfield::@1->render_playfield::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [157] phi (byte*) render_playfield::screen_line#2 = (byte*) render_playfield::screen_line#0 [phi:render_playfield::@1->render_playfield::@2#1] -- register_copy 
    // [157] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#3 [phi:render_playfield::@1->render_playfield::@2#2] -- register_copy 
    // [157] phi from render_playfield::@2 to render_playfield::@2 [phi:render_playfield::@2->render_playfield::@2]
    // [157] phi (byte) render_playfield::c#2 = (byte) render_playfield::c#1 [phi:render_playfield::@2->render_playfield::@2#0] -- register_copy 
    // [157] phi (byte*) render_playfield::screen_line#2 = (byte*) render_playfield::screen_line#1 [phi:render_playfield::@2->render_playfield::@2#1] -- register_copy 
    // [157] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#1 [phi:render_playfield::@2->render_playfield::@2#2] -- register_copy 
    // render_playfield::@2
  b2:
    // *(screen_line++) = playfield[i++]
    // [158] *((byte*) render_playfield::screen_line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda playfield,y
    ldy #0
    sta (screen_line),y
    // *(screen_line++) = playfield[i++];
    // [159] (byte*) render_playfield::screen_line#1 ← ++ (byte*) render_playfield::screen_line#2 -- pbuz1=_inc_pbuz1 
    inc.z screen_line
    bne !+
    inc.z screen_line+1
  !:
    // [160] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // for(byte c:0..PLAYFIELD_COLS-1)
    // [161] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [162] if((byte) render_playfield::c#1!=(const byte) PLAYFIELD_COLS#0-(byte) 1+(byte) 1) goto render_playfield::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_COLS-1+1
    cmp.z c
    bne b2
    // render_playfield::@3
    // for(byte l:2..PLAYFIELD_LINES-1)
    // [163] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [164] if((byte) render_playfield::l#1!=(const byte) PLAYFIELD_LINES#0-(byte) 1+(byte) 1) goto render_playfield::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_LINES-1+1
    cmp.z l
    bne b1
    // render_playfield::@return
    // }
    // [165] return 
    rts
}
  // play_movement
// Perform any movement of the current piece
// key_event is the next keyboard_event() og $ff if no keyboard event is pending
// Returns a byte signaling whether rendering is needed. (0 no render, >0 render needed)
// play_movement(byte zeropage($20) key_event)
play_movement: {
    .label render = $12
    .label return = $12
    .label key_event = $20
    // play_move_down(key_event)
    // [166] (byte) play_move_down::key_event#0 ← (byte) play_movement::key_event#0 -- vbuaa=vbuz1 
    lda.z key_event
    // [167] call play_move_down 
    jsr play_move_down
    // [168] (byte) play_move_down::return#0 ← (byte) play_move_down::return#3 -- vbuaa=vbuxx 
    txa
    // play_movement::@2
    // render += play_move_down(key_event)
    // [169] (byte) play_movement::render#1 ← (byte) play_move_down::return#0 -- vbuz1=vbuaa 
    sta.z render
    // if(game_over!=0)
    // [170] if((byte) game_over#15==(byte) 0) goto play_movement::@1 -- vbuz1_eq_0_then_la1 
    lda.z game_over
    cmp #0
    beq b1
    // [171] phi from play_movement::@2 play_movement::@4 to play_movement::@return [phi:play_movement::@2/play_movement::@4->play_movement::@return]
    // [171] phi (byte) current_xpos#19 = (byte) current_xpos#22 [phi:play_movement::@2/play_movement::@4->play_movement::@return#0] -- register_copy 
    // [171] phi (byte*) current_piece_gfx#18 = (byte*) current_piece_gfx#20 [phi:play_movement::@2/play_movement::@4->play_movement::@return#1] -- register_copy 
    // [171] phi (byte) current_orientation#17 = (byte) current_orientation#20 [phi:play_movement::@2/play_movement::@4->play_movement::@return#2] -- register_copy 
    // [171] phi (byte) play_movement::return#2 = (byte) play_movement::render#1 [phi:play_movement::@2/play_movement::@4->play_movement::@return#3] -- register_copy 
    // play_movement::@return
    // }
    // [172] return 
    rts
    // play_movement::@1
  b1:
    // play_move_leftright(key_event)
    // [173] (byte) play_move_leftright::key_event#0 ← (byte) play_movement::key_event#0 -- vbuaa=vbuz1 
    lda.z key_event
    // [174] call play_move_leftright 
    jsr play_move_leftright
    // [175] (byte) play_move_leftright::return#0 ← (byte) play_move_leftright::return#2
    // play_movement::@3
    // [176] (byte~) play_movement::$3 ← (byte) play_move_leftright::return#0
    // render += play_move_leftright(key_event)
    // [177] (byte) play_movement::render#2 ← (byte) play_movement::render#1 + (byte~) play_movement::$3 -- vbuz1=vbuz1_plus_vbuaa 
    clc
    adc.z render
    sta.z render
    // play_move_rotate(key_event)
    // [178] (byte) play_move_rotate::key_event#0 ← (byte) play_movement::key_event#0 -- vbuaa=vbuz1 
    lda.z key_event
    // [179] call play_move_rotate 
    jsr play_move_rotate
    // [180] (byte) play_move_rotate::return#0 ← (byte) play_move_rotate::return#2
    // play_movement::@4
    // [181] (byte~) play_movement::$4 ← (byte) play_move_rotate::return#0
    // render += play_move_rotate(key_event)
    // [182] (byte) play_movement::return#0 ← (byte) play_movement::render#2 + (byte~) play_movement::$4 -- vbuz1=vbuz1_plus_vbuaa 
    clc
    adc.z return
    sta.z return
    rts
}
  // play_move_rotate
// Rotate the current piece  based on key-presses
// Return non-zero if a render is needed
// play_move_rotate(byte register(A) key_event)
play_move_rotate: {
    .label orientation = $20
    // if(key_event==KEY_Z)
    // [183] if((byte) play_move_rotate::key_event#0==(const byte) KEY_Z#0) goto play_move_rotate::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_Z
    beq b1
    // play_move_rotate::@4
    // if(key_event==KEY_X)
    // [184] if((byte) play_move_rotate::key_event#0==(const byte) KEY_X#0) goto play_move_rotate::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_X
    beq b2
    // [185] phi from play_move_rotate::@4 play_move_rotate::@6 to play_move_rotate::@return [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return]
  b4:
    // [185] phi (byte*) current_piece_gfx#21 = (byte*) current_piece_gfx#20 [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return#0] -- register_copy 
    // [185] phi (byte) current_orientation#25 = (byte) current_orientation#20 [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return#1] -- register_copy 
    // [185] phi (byte) play_move_rotate::return#2 = (byte) 0 [phi:play_move_rotate::@4/play_move_rotate::@6->play_move_rotate::@return#2] -- vbuaa=vbuc1 
    lda #0
    // play_move_rotate::@return
    // }
    // [186] return 
    rts
    // play_move_rotate::@2
  b2:
    // current_orientation+$10
    // [187] (byte~) play_move_rotate::$5 ← (byte) current_orientation#20 + (byte) $10 -- vbuxx=vbuz1_plus_vbuc1 
    lax.z current_orientation
    axs #-[$10]
    // orientation = (current_orientation+$10)&$3f
    // [188] (byte) play_move_rotate::orientation#2 ← (byte~) play_move_rotate::$5 & (byte) $3f -- vbuz1=vbuxx_band_vbuc1 
    lda #$3f
    sax.z orientation
    // [189] phi from play_move_rotate::@1 play_move_rotate::@2 to play_move_rotate::@3 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@3]
    // [189] phi (byte) play_move_rotate::orientation#3 = (byte) play_move_rotate::orientation#1 [phi:play_move_rotate::@1/play_move_rotate::@2->play_move_rotate::@3#0] -- register_copy 
    // play_move_rotate::@3
  b3:
    // play_collision(current_xpos, current_ypos, orientation)
    // [190] (byte) play_collision::xpos#3 ← (byte) current_xpos#26 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z play_collision.xpos
    // [191] (byte) play_collision::ypos#3 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [192] (byte) play_collision::orientation#3 ← (byte) play_move_rotate::orientation#3 -- vbuxx=vbuz1 
    ldx.z orientation
    // [193] (byte*~) current_piece#99 ← (byte*) current_piece#15 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_99
    lda.z current_piece+1
    sta.z current_piece_99+1
    // play_collision(current_xpos, current_ypos, orientation)
    // [194] call play_collision 
    // [202] phi from play_move_rotate::@3 to play_collision [phi:play_move_rotate::@3->play_collision]
    // [202] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#3 [phi:play_move_rotate::@3->play_collision#0] -- register_copy 
    // [202] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#3 [phi:play_move_rotate::@3->play_collision#1] -- register_copy 
    // [202] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#3 [phi:play_move_rotate::@3->play_collision#2] -- register_copy 
    // [202] phi (byte*) current_piece#17 = (byte*~) current_piece#99 [phi:play_move_rotate::@3->play_collision#3] -- register_copy 
    jsr play_collision
    // play_collision(current_xpos, current_ypos, orientation)
    // [195] (byte) play_collision::return#14 ← (byte) play_collision::return#15
    // play_move_rotate::@6
    // [196] (byte~) play_move_rotate::$2 ← (byte) play_collision::return#14
    // if(play_collision(current_xpos, current_ypos, orientation) == COLLISION_NONE)
    // [197] if((byte~) play_move_rotate::$2!=(const byte) COLLISION_NONE#0) goto play_move_rotate::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne b4
    // play_move_rotate::@5
    // current_orientation = orientation
    // [198] (byte) current_orientation#7 ← (byte) play_move_rotate::orientation#3 -- vbuz1=vbuz2 
    lda.z orientation
    sta.z current_orientation
    // current_piece_gfx = current_piece + current_orientation
    // [199] (byte*) current_piece_gfx#7 ← (byte*) current_piece#15 + (byte) current_orientation#7 -- pbuz1=pbuz2_plus_vbuz3 
    clc
    adc.z current_piece
    sta.z current_piece_gfx
    lda #0
    adc.z current_piece+1
    sta.z current_piece_gfx+1
    // [185] phi from play_move_rotate::@5 to play_move_rotate::@return [phi:play_move_rotate::@5->play_move_rotate::@return]
    // [185] phi (byte*) current_piece_gfx#21 = (byte*) current_piece_gfx#7 [phi:play_move_rotate::@5->play_move_rotate::@return#0] -- register_copy 
    // [185] phi (byte) current_orientation#25 = (byte) current_orientation#7 [phi:play_move_rotate::@5->play_move_rotate::@return#1] -- register_copy 
    // [185] phi (byte) play_move_rotate::return#2 = (byte) 1 [phi:play_move_rotate::@5->play_move_rotate::@return#2] -- vbuaa=vbuc1 
    lda #1
    rts
    // play_move_rotate::@1
  b1:
    // current_orientation-$10
    // [200] (byte~) play_move_rotate::$7 ← (byte) current_orientation#20 - (byte) $10 -- vbuxx=vbuz1_minus_vbuc1 
    lax.z current_orientation
    axs #$10
    // orientation = (current_orientation-$10)&$3f
    // [201] (byte) play_move_rotate::orientation#1 ← (byte~) play_move_rotate::$7 & (byte) $3f -- vbuz1=vbuxx_band_vbuc1 
    lda #$3f
    sax.z orientation
    jmp b3
}
  // play_collision
// Test if there is a collision between the current piece moved to (x, y) and anything on the playfield or the playfield boundaries
// Returns information about the type of the collision detected
// play_collision(byte zeropage($21) xpos, byte zeropage($d) ypos, byte register(X) orientation)
play_collision: {
    .label xpos = $21
    .label ypos = $d
    .label piece_gfx = $22
    .label yp = $d
    .label playfield_line = $24
    .label i = $2f
    .label xp = $10
    .label l = $e
    .label i_2 = $f
    .label i_3 = $f
    .label i_10 = $f
    .label i_12 = $f
    // piece_gfx = current_piece + orientation
    // [203] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#17 + (byte) play_collision::orientation#5 -- pbuz1=pbuz1_plus_vbuxx 
    txa
    clc
    adc.z piece_gfx
    sta.z piece_gfx
    bcc !+
    inc.z piece_gfx+1
  !:
    // [204] phi from play_collision to play_collision::@1 [phi:play_collision->play_collision::@1]
    // [204] phi (byte) play_collision::l#6 = (byte) 0 [phi:play_collision->play_collision::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [204] phi (byte) play_collision::i#3 = (byte) 0 [phi:play_collision->play_collision::@1#1] -- vbuz1=vbuc1 
    sta.z i_3
    // [204] phi (byte) play_collision::yp#2 = (byte) play_collision::yp#0 [phi:play_collision->play_collision::@1#2] -- register_copy 
    // play_collision::@1
  b1:
    // playfield_line = playfield_lines[yp]
    // [205] (byte~) play_collision::$14 ← (byte) play_collision::yp#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z yp
    asl
    // [206] (byte*) play_collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_collision::$14) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda playfield_lines,y
    sta.z playfield_line
    lda playfield_lines+1,y
    sta.z playfield_line+1
    // [207] (byte~) play_collision::xp#8 ← (byte) play_collision::xpos#6 -- vbuz1=vbuz2 
    lda.z xpos
    sta.z xp
    // [208] phi from play_collision::@1 to play_collision::@2 [phi:play_collision::@1->play_collision::@2]
    // [208] phi (byte) play_collision::c#2 = (byte) 0 [phi:play_collision::@1->play_collision::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [208] phi (byte) play_collision::xp#2 = (byte~) play_collision::xp#8 [phi:play_collision::@1->play_collision::@2#1] -- register_copy 
    // [208] phi (byte) play_collision::i#2 = (byte) play_collision::i#3 [phi:play_collision::@1->play_collision::@2#2] -- register_copy 
    // play_collision::@2
  b2:
    // if(piece_gfx[i++]!=0)
    // [209] (byte) play_collision::i#1 ← ++ (byte) play_collision::i#2 -- vbuz1=_inc_vbuz2 
    ldy.z i_2
    iny
    sty.z i
    // [210] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte) 0) goto play_collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy.z i_2
    lda (piece_gfx),y
    cmp #0
    beq b3
    // play_collision::@7
    // if(yp>=PLAYFIELD_LINES)
    // [211] if((byte) play_collision::yp#2<(const byte) PLAYFIELD_LINES#0) goto play_collision::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z yp
    cmp #PLAYFIELD_LINES
    bcc b4
    // [216] phi from play_collision::@7 to play_collision::@return [phi:play_collision::@7->play_collision::@return]
    // [216] phi (byte) play_collision::return#15 = (const byte) COLLISION_BOTTOM#0 [phi:play_collision::@7->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_BOTTOM
    rts
    // play_collision::@4
  b4:
    // xp&$80
    // [212] (byte~) play_collision::$5 ← (byte) play_collision::xp#2 & (byte) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z xp
    // if((xp&$80)!=0)
    // [213] if((byte~) play_collision::$5==(byte) 0) goto play_collision::@5 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5
    // [216] phi from play_collision::@4 to play_collision::@return [phi:play_collision::@4->play_collision::@return]
    // [216] phi (byte) play_collision::return#15 = (const byte) COLLISION_LEFT#0 [phi:play_collision::@4->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_LEFT
    rts
    // play_collision::@5
  b5:
    // if(xp>=PLAYFIELD_COLS)
    // [214] if((byte) play_collision::xp#2<(const byte) PLAYFIELD_COLS#0) goto play_collision::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z xp
    cmp #PLAYFIELD_COLS
    bcc b6
    // [216] phi from play_collision::@5 to play_collision::@return [phi:play_collision::@5->play_collision::@return]
    // [216] phi (byte) play_collision::return#15 = (const byte) COLLISION_RIGHT#0 [phi:play_collision::@5->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_RIGHT
    rts
    // play_collision::@6
  b6:
    // if(playfield_line[xp]!=0)
    // [215] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::xp#2)==(byte) 0) goto play_collision::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy.z xp
    lda (playfield_line),y
    cmp #0
    beq b3
    // [216] phi from play_collision::@6 to play_collision::@return [phi:play_collision::@6->play_collision::@return]
    // [216] phi (byte) play_collision::return#15 = (const byte) COLLISION_PLAYFIELD#0 [phi:play_collision::@6->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_PLAYFIELD
    // play_collision::@return
    // }
    // [217] return 
    rts
    // play_collision::@3
  b3:
    // xp++;
    // [218] (byte) play_collision::xp#1 ← ++ (byte) play_collision::xp#2 -- vbuz1=_inc_vbuz1 
    inc.z xp
    // for(byte c:0..3)
    // [219] (byte) play_collision::c#1 ← ++ (byte) play_collision::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [220] if((byte) play_collision::c#1!=(byte) 4) goto play_collision::@10 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b10
    // play_collision::@8
    // yp++;
    // [221] (byte) play_collision::yp#1 ← ++ (byte) play_collision::yp#2 -- vbuz1=_inc_vbuz1 
    inc.z yp
    // for(byte l:0..3)
    // [222] (byte) play_collision::l#1 ← ++ (byte) play_collision::l#6 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [223] if((byte) play_collision::l#1!=(byte) 4) goto play_collision::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne b9
    // [216] phi from play_collision::@8 to play_collision::@return [phi:play_collision::@8->play_collision::@return]
    // [216] phi (byte) play_collision::return#15 = (const byte) COLLISION_NONE#0 [phi:play_collision::@8->play_collision::@return#0] -- vbuaa=vbuc1 
    lda #COLLISION_NONE
    rts
    // play_collision::@9
  b9:
    // [224] (byte~) play_collision::i#10 ← (byte) play_collision::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_10
    // [204] phi from play_collision::@9 to play_collision::@1 [phi:play_collision::@9->play_collision::@1]
    // [204] phi (byte) play_collision::l#6 = (byte) play_collision::l#1 [phi:play_collision::@9->play_collision::@1#0] -- register_copy 
    // [204] phi (byte) play_collision::i#3 = (byte~) play_collision::i#10 [phi:play_collision::@9->play_collision::@1#1] -- register_copy 
    // [204] phi (byte) play_collision::yp#2 = (byte) play_collision::yp#1 [phi:play_collision::@9->play_collision::@1#2] -- register_copy 
    jmp b1
    // play_collision::@10
  b10:
    // [225] (byte~) play_collision::i#12 ← (byte) play_collision::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_12
    // [208] phi from play_collision::@10 to play_collision::@2 [phi:play_collision::@10->play_collision::@2]
    // [208] phi (byte) play_collision::c#2 = (byte) play_collision::c#1 [phi:play_collision::@10->play_collision::@2#0] -- register_copy 
    // [208] phi (byte) play_collision::xp#2 = (byte) play_collision::xp#1 [phi:play_collision::@10->play_collision::@2#1] -- register_copy 
    // [208] phi (byte) play_collision::i#2 = (byte~) play_collision::i#12 [phi:play_collision::@10->play_collision::@2#2] -- register_copy 
    jmp b2
}
  // play_move_leftright
// Move left/right or rotate the current piece
// Return non-zero if a render is needed
// play_move_leftright(byte register(A) key_event)
play_move_leftright: {
    // if(key_event==KEY_COMMA)
    // [226] if((byte) play_move_leftright::key_event#0==(const byte) KEY_COMMA#0) goto play_move_leftright::@1 -- vbuaa_eq_vbuc1_then_la1 
    // Handle keyboard events
    cmp #KEY_COMMA
    beq b1
    // play_move_leftright::@2
    // if(key_event==KEY_DOT)
    // [227] if((byte) play_move_leftright::key_event#0!=(const byte) KEY_DOT#0) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_DOT
    bne b3
    // play_move_leftright::@3
    // play_collision(current_xpos+1,current_ypos,current_orientation)
    // [228] (byte) play_collision::xpos#2 ← (byte) current_xpos#22 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z current_xpos
    iny
    sty.z play_collision.xpos
    // [229] (byte) play_collision::ypos#2 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [230] (byte) play_collision::orientation#2 ← (byte) current_orientation#20 -- vbuxx=vbuz1 
    ldx.z current_orientation
    // [231] (byte*~) current_piece#98 ← (byte*) current_piece#15 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_98
    lda.z current_piece+1
    sta.z current_piece_98+1
    // play_collision(current_xpos+1,current_ypos,current_orientation)
    // [232] call play_collision 
    // [202] phi from play_move_leftright::@3 to play_collision [phi:play_move_leftright::@3->play_collision]
    // [202] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#2 [phi:play_move_leftright::@3->play_collision#0] -- register_copy 
    // [202] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#2 [phi:play_move_leftright::@3->play_collision#1] -- register_copy 
    // [202] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#2 [phi:play_move_leftright::@3->play_collision#2] -- register_copy 
    // [202] phi (byte*) current_piece#17 = (byte*~) current_piece#98 [phi:play_move_leftright::@3->play_collision#3] -- register_copy 
    jsr play_collision
    // play_collision(current_xpos+1,current_ypos,current_orientation)
    // [233] (byte) play_collision::return#13 ← (byte) play_collision::return#15
    // play_move_leftright::@7
    // [234] (byte~) play_move_leftright::$4 ← (byte) play_collision::return#13
    // if(play_collision(current_xpos+1,current_ypos,current_orientation)==COLLISION_NONE)
    // [235] if((byte~) play_move_leftright::$4!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne b3
    // play_move_leftright::@4
    // current_xpos++;
    // [236] (byte) current_xpos#6 ← ++ (byte) current_xpos#22 -- vbuz1=_inc_vbuz1 
    inc.z current_xpos
    // [237] phi from play_move_leftright::@4 play_move_leftright::@5 to play_move_leftright::@return [phi:play_move_leftright::@4/play_move_leftright::@5->play_move_leftright::@return]
  b2:
    // [237] phi (byte) current_xpos#26 = (byte) current_xpos#6 [phi:play_move_leftright::@4/play_move_leftright::@5->play_move_leftright::@return#0] -- register_copy 
    // [237] phi (byte) play_move_leftright::return#2 = (byte) 1 [phi:play_move_leftright::@4/play_move_leftright::@5->play_move_leftright::@return#1] -- vbuaa=vbuc1 
    lda #1
    rts
    // [237] phi from play_move_leftright::@2 play_move_leftright::@6 play_move_leftright::@7 to play_move_leftright::@return [phi:play_move_leftright::@2/play_move_leftright::@6/play_move_leftright::@7->play_move_leftright::@return]
  b3:
    // [237] phi (byte) current_xpos#26 = (byte) current_xpos#22 [phi:play_move_leftright::@2/play_move_leftright::@6/play_move_leftright::@7->play_move_leftright::@return#0] -- register_copy 
    // [237] phi (byte) play_move_leftright::return#2 = (byte) 0 [phi:play_move_leftright::@2/play_move_leftright::@6/play_move_leftright::@7->play_move_leftright::@return#1] -- vbuaa=vbuc1 
    lda #0
    // play_move_leftright::@return
    // }
    // [238] return 
    rts
    // play_move_leftright::@1
  b1:
    // play_collision(current_xpos-1,current_ypos,current_orientation)
    // [239] (byte) play_collision::xpos#1 ← (byte) current_xpos#22 - (byte) 1 -- vbuz1=vbuz2_minus_1 
    ldx.z current_xpos
    dex
    stx.z play_collision.xpos
    // [240] (byte) play_collision::ypos#1 ← (byte) current_ypos#19 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [241] (byte) play_collision::orientation#1 ← (byte) current_orientation#20 -- vbuxx=vbuz1 
    ldx.z current_orientation
    // [242] (byte*~) current_piece#97 ← (byte*) current_piece#15 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_97
    lda.z current_piece+1
    sta.z current_piece_97+1
    // play_collision(current_xpos-1,current_ypos,current_orientation)
    // [243] call play_collision 
    // [202] phi from play_move_leftright::@1 to play_collision [phi:play_move_leftright::@1->play_collision]
    // [202] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#1 [phi:play_move_leftright::@1->play_collision#0] -- register_copy 
    // [202] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#1 [phi:play_move_leftright::@1->play_collision#1] -- register_copy 
    // [202] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#1 [phi:play_move_leftright::@1->play_collision#2] -- register_copy 
    // [202] phi (byte*) current_piece#17 = (byte*~) current_piece#97 [phi:play_move_leftright::@1->play_collision#3] -- register_copy 
    jsr play_collision
    // play_collision(current_xpos-1,current_ypos,current_orientation)
    // [244] (byte) play_collision::return#1 ← (byte) play_collision::return#15
    // play_move_leftright::@6
    // [245] (byte~) play_move_leftright::$8 ← (byte) play_collision::return#1
    // if(play_collision(current_xpos-1,current_ypos,current_orientation)==COLLISION_NONE)
    // [246] if((byte~) play_move_leftright::$8!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    bne b3
    // play_move_leftright::@5
    // current_xpos--;
    // [247] (byte) current_xpos#8 ← -- (byte) current_xpos#22 -- vbuz1=_dec_vbuz1 
    dec.z current_xpos
    jmp b2
}
  // play_move_down
// Move down the current piece
// Return non-zero if a render is needed
// play_move_down(byte register(A) key_event)
play_move_down: {
    // ++current_movedown_counter;
    // [248] (byte) current_movedown_counter#12 ← ++ (byte) current_movedown_counter#16 -- vbuz1=_inc_vbuz1 
    inc.z current_movedown_counter
    // if(key_event==KEY_SPACE)
    // [249] if((byte) play_move_down::key_event#0!=(const byte) KEY_SPACE#0) goto play_move_down::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_SPACE
    bne b4
    // [250] phi from play_move_down to play_move_down::@4 [phi:play_move_down->play_move_down::@4]
    // play_move_down::@4
    // [251] phi from play_move_down::@4 to play_move_down::@1 [phi:play_move_down::@4->play_move_down::@1]
    // [251] phi (byte) play_move_down::movedown#10 = (byte) 1 [phi:play_move_down::@4->play_move_down::@1#0] -- vbuxx=vbuc1 
    ldx #1
    jmp b1
    // [251] phi from play_move_down to play_move_down::@1 [phi:play_move_down->play_move_down::@1]
  b4:
    // [251] phi (byte) play_move_down::movedown#10 = (byte) 0 [phi:play_move_down->play_move_down::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // play_move_down::@1
  b1:
    // keyboard_event_pressed(KEY_SPACE)
    // [252] call keyboard_event_pressed 
    // [381] phi from play_move_down::@1 to keyboard_event_pressed [phi:play_move_down::@1->keyboard_event_pressed]
    // [381] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_SPACE#0 [phi:play_move_down::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_SPACE
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_SPACE)
    // [253] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11
    // play_move_down::@12
    // [254] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
    // if(keyboard_event_pressed(KEY_SPACE)!=0)
    // [255] if((byte~) play_move_down::$2==(byte) 0) goto play_move_down::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
    // play_move_down::@5
    // if(current_movedown_counter>=current_movedown_fast)
    // [256] if((byte) current_movedown_counter#12<(const byte) current_movedown_fast#0) goto play_move_down::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z current_movedown_counter
    cmp #current_movedown_fast
    bcc b2
    // play_move_down::@6
    // movedown++;
    // [257] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10 -- vbuxx=_inc_vbuxx 
    inx
    // [258] phi from play_move_down::@12 play_move_down::@5 play_move_down::@6 to play_move_down::@2 [phi:play_move_down::@12/play_move_down::@5/play_move_down::@6->play_move_down::@2]
    // [258] phi (byte) play_move_down::movedown#7 = (byte) play_move_down::movedown#10 [phi:play_move_down::@12/play_move_down::@5/play_move_down::@6->play_move_down::@2#0] -- register_copy 
    // play_move_down::@2
  b2:
    // if(current_movedown_counter>=current_movedown_slow)
    // [259] if((byte) current_movedown_counter#12<(byte) current_movedown_slow#14) goto play_move_down::@3 -- vbuz1_lt_vbuz2_then_la1 
    lda.z current_movedown_counter
    cmp.z current_movedown_slow
    bcc b3
    // play_move_down::@7
    // movedown++;
    // [260] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7 -- vbuxx=_inc_vbuxx 
    inx
    // [261] phi from play_move_down::@2 play_move_down::@7 to play_move_down::@3 [phi:play_move_down::@2/play_move_down::@7->play_move_down::@3]
    // [261] phi (byte) play_move_down::movedown#6 = (byte) play_move_down::movedown#7 [phi:play_move_down::@2/play_move_down::@7->play_move_down::@3#0] -- register_copy 
    // play_move_down::@3
  b3:
    // if(movedown!=0)
    // [262] if((byte) play_move_down::movedown#6==(byte) 0) goto play_move_down::@return -- vbuxx_eq_0_then_la1 
    cpx #0
    beq b5
    // play_move_down::@8
    // play_collision(current_xpos,current_ypos+1,current_orientation)
    // [263] (byte) play_collision::ypos#0 ← (byte) current_ypos#11 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z current_ypos
    iny
    sty.z play_collision.ypos
    // [264] (byte) play_collision::xpos#0 ← (byte) current_xpos#14 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z play_collision.xpos
    // [265] (byte) play_collision::orientation#0 ← (byte) current_orientation#13 -- vbuxx=vbuz1 
    ldx.z current_orientation
    // [266] (byte*~) current_piece#96 ← (byte*) current_piece#10 -- pbuz1=pbuz2 
    lda.z current_piece
    sta.z current_piece_96
    lda.z current_piece+1
    sta.z current_piece_96+1
    // play_collision(current_xpos,current_ypos+1,current_orientation)
    // [267] call play_collision 
    // [202] phi from play_move_down::@8 to play_collision [phi:play_move_down::@8->play_collision]
    // [202] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#0 [phi:play_move_down::@8->play_collision#0] -- register_copy 
    // [202] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#0 [phi:play_move_down::@8->play_collision#1] -- register_copy 
    // [202] phi (byte) play_collision::orientation#5 = (byte) play_collision::orientation#0 [phi:play_move_down::@8->play_collision#2] -- register_copy 
    // [202] phi (byte*) current_piece#17 = (byte*~) current_piece#96 [phi:play_move_down::@8->play_collision#3] -- register_copy 
    jsr play_collision
    // play_collision(current_xpos,current_ypos+1,current_orientation)
    // [268] (byte) play_collision::return#0 ← (byte) play_collision::return#15
    // play_move_down::@13
    // [269] (byte~) play_move_down::$12 ← (byte) play_collision::return#0
    // if(play_collision(current_xpos,current_ypos+1,current_orientation)==COLLISION_NONE)
    // [270] if((byte~) play_move_down::$12==(const byte) COLLISION_NONE#0) goto play_move_down::@10 -- vbuaa_eq_vbuc1_then_la1 
    cmp #COLLISION_NONE
    beq b10
    // [271] phi from play_move_down::@13 to play_move_down::@9 [phi:play_move_down::@13->play_move_down::@9]
    // play_move_down::@9
    // play_lock_current()
    // [272] call play_lock_current 
    jsr play_lock_current
    // [273] phi from play_move_down::@9 to play_move_down::@14 [phi:play_move_down::@9->play_move_down::@14]
    // play_move_down::@14
    // play_remove_lines()
    // [274] call play_remove_lines 
    // [340] phi from play_move_down::@14 to play_remove_lines [phi:play_move_down::@14->play_remove_lines]
    jsr play_remove_lines
    // play_remove_lines()
    // [275] (byte) play_remove_lines::return#0 ← (byte) play_remove_lines::removed#8 -- vbuaa=vbuz1 
    lda.z play_remove_lines.removed
    // play_move_down::@15
    // removed = play_remove_lines()
    // [276] (byte) play_move_down::removed#0 ← (byte) play_remove_lines::return#0
    // play_update_score(removed)
    // [277] (byte) play_update_score::removed#0 ← (byte) play_move_down::removed#0 -- vbuxx=vbuaa 
    tax
    // [278] call play_update_score 
    jsr play_update_score
    // [279] phi from play_move_down::@15 to play_move_down::@16 [phi:play_move_down::@15->play_move_down::@16]
    // play_move_down::@16
    // play_spawn_current()
    // [280] call play_spawn_current 
    // [287] phi from play_move_down::@16 to play_spawn_current [phi:play_move_down::@16->play_spawn_current]
    // [287] phi (byte) game_over#65 = (byte) game_over#10 [phi:play_move_down::@16->play_spawn_current#0] -- register_copy 
    // [287] phi (byte) next_piece_idx#17 = (byte) next_piece_idx#10 [phi:play_move_down::@16->play_spawn_current#1] -- register_copy 
    jsr play_spawn_current
    // play_move_down::@17
    // [281] (byte*~) current_piece#93 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z play_spawn_current._7
    lda PIECES,y
    sta.z current_piece
    lda PIECES+1,y
    sta.z current_piece+1
    // [282] (byte*~) current_piece_gfx#117 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    lda PIECES,y
    sta.z current_piece_gfx
    lda PIECES+1,y
    sta.z current_piece_gfx+1
    // [283] phi from play_move_down::@17 to play_move_down::@11 [phi:play_move_down::@17->play_move_down::@11]
    // [283] phi (byte) next_piece_idx#30 = (byte) play_spawn_current::piece_idx#2 [phi:play_move_down::@17->play_move_down::@11#0] -- register_copy 
    // [283] phi (byte) game_over#27 = (byte) game_over#52 [phi:play_move_down::@17->play_move_down::@11#1] -- register_copy 
    // [283] phi (byte) current_xpos#43 = (byte) current_xpos#100 [phi:play_move_down::@17->play_move_down::@11#2] -- register_copy 
    // [283] phi (byte*) current_piece_gfx#35 = (byte*~) current_piece_gfx#117 [phi:play_move_down::@17->play_move_down::@11#3] -- register_copy 
    // [283] phi (byte) current_orientation#37 = (byte) 0 [phi:play_move_down::@17->play_move_down::@11#4] -- vbuz1=vbuc1 
    lda #0
    sta.z current_orientation
    // [283] phi (byte) current_piece_char#29 = (byte) current_piece_char#5 [phi:play_move_down::@17->play_move_down::@11#5] -- register_copy 
    // [283] phi (byte*) current_piece#28 = (byte*~) current_piece#93 [phi:play_move_down::@17->play_move_down::@11#6] -- register_copy 
    // [283] phi (byte) level_bcd#31 = (byte) level_bcd#19 [phi:play_move_down::@17->play_move_down::@11#7] -- register_copy 
    // [283] phi (byte) current_movedown_slow#37 = (byte) current_movedown_slow#23 [phi:play_move_down::@17->play_move_down::@11#8] -- register_copy 
    // [283] phi (byte) level#33 = (byte) level#19 [phi:play_move_down::@17->play_move_down::@11#9] -- register_copy 
    // [283] phi (dword) score_bcd#26 = (dword) score_bcd#16 [phi:play_move_down::@17->play_move_down::@11#10] -- register_copy 
    // [283] phi (word) lines_bcd#26 = (word) lines_bcd#17 [phi:play_move_down::@17->play_move_down::@11#11] -- register_copy 
    // [283] phi (byte) current_ypos#38 = (byte) current_ypos#6 [phi:play_move_down::@17->play_move_down::@11#12] -- register_copy 
    // play_move_down::@11
  b11:
    // [284] phi from play_move_down::@11 to play_move_down::@return [phi:play_move_down::@11->play_move_down::@return]
    // [284] phi (byte) next_piece_idx#16 = (byte) next_piece_idx#30 [phi:play_move_down::@11->play_move_down::@return#0] -- register_copy 
    // [284] phi (byte) game_over#15 = (byte) game_over#27 [phi:play_move_down::@11->play_move_down::@return#1] -- register_copy 
    // [284] phi (byte) current_xpos#22 = (byte) current_xpos#43 [phi:play_move_down::@11->play_move_down::@return#2] -- register_copy 
    // [284] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#35 [phi:play_move_down::@11->play_move_down::@return#3] -- register_copy 
    // [284] phi (byte) current_orientation#20 = (byte) current_orientation#37 [phi:play_move_down::@11->play_move_down::@return#4] -- register_copy 
    // [284] phi (byte) current_piece_char#16 = (byte) current_piece_char#29 [phi:play_move_down::@11->play_move_down::@return#5] -- register_copy 
    // [284] phi (byte*) current_piece#15 = (byte*) current_piece#28 [phi:play_move_down::@11->play_move_down::@return#6] -- register_copy 
    // [284] phi (byte) level_bcd#17 = (byte) level_bcd#31 [phi:play_move_down::@11->play_move_down::@return#7] -- register_copy 
    // [284] phi (byte) current_movedown_slow#21 = (byte) current_movedown_slow#37 [phi:play_move_down::@11->play_move_down::@return#8] -- register_copy 
    // [284] phi (byte) level#17 = (byte) level#33 [phi:play_move_down::@11->play_move_down::@return#9] -- register_copy 
    // [284] phi (dword) score_bcd#14 = (dword) score_bcd#26 [phi:play_move_down::@11->play_move_down::@return#10] -- register_copy 
    // [284] phi (word) lines_bcd#15 = (word) lines_bcd#26 [phi:play_move_down::@11->play_move_down::@return#11] -- register_copy 
    // [284] phi (byte) current_ypos#19 = (byte) current_ypos#38 [phi:play_move_down::@11->play_move_down::@return#12] -- register_copy 
    // [284] phi (byte) current_movedown_counter#14 = (byte) 0 [phi:play_move_down::@11->play_move_down::@return#13] -- vbuz1=vbuc1 
    lda #0
    sta.z current_movedown_counter
    // [284] phi (byte) play_move_down::return#3 = (byte) 1 [phi:play_move_down::@11->play_move_down::@return#14] -- vbuxx=vbuc1 
    ldx #1
    rts
    // [284] phi from play_move_down::@3 to play_move_down::@return [phi:play_move_down::@3->play_move_down::@return]
  b5:
    // [284] phi (byte) next_piece_idx#16 = (byte) next_piece_idx#10 [phi:play_move_down::@3->play_move_down::@return#0] -- register_copy 
    // [284] phi (byte) game_over#15 = (byte) game_over#10 [phi:play_move_down::@3->play_move_down::@return#1] -- register_copy 
    // [284] phi (byte) current_xpos#22 = (byte) current_xpos#14 [phi:play_move_down::@3->play_move_down::@return#2] -- register_copy 
    // [284] phi (byte*) current_piece_gfx#20 = (byte*) current_piece_gfx#13 [phi:play_move_down::@3->play_move_down::@return#3] -- register_copy 
    // [284] phi (byte) current_orientation#20 = (byte) current_orientation#13 [phi:play_move_down::@3->play_move_down::@return#4] -- register_copy 
    // [284] phi (byte) current_piece_char#16 = (byte) current_piece_char#10 [phi:play_move_down::@3->play_move_down::@return#5] -- register_copy 
    // [284] phi (byte*) current_piece#15 = (byte*) current_piece#10 [phi:play_move_down::@3->play_move_down::@return#6] -- register_copy 
    // [284] phi (byte) level_bcd#17 = (byte) level_bcd#11 [phi:play_move_down::@3->play_move_down::@return#7] -- register_copy 
    // [284] phi (byte) current_movedown_slow#21 = (byte) current_movedown_slow#14 [phi:play_move_down::@3->play_move_down::@return#8] -- register_copy 
    // [284] phi (byte) level#17 = (byte) level#10 [phi:play_move_down::@3->play_move_down::@return#9] -- register_copy 
    // [284] phi (dword) score_bcd#14 = (dword) score_bcd#18 [phi:play_move_down::@3->play_move_down::@return#10] -- register_copy 
    // [284] phi (word) lines_bcd#15 = (word) lines_bcd#19 [phi:play_move_down::@3->play_move_down::@return#11] -- register_copy 
    // [284] phi (byte) current_ypos#19 = (byte) current_ypos#11 [phi:play_move_down::@3->play_move_down::@return#12] -- register_copy 
    // [284] phi (byte) current_movedown_counter#14 = (byte) current_movedown_counter#12 [phi:play_move_down::@3->play_move_down::@return#13] -- register_copy 
    // [284] phi (byte) play_move_down::return#3 = (byte) 0 [phi:play_move_down::@3->play_move_down::@return#14] -- vbuxx=vbuc1 
    ldx #0
    // play_move_down::@return
    // }
    // [285] return 
    rts
    // play_move_down::@10
  b10:
    // current_ypos++;
    // [286] (byte) current_ypos#3 ← ++ (byte) current_ypos#11 -- vbuz1=_inc_vbuz1 
    inc.z current_ypos
    // [283] phi from play_move_down::@10 to play_move_down::@11 [phi:play_move_down::@10->play_move_down::@11]
    // [283] phi (byte) next_piece_idx#30 = (byte) next_piece_idx#10 [phi:play_move_down::@10->play_move_down::@11#0] -- register_copy 
    // [283] phi (byte) game_over#27 = (byte) game_over#10 [phi:play_move_down::@10->play_move_down::@11#1] -- register_copy 
    // [283] phi (byte) current_xpos#43 = (byte) current_xpos#14 [phi:play_move_down::@10->play_move_down::@11#2] -- register_copy 
    // [283] phi (byte*) current_piece_gfx#35 = (byte*) current_piece_gfx#13 [phi:play_move_down::@10->play_move_down::@11#3] -- register_copy 
    // [283] phi (byte) current_orientation#37 = (byte) current_orientation#13 [phi:play_move_down::@10->play_move_down::@11#4] -- register_copy 
    // [283] phi (byte) current_piece_char#29 = (byte) current_piece_char#10 [phi:play_move_down::@10->play_move_down::@11#5] -- register_copy 
    // [283] phi (byte*) current_piece#28 = (byte*) current_piece#10 [phi:play_move_down::@10->play_move_down::@11#6] -- register_copy 
    // [283] phi (byte) level_bcd#31 = (byte) level_bcd#11 [phi:play_move_down::@10->play_move_down::@11#7] -- register_copy 
    // [283] phi (byte) current_movedown_slow#37 = (byte) current_movedown_slow#14 [phi:play_move_down::@10->play_move_down::@11#8] -- register_copy 
    // [283] phi (byte) level#33 = (byte) level#10 [phi:play_move_down::@10->play_move_down::@11#9] -- register_copy 
    // [283] phi (dword) score_bcd#26 = (dword) score_bcd#18 [phi:play_move_down::@10->play_move_down::@11#10] -- register_copy 
    // [283] phi (word) lines_bcd#26 = (word) lines_bcd#19 [phi:play_move_down::@10->play_move_down::@11#11] -- register_copy 
    // [283] phi (byte) current_ypos#38 = (byte) current_ypos#3 [phi:play_move_down::@10->play_move_down::@11#12] -- register_copy 
    jmp b11
}
  // play_spawn_current
// Spawn a new piece
// Moves the next piece into the current and spawns a new next piece
play_spawn_current: {
    .label _7 = $2e
    .label piece_idx = $a
    // current_piece_idx = next_piece_idx
    // [288] (byte) play_spawn_current::current_piece_idx#0 ← (byte) next_piece_idx#17 -- vbuxx=vbuz1 
    // Move next piece into current
    ldx.z next_piece_idx
    // current_piece = PIECES[current_piece_idx]
    // [289] (byte~) play_spawn_current::$7 ← (byte) play_spawn_current::current_piece_idx#0 << (byte) 1 -- vbuz1=vbuxx_rol_1 
    txa
    asl
    sta.z _7
    // current_piece_char = PIECES_CHARS[current_piece_idx]
    // [290] (byte) current_piece_char#5 ← *((const byte[]) PIECES_CHARS#0 + (byte) play_spawn_current::current_piece_idx#0) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_CHARS,x
    sta.z current_piece_char
    // current_xpos = PIECES_START_X[current_piece_idx]
    // [291] (byte) current_xpos#100 ← *((const byte[]) PIECES_START_X#0 + (byte) play_spawn_current::current_piece_idx#0) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_START_X,x
    sta.z current_xpos
    // current_ypos = PIECES_START_Y[current_piece_idx]
    // [292] (byte) current_ypos#6 ← *((const byte[]) PIECES_START_Y#0 + (byte) play_spawn_current::current_piece_idx#0) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda PIECES_START_Y,x
    sta.z current_ypos
    // play_collision(current_xpos,current_ypos,current_orientation)
    // [293] (byte) play_collision::xpos#4 ← (byte) current_xpos#100 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z play_collision.xpos
    // [294] (byte) play_collision::ypos#4 ← (byte) current_ypos#6 -- vbuz1=vbuz2 
    lda.z current_ypos
    sta.z play_collision.ypos
    // [295] (byte*~) current_piece#100 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$7) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z _7
    lda PIECES,y
    sta.z current_piece_100
    lda PIECES+1,y
    sta.z current_piece_100+1
    // play_collision(current_xpos,current_ypos,current_orientation)
    // [296] call play_collision 
    // [202] phi from play_spawn_current to play_collision [phi:play_spawn_current->play_collision]
    // [202] phi (byte) play_collision::xpos#6 = (byte) play_collision::xpos#4 [phi:play_spawn_current->play_collision#0] -- register_copy 
    // [202] phi (byte) play_collision::yp#0 = (byte) play_collision::ypos#4 [phi:play_spawn_current->play_collision#1] -- register_copy 
    // [202] phi (byte) play_collision::orientation#5 = (byte) 0 [phi:play_spawn_current->play_collision#2] -- vbuxx=vbuc1 
    ldx #0
    // [202] phi (byte*) current_piece#17 = (byte*~) current_piece#100 [phi:play_spawn_current->play_collision#3] -- register_copy 
    jsr play_collision
    // play_collision(current_xpos,current_ypos,current_orientation)
    // [297] (byte) play_collision::return#10 ← (byte) play_collision::return#15
    // play_spawn_current::@4
    // [298] (byte~) play_spawn_current::$1 ← (byte) play_collision::return#10
    // if(play_collision(current_xpos,current_ypos,current_orientation)==COLLISION_PLAYFIELD)
    // [299] if((byte~) play_spawn_current::$1!=(const byte) COLLISION_PLAYFIELD#0) goto play_spawn_current::@5 -- vbuaa_neq_vbuc1_then_la1 
    cmp #COLLISION_PLAYFIELD
    bne b1
    // [301] phi from play_spawn_current::@4 to play_spawn_current::@1 [phi:play_spawn_current::@4->play_spawn_current::@1]
    // [301] phi (byte) game_over#52 = (byte) 1 [phi:play_spawn_current::@4->play_spawn_current::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z game_over
    // [300] phi from play_spawn_current::@4 to play_spawn_current::@5 [phi:play_spawn_current::@4->play_spawn_current::@5]
    // play_spawn_current::@5
    // [301] phi from play_spawn_current::@5 to play_spawn_current::@1 [phi:play_spawn_current::@5->play_spawn_current::@1]
    // [301] phi (byte) game_over#52 = (byte) game_over#65 [phi:play_spawn_current::@5->play_spawn_current::@1#0] -- register_copy 
    // play_spawn_current::@1
  b1:
    // [302] phi from play_spawn_current::@1 to play_spawn_current::@2 [phi:play_spawn_current::@1->play_spawn_current::@2]
    // [302] phi (byte) play_spawn_current::piece_idx#2 = (byte) 7 [phi:play_spawn_current::@1->play_spawn_current::@2#0] -- vbuz1=vbuc1 
    lda #7
    sta.z piece_idx
    // play_spawn_current::@2
  b2:
    // while(piece_idx==7)
    // [303] if((byte) play_spawn_current::piece_idx#2==(byte) 7) goto play_spawn_current::sid_rnd1 -- vbuz1_eq_vbuc1_then_la1 
    lda #7
    cmp.z piece_idx
    beq sid_rnd1
    // play_spawn_current::@return
    // }
    // [304] return 
    rts
    // play_spawn_current::sid_rnd1
  sid_rnd1:
    // return *SID_VOICE3_OSC;
    // [305] (byte) play_spawn_current::sid_rnd1_return#0 ← *((const byte*) SID_VOICE3_OSC#0) -- vbuaa=_deref_pbuc1 
    lda SID_VOICE3_OSC
    // play_spawn_current::@3
    // piece_idx = sid_rnd()&7
    // [306] (byte) play_spawn_current::piece_idx#1 ← (byte) play_spawn_current::sid_rnd1_return#0 & (byte) 7 -- vbuz1=vbuaa_band_vbuc1 
    and #7
    sta.z piece_idx
    // [302] phi from play_spawn_current::@3 to play_spawn_current::@2 [phi:play_spawn_current::@3->play_spawn_current::@2]
    // [302] phi (byte) play_spawn_current::piece_idx#2 = (byte) play_spawn_current::piece_idx#1 [phi:play_spawn_current::@3->play_spawn_current::@2#0] -- register_copy 
    jmp b2
}
  // play_update_score
// Update the score based on the number of lines removed
// play_update_score(byte register(X) removed)
play_update_score: {
    .label lines_before = $26
    .label add_bcd = $27
    // if(removed!=0)
    // [307] if((byte) play_update_score::removed#0==(byte) 0) goto play_update_score::@return -- vbuxx_eq_0_then_la1 
    cpx #0
    beq breturn
    // play_update_score::@1
    // <lines_bcd
    // [308] (byte~) play_update_score::$2 ← < (word) lines_bcd#19 -- vbuaa=_lo_vwuz1 
    lda.z lines_bcd
    // lines_before = <lines_bcd&$f0
    // [309] (byte) play_update_score::lines_before#0 ← (byte~) play_update_score::$2 & (byte) $f0 -- vbuz1=vbuaa_band_vbuc1 
    and #$f0
    sta.z lines_before
    // add_bcd = score_add_bcd[removed]
    // [310] (byte~) play_update_score::$9 ← (byte) play_update_score::removed#0 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
    // [311] (dword) play_update_score::add_bcd#0 ← *((const dword[5]) score_add_bcd#0 + (byte~) play_update_score::$9) -- vduz1=pduc1_derefidx_vbuaa 
    tay
    lda score_add_bcd,y
    sta.z add_bcd
    lda score_add_bcd+1,y
    sta.z add_bcd+1
    lda score_add_bcd+2,y
    sta.z add_bcd+2
    lda score_add_bcd+3,y
    sta.z add_bcd+3
    // asm
    // asm { sed  }
    sed
    // lines_bcd += removed
    // [313] (word) lines_bcd#29 ← (word) lines_bcd#19 + (byte) play_update_score::removed#0 -- vwuz1=vwuz1_plus_vbuxx 
    txa
    clc
    adc.z lines_bcd
    sta.z lines_bcd
    bcc !+
    inc.z lines_bcd+1
  !:
    // score_bcd += add_bcd
    // [314] (dword) score_bcd#29 ← (dword) score_bcd#18 + (dword) play_update_score::add_bcd#0 -- vduz1=vduz1_plus_vduz2 
    lda.z score_bcd
    clc
    adc.z add_bcd
    sta.z score_bcd
    lda.z score_bcd+1
    adc.z add_bcd+1
    sta.z score_bcd+1
    lda.z score_bcd+2
    adc.z add_bcd+2
    sta.z score_bcd+2
    lda.z score_bcd+3
    adc.z add_bcd+3
    sta.z score_bcd+3
    // asm
    // asm { cld  }
    cld
    // <lines_bcd
    // [316] (byte~) play_update_score::$4 ← < (word) lines_bcd#29 -- vbuaa=_lo_vwuz1 
    lda.z lines_bcd
    // lines_after = <lines_bcd&$f0
    // [317] (byte) play_update_score::lines_after#0 ← (byte~) play_update_score::$4 & (byte) $f0 -- vbuaa=vbuaa_band_vbuc1 
    and #$f0
    // if(lines_before!=lines_after)
    // [318] if((byte) play_update_score::lines_before#0==(byte) play_update_score::lines_after#0) goto play_update_score::@return -- vbuz1_eq_vbuaa_then_la1 
    cmp.z lines_before
    beq breturn
    // [319] phi from play_update_score::@1 to play_update_score::@2 [phi:play_update_score::@1->play_update_score::@2]
    // play_update_score::@2
    // play_increase_level()
    // [320] call play_increase_level 
    jsr play_increase_level
    // [321] phi from play_update_score play_update_score::@1 play_update_score::@2 to play_update_score::@return [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return]
    // [321] phi (byte) level_bcd#19 = (byte) level_bcd#11 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#0] -- register_copy 
    // [321] phi (byte) current_movedown_slow#23 = (byte) current_movedown_slow#14 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#1] -- register_copy 
    // [321] phi (byte) level#19 = (byte) level#10 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#2] -- register_copy 
    // [321] phi (dword) score_bcd#16 = (dword) score_bcd#18 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#3] -- register_copy 
    // [321] phi (word) lines_bcd#17 = (word) lines_bcd#19 [phi:play_update_score/play_update_score::@1/play_update_score::@2->play_update_score::@return#4] -- register_copy 
    // play_update_score::@return
  breturn:
    // }
    // [322] return 
    rts
}
  // play_increase_level
// Increase the level
play_increase_level: {
    // level++;
    // [323] (byte) level#21 ← ++ (byte) level#10 -- vbuz1=_inc_vbuz1 
    inc.z level
    // if(level>29)
    // [324] if((byte) level#21>=(byte) $1d+(byte) 1) goto play_increase_level::@1 -- vbuz1_ge_vbuc1_then_la1 
    // Update speed of moving tetrominos down
    lda.z level
    cmp #$1d+1
    bcs b3
    // play_increase_level::@3
    // current_movedown_slow = MOVEDOWN_SLOW_SPEEDS[level]
    // [325] (byte) current_movedown_slow#10 ← *((const byte[]) MOVEDOWN_SLOW_SPEEDS#0 + (byte) level#21) -- vbuz1=pbuc1_derefidx_vbuz2 
    tay
    lda MOVEDOWN_SLOW_SPEEDS,y
    sta.z current_movedown_slow
    // [326] phi from play_increase_level::@3 to play_increase_level::@1 [phi:play_increase_level::@3->play_increase_level::@1]
    // [326] phi (byte) current_movedown_slow#66 = (byte) current_movedown_slow#10 [phi:play_increase_level::@3->play_increase_level::@1#0] -- register_copy 
    jmp b1
    // [326] phi from play_increase_level to play_increase_level::@1 [phi:play_increase_level->play_increase_level::@1]
  b3:
    // [326] phi (byte) current_movedown_slow#66 = (byte) 1 [phi:play_increase_level->play_increase_level::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z current_movedown_slow
    // play_increase_level::@1
  b1:
    // level_bcd++;
    // [327] (byte) level_bcd#21 ← ++ (byte) level_bcd#11 -- vbuz1=_inc_vbuz1 
    inc.z level_bcd
    // level_bcd&$f
    // [328] (byte~) play_increase_level::$1 ← (byte) level_bcd#21 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z level_bcd
    // if((level_bcd&$f)==$a)
    // [329] if((byte~) play_increase_level::$1!=(byte) $a) goto play_increase_level::@2 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$a
    bne b2
    // play_increase_level::@4
    // level_bcd += 6
    // [330] (byte) level_bcd#8 ← (byte) level_bcd#21 + (byte) 6 -- vbuz1=vbuz1_plus_vbuc1 
    // If level low nybble hits $a change to $10
    lax.z level_bcd
    axs #-[6]
    stx.z level_bcd
    // [331] phi from play_increase_level::@1 play_increase_level::@4 to play_increase_level::@2 [phi:play_increase_level::@1/play_increase_level::@4->play_increase_level::@2]
    // [331] phi (byte) level_bcd#62 = (byte) level_bcd#21 [phi:play_increase_level::@1/play_increase_level::@4->play_increase_level::@2#0] -- register_copy 
    // play_increase_level::@2
  b2:
    // asm
    // asm { sed  }
    // Increase the score values gained
    sed
    // [333] phi from play_increase_level::@2 to play_increase_level::@5 [phi:play_increase_level::@2->play_increase_level::@5]
    // [333] phi (byte) play_increase_level::b#2 = (byte) 0 [phi:play_increase_level::@2->play_increase_level::@5#0] -- vbuxx=vbuc1 
    ldx #0
    // [333] phi from play_increase_level::@5 to play_increase_level::@5 [phi:play_increase_level::@5->play_increase_level::@5]
    // [333] phi (byte) play_increase_level::b#2 = (byte) play_increase_level::b#1 [phi:play_increase_level::@5->play_increase_level::@5#0] -- register_copy 
    // play_increase_level::@5
  b5:
    // score_add_bcd[b] += SCORE_BASE_BCD[b]
    // [334] (byte~) play_increase_level::$5 ← (byte) play_increase_level::b#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
    // [335] *((const dword[5]) score_add_bcd#0 + (byte~) play_increase_level::$5) ← *((const dword[5]) score_add_bcd#0 + (byte~) play_increase_level::$5) + *((const dword[]) SCORE_BASE_BCD#0 + (byte~) play_increase_level::$5) -- pduc1_derefidx_vbuaa=pduc1_derefidx_vbuaa_plus_pduc2_derefidx_vbuaa 
    tay
    clc
    lda score_add_bcd,y
    adc SCORE_BASE_BCD,y
    sta score_add_bcd,y
    lda score_add_bcd+1,y
    adc SCORE_BASE_BCD+1,y
    sta score_add_bcd+1,y
    lda score_add_bcd+2,y
    adc SCORE_BASE_BCD+2,y
    sta score_add_bcd+2,y
    lda score_add_bcd+3,y
    adc SCORE_BASE_BCD+3,y
    sta score_add_bcd+3,y
    // for(byte b: 0..4)
    // [336] (byte) play_increase_level::b#1 ← ++ (byte) play_increase_level::b#2 -- vbuxx=_inc_vbuxx 
    inx
    // [337] if((byte) play_increase_level::b#1!=(byte) 5) goto play_increase_level::@5 -- vbuxx_neq_vbuc1_then_la1 
    cpx #5
    bne b5
    // play_increase_level::@6
    // asm
    // asm { cld  }
    cld
    // play_increase_level::@return
    // }
    // [339] return 
    rts
}
  // play_remove_lines
// Look through the playfield for lines - and remove any lines found
// Utilizes two cursors on the playfield - one reading cells and one writing cells
// Whenever a full line is detected the writing cursor is instructed to write to the same line once more.
// Returns the number of lines removed
play_remove_lines: {
    .label c = $2b
    .label x = $e
    .label y = $c
    .label removed = $d
    .label full = $f
    // [341] phi from play_remove_lines to play_remove_lines::@1 [phi:play_remove_lines->play_remove_lines::@1]
    // [341] phi (byte) play_remove_lines::removed#11 = (byte) 0 [phi:play_remove_lines->play_remove_lines::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z removed
    // [341] phi (byte) play_remove_lines::y#8 = (byte) 0 [phi:play_remove_lines->play_remove_lines::@1#1] -- vbuz1=vbuc1 
    sta.z y
    // [341] phi (byte) play_remove_lines::w#12 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte) 1 [phi:play_remove_lines->play_remove_lines::@1#2] -- vbuxx=vbuc1 
    ldx #PLAYFIELD_LINES*PLAYFIELD_COLS-1
    // [341] phi (byte) play_remove_lines::r#3 = (const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte) 1 [phi:play_remove_lines->play_remove_lines::@1#3] -- vbuyy=vbuc1 
    ldy #PLAYFIELD_LINES*PLAYFIELD_COLS-1
  // Read all lines and rewrite them
    // [341] phi from play_remove_lines::@6 to play_remove_lines::@1 [phi:play_remove_lines::@6->play_remove_lines::@1]
    // [341] phi (byte) play_remove_lines::removed#11 = (byte) play_remove_lines::removed#8 [phi:play_remove_lines::@6->play_remove_lines::@1#0] -- register_copy 
    // [341] phi (byte) play_remove_lines::y#8 = (byte) play_remove_lines::y#1 [phi:play_remove_lines::@6->play_remove_lines::@1#1] -- register_copy 
    // [341] phi (byte) play_remove_lines::w#12 = (byte) play_remove_lines::w#11 [phi:play_remove_lines::@6->play_remove_lines::@1#2] -- register_copy 
    // [341] phi (byte) play_remove_lines::r#3 = (byte) play_remove_lines::r#1 [phi:play_remove_lines::@6->play_remove_lines::@1#3] -- register_copy 
    // play_remove_lines::@1
  b1:
    // [342] phi from play_remove_lines::@1 to play_remove_lines::@2 [phi:play_remove_lines::@1->play_remove_lines::@2]
    // [342] phi (byte) play_remove_lines::full#4 = (byte) 1 [phi:play_remove_lines::@1->play_remove_lines::@2#0] -- vbuz1=vbuc1 
    lda #1
    sta.z full
    // [342] phi (byte) play_remove_lines::x#2 = (byte) 0 [phi:play_remove_lines::@1->play_remove_lines::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [342] phi (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#12 [phi:play_remove_lines::@1->play_remove_lines::@2#2] -- register_copy 
    // [342] phi (byte) play_remove_lines::r#2 = (byte) play_remove_lines::r#3 [phi:play_remove_lines::@1->play_remove_lines::@2#3] -- register_copy 
    // [342] phi from play_remove_lines::@3 to play_remove_lines::@2 [phi:play_remove_lines::@3->play_remove_lines::@2]
    // [342] phi (byte) play_remove_lines::full#4 = (byte) play_remove_lines::full#2 [phi:play_remove_lines::@3->play_remove_lines::@2#0] -- register_copy 
    // [342] phi (byte) play_remove_lines::x#2 = (byte) play_remove_lines::x#1 [phi:play_remove_lines::@3->play_remove_lines::@2#1] -- register_copy 
    // [342] phi (byte) play_remove_lines::w#4 = (byte) play_remove_lines::w#1 [phi:play_remove_lines::@3->play_remove_lines::@2#2] -- register_copy 
    // [342] phi (byte) play_remove_lines::r#2 = (byte) play_remove_lines::r#1 [phi:play_remove_lines::@3->play_remove_lines::@2#3] -- register_copy 
    // play_remove_lines::@2
  b2:
    // c = playfield[r--]
    // [343] (byte) play_remove_lines::c#0 ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::r#2) -- vbuz1=pbuc1_derefidx_vbuyy 
    lda playfield,y
    sta.z c
    // [344] (byte) play_remove_lines::r#1 ← -- (byte) play_remove_lines::r#2 -- vbuyy=_dec_vbuyy 
    dey
    // if(c==0)
    // [345] if((byte) play_remove_lines::c#0!=(byte) 0) goto play_remove_lines::@9 -- vbuz1_neq_0_then_la1 
    cmp #0
    bne b3
    // [347] phi from play_remove_lines::@2 to play_remove_lines::@3 [phi:play_remove_lines::@2->play_remove_lines::@3]
    // [347] phi (byte) play_remove_lines::full#2 = (byte) 0 [phi:play_remove_lines::@2->play_remove_lines::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z full
    // [346] phi from play_remove_lines::@2 to play_remove_lines::@9 [phi:play_remove_lines::@2->play_remove_lines::@9]
    // play_remove_lines::@9
    // [347] phi from play_remove_lines::@9 to play_remove_lines::@3 [phi:play_remove_lines::@9->play_remove_lines::@3]
    // [347] phi (byte) play_remove_lines::full#2 = (byte) play_remove_lines::full#4 [phi:play_remove_lines::@9->play_remove_lines::@3#0] -- register_copy 
    // play_remove_lines::@3
  b3:
    // playfield[w--] = c
    // [348] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#4) ← (byte) play_remove_lines::c#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z c
    sta playfield,x
    // playfield[w--] = c;
    // [349] (byte) play_remove_lines::w#1 ← -- (byte) play_remove_lines::w#4 -- vbuxx=_dec_vbuxx 
    dex
    // for(byte x:0..PLAYFIELD_COLS-1)
    // [350] (byte) play_remove_lines::x#1 ← ++ (byte) play_remove_lines::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [351] if((byte) play_remove_lines::x#1!=(const byte) PLAYFIELD_COLS#0-(byte) 1+(byte) 1) goto play_remove_lines::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_COLS-1+1
    cmp.z x
    bne b2
    // play_remove_lines::@4
    // if(full==1)
    // [352] if((byte) play_remove_lines::full#2!=(byte) 1) goto play_remove_lines::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp.z full
    bne b6
    // play_remove_lines::@5
    // w = w + PLAYFIELD_COLS
    // [353] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    axs #-[PLAYFIELD_COLS]
    // removed++;
    // [354] (byte) play_remove_lines::removed#1 ← ++ (byte) play_remove_lines::removed#11 -- vbuz1=_inc_vbuz1 
    inc.z removed
    // [355] phi from play_remove_lines::@4 play_remove_lines::@5 to play_remove_lines::@6 [phi:play_remove_lines::@4/play_remove_lines::@5->play_remove_lines::@6]
    // [355] phi (byte) play_remove_lines::removed#8 = (byte) play_remove_lines::removed#11 [phi:play_remove_lines::@4/play_remove_lines::@5->play_remove_lines::@6#0] -- register_copy 
    // [355] phi (byte) play_remove_lines::w#11 = (byte) play_remove_lines::w#1 [phi:play_remove_lines::@4/play_remove_lines::@5->play_remove_lines::@6#1] -- register_copy 
    // play_remove_lines::@6
  b6:
    // for(byte y:0..PLAYFIELD_LINES-1)
    // [356] (byte) play_remove_lines::y#1 ← ++ (byte) play_remove_lines::y#8 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [357] if((byte) play_remove_lines::y#1!=(const byte) PLAYFIELD_LINES#0-(byte) 1+(byte) 1) goto play_remove_lines::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #PLAYFIELD_LINES-1+1
    cmp.z y
    bne b1
    // [358] phi from play_remove_lines::@6 play_remove_lines::@8 to play_remove_lines::@7 [phi:play_remove_lines::@6/play_remove_lines::@8->play_remove_lines::@7]
  b4:
    // [358] phi (byte) play_remove_lines::w#6 = (byte) play_remove_lines::w#11 [phi:play_remove_lines::@6/play_remove_lines::@8->play_remove_lines::@7#0] -- register_copy 
  // Write zeros in the rest of the lines
    // play_remove_lines::@7
    // while(w!=$ff)
    // [359] if((byte) play_remove_lines::w#6!=(byte) $ff) goto play_remove_lines::@8 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$ff
    bne b8
    // play_remove_lines::@return
    // }
    // [360] return 
    rts
    // play_remove_lines::@8
  b8:
    // playfield[w--] = 0
    // [361] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#6) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta playfield,x
    // playfield[w--] = 0;
    // [362] (byte) play_remove_lines::w#3 ← -- (byte) play_remove_lines::w#6 -- vbuxx=_dec_vbuxx 
    dex
    jmp b4
}
  // play_lock_current
// Lock the current piece onto the playfield
play_lock_current: {
    .label yp = $18
    .label playfield_line = $2c
    .label xp = $12
    .label i = $2f
    .label l = $10
    .label i_2 = $11
    .label i_3 = $11
    .label i_7 = $11
    .label i_9 = $11
    // yp = current_ypos
    // [363] (byte) play_lock_current::yp#0 ← (byte) current_ypos#11
    // [364] phi from play_lock_current to play_lock_current::@1 [phi:play_lock_current->play_lock_current::@1]
    // [364] phi (byte) play_lock_current::l#6 = (byte) 0 [phi:play_lock_current->play_lock_current::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [364] phi (byte) play_lock_current::i#3 = (byte) 0 [phi:play_lock_current->play_lock_current::@1#1] -- vbuz1=vbuc1 
    sta.z i_3
    // [364] phi (byte) play_lock_current::yp#2 = (byte) play_lock_current::yp#0 [phi:play_lock_current->play_lock_current::@1#2] -- register_copy 
    // play_lock_current::@1
  b1:
    // playfield_line = playfield_lines[yp]
    // [365] (byte~) play_lock_current::$4 ← (byte) play_lock_current::yp#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z yp
    asl
    // [366] (byte*) play_lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_lock_current::$4) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda playfield_lines,y
    sta.z playfield_line
    lda playfield_lines+1,y
    sta.z playfield_line+1
    // xp = current_xpos
    // [367] (byte) play_lock_current::xp#0 ← (byte) current_xpos#14 -- vbuz1=vbuz2 
    lda.z current_xpos
    sta.z xp
    // [368] phi from play_lock_current::@1 to play_lock_current::@2 [phi:play_lock_current::@1->play_lock_current::@2]
    // [368] phi (byte) play_lock_current::c#2 = (byte) 0 [phi:play_lock_current::@1->play_lock_current::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [368] phi (byte) play_lock_current::xp#2 = (byte) play_lock_current::xp#0 [phi:play_lock_current::@1->play_lock_current::@2#1] -- register_copy 
    // [368] phi (byte) play_lock_current::i#2 = (byte) play_lock_current::i#3 [phi:play_lock_current::@1->play_lock_current::@2#2] -- register_copy 
    // play_lock_current::@2
  b2:
    // if(current_piece_gfx[i++]!=0)
    // [369] (byte) play_lock_current::i#1 ← ++ (byte) play_lock_current::i#2 -- vbuz1=_inc_vbuz2 
    ldy.z i_2
    iny
    sty.z i
    // [370] if(*((byte*) current_piece_gfx#13 + (byte) play_lock_current::i#2)==(byte) 0) goto play_lock_current::@3 -- pbuz1_derefidx_vbuz2_eq_0_then_la1 
    ldy.z i_2
    lda (current_piece_gfx),y
    cmp #0
    beq b3
    // play_lock_current::@4
    // playfield_line[xp] = current_piece_char
    // [371] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::xp#2) ← (byte) current_piece_char#10 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z current_piece_char
    ldy.z xp
    sta (playfield_line),y
    // play_lock_current::@3
  b3:
    // xp++;
    // [372] (byte) play_lock_current::xp#1 ← ++ (byte) play_lock_current::xp#2 -- vbuz1=_inc_vbuz1 
    inc.z xp
    // for(byte c:0..3)
    // [373] (byte) play_lock_current::c#1 ← ++ (byte) play_lock_current::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [374] if((byte) play_lock_current::c#1!=(byte) 4) goto play_lock_current::@7 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b7
    // play_lock_current::@5
    // yp++;
    // [375] (byte) play_lock_current::yp#1 ← ++ (byte) play_lock_current::yp#2 -- vbuz1=_inc_vbuz1 
    inc.z yp
    // for(byte l:0..3)
    // [376] (byte) play_lock_current::l#1 ← ++ (byte) play_lock_current::l#6 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [377] if((byte) play_lock_current::l#1!=(byte) 4) goto play_lock_current::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z l
    bne b6
    // play_lock_current::@return
    // }
    // [378] return 
    rts
    // play_lock_current::@6
  b6:
    // [379] (byte~) play_lock_current::i#7 ← (byte) play_lock_current::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_7
    // [364] phi from play_lock_current::@6 to play_lock_current::@1 [phi:play_lock_current::@6->play_lock_current::@1]
    // [364] phi (byte) play_lock_current::l#6 = (byte) play_lock_current::l#1 [phi:play_lock_current::@6->play_lock_current::@1#0] -- register_copy 
    // [364] phi (byte) play_lock_current::i#3 = (byte~) play_lock_current::i#7 [phi:play_lock_current::@6->play_lock_current::@1#1] -- register_copy 
    // [364] phi (byte) play_lock_current::yp#2 = (byte) play_lock_current::yp#1 [phi:play_lock_current::@6->play_lock_current::@1#2] -- register_copy 
    jmp b1
    // play_lock_current::@7
  b7:
    // [380] (byte~) play_lock_current::i#9 ← (byte) play_lock_current::i#1 -- vbuz1=vbuz2 
    lda.z i
    sta.z i_9
    // [368] phi from play_lock_current::@7 to play_lock_current::@2 [phi:play_lock_current::@7->play_lock_current::@2]
    // [368] phi (byte) play_lock_current::c#2 = (byte) play_lock_current::c#1 [phi:play_lock_current::@7->play_lock_current::@2#0] -- register_copy 
    // [368] phi (byte) play_lock_current::xp#2 = (byte) play_lock_current::xp#1 [phi:play_lock_current::@7->play_lock_current::@2#1] -- register_copy 
    // [368] phi (byte) play_lock_current::i#2 = (byte~) play_lock_current::i#9 [phi:play_lock_current::@7->play_lock_current::@2#2] -- register_copy 
    jmp b2
}
  // keyboard_event_pressed
// Determine if a specific key is currently pressed based on the last keyboard_event_scan()
// Returns 0 is not pressed and non-0 if pressed
// keyboard_event_pressed(byte zeropage($12) keycode)
keyboard_event_pressed: {
    .label row_bits = $2e
    .label keycode = $12
    // keycode>>3
    // [382] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte) 3 -- vbuaa=vbuz1_ror_3 
    lda.z keycode
    lsr
    lsr
    lsr
    // row_bits = keyboard_scan_values[keycode>>3]
    // [383] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_scan_values,y
    sta.z row_bits
    // keycode&7
    // [384] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte) 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z keycode
    // row_bits & keyboard_matrix_col_bitmask[keycode&7]
    // [385] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_matrix_col_bitmask,y
    and.z row_bits
    // keyboard_event_pressed::@return
    // }
    // [386] return 
    rts
}
  // keyboard_event_get
// Get the next event from the keyboard event buffer.
// Returns $ff if there is no event waiting. As all events are <$7f it is enough to examine bit 7 when determining if there is any event to process.
// The buffer is filled by keyboard_event_scan()
keyboard_event_get: {
    // if(keyboard_events_size==0)
    // [387] if((byte) keyboard_events_size#13==(byte) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda.z keyboard_events_size
    cmp #0
    beq b1
    // keyboard_event_get::@1
    // return keyboard_events[--keyboard_events_size];
    // [388] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#13 -- vbuz1=_dec_vbuz1 
    dec.z keyboard_events_size
    // [389] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldy.z keyboard_events_size
    ldx keyboard_events,y
    // [390] phi from keyboard_event_get::@1 to keyboard_event_get::@return [phi:keyboard_event_get::@1->keyboard_event_get::@return]
    // [390] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@1->keyboard_event_get::@return#0] -- register_copy 
    // [390] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@1->keyboard_event_get::@return#1] -- register_copy 
    rts
    // [390] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  b1:
    // [390] phi (byte) keyboard_events_size#16 = (byte) keyboard_events_size#13 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
    // [390] phi (byte) keyboard_event_get::return#2 = (byte) $ff [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuxx=vbuc1 
    ldx #$ff
    // keyboard_event_get::@return
    // }
    // [391] return 
    rts
}
  // keyboard_event_scan
// Scans the entire matrix to determine which keys have been pressed/depressed.
// Generates keyboard events into the event buffer. Events can be read using keyboard_event_get().
// Handles debounce and only generates events when the status of a key changes.
// Also stores current status of modifiers in keyboard_modifiers.
keyboard_event_scan: {
    .label row_scan = $2f
    .label keycode = $21
    .label row = $20
    // [393] phi from keyboard_event_scan to keyboard_event_scan::@7 [phi:keyboard_event_scan->keyboard_event_scan::@7]
    // [393] phi (byte) keyboard_events_size#30 = (byte) keyboard_events_size#19 [phi:keyboard_event_scan->keyboard_event_scan::@7#0] -- register_copy 
    // [393] phi (byte) keyboard_event_scan::keycode#11 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#1] -- vbuz1=vbuc1 
    lda #0
    sta.z keycode
    // [393] phi (byte) keyboard_event_scan::row#2 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#2] -- vbuz1=vbuc1 
    sta.z row
    // [393] phi from keyboard_event_scan::@8 to keyboard_event_scan::@7 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7]
    // [393] phi (byte) keyboard_events_size#30 = (byte) keyboard_events_size#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#0] -- register_copy 
    // [393] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#1] -- register_copy 
    // [393] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#2] -- register_copy 
    // keyboard_event_scan::@7
  b7:
    // keyboard_matrix_read(row)
    // [394] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuxx=vbuz1 
    ldx.z row
    // [395] call keyboard_matrix_read 
    jsr keyboard_matrix_read
    // [396] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
    // keyboard_event_scan::@19
    // row_scan = keyboard_matrix_read(row)
    // [397] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuaa 
    sta.z row_scan
    // if(row_scan!=keyboard_scan_values[row])
    // [398] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    ldy.z row
    cmp keyboard_scan_values,y
    bne b5
    // keyboard_event_scan::@16
    // keycode = keycode + 8
    // [399] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z keycode
    axs #-[8]
    stx.z keycode
    // [400] phi from keyboard_event_scan::@15 keyboard_event_scan::@16 to keyboard_event_scan::@8 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8]
    // [400] phi (byte) keyboard_events_size#13 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#0] -- register_copy 
    // [400] phi (byte) keyboard_event_scan::keycode#13 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#1] -- register_copy 
    // keyboard_event_scan::@8
  b8:
    // for(byte row : 0..7)
    // [401] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc.z row
    // [402] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z row
    bne b7
    // [403] phi from keyboard_event_scan::@8 to keyboard_event_scan::@17 [phi:keyboard_event_scan::@8->keyboard_event_scan::@17]
    // keyboard_event_scan::@17
    // keyboard_event_pressed(KEY_LSHIFT)
    // [404] call keyboard_event_pressed 
    // [381] phi from keyboard_event_scan::@17 to keyboard_event_pressed [phi:keyboard_event_scan::@17->keyboard_event_pressed]
    // [381] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_LSHIFT#0 [phi:keyboard_event_scan::@17->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_LSHIFT)
    // [405] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11
    // keyboard_event_scan::@20
    // [406] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0
    // if(keyboard_event_pressed(KEY_LSHIFT)!= 0)
    // [407] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    // [408] phi from keyboard_event_scan::@20 to keyboard_event_scan::@18 [phi:keyboard_event_scan::@20->keyboard_event_scan::@18]
    // keyboard_event_scan::@18
    // [409] phi from keyboard_event_scan::@18 keyboard_event_scan::@20 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@18/keyboard_event_scan::@20->keyboard_event_scan::@1]
    // keyboard_event_scan::@1
    // keyboard_event_pressed(KEY_RSHIFT)
    // [410] call keyboard_event_pressed 
    // [381] phi from keyboard_event_scan::@1 to keyboard_event_pressed [phi:keyboard_event_scan::@1->keyboard_event_pressed]
    // [381] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_RSHIFT#0 [phi:keyboard_event_scan::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_RSHIFT)
    // [411] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11
    // keyboard_event_scan::@21
    // [412] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1
    // if(keyboard_event_pressed(KEY_RSHIFT)!= 0)
    // [413] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    // [414] phi from keyboard_event_scan::@21 to keyboard_event_scan::@4 [phi:keyboard_event_scan::@21->keyboard_event_scan::@4]
    // keyboard_event_scan::@4
    // [415] phi from keyboard_event_scan::@21 keyboard_event_scan::@4 to keyboard_event_scan::@2 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2]
    // keyboard_event_scan::@2
    // keyboard_event_pressed(KEY_CTRL)
    // [416] call keyboard_event_pressed 
    // [381] phi from keyboard_event_scan::@2 to keyboard_event_pressed [phi:keyboard_event_scan::@2->keyboard_event_pressed]
    // [381] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_CTRL#0 [phi:keyboard_event_scan::@2->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_CTRL)
    // [417] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11
    // keyboard_event_scan::@22
    // [418] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2
    // if(keyboard_event_pressed(KEY_CTRL)!= 0)
    // [419] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    // [420] phi from keyboard_event_scan::@22 to keyboard_event_scan::@5 [phi:keyboard_event_scan::@22->keyboard_event_scan::@5]
    // keyboard_event_scan::@5
    // [421] phi from keyboard_event_scan::@22 keyboard_event_scan::@5 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3]
    // keyboard_event_scan::@3
    // keyboard_event_pressed(KEY_COMMODORE)
    // [422] call keyboard_event_pressed 
    // [381] phi from keyboard_event_scan::@3 to keyboard_event_pressed [phi:keyboard_event_scan::@3->keyboard_event_pressed]
    // [381] phi (byte) keyboard_event_pressed::keycode#5 = (const byte) KEY_COMMODORE#0 [phi:keyboard_event_scan::@3->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_COMMODORE)
    // [423] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11
    // keyboard_event_scan::@23
    // [424] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#10
    // if(keyboard_event_pressed(KEY_COMMODORE)!= 0)
    // [425] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    // [426] phi from keyboard_event_scan::@23 to keyboard_event_scan::@6 [phi:keyboard_event_scan::@23->keyboard_event_scan::@6]
    // keyboard_event_scan::@6
    // keyboard_event_scan::@return
    // }
    // [427] return 
    rts
  // Something has changed on the keyboard row - check each column
    // [428] phi from keyboard_event_scan::@10 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9]
    // [428] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#29 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#0] -- register_copy 
    // [428] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#1] -- register_copy 
    // [428] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#2] -- register_copy 
    // [428] phi from keyboard_event_scan::@19 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9]
  b5:
    // [428] phi (byte) keyboard_events_size#10 = (byte) keyboard_events_size#30 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#0] -- register_copy 
    // [428] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#1] -- register_copy 
    // [428] phi (byte) keyboard_event_scan::col#2 = (byte) 0 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#2] -- vbuxx=vbuc1 
    ldx #0
    // keyboard_event_scan::@9
  b9:
    // row_scan^keyboard_scan_values[row]
    // [429] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) -- vbuaa=vbuz1_bxor_pbuc1_derefidx_vbuz2 
    lda.z row_scan
    ldy.z row
    eor keyboard_scan_values,y
    // (row_scan^keyboard_scan_values[row])&keyboard_matrix_col_bitmask[col]
    // [430] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuxx 
    and keyboard_matrix_col_bitmask,x
    // if(((row_scan^keyboard_scan_values[row])&keyboard_matrix_col_bitmask[col])!=0)
    // [431] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b10
    // keyboard_event_scan::@12
    // if(keyboard_events_size!=8)
    // [432] if((byte) keyboard_events_size#10==(byte) 8) goto keyboard_event_scan::@10 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z keyboard_events_size
    beq b10
    // keyboard_event_scan::@13
    // event_type = row_scan&keyboard_matrix_col_bitmask[col]
    // [433] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuxx 
    lda keyboard_matrix_col_bitmask,x
    and.z row_scan
    // if(event_type==0)
    // [434] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b11
    // keyboard_event_scan::@14
    // keyboard_events[keyboard_events_size++] = keycode
    // [435] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key pressed
    lda.z keycode
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // keyboard_events[keyboard_events_size++] = keycode;
    // [436] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    // [437] phi from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10]
    // [437] phi (byte) keyboard_events_size#29 = (byte) keyboard_events_size#1 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10#0] -- register_copy 
    // keyboard_event_scan::@10
  b10:
    // keycode++;
    // [438] (byte) keyboard_event_scan::keycode#14 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc.z keycode
    // for(byte col : 0..7)
    // [439] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuxx=_inc_vbuxx 
    inx
    // [440] if((byte) keyboard_event_scan::col#1!=(byte) 8) goto keyboard_event_scan::@9 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b9
    // keyboard_event_scan::@15
    // keyboard_scan_values[row] = row_scan
    // [441] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Store the current keyboard status for the row to debounce
    lda.z row_scan
    ldy.z row
    sta keyboard_scan_values,y
    jmp b8
    // keyboard_event_scan::@11
  b11:
    // keycode|$40
    // [442] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 -- vbuaa=vbuz1_bor_vbuc1 
    lda #$40
    ora.z keycode
    // keyboard_events[keyboard_events_size++] = keycode|$40
    // [443] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte~) keyboard_event_scan::$23 -- pbuc1_derefidx_vbuz1=vbuaa 
    // Key released
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // keyboard_events[keyboard_events_size++] = keycode|$40;
    // [444] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#10 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    jmp b10
}
  // keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable kill the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte register(X) rowid)
keyboard_matrix_read: {
    // *CIA1_PORT_A = keyboard_matrix_row_bitmask[rowid]
    // [445] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda keyboard_matrix_row_bitmask,x
    sta CIA1_PORT_A
    // ~*CIA1_PORT_B
    // [446] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    // keyboard_matrix_read::@return
    // }
    // [447] return 
    rts
}
  // render_show
// Update $D018 to show the current screen (used for double buffering)
render_show: {
    .const toD0181_return = (>(PLAYFIELD_SCREEN_1&$3fff)*4)|(>PLAYFIELD_CHARSET)/4&$f
    .const toD0182_return = (>(PLAYFIELD_SCREEN_2&$3fff)*4)|(>PLAYFIELD_CHARSET)/4&$f
    // if(render_screen_show==0)
    // [448] if((byte) render_screen_show#16==(byte) 0) goto render_show::toD0181 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_show
    cmp #0
    beq toD0181
    // [449] phi from render_show to render_show::toD0182 [phi:render_show->render_show::toD0182]
    // render_show::toD0182
    // [450] phi from render_show::toD0182 to render_show::@1 [phi:render_show::toD0182->render_show::@1]
    // [450] phi (byte) render_show::d018val#3 = (const byte) render_show::toD0182_return#0 [phi:render_show::toD0182->render_show::@1#0] -- vbuaa=vbuc1 
    lda #toD0182_return
    // render_show::@1
  b1:
    // *D018 = d018val
    // [451] *((const byte*) D018#0) ← (byte) render_show::d018val#3 -- _deref_pbuc1=vbuaa 
    sta D018
    // *BGCOL2 = PIECES_COLORS_1[level]
    // [452] *((const byte*) BGCOL2#0) ← *((const byte[]) PIECES_COLORS_1#0 + (byte) level#10) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy.z level
    lda PIECES_COLORS_1,y
    sta BGCOL2
    // *BGCOL3 = PIECES_COLORS_2[level]
    // [453] *((const byte*) BGCOL3#0) ← *((const byte[]) PIECES_COLORS_2#0 + (byte) level#10) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    lda PIECES_COLORS_2,y
    sta BGCOL3
    // render_screen_showing = render_screen_show
    // [454] (byte) render_screen_showing#1 ← (byte) render_screen_show#16 -- vbuz1=vbuz2 
    lda.z render_screen_show
    sta.z render_screen_showing
    // render_show::@return
    // }
    // [455] return 
    rts
    // [456] phi from render_show to render_show::toD0181 [phi:render_show->render_show::toD0181]
    // render_show::toD0181
  toD0181:
    // [450] phi from render_show::toD0181 to render_show::@1 [phi:render_show::toD0181->render_show::@1]
    // [450] phi (byte) render_show::d018val#3 = (const byte) render_show::toD0181_return#0 [phi:render_show::toD0181->render_show::@1#0] -- vbuaa=vbuc1 
    lda #toD0181_return
    jmp b1
}
  // play_init
// Initialize play data tables
play_init: {
    .label pli = $22
    .label idx = $14
    // [458] phi from play_init to play_init::@1 [phi:play_init->play_init::@1]
    // [458] phi (byte) play_init::idx#2 = (byte) 0 [phi:play_init->play_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [458] phi (byte*) play_init::pli#2 = (const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 [phi:play_init->play_init::@1#1] -- pbuz1=pbuc1 
    lda #<playfield
    sta.z pli
    lda #>playfield
    sta.z pli+1
    // [458] phi (byte) play_init::j#2 = (byte) 0 [phi:play_init->play_init::@1#2] -- vbuyy=vbuc1 
    ldy #0
    // [458] phi from play_init::@1 to play_init::@1 [phi:play_init::@1->play_init::@1]
    // [458] phi (byte) play_init::idx#2 = (byte) play_init::idx#1 [phi:play_init::@1->play_init::@1#0] -- register_copy 
    // [458] phi (byte*) play_init::pli#2 = (byte*) play_init::pli#1 [phi:play_init::@1->play_init::@1#1] -- register_copy 
    // [458] phi (byte) play_init::j#2 = (byte) play_init::j#1 [phi:play_init::@1->play_init::@1#2] -- register_copy 
    // play_init::@1
  b1:
    // playfield_lines[j] = pli
    // [459] (byte~) play_init::$4 ← (byte) play_init::j#2 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [460] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_init::$4) ← (byte*) play_init::pli#2 -- pptc1_derefidx_vbuxx=pbuz1 
    lda.z pli
    sta playfield_lines,x
    lda.z pli+1
    sta playfield_lines+1,x
    // playfield_lines_idx[j] = idx
    // [461] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) play_init::j#2) ← (byte) play_init::idx#2 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda.z idx
    sta playfield_lines_idx,y
    // pli += PLAYFIELD_COLS
    // [462] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const byte) PLAYFIELD_COLS#0 -- pbuz1=pbuz1_plus_vbuc1 
    lda #PLAYFIELD_COLS
    clc
    adc.z pli
    sta.z pli
    bcc !+
    inc.z pli+1
  !:
    // idx += PLAYFIELD_COLS
    // [463] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const byte) PLAYFIELD_COLS#0 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z idx
    axs #-[PLAYFIELD_COLS]
    stx.z idx
    // for(byte j:0..PLAYFIELD_LINES-1)
    // [464] (byte) play_init::j#1 ← ++ (byte) play_init::j#2 -- vbuyy=_inc_vbuyy 
    iny
    // [465] if((byte) play_init::j#1!=(const byte) PLAYFIELD_LINES#0-(byte) 1+(byte) 1) goto play_init::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #PLAYFIELD_LINES-1+1
    bne b1
    // play_init::@2
    // playfield_lines_idx[PLAYFIELD_LINES] = PLAYFIELD_COLS*PLAYFIELD_LINES
    // [466] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0 -- _deref_pbuc1=vbuc2 
    lda #PLAYFIELD_COLS*PLAYFIELD_LINES
    sta playfield_lines_idx+PLAYFIELD_LINES
    // current_movedown_slow = MOVEDOWN_SLOW_SPEEDS[level]
    // [467] (byte) current_movedown_slow#1 ← *((const byte[]) MOVEDOWN_SLOW_SPEEDS#0) -- vbuz1=_deref_pbuc1 
    // Set initial speed of moving down a tetromino
    lda MOVEDOWN_SLOW_SPEEDS
    sta.z current_movedown_slow
    // [468] phi from play_init::@2 to play_init::@3 [phi:play_init::@2->play_init::@3]
    // [468] phi (byte) play_init::b#2 = (byte) 0 [phi:play_init::@2->play_init::@3#0] -- vbuxx=vbuc1 
    ldx #0
  // Set the initial score add values
    // [468] phi from play_init::@3 to play_init::@3 [phi:play_init::@3->play_init::@3]
    // [468] phi (byte) play_init::b#2 = (byte) play_init::b#1 [phi:play_init::@3->play_init::@3#0] -- register_copy 
    // play_init::@3
  b3:
    // score_add_bcd[b] = SCORE_BASE_BCD[b]
    // [469] (byte~) play_init::$5 ← (byte) play_init::b#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
    // [470] *((const dword[5]) score_add_bcd#0 + (byte~) play_init::$5) ← *((const dword[]) SCORE_BASE_BCD#0 + (byte~) play_init::$5) -- pduc1_derefidx_vbuaa=pduc2_derefidx_vbuaa 
    tay
    lda SCORE_BASE_BCD,y
    sta score_add_bcd,y
    lda SCORE_BASE_BCD+1,y
    sta score_add_bcd+1,y
    lda SCORE_BASE_BCD+2,y
    sta score_add_bcd+2,y
    lda SCORE_BASE_BCD+3,y
    sta score_add_bcd+3,y
    // for(byte b: 0..4)
    // [471] (byte) play_init::b#1 ← ++ (byte) play_init::b#2 -- vbuxx=_inc_vbuxx 
    inx
    // [472] if((byte) play_init::b#1!=(byte) 5) goto play_init::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #5
    bne b3
    // play_init::@return
    // }
    // [473] return 
    rts
}
  // sprites_irq_init
// Setup the IRQ
sprites_irq_init: {
    // asm
    // asm { sei  }
    sei
    // *IRQ_STATUS = IRQ_RASTER
    // [475] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge any IRQ and setup the next one
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // asm
    // asm { ldaCIA1_INTERRUPT  }
    lda CIA1_INTERRUPT
    // *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
    // [477] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // *PROCPORT = PROCPORT_RAM_IO
    // [478] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // *CIA1_INTERRUPT = CIA_INTERRUPT_CLEAR
    // [479] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
    // *VIC_CONTROL &=$7f
    // [480] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
    // *RASTER = IRQ_RASTER_FIRST
    // [481] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0 -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER_FIRST
    sta RASTER
    // *IRQ_ENABLE = IRQ_RASTER
    // [482] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // *HARDWARE_IRQ = &sprites_irq
    // [483] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_CLOBBER)(void()) sprites_irq() -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<sprites_irq
    sta HARDWARE_IRQ
    lda #>sprites_irq
    sta HARDWARE_IRQ+1
    // asm
    // asm { cli  }
    cli
    // sprites_irq_init::@return
    // }
    // [485] return 
    rts
}
  // sprites_init
// Setup the sprites
sprites_init: {
    .label xpos = $15
    // *SPRITES_ENABLE = %00001111
    // [486] *((const byte*) SPRITES_ENABLE#0) ← (byte) $f -- _deref_pbuc1=vbuc2 
    lda #$f
    sta SPRITES_ENABLE
    // *SPRITES_MC = 0
    // [487] *((const byte*) SPRITES_MC#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
    // *SPRITES_EXPAND_Y = *SPRITES_MC = 0
    // [488] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0) -- _deref_pbuc1=_deref_pbuc2 
    sta SPRITES_EXPAND_Y
    // *SPRITES_EXPAND_X = *SPRITES_EXPAND_Y = *SPRITES_MC = 0
    // [489] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0) -- _deref_pbuc1=_deref_pbuc2 
    sta SPRITES_EXPAND_X
    // [490] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
    // [490] phi (byte) sprites_init::xpos#2 = (byte)(number) $18+(number) $f*(number) 8 [phi:sprites_init->sprites_init::@1#0] -- vbuz1=vbuc1 
    lda #$18+$f*8
    sta.z xpos
    // [490] phi (byte) sprites_init::s#2 = (byte) 0 [phi:sprites_init->sprites_init::@1#1] -- vbuyy=vbuc1 
    ldy #0
    // [490] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
    // [490] phi (byte) sprites_init::xpos#2 = (byte) sprites_init::xpos#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
    // [490] phi (byte) sprites_init::s#2 = (byte) sprites_init::s#1 [phi:sprites_init::@1->sprites_init::@1#1] -- register_copy 
    // sprites_init::@1
  b1:
    // s2 = s*2
    // [491] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // SPRITES_XPOS[s2] = xpos
    // [492] *((const byte*) SPRITES_XPOS#0 + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z xpos
    sta SPRITES_XPOS,x
    // SPRITES_COLS[s] = BLACK
    // [493] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::s#2) ← (const byte) BLACK#0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #BLACK
    sta SPRITES_COLS,y
    // xpos = xpos+24
    // [494] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte) $18 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z xpos
    axs #-[$18]
    stx.z xpos
    // for(byte s:0..3)
    // [495] (byte) sprites_init::s#1 ← ++ (byte) sprites_init::s#2 -- vbuyy=_inc_vbuyy 
    iny
    // [496] if((byte) sprites_init::s#1!=(byte) 4) goto sprites_init::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #4
    bne b1
    // sprites_init::@return
    // }
    // [497] return 
    rts
}
  // render_init
// Initialize rendering
render_init: {
    .const vicSelectGfxBank1_toDd001_return = 3
    .label li_1 = $16
    .label li_2 = $2c
    // render_init::vicSelectGfxBank1
    // *CIA2_PORT_A_DDR = %00000011
    // [499] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
    // [500] phi from render_init::vicSelectGfxBank1 to render_init::vicSelectGfxBank1_toDd001 [phi:render_init::vicSelectGfxBank1->render_init::vicSelectGfxBank1_toDd001]
    // render_init::vicSelectGfxBank1_toDd001
    // render_init::vicSelectGfxBank1_@1
    // *CIA2_PORT_A = toDd00(gfx)
    // [501] *((const byte*) CIA2_PORT_A#0) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2_PORT_A
    // render_init::@2
    // *D011 = VIC_ECM | VIC_DEN | VIC_RSEL | 3
    // [502] *((const byte*) D011#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte) 3 -- _deref_pbuc1=vbuc2 
    // Enable Extended Background Color Mode
    lda #VIC_ECM|VIC_DEN|VIC_RSEL|3
    sta D011
    // *BORDERCOL = BLACK
    // [503] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    // *BGCOL1 = BLACK
    // [504] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0 -- _deref_pbuc1=vbuc2 
    sta BGCOL1
    // *BGCOL2 = PIECES_COLORS_1[0]
    // [505] *((const byte*) BGCOL2#0) ← *((const byte[]) PIECES_COLORS_1#0) -- _deref_pbuc1=_deref_pbuc2 
    lda PIECES_COLORS_1
    sta BGCOL2
    // *BGCOL3 = PIECES_COLORS_2[0]
    // [506] *((const byte*) BGCOL3#0) ← *((const byte[]) PIECES_COLORS_2#0) -- _deref_pbuc1=_deref_pbuc2 
    lda PIECES_COLORS_2
    sta BGCOL3
    // *BGCOL4 = GREY
    // [507] *((const byte*) BGCOL4#0) ← (const byte) GREY#0 -- _deref_pbuc1=vbuc2 
    lda #GREY
    sta BGCOL4
    // render_screen_original(PLAYFIELD_SCREEN_1)
    // [508] call render_screen_original 
    // [520] phi from render_init::@2 to render_screen_original [phi:render_init::@2->render_screen_original]
    // [520] phi (byte*) render_screen_original::screen#9 = (const byte*) PLAYFIELD_SCREEN_1#0 [phi:render_init::@2->render_screen_original#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1
    sta.z render_screen_original.screen
    lda #>PLAYFIELD_SCREEN_1
    sta.z render_screen_original.screen+1
    jsr render_screen_original
    // [509] phi from render_init::@2 to render_init::@3 [phi:render_init::@2->render_init::@3]
    // render_init::@3
    // render_screen_original(PLAYFIELD_SCREEN_2)
    // [510] call render_screen_original 
    // [520] phi from render_init::@3 to render_screen_original [phi:render_init::@3->render_screen_original]
    // [520] phi (byte*) render_screen_original::screen#9 = (const byte*) PLAYFIELD_SCREEN_2#0 [phi:render_init::@3->render_screen_original#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2
    sta.z render_screen_original.screen
    lda #>PLAYFIELD_SCREEN_2
    sta.z render_screen_original.screen+1
    jsr render_screen_original
    // [511] phi from render_init::@3 to render_init::@1 [phi:render_init::@3->render_init::@1]
    // [511] phi (byte*) render_init::li_2#2 = (const byte*) PLAYFIELD_SCREEN_2#0+(byte)(number) 2*(number) $28+(byte) $10 [phi:render_init::@3->render_init::@1#0] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_2+2*$28+$10
    sta.z li_2
    lda #>PLAYFIELD_SCREEN_2+2*$28+$10
    sta.z li_2+1
    // [511] phi (byte*) render_init::li_1#2 = (const byte*) PLAYFIELD_SCREEN_1#0+(byte)(number) 2*(number) $28+(byte) $10 [phi:render_init::@3->render_init::@1#1] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_1+2*$28+$10
    sta.z li_1
    lda #>PLAYFIELD_SCREEN_1+2*$28+$10
    sta.z li_1+1
    // [511] phi (byte) render_init::i#2 = (byte) 0 [phi:render_init::@3->render_init::@1#2] -- vbuyy=vbuc1 
    ldy #0
    // [511] phi from render_init::@1 to render_init::@1 [phi:render_init::@1->render_init::@1]
    // [511] phi (byte*) render_init::li_2#2 = (byte*) render_init::li_2#1 [phi:render_init::@1->render_init::@1#0] -- register_copy 
    // [511] phi (byte*) render_init::li_1#2 = (byte*) render_init::li_1#1 [phi:render_init::@1->render_init::@1#1] -- register_copy 
    // [511] phi (byte) render_init::i#2 = (byte) render_init::i#1 [phi:render_init::@1->render_init::@1#2] -- register_copy 
    // render_init::@1
  b1:
    // screen_lines_1[i] = li_1
    // [512] (byte~) render_init::$13 ← (byte) render_init::i#2 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [513] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_init::$13) ← (byte*) render_init::li_1#2 -- pptc1_derefidx_vbuxx=pbuz1 
    lda.z li_1
    sta screen_lines_1,x
    lda.z li_1+1
    sta screen_lines_1+1,x
    // screen_lines_2[i] = li_2
    // [514] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 + (byte~) render_init::$13) ← (byte*) render_init::li_2#2 -- pptc1_derefidx_vbuxx=pbuz1 
    lda.z li_2
    sta screen_lines_2,x
    lda.z li_2+1
    sta screen_lines_2+1,x
    // li_1 += 40
    // [515] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z li_1
    sta.z li_1
    bcc !+
    inc.z li_1+1
  !:
    // li_2 += 40
    // [516] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z li_2
    sta.z li_2
    bcc !+
    inc.z li_2+1
  !:
    // for(byte i:0..PLAYFIELD_LINES-1)
    // [517] (byte) render_init::i#1 ← ++ (byte) render_init::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [518] if((byte) render_init::i#1!=(const byte) PLAYFIELD_LINES#0-(byte) 1+(byte) 1) goto render_init::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #PLAYFIELD_LINES-1+1
    bne b1
    // render_init::@return
    // }
    // [519] return 
    rts
}
  // render_screen_original
// Copy the original screen data to the passed screen
// Also copies colors to $d800
// render_screen_original(byte* zeropage($24) screen)
render_screen_original: {
    .const SPACE = 0
    .label screen = $24
    .label cols = $2c
    .label oscr = $19
    .label ocols = $22
    .label y = $18
    // [521] phi from render_screen_original to render_screen_original::@1 [phi:render_screen_original->render_screen_original::@1]
    // [521] phi (byte) render_screen_original::y#6 = (byte) 0 [phi:render_screen_original->render_screen_original::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [521] phi (byte*) render_screen_original::ocols#4 = (const byte*) PLAYFIELD_COLORS_ORIGINAL#0+(byte)(number) $20*(number) 2 [phi:render_screen_original->render_screen_original::@1#1] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_COLORS_ORIGINAL+$20*2
    sta.z ocols
    lda #>PLAYFIELD_COLORS_ORIGINAL+$20*2
    sta.z ocols+1
    // [521] phi (byte*) render_screen_original::oscr#4 = (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0+(byte)(number) $20*(number) 2 [phi:render_screen_original->render_screen_original::@1#2] -- pbuz1=pbuc1 
    lda #<PLAYFIELD_SCREEN_ORIGINAL+$20*2
    sta.z oscr
    lda #>PLAYFIELD_SCREEN_ORIGINAL+$20*2
    sta.z oscr+1
    // [521] phi (byte*) render_screen_original::cols#7 = (const byte*) COLS#0 [phi:render_screen_original->render_screen_original::@1#3] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z cols
    lda #>COLS
    sta.z cols+1
    // [521] phi (byte*) render_screen_original::screen#8 = (byte*) render_screen_original::screen#9 [phi:render_screen_original->render_screen_original::@1#4] -- register_copy 
    // [521] phi from render_screen_original::@5 to render_screen_original::@1 [phi:render_screen_original::@5->render_screen_original::@1]
    // [521] phi (byte) render_screen_original::y#6 = (byte) render_screen_original::y#1 [phi:render_screen_original::@5->render_screen_original::@1#0] -- register_copy 
    // [521] phi (byte*) render_screen_original::ocols#4 = (byte*) render_screen_original::ocols#1 [phi:render_screen_original::@5->render_screen_original::@1#1] -- register_copy 
    // [521] phi (byte*) render_screen_original::oscr#4 = (byte*) render_screen_original::oscr#1 [phi:render_screen_original::@5->render_screen_original::@1#2] -- register_copy 
    // [521] phi (byte*) render_screen_original::cols#7 = (byte*) render_screen_original::cols#3 [phi:render_screen_original::@5->render_screen_original::@1#3] -- register_copy 
    // [521] phi (byte*) render_screen_original::screen#8 = (byte*) render_screen_original::screen#10 [phi:render_screen_original::@5->render_screen_original::@1#4] -- register_copy 
    // render_screen_original::@1
  b1:
    // [522] phi from render_screen_original::@1 to render_screen_original::@2 [phi:render_screen_original::@1->render_screen_original::@2]
    // [522] phi (byte) render_screen_original::x#4 = (byte) 0 [phi:render_screen_original::@1->render_screen_original::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [522] phi (byte*) render_screen_original::cols#4 = (byte*) render_screen_original::cols#7 [phi:render_screen_original::@1->render_screen_original::@2#1] -- register_copy 
    // [522] phi (byte*) render_screen_original::screen#5 = (byte*) render_screen_original::screen#8 [phi:render_screen_original::@1->render_screen_original::@2#2] -- register_copy 
    // [522] phi from render_screen_original::@2 to render_screen_original::@2 [phi:render_screen_original::@2->render_screen_original::@2]
    // [522] phi (byte) render_screen_original::x#4 = (byte) render_screen_original::x#1 [phi:render_screen_original::@2->render_screen_original::@2#0] -- register_copy 
    // [522] phi (byte*) render_screen_original::cols#4 = (byte*) render_screen_original::cols#1 [phi:render_screen_original::@2->render_screen_original::@2#1] -- register_copy 
    // [522] phi (byte*) render_screen_original::screen#5 = (byte*) render_screen_original::screen#2 [phi:render_screen_original::@2->render_screen_original::@2#2] -- register_copy 
    // render_screen_original::@2
  b2:
    // *screen++ = SPACE
    // [523] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE#0 -- _deref_pbuz1=vbuc1 
    lda #SPACE
    ldy #0
    sta (screen),y
    // *screen++ = SPACE;
    // [524] (byte*) render_screen_original::screen#2 ← ++ (byte*) render_screen_original::screen#5 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // *cols++ = BLACK
    // [525] *((byte*) render_screen_original::cols#4) ← (const byte) BLACK#0 -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (cols),y
    // *cols++ = BLACK;
    // [526] (byte*) render_screen_original::cols#1 ← ++ (byte*) render_screen_original::cols#4 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // while(++x!=4)
    // [527] (byte) render_screen_original::x#1 ← ++ (byte) render_screen_original::x#4 -- vbuxx=_inc_vbuxx 
    inx
    // [528] if((byte) render_screen_original::x#1!=(byte) 4) goto render_screen_original::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne b2
    // [529] phi from render_screen_original::@2 render_screen_original::@3 to render_screen_original::@3 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3]
    // [529] phi (byte) render_screen_original::x#5 = (byte) render_screen_original::x#1 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#0] -- register_copy 
    // [529] phi (byte*) render_screen_original::cols#5 = (byte*) render_screen_original::cols#1 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#1] -- register_copy 
    // [529] phi (byte*) render_screen_original::ocols#2 = (byte*) render_screen_original::ocols#4 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#2] -- register_copy 
    // [529] phi (byte*) render_screen_original::screen#6 = (byte*) render_screen_original::screen#2 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#3] -- register_copy 
    // [529] phi (byte*) render_screen_original::oscr#2 = (byte*) render_screen_original::oscr#4 [phi:render_screen_original::@2/render_screen_original::@3->render_screen_original::@3#4] -- register_copy 
    // render_screen_original::@3
  b3:
    // *screen++ = *oscr++
    // [530] *((byte*) render_screen_original::screen#6) ← *((byte*) render_screen_original::oscr#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (oscr),y
    sta (screen),y
    // *screen++ = *oscr++;
    // [531] (byte*) render_screen_original::screen#3 ← ++ (byte*) render_screen_original::screen#6 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [532] (byte*) render_screen_original::oscr#1 ← ++ (byte*) render_screen_original::oscr#2 -- pbuz1=_inc_pbuz1 
    inc.z oscr
    bne !+
    inc.z oscr+1
  !:
    // *cols++ = *ocols++
    // [533] *((byte*) render_screen_original::cols#5) ← *((byte*) render_screen_original::ocols#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (ocols),y
    sta (cols),y
    // *cols++ = *ocols++;
    // [534] (byte*) render_screen_original::cols#2 ← ++ (byte*) render_screen_original::cols#5 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // [535] (byte*) render_screen_original::ocols#1 ← ++ (byte*) render_screen_original::ocols#2 -- pbuz1=_inc_pbuz1 
    inc.z ocols
    bne !+
    inc.z ocols+1
  !:
    // while(++x!=36)
    // [536] (byte) render_screen_original::x#2 ← ++ (byte) render_screen_original::x#5 -- vbuxx=_inc_vbuxx 
    inx
    // [537] if((byte) render_screen_original::x#2!=(byte) $24) goto render_screen_original::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$24
    bne b3
    // [538] phi from render_screen_original::@3 render_screen_original::@4 to render_screen_original::@4 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4]
    // [538] phi (byte) render_screen_original::x#6 = (byte) render_screen_original::x#2 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4#0] -- register_copy 
    // [538] phi (byte*) render_screen_original::cols#6 = (byte*) render_screen_original::cols#2 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4#1] -- register_copy 
    // [538] phi (byte*) render_screen_original::screen#7 = (byte*) render_screen_original::screen#3 [phi:render_screen_original::@3/render_screen_original::@4->render_screen_original::@4#2] -- register_copy 
    // render_screen_original::@4
  b4:
    // *screen++ = SPACE
    // [539] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE#0 -- _deref_pbuz1=vbuc1 
    lda #SPACE
    ldy #0
    sta (screen),y
    // *screen++ = SPACE;
    // [540] (byte*) render_screen_original::screen#10 ← ++ (byte*) render_screen_original::screen#7 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // *cols++ = BLACK
    // [541] *((byte*) render_screen_original::cols#6) ← (const byte) BLACK#0 -- _deref_pbuz1=vbuc1 
    lda #BLACK
    ldy #0
    sta (cols),y
    // *cols++ = BLACK;
    // [542] (byte*) render_screen_original::cols#3 ← ++ (byte*) render_screen_original::cols#6 -- pbuz1=_inc_pbuz1 
    inc.z cols
    bne !+
    inc.z cols+1
  !:
    // while(++x!=40)
    // [543] (byte) render_screen_original::x#3 ← ++ (byte) render_screen_original::x#6 -- vbuxx=_inc_vbuxx 
    inx
    // [544] if((byte) render_screen_original::x#3!=(byte) $28) goto render_screen_original::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b4
    // render_screen_original::@5
    // for(byte y:0..24)
    // [545] (byte) render_screen_original::y#1 ← ++ (byte) render_screen_original::y#6 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [546] if((byte) render_screen_original::y#1!=(byte) $19) goto render_screen_original::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z y
    bne b1
    // render_screen_original::@return
    // }
    // [547] return 
    rts
}
  // sid_rnd_init
// Initialize SID voice 3 for random number generation
sid_rnd_init: {
    // *SID_VOICE3_FREQ = $ffff
    // [548] *((const word*) SID_VOICE3_FREQ#0) ← (word) $ffff -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID_VOICE3_FREQ
    lda #>$ffff
    sta SID_VOICE3_FREQ+1
    // *SID_VOICE3_CONTROL = SID_CONTROL_NOISE
    // [549] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0 -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID_VOICE3_CONTROL
    // sid_rnd_init::@return
    // }
    // [550] return 
    rts
}
  // sprites_irq
// Raster Interrupt Routine - sets up the sprites covering the playfield
// Repeats 10 timers every 2 lines from line IRQ_RASTER_FIRST
// Utilizes duplicated gfx in the sprites to allow for some leeway in updating the sprite pointers
sprites_irq: {
    .const toSpritePtr2_return = PLAYFIELD_SPRITES/$40
    .label raster_sprite_gfx_modify = $1b
    // entry interrupt(HARDWARE_CLOBBER)
    sta rega+1
    stx regx+1
    // asm
    // asm { cld  }
    //(*BGCOL)++;
    // Clear decimal flag (because it is used by the score algorithm)
    cld
    // ypos = irq_sprite_ypos
    // [552] (byte) sprites_irq::ypos#0 ← (byte) irq_sprite_ypos#0 -- vbuaa=vbuz1 
    // Place the sprites
    lda.z irq_sprite_ypos
    // SPRITES_YPOS[0] = ypos
    // [553] *((const byte*) SPRITES_YPOS#0) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS
    // SPRITES_YPOS[2] = ypos
    // [554] *((const byte*) SPRITES_YPOS#0+(byte) 2) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+2
    // SPRITES_YPOS[4] = ypos
    // [555] *((const byte*) SPRITES_YPOS#0+(byte) 4) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+4
    // SPRITES_YPOS[6] = ypos
    // [556] *((const byte*) SPRITES_YPOS#0+(byte) 6) ← (byte) sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+6
    // irq_raster_next+1
    // [557] (byte~) sprites_irq::$0 ← (byte) irq_raster_next#0 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z irq_raster_next
    inx
    // raster_sprite_gfx_modify = irq_raster_next+1
    // [558] (byte) sprites_irq::raster_sprite_gfx_modify#0 ← (byte~) sprites_irq::$0 -- vbuz1=vbuxx 
    // Wait for the y-position before changing sprite pointers
    stx.z raster_sprite_gfx_modify
    // sprites_irq::@8
  b8:
    // while(*RASTER<raster_sprite_gfx_modify)
    // [559] if(*((const byte*) RASTER#0)<(byte) sprites_irq::raster_sprite_gfx_modify#0) goto sprites_irq::@8 -- _deref_pbuc1_lt_vbuz1_then_la1 
    lda RASTER
    cmp.z raster_sprite_gfx_modify
    bcc b8
    // sprites_irq::@9
    // ptr = irq_sprite_ptr
    // [560] (byte) sprites_irq::ptr#0 ← (byte) irq_sprite_ptr#0 -- vbuxx=vbuz1 
    ldx.z irq_sprite_ptr
    // if(render_screen_showing==0)
    // [561] if((byte) render_screen_showing#0==(byte) 0) goto sprites_irq::@1 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_showing
    cmp #0
    beq b1
    // sprites_irq::@10
    // PLAYFIELD_SPRITE_PTRS_2[0] = ptr++
    // [562] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0) ← (byte) sprites_irq::ptr#0 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_2
    // PLAYFIELD_SPRITE_PTRS_2[0] = ptr++;
    // [563] (byte) sprites_irq::ptr#3 ← ++ (byte) sprites_irq::ptr#0 -- vbuaa=_inc_vbuxx 
    inx
    txa
    // PLAYFIELD_SPRITE_PTRS_2[1] = ptr
    // [564] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte) 1) ← (byte) sprites_irq::ptr#3 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_2+1
    // PLAYFIELD_SPRITE_PTRS_2[2] = ptr++
    // [565] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte) 2) ← (byte) sprites_irq::ptr#3 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_2+2
    // PLAYFIELD_SPRITE_PTRS_2[2] = ptr++;
    // [566] (byte) sprites_irq::ptr#4 ← ++ (byte) sprites_irq::ptr#3 -- vbuaa=_inc_vbuaa 
    clc
    adc #1
    // PLAYFIELD_SPRITE_PTRS_2[3] = ptr
    // [567] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte) 3) ← (byte) sprites_irq::ptr#4 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_2+3
    // sprites_irq::@2
  b2:
    // ++irq_cnt;
    // [568] (byte) irq_cnt#1 ← ++ (byte) irq_cnt#0 -- vbuz1=_inc_vbuz1 
    inc.z irq_cnt
    // if(irq_cnt==9)
    // [569] if((byte) irq_cnt#1==(byte) 9) goto sprites_irq::@3 -- vbuz1_eq_vbuc1_then_la1 
    lda #9
    cmp.z irq_cnt
    beq b3
    // sprites_irq::@6
    // if(irq_cnt==10)
    // [570] if((byte) irq_cnt#1==(byte) $a) goto sprites_irq::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #$a
    cmp.z irq_cnt
    beq b4
    // sprites_irq::@7
    // irq_raster_next += 20
    // [571] (byte) irq_raster_next#3 ← (byte) irq_raster_next#0 + (byte) $14 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_raster_next
    axs #-[$14]
    stx.z irq_raster_next
    // irq_sprite_ypos += 21
    // [572] (byte) irq_sprite_ypos#3 ← (byte) irq_sprite_ypos#0 + (byte) $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ypos
    axs #-[$15]
    stx.z irq_sprite_ypos
    // irq_sprite_ptr += 3
    // [573] (byte) irq_sprite_ptr#3 ← (byte) irq_sprite_ptr#0 + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ptr
    axs #-[3]
    stx.z irq_sprite_ptr
    // [574] phi from sprites_irq::@11 sprites_irq::@4 sprites_irq::@7 to sprites_irq::@5 [phi:sprites_irq::@11/sprites_irq::@4/sprites_irq::@7->sprites_irq::@5]
    // [574] phi (byte) irq_sprite_ptr#11 = (byte) irq_sprite_ptr#1 [phi:sprites_irq::@11/sprites_irq::@4/sprites_irq::@7->sprites_irq::@5#0] -- register_copy 
    // [574] phi (byte) irq_sprite_ypos#11 = (byte) irq_sprite_ypos#1 [phi:sprites_irq::@11/sprites_irq::@4/sprites_irq::@7->sprites_irq::@5#1] -- register_copy 
    // [574] phi (byte) irq_cnt#3 = (byte) irq_cnt#1 [phi:sprites_irq::@11/sprites_irq::@4/sprites_irq::@7->sprites_irq::@5#2] -- register_copy 
    // [574] phi (byte) irq_raster_next#4 = (byte) irq_raster_next#1 [phi:sprites_irq::@11/sprites_irq::@4/sprites_irq::@7->sprites_irq::@5#3] -- register_copy 
    // sprites_irq::@5
  b5:
    // *RASTER = irq_raster_next
    // [575] *((const byte*) RASTER#0) ← (byte) irq_raster_next#4 -- _deref_pbuc1=vbuz1 
    // Setup next interrupt
    lda.z irq_raster_next
    sta RASTER
    // *IRQ_STATUS = IRQ_RASTER
    // [576] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ and setup the next one
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // sprites_irq::@return
    // }
    // [577] return  - exit interrupt(HARDWARE_CLOBBER)
  rega:
    lda #00
  regx:
    ldx #00
    rti
    // sprites_irq::@4
  b4:
    // irq_cnt = 0
    // [578] (byte) irq_cnt#2 ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z irq_cnt
    // irq_raster_next = IRQ_RASTER_FIRST
    // [579] (byte) irq_raster_next#2 ← (const byte) IRQ_RASTER_FIRST#0 -- vbuz1=vbuc1 
    lda #IRQ_RASTER_FIRST
    sta.z irq_raster_next
    // irq_sprite_ypos += 21
    // [580] (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#0 + (byte) $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ypos
    axs #-[$15]
    stx.z irq_sprite_ypos
    // irq_sprite_ptr += 3
    // [581] (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#0 + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ptr
    axs #-[3]
    stx.z irq_sprite_ptr
    jmp b5
    // sprites_irq::@3
  b3:
    // irq_raster_next += 21
    // [582] (byte) irq_raster_next#1 ← (byte) irq_raster_next#0 + (byte) $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_raster_next
    axs #-[$15]
    stx.z irq_raster_next
    // irq_sprite_ypos = SPRITES_FIRST_YPOS
    // [583] (byte) irq_sprite_ypos#1 ← (const byte) SPRITES_FIRST_YPOS#0 -- vbuz1=vbuc1 
    lda #SPRITES_FIRST_YPOS
    sta.z irq_sprite_ypos
    // [584] phi from sprites_irq::@3 to sprites_irq::toSpritePtr2 [phi:sprites_irq::@3->sprites_irq::toSpritePtr2]
    // sprites_irq::toSpritePtr2
    // sprites_irq::@11
    // irq_sprite_ptr = toSpritePtr(PLAYFIELD_SPRITES)
    // [585] (byte) irq_sprite_ptr#1 ← (const byte) sprites_irq::toSpritePtr2_return#0 -- vbuz1=vbuc1 
    lda #toSpritePtr2_return
    sta.z irq_sprite_ptr
    jmp b5
    // sprites_irq::@1
  b1:
    // PLAYFIELD_SPRITE_PTRS_1[0] = ptr++
    // [586] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0) ← (byte) sprites_irq::ptr#0 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1
    // PLAYFIELD_SPRITE_PTRS_1[0] = ptr++;
    // [587] (byte) sprites_irq::ptr#1 ← ++ (byte) sprites_irq::ptr#0 -- vbuxx=_inc_vbuxx 
    inx
    // PLAYFIELD_SPRITE_PTRS_1[1] = ptr
    // [588] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte) 1) ← (byte) sprites_irq::ptr#1 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1+1
    // PLAYFIELD_SPRITE_PTRS_1[2] = ptr++
    // [589] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte) 2) ← (byte) sprites_irq::ptr#1 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1+2
    // PLAYFIELD_SPRITE_PTRS_1[2] = ptr++;
    // [590] (byte) sprites_irq::ptr#2 ← ++ (byte) sprites_irq::ptr#1 -- vbuaa=_inc_vbuxx 
    inx
    txa
    // PLAYFIELD_SPRITE_PTRS_1[3] = ptr
    // [591] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte) 3) ← (byte) sprites_irq::ptr#2 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_1+3
    jmp b2
}
  // File Data
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Keyboard event buffer. Contains keycodes for key presses/releases. Presses are represented by the keycode. Releases by keycode | $40. The buffer is filled by keyboard_scan()
  keyboard_events: .fill 8, 0
  // The values scanned values for each row. Set by keyboard_scan() and used by keyboard_get_event()
  keyboard_scan_values: .fill 8, 0
  // The T-piece
  .align $40
  PIECE_T: .byte 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0
  // The S-piece
  .align $40
  PIECE_S: .byte 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0
  // The Z-piece
  .align $40
  PIECE_Z: .byte 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0
  // The L-piece
  .align $40
  PIECE_L: .byte 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0
  // The J-piece
  .align $40
  PIECE_J: .byte 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
  // The O-piece
  .align $40
  PIECE_O: .byte 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0
  // The I-piece
  .align $40
  PIECE_I: .byte 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0
  // The chars to use for the different pieces - when inside the playing area
  PIECES_CHARS: .byte $65, $66, $a6, $66, $65, $65, $a6
  // The chars to use for the different pieces - when outside the playing area (eg. the next area).
  PIECES_NEXT_CHARS: .byte $63, $64, $a4, $64, $63, $63, $a4
  // The initial X/Y for each piece
  PIECES_START_X: .byte 4, 4, 4, 4, 4, 4, 4
  PIECES_START_Y: .byte 1, 1, 1, 1, 1, 0, 1
  // The speed of moving down the piece when soft-drop is not activated
  // This array holds the number of frames per move by level (0-29). For all levels 29+ the value is 1.
  MOVEDOWN_SLOW_SPEEDS: .byte $30, $2b, $26, $21, $1c, $17, $12, $d, 8, 6, 5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1
  // Base Score values for removing 0-4 lines (in BCD)
  // These values are added to score_add_bcd for each level gained.
  SCORE_BASE_BCD: .dword 0, $40, $100, $300, $1200
  // Score values for removing 0-4 lines (in BCD)
  // These values are updated based on the players level and the base values from SCORE_BASE_BCD
  score_add_bcd: .fill 4*5, 0
  // The color #1 to use for the pieces for each level
  PIECES_COLORS_1: .byte BLUE, GREEN, PURPLE, BLUE, RED, LIGHT_GREEN, RED, BLUE, LIGHT_BLUE, RED, BLUE, GREEN, PURPLE, BLUE, RED, LIGHT_GREEN, RED, BLUE, LIGHT_BLUE, RED, BLUE, GREEN, PURPLE, BLUE, RED, LIGHT_GREEN, RED, BLUE, LIGHT_BLUE, RED
  // The color #2 to use for the pieces for each level
  PIECES_COLORS_2: .byte CYAN, LIGHT_GREEN, PINK, LIGHT_GREEN, LIGHT_GREEN, LIGHT_BLUE, DARK_GREY, PURPLE, RED, ORANGE, CYAN, LIGHT_GREEN, PINK, LIGHT_GREEN, LIGHT_GREEN, LIGHT_BLUE, DARK_GREY, PURPLE, RED, ORANGE, CYAN, LIGHT_GREEN, PINK, LIGHT_GREEN, LIGHT_GREEN, LIGHT_BLUE, DARK_GREY, PURPLE, RED, ORANGE
  // Pointers to the screen address for rendering each playfield line
  // The lines for screen 1 is aligned with $80 and screen 2 with $40 - so XOR'ing with $40 gives screen 2 lines.
  .align $80
  screen_lines_1: .fill 2*PLAYFIELD_LINES, 0
  .align $40
  screen_lines_2: .fill 2*PLAYFIELD_LINES, 0
  // Pointers to the playfield address for each playfield line
  playfield_lines: .fill 2*PLAYFIELD_LINES, 0
  // The playfield.  0 is empty non-zero is color.
  // The playfield is layed out line by line, meaning the first 10 bytes are line 1, the next 10 line 2 and so forth,
  playfield: .fill PLAYFIELD_LINES*PLAYFIELD_COLS, 0
  // The different pieces
  PIECES: .word PIECE_T, PIECE_S, PIECE_Z, PIECE_J, PIECE_O, PIECE_I, PIECE_L
  // Indixes into the playfield  for each playfield line
  playfield_lines_idx: .fill PLAYFIELD_LINES+1, 0
.pc = PLAYFIELD_CHARSET "PLAYFIELD_CHARSET"
  .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "playfield-screen.imap"

.pc = PLAYFIELD_SCREEN_ORIGINAL "PLAYFIELD_SCREEN_ORIGINAL"
  // Load chars for the screen
  .var screen = LoadBinary("playfield-screen.iscr")
   // Load extended colors for the screen
  .var extended = LoadBinary("playfield-extended.col")
  // screen.get(i)+1 because the charset is loaded into PLAYFIELD_CHARSET+8
  // extended.get(i)-1 because the extended colors are 1-based (1/2/3/4)
  // <<6 to move extended colors to the upper 2 bits
  .fill screen.getSize(), ( (screen.get(i)+1) | (extended.get(i)-1)<<6 )

.pc = PLAYFIELD_COLORS_ORIGINAL "PLAYFIELD_COLORS_ORIGINAL"
  .import binary "playfield-screen.col"

.pc = PLAYFIELD_SPRITES "PLAYFIELD_SPRITES"
  .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000))
	// Put the sprites into memory 
	.for(var sy=0;sy<10;sy++) {
	    .var sprite_gfx_y = sy*20
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21)
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y)
	            }
	        }
	    	.byte 0
	  	}
	}


