__constant struct MOS6526_CIA * const CIA2 = (struct MOS6526_CIA *) 56576
__constant unsigned long * const CIA2_TIMER_AB = (unsigned long *) 56580
__constant const char CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
__constant const char CIA_TIMER_CONTROL_START = 1
__constant const unsigned long CLOCKS_PER_INIT = $12
__constant char *COS = SIN+$40
__constant const char GREEN = 5
__constant const char LIGHT_BLUE = $e
__constant char OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
__constant char OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
__constant char OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
__constant char OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
__constant char OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE = $15
__constant char OFFSET_STRUCT_MOS6569_VICII_SPRITES_XMSB = $10
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant char *SCREEN = (char *) 1024
__constant char SIN[$140] = kickasm {{ .for(var i=0;i<$140;i++)
        .byte >round($7fff*sin(i*2*PI/256))
 }}
__constant char SPRITE[] = kickasm {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
__constant char * const SPRITES_COLOR = (char *) 53287
__constant char * const SPRITES_XPOS = (char *) 53248
__constant char * const SPRITES_YPOS = (char *) 53249
__constant struct MOS6569_VICII * const VICII = (struct MOS6569_VICII *) 53248
void anim()
int anim::$10 // zp[2]:5 2002.0
int anim::$11 // zp[2]:5 2002.0
int anim::$12 // zp[2]:5 2002.0
char anim::$14 // reg byte a 1001.0
char anim::$17 // reg byte a 2002.0
char anim::$21 // reg byte a 2002.0
char anim::$24 // reg byte a 2002.0
unsigned long anim::$26 // zp[4]:17 202.0
int anim::$4 // zp[2]:5 2002.0
int anim::$6 // zp[2]:5 2002.0
int anim::$9 // zp[2]:5 2002.0
char anim::angle
char anim::angle#1 // angle zp[1]:3 25.25
char anim::angle#9 // angle zp[1]:3 4.488888888888889
signed char anim::cos_a
unsigned long anim::cyclecount
unsigned long anim::cyclecount#0 // cyclecount zp[4]:17 202.0
char anim::i
char anim::i#1 // i zp[1]:4 1501.5
char anim::i#10 // i zp[1]:4 131.71052631578948
char anim::i2
char anim::i2#0 // reg byte x 1001.0
signed char anim::mulf8s_prepare1_a
signed char anim::mulf8s_prepare2_a
signed char anim::sin_a
char anim::sprite_msb
char anim::sprite_msb#1 // sprite_msb zp[1]:2 1001.0
char anim::sprite_msb#10 // sprite_msb zp[1]:2 74.14814814814815
char anim::sprite_msb#2 // sprite_msb zp[1]:2 2002.0
char anim::sprite_msb#5 // sprite_msb zp[1]:2 344.8888888888889
signed char anim::x
signed char anim::x#0 // x zp[1]:9 158.05263157894737
int anim::xpos
int anim::xpos#0 // xpos zp[2]:15 333.6666666666667
int anim::xr
int anim::xr#0 // xr zp[2]:11 182.0
int anim::xr#1 // xr zp[2]:11 333.6666666666667
signed char anim::y
signed char anim::y#0 // y zp[1]:10 231.0
char anim::ypos
char anim::ypos#0 // reg byte y 500.5
int anim::yr
int anim::yr#0 // yr zp[2]:13 166.83333333333334
int anim::yr#1 // yr zp[2]:13 250.25
unsigned long clock()
unsigned long clock::return
unsigned long clock::return#0 // return zp[4]:17 275.5
unsigned long clock::return#2 // return zp[4]:17 202.0
unsigned long clock::ticks
void clock_start()
void init()
char init::i
char init::i#1 // reg byte x 151.5
char init::i#2 // reg byte x 134.66666666666666
char *init::sprites_ptr
__constant char *init::sprites_ptr#0 = SCREEN+$3f8 // sprites_ptr
void main()
int mulf8s_prepared(signed char b)
char mulf8s_prepared::$11 // reg byte a 20002.0
char mulf8s_prepared::$12 // reg byte a 20002.0
char mulf8s_prepared::$6 // reg byte a 20002.0
char mulf8s_prepared::$9 // reg byte a 20002.0
signed char mulf8s_prepared::b
signed char mulf8s_prepared::b#0 // reg byte y 2002.0
signed char mulf8s_prepared::b#1 // reg byte y 2002.0
signed char mulf8s_prepared::b#2 // reg byte y 2002.0
signed char mulf8s_prepared::b#3 // reg byte y 2002.0
signed char mulf8s_prepared::b#4 // reg byte y 1400.5
unsigned int mulf8s_prepared::m
unsigned int mulf8s_prepared::m#0 // m zp[2]:5 10001.0
unsigned int mulf8s_prepared::m#1 // m zp[2]:5 20002.0
unsigned int mulf8s_prepared::m#2 // m zp[2]:5 20002.0
unsigned int mulf8s_prepared::m#4 // m zp[2]:5 3333.6666666666665
unsigned int mulf8s_prepared::m#5 // m zp[2]:5 12501.25
__constant signed char * const mulf8s_prepared::memA = (signed char *) 253
int mulf8s_prepared::return
void mulf8u_prepare(char a)
char mulf8u_prepare::a
char mulf8u_prepare::a#2 // reg byte a 12003.0
char mulf8u_prepare::a#3 // reg byte a 2002.0
char mulf8u_prepare::a#4 // reg byte a 2002.0
__constant char * const mulf8u_prepare::memA = (char *) 253
unsigned int mulf8u_prepared(char b)
char mulf8u_prepared::b
char mulf8u_prepared::b#0 // reg byte a 110002.0
__constant char * const mulf8u_prepared::memB = (char *) 255
__constant char * const mulf8u_prepared::resL = (char *) 254
unsigned int mulf8u_prepared::return
unsigned int mulf8u_prepared::return#0 // return zp[2]:5 36667.33333333333
unsigned int mulf8u_prepared::return#2 // return zp[2]:5 20002.0
void mulf_init()
char mulf_init::$1 // reg byte a 2002.0
char mulf_init::$4 // reg byte a 2002.0
char mulf_init::$5 // reg byte a 2002.0
char mulf_init::c
char mulf_init::c#1 // c zp[1]:3 231.0
char mulf_init::c#2 // c zp[1]:3 1001.0
char mulf_init::dir
char mulf_init::dir#2 // dir zp[1]:4 375.375
char mulf_init::dir#4 // dir zp[1]:4 1001.0
unsigned int mulf_init::sqr
unsigned int mulf_init::sqr#1 // sqr zp[2]:11 1001.0
unsigned int mulf_init::sqr#2 // sqr zp[2]:11 2002.0
unsigned int mulf_init::sqr#3 // sqr zp[2]:11 834.1666666666667
unsigned int mulf_init::sqr#4 // sqr zp[2]:11 500.5
char *mulf_init::sqr1_hi
char *mulf_init::sqr1_hi#1 // sqr1_hi zp[2]:13 667.3333333333334
char *mulf_init::sqr1_hi#2 // sqr1_hi zp[2]:13 250.25
char *mulf_init::sqr1_lo
char *mulf_init::sqr1_lo#1 // sqr1_lo zp[2]:5 2002.0
char *mulf_init::sqr1_lo#2 // sqr1_lo zp[2]:5 286.0
char *mulf_init::sqr2_hi
char *mulf_init::sqr2_hi#1 // sqr2_hi zp[2]:7 333.6666666666667
char *mulf_init::sqr2_hi#2 // sqr2_hi zp[2]:7 750.75
char *mulf_init::sqr2_lo
char *mulf_init::sqr2_lo#1 // sqr2_lo zp[2]:15 2002.0
char *mulf_init::sqr2_lo#2 // sqr2_lo zp[2]:15 444.8888888888889
char mulf_init::x_2
char mulf_init::x_2#1 // reg byte x 1001.0
char mulf_init::x_2#2 // reg byte x 500.5
char mulf_init::x_2#3 // reg byte x 600.5999999999999
char mulf_init::x_255
char mulf_init::x_255#1 // reg byte x 600.5999999999999
char mulf_init::x_255#2 // reg byte x 800.8
__constant char mulf_sqr1_hi[$200] = { fill( $200, 0) }
__constant char mulf_sqr1_lo[$200] = { fill( $200, 0) }
__constant char mulf_sqr2_hi[$200] = { fill( $200, 0) }
__constant char mulf_sqr2_lo[$200] = { fill( $200, 0) }
void print_char_at(char ch , char *at)
char *print_char_at::at
char *print_char_at::at#0 // at zp[2]:7 200002.0
char *print_char_at::at#1 // at zp[2]:7 100001.0
char *print_char_at::at#2 // at zp[2]:7 1200003.0
char print_char_at::ch
char print_char_at::ch#0 // reg byte x 100001.0
char print_char_at::ch#1 // reg byte x 200002.0
char print_char_at::ch#2 // reg byte x 1200003.0
__constant const char print_hextab[] = "0123456789abcdef"z
void print_uchar_at(char b , char *at)
char print_uchar_at::$0 // reg byte a 200002.0
char print_uchar_at::$2 // reg byte y 100001.0
char *print_uchar_at::at
char *print_uchar_at::at#0 // at zp[2]:15 20002.0
char *print_uchar_at::at#1 // at zp[2]:15 20002.0
char *print_uchar_at::at#2 // at zp[2]:15 36667.33333333333
char print_uchar_at::b
char print_uchar_at::b#0 // b zp[1]:9 10001.0
char print_uchar_at::b#1 // b zp[1]:9 10001.0
char print_uchar_at::b#2 // b zp[1]:9 44000.8
void print_uint_at(unsigned int w , char *at)
char *print_uint_at::at
char *print_uint_at::at#2 // at zp[2]:15 4000.4
unsigned int print_uint_at::w
unsigned int print_uint_at::w#0 // w zp[2]:13 2002.0
unsigned int print_uint_at::w#1 // w zp[2]:13 2002.0
unsigned int print_uint_at::w#2 // w zp[2]:13 5501.0
void print_ulong_at(unsigned long dw , char *at)
char *print_ulong_at::at
unsigned long print_ulong_at::dw
unsigned long print_ulong_at::dw#0 // dw zp[4]:17 701.0
__constant signed char xs[8] = { -$46, -$46, -$46, 0, 0, $46, $46, $46 }
__constant signed char ys[8] = { -$46, 0, $46, -$46, $46, -$46, 0, $46 }

reg byte x [ init::i#2 init::i#1 ]
zp[1]:2 [ anim::sprite_msb#10 anim::sprite_msb#5 anim::sprite_msb#1 anim::sprite_msb#2 ]
zp[1]:3 [ mulf_init::c#2 mulf_init::c#1 anim::angle#9 anim::angle#1 ]
reg byte x [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ]
zp[1]:4 [ mulf_init::dir#2 mulf_init::dir#4 anim::i#10 anim::i#1 ]
reg byte a [ mulf8u_prepare::a#2 mulf8u_prepare::a#3 mulf8u_prepare::a#4 ]
reg byte y [ mulf8s_prepared::b#4 mulf8s_prepared::b#1 mulf8s_prepared::b#3 mulf8s_prepared::b#0 mulf8s_prepared::b#2 ]
zp[2]:5 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 anim::$4 anim::$6 anim::$9 anim::$11 mulf8u_prepared::return#2 anim::$10 anim::$12 mulf8u_prepared::return#0 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
reg byte x [ print_char_at::ch#2 print_char_at::ch#0 print_char_at::ch#1 ]
zp[2]:7 [ print_char_at::at#2 print_char_at::at#0 print_char_at::at#1 mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
zp[1]:9 [ anim::x#0 print_uchar_at::b#2 print_uchar_at::b#0 print_uchar_at::b#1 ]
zp[1]:10 [ anim::y#0 ]
zp[2]:11 [ anim::xr#0 anim::xr#1 mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
zp[2]:13 [ anim::yr#0 anim::yr#1 print_uint_at::w#2 print_uint_at::w#0 print_uint_at::w#1 mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
reg byte a [ anim::$14 ]
zp[2]:15 [ anim::xpos#0 print_uint_at::at#2 print_uchar_at::at#2 print_uchar_at::at#0 print_uchar_at::at#1 mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
reg byte a [ anim::$17 ]
reg byte a [ anim::$21 ]
reg byte y [ anim::ypos#0 ]
reg byte x [ anim::i2#0 ]
reg byte a [ anim::$24 ]
zp[4]:17 [ clock::return#2 anim::$26 clock::return#0 anim::cyclecount#0 print_ulong_at::dw#0 ]
reg byte a [ mulf_init::$1 ]
reg byte a [ mulf_init::$4 ]
reg byte a [ mulf_init::$5 ]
reg byte a [ mulf8u_prepared::b#0 ]
reg byte a [ mulf8s_prepared::$6 ]
reg byte a [ mulf8s_prepared::$11 ]
reg byte a [ mulf8s_prepared::$9 ]
reg byte a [ mulf8s_prepared::$12 ]
reg byte a [ print_uchar_at::$0 ]
reg byte y [ print_uchar_at::$2 ]
