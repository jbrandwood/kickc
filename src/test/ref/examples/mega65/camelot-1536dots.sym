__constant const char BLACK = 0
__constant const char BLUE = 6
__constant const char DARK_GREY = $b
__constant struct F018_DMAGIC * const DMA = (struct F018_DMAGIC *) 55040
__constant const char DMA_COMMAND_FILL = 3
__constant char GFX_BIT[8] = { $80, $40, $20, $10, 8, 4, 2, 1 }
__constant unsigned int GFX_OFFSET[$140] = { fill( $140, 0) }
__constant char * const GRAPHICS1 = (char *) 40960
__constant char * const GRAPHICS2 = (char *) 28672
__constant char MUSIC[] = kickasm {{ .const music = LoadSid("Thaw_5000.sid")
    .fill music.size, music.getData(i)
 }}
__constant char OFFSET_STRUCT_DMA_LIST_F018B_COUNT = 1
__constant char OFFSET_STRUCT_DMA_LIST_F018B_DEST = 6
__constant char OFFSET_STRUCT_DMA_LIST_F018B_SRC = 3
__constant char OFFSET_STRUCT_F018_DMAGIC_ADDRBANK = 2
__constant char OFFSET_STRUCT_F018_DMAGIC_ADDRMB = 4
__constant char OFFSET_STRUCT_F018_DMAGIC_ADDRMSB = 1
__constant char OFFSET_STRUCT_F018_DMAGIC_EN018B = 3
__constant char OFFSET_STRUCT_MEGA65_VICIV_BG_COLOR = $21
__constant char OFFSET_STRUCT_MEGA65_VICIV_BORDER_COLOR = $20
__constant char OFFSET_STRUCT_MEGA65_VICIV_CHARPTR_HILO = $6a
__constant char OFFSET_STRUCT_MEGA65_VICIV_CHARPTR_LOHI = $69
__constant char OFFSET_STRUCT_MEGA65_VICIV_CHARPTR_LOLO = $68
__constant char OFFSET_STRUCT_MEGA65_VICIV_CHARSTEP_HI = $59
__constant char OFFSET_STRUCT_MEGA65_VICIV_CHARSTEP_LO = $58
__constant char OFFSET_STRUCT_MEGA65_VICIV_CHRCOUNT = $5e
__constant char OFFSET_STRUCT_MEGA65_VICIV_CONTROLA = $30
__constant char OFFSET_STRUCT_MEGA65_VICIV_CONTROLB = $31
__constant char OFFSET_STRUCT_MEGA65_VICIV_CONTROLC = $54
__constant char OFFSET_STRUCT_MEGA65_VICIV_KEY = $2f
__constant char OFFSET_STRUCT_MEGA65_VICIV_RASTER = $12
__constant char OFFSET_STRUCT_MEGA65_VICIV_SCRNPTR_HILO = $62
__constant char OFFSET_STRUCT_MEGA65_VICIV_SCRNPTR_LOHI = $61
__constant char OFFSET_STRUCT_MEGA65_VICIV_SCRNPTR_LOLO = $60
__constant char OFFSET_STRUCT_MEGA65_VICIV_SPRITES_ENABLE = $15
__constant char OFFSET_STRUCT_MEGA65_VICIV_SPRITES_PRIORITY = $1b
__constant char OFFSET_STRUCT_MEGA65_VICIV_SPRPTRADR_HILO = $6e
__constant char OFFSET_STRUCT_MEGA65_VICIV_SPRPTRADR_LOHI = $6d
__constant char OFFSET_STRUCT_MEGA65_VICIV_SPRPTRADR_LOLO = $6c
__constant char * const PROCPORT = (char *) 1
__constant char * const PROCPORT_DDR = (char *) 0
__constant const char PROCPORT_DDR_MEMORY_MASK = 7
__constant const char PROCPORT_RAM_IO = 5
__constant const char PURPLE = 4
__constant char * const SCREEN = (char *) 51200
__constant unsigned int SINX1[SINX1_SIZE+$100] = kickasm {{ .fillword 1613+256, round(98+98*sin(toRadians(360*i/1613)))
 }}
__constant const unsigned int SINX1_SIZE = $64d
__constant unsigned int SINX2[SINX2_SIZE+$100] = kickasm {{ .fillword 547+256, round(60+60*sin(toRadians(360*i/547)))
 }}
__constant const unsigned int SINX2_SIZE = $223
__constant char SINY1[SINY1_SIZE+$100] = kickasm {{ .fill 733+256, round(66.5+66.5*sin(toRadians(360*i/733)))
 }}
__constant const unsigned int SINY1_SIZE = $2dd
__constant char SINY2[SINY2_SIZE+$100] = kickasm {{ .fill 317+256, round(33+33*sin(toRadians(360*i/317)))
 }}
__constant const unsigned int SINY2_SIZE = $13d
__constant char SIZEOF_UNSIGNED_INT = 2
__constant char SPRITES[$c0] = kickasm {{ .var pic = LoadPicture("camelot-sprites.png", List().add($000000, $ffffff))
    .for (var s=0; s<3; s++) {
      .for (var y=0; y<21; y++) {
          .for (var x=0;x<3; x++) {
              .byte pic.getSinglecolorByte(s*3+x,y)
          }
      }
      .byte 0
    }       
 }}
__constant char * const SPRITES_COLOR = (char *) 53287
__constant char * const SPRITES_XMSB = (char *) 53264
__constant char * const SPRITES_XPOS = (char *) 53248
__constant char * const SPRITES_YPOS = (char *) 53249
__constant unsigned int SPRITE_PTRS[8] = { fill( 8, 0) }
__constant struct MEGA65_VICIV * const VICIV = (struct MEGA65_VICIV *) 53248
__constant const char VICIV_CHR16 = 1
__constant const char VICIV_FAST = $40
__constant const char VICIV_KEY_M65_A = $47
__constant const char VICIV_KEY_M65_B = $53
__constant const char VICIV_SPRPTR16 = $80
__constant const char VICIV_VFAST = $40
__constant const char WHITE = 1
void __start()
__loadstore volatile char buffer // zp[1]:42 76.25
void graphics_mode()
char graphics_mode::$8 // reg byte a 20002.0
unsigned int graphics_mode::ch
unsigned int graphics_mode::ch#1 // ch zp[2]:4 1001.0
unsigned int graphics_mode::ch#2 // ch zp[2]:4 300.29999999999995
unsigned int graphics_mode::ch_x
unsigned int graphics_mode::ch_x#1 // ch_x zp[2]:10 10001.0
unsigned int graphics_mode::ch_x#2 // ch_x zp[2]:10 7751.0
unsigned int graphics_mode::ch_x#4 // ch_x zp[2]:10 2002.0
unsigned long graphics_mode::cols
unsigned long graphics_mode::cols#1 // cols zp[4]:24 750.75
unsigned long graphics_mode::cols#2 // cols zp[4]:24 1001.0
unsigned long graphics_mode::cols#3 // cols zp[4]:24 600.5999999999999
unsigned int graphics_mode::i
unsigned int graphics_mode::i#1 // i zp[2]:16 2002.0
unsigned int graphics_mode::i#2 // i zp[2]:16 300.29999999999995
unsigned int *graphics_mode::screen
unsigned int *graphics_mode::screen#1 // screen zp[2]:6 667.3333333333334
unsigned int *graphics_mode::screen#5 // screen zp[2]:6 1333.6666666666665
char graphics_mode::x
char graphics_mode::x#1 // reg byte z 20002.0
char graphics_mode::x#2 // reg byte z 8000.8
char graphics_mode::y
char graphics_mode::y#1 // reg byte x 2002.0
char graphics_mode::y#2 // reg byte x 273.0
__loadstore char * volatile graphics_render // zp[2]:22 17860.803571428572
void init_plot()
char init_plot::$1 // reg byte a 2002.0
unsigned int init_plot::$4 // zp[2]:8 2002.0
unsigned int *init_plot::$5 // zp[2]:8 2002.0
unsigned int init_plot::gfx
unsigned int init_plot::gfx#1 // gfx zp[2]:6 2002.0
unsigned int init_plot::gfx#2 // gfx zp[2]:6 572.0
unsigned int init_plot::gfx#5 // gfx zp[2]:6 1501.5
unsigned int init_plot::i
unsigned int init_plot::i#1 // i zp[2]:4 2002.0
unsigned int init_plot::i#2 // i zp[2]:4 556.1111111111111
void lpoke(volatile unsigned long addr , volatile char val)
__loadstore volatile unsigned long lpoke::addr // zp[4]:29 500.5
__loadstore volatile char lpoke::val // zp[1]:28 1001.0
void main()
char main::toSpritePtr1_return
__constant char main::toSpritePtr1_return#0 = (char)(unsigned int)main::toSpritePtr1_sprite#0/$40 // toSpritePtr1_return
char *main::toSpritePtr1_sprite
__constant char *main::toSpritePtr1_sprite#0 = SPRITES+$40 // toSpritePtr1_sprite
char main::toSpritePtr2_return
__constant char main::toSpritePtr2_return#0 = (char)(unsigned int)main::toSpritePtr2_sprite#0/$40 // toSpritePtr2_return
char *main::toSpritePtr2_sprite
__constant char *main::toSpritePtr2_sprite#0 = SPRITES+$80 // toSpritePtr2_sprite
char main::toSpritePtr3_return
__constant char main::toSpritePtr3_return#0 = (char)(unsigned int)SPRITES/$40 // toSpritePtr3_return
char *main::toSpritePtr3_sprite
void memoryRemap(char remapBlocks , unsigned int lowerPageOffset , unsigned int upperPageOffset)
__loadstore volatile char memoryRemap::aVal // zp[1]:45 25.25
unsigned int memoryRemap::lowerPageOffset
char memoryRemap::remapBlocks
unsigned int memoryRemap::upperPageOffset
__loadstore volatile char memoryRemap::xVal // zp[1]:44 33.666666666666664
__loadstore volatile char memoryRemap::yVal // zp[1]:43 50.5
__loadstore volatile char memoryRemap::zVal // zp[1]:41 101.0
void memset_dma(void *dest , char fill , unsigned int num)
void *memset_dma::dest
void *memset_dma::dest#0 // dest zp[2]:12 202.0
void *memset_dma::dest#3 // dest zp[2]:12 25.25
char memset_dma::dmaMode
char memset_dma::dmaMode#0 // reg byte x 222.44444444444446
char memset_dma::fill
unsigned int memset_dma::num
__loadstore volatile struct DMA_LIST_F018B memset_dma_command = { command: DMA_COMMAND_FILL, count: 0, src: 0, src_bank: 0, dest: 0, dest_bank: 0, sub_command: 0, modulo: 0 } // mem[12]
__constant void (* const musicInit)() = (void (*)())MUSIC
__constant void (* const musicPlay)() = (void (*)())MUSIC+3
void plot(unsigned int x , char y)
char *plot::$0 // zp[2]:2 1500001.5
char plot::$2 // reg byte a 2000002.0
unsigned int plot::$3 // zp[2]:2 2000002.0
unsigned int *plot::$4 // zp[2]:2 2000002.0
char *plot::gfx
unsigned int plot::x
unsigned int plot::x#0 // x zp[2]:6 300000.4285714285
char plot::y
char plot::y#0 // reg byte z 420000.60000000003
void render_dots()
unsigned int render_dots::$20 // zp[2]:6 100001.0
unsigned int render_dots::$21 // zp[2]:14 100001.0
unsigned int *render_dots::$22 // zp[2]:6 100001.0
unsigned int *render_dots::$23 // zp[2]:14 200002.0
char *render_dots::$24 // zp[2]:20 100001.0
char *render_dots::$25 // zp[2]:18 200002.0
unsigned int render_dots::i
unsigned int render_dots::i#1 // i zp[2]:16 200002.0
unsigned int render_dots::i#10 // i zp[2]:16 11111.222222222223
unsigned int render_dots::idx_x1
unsigned int render_dots::idx_x1#0 // idx_x1 zp[2]:10 187.6875
unsigned int render_dots::idx_x1#1 // idx_x1 zp[2]:10 200002.0
unsigned int render_dots::idx_x1#11 // idx_x1 zp[2]:10 21428.785714285714
unsigned int render_dots::idx_x1#2 // idx_x1 zp[2]:10 200002.0
unsigned int render_dots::idx_x1#3 // idx_x1 zp[2]:10 27455.0
unsigned int render_dots::idx_x2
unsigned int render_dots::idx_x2#0 // idx_x2 zp[2]:12 250.25
unsigned int render_dots::idx_x2#1 // idx_x2 zp[2]:12 200002.0
unsigned int render_dots::idx_x2#13 // idx_x2 zp[2]:12 30000.300000000003
unsigned int render_dots::idx_x2#2 // idx_x2 zp[2]:12 200002.0
unsigned int render_dots::idx_x2#3 // idx_x2 zp[2]:12 20133.666666666668
unsigned int render_dots::idx_y1
unsigned int render_dots::idx_y1#0 // idx_y1 zp[2]:8 375.375
unsigned int render_dots::idx_y1#1 // idx_y1 zp[2]:8 200002.0
unsigned int render_dots::idx_y1#11 // idx_y1 zp[2]:8 15895.0
unsigned int render_dots::idx_y1#15 // idx_y1 zp[2]:8 50000.5
unsigned int render_dots::idx_y1#2 // idx_y1 zp[2]:8 200002.0
unsigned int render_dots::idx_y2
unsigned int render_dots::idx_y2#0 // idx_y2 zp[2]:4 750.75
unsigned int render_dots::idx_y2#1 // idx_y2 zp[2]:4 200002.0
unsigned int render_dots::idx_y2#11 // idx_y2 zp[2]:4 13130.652173913044
unsigned int render_dots::idx_y2#2 // idx_y2 zp[2]:4 200002.0
unsigned int render_dots::idx_y2#9 // idx_y2 zp[2]:4 150001.5
__loadstore volatile unsigned int sin_x1_idx // zp[2]:33 300.40000000000003
__loadstore volatile unsigned int sin_x2_idx // zp[2]:35 250.33333333333337
__loadstore volatile unsigned int sin_y1_idx // zp[2]:37 214.57142857142856
__loadstore volatile unsigned int sin_y2_idx // zp[2]:39 187.75

reg byte x [ graphics_mode::y#2 graphics_mode::y#1 ]
zp[4]:24 [ graphics_mode::cols#3 graphics_mode::cols#2 graphics_mode::cols#1 ]
reg byte z [ graphics_mode::x#2 graphics_mode::x#1 ]
zp[2]:16 [ render_dots::i#10 render_dots::i#1 graphics_mode::i#2 graphics_mode::i#1 ]
zp[2]:10 [ render_dots::idx_x1#3 render_dots::idx_x1#11 render_dots::idx_x1#0 render_dots::idx_x1#2 render_dots::idx_x1#1 graphics_mode::ch_x#2 graphics_mode::ch_x#4 graphics_mode::ch_x#1 ]
zp[2]:12 [ render_dots::idx_x2#3 render_dots::idx_x2#13 render_dots::idx_x2#0 render_dots::idx_x2#1 render_dots::idx_x2#2 memset_dma::dest#3 memset_dma::dest#0 ]
zp[2]:4 [ render_dots::idx_y2#11 render_dots::idx_y2#9 render_dots::idx_y2#0 render_dots::idx_y2#1 render_dots::idx_y2#2 init_plot::i#2 init_plot::i#1 graphics_mode::ch#2 graphics_mode::ch#1 ]
zp[1]:42 [ buffer ]
zp[2]:22 [ graphics_render ]
zp[2]:33 [ sin_x1_idx ]
zp[2]:35 [ sin_x2_idx ]
zp[2]:37 [ sin_y1_idx ]
zp[2]:39 [ sin_y2_idx ]
zp[1]:45 [ memoryRemap::aVal ]
zp[1]:44 [ memoryRemap::xVal ]
zp[1]:43 [ memoryRemap::yVal ]
zp[1]:41 [ memoryRemap::zVal ]
zp[4]:29 [ lpoke::addr ]
zp[1]:28 [ lpoke::val ]
reg byte a [ graphics_mode::$8 ]
zp[2]:8 [ init_plot::$4 init_plot::$5 render_dots::idx_y1#11 render_dots::idx_y1#15 render_dots::idx_y1#0 render_dots::idx_y1#1 render_dots::idx_y1#2 ]
reg byte a [ init_plot::$1 ]
reg byte x [ memset_dma::dmaMode#0 ]
zp[2]:6 [ render_dots::$20 render_dots::$22 plot::x#0 init_plot::gfx#2 init_plot::gfx#5 init_plot::gfx#1 graphics_mode::screen#5 graphics_mode::screen#1 ]
zp[2]:14 [ render_dots::$21 render_dots::$23 ]
zp[2]:20 [ render_dots::$24 ]
zp[2]:18 [ render_dots::$25 ]
reg byte z [ plot::y#0 ]
zp[2]:2 [ plot::$3 plot::$4 plot::$0 ]
reg byte a [ plot::$2 ]
mem[12] [ memset_dma_command ]
