Inlined call call __init 
Eliminating unused variable with no statement main::$0
Eliminating unused variable with no statement main::$1
Unwinding list assignment { main::$0_x, main::$0_y } = { get::return_x, get::return_y }
Unwinding list assignment { main::$1_x, main::$1_y } = { get::return_x, get::return_y }
Unwinding list assignment { get::return_x#0, get::return_y#0 } = { get::return_x#5, get::return_y#5 }
Unwinding list assignment { get::return_x#1, get::return_y#1 } = { get::return_x#5, get::return_y#5 }

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  get::i#0 = 0
  call get 
  get::return_x#0 = get::return_x#5
  get::return_y#0 = get::return_y#5
  to:main::@2
main::@2: scope:[main]  from main
  get::return_y#6 = phi( main/get::return_y#0 )
  get::return_x#6 = phi( main/get::return_x#0 )
  main::$0_x = get::return_x#6
  main::$0_y = get::return_y#6
  *((byte*)SCREEN+OFFSET_STRUCT_POINT_X) = main::$0_x
  *((byte*)SCREEN+OFFSET_STRUCT_POINT_Y) = main::$0_y
  main::i#0 = 1
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@3
  main::i#2 = phi( main::@2/main::i#0, main::@3/main::i#1 )
  get::i#1 = main::i#2
  call get 
  get::return_x#1 = get::return_x#5
  get::return_y#1 = get::return_y#5
  to:main::@3
main::@3: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  get::return_y#7 = phi( main::@1/get::return_y#1 )
  get::return_x#7 = phi( main::@1/get::return_x#1 )
  main::$1_x = get::return_x#7
  main::$1_y = get::return_y#7
  main::$3 = main::i#3 * SIZEOF_STRUCT_POINT
  ((byte*)SCREEN+OFFSET_STRUCT_POINT_X)[main::$3] = main::$1_x
  ((byte*)SCREEN+OFFSET_STRUCT_POINT_Y)[main::$3] = main::$1_y
  main::i#1 = main::i#3 + rangenext(1,2)
  main::$2 = main::i#1 != rangelast(1,2)
  if(main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

struct Point get(byte get::i)
get: scope:[get]  from main main::@1
  get::i#2 = phi( main/get::i#0, main::@1/get::i#1 )
  get::$0 = get::i#2 == 0
  if(get::$0) goto get::@1
  to:get::@3
get::@1: scope:[get]  from get
  get::$8 = (byte*)p0
  get::$2 = get::$8 + OFFSET_STRUCT_POINT_X
  get::return_x#2 = *get::$2
  get::$9 = (byte*)p0
  get::$3 = get::$9 + OFFSET_STRUCT_POINT_Y
  get::return_y#2 = *get::$3
  get::return#0 = struct-unwound {get::return_x#2, get::return_y#2}
  to:get::@return
get::@3: scope:[get]  from get
  get::i#3 = phi( get/get::i#2 )
  get::$1 = get::i#3 == 1
  if(get::$1) goto get::@2
  to:get::@4
get::@2: scope:[get]  from get::@3
  get::$10 = (byte*)p1
  get::$4 = get::$10 + OFFSET_STRUCT_POINT_X
  get::return_x#3 = *get::$4
  get::$11 = (byte*)p1
  get::$5 = get::$11 + OFFSET_STRUCT_POINT_Y
  get::return_y#3 = *get::$5
  get::return#1 = struct-unwound {get::return_x#3, get::return_y#3}
  to:get::@return
get::@4: scope:[get]  from get::@3
  get::$12 = (byte*)p2
  get::$6 = get::$12 + OFFSET_STRUCT_POINT_X
  get::return_x#4 = *get::$6
  get::$13 = (byte*)p2
  get::$7 = get::$13 + OFFSET_STRUCT_POINT_Y
  get::return_y#4 = *get::$7
  get::return#2 = struct-unwound {get::return_x#4, get::return_y#4}
  to:get::@return
get::@return: scope:[get]  from get::@1 get::@2 get::@4
  get::return_y#8 = phi( get::@1/get::return_y#2, get::@2/get::return_y#3, get::@4/get::return_y#4 )
  get::return_x#8 = phi( get::@1/get::return_x#2, get::@2/get::return_x#3, get::@4/get::return_x#4 )
  get::return_x#5 = get::return_x#8
  get::return_y#5 = get::return_y#8
  get::return#3 = struct-unwound {get::return_x#5, get::return_y#5}
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const byte OFFSET_STRUCT_POINT_X = 0
const byte OFFSET_STRUCT_POINT_Y = 1
const nomodify struct Point* SCREEN = (struct Point*)$400
const byte SIZEOF_STRUCT_POINT = 2
void __start()
struct Point get(byte get::i)
bool~ get::$0
bool~ get::$1
byte*~ get::$10
byte*~ get::$11
byte*~ get::$12
byte*~ get::$13
byte*~ get::$2
byte*~ get::$3
byte*~ get::$4
byte*~ get::$5
byte*~ get::$6
byte*~ get::$7
byte*~ get::$8
byte*~ get::$9
byte get::i
byte get::i#0
byte get::i#1
byte get::i#2
byte get::i#3
struct Point get::return
struct Point get::return#0
struct Point get::return#1
struct Point get::return#2
struct Point get::return#3
byte get::return_x
byte get::return_x#0
byte get::return_x#1
byte get::return_x#2
byte get::return_x#3
byte get::return_x#4
byte get::return_x#5
byte get::return_x#6
byte get::return_x#7
byte get::return_x#8
byte get::return_y
byte get::return_y#0
byte get::return_y#1
byte get::return_y#2
byte get::return_y#3
byte get::return_y#4
byte get::return_y#5
byte get::return_y#6
byte get::return_y#7
byte get::return_y#8
void main()
byte~ main::$0_x
byte~ main::$0_y
byte~ main::$1_x
byte~ main::$1_y
bool~ main::$2
byte~ main::$3
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
const struct Point* p0 = (struct Point*)$a000
const struct Point* p1 = (struct Point*)$b000
const struct Point* p2 = (struct Point*)$e000

Adding number conversion cast (unumber) 0 in get::i#0 = 0
Adding number conversion cast (unumber) 0 in get::$0 = get::i#2 == 0
Adding number conversion cast (unumber) 1 in get::$1 = get::i#3 == 1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast get::i#0 = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (struct Point*) 1024
Simplifying constant pointer cast (struct Point*) 40960
Simplifying constant pointer cast (struct Point*) 45056
Simplifying constant pointer cast (struct Point*) 57344
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias get::return_x#0 = get::return_x#6 
Alias get::return_y#0 = get::return_y#6 
Alias get::return_x#1 = get::return_x#7 
Alias get::return_y#1 = get::return_y#7 
Alias main::i#2 = main::i#3 
Alias get::i#2 = get::i#3 
Alias get::return_x#5 = get::return_x#8 
Alias get::return_y#5 = get::return_y#8 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$2 [21] if(main::i#1!=rangelast(1,2)) goto main::@1
Simple Condition get::$0 [25] if(get::i#2==0) goto get::@1
Simple Condition get::$1 [34] if(get::i#2==1) goto get::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [26] get::$8 = (byte*)p0
Constant right-side identified [29] get::$9 = (byte*)p0
Constant right-side identified [35] get::$10 = (byte*)p1
Constant right-side identified [38] get::$11 = (byte*)p1
Constant right-side identified [42] get::$12 = (byte*)p2
Constant right-side identified [45] get::$13 = (byte*)p2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant get::i#0 = 0
Constant main::i#0 = 1
Constant get::$8 = (byte*)p0
Constant get::$9 = (byte*)p0
Constant get::$10 = (byte*)p1
Constant get::$11 = (byte*)p1
Constant get::$12 = (byte*)p2
Constant get::$13 = (byte*)p2
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [19] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [21] if(main::i#1!=rangelast(1,2)) goto main::@1 to 3
Converting *(pointer+n) to pointer[n] [28] get::return_x#2 = *get::$2  -- get::$8[OFFSET_STRUCT_POINT_X]
Converting *(pointer+n) to pointer[n] [31] get::return_y#2 = *get::$3  -- get::$9[OFFSET_STRUCT_POINT_Y]
Converting *(pointer+n) to pointer[n] [37] get::return_x#3 = *get::$4  -- get::$10[OFFSET_STRUCT_POINT_X]
Converting *(pointer+n) to pointer[n] [40] get::return_y#3 = *get::$5  -- get::$11[OFFSET_STRUCT_POINT_Y]
Converting *(pointer+n) to pointer[n] [44] get::return_x#4 = *get::$6  -- get::$12[OFFSET_STRUCT_POINT_X]
Converting *(pointer+n) to pointer[n] [47] get::return_y#4 = *get::$7  -- get::$13[OFFSET_STRUCT_POINT_Y]
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero (byte*)SCREEN in [6] *((byte*)SCREEN+OFFSET_STRUCT_POINT_X) = main::$0_x
Simplifying expression containing zero (byte*)SCREEN in [17] ((byte*)SCREEN+OFFSET_STRUCT_POINT_X)[main::$3] = main::$1_x
Simplifying expression containing zero get::$8 in [27] get::$2 = get::$8 + OFFSET_STRUCT_POINT_X
Simplifying expression containing zero get::$8 in [28] get::return_x#2 = get::$8[OFFSET_STRUCT_POINT_X]
Simplifying expression containing zero get::$10 in [36] get::$4 = get::$10 + OFFSET_STRUCT_POINT_X
Simplifying expression containing zero get::$10 in [37] get::return_x#3 = get::$10[OFFSET_STRUCT_POINT_X]
Simplifying expression containing zero get::$12 in [43] get::$6 = get::$12 + OFFSET_STRUCT_POINT_X
Simplifying expression containing zero get::$12 in [44] get::return_x#4 = get::$12[OFFSET_STRUCT_POINT_X]
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable get::$2 and assignment [22] get::$2 = get::$8
Eliminating unused variable get::$3 and assignment [24] get::$3 = get::$9 + OFFSET_STRUCT_POINT_Y
Eliminating unused variable get::return#0 and assignment [26] get::return#0 = struct-unwound {get::return_x#2, get::return_y#2}
Eliminating unused variable get::$4 and assignment [28] get::$4 = get::$10
Eliminating unused variable get::$5 and assignment [30] get::$5 = get::$11 + OFFSET_STRUCT_POINT_Y
Eliminating unused variable get::return#1 and assignment [32] get::return#1 = struct-unwound {get::return_x#3, get::return_y#3}
Eliminating unused variable get::$6 and assignment [33] get::$6 = get::$12
Eliminating unused variable get::$7 and assignment [35] get::$7 = get::$13 + OFFSET_STRUCT_POINT_Y
Eliminating unused variable get::return#2 and assignment [37] get::return#2 = struct-unwound {get::return_x#4, get::return_y#4}
Eliminating unused variable get::return#3 and assignment [39] get::return#3 = struct-unwound {get::return_x#5, get::return_y#5}
Eliminating unused constant OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 3 in [18] if(main::i#1!=3) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Rewriting multiplication to use shift [14] main::$3 = main::i#2 * SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings main::i#0
Inlining constant with var siblings get::i#0
Constant inlined get::$10 = (byte*)p1
Constant inlined get::$9 = (byte*)p0
Constant inlined get::$11 = (byte*)p1
Constant inlined get::$8 = (byte*)p0
Constant inlined get::$12 = (byte*)p2
Constant inlined main::i#0 = 1
Constant inlined get::$13 = (byte*)p2
Constant inlined get::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((byte*)p0+OFFSET_STRUCT_POINT_Y)
Consolidated array index constant in *((byte*)p1+OFFSET_STRUCT_POINT_Y)
Consolidated array index constant in *((byte*)p2+OFFSET_STRUCT_POINT_Y)
Successful SSA optimization Pass2ConstantAdditionElimination
Eliminating unused constant SIZEOF_STRUCT_POINT
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting main::@4(between main::@3 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH
Calls in [main] to get:1 get:11 

Created 4 initial phi equivalence classes
Coalesced [10] get::i#4 = get::i#1
Coalesced [22] main::i#4 = main::i#1
Coalesced [28] get::return_x#11 = get::return_x#4
Coalesced [29] get::return_y#11 = get::return_y#4
Coalesced [34] get::return_x#10 = get::return_x#3
Coalesced [35] get::return_y#10 = get::return_y#3
Coalesced [38] get::return_x#9 = get::return_x#2
Coalesced [39] get::return_y#9 = get::return_y#2
Coalesced down to 4 phi equivalence classes
Culled Empty Block label main::@4
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call get 
  [2] get::return_x#0 = get::return_x#5
  [3] get::return_y#0 = get::return_y#5
  to:main::@2
main::@2: scope:[main]  from main
  [4] main::$0_x = get::return_x#0
  [5] main::$0_y = get::return_y#0
  [6] *((byte*)SCREEN) = main::$0_x
  [7] *((byte*)SCREEN+OFFSET_STRUCT_POINT_Y) = main::$0_y
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@3
  [8] main::i#2 = phi( main::@2/1, main::@3/main::i#1 )
  [9] get::i#1 = main::i#2
  [10] call get 
  [11] get::return_x#1 = get::return_x#5
  [12] get::return_y#1 = get::return_y#5
  to:main::@3
main::@3: scope:[main]  from main::@1
  [13] main::$1_x = get::return_x#1
  [14] main::$1_y = get::return_y#1
  [15] main::$3 = main::i#2 << 1
  [16] ((byte*)SCREEN)[main::$3] = main::$1_x
  [17] ((byte*)SCREEN+OFFSET_STRUCT_POINT_Y)[main::$3] = main::$1_y
  [18] main::i#1 = ++ main::i#2
  [19] if(main::i#1!=3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [20] return 
  to:@return

struct Point get(byte get::i)
get: scope:[get]  from main main::@1
  [21] get::i#2 = phi( main/0, main::@1/get::i#1 )
  [22] if(get::i#2==0) goto get::@1
  to:get::@3
get::@3: scope:[get]  from get
  [23] if(get::i#2==1) goto get::@2
  to:get::@4
get::@4: scope:[get]  from get::@3
  [24] get::return_x#4 = *((byte*)p2)
  [25] get::return_y#4 = *((byte*)p2+OFFSET_STRUCT_POINT_Y)
  to:get::@return
get::@return: scope:[get]  from get::@1 get::@2 get::@4
  [26] get::return_y#5 = phi( get::@1/get::return_y#2, get::@2/get::return_y#3, get::@4/get::return_y#4 )
  [26] get::return_x#5 = phi( get::@1/get::return_x#2, get::@2/get::return_x#3, get::@4/get::return_x#4 )
  [27] return 
  to:@return
get::@2: scope:[get]  from get::@3
  [28] get::return_x#3 = *((byte*)p1)
  [29] get::return_y#3 = *((byte*)p1+OFFSET_STRUCT_POINT_Y)
  to:get::@return
get::@1: scope:[get]  from get
  [30] get::return_x#2 = *((byte*)p0)
  [31] get::return_y#2 = *((byte*)p0+OFFSET_STRUCT_POINT_Y)
  to:get::@return


VARIABLE REGISTER WEIGHTS
struct Point get(byte get::i)
byte get::i
byte get::i#1 22.0
byte get::i#2 106.5
struct Point get::return
byte get::return_x
byte get::return_x#0 2.0
byte get::return_x#1 11.0
byte get::return_x#2 101.0
byte get::return_x#3 101.0
byte get::return_x#4 101.0
byte get::return_x#5 79.0
byte get::return_y
byte get::return_y#0 2.0
byte get::return_y#1 11.0
byte get::return_y#2 202.0
byte get::return_y#3 202.0
byte get::return_y#4 202.0
byte get::return_y#5 52.66666666666666
void main()
byte~ main::$0_x 2.0
byte~ main::$0_y 2.0
byte~ main::$1_x 7.333333333333333
byte~ main::$1_y 7.333333333333333
byte~ main::$3 16.5
byte main::i
byte main::i#1 16.5
byte main::i#2 4.4

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ get::i#2 get::i#1 ]
[ get::return_x#5 get::return_x#2 get::return_x#3 get::return_x#4 ]
[ get::return_y#5 get::return_y#2 get::return_y#3 get::return_y#4 ]
Added variable get::return_x#0 to live range equivalence class [ get::return_x#0 ]
Added variable get::return_y#0 to live range equivalence class [ get::return_y#0 ]
Added variable main::$0_x to live range equivalence class [ main::$0_x ]
Added variable main::$0_y to live range equivalence class [ main::$0_y ]
Added variable get::return_x#1 to live range equivalence class [ get::return_x#1 ]
Added variable get::return_y#1 to live range equivalence class [ get::return_y#1 ]
Added variable main::$1_x to live range equivalence class [ main::$1_x ]
Added variable main::$1_y to live range equivalence class [ main::$1_y ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ get::i#2 get::i#1 ]
[ get::return_x#5 get::return_x#2 get::return_x#3 get::return_x#4 ]
[ get::return_y#5 get::return_y#2 get::return_y#3 get::return_y#4 ]
[ get::return_x#0 ]
[ get::return_y#0 ]
[ main::$0_x ]
[ main::$0_y ]
[ get::return_x#1 ]
[ get::return_y#1 ]
[ main::$1_x ]
[ main::$1_y ]
[ main::$3 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ get::i#2 get::i#1 ]
Allocated zp[1]:4 [ get::return_x#5 get::return_x#2 get::return_x#3 get::return_x#4 ]
Allocated zp[1]:5 [ get::return_y#5 get::return_y#2 get::return_y#3 get::return_y#4 ]
Allocated zp[1]:6 [ get::return_x#0 ]
Allocated zp[1]:7 [ get::return_y#0 ]
Allocated zp[1]:8 [ main::$0_x ]
Allocated zp[1]:9 [ main::$0_y ]
Allocated zp[1]:10 [ get::return_x#1 ]
Allocated zp[1]:11 [ get::return_y#1 ]
Allocated zp[1]:12 [ main::$1_x ]
Allocated zp[1]:13 [ main::$1_y ]
Allocated zp[1]:14 [ main::$3 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [15] main::$3 = main::i#2 << 1 [ main::i#2 main::$1_x main::$1_y main::$3 ] (  [ main::i#2 main::$1_x main::$1_y main::$3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:12 [ main::$1_x ]
Removing always clobbered register reg byte a as potential for zp[1]:13 [ main::$1_y ]
Statement [16] ((byte*)SCREEN)[main::$3] = main::$1_x [ main::i#2 main::$1_y main::$3 ] (  [ main::i#2 main::$1_y main::$3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:14 [ main::$3 ]
Statement [17] ((byte*)SCREEN+OFFSET_STRUCT_POINT_Y)[main::$3] = main::$1_y [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [15] main::$3 = main::i#2 << 1 [ main::i#2 main::$1_x main::$1_y main::$3 ] (  [ main::i#2 main::$1_x main::$1_y main::$3 ] { }  ) always clobbers reg byte a 
Statement [16] ((byte*)SCREEN)[main::$3] = main::$1_x [ main::i#2 main::$1_y main::$3 ] (  [ main::i#2 main::$1_y main::$3 ] { }  ) always clobbers reg byte a 
Statement [17] ((byte*)SCREEN+OFFSET_STRUCT_POINT_Y)[main::$3] = main::$1_y [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ get::i#2 get::i#1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ get::return_x#5 get::return_x#2 get::return_x#3 get::return_x#4 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ get::return_y#5 get::return_y#2 get::return_y#3 get::return_y#4 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ get::return_x#0 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ get::return_y#0 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ main::$0_x ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ main::$0_y ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ get::return_x#1 ] : zp[1]:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:11 [ get::return_y#1 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:12 [ main::$1_x ] : zp[1]:12 , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ main::$1_y ] : zp[1]:13 , reg byte x , reg byte y , 
Potential registers zp[1]:14 [ main::$3 ] : zp[1]:14 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [get] 658.67: zp[1]:5 [ get::return_y#5 get::return_y#2 get::return_y#3 get::return_y#4 ] 382: zp[1]:4 [ get::return_x#5 get::return_x#2 get::return_x#3 get::return_x#4 ] 128.5: zp[1]:3 [ get::i#2 get::i#1 ] 11: zp[1]:10 [ get::return_x#1 ] 11: zp[1]:11 [ get::return_y#1 ] 2: zp[1]:6 [ get::return_x#0 ] 2: zp[1]:7 [ get::return_y#0 ] 
Uplift Scope [main] 20.9: zp[1]:2 [ main::i#2 main::i#1 ] 16.5: zp[1]:14 [ main::$3 ] 7.33: zp[1]:12 [ main::$1_x ] 7.33: zp[1]:13 [ main::$1_y ] 2: zp[1]:8 [ main::$0_x ] 2: zp[1]:9 [ main::$0_y ] 
Uplift Scope [Point] 
Uplift Scope [] 

Uplifting [get] best 853 combination reg byte x [ get::return_y#5 get::return_y#2 get::return_y#3 get::return_y#4 ] reg byte a [ get::return_x#5 get::return_x#2 get::return_x#3 get::return_x#4 ] reg byte a [ get::i#2 get::i#1 ] reg byte a [ get::return_x#1 ] zp[1]:11 [ get::return_y#1 ] zp[1]:6 [ get::return_x#0 ] zp[1]:7 [ get::return_y#0 ] 
Limited combination testing to 100 combinations of 16384 possible.
Uplifting [main] best 673 combination reg byte y [ main::i#2 main::i#1 ] reg byte x [ main::$3 ] zp[1]:12 [ main::$1_x ] zp[1]:13 [ main::$1_y ] zp[1]:8 [ main::$0_x ] zp[1]:9 [ main::$0_y ] 
Limited combination testing to 100 combinations of 1296 possible.
Uplifting [Point] best 673 combination 
Uplifting [] best 673 combination 
Attempting to uplift remaining variables inzp[1]:11 [ get::return_y#1 ]
Uplifting [get] best 613 combination reg byte x [ get::return_y#1 ] 
Attempting to uplift remaining variables inzp[1]:12 [ main::$1_x ]
Uplifting [main] best 613 combination zp[1]:12 [ main::$1_x ] 
Attempting to uplift remaining variables inzp[1]:13 [ main::$1_y ]
Uplifting [main] best 613 combination zp[1]:13 [ main::$1_y ] 
Attempting to uplift remaining variables inzp[1]:6 [ get::return_x#0 ]
Uplifting [get] best 607 combination reg byte a [ get::return_x#0 ] 
Attempting to uplift remaining variables inzp[1]:7 [ get::return_y#0 ]
Uplifting [get] best 601 combination reg byte x [ get::return_y#0 ] 
Attempting to uplift remaining variables inzp[1]:8 [ main::$0_x ]
Uplifting [main] best 595 combination reg byte a [ main::$0_x ] 
Attempting to uplift remaining variables inzp[1]:9 [ main::$0_y ]
Uplifting [main] best 589 combination reg byte x [ main::$0_y ] 
Allocated (was zp[1]:12) zp[1]:2 [ main::$1_x ]
Allocated (was zp[1]:13) zp[1]:3 [ main::$1_y ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Demonstrates problem with returning a dereferenced pointer to a struct
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-ptr-16.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
  .label p0 = $a000
  .label p1 = $b000
  .label p2 = $e000
.segment Code
  // main
main: {
    .label __1_x = 2
    .label __1_y = 3
    // [1] call get 
    // [21] phi from main to get [phi:main->get]
  get_from_main:
    // [21] phi get::i#2 = 0 [phi:main->get#0] -- vbuaa=vbuc1 
    lda #0
    jsr get
    // [2] get::return_x#0 = get::return_x#5
    // [3] get::return_y#0 = get::return_y#5
    jmp __b2
    // main::@2
  __b2:
    // [4] main::$0_x = get::return_x#0
    // [5] main::$0_y = get::return_y#0
    // [6] *((byte*)SCREEN) = main::$0_x -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // [7] *((byte*)SCREEN+OFFSET_STRUCT_POINT_Y) = main::$0_y -- _deref_pbuc1=vbuxx 
    stx SCREEN+OFFSET_STRUCT_POINT_Y
    // [8] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [8] phi main::i#2 = 1 [phi:main::@2->main::@1#0] -- vbuyy=vbuc1 
    ldy #1
    jmp __b1
    // [8] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [8] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [9] get::i#1 = main::i#2 -- vbuaa=vbuyy 
    tya
    // [10] call get 
    // [21] phi from main::@1 to get [phi:main::@1->get]
  get_from___b1:
    // [21] phi get::i#2 = get::i#1 [phi:main::@1->get#0] -- register_copy 
    jsr get
    // [11] get::return_x#1 = get::return_x#5
    // [12] get::return_y#1 = get::return_y#5
    jmp __b3
    // main::@3
  __b3:
    // [13] main::$1_x = get::return_x#1 -- vbuz1=vbuaa 
    sta.z __1_x
    // [14] main::$1_y = get::return_y#1 -- vbuz1=vbuxx 
    stx.z __1_y
    // [15] main::$3 = main::i#2 << 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [16] ((byte*)SCREEN)[main::$3] = main::$1_x -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z __1_x
    sta SCREEN,x
    // [17] ((byte*)SCREEN+OFFSET_STRUCT_POINT_Y)[main::$3] = main::$1_y -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z __1_y
    sta SCREEN+OFFSET_STRUCT_POINT_Y,x
    // [18] main::i#1 = ++ main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [19] if(main::i#1!=3) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #3
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [20] return 
    rts
}
  // get
// get(byte register(A) i)
get: {
    // [22] if(get::i#2==0) goto get::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1
    jmp __b3
    // get::@3
  __b3:
    // [23] if(get::i#2==1) goto get::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __b2
    jmp __b4
    // get::@4
  __b4:
    // [24] get::return_x#4 = *((byte*)p2) -- vbuaa=_deref_pbuc1 
    lda p2
    // [25] get::return_y#4 = *((byte*)p2+OFFSET_STRUCT_POINT_Y) -- vbuxx=_deref_pbuc1 
    ldx p2+OFFSET_STRUCT_POINT_Y
    // [26] phi from get::@1 get::@2 get::@4 to get::@return [phi:get::@1/get::@2/get::@4->get::@return]
  __breturn_from___b1:
  __breturn_from___b2:
  __breturn_from___b4:
    // [26] phi get::return_y#5 = get::return_y#2 [phi:get::@1/get::@2/get::@4->get::@return#0] -- register_copy 
    // [26] phi get::return_x#5 = get::return_x#2 [phi:get::@1/get::@2/get::@4->get::@return#1] -- register_copy 
    jmp __breturn
    // get::@return
  __breturn:
    // [27] return 
    rts
    // get::@2
  __b2:
    // [28] get::return_x#3 = *((byte*)p1) -- vbuaa=_deref_pbuc1 
    lda p1
    // [29] get::return_y#3 = *((byte*)p1+OFFSET_STRUCT_POINT_Y) -- vbuxx=_deref_pbuc1 
    ldx p1+OFFSET_STRUCT_POINT_Y
    jmp __breturn_from___b2
    // get::@1
  __b1:
    // [30] get::return_x#2 = *((byte*)p0) -- vbuaa=_deref_pbuc1 
    lda p0
    // [31] get::return_y#2 = *((byte*)p0+OFFSET_STRUCT_POINT_Y) -- vbuxx=_deref_pbuc1 
    ldx p0+OFFSET_STRUCT_POINT_Y
    jmp __breturn_from___b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b3 with __b1
Replacing label __breturn_from___b2 with __breturn
Replacing label __breturn_from___b1 with __breturn
Removing instruction __b1_from___b3:
Removing instruction __breturn_from___b1:
Removing instruction __breturn_from___b2:
Removing instruction __breturn_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction get_from_main:
Removing instruction __b2:
Removing instruction __b1_from___b2:
Removing instruction get_from___b1:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const byte OFFSET_STRUCT_POINT_Y = 1
const nomodify struct Point* SCREEN = (struct Point*) 1024
struct Point get(byte get::i)
byte get::i
byte get::i#1 reg byte a 22.0
byte get::i#2 reg byte a 106.5
struct Point get::return
byte get::return_x
byte get::return_x#0 reg byte a 2.0
byte get::return_x#1 reg byte a 11.0
byte get::return_x#2 reg byte a 101.0
byte get::return_x#3 reg byte a 101.0
byte get::return_x#4 reg byte a 101.0
byte get::return_x#5 reg byte a 79.0
byte get::return_y
byte get::return_y#0 reg byte x 2.0
byte get::return_y#1 reg byte x 11.0
byte get::return_y#2 reg byte x 202.0
byte get::return_y#3 reg byte x 202.0
byte get::return_y#4 reg byte x 202.0
byte get::return_y#5 reg byte x 52.66666666666666
void main()
byte~ main::$0_x reg byte a 2.0
byte~ main::$0_y reg byte x 2.0
byte~ main::$1_x zp[1]:2 7.333333333333333
byte~ main::$1_y zp[1]:3 7.333333333333333
byte~ main::$3 reg byte x 16.5
byte main::i
byte main::i#1 reg byte y 16.5
byte main::i#2 reg byte y 4.4
const struct Point* p0 = (struct Point*) 40960
const struct Point* p1 = (struct Point*) 45056
const struct Point* p2 = (struct Point*) 57344

reg byte y [ main::i#2 main::i#1 ]
reg byte a [ get::i#2 get::i#1 ]
reg byte a [ get::return_x#5 get::return_x#2 get::return_x#3 get::return_x#4 ]
reg byte x [ get::return_y#5 get::return_y#2 get::return_y#3 get::return_y#4 ]
reg byte a [ get::return_x#0 ]
reg byte x [ get::return_y#0 ]
reg byte a [ main::$0_x ]
reg byte x [ main::$0_y ]
reg byte a [ get::return_x#1 ]
reg byte x [ get::return_y#1 ]
zp[1]:2 [ main::$1_x ]
zp[1]:3 [ main::$1_y ]
reg byte x [ main::$3 ]


FINAL ASSEMBLER
Score: 463

  // File Comments
// Demonstrates problem with returning a dereferenced pointer to a struct
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-ptr-16.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
  .label p0 = $a000
  .label p1 = $b000
  .label p2 = $e000
.segment Code
  // main
main: {
    .label __1_x = 2
    .label __1_y = 3
    // get(0)
    // [1] call get 
    // [21] phi from main to get [phi:main->get]
    // [21] phi get::i#2 = 0 [phi:main->get#0] -- vbuaa=vbuc1 
    lda #0
    jsr get
    // get(0)
    // [2] get::return_x#0 = get::return_x#5
    // [3] get::return_y#0 = get::return_y#5
    // main::@2
    // [4] main::$0_x = get::return_x#0
    // [5] main::$0_y = get::return_y#0
    // *SCREEN = get(0)
    // [6] *((byte*)SCREEN) = main::$0_x -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // [7] *((byte*)SCREEN+OFFSET_STRUCT_POINT_Y) = main::$0_y -- _deref_pbuc1=vbuxx 
    stx SCREEN+OFFSET_STRUCT_POINT_Y
    // [8] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [8] phi main::i#2 = 1 [phi:main::@2->main::@1#0] -- vbuyy=vbuc1 
    ldy #1
    // [8] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [8] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // get(i)
    // [9] get::i#1 = main::i#2 -- vbuaa=vbuyy 
    tya
    // [10] call get 
    // [21] phi from main::@1 to get [phi:main::@1->get]
    // [21] phi get::i#2 = get::i#1 [phi:main::@1->get#0] -- register_copy 
    jsr get
    // get(i)
    // [11] get::return_x#1 = get::return_x#5
    // [12] get::return_y#1 = get::return_y#5
    // main::@3
    // [13] main::$1_x = get::return_x#1 -- vbuz1=vbuaa 
    sta.z __1_x
    // [14] main::$1_y = get::return_y#1 -- vbuz1=vbuxx 
    stx.z __1_y
    // SCREEN[i] = get(i)
    // [15] main::$3 = main::i#2 << 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [16] ((byte*)SCREEN)[main::$3] = main::$1_x -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z __1_x
    sta SCREEN,x
    // [17] ((byte*)SCREEN+OFFSET_STRUCT_POINT_Y)[main::$3] = main::$1_y -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z __1_y
    sta SCREEN+OFFSET_STRUCT_POINT_Y,x
    // for ( char i: 1..2)
    // [18] main::i#1 = ++ main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [19] if(main::i#1!=3) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #3
    bne __b1
    // main::@return
    // }
    // [20] return 
    rts
}
  // get
// get(byte register(A) i)
get: {
    // if(i==0)
    // [22] if(get::i#2==0) goto get::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1
    // get::@3
    // if(i==1)
    // [23] if(get::i#2==1) goto get::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __b2
    // get::@4
    // return *p2;
    // [24] get::return_x#4 = *((byte*)p2) -- vbuaa=_deref_pbuc1 
    lda p2
    // [25] get::return_y#4 = *((byte*)p2+OFFSET_STRUCT_POINT_Y) -- vbuxx=_deref_pbuc1 
    ldx p2+OFFSET_STRUCT_POINT_Y
    // [26] phi from get::@1 get::@2 get::@4 to get::@return [phi:get::@1/get::@2/get::@4->get::@return]
    // [26] phi get::return_y#5 = get::return_y#2 [phi:get::@1/get::@2/get::@4->get::@return#0] -- register_copy 
    // [26] phi get::return_x#5 = get::return_x#2 [phi:get::@1/get::@2/get::@4->get::@return#1] -- register_copy 
    // get::@return
    // }
    // [27] return 
    rts
    // get::@2
  __b2:
    // return *p1;
    // [28] get::return_x#3 = *((byte*)p1) -- vbuaa=_deref_pbuc1 
    lda p1
    // [29] get::return_y#3 = *((byte*)p1+OFFSET_STRUCT_POINT_Y) -- vbuxx=_deref_pbuc1 
    ldx p1+OFFSET_STRUCT_POINT_Y
    rts
    // get::@1
  __b1:
    // return *p0;
    // [30] get::return_x#2 = *((byte*)p0) -- vbuaa=_deref_pbuc1 
    lda p0
    // [31] get::return_y#2 = *((byte*)p0+OFFSET_STRUCT_POINT_Y) -- vbuxx=_deref_pbuc1 
    ldx p0+OFFSET_STRUCT_POINT_Y
    rts
}
  // File Data

