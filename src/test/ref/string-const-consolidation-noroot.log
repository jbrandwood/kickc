Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  screen#17 = phi( __start::@1/screen#19 )
  print::string#0 = main::rex1
  call print 
  to:main::@1
main::@1: scope:[main]  from main
  screen#9 = phi( main/screen#5 )
  screen#0 = screen#9
  print::string#1 = main::rex2
  call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  screen#10 = phi( main::@1/screen#5 )
  screen#1 = screen#10
  print::string#2 = main::string
  call print 
  to:main::@3
main::@3: scope:[main]  from main::@2
  screen#11 = phi( main::@2/screen#5 )
  screen#2 = screen#11
  to:main::@return
main::@return: scope:[main]  from main::@3
  screen#12 = phi( main::@3/screen#2 )
  screen#3 = screen#12
  return 
  to:@return

void print(byte* print::string)
print: scope:[print]  from main main::@1 main::@2
  screen#20 = phi( main/screen#17, main::@1/screen#0, main::@2/screen#1 )
  print::string#6 = phi( main/print::string#0, main::@1/print::string#1, main::@2/print::string#2 )
  to:print::@1
print::@1: scope:[print]  from print print::@2
  screen#18 = phi( print/screen#20, print::@2/screen#4 )
  print::string#4 = phi( print/print::string#6, print::@2/print::string#3 )
  print::$0 = 0 != *print::string#4
  if(print::$0) goto print::@2
  to:print::@return
print::@2: scope:[print]  from print::@1
  screen#13 = phi( print::@1/screen#18 )
  print::string#5 = phi( print::@1/print::string#4 )
  *screen#13 = *print::string#5
  screen#4 = ++ screen#13
  print::string#3 = ++ print::string#5
  to:print::@1
print::@return: scope:[print]  from print::@1
  screen#14 = phi( print::@1/screen#18 )
  screen#5 = screen#14
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  screen#6 = (byte*)$400
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  screen#19 = phi( __start::__init1/screen#6 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  screen#15 = phi( __start::@1/screen#3 )
  screen#7 = screen#15
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  screen#16 = phi( __start::@2/screen#7 )
  screen#8 = screen#16
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
const byte* main::rex1[]  = "rex"
const byte* main::rex2[]  = "rex"
const byte* main::string[4]  = "rex"
void print(byte* print::string)
bool~ print::$0
byte* print::string
byte* print::string#0
byte* print::string#1
byte* print::string#2
byte* print::string#3
byte* print::string#4
byte* print::string#5
byte* print::string#6
byte* screen
byte* screen#0
byte* screen#1
byte* screen#10
byte* screen#11
byte* screen#12
byte* screen#13
byte* screen#14
byte* screen#15
byte* screen#16
byte* screen#17
byte* screen#18
byte* screen#19
byte* screen#2
byte* screen#20
byte* screen#3
byte* screen#4
byte* screen#5
byte* screen#6
byte* screen#7
byte* screen#8
byte* screen#9

Adding number conversion cast (unumber) 0 in print::$0 = 0 != *print::string#4
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias screen#0 = screen#9 
Alias screen#1 = screen#10 
Alias screen#11 = screen#2 screen#12 screen#3 
Alias print::string#4 = print::string#5 
Alias screen#13 = screen#18 screen#14 screen#5 
Alias screen#19 = screen#6 
Alias screen#15 = screen#7 screen#16 screen#8 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values screen#17 screen#19
Identical Phi Values screen#0 screen#13
Identical Phi Values screen#1 screen#13
Identical Phi Values screen#11 screen#13
Identical Phi Values screen#15 screen#11
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition print::$0 [14] if(0!=*print::string#4) goto print::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant print::string#0 = main::rex1
Constant print::string#1 = main::rex2
Constant print::string#2 = main::string
Constant screen#19 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Consolidated constant strings into main::rex1
Successful SSA optimization Pass2ConstantStringConsolidation
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings print::string#0
Inlining constant with var siblings print::string#1
Inlining constant with var siblings print::string#2
Inlining constant with var siblings screen#19
Constant inlined print::string#0 = main::rex1
Constant inlined print::string#1 = main::rex1
Constant inlined screen#19 = (byte*) 1024
Constant inlined print::string#2 = main::rex1
Constant inlined main::rex2 = main::rex1
Constant inlined main::string = main::rex1
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values print::string#6 main::rex1
Successful SSA optimization Pass2IdenticalPhiElimination
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
CALL GRAPH
Calls in [main] to print:1 print:3 print:5 

Created 3 initial phi equivalence classes
Coalesced [2] screen#21 = screen#13
Coalesced (already) [4] screen#22 = screen#13
Coalesced (already) [9] screen#23 = screen#20
Coalesced [16] print::string#7 = print::string#3
Coalesced [17] screen#24 = screen#4
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@3
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call print 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call print 
  to:main::@return
main::@return: scope:[main]  from main::@2
  [6] return 
  to:@return

void print(byte* print::string)
print: scope:[print]  from main main::@1 main::@2
  [7] screen#20 = phi( main/(byte*) 1024, main::@1/screen#13, main::@2/screen#13 )
  to:print::@1
print::@1: scope:[print]  from print print::@2
  [8] screen#13 = phi( print/screen#20, print::@2/screen#4 )
  [8] print::string#4 = phi( print/main::rex1, print::@2/print::string#3 )
  [9] if(0!=*print::string#4) goto print::@2
  to:print::@return
print::@return: scope:[print]  from print::@1
  [10] return 
  to:@return
print::@2: scope:[print]  from print::@1
  [11] *screen#13 = *print::string#4
  [12] screen#4 = ++ screen#13
  [13] print::string#3 = ++ print::string#4
  to:print::@1


VARIABLE REGISTER WEIGHTS
void main()
void print(byte* print::string)
byte* print::string
byte* print::string#3 202.0
byte* print::string#4 101.0
byte* screen
byte* screen#13 39.75
byte* screen#20 15.0
byte* screen#4 101.0

Initial phi equivalence classes
[ screen#20 screen#13 screen#4 ]
[ print::string#4 print::string#3 ]
Complete equivalence classes
[ screen#20 screen#13 screen#4 ]
[ print::string#4 print::string#3 ]
Allocated zp[2]:2 [ screen#20 screen#13 screen#4 ]
Allocated zp[2]:4 [ print::string#4 print::string#3 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [9] if(0!=*print::string#4) goto print::@2 [ screen#13 print::string#4 ] ( print:1 [ screen#13 print::string#4 ] { }  print:3 [ screen#13 print::string#4 ] { { screen#13 = screen#20 } }  print:5 [ screen#13 print::string#4 ] { { screen#13 = screen#20 } }  ) always clobbers reg byte a reg byte y 
Statement [11] *screen#13 = *print::string#4 [ screen#13 print::string#4 ] ( print:1 [ screen#13 print::string#4 ] { }  print:3 [ screen#13 print::string#4 ] { { screen#13 = screen#20 } }  print:5 [ screen#13 print::string#4 ] { { screen#13 = screen#20 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[2]:2 [ screen#20 screen#13 screen#4 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ print::string#4 print::string#3 ] : zp[2]:4 , 

REGISTER UPLIFT SCOPES
Uplift Scope [print] 303: zp[2]:4 [ print::string#4 print::string#3 ] 
Uplift Scope [] 155.75: zp[2]:2 [ screen#20 screen#13 screen#4 ] 
Uplift Scope [main] 

Uplifting [print] best 764 combination zp[2]:4 [ print::string#4 print::string#3 ] 
Uplifting [] best 764 combination zp[2]:2 [ screen#20 screen#13 screen#4 ] 
Uplifting [main] best 764 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests that identical strings are consolidated
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = 2
  // main
main: {
    // [1] call print 
    // [7] phi from main to print [phi:main->print]
  print_from_main:
    // [7] phi screen#20 = (byte*) 1024 [phi:main->print#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    jsr print
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call print 
    // [7] phi from main::@1 to print [phi:main::@1->print]
  print_from___b1:
    // [7] phi screen#20 = screen#13 [phi:main::@1->print#0] -- register_copy 
    jsr print
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [5] call print 
    // [7] phi from main::@2 to print [phi:main::@2->print]
  print_from___b2:
    // [7] phi screen#20 = screen#13 [phi:main::@2->print#0] -- register_copy 
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
    rex1: .text "rex"
    .byte 0
}
  // print
// print(byte* zp(4) string)
print: {
    .label string = 4
    // [8] phi from print to print::@1 [phi:print->print::@1]
  __b1_from_print:
    // [8] phi screen#13 = screen#20 [phi:print->print::@1#0] -- register_copy 
    // [8] phi print::string#4 = main::rex1 [phi:print->print::@1#1] -- pbuz1=pbuc1 
    lda #<main.rex1
    sta.z string
    lda #>main.rex1
    sta.z string+1
    jmp __b1
    // print::@1
  __b1:
    // [9] if(0!=*print::string#4) goto print::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (string),y
    cmp #0
    bne __b2
    jmp __breturn
    // print::@return
  __breturn:
    // [10] return 
    rts
    // print::@2
  __b2:
    // [11] *screen#13 = *print::string#4 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (string),y
    ldy #0
    sta (screen),y
    // [12] screen#4 = ++ screen#13 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [13] print::string#3 = ++ print::string#4 -- pbuz1=_inc_pbuz1 
    inc.z string
    bne !+
    inc.z string+1
  !:
    // [8] phi from print::@2 to print::@1 [phi:print::@2->print::@1]
  __b1_from___b2:
    // [8] phi screen#13 = screen#4 [phi:print::@2->print::@1#0] -- register_copy 
    // [8] phi print::string#4 = print::string#3 [phi:print::@2->print::@1#1] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b1_from_main:
Removing instruction print_from___b1:
Removing instruction __b2_from___b1:
Removing instruction print_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b1_from_print:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
const byte* main::rex1[]  = "rex"
void print(byte* print::string)
byte* print::string
byte* print::string#3 string zp[2]:4 202.0
byte* print::string#4 string zp[2]:4 101.0
byte* screen
byte* screen#13 screen zp[2]:2 39.75
byte* screen#20 screen zp[2]:2 15.0
byte* screen#4 screen zp[2]:2 101.0

zp[2]:2 [ screen#20 screen#13 screen#4 ]
zp[2]:4 [ print::string#4 print::string#3 ]


FINAL ASSEMBLER
Score: 675

  // File Comments
// Tests that identical strings are consolidated
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = 2
  // main
main: {
    // print(rex1)
    // [1] call print 
    // [7] phi from main to print [phi:main->print]
    // [7] phi screen#20 = (byte*) 1024 [phi:main->print#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    jsr print
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // print(rex2)
    // [3] call print 
    // [7] phi from main::@1 to print [phi:main::@1->print]
    // [7] phi screen#20 = screen#13 [phi:main::@1->print#0] -- register_copy 
    jsr print
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // print("rex")
    // [5] call print 
    // [7] phi from main::@2 to print [phi:main::@2->print]
    // [7] phi screen#20 = screen#13 [phi:main::@2->print#0] -- register_copy 
    jsr print
    // main::@return
    // }
    // [6] return 
    rts
    rex1: .text "rex"
    .byte 0
}
  // print
// print(byte* zp(4) string)
print: {
    .label string = 4
    // [8] phi from print to print::@1 [phi:print->print::@1]
    // [8] phi screen#13 = screen#20 [phi:print->print::@1#0] -- register_copy 
    // [8] phi print::string#4 = main::rex1 [phi:print->print::@1#1] -- pbuz1=pbuc1 
    lda #<main.rex1
    sta.z string
    lda #>main.rex1
    sta.z string+1
    // print::@1
  __b1:
    // while(*string)
    // [9] if(0!=*print::string#4) goto print::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (string),y
    cmp #0
    bne __b2
    // print::@return
    // }
    // [10] return 
    rts
    // print::@2
  __b2:
    // *screen++ = *string++
    // [11] *screen#13 = *print::string#4 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (string),y
    sta (screen),y
    // *screen++ = *string++;
    // [12] screen#4 = ++ screen#13 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [13] print::string#3 = ++ print::string#4 -- pbuz1=_inc_pbuz1 
    inc.z string
    bne !+
    inc.z string+1
  !:
    // [8] phi from print::@2 to print::@1 [phi:print::@2->print::@1]
    // [8] phi screen#13 = screen#4 [phi:print::@2->print::@1#0] -- register_copy 
    // [8] phi print::string#4 = print::string#3 [phi:print::@2->print::@1#1] -- register_copy 
    jmp __b1
}
  // File Data

