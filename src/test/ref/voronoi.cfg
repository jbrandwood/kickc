
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call initscreen 
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [2] phi()
  [3] call render 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call animate 
  to:main::@1

(void()) animate()
animate: scope:[animate]  from main::@2
  [6] (byte~) animate::$0 ← *((const byte*) XPOS) + (byte) 1
  [7] *((const byte*) XPOS) ← (byte~) animate::$0
  [8] if(*((const byte*) XPOS)!=(byte) $28) goto animate::@1
  to:animate::@5
animate::@5: scope:[animate]  from animate
  [9] *((const byte*) XPOS) ← (byte) 0
  to:animate::@1
animate::@1: scope:[animate]  from animate animate::@5
  [10] (byte~) animate::$3 ← *((const byte*) YPOS) + (byte) 1
  [11] *((const byte*) YPOS) ← (byte~) animate::$3
  [12] if(*((const byte*) YPOS)!=(byte) $19) goto animate::@2
  to:animate::@6
animate::@6: scope:[animate]  from animate::@1
  [13] *((const byte*) YPOS) ← (byte) 0
  to:animate::@2
animate::@2: scope:[animate]  from animate::@1 animate::@6
  [14] (byte~) animate::$6 ← *((const byte*) XPOS+(byte) 1) - (byte) 1
  [15] *((const byte*) XPOS+(byte) 1) ← (byte~) animate::$6
  [16] if(*((const byte*) XPOS+(byte) 1)!=(byte) $ff) goto animate::@3
  to:animate::@7
animate::@7: scope:[animate]  from animate::@2
  [17] *((const byte*) XPOS+(byte) 1) ← (byte) $28
  to:animate::@3
animate::@3: scope:[animate]  from animate::@2 animate::@7
  [18] (byte~) animate::$9 ← *((const byte*) YPOS+(byte) 2) + (byte) 1
  [19] *((const byte*) YPOS+(byte) 2) ← (byte~) animate::$9
  [20] if(*((const byte*) YPOS+(byte) 2)!=(byte) $19) goto animate::@4
  to:animate::@8
animate::@8: scope:[animate]  from animate::@3
  [21] *((const byte*) YPOS+(byte) 2) ← (byte) 0
  to:animate::@4
animate::@4: scope:[animate]  from animate::@3 animate::@8
  [22] (byte~) animate::$12 ← *((const byte*) YPOS+(byte) 3) - (byte) 1
  [23] *((const byte*) YPOS+(byte) 3) ← (byte~) animate::$12
  [24] if(*((const byte*) YPOS+(byte) 3)!=(byte) $ff) goto animate::@return
  to:animate::@9
animate::@9: scope:[animate]  from animate::@4
  [25] *((const byte*) YPOS+(byte) 3) ← (byte) $19
  [26] (byte~) animate::$15 ← *((const byte*) XPOS+(byte) 3) + (byte) 7
  [27] *((const byte*) XPOS+(byte) 3) ← (byte~) animate::$15
  [28] if(*((const byte*) XPOS+(byte) 3)<(byte) $28) goto animate::@return
  to:animate::@10
animate::@10: scope:[animate]  from animate::@9
  [29] (byte~) animate::$18 ← *((const byte*) XPOS+(byte) 3) - (byte) $28
  [30] *((const byte*) XPOS+(byte) 3) ← (byte~) animate::$18
  to:animate::@return
animate::@return: scope:[animate]  from animate::@10 animate::@4 animate::@9
  [31] return 
  to:@return

(void()) render()
render: scope:[render]  from main::@1
  [32] phi()
  to:render::@1
render::@1: scope:[render]  from render render::@3
  [33] (byte*) render::colline#5 ← phi( render/(const byte*) COLORS render::@3/(byte*) render::colline#1 )
  [33] (byte) render::y#4 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@4
  [34] (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@4/(byte) render::x#1 )
  [35] (byte) findcol::x#0 ← (byte) render::x#2
  [36] (byte) findcol::y#0 ← (byte) render::y#4
  [37] call findcol 
  [38] (byte) findcol::return#0 ← (byte) findcol::return#3
  to:render::@4
render::@4: scope:[render]  from render::@2
  [39] (byte) render::col#0 ← (byte) findcol::return#0
  [40] *((byte*) render::colline#5 + (byte) render::x#2) ← (byte) render::col#0
  [41] (byte) render::x#1 ← ++ (byte) render::x#2
  [42] if((byte) render::x#1!=(byte) $28) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@4
  [43] (byte*) render::colline#1 ← (byte*) render::colline#5 + (byte) $28
  [44] (byte) render::y#1 ← ++ (byte) render::y#4
  [45] if((byte) render::y#1!=(byte) $19) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  [46] return 
  to:@return

(byte()) findcol((byte) findcol::x , (byte) findcol::y)
findcol: scope:[findcol]  from render::@2
  [47] phi()
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  [48] (byte) findcol::mindiff#10 ← phi( findcol/(byte) $ff findcol::@8/(byte) findcol::mindiff#13 )
  [48] (byte) findcol::mincol#10 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::mincol#4 )
  [48] (byte) findcol::i#10 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::i#1 )
  [49] if((byte) findcol::i#10<(const byte) numpoints) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@1 findcol::@9
  [50] (byte) findcol::return#3 ← phi( findcol::@9/(byte) 0 findcol::@1/(byte) findcol::mincol#10 )
  [51] return 
  to:@return
findcol::@2: scope:[findcol]  from findcol::@1
  [52] (byte) findcol::xp#0 ← *((const byte*) XPOS + (byte) findcol::i#10)
  [53] (byte) findcol::yp#0 ← *((const byte*) YPOS + (byte) findcol::i#10)
  [54] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@3
  to:findcol::@9
findcol::@9: scope:[findcol]  from findcol::@2
  [55] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@3
  to:findcol::@return
findcol::@3: scope:[findcol]  from findcol::@2 findcol::@9
  [56] if((byte) findcol::x#0<(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@10
findcol::@10: scope:[findcol]  from findcol::@3
  [57] (byte) findcol::diff#2 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@10 findcol::@4
  [58] (byte) findcol::diff#5 ← phi( findcol::@10/(byte) findcol::diff#2 findcol::@4/(byte) findcol::diff#1 )
  [59] if((byte) findcol::y#0<(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@11
findcol::@11: scope:[findcol]  from findcol::@5
  [60] (byte~) findcol::$9 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  [61] (byte) findcol::diff#4 ← (byte) findcol::diff#5 + (byte~) findcol::$9
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@11 findcol::@6
  [62] (byte) findcol::diff#7 ← phi( findcol::@11/(byte) findcol::diff#4 findcol::@6/(byte) findcol::diff#3 )
  [63] if((byte) findcol::diff#7>=(byte) findcol::mindiff#10) goto findcol::@13
  to:findcol::@12
findcol::@12: scope:[findcol]  from findcol::@7
  [64] (byte) findcol::mincol#1 ← *((const byte*) COLS + (byte) findcol::i#10)
  to:findcol::@8
findcol::@8: scope:[findcol]  from findcol::@12 findcol::@13
  [65] (byte) findcol::mindiff#12 ← phi( findcol::@12/(byte) findcol::diff#7 findcol::@13/(byte) findcol::mindiff#15 )
  [65] (byte) findcol::mincol#4 ← phi( findcol::@12/(byte) findcol::mincol#1 findcol::@13/(byte) findcol::mincol#10 )
  [66] (byte) findcol::i#1 ← ++ (byte) findcol::i#10
  [67] (byte) findcol::mindiff#13 ← (byte) findcol::mindiff#12
  to:findcol::@1
findcol::@13: scope:[findcol]  from findcol::@7
  [68] (byte) findcol::mindiff#15 ← (byte) findcol::mindiff#10
  to:findcol::@8
findcol::@6: scope:[findcol]  from findcol::@5
  [69] (byte~) findcol::$11 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  [70] (byte) findcol::diff#3 ← (byte) findcol::diff#5 + (byte~) findcol::$11
  to:findcol::@7
findcol::@4: scope:[findcol]  from findcol::@3
  [71] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5

(void()) initscreen()
initscreen: scope:[initscreen]  from main
  [72] phi()
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@2
  [73] (byte*) initscreen::screen#2 ← phi( initscreen/(const byte*) SCREEN initscreen::@2/(byte*) initscreen::screen#1 )
  [74] if((byte*) initscreen::screen#2<(const byte*) SCREEN+(word) $3e8) goto initscreen::@2
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  [75] return 
  to:@return
initscreen::@2: scope:[initscreen]  from initscreen::@1
  [76] *((byte*) initscreen::screen#2) ← (const byte) FILL
  [77] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  to:initscreen::@1
