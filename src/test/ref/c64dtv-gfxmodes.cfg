@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  asm { sei  }
  [5] *((const byte*) PROCPORT_DDR) ← (const byte) PROCPORT_DDR_MEMORY_MASK
  [6] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO
  [7] *((const byte*) DTV_FEATURE) ← (const byte) DTV_FEATURE_ENABLE
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [8] phi()
  [9] call menu 
  to:main::@1

(void()) menu()
menu: scope:[menu]  from main::@1
  [10] *((const byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0
  [11] *((const byte*) DTV_COLOR_BANK_LO) ← <(word)(const dword) DTV_COLOR_BANK_DEFAULT/(word) $400
  [12] *((const byte*) DTV_COLOR_BANK_HI) ← (byte) 0
  [13] *((const byte*) DTV_CONTROL) ← (byte) 0
  [14] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3
  [15] *((const byte*) CIA2_PORT_A) ← (byte) 3^(byte)(word)(const byte*) menu::CHARSET/(word) $4000
  [16] *((const byte*) VIC_CONTROL) ← (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3
  [17] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_CSEL
  [18] *((const byte*) VIC_MEMORY) ← (byte)(word)(const byte*) menu::CHARSET&(word) $3fff/(word) $400
  to:menu::@1
menu::@1: scope:[menu]  from menu menu::@1
  [19] (byte) menu::i#2 ← phi( menu/(byte) 0 menu::@1/(byte) menu::i#1 )
  [20] *((const byte*) DTV_PALETTE + (byte) menu::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT + (byte) menu::i#2)
  [21] (byte) menu::i#1 ← ++ (byte) menu::i#2
  [22] if((byte) menu::i#1!=(byte) $10) goto menu::@1
  to:menu::@2
menu::@2: scope:[menu]  from menu::@1 menu::@3
  [23] (byte*) menu::c#2 ← phi( menu::@1/(const byte*) COLS menu::@3/(byte*) menu::c#1 )
  [24] if((byte*) menu::c#2!=(const byte*) COLS+(word) $3e8) goto menu::@3
  to:menu::@4
menu::@4: scope:[menu]  from menu::@2
  [25] *((const byte*) BGCOL) ← (byte) 0
  [26] *((const byte*) BORDERCOL) ← (byte) 0
  [27] call print_set_screen 
  to:menu::@29
menu::@29: scope:[menu]  from menu::@4
  [28] phi()
  [29] call print_cls 
  to:menu::@30
menu::@30: scope:[menu]  from menu::@29
  [30] phi()
  [31] call print_str_lines 
  to:menu::@5
menu::@5: scope:[menu]  from menu::@30 menu::@42
  [32] phi()
  [33] call keyboard_key_pressed 
  [34] (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#0
  to:menu::@31
menu::@31: scope:[menu]  from menu::@5
  [35] (byte~) menu::$29 ← (byte) keyboard_key_pressed::return#2
  [36] if((byte~) menu::$29==(byte) 0) goto menu::@6
  to:menu::@17
menu::@17: scope:[menu]  from menu::@31
  [37] phi()
  [38] call mode_stdchar 
  to:menu::@return
menu::@return: scope:[menu]  from menu::@17 menu::@18 menu::@19 menu::@20 menu::@21 menu::@22 menu::@23 menu::@24 menu::@25 menu::@26 menu::@27 menu::@28
  [39] return 
  to:@return
menu::@6: scope:[menu]  from menu::@31
  [40] phi()
  [41] call keyboard_key_pressed 
  [42] (byte) keyboard_key_pressed::return#24 ← (byte) keyboard_key_pressed::return#0
  to:menu::@32
menu::@32: scope:[menu]  from menu::@6
  [43] (byte~) menu::$33 ← (byte) keyboard_key_pressed::return#24
  [44] if((byte~) menu::$33==(byte) 0) goto menu::@7
  to:menu::@18
menu::@18: scope:[menu]  from menu::@32
  [45] phi()
  [46] call mode_ecmchar 
  to:menu::@return
menu::@7: scope:[menu]  from menu::@32
  [47] phi()
  [48] call keyboard_key_pressed 
  [49] (byte) keyboard_key_pressed::return#25 ← (byte) keyboard_key_pressed::return#0
  to:menu::@33
menu::@33: scope:[menu]  from menu::@7
  [50] (byte~) menu::$37 ← (byte) keyboard_key_pressed::return#25
  [51] if((byte~) menu::$37==(byte) 0) goto menu::@8
  to:menu::@19
menu::@19: scope:[menu]  from menu::@33
  [52] phi()
  [53] call mode_mcchar 
  to:menu::@return
menu::@8: scope:[menu]  from menu::@33
  [54] phi()
  [55] call keyboard_key_pressed 
  [56] (byte) keyboard_key_pressed::return#26 ← (byte) keyboard_key_pressed::return#0
  to:menu::@34
menu::@34: scope:[menu]  from menu::@8
  [57] (byte~) menu::$41 ← (byte) keyboard_key_pressed::return#26
  [58] if((byte~) menu::$41==(byte) 0) goto menu::@9
  to:menu::@20
menu::@20: scope:[menu]  from menu::@34
  [59] phi()
  [60] call mode_stdbitmap 
  to:menu::@return
menu::@9: scope:[menu]  from menu::@34
  [61] phi()
  [62] call keyboard_key_pressed 
  [63] (byte) keyboard_key_pressed::return#27 ← (byte) keyboard_key_pressed::return#0
  to:menu::@35
menu::@35: scope:[menu]  from menu::@9
  [64] (byte~) menu::$45 ← (byte) keyboard_key_pressed::return#27
  [65] if((byte~) menu::$45==(byte) 0) goto menu::@10
  to:menu::@21
menu::@21: scope:[menu]  from menu::@35
  [66] phi()
  [67] call mode_hicolstdchar 
  to:menu::@return
menu::@10: scope:[menu]  from menu::@35
  [68] phi()
  [69] call keyboard_key_pressed 
  [70] (byte) keyboard_key_pressed::return#28 ← (byte) keyboard_key_pressed::return#0
  to:menu::@36
menu::@36: scope:[menu]  from menu::@10
  [71] (byte~) menu::$49 ← (byte) keyboard_key_pressed::return#28
  [72] if((byte~) menu::$49==(byte) 0) goto menu::@11
  to:menu::@22
menu::@22: scope:[menu]  from menu::@36
  [73] phi()
  [74] call mode_hicolecmchar 
  to:menu::@return
menu::@11: scope:[menu]  from menu::@36
  [75] phi()
  [76] call keyboard_key_pressed 
  [77] (byte) keyboard_key_pressed::return#29 ← (byte) keyboard_key_pressed::return#0
  to:menu::@37
menu::@37: scope:[menu]  from menu::@11
  [78] (byte~) menu::$53 ← (byte) keyboard_key_pressed::return#29
  [79] if((byte~) menu::$53==(byte) 0) goto menu::@12
  to:menu::@23
menu::@23: scope:[menu]  from menu::@37
  [80] phi()
  [81] call mode_hicolmcchar 
  to:menu::@return
menu::@12: scope:[menu]  from menu::@37
  [82] phi()
  [83] call keyboard_key_pressed 
  [84] (byte) keyboard_key_pressed::return#30 ← (byte) keyboard_key_pressed::return#0
  to:menu::@38
menu::@38: scope:[menu]  from menu::@12
  [85] (byte~) menu::$57 ← (byte) keyboard_key_pressed::return#30
  [86] if((byte~) menu::$57==(byte) 0) goto menu::@13
  to:menu::@24
menu::@24: scope:[menu]  from menu::@38
  [87] phi()
  [88] call mode_sixsfred2 
  to:menu::@return
menu::@13: scope:[menu]  from menu::@38
  [89] phi()
  [90] call keyboard_key_pressed 
  [91] (byte) keyboard_key_pressed::return#10 ← (byte) keyboard_key_pressed::return#0
  to:menu::@39
menu::@39: scope:[menu]  from menu::@13
  [92] (byte~) menu::$61 ← (byte) keyboard_key_pressed::return#10
  [93] if((byte~) menu::$61==(byte) 0) goto menu::@14
  to:menu::@25
menu::@25: scope:[menu]  from menu::@39
  [94] phi()
  [95] call mode_twoplanebitmap 
  to:menu::@return
menu::@14: scope:[menu]  from menu::@39
  [96] phi()
  [97] call keyboard_key_pressed 
  [98] (byte) keyboard_key_pressed::return#11 ← (byte) keyboard_key_pressed::return#0
  to:menu::@40
menu::@40: scope:[menu]  from menu::@14
  [99] (byte~) menu::$65 ← (byte) keyboard_key_pressed::return#11
  [100] if((byte~) menu::$65==(byte) 0) goto menu::@15
  to:menu::@26
menu::@26: scope:[menu]  from menu::@40
  [101] phi()
  [102] call mode_sixsfred 
  to:menu::@return
menu::@15: scope:[menu]  from menu::@40
  [103] phi()
  [104] call keyboard_key_pressed 
  [105] (byte) keyboard_key_pressed::return#12 ← (byte) keyboard_key_pressed::return#0
  to:menu::@41
menu::@41: scope:[menu]  from menu::@15
  [106] (byte~) menu::$69 ← (byte) keyboard_key_pressed::return#12
  [107] if((byte~) menu::$69==(byte) 0) goto menu::@16
  to:menu::@27
menu::@27: scope:[menu]  from menu::@41
  [108] phi()
  [109] call mode_8bpppixelcell 
  to:menu::@return
menu::@16: scope:[menu]  from menu::@41
  [110] phi()
  [111] call keyboard_key_pressed 
  [112] (byte) keyboard_key_pressed::return#13 ← (byte) keyboard_key_pressed::return#0
  to:menu::@42
menu::@42: scope:[menu]  from menu::@16
  [113] (byte~) menu::$73 ← (byte) keyboard_key_pressed::return#13
  [114] if((byte~) menu::$73==(byte) 0) goto menu::@5
  to:menu::@28
menu::@28: scope:[menu]  from menu::@42
  [115] phi()
  [116] call mode_8bppchunkybmm 
  to:menu::@return
menu::@3: scope:[menu]  from menu::@2
  [117] *((byte*) menu::c#2) ← (const byte) LIGHT_GREEN
  [118] (byte*) menu::c#1 ← ++ (byte*) menu::c#2
  to:menu::@2

(void()) mode_8bppchunkybmm()
mode_8bppchunkybmm: scope:[mode_8bppchunkybmm]  from menu::@28
  [119] *((const byte*) DTV_CONTROL) ← (const byte) DTV_HIGHCOLOR|(const byte) DTV_LINEAR|(const byte) DTV_CHUNKY|(const byte) DTV_COLORRAM_OFF
  [120] *((const byte*) VIC_CONTROL) ← (const byte) VIC_ECM|(const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3
  [121] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_MCM|(const byte) VIC_CSEL
  [122] *((const byte*) DTV_PLANEB_START_LO) ← (byte) 0
  [123] *((const byte*) DTV_PLANEB_START_MI) ← (byte) 0
  [124] *((const byte*) DTV_PLANEB_START_HI) ← <>(const dword) mode_8bppchunkybmm::PLANEB
  [125] *((const byte*) DTV_PLANEB_STEP) ← (byte) 8
  [126] *((const byte*) DTV_PLANEB_MODULO_LO) ← (byte) 0
  [127] *((const byte*) DTV_PLANEB_MODULO_HI) ← (byte) 0
  [128] *((const byte*) BORDERCOL) ← (byte) 0
  to:mode_8bppchunkybmm::@1
mode_8bppchunkybmm::@1: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm mode_8bppchunkybmm::@1
  [129] (byte) mode_8bppchunkybmm::i#2 ← phi( mode_8bppchunkybmm/(byte) 0 mode_8bppchunkybmm::@1/(byte) mode_8bppchunkybmm::i#1 )
  [130] *((const byte*) DTV_PALETTE + (byte) mode_8bppchunkybmm::i#2) ← (byte) mode_8bppchunkybmm::i#2
  [131] (byte) mode_8bppchunkybmm::i#1 ← ++ (byte) mode_8bppchunkybmm::i#2
  [132] if((byte) mode_8bppchunkybmm::i#1!=(byte) $10) goto mode_8bppchunkybmm::@1
  to:mode_8bppchunkybmm::@2
mode_8bppchunkybmm::@2: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@1
  [133] phi()
  [134] call dtvSetCpuBankSegment1 
  to:mode_8bppchunkybmm::@3
mode_8bppchunkybmm::@3: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@2 mode_8bppchunkybmm::@7
  [135] (byte) mode_8bppchunkybmm::gfxbCpuBank#7 ← phi( mode_8bppchunkybmm::@7/(byte) mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::@2/++(byte)(const dword) mode_8bppchunkybmm::PLANEB/(word) $4000 )
  [135] (byte) mode_8bppchunkybmm::y#6 ← phi( mode_8bppchunkybmm::@7/(byte) mode_8bppchunkybmm::y#1 mode_8bppchunkybmm::@2/(byte) 0 )
  [135] (byte*) mode_8bppchunkybmm::gfxb#5 ← phi( mode_8bppchunkybmm::@7/(byte*) mode_8bppchunkybmm::gfxb#1 mode_8bppchunkybmm::@2/(byte*) 16384 )
  to:mode_8bppchunkybmm::@4
mode_8bppchunkybmm::@4: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@3 mode_8bppchunkybmm::@5
  [136] (byte) mode_8bppchunkybmm::gfxbCpuBank#4 ← phi( mode_8bppchunkybmm::@3/(byte) mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::@5/(byte) mode_8bppchunkybmm::gfxbCpuBank#8 )
  [136] (word) mode_8bppchunkybmm::x#2 ← phi( mode_8bppchunkybmm::@3/(word) 0 mode_8bppchunkybmm::@5/(word) mode_8bppchunkybmm::x#1 )
  [136] (byte*) mode_8bppchunkybmm::gfxb#3 ← phi( mode_8bppchunkybmm::@3/(byte*) mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::@5/(byte*) mode_8bppchunkybmm::gfxb#1 )
  [137] if((byte*) mode_8bppchunkybmm::gfxb#3!=(word) $8000) goto mode_8bppchunkybmm::@5
  to:mode_8bppchunkybmm::@6
mode_8bppchunkybmm::@6: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@4
  [138] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) mode_8bppchunkybmm::gfxbCpuBank#4
  [139] call dtvSetCpuBankSegment1 
  to:mode_8bppchunkybmm::@9
mode_8bppchunkybmm::@9: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@6
  [140] (byte) mode_8bppchunkybmm::gfxbCpuBank#2 ← ++ (byte) mode_8bppchunkybmm::gfxbCpuBank#4
  to:mode_8bppchunkybmm::@5
mode_8bppchunkybmm::@5: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@4 mode_8bppchunkybmm::@9
  [141] (byte) mode_8bppchunkybmm::gfxbCpuBank#8 ← phi( mode_8bppchunkybmm::@9/(byte) mode_8bppchunkybmm::gfxbCpuBank#2 mode_8bppchunkybmm::@4/(byte) mode_8bppchunkybmm::gfxbCpuBank#4 )
  [141] (byte*) mode_8bppchunkybmm::gfxb#4 ← phi( mode_8bppchunkybmm::@9/(byte*) 16384 mode_8bppchunkybmm::@4/(byte*) mode_8bppchunkybmm::gfxb#3 )
  [142] (word~) mode_8bppchunkybmm::$26 ← (word) mode_8bppchunkybmm::x#2 + (byte) mode_8bppchunkybmm::y#6
  [143] (byte) mode_8bppchunkybmm::c#0 ← (byte)(word~) mode_8bppchunkybmm::$26
  [144] *((byte*) mode_8bppchunkybmm::gfxb#4) ← (byte) mode_8bppchunkybmm::c#0
  [145] (byte*) mode_8bppchunkybmm::gfxb#1 ← ++ (byte*) mode_8bppchunkybmm::gfxb#4
  [146] (word) mode_8bppchunkybmm::x#1 ← ++ (word) mode_8bppchunkybmm::x#2
  [147] if((word) mode_8bppchunkybmm::x#1!=(word) $140) goto mode_8bppchunkybmm::@4
  to:mode_8bppchunkybmm::@7
mode_8bppchunkybmm::@7: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@5
  [148] (byte) mode_8bppchunkybmm::y#1 ← ++ (byte) mode_8bppchunkybmm::y#6
  [149] if((byte) mode_8bppchunkybmm::y#1!=(byte) $c8) goto mode_8bppchunkybmm::@3
  to:mode_8bppchunkybmm::@8
mode_8bppchunkybmm::@8: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@7
  [150] phi()
  [151] call dtvSetCpuBankSegment1 
  to:mode_8bppchunkybmm::@10
mode_8bppchunkybmm::@10: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@8
  [152] phi()
  [153] call mode_ctrl 
  to:mode_8bppchunkybmm::@return
mode_8bppchunkybmm::@return: scope:[mode_8bppchunkybmm]  from mode_8bppchunkybmm::@10
  [154] return 
  to:@return

(void()) mode_ctrl()
mode_ctrl: scope:[mode_ctrl]  from mode_8bppchunkybmm::@10 mode_8bpppixelcell::@13 mode_ecmchar::@6 mode_hicolecmchar::@6 mode_hicolmcchar::@6 mode_hicolstdchar::@6 mode_mcchar::@6 mode_sixsfred2::@12 mode_sixsfred::@12 mode_stdbitmap::@9 mode_stdchar::@6 mode_twoplanebitmap::@15
  [155] (byte) dtv_control#144 ← phi( mode_8bppchunkybmm::@10/(const byte) DTV_HIGHCOLOR|(const byte) DTV_LINEAR|(const byte) DTV_CHUNKY|(const byte) DTV_COLORRAM_OFF mode_8bpppixelcell::@13/(const byte) DTV_HIGHCOLOR|(const byte) DTV_LINEAR|(const byte) DTV_CHUNKY mode_ecmchar::@6/(byte) 0 mode_hicolecmchar::@6/(const byte) DTV_HIGHCOLOR mode_hicolmcchar::@6/(const byte) DTV_HIGHCOLOR mode_hicolstdchar::@6/(const byte) DTV_HIGHCOLOR mode_mcchar::@6/(byte) 0 mode_sixsfred2::@12/(const byte) DTV_LINEAR mode_sixsfred::@12/(const byte) DTV_HIGHCOLOR|(const byte) DTV_LINEAR mode_stdbitmap::@9/(byte) 0 mode_stdchar::@6/(byte) 0 mode_twoplanebitmap::@15/(const byte) DTV_HIGHCOLOR|(const byte) DTV_LINEAR )
  to:mode_ctrl::@1
mode_ctrl::@1: scope:[mode_ctrl]  from mode_ctrl mode_ctrl::@11 mode_ctrl::@18
  [156] (byte) dtv_control#114 ← phi( mode_ctrl/(byte) dtv_control#144 mode_ctrl::@11/(byte) dtv_control#114 mode_ctrl::@18/(byte) dtv_control#17 )
  to:mode_ctrl::@2
mode_ctrl::@2: scope:[mode_ctrl]  from mode_ctrl::@1 mode_ctrl::@2
  [157] if(*((const byte*) RASTER)!=(byte) $ff) goto mode_ctrl::@2
  to:mode_ctrl::@3
mode_ctrl::@3: scope:[mode_ctrl]  from mode_ctrl::@2
  [158] phi()
  [159] call keyboard_key_pressed 
  [160] (byte) keyboard_key_pressed::return#14 ← (byte) keyboard_key_pressed::return#0
  to:mode_ctrl::@19
mode_ctrl::@19: scope:[mode_ctrl]  from mode_ctrl::@3
  [161] (byte~) mode_ctrl::$1 ← (byte) keyboard_key_pressed::return#14
  [162] if((byte~) mode_ctrl::$1==(byte) 0) goto mode_ctrl::@4
  to:mode_ctrl::@return
mode_ctrl::@return: scope:[mode_ctrl]  from mode_ctrl::@19
  [163] return 
  to:@return
mode_ctrl::@4: scope:[mode_ctrl]  from mode_ctrl::@19
  [164] (byte) mode_ctrl::ctrl#0 ← (byte) dtv_control#114
  [165] call keyboard_key_pressed 
  [166] (byte) keyboard_key_pressed::return#15 ← (byte) keyboard_key_pressed::return#0
  to:mode_ctrl::@20
mode_ctrl::@20: scope:[mode_ctrl]  from mode_ctrl::@4
  [167] (byte~) mode_ctrl::$4 ← (byte) keyboard_key_pressed::return#15
  [168] if((byte~) mode_ctrl::$4==(byte) 0) goto mode_ctrl::@5
  to:mode_ctrl::@12
mode_ctrl::@12: scope:[mode_ctrl]  from mode_ctrl::@20
  [169] (byte) mode_ctrl::ctrl#1 ← (byte) mode_ctrl::ctrl#0 | (const byte) DTV_LINEAR
  to:mode_ctrl::@5
mode_ctrl::@5: scope:[mode_ctrl]  from mode_ctrl::@12 mode_ctrl::@20
  [170] (byte) mode_ctrl::ctrl#17 ← phi( mode_ctrl::@12/(byte) mode_ctrl::ctrl#1 mode_ctrl::@20/(byte) mode_ctrl::ctrl#0 )
  [171] call keyboard_key_pressed 
  [172] (byte) keyboard_key_pressed::return#16 ← (byte) keyboard_key_pressed::return#0
  to:mode_ctrl::@21
mode_ctrl::@21: scope:[mode_ctrl]  from mode_ctrl::@5
  [173] (byte~) mode_ctrl::$8 ← (byte) keyboard_key_pressed::return#16
  [174] if((byte~) mode_ctrl::$8==(byte) 0) goto mode_ctrl::@6
  to:mode_ctrl::@13
mode_ctrl::@13: scope:[mode_ctrl]  from mode_ctrl::@21
  [175] (byte) mode_ctrl::ctrl#2 ← (byte) mode_ctrl::ctrl#17 | (const byte) DTV_HIGHCOLOR
  to:mode_ctrl::@6
mode_ctrl::@6: scope:[mode_ctrl]  from mode_ctrl::@13 mode_ctrl::@21
  [176] (byte) mode_ctrl::ctrl#10 ← phi( mode_ctrl::@13/(byte) mode_ctrl::ctrl#2 mode_ctrl::@21/(byte) mode_ctrl::ctrl#17 )
  [177] call keyboard_key_pressed 
  [178] (byte) keyboard_key_pressed::return#17 ← (byte) keyboard_key_pressed::return#0
  to:mode_ctrl::@22
mode_ctrl::@22: scope:[mode_ctrl]  from mode_ctrl::@6
  [179] (byte~) mode_ctrl::$12 ← (byte) keyboard_key_pressed::return#17
  [180] if((byte~) mode_ctrl::$12==(byte) 0) goto mode_ctrl::@7
  to:mode_ctrl::@14
mode_ctrl::@14: scope:[mode_ctrl]  from mode_ctrl::@22
  [181] (byte) mode_ctrl::ctrl#3 ← (byte) mode_ctrl::ctrl#10 | (const byte) DTV_OVERSCAN
  to:mode_ctrl::@7
mode_ctrl::@7: scope:[mode_ctrl]  from mode_ctrl::@14 mode_ctrl::@22
  [182] (byte) mode_ctrl::ctrl#11 ← phi( mode_ctrl::@14/(byte) mode_ctrl::ctrl#3 mode_ctrl::@22/(byte) mode_ctrl::ctrl#10 )
  [183] call keyboard_key_pressed 
  [184] (byte) keyboard_key_pressed::return#18 ← (byte) keyboard_key_pressed::return#0
  to:mode_ctrl::@23
mode_ctrl::@23: scope:[mode_ctrl]  from mode_ctrl::@7
  [185] (byte~) mode_ctrl::$16 ← (byte) keyboard_key_pressed::return#18
  [186] if((byte~) mode_ctrl::$16==(byte) 0) goto mode_ctrl::@8
  to:mode_ctrl::@15
mode_ctrl::@15: scope:[mode_ctrl]  from mode_ctrl::@23
  [187] (byte) mode_ctrl::ctrl#4 ← (byte) mode_ctrl::ctrl#11 | (const byte) DTV_BORDER_OFF
  to:mode_ctrl::@8
mode_ctrl::@8: scope:[mode_ctrl]  from mode_ctrl::@15 mode_ctrl::@23
  [188] (byte) mode_ctrl::ctrl#12 ← phi( mode_ctrl::@15/(byte) mode_ctrl::ctrl#4 mode_ctrl::@23/(byte) mode_ctrl::ctrl#11 )
  [189] call keyboard_key_pressed 
  [190] (byte) keyboard_key_pressed::return#19 ← (byte) keyboard_key_pressed::return#0
  to:mode_ctrl::@24
mode_ctrl::@24: scope:[mode_ctrl]  from mode_ctrl::@8
  [191] (byte~) mode_ctrl::$20 ← (byte) keyboard_key_pressed::return#19
  [192] if((byte~) mode_ctrl::$20==(byte) 0) goto mode_ctrl::@9
  to:mode_ctrl::@16
mode_ctrl::@16: scope:[mode_ctrl]  from mode_ctrl::@24
  [193] (byte) mode_ctrl::ctrl#5 ← (byte) mode_ctrl::ctrl#12 | (const byte) DTV_CHUNKY
  to:mode_ctrl::@9
mode_ctrl::@9: scope:[mode_ctrl]  from mode_ctrl::@16 mode_ctrl::@24
  [194] (byte) mode_ctrl::ctrl#13 ← phi( mode_ctrl::@16/(byte) mode_ctrl::ctrl#5 mode_ctrl::@24/(byte) mode_ctrl::ctrl#12 )
  [195] call keyboard_key_pressed 
  [196] (byte) keyboard_key_pressed::return#20 ← (byte) keyboard_key_pressed::return#0
  to:mode_ctrl::@25
mode_ctrl::@25: scope:[mode_ctrl]  from mode_ctrl::@9
  [197] (byte~) mode_ctrl::$24 ← (byte) keyboard_key_pressed::return#20
  [198] if((byte~) mode_ctrl::$24==(byte) 0) goto mode_ctrl::@10
  to:mode_ctrl::@17
mode_ctrl::@17: scope:[mode_ctrl]  from mode_ctrl::@25
  [199] (byte) mode_ctrl::ctrl#6 ← (byte) mode_ctrl::ctrl#13 | (const byte) DTV_COLORRAM_OFF
  to:mode_ctrl::@10
mode_ctrl::@10: scope:[mode_ctrl]  from mode_ctrl::@17 mode_ctrl::@25
  [200] (byte) mode_ctrl::ctrl#22 ← phi( mode_ctrl::@17/(byte) mode_ctrl::ctrl#6 mode_ctrl::@25/(byte) mode_ctrl::ctrl#13 )
  [201] call keyboard_key_pressed 
  [202] (byte) keyboard_key_pressed::return#21 ← (byte) keyboard_key_pressed::return#0
  to:mode_ctrl::@26
mode_ctrl::@26: scope:[mode_ctrl]  from mode_ctrl::@10
  [203] (byte~) mode_ctrl::$28 ← (byte) keyboard_key_pressed::return#21
  [204] if((byte~) mode_ctrl::$28==(byte) 0) goto mode_ctrl::@27
  to:mode_ctrl::@11
mode_ctrl::@27: scope:[mode_ctrl]  from mode_ctrl::@26
  [205] phi()
  to:mode_ctrl::@11
mode_ctrl::@11: scope:[mode_ctrl]  from mode_ctrl::@26 mode_ctrl::@27
  [206] (byte) mode_ctrl::ctrl#14 ← phi( mode_ctrl::@26/(byte) 0 mode_ctrl::@27/(byte) mode_ctrl::ctrl#22 )
  [207] if((byte) mode_ctrl::ctrl#14==(byte) dtv_control#114) goto mode_ctrl::@1
  to:mode_ctrl::@18
mode_ctrl::@18: scope:[mode_ctrl]  from mode_ctrl::@11
  [208] (byte) dtv_control#17 ← (byte) mode_ctrl::ctrl#14
  [209] *((const byte*) DTV_CONTROL) ← (byte) mode_ctrl::ctrl#14
  [210] *((const byte*) BORDERCOL) ← (byte) mode_ctrl::ctrl#14
  to:mode_ctrl::@1

(byte()) keyboard_key_pressed((byte) keyboard_key_pressed::key)
keyboard_key_pressed: scope:[keyboard_key_pressed]  from menu::@10 menu::@11 menu::@12 menu::@13 menu::@14 menu::@15 menu::@16 menu::@5 menu::@6 menu::@7 menu::@8 menu::@9 mode_ctrl::@10 mode_ctrl::@3 mode_ctrl::@4 mode_ctrl::@5 mode_ctrl::@6 mode_ctrl::@7 mode_ctrl::@8 mode_ctrl::@9
  [211] (byte) keyboard_key_pressed::key#20 ← phi( menu::@5/(const byte) KEY_1 menu::@6/(const byte) KEY_2 menu::@7/(const byte) KEY_3 menu::@8/(const byte) KEY_4 menu::@9/(const byte) KEY_6 menu::@10/(const byte) KEY_7 menu::@11/(const byte) KEY_8 menu::@12/(const byte) KEY_A menu::@13/(const byte) KEY_B menu::@14/(const byte) KEY_C menu::@15/(const byte) KEY_D menu::@16/(const byte) KEY_E mode_ctrl::@4/(const byte) KEY_L mode_ctrl::@5/(const byte) KEY_H mode_ctrl::@6/(const byte) KEY_O mode_ctrl::@7/(const byte) KEY_B mode_ctrl::@8/(const byte) KEY_U mode_ctrl::@9/(const byte) KEY_C mode_ctrl::@10/(const byte) KEY_0 mode_ctrl::@3/(const byte) KEY_SPACE )
  [212] (byte) keyboard_key_pressed::colidx#0 ← (byte) keyboard_key_pressed::key#20 & (byte) 7
  [213] (byte) keyboard_key_pressed::rowidx#0 ← (byte) keyboard_key_pressed::key#20 >> (byte) 3
  [214] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_key_pressed::rowidx#0
  [215] call keyboard_matrix_read 
  [216] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  to:keyboard_key_pressed::@1
keyboard_key_pressed::@1: scope:[keyboard_key_pressed]  from keyboard_key_pressed
  [217] (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#2
  [218] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte[8]) keyboard_matrix_col_bitmask + (byte) keyboard_key_pressed::colidx#0)
  to:keyboard_key_pressed::@return
keyboard_key_pressed::@return: scope:[keyboard_key_pressed]  from keyboard_key_pressed::@1
  [219] return 
  to:@return

(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_key_pressed
  [220] *((const byte*) CIA1_PORT_A) ← *((const byte[8]) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0)
  [221] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [222] return 
  to:@return

(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
dtvSetCpuBankSegment1: scope:[dtvSetCpuBankSegment1]  from mode_8bppchunkybmm::@2 mode_8bppchunkybmm::@6 mode_8bppchunkybmm::@8
  [223] (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 ← phi( mode_8bppchunkybmm::@2/(byte)(const dword) mode_8bppchunkybmm::PLANEB/(word) $4000 mode_8bppchunkybmm::@6/(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 mode_8bppchunkybmm::@8/(byte)(number) $4000/(number) $4000 )
  [224] *((const byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#3
  asm { .byte$32,$dd lda$ff .byte$32,$00  }
  to:dtvSetCpuBankSegment1::@return
dtvSetCpuBankSegment1::@return: scope:[dtvSetCpuBankSegment1]  from dtvSetCpuBankSegment1
  [226] return 
  to:@return

(void()) mode_8bpppixelcell()
mode_8bpppixelcell: scope:[mode_8bpppixelcell]  from menu::@27
  [227] *((const byte*) DTV_CONTROL) ← (const byte) DTV_HIGHCOLOR|(const byte) DTV_LINEAR|(const byte) DTV_CHUNKY
  [228] *((const byte*) VIC_CONTROL) ← (const byte) VIC_ECM|(const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3
  [229] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_MCM|(const byte) VIC_CSEL
  [230] *((const byte*) DTV_PLANEA_START_LO) ← (byte) 0
  [231] *((const byte*) DTV_PLANEA_START_MI) ← >(const byte*) mode_8bpppixelcell::PLANEA
  [232] *((const byte*) DTV_PLANEA_START_HI) ← (byte) 0
  [233] *((const byte*) DTV_PLANEA_STEP) ← (byte) 1
  [234] *((const byte*) DTV_PLANEA_MODULO_LO) ← (byte) 0
  [235] *((const byte*) DTV_PLANEA_MODULO_HI) ← (byte) 0
  [236] *((const byte*) DTV_PLANEB_START_LO) ← (byte) 0
  [237] *((const byte*) DTV_PLANEB_START_MI) ← >(const byte*) mode_8bpppixelcell::PLANEB
  [238] *((const byte*) DTV_PLANEB_START_HI) ← (byte) 0
  [239] *((const byte*) DTV_PLANEB_STEP) ← (byte) 0
  [240] *((const byte*) DTV_PLANEB_MODULO_LO) ← (byte) 0
  [241] *((const byte*) DTV_PLANEB_MODULO_HI) ← (byte) 0
  [242] *((const byte*) BORDERCOL) ← (byte) 0
  to:mode_8bpppixelcell::@1
mode_8bpppixelcell::@1: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell mode_8bpppixelcell::@1
  [243] (byte) mode_8bpppixelcell::i#2 ← phi( mode_8bpppixelcell/(byte) 0 mode_8bpppixelcell::@1/(byte) mode_8bpppixelcell::i#1 )
  [244] *((const byte*) DTV_PALETTE + (byte) mode_8bpppixelcell::i#2) ← (byte) mode_8bpppixelcell::i#2
  [245] (byte) mode_8bpppixelcell::i#1 ← ++ (byte) mode_8bpppixelcell::i#2
  [246] if((byte) mode_8bpppixelcell::i#1!=(byte) $10) goto mode_8bpppixelcell::@1
  to:mode_8bpppixelcell::@2
mode_8bpppixelcell::@2: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@1 mode_8bpppixelcell::@4
  [247] (byte*) mode_8bpppixelcell::gfxa#3 ← phi( mode_8bpppixelcell::@1/(const byte*) mode_8bpppixelcell::PLANEA mode_8bpppixelcell::@4/(byte*) mode_8bpppixelcell::gfxa#1 )
  [247] (byte) mode_8bpppixelcell::ay#4 ← phi( mode_8bpppixelcell::@1/(byte) 0 mode_8bpppixelcell::@4/(byte) mode_8bpppixelcell::ay#1 )
  to:mode_8bpppixelcell::@3
mode_8bpppixelcell::@3: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@2 mode_8bpppixelcell::@3
  [248] (byte*) mode_8bpppixelcell::gfxa#2 ← phi( mode_8bpppixelcell::@2/(byte*) mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::@3/(byte*) mode_8bpppixelcell::gfxa#1 )
  [248] (byte) mode_8bpppixelcell::ax#2 ← phi( mode_8bpppixelcell::@2/(byte) 0 mode_8bpppixelcell::@3/(byte) mode_8bpppixelcell::ax#1 )
  [249] (byte~) mode_8bpppixelcell::$14 ← (byte) mode_8bpppixelcell::ay#4 & (byte) $f
  [250] (byte~) mode_8bpppixelcell::$15 ← (byte~) mode_8bpppixelcell::$14 << (byte) 4
  [251] (byte~) mode_8bpppixelcell::$16 ← (byte) mode_8bpppixelcell::ax#2 & (byte) $f
  [252] (byte~) mode_8bpppixelcell::$17 ← (byte~) mode_8bpppixelcell::$15 | (byte~) mode_8bpppixelcell::$16
  [253] *((byte*) mode_8bpppixelcell::gfxa#2) ← (byte~) mode_8bpppixelcell::$17
  [254] (byte*) mode_8bpppixelcell::gfxa#1 ← ++ (byte*) mode_8bpppixelcell::gfxa#2
  [255] (byte) mode_8bpppixelcell::ax#1 ← ++ (byte) mode_8bpppixelcell::ax#2
  [256] if((byte) mode_8bpppixelcell::ax#1!=(byte) $28) goto mode_8bpppixelcell::@3
  to:mode_8bpppixelcell::@4
mode_8bpppixelcell::@4: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@3
  [257] (byte) mode_8bpppixelcell::ay#1 ← ++ (byte) mode_8bpppixelcell::ay#4
  [258] if((byte) mode_8bpppixelcell::ay#1!=(byte) $19) goto mode_8bpppixelcell::@2
  to:mode_8bpppixelcell::@5
mode_8bpppixelcell::@5: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@4
  [259] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_CHARROM
  to:mode_8bpppixelcell::@6
mode_8bpppixelcell::@6: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@12 mode_8bpppixelcell::@5
  [260] (byte) mode_8bpppixelcell::ch#8 ← phi( mode_8bpppixelcell::@12/(byte) mode_8bpppixelcell::ch#1 mode_8bpppixelcell::@5/(byte) 0 )
  [260] (byte) mode_8bpppixelcell::col#7 ← phi( mode_8bpppixelcell::@12/(byte) mode_8bpppixelcell::col#1 mode_8bpppixelcell::@5/(byte) 0 )
  [260] (byte*) mode_8bpppixelcell::gfxb#7 ← phi( mode_8bpppixelcell::@12/(byte*) mode_8bpppixelcell::gfxb#1 mode_8bpppixelcell::@5/(const byte*) mode_8bpppixelcell::PLANEB )
  [260] (byte*) mode_8bpppixelcell::chargen#4 ← phi( mode_8bpppixelcell::@12/(byte*) mode_8bpppixelcell::chargen#1 mode_8bpppixelcell::@5/(const byte*) mode_8bpppixelcell::CHARGEN#0 )
  to:mode_8bpppixelcell::@7
mode_8bpppixelcell::@7: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@11 mode_8bpppixelcell::@6
  [261] (byte) mode_8bpppixelcell::cr#6 ← phi( mode_8bpppixelcell::@11/(byte) mode_8bpppixelcell::cr#1 mode_8bpppixelcell::@6/(byte) 0 )
  [261] (byte) mode_8bpppixelcell::col#5 ← phi( mode_8bpppixelcell::@11/(byte) mode_8bpppixelcell::col#1 mode_8bpppixelcell::@6/(byte) mode_8bpppixelcell::col#7 )
  [261] (byte*) mode_8bpppixelcell::gfxb#5 ← phi( mode_8bpppixelcell::@11/(byte*) mode_8bpppixelcell::gfxb#1 mode_8bpppixelcell::@6/(byte*) mode_8bpppixelcell::gfxb#7 )
  [261] (byte*) mode_8bpppixelcell::chargen#2 ← phi( mode_8bpppixelcell::@11/(byte*) mode_8bpppixelcell::chargen#1 mode_8bpppixelcell::@6/(byte*) mode_8bpppixelcell::chargen#4 )
  [262] (byte) mode_8bpppixelcell::bits#0 ← *((byte*) mode_8bpppixelcell::chargen#2)
  [263] (byte*) mode_8bpppixelcell::chargen#1 ← ++ (byte*) mode_8bpppixelcell::chargen#2
  to:mode_8bpppixelcell::@8
mode_8bpppixelcell::@8: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@7 mode_8bpppixelcell::@9
  [264] (byte) mode_8bpppixelcell::cp#2 ← phi( mode_8bpppixelcell::@9/(byte) mode_8bpppixelcell::cp#1 mode_8bpppixelcell::@7/(byte) 0 )
  [264] (byte) mode_8bpppixelcell::col#2 ← phi( mode_8bpppixelcell::@9/(byte) mode_8bpppixelcell::col#1 mode_8bpppixelcell::@7/(byte) mode_8bpppixelcell::col#5 )
  [264] (byte*) mode_8bpppixelcell::gfxb#2 ← phi( mode_8bpppixelcell::@9/(byte*) mode_8bpppixelcell::gfxb#1 mode_8bpppixelcell::@7/(byte*) mode_8bpppixelcell::gfxb#5 )
  [264] (byte) mode_8bpppixelcell::bits#2 ← phi( mode_8bpppixelcell::@9/(byte) mode_8bpppixelcell::bits#1 mode_8bpppixelcell::@7/(byte) mode_8bpppixelcell::bits#0 )
  [265] (byte~) mode_8bpppixelcell::$20 ← (byte) mode_8bpppixelcell::bits#2 & (byte) $80
  [266] if((byte~) mode_8bpppixelcell::$20==(byte) 0) goto mode_8bpppixelcell::@9
  to:mode_8bpppixelcell::@10
mode_8bpppixelcell::@10: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@8
  [267] (byte~) mode_8bpppixelcell::c#3 ← (byte) mode_8bpppixelcell::col#2
  to:mode_8bpppixelcell::@9
mode_8bpppixelcell::@9: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@10 mode_8bpppixelcell::@8
  [268] (byte) mode_8bpppixelcell::c#2 ← phi( mode_8bpppixelcell::@10/(byte~) mode_8bpppixelcell::c#3 mode_8bpppixelcell::@8/(byte) 0 )
  [269] *((byte*) mode_8bpppixelcell::gfxb#2) ← (byte) mode_8bpppixelcell::c#2
  [270] (byte*) mode_8bpppixelcell::gfxb#1 ← ++ (byte*) mode_8bpppixelcell::gfxb#2
  [271] (byte) mode_8bpppixelcell::bits#1 ← (byte) mode_8bpppixelcell::bits#2 << (byte) 1
  [272] (byte) mode_8bpppixelcell::col#1 ← ++ (byte) mode_8bpppixelcell::col#2
  [273] (byte) mode_8bpppixelcell::cp#1 ← ++ (byte) mode_8bpppixelcell::cp#2
  [274] if((byte) mode_8bpppixelcell::cp#1!=(byte) 8) goto mode_8bpppixelcell::@8
  to:mode_8bpppixelcell::@11
mode_8bpppixelcell::@11: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@9
  [275] (byte) mode_8bpppixelcell::cr#1 ← ++ (byte) mode_8bpppixelcell::cr#6
  [276] if((byte) mode_8bpppixelcell::cr#1!=(byte) 8) goto mode_8bpppixelcell::@7
  to:mode_8bpppixelcell::@12
mode_8bpppixelcell::@12: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@11
  [277] (byte) mode_8bpppixelcell::ch#1 ← ++ (byte) mode_8bpppixelcell::ch#8
  [278] if((byte) mode_8bpppixelcell::ch#1!=(byte) 0) goto mode_8bpppixelcell::@6
  to:mode_8bpppixelcell::@13
mode_8bpppixelcell::@13: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@12
  [279] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO
  [280] call mode_ctrl 
  to:mode_8bpppixelcell::@return
mode_8bpppixelcell::@return: scope:[mode_8bpppixelcell]  from mode_8bpppixelcell::@13
  [281] return 
  to:@return

(void()) mode_sixsfred()
mode_sixsfred: scope:[mode_sixsfred]  from menu::@26
  [282] *((const byte*) DTV_CONTROL) ← (const byte) DTV_HIGHCOLOR|(const byte) DTV_LINEAR
  [283] *((const byte*) VIC_CONTROL) ← (const byte) VIC_ECM|(const byte) VIC_BMM|(const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3
  [284] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_MCM|(const byte) VIC_CSEL
  [285] *((const byte*) DTV_PLANEA_START_LO) ← (byte) 0
  [286] *((const byte*) DTV_PLANEA_START_MI) ← >(const byte*) mode_sixsfred::PLANEA
  [287] *((const byte*) DTV_PLANEA_START_HI) ← (byte) 0
  [288] *((const byte*) DTV_PLANEA_STEP) ← (byte) 1
  [289] *((const byte*) DTV_PLANEA_MODULO_LO) ← (byte) 0
  [290] *((const byte*) DTV_PLANEA_MODULO_HI) ← (byte) 0
  [291] *((const byte*) DTV_PLANEB_START_LO) ← (byte) 0
  [292] *((const byte*) DTV_PLANEB_START_MI) ← >(const byte*) mode_sixsfred::PLANEB
  [293] *((const byte*) DTV_PLANEB_START_HI) ← (byte) 0
  [294] *((const byte*) DTV_PLANEB_STEP) ← (byte) 1
  [295] *((const byte*) DTV_PLANEB_MODULO_LO) ← (byte) 0
  [296] *((const byte*) DTV_PLANEB_MODULO_HI) ← (byte) 0
  [297] *((const byte*) DTV_COLOR_BANK_LO) ← <(const byte*) mode_sixsfred::COLORS/(word) $400
  [298] *((const byte*) DTV_COLOR_BANK_HI) ← (byte) 0
  to:mode_sixsfred::@1
mode_sixsfred::@1: scope:[mode_sixsfred]  from mode_sixsfred mode_sixsfred::@1
  [299] (byte) mode_sixsfred::i#2 ← phi( mode_sixsfred/(byte) 0 mode_sixsfred::@1/(byte) mode_sixsfred::i#1 )
  [300] *((const byte*) DTV_PALETTE + (byte) mode_sixsfred::i#2) ← (byte) mode_sixsfred::i#2
  [301] (byte) mode_sixsfred::i#1 ← ++ (byte) mode_sixsfred::i#2
  [302] if((byte) mode_sixsfred::i#1!=(byte) $10) goto mode_sixsfred::@1
  to:mode_sixsfred::@2
mode_sixsfred::@2: scope:[mode_sixsfred]  from mode_sixsfred::@1
  [303] *((const byte*) BORDERCOL) ← (byte) 0
  to:mode_sixsfred::@3
mode_sixsfred::@3: scope:[mode_sixsfred]  from mode_sixsfred::@2 mode_sixsfred::@5
  [304] (byte*) mode_sixsfred::col#3 ← phi( mode_sixsfred::@2/(const byte*) mode_sixsfred::COLORS mode_sixsfred::@5/(byte*) mode_sixsfred::col#1 )
  [304] (byte) mode_sixsfred::cy#4 ← phi( mode_sixsfred::@2/(byte) 0 mode_sixsfred::@5/(byte) mode_sixsfred::cy#1 )
  to:mode_sixsfred::@4
mode_sixsfred::@4: scope:[mode_sixsfred]  from mode_sixsfred::@3 mode_sixsfred::@4
  [305] (byte*) mode_sixsfred::col#2 ← phi( mode_sixsfred::@3/(byte*) mode_sixsfred::col#3 mode_sixsfred::@4/(byte*) mode_sixsfred::col#1 )
  [305] (byte) mode_sixsfred::cx#2 ← phi( mode_sixsfred::@3/(byte) 0 mode_sixsfred::@4/(byte) mode_sixsfred::cx#1 )
  [306] (byte~) mode_sixsfred::$17 ← (byte) mode_sixsfred::cx#2 + (byte) mode_sixsfred::cy#4
  [307] (byte~) mode_sixsfred::$18 ← (byte~) mode_sixsfred::$17 & (byte) $f
  [308] *((byte*) mode_sixsfred::col#2) ← (byte~) mode_sixsfred::$18
  [309] (byte*) mode_sixsfred::col#1 ← ++ (byte*) mode_sixsfred::col#2
  [310] (byte) mode_sixsfred::cx#1 ← ++ (byte) mode_sixsfred::cx#2
  [311] if((byte) mode_sixsfred::cx#1!=(byte) $28) goto mode_sixsfred::@4
  to:mode_sixsfred::@5
mode_sixsfred::@5: scope:[mode_sixsfred]  from mode_sixsfred::@4
  [312] (byte) mode_sixsfred::cy#1 ← ++ (byte) mode_sixsfred::cy#4
  [313] if((byte) mode_sixsfred::cy#1!=(byte) $19) goto mode_sixsfred::@3
  to:mode_sixsfred::@6
mode_sixsfred::@6: scope:[mode_sixsfred]  from mode_sixsfred::@5 mode_sixsfred::@8
  [314] (byte*) mode_sixsfred::gfxa#3 ← phi( mode_sixsfred::@5/(const byte*) mode_sixsfred::PLANEA mode_sixsfred::@8/(byte*) mode_sixsfred::gfxa#1 )
  [314] (byte) mode_sixsfred::ay#4 ← phi( mode_sixsfred::@5/(byte) 0 mode_sixsfred::@8/(byte) mode_sixsfred::ay#1 )
  to:mode_sixsfred::@7
mode_sixsfred::@7: scope:[mode_sixsfred]  from mode_sixsfred::@6 mode_sixsfred::@7
  [315] (byte) mode_sixsfred::ax#2 ← phi( mode_sixsfred::@6/(byte) 0 mode_sixsfred::@7/(byte) mode_sixsfred::ax#1 )
  [315] (byte*) mode_sixsfred::gfxa#2 ← phi( mode_sixsfred::@6/(byte*) mode_sixsfred::gfxa#3 mode_sixsfred::@7/(byte*) mode_sixsfred::gfxa#1 )
  [316] (byte~) mode_sixsfred::$21 ← (byte) mode_sixsfred::ay#4 >> (byte) 1
  [317] (byte) mode_sixsfred::row#0 ← (byte~) mode_sixsfred::$21 & (byte) 3
  [318] *((byte*) mode_sixsfred::gfxa#2) ← *((const byte[]) mode_sixsfred::row_bitmask + (byte) mode_sixsfred::row#0)
  [319] (byte*) mode_sixsfred::gfxa#1 ← ++ (byte*) mode_sixsfred::gfxa#2
  [320] (byte) mode_sixsfred::ax#1 ← ++ (byte) mode_sixsfred::ax#2
  [321] if((byte) mode_sixsfred::ax#1!=(byte) $28) goto mode_sixsfred::@7
  to:mode_sixsfred::@8
mode_sixsfred::@8: scope:[mode_sixsfred]  from mode_sixsfred::@7
  [322] (byte) mode_sixsfred::ay#1 ← ++ (byte) mode_sixsfred::ay#4
  [323] if((byte) mode_sixsfred::ay#1!=(byte) $c8) goto mode_sixsfred::@6
  to:mode_sixsfred::@9
mode_sixsfred::@9: scope:[mode_sixsfred]  from mode_sixsfred::@11 mode_sixsfred::@8
  [324] (byte) mode_sixsfred::by#4 ← phi( mode_sixsfred::@8/(byte) 0 mode_sixsfred::@11/(byte) mode_sixsfred::by#1 )
  [324] (byte*) mode_sixsfred::gfxb#3 ← phi( mode_sixsfred::@8/(const byte*) mode_sixsfred::PLANEB mode_sixsfred::@11/(byte*) mode_sixsfred::gfxb#1 )
  to:mode_sixsfred::@10
mode_sixsfred::@10: scope:[mode_sixsfred]  from mode_sixsfred::@10 mode_sixsfred::@9
  [325] (byte) mode_sixsfred::bx#2 ← phi( mode_sixsfred::@9/(byte) 0 mode_sixsfred::@10/(byte) mode_sixsfred::bx#1 )
  [325] (byte*) mode_sixsfred::gfxb#2 ← phi( mode_sixsfred::@9/(byte*) mode_sixsfred::gfxb#3 mode_sixsfred::@10/(byte*) mode_sixsfred::gfxb#1 )
  [326] *((byte*) mode_sixsfred::gfxb#2) ← (byte) $1b
  [327] (byte*) mode_sixsfred::gfxb#1 ← ++ (byte*) mode_sixsfred::gfxb#2
  [328] (byte) mode_sixsfred::bx#1 ← ++ (byte) mode_sixsfred::bx#2
  [329] if((byte) mode_sixsfred::bx#1!=(byte) $28) goto mode_sixsfred::@10
  to:mode_sixsfred::@11
mode_sixsfred::@11: scope:[mode_sixsfred]  from mode_sixsfred::@10
  [330] (byte) mode_sixsfred::by#1 ← ++ (byte) mode_sixsfred::by#4
  [331] if((byte) mode_sixsfred::by#1!=(byte) $c8) goto mode_sixsfred::@9
  to:mode_sixsfred::@12
mode_sixsfred::@12: scope:[mode_sixsfred]  from mode_sixsfred::@11
  [332] phi()
  [333] call mode_ctrl 
  to:mode_sixsfred::@return
mode_sixsfred::@return: scope:[mode_sixsfred]  from mode_sixsfred::@12
  [334] return 
  to:@return

(void()) mode_twoplanebitmap()
mode_twoplanebitmap: scope:[mode_twoplanebitmap]  from menu::@25
  [335] *((const byte*) DTV_CONTROL) ← (const byte) DTV_HIGHCOLOR|(const byte) DTV_LINEAR
  [336] *((const byte*) VIC_CONTROL) ← (const byte) VIC_ECM|(const byte) VIC_BMM|(const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3
  [337] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_CSEL
  [338] *((const byte*) DTV_PLANEA_START_LO) ← (byte) 0
  [339] *((const byte*) DTV_PLANEA_START_MI) ← >(const byte*) mode_twoplanebitmap::PLANEA
  [340] *((const byte*) DTV_PLANEA_START_HI) ← (byte) 0
  [341] *((const byte*) DTV_PLANEA_STEP) ← (byte) 1
  [342] *((const byte*) DTV_PLANEA_MODULO_LO) ← (byte) 0
  [343] *((const byte*) DTV_PLANEA_MODULO_HI) ← (byte) 0
  [344] *((const byte*) DTV_PLANEB_START_LO) ← (byte) 0
  [345] *((const byte*) DTV_PLANEB_START_MI) ← >(const byte*) mode_twoplanebitmap::PLANEB
  [346] *((const byte*) DTV_PLANEB_START_HI) ← (byte) 0
  [347] *((const byte*) DTV_PLANEB_STEP) ← (byte) 1
  [348] *((const byte*) DTV_PLANEB_MODULO_LO) ← (byte) 0
  [349] *((const byte*) DTV_PLANEB_MODULO_HI) ← (byte) 0
  [350] *((const byte*) DTV_COLOR_BANK_LO) ← <(const byte*) mode_twoplanebitmap::COLORS/(word) $400
  [351] *((const byte*) DTV_COLOR_BANK_HI) ← (byte) 0
  to:mode_twoplanebitmap::@1
mode_twoplanebitmap::@1: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap mode_twoplanebitmap::@1
  [352] (byte) mode_twoplanebitmap::i#2 ← phi( mode_twoplanebitmap/(byte) 0 mode_twoplanebitmap::@1/(byte) mode_twoplanebitmap::i#1 )
  [353] *((const byte*) DTV_PALETTE + (byte) mode_twoplanebitmap::i#2) ← (byte) mode_twoplanebitmap::i#2
  [354] (byte) mode_twoplanebitmap::i#1 ← ++ (byte) mode_twoplanebitmap::i#2
  [355] if((byte) mode_twoplanebitmap::i#1!=(byte) $10) goto mode_twoplanebitmap::@1
  to:mode_twoplanebitmap::@2
mode_twoplanebitmap::@2: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@1
  [356] *((const byte*) BORDERCOL) ← (byte) 0
  [357] *((const byte*) BGCOL1) ← (byte) $70
  [358] *((const byte*) BGCOL2) ← (byte) $d4
  to:mode_twoplanebitmap::@3
mode_twoplanebitmap::@3: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@2 mode_twoplanebitmap::@5
  [359] (byte*) mode_twoplanebitmap::col#3 ← phi( mode_twoplanebitmap::@2/(const byte*) mode_twoplanebitmap::COLORS mode_twoplanebitmap::@5/(byte*) mode_twoplanebitmap::col#1 )
  [359] (byte) mode_twoplanebitmap::cy#4 ← phi( mode_twoplanebitmap::@2/(byte) 0 mode_twoplanebitmap::@5/(byte) mode_twoplanebitmap::cy#1 )
  to:mode_twoplanebitmap::@4
mode_twoplanebitmap::@4: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@3 mode_twoplanebitmap::@4
  [360] (byte*) mode_twoplanebitmap::col#2 ← phi( mode_twoplanebitmap::@3/(byte*) mode_twoplanebitmap::col#3 mode_twoplanebitmap::@4/(byte*) mode_twoplanebitmap::col#1 )
  [360] (byte) mode_twoplanebitmap::cx#2 ← phi( mode_twoplanebitmap::@3/(byte) 0 mode_twoplanebitmap::@4/(byte) mode_twoplanebitmap::cx#1 )
  [361] (byte~) mode_twoplanebitmap::$16 ← (byte) mode_twoplanebitmap::cy#4 & (byte) $f
  [362] (byte~) mode_twoplanebitmap::$17 ← (byte~) mode_twoplanebitmap::$16 << (byte) 4
  [363] (byte~) mode_twoplanebitmap::$18 ← (byte) mode_twoplanebitmap::cx#2 & (byte) $f
  [364] (byte~) mode_twoplanebitmap::$19 ← (byte~) mode_twoplanebitmap::$17 | (byte~) mode_twoplanebitmap::$18
  [365] *((byte*) mode_twoplanebitmap::col#2) ← (byte~) mode_twoplanebitmap::$19
  [366] (byte*) mode_twoplanebitmap::col#1 ← ++ (byte*) mode_twoplanebitmap::col#2
  [367] (byte) mode_twoplanebitmap::cx#1 ← ++ (byte) mode_twoplanebitmap::cx#2
  [368] if((byte) mode_twoplanebitmap::cx#1!=(byte) $28) goto mode_twoplanebitmap::@4
  to:mode_twoplanebitmap::@5
mode_twoplanebitmap::@5: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@4
  [369] (byte) mode_twoplanebitmap::cy#1 ← ++ (byte) mode_twoplanebitmap::cy#4
  [370] if((byte) mode_twoplanebitmap::cy#1!=(byte) $19) goto mode_twoplanebitmap::@3
  to:mode_twoplanebitmap::@6
mode_twoplanebitmap::@6: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@11 mode_twoplanebitmap::@5
  [371] (byte*) mode_twoplanebitmap::gfxa#7 ← phi( mode_twoplanebitmap::@11/(byte*) mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::@5/(const byte*) mode_twoplanebitmap::PLANEA )
  [371] (byte) mode_twoplanebitmap::ay#5 ← phi( mode_twoplanebitmap::@11/(byte) mode_twoplanebitmap::ay#1 mode_twoplanebitmap::@5/(byte) 0 )
  to:mode_twoplanebitmap::@7
mode_twoplanebitmap::@7: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@6 mode_twoplanebitmap::@9
  [372] (byte) mode_twoplanebitmap::ax#2 ← phi( mode_twoplanebitmap::@9/(byte) mode_twoplanebitmap::ax#1 mode_twoplanebitmap::@6/(byte) 0 )
  [372] (byte*) mode_twoplanebitmap::gfxa#3 ← phi( mode_twoplanebitmap::@9/(byte*) mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::@6/(byte*) mode_twoplanebitmap::gfxa#7 )
  [373] (byte~) mode_twoplanebitmap::$22 ← (byte) mode_twoplanebitmap::ay#5 & (byte) 4
  [374] if((byte~) mode_twoplanebitmap::$22==(byte) 0) goto mode_twoplanebitmap::@8
  to:mode_twoplanebitmap::@10
mode_twoplanebitmap::@10: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@7
  [375] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte) $ff
  [376] (byte*) mode_twoplanebitmap::gfxa#2 ← ++ (byte*) mode_twoplanebitmap::gfxa#3
  to:mode_twoplanebitmap::@9
mode_twoplanebitmap::@9: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@10 mode_twoplanebitmap::@8
  [377] (byte*) mode_twoplanebitmap::gfxa#6 ← phi( mode_twoplanebitmap::@10/(byte*) mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::@8/(byte*) mode_twoplanebitmap::gfxa#1 )
  [378] (byte) mode_twoplanebitmap::ax#1 ← ++ (byte) mode_twoplanebitmap::ax#2
  [379] if((byte) mode_twoplanebitmap::ax#1!=(byte) $28) goto mode_twoplanebitmap::@7
  to:mode_twoplanebitmap::@11
mode_twoplanebitmap::@11: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@9
  [380] (byte) mode_twoplanebitmap::ay#1 ← ++ (byte) mode_twoplanebitmap::ay#5
  [381] if((byte) mode_twoplanebitmap::ay#1!=(byte) $c8) goto mode_twoplanebitmap::@6
  to:mode_twoplanebitmap::@12
mode_twoplanebitmap::@12: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@11 mode_twoplanebitmap::@14
  [382] (byte) mode_twoplanebitmap::by#4 ← phi( mode_twoplanebitmap::@11/(byte) 0 mode_twoplanebitmap::@14/(byte) mode_twoplanebitmap::by#1 )
  [382] (byte*) mode_twoplanebitmap::gfxb#3 ← phi( mode_twoplanebitmap::@11/(const byte*) mode_twoplanebitmap::PLANEB mode_twoplanebitmap::@14/(byte*) mode_twoplanebitmap::gfxb#1 )
  to:mode_twoplanebitmap::@13
mode_twoplanebitmap::@13: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@12 mode_twoplanebitmap::@13
  [383] (byte) mode_twoplanebitmap::bx#2 ← phi( mode_twoplanebitmap::@12/(byte) 0 mode_twoplanebitmap::@13/(byte) mode_twoplanebitmap::bx#1 )
  [383] (byte*) mode_twoplanebitmap::gfxb#2 ← phi( mode_twoplanebitmap::@12/(byte*) mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::@13/(byte*) mode_twoplanebitmap::gfxb#1 )
  [384] *((byte*) mode_twoplanebitmap::gfxb#2) ← (byte) $f
  [385] (byte*) mode_twoplanebitmap::gfxb#1 ← ++ (byte*) mode_twoplanebitmap::gfxb#2
  [386] (byte) mode_twoplanebitmap::bx#1 ← ++ (byte) mode_twoplanebitmap::bx#2
  [387] if((byte) mode_twoplanebitmap::bx#1!=(byte) $28) goto mode_twoplanebitmap::@13
  to:mode_twoplanebitmap::@14
mode_twoplanebitmap::@14: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@13
  [388] (byte) mode_twoplanebitmap::by#1 ← ++ (byte) mode_twoplanebitmap::by#4
  [389] if((byte) mode_twoplanebitmap::by#1!=(byte) $c8) goto mode_twoplanebitmap::@12
  to:mode_twoplanebitmap::@15
mode_twoplanebitmap::@15: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@14
  [390] phi()
  [391] call mode_ctrl 
  to:mode_twoplanebitmap::@return
mode_twoplanebitmap::@return: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@15
  [392] return 
  to:@return
mode_twoplanebitmap::@8: scope:[mode_twoplanebitmap]  from mode_twoplanebitmap::@7
  [393] *((byte*) mode_twoplanebitmap::gfxa#3) ← (byte) 0
  [394] (byte*) mode_twoplanebitmap::gfxa#1 ← ++ (byte*) mode_twoplanebitmap::gfxa#3
  to:mode_twoplanebitmap::@9

(void()) mode_sixsfred2()
mode_sixsfred2: scope:[mode_sixsfred2]  from menu::@24
  [395] *((const byte*) DTV_CONTROL) ← (const byte) DTV_LINEAR
  [396] *((const byte*) VIC_CONTROL) ← (const byte) VIC_ECM|(const byte) VIC_BMM|(const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3
  [397] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_MCM|(const byte) VIC_CSEL
  [398] *((const byte*) DTV_PLANEA_START_LO) ← (byte) 0
  [399] *((const byte*) DTV_PLANEA_START_MI) ← >(const byte*) mode_sixsfred2::PLANEA
  [400] *((const byte*) DTV_PLANEA_START_HI) ← (byte) 0
  [401] *((const byte*) DTV_PLANEA_STEP) ← (byte) 1
  [402] *((const byte*) DTV_PLANEA_MODULO_LO) ← (byte) 0
  [403] *((const byte*) DTV_PLANEA_MODULO_HI) ← (byte) 0
  [404] *((const byte*) DTV_PLANEB_START_LO) ← (byte) 0
  [405] *((const byte*) DTV_PLANEB_START_MI) ← >(const byte*) mode_sixsfred2::PLANEB
  [406] *((const byte*) DTV_PLANEB_START_HI) ← (byte) 0
  [407] *((const byte*) DTV_PLANEB_STEP) ← (byte) 1
  [408] *((const byte*) DTV_PLANEB_MODULO_LO) ← (byte) 0
  [409] *((const byte*) DTV_PLANEB_MODULO_HI) ← (byte) 0
  [410] *((const byte*) DTV_COLOR_BANK_LO) ← <(const byte*) mode_sixsfred2::COLORS/(word) $400
  [411] *((const byte*) DTV_COLOR_BANK_HI) ← (byte) 0
  to:mode_sixsfred2::@1
mode_sixsfred2::@1: scope:[mode_sixsfred2]  from mode_sixsfred2 mode_sixsfred2::@1
  [412] (byte) mode_sixsfred2::i#2 ← phi( mode_sixsfred2/(byte) 0 mode_sixsfred2::@1/(byte) mode_sixsfred2::i#1 )
  [413] *((const byte*) DTV_PALETTE + (byte) mode_sixsfred2::i#2) ← (byte) mode_sixsfred2::i#2
  [414] (byte) mode_sixsfred2::i#1 ← ++ (byte) mode_sixsfred2::i#2
  [415] if((byte) mode_sixsfred2::i#1!=(byte) $10) goto mode_sixsfred2::@1
  to:mode_sixsfred2::@2
mode_sixsfred2::@2: scope:[mode_sixsfred2]  from mode_sixsfred2::@1
  [416] *((const byte*) BORDERCOL) ← (byte) 0
  to:mode_sixsfred2::@3
mode_sixsfred2::@3: scope:[mode_sixsfred2]  from mode_sixsfred2::@2 mode_sixsfred2::@5
  [417] (byte*) mode_sixsfred2::col#3 ← phi( mode_sixsfred2::@2/(const byte*) mode_sixsfred2::COLORS mode_sixsfred2::@5/(byte*) mode_sixsfred2::col#1 )
  [417] (byte) mode_sixsfred2::cy#4 ← phi( mode_sixsfred2::@2/(byte) 0 mode_sixsfred2::@5/(byte) mode_sixsfred2::cy#1 )
  to:mode_sixsfred2::@4
mode_sixsfred2::@4: scope:[mode_sixsfred2]  from mode_sixsfred2::@3 mode_sixsfred2::@4
  [418] (byte*) mode_sixsfred2::col#2 ← phi( mode_sixsfred2::@3/(byte*) mode_sixsfred2::col#3 mode_sixsfred2::@4/(byte*) mode_sixsfred2::col#1 )
  [418] (byte) mode_sixsfred2::cx#2 ← phi( mode_sixsfred2::@3/(byte) 0 mode_sixsfred2::@4/(byte) mode_sixsfred2::cx#1 )
  [419] (byte~) mode_sixsfred2::$15 ← (byte) mode_sixsfred2::cx#2 & (byte) 3
  [420] (byte~) mode_sixsfred2::$16 ← (byte~) mode_sixsfred2::$15 << (byte) 4
  [421] (byte~) mode_sixsfred2::$17 ← (byte) mode_sixsfred2::cy#4 & (byte) 3
  [422] (byte~) mode_sixsfred2::$18 ← (byte~) mode_sixsfred2::$16 | (byte~) mode_sixsfred2::$17
  [423] *((byte*) mode_sixsfred2::col#2) ← (byte~) mode_sixsfred2::$18
  [424] (byte*) mode_sixsfred2::col#1 ← ++ (byte*) mode_sixsfred2::col#2
  [425] (byte) mode_sixsfred2::cx#1 ← ++ (byte) mode_sixsfred2::cx#2
  [426] if((byte) mode_sixsfred2::cx#1!=(byte) $28) goto mode_sixsfred2::@4
  to:mode_sixsfred2::@5
mode_sixsfred2::@5: scope:[mode_sixsfred2]  from mode_sixsfred2::@4
  [427] (byte) mode_sixsfred2::cy#1 ← ++ (byte) mode_sixsfred2::cy#4
  [428] if((byte) mode_sixsfred2::cy#1!=(byte) $19) goto mode_sixsfred2::@3
  to:mode_sixsfred2::@6
mode_sixsfred2::@6: scope:[mode_sixsfred2]  from mode_sixsfred2::@5 mode_sixsfred2::@8
  [429] (byte*) mode_sixsfred2::gfxa#3 ← phi( mode_sixsfred2::@5/(const byte*) mode_sixsfred2::PLANEA mode_sixsfred2::@8/(byte*) mode_sixsfred2::gfxa#1 )
  [429] (byte) mode_sixsfred2::ay#4 ← phi( mode_sixsfred2::@5/(byte) 0 mode_sixsfred2::@8/(byte) mode_sixsfred2::ay#1 )
  to:mode_sixsfred2::@7
mode_sixsfred2::@7: scope:[mode_sixsfred2]  from mode_sixsfred2::@6 mode_sixsfred2::@7
  [430] (byte) mode_sixsfred2::ax#2 ← phi( mode_sixsfred2::@6/(byte) 0 mode_sixsfred2::@7/(byte) mode_sixsfred2::ax#1 )
  [430] (byte*) mode_sixsfred2::gfxa#2 ← phi( mode_sixsfred2::@6/(byte*) mode_sixsfred2::gfxa#3 mode_sixsfred2::@7/(byte*) mode_sixsfred2::gfxa#1 )
  [431] (byte~) mode_sixsfred2::$21 ← (byte) mode_sixsfred2::ay#4 >> (byte) 1
  [432] (byte) mode_sixsfred2::row#0 ← (byte~) mode_sixsfred2::$21 & (byte) 3
  [433] *((byte*) mode_sixsfred2::gfxa#2) ← *((const byte[]) mode_sixsfred2::row_bitmask + (byte) mode_sixsfred2::row#0)
  [434] (byte*) mode_sixsfred2::gfxa#1 ← ++ (byte*) mode_sixsfred2::gfxa#2
  [435] (byte) mode_sixsfred2::ax#1 ← ++ (byte) mode_sixsfred2::ax#2
  [436] if((byte) mode_sixsfred2::ax#1!=(byte) $28) goto mode_sixsfred2::@7
  to:mode_sixsfred2::@8
mode_sixsfred2::@8: scope:[mode_sixsfred2]  from mode_sixsfred2::@7
  [437] (byte) mode_sixsfred2::ay#1 ← ++ (byte) mode_sixsfred2::ay#4
  [438] if((byte) mode_sixsfred2::ay#1!=(byte) $c8) goto mode_sixsfred2::@6
  to:mode_sixsfred2::@9
mode_sixsfred2::@9: scope:[mode_sixsfred2]  from mode_sixsfred2::@11 mode_sixsfred2::@8
  [439] (byte) mode_sixsfred2::by#4 ← phi( mode_sixsfred2::@8/(byte) 0 mode_sixsfred2::@11/(byte) mode_sixsfred2::by#1 )
  [439] (byte*) mode_sixsfred2::gfxb#3 ← phi( mode_sixsfred2::@8/(const byte*) mode_sixsfred2::PLANEB mode_sixsfred2::@11/(byte*) mode_sixsfred2::gfxb#1 )
  to:mode_sixsfred2::@10
mode_sixsfred2::@10: scope:[mode_sixsfred2]  from mode_sixsfred2::@10 mode_sixsfred2::@9
  [440] (byte) mode_sixsfred2::bx#2 ← phi( mode_sixsfred2::@9/(byte) 0 mode_sixsfred2::@10/(byte) mode_sixsfred2::bx#1 )
  [440] (byte*) mode_sixsfred2::gfxb#2 ← phi( mode_sixsfred2::@9/(byte*) mode_sixsfred2::gfxb#3 mode_sixsfred2::@10/(byte*) mode_sixsfred2::gfxb#1 )
  [441] *((byte*) mode_sixsfred2::gfxb#2) ← (byte) $1b
  [442] (byte*) mode_sixsfred2::gfxb#1 ← ++ (byte*) mode_sixsfred2::gfxb#2
  [443] (byte) mode_sixsfred2::bx#1 ← ++ (byte) mode_sixsfred2::bx#2
  [444] if((byte) mode_sixsfred2::bx#1!=(byte) $28) goto mode_sixsfred2::@10
  to:mode_sixsfred2::@11
mode_sixsfred2::@11: scope:[mode_sixsfred2]  from mode_sixsfred2::@10
  [445] (byte) mode_sixsfred2::by#1 ← ++ (byte) mode_sixsfred2::by#4
  [446] if((byte) mode_sixsfred2::by#1!=(byte) $c8) goto mode_sixsfred2::@9
  to:mode_sixsfred2::@12
mode_sixsfred2::@12: scope:[mode_sixsfred2]  from mode_sixsfred2::@11
  [447] phi()
  [448] call mode_ctrl 
  to:mode_sixsfred2::@return
mode_sixsfred2::@return: scope:[mode_sixsfred2]  from mode_sixsfred2::@12
  [449] return 
  to:@return

(void()) mode_hicolmcchar()
mode_hicolmcchar: scope:[mode_hicolmcchar]  from menu::@23
  [450] *((const byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0
  [451] *((const byte*) DTV_COLOR_BANK_LO) ← <(word)(const byte*) mode_hicolmcchar::COLORS/(word) $400
  [452] *((const byte*) DTV_COLOR_BANK_HI) ← (byte) 0
  [453] *((const byte*) DTV_CONTROL) ← (const byte) DTV_HIGHCOLOR
  [454] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3
  [455] *((const byte*) CIA2_PORT_A) ← (byte) 3^(byte)(word)(const byte*) mode_hicolmcchar::CHARSET/(word) $4000
  [456] *((const byte*) VIC_CONTROL) ← (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3
  [457] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_CSEL|(const byte) VIC_MCM
  [458] *((const byte*) VIC_MEMORY) ← (byte)(word)(const byte*) mode_hicolmcchar::CHARSET&(word) $3fff/(word) $400
  to:mode_hicolmcchar::@1
mode_hicolmcchar::@1: scope:[mode_hicolmcchar]  from mode_hicolmcchar mode_hicolmcchar::@1
  [459] (byte) mode_hicolmcchar::i#2 ← phi( mode_hicolmcchar/(byte) 0 mode_hicolmcchar::@1/(byte) mode_hicolmcchar::i#1 )
  [460] *((const byte*) DTV_PALETTE + (byte) mode_hicolmcchar::i#2) ← (byte) mode_hicolmcchar::i#2
  [461] (byte) mode_hicolmcchar::i#1 ← ++ (byte) mode_hicolmcchar::i#2
  [462] if((byte) mode_hicolmcchar::i#1!=(byte) $10) goto mode_hicolmcchar::@1
  to:mode_hicolmcchar::@2
mode_hicolmcchar::@2: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@1
  [463] *((const byte*) BORDERCOL) ← (byte) 0
  [464] *((const byte*) BGCOL1) ← (byte) $50
  [465] *((const byte*) BGCOL2) ← (byte) $54
  [466] *((const byte*) BGCOL3) ← (byte) $58
  to:mode_hicolmcchar::@3
mode_hicolmcchar::@3: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@2 mode_hicolmcchar::@5
  [467] (byte*) mode_hicolmcchar::ch#3 ← phi( mode_hicolmcchar::@2/(const byte*) mode_hicolmcchar::SCREEN mode_hicolmcchar::@5/(byte*) mode_hicolmcchar::ch#1 )
  [467] (byte*) mode_hicolmcchar::col#3 ← phi( mode_hicolmcchar::@2/(const byte*) mode_hicolmcchar::COLORS mode_hicolmcchar::@5/(byte*) mode_hicolmcchar::col#1 )
  [467] (byte) mode_hicolmcchar::cy#4 ← phi( mode_hicolmcchar::@2/(byte) 0 mode_hicolmcchar::@5/(byte) mode_hicolmcchar::cy#1 )
  to:mode_hicolmcchar::@4
mode_hicolmcchar::@4: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@3 mode_hicolmcchar::@4
  [468] (byte*) mode_hicolmcchar::ch#2 ← phi( mode_hicolmcchar::@3/(byte*) mode_hicolmcchar::ch#3 mode_hicolmcchar::@4/(byte*) mode_hicolmcchar::ch#1 )
  [468] (byte*) mode_hicolmcchar::col#2 ← phi( mode_hicolmcchar::@3/(byte*) mode_hicolmcchar::col#3 mode_hicolmcchar::@4/(byte*) mode_hicolmcchar::col#1 )
  [468] (byte) mode_hicolmcchar::cx#2 ← phi( mode_hicolmcchar::@3/(byte) 0 mode_hicolmcchar::@4/(byte) mode_hicolmcchar::cx#1 )
  [469] (byte~) mode_hicolmcchar::$26 ← (byte) mode_hicolmcchar::cy#4 & (byte) $f
  [470] (byte~) mode_hicolmcchar::$27 ← (byte~) mode_hicolmcchar::$26 << (byte) 4
  [471] (byte~) mode_hicolmcchar::$28 ← (byte) mode_hicolmcchar::cx#2 & (byte) $f
  [472] (byte) mode_hicolmcchar::v#0 ← (byte~) mode_hicolmcchar::$27 | (byte~) mode_hicolmcchar::$28
  [473] *((byte*) mode_hicolmcchar::col#2) ← (byte) mode_hicolmcchar::v#0
  [474] (byte*) mode_hicolmcchar::col#1 ← ++ (byte*) mode_hicolmcchar::col#2
  [475] *((byte*) mode_hicolmcchar::ch#2) ← (byte) mode_hicolmcchar::v#0
  [476] (byte*) mode_hicolmcchar::ch#1 ← ++ (byte*) mode_hicolmcchar::ch#2
  [477] (byte) mode_hicolmcchar::cx#1 ← ++ (byte) mode_hicolmcchar::cx#2
  [478] if((byte) mode_hicolmcchar::cx#1!=(byte) $28) goto mode_hicolmcchar::@4
  to:mode_hicolmcchar::@5
mode_hicolmcchar::@5: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@4
  [479] (byte) mode_hicolmcchar::cy#1 ← ++ (byte) mode_hicolmcchar::cy#4
  [480] if((byte) mode_hicolmcchar::cy#1!=(byte) $19) goto mode_hicolmcchar::@3
  to:mode_hicolmcchar::@6
mode_hicolmcchar::@6: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@5
  [481] phi()
  [482] call mode_ctrl 
  to:mode_hicolmcchar::@return
mode_hicolmcchar::@return: scope:[mode_hicolmcchar]  from mode_hicolmcchar::@6
  [483] return 
  to:@return

(void()) mode_hicolecmchar()
mode_hicolecmchar: scope:[mode_hicolecmchar]  from menu::@22
  [484] *((const byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0
  [485] *((const byte*) DTV_COLOR_BANK_LO) ← <(word)(const byte*) mode_hicolecmchar::COLORS/(word) $400
  [486] *((const byte*) DTV_COLOR_BANK_HI) ← (byte) 0
  [487] *((const byte*) DTV_CONTROL) ← (const byte) DTV_HIGHCOLOR
  [488] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3
  [489] *((const byte*) CIA2_PORT_A) ← (byte) 3^(byte)(word)(const byte*) mode_hicolecmchar::CHARSET/(word) $4000
  [490] *((const byte*) VIC_CONTROL) ← (const byte) VIC_DEN|(const byte) VIC_RSEL|(const byte) VIC_ECM|(byte) 3
  [491] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_CSEL
  [492] *((const byte*) VIC_MEMORY) ← (byte)(word)(const byte*) mode_hicolecmchar::CHARSET&(word) $3fff/(word) $400
  to:mode_hicolecmchar::@1
mode_hicolecmchar::@1: scope:[mode_hicolecmchar]  from mode_hicolecmchar mode_hicolecmchar::@1
  [493] (byte) mode_hicolecmchar::i#2 ← phi( mode_hicolecmchar/(byte) 0 mode_hicolecmchar::@1/(byte) mode_hicolecmchar::i#1 )
  [494] *((const byte*) DTV_PALETTE + (byte) mode_hicolecmchar::i#2) ← (byte) mode_hicolecmchar::i#2
  [495] (byte) mode_hicolecmchar::i#1 ← ++ (byte) mode_hicolecmchar::i#2
  [496] if((byte) mode_hicolecmchar::i#1!=(byte) $10) goto mode_hicolecmchar::@1
  to:mode_hicolecmchar::@2
mode_hicolecmchar::@2: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@1
  [497] *((const byte*) BORDERCOL) ← (byte) 0
  [498] *((const byte*) BGCOL1) ← (byte) $50
  [499] *((const byte*) BGCOL2) ← (byte) $54
  [500] *((const byte*) BGCOL3) ← (byte) $58
  [501] *((const byte*) BGCOL4) ← (byte) $5c
  to:mode_hicolecmchar::@3
mode_hicolecmchar::@3: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@2 mode_hicolecmchar::@5
  [502] (byte*) mode_hicolecmchar::ch#3 ← phi( mode_hicolecmchar::@2/(const byte*) mode_hicolecmchar::SCREEN mode_hicolecmchar::@5/(byte*) mode_hicolecmchar::ch#1 )
  [502] (byte*) mode_hicolecmchar::col#3 ← phi( mode_hicolecmchar::@2/(const byte*) mode_hicolecmchar::COLORS mode_hicolecmchar::@5/(byte*) mode_hicolecmchar::col#1 )
  [502] (byte) mode_hicolecmchar::cy#4 ← phi( mode_hicolecmchar::@2/(byte) 0 mode_hicolecmchar::@5/(byte) mode_hicolecmchar::cy#1 )
  to:mode_hicolecmchar::@4
mode_hicolecmchar::@4: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@3 mode_hicolecmchar::@4
  [503] (byte*) mode_hicolecmchar::ch#2 ← phi( mode_hicolecmchar::@3/(byte*) mode_hicolecmchar::ch#3 mode_hicolecmchar::@4/(byte*) mode_hicolecmchar::ch#1 )
  [503] (byte*) mode_hicolecmchar::col#2 ← phi( mode_hicolecmchar::@3/(byte*) mode_hicolecmchar::col#3 mode_hicolecmchar::@4/(byte*) mode_hicolecmchar::col#1 )
  [503] (byte) mode_hicolecmchar::cx#2 ← phi( mode_hicolecmchar::@3/(byte) 0 mode_hicolecmchar::@4/(byte) mode_hicolecmchar::cx#1 )
  [504] (byte~) mode_hicolecmchar::$26 ← (byte) mode_hicolecmchar::cy#4 & (byte) $f
  [505] (byte~) mode_hicolecmchar::$27 ← (byte~) mode_hicolecmchar::$26 << (byte) 4
  [506] (byte~) mode_hicolecmchar::$28 ← (byte) mode_hicolecmchar::cx#2 & (byte) $f
  [507] (byte) mode_hicolecmchar::v#0 ← (byte~) mode_hicolecmchar::$27 | (byte~) mode_hicolecmchar::$28
  [508] *((byte*) mode_hicolecmchar::col#2) ← (byte) mode_hicolecmchar::v#0
  [509] (byte*) mode_hicolecmchar::col#1 ← ++ (byte*) mode_hicolecmchar::col#2
  [510] *((byte*) mode_hicolecmchar::ch#2) ← (byte) mode_hicolecmchar::v#0
  [511] (byte*) mode_hicolecmchar::ch#1 ← ++ (byte*) mode_hicolecmchar::ch#2
  [512] (byte) mode_hicolecmchar::cx#1 ← ++ (byte) mode_hicolecmchar::cx#2
  [513] if((byte) mode_hicolecmchar::cx#1!=(byte) $28) goto mode_hicolecmchar::@4
  to:mode_hicolecmchar::@5
mode_hicolecmchar::@5: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@4
  [514] (byte) mode_hicolecmchar::cy#1 ← ++ (byte) mode_hicolecmchar::cy#4
  [515] if((byte) mode_hicolecmchar::cy#1!=(byte) $19) goto mode_hicolecmchar::@3
  to:mode_hicolecmchar::@6
mode_hicolecmchar::@6: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@5
  [516] phi()
  [517] call mode_ctrl 
  to:mode_hicolecmchar::@return
mode_hicolecmchar::@return: scope:[mode_hicolecmchar]  from mode_hicolecmchar::@6
  [518] return 
  to:@return

(void()) mode_hicolstdchar()
mode_hicolstdchar: scope:[mode_hicolstdchar]  from menu::@21
  [519] *((const byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0
  [520] *((const byte*) DTV_COLOR_BANK_LO) ← <(word)(const byte*) mode_hicolstdchar::COLORS/(word) $400
  [521] *((const byte*) DTV_COLOR_BANK_HI) ← (byte) 0
  [522] *((const byte*) DTV_CONTROL) ← (const byte) DTV_HIGHCOLOR
  [523] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3
  [524] *((const byte*) CIA2_PORT_A) ← (byte) 3^(byte)(word)(const byte*) mode_hicolstdchar::CHARSET/(word) $4000
  [525] *((const byte*) VIC_CONTROL) ← (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3
  [526] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_CSEL
  [527] *((const byte*) VIC_MEMORY) ← (byte)(word)(const byte*) mode_hicolstdchar::CHARSET&(word) $3fff/(word) $400
  to:mode_hicolstdchar::@1
mode_hicolstdchar::@1: scope:[mode_hicolstdchar]  from mode_hicolstdchar mode_hicolstdchar::@1
  [528] (byte) mode_hicolstdchar::i#2 ← phi( mode_hicolstdchar/(byte) 0 mode_hicolstdchar::@1/(byte) mode_hicolstdchar::i#1 )
  [529] *((const byte*) DTV_PALETTE + (byte) mode_hicolstdchar::i#2) ← (byte) mode_hicolstdchar::i#2
  [530] (byte) mode_hicolstdchar::i#1 ← ++ (byte) mode_hicolstdchar::i#2
  [531] if((byte) mode_hicolstdchar::i#1!=(byte) $10) goto mode_hicolstdchar::@1
  to:mode_hicolstdchar::@2
mode_hicolstdchar::@2: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@1
  [532] *((const byte*) BGCOL) ← (byte) 0
  [533] *((const byte*) BORDERCOL) ← (byte) 0
  to:mode_hicolstdchar::@3
mode_hicolstdchar::@3: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@2 mode_hicolstdchar::@5
  [534] (byte*) mode_hicolstdchar::ch#3 ← phi( mode_hicolstdchar::@2/(const byte*) mode_hicolstdchar::SCREEN mode_hicolstdchar::@5/(byte*) mode_hicolstdchar::ch#1 )
  [534] (byte*) mode_hicolstdchar::col#3 ← phi( mode_hicolstdchar::@2/(const byte*) mode_hicolstdchar::COLORS mode_hicolstdchar::@5/(byte*) mode_hicolstdchar::col#1 )
  [534] (byte) mode_hicolstdchar::cy#4 ← phi( mode_hicolstdchar::@2/(byte) 0 mode_hicolstdchar::@5/(byte) mode_hicolstdchar::cy#1 )
  to:mode_hicolstdchar::@4
mode_hicolstdchar::@4: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@3 mode_hicolstdchar::@4
  [535] (byte*) mode_hicolstdchar::ch#2 ← phi( mode_hicolstdchar::@3/(byte*) mode_hicolstdchar::ch#3 mode_hicolstdchar::@4/(byte*) mode_hicolstdchar::ch#1 )
  [535] (byte*) mode_hicolstdchar::col#2 ← phi( mode_hicolstdchar::@3/(byte*) mode_hicolstdchar::col#3 mode_hicolstdchar::@4/(byte*) mode_hicolstdchar::col#1 )
  [535] (byte) mode_hicolstdchar::cx#2 ← phi( mode_hicolstdchar::@3/(byte) 0 mode_hicolstdchar::@4/(byte) mode_hicolstdchar::cx#1 )
  [536] (byte~) mode_hicolstdchar::$25 ← (byte) mode_hicolstdchar::cy#4 & (byte) $f
  [537] (byte~) mode_hicolstdchar::$26 ← (byte~) mode_hicolstdchar::$25 << (byte) 4
  [538] (byte~) mode_hicolstdchar::$27 ← (byte) mode_hicolstdchar::cx#2 & (byte) $f
  [539] (byte) mode_hicolstdchar::v#0 ← (byte~) mode_hicolstdchar::$26 | (byte~) mode_hicolstdchar::$27
  [540] *((byte*) mode_hicolstdchar::col#2) ← (byte) mode_hicolstdchar::v#0
  [541] (byte*) mode_hicolstdchar::col#1 ← ++ (byte*) mode_hicolstdchar::col#2
  [542] *((byte*) mode_hicolstdchar::ch#2) ← (byte) mode_hicolstdchar::v#0
  [543] (byte*) mode_hicolstdchar::ch#1 ← ++ (byte*) mode_hicolstdchar::ch#2
  [544] (byte) mode_hicolstdchar::cx#1 ← ++ (byte) mode_hicolstdchar::cx#2
  [545] if((byte) mode_hicolstdchar::cx#1!=(byte) $28) goto mode_hicolstdchar::@4
  to:mode_hicolstdchar::@5
mode_hicolstdchar::@5: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@4
  [546] (byte) mode_hicolstdchar::cy#1 ← ++ (byte) mode_hicolstdchar::cy#4
  [547] if((byte) mode_hicolstdchar::cy#1!=(byte) $19) goto mode_hicolstdchar::@3
  to:mode_hicolstdchar::@6
mode_hicolstdchar::@6: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@5
  [548] phi()
  [549] call mode_ctrl 
  to:mode_hicolstdchar::@return
mode_hicolstdchar::@return: scope:[mode_hicolstdchar]  from mode_hicolstdchar::@6
  [550] return 
  to:@return

(void()) mode_stdbitmap()
mode_stdbitmap: scope:[mode_stdbitmap]  from menu::@20
  [551] *((const byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0
  [552] *((const byte*) DTV_CONTROL) ← (byte) 0
  [553] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3
  [554] *((const byte*) CIA2_PORT_A) ← (byte) 3^(byte)(word)(const byte*) mode_stdbitmap::BITMAP/(word) $4000
  [555] *((const byte*) VIC_CONTROL) ← (const byte) VIC_BMM|(const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3
  [556] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_CSEL
  [557] *((const byte*) VIC_MEMORY) ← (byte)(word)(const byte*) mode_stdbitmap::BITMAP&(word) $3fff/(word) $400
  to:mode_stdbitmap::@1
mode_stdbitmap::@1: scope:[mode_stdbitmap]  from mode_stdbitmap mode_stdbitmap::@1
  [558] (byte) mode_stdbitmap::i#2 ← phi( mode_stdbitmap/(byte) 0 mode_stdbitmap::@1/(byte) mode_stdbitmap::i#1 )
  [559] *((const byte*) DTV_PALETTE + (byte) mode_stdbitmap::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT + (byte) mode_stdbitmap::i#2)
  [560] (byte) mode_stdbitmap::i#1 ← ++ (byte) mode_stdbitmap::i#2
  [561] if((byte) mode_stdbitmap::i#1!=(byte) $10) goto mode_stdbitmap::@1
  to:mode_stdbitmap::@2
mode_stdbitmap::@2: scope:[mode_stdbitmap]  from mode_stdbitmap::@1
  [562] *((const byte*) BGCOL) ← (const byte) BLACK
  [563] *((const byte*) BORDERCOL) ← (const byte) BLACK
  to:mode_stdbitmap::@3
mode_stdbitmap::@3: scope:[mode_stdbitmap]  from mode_stdbitmap::@2 mode_stdbitmap::@5
  [564] (byte*) mode_stdbitmap::ch#3 ← phi( mode_stdbitmap::@2/(const byte*) mode_stdbitmap::SCREEN mode_stdbitmap::@5/(byte*) mode_stdbitmap::ch#1 )
  [564] (byte) mode_stdbitmap::cy#4 ← phi( mode_stdbitmap::@2/(byte) 0 mode_stdbitmap::@5/(byte) mode_stdbitmap::cy#1 )
  to:mode_stdbitmap::@4
mode_stdbitmap::@4: scope:[mode_stdbitmap]  from mode_stdbitmap::@3 mode_stdbitmap::@4
  [565] (byte*) mode_stdbitmap::ch#2 ← phi( mode_stdbitmap::@3/(byte*) mode_stdbitmap::ch#3 mode_stdbitmap::@4/(byte*) mode_stdbitmap::ch#1 )
  [565] (byte) mode_stdbitmap::cx#2 ← phi( mode_stdbitmap::@3/(byte) 0 mode_stdbitmap::@4/(byte) mode_stdbitmap::cx#1 )
  [566] (byte~) mode_stdbitmap::$22 ← (byte) mode_stdbitmap::cx#2 + (byte) mode_stdbitmap::cy#4
  [567] (byte) mode_stdbitmap::col#0 ← (byte~) mode_stdbitmap::$22 & (byte) $f
  [568] (byte) mode_stdbitmap::col2#0 ← (byte) $f - (byte) mode_stdbitmap::col#0
  [569] (byte~) mode_stdbitmap::$25 ← (byte) mode_stdbitmap::col#0 << (byte) 4
  [570] (byte~) mode_stdbitmap::$26 ← (byte~) mode_stdbitmap::$25 | (byte) mode_stdbitmap::col2#0
  [571] *((byte*) mode_stdbitmap::ch#2) ← (byte~) mode_stdbitmap::$26
  [572] (byte*) mode_stdbitmap::ch#1 ← ++ (byte*) mode_stdbitmap::ch#2
  [573] (byte) mode_stdbitmap::cx#1 ← ++ (byte) mode_stdbitmap::cx#2
  [574] if((byte) mode_stdbitmap::cx#1!=(byte) $28) goto mode_stdbitmap::@4
  to:mode_stdbitmap::@5
mode_stdbitmap::@5: scope:[mode_stdbitmap]  from mode_stdbitmap::@4
  [575] (byte) mode_stdbitmap::cy#1 ← ++ (byte) mode_stdbitmap::cy#4
  [576] if((byte) mode_stdbitmap::cy#1!=(byte) $19) goto mode_stdbitmap::@3
  to:mode_stdbitmap::@6
mode_stdbitmap::@6: scope:[mode_stdbitmap]  from mode_stdbitmap::@5
  [577] phi()
  [578] call bitmap_init 
  to:mode_stdbitmap::@10
mode_stdbitmap::@10: scope:[mode_stdbitmap]  from mode_stdbitmap::@6
  [579] phi()
  [580] call bitmap_clear 
  to:mode_stdbitmap::@7
mode_stdbitmap::@7: scope:[mode_stdbitmap]  from mode_stdbitmap::@10 mode_stdbitmap::@11
  [581] (byte) mode_stdbitmap::l#2 ← phi( mode_stdbitmap::@10/(byte) 0 mode_stdbitmap::@11/(byte) mode_stdbitmap::l#1 )
  [582] if((byte) mode_stdbitmap::l#2<(const byte) mode_stdbitmap::lines_cnt#0) goto mode_stdbitmap::@8
  to:mode_stdbitmap::@9
mode_stdbitmap::@9: scope:[mode_stdbitmap]  from mode_stdbitmap::@7
  [583] phi()
  [584] call mode_ctrl 
  to:mode_stdbitmap::@return
mode_stdbitmap::@return: scope:[mode_stdbitmap]  from mode_stdbitmap::@9
  [585] return 
  to:@return
mode_stdbitmap::@8: scope:[mode_stdbitmap]  from mode_stdbitmap::@7
  [586] (byte) bitmap_line::x0#0 ← *((const byte[]) mode_stdbitmap::lines_x + (byte) mode_stdbitmap::l#2)
  [587] (byte) bitmap_line::x1#0 ← *((const byte[]) mode_stdbitmap::lines_x+(byte) 1 + (byte) mode_stdbitmap::l#2)
  [588] (byte) bitmap_line::y0#0 ← *((const byte[]) mode_stdbitmap::lines_y + (byte) mode_stdbitmap::l#2)
  [589] (byte) bitmap_line::y1#0 ← *((const byte[]) mode_stdbitmap::lines_y+(byte) 1 + (byte) mode_stdbitmap::l#2)
  [590] call bitmap_line 
  to:mode_stdbitmap::@11
mode_stdbitmap::@11: scope:[mode_stdbitmap]  from mode_stdbitmap::@8
  [591] (byte) mode_stdbitmap::l#1 ← ++ (byte) mode_stdbitmap::l#2
  to:mode_stdbitmap::@7

(void()) bitmap_line((byte) bitmap_line::x0 , (byte) bitmap_line::x1 , (byte) bitmap_line::y0 , (byte) bitmap_line::y1)
bitmap_line: scope:[bitmap_line]  from mode_stdbitmap::@8
  [592] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1
  to:bitmap_line::@2
bitmap_line::@2: scope:[bitmap_line]  from bitmap_line
  [593] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0
  [594] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@7
  to:bitmap_line::@3
bitmap_line::@3: scope:[bitmap_line]  from bitmap_line::@2
  [595] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0
  [596] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@8
  to:bitmap_line::@4
bitmap_line::@4: scope:[bitmap_line]  from bitmap_line::@3
  [597] (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#0
  [598] (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#0
  [599] (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#0
  [600] (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#2
  [601] (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#2
  [602] call bitmap_line_ydxi 
  to:bitmap_line::@return
bitmap_line::@return: scope:[bitmap_line]  from bitmap_line::@10 bitmap_line::@12 bitmap_line::@13 bitmap_line::@14 bitmap_line::@4 bitmap_line::@6 bitmap_line::@8 bitmap_line::@9
  [603] return 
  to:@return
bitmap_line::@8: scope:[bitmap_line]  from bitmap_line::@3
  [604] (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#0
  [605] (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#0
  [606] (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#0
  [607] (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#2
  [608] (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#2
  [609] call bitmap_line_xdyi 
  to:bitmap_line::@return
bitmap_line::@7: scope:[bitmap_line]  from bitmap_line::@2
  [610] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0
  [611] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@9
  to:bitmap_line::@10
bitmap_line::@10: scope:[bitmap_line]  from bitmap_line::@7
  [612] (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#0
  [613] (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#0
  [614] (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#0
  [615] (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#1
  [616] (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#2
  [617] call bitmap_line_ydxd 
  to:bitmap_line::@return
bitmap_line::@9: scope:[bitmap_line]  from bitmap_line::@7
  [618] (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#0
  [619] (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#0
  [620] (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#0
  [621] (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#2
  [622] (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#1
  [623] call bitmap_line_xdyd 
  to:bitmap_line::@return
bitmap_line::@1: scope:[bitmap_line]  from bitmap_line
  [624] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0
  [625] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@11
  to:bitmap_line::@5
bitmap_line::@5: scope:[bitmap_line]  from bitmap_line::@1
  [626] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0
  [627] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@12
  to:bitmap_line::@6
bitmap_line::@6: scope:[bitmap_line]  from bitmap_line::@5
  [628] (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#0
  [629] (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#0
  [630] (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#0
  [631] (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10
  [632] (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#1
  [633] call bitmap_line_ydxd 
  to:bitmap_line::@return
bitmap_line::@12: scope:[bitmap_line]  from bitmap_line::@5
  [634] (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#0
  [635] (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#0
  [636] (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#0
  [637] (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#1
  [638] (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#10
  [639] call bitmap_line_xdyd 
  to:bitmap_line::@return
bitmap_line::@11: scope:[bitmap_line]  from bitmap_line::@1
  [640] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0
  [641] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@13
  to:bitmap_line::@14
bitmap_line::@14: scope:[bitmap_line]  from bitmap_line::@11
  [642] (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#0
  [643] (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#0
  [644] (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#0
  [645] (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#11
  [646] (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#1
  [647] call bitmap_line_ydxi 
  to:bitmap_line::@return
bitmap_line::@13: scope:[bitmap_line]  from bitmap_line::@11
  [648] (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#0
  [649] (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#0
  [650] (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#0
  [651] (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#1
  [652] (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11
  [653] call bitmap_line_xdyi 
  to:bitmap_line::@return

(void()) bitmap_line_xdyi((byte) bitmap_line_xdyi::x , (byte) bitmap_line_xdyi::y , (byte) bitmap_line_xdyi::x1 , (byte) bitmap_line_xdyi::xd , (byte) bitmap_line_xdyi::yd)
bitmap_line_xdyi: scope:[bitmap_line_xdyi]  from bitmap_line::@13 bitmap_line::@8
  [654] (byte) bitmap_line_xdyi::x1#6 ← phi( bitmap_line::@8/(byte) bitmap_line_xdyi::x1#0 bitmap_line::@13/(byte) bitmap_line_xdyi::x1#1 )
  [654] (byte) bitmap_line_xdyi::xd#5 ← phi( bitmap_line::@8/(byte) bitmap_line_xdyi::xd#0 bitmap_line::@13/(byte) bitmap_line_xdyi::xd#1 )
  [654] (byte) bitmap_line_xdyi::y#5 ← phi( bitmap_line::@8/(byte) bitmap_line_xdyi::y#0 bitmap_line::@13/(byte) bitmap_line_xdyi::y#1 )
  [654] (byte) bitmap_line_xdyi::x#6 ← phi( bitmap_line::@8/(byte) bitmap_line_xdyi::x#0 bitmap_line::@13/(byte) bitmap_line_xdyi::x#1 )
  [654] (byte) bitmap_line_xdyi::yd#2 ← phi( bitmap_line::@8/(byte) bitmap_line_xdyi::yd#0 bitmap_line::@13/(byte) bitmap_line_xdyi::yd#1 )
  [655] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte) 1
  to:bitmap_line_xdyi::@1
bitmap_line_xdyi::@1: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi bitmap_line_xdyi::@2
  [656] (byte) bitmap_line_xdyi::e#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::e#0 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::e#6 )
  [656] (byte) bitmap_line_xdyi::y#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::y#5 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::y#6 )
  [656] (byte) bitmap_line_xdyi::x#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::x#6 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::x#2 )
  [657] (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3
  [658] (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3
  [659] call bitmap_plot 
  to:bitmap_line_xdyi::@4
bitmap_line_xdyi::@4: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@1
  [660] (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#3
  [661] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2
  [662] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2
  to:bitmap_line_xdyi::@3
bitmap_line_xdyi::@3: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@4
  [663] (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#3
  [664] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5
  to:bitmap_line_xdyi::@2
bitmap_line_xdyi::@2: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4
  [665] (byte) bitmap_line_xdyi::e#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::e#2 bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::e#1 )
  [665] (byte) bitmap_line_xdyi::y#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::y#2 bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::y#3 )
  [666] (byte~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#6 + (byte) 1
  [667] if((byte) bitmap_line_xdyi::x#2!=(byte~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1
  to:bitmap_line_xdyi::@return
bitmap_line_xdyi::@return: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@2
  [668] return 
  to:@return

(void()) bitmap_plot((byte) bitmap_plot::x , (byte) bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from bitmap_line_xdyd::@1 bitmap_line_xdyi::@1 bitmap_line_ydxd::@1 bitmap_line_ydxi::@1
  [669] (byte) bitmap_plot::y#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_plot::y#1 bitmap_line_xdyi::@1/(byte) bitmap_plot::y#0 bitmap_line_ydxd::@1/(byte) bitmap_plot::y#3 bitmap_line_ydxi::@1/(byte) bitmap_plot::y#2 )
  [669] (byte) bitmap_plot::x#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_plot::x#1 bitmap_line_xdyi::@1/(byte) bitmap_plot::x#0 bitmap_line_ydxd::@1/(byte) bitmap_plot::x#3 bitmap_line_ydxi::@1/(byte) bitmap_plot::x#2 )
  [670] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo + (byte) bitmap_plot::x#4)
  [671] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo + (byte) bitmap_plot::y#4)
  [672] (word) bitmap_plot::plotter#0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0
  [673] (byte~) bitmap_plot::$1 ← *((byte*)(word) bitmap_plot::plotter#0) | *((const byte[$100]) bitmap_plot_bit + (byte) bitmap_plot::x#4)
  [674] *((byte*)(word) bitmap_plot::plotter#0) ← (byte~) bitmap_plot::$1
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [675] return 
  to:@return

(void()) bitmap_line_ydxi((byte) bitmap_line_ydxi::y , (byte) bitmap_line_ydxi::x , (byte) bitmap_line_ydxi::y1 , (byte) bitmap_line_ydxi::yd , (byte) bitmap_line_ydxi::xd)
bitmap_line_ydxi: scope:[bitmap_line_ydxi]  from bitmap_line::@14 bitmap_line::@4
  [676] (byte) bitmap_line_ydxi::y1#6 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::y1#1 bitmap_line::@4/(byte) bitmap_line_ydxi::y1#0 )
  [676] (byte) bitmap_line_ydxi::yd#5 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::yd#1 bitmap_line::@4/(byte) bitmap_line_ydxi::yd#0 )
  [676] (byte) bitmap_line_ydxi::y#6 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::y#1 bitmap_line::@4/(byte) bitmap_line_ydxi::y#0 )
  [676] (byte) bitmap_line_ydxi::x#5 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::x#1 bitmap_line::@4/(byte) bitmap_line_ydxi::x#0 )
  [676] (byte) bitmap_line_ydxi::xd#2 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::xd#1 bitmap_line::@4/(byte) bitmap_line_ydxi::xd#0 )
  [677] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte) 1
  to:bitmap_line_ydxi::@1
bitmap_line_ydxi::@1: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi bitmap_line_ydxi::@2
  [678] (byte) bitmap_line_ydxi::e#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::e#0 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::e#6 )
  [678] (byte) bitmap_line_ydxi::y#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::y#6 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::y#2 )
  [678] (byte) bitmap_line_ydxi::x#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::x#5 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::x#6 )
  [679] (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3
  [680] (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3
  [681] call bitmap_plot 
  to:bitmap_line_ydxi::@4
bitmap_line_ydxi::@4: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@1
  [682] (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#3
  [683] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2
  [684] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2
  to:bitmap_line_ydxi::@3
bitmap_line_ydxi::@3: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@4
  [685] (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#3
  [686] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5
  to:bitmap_line_ydxi::@2
bitmap_line_ydxi::@2: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4
  [687] (byte) bitmap_line_ydxi::e#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::e#2 bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::e#1 )
  [687] (byte) bitmap_line_ydxi::x#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::x#2 bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::x#3 )
  [688] (byte~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#6 + (byte) 1
  [689] if((byte) bitmap_line_ydxi::y#2!=(byte~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1
  to:bitmap_line_ydxi::@return
bitmap_line_ydxi::@return: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@2
  [690] return 
  to:@return

(void()) bitmap_line_xdyd((byte) bitmap_line_xdyd::x , (byte) bitmap_line_xdyd::y , (byte) bitmap_line_xdyd::x1 , (byte) bitmap_line_xdyd::xd , (byte) bitmap_line_xdyd::yd)
bitmap_line_xdyd: scope:[bitmap_line_xdyd]  from bitmap_line::@12 bitmap_line::@9
  [691] (byte) bitmap_line_xdyd::x1#6 ← phi( bitmap_line::@9/(byte) bitmap_line_xdyd::x1#0 bitmap_line::@12/(byte) bitmap_line_xdyd::x1#1 )
  [691] (byte) bitmap_line_xdyd::xd#5 ← phi( bitmap_line::@9/(byte) bitmap_line_xdyd::xd#0 bitmap_line::@12/(byte) bitmap_line_xdyd::xd#1 )
  [691] (byte) bitmap_line_xdyd::y#5 ← phi( bitmap_line::@9/(byte) bitmap_line_xdyd::y#0 bitmap_line::@12/(byte) bitmap_line_xdyd::y#1 )
  [691] (byte) bitmap_line_xdyd::x#6 ← phi( bitmap_line::@9/(byte) bitmap_line_xdyd::x#0 bitmap_line::@12/(byte) bitmap_line_xdyd::x#1 )
  [691] (byte) bitmap_line_xdyd::yd#2 ← phi( bitmap_line::@9/(byte) bitmap_line_xdyd::yd#0 bitmap_line::@12/(byte) bitmap_line_xdyd::yd#1 )
  [692] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte) 1
  to:bitmap_line_xdyd::@1
bitmap_line_xdyd::@1: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd bitmap_line_xdyd::@2
  [693] (byte) bitmap_line_xdyd::e#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::e#0 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::e#6 )
  [693] (byte) bitmap_line_xdyd::y#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::y#5 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::y#6 )
  [693] (byte) bitmap_line_xdyd::x#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::x#6 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::x#2 )
  [694] (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3
  [695] (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3
  [696] call bitmap_plot 
  to:bitmap_line_xdyd::@4
bitmap_line_xdyd::@4: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@1
  [697] (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#3
  [698] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2
  [699] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2
  to:bitmap_line_xdyd::@3
bitmap_line_xdyd::@3: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@4
  [700] (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#3
  [701] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5
  to:bitmap_line_xdyd::@2
bitmap_line_xdyd::@2: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4
  [702] (byte) bitmap_line_xdyd::e#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::e#2 bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::e#1 )
  [702] (byte) bitmap_line_xdyd::y#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::y#2 bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::y#3 )
  [703] (byte~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#6 + (byte) 1
  [704] if((byte) bitmap_line_xdyd::x#2!=(byte~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1
  to:bitmap_line_xdyd::@return
bitmap_line_xdyd::@return: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@2
  [705] return 
  to:@return

(void()) bitmap_line_ydxd((byte) bitmap_line_ydxd::y , (byte) bitmap_line_ydxd::x , (byte) bitmap_line_ydxd::y1 , (byte) bitmap_line_ydxd::yd , (byte) bitmap_line_ydxd::xd)
bitmap_line_ydxd: scope:[bitmap_line_ydxd]  from bitmap_line::@10 bitmap_line::@6
  [706] (byte) bitmap_line_ydxd::y1#6 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::y1#0 bitmap_line::@6/(byte) bitmap_line_ydxd::y1#1 )
  [706] (byte) bitmap_line_ydxd::yd#5 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::yd#0 bitmap_line::@6/(byte) bitmap_line_ydxd::yd#1 )
  [706] (byte) bitmap_line_ydxd::y#7 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::y#0 bitmap_line::@6/(byte) bitmap_line_ydxd::y#1 )
  [706] (byte) bitmap_line_ydxd::x#5 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::x#0 bitmap_line::@6/(byte) bitmap_line_ydxd::x#1 )
  [706] (byte) bitmap_line_ydxd::xd#2 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::xd#0 bitmap_line::@6/(byte) bitmap_line_ydxd::xd#1 )
  [707] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte) 1
  to:bitmap_line_ydxd::@1
bitmap_line_ydxd::@1: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd bitmap_line_ydxd::@2
  [708] (byte) bitmap_line_ydxd::e#3 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::e#0 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::e#6 )
  [708] (byte) bitmap_line_ydxd::y#2 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::y#7 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::y#3 )
  [708] (byte) bitmap_line_ydxd::x#3 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::x#5 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::x#6 )
  [709] (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3
  [710] (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#2
  [711] call bitmap_plot 
  to:bitmap_line_ydxd::@4
bitmap_line_ydxd::@4: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@1
  [712] (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2
  [713] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2
  [714] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2
  to:bitmap_line_ydxd::@3
bitmap_line_ydxd::@3: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@4
  [715] (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#3
  [716] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5
  to:bitmap_line_ydxd::@2
bitmap_line_ydxd::@2: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4
  [717] (byte) bitmap_line_ydxd::e#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::e#2 bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::e#1 )
  [717] (byte) bitmap_line_ydxd::x#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::x#2 bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::x#3 )
  [718] (byte~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#6 + (byte) 1
  [719] if((byte) bitmap_line_ydxd::y#3!=(byte~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1
  to:bitmap_line_ydxd::@return
bitmap_line_ydxd::@return: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@2
  [720] return 
  to:@return

(void()) bitmap_clear()
bitmap_clear: scope:[bitmap_clear]  from mode_stdbitmap::@10
  [721] (word) bitmap_clear::bitmap#0 ← *((const byte[$100]) bitmap_plot_xhi) w= *((const byte[$100]) bitmap_plot_xlo)
  [722] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word) bitmap_clear::bitmap#0
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  [723] (byte) bitmap_clear::y#4 ← phi( bitmap_clear/(byte) 0 bitmap_clear::@3/(byte) bitmap_clear::y#1 )
  [723] (byte*) bitmap_clear::bitmap#3 ← phi( bitmap_clear/(byte*~) bitmap_clear::bitmap#5 bitmap_clear::@3/(byte*) bitmap_clear::bitmap#1 )
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  [724] (byte) bitmap_clear::x#2 ← phi( bitmap_clear::@1/(byte) 0 bitmap_clear::@2/(byte) bitmap_clear::x#1 )
  [724] (byte*) bitmap_clear::bitmap#2 ← phi( bitmap_clear::@1/(byte*) bitmap_clear::bitmap#3 bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  [725] *((byte*) bitmap_clear::bitmap#2) ← (byte) 0
  [726] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2
  [727] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2
  [728] if((byte) bitmap_clear::x#1!=(byte) $c8) goto bitmap_clear::@2
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  [729] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4
  [730] if((byte) bitmap_clear::y#1!=(byte) $28) goto bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@3
  [731] return 
  to:@return

(void()) bitmap_init((byte*) bitmap_init::bitmap)
bitmap_init: scope:[bitmap_init]  from mode_stdbitmap::@6
  [732] phi()
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [733] (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte) $80 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  [733] (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte) 0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  [734] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte) $f8
  [735] *((const byte[$100]) bitmap_plot_xlo + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$0
  [736] *((const byte[$100]) bitmap_plot_xhi + (byte) bitmap_init::x#2) ← >(const byte*) mode_stdbitmap::BITMAP
  [737] *((const byte[$100]) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  [738] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1
  [739] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6
  to:bitmap_init::@2
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@1
  [740] phi()
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@6
  [741] (byte) bitmap_init::bits#4 ← phi( bitmap_init::@6/(byte) bitmap_init::bits#1 bitmap_init::@1/(byte) $80 )
  [742] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2
  [743] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [744] (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@2/(byte*) 0 bitmap_init::@4/(byte*) bitmap_init::yoffs#4 )
  [744] (byte) bitmap_init::y#2 ← phi( bitmap_init::@2/(byte) 0 bitmap_init::@4/(byte) bitmap_init::y#1 )
  [745] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte) 7
  [746] (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2
  [747] (byte~) bitmap_init::$8 ← (byte~) bitmap_init::$10 | (byte~) bitmap_init::$7
  [748] *((const byte[$100]) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$8
  [749] (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2
  [750] *((const byte[$100]) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9
  [751] if((byte~) bitmap_init::$10!=(byte) 7) goto bitmap_init::@4
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@3
  [752] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@5
  [753] (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@3/(byte*) bitmap_init::yoffs#2 bitmap_init::@5/(byte*) bitmap_init::yoffs#1 )
  [754] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2
  [755] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [756] return 
  to:@return

(void()) mode_mcchar()
mode_mcchar: scope:[mode_mcchar]  from menu::@19
  [757] *((const byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0
  [758] *((const byte*) DTV_COLOR_BANK_LO) ← <(word)(const dword) DTV_COLOR_BANK_DEFAULT/(word) $400
  [759] *((const byte*) DTV_COLOR_BANK_HI) ← (byte) 0
  [760] *((const byte*) DTV_CONTROL) ← (byte) 0
  [761] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3
  [762] *((const byte*) CIA2_PORT_A) ← (byte) 3^(byte)(word)(const byte*) mode_mcchar::CHARSET/(word) $4000
  [763] *((const byte*) VIC_CONTROL) ← (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3
  [764] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_CSEL|(const byte) VIC_MCM
  [765] *((const byte*) VIC_MEMORY) ← (byte)(word)(const byte*) mode_mcchar::CHARSET&(word) $3fff/(word) $400
  to:mode_mcchar::@1
mode_mcchar::@1: scope:[mode_mcchar]  from mode_mcchar mode_mcchar::@1
  [766] (byte) mode_mcchar::i#2 ← phi( mode_mcchar/(byte) 0 mode_mcchar::@1/(byte) mode_mcchar::i#1 )
  [767] *((const byte*) DTV_PALETTE + (byte) mode_mcchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT + (byte) mode_mcchar::i#2)
  [768] (byte) mode_mcchar::i#1 ← ++ (byte) mode_mcchar::i#2
  [769] if((byte) mode_mcchar::i#1!=(byte) $10) goto mode_mcchar::@1
  to:mode_mcchar::@2
mode_mcchar::@2: scope:[mode_mcchar]  from mode_mcchar::@1
  [770] *((const byte*) BORDERCOL) ← (byte) 0
  [771] *((const byte*) BGCOL1) ← (const byte) BLACK
  [772] *((const byte*) BGCOL2) ← (const byte) GREEN
  [773] *((const byte*) BGCOL3) ← (const byte) BLUE
  to:mode_mcchar::@3
mode_mcchar::@3: scope:[mode_mcchar]  from mode_mcchar::@2 mode_mcchar::@5
  [774] (byte*) mode_mcchar::ch#3 ← phi( mode_mcchar::@2/(const byte*) mode_mcchar::SCREEN mode_mcchar::@5/(byte*) mode_mcchar::ch#1 )
  [774] (byte*) mode_mcchar::col#3 ← phi( mode_mcchar::@2/(const byte*) mode_mcchar::COLORS mode_mcchar::@5/(byte*) mode_mcchar::col#1 )
  [774] (byte) mode_mcchar::cy#4 ← phi( mode_mcchar::@2/(byte) 0 mode_mcchar::@5/(byte) mode_mcchar::cy#1 )
  to:mode_mcchar::@4
mode_mcchar::@4: scope:[mode_mcchar]  from mode_mcchar::@3 mode_mcchar::@4
  [775] (byte*) mode_mcchar::ch#2 ← phi( mode_mcchar::@3/(byte*) mode_mcchar::ch#3 mode_mcchar::@4/(byte*) mode_mcchar::ch#1 )
  [775] (byte*) mode_mcchar::col#2 ← phi( mode_mcchar::@3/(byte*) mode_mcchar::col#3 mode_mcchar::@4/(byte*) mode_mcchar::col#1 )
  [775] (byte) mode_mcchar::cx#2 ← phi( mode_mcchar::@3/(byte) 0 mode_mcchar::@4/(byte) mode_mcchar::cx#1 )
  [776] (byte~) mode_mcchar::$26 ← (byte) mode_mcchar::cx#2 + (byte) mode_mcchar::cy#4
  [777] (byte~) mode_mcchar::$27 ← (byte~) mode_mcchar::$26 & (byte) $f
  [778] *((byte*) mode_mcchar::col#2) ← (byte~) mode_mcchar::$27
  [779] (byte*) mode_mcchar::col#1 ← ++ (byte*) mode_mcchar::col#2
  [780] (byte~) mode_mcchar::$28 ← (byte) mode_mcchar::cy#4 & (byte) $f
  [781] (byte~) mode_mcchar::$29 ← (byte~) mode_mcchar::$28 << (byte) 4
  [782] (byte~) mode_mcchar::$30 ← (byte) mode_mcchar::cx#2 & (byte) $f
  [783] (byte~) mode_mcchar::$31 ← (byte~) mode_mcchar::$29 | (byte~) mode_mcchar::$30
  [784] *((byte*) mode_mcchar::ch#2) ← (byte~) mode_mcchar::$31
  [785] (byte*) mode_mcchar::ch#1 ← ++ (byte*) mode_mcchar::ch#2
  [786] (byte) mode_mcchar::cx#1 ← ++ (byte) mode_mcchar::cx#2
  [787] if((byte) mode_mcchar::cx#1!=(byte) $28) goto mode_mcchar::@4
  to:mode_mcchar::@5
mode_mcchar::@5: scope:[mode_mcchar]  from mode_mcchar::@4
  [788] (byte) mode_mcchar::cy#1 ← ++ (byte) mode_mcchar::cy#4
  [789] if((byte) mode_mcchar::cy#1!=(byte) $19) goto mode_mcchar::@3
  to:mode_mcchar::@6
mode_mcchar::@6: scope:[mode_mcchar]  from mode_mcchar::@5
  [790] phi()
  [791] call mode_ctrl 
  to:mode_mcchar::@return
mode_mcchar::@return: scope:[mode_mcchar]  from mode_mcchar::@6
  [792] return 
  to:@return

(void()) mode_ecmchar()
mode_ecmchar: scope:[mode_ecmchar]  from menu::@18
  [793] *((const byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0
  [794] *((const byte*) DTV_COLOR_BANK_LO) ← <(word)(const dword) DTV_COLOR_BANK_DEFAULT/(word) $400
  [795] *((const byte*) DTV_COLOR_BANK_HI) ← (byte) 0
  [796] *((const byte*) DTV_CONTROL) ← (byte) 0
  [797] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3
  [798] *((const byte*) CIA2_PORT_A) ← (byte) 3^(byte)(word)(const byte*) mode_ecmchar::CHARSET/(word) $4000
  [799] *((const byte*) VIC_CONTROL) ← (const byte) VIC_DEN|(const byte) VIC_RSEL|(const byte) VIC_ECM|(byte) 3
  [800] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_CSEL
  [801] *((const byte*) VIC_MEMORY) ← (byte)(word)(const byte*) mode_ecmchar::CHARSET&(word) $3fff/(word) $400
  to:mode_ecmchar::@1
mode_ecmchar::@1: scope:[mode_ecmchar]  from mode_ecmchar mode_ecmchar::@1
  [802] (byte) mode_ecmchar::i#2 ← phi( mode_ecmchar/(byte) 0 mode_ecmchar::@1/(byte) mode_ecmchar::i#1 )
  [803] *((const byte*) DTV_PALETTE + (byte) mode_ecmchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT + (byte) mode_ecmchar::i#2)
  [804] (byte) mode_ecmchar::i#1 ← ++ (byte) mode_ecmchar::i#2
  [805] if((byte) mode_ecmchar::i#1!=(byte) $10) goto mode_ecmchar::@1
  to:mode_ecmchar::@2
mode_ecmchar::@2: scope:[mode_ecmchar]  from mode_ecmchar::@1
  [806] *((const byte*) BORDERCOL) ← (byte) 0
  [807] *((const byte*) BGCOL1) ← (byte) 0
  [808] *((const byte*) BGCOL2) ← (byte) 2
  [809] *((const byte*) BGCOL3) ← (byte) 5
  [810] *((const byte*) BGCOL4) ← (byte) 6
  to:mode_ecmchar::@3
mode_ecmchar::@3: scope:[mode_ecmchar]  from mode_ecmchar::@2 mode_ecmchar::@5
  [811] (byte*) mode_ecmchar::ch#3 ← phi( mode_ecmchar::@2/(const byte*) mode_ecmchar::SCREEN mode_ecmchar::@5/(byte*) mode_ecmchar::ch#1 )
  [811] (byte*) mode_ecmchar::col#3 ← phi( mode_ecmchar::@2/(const byte*) mode_ecmchar::COLORS mode_ecmchar::@5/(byte*) mode_ecmchar::col#1 )
  [811] (byte) mode_ecmchar::cy#4 ← phi( mode_ecmchar::@2/(byte) 0 mode_ecmchar::@5/(byte) mode_ecmchar::cy#1 )
  to:mode_ecmchar::@4
mode_ecmchar::@4: scope:[mode_ecmchar]  from mode_ecmchar::@3 mode_ecmchar::@4
  [812] (byte*) mode_ecmchar::ch#2 ← phi( mode_ecmchar::@3/(byte*) mode_ecmchar::ch#3 mode_ecmchar::@4/(byte*) mode_ecmchar::ch#1 )
  [812] (byte*) mode_ecmchar::col#2 ← phi( mode_ecmchar::@3/(byte*) mode_ecmchar::col#3 mode_ecmchar::@4/(byte*) mode_ecmchar::col#1 )
  [812] (byte) mode_ecmchar::cx#2 ← phi( mode_ecmchar::@3/(byte) 0 mode_ecmchar::@4/(byte) mode_ecmchar::cx#1 )
  [813] (byte~) mode_ecmchar::$26 ← (byte) mode_ecmchar::cx#2 + (byte) mode_ecmchar::cy#4
  [814] (byte~) mode_ecmchar::$27 ← (byte~) mode_ecmchar::$26 & (byte) $f
  [815] *((byte*) mode_ecmchar::col#2) ← (byte~) mode_ecmchar::$27
  [816] (byte*) mode_ecmchar::col#1 ← ++ (byte*) mode_ecmchar::col#2
  [817] (byte~) mode_ecmchar::$28 ← (byte) mode_ecmchar::cy#4 & (byte) $f
  [818] (byte~) mode_ecmchar::$29 ← (byte~) mode_ecmchar::$28 << (byte) 4
  [819] (byte~) mode_ecmchar::$30 ← (byte) mode_ecmchar::cx#2 & (byte) $f
  [820] (byte~) mode_ecmchar::$31 ← (byte~) mode_ecmchar::$29 | (byte~) mode_ecmchar::$30
  [821] *((byte*) mode_ecmchar::ch#2) ← (byte~) mode_ecmchar::$31
  [822] (byte*) mode_ecmchar::ch#1 ← ++ (byte*) mode_ecmchar::ch#2
  [823] (byte) mode_ecmchar::cx#1 ← ++ (byte) mode_ecmchar::cx#2
  [824] if((byte) mode_ecmchar::cx#1!=(byte) $28) goto mode_ecmchar::@4
  to:mode_ecmchar::@5
mode_ecmchar::@5: scope:[mode_ecmchar]  from mode_ecmchar::@4
  [825] (byte) mode_ecmchar::cy#1 ← ++ (byte) mode_ecmchar::cy#4
  [826] if((byte) mode_ecmchar::cy#1!=(byte) $19) goto mode_ecmchar::@3
  to:mode_ecmchar::@6
mode_ecmchar::@6: scope:[mode_ecmchar]  from mode_ecmchar::@5
  [827] phi()
  [828] call mode_ctrl 
  to:mode_ecmchar::@return
mode_ecmchar::@return: scope:[mode_ecmchar]  from mode_ecmchar::@6
  [829] return 
  to:@return

(void()) mode_stdchar()
mode_stdchar: scope:[mode_stdchar]  from menu::@17
  [830] *((const byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0
  [831] *((const byte*) DTV_COLOR_BANK_LO) ← <(word)(const dword) DTV_COLOR_BANK_DEFAULT/(word) $400
  [832] *((const byte*) DTV_COLOR_BANK_HI) ← (byte) 0
  [833] *((const byte*) DTV_CONTROL) ← (byte) 0
  [834] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3
  [835] *((const byte*) CIA2_PORT_A) ← (byte) 3^(byte)(word)(const byte*) mode_stdchar::CHARSET/(word) $4000
  [836] *((const byte*) VIC_CONTROL) ← (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3
  [837] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_CSEL
  [838] *((const byte*) VIC_MEMORY) ← (byte)(word)(const byte*) mode_stdchar::CHARSET&(word) $3fff/(word) $400
  to:mode_stdchar::@1
mode_stdchar::@1: scope:[mode_stdchar]  from mode_stdchar mode_stdchar::@1
  [839] (byte) mode_stdchar::i#2 ← phi( mode_stdchar/(byte) 0 mode_stdchar::@1/(byte) mode_stdchar::i#1 )
  [840] *((const byte*) DTV_PALETTE + (byte) mode_stdchar::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT + (byte) mode_stdchar::i#2)
  [841] (byte) mode_stdchar::i#1 ← ++ (byte) mode_stdchar::i#2
  [842] if((byte) mode_stdchar::i#1!=(byte) $10) goto mode_stdchar::@1
  to:mode_stdchar::@2
mode_stdchar::@2: scope:[mode_stdchar]  from mode_stdchar::@1
  [843] *((const byte*) BGCOL) ← (byte) 0
  [844] *((const byte*) BORDERCOL) ← (byte) 0
  to:mode_stdchar::@3
mode_stdchar::@3: scope:[mode_stdchar]  from mode_stdchar::@2 mode_stdchar::@5
  [845] (byte*) mode_stdchar::ch#3 ← phi( mode_stdchar::@2/(const byte*) mode_stdchar::SCREEN mode_stdchar::@5/(byte*) mode_stdchar::ch#1 )
  [845] (byte*) mode_stdchar::col#3 ← phi( mode_stdchar::@2/(const byte*) mode_stdchar::COLORS mode_stdchar::@5/(byte*) mode_stdchar::col#1 )
  [845] (byte) mode_stdchar::cy#4 ← phi( mode_stdchar::@2/(byte) 0 mode_stdchar::@5/(byte) mode_stdchar::cy#1 )
  to:mode_stdchar::@4
mode_stdchar::@4: scope:[mode_stdchar]  from mode_stdchar::@3 mode_stdchar::@4
  [846] (byte*) mode_stdchar::ch#2 ← phi( mode_stdchar::@3/(byte*) mode_stdchar::ch#3 mode_stdchar::@4/(byte*) mode_stdchar::ch#1 )
  [846] (byte*) mode_stdchar::col#2 ← phi( mode_stdchar::@3/(byte*) mode_stdchar::col#3 mode_stdchar::@4/(byte*) mode_stdchar::col#1 )
  [846] (byte) mode_stdchar::cx#2 ← phi( mode_stdchar::@3/(byte) 0 mode_stdchar::@4/(byte) mode_stdchar::cx#1 )
  [847] (byte~) mode_stdchar::$25 ← (byte) mode_stdchar::cx#2 + (byte) mode_stdchar::cy#4
  [848] (byte~) mode_stdchar::$26 ← (byte~) mode_stdchar::$25 & (byte) $f
  [849] *((byte*) mode_stdchar::col#2) ← (byte~) mode_stdchar::$26
  [850] (byte*) mode_stdchar::col#1 ← ++ (byte*) mode_stdchar::col#2
  [851] (byte~) mode_stdchar::$27 ← (byte) mode_stdchar::cy#4 & (byte) $f
  [852] (byte~) mode_stdchar::$28 ← (byte~) mode_stdchar::$27 << (byte) 4
  [853] (byte~) mode_stdchar::$29 ← (byte) mode_stdchar::cx#2 & (byte) $f
  [854] (byte~) mode_stdchar::$30 ← (byte~) mode_stdchar::$28 | (byte~) mode_stdchar::$29
  [855] *((byte*) mode_stdchar::ch#2) ← (byte~) mode_stdchar::$30
  [856] (byte*) mode_stdchar::ch#1 ← ++ (byte*) mode_stdchar::ch#2
  [857] (byte) mode_stdchar::cx#1 ← ++ (byte) mode_stdchar::cx#2
  [858] if((byte) mode_stdchar::cx#1!=(byte) $28) goto mode_stdchar::@4
  to:mode_stdchar::@5
mode_stdchar::@5: scope:[mode_stdchar]  from mode_stdchar::@4
  [859] (byte) mode_stdchar::cy#1 ← ++ (byte) mode_stdchar::cy#4
  [860] if((byte) mode_stdchar::cy#1!=(byte) $19) goto mode_stdchar::@3
  to:mode_stdchar::@6
mode_stdchar::@6: scope:[mode_stdchar]  from mode_stdchar::@5
  [861] phi()
  [862] call mode_ctrl 
  to:mode_stdchar::@return
mode_stdchar::@return: scope:[mode_stdchar]  from mode_stdchar::@6
  [863] return 
  to:@return

(void()) print_str_lines((byte*) print_str_lines::str)
print_str_lines: scope:[print_str_lines]  from menu::@30
  [864] phi()
  to:print_str_lines::@1
print_str_lines::@1: scope:[print_str_lines]  from print_str_lines print_str_lines::@6
  [865] (byte*) print_line_cursor#17 ← phi( print_str_lines/(const byte*) menu::SCREEN print_str_lines::@6/(byte*) print_line_cursor#19 )
  [865] (byte*) print_char_cursor#19 ← phi( print_str_lines/(const byte*) menu::SCREEN print_str_lines::@6/(byte*~) print_char_cursor#100 )
  [865] (byte*) print_str_lines::str#2 ← phi( print_str_lines/(const byte[]) MENU_TEXT print_str_lines::@6/(byte*) print_str_lines::str#0 )
  [866] if((byte) 0!=*((byte*) print_str_lines::str#2)) goto print_str_lines::@2
  to:print_str_lines::@return
print_str_lines::@return: scope:[print_str_lines]  from print_str_lines::@1
  [867] return 
  to:@return
print_str_lines::@2: scope:[print_str_lines]  from print_str_lines::@1 print_str_lines::@3
  [868] (byte*) print_char_cursor#17 ← phi( print_str_lines::@1/(byte*) print_char_cursor#19 print_str_lines::@3/(byte*) print_char_cursor#32 )
  [868] (byte*) print_str_lines::str#3 ← phi( print_str_lines::@1/(byte*) print_str_lines::str#2 print_str_lines::@3/(byte*) print_str_lines::str#0 )
  [869] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#3)
  [870] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#3
  [871] if((byte) 0==(byte) print_str_lines::ch#0) goto print_str_lines::@3
  to:print_str_lines::@4
print_str_lines::@4: scope:[print_str_lines]  from print_str_lines::@2
  [872] *((byte*) print_char_cursor#17) ← (byte) print_str_lines::ch#0
  [873] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#17
  to:print_str_lines::@3
print_str_lines::@3: scope:[print_str_lines]  from print_str_lines::@2 print_str_lines::@4
  [874] (byte*) print_char_cursor#32 ← phi( print_str_lines::@2/(byte*) print_char_cursor#17 print_str_lines::@4/(byte*) print_char_cursor#1 )
  [875] if((byte) 0!=(byte) print_str_lines::ch#0) goto print_str_lines::@2
  to:print_str_lines::@5
print_str_lines::@5: scope:[print_str_lines]  from print_str_lines::@3
  [876] phi()
  [877] call print_ln 
  to:print_str_lines::@6
print_str_lines::@6: scope:[print_str_lines]  from print_str_lines::@5
  [878] (byte*~) print_char_cursor#100 ← (byte*) print_line_cursor#19
  to:print_str_lines::@1

(void()) print_ln()
print_ln: scope:[print_ln]  from print_str_lines::@5
  [879] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [880] (byte*) print_line_cursor#18 ← phi( print_ln/(byte*) print_line_cursor#17 print_ln::@1/(byte*) print_line_cursor#19 )
  [881] (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#18 + (byte) $28
  [882] if((byte*) print_line_cursor#19<(byte*) print_char_cursor#32) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [883] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from menu::@29
  [884] phi()
  [885] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [886] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [887] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [888] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [889] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [890] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [891] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [892] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(void()) print_set_screen((byte*) print_set_screen::screen)
print_set_screen: scope:[print_set_screen]  from menu::@4
  [893] phi()
  to:print_set_screen::@return
print_set_screen::@return: scope:[print_set_screen]  from print_set_screen
  [894] return 
  to:@return
