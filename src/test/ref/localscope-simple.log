
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  *BG_COLOR = main::i
  *BG_COLOR = main::i1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
constant byte* const BG_COLOR = (byte*)$d021
void __start()
void main()
constant byte main::i = 0
constant byte main::i1 = 1

Simplifying constant pointer cast (byte*) 53281
Successful SSA optimization PassNCastSimplification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *BG_COLOR = main::i
  [1] *BG_COLOR = main::i1
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *BG_COLOR = main::i [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *BG_COLOR = main::i1 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 21 combination 
Uplifting [] best 21 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests anonymous scopes inside functions
  // Upstart
  // Commodore 64 PRG executable file
.file [name="localscope-simple.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label BG_COLOR = $d021
.segment Code
  // main
main: {
    .const i = 0
    .const i1 = 1
    // [0] *BG_COLOR = main::i -- _deref_pbuc1=vbuc2 
    lda #i
    sta BG_COLOR
    // [1] *BG_COLOR = main::i1 -- _deref_pbuc1=vbuc2 
    lda #i1
    sta BG_COLOR
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
constant byte* const BG_COLOR = (byte*) 53281
void main()
constant byte main::i = 0
constant byte main::i1 = 1



FINAL ASSEMBLER
Score: 18

  // File Comments
// Tests anonymous scopes inside functions
  // Upstart
  // Commodore 64 PRG executable file
.file [name="localscope-simple.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label BG_COLOR = $d021
.segment Code
  // main
main: {
    .const i = 0
    .const i1 = 1
    // *BG_COLOR = i
    // [0] *BG_COLOR = main::i -- _deref_pbuc1=vbuc2 
    lda #i
    sta BG_COLOR
    // [1] *BG_COLOR = main::i1 -- _deref_pbuc1=vbuc2 
    lda #i1
    sta BG_COLOR
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

