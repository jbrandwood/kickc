
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::b#0 = 0
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::b#2 = phi( main/main::b#0, main::@1/main::b#1 )
  main::$0 = main::b#2 + $28*8
  main::b#1 = main::$0
  main::i#1 = main::i#2 + rangenext(0,$a)
  main::$1 = main::i#1 != rangelast(0,$a)
  if(main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
number~ main::$0
bool~ main::$1
word main::b
word main::b#0
word main::b#1
word main::b#2
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2

Adding number conversion cast (unumber) $28*8 in main::$0 = main::b#2 + $28*8
Adding number conversion cast (unumber) main::$0 in main::$0 = main::b#2 + (unumber)$28*8
Successful SSA optimization PassNAddNumberTypeConversions
Inferred type updated to word in main::$0 = main::b#2 + (word)$28*8
Alias main::b#1 = main::$0 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$1 [6] if(main::i#1!=rangelast(0,$a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::b#0 = 0
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [4] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [6] if(main::i#1!=rangelast(0,$a)) goto main::@1 to $b
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $b in [3] if(main::i#1!=$b) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::b#0
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Constant inlined main::b#0 = 0
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [6] main::b#3 = main::b#1
Coalesced [7] main::i#3 = main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [1] main::b#2 = phi( main/0, main::@1/main::b#1 )
  [2] main::b#1 = main::b#2 + (word)$28*8
  [3] main::i#1 = ++ main::i#2
  [4] if(main::i#1!=$b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [5] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
word main::b
word main::b#1 7.333333333333333
word main::b#2 22.0
byte main::i
byte main::i#1 16.5
byte main::i#2 11.0

Initial phi equivalence classes
[ main::b#2 main::b#1 ]
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::b#2 main::b#1 ]
[ main::i#2 main::i#1 ]
Allocated zp[2]:2 [ main::b#2 main::b#1 ]
Allocated zp[1]:4 [ main::i#2 main::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] main::b#1 = main::b#2 + (word)$28*8 [ main::i#2 main::b#1 ] (  [ main::i#2 main::b#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::i#2 main::i#1 ]
Statement [2] main::b#1 = main::b#2 + (word)$28*8 [ main::i#2 main::b#1 ] (  [ main::i#2 main::b#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::b#2 main::b#1 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ main::i#2 main::i#1 ] : zp[1]:4 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 29.33: zp[2]:2 [ main::b#2 main::b#1 ] 27.5: zp[1]:4 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 461 combination zp[2]:2 [ main::b#2 main::b#1 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 461 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Expressions based on bytes but resulting in words are as words - eg. b = b + 40*8;
  // Upstart
  // Commodore 64 PRG executable file
.file [name="wordexpr.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label b = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi main::b#2 = 0 [phi:main->main::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z b
    lda #>0
    sta.z b+1
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [1] phi main::b#2 = main::b#1 [phi:main::@1->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::b#1 = main::b#2 + (word)$28*8 -- vwuz1=vwuz1_plus_vwuc1 
    lda.z b
    clc
    adc #<$28*8
    sta.z b
    lda.z b+1
    adc #>$28*8
    sta.z b+1
    // [3] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [4] if(main::i#1!=$b) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
word main::b
word main::b#1 b zp[2]:2 7.333333333333333
word main::b#2 b zp[2]:2 22.0
byte main::i
byte main::i#1 reg byte x 16.5
byte main::i#2 reg byte x 11.0

zp[2]:2 [ main::b#2 main::b#1 ]
reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 351

  // File Comments
// Expressions based on bytes but resulting in words are as words - eg. b = b + 40*8;
  // Upstart
  // Commodore 64 PRG executable file
.file [name="wordexpr.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label b = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi main::b#2 = 0 [phi:main->main::@1#1] -- vwuz1=vwuc1 
    txa
    sta.z b
    sta.z b+1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [1] phi main::b#2 = main::b#1 [phi:main::@1->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // b = b + 40*8
    // [2] main::b#1 = main::b#2 + (word)$28*8 -- vwuz1=vwuz1_plus_vwuc1 
    lda.z b
    clc
    adc #<$28*8
    sta.z b
    lda.z b+1
    adc #>$28*8
    sta.z b+1
    // for(byte i : 0..10)
    // [3] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [4] if(main::i#1!=$b) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne __b1
    // main::@return
    // }
    // [5] return 
    rts
}
  // File Data

