@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (signed byte) main::dy#2 ← phi( main/(signed byte) -$80 main::@2/(signed byte) main::dy#1 )
  [6] (signed byte) debug::dy#0 ← (signed byte) main::dy#2
  [7] call debug 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] (signed byte) main::dy#1 ← ++ (signed byte) main::dy#2
  [9] if((signed byte) main::dy#1!=(signed byte) -$80) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return 
  to:@return
debug: scope:[debug]  from main::@1
  [11] if((signed byte) debug::dy#0<=(signed byte) -$78) goto debug::@return
  to:debug::@1
debug::@1: scope:[debug]  from debug
  [12] *((const byte*) SCREEN#0 + (byte)(signed byte) debug::dy#0) ← (byte) $a
  to:debug::@return
debug::@return: scope:[debug]  from debug debug::@1
  [13] return 
  to:@return
