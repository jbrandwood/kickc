Inlined call call __init 

CONTROL FLOW GRAPH SSA

word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
divr16u: scope:[divr16u]  from div16u div32u16u div32u16u::@1
  divr16u::divisor#7 = phi( div16u/divr16u::divisor#0, div32u16u/divr16u::divisor#1, div32u16u::@1/divr16u::divisor#2 )
  divr16u::dividend#6 = phi( div16u/divr16u::dividend#1, div32u16u/divr16u::dividend#2, div32u16u::@1/divr16u::dividend#3 )
  divr16u::rem#11 = phi( div16u/divr16u::rem#3, div32u16u/divr16u::rem#4, div32u16u::@1/divr16u::rem#5 )
  divr16u::quotient#0 = 0
  divr16u::i#0 = 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  divr16u::i#5 = phi( divr16u/divr16u::i#0, divr16u::@3/divr16u::i#1 )
  divr16u::divisor#5 = phi( divr16u/divr16u::divisor#7, divr16u::@3/divr16u::divisor#8 )
  divr16u::quotient#6 = phi( divr16u/divr16u::quotient#0, divr16u::@3/divr16u::quotient#8 )
  divr16u::dividend#4 = phi( divr16u/divr16u::dividend#6, divr16u::@3/divr16u::dividend#7 )
  divr16u::rem#6 = phi( divr16u/divr16u::rem#11, divr16u::@3/divr16u::rem#12 )
  divr16u::$0 = divr16u::rem#6 << 1
  divr16u::rem#0 = divr16u::$0
  divr16u::$1 = > divr16u::dividend#4
  divr16u::$2 = divr16u::$1 & $80
  divr16u::$3 = divr16u::$2 != 0
  divr16u::$4 = ! divr16u::$3
  if(divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  divr16u::i#3 = phi( divr16u::@1/divr16u::i#5, divr16u::@4/divr16u::i#6 )
  divr16u::divisor#3 = phi( divr16u::@1/divr16u::divisor#5, divr16u::@4/divr16u::divisor#6 )
  divr16u::rem#7 = phi( divr16u::@1/divr16u::rem#0, divr16u::@4/divr16u::rem#1 )
  divr16u::quotient#3 = phi( divr16u::@1/divr16u::quotient#6, divr16u::@4/divr16u::quotient#7 )
  divr16u::dividend#5 = phi( divr16u::@1/divr16u::dividend#4, divr16u::@4/divr16u::dividend#8 )
  divr16u::$6 = divr16u::dividend#5 << 1
  divr16u::dividend#0 = divr16u::$6
  divr16u::$7 = divr16u::quotient#3 << 1
  divr16u::quotient#1 = divr16u::$7
  divr16u::$8 = divr16u::rem#7 >= divr16u::divisor#3
  divr16u::$9 = ! divr16u::$8
  if(divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  divr16u::i#6 = phi( divr16u::@1/divr16u::i#5 )
  divr16u::divisor#6 = phi( divr16u::@1/divr16u::divisor#5 )
  divr16u::quotient#7 = phi( divr16u::@1/divr16u::quotient#6 )
  divr16u::dividend#8 = phi( divr16u::@1/divr16u::dividend#4 )
  divr16u::rem#8 = phi( divr16u::@1/divr16u::rem#0 )
  divr16u::$5 = divr16u::rem#8 | 1
  divr16u::rem#1 = divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  divr16u::divisor#8 = phi( divr16u::@2/divr16u::divisor#3, divr16u::@5/divr16u::divisor#4 )
  divr16u::quotient#8 = phi( divr16u::@2/divr16u::quotient#1, divr16u::@5/divr16u::quotient#2 )
  divr16u::dividend#7 = phi( divr16u::@2/divr16u::dividend#0, divr16u::@5/divr16u::dividend#9 )
  divr16u::rem#12 = phi( divr16u::@2/divr16u::rem#7, divr16u::@5/divr16u::rem#2 )
  divr16u::i#2 = phi( divr16u::@2/divr16u::i#3, divr16u::@5/divr16u::i#4 )
  divr16u::i#1 = divr16u::i#2 + rangenext(0,$f)
  divr16u::$11 = divr16u::i#1 != rangelast(0,$f)
  if(divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  divr16u::dividend#9 = phi( divr16u::@2/divr16u::dividend#0 )
  divr16u::i#4 = phi( divr16u::@2/divr16u::i#3 )
  divr16u::divisor#4 = phi( divr16u::@2/divr16u::divisor#3 )
  divr16u::rem#9 = phi( divr16u::@2/divr16u::rem#7 )
  divr16u::quotient#4 = phi( divr16u::@2/divr16u::quotient#1 )
  divr16u::quotient#2 = ++ divr16u::quotient#4
  divr16u::$10 = divr16u::rem#9 - divr16u::divisor#4
  divr16u::rem#2 = divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  divr16u::quotient#5 = phi( divr16u::@3/divr16u::quotient#8 )
  divr16u::rem#10 = phi( divr16u::@3/divr16u::rem#12 )
  rem16u#0 = divr16u::rem#10
  divr16u::return#0 = divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  rem16u#17 = phi( divr16u::@6/rem16u#0 )
  divr16u::return#5 = phi( divr16u::@6/divr16u::return#0 )
  divr16u::return#1 = divr16u::return#5
  rem16u#1 = rem16u#17
  return 
  to:@return

word div16u(word div16u::dividend , word div16u::divisor)
div16u: scope:[div16u]  from sin8s_gen
  rem16u#32 = phi( sin8s_gen/rem16u#36 )
  div16u::divisor#1 = phi( sin8s_gen/div16u::divisor#0 )
  div16u::dividend#1 = phi( sin8s_gen/div16u::dividend#0 )
  divr16u::dividend#1 = div16u::dividend#1
  divr16u::divisor#0 = div16u::divisor#1
  divr16u::rem#3 = 0
  call divr16u 
  divr16u::return#2 = divr16u::return#1
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  rem16u#18 = phi( div16u/rem16u#1 )
  divr16u::return#6 = phi( div16u/divr16u::return#2 )
  div16u::$0 = divr16u::return#6
  rem16u#2 = rem16u#18
  div16u::return#0 = div16u::$0
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  rem16u#19 = phi( div16u::@1/rem16u#2 )
  div16u::return#3 = phi( div16u::@1/div16u::return#0 )
  div16u::return#1 = div16u::return#3
  rem16u#3 = rem16u#19
  return 
  to:@return

dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
div32u16u: scope:[div32u16u]  from sin16s_gen
  rem16u#33 = phi( sin16s_gen/rem16u#34 )
  div32u16u::divisor#1 = phi( sin16s_gen/div32u16u::divisor#0 )
  div32u16u::dividend#1 = phi( sin16s_gen/div32u16u::dividend#0 )
  div32u16u::$0 = > div32u16u::dividend#1
  divr16u::dividend#2 = div32u16u::$0
  divr16u::divisor#1 = div32u16u::divisor#1
  divr16u::rem#4 = 0
  call divr16u 
  divr16u::return#3 = divr16u::return#1
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  div32u16u::divisor#2 = phi( div32u16u/div32u16u::divisor#1 )
  div32u16u::dividend#2 = phi( div32u16u/div32u16u::dividend#1 )
  rem16u#20 = phi( div32u16u/rem16u#1 )
  divr16u::return#7 = phi( div32u16u/divr16u::return#3 )
  div32u16u::$1 = divr16u::return#7
  rem16u#4 = rem16u#20
  div32u16u::quotient_hi#0 = div32u16u::$1
  div32u16u::$2 = < div32u16u::dividend#2
  divr16u::dividend#3 = div32u16u::$2
  divr16u::divisor#2 = div32u16u::divisor#2
  divr16u::rem#5 = rem16u#4
  call divr16u 
  divr16u::return#4 = divr16u::return#1
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  div32u16u::quotient_hi#1 = phi( div32u16u::@1/div32u16u::quotient_hi#0 )
  rem16u#21 = phi( div32u16u::@1/rem16u#1 )
  divr16u::return#8 = phi( div32u16u::@1/divr16u::return#4 )
  div32u16u::$3 = divr16u::return#8
  rem16u#5 = rem16u#21
  div32u16u::quotient_lo#0 = div32u16u::$3
  div32u16u::quotient#0 = (dword){ div32u16u::quotient_hi#1, div32u16u::quotient_lo#0 }
  div32u16u::return#0 = div32u16u::quotient#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  rem16u#22 = phi( div32u16u::@2/rem16u#5 )
  div32u16u::return#3 = phi( div32u16u::@2/div32u16u::return#0 )
  div32u16u::return#1 = div32u16u::return#3
  rem16u#6 = rem16u#22
  return 
  to:@return

word mul8u(byte mul8u::a , byte mul8u::b)
mul8u: scope:[mul8u]  from mulu8_sel
  mul8u::a#5 = phi( mulu8_sel/mul8u::a#1 )
  mul8u::b#1 = phi( mulu8_sel/mul8u::b#0 )
  mul8u::res#0 = 0
  mul8u::mb#0 = (word)mul8u::b#1
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@4
  mul8u::mb#5 = phi( mul8u/mul8u::mb#0, mul8u::@4/mul8u::mb#1 )
  mul8u::res#4 = phi( mul8u/mul8u::res#0, mul8u::@4/mul8u::res#6 )
  mul8u::a#2 = phi( mul8u/mul8u::a#5, mul8u::@4/mul8u::a#0 )
  mul8u::$0 = mul8u::a#2 != 0
  if(mul8u::$0) goto mul8u::@2
  to:mul8u::@3
mul8u::@2: scope:[mul8u]  from mul8u::@1
  mul8u::res#5 = phi( mul8u::@1/mul8u::res#4 )
  mul8u::mb#4 = phi( mul8u::@1/mul8u::mb#5 )
  mul8u::a#3 = phi( mul8u::@1/mul8u::a#2 )
  mul8u::$1 = mul8u::a#3 & 1
  mul8u::$2 = mul8u::$1 != 0
  mul8u::$3 = ! mul8u::$2
  if(mul8u::$3) goto mul8u::@4
  to:mul8u::@5
mul8u::@3: scope:[mul8u]  from mul8u::@1
  mul8u::res#2 = phi( mul8u::@1/mul8u::res#4 )
  mul8u::return#0 = mul8u::res#2
  to:mul8u::@return
mul8u::@4: scope:[mul8u]  from mul8u::@2 mul8u::@5
  mul8u::res#6 = phi( mul8u::@2/mul8u::res#5, mul8u::@5/mul8u::res#1 )
  mul8u::mb#2 = phi( mul8u::@2/mul8u::mb#4, mul8u::@5/mul8u::mb#3 )
  mul8u::a#4 = phi( mul8u::@2/mul8u::a#3, mul8u::@5/mul8u::a#6 )
  mul8u::$5 = mul8u::a#4 >> 1
  mul8u::a#0 = mul8u::$5
  mul8u::$6 = mul8u::mb#2 << 1
  mul8u::mb#1 = mul8u::$6
  to:mul8u::@1
mul8u::@5: scope:[mul8u]  from mul8u::@2
  mul8u::a#6 = phi( mul8u::@2/mul8u::a#3 )
  mul8u::mb#3 = phi( mul8u::@2/mul8u::mb#4 )
  mul8u::res#3 = phi( mul8u::@2/mul8u::res#5 )
  mul8u::$4 = mul8u::res#3 + mul8u::mb#3
  mul8u::res#1 = mul8u::$4
  to:mul8u::@4
mul8u::@return: scope:[mul8u]  from mul8u::@3
  mul8u::return#3 = phi( mul8u::@3/mul8u::return#0 )
  mul8u::return#1 = mul8u::return#3
  return 
  to:@return

dword mul16u(word mul16u::a , word mul16u::b)
mul16u: scope:[mul16u]  from mulu16_sel
  mul16u::a#5 = phi( mulu16_sel/mul16u::a#1 )
  mul16u::b#1 = phi( mulu16_sel/mul16u::b#0 )
  mul16u::res#0 = 0
  mul16u::mb#0 = (dword)mul16u::b#1
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@4
  mul16u::mb#5 = phi( mul16u/mul16u::mb#0, mul16u::@4/mul16u::mb#1 )
  mul16u::res#4 = phi( mul16u/mul16u::res#0, mul16u::@4/mul16u::res#6 )
  mul16u::a#2 = phi( mul16u/mul16u::a#5, mul16u::@4/mul16u::a#0 )
  mul16u::$0 = mul16u::a#2 != 0
  if(mul16u::$0) goto mul16u::@2
  to:mul16u::@3
mul16u::@2: scope:[mul16u]  from mul16u::@1
  mul16u::res#5 = phi( mul16u::@1/mul16u::res#4 )
  mul16u::mb#4 = phi( mul16u::@1/mul16u::mb#5 )
  mul16u::a#3 = phi( mul16u::@1/mul16u::a#2 )
  mul16u::$1 = mul16u::a#3 & 1
  mul16u::$2 = mul16u::$1 != 0
  mul16u::$3 = ! mul16u::$2
  if(mul16u::$3) goto mul16u::@4
  to:mul16u::@5
mul16u::@3: scope:[mul16u]  from mul16u::@1
  mul16u::res#2 = phi( mul16u::@1/mul16u::res#4 )
  mul16u::return#0 = mul16u::res#2
  to:mul16u::@return
mul16u::@4: scope:[mul16u]  from mul16u::@2 mul16u::@5
  mul16u::res#6 = phi( mul16u::@2/mul16u::res#5, mul16u::@5/mul16u::res#1 )
  mul16u::mb#2 = phi( mul16u::@2/mul16u::mb#4, mul16u::@5/mul16u::mb#3 )
  mul16u::a#4 = phi( mul16u::@2/mul16u::a#3, mul16u::@5/mul16u::a#6 )
  mul16u::$5 = mul16u::a#4 >> 1
  mul16u::a#0 = mul16u::$5
  mul16u::$6 = mul16u::mb#2 << 1
  mul16u::mb#1 = mul16u::$6
  to:mul16u::@1
mul16u::@5: scope:[mul16u]  from mul16u::@2
  mul16u::a#6 = phi( mul16u::@2/mul16u::a#3 )
  mul16u::mb#3 = phi( mul16u::@2/mul16u::mb#4 )
  mul16u::res#3 = phi( mul16u::@2/mul16u::res#5 )
  mul16u::$4 = mul16u::res#3 + mul16u::mb#3
  mul16u::res#1 = mul16u::$4
  to:mul16u::@4
mul16u::@return: scope:[mul16u]  from mul16u::@3
  mul16u::return#3 = phi( mul16u::@3/mul16u::return#0 )
  mul16u::return#1 = mul16u::return#3
  return 
  to:@return

void sin16s_gen(signed word* sin16s_gen::sintab , word sin16s_gen::wavelength)
sin16s_gen: scope:[sin16s_gen]  from main::@2
  sin16s_gen::sintab#6 = phi( main::@2/sin16s_gen::sintab#1 )
  rem16u#34 = phi( main::@2/rem16u#11 )
  sin16s_gen::wavelength#1 = phi( main::@2/sin16s_gen::wavelength#0 )
  div32u16u::dividend#0 = PI2_u4f28
  div32u16u::divisor#0 = sin16s_gen::wavelength#1
  call div32u16u 
  div32u16u::return#2 = div32u16u::return#1
  to:sin16s_gen::@3
sin16s_gen::@3: scope:[sin16s_gen]  from sin16s_gen
  sin16s_gen::sintab#5 = phi( sin16s_gen/sin16s_gen::sintab#6 )
  sin16s_gen::wavelength#3 = phi( sin16s_gen/sin16s_gen::wavelength#1 )
  rem16u#23 = phi( sin16s_gen/rem16u#6 )
  div32u16u::return#4 = phi( sin16s_gen/div32u16u::return#2 )
  sin16s_gen::$0 = div32u16u::return#4
  rem16u#7 = rem16u#23
  sin16s_gen::step#0 = sin16s_gen::$0
  sin16s_gen::x#0 = 0
  sin16s_gen::i#0 = 0
  to:sin16s_gen::@1
sin16s_gen::@1: scope:[sin16s_gen]  from sin16s_gen::@3 sin16s_gen::@4
  sin16s_gen::step#3 = phi( sin16s_gen::@3/sin16s_gen::step#0, sin16s_gen::@4/sin16s_gen::step#1 )
  sin16s_gen::sintab#4 = phi( sin16s_gen::@3/sin16s_gen::sintab#5, sin16s_gen::@4/sin16s_gen::sintab#0 )
  rem16u#35 = phi( sin16s_gen::@3/rem16u#7, sin16s_gen::@4/rem16u#41 )
  sin16s_gen::x#4 = phi( sin16s_gen::@3/sin16s_gen::x#0, sin16s_gen::@4/sin16s_gen::x#1 )
  sin16s_gen::wavelength#2 = phi( sin16s_gen::@3/sin16s_gen::wavelength#3, sin16s_gen::@4/sin16s_gen::wavelength#4 )
  sin16s_gen::i#2 = phi( sin16s_gen::@3/sin16s_gen::i#0, sin16s_gen::@4/sin16s_gen::i#1 )
  sin16s_gen::$1 = sin16s_gen::i#2 < sin16s_gen::wavelength#2
  if(sin16s_gen::$1) goto sin16s_gen::@2
  to:sin16s_gen::@return
sin16s_gen::@2: scope:[sin16s_gen]  from sin16s_gen::@1
  rem16u#44 = phi( sin16s_gen::@1/rem16u#35 )
  sin16s_gen::wavelength#5 = phi( sin16s_gen::@1/sin16s_gen::wavelength#2 )
  sin16s_gen::i#4 = phi( sin16s_gen::@1/sin16s_gen::i#2 )
  sin16s_gen::step#2 = phi( sin16s_gen::@1/sin16s_gen::step#3 )
  sin16s_gen::sintab#3 = phi( sin16s_gen::@1/sin16s_gen::sintab#4 )
  sin16s_gen::x#2 = phi( sin16s_gen::@1/sin16s_gen::x#4 )
  sin16s::x#0 = sin16s_gen::x#2
  call sin16s 
  sin16s::return#0 = sin16s::return#2
  to:sin16s_gen::@4
sin16s_gen::@4: scope:[sin16s_gen]  from sin16s_gen::@2
  rem16u#41 = phi( sin16s_gen::@2/rem16u#44 )
  sin16s_gen::wavelength#4 = phi( sin16s_gen::@2/sin16s_gen::wavelength#5 )
  sin16s_gen::i#3 = phi( sin16s_gen::@2/sin16s_gen::i#4 )
  sin16s_gen::step#1 = phi( sin16s_gen::@2/sin16s_gen::step#2 )
  sin16s_gen::x#3 = phi( sin16s_gen::@2/sin16s_gen::x#2 )
  sin16s_gen::sintab#2 = phi( sin16s_gen::@2/sin16s_gen::sintab#3 )
  sin16s::return#3 = phi( sin16s_gen::@2/sin16s::return#0 )
  sin16s_gen::$2 = sin16s::return#3
  *sin16s_gen::sintab#2 = sin16s_gen::$2
  sin16s_gen::sintab#0 = sin16s_gen::sintab#2 + SIZEOF_SIGNED_WORD
  sin16s_gen::$3 = sin16s_gen::x#3 + sin16s_gen::step#1
  sin16s_gen::x#1 = sin16s_gen::$3
  sin16s_gen::i#1 = ++ sin16s_gen::i#3
  to:sin16s_gen::@1
sin16s_gen::@return: scope:[sin16s_gen]  from sin16s_gen::@1
  rem16u#24 = phi( sin16s_gen::@1/rem16u#35 )
  rem16u#8 = rem16u#24
  return 
  to:@return

void sin8s_gen(signed byte* sin8s_gen::sintab , word sin8s_gen::wavelength)
sin8s_gen: scope:[sin8s_gen]  from main
  sin8s_gen::sintab#6 = phi( main/sin8s_gen::sintab#1 )
  rem16u#36 = phi( main/rem16u#38 )
  sin8s_gen::wavelength#1 = phi( main/sin8s_gen::wavelength#0 )
  div16u::dividend#0 = PI2_u4f12
  div16u::divisor#0 = sin8s_gen::wavelength#1
  call div16u 
  div16u::return#2 = div16u::return#1
  to:sin8s_gen::@3
sin8s_gen::@3: scope:[sin8s_gen]  from sin8s_gen
  sin8s_gen::sintab#5 = phi( sin8s_gen/sin8s_gen::sintab#6 )
  sin8s_gen::wavelength#3 = phi( sin8s_gen/sin8s_gen::wavelength#1 )
  rem16u#25 = phi( sin8s_gen/rem16u#3 )
  div16u::return#4 = phi( sin8s_gen/div16u::return#2 )
  sin8s_gen::$0 = div16u::return#4
  rem16u#9 = rem16u#25
  sin8s_gen::step#0 = sin8s_gen::$0
  sin8s_gen::x#0 = 0
  sin8s_gen::i#0 = 0
  to:sin8s_gen::@1
sin8s_gen::@1: scope:[sin8s_gen]  from sin8s_gen::@3 sin8s_gen::@4
  sin8s_gen::step#3 = phi( sin8s_gen::@3/sin8s_gen::step#0, sin8s_gen::@4/sin8s_gen::step#1 )
  sin8s_gen::sintab#4 = phi( sin8s_gen::@3/sin8s_gen::sintab#5, sin8s_gen::@4/sin8s_gen::sintab#0 )
  rem16u#37 = phi( sin8s_gen::@3/rem16u#9, sin8s_gen::@4/rem16u#42 )
  sin8s_gen::x#4 = phi( sin8s_gen::@3/sin8s_gen::x#0, sin8s_gen::@4/sin8s_gen::x#1 )
  sin8s_gen::wavelength#2 = phi( sin8s_gen::@3/sin8s_gen::wavelength#3, sin8s_gen::@4/sin8s_gen::wavelength#4 )
  sin8s_gen::i#2 = phi( sin8s_gen::@3/sin8s_gen::i#0, sin8s_gen::@4/sin8s_gen::i#1 )
  sin8s_gen::$1 = sin8s_gen::i#2 < sin8s_gen::wavelength#2
  if(sin8s_gen::$1) goto sin8s_gen::@2
  to:sin8s_gen::@return
sin8s_gen::@2: scope:[sin8s_gen]  from sin8s_gen::@1
  rem16u#45 = phi( sin8s_gen::@1/rem16u#37 )
  sin8s_gen::wavelength#5 = phi( sin8s_gen::@1/sin8s_gen::wavelength#2 )
  sin8s_gen::i#4 = phi( sin8s_gen::@1/sin8s_gen::i#2 )
  sin8s_gen::step#2 = phi( sin8s_gen::@1/sin8s_gen::step#3 )
  sin8s_gen::sintab#3 = phi( sin8s_gen::@1/sin8s_gen::sintab#4 )
  sin8s_gen::x#2 = phi( sin8s_gen::@1/sin8s_gen::x#4 )
  sin8s::x#0 = sin8s_gen::x#2
  call sin8s 
  sin8s::return#0 = sin8s::return#2
  to:sin8s_gen::@4
sin8s_gen::@4: scope:[sin8s_gen]  from sin8s_gen::@2
  rem16u#42 = phi( sin8s_gen::@2/rem16u#45 )
  sin8s_gen::wavelength#4 = phi( sin8s_gen::@2/sin8s_gen::wavelength#5 )
  sin8s_gen::i#3 = phi( sin8s_gen::@2/sin8s_gen::i#4 )
  sin8s_gen::step#1 = phi( sin8s_gen::@2/sin8s_gen::step#2 )
  sin8s_gen::x#3 = phi( sin8s_gen::@2/sin8s_gen::x#2 )
  sin8s_gen::sintab#2 = phi( sin8s_gen::@2/sin8s_gen::sintab#3 )
  sin8s::return#3 = phi( sin8s_gen::@2/sin8s::return#0 )
  sin8s_gen::$2 = sin8s::return#3
  *sin8s_gen::sintab#2 = sin8s_gen::$2
  sin8s_gen::sintab#0 = ++ sin8s_gen::sintab#2
  sin8s_gen::$3 = sin8s_gen::x#3 + sin8s_gen::step#1
  sin8s_gen::x#1 = sin8s_gen::$3
  sin8s_gen::i#1 = ++ sin8s_gen::i#3
  to:sin8s_gen::@1
sin8s_gen::@return: scope:[sin8s_gen]  from sin8s_gen::@1
  rem16u#26 = phi( sin8s_gen::@1/rem16u#37 )
  rem16u#10 = rem16u#26
  return 
  to:@return

signed word sin16s(dword sin16s::x)
sin16s: scope:[sin16s]  from sin16s_gen::@2
  sin16s::x#3 = phi( sin16s_gen::@2/sin16s::x#0 )
  sin16s::isUpper#0 = 0
  sin16s::$0 = sin16s::x#3 >= PI_u4f28
  sin16s::$1 = ! sin16s::$0
  if(sin16s::$1) goto sin16s::@1
  to:sin16s::@4
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  sin16s::isUpper#8 = phi( sin16s/sin16s::isUpper#0, sin16s::@4/sin16s::isUpper#1 )
  sin16s::x#4 = phi( sin16s/sin16s::x#3, sin16s::@4/sin16s::x#1 )
  sin16s::$2 = sin16s::x#4 >= PI_HALF_u4f28
  sin16s::$3 = ! sin16s::$2
  if(sin16s::$3) goto sin16s::@2
  to:sin16s::@5
sin16s::@4: scope:[sin16s]  from sin16s
  sin16s::x#5 = phi( sin16s/sin16s::x#3 )
  sin16s::$16 = sin16s::x#5 - PI_u4f28
  sin16s::x#1 = sin16s::$16
  sin16s::isUpper#1 = 1
  to:sin16s::@1
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  sin16s::isUpper#7 = phi( sin16s::@1/sin16s::isUpper#8, sin16s::@5/sin16s::isUpper#9 )
  sin16s::x#6 = phi( sin16s::@1/sin16s::x#4, sin16s::@5/sin16s::x#2 )
  sin16s::$4 = sin16s::x#6 << 3
  sin16s::$5 = > sin16s::$4
  sin16s::x1#0 = sin16s::$5
  mulu16_sel::v1#0 = sin16s::x1#0
  mulu16_sel::v2#0 = sin16s::x1#0
  mulu16_sel::select#0 = 0
  call mulu16_sel 
  mulu16_sel::return#0 = mulu16_sel::return#6
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  sin16s::isUpper#6 = phi( sin16s::@2/sin16s::isUpper#7 )
  sin16s::x1#1 = phi( sin16s::@2/sin16s::x1#0 )
  mulu16_sel::return#7 = phi( sin16s::@2/mulu16_sel::return#0 )
  sin16s::$6 = mulu16_sel::return#7
  sin16s::x2#0 = sin16s::$6
  mulu16_sel::v1#1 = sin16s::x2#0
  mulu16_sel::v2#1 = sin16s::x1#1
  mulu16_sel::select#1 = 1
  call mulu16_sel 
  mulu16_sel::return#1 = mulu16_sel::return#6
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  sin16s::isUpper#5 = phi( sin16s::@7/sin16s::isUpper#6 )
  sin16s::x1#4 = phi( sin16s::@7/sin16s::x1#1 )
  mulu16_sel::return#8 = phi( sin16s::@7/mulu16_sel::return#1 )
  sin16s::$7 = mulu16_sel::return#8
  sin16s::x3#0 = sin16s::$7
  mulu16_sel::v1#2 = sin16s::x3#0
  mulu16_sel::v2#2 = $10000/6
  mulu16_sel::select#2 = 1
  call mulu16_sel 
  mulu16_sel::return#2 = mulu16_sel::return#6
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  sin16s::isUpper#4 = phi( sin16s::@8/sin16s::isUpper#5 )
  sin16s::x3#1 = phi( sin16s::@8/sin16s::x3#0 )
  sin16s::x1#2 = phi( sin16s::@8/sin16s::x1#4 )
  mulu16_sel::return#9 = phi( sin16s::@8/mulu16_sel::return#2 )
  sin16s::$8 = mulu16_sel::return#9
  sin16s::x3_6#0 = sin16s::$8
  sin16s::$9 = sin16s::x1#2 - sin16s::x3_6#0
  sin16s::usinx#0 = sin16s::$9
  mulu16_sel::v1#3 = sin16s::x3#1
  mulu16_sel::v2#3 = sin16s::x1#2
  mulu16_sel::select#3 = 0
  call mulu16_sel 
  mulu16_sel::return#3 = mulu16_sel::return#6
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  sin16s::isUpper#3 = phi( sin16s::@9/sin16s::isUpper#4 )
  sin16s::usinx#4 = phi( sin16s::@9/sin16s::usinx#0 )
  sin16s::x1#3 = phi( sin16s::@9/sin16s::x1#2 )
  mulu16_sel::return#10 = phi( sin16s::@9/mulu16_sel::return#3 )
  sin16s::$10 = mulu16_sel::return#10
  sin16s::x4#0 = sin16s::$10
  mulu16_sel::v1#4 = sin16s::x4#0
  mulu16_sel::v2#4 = sin16s::x1#3
  mulu16_sel::select#4 = 0
  call mulu16_sel 
  mulu16_sel::return#4 = mulu16_sel::return#6
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  sin16s::isUpper#2 = phi( sin16s::@10/sin16s::isUpper#3 )
  sin16s::usinx#2 = phi( sin16s::@10/sin16s::usinx#4 )
  mulu16_sel::return#11 = phi( sin16s::@10/mulu16_sel::return#4 )
  sin16s::$11 = mulu16_sel::return#11
  sin16s::x5#0 = sin16s::$11
  sin16s::$12 = sin16s::x5#0 >> 4
  sin16s::x5_128#0 = sin16s::$12
  sin16s::$13 = sin16s::usinx#2 + sin16s::x5_128#0
  sin16s::usinx#1 = sin16s::$13
  sin16s::sinx#0 = (signed word)sin16s::usinx#1
  sin16s::$14 = sin16s::isUpper#2 != 0
  sin16s::$15 = ! sin16s::$14
  if(sin16s::$15) goto sin16s::@3
  to:sin16s::@6
sin16s::@5: scope:[sin16s]  from sin16s::@1
  sin16s::isUpper#9 = phi( sin16s::@1/sin16s::isUpper#8 )
  sin16s::x#7 = phi( sin16s::@1/sin16s::x#4 )
  sin16s::$17 = PI_u4f28 - sin16s::x#7
  sin16s::x#2 = sin16s::$17
  to:sin16s::@2
sin16s::@3: scope:[sin16s]  from sin16s::@11 sin16s::@6
  sin16s::sinx#2 = phi( sin16s::@11/sin16s::sinx#0, sin16s::@6/sin16s::sinx#1 )
  sin16s::return#1 = sin16s::sinx#2
  to:sin16s::@return
sin16s::@6: scope:[sin16s]  from sin16s::@11
  sin16s::usinx#3 = phi( sin16s::@11/sin16s::usinx#1 )
  sin16s::$18 = - (signed word)sin16s::usinx#3
  sin16s::sinx#1 = sin16s::$18
  to:sin16s::@3
sin16s::@return: scope:[sin16s]  from sin16s::@3
  sin16s::return#4 = phi( sin16s::@3/sin16s::return#1 )
  sin16s::return#2 = sin16s::return#4
  return 
  to:@return

signed byte sin8s(word sin8s::x)
sin8s: scope:[sin8s]  from sin8s_gen::@2
  sin8s::x#3 = phi( sin8s_gen::@2/sin8s::x#0 )
  sin8s::isUpper#0 = 0
  sin8s::$0 = sin8s::x#3 >= PI_u4f12
  sin8s::$1 = ! sin8s::$0
  if(sin8s::$1) goto sin8s::@1
  to:sin8s::@5
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  sin8s::isUpper#10 = phi( sin8s/sin8s::isUpper#0, sin8s::@5/sin8s::isUpper#1 )
  sin8s::x#4 = phi( sin8s/sin8s::x#3, sin8s::@5/sin8s::x#1 )
  sin8s::$2 = sin8s::x#4 >= PI_HALF_u4f12
  sin8s::$3 = ! sin8s::$2
  if(sin8s::$3) goto sin8s::@2
  to:sin8s::@6
sin8s::@5: scope:[sin8s]  from sin8s
  sin8s::x#5 = phi( sin8s/sin8s::x#3 )
  sin8s::$18 = sin8s::x#5 - PI_u4f12
  sin8s::x#1 = sin8s::$18
  sin8s::isUpper#1 = 1
  to:sin8s::@1
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  sin8s::isUpper#9 = phi( sin8s::@1/sin8s::isUpper#10, sin8s::@6/sin8s::isUpper#11 )
  sin8s::x#6 = phi( sin8s::@1/sin8s::x#4, sin8s::@6/sin8s::x#2 )
  sin8s::$4 = sin8s::x#6 << 3
  sin8s::$5 = > sin8s::$4
  sin8s::x1#0 = sin8s::$5
  mulu8_sel::v1#0 = sin8s::x1#0
  mulu8_sel::v2#0 = sin8s::x1#0
  mulu8_sel::select#0 = 0
  call mulu8_sel 
  mulu8_sel::return#0 = mulu8_sel::return#6
  to:sin8s::@9
sin8s::@9: scope:[sin8s]  from sin8s::@2
  sin8s::isUpper#8 = phi( sin8s::@2/sin8s::isUpper#9 )
  sin8s::x1#1 = phi( sin8s::@2/sin8s::x1#0 )
  mulu8_sel::return#7 = phi( sin8s::@2/mulu8_sel::return#0 )
  sin8s::$6 = mulu8_sel::return#7
  sin8s::x2#0 = sin8s::$6
  mulu8_sel::v1#1 = sin8s::x2#0
  mulu8_sel::v2#1 = sin8s::x1#1
  mulu8_sel::select#1 = 1
  call mulu8_sel 
  mulu8_sel::return#1 = mulu8_sel::return#6
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@9
  sin8s::isUpper#7 = phi( sin8s::@9/sin8s::isUpper#8 )
  sin8s::x1#4 = phi( sin8s::@9/sin8s::x1#1 )
  mulu8_sel::return#8 = phi( sin8s::@9/mulu8_sel::return#1 )
  sin8s::$7 = mulu8_sel::return#8
  sin8s::x3#0 = sin8s::$7
  mulu8_sel::v1#2 = sin8s::x3#0
  mulu8_sel::v2#2 = sin8s::DIV_6
  mulu8_sel::select#2 = 1
  call mulu8_sel 
  mulu8_sel::return#2 = mulu8_sel::return#6
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  sin8s::isUpper#6 = phi( sin8s::@10/sin8s::isUpper#7 )
  sin8s::x3#1 = phi( sin8s::@10/sin8s::x3#0 )
  sin8s::x1#2 = phi( sin8s::@10/sin8s::x1#4 )
  mulu8_sel::return#9 = phi( sin8s::@10/mulu8_sel::return#2 )
  sin8s::$8 = mulu8_sel::return#9
  sin8s::x3_6#0 = sin8s::$8
  sin8s::$9 = sin8s::x1#2 - sin8s::x3_6#0
  sin8s::usinx#0 = sin8s::$9
  mulu8_sel::v1#3 = sin8s::x3#1
  mulu8_sel::v2#3 = sin8s::x1#2
  mulu8_sel::select#3 = 0
  call mulu8_sel 
  mulu8_sel::return#3 = mulu8_sel::return#6
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  sin8s::isUpper#5 = phi( sin8s::@11/sin8s::isUpper#6 )
  sin8s::usinx#7 = phi( sin8s::@11/sin8s::usinx#0 )
  sin8s::x1#3 = phi( sin8s::@11/sin8s::x1#2 )
  mulu8_sel::return#10 = phi( sin8s::@11/mulu8_sel::return#3 )
  sin8s::$10 = mulu8_sel::return#10
  sin8s::x4#0 = sin8s::$10
  mulu8_sel::v1#4 = sin8s::x4#0
  mulu8_sel::v2#4 = sin8s::x1#3
  mulu8_sel::select#4 = 0
  call mulu8_sel 
  mulu8_sel::return#4 = mulu8_sel::return#6
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  sin8s::isUpper#3 = phi( sin8s::@12/sin8s::isUpper#5 )
  sin8s::usinx#3 = phi( sin8s::@12/sin8s::usinx#7 )
  mulu8_sel::return#11 = phi( sin8s::@12/mulu8_sel::return#4 )
  sin8s::$11 = mulu8_sel::return#11
  sin8s::x5#0 = sin8s::$11
  sin8s::$12 = sin8s::x5#0 >> 4
  sin8s::x5_128#0 = sin8s::$12
  sin8s::$13 = sin8s::usinx#3 + sin8s::x5_128#0
  sin8s::usinx#1 = sin8s::$13
  sin8s::$14 = sin8s::usinx#1 >= $80
  sin8s::$15 = ! sin8s::$14
  if(sin8s::$15) goto sin8s::@3
  to:sin8s::@7
sin8s::@6: scope:[sin8s]  from sin8s::@1
  sin8s::isUpper#11 = phi( sin8s::@1/sin8s::isUpper#10 )
  sin8s::x#7 = phi( sin8s::@1/sin8s::x#4 )
  sin8s::$19 = PI_u4f12 - sin8s::x#7
  sin8s::x#2 = sin8s::$19
  to:sin8s::@2
sin8s::@3: scope:[sin8s]  from sin8s::@13 sin8s::@7
  sin8s::isUpper#2 = phi( sin8s::@13/sin8s::isUpper#3, sin8s::@7/sin8s::isUpper#4 )
  sin8s::usinx#4 = phi( sin8s::@13/sin8s::usinx#1, sin8s::@7/sin8s::usinx#2 )
  sin8s::sinx#0 = (signed byte)sin8s::usinx#4
  sin8s::$16 = sin8s::isUpper#2 != 0
  sin8s::$17 = ! sin8s::$16
  if(sin8s::$17) goto sin8s::@4
  to:sin8s::@8
sin8s::@7: scope:[sin8s]  from sin8s::@13
  sin8s::isUpper#4 = phi( sin8s::@13/sin8s::isUpper#3 )
  sin8s::usinx#5 = phi( sin8s::@13/sin8s::usinx#1 )
  sin8s::usinx#2 = -- sin8s::usinx#5
  to:sin8s::@3
sin8s::@4: scope:[sin8s]  from sin8s::@3 sin8s::@8
  sin8s::sinx#2 = phi( sin8s::@3/sin8s::sinx#0, sin8s::@8/sin8s::sinx#1 )
  sin8s::return#1 = sin8s::sinx#2
  to:sin8s::@return
sin8s::@8: scope:[sin8s]  from sin8s::@3
  sin8s::usinx#6 = phi( sin8s::@3/sin8s::usinx#4 )
  sin8s::$20 = - (signed byte)sin8s::usinx#6
  sin8s::sinx#1 = sin8s::$20
  to:sin8s::@4
sin8s::@return: scope:[sin8s]  from sin8s::@4
  sin8s::return#4 = phi( sin8s::@4/sin8s::return#1 )
  sin8s::return#2 = sin8s::return#4
  return 
  to:@return

word mulu16_sel(word mulu16_sel::v1 , word mulu16_sel::v2 , byte mulu16_sel::select)
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9
  mulu16_sel::select#6 = phi( sin16s::@10/mulu16_sel::select#4, sin16s::@2/mulu16_sel::select#0, sin16s::@7/mulu16_sel::select#1, sin16s::@8/mulu16_sel::select#2, sin16s::@9/mulu16_sel::select#3 )
  mulu16_sel::v2#5 = phi( sin16s::@10/mulu16_sel::v2#4, sin16s::@2/mulu16_sel::v2#0, sin16s::@7/mulu16_sel::v2#1, sin16s::@8/mulu16_sel::v2#2, sin16s::@9/mulu16_sel::v2#3 )
  mulu16_sel::v1#5 = phi( sin16s::@10/mulu16_sel::v1#4, sin16s::@2/mulu16_sel::v1#0, sin16s::@7/mulu16_sel::v1#1, sin16s::@8/mulu16_sel::v1#2, sin16s::@9/mulu16_sel::v1#3 )
  mul16u::a#1 = mulu16_sel::v1#5
  mul16u::b#0 = mulu16_sel::v2#5
  call mul16u 
  mul16u::return#2 = mul16u::return#1
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  mulu16_sel::select#5 = phi( mulu16_sel/mulu16_sel::select#6 )
  mul16u::return#4 = phi( mulu16_sel/mul16u::return#2 )
  mulu16_sel::$0 = mul16u::return#4
  mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5
  mulu16_sel::$2 = > mulu16_sel::$1
  mulu16_sel::return#5 = mulu16_sel::$2
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  mulu16_sel::return#12 = phi( mulu16_sel::@1/mulu16_sel::return#5 )
  mulu16_sel::return#6 = mulu16_sel::return#12
  return 
  to:@return

byte mulu8_sel(byte mulu8_sel::v1 , byte mulu8_sel::v2 , byte mulu8_sel::select)
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@2 sin8s::@9
  mulu8_sel::select#6 = phi( sin8s::@10/mulu8_sel::select#2, sin8s::@11/mulu8_sel::select#3, sin8s::@12/mulu8_sel::select#4, sin8s::@2/mulu8_sel::select#0, sin8s::@9/mulu8_sel::select#1 )
  mulu8_sel::v2#5 = phi( sin8s::@10/mulu8_sel::v2#2, sin8s::@11/mulu8_sel::v2#3, sin8s::@12/mulu8_sel::v2#4, sin8s::@2/mulu8_sel::v2#0, sin8s::@9/mulu8_sel::v2#1 )
  mulu8_sel::v1#5 = phi( sin8s::@10/mulu8_sel::v1#2, sin8s::@11/mulu8_sel::v1#3, sin8s::@12/mulu8_sel::v1#4, sin8s::@2/mulu8_sel::v1#0, sin8s::@9/mulu8_sel::v1#1 )
  mul8u::a#1 = mulu8_sel::v1#5
  mul8u::b#0 = mulu8_sel::v2#5
  call mul8u 
  mul8u::return#2 = mul8u::return#1
  to:mulu8_sel::@1
mulu8_sel::@1: scope:[mulu8_sel]  from mulu8_sel
  mulu8_sel::select#5 = phi( mulu8_sel/mulu8_sel::select#6 )
  mul8u::return#4 = phi( mulu8_sel/mul8u::return#2 )
  mulu8_sel::$0 = mul8u::return#4
  mulu8_sel::$1 = mulu8_sel::$0 << mulu8_sel::select#5
  mulu8_sel::$2 = > mulu8_sel::$1
  mulu8_sel::return#5 = mulu8_sel::$2
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@1
  mulu8_sel::return#12 = phi( mulu8_sel::@1/mulu8_sel::return#5 )
  mulu8_sel::return#6 = mulu8_sel::return#12
  return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from print_cls
  memset::c#4 = phi( print_cls/memset::c#0 )
  memset::str#3 = phi( print_cls/memset::str#0 )
  memset::num#1 = phi( print_cls/memset::num#0 )
  memset::$0 = memset::num#1 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#1 = phi( memset/memset::str#3, memset::@3/memset::str#4 )
  memset::return#0 = memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#3 = phi( memset/memset::c#4 )
  memset::num#2 = phi( memset/memset::num#1 )
  memset::str#2 = phi( memset/memset::str#3 )
  memset::$4 = (byte*)memset::str#2
  memset::$2 = memset::$4 + memset::num#2
  memset::end#0 = memset::$2
  memset::dst#0 = ((byte*)) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#2 = phi( memset::@2/memset::c#3, memset::@4/memset::c#1 )
  memset::str#4 = phi( memset::@2/memset::str#2, memset::@4/memset::str#5 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#5 = phi( memset::@3/memset::str#4 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#1 = phi( memset::@3/memset::c#2 )
  *memset::dst#3 = memset::c#1
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#3 = phi( memset::@1/memset::return#0 )
  memset::return#1 = memset::return#3
  return 
  to:@return

void print_str(byte* print_str::str)
print_str: scope:[print_str]  from main::@5
  print_char_cursor#47 = phi( main::@5/print_char_cursor#14 )
  print_str::str#5 = phi( main::@5/print_str::str#1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  print_char_cursor#39 = phi( print_str/print_char_cursor#47, print_str::@3/print_char_cursor#0 )
  print_str::str#2 = phi( print_str/print_str::str#5, print_str::@3/print_str::str#0 )
  print_str::$1 = 0 != *print_str::str#2
  if(print_str::$1) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  print_char_cursor#38 = phi( print_str::@1/print_char_cursor#39 )
  print_str::str#3 = phi( print_str::@1/print_str::str#2 )
  print_char::ch#0 = *print_str::str#3
  call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  print_str::str#4 = phi( print_str::@2/print_str::str#3 )
  print_char_cursor#20 = phi( print_str::@2/print_char_cursor#10 )
  print_char_cursor#0 = print_char_cursor#20
  print_str::str#0 = ++ print_str::str#4
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  print_char_cursor#21 = phi( print_str::@1/print_char_cursor#39 )
  print_char_cursor#1 = print_char_cursor#21
  return 
  to:@return

void print_schar(signed byte print_schar::b)
print_schar: scope:[print_schar]  from main::@1
  print_char_cursor#48 = phi( main::@1/print_char_cursor#45 )
  print_schar::b#2 = phi( main::@1/print_schar::b#1 )
  print_schar::$0 = print_schar::b#2 < 0
  if(print_schar::$0) goto print_schar::@1
  to:print_schar::@3
print_schar::@1: scope:[print_schar]  from print_schar
  print_schar::b#5 = phi( print_schar/print_schar::b#2 )
  print_char_cursor#40 = phi( print_schar/print_char_cursor#48 )
  print_char::ch#1 = '-'
  call print_char 
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  print_schar::b#3 = phi( print_schar::@1/print_schar::b#5 )
  print_char_cursor#22 = phi( print_schar::@1/print_char_cursor#10 )
  print_char_cursor#2 = print_char_cursor#22
  print_schar::$4 = - print_schar::b#3
  print_schar::b#0 = print_schar::$4
  to:print_schar::@2
print_schar::@3: scope:[print_schar]  from print_schar
  print_schar::b#7 = phi( print_schar/print_schar::b#2 )
  print_char_cursor#41 = phi( print_schar/print_char_cursor#48 )
  print_char::ch#2 = ' '
  call print_char 
  to:print_schar::@5
print_schar::@5: scope:[print_schar]  from print_schar::@3
  print_schar::b#6 = phi( print_schar::@3/print_schar::b#7 )
  print_char_cursor#23 = phi( print_schar::@3/print_char_cursor#10 )
  print_char_cursor#3 = print_char_cursor#23
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@4 print_schar::@5
  print_char_cursor#42 = phi( print_schar::@4/print_char_cursor#2, print_schar::@5/print_char_cursor#3 )
  print_schar::b#4 = phi( print_schar::@4/print_schar::b#0, print_schar::@5/print_schar::b#6 )
  print_uchar::b#0 = (byte)print_schar::b#4
  call print_uchar 
  to:print_schar::@6
print_schar::@6: scope:[print_schar]  from print_schar::@2
  print_char_cursor#24 = phi( print_schar::@2/print_char_cursor#8 )
  print_char_cursor#4 = print_char_cursor#24
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@6
  print_char_cursor#25 = phi( print_schar::@6/print_char_cursor#4 )
  print_char_cursor#5 = print_char_cursor#25
  return 
  to:@return

void print_uchar(byte print_uchar::b)
print_uchar: scope:[print_uchar]  from print_schar::@2
  print_char_cursor#43 = phi( print_schar::@2/print_char_cursor#42 )
  print_uchar::b#1 = phi( print_schar::@2/print_uchar::b#0 )
  print_uchar::$0 = print_uchar::b#1 >> 4
  print_char::ch#3 = print_hextab[print_uchar::$0]
  call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  print_uchar::b#2 = phi( print_uchar/print_uchar::b#1 )
  print_char_cursor#26 = phi( print_uchar/print_char_cursor#10 )
  print_char_cursor#6 = print_char_cursor#26
  print_uchar::$2 = print_uchar::b#2 & $f
  print_char::ch#4 = print_hextab[print_uchar::$2]
  call print_char 
  to:print_uchar::@2
print_uchar::@2: scope:[print_uchar]  from print_uchar::@1
  print_char_cursor#27 = phi( print_uchar::@1/print_char_cursor#10 )
  print_char_cursor#7 = print_char_cursor#27
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@2
  print_char_cursor#28 = phi( print_uchar::@2/print_char_cursor#7 )
  print_char_cursor#8 = print_char_cursor#28
  return 
  to:@return

void print_char(byte print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_str::@2 print_uchar print_uchar::@1
  print_char_cursor#29 = phi( print_schar::@1/print_char_cursor#40, print_schar::@3/print_char_cursor#41, print_str::@2/print_char_cursor#38, print_uchar/print_char_cursor#43, print_uchar::@1/print_char_cursor#6 )
  print_char::ch#5 = phi( print_schar::@1/print_char::ch#1, print_schar::@3/print_char::ch#2, print_str::@2/print_char::ch#0, print_uchar/print_char::ch#3, print_uchar::@1/print_char::ch#4 )
  *print_char_cursor#29 = print_char::ch#5
  print_char_cursor#9 = ++ print_char_cursor#29
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  print_char_cursor#30 = phi( print_char/print_char_cursor#9 )
  print_char_cursor#10 = print_char_cursor#30
  return 
  to:@return

void print_cls()
print_cls: scope:[print_cls]  from main::@3
  print_screen#2 = phi( main::@3/print_screen#5 )
  memset::str#0 = (void*)print_screen#2
  memset::c#0 = ' '
  memset::num#0 = $3e8
  call memset 
  memset::return#2 = memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  print_screen#3 = phi( print_cls/print_screen#2 )
  print_line_cursor#0 = print_screen#3
  print_char_cursor#11 = print_line_cursor#0
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  print_char_cursor#31 = phi( print_cls::@1/print_char_cursor#11 )
  print_line_cursor#7 = phi( print_cls::@1/print_line_cursor#0 )
  print_line_cursor#1 = print_line_cursor#7
  print_char_cursor#12 = print_char_cursor#31
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  print_char_cursor#50 = phi( __start::@1/print_char_cursor#46 )
  print_line_cursor#17 = phi( __start::@1/print_line_cursor#14 )
  print_screen#9 = phi( __start::@1/print_screen#8 )
  rem16u#38 = phi( __start::@1/rem16u#40 )
  sin8s_gen::sintab#1 = main::sintabb
  sin8s_gen::wavelength#0 = main::wavelength
  call sin8s_gen 
  to:main::@2
main::@2: scope:[main]  from main
  print_char_cursor#49 = phi( main/print_char_cursor#50 )
  print_line_cursor#15 = phi( main/print_line_cursor#17 )
  print_screen#7 = phi( main/print_screen#9 )
  rem16u#27 = phi( main/rem16u#10 )
  rem16u#11 = rem16u#27
  sin16s_gen::sintab#1 = main::sintabw
  sin16s_gen::wavelength#0 = main::wavelength
  call sin16s_gen 
  to:main::@3
main::@3: scope:[main]  from main::@2
  print_char_cursor#44 = phi( main::@2/print_char_cursor#49 )
  print_line_cursor#12 = phi( main::@2/print_line_cursor#15 )
  print_screen#5 = phi( main::@2/print_screen#7 )
  rem16u#28 = phi( main::@2/rem16u#8 )
  rem16u#12 = rem16u#28
  call print_cls 
  to:main::@4
main::@4: scope:[main]  from main::@3
  rem16u#47 = phi( main::@3/rem16u#12 )
  print_char_cursor#32 = phi( main::@3/print_char_cursor#12 )
  print_line_cursor#8 = phi( main::@3/print_line_cursor#1 )
  print_line_cursor#2 = print_line_cursor#8
  print_char_cursor#13 = print_char_cursor#32
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@6
  print_line_cursor#18 = phi( main::@4/print_line_cursor#2, main::@6/print_line_cursor#13 )
  rem16u#46 = phi( main::@4/rem16u#47, main::@6/rem16u#39 )
  print_char_cursor#45 = phi( main::@4/print_char_cursor#13, main::@6/print_char_cursor#15 )
  main::i#2 = phi( main::@4/main::i#0, main::@6/main::i#1 )
  main::sb#0 = main::sintabb[main::i#2]
  main::$10 = (word)main::i#2
  main::$9 = main::$10 * SIZEOF_SIGNED_WORD
  main::$3 = main::sintabw + main::$9
  main::sw#0 = *main::$3
  main::$4 = > main::sw#0
  main::$11 = (signed byte)main::$4
  main::$5 = main::sb#0 - main::$11
  main::sd#0 = main::$5
  print_schar::b#1 = main::sd#0
  call print_schar 
  to:main::@5
main::@5: scope:[main]  from main::@1
  print_line_cursor#16 = phi( main::@1/print_line_cursor#18 )
  rem16u#43 = phi( main::@1/rem16u#46 )
  main::i#4 = phi( main::@1/main::i#2 )
  print_char_cursor#33 = phi( main::@1/print_char_cursor#5 )
  print_char_cursor#14 = print_char_cursor#33
  print_str::str#1 = main::str
  call print_str 
  to:main::@6
main::@6: scope:[main]  from main::@5
  print_line_cursor#13 = phi( main::@5/print_line_cursor#16 )
  rem16u#39 = phi( main::@5/rem16u#43 )
  main::i#3 = phi( main::@5/main::i#4 )
  print_char_cursor#34 = phi( main::@5/print_char_cursor#1 )
  print_char_cursor#15 = print_char_cursor#34
  main::i#1 = main::i#3 + rangenext(0,$bf)
  main::$8 = main::i#1 != rangelast(0,$bf)
  if(main::$8) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@6
  print_char_cursor#35 = phi( main::@6/print_char_cursor#15 )
  print_line_cursor#9 = phi( main::@6/print_line_cursor#13 )
  rem16u#29 = phi( main::@6/rem16u#39 )
  rem16u#13 = rem16u#29
  print_line_cursor#3 = print_line_cursor#9
  print_char_cursor#16 = print_char_cursor#35
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  rem16u#14 = 0
  print_screen#0 = (byte*)$400
  print_line_cursor#4 = print_screen#0
  print_char_cursor#17 = print_line_cursor#4
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  print_screen#8 = phi( __start::__init1/print_screen#0 )
  print_char_cursor#46 = phi( __start::__init1/print_char_cursor#17 )
  print_line_cursor#14 = phi( __start::__init1/print_line_cursor#4 )
  rem16u#40 = phi( __start::__init1/rem16u#14 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  print_screen#6 = phi( __start::@1/print_screen#8 )
  print_char_cursor#36 = phi( __start::@1/print_char_cursor#16 )
  print_line_cursor#10 = phi( __start::@1/print_line_cursor#3 )
  rem16u#30 = phi( __start::@1/rem16u#13 )
  rem16u#15 = rem16u#30
  print_line_cursor#5 = print_line_cursor#10
  print_char_cursor#18 = print_char_cursor#36
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  print_char_cursor#37 = phi( __start::@2/print_char_cursor#18 )
  print_line_cursor#11 = phi( __start::@2/print_line_cursor#5 )
  print_screen#4 = phi( __start::@2/print_screen#6 )
  rem16u#31 = phi( __start::@2/rem16u#15 )
  rem16u#16 = rem16u#31
  print_screen#1 = print_screen#4
  print_line_cursor#6 = print_line_cursor#11
  print_char_cursor#19 = print_char_cursor#37
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify word PI2_u4f12 = $6488
const nomodify dword PI2_u4f28 = $6487ed51
const nomodify word PI_HALF_u4f12 = $1922
const nomodify dword PI_HALF_u4f28 = $1921fb54
const nomodify word PI_u4f12 = $3244
const nomodify dword PI_u4f28 = $3243f6a9
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const byte SIZEOF_SIGNED_WORD = 2
void __start()
word div16u(word div16u::dividend , word div16u::divisor)
word~ div16u::$0
word div16u::dividend
word div16u::dividend#0
word div16u::dividend#1
word div16u::divisor
word div16u::divisor#0
word div16u::divisor#1
word div16u::return
word div16u::return#0
word div16u::return#1
word div16u::return#2
word div16u::return#3
word div16u::return#4
dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
word~ div32u16u::$0
word~ div32u16u::$1
word~ div32u16u::$2
word~ div32u16u::$3
dword div32u16u::dividend
dword div32u16u::dividend#0
dword div32u16u::dividend#1
dword div32u16u::dividend#2
word div32u16u::divisor
word div32u16u::divisor#0
word div32u16u::divisor#1
word div32u16u::divisor#2
dword div32u16u::quotient
dword div32u16u::quotient#0
word div32u16u::quotient_hi
word div32u16u::quotient_hi#0
word div32u16u::quotient_hi#1
word div32u16u::quotient_lo
word div32u16u::quotient_lo#0
dword div32u16u::return
dword div32u16u::return#0
dword div32u16u::return#1
dword div32u16u::return#2
dword div32u16u::return#3
dword div32u16u::return#4
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
word~ divr16u::$0
byte~ divr16u::$1
word~ divr16u::$10
bool~ divr16u::$11
number~ divr16u::$2
bool~ divr16u::$3
bool~ divr16u::$4
number~ divr16u::$5
word~ divr16u::$6
word~ divr16u::$7
bool~ divr16u::$8
bool~ divr16u::$9
word divr16u::dividend
word divr16u::dividend#0
word divr16u::dividend#1
word divr16u::dividend#2
word divr16u::dividend#3
word divr16u::dividend#4
word divr16u::dividend#5
word divr16u::dividend#6
word divr16u::dividend#7
word divr16u::dividend#8
word divr16u::dividend#9
word divr16u::divisor
word divr16u::divisor#0
word divr16u::divisor#1
word divr16u::divisor#2
word divr16u::divisor#3
word divr16u::divisor#4
word divr16u::divisor#5
word divr16u::divisor#6
word divr16u::divisor#7
word divr16u::divisor#8
byte divr16u::i
byte divr16u::i#0
byte divr16u::i#1
byte divr16u::i#2
byte divr16u::i#3
byte divr16u::i#4
byte divr16u::i#5
byte divr16u::i#6
word divr16u::quotient
word divr16u::quotient#0
word divr16u::quotient#1
word divr16u::quotient#2
word divr16u::quotient#3
word divr16u::quotient#4
word divr16u::quotient#5
word divr16u::quotient#6
word divr16u::quotient#7
word divr16u::quotient#8
word divr16u::rem
word divr16u::rem#0
word divr16u::rem#1
word divr16u::rem#10
word divr16u::rem#11
word divr16u::rem#12
word divr16u::rem#2
word divr16u::rem#3
word divr16u::rem#4
word divr16u::rem#5
word divr16u::rem#6
word divr16u::rem#7
word divr16u::rem#8
word divr16u::rem#9
word divr16u::return
word divr16u::return#0
word divr16u::return#1
word divr16u::return#2
word divr16u::return#3
word divr16u::return#4
word divr16u::return#5
word divr16u::return#6
word divr16u::return#7
word divr16u::return#8
void main()
word~ main::$10
signed byte~ main::$11
signed word*~ main::$3
byte~ main::$4
signed byte~ main::$5
bool~ main::$8
word~ main::$9
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i#4
signed byte main::sb
signed byte main::sb#0
signed byte main::sd
signed byte main::sd#0
const signed byte* main::sintabb[$c0]  = { fill( $c0, 0) }
const signed word* main::sintabw[$c0]  = { fill( $c0, 0) }
const byte* main::str[3]  = "  "
signed word main::sw
signed word main::sw#0
const word main::wavelength = $c0
void* memset(void* memset::str , byte memset::c , word memset::num)
bool~ memset::$0
bool~ memset::$1
byte*~ memset::$2
bool~ memset::$3
byte*~ memset::$4
byte memset::c
byte memset::c#0
byte memset::c#1
byte memset::c#2
byte memset::c#3
byte memset::c#4
byte* memset::dst
byte* memset::dst#0
byte* memset::dst#1
byte* memset::dst#2
byte* memset::dst#3
byte* memset::end
byte* memset::end#0
byte* memset::end#1
byte* memset::end#2
word memset::num
word memset::num#0
word memset::num#1
word memset::num#2
void* memset::return
void* memset::return#0
void* memset::return#1
void* memset::return#2
void* memset::return#3
void* memset::str
void* memset::str#0
void* memset::str#1
void* memset::str#2
void* memset::str#3
void* memset::str#4
void* memset::str#5
dword mul16u(word mul16u::a , word mul16u::b)
bool~ mul16u::$0
number~ mul16u::$1
bool~ mul16u::$2
bool~ mul16u::$3
dword~ mul16u::$4
word~ mul16u::$5
dword~ mul16u::$6
word mul16u::a
word mul16u::a#0
word mul16u::a#1
word mul16u::a#2
word mul16u::a#3
word mul16u::a#4
word mul16u::a#5
word mul16u::a#6
word mul16u::b
word mul16u::b#0
word mul16u::b#1
dword mul16u::mb
dword mul16u::mb#0
dword mul16u::mb#1
dword mul16u::mb#2
dword mul16u::mb#3
dword mul16u::mb#4
dword mul16u::mb#5
dword mul16u::res
dword mul16u::res#0
dword mul16u::res#1
dword mul16u::res#2
dword mul16u::res#3
dword mul16u::res#4
dword mul16u::res#5
dword mul16u::res#6
dword mul16u::return
dword mul16u::return#0
dword mul16u::return#1
dword mul16u::return#2
dword mul16u::return#3
dword mul16u::return#4
word mul8u(byte mul8u::a , byte mul8u::b)
bool~ mul8u::$0
number~ mul8u::$1
bool~ mul8u::$2
bool~ mul8u::$3
word~ mul8u::$4
byte~ mul8u::$5
word~ mul8u::$6
byte mul8u::a
byte mul8u::a#0
byte mul8u::a#1
byte mul8u::a#2
byte mul8u::a#3
byte mul8u::a#4
byte mul8u::a#5
byte mul8u::a#6
byte mul8u::b
byte mul8u::b#0
byte mul8u::b#1
word mul8u::mb
word mul8u::mb#0
word mul8u::mb#1
word mul8u::mb#2
word mul8u::mb#3
word mul8u::mb#4
word mul8u::mb#5
word mul8u::res
word mul8u::res#0
word mul8u::res#1
word mul8u::res#2
word mul8u::res#3
word mul8u::res#4
word mul8u::res#5
word mul8u::res#6
word mul8u::return
word mul8u::return#0
word mul8u::return#1
word mul8u::return#2
word mul8u::return#3
word mul8u::return#4
word mulu16_sel(word mulu16_sel::v1 , word mulu16_sel::v2 , byte mulu16_sel::select)
dword~ mulu16_sel::$0
dword~ mulu16_sel::$1
word~ mulu16_sel::$2
word mulu16_sel::return
word mulu16_sel::return#0
word mulu16_sel::return#1
word mulu16_sel::return#10
word mulu16_sel::return#11
word mulu16_sel::return#12
word mulu16_sel::return#2
word mulu16_sel::return#3
word mulu16_sel::return#4
word mulu16_sel::return#5
word mulu16_sel::return#6
word mulu16_sel::return#7
word mulu16_sel::return#8
word mulu16_sel::return#9
byte mulu16_sel::select
byte mulu16_sel::select#0
byte mulu16_sel::select#1
byte mulu16_sel::select#2
byte mulu16_sel::select#3
byte mulu16_sel::select#4
byte mulu16_sel::select#5
byte mulu16_sel::select#6
word mulu16_sel::v1
word mulu16_sel::v1#0
word mulu16_sel::v1#1
word mulu16_sel::v1#2
word mulu16_sel::v1#3
word mulu16_sel::v1#4
word mulu16_sel::v1#5
word mulu16_sel::v2
word mulu16_sel::v2#0
word mulu16_sel::v2#1
word mulu16_sel::v2#2
word mulu16_sel::v2#3
word mulu16_sel::v2#4
word mulu16_sel::v2#5
byte mulu8_sel(byte mulu8_sel::v1 , byte mulu8_sel::v2 , byte mulu8_sel::select)
word~ mulu8_sel::$0
word~ mulu8_sel::$1
byte~ mulu8_sel::$2
byte mulu8_sel::return
byte mulu8_sel::return#0
byte mulu8_sel::return#1
byte mulu8_sel::return#10
byte mulu8_sel::return#11
byte mulu8_sel::return#12
byte mulu8_sel::return#2
byte mulu8_sel::return#3
byte mulu8_sel::return#4
byte mulu8_sel::return#5
byte mulu8_sel::return#6
byte mulu8_sel::return#7
byte mulu8_sel::return#8
byte mulu8_sel::return#9
byte mulu8_sel::select
byte mulu8_sel::select#0
byte mulu8_sel::select#1
byte mulu8_sel::select#2
byte mulu8_sel::select#3
byte mulu8_sel::select#4
byte mulu8_sel::select#5
byte mulu8_sel::select#6
byte mulu8_sel::v1
byte mulu8_sel::v1#0
byte mulu8_sel::v1#1
byte mulu8_sel::v1#2
byte mulu8_sel::v1#3
byte mulu8_sel::v1#4
byte mulu8_sel::v1#5
byte mulu8_sel::v2
byte mulu8_sel::v2#0
byte mulu8_sel::v2#1
byte mulu8_sel::v2#2
byte mulu8_sel::v2#3
byte mulu8_sel::v2#4
byte mulu8_sel::v2#5
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0
byte print_char::ch#1
byte print_char::ch#2
byte print_char::ch#3
byte print_char::ch#4
byte print_char::ch#5
byte* print_char_cursor
byte* print_char_cursor#0
byte* print_char_cursor#1
byte* print_char_cursor#10
byte* print_char_cursor#11
byte* print_char_cursor#12
byte* print_char_cursor#13
byte* print_char_cursor#14
byte* print_char_cursor#15
byte* print_char_cursor#16
byte* print_char_cursor#17
byte* print_char_cursor#18
byte* print_char_cursor#19
byte* print_char_cursor#2
byte* print_char_cursor#20
byte* print_char_cursor#21
byte* print_char_cursor#22
byte* print_char_cursor#23
byte* print_char_cursor#24
byte* print_char_cursor#25
byte* print_char_cursor#26
byte* print_char_cursor#27
byte* print_char_cursor#28
byte* print_char_cursor#29
byte* print_char_cursor#3
byte* print_char_cursor#30
byte* print_char_cursor#31
byte* print_char_cursor#32
byte* print_char_cursor#33
byte* print_char_cursor#34
byte* print_char_cursor#35
byte* print_char_cursor#36
byte* print_char_cursor#37
byte* print_char_cursor#38
byte* print_char_cursor#39
byte* print_char_cursor#4
byte* print_char_cursor#40
byte* print_char_cursor#41
byte* print_char_cursor#42
byte* print_char_cursor#43
byte* print_char_cursor#44
byte* print_char_cursor#45
byte* print_char_cursor#46
byte* print_char_cursor#47
byte* print_char_cursor#48
byte* print_char_cursor#49
byte* print_char_cursor#5
byte* print_char_cursor#50
byte* print_char_cursor#6
byte* print_char_cursor#7
byte* print_char_cursor#8
byte* print_char_cursor#9
void print_cls()
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0
byte* print_line_cursor#1
byte* print_line_cursor#10
byte* print_line_cursor#11
byte* print_line_cursor#12
byte* print_line_cursor#13
byte* print_line_cursor#14
byte* print_line_cursor#15
byte* print_line_cursor#16
byte* print_line_cursor#17
byte* print_line_cursor#18
byte* print_line_cursor#2
byte* print_line_cursor#3
byte* print_line_cursor#4
byte* print_line_cursor#5
byte* print_line_cursor#6
byte* print_line_cursor#7
byte* print_line_cursor#8
byte* print_line_cursor#9
void print_schar(signed byte print_schar::b)
bool~ print_schar::$0
signed byte~ print_schar::$4
signed byte print_schar::b
signed byte print_schar::b#0
signed byte print_schar::b#1
signed byte print_schar::b#2
signed byte print_schar::b#3
signed byte print_schar::b#4
signed byte print_schar::b#5
signed byte print_schar::b#6
signed byte print_schar::b#7
byte* print_screen
byte* print_screen#0
byte* print_screen#1
byte* print_screen#2
byte* print_screen#3
byte* print_screen#4
byte* print_screen#5
byte* print_screen#6
byte* print_screen#7
byte* print_screen#8
byte* print_screen#9
void print_str(byte* print_str::str)
bool~ print_str::$1
byte* print_str::str
byte* print_str::str#0
byte* print_str::str#1
byte* print_str::str#2
byte* print_str::str#3
byte* print_str::str#4
byte* print_str::str#5
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0
number~ print_uchar::$2
byte print_uchar::b
byte print_uchar::b#0
byte print_uchar::b#1
byte print_uchar::b#2
word rem16u
word rem16u#0
word rem16u#1
word rem16u#10
word rem16u#11
word rem16u#12
word rem16u#13
word rem16u#14
word rem16u#15
word rem16u#16
word rem16u#17
word rem16u#18
word rem16u#19
word rem16u#2
word rem16u#20
word rem16u#21
word rem16u#22
word rem16u#23
word rem16u#24
word rem16u#25
word rem16u#26
word rem16u#27
word rem16u#28
word rem16u#29
word rem16u#3
word rem16u#30
word rem16u#31
word rem16u#32
word rem16u#33
word rem16u#34
word rem16u#35
word rem16u#36
word rem16u#37
word rem16u#38
word rem16u#39
word rem16u#4
word rem16u#40
word rem16u#41
word rem16u#42
word rem16u#43
word rem16u#44
word rem16u#45
word rem16u#46
word rem16u#47
word rem16u#5
word rem16u#6
word rem16u#7
word rem16u#8
word rem16u#9
signed word sin16s(dword sin16s::x)
bool~ sin16s::$0
bool~ sin16s::$1
word~ sin16s::$10
word~ sin16s::$11
word~ sin16s::$12
word~ sin16s::$13
bool~ sin16s::$14
bool~ sin16s::$15
dword~ sin16s::$16
dword~ sin16s::$17
signed word~ sin16s::$18
bool~ sin16s::$2
bool~ sin16s::$3
dword~ sin16s::$4
word~ sin16s::$5
word~ sin16s::$6
word~ sin16s::$7
word~ sin16s::$8
word~ sin16s::$9
byte sin16s::isUpper
byte sin16s::isUpper#0
byte sin16s::isUpper#1
byte sin16s::isUpper#2
byte sin16s::isUpper#3
byte sin16s::isUpper#4
byte sin16s::isUpper#5
byte sin16s::isUpper#6
byte sin16s::isUpper#7
byte sin16s::isUpper#8
byte sin16s::isUpper#9
signed word sin16s::return
signed word sin16s::return#0
signed word sin16s::return#1
signed word sin16s::return#2
signed word sin16s::return#3
signed word sin16s::return#4
signed word sin16s::sinx
signed word sin16s::sinx#0
signed word sin16s::sinx#1
signed word sin16s::sinx#2
word sin16s::usinx
word sin16s::usinx#0
word sin16s::usinx#1
word sin16s::usinx#2
word sin16s::usinx#3
word sin16s::usinx#4
dword sin16s::x
dword sin16s::x#0
dword sin16s::x#1
dword sin16s::x#2
dword sin16s::x#3
dword sin16s::x#4
dword sin16s::x#5
dword sin16s::x#6
dword sin16s::x#7
word sin16s::x1
word sin16s::x1#0
word sin16s::x1#1
word sin16s::x1#2
word sin16s::x1#3
word sin16s::x1#4
word sin16s::x2
word sin16s::x2#0
word sin16s::x3
word sin16s::x3#0
word sin16s::x3#1
word sin16s::x3_6
word sin16s::x3_6#0
word sin16s::x4
word sin16s::x4#0
word sin16s::x5
word sin16s::x5#0
word sin16s::x5_128
word sin16s::x5_128#0
void sin16s_gen(signed word* sin16s_gen::sintab , word sin16s_gen::wavelength)
dword~ sin16s_gen::$0
bool~ sin16s_gen::$1
signed word~ sin16s_gen::$2
dword~ sin16s_gen::$3
word sin16s_gen::i
word sin16s_gen::i#0
word sin16s_gen::i#1
word sin16s_gen::i#2
word sin16s_gen::i#3
word sin16s_gen::i#4
signed word* sin16s_gen::sintab
signed word* sin16s_gen::sintab#0
signed word* sin16s_gen::sintab#1
signed word* sin16s_gen::sintab#2
signed word* sin16s_gen::sintab#3
signed word* sin16s_gen::sintab#4
signed word* sin16s_gen::sintab#5
signed word* sin16s_gen::sintab#6
dword sin16s_gen::step
dword sin16s_gen::step#0
dword sin16s_gen::step#1
dword sin16s_gen::step#2
dword sin16s_gen::step#3
word sin16s_gen::wavelength
word sin16s_gen::wavelength#0
word sin16s_gen::wavelength#1
word sin16s_gen::wavelength#2
word sin16s_gen::wavelength#3
word sin16s_gen::wavelength#4
word sin16s_gen::wavelength#5
dword sin16s_gen::x
dword sin16s_gen::x#0
dword sin16s_gen::x#1
dword sin16s_gen::x#2
dword sin16s_gen::x#3
dword sin16s_gen::x#4
signed byte sin8s(word sin8s::x)
bool~ sin8s::$0
bool~ sin8s::$1
byte~ sin8s::$10
byte~ sin8s::$11
byte~ sin8s::$12
byte~ sin8s::$13
bool~ sin8s::$14
bool~ sin8s::$15
bool~ sin8s::$16
bool~ sin8s::$17
word~ sin8s::$18
word~ sin8s::$19
bool~ sin8s::$2
signed byte~ sin8s::$20
bool~ sin8s::$3
word~ sin8s::$4
byte~ sin8s::$5
byte~ sin8s::$6
byte~ sin8s::$7
byte~ sin8s::$8
byte~ sin8s::$9
const nomodify byte sin8s::DIV_6 = $2b
byte sin8s::isUpper
byte sin8s::isUpper#0
byte sin8s::isUpper#1
byte sin8s::isUpper#10
byte sin8s::isUpper#11
byte sin8s::isUpper#2
byte sin8s::isUpper#3
byte sin8s::isUpper#4
byte sin8s::isUpper#5
byte sin8s::isUpper#6
byte sin8s::isUpper#7
byte sin8s::isUpper#8
byte sin8s::isUpper#9
signed byte sin8s::return
signed byte sin8s::return#0
signed byte sin8s::return#1
signed byte sin8s::return#2
signed byte sin8s::return#3
signed byte sin8s::return#4
signed byte sin8s::sinx
signed byte sin8s::sinx#0
signed byte sin8s::sinx#1
signed byte sin8s::sinx#2
byte sin8s::usinx
byte sin8s::usinx#0
byte sin8s::usinx#1
byte sin8s::usinx#2
byte sin8s::usinx#3
byte sin8s::usinx#4
byte sin8s::usinx#5
byte sin8s::usinx#6
byte sin8s::usinx#7
word sin8s::x
word sin8s::x#0
word sin8s::x#1
word sin8s::x#2
word sin8s::x#3
word sin8s::x#4
word sin8s::x#5
word sin8s::x#6
word sin8s::x#7
byte sin8s::x1
byte sin8s::x1#0
byte sin8s::x1#1
byte sin8s::x1#2
byte sin8s::x1#3
byte sin8s::x1#4
byte sin8s::x2
byte sin8s::x2#0
byte sin8s::x3
byte sin8s::x3#0
byte sin8s::x3#1
byte sin8s::x3_6
byte sin8s::x3_6#0
byte sin8s::x4
byte sin8s::x4#0
byte sin8s::x5
byte sin8s::x5#0
byte sin8s::x5_128
byte sin8s::x5_128#0
void sin8s_gen(signed byte* sin8s_gen::sintab , word sin8s_gen::wavelength)
word~ sin8s_gen::$0
bool~ sin8s_gen::$1
signed byte~ sin8s_gen::$2
word~ sin8s_gen::$3
word sin8s_gen::i
word sin8s_gen::i#0
word sin8s_gen::i#1
word sin8s_gen::i#2
word sin8s_gen::i#3
word sin8s_gen::i#4
signed byte* sin8s_gen::sintab
signed byte* sin8s_gen::sintab#0
signed byte* sin8s_gen::sintab#1
signed byte* sin8s_gen::sintab#2
signed byte* sin8s_gen::sintab#3
signed byte* sin8s_gen::sintab#4
signed byte* sin8s_gen::sintab#5
signed byte* sin8s_gen::sintab#6
word sin8s_gen::step
word sin8s_gen::step#0
word sin8s_gen::step#1
word sin8s_gen::step#2
word sin8s_gen::step#3
word sin8s_gen::wavelength
word sin8s_gen::wavelength#0
word sin8s_gen::wavelength#1
word sin8s_gen::wavelength#2
word sin8s_gen::wavelength#3
word sin8s_gen::wavelength#4
word sin8s_gen::wavelength#5
word sin8s_gen::x
word sin8s_gen::x#0
word sin8s_gen::x#1
word sin8s_gen::x#2
word sin8s_gen::x#3
word sin8s_gen::x#4

Fixing inline constructor with div32u16u::$4 = (word)div32u16u::quotient_hi#1 dw= (word)div32u16u::quotient_lo#0
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) 1 in divr16u::$0 = divr16u::rem#6 << 1
Adding number conversion cast (unumber) $80 in divr16u::$2 = divr16u::$1 & $80
Adding number conversion cast (unumber) divr16u::$2 in divr16u::$2 = divr16u::$1 & (unumber)$80
Adding number conversion cast (unumber) 0 in divr16u::$3 = divr16u::$2 != 0
Adding number conversion cast (unumber) 1 in divr16u::$6 = divr16u::dividend#5 << 1
Adding number conversion cast (unumber) 1 in divr16u::$7 = divr16u::quotient#3 << 1
Adding number conversion cast (unumber) 1 in divr16u::$5 = divr16u::rem#8 | 1
Adding number conversion cast (unumber) divr16u::$5 in divr16u::$5 = divr16u::rem#8 | (unumber)1
Adding number conversion cast (unumber) 0 in divr16u::rem#3 = 0
Adding number conversion cast (unumber) 0 in divr16u::rem#4 = 0
Adding number conversion cast (unumber) 0 in mul8u::$0 = mul8u::a#2 != 0
Adding number conversion cast (unumber) 1 in mul8u::$1 = mul8u::a#3 & 1
Adding number conversion cast (unumber) mul8u::$1 in mul8u::$1 = mul8u::a#3 & (unumber)1
Adding number conversion cast (unumber) 0 in mul8u::$2 = mul8u::$1 != 0
Adding number conversion cast (unumber) 1 in mul8u::$5 = mul8u::a#4 >> 1
Adding number conversion cast (unumber) 1 in mul8u::$6 = mul8u::mb#2 << 1
Adding number conversion cast (unumber) 0 in mul16u::$0 = mul16u::a#2 != 0
Adding number conversion cast (unumber) 1 in mul16u::$1 = mul16u::a#3 & 1
Adding number conversion cast (unumber) mul16u::$1 in mul16u::$1 = mul16u::a#3 & (unumber)1
Adding number conversion cast (unumber) 0 in mul16u::$2 = mul16u::$1 != 0
Adding number conversion cast (unumber) 1 in mul16u::$5 = mul16u::a#4 >> 1
Adding number conversion cast (unumber) 1 in mul16u::$6 = mul16u::mb#2 << 1
Adding number conversion cast (unumber) 1 in sin16s::isUpper#1 = 1
Adding number conversion cast (unumber) 3 in sin16s::$4 = sin16s::x#6 << 3
Adding number conversion cast (unumber) 0 in mulu16_sel::select#0 = 0
Adding number conversion cast (unumber) 1 in mulu16_sel::select#1 = 1
Adding number conversion cast (unumber) $10000/6 in mulu16_sel::v2#2 = $10000/6
Adding number conversion cast (unumber) 1 in mulu16_sel::select#2 = 1
Adding number conversion cast (unumber) 0 in mulu16_sel::select#3 = 0
Adding number conversion cast (unumber) 0 in mulu16_sel::select#4 = 0
Adding number conversion cast (unumber) 4 in sin16s::$12 = sin16s::x5#0 >> 4
Adding number conversion cast (unumber) 0 in sin16s::$14 = sin16s::isUpper#2 != 0
Adding number conversion cast (unumber) 1 in sin8s::isUpper#1 = 1
Adding number conversion cast (unumber) 3 in sin8s::$4 = sin8s::x#6 << 3
Adding number conversion cast (unumber) 0 in mulu8_sel::select#0 = 0
Adding number conversion cast (unumber) 1 in mulu8_sel::select#1 = 1
Adding number conversion cast (unumber) 1 in mulu8_sel::select#2 = 1
Adding number conversion cast (unumber) 0 in mulu8_sel::select#3 = 0
Adding number conversion cast (unumber) 0 in mulu8_sel::select#4 = 0
Adding number conversion cast (unumber) 4 in sin8s::$12 = sin8s::x5#0 >> 4
Adding number conversion cast (unumber) $80 in sin8s::$14 = sin8s::usinx#1 >= $80
Adding number conversion cast (unumber) 0 in sin8s::$16 = sin8s::isUpper#2 != 0
Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#1 > 0
Adding number conversion cast (unumber) 0 in print_str::$1 = 0 != *print_str::str#2
Adding number conversion cast (snumber) 0 in print_schar::$0 = print_schar::b#2 < 0
Adding number conversion cast (unumber) 4 in print_uchar::$0 = print_uchar::b#1 >> 4
Adding number conversion cast (unumber) $f in print_uchar::$2 = print_uchar::b#2 & $f
Adding number conversion cast (unumber) print_uchar::$2 in print_uchar::$2 = print_uchar::b#2 & (unumber)$f
Adding number conversion cast (unumber) $3e8 in memset::num#0 = $3e8
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast divr16u::rem#3 = (unumber)0
Inlining cast divr16u::rem#4 = (unumber)0
Inlining cast sin16s::isUpper#1 = (unumber)1
Inlining cast mulu16_sel::select#0 = (unumber)0
Inlining cast mulu16_sel::select#1 = (unumber)1
Inlining cast mulu16_sel::v2#2 = (unumber)$10000/6
Inlining cast mulu16_sel::select#2 = (unumber)1
Inlining cast mulu16_sel::select#3 = (unumber)0
Inlining cast mulu16_sel::select#4 = (unumber)0
Inlining cast sin8s::isUpper#1 = (unumber)1
Inlining cast mulu8_sel::select#0 = (unumber)0
Inlining cast mulu8_sel::select#1 = (unumber)1
Inlining cast mulu8_sel::select#2 = (unumber)1
Inlining cast mulu8_sel::select#3 = (unumber)0
Inlining cast mulu8_sel::select#4 = (unumber)0
Inlining cast memset::dst#0 = (byte*)memset::str#2
Inlining cast memset::num#0 = (unumber)$3e8
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast div32u16u::quotient_hi#1
Simplifying constant integer cast div32u16u::quotient_lo#0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in divr16u::$2 = divr16u::$1 & $80
Inferred type updated to word in divr16u::$5 = divr16u::rem#8 | 1
Inferred type updated to byte in mul8u::$1 = mul8u::a#3 & 1
Inferred type updated to byte in mul16u::$1 = mul16u::a#3 & 1
Inferred type updated to byte in print_uchar::$2 = print_uchar::b#2 & $f
Inversing boolean not [9] divr16u::$4 = divr16u::$2 == 0 from [8] divr16u::$3 = divr16u::$2 != 0
Inversing boolean not [17] divr16u::$9 = divr16u::rem#7 < divr16u::divisor#3 from [16] divr16u::$8 = divr16u::rem#7 >= divr16u::divisor#3
Inversing boolean not [88] mul8u::$3 = mul8u::$1 == 0 from [87] mul8u::$2 = mul8u::$1 != 0
Inversing boolean not [112] mul16u::$3 = mul16u::$1 == 0 from [111] mul16u::$2 = mul16u::$1 != 0
Inversing boolean not [186] sin16s::$1 = sin16s::x#3 < PI_u4f28 from [185] sin16s::$0 = sin16s::x#3 >= PI_u4f28
Inversing boolean not [190] sin16s::$3 = sin16s::x#4 < PI_HALF_u4f28 from [189] sin16s::$2 = sin16s::x#4 >= PI_HALF_u4f28
Inversing boolean not [248] sin16s::$15 = sin16s::isUpper#2 == 0 from [247] sin16s::$14 = sin16s::isUpper#2 != 0
Inversing boolean not [264] sin8s::$1 = sin8s::x#3 < PI_u4f12 from [263] sin8s::$0 = sin8s::x#3 >= PI_u4f12
Inversing boolean not [268] sin8s::$3 = sin8s::x#4 < PI_HALF_u4f12 from [267] sin8s::$2 = sin8s::x#4 >= PI_HALF_u4f12
Inversing boolean not [325] sin8s::$15 = sin8s::usinx#1 < $80 from [324] sin8s::$14 = sin8s::usinx#1 >= $80
Inversing boolean not [333] sin8s::$17 = sin8s::isUpper#2 == 0 from [332] sin8s::$16 = sin8s::isUpper#2 != 0
Inversing boolean not [373] memset::$1 = memset::num#1 <= 0 from [372] memset::$0 = memset::num#1 > 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias divr16u::rem#0 = divr16u::$0 divr16u::rem#8 
Alias divr16u::dividend#0 = divr16u::$6 divr16u::dividend#9 
Alias divr16u::quotient#1 = divr16u::$7 divr16u::quotient#4 
Alias divr16u::dividend#4 = divr16u::dividend#8 
Alias divr16u::quotient#6 = divr16u::quotient#7 
Alias divr16u::divisor#5 = divr16u::divisor#6 
Alias divr16u::i#5 = divr16u::i#6 
Alias divr16u::rem#1 = divr16u::$5 
Alias divr16u::rem#7 = divr16u::rem#9 
Alias divr16u::divisor#3 = divr16u::divisor#4 
Alias divr16u::i#3 = divr16u::i#4 
Alias divr16u::rem#2 = divr16u::$10 
Alias divr16u::rem#10 = divr16u::rem#12 
Alias divr16u::return#0 = divr16u::quotient#5 divr16u::quotient#8 divr16u::return#5 divr16u::return#1 
Alias rem16u#0 = rem16u#17 rem16u#1 
Alias divr16u::return#2 = divr16u::return#6 
Alias rem16u#18 = rem16u#2 rem16u#19 rem16u#3 
Alias div16u::return#0 = div16u::$0 div16u::return#3 div16u::return#1 
Alias divr16u::dividend#2 = div32u16u::$0 
Alias divr16u::return#3 = divr16u::return#7 
Alias div32u16u::dividend#1 = div32u16u::dividend#2 
Alias div32u16u::divisor#1 = div32u16u::divisor#2 
Alias rem16u#20 = rem16u#4 
Alias div32u16u::quotient_hi#0 = div32u16u::$1 div32u16u::quotient_hi#1 
Alias divr16u::dividend#3 = div32u16u::$2 
Alias divr16u::return#4 = divr16u::return#8 
Alias rem16u#21 = rem16u#5 rem16u#22 rem16u#6 
Alias div32u16u::quotient_lo#0 = div32u16u::$3 
Alias div32u16u::return#0 = div32u16u::quotient#0 div32u16u::$4 div32u16u::return#3 div32u16u::return#1 
Alias mul8u::a#2 = mul8u::a#3 mul8u::a#6 
Alias mul8u::mb#3 = mul8u::mb#4 mul8u::mb#5 
Alias mul8u::res#2 = mul8u::res#5 mul8u::res#4 mul8u::return#0 mul8u::res#3 mul8u::return#3 mul8u::return#1 
Alias mul8u::a#0 = mul8u::$5 
Alias mul8u::mb#1 = mul8u::$6 
Alias mul8u::res#1 = mul8u::$4 
Alias mul16u::a#2 = mul16u::a#3 mul16u::a#6 
Alias mul16u::mb#3 = mul16u::mb#4 mul16u::mb#5 
Alias mul16u::res#2 = mul16u::res#5 mul16u::res#4 mul16u::return#0 mul16u::res#3 mul16u::return#3 mul16u::return#1 
Alias mul16u::a#0 = mul16u::$5 
Alias mul16u::mb#1 = mul16u::$6 
Alias mul16u::res#1 = mul16u::$4 
Alias div32u16u::return#2 = div32u16u::return#4 
Alias sin16s_gen::wavelength#1 = sin16s_gen::wavelength#3 
Alias sin16s_gen::sintab#5 = sin16s_gen::sintab#6 
Alias rem16u#23 = rem16u#7 
Alias sin16s_gen::step#0 = sin16s_gen::$0 
Alias sin16s_gen::x#2 = sin16s_gen::x#4 sin16s_gen::x#3 
Alias sin16s_gen::sintab#2 = sin16s_gen::sintab#3 sin16s_gen::sintab#4 
Alias sin16s_gen::step#1 = sin16s_gen::step#2 sin16s_gen::step#3 
Alias sin16s_gen::i#2 = sin16s_gen::i#4 sin16s_gen::i#3 
Alias sin16s_gen::wavelength#2 = sin16s_gen::wavelength#5 sin16s_gen::wavelength#4 
Alias rem16u#24 = rem16u#44 rem16u#35 rem16u#41 rem16u#8 
Alias sin16s::return#0 = sin16s::return#3 
Alias sin16s_gen::x#1 = sin16s_gen::$3 
Alias div16u::return#2 = div16u::return#4 
Alias sin8s_gen::wavelength#1 = sin8s_gen::wavelength#3 
Alias sin8s_gen::sintab#5 = sin8s_gen::sintab#6 
Alias rem16u#25 = rem16u#9 
Alias sin8s_gen::step#0 = sin8s_gen::$0 
Alias sin8s_gen::x#2 = sin8s_gen::x#4 sin8s_gen::x#3 
Alias sin8s_gen::sintab#2 = sin8s_gen::sintab#3 sin8s_gen::sintab#4 
Alias sin8s_gen::step#1 = sin8s_gen::step#2 sin8s_gen::step#3 
Alias sin8s_gen::i#2 = sin8s_gen::i#4 sin8s_gen::i#3 
Alias sin8s_gen::wavelength#2 = sin8s_gen::wavelength#5 sin8s_gen::wavelength#4 
Alias rem16u#10 = rem16u#45 rem16u#37 rem16u#42 rem16u#26 
Alias sin8s::return#0 = sin8s::return#3 
Alias sin8s_gen::x#1 = sin8s_gen::$3 
Alias sin16s::x#3 = sin16s::x#5 
Alias sin16s::x#1 = sin16s::$16 
Alias sin16s::x1#0 = sin16s::$5 sin16s::x1#1 sin16s::x1#4 sin16s::x1#2 sin16s::x1#3 
Alias mulu16_sel::return#0 = mulu16_sel::return#7 
Alias sin16s::isUpper#2 = sin16s::isUpper#6 sin16s::isUpper#7 sin16s::isUpper#5 sin16s::isUpper#4 sin16s::isUpper#3 
Alias sin16s::x2#0 = sin16s::$6 
Alias mulu16_sel::return#1 = mulu16_sel::return#8 
Alias sin16s::x3#0 = sin16s::$7 sin16s::x3#1 
Alias mulu16_sel::return#2 = mulu16_sel::return#9 
Alias sin16s::x3_6#0 = sin16s::$8 
Alias sin16s::usinx#0 = sin16s::$9 sin16s::usinx#4 sin16s::usinx#2 
Alias mulu16_sel::return#10 = mulu16_sel::return#3 
Alias sin16s::x4#0 = sin16s::$10 
Alias mulu16_sel::return#11 = mulu16_sel::return#4 
Alias sin16s::x5#0 = sin16s::$11 
Alias sin16s::x5_128#0 = sin16s::$12 
Alias sin16s::usinx#1 = sin16s::$13 sin16s::usinx#3 
Alias sin16s::x#4 = sin16s::x#7 
Alias sin16s::isUpper#8 = sin16s::isUpper#9 
Alias sin16s::x#2 = sin16s::$17 
Alias sin16s::return#1 = sin16s::sinx#2 sin16s::return#4 sin16s::return#2 
Alias sin16s::sinx#1 = sin16s::$18 
Alias sin8s::x#3 = sin8s::x#5 
Alias sin8s::x#1 = sin8s::$18 
Alias sin8s::x1#0 = sin8s::$5 sin8s::x1#1 sin8s::x1#4 sin8s::x1#2 sin8s::x1#3 
Alias mulu8_sel::return#0 = mulu8_sel::return#7 
Alias sin8s::isUpper#3 = sin8s::isUpper#8 sin8s::isUpper#9 sin8s::isUpper#7 sin8s::isUpper#6 sin8s::isUpper#5 sin8s::isUpper#4 
Alias sin8s::x2#0 = sin8s::$6 
Alias mulu8_sel::return#1 = mulu8_sel::return#8 
Alias sin8s::x3#0 = sin8s::$7 sin8s::x3#1 
Alias mulu8_sel::return#2 = mulu8_sel::return#9 
Alias sin8s::x3_6#0 = sin8s::$8 
Alias sin8s::usinx#0 = sin8s::$9 sin8s::usinx#7 sin8s::usinx#3 
Alias mulu8_sel::return#10 = mulu8_sel::return#3 
Alias sin8s::x4#0 = sin8s::$10 
Alias mulu8_sel::return#11 = mulu8_sel::return#4 
Alias sin8s::x5#0 = sin8s::$11 
Alias sin8s::x5_128#0 = sin8s::$12 
Alias sin8s::usinx#1 = sin8s::$13 sin8s::usinx#5 
Alias sin8s::x#4 = sin8s::x#7 
Alias sin8s::isUpper#10 = sin8s::isUpper#11 
Alias sin8s::x#2 = sin8s::$19 
Alias sin8s::return#1 = sin8s::sinx#2 sin8s::return#4 sin8s::return#2 
Alias sin8s::usinx#4 = sin8s::usinx#6 
Alias sin8s::sinx#1 = sin8s::$20 
Alias mul16u::return#2 = mul16u::return#4 
Alias mulu16_sel::select#5 = mulu16_sel::select#6 
Alias mulu16_sel::return#12 = mulu16_sel::return#5 mulu16_sel::$2 mulu16_sel::return#6 
Alias mul8u::return#2 = mul8u::return#4 
Alias mulu8_sel::select#5 = mulu8_sel::select#6 
Alias mulu8_sel::return#12 = mulu8_sel::return#5 mulu8_sel::$2 mulu8_sel::return#6 
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias print_str::str#2 = print_str::str#3 print_str::str#4 
Alias print_char_cursor#1 = print_char_cursor#38 print_char_cursor#39 print_char_cursor#21 
Alias print_char_cursor#0 = print_char_cursor#20 
Alias print_char_cursor#40 = print_char_cursor#48 print_char_cursor#41 
Alias print_schar::b#2 = print_schar::b#5 print_schar::b#3 print_schar::b#7 print_schar::b#6 
Alias print_char_cursor#2 = print_char_cursor#22 
Alias print_schar::b#0 = print_schar::$4 
Alias print_char_cursor#23 = print_char_cursor#3 
Alias print_char_cursor#24 = print_char_cursor#4 print_char_cursor#25 print_char_cursor#5 
Alias print_uchar::b#1 = print_uchar::b#2 
Alias print_char_cursor#26 = print_char_cursor#6 
Alias print_char_cursor#27 = print_char_cursor#7 print_char_cursor#28 print_char_cursor#8 
Alias print_char_cursor#10 = print_char_cursor#30 print_char_cursor#9 
Alias print_line_cursor#0 = print_screen#3 print_screen#2 print_char_cursor#11 print_line_cursor#7 print_char_cursor#31 print_line_cursor#1 print_char_cursor#12 
Alias print_screen#5 = print_screen#7 print_screen#9 
Alias print_line_cursor#12 = print_line_cursor#15 print_line_cursor#17 
Alias print_char_cursor#44 = print_char_cursor#49 print_char_cursor#50 
Alias rem16u#11 = rem16u#27 
Alias rem16u#12 = rem16u#28 rem16u#47 
Alias print_line_cursor#2 = print_line_cursor#8 
Alias print_char_cursor#13 = print_char_cursor#32 
Alias main::sd#0 = main::$5 
Alias main::i#2 = main::i#4 main::i#3 
Alias rem16u#13 = rem16u#43 rem16u#46 rem16u#39 rem16u#29 
Alias print_line_cursor#13 = print_line_cursor#16 print_line_cursor#18 print_line_cursor#9 print_line_cursor#3 
Alias print_char_cursor#14 = print_char_cursor#33 
Alias print_char_cursor#15 = print_char_cursor#34 print_char_cursor#35 print_char_cursor#16 
Alias print_screen#0 = print_line_cursor#4 print_char_cursor#17 print_line_cursor#14 print_char_cursor#46 print_screen#8 print_screen#6 print_screen#4 print_screen#1 
Alias rem16u#14 = rem16u#40 
Alias rem16u#15 = rem16u#30 rem16u#31 rem16u#16 
Alias print_line_cursor#10 = print_line_cursor#5 print_line_cursor#11 print_line_cursor#6 
Alias print_char_cursor#18 = print_char_cursor#36 print_char_cursor#37 print_char_cursor#19 
Successful SSA optimization Pass2AliasElimination
Alias divr16u::dividend#4 = divr16u::dividend#5 
Alias divr16u::quotient#3 = divr16u::quotient#6 
Alias divr16u::divisor#3 = divr16u::divisor#5 divr16u::divisor#8 
Alias divr16u::i#2 = divr16u::i#3 divr16u::i#5 
Alias divr16u::dividend#0 = divr16u::dividend#7 
Alias mul8u::a#2 = mul8u::a#4 
Alias mul8u::mb#2 = mul8u::mb#3 
Alias mul16u::a#2 = mul16u::a#4 
Alias mul16u::mb#2 = mul16u::mb#3 
Alias sin16s::isUpper#2 = sin16s::isUpper#8 
Alias sin8s::isUpper#10 = sin8s::isUpper#3 sin8s::isUpper#2 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values divr16u::divisor#3 divr16u::divisor#7
Identical Phi Values div16u::dividend#1 div16u::dividend#0
Identical Phi Values div16u::divisor#1 div16u::divisor#0
Identical Phi Values rem16u#32 rem16u#36
Identical Phi Values rem16u#18 rem16u#0
Identical Phi Values div32u16u::dividend#1 div32u16u::dividend#0
Identical Phi Values div32u16u::divisor#1 div32u16u::divisor#0
Identical Phi Values rem16u#33 rem16u#34
Identical Phi Values rem16u#20 rem16u#0
Identical Phi Values rem16u#21 rem16u#0
Identical Phi Values mul8u::b#1 mul8u::b#0
Identical Phi Values mul8u::a#5 mul8u::a#1
Identical Phi Values mul16u::b#1 mul16u::b#0
Identical Phi Values mul16u::a#5 mul16u::a#1
Identical Phi Values sin16s_gen::wavelength#1 sin16s_gen::wavelength#0
Identical Phi Values rem16u#34 rem16u#11
Identical Phi Values sin16s_gen::sintab#5 sin16s_gen::sintab#1
Identical Phi Values rem16u#23 rem16u#21
Identical Phi Values sin16s_gen::wavelength#2 sin16s_gen::wavelength#1
Identical Phi Values rem16u#24 rem16u#23
Identical Phi Values sin16s_gen::step#1 sin16s_gen::step#0
Identical Phi Values sin8s_gen::wavelength#1 sin8s_gen::wavelength#0
Identical Phi Values rem16u#36 rem16u#38
Identical Phi Values sin8s_gen::sintab#5 sin8s_gen::sintab#1
Identical Phi Values rem16u#25 rem16u#18
Identical Phi Values sin8s_gen::wavelength#2 sin8s_gen::wavelength#1
Identical Phi Values rem16u#10 rem16u#25
Identical Phi Values sin8s_gen::step#1 sin8s_gen::step#0
Identical Phi Values sin16s::x#3 sin16s::x#0
Identical Phi Values sin8s::x#3 sin8s::x#0
Identical Phi Values memset::num#1 memset::num#0
Identical Phi Values memset::str#2 memset::str#0
Identical Phi Values memset::c#3 memset::c#0
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#4 memset::str#2
Identical Phi Values memset::c#1 memset::c#3
Identical Phi Values print_str::str#5 print_str::str#1
Identical Phi Values print_char_cursor#47 print_char_cursor#14
Identical Phi Values print_char_cursor#0 print_char_cursor#10
Identical Phi Values print_schar::b#2 print_schar::b#1
Identical Phi Values print_char_cursor#40 print_char_cursor#45
Identical Phi Values print_char_cursor#2 print_char_cursor#10
Identical Phi Values print_char_cursor#23 print_char_cursor#10
Identical Phi Values print_char_cursor#24 print_char_cursor#27
Identical Phi Values print_uchar::b#1 print_uchar::b#0
Identical Phi Values print_char_cursor#43 print_char_cursor#42
Identical Phi Values print_char_cursor#26 print_char_cursor#10
Identical Phi Values print_char_cursor#27 print_char_cursor#10
Identical Phi Values print_line_cursor#0 print_screen#5
Identical Phi Values rem16u#38 rem16u#14
Identical Phi Values print_screen#5 print_screen#0
Identical Phi Values print_line_cursor#12 print_screen#0
Identical Phi Values print_char_cursor#44 print_screen#0
Identical Phi Values rem16u#11 rem16u#10
Identical Phi Values rem16u#12 rem16u#24
Identical Phi Values print_line_cursor#2 print_line_cursor#0
Identical Phi Values print_char_cursor#13 print_line_cursor#0
Identical Phi Values rem16u#13 rem16u#12
Identical Phi Values print_line_cursor#13 print_line_cursor#2
Identical Phi Values print_char_cursor#14 print_char_cursor#24
Identical Phi Values print_char_cursor#15 print_char_cursor#1
Identical Phi Values rem16u#15 rem16u#13
Identical Phi Values print_line_cursor#10 print_line_cursor#13
Identical Phi Values print_char_cursor#18 print_char_cursor#15
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values memset::return#0 memset::str#0
Identical Phi Values print_char_cursor#1 print_char_cursor#10
Identical Phi Values print_char_cursor#42 print_char_cursor#10
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition divr16u::$4 [8] if(divr16u::$2==0) goto divr16u::@2
Simple Condition divr16u::$9 [13] if(divr16u::rem#7<divr16u::divisor#7) goto divr16u::@3
Simple Condition divr16u::$11 [18] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1
Simple Condition mul8u::$0 [54] if(mul8u::a#2!=0) goto mul8u::@2
Simple Condition mul8u::$3 [57] if(mul8u::$1==0) goto mul8u::@4
Simple Condition mul16u::$0 [68] if(mul16u::a#2!=0) goto mul16u::@2
Simple Condition mul16u::$3 [71] if(mul16u::$1==0) goto mul16u::@4
Simple Condition sin16s_gen::$1 [88] if(sin16s_gen::i#2<sin16s_gen::wavelength#0) goto sin16s_gen::@2
Simple Condition sin8s_gen::$1 [109] if(sin8s_gen::i#2<sin8s_gen::wavelength#0) goto sin8s_gen::@2
Simple Condition sin16s::$1 [122] if(sin16s::x#0<PI_u4f28) goto sin16s::@1
Simple Condition sin16s::$3 [125] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2
Simple Condition sin16s::$15 [166] if(sin16s::isUpper#2==0) goto sin16s::@3
Simple Condition sin8s::$1 [174] if(sin8s::x#0<PI_u4f12) goto sin8s::@1
Simple Condition sin8s::$3 [177] if(sin8s::x#4<PI_HALF_u4f12) goto sin8s::@2
Simple Condition sin8s::$15 [217] if(sin8s::usinx#1<$80) goto sin8s::@3
Simple Condition sin8s::$17 [222] if(sin8s::isUpper#10==0) goto sin8s::@4
Simple Condition memset::$1 [247] if(memset::num#0<=0) goto memset::@1
Simple Condition memset::$3 [254] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition print_str::$1 [261] if(0!=*print_str::str#2) goto print_str::@2
Simple Condition print_schar::$0 [269] if(print_schar::b#1<0) goto print_schar::@1
Simple Condition main::$8 [332] if(main::i#1!=rangelast(0,$bf)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [144] mulu16_sel::v2#2 = (unumber)$10000/6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant divr16u::quotient#0 = 0
Constant divr16u::i#0 = 0
Constant divr16u::rem#3 = 0
Constant divr16u::rem#4 = 0
Constant mul8u::res#0 = 0
Constant mul16u::res#0 = 0
Constant div32u16u::dividend#0 = PI2_u4f28
Constant sin16s_gen::x#0 = 0
Constant sin16s_gen::i#0 = 0
Constant div16u::dividend#0 = PI2_u4f12
Constant sin8s_gen::x#0 = 0
Constant sin8s_gen::i#0 = 0
Constant sin16s::isUpper#0 = 0
Constant sin16s::isUpper#1 = 1
Constant mulu16_sel::select#0 = 0
Constant mulu16_sel::select#1 = 1
Constant mulu16_sel::v2#2 = (unumber)$10000/6
Constant mulu16_sel::select#2 = 1
Constant mulu16_sel::select#3 = 0
Constant mulu16_sel::select#4 = 0
Constant sin8s::isUpper#0 = 0
Constant sin8s::isUpper#1 = 1
Constant mulu8_sel::select#0 = 0
Constant mulu8_sel::select#1 = 1
Constant mulu8_sel::v2#2 = sin8s::DIV_6
Constant mulu8_sel::select#2 = 1
Constant mulu8_sel::select#3 = 0
Constant mulu8_sel::select#4 = 0
Constant print_char::ch#1 = '-'
Constant print_char::ch#2 = ' '
Constant memset::c#0 = ' '
Constant memset::num#0 = $3e8
Constant sin8s_gen::sintab#1 = main::sintabb
Constant sin8s_gen::wavelength#0 = main::wavelength
Constant sin16s_gen::sintab#1 = main::sintabw
Constant sin16s_gen::wavelength#0 = main::wavelength
Constant main::i#0 = 0
Constant print_str::str#1 = main::str
Constant rem16u#14 = 0
Constant print_screen#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Constant divr16u::dividend#1 = div16u::dividend#0
Constant div32u16u::divisor#0 = sin16s_gen::wavelength#0
Constant div16u::divisor#0 = sin8s_gen::wavelength#0
Constant memset::str#0 = (void*)print_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant divr16u::divisor#0 = div16u::divisor#0
Constant divr16u::divisor#1 = div32u16u::divisor#0
Constant divr16u::divisor#2 = div32u16u::divisor#0
Constant memset::$4 = (byte*)memset::str#0
Constant memset::dst#0 = (byte*)memset::str#0
Constant memset::return#2 = memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [247] if(memset::num#0<=0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [16] divr16u::i#1 = ++ divr16u::i#2 to ++
Resolved ranged comparison value [18] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1 to $10
Resolved ranged next value [330] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [332] if(main::i#1!=rangelast(0,$bf)) goto main::@1 to $c0
Eliminating unused constant memset::return#2
Eliminating unused constant rem16u#14
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $10 in [13] if(divr16u::i#1!=$10) goto divr16u::@1
Adding number conversion cast (unumber) $c0 in [231] if(main::i#1!=$c0) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $10
Simplifying constant integer cast $c0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $c0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [22] divr16u::dividend#2 = > div32u16u::dividend#0
Constant right-side identified [26] divr16u::dividend#3 = < div32u16u::dividend#0
Constant right-side identified [182] memset::end#0 = memset::$4 + memset::num#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant divr16u::dividend#2 = >div32u16u::dividend#0
Constant divr16u::dividend#3 = <div32u16u::dividend#0
Constant memset::end#0 = memset::$4+memset::num#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [113] sin16s::sinx#0 = (signed word)sin16s::usinx#1 keeping sin16s::usinx#1
Inlining Noop Cast [156] sin8s::sinx#0 = (signed byte)sin8s::usinx#4 keeping sin8s::usinx#4
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [222] main::$11 = (signed byte)main::$4 keeping main::$11
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [218] main::$9 = main::$10 * SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings divr16u::quotient#0
Inlining constant with var siblings divr16u::i#0
Inlining constant with var siblings divr16u::rem#3
Inlining constant with var siblings divr16u::rem#4
Inlining constant with var siblings divr16u::dividend#1
Inlining constant with var siblings divr16u::divisor#0
Inlining constant with var siblings divr16u::divisor#1
Inlining constant with var siblings divr16u::divisor#2
Inlining constant with var siblings divr16u::dividend#2
Inlining constant with var siblings divr16u::dividend#3
Inlining constant with var siblings mul8u::res#0
Inlining constant with var siblings mul16u::res#0
Inlining constant with var siblings sin16s_gen::x#0
Inlining constant with var siblings sin16s_gen::i#0
Inlining constant with var siblings sin16s_gen::sintab#1
Inlining constant with var siblings sin8s_gen::x#0
Inlining constant with var siblings sin8s_gen::i#0
Inlining constant with var siblings sin8s_gen::sintab#1
Inlining constant with var siblings sin16s::isUpper#0
Inlining constant with var siblings sin16s::isUpper#1
Inlining constant with var siblings sin8s::isUpper#0
Inlining constant with var siblings sin8s::isUpper#1
Inlining constant with var siblings mulu16_sel::select#0
Inlining constant with var siblings mulu16_sel::select#1
Inlining constant with var siblings mulu16_sel::v2#2
Inlining constant with var siblings mulu16_sel::select#2
Inlining constant with var siblings mulu16_sel::select#3
Inlining constant with var siblings mulu16_sel::select#4
Inlining constant with var siblings mulu8_sel::select#0
Inlining constant with var siblings mulu8_sel::select#1
Inlining constant with var siblings mulu8_sel::v2#2
Inlining constant with var siblings mulu8_sel::select#2
Inlining constant with var siblings mulu8_sel::select#3
Inlining constant with var siblings mulu8_sel::select#4
Inlining constant with var siblings memset::dst#0
Inlining constant with var siblings print_str::str#1
Inlining constant with var siblings print_char::ch#1
Inlining constant with var siblings print_char::ch#2
Inlining constant with var siblings main::i#0
Constant inlined divr16u::rem#3 = 0
Constant inlined divr16u::i#0 = 0
Constant inlined divr16u::rem#4 = 0
Constant inlined sin16s_gen::wavelength#0 = main::wavelength
Constant inlined div32u16u::dividend#0 = PI2_u4f28
Constant inlined sin16s::isUpper#0 = 0
Constant inlined sin8s::isUpper#1 = 1
Constant inlined sin8s::isUpper#0 = 0
Constant inlined sin8s_gen::x#0 = 0
Constant inlined mulu16_sel::select#4 = 0
Constant inlined divr16u::quotient#0 = 0
Constant inlined mulu16_sel::select#2 = 1
Constant inlined mulu16_sel::select#3 = 0
Constant inlined memset::$4 = (byte*)memset::str#0
Constant inlined mul16u::res#0 = 0
Constant inlined mulu16_sel::select#0 = 0
Constant inlined div16u::divisor#0 = main::wavelength
Constant inlined sin16s::isUpper#1 = 1
Constant inlined mulu16_sel::select#1 = 1
Constant inlined main::i#0 = 0
Constant inlined mulu8_sel::select#0 = 0
Constant inlined div16u::dividend#0 = PI2_u4f12
Constant inlined divr16u::divisor#1 = main::wavelength
Constant inlined mulu8_sel::select#2 = 1
Constant inlined divr16u::divisor#0 = main::wavelength
Constant inlined mulu8_sel::select#1 = 1
Constant inlined mulu8_sel::select#4 = 0
Constant inlined divr16u::divisor#2 = main::wavelength
Constant inlined mulu8_sel::select#3 = 0
Constant inlined sin16s_gen::i#0 = 0
Constant inlined divr16u::dividend#1 = PI2_u4f12
Constant inlined divr16u::dividend#2 = >PI2_u4f28
Constant inlined divr16u::dividend#3 = <PI2_u4f28
Constant inlined sin16s_gen::sintab#1 = main::sintabw
Constant inlined print_char::ch#2 = ' '
Constant inlined mulu8_sel::v2#2 = sin8s::DIV_6
Constant inlined mul8u::res#0 = 0
Constant inlined print_char::ch#1 = '-'
Constant inlined mulu16_sel::v2#2 = (word)$10000/6
Constant inlined sin8s_gen::sintab#1 = main::sintabb
Constant inlined sin16s_gen::x#0 = 0
Constant inlined sin8s_gen::wavelength#0 = main::wavelength
Constant inlined memset::dst#0 = (byte*)memset::str#0
Constant inlined div32u16u::divisor#0 = main::wavelength
Constant inlined print_str::str#1 = main::str
Constant inlined sin8s_gen::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values divr16u::divisor#7 main::wavelength
Successful SSA optimization Pass2IdenticalPhiElimination
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $c0
Finalized unsigned number type (byte) $c0
Finalized unsigned number type (byte) $c0
Finalized unsigned number type (byte) $c0
Finalized unsigned number type (dword) $10000
Finalized unsigned number type (byte) 6
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting divr16u::@7(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@8(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@9(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting mul8u::@6(between mul8u::@2 and mul8u::@4)
Added new block during phi lifting mul16u::@6(between mul16u::@2 and mul16u::@4)
Added new block during phi lifting sin16s::@12(between sin16s and sin16s::@1)
Fixing phi predecessor for sin16s::isUpper#2 to new block ( sin16s -> sin16s::@12 ) during phi lifting.
Added new block during phi lifting sin16s::@13(between sin16s::@1 and sin16s::@2)
Added new block during phi lifting sin16s::@14(between sin16s::@11 and sin16s::@3)
Added new block during phi lifting sin8s::@14(between sin8s and sin8s::@1)
Fixing phi predecessor for sin8s::isUpper#10 to new block ( sin8s -> sin8s::@14 ) during phi lifting.
Added new block during phi lifting sin8s::@15(between sin8s::@1 and sin8s::@2)
Added new block during phi lifting sin8s::@16(between sin8s::@13 and sin8s::@3)
Added new block during phi lifting sin8s::@17(between sin8s::@3 and sin8s::@4)
Added new block during phi lifting main::@7(between main::@6 and main::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of sin8s_gen
Adding NOP phi() at start of sin16s_gen
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of print_schar::@6
Adding NOP phi() at start of print_str
Adding NOP phi() at start of div16u
Adding NOP phi() at start of div32u16u
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of print_uchar::@2
Adding NOP phi() at start of mul8u::@3
Adding NOP phi() at start of mul16u::@3
CALL GRAPH
Calls in [main] to sin8s_gen:1 sin16s_gen:3 print_cls:5 print_schar:16 print_str:18 
Calls in [sin8s_gen] to div16u:25 sin8s:32 
Calls in [sin16s_gen] to div32u16u:43 sin16s:50 
Calls in [print_cls] to memset:61 
Calls in [print_schar] to print_char:66 print_uchar:70 print_char:74 
Calls in [print_str] to print_char:84 
Calls in [div16u] to divr16u:88 
Calls in [sin8s] to mulu8_sel:106 mulu8_sel:113 mulu8_sel:118 mulu8_sel:126 mulu8_sel:133 
Calls in [div32u16u] to divr16u:152 divr16u:157 
Calls in [sin16s] to mulu16_sel:176 mulu16_sel:183 mulu16_sel:188 mulu16_sel:196 mulu16_sel:203 
Calls in [print_uchar] to print_char:233 print_char:238 
Calls in [mulu8_sel] to mul8u:274 
Calls in [mulu16_sel] to mul16u:283 

Created 45 initial phi equivalence classes
Coalesced [22] main::i#5 = main::i#1
Coalesced [23] print_char_cursor#56 = print_char_cursor#10
Coalesced [39] sin8s_gen::i#5 = sin8s_gen::i#1
Coalesced [40] sin8s_gen::x#5 = sin8s_gen::x#1
Coalesced [41] sin8s_gen::sintab#7 = sin8s_gen::sintab#0
Coalesced [57] sin16s_gen::i#5 = sin16s_gen::i#1
Coalesced [58] sin16s_gen::x#5 = sin16s_gen::x#1
Coalesced [59] sin16s_gen::sintab#7 = sin16s_gen::sintab#0
Coalesced [65] print_char_cursor#52 = print_char_cursor#45
Coalesced [67] print_schar::b#9 = print_schar::b#1
Coalesced (already) [73] print_char_cursor#51 = print_char_cursor#45
Coalesced [76] print_schar::b#8 = print_schar::b#0
Coalesced [82] print_char::ch#6 = print_char::ch#0
Coalesced (already) [83] print_char_cursor#53 = print_char_cursor#10
Coalesced [86] print_str::str#6 = print_str::str#0
Coalesced [94] sin8s::x#9 = sin8s::x#1
Coalesced [98] sin8s::x#11 = sin8s::x#2
Coalesced [104] mulu8_sel::v1#9 = mulu8_sel::v1#0
Coalesced [105] mulu8_sel::v2#8 = mulu8_sel::v2#0
Coalesced [111] mulu8_sel::v1#10 = mulu8_sel::v1#1
Coalesced [112] mulu8_sel::v2#9 = mulu8_sel::v2#1
Coalesced [117] mulu8_sel::v1#6 = mulu8_sel::v1#2
Coalesced [124] mulu8_sel::v1#7 = mulu8_sel::v1#3
Coalesced [125] mulu8_sel::v2#6 = mulu8_sel::v2#3
Coalesced [131] mulu8_sel::v1#8 = mulu8_sel::v1#4
Coalesced [132] mulu8_sel::v2#7 = mulu8_sel::v2#4
Coalesced [140] sin8s::usinx#9 = sin8s::usinx#2
Coalesced [144] sin8s::return#6 = sin8s::sinx#1
Coalesced [148] sin8s::usinx#8 = sin8s::usinx#1
Coalesced [149] sin8s::x#10 = sin8s::x#4
Coalesced [150] sin8s::x#8 = sin8s::x#0
Coalesced [156] divr16u::rem#13 = divr16u::rem#5
Coalesced [164] sin16s::x#9 = sin16s::x#1
Coalesced [168] sin16s::x#11 = sin16s::x#2
Coalesced [174] mulu16_sel::v1#7 = mulu16_sel::v1#0
Coalesced [175] mulu16_sel::v2#7 = mulu16_sel::v2#0
Coalesced [181] mulu16_sel::v1#8 = mulu16_sel::v1#1
Coalesced [182] mulu16_sel::v2#8 = mulu16_sel::v2#1
Coalesced [187] mulu16_sel::v1#9 = mulu16_sel::v1#2
Coalesced [194] mulu16_sel::v1#10 = mulu16_sel::v1#3
Coalesced [195] mulu16_sel::v2#9 = mulu16_sel::v2#3
Coalesced [201] mulu16_sel::v1#6 = mulu16_sel::v1#4
Coalesced [202] mulu16_sel::v2#6 = mulu16_sel::v2#4
Coalesced [210] sin16s::return#6 = sin16s::sinx#1
Coalesced [214] sin16s::x#10 = sin16s::x#4
Coalesced [215] sin16s::x#8 = sin16s::x#0
Coalesced [224] memset::dst#4 = memset::dst#1
Coalesced [231] print_char::ch#7 = print_char::ch#3
Coalesced (already) [232] print_char_cursor#54 = print_char_cursor#10
Coalesced [236] print_char::ch#8 = print_char::ch#4
Coalesced (already) [237] print_char_cursor#55 = print_char_cursor#10
Coalesced [242] divr16u::rem#14 = divr16u::rem#11
Coalesced [243] divr16u::dividend#10 = divr16u::dividend#6
Coalesced [250] divr16u::rem#17 = divr16u::rem#1
Coalesced [257] divr16u::rem#19 = divr16u::rem#2
Coalesced [258] divr16u::return#10 = divr16u::quotient#2
Coalesced [264] divr16u::rem#15 = divr16u::rem#10
Coalesced [265] divr16u::dividend#11 = divr16u::dividend#0
Coalesced [266] divr16u::quotient#9 = divr16u::return#0
Coalesced [267] divr16u::i#7 = divr16u::i#1
Coalesced [268] divr16u::rem#18 = divr16u::rem#7
Coalesced [269] divr16u::return#9 = divr16u::quotient#1
Coalesced [270] divr16u::rem#16 = divr16u::rem#0
Coalesced [290] mul8u::a#7 = mul8u::a#1
Coalesced [291] mul8u::mb#6 = mul8u::mb#0
Coalesced [299] mul8u::res#9 = mul8u::res#1
Coalesced [303] mul8u::a#8 = mul8u::a#0
Coalesced [304] mul8u::res#7 = mul8u::res#6
Coalesced [305] mul8u::mb#7 = mul8u::mb#1
Coalesced (already) [306] mul8u::res#8 = mul8u::res#2
Coalesced [308] mul16u::a#7 = mul16u::a#1
Coalesced [309] mul16u::mb#6 = mul16u::mb#0
Coalesced [317] mul16u::res#9 = mul16u::res#1
Coalesced [321] mul16u::a#8 = mul16u::a#0
Coalesced [322] mul16u::res#7 = mul16u::res#6
Coalesced [323] mul16u::mb#7 = mul16u::mb#1
Coalesced (already) [324] mul16u::res#8 = mul16u::res#2
Coalesced down to 35 phi equivalence classes
Culled Empty Block label main::@4
Culled Empty Block label main::@7
Culled Empty Block label print_cls::@1
Culled Empty Block label print_schar::@5
Culled Empty Block label print_schar::@6
Culled Empty Block label sin8s::@16
Culled Empty Block label sin8s::@15
Culled Empty Block label sin8s::@14
Culled Empty Block label sin16s::@13
Culled Empty Block label sin16s::@12
Culled Empty Block label memset::@2
Culled Empty Block label memset::@1
Culled Empty Block label print_uchar::@2
Culled Empty Block label divr16u::@7
Culled Empty Block label divr16u::@9
Culled Empty Block label divr16u::@8
Culled Empty Block label mul8u::@3
Culled Empty Block label mul8u::@6
Culled Empty Block label mul16u::@3
Culled Empty Block label mul16u::@6
Renumbering block mul8u::@4 to mul8u::@3
Renumbering block mul8u::@5 to mul8u::@4
Renumbering block mul16u::@4 to mul16u::@3
Renumbering block mul16u::@5 to mul16u::@4
Renumbering block sin16s::@14 to sin16s::@12
Renumbering block sin8s::@17 to sin8s::@14
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block main::@5 to main::@4
Renumbering block main::@6 to main::@5
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of sin8s_gen
Adding NOP phi() at start of sin16s_gen
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_schar::@3
Adding NOP phi() at start of print_schar::@1
Adding NOP phi() at start of print_str
Adding NOP phi() at start of div16u
Adding NOP phi() at start of div32u16u
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call sin8s_gen 
  to:main::@2
main::@2: scope:[main]  from main
  [2] phi()
  [3] call sin16s_gen 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  [6] print_char_cursor#45 = phi( main::@3/print_screen#0, main::@5/print_char_cursor#10 )
  [6] main::i#2 = phi( main::@3/0, main::@5/main::i#1 )
  [7] main::sb#0 = main::sintabb[main::i#2]
  [8] main::$10 = (word)main::i#2
  [9] main::$9 = main::$10 << 1
  [10] main::$3 = main::sintabw + main::$9
  [11] main::sw#0 = *main::$3
  [12] main::$11 = > main::sw#0
  [13] main::sd#0 = main::sb#0 - (signed byte)main::$11
  [14] print_schar::b#1 = main::sd#0
  [15] call print_schar 
  to:main::@4
main::@4: scope:[main]  from main::@1
  [16] phi()
  [17] call print_str 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [18] main::i#1 = ++ main::i#2
  [19] if(main::i#1!=$c0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  [20] return 
  to:@return

void sin8s_gen(signed byte* sin8s_gen::sintab , word sin8s_gen::wavelength)
sin8s_gen: scope:[sin8s_gen]  from main
  [21] phi()
  [22] call div16u 
  [23] div16u::return#2 = div16u::return#0
  to:sin8s_gen::@3
sin8s_gen::@3: scope:[sin8s_gen]  from sin8s_gen
  [24] sin8s_gen::step#0 = div16u::return#2
  to:sin8s_gen::@1
sin8s_gen::@1: scope:[sin8s_gen]  from sin8s_gen::@3 sin8s_gen::@4
  [25] sin8s_gen::sintab#2 = phi( sin8s_gen::@3/main::sintabb, sin8s_gen::@4/sin8s_gen::sintab#0 )
  [25] sin8s_gen::x#2 = phi( sin8s_gen::@3/0, sin8s_gen::@4/sin8s_gen::x#1 )
  [25] sin8s_gen::i#2 = phi( sin8s_gen::@3/0, sin8s_gen::@4/sin8s_gen::i#1 )
  [26] if(sin8s_gen::i#2<main::wavelength) goto sin8s_gen::@2
  to:sin8s_gen::@return
sin8s_gen::@return: scope:[sin8s_gen]  from sin8s_gen::@1
  [27] return 
  to:@return
sin8s_gen::@2: scope:[sin8s_gen]  from sin8s_gen::@1
  [28] sin8s::x#0 = sin8s_gen::x#2
  [29] call sin8s 
  [30] sin8s::return#0 = sin8s::return#1
  to:sin8s_gen::@4
sin8s_gen::@4: scope:[sin8s_gen]  from sin8s_gen::@2
  [31] sin8s_gen::$2 = sin8s::return#0
  [32] *sin8s_gen::sintab#2 = sin8s_gen::$2
  [33] sin8s_gen::sintab#0 = ++ sin8s_gen::sintab#2
  [34] sin8s_gen::x#1 = sin8s_gen::x#2 + sin8s_gen::step#0
  [35] sin8s_gen::i#1 = ++ sin8s_gen::i#2
  to:sin8s_gen::@1

void sin16s_gen(signed word* sin16s_gen::sintab , word sin16s_gen::wavelength)
sin16s_gen: scope:[sin16s_gen]  from main::@2
  [36] phi()
  [37] call div32u16u 
  [38] div32u16u::return#2 = div32u16u::return#0
  to:sin16s_gen::@3
sin16s_gen::@3: scope:[sin16s_gen]  from sin16s_gen
  [39] sin16s_gen::step#0 = div32u16u::return#2
  to:sin16s_gen::@1
sin16s_gen::@1: scope:[sin16s_gen]  from sin16s_gen::@3 sin16s_gen::@4
  [40] sin16s_gen::sintab#2 = phi( sin16s_gen::@3/main::sintabw, sin16s_gen::@4/sin16s_gen::sintab#0 )
  [40] sin16s_gen::x#2 = phi( sin16s_gen::@3/0, sin16s_gen::@4/sin16s_gen::x#1 )
  [40] sin16s_gen::i#2 = phi( sin16s_gen::@3/0, sin16s_gen::@4/sin16s_gen::i#1 )
  [41] if(sin16s_gen::i#2<main::wavelength) goto sin16s_gen::@2
  to:sin16s_gen::@return
sin16s_gen::@return: scope:[sin16s_gen]  from sin16s_gen::@1
  [42] return 
  to:@return
sin16s_gen::@2: scope:[sin16s_gen]  from sin16s_gen::@1
  [43] sin16s::x#0 = sin16s_gen::x#2
  [44] call sin16s 
  [45] sin16s::return#0 = sin16s::return#1
  to:sin16s_gen::@4
sin16s_gen::@4: scope:[sin16s_gen]  from sin16s_gen::@2
  [46] sin16s_gen::$2 = sin16s::return#0
  [47] *sin16s_gen::sintab#2 = sin16s_gen::$2
  [48] sin16s_gen::sintab#0 = sin16s_gen::sintab#2 + SIZEOF_SIGNED_WORD
  [49] sin16s_gen::x#1 = sin16s_gen::x#2 + sin16s_gen::step#0
  [50] sin16s_gen::i#1 = ++ sin16s_gen::i#2
  to:sin16s_gen::@1

void print_cls()
print_cls: scope:[print_cls]  from main::@3
  [51] phi()
  [52] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [53] return 
  to:@return

void print_schar(signed byte print_schar::b)
print_schar: scope:[print_schar]  from main::@1
  [54] if(print_schar::b#1<0) goto print_schar::@1
  to:print_schar::@3
print_schar::@3: scope:[print_schar]  from print_schar
  [55] phi()
  [56] call print_char 
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@3 print_schar::@4
  [57] print_schar::b#4 = phi( print_schar::@4/print_schar::b#0, print_schar::@3/print_schar::b#1 )
  [58] print_uchar::b#0 = (byte)print_schar::b#4
  [59] call print_uchar 
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@2
  [60] return 
  to:@return
print_schar::@1: scope:[print_schar]  from print_schar
  [61] phi()
  [62] call print_char 
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  [63] print_schar::b#0 = - print_schar::b#1
  to:print_schar::@2

void print_str(byte* print_str::str)
print_str: scope:[print_str]  from main::@4
  [64] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [65] print_str::str#2 = phi( print_str/main::str, print_str::@3/print_str::str#0 )
  [66] if(0!=*print_str::str#2) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [67] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [68] print_char::ch#0 = *print_str::str#2
  [69] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [70] print_str::str#0 = ++ print_str::str#2
  to:print_str::@1

word div16u(word div16u::dividend , word div16u::divisor)
div16u: scope:[div16u]  from sin8s_gen
  [71] phi()
  [72] call divr16u 
  [73] divr16u::return#2 = divr16u::return#0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  [74] div16u::return#0 = divr16u::return#2
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  [75] return 
  to:@return

signed byte sin8s(word sin8s::x)
sin8s: scope:[sin8s]  from sin8s_gen::@2
  [76] if(sin8s::x#0<PI_u4f12) goto sin8s::@1
  to:sin8s::@5
sin8s::@5: scope:[sin8s]  from sin8s
  [77] sin8s::x#1 = sin8s::x#0 - PI_u4f12
  to:sin8s::@1
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  [78] sin8s::isUpper#10 = phi( sin8s/0, sin8s::@5/1 )
  [78] sin8s::x#4 = phi( sin8s/sin8s::x#0, sin8s::@5/sin8s::x#1 )
  [79] if(sin8s::x#4<PI_HALF_u4f12) goto sin8s::@2
  to:sin8s::@6
sin8s::@6: scope:[sin8s]  from sin8s::@1
  [80] sin8s::x#2 = PI_u4f12 - sin8s::x#4
  to:sin8s::@2
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  [81] sin8s::x#6 = phi( sin8s::@1/sin8s::x#4, sin8s::@6/sin8s::x#2 )
  [82] sin8s::$4 = sin8s::x#6 << 3
  [83] sin8s::x1#0 = > sin8s::$4
  [84] mulu8_sel::v1#0 = sin8s::x1#0
  [85] mulu8_sel::v2#0 = sin8s::x1#0
  [86] call mulu8_sel 
  [87] mulu8_sel::return#0 = mulu8_sel::return#12
  to:sin8s::@9
sin8s::@9: scope:[sin8s]  from sin8s::@2
  [88] sin8s::x2#0 = mulu8_sel::return#0
  [89] mulu8_sel::v1#1 = sin8s::x2#0
  [90] mulu8_sel::v2#1 = sin8s::x1#0
  [91] call mulu8_sel 
  [92] mulu8_sel::return#1 = mulu8_sel::return#12
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@9
  [93] sin8s::x3#0 = mulu8_sel::return#1
  [94] mulu8_sel::v1#2 = sin8s::x3#0
  [95] call mulu8_sel 
  [96] mulu8_sel::return#2 = mulu8_sel::return#12
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  [97] sin8s::x3_6#0 = mulu8_sel::return#2
  [98] sin8s::usinx#0 = sin8s::x1#0 - sin8s::x3_6#0
  [99] mulu8_sel::v1#3 = sin8s::x3#0
  [100] mulu8_sel::v2#3 = sin8s::x1#0
  [101] call mulu8_sel 
  [102] mulu8_sel::return#10 = mulu8_sel::return#12
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  [103] sin8s::x4#0 = mulu8_sel::return#10
  [104] mulu8_sel::v1#4 = sin8s::x4#0
  [105] mulu8_sel::v2#4 = sin8s::x1#0
  [106] call mulu8_sel 
  [107] mulu8_sel::return#11 = mulu8_sel::return#12
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  [108] sin8s::x5#0 = mulu8_sel::return#11
  [109] sin8s::x5_128#0 = sin8s::x5#0 >> 4
  [110] sin8s::usinx#1 = sin8s::usinx#0 + sin8s::x5_128#0
  [111] if(sin8s::usinx#1<$80) goto sin8s::@3
  to:sin8s::@7
sin8s::@7: scope:[sin8s]  from sin8s::@13
  [112] sin8s::usinx#2 = -- sin8s::usinx#1
  to:sin8s::@3
sin8s::@3: scope:[sin8s]  from sin8s::@13 sin8s::@7
  [113] sin8s::usinx#4 = phi( sin8s::@13/sin8s::usinx#1, sin8s::@7/sin8s::usinx#2 )
  [114] if(sin8s::isUpper#10==0) goto sin8s::@14
  to:sin8s::@8
sin8s::@8: scope:[sin8s]  from sin8s::@3
  [115] sin8s::sinx#1 = - (signed byte)sin8s::usinx#4
  to:sin8s::@4
sin8s::@4: scope:[sin8s]  from sin8s::@14 sin8s::@8
  [116] sin8s::return#1 = phi( sin8s::@14/sin8s::return#5, sin8s::@8/sin8s::sinx#1 )
  to:sin8s::@return
sin8s::@return: scope:[sin8s]  from sin8s::@4
  [117] return 
  to:@return
sin8s::@14: scope:[sin8s]  from sin8s::@3
  [118] sin8s::return#5 = (signed byte)sin8s::usinx#4
  to:sin8s::@4

dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
div32u16u: scope:[div32u16u]  from sin16s_gen
  [119] phi()
  [120] call divr16u 
  [121] divr16u::return#3 = divr16u::return#0
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  [122] div32u16u::quotient_hi#0 = divr16u::return#3
  [123] divr16u::rem#5 = rem16u#0
  [124] call divr16u 
  [125] divr16u::return#4 = divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  [126] div32u16u::quotient_lo#0 = divr16u::return#4
  [127] div32u16u::return#0 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  [128] return 
  to:@return

signed word sin16s(dword sin16s::x)
sin16s: scope:[sin16s]  from sin16s_gen::@2
  [129] if(sin16s::x#0<PI_u4f28) goto sin16s::@1
  to:sin16s::@4
sin16s::@4: scope:[sin16s]  from sin16s
  [130] sin16s::x#1 = sin16s::x#0 - PI_u4f28
  to:sin16s::@1
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  [131] sin16s::isUpper#2 = phi( sin16s/0, sin16s::@4/1 )
  [131] sin16s::x#4 = phi( sin16s/sin16s::x#0, sin16s::@4/sin16s::x#1 )
  [132] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2
  to:sin16s::@5
sin16s::@5: scope:[sin16s]  from sin16s::@1
  [133] sin16s::x#2 = PI_u4f28 - sin16s::x#4
  to:sin16s::@2
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  [134] sin16s::x#6 = phi( sin16s::@1/sin16s::x#4, sin16s::@5/sin16s::x#2 )
  [135] sin16s::$4 = sin16s::x#6 << 3
  [136] sin16s::x1#0 = > sin16s::$4
  [137] mulu16_sel::v1#0 = sin16s::x1#0
  [138] mulu16_sel::v2#0 = sin16s::x1#0
  [139] call mulu16_sel 
  [140] mulu16_sel::return#0 = mulu16_sel::return#12
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  [141] sin16s::x2#0 = mulu16_sel::return#0
  [142] mulu16_sel::v1#1 = sin16s::x2#0
  [143] mulu16_sel::v2#1 = sin16s::x1#0
  [144] call mulu16_sel 
  [145] mulu16_sel::return#1 = mulu16_sel::return#12
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  [146] sin16s::x3#0 = mulu16_sel::return#1
  [147] mulu16_sel::v1#2 = sin16s::x3#0
  [148] call mulu16_sel 
  [149] mulu16_sel::return#2 = mulu16_sel::return#12
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  [150] sin16s::x3_6#0 = mulu16_sel::return#2
  [151] sin16s::usinx#0 = sin16s::x1#0 - sin16s::x3_6#0
  [152] mulu16_sel::v1#3 = sin16s::x3#0
  [153] mulu16_sel::v2#3 = sin16s::x1#0
  [154] call mulu16_sel 
  [155] mulu16_sel::return#10 = mulu16_sel::return#12
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  [156] sin16s::x4#0 = mulu16_sel::return#10
  [157] mulu16_sel::v1#4 = sin16s::x4#0
  [158] mulu16_sel::v2#4 = sin16s::x1#0
  [159] call mulu16_sel 
  [160] mulu16_sel::return#11 = mulu16_sel::return#12
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  [161] sin16s::x5#0 = mulu16_sel::return#11
  [162] sin16s::x5_128#0 = sin16s::x5#0 >> 4
  [163] sin16s::usinx#1 = sin16s::usinx#0 + sin16s::x5_128#0
  [164] if(sin16s::isUpper#2==0) goto sin16s::@12
  to:sin16s::@6
sin16s::@6: scope:[sin16s]  from sin16s::@11
  [165] sin16s::sinx#1 = - (signed word)sin16s::usinx#1
  to:sin16s::@3
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  [166] sin16s::return#1 = phi( sin16s::@12/sin16s::return#5, sin16s::@6/sin16s::sinx#1 )
  to:sin16s::@return
sin16s::@return: scope:[sin16s]  from sin16s::@3
  [167] return 
  to:@return
sin16s::@12: scope:[sin16s]  from sin16s::@11
  [168] sin16s::return#5 = (signed word)sin16s::usinx#1
  to:sin16s::@3

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from print_cls
  [169] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [170] memset::dst#2 = phi( memset/(byte*)memset::str#0, memset::@2/memset::dst#1 )
  [171] if(memset::dst#2!=memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [172] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [173] *memset::dst#2 = memset::c#0
  [174] memset::dst#1 = ++ memset::dst#2
  to:memset::@1

void print_char(byte print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_str::@2 print_uchar print_uchar::@1
  [175] print_char_cursor#29 = phi( print_schar::@1/print_char_cursor#45, print_schar::@3/print_char_cursor#45, print_str::@2/print_char_cursor#10, print_uchar/print_char_cursor#10, print_uchar::@1/print_char_cursor#10 )
  [175] print_char::ch#5 = phi( print_schar::@1/'-', print_schar::@3/' ', print_str::@2/print_char::ch#0, print_uchar/print_char::ch#3, print_uchar::@1/print_char::ch#4 )
  [176] *print_char_cursor#29 = print_char::ch#5
  [177] print_char_cursor#10 = ++ print_char_cursor#29
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [178] return 
  to:@return

void print_uchar(byte print_uchar::b)
print_uchar: scope:[print_uchar]  from print_schar::@2
  [179] print_uchar::$0 = print_uchar::b#0 >> 4
  [180] print_char::ch#3 = print_hextab[print_uchar::$0]
  [181] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [182] print_uchar::$2 = print_uchar::b#0 & $f
  [183] print_char::ch#4 = print_hextab[print_uchar::$2]
  [184] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [185] return 
  to:@return

word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
divr16u: scope:[divr16u]  from div16u div32u16u div32u16u::@1
  [186] divr16u::dividend#6 = phi( div16u/PI2_u4f12, div32u16u/>PI2_u4f28, div32u16u::@1/<PI2_u4f28 )
  [186] divr16u::rem#11 = phi( div16u/0, div32u16u/0, div32u16u::@1/divr16u::rem#5 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [187] divr16u::i#2 = phi( divr16u/0, divr16u::@3/divr16u::i#1 )
  [187] divr16u::quotient#3 = phi( divr16u/0, divr16u::@3/divr16u::return#0 )
  [187] divr16u::dividend#4 = phi( divr16u/divr16u::dividend#6, divr16u::@3/divr16u::dividend#0 )
  [187] divr16u::rem#6 = phi( divr16u/divr16u::rem#11, divr16u::@3/divr16u::rem#10 )
  [188] divr16u::rem#0 = divr16u::rem#6 << 1
  [189] divr16u::$1 = > divr16u::dividend#4
  [190] divr16u::$2 = divr16u::$1 & $80
  [191] if(divr16u::$2==0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [192] divr16u::rem#1 = divr16u::rem#0 | 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [193] divr16u::rem#7 = phi( divr16u::@1/divr16u::rem#0, divr16u::@4/divr16u::rem#1 )
  [194] divr16u::dividend#0 = divr16u::dividend#4 << 1
  [195] divr16u::quotient#1 = divr16u::quotient#3 << 1
  [196] if(divr16u::rem#7<main::wavelength) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [197] divr16u::quotient#2 = ++ divr16u::quotient#1
  [198] divr16u::rem#2 = divr16u::rem#7 - main::wavelength
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [199] divr16u::return#0 = phi( divr16u::@2/divr16u::quotient#1, divr16u::@5/divr16u::quotient#2 )
  [199] divr16u::rem#10 = phi( divr16u::@2/divr16u::rem#7, divr16u::@5/divr16u::rem#2 )
  [200] divr16u::i#1 = ++ divr16u::i#2
  [201] if(divr16u::i#1!=$10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [202] rem16u#0 = divr16u::rem#10
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [203] return 
  to:@return

byte mulu8_sel(byte mulu8_sel::v1 , byte mulu8_sel::v2 , byte mulu8_sel::select)
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@2 sin8s::@9
  [204] mulu8_sel::select#5 = phi( sin8s::@10/1, sin8s::@11/0, sin8s::@12/0, sin8s::@2/0, sin8s::@9/1 )
  [204] mulu8_sel::v2#5 = phi( sin8s::@10/sin8s::DIV_6, sin8s::@11/mulu8_sel::v2#3, sin8s::@12/mulu8_sel::v2#4, sin8s::@2/mulu8_sel::v2#0, sin8s::@9/mulu8_sel::v2#1 )
  [204] mulu8_sel::v1#5 = phi( sin8s::@10/mulu8_sel::v1#2, sin8s::@11/mulu8_sel::v1#3, sin8s::@12/mulu8_sel::v1#4, sin8s::@2/mulu8_sel::v1#0, sin8s::@9/mulu8_sel::v1#1 )
  [205] mul8u::a#1 = mulu8_sel::v1#5
  [206] mul8u::b#0 = mulu8_sel::v2#5
  [207] call mul8u 
  [208] mul8u::return#2 = mul8u::res#2
  to:mulu8_sel::@1
mulu8_sel::@1: scope:[mulu8_sel]  from mulu8_sel
  [209] mulu8_sel::$0 = mul8u::return#2
  [210] mulu8_sel::$1 = mulu8_sel::$0 << mulu8_sel::select#5
  [211] mulu8_sel::return#12 = > mulu8_sel::$1
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@1
  [212] return 
  to:@return

word mulu16_sel(word mulu16_sel::v1 , word mulu16_sel::v2 , byte mulu16_sel::select)
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9
  [213] mulu16_sel::select#5 = phi( sin16s::@10/0, sin16s::@2/0, sin16s::@7/1, sin16s::@8/1, sin16s::@9/0 )
  [213] mulu16_sel::v2#5 = phi( sin16s::@10/mulu16_sel::v2#4, sin16s::@2/mulu16_sel::v2#0, sin16s::@7/mulu16_sel::v2#1, sin16s::@8/(word)$10000/6, sin16s::@9/mulu16_sel::v2#3 )
  [213] mulu16_sel::v1#5 = phi( sin16s::@10/mulu16_sel::v1#4, sin16s::@2/mulu16_sel::v1#0, sin16s::@7/mulu16_sel::v1#1, sin16s::@8/mulu16_sel::v1#2, sin16s::@9/mulu16_sel::v1#3 )
  [214] mul16u::a#1 = mulu16_sel::v1#5
  [215] mul16u::b#0 = mulu16_sel::v2#5
  [216] call mul16u 
  [217] mul16u::return#2 = mul16u::res#2
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  [218] mulu16_sel::$0 = mul16u::return#2
  [219] mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5
  [220] mulu16_sel::return#12 = > mulu16_sel::$1
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  [221] return 
  to:@return

word mul8u(byte mul8u::a , byte mul8u::b)
mul8u: scope:[mul8u]  from mulu8_sel
  [222] mul8u::mb#0 = (word)mul8u::b#0
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [223] mul8u::mb#2 = phi( mul8u/mul8u::mb#0, mul8u::@3/mul8u::mb#1 )
  [223] mul8u::res#2 = phi( mul8u/0, mul8u::@3/mul8u::res#6 )
  [223] mul8u::a#2 = phi( mul8u/mul8u::a#1, mul8u::@3/mul8u::a#0 )
  [224] if(mul8u::a#2!=0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [225] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [226] mul8u::$1 = mul8u::a#2 & 1
  [227] if(mul8u::$1==0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [228] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [229] mul8u::res#6 = phi( mul8u::@2/mul8u::res#2, mul8u::@4/mul8u::res#1 )
  [230] mul8u::a#0 = mul8u::a#2 >> 1
  [231] mul8u::mb#1 = mul8u::mb#2 << 1
  to:mul8u::@1

dword mul16u(word mul16u::a , word mul16u::b)
mul16u: scope:[mul16u]  from mulu16_sel
  [232] mul16u::mb#0 = (dword)mul16u::b#0
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [233] mul16u::mb#2 = phi( mul16u/mul16u::mb#0, mul16u::@3/mul16u::mb#1 )
  [233] mul16u::res#2 = phi( mul16u/0, mul16u::@3/mul16u::res#6 )
  [233] mul16u::a#2 = phi( mul16u/mul16u::a#1, mul16u::@3/mul16u::a#0 )
  [234] if(mul16u::a#2!=0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [235] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [236] mul16u::$1 = mul16u::a#2 & 1
  [237] if(mul16u::$1==0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [238] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [239] mul16u::res#6 = phi( mul16u::@2/mul16u::res#2, mul16u::@4/mul16u::res#1 )
  [240] mul16u::a#0 = mul16u::a#2 >> 1
  [241] mul16u::mb#1 = mul16u::mb#2 << 1
  to:mul16u::@1


VARIABLE REGISTER WEIGHTS
word div16u(word div16u::dividend , word div16u::divisor)
word div16u::dividend
word div16u::divisor
word div16u::return
word div16u::return#0 37.33333333333333
word div16u::return#2 22.0
dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
dword div32u16u::dividend
word div32u16u::divisor
dword div32u16u::quotient
word div32u16u::quotient_hi
word div32u16u::quotient_hi#0 40.4
word div32u16u::quotient_lo
word div32u16u::quotient_lo#0 202.0
dword div32u16u::return
dword div32u16u::return#0 37.33333333333333
dword div32u16u::return#2 22.0
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 20002.0
byte~ divr16u::$2 20002.0
word divr16u::dividend
word divr16u::dividend#0 2500.25
word divr16u::dividend#4 4429.142857142857
word divr16u::dividend#6 1001.0
word divr16u::divisor
byte divr16u::i
byte divr16u::i#1 15001.5
byte divr16u::i#2 1538.6153846153845
word divr16u::quotient
word divr16u::quotient#1 15001.5
word divr16u::quotient#2 10001.0
word divr16u::quotient#3 2500.25
word divr16u::rem
word divr16u::rem#0 7500.75
word divr16u::rem#1 20002.0
word divr16u::rem#10 10334.666666666666
word divr16u::rem#11 1102.0
word divr16u::rem#2 20002.0
word divr16u::rem#5 202.0
word divr16u::rem#6 21003.0
word divr16u::rem#7 10001.0
word divr16u::return
word divr16u::return#0 3788.25
word divr16u::return#2 202.0
word divr16u::return#3 202.0
word divr16u::return#4 202.0
void main()
word~ main::$10 22.0
byte~ main::$11 11.0
signed word*~ main::$3 22.0
word~ main::$9 22.0
byte main::i
byte main::i#1 16.5
byte main::i#2 2.75
signed byte main::sb
signed byte main::sb#0 3.6666666666666665
signed byte main::sd
signed byte main::sd#0 22.0
signed word main::sw
signed word main::sw#0 22.0
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte* memset::dst
byte* memset::dst#1 2002.0
byte* memset::dst#2 1334.6666666666667
byte* memset::end
word memset::num
void* memset::return
void* memset::str
dword mul16u(word mul16u::a , word mul16u::b)
byte~ mul16u::$1 2.0000002E7
word mul16u::a
word mul16u::a#0 1.0000001E7
word mul16u::a#1 36667.33333333333
word mul16u::a#2 6683334.166666666
word mul16u::b
word mul16u::b#0 10001.0
dword mul16u::mb
dword mul16u::mb#0 200002.0
dword mul16u::mb#1 2.0000002E7
dword mul16u::mb#2 4300000.571428571
dword mul16u::res
dword mul16u::res#1 2.0000002E7
dword mul16u::res#2 5001667.333333333
dword mul16u::res#6 1.0000001E7
dword mul16u::return
dword mul16u::return#2 20002.0
word mul8u(byte mul8u::a , byte mul8u::b)
byte~ mul8u::$1 2.0000002E7
byte mul8u::a
byte mul8u::a#0 1.0000001E7
byte mul8u::a#1 36667.33333333333
byte mul8u::a#2 6683334.166666666
byte mul8u::b
byte mul8u::b#0 10001.0
word mul8u::mb
word mul8u::mb#0 200002.0
word mul8u::mb#1 2.0000002E7
word mul8u::mb#2 4300000.571428571
word mul8u::res
word mul8u::res#1 2.0000002E7
word mul8u::res#2 5001667.333333333
word mul8u::res#6 1.0000001E7
word mul8u::return
word mul8u::return#2 20002.0
word mulu16_sel(word mulu16_sel::v1 , word mulu16_sel::v2 , byte mulu16_sel::select)
dword~ mulu16_sel::$0 20002.0
dword~ mulu16_sel::$1 20002.0
word mulu16_sel::return
word mulu16_sel::return#0 2002.0
word mulu16_sel::return#1 2002.0
word mulu16_sel::return#10 2002.0
word mulu16_sel::return#11 2002.0
word mulu16_sel::return#12 2143.714285714286
word mulu16_sel::return#2 2002.0
byte mulu16_sel::select
byte mulu16_sel::select#5 1666.8333333333333
word mulu16_sel::v1
word mulu16_sel::v1#0 1001.0
word mulu16_sel::v1#1 1001.0
word mulu16_sel::v1#2 2002.0
word mulu16_sel::v1#3 1001.0
word mulu16_sel::v1#4 1001.0
word mulu16_sel::v1#5 15006.0
word mulu16_sel::v2
word mulu16_sel::v2#0 2002.0
word mulu16_sel::v2#1 2002.0
word mulu16_sel::v2#3 2002.0
word mulu16_sel::v2#4 2002.0
word mulu16_sel::v2#5 7002.5
byte mulu8_sel(byte mulu8_sel::v1 , byte mulu8_sel::v2 , byte mulu8_sel::select)
word~ mulu8_sel::$0 20002.0
word~ mulu8_sel::$1 20002.0
byte mulu8_sel::return
byte mulu8_sel::return#0 2002.0
byte mulu8_sel::return#1 2002.0
byte mulu8_sel::return#10 2002.0
byte mulu8_sel::return#11 2002.0
byte mulu8_sel::return#12 2143.714285714286
byte mulu8_sel::return#2 2002.0
byte mulu8_sel::select
byte mulu8_sel::select#5 1666.8333333333333
byte mulu8_sel::v1
byte mulu8_sel::v1#0 1001.0
byte mulu8_sel::v1#1 1001.0
byte mulu8_sel::v1#2 2002.0
byte mulu8_sel::v1#3 1001.0
byte mulu8_sel::v1#4 1001.0
byte mulu8_sel::v1#5 15006.0
byte mulu8_sel::v2
byte mulu8_sel::v2#0 2002.0
byte mulu8_sel::v2#1 2002.0
byte mulu8_sel::v2#3 2002.0
byte mulu8_sel::v2#4 2002.0
byte mulu8_sel::v2#5 7002.5
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 20002.0
byte print_char::ch#3 2002.0
byte print_char::ch#4 2002.0
byte print_char::ch#5 112004.0
byte* print_char_cursor
byte* print_char_cursor#10 4000.535714285714
byte* print_char_cursor#29 106103.5
byte* print_char_cursor#45 17.75
void print_cls()
byte* print_line_cursor
void print_schar(signed byte print_schar::b)
signed byte print_schar::b
signed byte print_schar::b#0 202.0
signed byte print_schar::b#1 52.33333333333333
signed byte print_schar::b#4 202.0
byte* print_screen
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 20002.0
byte* print_str::str#2 10001.0
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 2002.0
byte~ print_uchar::$2 2002.0
byte print_uchar::b
byte print_uchar::b#0 525.75
word rem16u
word rem16u#0 220.39999999999998
signed word sin16s(dword sin16s::x)
dword~ sin16s::$4 2002.0
byte sin16s::isUpper
byte sin16s::isUpper#2 30.333333333333332
signed word sin16s::return
signed word sin16s::return#0 202.0
signed word sin16s::return#1 701.0
signed word sin16s::return#5 2002.0
signed word sin16s::sinx
signed word sin16s::sinx#1 2002.0
word sin16s::usinx
word sin16s::usinx#0 166.83333333333334
word sin16s::usinx#1 500.5
dword sin16s::x
dword sin16s::x#0 1552.0
dword sin16s::x#1 2002.0
dword sin16s::x#2 2002.0
dword sin16s::x#4 2502.5
dword sin16s::x#6 3003.0
word sin16s::x1
word sin16s::x1#0 318.5
word sin16s::x2
word sin16s::x2#0 2002.0
word sin16s::x3
word sin16s::x3#0 500.5
word sin16s::x3_6
word sin16s::x3_6#0 2002.0
word sin16s::x4
word sin16s::x4#0 2002.0
word sin16s::x5
word sin16s::x5#0 2002.0
word sin16s::x5_128
word sin16s::x5_128#0 2002.0
void sin16s_gen(signed word* sin16s_gen::sintab , word sin16s_gen::wavelength)
signed word~ sin16s_gen::$2 202.0
word sin16s_gen::i
word sin16s_gen::i#1 202.0
word sin16s_gen::i#2 33.666666666666664
signed word* sin16s_gen::sintab
signed word* sin16s_gen::sintab#0 67.33333333333333
signed word* sin16s_gen::sintab#2 43.285714285714285
dword sin16s_gen::step
dword sin16s_gen::step#0 10.181818181818182
word sin16s_gen::wavelength
dword sin16s_gen::x
dword sin16s_gen::x#1 101.0
dword sin16s_gen::x#2 37.875
signed byte sin8s(word sin8s::x)
word~ sin8s::$4 2002.0
byte sin8s::isUpper
byte sin8s::isUpper#10 27.805555555555557
signed byte sin8s::return
signed byte sin8s::return#0 202.0
signed byte sin8s::return#1 701.0
signed byte sin8s::return#5 2002.0
signed byte sin8s::sinx
signed byte sin8s::sinx#1 2002.0
byte sin8s::usinx
byte sin8s::usinx#0 166.83333333333334
byte sin8s::usinx#1 2002.0
byte sin8s::usinx#2 2002.0
byte sin8s::usinx#4 1001.0
word sin8s::x
word sin8s::x#0 1552.0
word sin8s::x#1 2002.0
word sin8s::x#2 2002.0
word sin8s::x#4 2502.5
word sin8s::x#6 3003.0
byte sin8s::x1
byte sin8s::x1#0 318.5
byte sin8s::x2
byte sin8s::x2#0 2002.0
byte sin8s::x3
byte sin8s::x3#0 500.5
byte sin8s::x3_6
byte sin8s::x3_6#0 2002.0
byte sin8s::x4
byte sin8s::x4#0 2002.0
byte sin8s::x5
byte sin8s::x5#0 2002.0
byte sin8s::x5_128
byte sin8s::x5_128#0 2002.0
void sin8s_gen(signed byte* sin8s_gen::sintab , word sin8s_gen::wavelength)
signed byte~ sin8s_gen::$2 202.0
word sin8s_gen::i
word sin8s_gen::i#1 202.0
word sin8s_gen::i#2 33.666666666666664
signed byte* sin8s_gen::sintab
signed byte* sin8s_gen::sintab#0 67.33333333333333
signed byte* sin8s_gen::sintab#2 43.285714285714285
word sin8s_gen::step
word sin8s_gen::step#0 10.181818181818182
word sin8s_gen::wavelength
word sin8s_gen::x
word sin8s_gen::x#1 101.0
word sin8s_gen::x#2 37.875

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ sin8s_gen::i#2 sin8s_gen::i#1 ]
[ sin8s_gen::x#2 sin8s_gen::x#1 ]
[ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
[ sin16s_gen::i#2 sin16s_gen::i#1 ]
[ sin16s_gen::x#2 sin16s_gen::x#1 ]
[ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ]
[ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
[ print_str::str#2 print_str::str#0 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
[ sin16s::isUpper#2 ]
[ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
[ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
[ memset::dst#2 memset::dst#1 ]
[ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
[ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ]
[ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
[ mulu8_sel::select#5 ]
[ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ]
[ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ]
[ mulu16_sel::select#5 ]
[ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
[ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Added variable main::sb#0 to live range equivalence class [ main::sb#0 ]
Added variable main::$10 to live range equivalence class [ main::$10 ]
Added variable main::$9 to live range equivalence class [ main::$9 ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Added variable main::sw#0 to live range equivalence class [ main::sw#0 ]
Added variable main::$11 to live range equivalence class [ main::$11 ]
Added variable main::sd#0 to live range equivalence class [ main::sd#0 ]
Added variable div16u::return#2 to live range equivalence class [ div16u::return#2 ]
Added variable sin8s_gen::step#0 to live range equivalence class [ sin8s_gen::step#0 ]
Added variable sin8s::return#0 to live range equivalence class [ sin8s::return#0 ]
Added variable sin8s_gen::$2 to live range equivalence class [ sin8s_gen::$2 ]
Added variable div32u16u::return#2 to live range equivalence class [ div32u16u::return#2 ]
Added variable sin16s_gen::step#0 to live range equivalence class [ sin16s_gen::step#0 ]
Added variable sin16s::return#0 to live range equivalence class [ sin16s::return#0 ]
Added variable sin16s_gen::$2 to live range equivalence class [ sin16s_gen::$2 ]
Added variable print_uchar::b#0 to live range equivalence class [ print_uchar::b#0 ]
Added variable divr16u::return#2 to live range equivalence class [ divr16u::return#2 ]
Added variable div16u::return#0 to live range equivalence class [ div16u::return#0 ]
Added variable sin8s::$4 to live range equivalence class [ sin8s::$4 ]
Added variable sin8s::x1#0 to live range equivalence class [ sin8s::x1#0 ]
Added variable mulu8_sel::return#0 to live range equivalence class [ mulu8_sel::return#0 ]
Added variable sin8s::x2#0 to live range equivalence class [ sin8s::x2#0 ]
Added variable mulu8_sel::return#1 to live range equivalence class [ mulu8_sel::return#1 ]
Added variable sin8s::x3#0 to live range equivalence class [ sin8s::x3#0 ]
Added variable mulu8_sel::return#2 to live range equivalence class [ mulu8_sel::return#2 ]
Added variable sin8s::x3_6#0 to live range equivalence class [ sin8s::x3_6#0 ]
Added variable sin8s::usinx#0 to live range equivalence class [ sin8s::usinx#0 ]
Added variable mulu8_sel::return#10 to live range equivalence class [ mulu8_sel::return#10 ]
Added variable sin8s::x4#0 to live range equivalence class [ sin8s::x4#0 ]
Added variable mulu8_sel::return#11 to live range equivalence class [ mulu8_sel::return#11 ]
Added variable sin8s::x5#0 to live range equivalence class [ sin8s::x5#0 ]
Added variable sin8s::x5_128#0 to live range equivalence class [ sin8s::x5_128#0 ]
Added variable divr16u::return#3 to live range equivalence class [ divr16u::return#3 ]
Added variable div32u16u::quotient_hi#0 to live range equivalence class [ div32u16u::quotient_hi#0 ]
Added variable divr16u::return#4 to live range equivalence class [ divr16u::return#4 ]
Added variable div32u16u::quotient_lo#0 to live range equivalence class [ div32u16u::quotient_lo#0 ]
Added variable div32u16u::return#0 to live range equivalence class [ div32u16u::return#0 ]
Added variable sin16s::$4 to live range equivalence class [ sin16s::$4 ]
Added variable sin16s::x1#0 to live range equivalence class [ sin16s::x1#0 ]
Added variable mulu16_sel::return#0 to live range equivalence class [ mulu16_sel::return#0 ]
Added variable sin16s::x2#0 to live range equivalence class [ sin16s::x2#0 ]
Added variable mulu16_sel::return#1 to live range equivalence class [ mulu16_sel::return#1 ]
Added variable sin16s::x3#0 to live range equivalence class [ sin16s::x3#0 ]
Added variable mulu16_sel::return#2 to live range equivalence class [ mulu16_sel::return#2 ]
Added variable sin16s::x3_6#0 to live range equivalence class [ sin16s::x3_6#0 ]
Added variable sin16s::usinx#0 to live range equivalence class [ sin16s::usinx#0 ]
Added variable mulu16_sel::return#10 to live range equivalence class [ mulu16_sel::return#10 ]
Added variable sin16s::x4#0 to live range equivalence class [ sin16s::x4#0 ]
Added variable mulu16_sel::return#11 to live range equivalence class [ mulu16_sel::return#11 ]
Added variable sin16s::x5#0 to live range equivalence class [ sin16s::x5#0 ]
Added variable sin16s::x5_128#0 to live range equivalence class [ sin16s::x5_128#0 ]
Added variable sin16s::usinx#1 to live range equivalence class [ sin16s::usinx#1 ]
Added variable print_uchar::$0 to live range equivalence class [ print_uchar::$0 ]
Added variable print_uchar::$2 to live range equivalence class [ print_uchar::$2 ]
Added variable divr16u::$1 to live range equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to live range equivalence class [ divr16u::$2 ]
Added variable rem16u#0 to live range equivalence class [ rem16u#0 ]
Added variable mul8u::b#0 to live range equivalence class [ mul8u::b#0 ]
Added variable mul8u::return#2 to live range equivalence class [ mul8u::return#2 ]
Added variable mulu8_sel::$0 to live range equivalence class [ mulu8_sel::$0 ]
Added variable mulu8_sel::$1 to live range equivalence class [ mulu8_sel::$1 ]
Added variable mulu8_sel::return#12 to live range equivalence class [ mulu8_sel::return#12 ]
Added variable mul16u::b#0 to live range equivalence class [ mul16u::b#0 ]
Added variable mul16u::return#2 to live range equivalence class [ mul16u::return#2 ]
Added variable mulu16_sel::$0 to live range equivalence class [ mulu16_sel::$0 ]
Added variable mulu16_sel::$1 to live range equivalence class [ mulu16_sel::$1 ]
Added variable mulu16_sel::return#12 to live range equivalence class [ mulu16_sel::return#12 ]
Added variable mul8u::$1 to live range equivalence class [ mul8u::$1 ]
Added variable mul16u::$1 to live range equivalence class [ mul16u::$1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ sin8s_gen::i#2 sin8s_gen::i#1 ]
[ sin8s_gen::x#2 sin8s_gen::x#1 ]
[ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
[ sin16s_gen::i#2 sin16s_gen::i#1 ]
[ sin16s_gen::x#2 sin16s_gen::x#1 ]
[ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ]
[ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
[ print_str::str#2 print_str::str#0 ]
[ sin8s::isUpper#10 ]
[ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ]
[ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
[ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
[ sin16s::isUpper#2 ]
[ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
[ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
[ memset::dst#2 memset::dst#1 ]
[ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
[ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ]
[ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
[ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
[ mulu8_sel::select#5 ]
[ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ]
[ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ]
[ mulu16_sel::select#5 ]
[ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
[ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
[ main::sb#0 ]
[ main::$10 ]
[ main::$9 ]
[ main::$3 ]
[ main::sw#0 ]
[ main::$11 ]
[ main::sd#0 ]
[ div16u::return#2 ]
[ sin8s_gen::step#0 ]
[ sin8s::return#0 ]
[ sin8s_gen::$2 ]
[ div32u16u::return#2 ]
[ sin16s_gen::step#0 ]
[ sin16s::return#0 ]
[ sin16s_gen::$2 ]
[ print_uchar::b#0 ]
[ divr16u::return#2 ]
[ div16u::return#0 ]
[ sin8s::$4 ]
[ sin8s::x1#0 ]
[ mulu8_sel::return#0 ]
[ sin8s::x2#0 ]
[ mulu8_sel::return#1 ]
[ sin8s::x3#0 ]
[ mulu8_sel::return#2 ]
[ sin8s::x3_6#0 ]
[ sin8s::usinx#0 ]
[ mulu8_sel::return#10 ]
[ sin8s::x4#0 ]
[ mulu8_sel::return#11 ]
[ sin8s::x5#0 ]
[ sin8s::x5_128#0 ]
[ divr16u::return#3 ]
[ div32u16u::quotient_hi#0 ]
[ divr16u::return#4 ]
[ div32u16u::quotient_lo#0 ]
[ div32u16u::return#0 ]
[ sin16s::$4 ]
[ sin16s::x1#0 ]
[ mulu16_sel::return#0 ]
[ sin16s::x2#0 ]
[ mulu16_sel::return#1 ]
[ sin16s::x3#0 ]
[ mulu16_sel::return#2 ]
[ sin16s::x3_6#0 ]
[ sin16s::usinx#0 ]
[ mulu16_sel::return#10 ]
[ sin16s::x4#0 ]
[ mulu16_sel::return#11 ]
[ sin16s::x5#0 ]
[ sin16s::x5_128#0 ]
[ sin16s::usinx#1 ]
[ print_uchar::$0 ]
[ print_uchar::$2 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
[ rem16u#0 ]
[ mul8u::b#0 ]
[ mul8u::return#2 ]
[ mulu8_sel::$0 ]
[ mulu8_sel::$1 ]
[ mulu8_sel::return#12 ]
[ mul16u::b#0 ]
[ mul16u::return#2 ]
[ mulu16_sel::$0 ]
[ mulu16_sel::$1 ]
[ mulu16_sel::return#12 ]
[ mul8u::$1 ]
[ mul16u::$1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:3 [ sin8s_gen::i#2 sin8s_gen::i#1 ]
Allocated zp[2]:5 [ sin8s_gen::x#2 sin8s_gen::x#1 ]
Allocated zp[2]:7 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
Allocated zp[2]:9 [ sin16s_gen::i#2 sin16s_gen::i#1 ]
Allocated zp[4]:11 [ sin16s_gen::x#2 sin16s_gen::x#1 ]
Allocated zp[2]:15 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ]
Allocated zp[1]:17 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
Allocated zp[2]:18 [ print_str::str#2 print_str::str#0 ]
Allocated zp[1]:20 [ sin8s::isUpper#10 ]
Allocated zp[2]:21 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ]
Allocated zp[1]:23 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
Allocated zp[1]:24 [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
Allocated zp[1]:25 [ sin16s::isUpper#2 ]
Allocated zp[4]:26 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
Allocated zp[2]:30 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ]
Allocated zp[2]:32 [ memset::dst#2 memset::dst#1 ]
Allocated zp[1]:34 [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
Allocated zp[2]:35 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ]
Allocated zp[2]:37 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp[2]:39 [ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ]
Allocated zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp[1]:43 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp[1]:44 [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
Allocated zp[1]:45 [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
Allocated zp[1]:46 [ mulu8_sel::select#5 ]
Allocated zp[2]:47 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ]
Allocated zp[2]:49 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ]
Allocated zp[1]:51 [ mulu16_sel::select#5 ]
Allocated zp[1]:52 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
Allocated zp[2]:53 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
Allocated zp[2]:55 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Allocated zp[2]:57 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
Allocated zp[4]:59 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
Allocated zp[4]:63 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated zp[1]:67 [ main::sb#0 ]
Allocated zp[2]:68 [ main::$10 ]
Allocated zp[2]:70 [ main::$9 ]
Allocated zp[2]:72 [ main::$3 ]
Allocated zp[2]:74 [ main::sw#0 ]
Allocated zp[1]:76 [ main::$11 ]
Allocated zp[1]:77 [ main::sd#0 ]
Allocated zp[2]:78 [ div16u::return#2 ]
Allocated zp[2]:80 [ sin8s_gen::step#0 ]
Allocated zp[1]:82 [ sin8s::return#0 ]
Allocated zp[1]:83 [ sin8s_gen::$2 ]
Allocated zp[4]:84 [ div32u16u::return#2 ]
Allocated zp[4]:88 [ sin16s_gen::step#0 ]
Allocated zp[2]:92 [ sin16s::return#0 ]
Allocated zp[2]:94 [ sin16s_gen::$2 ]
Allocated zp[1]:96 [ print_uchar::b#0 ]
Allocated zp[2]:97 [ divr16u::return#2 ]
Allocated zp[2]:99 [ div16u::return#0 ]
Allocated zp[2]:101 [ sin8s::$4 ]
Allocated zp[1]:103 [ sin8s::x1#0 ]
Allocated zp[1]:104 [ mulu8_sel::return#0 ]
Allocated zp[1]:105 [ sin8s::x2#0 ]
Allocated zp[1]:106 [ mulu8_sel::return#1 ]
Allocated zp[1]:107 [ sin8s::x3#0 ]
Allocated zp[1]:108 [ mulu8_sel::return#2 ]
Allocated zp[1]:109 [ sin8s::x3_6#0 ]
Allocated zp[1]:110 [ sin8s::usinx#0 ]
Allocated zp[1]:111 [ mulu8_sel::return#10 ]
Allocated zp[1]:112 [ sin8s::x4#0 ]
Allocated zp[1]:113 [ mulu8_sel::return#11 ]
Allocated zp[1]:114 [ sin8s::x5#0 ]
Allocated zp[1]:115 [ sin8s::x5_128#0 ]
Allocated zp[2]:116 [ divr16u::return#3 ]
Allocated zp[2]:118 [ div32u16u::quotient_hi#0 ]
Allocated zp[2]:120 [ divr16u::return#4 ]
Allocated zp[2]:122 [ div32u16u::quotient_lo#0 ]
Allocated zp[4]:124 [ div32u16u::return#0 ]
Allocated zp[4]:128 [ sin16s::$4 ]
Allocated zp[2]:132 [ sin16s::x1#0 ]
Allocated zp[2]:134 [ mulu16_sel::return#0 ]
Allocated zp[2]:136 [ sin16s::x2#0 ]
Allocated zp[2]:138 [ mulu16_sel::return#1 ]
Allocated zp[2]:140 [ sin16s::x3#0 ]
Allocated zp[2]:142 [ mulu16_sel::return#2 ]
Allocated zp[2]:144 [ sin16s::x3_6#0 ]
Allocated zp[2]:146 [ sin16s::usinx#0 ]
Allocated zp[2]:148 [ mulu16_sel::return#10 ]
Allocated zp[2]:150 [ sin16s::x4#0 ]
Allocated zp[2]:152 [ mulu16_sel::return#11 ]
Allocated zp[2]:154 [ sin16s::x5#0 ]
Allocated zp[2]:156 [ sin16s::x5_128#0 ]
Allocated zp[2]:158 [ sin16s::usinx#1 ]
Allocated zp[1]:160 [ print_uchar::$0 ]
Allocated zp[1]:161 [ print_uchar::$2 ]
Allocated zp[1]:162 [ divr16u::$1 ]
Allocated zp[1]:163 [ divr16u::$2 ]
Allocated zp[2]:164 [ rem16u#0 ]
Allocated zp[1]:166 [ mul8u::b#0 ]
Allocated zp[2]:167 [ mul8u::return#2 ]
Allocated zp[2]:169 [ mulu8_sel::$0 ]
Allocated zp[2]:171 [ mulu8_sel::$1 ]
Allocated zp[1]:173 [ mulu8_sel::return#12 ]
Allocated zp[2]:174 [ mul16u::b#0 ]
Allocated zp[4]:176 [ mul16u::return#2 ]
Allocated zp[4]:180 [ mulu16_sel::$0 ]
Allocated zp[4]:184 [ mulu16_sel::$1 ]
Allocated zp[2]:188 [ mulu16_sel::return#12 ]
Allocated zp[1]:190 [ mul8u::$1 ]
Allocated zp[1]:191 [ mul16u::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [8] main::$10 = (word)main::i#2 [ main::i#2 print_char_cursor#45 main::sb#0 main::$10 ] (  [ main::i#2 print_char_cursor#45 main::sb#0 main::$10 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:67 [ main::sb#0 ]
Statement [9] main::$9 = main::$10 << 1 [ main::i#2 print_char_cursor#45 main::sb#0 main::$9 ] (  [ main::i#2 print_char_cursor#45 main::sb#0 main::$9 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Statement [10] main::$3 = main::sintabw + main::$9 [ main::i#2 print_char_cursor#45 main::sb#0 main::$3 ] (  [ main::i#2 print_char_cursor#45 main::sb#0 main::$3 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Statement [11] main::sw#0 = *main::$3 [ main::i#2 print_char_cursor#45 main::sb#0 main::sw#0 ] (  [ main::i#2 print_char_cursor#45 main::sb#0 main::sw#0 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:67 [ main::sb#0 ]
Statement [13] main::sd#0 = main::sb#0 - (signed byte)main::$11 [ main::i#2 print_char_cursor#45 main::sd#0 ] (  [ main::i#2 print_char_cursor#45 main::sd#0 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Statement [23] div16u::return#2 = div16u::return#0 [ div16u::return#2 ] ( sin8s_gen:1 [ div16u::return#2 ] { { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [24] sin8s_gen::step#0 = div16u::return#2 [ sin8s_gen::step#0 ] ( sin8s_gen:1 [ sin8s_gen::step#0 ] { }  ) always clobbers reg byte a 
Statement [26] if(sin8s_gen::i#2<main::wavelength) goto sin8s_gen::@2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] { }  ) always clobbers reg byte a 
Statement [28] sin8s::x#0 = sin8s_gen::x#2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [32] *sin8s_gen::sintab#2 = sin8s_gen::$2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] { }  ) always clobbers reg byte y 
Statement [34] sin8s_gen::x#1 = sin8s_gen::x#2 + sin8s_gen::step#0 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [38] div32u16u::return#2 = div32u16u::return#0 [ div32u16u::return#2 ] ( sin16s_gen:3 [ div32u16u::return#2 ] { { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [39] sin16s_gen::step#0 = div32u16u::return#2 [ sin16s_gen::step#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 ] { }  ) always clobbers reg byte a 
Statement [41] if(sin16s_gen::i#2<main::wavelength) goto sin16s_gen::@2 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 ] { }  ) always clobbers reg byte a 
Statement [43] sin16s::x#0 = sin16s_gen::x#2 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [45] sin16s::return#0 = sin16s::return#1 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::return#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::return#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [46] sin16s_gen::$2 = sin16s::return#0 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::$2 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::$2 ] { }  ) always clobbers reg byte a 
Statement [47] *sin16s_gen::sintab#2 = sin16s_gen::$2 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [48] sin16s_gen::sintab#0 = sin16s_gen::sintab#2 + SIZEOF_SIGNED_WORD [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [49] sin16s_gen::x#1 = sin16s_gen::x#2 + sin16s_gen::step#0 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#1 sin16s_gen::sintab#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#1 sin16s_gen::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [63] print_schar::b#0 = - print_schar::b#1 [ print_char_cursor#10 print_schar::b#0 ] ( print_schar:15 [ main::i#2 print_char_cursor#10 print_schar::b#0 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Statement [66] if(0!=*print_str::str#2) goto print_str::@2 [ print_char_cursor#10 print_str::str#2 ] ( print_str:17 [ main::i#2 print_char_cursor#10 print_str::str#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [68] print_char::ch#0 = *print_str::str#2 [ print_char_cursor#10 print_str::str#2 print_char::ch#0 ] ( print_str:17 [ main::i#2 print_char_cursor#10 print_str::str#2 print_char::ch#0 ] { { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte a reg byte y 
Statement [73] divr16u::return#2 = divr16u::return#0 [ divr16u::return#2 ] ( sin8s_gen:1::div16u:22 [ divr16u::return#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [74] div16u::return#0 = divr16u::return#2 [ div16u::return#0 ] ( sin8s_gen:1::div16u:22 [ div16u::return#0 ] { { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [76] if(sin8s::x#0<PI_u4f12) goto sin8s::@1 [ sin8s::x#0 ] ( sin8s_gen:1::sin8s:29 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [77] sin8s::x#1 = sin8s::x#0 - PI_u4f12 [ sin8s::x#1 ] ( sin8s_gen:1::sin8s:29 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [79] if(sin8s::x#4<PI_HALF_u4f12) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( sin8s_gen:1::sin8s:29 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#4 sin8s::isUpper#10 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:20 [ sin8s::isUpper#10 ]
Statement [80] sin8s::x#2 = PI_u4f12 - sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#2 ] ( sin8s_gen:1::sin8s:29 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [82] sin8s::$4 = sin8s::x#6 << 3 [ sin8s::isUpper#10 sin8s::$4 ] ( sin8s_gen:1::sin8s:29 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::$4 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [98] sin8s::usinx#0 = sin8s::x1#0 - sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( sin8s_gen:1::sin8s:29 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:103 [ sin8s::x1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:107 [ sin8s::x3#0 ]
Statement [109] sin8s::x5_128#0 = sin8s::x5#0 >> 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( sin8s_gen:1::sin8s:29 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:110 [ sin8s::usinx#0 ]
Statement [110] sin8s::usinx#1 = sin8s::usinx#0 + sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( sin8s_gen:1::sin8s:29 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [115] sin8s::sinx#1 = - (signed byte)sin8s::usinx#4 [ sin8s::sinx#1 ] ( sin8s_gen:1::sin8s:29 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::sinx#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [121] divr16u::return#3 = divr16u::return#0 [ divr16u::return#3 rem16u#0 ] ( sin16s_gen:3::div32u16u:37 [ divr16u::return#3 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [122] div32u16u::quotient_hi#0 = divr16u::return#3 [ div32u16u::quotient_hi#0 rem16u#0 ] ( sin16s_gen:3::div32u16u:37 [ div32u16u::quotient_hi#0 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Statement [123] divr16u::rem#5 = rem16u#0 [ div32u16u::quotient_hi#0 divr16u::rem#5 ] ( sin16s_gen:3::div32u16u:37 [ div32u16u::quotient_hi#0 divr16u::rem#5 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Statement [125] divr16u::return#4 = divr16u::return#0 [ div32u16u::quotient_hi#0 divr16u::return#4 ] ( sin16s_gen:3::div32u16u:37 [ div32u16u::quotient_hi#0 divr16u::return#4 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Statement [126] div32u16u::quotient_lo#0 = divr16u::return#4 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ( sin16s_gen:3::div32u16u:37 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] { { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [127] div32u16u::return#0 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0 [ div32u16u::return#0 ] ( sin16s_gen:3::div32u16u:37 [ div32u16u::return#0 ] { { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [129] if(sin16s::x#0<PI_u4f28) goto sin16s::@1 [ sin16s::x#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [130] sin16s::x#1 = sin16s::x#0 - PI_u4f28 [ sin16s::x#1 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [132] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2 [ sin16s::x#4 sin16s::isUpper#2 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#4 sin16s::isUpper#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:25 [ sin16s::isUpper#2 ]
Statement [133] sin16s::x#2 = PI_u4f28 - sin16s::x#4 [ sin16s::isUpper#2 sin16s::x#2 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [135] sin16s::$4 = sin16s::x#6 << 3 [ sin16s::isUpper#2 sin16s::$4 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::$4 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [136] sin16s::x1#0 = > sin16s::$4 [ sin16s::isUpper#2 sin16s::x1#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [137] mulu16_sel::v1#0 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [138] mulu16_sel::v2#0 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [140] mulu16_sel::return#0 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [141] sin16s::x2#0 = mulu16_sel::return#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [142] mulu16_sel::v1#1 = sin16s::x2#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [143] mulu16_sel::v2#1 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [145] mulu16_sel::return#1 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [146] sin16s::x3#0 = mulu16_sel::return#1 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [147] mulu16_sel::v1#2 = sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [149] mulu16_sel::return#2 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [150] sin16s::x3_6#0 = mulu16_sel::return#2 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [151] sin16s::usinx#0 = sin16s::x1#0 - sin16s::x3_6#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [152] mulu16_sel::v1#3 = sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [153] mulu16_sel::v2#3 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [155] mulu16_sel::return#10 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [156] sin16s::x4#0 = mulu16_sel::return#10 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [157] mulu16_sel::v1#4 = sin16s::x4#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [158] mulu16_sel::v2#4 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [160] mulu16_sel::return#11 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [161] sin16s::x5#0 = mulu16_sel::return#11 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [162] sin16s::x5_128#0 = sin16s::x5#0 >> 4 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [163] sin16s::usinx#1 = sin16s::usinx#0 + sin16s::x5_128#0 [ sin16s::isUpper#2 sin16s::usinx#1 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [165] sin16s::sinx#1 = - (signed word)sin16s::usinx#1 [ sin16s::sinx#1 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::sinx#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [168] sin16s::return#5 = (signed word)sin16s::usinx#1 [ sin16s::return#5 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::return#5 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [171] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:5::memset:52 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [173] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( print_cls:5::memset:52 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [176] *print_char_cursor#29 = print_char::ch#5 [ print_char_cursor#29 ] ( print_schar:15::print_char:56 [ main::i#2 print_schar::b#1 print_char_cursor#29 ] { { print_schar::b#1 = main::sd#0 } { print_char_cursor#29 = print_char_cursor#45 } }  print_schar:15::print_char:62 [ main::i#2 print_schar::b#1 print_char_cursor#29 ] { { print_schar::b#1 = main::sd#0 } { print_char_cursor#29 = print_char_cursor#45 } }  print_str:17::print_char:69 [ main::i#2 print_str::str#2 print_char_cursor#29 ] { { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  print_schar:15::print_uchar:59::print_char:181 [ main::i#2 print_uchar::b#0 print_char_cursor#29 ] { { print_schar::b#1 = main::sd#0 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  print_schar:15::print_uchar:59::print_char:184 [ main::i#2 print_char_cursor#29 ] { { print_schar::b#1 = main::sd#0 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:17 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:96 [ print_uchar::b#0 ]
Statement [179] print_uchar::$0 = print_uchar::b#0 >> 4 [ print_char_cursor#10 print_uchar::b#0 print_uchar::$0 ] ( print_schar:15::print_uchar:59 [ main::i#2 print_char_cursor#10 print_uchar::b#0 print_uchar::$0 ] { { print_schar::b#1 = main::sd#0 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:96 [ print_uchar::b#0 ]
Statement [182] print_uchar::$2 = print_uchar::b#0 & $f [ print_char_cursor#10 print_uchar::$2 ] ( print_schar:15::print_uchar:59 [ main::i#2 print_char_cursor#10 print_uchar::$2 ] { { print_schar::b#1 = main::sd#0 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte a 
Statement [192] divr16u::rem#1 = divr16u::rem#0 | 1 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( sin8s_gen:1::div16u:22::divr16u:72 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  sin16s_gen:3::div32u16u:37::divr16u:120 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  sin16s_gen:3::div32u16u:37::divr16u:124 [ div32u16u::quotient_hi#0 divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:43 [ divr16u::i#2 divr16u::i#1 ]
Statement [196] if(divr16u::rem#7<main::wavelength) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] ( sin8s_gen:1::div16u:22::divr16u:72 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  sin16s_gen:3::div32u16u:37::divr16u:120 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  sin16s_gen:3::div32u16u:37::divr16u:124 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Statement [198] divr16u::rem#2 = divr16u::rem#7 - main::wavelength [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( sin8s_gen:1::div16u:22::divr16u:72 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  sin16s_gen:3::div32u16u:37::divr16u:120 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  sin16s_gen:3::div32u16u:37::divr16u:124 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Statement [202] rem16u#0 = divr16u::rem#10 [ divr16u::return#0 rem16u#0 ] ( sin8s_gen:1::div16u:22::divr16u:72 [ divr16u::return#0 rem16u#0 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  sin16s_gen:3::div32u16u:37::divr16u:120 [ divr16u::return#0 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  sin16s_gen:3::div32u16u:37::divr16u:124 [ div32u16u::quotient_hi#0 divr16u::return#0 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Statement [208] mul8u::return#2 = mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#2 ] ( sin8s_gen:1::sin8s:29::mulu8_sel:86 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#1 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:91 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#1 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:95 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:101 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:106 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#1 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:46 [ mulu8_sel::select#5 ]
Statement [209] mulu8_sel::$0 = mul8u::return#2 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( sin8s_gen:1::sin8s:29::mulu8_sel:86 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:29::mulu8_sel:91 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:29::mulu8_sel:95 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:101 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:29::mulu8_sel:106 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [210] mulu8_sel::$1 = mulu8_sel::$0 << mulu8_sel::select#5 [ mulu8_sel::$1 ] ( sin8s_gen:1::sin8s:29::mulu8_sel:86 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:29::mulu8_sel:91 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:29::mulu8_sel:95 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:101 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:29::mulu8_sel:106 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [214] mul16u::a#1 = mulu16_sel::v1#5 [ mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:51 [ mulu16_sel::select#5 ]
Statement [215] mul16u::b#0 = mulu16_sel::v2#5 [ mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [217] mul16u::return#2 = mul16u::res#2 [ mulu16_sel::select#5 mul16u::return#2 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [218] mulu16_sel::$0 = mul16u::return#2 [ mulu16_sel::select#5 mulu16_sel::$0 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [219] mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5 [ mulu16_sel::$1 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [220] mulu16_sel::return#12 = > mulu16_sel::$1 [ mulu16_sel::return#12 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [222] mul8u::mb#0 = (word)mul8u::b#0 [ mul8u::a#1 mul8u::mb#0 ] ( sin8s_gen:1::sin8s:29::mulu8_sel:86::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#1 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:91::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#1 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:95::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:101::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:106::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#1 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:52 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
Statement [226] mul8u::$1 = mul8u::a#2 & 1 [ mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] ( sin8s_gen:1::sin8s:29::mulu8_sel:86::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#1 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:91::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#1 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:95::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:101::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:106::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#1 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [228] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 [ mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ( sin8s_gen:1::sin8s:29::mulu8_sel:86::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#1 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:91::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#1 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:95::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:101::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:106::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#1 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [232] mul16u::mb#0 = (dword)mul16u::b#0 [ mul16u::a#1 mul16u::mb#0 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [234] if(mul16u::a#2!=0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [236] mul16u::$1 = mul16u::a#2 & 1 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [238] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2 [ mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [8] main::$10 = (word)main::i#2 [ main::i#2 print_char_cursor#45 main::sb#0 main::$10 ] (  [ main::i#2 print_char_cursor#45 main::sb#0 main::$10 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Statement [9] main::$9 = main::$10 << 1 [ main::i#2 print_char_cursor#45 main::sb#0 main::$9 ] (  [ main::i#2 print_char_cursor#45 main::sb#0 main::$9 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Statement [10] main::$3 = main::sintabw + main::$9 [ main::i#2 print_char_cursor#45 main::sb#0 main::$3 ] (  [ main::i#2 print_char_cursor#45 main::sb#0 main::$3 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Statement [11] main::sw#0 = *main::$3 [ main::i#2 print_char_cursor#45 main::sb#0 main::sw#0 ] (  [ main::i#2 print_char_cursor#45 main::sb#0 main::sw#0 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a reg byte y 
Statement [13] main::sd#0 = main::sb#0 - (signed byte)main::$11 [ main::i#2 print_char_cursor#45 main::sd#0 ] (  [ main::i#2 print_char_cursor#45 main::sd#0 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Statement [23] div16u::return#2 = div16u::return#0 [ div16u::return#2 ] ( sin8s_gen:1 [ div16u::return#2 ] { { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [24] sin8s_gen::step#0 = div16u::return#2 [ sin8s_gen::step#0 ] ( sin8s_gen:1 [ sin8s_gen::step#0 ] { }  ) always clobbers reg byte a 
Statement [26] if(sin8s_gen::i#2<main::wavelength) goto sin8s_gen::@2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] { }  ) always clobbers reg byte a 
Statement [28] sin8s::x#0 = sin8s_gen::x#2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [32] *sin8s_gen::sintab#2 = sin8s_gen::$2 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 ] { }  ) always clobbers reg byte y 
Statement [34] sin8s_gen::x#1 = sin8s_gen::x#2 + sin8s_gen::step#0 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] ( sin8s_gen:1 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#1 sin8s_gen::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [38] div32u16u::return#2 = div32u16u::return#0 [ div32u16u::return#2 ] ( sin16s_gen:3 [ div32u16u::return#2 ] { { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [39] sin16s_gen::step#0 = div32u16u::return#2 [ sin16s_gen::step#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 ] { }  ) always clobbers reg byte a 
Statement [41] if(sin16s_gen::i#2<main::wavelength) goto sin16s_gen::@2 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 ] { }  ) always clobbers reg byte a 
Statement [43] sin16s::x#0 = sin16s_gen::x#2 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [45] sin16s::return#0 = sin16s::return#1 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::return#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::return#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [46] sin16s_gen::$2 = sin16s::return#0 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::$2 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s_gen::$2 ] { }  ) always clobbers reg byte a 
Statement [47] *sin16s_gen::sintab#2 = sin16s_gen::$2 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [48] sin16s_gen::sintab#0 = sin16s_gen::sintab#2 + SIZEOF_SIGNED_WORD [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [49] sin16s_gen::x#1 = sin16s_gen::x#2 + sin16s_gen::step#0 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#1 sin16s_gen::sintab#0 ] ( sin16s_gen:3 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#1 sin16s_gen::sintab#0 ] { }  ) always clobbers reg byte a 
Statement [63] print_schar::b#0 = - print_schar::b#1 [ print_char_cursor#10 print_schar::b#0 ] ( print_schar:15 [ main::i#2 print_char_cursor#10 print_schar::b#0 ] { { print_schar::b#1 = main::sd#0 } }  ) always clobbers reg byte a 
Statement [66] if(0!=*print_str::str#2) goto print_str::@2 [ print_char_cursor#10 print_str::str#2 ] ( print_str:17 [ main::i#2 print_char_cursor#10 print_str::str#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [68] print_char::ch#0 = *print_str::str#2 [ print_char_cursor#10 print_str::str#2 print_char::ch#0 ] ( print_str:17 [ main::i#2 print_char_cursor#10 print_str::str#2 print_char::ch#0 ] { { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte a reg byte y 
Statement [73] divr16u::return#2 = divr16u::return#0 [ divr16u::return#2 ] ( sin8s_gen:1::div16u:22 [ divr16u::return#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [74] div16u::return#0 = divr16u::return#2 [ div16u::return#0 ] ( sin8s_gen:1::div16u:22 [ div16u::return#0 ] { { div16u::return#0 = div16u::return#2 } }  ) always clobbers reg byte a 
Statement [76] if(sin8s::x#0<PI_u4f12) goto sin8s::@1 [ sin8s::x#0 ] ( sin8s_gen:1::sin8s:29 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [77] sin8s::x#1 = sin8s::x#0 - PI_u4f12 [ sin8s::x#1 ] ( sin8s_gen:1::sin8s:29 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [79] if(sin8s::x#4<PI_HALF_u4f12) goto sin8s::@2 [ sin8s::x#4 sin8s::isUpper#10 ] ( sin8s_gen:1::sin8s:29 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::x#4 sin8s::isUpper#10 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [80] sin8s::x#2 = PI_u4f12 - sin8s::x#4 [ sin8s::isUpper#10 sin8s::x#2 ] ( sin8s_gen:1::sin8s:29 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [82] sin8s::$4 = sin8s::x#6 << 3 [ sin8s::isUpper#10 sin8s::$4 ] ( sin8s_gen:1::sin8s:29 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::$4 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [98] sin8s::usinx#0 = sin8s::x1#0 - sin8s::x3_6#0 [ sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] ( sin8s_gen:1::sin8s:29 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 sin8s::usinx#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [109] sin8s::x5_128#0 = sin8s::x5#0 >> 4 [ sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] ( sin8s_gen:1::sin8s:29 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 sin8s::x5_128#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [110] sin8s::usinx#1 = sin8s::usinx#0 + sin8s::x5_128#0 [ sin8s::isUpper#10 sin8s::usinx#1 ] ( sin8s_gen:1::sin8s:29 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [115] sin8s::sinx#1 = - (signed byte)sin8s::usinx#4 [ sin8s::sinx#1 ] ( sin8s_gen:1::sin8s:29 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::sinx#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } }  ) always clobbers reg byte a 
Statement [121] divr16u::return#3 = divr16u::return#0 [ divr16u::return#3 rem16u#0 ] ( sin16s_gen:3::div32u16u:37 [ divr16u::return#3 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [122] div32u16u::quotient_hi#0 = divr16u::return#3 [ div32u16u::quotient_hi#0 rem16u#0 ] ( sin16s_gen:3::div32u16u:37 [ div32u16u::quotient_hi#0 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Statement [123] divr16u::rem#5 = rem16u#0 [ div32u16u::quotient_hi#0 divr16u::rem#5 ] ( sin16s_gen:3::div32u16u:37 [ div32u16u::quotient_hi#0 divr16u::rem#5 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Statement [125] divr16u::return#4 = divr16u::return#0 [ div32u16u::quotient_hi#0 divr16u::return#4 ] ( sin16s_gen:3::div32u16u:37 [ div32u16u::quotient_hi#0 divr16u::return#4 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Statement [126] div32u16u::quotient_lo#0 = divr16u::return#4 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ( sin16s_gen:3::div32u16u:37 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] { { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [127] div32u16u::return#0 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0 [ div32u16u::return#0 ] ( sin16s_gen:3::div32u16u:37 [ div32u16u::return#0 ] { { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [129] if(sin16s::x#0<PI_u4f28) goto sin16s::@1 [ sin16s::x#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [130] sin16s::x#1 = sin16s::x#0 - PI_u4f28 [ sin16s::x#1 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [132] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2 [ sin16s::x#4 sin16s::isUpper#2 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::x#4 sin16s::isUpper#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [133] sin16s::x#2 = PI_u4f28 - sin16s::x#4 [ sin16s::isUpper#2 sin16s::x#2 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [135] sin16s::$4 = sin16s::x#6 << 3 [ sin16s::isUpper#2 sin16s::$4 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::$4 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [136] sin16s::x1#0 = > sin16s::$4 [ sin16s::isUpper#2 sin16s::x1#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [137] mulu16_sel::v1#0 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [138] mulu16_sel::v2#0 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#0 mulu16_sel::v2#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [140] mulu16_sel::return#0 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [141] sin16s::x2#0 = mulu16_sel::return#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x2#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [142] mulu16_sel::v1#1 = sin16s::x2#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [143] mulu16_sel::v2#1 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v1#1 mulu16_sel::v2#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [145] mulu16_sel::return#1 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [146] sin16s::x3#0 = mulu16_sel::return#1 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [147] mulu16_sel::v1#2 = sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v1#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [149] mulu16_sel::return#2 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  ) always clobbers reg byte a 
Statement [150] sin16s::x3_6#0 = mulu16_sel::return#2 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::x3_6#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [151] sin16s::usinx#0 = sin16s::x1#0 - sin16s::x3_6#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 sin16s::usinx#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [152] mulu16_sel::v1#3 = sin16s::x3#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [153] mulu16_sel::v2#3 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#3 mulu16_sel::v2#3 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [155] mulu16_sel::return#10 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#10 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [156] sin16s::x4#0 = mulu16_sel::return#10 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 sin16s::x4#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [157] mulu16_sel::v1#4 = sin16s::x4#0 [ sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v1#4 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [158] mulu16_sel::v2#4 = sin16s::x1#0 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v1#4 mulu16_sel::v2#4 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [160] mulu16_sel::return#11 = mulu16_sel::return#12 [ sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#11 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [161] sin16s::x5#0 = mulu16_sel::return#11 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [162] sin16s::x5_128#0 = sin16s::x5#0 >> 4 [ sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 sin16s::x5_128#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [163] sin16s::usinx#1 = sin16s::usinx#0 + sin16s::x5_128#0 [ sin16s::isUpper#2 sin16s::usinx#1 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [165] sin16s::sinx#1 = - (signed word)sin16s::usinx#1 [ sin16s::sinx#1 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::sinx#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [168] sin16s::return#5 = (signed word)sin16s::usinx#1 [ sin16s::return#5 ] ( sin16s_gen:3::sin16s:44 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::return#5 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } }  ) always clobbers reg byte a 
Statement [171] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:5::memset:52 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [173] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( print_cls:5::memset:52 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [176] *print_char_cursor#29 = print_char::ch#5 [ print_char_cursor#29 ] ( print_schar:15::print_char:56 [ main::i#2 print_schar::b#1 print_char_cursor#29 ] { { print_schar::b#1 = main::sd#0 } { print_char_cursor#29 = print_char_cursor#45 } }  print_schar:15::print_char:62 [ main::i#2 print_schar::b#1 print_char_cursor#29 ] { { print_schar::b#1 = main::sd#0 } { print_char_cursor#29 = print_char_cursor#45 } }  print_str:17::print_char:69 [ main::i#2 print_str::str#2 print_char_cursor#29 ] { { print_char::ch#0 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  print_schar:15::print_uchar:59::print_char:181 [ main::i#2 print_uchar::b#0 print_char_cursor#29 ] { { print_schar::b#1 = main::sd#0 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  print_schar:15::print_uchar:59::print_char:184 [ main::i#2 print_char_cursor#29 ] { { print_schar::b#1 = main::sd#0 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte y 
Statement [179] print_uchar::$0 = print_uchar::b#0 >> 4 [ print_char_cursor#10 print_uchar::b#0 print_uchar::$0 ] ( print_schar:15::print_uchar:59 [ main::i#2 print_char_cursor#10 print_uchar::b#0 print_uchar::$0 ] { { print_schar::b#1 = main::sd#0 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte a 
Statement [182] print_uchar::$2 = print_uchar::b#0 & $f [ print_char_cursor#10 print_uchar::$2 ] ( print_schar:15::print_uchar:59 [ main::i#2 print_char_cursor#10 print_uchar::$2 ] { { print_schar::b#1 = main::sd#0 } { print_char::ch#4 = print_char::ch#5 } { print_char_cursor#10 = print_char_cursor#29 } }  ) always clobbers reg byte a 
Statement [192] divr16u::rem#1 = divr16u::rem#0 | 1 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( sin8s_gen:1::div16u:22::divr16u:72 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  sin16s_gen:3::div32u16u:37::divr16u:120 [ divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  sin16s_gen:3::div32u16u:37::divr16u:124 [ div32u16u::quotient_hi#0 divr16u::dividend#4 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Statement [196] if(divr16u::rem#7<main::wavelength) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] ( sin8s_gen:1::div16u:22::divr16u:72 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  sin16s_gen:3::div32u16u:37::divr16u:120 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  sin16s_gen:3::div32u16u:37::divr16u:124 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#7 divr16u::quotient#1 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Statement [198] divr16u::rem#2 = divr16u::rem#7 - main::wavelength [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( sin8s_gen:1::div16u:22::divr16u:72 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  sin16s_gen:3::div32u16u:37::divr16u:120 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  sin16s_gen:3::div32u16u:37::divr16u:124 [ div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Statement [202] rem16u#0 = divr16u::rem#10 [ divr16u::return#0 rem16u#0 ] ( sin8s_gen:1::div16u:22::divr16u:72 [ divr16u::return#0 rem16u#0 ] { { div16u::return#0 = div16u::return#2 } { divr16u::return#0 = divr16u::return#2 } }  sin16s_gen:3::div32u16u:37::divr16u:120 [ divr16u::return#0 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::return#0 = divr16u::return#3 } }  sin16s_gen:3::div32u16u:37::divr16u:124 [ div32u16u::quotient_hi#0 divr16u::return#0 rem16u#0 ] { { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#11 = divr16u::rem#5 rem16u#0 } { divr16u::return#0 = divr16u::return#4 } }  ) always clobbers reg byte a 
Statement [208] mul8u::return#2 = mul8u::res#2 [ mulu8_sel::select#5 mul8u::return#2 ] ( sin8s_gen:1::sin8s:29::mulu8_sel:86 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#1 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:91 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#1 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:95 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:101 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:106 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::return#2 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#1 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [209] mulu8_sel::$0 = mul8u::return#2 [ mulu8_sel::select#5 mulu8_sel::$0 ] ( sin8s_gen:1::sin8s:29::mulu8_sel:86 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:29::mulu8_sel:91 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:29::mulu8_sel:95 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:101 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:29::mulu8_sel:106 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mulu8_sel::$0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [210] mulu8_sel::$1 = mulu8_sel::$0 << mulu8_sel::select#5 [ mulu8_sel::$1 ] ( sin8s_gen:1::sin8s:29::mulu8_sel:86 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:29::mulu8_sel:91 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:29::mulu8_sel:95 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::return#12 = mulu8_sel::return#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:101 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } }  sin8s_gen:1::sin8s:29::mulu8_sel:106 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } }  ) always clobbers reg byte a 
Statement [214] mul16u::a#1 = mulu16_sel::v1#5 [ mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::v2#5 mulu16_sel::select#5 mul16u::a#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [215] mul16u::b#0 = mulu16_sel::v2#5 [ mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::b#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [217] mul16u::return#2 = mul16u::res#2 [ mulu16_sel::select#5 mul16u::return#2 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::return#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [218] mulu16_sel::$0 = mul16u::return#2 [ mulu16_sel::select#5 mulu16_sel::$0 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mulu16_sel::$0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [219] mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5 [ mulu16_sel::$1 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [220] mulu16_sel::return#12 = > mulu16_sel::$1 [ mulu16_sel::return#12 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::return#12 = mulu16_sel::return#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::return#12 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } }  ) always clobbers reg byte a 
Statement [222] mul8u::mb#0 = (word)mul8u::b#0 [ mul8u::a#1 mul8u::mb#0 ] ( sin8s_gen:1::sin8s:29::mulu8_sel:86::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#1 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:91::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#1 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:95::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:101::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:106::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#1 mul8u::mb#0 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#1 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [226] mul8u::$1 = mul8u::a#2 & 1 [ mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] ( sin8s_gen:1::sin8s:29::mulu8_sel:86::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#1 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:91::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#1 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:95::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:101::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:106::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#1 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [228] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 [ mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ( sin8s_gen:1::sin8s:29::mulu8_sel:86::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v2#0 = mulu8_sel::v2#5 mulu8_sel::v1#5 mulu8_sel::v1#0 sin8s::x1#0 mul8u::a#1 mul8u::b#0 } { mulu8_sel::return#0 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:91::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#1 = mulu8_sel::v1#5 sin8s::x2#0 mul8u::a#1 } { mulu8_sel::v2#1 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#1 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:95::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::x3#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#2 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::return#12 = mulu8_sel::return#2 } { mul8u::b#0 = mulu8_sel::v2#5 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:101::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::x1#0 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#3 = mulu8_sel::v1#5 sin8s::x3#0 mul8u::a#1 } { mulu8_sel::v2#3 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#10 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  sin8s_gen:1::sin8s:29::mulu8_sel:106::mul8u:207 [ sin8s_gen::step#0 sin8s_gen::i#2 sin8s_gen::x#2 sin8s_gen::sintab#2 sin8s::isUpper#10 sin8s::usinx#0 mulu8_sel::select#5 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { sin8s::x#0 = sin8s_gen::x#2 } { sin8s::return#0 = sin8s::return#1 } { mulu8_sel::v1#4 = mulu8_sel::v1#5 sin8s::x4#0 mul8u::a#1 } { mulu8_sel::v2#4 = mulu8_sel::v2#5 sin8s::x1#0 mul8u::b#0 } { mulu8_sel::return#11 = mulu8_sel::return#12 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [232] mul16u::mb#0 = (dword)mul16u::b#0 [ mul16u::a#1 mul16u::mb#0 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#1 mul16u::mb#0 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [234] if(mul16u::a#2!=0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [236] mul16u::$1 = mul16u::a#2 & 1 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [238] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2 [ mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] ( sin16s_gen:3::sin16s:44::mulu16_sel:139::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v2#0 = mulu16_sel::v2#5 mulu16_sel::v1#5 mulu16_sel::v1#0 sin16s::x1#0 mul16u::a#1 mul16u::b#0 } { mulu16_sel::return#0 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:144::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#1 = mulu16_sel::v1#5 sin16s::x2#0 mul16u::a#1 } { mulu16_sel::v2#1 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#1 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:148::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::x3#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#2 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::return#12 = mulu16_sel::return#2 } { mul16u::b#0 = mulu16_sel::v2#5 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:154::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::x1#0 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#3 = mulu16_sel::v1#5 sin16s::x3#0 mul16u::a#1 } { mulu16_sel::v2#3 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#10 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  sin16s_gen:3::sin16s:44::mulu16_sel:159::mul16u:216 [ sin16s_gen::step#0 sin16s_gen::i#2 sin16s_gen::x#2 sin16s_gen::sintab#2 sin16s::isUpper#2 sin16s::usinx#0 mulu16_sel::select#5 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { sin16s::x#0 = sin16s_gen::x#2 } { sin16s::return#0 = sin16s::return#1 } { mulu16_sel::v1#4 = mulu16_sel::v1#5 sin16s::x4#0 mul16u::a#1 } { mulu16_sel::v2#4 = mulu16_sel::v2#5 sin16s::x1#0 mul16u::b#0 } { mulu16_sel::return#11 = mulu16_sel::return#12 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[2]:3 [ sin8s_gen::i#2 sin8s_gen::i#1 ] : zp[2]:3 , 
Potential registers zp[2]:5 [ sin8s_gen::x#2 sin8s_gen::x#1 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] : zp[2]:7 , 
Potential registers zp[2]:9 [ sin16s_gen::i#2 sin16s_gen::i#1 ] : zp[2]:9 , 
Potential registers zp[4]:11 [ sin16s_gen::x#2 sin16s_gen::x#1 ] : zp[4]:11 , 
Potential registers zp[2]:15 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ] : zp[2]:15 , 
Potential registers zp[1]:17 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ] : zp[1]:17 , reg byte a , reg byte x , 
Potential registers zp[2]:18 [ print_str::str#2 print_str::str#0 ] : zp[2]:18 , 
Potential registers zp[1]:20 [ sin8s::isUpper#10 ] : zp[1]:20 , reg byte x , reg byte y , 
Potential registers zp[2]:21 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] : zp[2]:21 , 
Potential registers zp[1]:23 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] : zp[1]:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:24 [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ] : zp[1]:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:25 [ sin16s::isUpper#2 ] : zp[1]:25 , reg byte x , reg byte y , 
Potential registers zp[4]:26 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] : zp[4]:26 , 
Potential registers zp[2]:30 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] : zp[2]:30 , 
Potential registers zp[2]:32 [ memset::dst#2 memset::dst#1 ] : zp[2]:32 , 
Potential registers zp[1]:34 [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ] : zp[1]:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:35 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ] : zp[2]:35 , 
Potential registers zp[2]:37 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp[2]:37 , 
Potential registers zp[2]:39 [ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ] : zp[2]:39 , 
Potential registers zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp[2]:41 , 
Potential registers zp[1]:43 [ divr16u::i#2 divr16u::i#1 ] : zp[1]:43 , reg byte x , reg byte y , 
Potential registers zp[1]:44 [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ] : zp[1]:44 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:45 [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ] : zp[1]:45 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:46 [ mulu8_sel::select#5 ] : zp[1]:46 , reg byte x , reg byte y , 
Potential registers zp[2]:47 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ] : zp[2]:47 , 
Potential registers zp[2]:49 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ] : zp[2]:49 , 
Potential registers zp[1]:51 [ mulu16_sel::select#5 ] : zp[1]:51 , reg byte x , reg byte y , 
Potential registers zp[1]:52 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] : zp[1]:52 , reg byte x , reg byte y , 
Potential registers zp[2]:53 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] : zp[2]:53 , 
Potential registers zp[2]:55 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] : zp[2]:55 , 
Potential registers zp[2]:57 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] : zp[2]:57 , 
Potential registers zp[4]:59 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] : zp[4]:59 , 
Potential registers zp[4]:63 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] : zp[4]:63 , 
Potential registers zp[1]:67 [ main::sb#0 ] : zp[1]:67 , reg byte x , 
Potential registers zp[2]:68 [ main::$10 ] : zp[2]:68 , 
Potential registers zp[2]:70 [ main::$9 ] : zp[2]:70 , 
Potential registers zp[2]:72 [ main::$3 ] : zp[2]:72 , 
Potential registers zp[2]:74 [ main::sw#0 ] : zp[2]:74 , 
Potential registers zp[1]:76 [ main::$11 ] : zp[1]:76 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:77 [ main::sd#0 ] : zp[1]:77 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:78 [ div16u::return#2 ] : zp[2]:78 , 
Potential registers zp[2]:80 [ sin8s_gen::step#0 ] : zp[2]:80 , 
Potential registers zp[1]:82 [ sin8s::return#0 ] : zp[1]:82 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:83 [ sin8s_gen::$2 ] : zp[1]:83 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:84 [ div32u16u::return#2 ] : zp[4]:84 , 
Potential registers zp[4]:88 [ sin16s_gen::step#0 ] : zp[4]:88 , 
Potential registers zp[2]:92 [ sin16s::return#0 ] : zp[2]:92 , 
Potential registers zp[2]:94 [ sin16s_gen::$2 ] : zp[2]:94 , 
Potential registers zp[1]:96 [ print_uchar::b#0 ] : zp[1]:96 , reg byte x , 
Potential registers zp[2]:97 [ divr16u::return#2 ] : zp[2]:97 , 
Potential registers zp[2]:99 [ div16u::return#0 ] : zp[2]:99 , 
Potential registers zp[2]:101 [ sin8s::$4 ] : zp[2]:101 , 
Potential registers zp[1]:103 [ sin8s::x1#0 ] : zp[1]:103 , reg byte x , reg byte y , 
Potential registers zp[1]:104 [ mulu8_sel::return#0 ] : zp[1]:104 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:105 [ sin8s::x2#0 ] : zp[1]:105 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:106 [ mulu8_sel::return#1 ] : zp[1]:106 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:107 [ sin8s::x3#0 ] : zp[1]:107 , reg byte x , reg byte y , 
Potential registers zp[1]:108 [ mulu8_sel::return#2 ] : zp[1]:108 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:109 [ sin8s::x3_6#0 ] : zp[1]:109 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:110 [ sin8s::usinx#0 ] : zp[1]:110 , reg byte x , reg byte y , 
Potential registers zp[1]:111 [ mulu8_sel::return#10 ] : zp[1]:111 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:112 [ sin8s::x4#0 ] : zp[1]:112 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:113 [ mulu8_sel::return#11 ] : zp[1]:113 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:114 [ sin8s::x5#0 ] : zp[1]:114 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:115 [ sin8s::x5_128#0 ] : zp[1]:115 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:116 [ divr16u::return#3 ] : zp[2]:116 , 
Potential registers zp[2]:118 [ div32u16u::quotient_hi#0 ] : zp[2]:118 , 
Potential registers zp[2]:120 [ divr16u::return#4 ] : zp[2]:120 , 
Potential registers zp[2]:122 [ div32u16u::quotient_lo#0 ] : zp[2]:122 , 
Potential registers zp[4]:124 [ div32u16u::return#0 ] : zp[4]:124 , 
Potential registers zp[4]:128 [ sin16s::$4 ] : zp[4]:128 , 
Potential registers zp[2]:132 [ sin16s::x1#0 ] : zp[2]:132 , 
Potential registers zp[2]:134 [ mulu16_sel::return#0 ] : zp[2]:134 , 
Potential registers zp[2]:136 [ sin16s::x2#0 ] : zp[2]:136 , 
Potential registers zp[2]:138 [ mulu16_sel::return#1 ] : zp[2]:138 , 
Potential registers zp[2]:140 [ sin16s::x3#0 ] : zp[2]:140 , 
Potential registers zp[2]:142 [ mulu16_sel::return#2 ] : zp[2]:142 , 
Potential registers zp[2]:144 [ sin16s::x3_6#0 ] : zp[2]:144 , 
Potential registers zp[2]:146 [ sin16s::usinx#0 ] : zp[2]:146 , 
Potential registers zp[2]:148 [ mulu16_sel::return#10 ] : zp[2]:148 , 
Potential registers zp[2]:150 [ sin16s::x4#0 ] : zp[2]:150 , 
Potential registers zp[2]:152 [ mulu16_sel::return#11 ] : zp[2]:152 , 
Potential registers zp[2]:154 [ sin16s::x5#0 ] : zp[2]:154 , 
Potential registers zp[2]:156 [ sin16s::x5_128#0 ] : zp[2]:156 , 
Potential registers zp[2]:158 [ sin16s::usinx#1 ] : zp[2]:158 , 
Potential registers zp[1]:160 [ print_uchar::$0 ] : zp[1]:160 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:161 [ print_uchar::$2 ] : zp[1]:161 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:162 [ divr16u::$1 ] : zp[1]:162 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:163 [ divr16u::$2 ] : zp[1]:163 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:164 [ rem16u#0 ] : zp[2]:164 , 
Potential registers zp[1]:166 [ mul8u::b#0 ] : zp[1]:166 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:167 [ mul8u::return#2 ] : zp[2]:167 , 
Potential registers zp[2]:169 [ mulu8_sel::$0 ] : zp[2]:169 , 
Potential registers zp[2]:171 [ mulu8_sel::$1 ] : zp[2]:171 , 
Potential registers zp[1]:173 [ mulu8_sel::return#12 ] : zp[1]:173 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:174 [ mul16u::b#0 ] : zp[2]:174 , 
Potential registers zp[4]:176 [ mul16u::return#2 ] : zp[4]:176 , 
Potential registers zp[4]:180 [ mulu16_sel::$0 ] : zp[4]:180 , 
Potential registers zp[4]:184 [ mulu16_sel::$1 ] : zp[4]:184 , 
Potential registers zp[2]:188 [ mulu16_sel::return#12 ] : zp[2]:188 , 
Potential registers zp[1]:190 [ mul8u::$1 ] : zp[1]:190 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:191 [ mul16u::$1 ] : zp[1]:191 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul8u] 35,001,670.33: zp[2]:53 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] 24,500,004.57: zp[2]:55 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] 20,000,002: zp[1]:190 [ mul8u::$1 ] 16,720,002.5: zp[1]:52 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] 20,002: zp[2]:167 [ mul8u::return#2 ] 10,001: zp[1]:166 [ mul8u::b#0 ] 
Uplift Scope [mul16u] 35,001,670.33: zp[4]:59 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] 24,500,004.57: zp[4]:63 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] 20,000,002: zp[1]:191 [ mul16u::$1 ] 16,720,002.5: zp[2]:57 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] 20,002: zp[4]:176 [ mul16u::return#2 ] 10,001: zp[2]:174 [ mul16u::b#0 ] 
Uplift Scope [divr16u] 90,147.42: zp[2]:37 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 31,291: zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 20,002: zp[1]:162 [ divr16u::$1 ] 20,002: zp[1]:163 [ divr16u::$2 ] 16,540.12: zp[1]:43 [ divr16u::i#2 divr16u::i#1 ] 7,930.39: zp[2]:39 [ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ] 202: zp[2]:97 [ divr16u::return#2 ] 202: zp[2]:116 [ divr16u::return#3 ] 202: zp[2]:120 [ divr16u::return#4 ] 
Uplift Scope [print_char] 136,010: zp[1]:34 [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ] 
Uplift Scope [] 110,121.79: zp[2]:35 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ] 220.4: zp[2]:164 [ rem16u#0 ] 
Uplift Scope [mulu16_sel] 21,012: zp[2]:47 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ] 20,002: zp[4]:180 [ mulu16_sel::$0 ] 20,002: zp[4]:184 [ mulu16_sel::$1 ] 15,010.5: zp[2]:49 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ] 2,143.71: zp[2]:188 [ mulu16_sel::return#12 ] 2,002: zp[2]:134 [ mulu16_sel::return#0 ] 2,002: zp[2]:138 [ mulu16_sel::return#1 ] 2,002: zp[2]:142 [ mulu16_sel::return#2 ] 2,002: zp[2]:148 [ mulu16_sel::return#10 ] 2,002: zp[2]:152 [ mulu16_sel::return#11 ] 1,666.83: zp[1]:51 [ mulu16_sel::select#5 ] 
Uplift Scope [mulu8_sel] 21,012: zp[1]:44 [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ] 20,002: zp[2]:169 [ mulu8_sel::$0 ] 20,002: zp[2]:171 [ mulu8_sel::$1 ] 15,010.5: zp[1]:45 [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ] 2,143.71: zp[1]:173 [ mulu8_sel::return#12 ] 2,002: zp[1]:104 [ mulu8_sel::return#0 ] 2,002: zp[1]:106 [ mulu8_sel::return#1 ] 2,002: zp[1]:108 [ mulu8_sel::return#2 ] 2,002: zp[1]:111 [ mulu8_sel::return#10 ] 2,002: zp[1]:113 [ mulu8_sel::return#11 ] 1,666.83: zp[1]:46 [ mulu8_sel::select#5 ] 
Uplift Scope [sin8s] 11,061.5: zp[2]:21 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] 5,005: zp[1]:23 [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] 4,705: zp[1]:24 [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ] 2,002: zp[2]:101 [ sin8s::$4 ] 2,002: zp[1]:105 [ sin8s::x2#0 ] 2,002: zp[1]:109 [ sin8s::x3_6#0 ] 2,002: zp[1]:112 [ sin8s::x4#0 ] 2,002: zp[1]:114 [ sin8s::x5#0 ] 2,002: zp[1]:115 [ sin8s::x5_128#0 ] 500.5: zp[1]:107 [ sin8s::x3#0 ] 318.5: zp[1]:103 [ sin8s::x1#0 ] 202: zp[1]:82 [ sin8s::return#0 ] 166.83: zp[1]:110 [ sin8s::usinx#0 ] 27.81: zp[1]:20 [ sin8s::isUpper#10 ] 
Uplift Scope [print_str] 30,003: zp[2]:18 [ print_str::str#2 print_str::str#0 ] 
Uplift Scope [sin16s] 11,061.5: zp[4]:26 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] 4,705: zp[2]:30 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] 2,002: zp[4]:128 [ sin16s::$4 ] 2,002: zp[2]:136 [ sin16s::x2#0 ] 2,002: zp[2]:144 [ sin16s::x3_6#0 ] 2,002: zp[2]:150 [ sin16s::x4#0 ] 2,002: zp[2]:154 [ sin16s::x5#0 ] 2,002: zp[2]:156 [ sin16s::x5_128#0 ] 500.5: zp[2]:140 [ sin16s::x3#0 ] 500.5: zp[2]:158 [ sin16s::usinx#1 ] 318.5: zp[2]:132 [ sin16s::x1#0 ] 202: zp[2]:92 [ sin16s::return#0 ] 166.83: zp[2]:146 [ sin16s::usinx#0 ] 30.33: zp[1]:25 [ sin16s::isUpper#2 ] 
Uplift Scope [print_uchar] 2,002: zp[1]:160 [ print_uchar::$0 ] 2,002: zp[1]:161 [ print_uchar::$2 ] 525.75: zp[1]:96 [ print_uchar::b#0 ] 
Uplift Scope [memset] 3,336.67: zp[2]:32 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [sin16s_gen] 235.67: zp[2]:9 [ sin16s_gen::i#2 sin16s_gen::i#1 ] 202: zp[2]:94 [ sin16s_gen::$2 ] 138.88: zp[4]:11 [ sin16s_gen::x#2 sin16s_gen::x#1 ] 110.62: zp[2]:15 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ] 10.18: zp[4]:88 [ sin16s_gen::step#0 ] 
Uplift Scope [sin8s_gen] 235.67: zp[2]:3 [ sin8s_gen::i#2 sin8s_gen::i#1 ] 202: zp[1]:83 [ sin8s_gen::$2 ] 138.88: zp[2]:5 [ sin8s_gen::x#2 sin8s_gen::x#1 ] 110.62: zp[2]:7 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] 10.18: zp[2]:80 [ sin8s_gen::step#0 ] 
Uplift Scope [print_schar] 456.33: zp[1]:17 [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ] 
Uplift Scope [div32u16u] 202: zp[2]:122 [ div32u16u::quotient_lo#0 ] 40.4: zp[2]:118 [ div32u16u::quotient_hi#0 ] 37.33: zp[4]:124 [ div32u16u::return#0 ] 22: zp[4]:84 [ div32u16u::return#2 ] 
Uplift Scope [main] 22: zp[2]:68 [ main::$10 ] 22: zp[2]:70 [ main::$9 ] 22: zp[2]:72 [ main::$3 ] 22: zp[2]:74 [ main::sw#0 ] 22: zp[1]:77 [ main::sd#0 ] 19.25: zp[1]:2 [ main::i#2 main::i#1 ] 11: zp[1]:76 [ main::$11 ] 3.67: zp[1]:67 [ main::sb#0 ] 
Uplift Scope [div16u] 37.33: zp[2]:99 [ div16u::return#0 ] 22: zp[2]:78 [ div16u::return#2 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_cls] 

Uplifting [mul8u] best 34700 combination zp[2]:53 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] zp[2]:55 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] reg byte a [ mul8u::$1 ] reg byte x [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] zp[2]:167 [ mul8u::return#2 ] reg byte a [ mul8u::b#0 ] 
Uplifting [mul16u] best 34100 combination zp[4]:59 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] zp[4]:63 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] reg byte a [ mul16u::$1 ] zp[2]:57 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] zp[4]:176 [ mul16u::return#2 ] zp[2]:174 [ mul16u::b#0 ] 
Uplifting [divr16u] best 33890 combination zp[2]:37 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp[2]:39 [ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ] zp[2]:97 [ divr16u::return#2 ] zp[2]:116 [ divr16u::return#3 ] zp[2]:120 [ divr16u::return#4 ] 
Uplifting [print_char] best 33575 combination reg byte a [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ] 
Uplifting [] best 33575 combination zp[2]:35 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ] zp[2]:164 [ rem16u#0 ] 
Uplifting [mulu16_sel] best 33557 combination zp[2]:47 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ] zp[4]:180 [ mulu16_sel::$0 ] zp[4]:184 [ mulu16_sel::$1 ] zp[2]:49 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ] zp[2]:188 [ mulu16_sel::return#12 ] zp[2]:134 [ mulu16_sel::return#0 ] zp[2]:138 [ mulu16_sel::return#1 ] zp[2]:142 [ mulu16_sel::return#2 ] zp[2]:148 [ mulu16_sel::return#10 ] zp[2]:152 [ mulu16_sel::return#11 ] reg byte x [ mulu16_sel::select#5 ] 
Uplifting [mulu8_sel] best 33499 combination reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ] zp[2]:169 [ mulu8_sel::$0 ] zp[2]:171 [ mulu8_sel::$1 ] reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ] reg byte a [ mulu8_sel::return#12 ] reg byte a [ mulu8_sel::return#0 ] zp[1]:106 [ mulu8_sel::return#1 ] zp[1]:108 [ mulu8_sel::return#2 ] zp[1]:111 [ mulu8_sel::return#10 ] zp[1]:113 [ mulu8_sel::return#11 ] zp[1]:46 [ mulu8_sel::select#5 ] 
Limited combination testing to 100 combinations of 196608 possible.
Uplifting [sin8s] best 33446 combination zp[2]:21 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ] reg byte a [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ] zp[2]:101 [ sin8s::$4 ] reg byte a [ sin8s::x2#0 ] reg byte a [ sin8s::x3_6#0 ] zp[1]:112 [ sin8s::x4#0 ] zp[1]:114 [ sin8s::x5#0 ] zp[1]:115 [ sin8s::x5_128#0 ] zp[1]:107 [ sin8s::x3#0 ] zp[1]:103 [ sin8s::x1#0 ] zp[1]:82 [ sin8s::return#0 ] zp[1]:110 [ sin8s::usinx#0 ] zp[1]:20 [ sin8s::isUpper#10 ] 
Limited combination testing to 100 combinations of 5308416 possible.
Uplifting [print_str] best 33446 combination zp[2]:18 [ print_str::str#2 print_str::str#0 ] 
Uplifting [sin16s] best 33437 combination zp[4]:26 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ] zp[2]:30 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] zp[4]:128 [ sin16s::$4 ] zp[2]:136 [ sin16s::x2#0 ] zp[2]:144 [ sin16s::x3_6#0 ] zp[2]:150 [ sin16s::x4#0 ] zp[2]:154 [ sin16s::x5#0 ] zp[2]:156 [ sin16s::x5_128#0 ] zp[2]:140 [ sin16s::x3#0 ] zp[2]:158 [ sin16s::usinx#1 ] zp[2]:132 [ sin16s::x1#0 ] zp[2]:92 [ sin16s::return#0 ] zp[2]:146 [ sin16s::usinx#0 ] reg byte y [ sin16s::isUpper#2 ] 
Uplifting [print_uchar] best 33422 combination reg byte a [ print_uchar::$0 ] reg byte x [ print_uchar::$2 ] reg byte x [ print_uchar::b#0 ] 
Uplifting [memset] best 33422 combination zp[2]:32 [ memset::dst#2 memset::dst#1 ] 
Uplifting [sin16s_gen] best 33422 combination zp[2]:9 [ sin16s_gen::i#2 sin16s_gen::i#1 ] zp[2]:94 [ sin16s_gen::$2 ] zp[4]:11 [ sin16s_gen::x#2 sin16s_gen::x#1 ] zp[2]:15 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ] zp[4]:88 [ sin16s_gen::step#0 ] 
Uplifting [sin8s_gen] best 33362 combination zp[2]:3 [ sin8s_gen::i#2 sin8s_gen::i#1 ] reg byte a [ sin8s_gen::$2 ] zp[2]:5 [ sin8s_gen::x#2 sin8s_gen::x#1 ] zp[2]:7 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] zp[2]:80 [ sin8s_gen::step#0 ] 
Uplifting [print_schar] best 33326 combination reg byte x [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ] 
Uplifting [div32u16u] best 33326 combination zp[2]:122 [ div32u16u::quotient_lo#0 ] zp[2]:118 [ div32u16u::quotient_hi#0 ] zp[4]:124 [ div32u16u::return#0 ] zp[4]:84 [ div32u16u::return#2 ] 
Uplifting [main] best 33246 combination zp[2]:68 [ main::$10 ] zp[2]:70 [ main::$9 ] zp[2]:72 [ main::$3 ] zp[2]:74 [ main::sw#0 ] reg byte a [ main::sd#0 ] zp[1]:2 [ main::i#2 main::i#1 ] reg byte a [ main::$11 ] zp[1]:67 [ main::sb#0 ] 
Uplifting [div16u] best 33246 combination zp[2]:99 [ div16u::return#0 ] zp[2]:78 [ div16u::return#2 ] 
Uplifting [RADIX] best 33246 combination 
Uplifting [print_cls] best 33246 combination 
Attempting to uplift remaining variables inzp[1]:106 [ mulu8_sel::return#1 ]
Uplifting [mulu8_sel] best 33240 combination reg byte a [ mulu8_sel::return#1 ] 
Attempting to uplift remaining variables inzp[1]:108 [ mulu8_sel::return#2 ]
Uplifting [mulu8_sel] best 33234 combination reg byte a [ mulu8_sel::return#2 ] 
Attempting to uplift remaining variables inzp[1]:111 [ mulu8_sel::return#10 ]
Uplifting [mulu8_sel] best 33228 combination reg byte a [ mulu8_sel::return#10 ] 
Attempting to uplift remaining variables inzp[1]:112 [ sin8s::x4#0 ]
Uplifting [sin8s] best 33224 combination reg byte a [ sin8s::x4#0 ] 
Attempting to uplift remaining variables inzp[1]:113 [ mulu8_sel::return#11 ]
Uplifting [mulu8_sel] best 33218 combination reg byte a [ mulu8_sel::return#11 ] 
Attempting to uplift remaining variables inzp[1]:114 [ sin8s::x5#0 ]
Uplifting [sin8s] best 33212 combination reg byte a [ sin8s::x5#0 ] 
Attempting to uplift remaining variables inzp[1]:115 [ sin8s::x5_128#0 ]
Uplifting [sin8s] best 33206 combination reg byte a [ sin8s::x5_128#0 ] 
Attempting to uplift remaining variables inzp[1]:46 [ mulu8_sel::select#5 ]
Uplifting [mulu8_sel] best 33206 combination zp[1]:46 [ mulu8_sel::select#5 ] 
Attempting to uplift remaining variables inzp[1]:107 [ sin8s::x3#0 ]
Uplifting [sin8s] best 33206 combination zp[1]:107 [ sin8s::x3#0 ] 
Attempting to uplift remaining variables inzp[1]:103 [ sin8s::x1#0 ]
Uplifting [sin8s] best 33206 combination zp[1]:103 [ sin8s::x1#0 ] 
Attempting to uplift remaining variables inzp[1]:82 [ sin8s::return#0 ]
Uplifting [sin8s] best 33146 combination reg byte a [ sin8s::return#0 ] 
Attempting to uplift remaining variables inzp[1]:110 [ sin8s::usinx#0 ]
Uplifting [sin8s] best 33146 combination zp[1]:110 [ sin8s::usinx#0 ] 
Attempting to uplift remaining variables inzp[1]:20 [ sin8s::isUpper#10 ]
Uplifting [sin8s] best 33146 combination zp[1]:20 [ sin8s::isUpper#10 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 33146 combination zp[1]:2 [ main::i#2 main::i#1 ] 
Attempting to uplift remaining variables inzp[1]:67 [ main::sb#0 ]
Uplifting [main] best 33146 combination zp[1]:67 [ main::sb#0 ] 
Coalescing zero page register [ zp[2]:30 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 ] ] with [ zp[2]:158 [ sin16s::usinx#1 ] ] - score: 2
Coalescing zero page register [ zp[2]:37 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] with [ zp[2]:164 [ rem16u#0 ] ] - score: 2
Coalescing zero page register [ zp[2]:47 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 ] ] with [ zp[2]:140 [ sin16s::x3#0 ] ] - score: 2
Coalescing zero page register [ zp[2]:21 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 ] ] with [ zp[2]:101 [ sin8s::$4 ] ] - score: 1
Coalescing zero page register [ zp[2]:30 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 ] ] with [ zp[2]:92 [ sin16s::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp[2]:97 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 ] ] with [ zp[2]:116 [ divr16u::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 ] ] with [ zp[2]:120 [ divr16u::return#4 ] ] - score: 1
Coalescing zero page register [ zp[2]:47 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 ] ] with [ zp[2]:136 [ sin16s::x2#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:47 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 ] ] with [ zp[2]:150 [ sin16s::x4#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:49 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 ] ] with [ zp[2]:174 [ mul16u::b#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:53 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] ] with [ zp[2]:167 [ mul8u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[4]:59 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] ] with [ zp[4]:176 [ mul16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:68 [ main::$10 ] ] with [ zp[2]:70 [ main::$9 ] ] - score: 1
Coalescing zero page register [ zp[2]:72 [ main::$3 ] ] with [ zp[2]:74 [ main::sw#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:78 [ div16u::return#2 ] ] with [ zp[2]:80 [ sin8s_gen::step#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:78 [ div16u::return#2 sin8s_gen::step#0 ] ] with [ zp[2]:99 [ div16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:84 [ div32u16u::return#2 ] ] with [ zp[4]:88 [ sin16s_gen::step#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:84 [ div32u16u::return#2 sin16s_gen::step#0 ] ] with [ zp[4]:124 [ div32u16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:134 [ mulu16_sel::return#0 ] ] with [ zp[2]:188 [ mulu16_sel::return#12 ] ] - score: 1
Coalescing zero page register [ zp[2]:142 [ mulu16_sel::return#2 ] ] with [ zp[2]:144 [ sin16s::x3_6#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:152 [ mulu16_sel::return#11 ] ] with [ zp[2]:154 [ sin16s::x5#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:169 [ mulu8_sel::$0 ] ] with [ zp[2]:171 [ mulu8_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[4]:180 [ mulu16_sel::$0 ] ] with [ zp[4]:184 [ mulu16_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:30 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 ] ] with [ zp[2]:94 [ sin16s_gen::$2 ] ] - score: 1
Coalescing zero page register [ zp[2]:30 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s_gen::$2 ] ] with [ zp[2]:146 [ sin16s::usinx#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 divr16u::return#4 ] ] with [ zp[2]:78 [ div16u::return#2 sin8s_gen::step#0 div16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 divr16u::return#4 div16u::return#2 sin8s_gen::step#0 div16u::return#0 ] ] with [ zp[2]:122 [ div32u16u::quotient_lo#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:47 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 ] ] with [ zp[2]:138 [ mulu16_sel::return#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:47 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 ] ] with [ zp[2]:148 [ mulu16_sel::return#10 ] ] - score: 1
Coalescing zero page register [ zp[2]:53 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 ] ] with [ zp[2]:169 [ mulu8_sel::$0 mulu8_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[4]:59 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#2 ] ] with [ zp[4]:180 [ mulu16_sel::$0 mulu16_sel::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:68 [ main::$10 main::$9 ] ] with [ zp[2]:72 [ main::$3 main::sw#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:134 [ mulu16_sel::return#0 mulu16_sel::return#12 ] ] with [ zp[2]:142 [ mulu16_sel::return#2 sin16s::x3_6#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:134 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 ] ] with [ zp[2]:152 [ mulu16_sel::return#11 sin16s::x5#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:134 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 ] ] with [ zp[2]:156 [ sin16s::x5_128#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:9 [ sin16s_gen::i#2 sin16s_gen::i#1 ] ] with [ zp[2]:3 [ sin8s_gen::i#2 sin8s_gen::i#1 ] ]
Coalescing zero page register [ zp[2]:15 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 ] ] with [ zp[2]:5 [ sin8s_gen::x#2 sin8s_gen::x#1 ] ]
Coalescing zero page register [ zp[2]:18 [ print_str::str#2 print_str::str#0 ] ] with [ zp[2]:7 [ sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] ]
Coalescing zero page register [ zp[2]:30 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s_gen::$2 sin16s::usinx#0 ] ] with [ zp[2]:21 [ sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 sin8s::$4 ] ]
Coalescing zero page register [ zp[2]:35 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 ] ] with [ zp[2]:32 [ memset::dst#2 memset::dst#1 ] ]
Coalescing zero page register [ zp[2]:47 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 ] ] with [ zp[2]:37 [ divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 ] ]
Coalescing zero page register [ zp[2]:49 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 mul16u::b#0 ] ] with [ zp[2]:39 [ divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ] ]
Coalescing zero page register [ zp[2]:57 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] ] with [ zp[2]:41 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 divr16u::return#4 div16u::return#2 sin8s_gen::step#0 div16u::return#0 div32u16u::quotient_lo#0 ] ]
Coalescing zero page register [ zp[1]:67 [ main::sb#0 ] ] with [ zp[1]:20 [ sin8s::isUpper#10 ] ]
Coalescing zero page register [ zp[2]:68 [ main::$10 main::$9 main::$3 main::sw#0 ] ] with [ zp[2]:53 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mulu8_sel::$0 mulu8_sel::$1 ] ]
Coalescing zero page register [ zp[2]:118 [ div32u16u::quotient_hi#0 ] ] with [ zp[2]:55 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ] ]
Coalescing zero page register [ zp[4]:128 [ sin16s::$4 ] ] with [ zp[4]:59 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#2 mulu16_sel::$0 mulu16_sel::$1 ] ]
Coalescing zero page register [ zp[2]:35 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 memset::dst#2 memset::dst#1 ] ] with [ zp[2]:9 [ sin16s_gen::i#2 sin16s_gen::i#1 sin8s_gen::i#2 sin8s_gen::i#1 ] ]
Coalescing zero page register [ zp[2]:68 [ main::$10 main::$9 main::$3 main::sw#0 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mulu8_sel::$0 mulu8_sel::$1 ] ] with [ zp[2]:47 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 ] ]
Coalescing zero page register [ zp[2]:132 [ sin16s::x1#0 ] ] with [ zp[2]:18 [ print_str::str#2 print_str::str#0 sin8s_gen::sintab#2 sin8s_gen::sintab#0 ] ]
Coalescing zero page register [ zp[2]:134 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 ] ] with [ zp[2]:57 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 divr16u::return#4 div16u::return#2 sin8s_gen::step#0 div16u::return#0 div32u16u::quotient_lo#0 ] ]
Allocated (was zp[4]:11) zp[4]:3 [ sin16s_gen::x#2 sin16s_gen::x#1 ]
Allocated (was zp[2]:15) zp[2]:7 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 sin8s_gen::x#2 sin8s_gen::x#1 ]
Allocated (was zp[4]:26) zp[4]:9 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
Allocated (was zp[2]:30) zp[2]:13 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s_gen::$2 sin16s::usinx#0 sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 sin8s::$4 ]
Allocated (was zp[2]:35) zp[2]:15 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 memset::dst#2 memset::dst#1 sin16s_gen::i#2 sin16s_gen::i#1 sin8s_gen::i#2 sin8s_gen::i#1 ]
Allocated (was zp[1]:46) zp[1]:17 [ mulu8_sel::select#5 ]
Allocated (was zp[2]:49) zp[2]:18 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 mul16u::b#0 divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ]
Allocated (was zp[4]:63) zp[4]:20 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated (was zp[1]:67) zp[1]:24 [ main::sb#0 sin8s::isUpper#10 ]
Allocated (was zp[2]:68) zp[2]:25 [ main::$10 main::$9 main::$3 main::sw#0 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mulu8_sel::$0 mulu8_sel::$1 mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 ]
Allocated (was zp[4]:84) zp[4]:27 [ div32u16u::return#2 sin16s_gen::step#0 div32u16u::return#0 ]
Allocated (was zp[1]:103) zp[1]:31 [ sin8s::x1#0 ]
Allocated (was zp[1]:107) zp[1]:32 [ sin8s::x3#0 ]
Allocated (was zp[1]:110) zp[1]:33 [ sin8s::usinx#0 ]
Allocated (was zp[2]:118) zp[2]:34 [ div32u16u::quotient_hi#0 mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
Allocated (was zp[4]:128) zp[4]:36 [ sin16s::$4 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#2 mulu16_sel::$0 mulu16_sel::$1 ]
Allocated (was zp[2]:132) zp[2]:40 [ sin16s::x1#0 print_str::str#2 print_str::str#0 sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
Allocated (was zp[2]:134) zp[2]:42 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 mul16u::a#2 mul16u::a#1 mul16u::a#0 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 divr16u::return#4 div16u::return#2 sin8s_gen::step#0 div16u::return#0 div32u16u::quotient_lo#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Sine Generator functions using only multiplication, addition and bit shifting
// Uses a single division for converting the wavelength to a reciprocal.
// Generates sine using the series sin(x) = x - x^/3! + x^-5! - x^7/7! ...
// Uses the approximation sin(x) = x - x^/6 + x^/128
// Optimization possibility: Use symmetries when generating sine tables. wavelength%2==0 -> mirror symmetry over PI, wavelength%4==0 -> mirror symmetry over PI/2.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .const SIZEOF_SIGNED_WORD = 2
  .label print_screen = $400
  // Remainder after unsigned 16-bit division
  .label rem16u = $19
  .label print_char_cursor = $f
  // main
main: {
    .label wavelength = $c0
    .label __3 = $19
    .label __9 = $19
    .label __10 = $19
    .label sb = $18
    .label sw = $19
    .label i = 2
    // [1] call sin8s_gen 
    // [21] phi from main to sin8s_gen [phi:main->sin8s_gen]
  sin8s_gen_from_main:
    jsr sin8s_gen
    // [2] phi from main to main::@2 [phi:main->main::@2]
  __b2_from_main:
    jmp __b2
    // main::@2
  __b2:
    // [3] call sin16s_gen 
    // [36] phi from main::@2 to sin16s_gen [phi:main::@2->sin16s_gen]
  sin16s_gen_from___b2:
    jsr sin16s_gen
    // [4] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [5] call print_cls 
    // [51] phi from main::@3 to print_cls [phi:main::@3->print_cls]
  print_cls_from___b3:
    jsr print_cls
    // [6] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [6] phi print_char_cursor#45 = print_screen#0 [phi:main::@3->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [6] phi main::i#2 = 0 [phi:main::@3->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [6] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [6] phi print_char_cursor#45 = print_char_cursor#10 [phi:main::@5->main::@1#0] -- register_copy 
    // [6] phi main::i#2 = main::i#1 [phi:main::@5->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [7] main::sb#0 = main::sintabb[main::i#2] -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda sintabb,y
    sta.z sb
    // [8] main::$10 = (word)main::i#2 -- vwuz1=_word_vbuz2 
    lda.z i
    sta.z __10
    lda #0
    sta.z __10+1
    // [9] main::$9 = main::$10 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z __9
    rol.z __9+1
    // [10] main::$3 = main::sintabw + main::$9 -- pwsz1=pwsc1_plus_vwuz1 
    clc
    lda.z __3
    adc #<sintabw
    sta.z __3
    lda.z __3+1
    adc #>sintabw
    sta.z __3+1
    // [11] main::sw#0 = *main::$3 -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (sw),y
    pha
    iny
    lda (sw),y
    sta.z sw+1
    pla
    sta.z sw
    // [12] main::$11 = > main::sw#0 -- vbuaa=_hi_vwsz1 
    lda.z sw+1
    // [13] main::sd#0 = main::sb#0 - (signed byte)main::$11 -- vbsaa=vbsz1_minus_vbsaa 
    eor #$ff
    sec
    adc.z sb
    // [14] print_schar::b#1 = main::sd#0 -- vbsxx=vbsaa 
    tax
    // [15] call print_schar 
    jsr print_schar
    // [16] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  __b4_from___b1:
    jmp __b4
    // main::@4
  __b4:
    // [17] call print_str 
    // [64] phi from main::@4 to print_str [phi:main::@4->print_str]
  print_str_from___b4:
    jsr print_str
    jmp __b5
    // main::@5
  __b5:
    // [18] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [19] if(main::i#1!=$c0) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c0
    cmp.z i
    bne __b1_from___b5
    jmp __breturn
    // main::@return
  __breturn:
    // [20] return 
    rts
    sintabb: .fill $c0, 0
    sintabw: .fill 2*$c0, 0
    str: .text "  "
    .byte 0
}
  // sin8s_gen
// Generate signed char sine table - on the full -$7f - $7f range
// sintab - the table to generate into
// wavelength - the number of sine points in a total sine wavelength (the size of the table)
// sin8s_gen(signed byte* zp($28) sintab)
sin8s_gen: {
    .label step = $2a
    .label sintab = $28
    // u[4.12]
    // Iterate over the table
    .label x = 7
    .label i = $f
    // [22] call div16u 
    // [71] phi from sin8s_gen to div16u [phi:sin8s_gen->div16u]
  div16u_from_sin8s_gen:
    jsr div16u
    // [23] div16u::return#2 = div16u::return#0
    jmp __b3
    // sin8s_gen::@3
  __b3:
    // [24] sin8s_gen::step#0 = div16u::return#2
    // [25] phi from sin8s_gen::@3 to sin8s_gen::@1 [phi:sin8s_gen::@3->sin8s_gen::@1]
  __b1_from___b3:
    // [25] phi sin8s_gen::sintab#2 = main::sintabb [phi:sin8s_gen::@3->sin8s_gen::@1#0] -- pbsz1=pbsc1 
    lda #<main.sintabb
    sta.z sintab
    lda #>main.sintabb
    sta.z sintab+1
    // [25] phi sin8s_gen::x#2 = 0 [phi:sin8s_gen::@3->sin8s_gen::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    // [25] phi sin8s_gen::i#2 = 0 [phi:sin8s_gen::@3->sin8s_gen::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // u[4.12]
    // sin8s_gen::@1
  __b1:
    // [26] if(sin8s_gen::i#2<main::wavelength) goto sin8s_gen::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.wavelength
    bcc __b2
    bne !+
    lda.z i
    cmp #<main.wavelength
    bcc __b2
  !:
    jmp __breturn
    // sin8s_gen::@return
  __breturn:
    // [27] return 
    rts
    // sin8s_gen::@2
  __b2:
    // [28] sin8s::x#0 = sin8s_gen::x#2 -- vwuz1=vwuz2 
    lda.z x
    sta.z sin8s.x
    lda.z x+1
    sta.z sin8s.x+1
    // [29] call sin8s 
    jsr sin8s
    // [30] sin8s::return#0 = sin8s::return#1
    jmp __b4
    // sin8s_gen::@4
  __b4:
    // [31] sin8s_gen::$2 = sin8s::return#0
    // [32] *sin8s_gen::sintab#2 = sin8s_gen::$2 -- _deref_pbsz1=vbsaa 
    ldy #0
    sta (sintab),y
    // [33] sin8s_gen::sintab#0 = ++ sin8s_gen::sintab#2 -- pbsz1=_inc_pbsz1 
    inc.z sintab
    bne !+
    inc.z sintab+1
  !:
    // [34] sin8s_gen::x#1 = sin8s_gen::x#2 + sin8s_gen::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    // [35] sin8s_gen::i#1 = ++ sin8s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [25] phi from sin8s_gen::@4 to sin8s_gen::@1 [phi:sin8s_gen::@4->sin8s_gen::@1]
  __b1_from___b4:
    // [25] phi sin8s_gen::sintab#2 = sin8s_gen::sintab#0 [phi:sin8s_gen::@4->sin8s_gen::@1#0] -- register_copy 
    // [25] phi sin8s_gen::x#2 = sin8s_gen::x#1 [phi:sin8s_gen::@4->sin8s_gen::@1#1] -- register_copy 
    // [25] phi sin8s_gen::i#2 = sin8s_gen::i#1 [phi:sin8s_gen::@4->sin8s_gen::@1#2] -- register_copy 
    jmp __b1
}
  // sin16s_gen
// Generate signed (large) unsigned int sine table - on the full -$7fff - $7fff range
// sintab - the table to generate into
// wavelength - the number of sine points in a total sine wavelength (the size of the table)
// sin16s_gen(signed word* zp(7) sintab)
sin16s_gen: {
    .label __2 = $d
    .label step = $1b
    .label sintab = 7
    // u[4.28]
    // Iterate over the table
    .label x = 3
    .label i = $f
    // [37] call div32u16u 
    // [119] phi from sin16s_gen to div32u16u [phi:sin16s_gen->div32u16u]
  div32u16u_from_sin16s_gen:
    jsr div32u16u
    // [38] div32u16u::return#2 = div32u16u::return#0
    jmp __b3
    // sin16s_gen::@3
  __b3:
    // [39] sin16s_gen::step#0 = div32u16u::return#2
    // [40] phi from sin16s_gen::@3 to sin16s_gen::@1 [phi:sin16s_gen::@3->sin16s_gen::@1]
  __b1_from___b3:
    // [40] phi sin16s_gen::sintab#2 = main::sintabw [phi:sin16s_gen::@3->sin16s_gen::@1#0] -- pwsz1=pwsc1 
    lda #<main.sintabw
    sta.z sintab
    lda #>main.sintabw
    sta.z sintab+1
    // [40] phi sin16s_gen::x#2 = 0 [phi:sin16s_gen::@3->sin16s_gen::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    lda #<0>>$10
    sta.z x+2
    lda #>0>>$10
    sta.z x+3
    // [40] phi sin16s_gen::i#2 = 0 [phi:sin16s_gen::@3->sin16s_gen::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // u[4.28]
    // sin16s_gen::@1
  __b1:
    // [41] if(sin16s_gen::i#2<main::wavelength) goto sin16s_gen::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.wavelength
    bcc __b2
    bne !+
    lda.z i
    cmp #<main.wavelength
    bcc __b2
  !:
    jmp __breturn
    // sin16s_gen::@return
  __breturn:
    // [42] return 
    rts
    // sin16s_gen::@2
  __b2:
    // [43] sin16s::x#0 = sin16s_gen::x#2 -- vduz1=vduz2 
    lda.z x
    sta.z sin16s.x
    lda.z x+1
    sta.z sin16s.x+1
    lda.z x+2
    sta.z sin16s.x+2
    lda.z x+3
    sta.z sin16s.x+3
    // [44] call sin16s 
    jsr sin16s
    // [45] sin16s::return#0 = sin16s::return#1
    jmp __b4
    // sin16s_gen::@4
  __b4:
    // [46] sin16s_gen::$2 = sin16s::return#0
    // [47] *sin16s_gen::sintab#2 = sin16s_gen::$2 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda.z __2
    sta (sintab),y
    iny
    lda.z __2+1
    sta (sintab),y
    // [48] sin16s_gen::sintab#0 = sin16s_gen::sintab#2 + SIZEOF_SIGNED_WORD -- pwsz1=pwsz1_plus_vbuc1 
    lda #SIZEOF_SIGNED_WORD
    clc
    adc.z sintab
    sta.z sintab
    bcc !+
    inc.z sintab+1
  !:
    // [49] sin16s_gen::x#1 = sin16s_gen::x#2 + sin16s_gen::step#0 -- vduz1=vduz1_plus_vduz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    lda.z x+2
    adc.z step+2
    sta.z x+2
    lda.z x+3
    adc.z step+3
    sta.z x+3
    // [50] sin16s_gen::i#1 = ++ sin16s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [40] phi from sin16s_gen::@4 to sin16s_gen::@1 [phi:sin16s_gen::@4->sin16s_gen::@1]
  __b1_from___b4:
    // [40] phi sin16s_gen::sintab#2 = sin16s_gen::sintab#0 [phi:sin16s_gen::@4->sin16s_gen::@1#0] -- register_copy 
    // [40] phi sin16s_gen::x#2 = sin16s_gen::x#1 [phi:sin16s_gen::@4->sin16s_gen::@1#1] -- register_copy 
    // [40] phi sin16s_gen::i#2 = sin16s_gen::i#1 [phi:sin16s_gen::@4->sin16s_gen::@1#2] -- register_copy 
    jmp __b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [52] call memset 
    // [169] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [53] return 
    rts
}
  // print_schar
// Print a signed char as HEX
// print_schar(signed byte register(X) b)
print_schar: {
    // [54] if(print_schar::b#1<0) goto print_schar::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1_from_print_schar
    // [55] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
  __b3_from_print_schar:
    jmp __b3
    // print_schar::@3
  __b3:
    // [56] call print_char 
    // [175] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
  print_char_from___b3:
    // [175] phi print_char_cursor#29 = print_char_cursor#45 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [175] phi print_char::ch#5 = ' ' [phi:print_schar::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [57] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [57] phi print_schar::b#4 = print_schar::b#1 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    jmp __b2
    // print_schar::@2
  __b2:
    // [58] print_uchar::b#0 = (byte)print_schar::b#4
    // [59] call print_uchar 
    jsr print_uchar
    jmp __breturn
    // print_schar::@return
  __breturn:
    // [60] return 
    rts
    // [61] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
  __b1_from_print_schar:
    jmp __b1
    // print_schar::@1
  __b1:
    // [62] call print_char 
    // [175] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
  print_char_from___b1:
    // [175] phi print_char_cursor#29 = print_char_cursor#45 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [175] phi print_char::ch#5 = '-' [phi:print_schar::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_schar::@4
  __b4:
    // [63] print_schar::b#0 = - print_schar::b#1 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    jmp __b2_from___b4
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($28) str)
print_str: {
    .label str = $28
    // [65] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  __b1_from_print_str:
    // [65] phi print_str::str#2 = main::str [phi:print_str->print_str::@1#0] -- pbuz1=pbuc1 
    lda #<main.str
    sta.z str
    lda #>main.str
    sta.z str+1
    jmp __b1
    // print_str::@1
  __b1:
    // [66] if(0!=*print_str::str#2) goto print_str::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [67] return 
    rts
    // print_str::@2
  __b2:
    // [68] print_char::ch#0 = *print_str::str#2 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [69] call print_char 
    // [175] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [175] phi print_char_cursor#29 = print_char_cursor#10 [phi:print_str::@2->print_char#0] -- register_copy 
    // [175] phi print_char::ch#5 = print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [70] print_str::str#0 = ++ print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [65] phi from print_str::@3 to print_str::@1 [phi:print_str::@3->print_str::@1]
  __b1_from___b3:
    // [65] phi print_str::str#2 = print_str::str#0 [phi:print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
}
  // div16u
// Performs division on two 16 bit unsigned ints
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $2a
    // [72] call divr16u 
    // [186] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    // [186] phi divr16u::dividend#6 = PI2_u4f12 [phi:div16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta.z divr16u.dividend
    lda #>PI2_u4f12
    sta.z divr16u.dividend+1
    // [186] phi divr16u::rem#11 = 0 [phi:div16u->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z divr16u.rem
    lda #>0
    sta.z divr16u.rem+1
    jsr divr16u
    // [73] divr16u::return#2 = divr16u::return#0
    jmp __b1
    // div16u::@1
  __b1:
    // [74] div16u::return#0 = divr16u::return#2
    jmp __breturn
    // div16u::@return
  __breturn:
    // [75] return 
    rts
}
  // sin8s
// Calculate signed char sine sin(x)
// x: unsigned int input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed char sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zp($d) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label __4 = $d
    .label x = $d
    .label x1 = $1f
    .label x3 = $20
    .label usinx = $21
    // Move x1 into the range 0-PI/2 using sine mirror symmetries
    .label isUpper = $18
    // [76] if(sin8s::x#0<PI_u4f12) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_u4f12
    bcc __b1_from_sin8s
    bne !+
    lda.z x
    cmp #<PI_u4f12
    bcc __b1_from_sin8s
  !:
    jmp __b5
    // sin8s::@5
  __b5:
    // [77] sin8s::x#1 = sin8s::x#0 - PI_u4f12 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x
    sec
    sbc #<PI_u4f12
    sta.z x
    lda.z x+1
    sbc #>PI_u4f12
    sta.z x+1
    // [78] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
  __b1_from___b5:
    // [78] phi sin8s::isUpper#10 = 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z isUpper
    // [78] phi sin8s::x#4 = sin8s::x#1 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp __b1
    // [78] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  __b1_from_sin8s:
    // [78] phi sin8s::isUpper#10 = 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z isUpper
    // [78] phi sin8s::x#4 = sin8s::x#0 [phi:sin8s->sin8s::@1#1] -- register_copy 
    jmp __b1
    // sin8s::@1
  __b1:
    // [79] if(sin8s::x#4<PI_HALF_u4f12) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_HALF_u4f12
    bcc __b2_from___b1
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f12
    bcc __b2_from___b1
  !:
    jmp __b6
    // sin8s::@6
  __b6:
    // [80] sin8s::x#2 = PI_u4f12 - sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc.z x
    sta.z x
    lda #>PI_u4f12
    sbc.z x+1
    sta.z x+1
    // [81] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
  __b2_from___b1:
  __b2_from___b6:
    // [81] phi sin8s::x#6 = sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    jmp __b2
    // sin8s::@2
  __b2:
    // [82] sin8s::$4 = sin8s::x#6 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    // [83] sin8s::x1#0 = > sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda.z __4+1
    sta.z x1
    // [84] mulu8_sel::v1#0 = sin8s::x1#0 -- vbuxx=vbuz1 
    ldx.z x1
    // [85] mulu8_sel::v2#0 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [86] call mulu8_sel 
    // [204] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
  mulu8_sel_from___b2:
    // [204] phi mulu8_sel::select#5 = 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [204] phi mulu8_sel::v2#5 = mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
    // [204] phi mulu8_sel::v1#5 = mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [87] mulu8_sel::return#0 = mulu8_sel::return#12
    jmp __b9
    // sin8s::@9
  __b9:
    // [88] sin8s::x2#0 = mulu8_sel::return#0
    // [89] mulu8_sel::v1#1 = sin8s::x2#0 -- vbuxx=vbuaa 
    tax
    // [90] mulu8_sel::v2#1 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [91] call mulu8_sel 
    // [204] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
  mulu8_sel_from___b9:
    // [204] phi mulu8_sel::select#5 = 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [204] phi mulu8_sel::v2#5 = mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
    // [204] phi mulu8_sel::v1#5 = mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [92] mulu8_sel::return#1 = mulu8_sel::return#12
    jmp __b10
    // sin8s::@10
  __b10:
    // [93] sin8s::x3#0 = mulu8_sel::return#1 -- vbuz1=vbuaa 
    sta.z x3
    // [94] mulu8_sel::v1#2 = sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [95] call mulu8_sel 
    // [204] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
  mulu8_sel_from___b10:
    // [204] phi mulu8_sel::select#5 = 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [204] phi mulu8_sel::v2#5 = sin8s::DIV_6 [phi:sin8s::@10->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
    // [204] phi mulu8_sel::v1#5 = mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [96] mulu8_sel::return#2 = mulu8_sel::return#12
    jmp __b11
    // sin8s::@11
  __b11:
    // [97] sin8s::x3_6#0 = mulu8_sel::return#2
    // [98] sin8s::usinx#0 = sin8s::x1#0 - sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc.z x1
    sta.z usinx
    // [99] mulu8_sel::v1#3 = sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [100] mulu8_sel::v2#3 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [101] call mulu8_sel 
    // [204] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
  mulu8_sel_from___b11:
    // [204] phi mulu8_sel::select#5 = 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [204] phi mulu8_sel::v2#5 = mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
    // [204] phi mulu8_sel::v1#5 = mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [102] mulu8_sel::return#10 = mulu8_sel::return#12
    jmp __b12
    // sin8s::@12
  __b12:
    // [103] sin8s::x4#0 = mulu8_sel::return#10
    // [104] mulu8_sel::v1#4 = sin8s::x4#0 -- vbuxx=vbuaa 
    tax
    // [105] mulu8_sel::v2#4 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [106] call mulu8_sel 
    // [204] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
  mulu8_sel_from___b12:
    // [204] phi mulu8_sel::select#5 = 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [204] phi mulu8_sel::v2#5 = mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
    // [204] phi mulu8_sel::v1#5 = mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // [107] mulu8_sel::return#11 = mulu8_sel::return#12
    jmp __b13
    // sin8s::@13
  __b13:
    // [108] sin8s::x5#0 = mulu8_sel::return#11
    // [109] sin8s::x5_128#0 = sin8s::x5#0 >> 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // [110] sin8s::usinx#1 = sin8s::usinx#0 + sin8s::x5_128#0 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc.z usinx
    tax
    // [111] if(sin8s::usinx#1<$80) goto sin8s::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc __b3_from___b13
    jmp __b7
    // sin8s::@7
  __b7:
    // [112] sin8s::usinx#2 = -- sin8s::usinx#1 -- vbuxx=_dec_vbuxx 
    dex
    // [113] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
  __b3_from___b13:
  __b3_from___b7:
    // [113] phi sin8s::usinx#4 = sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    jmp __b3
    // sin8s::@3
  __b3:
    // [114] if(sin8s::isUpper#10==0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda.z isUpper
    cmp #0
    beq __b14
    jmp __b8
    // sin8s::@8
  __b8:
    // [115] sin8s::sinx#1 = - (signed byte)sin8s::usinx#4 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    // [116] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
  __b4_from___b14:
  __b4_from___b8:
    // [116] phi sin8s::return#1 = sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    jmp __b4
    // sin8s::@4
  __b4:
    jmp __breturn
    // sin8s::@return
  __breturn:
    // [117] return 
    rts
    // sin8s::@14
  __b14:
    // [118] sin8s::return#5 = (signed byte)sin8s::usinx#4 -- vbsaa=vbsxx 
    txa
    jmp __b4_from___b14
}
  // div32u16u
// Divide unsigned 32-bit unsigned long dividend with a 16-bit unsigned int divisor
// The 16-bit unsigned int remainder can be found in rem16u after the division
div32u16u: {
    .label quotient_hi = $22
    .label quotient_lo = $2a
    .label return = $1b
    // [120] call divr16u 
    // [186] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
  divr16u_from_div32u16u:
    // [186] phi divr16u::dividend#6 = >PI2_u4f28 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta.z divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta.z divr16u.dividend+1
    // [186] phi divr16u::rem#11 = 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z divr16u.rem
    lda #>0
    sta.z divr16u.rem+1
    jsr divr16u
    // [121] divr16u::return#3 = divr16u::return#0
    jmp __b1
    // div32u16u::@1
  __b1:
    // [122] div32u16u::quotient_hi#0 = divr16u::return#3 -- vwuz1=vwuz2 
    lda.z divr16u.return
    sta.z quotient_hi
    lda.z divr16u.return+1
    sta.z quotient_hi+1
    // [123] divr16u::rem#5 = rem16u#0
    // [124] call divr16u 
    // [186] phi from div32u16u::@1 to divr16u [phi:div32u16u::@1->divr16u]
  divr16u_from___b1:
    // [186] phi divr16u::dividend#6 = <PI2_u4f28 [phi:div32u16u::@1->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta.z divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta.z divr16u.dividend+1
    // [186] phi divr16u::rem#11 = divr16u::rem#5 [phi:div32u16u::@1->divr16u#1] -- register_copy 
    jsr divr16u
    // [125] divr16u::return#4 = divr16u::return#0
    jmp __b2
    // div32u16u::@2
  __b2:
    // [126] div32u16u::quotient_lo#0 = divr16u::return#4
    // [127] div32u16u::return#0 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda.z quotient_hi
    sta.z return+2
    lda.z quotient_hi+1
    sta.z return+3
    lda.z quotient_lo
    sta.z return
    lda.z quotient_lo+1
    sta.z return+1
    jmp __breturn
    // div32u16u::@return
  __breturn:
    // [128] return 
    rts
}
  // sin16s
// Calculate signed int sine sin(x)
// x: unsigned long input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed int sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16s(dword zp(9) x)
sin16s: {
    .label __4 = $24
    .label x = 9
    .label return = $d
    .label x1 = $28
    .label x2 = $19
    .label x3 = $19
    .label x3_6 = $2a
    .label usinx = $d
    .label x4 = $19
    .label x5 = $2a
    .label x5_128 = $2a
    .label sinx = $d
    // [129] if(sin16s::x#0<PI_u4f28) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda.z x+3
    cmp #>PI_u4f28>>$10
    bcc __b1_from_sin16s
    bne !+
    lda.z x+2
    cmp #<PI_u4f28>>$10
    bcc __b1_from_sin16s
    bne !+
    lda.z x+1
    cmp #>PI_u4f28
    bcc __b1_from_sin16s
    bne !+
    lda.z x
    cmp #<PI_u4f28
    bcc __b1_from_sin16s
  !:
    jmp __b4
    // sin16s::@4
  __b4:
    // [130] sin16s::x#1 = sin16s::x#0 - PI_u4f28 -- vduz1=vduz1_minus_vduc1 
    lda.z x
    sec
    sbc #<PI_u4f28
    sta.z x
    lda.z x+1
    sbc #>PI_u4f28
    sta.z x+1
    lda.z x+2
    sbc #<PI_u4f28>>$10
    sta.z x+2
    lda.z x+3
    sbc #>PI_u4f28>>$10
    sta.z x+3
    // [131] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
  __b1_from___b4:
    // [131] phi sin16s::isUpper#2 = 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuyy=vbuc1 
    ldy #1
    // [131] phi sin16s::x#4 = sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp __b1
    // [131] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  __b1_from_sin16s:
    // [131] phi sin16s::isUpper#2 = 0 [phi:sin16s->sin16s::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [131] phi sin16s::x#4 = sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
    jmp __b1
    // sin16s::@1
  __b1:
    // [132] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda.z x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc __b2_from___b1
    bne !+
    lda.z x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc __b2_from___b1
    bne !+
    lda.z x+1
    cmp #>PI_HALF_u4f28
    bcc __b2_from___b1
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f28
    bcc __b2_from___b1
  !:
    jmp __b5
    // sin16s::@5
  __b5:
    // [133] sin16s::x#2 = PI_u4f28 - sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc.z x
    sta.z x
    lda #>PI_u4f28
    sbc.z x+1
    sta.z x+1
    lda #<PI_u4f28>>$10
    sbc.z x+2
    sta.z x+2
    lda #>PI_u4f28>>$10
    sbc.z x+3
    sta.z x+3
    // [134] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
  __b2_from___b1:
  __b2_from___b5:
    // [134] phi sin16s::x#6 = sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
    jmp __b2
    // sin16s::@2
  __b2:
    // [135] sin16s::$4 = sin16s::x#6 << 3 -- vduz1=vduz2_rol_3 
    lda.z x
    asl
    sta.z __4
    lda.z x+1
    rol
    sta.z __4+1
    lda.z x+2
    rol
    sta.z __4+2
    lda.z x+3
    rol
    sta.z __4+3
    asl.z __4
    rol.z __4+1
    rol.z __4+2
    rol.z __4+3
    asl.z __4
    rol.z __4+1
    rol.z __4+2
    rol.z __4+3
    // [136] sin16s::x1#0 = > sin16s::$4 -- vwuz1=_hi_vduz2 
    lda.z __4+2
    sta.z x1
    lda.z __4+3
    sta.z x1+1
    // [137] mulu16_sel::v1#0 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v1
    lda.z x1+1
    sta.z mulu16_sel.v1+1
    // [138] mulu16_sel::v2#0 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [139] call mulu16_sel 
    // [213] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
  mulu16_sel_from___b2:
    // [213] phi mulu16_sel::select#5 = 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [213] phi mulu16_sel::v2#5 = mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
    // [213] phi mulu16_sel::v1#5 = mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [140] mulu16_sel::return#0 = mulu16_sel::return#12
    jmp __b7
    // sin16s::@7
  __b7:
    // [141] sin16s::x2#0 = mulu16_sel::return#0 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z x2
    lda.z mulu16_sel.return+1
    sta.z x2+1
    // [142] mulu16_sel::v1#1 = sin16s::x2#0
    // [143] mulu16_sel::v2#1 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [144] call mulu16_sel 
    // [213] phi from sin16s::@7 to mulu16_sel [phi:sin16s::@7->mulu16_sel]
  mulu16_sel_from___b7:
    // [213] phi mulu16_sel::select#5 = 1 [phi:sin16s::@7->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [213] phi mulu16_sel::v2#5 = mulu16_sel::v2#1 [phi:sin16s::@7->mulu16_sel#1] -- register_copy 
    // [213] phi mulu16_sel::v1#5 = mulu16_sel::v1#1 [phi:sin16s::@7->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [145] mulu16_sel::return#1 = mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z mulu16_sel.return_1
    lda.z mulu16_sel.return+1
    sta.z mulu16_sel.return_1+1
    jmp __b8
    // sin16s::@8
  __b8:
    // [146] sin16s::x3#0 = mulu16_sel::return#1
    // [147] mulu16_sel::v1#2 = sin16s::x3#0
    // [148] call mulu16_sel 
    // [213] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
  mulu16_sel_from___b8:
    // [213] phi mulu16_sel::select#5 = 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [213] phi mulu16_sel::v2#5 = (word)$10000/6 [phi:sin16s::@8->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta.z mulu16_sel.v2
    lda #>$10000/6
    sta.z mulu16_sel.v2+1
    // [213] phi mulu16_sel::v1#5 = mulu16_sel::v1#2 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [149] mulu16_sel::return#2 = mulu16_sel::return#12
    jmp __b9
    // sin16s::@9
  __b9:
    // [150] sin16s::x3_6#0 = mulu16_sel::return#2
    // [151] sin16s::usinx#0 = sin16s::x1#0 - sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z x1
    sec
    sbc.z x3_6
    sta.z usinx
    lda.z x1+1
    sbc.z x3_6+1
    sta.z usinx+1
    // [152] mulu16_sel::v1#3 = sin16s::x3#0
    // [153] mulu16_sel::v2#3 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [154] call mulu16_sel 
    // [213] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
  mulu16_sel_from___b9:
    // [213] phi mulu16_sel::select#5 = 0 [phi:sin16s::@9->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [213] phi mulu16_sel::v2#5 = mulu16_sel::v2#3 [phi:sin16s::@9->mulu16_sel#1] -- register_copy 
    // [213] phi mulu16_sel::v1#5 = mulu16_sel::v1#3 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [155] mulu16_sel::return#10 = mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z mulu16_sel.return_1
    lda.z mulu16_sel.return+1
    sta.z mulu16_sel.return_1+1
    jmp __b10
    // sin16s::@10
  __b10:
    // [156] sin16s::x4#0 = mulu16_sel::return#10
    // [157] mulu16_sel::v1#4 = sin16s::x4#0
    // [158] mulu16_sel::v2#4 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [159] call mulu16_sel 
    // [213] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
  mulu16_sel_from___b10:
    // [213] phi mulu16_sel::select#5 = 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [213] phi mulu16_sel::v2#5 = mulu16_sel::v2#4 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
    // [213] phi mulu16_sel::v1#5 = mulu16_sel::v1#4 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // [160] mulu16_sel::return#11 = mulu16_sel::return#12
    jmp __b11
    // sin16s::@11
  __b11:
    // [161] sin16s::x5#0 = mulu16_sel::return#11
    // [162] sin16s::x5_128#0 = sin16s::x5#0 >> 4 -- vwuz1=vwuz1_ror_4 
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    // [163] sin16s::usinx#1 = sin16s::usinx#0 + sin16s::x5_128#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z usinx
    clc
    adc.z x5_128
    sta.z usinx
    lda.z usinx+1
    adc.z x5_128+1
    sta.z usinx+1
    // [164] if(sin16s::isUpper#2==0) goto sin16s::@12 -- vbuyy_eq_0_then_la1 
    cpy #0
    beq __b12
    jmp __b6
    // sin16s::@6
  __b6:
    // [165] sin16s::sinx#1 = - (signed word)sin16s::usinx#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z sinx
    sta.z sinx
    lda #0
    sbc.z sinx+1
    sta.z sinx+1
    // [166] phi from sin16s::@12 sin16s::@6 to sin16s::@3 [phi:sin16s::@12/sin16s::@6->sin16s::@3]
  __b3_from___b12:
  __b3_from___b6:
    // [166] phi sin16s::return#1 = sin16s::return#5 [phi:sin16s::@12/sin16s::@6->sin16s::@3#0] -- register_copy 
    jmp __b3
    // sin16s::@3
  __b3:
    jmp __breturn
    // sin16s::@return
  __breturn:
    // [167] return 
    rts
    // sin16s::@12
  __b12:
    // [168] sin16s::return#5 = (signed word)sin16s::usinx#1
    jmp __b3_from___b12
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = $f
    // [170] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [170] phi memset::dst#2 = (byte*)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [171] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [172] return 
    rts
    // memset::@2
  __b2:
    // [173] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [174] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [170] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [170] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [176] *print_char_cursor#29 = print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [177] print_char_cursor#10 = ++ print_char_cursor#29 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [178] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // [179] print_uchar::$0 = print_uchar::b#0 >> 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [180] print_char::ch#3 = print_hextab[print_uchar::$0] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [181] call print_char 
  // Table of hexadecimal digits
    // [175] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [175] phi print_char_cursor#29 = print_char_cursor#10 [phi:print_uchar->print_char#0] -- register_copy 
    // [175] phi print_char::ch#5 = print_char::ch#3 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [182] print_uchar::$2 = print_uchar::b#0 & $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [183] print_char::ch#4 = print_hextab[print_uchar::$2] -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [184] call print_char 
    // [175] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [175] phi print_char_cursor#29 = print_char_cursor#10 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [175] phi print_char::ch#5 = print_char::ch#4 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [185] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($12) dividend, word zp($19) rem)
divr16u: {
    .label rem = $19
    .label dividend = $12
    .label quotient = $2a
    .label return = $2a
    // [187] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  __b1_from_divr16u:
    // [187] phi divr16u::i#2 = 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [187] phi divr16u::quotient#3 = 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z quotient
    lda #>0
    sta.z quotient+1
    // [187] phi divr16u::dividend#4 = divr16u::dividend#6 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [187] phi divr16u::rem#6 = divr16u::rem#11 [phi:divr16u->divr16u::@1#3] -- register_copy 
    jmp __b1
    // [187] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  __b1_from___b3:
    // [187] phi divr16u::i#2 = divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [187] phi divr16u::quotient#3 = divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [187] phi divr16u::dividend#4 = divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [187] phi divr16u::rem#6 = divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp __b1
    // divr16u::@1
  __b1:
    // [188] divr16u::rem#0 = divr16u::rem#6 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // [189] divr16u::$1 = > divr16u::dividend#4 -- vbuaa=_hi_vwuz1 
    lda.z dividend+1
    // [190] divr16u::$2 = divr16u::$1 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [191] if(divr16u::$2==0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr16u::@4
  __b4:
    // [192] divr16u::rem#1 = divr16u::rem#0 | 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [193] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [193] phi divr16u::rem#7 = divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp __b2
    // divr16u::@2
  __b2:
    // [194] divr16u::dividend#0 = divr16u::dividend#4 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // [195] divr16u::quotient#1 = divr16u::quotient#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // [196] if(divr16u::rem#7<main::wavelength) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>main.wavelength
    bcc __b3_from___b2
    bne !+
    lda.z rem
    cmp #<main.wavelength
    bcc __b3_from___b2
  !:
    jmp __b5
    // divr16u::@5
  __b5:
    // [197] divr16u::quotient#2 = ++ divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // [198] divr16u::rem#2 = divr16u::rem#7 - main::wavelength -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<main.wavelength
    sta.z rem
    lda.z rem+1
    sbc #>main.wavelength
    sta.z rem+1
    // [199] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [199] phi divr16u::return#0 = divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [199] phi divr16u::rem#10 = divr16u::rem#7 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp __b3
    // divr16u::@3
  __b3:
    // [200] divr16u::i#1 = ++ divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [201] if(divr16u::i#1!=$10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b3
    jmp __b6
    // divr16u::@6
  __b6:
    // [202] rem16u#0 = divr16u::rem#10
    jmp __breturn
    // divr16u::@return
  __breturn:
    // [203] return 
    rts
}
  // mulu8_sel
// Calculate val*val for two unsigned char values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte register(X) v1, byte register(Y) v2, byte zp($11) select)
mulu8_sel: {
    .label __0 = $19
    .label __1 = $19
    .label select = $11
    // [205] mul8u::a#1 = mulu8_sel::v1#5
    // [206] mul8u::b#0 = mulu8_sel::v2#5 -- vbuaa=vbuyy 
    tya
    // [207] call mul8u 
    jsr mul8u
    // [208] mul8u::return#2 = mul8u::res#2
    jmp __b1
    // mulu8_sel::@1
  __b1:
    // [209] mulu8_sel::$0 = mul8u::return#2
    // [210] mulu8_sel::$1 = mulu8_sel::$0 << mulu8_sel::select#5 -- vwuz1=vwuz1_rol_vbuz2 
    ldy.z select
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    dey
    bne !-
  !e:
    // [211] mulu8_sel::return#12 = > mulu8_sel::$1 -- vbuaa=_hi_vwuz1 
    lda.z __1+1
    jmp __breturn
    // mulu8_sel::@return
  __breturn:
    // [212] return 
    rts
}
  // mulu16_sel
// Calculate val*val for two unsigned int values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// mulu16_sel(word zp($19) v1, word zp($12) v2, byte register(X) select)
mulu16_sel: {
    .label __0 = $24
    .label __1 = $24
    .label v1 = $19
    .label v2 = $12
    .label return = $2a
    .label return_1 = $19
    // [214] mul16u::a#1 = mulu16_sel::v1#5 -- vwuz1=vwuz2 
    lda.z v1
    sta.z mul16u.a
    lda.z v1+1
    sta.z mul16u.a+1
    // [215] mul16u::b#0 = mulu16_sel::v2#5
    // [216] call mul16u 
    jsr mul16u
    // [217] mul16u::return#2 = mul16u::res#2
    jmp __b1
    // mulu16_sel::@1
  __b1:
    // [218] mulu16_sel::$0 = mul16u::return#2
    // [219] mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5 -- vduz1=vduz1_rol_vbuxx 
    cpx #0
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    rol.z __1+2
    rol.z __1+3
    dex
    bne !-
  !e:
    // [220] mulu16_sel::return#12 = > mulu16_sel::$1 -- vwuz1=_hi_vduz2 
    lda.z __1+2
    sta.z return
    lda.z __1+3
    sta.z return+1
    jmp __breturn
    // mulu16_sel::@return
  __breturn:
    // [221] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = $22
    .label res = $19
    .label return = $19
    // [222] mul8u::mb#0 = (word)mul8u::b#0 -- vwuz1=_word_vbuaa 
    sta.z mb
    lda #0
    sta.z mb+1
    // [223] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  __b1_from_mul8u:
    // [223] phi mul8u::mb#2 = mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [223] phi mul8u::res#2 = 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [223] phi mul8u::a#2 = mul8u::a#1 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp __b1
    // mul8u::@1
  __b1:
    // [224] if(mul8u::a#2!=0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    jmp __breturn
    // mul8u::@return
  __breturn:
    // [225] return 
    rts
    // mul8u::@2
  __b2:
    // [226] mul8u::$1 = mul8u::a#2 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [227] if(mul8u::$1==0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul8u::@4
  __b4:
    // [228] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [229] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [229] phi mul8u::res#6 = mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp __b3
    // mul8u::@3
  __b3:
    // [230] mul8u::a#0 = mul8u::a#2 >> 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // [231] mul8u::mb#1 = mul8u::mb#2 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [223] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  __b1_from___b3:
    // [223] phi mul8u::mb#2 = mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [223] phi mul8u::res#2 = mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [223] phi mul8u::a#2 = mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // mul16u
// Perform binary multiplication of two unsigned 16-bit unsigned ints into a 32-bit unsigned long
// mul16u(word zp($2a) a, word zp($12) b)
mul16u: {
    .label mb = $14
    .label a = $2a
    .label res = $24
    .label b = $12
    .label return = $24
    // [232] mul16u::mb#0 = (dword)mul16u::b#0 -- vduz1=_dword_vwuz2 
    lda.z b
    sta.z mb
    lda.z b+1
    sta.z mb+1
    lda #0
    sta.z mb+2
    sta.z mb+3
    // [233] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  __b1_from_mul16u:
    // [233] phi mul16u::mb#2 = mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
    // [233] phi mul16u::res#2 = 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    lda #<0>>$10
    sta.z res+2
    lda #>0>>$10
    sta.z res+3
    // [233] phi mul16u::a#2 = mul16u::a#1 [phi:mul16u->mul16u::@1#2] -- register_copy 
    jmp __b1
    // mul16u::@1
  __b1:
    // [234] if(mul16u::a#2!=0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda.z a
    ora.z a+1
    bne __b2
    jmp __breturn
    // mul16u::@return
  __breturn:
    // [235] return 
    rts
    // mul16u::@2
  __b2:
    // [236] mul16u::$1 = mul16u::a#2 & 1 -- vbuaa=vwuz1_band_vbuc1 
    lda #1
    and.z a
    // [237] if(mul16u::$1==0) goto mul16u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul16u::@4
  __b4:
    // [238] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    lda.z res+2
    adc.z mb+2
    sta.z res+2
    lda.z res+3
    adc.z mb+3
    sta.z res+3
    // [239] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [239] phi mul16u::res#6 = mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    jmp __b3
    // mul16u::@3
  __b3:
    // [240] mul16u::a#0 = mul16u::a#2 >> 1 -- vwuz1=vwuz1_ror_1 
    lsr.z a+1
    ror.z a
    // [241] mul16u::mb#1 = mul16u::mb#2 << 1 -- vduz1=vduz1_rol_1 
    asl.z mb
    rol.z mb+1
    rol.z mb+2
    rol.z mb+3
    // [233] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
  __b1_from___b3:
    // [233] phi mul16u::mb#2 = mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
    // [233] phi mul16u::res#2 = mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
    // [233] phi mul16u::a#2 = mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __b8
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b5
Removing instruction jmp __b2
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b6
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda.z i with TYA
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #>0
Replacing instruction ldx.z x1 with TAX
Replacing instruction ldy.z x1 with TAY
Replacing instruction ldx.z x3 with TAX
Removing instruction lda #>0
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b5 with __b1
Replacing label __b1_from_print_schar with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b13 with __b3
Replacing label __b4_from___b14 with __b4
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b12 with __b3
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b3_from___b2 with __b3
Replacing label __b1_from___b3 with __b1
Replacing label __b3_from___b2 with __b3
Replacing label __b3_from___b2 with __b3
Removing instruction __b2_from_main:
Removing instruction sin16s_gen_from___b2:
Removing instruction __b3_from___b2:
Removing instruction print_cls_from___b3:
Removing instruction __b1_from___b5:
Removing instruction __b4_from___b1:
Removing instruction print_str_from___b4:
Removing instruction __b1_from___b3:
Removing instruction __b1_from___b3:
Removing instruction __b3_from_print_schar:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_print_schar:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b13:
Removing instruction __b3_from___b7:
Removing instruction __b4_from___b14:
Removing instruction __b4_from___b8:
Removing instruction __breturn:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b5:
Removing instruction mulu16_sel_from___b8:
Removing instruction __b3_from___b12:
Removing instruction __b3_from___b6:
Removing instruction __breturn:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b5:
Removing instruction __breturn:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction sin8s_gen_from_main:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction div16u_from_sin8s_gen:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction div32u16u_from_sin16s_gen:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from_print_str:
Removing instruction __breturn:
Removing instruction print_char_from___b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction divr16u_from_div16u:
Removing instruction __b1:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b6:
Removing instruction mulu8_sel_from___b2:
Removing instruction __b9:
Removing instruction mulu8_sel_from___b9:
Removing instruction __b10:
Removing instruction mulu8_sel_from___b10:
Removing instruction __b11:
Removing instruction mulu8_sel_from___b11:
Removing instruction __b12:
Removing instruction mulu8_sel_from___b12:
Removing instruction __b13:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction divr16u_from_div32u16u:
Removing instruction __b1:
Removing instruction divr16u_from___b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __b5:
Removing instruction mulu16_sel_from___b2:
Removing instruction __b7:
Removing instruction mulu16_sel_from___b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction mulu16_sel_from___b9:
Removing instruction __b10:
Removing instruction mulu16_sel_from___b10:
Removing instruction __b11:
Removing instruction __b6:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Removing instruction print_char_from_print_uchar:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __b1_from_divr16u:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_mul8u:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Removing instruction __b1_from_mul16u:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __b4
Skipping double jump to __b3 in beq __b12
Replacing jump to rts with rts in jmp __b3
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b1_from_sin8s to __b5
Relabelling long label __b1_from_sin16s to __b4
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #<0
Removing instruction lda #<0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b4:
Removing instruction __b12:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction rts
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
const nomodify word PI2_u4f12 = $6488
const nomodify dword PI2_u4f28 = $6487ed51
const nomodify word PI_HALF_u4f12 = $1922
const nomodify dword PI_HALF_u4f28 = $1921fb54
const nomodify word PI_u4f12 = $3244
const nomodify dword PI_u4f28 = $3243f6a9
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const byte SIZEOF_SIGNED_WORD = 2
word div16u(word div16u::dividend , word div16u::divisor)
word div16u::dividend
word div16u::divisor
word div16u::return
word div16u::return#0 return zp[2]:42 37.33333333333333
word div16u::return#2 return zp[2]:42 22.0
dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
dword div32u16u::dividend
word div32u16u::divisor
dword div32u16u::quotient
word div32u16u::quotient_hi
word div32u16u::quotient_hi#0 quotient_hi zp[2]:34 40.4
word div32u16u::quotient_lo
word div32u16u::quotient_lo#0 quotient_lo zp[2]:42 202.0
dword div32u16u::return
dword div32u16u::return#0 return zp[4]:27 37.33333333333333
dword div32u16u::return#2 return zp[4]:27 22.0
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 reg byte a 20002.0
byte~ divr16u::$2 reg byte a 20002.0
word divr16u::dividend
word divr16u::dividend#0 dividend zp[2]:18 2500.25
word divr16u::dividend#4 dividend zp[2]:18 4429.142857142857
word divr16u::dividend#6 dividend zp[2]:18 1001.0
word divr16u::divisor
byte divr16u::i
byte divr16u::i#1 reg byte x 15001.5
byte divr16u::i#2 reg byte x 1538.6153846153845
word divr16u::quotient
word divr16u::quotient#1 quotient zp[2]:42 15001.5
word divr16u::quotient#2 quotient zp[2]:42 10001.0
word divr16u::quotient#3 quotient zp[2]:42 2500.25
word divr16u::rem
word divr16u::rem#0 rem zp[2]:25 7500.75
word divr16u::rem#1 rem zp[2]:25 20002.0
word divr16u::rem#10 rem zp[2]:25 10334.666666666666
word divr16u::rem#11 rem zp[2]:25 1102.0
word divr16u::rem#2 rem zp[2]:25 20002.0
word divr16u::rem#5 rem zp[2]:25 202.0
word divr16u::rem#6 rem zp[2]:25 21003.0
word divr16u::rem#7 rem zp[2]:25 10001.0
word divr16u::return
word divr16u::return#0 return zp[2]:42 3788.25
word divr16u::return#2 return zp[2]:42 202.0
word divr16u::return#3 return zp[2]:42 202.0
word divr16u::return#4 return zp[2]:42 202.0
void main()
word~ main::$10 zp[2]:25 22.0
byte~ main::$11 reg byte a 11.0
signed word*~ main::$3 zp[2]:25 22.0
word~ main::$9 zp[2]:25 22.0
byte main::i
byte main::i#1 i zp[1]:2 16.5
byte main::i#2 i zp[1]:2 2.75
signed byte main::sb
signed byte main::sb#0 sb zp[1]:24 3.6666666666666665
signed byte main::sd
signed byte main::sd#0 reg byte a 22.0
const signed byte* main::sintabb[$c0]  = { fill( $c0, 0) }
const signed word* main::sintabw[$c0]  = { fill( $c0, 0) }
const byte* main::str[3]  = "  "
signed word main::sw
signed word main::sw#0 sw zp[2]:25 22.0
const word main::wavelength = $c0
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
const byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:15 2002.0
byte* memset::dst#2 dst zp[2]:15 1334.6666666666667
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $3e8
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)print_screen#0
dword mul16u(word mul16u::a , word mul16u::b)
byte~ mul16u::$1 reg byte a 2.0000002E7
word mul16u::a
word mul16u::a#0 a zp[2]:42 1.0000001E7
word mul16u::a#1 a zp[2]:42 36667.33333333333
word mul16u::a#2 a zp[2]:42 6683334.166666666
word mul16u::b
word mul16u::b#0 b zp[2]:18 10001.0
dword mul16u::mb
dword mul16u::mb#0 mb zp[4]:20 200002.0
dword mul16u::mb#1 mb zp[4]:20 2.0000002E7
dword mul16u::mb#2 mb zp[4]:20 4300000.571428571
dword mul16u::res
dword mul16u::res#1 res zp[4]:36 2.0000002E7
dword mul16u::res#2 res zp[4]:36 5001667.333333333
dword mul16u::res#6 res zp[4]:36 1.0000001E7
dword mul16u::return
dword mul16u::return#2 return zp[4]:36 20002.0
word mul8u(byte mul8u::a , byte mul8u::b)
byte~ mul8u::$1 reg byte a 2.0000002E7
byte mul8u::a
byte mul8u::a#0 reg byte x 1.0000001E7
byte mul8u::a#1 reg byte x 36667.33333333333
byte mul8u::a#2 reg byte x 6683334.166666666
byte mul8u::b
byte mul8u::b#0 reg byte a 10001.0
word mul8u::mb
word mul8u::mb#0 mb zp[2]:34 200002.0
word mul8u::mb#1 mb zp[2]:34 2.0000002E7
word mul8u::mb#2 mb zp[2]:34 4300000.571428571
word mul8u::res
word mul8u::res#1 res zp[2]:25 2.0000002E7
word mul8u::res#2 res zp[2]:25 5001667.333333333
word mul8u::res#6 res zp[2]:25 1.0000001E7
word mul8u::return
word mul8u::return#2 return zp[2]:25 20002.0
word mulu16_sel(word mulu16_sel::v1 , word mulu16_sel::v2 , byte mulu16_sel::select)
dword~ mulu16_sel::$0 zp[4]:36 20002.0
dword~ mulu16_sel::$1 zp[4]:36 20002.0
word mulu16_sel::return
word mulu16_sel::return#0 return zp[2]:42 2002.0
word mulu16_sel::return#1 return_1 zp[2]:25 2002.0
word mulu16_sel::return#10 return_1 zp[2]:25 2002.0
word mulu16_sel::return#11 return zp[2]:42 2002.0
word mulu16_sel::return#12 return zp[2]:42 2143.714285714286
word mulu16_sel::return#2 return zp[2]:42 2002.0
byte mulu16_sel::select
byte mulu16_sel::select#5 reg byte x 1666.8333333333333
word mulu16_sel::v1
word mulu16_sel::v1#0 v1 zp[2]:25 1001.0
word mulu16_sel::v1#1 v1 zp[2]:25 1001.0
word mulu16_sel::v1#2 v1 zp[2]:25 2002.0
word mulu16_sel::v1#3 v1 zp[2]:25 1001.0
word mulu16_sel::v1#4 v1 zp[2]:25 1001.0
word mulu16_sel::v1#5 v1 zp[2]:25 15006.0
word mulu16_sel::v2
word mulu16_sel::v2#0 v2 zp[2]:18 2002.0
word mulu16_sel::v2#1 v2 zp[2]:18 2002.0
word mulu16_sel::v2#3 v2 zp[2]:18 2002.0
word mulu16_sel::v2#4 v2 zp[2]:18 2002.0
word mulu16_sel::v2#5 v2 zp[2]:18 7002.5
byte mulu8_sel(byte mulu8_sel::v1 , byte mulu8_sel::v2 , byte mulu8_sel::select)
word~ mulu8_sel::$0 zp[2]:25 20002.0
word~ mulu8_sel::$1 zp[2]:25 20002.0
byte mulu8_sel::return
byte mulu8_sel::return#0 reg byte a 2002.0
byte mulu8_sel::return#1 reg byte a 2002.0
byte mulu8_sel::return#10 reg byte a 2002.0
byte mulu8_sel::return#11 reg byte a 2002.0
byte mulu8_sel::return#12 reg byte a 2143.714285714286
byte mulu8_sel::return#2 reg byte a 2002.0
byte mulu8_sel::select
byte mulu8_sel::select#5 select zp[1]:17 1666.8333333333333
byte mulu8_sel::v1
byte mulu8_sel::v1#0 reg byte x 1001.0
byte mulu8_sel::v1#1 reg byte x 1001.0
byte mulu8_sel::v1#2 reg byte x 2002.0
byte mulu8_sel::v1#3 reg byte x 1001.0
byte mulu8_sel::v1#4 reg byte x 1001.0
byte mulu8_sel::v1#5 reg byte x 15006.0
byte mulu8_sel::v2
byte mulu8_sel::v2#0 reg byte y 2002.0
byte mulu8_sel::v2#1 reg byte y 2002.0
byte mulu8_sel::v2#3 reg byte y 2002.0
byte mulu8_sel::v2#4 reg byte y 2002.0
byte mulu8_sel::v2#5 reg byte y 7002.5
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 20002.0
byte print_char::ch#3 reg byte a 2002.0
byte print_char::ch#4 reg byte a 2002.0
byte print_char::ch#5 reg byte a 112004.0
byte* print_char_cursor
byte* print_char_cursor#10 print_char_cursor zp[2]:15 4000.535714285714
byte* print_char_cursor#29 print_char_cursor zp[2]:15 106103.5
byte* print_char_cursor#45 print_char_cursor zp[2]:15 17.75
void print_cls()
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
void print_schar(signed byte print_schar::b)
signed byte print_schar::b
signed byte print_schar::b#0 reg byte x 202.0
signed byte print_schar::b#1 reg byte x 52.33333333333333
signed byte print_schar::b#4 reg byte x 202.0
byte* print_screen
const byte* print_screen#0 print_screen = (byte*) 1024
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 str zp[2]:40 20002.0
byte* print_str::str#2 str zp[2]:40 10001.0
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 2002.0
byte~ print_uchar::$2 reg byte x 2002.0
byte print_uchar::b
byte print_uchar::b#0 reg byte x 525.75
word rem16u
word rem16u#0 rem16u zp[2]:25 220.39999999999998
signed word sin16s(dword sin16s::x)
dword~ sin16s::$4 zp[4]:36 2002.0
byte sin16s::isUpper
byte sin16s::isUpper#2 reg byte y 30.333333333333332
signed word sin16s::return
signed word sin16s::return#0 return zp[2]:13 202.0
signed word sin16s::return#1 return zp[2]:13 701.0
signed word sin16s::return#5 return zp[2]:13 2002.0
signed word sin16s::sinx
signed word sin16s::sinx#1 sinx zp[2]:13 2002.0
word sin16s::usinx
word sin16s::usinx#0 usinx zp[2]:13 166.83333333333334
word sin16s::usinx#1 usinx zp[2]:13 500.5
dword sin16s::x
dword sin16s::x#0 x zp[4]:9 1552.0
dword sin16s::x#1 x zp[4]:9 2002.0
dword sin16s::x#2 x zp[4]:9 2002.0
dword sin16s::x#4 x zp[4]:9 2502.5
dword sin16s::x#6 x zp[4]:9 3003.0
word sin16s::x1
word sin16s::x1#0 x1 zp[2]:40 318.5
word sin16s::x2
word sin16s::x2#0 x2 zp[2]:25 2002.0
word sin16s::x3
word sin16s::x3#0 x3 zp[2]:25 500.5
word sin16s::x3_6
word sin16s::x3_6#0 x3_6 zp[2]:42 2002.0
word sin16s::x4
word sin16s::x4#0 x4 zp[2]:25 2002.0
word sin16s::x5
word sin16s::x5#0 x5 zp[2]:42 2002.0
word sin16s::x5_128
word sin16s::x5_128#0 x5_128 zp[2]:42 2002.0
void sin16s_gen(signed word* sin16s_gen::sintab , word sin16s_gen::wavelength)
signed word~ sin16s_gen::$2 zp[2]:13 202.0
word sin16s_gen::i
word sin16s_gen::i#1 i zp[2]:15 202.0
word sin16s_gen::i#2 i zp[2]:15 33.666666666666664
signed word* sin16s_gen::sintab
signed word* sin16s_gen::sintab#0 sintab zp[2]:7 67.33333333333333
signed word* sin16s_gen::sintab#2 sintab zp[2]:7 43.285714285714285
dword sin16s_gen::step
dword sin16s_gen::step#0 step zp[4]:27 10.181818181818182
word sin16s_gen::wavelength
dword sin16s_gen::x
dword sin16s_gen::x#1 x zp[4]:3 101.0
dword sin16s_gen::x#2 x zp[4]:3 37.875
signed byte sin8s(word sin8s::x)
word~ sin8s::$4 zp[2]:13 2002.0
const nomodify byte sin8s::DIV_6 = $2b
byte sin8s::isUpper
byte sin8s::isUpper#10 isUpper zp[1]:24 27.805555555555557
signed byte sin8s::return
signed byte sin8s::return#0 reg byte a 202.0
signed byte sin8s::return#1 reg byte a 701.0
signed byte sin8s::return#5 reg byte a 2002.0
signed byte sin8s::sinx
signed byte sin8s::sinx#1 reg byte a 2002.0
byte sin8s::usinx
byte sin8s::usinx#0 usinx zp[1]:33 166.83333333333334
byte sin8s::usinx#1 reg byte x 2002.0
byte sin8s::usinx#2 reg byte x 2002.0
byte sin8s::usinx#4 reg byte x 1001.0
word sin8s::x
word sin8s::x#0 x zp[2]:13 1552.0
word sin8s::x#1 x zp[2]:13 2002.0
word sin8s::x#2 x zp[2]:13 2002.0
word sin8s::x#4 x zp[2]:13 2502.5
word sin8s::x#6 x zp[2]:13 3003.0
byte sin8s::x1
byte sin8s::x1#0 x1 zp[1]:31 318.5
byte sin8s::x2
byte sin8s::x2#0 reg byte a 2002.0
byte sin8s::x3
byte sin8s::x3#0 x3 zp[1]:32 500.5
byte sin8s::x3_6
byte sin8s::x3_6#0 reg byte a 2002.0
byte sin8s::x4
byte sin8s::x4#0 reg byte a 2002.0
byte sin8s::x5
byte sin8s::x5#0 reg byte a 2002.0
byte sin8s::x5_128
byte sin8s::x5_128#0 reg byte a 2002.0
void sin8s_gen(signed byte* sin8s_gen::sintab , word sin8s_gen::wavelength)
signed byte~ sin8s_gen::$2 reg byte a 202.0
word sin8s_gen::i
word sin8s_gen::i#1 i zp[2]:15 202.0
word sin8s_gen::i#2 i zp[2]:15 33.666666666666664
signed byte* sin8s_gen::sintab
signed byte* sin8s_gen::sintab#0 sintab zp[2]:40 67.33333333333333
signed byte* sin8s_gen::sintab#2 sintab zp[2]:40 43.285714285714285
word sin8s_gen::step
word sin8s_gen::step#0 step zp[2]:42 10.181818181818182
word sin8s_gen::wavelength
word sin8s_gen::x
word sin8s_gen::x#1 x zp[2]:7 101.0
word sin8s_gen::x#2 x zp[2]:7 37.875

zp[1]:2 [ main::i#2 main::i#1 ]
zp[4]:3 [ sin16s_gen::x#2 sin16s_gen::x#1 ]
zp[2]:7 [ sin16s_gen::sintab#2 sin16s_gen::sintab#0 sin8s_gen::x#2 sin8s_gen::x#1 ]
reg byte x [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
reg byte a [ sin8s::return#1 sin8s::return#5 sin8s::sinx#1 ]
reg byte y [ sin16s::isUpper#2 ]
zp[4]:9 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
zp[2]:13 [ sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 sin16s_gen::$2 sin16s::usinx#0 sin8s::x#6 sin8s::x#4 sin8s::x#0 sin8s::x#1 sin8s::x#2 sin8s::$4 ]
reg byte a [ print_char::ch#5 print_char::ch#0 print_char::ch#3 print_char::ch#4 ]
zp[2]:15 [ print_char_cursor#29 print_char_cursor#45 print_char_cursor#10 memset::dst#2 memset::dst#1 sin16s_gen::i#2 sin16s_gen::i#1 sin8s_gen::i#2 sin8s_gen::i#1 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
zp[1]:17 [ mulu8_sel::select#5 ]
zp[2]:18 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 mul16u::b#0 divr16u::dividend#4 divr16u::dividend#6 divr16u::dividend#0 ]
reg byte x [ mulu16_sel::select#5 ]
reg byte x [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
zp[4]:20 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
zp[1]:24 [ main::sb#0 sin8s::isUpper#10 ]
zp[2]:25 [ main::$10 main::$9 main::$3 main::sw#0 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mulu8_sel::$0 mulu8_sel::$1 mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 divr16u::rem#6 divr16u::rem#11 divr16u::rem#5 divr16u::rem#10 divr16u::rem#7 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 ]
reg byte a [ main::$11 ]
reg byte a [ main::sd#0 ]
reg byte a [ sin8s::return#0 ]
reg byte a [ sin8s_gen::$2 ]
zp[4]:27 [ div32u16u::return#2 sin16s_gen::step#0 div32u16u::return#0 ]
reg byte x [ print_uchar::b#0 ]
zp[1]:31 [ sin8s::x1#0 ]
reg byte a [ mulu8_sel::return#0 ]
reg byte a [ sin8s::x2#0 ]
reg byte a [ mulu8_sel::return#1 ]
zp[1]:32 [ sin8s::x3#0 ]
reg byte a [ mulu8_sel::return#2 ]
reg byte a [ sin8s::x3_6#0 ]
zp[1]:33 [ sin8s::usinx#0 ]
reg byte a [ mulu8_sel::return#10 ]
reg byte a [ sin8s::x4#0 ]
reg byte a [ mulu8_sel::return#11 ]
reg byte a [ sin8s::x5#0 ]
reg byte a [ sin8s::x5_128#0 ]
zp[2]:34 [ div32u16u::quotient_hi#0 mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 ]
zp[4]:36 [ sin16s::$4 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#2 mulu16_sel::$0 mulu16_sel::$1 ]
zp[2]:40 [ sin16s::x1#0 print_str::str#2 print_str::str#0 sin8s_gen::sintab#2 sin8s_gen::sintab#0 ]
zp[2]:42 [ mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 mul16u::a#2 mul16u::a#1 mul16u::a#0 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 divr16u::return#4 div16u::return#2 sin8s_gen::step#0 div16u::return#0 div32u16u::quotient_lo#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ mul8u::b#0 ]
reg byte a [ mulu8_sel::return#12 ]
reg byte a [ mul8u::$1 ]
reg byte a [ mul16u::$1 ]


FINAL ASSEMBLER
Score: 27770

  // File Comments
// Sine Generator functions using only multiplication, addition and bit shifting
// Uses a single division for converting the wavelength to a reciprocal.
// Generates sine using the series sin(x) = x - x^/3! + x^-5! - x^7/7! ...
// Uses the approximation sin(x) = x - x^/6 + x^/128
// Optimization possibility: Use symmetries when generating sine tables. wavelength%2==0 -> mirror symmetry over PI, wavelength%4==0 -> mirror symmetry over PI/2.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // PI*2 in u[4.28] format
  .const PI2_u4f28 = $6487ed51
  // PI in u[4.28] format
  .const PI_u4f28 = $3243f6a9
  // PI/2 in u[4.28] format
  .const PI_HALF_u4f28 = $1921fb54
  // PI*2 in u[4.12] format
  .const PI2_u4f12 = $6488
  // PI in u[4.12] format
  .const PI_u4f12 = $3244
  // PI/2 in u[4.12] format
  .const PI_HALF_u4f12 = $1922
  .const SIZEOF_SIGNED_WORD = 2
  .label print_screen = $400
  // Remainder after unsigned 16-bit division
  .label rem16u = $19
  .label print_char_cursor = $f
  // main
main: {
    .label wavelength = $c0
    .label __3 = $19
    .label __9 = $19
    .label __10 = $19
    .label sb = $18
    .label sw = $19
    .label i = 2
    // sin8s_gen(sintabb, wavelength)
    // [1] call sin8s_gen 
    // [21] phi from main to sin8s_gen [phi:main->sin8s_gen]
    jsr sin8s_gen
    // [2] phi from main to main::@2 [phi:main->main::@2]
    // main::@2
    // sin16s_gen(sintabw, wavelength)
    // [3] call sin16s_gen 
    // [36] phi from main::@2 to sin16s_gen [phi:main::@2->sin16s_gen]
    jsr sin16s_gen
    // [4] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // print_cls()
    // [5] call print_cls 
    // [51] phi from main::@3 to print_cls [phi:main::@3->print_cls]
    jsr print_cls
    // [6] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [6] phi print_char_cursor#45 = print_screen#0 [phi:main::@3->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [6] phi main::i#2 = 0 [phi:main::@3->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [6] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
    // [6] phi print_char_cursor#45 = print_char_cursor#10 [phi:main::@5->main::@1#0] -- register_copy 
    // [6] phi main::i#2 = main::i#1 [phi:main::@5->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // sb = sintabb[i]
    // [7] main::sb#0 = main::sintabb[main::i#2] -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy.z i
    lda sintabb,y
    sta.z sb
    // sintabw+(word)i
    // [8] main::$10 = (word)main::i#2 -- vwuz1=_word_vbuz2 
    tya
    sta.z __10
    lda #0
    sta.z __10+1
    // [9] main::$9 = main::$10 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z __9
    rol.z __9+1
    // [10] main::$3 = main::sintabw + main::$9 -- pwsz1=pwsc1_plus_vwuz1 
    clc
    lda.z __3
    adc #<sintabw
    sta.z __3
    lda.z __3+1
    adc #>sintabw
    sta.z __3+1
    // sw = *(sintabw+(word)i)
    // [11] main::sw#0 = *main::$3 -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (sw),y
    pha
    iny
    lda (sw),y
    sta.z sw+1
    pla
    sta.z sw
    // >sw
    // [12] main::$11 = > main::sw#0 -- vbuaa=_hi_vwsz1 
    lda.z sw+1
    // sd = sb-(signed byte)>sw
    // [13] main::sd#0 = main::sb#0 - (signed byte)main::$11 -- vbsaa=vbsz1_minus_vbsaa 
    eor #$ff
    sec
    adc.z sb
    // print_schar(sd)
    // [14] print_schar::b#1 = main::sd#0 -- vbsxx=vbsaa 
    tax
    // [15] call print_schar 
    jsr print_schar
    // [16] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
    // main::@4
    // print_str("  ")
    // [17] call print_str 
    // [64] phi from main::@4 to print_str [phi:main::@4->print_str]
    jsr print_str
    // main::@5
    // for(byte i: 0..191)
    // [18] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [19] if(main::i#1!=$c0) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c0
    cmp.z i
    bne __b1
    // main::@return
    // }
    // [20] return 
    rts
    sintabb: .fill $c0, 0
    sintabw: .fill 2*$c0, 0
    str: .text "  "
    .byte 0
}
  // sin8s_gen
// Generate signed char sine table - on the full -$7f - $7f range
// sintab - the table to generate into
// wavelength - the number of sine points in a total sine wavelength (the size of the table)
// sin8s_gen(signed byte* zp($28) sintab)
sin8s_gen: {
    .label step = $2a
    .label sintab = $28
    // u[4.12]
    // Iterate over the table
    .label x = 7
    .label i = $f
    // div16u(PI2_u4f12, wavelength)
    // [22] call div16u 
    // [71] phi from sin8s_gen to div16u [phi:sin8s_gen->div16u]
    jsr div16u
    // div16u(PI2_u4f12, wavelength)
    // [23] div16u::return#2 = div16u::return#0
    // sin8s_gen::@3
    // step = div16u(PI2_u4f12, wavelength)
    // [24] sin8s_gen::step#0 = div16u::return#2
    // [25] phi from sin8s_gen::@3 to sin8s_gen::@1 [phi:sin8s_gen::@3->sin8s_gen::@1]
    // [25] phi sin8s_gen::sintab#2 = main::sintabb [phi:sin8s_gen::@3->sin8s_gen::@1#0] -- pbsz1=pbsc1 
    lda #<main.sintabb
    sta.z sintab
    lda #>main.sintabb
    sta.z sintab+1
    // [25] phi sin8s_gen::x#2 = 0 [phi:sin8s_gen::@3->sin8s_gen::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    sta.z x+1
    // [25] phi sin8s_gen::i#2 = 0 [phi:sin8s_gen::@3->sin8s_gen::@1#2] -- vwuz1=vwuc1 
    sta.z i
    sta.z i+1
  // u[4.12]
    // sin8s_gen::@1
  __b1:
    // for( unsigned int i=0; i<wavelength; i++)
    // [26] if(sin8s_gen::i#2<main::wavelength) goto sin8s_gen::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.wavelength
    bcc __b2
    bne !+
    lda.z i
    cmp #<main.wavelength
    bcc __b2
  !:
    // sin8s_gen::@return
    // }
    // [27] return 
    rts
    // sin8s_gen::@2
  __b2:
    // sin8s(x)
    // [28] sin8s::x#0 = sin8s_gen::x#2 -- vwuz1=vwuz2 
    lda.z x
    sta.z sin8s.x
    lda.z x+1
    sta.z sin8s.x+1
    // [29] call sin8s 
    jsr sin8s
    // [30] sin8s::return#0 = sin8s::return#1
    // sin8s_gen::@4
    // [31] sin8s_gen::$2 = sin8s::return#0
    // *sintab++ = sin8s(x)
    // [32] *sin8s_gen::sintab#2 = sin8s_gen::$2 -- _deref_pbsz1=vbsaa 
    ldy #0
    sta (sintab),y
    // *sintab++ = sin8s(x);
    // [33] sin8s_gen::sintab#0 = ++ sin8s_gen::sintab#2 -- pbsz1=_inc_pbsz1 
    inc.z sintab
    bne !+
    inc.z sintab+1
  !:
    // x = x + step
    // [34] sin8s_gen::x#1 = sin8s_gen::x#2 + sin8s_gen::step#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    // for( unsigned int i=0; i<wavelength; i++)
    // [35] sin8s_gen::i#1 = ++ sin8s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [25] phi from sin8s_gen::@4 to sin8s_gen::@1 [phi:sin8s_gen::@4->sin8s_gen::@1]
    // [25] phi sin8s_gen::sintab#2 = sin8s_gen::sintab#0 [phi:sin8s_gen::@4->sin8s_gen::@1#0] -- register_copy 
    // [25] phi sin8s_gen::x#2 = sin8s_gen::x#1 [phi:sin8s_gen::@4->sin8s_gen::@1#1] -- register_copy 
    // [25] phi sin8s_gen::i#2 = sin8s_gen::i#1 [phi:sin8s_gen::@4->sin8s_gen::@1#2] -- register_copy 
    jmp __b1
}
  // sin16s_gen
// Generate signed (large) unsigned int sine table - on the full -$7fff - $7fff range
// sintab - the table to generate into
// wavelength - the number of sine points in a total sine wavelength (the size of the table)
// sin16s_gen(signed word* zp(7) sintab)
sin16s_gen: {
    .label __2 = $d
    .label step = $1b
    .label sintab = 7
    // u[4.28]
    // Iterate over the table
    .label x = 3
    .label i = $f
    // div32u16u(PI2_u4f28, wavelength)
    // [37] call div32u16u 
    // [119] phi from sin16s_gen to div32u16u [phi:sin16s_gen->div32u16u]
    jsr div32u16u
    // div32u16u(PI2_u4f28, wavelength)
    // [38] div32u16u::return#2 = div32u16u::return#0
    // sin16s_gen::@3
    // step = div32u16u(PI2_u4f28, wavelength)
    // [39] sin16s_gen::step#0 = div32u16u::return#2
    // [40] phi from sin16s_gen::@3 to sin16s_gen::@1 [phi:sin16s_gen::@3->sin16s_gen::@1]
    // [40] phi sin16s_gen::sintab#2 = main::sintabw [phi:sin16s_gen::@3->sin16s_gen::@1#0] -- pwsz1=pwsc1 
    lda #<main.sintabw
    sta.z sintab
    lda #>main.sintabw
    sta.z sintab+1
    // [40] phi sin16s_gen::x#2 = 0 [phi:sin16s_gen::@3->sin16s_gen::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z x
    sta.z x+1
    lda #<0>>$10
    sta.z x+2
    lda #>0>>$10
    sta.z x+3
    // [40] phi sin16s_gen::i#2 = 0 [phi:sin16s_gen::@3->sin16s_gen::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
  // u[4.28]
    // sin16s_gen::@1
  __b1:
    // for( unsigned int i=0; i<wavelength; i++)
    // [41] if(sin16s_gen::i#2<main::wavelength) goto sin16s_gen::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>main.wavelength
    bcc __b2
    bne !+
    lda.z i
    cmp #<main.wavelength
    bcc __b2
  !:
    // sin16s_gen::@return
    // }
    // [42] return 
    rts
    // sin16s_gen::@2
  __b2:
    // sin16s(x)
    // [43] sin16s::x#0 = sin16s_gen::x#2 -- vduz1=vduz2 
    lda.z x
    sta.z sin16s.x
    lda.z x+1
    sta.z sin16s.x+1
    lda.z x+2
    sta.z sin16s.x+2
    lda.z x+3
    sta.z sin16s.x+3
    // [44] call sin16s 
    jsr sin16s
    // [45] sin16s::return#0 = sin16s::return#1
    // sin16s_gen::@4
    // [46] sin16s_gen::$2 = sin16s::return#0
    // *sintab++ = sin16s(x)
    // [47] *sin16s_gen::sintab#2 = sin16s_gen::$2 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda.z __2
    sta (sintab),y
    iny
    lda.z __2+1
    sta (sintab),y
    // *sintab++ = sin16s(x);
    // [48] sin16s_gen::sintab#0 = sin16s_gen::sintab#2 + SIZEOF_SIGNED_WORD -- pwsz1=pwsz1_plus_vbuc1 
    lda #SIZEOF_SIGNED_WORD
    clc
    adc.z sintab
    sta.z sintab
    bcc !+
    inc.z sintab+1
  !:
    // x = x + step
    // [49] sin16s_gen::x#1 = sin16s_gen::x#2 + sin16s_gen::step#0 -- vduz1=vduz1_plus_vduz2 
    lda.z x
    clc
    adc.z step
    sta.z x
    lda.z x+1
    adc.z step+1
    sta.z x+1
    lda.z x+2
    adc.z step+2
    sta.z x+2
    lda.z x+3
    adc.z step+3
    sta.z x+3
    // for( unsigned int i=0; i<wavelength; i++)
    // [50] sin16s_gen::i#1 = ++ sin16s_gen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [40] phi from sin16s_gen::@4 to sin16s_gen::@1 [phi:sin16s_gen::@4->sin16s_gen::@1]
    // [40] phi sin16s_gen::sintab#2 = sin16s_gen::sintab#0 [phi:sin16s_gen::@4->sin16s_gen::@1#0] -- register_copy 
    // [40] phi sin16s_gen::x#2 = sin16s_gen::x#1 [phi:sin16s_gen::@4->sin16s_gen::@1#1] -- register_copy 
    // [40] phi sin16s_gen::i#2 = sin16s_gen::i#1 [phi:sin16s_gen::@4->sin16s_gen::@1#2] -- register_copy 
    jmp __b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [52] call memset 
    // [169] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [53] return 
    rts
}
  // print_schar
// Print a signed char as HEX
// print_schar(signed byte register(X) b)
print_schar: {
    // if(b<0)
    // [54] if(print_schar::b#1<0) goto print_schar::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1
    // [55] phi from print_schar to print_schar::@3 [phi:print_schar->print_schar::@3]
    // print_schar::@3
    // print_char(' ')
    // [56] call print_char 
    // [175] phi from print_schar::@3 to print_char [phi:print_schar::@3->print_char]
    // [175] phi print_char_cursor#29 = print_char_cursor#45 [phi:print_schar::@3->print_char#0] -- register_copy 
    // [175] phi print_char::ch#5 = ' ' [phi:print_schar::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [57] phi from print_schar::@3 print_schar::@4 to print_schar::@2 [phi:print_schar::@3/print_schar::@4->print_schar::@2]
    // [57] phi print_schar::b#4 = print_schar::b#1 [phi:print_schar::@3/print_schar::@4->print_schar::@2#0] -- register_copy 
    // print_schar::@2
  __b2:
    // print_uchar((char)b)
    // [58] print_uchar::b#0 = (byte)print_schar::b#4
    // [59] call print_uchar 
    jsr print_uchar
    // print_schar::@return
    // }
    // [60] return 
    rts
    // [61] phi from print_schar to print_schar::@1 [phi:print_schar->print_schar::@1]
    // print_schar::@1
  __b1:
    // print_char('-')
    // [62] call print_char 
    // [175] phi from print_schar::@1 to print_char [phi:print_schar::@1->print_char]
    // [175] phi print_char_cursor#29 = print_char_cursor#45 [phi:print_schar::@1->print_char#0] -- register_copy 
    // [175] phi print_char::ch#5 = '-' [phi:print_schar::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_schar::@4
    // b = -b
    // [63] print_schar::b#0 = - print_schar::b#1 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    jmp __b2
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($28) str)
print_str: {
    .label str = $28
    // [65] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
    // [65] phi print_str::str#2 = main::str [phi:print_str->print_str::@1#0] -- pbuz1=pbuc1 
    lda #<main.str
    sta.z str
    lda #>main.str
    sta.z str+1
    // print_str::@1
  __b1:
    // while(*str)
    // [66] if(0!=*print_str::str#2) goto print_str::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [67] return 
    rts
    // print_str::@2
  __b2:
    // print_char(*(str++))
    // [68] print_char::ch#0 = *print_str::str#2 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [69] call print_char 
    // [175] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
    // [175] phi print_char_cursor#29 = print_char_cursor#10 [phi:print_str::@2->print_char#0] -- register_copy 
    // [175] phi print_char::ch#5 = print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    // print_str::@3
    // print_char(*(str++));
    // [70] print_str::str#0 = ++ print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [65] phi from print_str::@3 to print_str::@1 [phi:print_str::@3->print_str::@1]
    // [65] phi print_str::str#2 = print_str::str#0 [phi:print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
}
  // div16u
// Performs division on two 16 bit unsigned ints
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
div16u: {
    .label return = $2a
    // divr16u(dividend, divisor, 0)
    // [72] call divr16u 
    // [186] phi from div16u to divr16u [phi:div16u->divr16u]
    // [186] phi divr16u::dividend#6 = PI2_u4f12 [phi:div16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f12
    sta.z divr16u.dividend
    lda #>PI2_u4f12
    sta.z divr16u.dividend+1
    // [186] phi divr16u::rem#11 = 0 [phi:div16u->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z divr16u.rem
    sta.z divr16u.rem+1
    jsr divr16u
    // divr16u(dividend, divisor, 0)
    // [73] divr16u::return#2 = divr16u::return#0
    // div16u::@1
    // [74] div16u::return#0 = divr16u::return#2
    // div16u::@return
    // }
    // [75] return 
    rts
}
  // sin8s
// Calculate signed char sine sin(x)
// x: unsigned int input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed char sin(x) s[0.7] - using the full range  -$7f - $7f
// sin8s(word zp($d) x)
sin8s: {
    // u[2.6] x^3
    .const DIV_6 = $2b
    .label __4 = $d
    .label x = $d
    .label x1 = $1f
    .label x3 = $20
    .label usinx = $21
    // Move x1 into the range 0-PI/2 using sine mirror symmetries
    .label isUpper = $18
    // if(x >= PI_u4f12 )
    // [76] if(sin8s::x#0<PI_u4f12) goto sin8s::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_u4f12
    bcc __b5
    bne !+
    lda.z x
    cmp #<PI_u4f12
    bcc __b5
  !:
    // sin8s::@5
    // x = x - PI_u4f12
    // [77] sin8s::x#1 = sin8s::x#0 - PI_u4f12 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x
    sec
    sbc #<PI_u4f12
    sta.z x
    lda.z x+1
    sbc #>PI_u4f12
    sta.z x+1
    // [78] phi from sin8s::@5 to sin8s::@1 [phi:sin8s::@5->sin8s::@1]
    // [78] phi sin8s::isUpper#10 = 1 [phi:sin8s::@5->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #1
    sta.z isUpper
    // [78] phi sin8s::x#4 = sin8s::x#1 [phi:sin8s::@5->sin8s::@1#1] -- register_copy 
    jmp __b1
    // [78] phi from sin8s to sin8s::@1 [phi:sin8s->sin8s::@1]
  __b5:
    // [78] phi sin8s::isUpper#10 = 0 [phi:sin8s->sin8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z isUpper
    // [78] phi sin8s::x#4 = sin8s::x#0 [phi:sin8s->sin8s::@1#1] -- register_copy 
    // sin8s::@1
  __b1:
    // if(x >= PI_HALF_u4f12 )
    // [79] if(sin8s::x#4<PI_HALF_u4f12) goto sin8s::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x+1
    cmp #>PI_HALF_u4f12
    bcc __b2
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f12
    bcc __b2
  !:
    // sin8s::@6
    // x = PI_u4f12 - x
    // [80] sin8s::x#2 = PI_u4f12 - sin8s::x#4 -- vwuz1=vwuc1_minus_vwuz1 
    sec
    lda #<PI_u4f12
    sbc.z x
    sta.z x
    lda #>PI_u4f12
    sbc.z x+1
    sta.z x+1
    // [81] phi from sin8s::@1 sin8s::@6 to sin8s::@2 [phi:sin8s::@1/sin8s::@6->sin8s::@2]
    // [81] phi sin8s::x#6 = sin8s::x#4 [phi:sin8s::@1/sin8s::@6->sin8s::@2#0] -- register_copy 
    // sin8s::@2
  __b2:
    // x<<3
    // [82] sin8s::$4 = sin8s::x#6 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    asl.z __4
    rol.z __4+1
    // x1 = >x<<3
    // [83] sin8s::x1#0 = > sin8s::$4 -- vbuz1=_hi_vwuz2 
    lda.z __4+1
    sta.z x1
    // mulu8_sel(x1, x1, 0)
    // [84] mulu8_sel::v1#0 = sin8s::x1#0 -- vbuxx=vbuz1 
    tax
    // [85] mulu8_sel::v2#0 = sin8s::x1#0 -- vbuyy=vbuz1 
    tay
    // [86] call mulu8_sel 
    // [204] phi from sin8s::@2 to mulu8_sel [phi:sin8s::@2->mulu8_sel]
    // [204] phi mulu8_sel::select#5 = 0 [phi:sin8s::@2->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [204] phi mulu8_sel::v2#5 = mulu8_sel::v2#0 [phi:sin8s::@2->mulu8_sel#1] -- register_copy 
    // [204] phi mulu8_sel::v1#5 = mulu8_sel::v1#0 [phi:sin8s::@2->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x1, x1, 0)
    // [87] mulu8_sel::return#0 = mulu8_sel::return#12
    // sin8s::@9
    // x2 = mulu8_sel(x1, x1, 0)
    // [88] sin8s::x2#0 = mulu8_sel::return#0
    // mulu8_sel(x2, x1, 1)
    // [89] mulu8_sel::v1#1 = sin8s::x2#0 -- vbuxx=vbuaa 
    tax
    // [90] mulu8_sel::v2#1 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [91] call mulu8_sel 
    // [204] phi from sin8s::@9 to mulu8_sel [phi:sin8s::@9->mulu8_sel]
    // [204] phi mulu8_sel::select#5 = 1 [phi:sin8s::@9->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [204] phi mulu8_sel::v2#5 = mulu8_sel::v2#1 [phi:sin8s::@9->mulu8_sel#1] -- register_copy 
    // [204] phi mulu8_sel::v1#5 = mulu8_sel::v1#1 [phi:sin8s::@9->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x2, x1, 1)
    // [92] mulu8_sel::return#1 = mulu8_sel::return#12
    // sin8s::@10
    // x3 = mulu8_sel(x2, x1, 1)
    // [93] sin8s::x3#0 = mulu8_sel::return#1 -- vbuz1=vbuaa 
    sta.z x3
    // mulu8_sel(x3, DIV_6, 1)
    // [94] mulu8_sel::v1#2 = sin8s::x3#0 -- vbuxx=vbuz1 
    tax
    // [95] call mulu8_sel 
    // [204] phi from sin8s::@10 to mulu8_sel [phi:sin8s::@10->mulu8_sel]
    // [204] phi mulu8_sel::select#5 = 1 [phi:sin8s::@10->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #1
    sta.z mulu8_sel.select
    // [204] phi mulu8_sel::v2#5 = sin8s::DIV_6 [phi:sin8s::@10->mulu8_sel#1] -- vbuyy=vbuc1 
    ldy #DIV_6
    // [204] phi mulu8_sel::v1#5 = mulu8_sel::v1#2 [phi:sin8s::@10->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x3, DIV_6, 1)
    // [96] mulu8_sel::return#2 = mulu8_sel::return#12
    // sin8s::@11
    // x3_6 = mulu8_sel(x3, DIV_6, 1)
    // [97] sin8s::x3_6#0 = mulu8_sel::return#2
    // usinx = x1 - x3_6
    // [98] sin8s::usinx#0 = sin8s::x1#0 - sin8s::x3_6#0 -- vbuz1=vbuz2_minus_vbuaa 
    eor #$ff
    sec
    adc.z x1
    sta.z usinx
    // mulu8_sel(x3, x1, 0)
    // [99] mulu8_sel::v1#3 = sin8s::x3#0 -- vbuxx=vbuz1 
    ldx.z x3
    // [100] mulu8_sel::v2#3 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [101] call mulu8_sel 
    // [204] phi from sin8s::@11 to mulu8_sel [phi:sin8s::@11->mulu8_sel]
    // [204] phi mulu8_sel::select#5 = 0 [phi:sin8s::@11->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [204] phi mulu8_sel::v2#5 = mulu8_sel::v2#3 [phi:sin8s::@11->mulu8_sel#1] -- register_copy 
    // [204] phi mulu8_sel::v1#5 = mulu8_sel::v1#3 [phi:sin8s::@11->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x3, x1, 0)
    // [102] mulu8_sel::return#10 = mulu8_sel::return#12
    // sin8s::@12
    // x4 = mulu8_sel(x3, x1, 0)
    // [103] sin8s::x4#0 = mulu8_sel::return#10
    // mulu8_sel(x4, x1, 0)
    // [104] mulu8_sel::v1#4 = sin8s::x4#0 -- vbuxx=vbuaa 
    tax
    // [105] mulu8_sel::v2#4 = sin8s::x1#0 -- vbuyy=vbuz1 
    ldy.z x1
    // [106] call mulu8_sel 
    // [204] phi from sin8s::@12 to mulu8_sel [phi:sin8s::@12->mulu8_sel]
    // [204] phi mulu8_sel::select#5 = 0 [phi:sin8s::@12->mulu8_sel#0] -- vbuz1=vbuc1 
    lda #0
    sta.z mulu8_sel.select
    // [204] phi mulu8_sel::v2#5 = mulu8_sel::v2#4 [phi:sin8s::@12->mulu8_sel#1] -- register_copy 
    // [204] phi mulu8_sel::v1#5 = mulu8_sel::v1#4 [phi:sin8s::@12->mulu8_sel#2] -- register_copy 
    jsr mulu8_sel
    // mulu8_sel(x4, x1, 0)
    // [107] mulu8_sel::return#11 = mulu8_sel::return#12
    // sin8s::@13
    // x5 = mulu8_sel(x4, x1, 0)
    // [108] sin8s::x5#0 = mulu8_sel::return#11
    // x5_128 = x5>>4
    // [109] sin8s::x5_128#0 = sin8s::x5#0 >> 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // usinx = usinx + x5_128
    // [110] sin8s::usinx#1 = sin8s::usinx#0 + sin8s::x5_128#0 -- vbuxx=vbuz1_plus_vbuaa 
    clc
    adc.z usinx
    tax
    // if(usinx>=128)
    // [111] if(sin8s::usinx#1<$80) goto sin8s::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc __b3
    // sin8s::@7
    // usinx--;
    // [112] sin8s::usinx#2 = -- sin8s::usinx#1 -- vbuxx=_dec_vbuxx 
    dex
    // [113] phi from sin8s::@13 sin8s::@7 to sin8s::@3 [phi:sin8s::@13/sin8s::@7->sin8s::@3]
    // [113] phi sin8s::usinx#4 = sin8s::usinx#1 [phi:sin8s::@13/sin8s::@7->sin8s::@3#0] -- register_copy 
    // sin8s::@3
  __b3:
    // if(isUpper!=0)
    // [114] if(sin8s::isUpper#10==0) goto sin8s::@14 -- vbuz1_eq_0_then_la1 
    lda.z isUpper
    cmp #0
    beq __b14
    // sin8s::@8
    // sinx = -(signed char)usinx
    // [115] sin8s::sinx#1 = - (signed byte)sin8s::usinx#4 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    // [116] phi from sin8s::@14 sin8s::@8 to sin8s::@4 [phi:sin8s::@14/sin8s::@8->sin8s::@4]
    // [116] phi sin8s::return#1 = sin8s::return#5 [phi:sin8s::@14/sin8s::@8->sin8s::@4#0] -- register_copy 
    // sin8s::@4
    // sin8s::@return
    // }
    // [117] return 
    rts
    // sin8s::@14
  __b14:
    // [118] sin8s::return#5 = (signed byte)sin8s::usinx#4 -- vbsaa=vbsxx 
    txa
    rts
}
  // div32u16u
// Divide unsigned 32-bit unsigned long dividend with a 16-bit unsigned int divisor
// The 16-bit unsigned int remainder can be found in rem16u after the division
div32u16u: {
    .label quotient_hi = $22
    .label quotient_lo = $2a
    .label return = $1b
    // divr16u(>dividend, divisor, 0)
    // [120] call divr16u 
    // [186] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
    // [186] phi divr16u::dividend#6 = >PI2_u4f28 [phi:div32u16u->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28>>$10
    sta.z divr16u.dividend
    lda #>PI2_u4f28>>$10
    sta.z divr16u.dividend+1
    // [186] phi divr16u::rem#11 = 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z divr16u.rem
    sta.z divr16u.rem+1
    jsr divr16u
    // divr16u(>dividend, divisor, 0)
    // [121] divr16u::return#3 = divr16u::return#0
    // div32u16u::@1
    // quotient_hi = divr16u(>dividend, divisor, 0)
    // [122] div32u16u::quotient_hi#0 = divr16u::return#3 -- vwuz1=vwuz2 
    lda.z divr16u.return
    sta.z quotient_hi
    lda.z divr16u.return+1
    sta.z quotient_hi+1
    // divr16u(<dividend, divisor, rem16u)
    // [123] divr16u::rem#5 = rem16u#0
    // [124] call divr16u 
    // [186] phi from div32u16u::@1 to divr16u [phi:div32u16u::@1->divr16u]
    // [186] phi divr16u::dividend#6 = <PI2_u4f28 [phi:div32u16u::@1->divr16u#0] -- vwuz1=vwuc1 
    lda #<PI2_u4f28&$ffff
    sta.z divr16u.dividend
    lda #>PI2_u4f28&$ffff
    sta.z divr16u.dividend+1
    // [186] phi divr16u::rem#11 = divr16u::rem#5 [phi:div32u16u::@1->divr16u#1] -- register_copy 
    jsr divr16u
    // divr16u(<dividend, divisor, rem16u)
    // [125] divr16u::return#4 = divr16u::return#0
    // div32u16u::@2
    // quotient_lo = divr16u(<dividend, divisor, rem16u)
    // [126] div32u16u::quotient_lo#0 = divr16u::return#4
    // quotient = { quotient_hi, quotient_lo}
    // [127] div32u16u::return#0 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda.z quotient_hi
    sta.z return+2
    lda.z quotient_hi+1
    sta.z return+3
    lda.z quotient_lo
    sta.z return
    lda.z quotient_lo+1
    sta.z return+1
    // div32u16u::@return
    // }
    // [128] return 
    rts
}
  // sin16s
// Calculate signed int sine sin(x)
// x: unsigned long input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed int sin(x) s[0.15] - using the full range  -$7fff - $7fff
// sin16s(dword zp(9) x)
sin16s: {
    .label __4 = $24
    .label x = 9
    .label return = $d
    .label x1 = $28
    .label x2 = $19
    .label x3 = $19
    .label x3_6 = $2a
    .label usinx = $d
    .label x4 = $19
    .label x5 = $2a
    .label x5_128 = $2a
    .label sinx = $d
    // if(x >= PI_u4f28 )
    // [129] if(sin16s::x#0<PI_u4f28) goto sin16s::@1 -- vduz1_lt_vduc1_then_la1 
    lda.z x+3
    cmp #>PI_u4f28>>$10
    bcc __b4
    bne !+
    lda.z x+2
    cmp #<PI_u4f28>>$10
    bcc __b4
    bne !+
    lda.z x+1
    cmp #>PI_u4f28
    bcc __b4
    bne !+
    lda.z x
    cmp #<PI_u4f28
    bcc __b4
  !:
    // sin16s::@4
    // x = x - PI_u4f28
    // [130] sin16s::x#1 = sin16s::x#0 - PI_u4f28 -- vduz1=vduz1_minus_vduc1 
    lda.z x
    sec
    sbc #<PI_u4f28
    sta.z x
    lda.z x+1
    sbc #>PI_u4f28
    sta.z x+1
    lda.z x+2
    sbc #<PI_u4f28>>$10
    sta.z x+2
    lda.z x+3
    sbc #>PI_u4f28>>$10
    sta.z x+3
    // [131] phi from sin16s::@4 to sin16s::@1 [phi:sin16s::@4->sin16s::@1]
    // [131] phi sin16s::isUpper#2 = 1 [phi:sin16s::@4->sin16s::@1#0] -- vbuyy=vbuc1 
    ldy #1
    // [131] phi sin16s::x#4 = sin16s::x#1 [phi:sin16s::@4->sin16s::@1#1] -- register_copy 
    jmp __b1
    // [131] phi from sin16s to sin16s::@1 [phi:sin16s->sin16s::@1]
  __b4:
    // [131] phi sin16s::isUpper#2 = 0 [phi:sin16s->sin16s::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [131] phi sin16s::x#4 = sin16s::x#0 [phi:sin16s->sin16s::@1#1] -- register_copy 
    // sin16s::@1
  __b1:
    // if(x >= PI_HALF_u4f28 )
    // [132] if(sin16s::x#4<PI_HALF_u4f28) goto sin16s::@2 -- vduz1_lt_vduc1_then_la1 
    lda.z x+3
    cmp #>PI_HALF_u4f28>>$10
    bcc __b2
    bne !+
    lda.z x+2
    cmp #<PI_HALF_u4f28>>$10
    bcc __b2
    bne !+
    lda.z x+1
    cmp #>PI_HALF_u4f28
    bcc __b2
    bne !+
    lda.z x
    cmp #<PI_HALF_u4f28
    bcc __b2
  !:
    // sin16s::@5
    // x = PI_u4f28 - x
    // [133] sin16s::x#2 = PI_u4f28 - sin16s::x#4 -- vduz1=vduc1_minus_vduz1 
    lda #<PI_u4f28
    sec
    sbc.z x
    sta.z x
    lda #>PI_u4f28
    sbc.z x+1
    sta.z x+1
    lda #<PI_u4f28>>$10
    sbc.z x+2
    sta.z x+2
    lda #>PI_u4f28>>$10
    sbc.z x+3
    sta.z x+3
    // [134] phi from sin16s::@1 sin16s::@5 to sin16s::@2 [phi:sin16s::@1/sin16s::@5->sin16s::@2]
    // [134] phi sin16s::x#6 = sin16s::x#4 [phi:sin16s::@1/sin16s::@5->sin16s::@2#0] -- register_copy 
    // sin16s::@2
  __b2:
    // x<<3
    // [135] sin16s::$4 = sin16s::x#6 << 3 -- vduz1=vduz2_rol_3 
    lda.z x
    asl
    sta.z __4
    lda.z x+1
    rol
    sta.z __4+1
    lda.z x+2
    rol
    sta.z __4+2
    lda.z x+3
    rol
    sta.z __4+3
    asl.z __4
    rol.z __4+1
    rol.z __4+2
    rol.z __4+3
    asl.z __4
    rol.z __4+1
    rol.z __4+2
    rol.z __4+3
    // x1 = >x<<3
    // [136] sin16s::x1#0 = > sin16s::$4 -- vwuz1=_hi_vduz2 
    lda.z __4+2
    sta.z x1
    lda.z __4+3
    sta.z x1+1
    // mulu16_sel(x1, x1, 0)
    // [137] mulu16_sel::v1#0 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v1
    lda.z x1+1
    sta.z mulu16_sel.v1+1
    // [138] mulu16_sel::v2#0 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [139] call mulu16_sel 
    // [213] phi from sin16s::@2 to mulu16_sel [phi:sin16s::@2->mulu16_sel]
    // [213] phi mulu16_sel::select#5 = 0 [phi:sin16s::@2->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [213] phi mulu16_sel::v2#5 = mulu16_sel::v2#0 [phi:sin16s::@2->mulu16_sel#1] -- register_copy 
    // [213] phi mulu16_sel::v1#5 = mulu16_sel::v1#0 [phi:sin16s::@2->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x1, x1, 0)
    // [140] mulu16_sel::return#0 = mulu16_sel::return#12
    // sin16s::@7
    // x2 = mulu16_sel(x1, x1, 0)
    // [141] sin16s::x2#0 = mulu16_sel::return#0 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z x2
    lda.z mulu16_sel.return+1
    sta.z x2+1
    // mulu16_sel(x2, x1, 1)
    // [142] mulu16_sel::v1#1 = sin16s::x2#0
    // [143] mulu16_sel::v2#1 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [144] call mulu16_sel 
    // [213] phi from sin16s::@7 to mulu16_sel [phi:sin16s::@7->mulu16_sel]
    // [213] phi mulu16_sel::select#5 = 1 [phi:sin16s::@7->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [213] phi mulu16_sel::v2#5 = mulu16_sel::v2#1 [phi:sin16s::@7->mulu16_sel#1] -- register_copy 
    // [213] phi mulu16_sel::v1#5 = mulu16_sel::v1#1 [phi:sin16s::@7->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x2, x1, 1)
    // [145] mulu16_sel::return#1 = mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z mulu16_sel.return_1
    lda.z mulu16_sel.return+1
    sta.z mulu16_sel.return_1+1
    // sin16s::@8
    // x3 = mulu16_sel(x2, x1, 1)
    // [146] sin16s::x3#0 = mulu16_sel::return#1
    // mulu16_sel(x3, $10000/6, 1)
    // [147] mulu16_sel::v1#2 = sin16s::x3#0
    // [148] call mulu16_sel 
    // [213] phi from sin16s::@8 to mulu16_sel [phi:sin16s::@8->mulu16_sel]
    // [213] phi mulu16_sel::select#5 = 1 [phi:sin16s::@8->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #1
    // [213] phi mulu16_sel::v2#5 = (word)$10000/6 [phi:sin16s::@8->mulu16_sel#1] -- vwuz1=vwuc1 
    lda #<$10000/6
    sta.z mulu16_sel.v2
    lda #>$10000/6
    sta.z mulu16_sel.v2+1
    // [213] phi mulu16_sel::v1#5 = mulu16_sel::v1#2 [phi:sin16s::@8->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x3, $10000/6, 1)
    // [149] mulu16_sel::return#2 = mulu16_sel::return#12
    // sin16s::@9
    // x3_6 = mulu16_sel(x3, $10000/6, 1)
    // [150] sin16s::x3_6#0 = mulu16_sel::return#2
    // usinx = x1 - x3_6
    // [151] sin16s::usinx#0 = sin16s::x1#0 - sin16s::x3_6#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z x1
    sec
    sbc.z x3_6
    sta.z usinx
    lda.z x1+1
    sbc.z x3_6+1
    sta.z usinx+1
    // mulu16_sel(x3, x1, 0)
    // [152] mulu16_sel::v1#3 = sin16s::x3#0
    // [153] mulu16_sel::v2#3 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [154] call mulu16_sel 
    // [213] phi from sin16s::@9 to mulu16_sel [phi:sin16s::@9->mulu16_sel]
    // [213] phi mulu16_sel::select#5 = 0 [phi:sin16s::@9->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [213] phi mulu16_sel::v2#5 = mulu16_sel::v2#3 [phi:sin16s::@9->mulu16_sel#1] -- register_copy 
    // [213] phi mulu16_sel::v1#5 = mulu16_sel::v1#3 [phi:sin16s::@9->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x3, x1, 0)
    // [155] mulu16_sel::return#10 = mulu16_sel::return#12 -- vwuz1=vwuz2 
    lda.z mulu16_sel.return
    sta.z mulu16_sel.return_1
    lda.z mulu16_sel.return+1
    sta.z mulu16_sel.return_1+1
    // sin16s::@10
    // x4 = mulu16_sel(x3, x1, 0)
    // [156] sin16s::x4#0 = mulu16_sel::return#10
    // mulu16_sel(x4, x1, 0)
    // [157] mulu16_sel::v1#4 = sin16s::x4#0
    // [158] mulu16_sel::v2#4 = sin16s::x1#0 -- vwuz1=vwuz2 
    lda.z x1
    sta.z mulu16_sel.v2
    lda.z x1+1
    sta.z mulu16_sel.v2+1
    // [159] call mulu16_sel 
    // [213] phi from sin16s::@10 to mulu16_sel [phi:sin16s::@10->mulu16_sel]
    // [213] phi mulu16_sel::select#5 = 0 [phi:sin16s::@10->mulu16_sel#0] -- vbuxx=vbuc1 
    ldx #0
    // [213] phi mulu16_sel::v2#5 = mulu16_sel::v2#4 [phi:sin16s::@10->mulu16_sel#1] -- register_copy 
    // [213] phi mulu16_sel::v1#5 = mulu16_sel::v1#4 [phi:sin16s::@10->mulu16_sel#2] -- register_copy 
    jsr mulu16_sel
    // mulu16_sel(x4, x1, 0)
    // [160] mulu16_sel::return#11 = mulu16_sel::return#12
    // sin16s::@11
    // x5 = mulu16_sel(x4, x1, 0)
    // [161] sin16s::x5#0 = mulu16_sel::return#11
    // x5_128 = x5>>4
    // [162] sin16s::x5_128#0 = sin16s::x5#0 >> 4 -- vwuz1=vwuz1_ror_4 
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    lsr.z x5_128+1
    ror.z x5_128
    // usinx = usinx + x5_128
    // [163] sin16s::usinx#1 = sin16s::usinx#0 + sin16s::x5_128#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z usinx
    clc
    adc.z x5_128
    sta.z usinx
    lda.z usinx+1
    adc.z x5_128+1
    sta.z usinx+1
    // if(isUpper!=0)
    // [164] if(sin16s::isUpper#2==0) goto sin16s::@12 -- vbuyy_eq_0_then_la1 
    cpy #0
    beq __b3
    // sin16s::@6
    // sinx = -(signed int)usinx
    // [165] sin16s::sinx#1 = - (signed word)sin16s::usinx#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z sinx
    sta.z sinx
    lda #0
    sbc.z sinx+1
    sta.z sinx+1
    // [166] phi from sin16s::@12 sin16s::@6 to sin16s::@3 [phi:sin16s::@12/sin16s::@6->sin16s::@3]
    // [166] phi sin16s::return#1 = sin16s::return#5 [phi:sin16s::@12/sin16s::@6->sin16s::@3#0] -- register_copy 
    // sin16s::@3
  __b3:
    // sin16s::@return
    // }
    // [167] return 
    rts
    // sin16s::@12
    // [168] sin16s::return#5 = (signed word)sin16s::usinx#1
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = $f
    // [170] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [170] phi memset::dst#2 = (byte*)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [171] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [172] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [173] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [174] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [170] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [170] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [176] *print_char_cursor#29 = print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [177] print_char_cursor#10 = ++ print_char_cursor#29 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [178] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // b>>4
    // [179] print_uchar::$0 = print_uchar::b#0 >> 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [180] print_char::ch#3 = print_hextab[print_uchar::$0] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [181] call print_char 
  // Table of hexadecimal digits
    // [175] phi from print_uchar to print_char [phi:print_uchar->print_char]
    // [175] phi print_char_cursor#29 = print_char_cursor#10 [phi:print_uchar->print_char#0] -- register_copy 
    // [175] phi print_char::ch#5 = print_char::ch#3 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@1
    // b&$f
    // [182] print_uchar::$2 = print_uchar::b#0 & $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&$f])
    // [183] print_char::ch#4 = print_hextab[print_uchar::$2] -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [184] call print_char 
    // [175] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
    // [175] phi print_char_cursor#29 = print_char_cursor#10 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [175] phi print_char::ch#5 = print_char::ch#4 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@return
    // }
    // [185] return 
    rts
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($12) dividend, word zp($19) rem)
divr16u: {
    .label rem = $19
    .label dividend = $12
    .label quotient = $2a
    .label return = $2a
    // [187] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
    // [187] phi divr16u::i#2 = 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [187] phi divr16u::quotient#3 = 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    txa
    sta.z quotient
    sta.z quotient+1
    // [187] phi divr16u::dividend#4 = divr16u::dividend#6 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [187] phi divr16u::rem#6 = divr16u::rem#11 [phi:divr16u->divr16u::@1#3] -- register_copy 
    // [187] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
    // [187] phi divr16u::i#2 = divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [187] phi divr16u::quotient#3 = divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [187] phi divr16u::dividend#4 = divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [187] phi divr16u::rem#6 = divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    // divr16u::@1
  __b1:
    // rem = rem << 1
    // [188] divr16u::rem#0 = divr16u::rem#6 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // >dividend
    // [189] divr16u::$1 = > divr16u::dividend#4 -- vbuaa=_hi_vwuz1 
    lda.z dividend+1
    // >dividend & $80
    // [190] divr16u::$2 = divr16u::$1 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if( (>dividend & $80) != 0 )
    // [191] if(divr16u::$2==0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2
    // divr16u::@4
    // rem = rem | 1
    // [192] divr16u::rem#1 = divr16u::rem#0 | 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [193] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
    // [193] phi divr16u::rem#7 = divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    // divr16u::@2
  __b2:
    // dividend = dividend << 1
    // [194] divr16u::dividend#0 = divr16u::dividend#4 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // quotient = quotient << 1
    // [195] divr16u::quotient#1 = divr16u::quotient#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // if(rem>=divisor)
    // [196] if(divr16u::rem#7<main::wavelength) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>main.wavelength
    bcc __b3
    bne !+
    lda.z rem
    cmp #<main.wavelength
    bcc __b3
  !:
    // divr16u::@5
    // quotient++;
    // [197] divr16u::quotient#2 = ++ divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // rem = rem - divisor
    // [198] divr16u::rem#2 = divr16u::rem#7 - main::wavelength -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<main.wavelength
    sta.z rem
    lda.z rem+1
    sbc #>main.wavelength
    sta.z rem+1
    // [199] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
    // [199] phi divr16u::return#0 = divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [199] phi divr16u::rem#10 = divr16u::rem#7 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    // divr16u::@3
  __b3:
    // for( char i : 0..15)
    // [200] divr16u::i#1 = ++ divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [201] if(divr16u::i#1!=$10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // divr16u::@6
    // rem16u = rem
    // [202] rem16u#0 = divr16u::rem#10
    // divr16u::@return
    // }
    // [203] return 
    rts
}
  // mulu8_sel
// Calculate val*val for two unsigned char values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
// mulu8_sel(byte register(X) v1, byte register(Y) v2, byte zp($11) select)
mulu8_sel: {
    .label __0 = $19
    .label __1 = $19
    .label select = $11
    // mul8u(v1, v2)
    // [205] mul8u::a#1 = mulu8_sel::v1#5
    // [206] mul8u::b#0 = mulu8_sel::v2#5 -- vbuaa=vbuyy 
    tya
    // [207] call mul8u 
    jsr mul8u
    // [208] mul8u::return#2 = mul8u::res#2
    // mulu8_sel::@1
    // [209] mulu8_sel::$0 = mul8u::return#2
    // mul8u(v1, v2)<<select
    // [210] mulu8_sel::$1 = mulu8_sel::$0 << mulu8_sel::select#5 -- vwuz1=vwuz1_rol_vbuz2 
    ldy.z select
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    dey
    bne !-
  !e:
    // >mul8u(v1, v2)<<select
    // [211] mulu8_sel::return#12 = > mulu8_sel::$1 -- vbuaa=_hi_vwuz1 
    lda.z __1+1
    // mulu8_sel::@return
    // }
    // [212] return 
    rts
}
  // mulu16_sel
// Calculate val*val for two unsigned int values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
// mulu16_sel(word zp($19) v1, word zp($12) v2, byte register(X) select)
mulu16_sel: {
    .label __0 = $24
    .label __1 = $24
    .label v1 = $19
    .label v2 = $12
    .label return = $2a
    .label return_1 = $19
    // mul16u(v1, v2)
    // [214] mul16u::a#1 = mulu16_sel::v1#5 -- vwuz1=vwuz2 
    lda.z v1
    sta.z mul16u.a
    lda.z v1+1
    sta.z mul16u.a+1
    // [215] mul16u::b#0 = mulu16_sel::v2#5
    // [216] call mul16u 
    jsr mul16u
    // [217] mul16u::return#2 = mul16u::res#2
    // mulu16_sel::@1
    // [218] mulu16_sel::$0 = mul16u::return#2
    // mul16u(v1, v2)<<select
    // [219] mulu16_sel::$1 = mulu16_sel::$0 << mulu16_sel::select#5 -- vduz1=vduz1_rol_vbuxx 
    cpx #0
    beq !e+
  !:
    asl.z __1
    rol.z __1+1
    rol.z __1+2
    rol.z __1+3
    dex
    bne !-
  !e:
    // >mul16u(v1, v2)<<select
    // [220] mulu16_sel::return#12 = > mulu16_sel::$1 -- vwuz1=_hi_vduz2 
    lda.z __1+2
    sta.z return
    lda.z __1+3
    sta.z return+1
    // mulu16_sel::@return
    // }
    // [221] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte register(X) a, byte register(A) b)
mul8u: {
    .label mb = $22
    .label res = $19
    .label return = $19
    // mb = b
    // [222] mul8u::mb#0 = (word)mul8u::b#0 -- vwuz1=_word_vbuaa 
    sta.z mb
    lda #0
    sta.z mb+1
    // [223] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
    // [223] phi mul8u::mb#2 = mul8u::mb#0 [phi:mul8u->mul8u::@1#0] -- register_copy 
    // [223] phi mul8u::res#2 = 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    sta.z res
    sta.z res+1
    // [223] phi mul8u::a#2 = mul8u::a#1 [phi:mul8u->mul8u::@1#2] -- register_copy 
    // mul8u::@1
  __b1:
    // while(a!=0)
    // [224] if(mul8u::a#2!=0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    // mul8u::@return
    // }
    // [225] return 
    rts
    // mul8u::@2
  __b2:
    // a&1
    // [226] mul8u::$1 = mul8u::a#2 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if( (a&1) != 0)
    // [227] if(mul8u::$1==0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // mul8u::@4
    // res = res + mb
    // [228] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [229] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
    // [229] phi mul8u::res#6 = mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    // mul8u::@3
  __b3:
    // a = a>>1
    // [230] mul8u::a#0 = mul8u::a#2 >> 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // mb = mb<<1
    // [231] mul8u::mb#1 = mul8u::mb#2 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [223] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
    // [223] phi mul8u::mb#2 = mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [223] phi mul8u::res#2 = mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [223] phi mul8u::a#2 = mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // mul16u
// Perform binary multiplication of two unsigned 16-bit unsigned ints into a 32-bit unsigned long
// mul16u(word zp($2a) a, word zp($12) b)
mul16u: {
    .label mb = $14
    .label a = $2a
    .label res = $24
    .label b = $12
    .label return = $24
    // mb = b
    // [232] mul16u::mb#0 = (dword)mul16u::b#0 -- vduz1=_dword_vwuz2 
    lda.z b
    sta.z mb
    lda.z b+1
    sta.z mb+1
    lda #0
    sta.z mb+2
    sta.z mb+3
    // [233] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
    // [233] phi mul16u::mb#2 = mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
    // [233] phi mul16u::res#2 = 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vduc1 
    sta.z res
    sta.z res+1
    lda #<0>>$10
    sta.z res+2
    lda #>0>>$10
    sta.z res+3
    // [233] phi mul16u::a#2 = mul16u::a#1 [phi:mul16u->mul16u::@1#2] -- register_copy 
    // mul16u::@1
  __b1:
    // while(a!=0)
    // [234] if(mul16u::a#2!=0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda.z a
    ora.z a+1
    bne __b2
    // mul16u::@return
    // }
    // [235] return 
    rts
    // mul16u::@2
  __b2:
    // a&1
    // [236] mul16u::$1 = mul16u::a#2 & 1 -- vbuaa=vwuz1_band_vbuc1 
    lda #1
    and.z a
    // if( (a&1) != 0)
    // [237] if(mul16u::$1==0) goto mul16u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // mul16u::@4
    // res = res + mb
    // [238] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    lda.z res+2
    adc.z mb+2
    sta.z res+2
    lda.z res+3
    adc.z mb+3
    sta.z res+3
    // [239] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
    // [239] phi mul16u::res#6 = mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    // mul16u::@3
  __b3:
    // a = a>>1
    // [240] mul16u::a#0 = mul16u::a#2 >> 1 -- vwuz1=vwuz1_ror_1 
    lsr.z a+1
    ror.z a
    // mb = mb<<1
    // [241] mul16u::mb#1 = mul16u::mb#2 << 1 -- vduz1=vduz1_rol_1 
    asl.z mb
    rol.z mb+1
    rol.z mb+2
    rol.z mb+3
    // [233] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
    // [233] phi mul16u::mb#2 = mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
    // [233] phi mul16u::res#2 = mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
    // [233] phi mul16u::a#2 = mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

