@begin: scope:[]  from
  [0] (byte) col1#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [1] (byte) col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  to:@2
@2: scope:[]  from @begin
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @2
  [4] phi()
main: scope:[main]  from @2
  [5] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [6] (byte) main::asd#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@1/(byte) main::asd#1 )
  [6] (byte) main::qwe#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 32 main::@1/(byte) main::qwe#1 )
  [6] (byte) main::x#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@1/(byte) main::x#1 )
  [6] (byte) main::row#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 12 main::@1/(byte) main::row#1 )
  [7] (byte) main::row#1 ← ++ (byte) main::row#2
  [8] *((const byte*) main::SCREEN#0 + (byte) main::x#2) ← (byte) main::row#1
  [9] (byte) main::qwe#1 ← ++ (byte) main::qwe#2
  [10] (byte) main::asd#1 ← (byte) main::asd#2 + (byte) main::qwe#1
  [11] (byte) main::x#1 ← ++ (byte) main::x#2
  [12] if((byte) main::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 11) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [13] *((const byte*) main::SCREEN#0) ← (byte) main::qwe#1
  [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) main::asd#1
  [15] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq()
  to:main::@return
main::@return: scope:[main]  from main::@2
  [16] return 
  to:@return
irq: scope:[irq]  from
  asm { lda$dc0d  }
  [18] *((const byte*) BGCOL#0) ← (byte) col1#0
  [19] (byte) col1#1 ← ++ (byte) col1#0
  [20] *((const byte*) BORDERCOL#0) ← (byte) col2#0
  [21] (byte) col2#1 ← ++ (byte) col2#0
  to:irq::@return
irq::@return: scope:[irq]  from irq
  [22] return 
  to:@return
