
void main() {
  byte STAR = 81;
  byte[40*25] screen = $0400;
  byte x0 = 0;
  byte y0 = 0;
  byte x1 = 39;
  byte y1 = 24;
  byte xd = x1-x0;
  byte yd = y1-y0;
  byte x = x0;
  byte y = y0;
  byte e = yd/2;
  word idx = x+y*40;
  do  {
      screen[idx] = STAR;
      x = x + 1;
      idx = idx + 1;
      e = e+yd;
      if(xd<e) {
          y = y+1;
          idx  = idx + 40;
          e = e - xd;
      }
  } while (x<(x1+1))
}
PROGRAM
proc (void()) main()
  (byte) main::STAR ← (byte) 81
  (byte[1000]) main::screen ← (word) 1024
  (byte) main::x0 ← (byte) 0
  (byte) main::y0 ← (byte) 0
  (byte) main::x1 ← (byte) 39
  (byte) main::y1 ← (byte) 24
  (byte~) main::$0 ← (byte) main::x1 - (byte) main::x0
  (byte) main::xd ← (byte~) main::$0
  (byte~) main::$1 ← (byte) main::y1 - (byte) main::y0
  (byte) main::yd ← (byte~) main::$1
  (byte) main::x ← (byte) main::x0
  (byte) main::y ← (byte) main::y0
  (byte~) main::$2 ← (byte) main::yd / (byte) 2
  (byte) main::e ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::y * (byte) 40
  (byte~) main::$4 ← (byte) main::x + (byte~) main::$3
  (word) main::idx ← (byte~) main::$4
main::@1:
  *((byte[1000]) main::screen + (word) main::idx) ← (byte) main::STAR
  (byte~) main::$5 ← (byte) main::x + (byte) 1
  (byte) main::x ← (byte~) main::$5
  (word~) main::$6 ← (word) main::idx + (byte) 1
  (word) main::idx ← (word~) main::$6
  (byte~) main::$7 ← (byte) main::e + (byte) main::yd
  (byte) main::e ← (byte~) main::$7
  (boolean~) main::$8 ← (byte) main::xd < (byte) main::e
  (boolean~) main::$9 ← ! (boolean~) main::$8
  if((boolean~) main::$9) goto main::@2
  (byte~) main::$10 ← (byte) main::y + (byte) 1
  (byte) main::y ← (byte~) main::$10
  (word~) main::$11 ← (word) main::idx + (byte) 40
  (word) main::idx ← (word~) main::$11
  (byte~) main::$12 ← (byte) main::e - (byte) main::xd
  (byte) main::e ← (byte~) main::$12
main::@2:
  (byte~) main::$13 ← (byte) main::x1 + (byte) 1
  (boolean~) main::$14 ← (byte) main::x < (byte~) main::$13
  if((boolean~) main::$14) goto main::@1
main::@return:
  return 
endproc // main()
  call main 

SYMBOLS
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$10
(word~) main::$11
(byte~) main::$12
(byte~) main::$13
(boolean~) main::$14
(byte~) main::$2
(byte~) main::$3
(byte~) main::$4
(byte~) main::$5
(word~) main::$6
(byte~) main::$7
(boolean~) main::$8
(boolean~) main::$9
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::STAR
(byte) main::e
(word) main::idx
(byte[1000]) main::screen
(byte) main::x
(byte) main::x0
(byte) main::x1
(byte) main::xd
(byte) main::y
(byte) main::y0
(byte) main::y1
(byte) main::yd

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from
  (byte) main::STAR ← (byte) 81
  (byte[1000]) main::screen ← (word) 1024
  (byte) main::x0 ← (byte) 0
  (byte) main::y0 ← (byte) 0
  (byte) main::x1 ← (byte) 39
  (byte) main::y1 ← (byte) 24
  (byte~) main::$0 ← (byte) main::x1 - (byte) main::x0
  (byte) main::xd ← (byte~) main::$0
  (byte~) main::$1 ← (byte) main::y1 - (byte) main::y0
  (byte) main::yd ← (byte~) main::$1
  (byte) main::x ← (byte) main::x0
  (byte) main::y ← (byte) main::y0
  (byte~) main::$2 ← (byte) main::yd / (byte) 2
  (byte) main::e ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::y * (byte) 40
  (byte~) main::$4 ← (byte) main::x + (byte~) main::$3
  (word) main::idx ← (byte~) main::$4
  to:main::@1
main::@1: scope:[main]  from main main::@2
  *((byte[1000]) main::screen + (word) main::idx) ← (byte) main::STAR
  (byte~) main::$5 ← (byte) main::x + (byte) 1
  (byte) main::x ← (byte~) main::$5
  (word~) main::$6 ← (word) main::idx + (byte) 1
  (word) main::idx ← (word~) main::$6
  (byte~) main::$7 ← (byte) main::e + (byte) main::yd
  (byte) main::e ← (byte~) main::$7
  (boolean~) main::$8 ← (byte) main::xd < (byte) main::e
  (boolean~) main::$9 ← ! (boolean~) main::$8
  if((boolean~) main::$9) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte~) main::$13 ← (byte) main::x1 + (byte) 1
  (boolean~) main::$14 ← (byte) main::x < (byte~) main::$13
  if((boolean~) main::$14) goto main::@1
  to:main::@4
main::@3: scope:[main]  from main::@1
  (byte~) main::$10 ← (byte) main::y + (byte) 1
  (byte) main::y ← (byte~) main::$10
  (word~) main::$11 ← (word) main::idx + (byte) 40
  (word) main::idx ← (word~) main::$11
  (byte~) main::$12 ← (byte) main::e - (byte) main::xd
  (byte) main::e ← (byte~) main::$12
  to:main::@2
main::@4: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

Removing empty block main::@4
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from
  (byte) main::STAR ← (byte) 81
  (byte[1000]) main::screen ← (word) 1024
  (byte) main::x0 ← (byte) 0
  (byte) main::y0 ← (byte) 0
  (byte) main::x1 ← (byte) 39
  (byte) main::y1 ← (byte) 24
  (byte~) main::$0 ← (byte) main::x1 - (byte) main::x0
  (byte) main::xd ← (byte~) main::$0
  (byte~) main::$1 ← (byte) main::y1 - (byte) main::y0
  (byte) main::yd ← (byte~) main::$1
  (byte) main::x ← (byte) main::x0
  (byte) main::y ← (byte) main::y0
  (byte~) main::$2 ← (byte) main::yd / (byte) 2
  (byte) main::e ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::y * (byte) 40
  (byte~) main::$4 ← (byte) main::x + (byte~) main::$3
  (word) main::idx ← (byte~) main::$4
  to:main::@1
main::@1: scope:[main]  from main main::@2
  *((byte[1000]) main::screen + (word) main::idx) ← (byte) main::STAR
  (byte~) main::$5 ← (byte) main::x + (byte) 1
  (byte) main::x ← (byte~) main::$5
  (word~) main::$6 ← (word) main::idx + (byte) 1
  (word) main::idx ← (word~) main::$6
  (byte~) main::$7 ← (byte) main::e + (byte) main::yd
  (byte) main::e ← (byte~) main::$7
  (boolean~) main::$8 ← (byte) main::xd < (byte) main::e
  (boolean~) main::$9 ← ! (boolean~) main::$8
  if((boolean~) main::$9) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte~) main::$13 ← (byte) main::x1 + (byte) 1
  (boolean~) main::$14 ← (byte) main::x < (byte~) main::$13
  if((boolean~) main::$14) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte~) main::$10 ← (byte) main::y + (byte) 1
  (byte) main::y ← (byte~) main::$10
  (word~) main::$11 ← (word) main::idx + (byte) 40
  (word) main::idx ← (word~) main::$11
  (byte~) main::$12 ← (byte) main::e - (byte) main::xd
  (byte) main::e ← (byte~) main::$12
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::STAR ← (byte) 81
  (byte[1000]) main::screen ← (word) 1024
  (byte) main::x0 ← (byte) 0
  (byte) main::y0 ← (byte) 0
  (byte) main::x1 ← (byte) 39
  (byte) main::y1 ← (byte) 24
  (byte~) main::$0 ← (byte) main::x1 - (byte) main::x0
  (byte) main::xd ← (byte~) main::$0
  (byte~) main::$1 ← (byte) main::y1 - (byte) main::y0
  (byte) main::yd ← (byte~) main::$1
  (byte) main::x ← (byte) main::x0
  (byte) main::y ← (byte) main::y0
  (byte~) main::$2 ← (byte) main::yd / (byte) 2
  (byte) main::e ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::y * (byte) 40
  (byte~) main::$4 ← (byte) main::x + (byte~) main::$3
  (word) main::idx ← (byte~) main::$4
  to:main::@1
main::@1: scope:[main]  from main main::@2
  *((byte[1000]) main::screen + (word) main::idx) ← (byte) main::STAR
  (byte~) main::$5 ← (byte) main::x + (byte) 1
  (byte) main::x ← (byte~) main::$5
  (word~) main::$6 ← (word) main::idx + (byte) 1
  (word) main::idx ← (word~) main::$6
  (byte~) main::$7 ← (byte) main::e + (byte) main::yd
  (byte) main::e ← (byte~) main::$7
  (boolean~) main::$8 ← (byte) main::xd < (byte) main::e
  (boolean~) main::$9 ← ! (boolean~) main::$8
  if((boolean~) main::$9) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte~) main::$13 ← (byte) main::x1 + (byte) 1
  (boolean~) main::$14 ← (byte) main::x < (byte~) main::$13
  if((boolean~) main::$14) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte~) main::$10 ← (byte) main::y + (byte) 1
  (byte) main::y ← (byte~) main::$10
  (word~) main::$11 ← (word) main::idx + (byte) 40
  (word) main::idx ← (word~) main::$11
  (byte~) main::$12 ← (byte) main::e - (byte) main::xd
  (byte) main::e ← (byte~) main::$12
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::STAR#0 ← (byte) 81
  (byte[1000]) main::screen#0 ← (word) 1024
  (byte) main::x0#0 ← (byte) 0
  (byte) main::y0#0 ← (byte) 0
  (byte) main::x1#0 ← (byte) 39
  (byte) main::y1#0 ← (byte) 24
  (byte~) main::$0 ← (byte) main::x1#0 - (byte) main::x0#0
  (byte) main::xd#0 ← (byte~) main::$0
  (byte~) main::$1 ← (byte) main::y1#0 - (byte) main::y0#0
  (byte) main::yd#0 ← (byte~) main::$1
  (byte) main::x#0 ← (byte) main::x0#0
  (byte) main::y#0 ← (byte) main::y0#0
  (byte~) main::$2 ← (byte) main::yd#0 / (byte) 2
  (byte) main::e#0 ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::y#0 * (byte) 40
  (byte~) main::$4 ← (byte) main::x#0 + (byte~) main::$3
  (word) main::idx#0 ← (byte~) main::$4
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#3 ← phi( main/(byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::x1#2 ← phi( main/(byte) main::x1#0 main::@2/(byte) main::x1#1 )
  (byte) main::xd#1 ← phi( main/(byte) main::xd#0 main::@2/(byte) main::xd#3 )
  (byte) main::yd#1 ← phi( main/(byte) main::yd#0 main::@2/(byte) main::yd#2 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@2/(byte) main::x#3 )
  (word) main::idx#3 ← phi( main/(word) main::idx#0 main::@2/(word) main::idx#5 )
  (byte[1000]) main::screen#1 ← phi( main/(byte[1000]) main::screen#0 main::@2/(byte[1000]) main::screen#2 )
  (byte) main::STAR#1 ← phi( main/(byte) main::STAR#0 main::@2/(byte) main::STAR#2 )
  *((byte[1000]) main::screen#1 + (word) main::idx#3) ← (byte) main::STAR#1
  (byte~) main::$5 ← (byte) main::x#2 + (byte) 1
  (byte) main::x#1 ← (byte~) main::$5
  (word~) main::$6 ← (word) main::idx#3 + (byte) 1
  (word) main::idx#1 ← (word~) main::$6
  (byte~) main::$7 ← (byte) main::e#3 + (byte) main::yd#1
  (byte) main::e#1 ← (byte~) main::$7
  (boolean~) main::$8 ← (byte) main::xd#1 < (byte) main::e#1
  (boolean~) main::$9 ← ! (boolean~) main::$8
  if((boolean~) main::$9) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#3 main::@3/(byte) main::y#1 )
  (byte) main::xd#3 ← phi( main::@1/(byte) main::xd#1 main::@3/(byte) main::xd#2 )
  (byte) main::yd#2 ← phi( main::@1/(byte) main::yd#1 main::@3/(byte) main::yd#3 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (word) main::idx#5 ← phi( main::@1/(word) main::idx#1 main::@3/(word) main::idx#2 )
  (byte[1000]) main::screen#2 ← phi( main::@1/(byte[1000]) main::screen#1 main::@3/(byte[1000]) main::screen#3 )
  (byte) main::STAR#2 ← phi( main::@1/(byte) main::STAR#1 main::@3/(byte) main::STAR#3 )
  (byte) main::x#3 ← phi( main::@1/(byte) main::x#1 main::@3/(byte) main::x#4 )
  (byte) main::x1#1 ← phi( main::@1/(byte) main::x1#2 main::@3/(byte) main::x1#3 )
  (byte~) main::$13 ← (byte) main::x1#1 + (byte) 1
  (boolean~) main::$14 ← (byte) main::x#3 < (byte~) main::$13
  if((boolean~) main::$14) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::yd#3 ← phi( main::@1/(byte) main::yd#1 )
  (byte[1000]) main::screen#3 ← phi( main::@1/(byte[1000]) main::screen#1 )
  (byte) main::STAR#3 ← phi( main::@1/(byte) main::STAR#1 )
  (byte) main::x#4 ← phi( main::@1/(byte) main::x#1 )
  (byte) main::x1#3 ← phi( main::@1/(byte) main::x1#2 )
  (byte) main::xd#2 ← phi( main::@1/(byte) main::xd#1 )
  (byte) main::e#4 ← phi( main::@1/(byte) main::e#1 )
  (word) main::idx#4 ← phi( main::@1/(word) main::idx#1 )
  (byte) main::y#2 ← phi( main::@1/(byte) main::y#3 )
  (byte~) main::$10 ← (byte) main::y#2 + (byte) 1
  (byte) main::y#1 ← (byte~) main::$10
  (word~) main::$11 ← (word) main::idx#4 + (byte) 40
  (word) main::idx#2 ← (word~) main::$11
  (byte~) main::$12 ← (byte) main::e#4 - (byte) main::xd#2
  (byte) main::e#2 ← (byte~) main::$12
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::STAR#0 ← (byte) 81
  (byte[1000]) main::screen#0 ← (word) 1024
  (byte) main::x0#0 ← (byte) 0
  (byte) main::y0#0 ← (byte) 0
  (byte) main::x1#0 ← (byte) 39
  (byte) main::y1#0 ← (byte) 24
  (byte~) main::$0 ← (byte) main::x1#0 - (byte) main::x0#0
  (byte) main::xd#0 ← (byte~) main::$0
  (byte~) main::$1 ← (byte) main::y1#0 - (byte) main::y0#0
  (byte) main::yd#0 ← (byte~) main::$1
  (byte) main::x#0 ← (byte) main::x0#0
  (byte) main::y#0 ← (byte) main::y0#0
  (byte~) main::$2 ← (byte) main::yd#0 / (byte) 2
  (byte) main::e#0 ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::y#0 * (byte) 40
  (byte~) main::$4 ← (byte) main::x#0 + (byte~) main::$3
  (word) main::idx#0 ← (byte~) main::$4
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#3 ← phi( main/(byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::x1#2 ← phi( main/(byte) main::x1#0 main::@2/(byte) main::x1#1 )
  (byte) main::xd#1 ← phi( main/(byte) main::xd#0 main::@2/(byte) main::xd#3 )
  (byte) main::yd#1 ← phi( main/(byte) main::yd#0 main::@2/(byte) main::yd#2 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@2/(byte) main::x#3 )
  (word) main::idx#3 ← phi( main/(word) main::idx#0 main::@2/(word) main::idx#5 )
  (byte[1000]) main::screen#1 ← phi( main/(byte[1000]) main::screen#0 main::@2/(byte[1000]) main::screen#2 )
  (byte) main::STAR#1 ← phi( main/(byte) main::STAR#0 main::@2/(byte) main::STAR#2 )
  *((byte[1000]) main::screen#1 + (word) main::idx#3) ← (byte) main::STAR#1
  (byte~) main::$5 ← (byte) main::x#2 + (byte) 1
  (byte) main::x#1 ← (byte~) main::$5
  (word~) main::$6 ← (word) main::idx#3 + (byte) 1
  (word) main::idx#1 ← (word~) main::$6
  (byte~) main::$7 ← (byte) main::e#3 + (byte) main::yd#1
  (byte) main::e#1 ← (byte~) main::$7
  (boolean~) main::$8 ← (byte) main::xd#1 < (byte) main::e#1
  (boolean~) main::$9 ← ! (boolean~) main::$8
  if((boolean~) main::$9) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#3 main::@3/(byte) main::y#1 )
  (byte) main::xd#3 ← phi( main::@1/(byte) main::xd#1 main::@3/(byte) main::xd#2 )
  (byte) main::yd#2 ← phi( main::@1/(byte) main::yd#1 main::@3/(byte) main::yd#3 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (word) main::idx#5 ← phi( main::@1/(word) main::idx#1 main::@3/(word) main::idx#2 )
  (byte[1000]) main::screen#2 ← phi( main::@1/(byte[1000]) main::screen#1 main::@3/(byte[1000]) main::screen#3 )
  (byte) main::STAR#2 ← phi( main::@1/(byte) main::STAR#1 main::@3/(byte) main::STAR#3 )
  (byte) main::x#3 ← phi( main::@1/(byte) main::x#1 main::@3/(byte) main::x#4 )
  (byte) main::x1#1 ← phi( main::@1/(byte) main::x1#2 main::@3/(byte) main::x1#3 )
  (byte~) main::$13 ← (byte) main::x1#1 + (byte) 1
  (boolean~) main::$14 ← (byte) main::x#3 < (byte~) main::$13
  if((boolean~) main::$14) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::yd#3 ← phi( main::@1/(byte) main::yd#1 )
  (byte[1000]) main::screen#3 ← phi( main::@1/(byte[1000]) main::screen#1 )
  (byte) main::STAR#3 ← phi( main::@1/(byte) main::STAR#1 )
  (byte) main::x#4 ← phi( main::@1/(byte) main::x#1 )
  (byte) main::x1#3 ← phi( main::@1/(byte) main::x1#2 )
  (byte) main::xd#2 ← phi( main::@1/(byte) main::xd#1 )
  (byte) main::e#4 ← phi( main::@1/(byte) main::e#1 )
  (word) main::idx#4 ← phi( main::@1/(word) main::idx#1 )
  (byte) main::y#2 ← phi( main::@1/(byte) main::y#3 )
  (byte~) main::$10 ← (byte) main::y#2 + (byte) 1
  (byte) main::y#1 ← (byte~) main::$10
  (word~) main::$11 ← (word) main::idx#4 + (byte) 40
  (word) main::idx#2 ← (word~) main::$11
  (byte~) main::$12 ← (byte) main::e#4 - (byte) main::xd#2
  (byte) main::e#2 ← (byte~) main::$12
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

INITIAL SSA SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$10
(word~) main::$11
(byte~) main::$12
(byte~) main::$13
(boolean~) main::$14
(byte~) main::$2
(byte~) main::$3
(byte~) main::$4
(byte~) main::$5
(word~) main::$6
(byte~) main::$7
(boolean~) main::$8
(boolean~) main::$9
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::STAR
(byte) main::STAR#0
(byte) main::STAR#1
(byte) main::STAR#2
(byte) main::STAR#3
(byte) main::e
(byte) main::e#0
(byte) main::e#1
(byte) main::e#2
(byte) main::e#3
(byte) main::e#4
(byte) main::e#5
(word) main::idx
(word) main::idx#0
(word) main::idx#1
(word) main::idx#2
(word) main::idx#3
(word) main::idx#4
(word) main::idx#5
(byte[1000]) main::screen
(byte[1000]) main::screen#0
(byte[1000]) main::screen#1
(byte[1000]) main::screen#2
(byte[1000]) main::screen#3
(byte) main::x
(byte) main::x#0
(byte) main::x#1
(byte) main::x#2
(byte) main::x#3
(byte) main::x#4
(byte) main::x0
(byte) main::x0#0
(byte) main::x1
(byte) main::x1#0
(byte) main::x1#1
(byte) main::x1#2
(byte) main::x1#3
(byte) main::xd
(byte) main::xd#0
(byte) main::xd#1
(byte) main::xd#2
(byte) main::xd#3
(byte) main::y
(byte) main::y#0
(byte) main::y#1
(byte) main::y#2
(byte) main::y#3
(byte) main::y#4
(byte) main::y0
(byte) main::y0#0
(byte) main::y1
(byte) main::y1#0
(byte) main::yd
(byte) main::yd#0
(byte) main::yd#1
(byte) main::yd#2
(byte) main::yd#3

Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::STAR#0 ← (byte) 81
  (byte[1000]) main::screen#0 ← (word) 1024
  (byte) main::x0#0 ← (byte) 0
  (byte) main::y0#0 ← (byte) 0
  (byte) main::x1#0 ← (byte) 39
  (byte) main::y1#0 ← (byte) 24
  (byte~) main::$0 ← (byte) main::x1#0 - (byte) main::x0#0
  (byte) main::xd#0 ← (byte~) main::$0
  (byte~) main::$1 ← (byte) main::y1#0 - (byte) main::y0#0
  (byte) main::yd#0 ← (byte~) main::$1
  (byte) main::x#0 ← (byte) main::x0#0
  (byte) main::y#0 ← (byte) main::y0#0
  (byte~) main::$2 ← (byte) main::yd#0 / (byte) 2
  (byte) main::e#0 ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::y#0 * (byte) 40
  (byte~) main::$4 ← (byte) main::x#0 + (byte~) main::$3
  (word) main::idx#0 ← (byte~) main::$4
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#3 ← phi( main/(byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::x1#2 ← phi( main/(byte) main::x1#0 main::@2/(byte) main::x1#1 )
  (byte) main::xd#1 ← phi( main/(byte) main::xd#0 main::@2/(byte) main::xd#3 )
  (byte) main::yd#1 ← phi( main/(byte) main::yd#0 main::@2/(byte) main::yd#2 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@2/(byte) main::x#3 )
  (word) main::idx#3 ← phi( main/(word) main::idx#0 main::@2/(word) main::idx#5 )
  (byte[1000]) main::screen#1 ← phi( main/(byte[1000]) main::screen#0 main::@2/(byte[1000]) main::screen#2 )
  (byte) main::STAR#1 ← phi( main/(byte) main::STAR#0 main::@2/(byte) main::STAR#2 )
  *((byte[1000]) main::screen#1 + (word) main::idx#3) ← (byte) main::STAR#1
  (byte~) main::$5 ← (byte) main::x#2 + (byte) 1
  (byte) main::x#1 ← (byte~) main::$5
  (word~) main::$6 ← (word) main::idx#3 + (byte) 1
  (word) main::idx#1 ← (word~) main::$6
  (byte~) main::$7 ← (byte) main::e#3 + (byte) main::yd#1
  (byte) main::e#1 ← (byte~) main::$7
  (boolean~) main::$8 ← (byte) main::xd#1 < (byte) main::e#1
  (boolean~) main::$9 ← ! (boolean~) main::$8
  if((boolean~) main::$9) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#3 main::@3/(byte) main::y#1 )
  (byte) main::xd#3 ← phi( main::@1/(byte) main::xd#1 main::@3/(byte) main::xd#2 )
  (byte) main::yd#2 ← phi( main::@1/(byte) main::yd#1 main::@3/(byte) main::yd#3 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (word) main::idx#5 ← phi( main::@1/(word) main::idx#1 main::@3/(word) main::idx#2 )
  (byte[1000]) main::screen#2 ← phi( main::@1/(byte[1000]) main::screen#1 main::@3/(byte[1000]) main::screen#3 )
  (byte) main::STAR#2 ← phi( main::@1/(byte) main::STAR#1 main::@3/(byte) main::STAR#3 )
  (byte) main::x#3 ← phi( main::@1/(byte) main::x#1 main::@3/(byte) main::x#4 )
  (byte) main::x1#1 ← phi( main::@1/(byte) main::x1#2 main::@3/(byte) main::x1#3 )
  (byte~) main::$13 ← (byte) main::x1#1 + (byte) 1
  (boolean~) main::$14 ← (byte) main::x#3 < (byte~) main::$13
  if((boolean~) main::$14) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::yd#3 ← phi( main::@1/(byte) main::yd#1 )
  (byte[1000]) main::screen#3 ← phi( main::@1/(byte[1000]) main::screen#1 )
  (byte) main::STAR#3 ← phi( main::@1/(byte) main::STAR#1 )
  (byte) main::x#4 ← phi( main::@1/(byte) main::x#1 )
  (byte) main::x1#3 ← phi( main::@1/(byte) main::x1#2 )
  (byte) main::xd#2 ← phi( main::@1/(byte) main::xd#1 )
  (byte) main::e#4 ← phi( main::@1/(byte) main::e#1 )
  (word) main::idx#4 ← phi( main::@1/(word) main::idx#1 )
  (byte) main::y#2 ← phi( main::@1/(byte) main::y#3 )
  (byte~) main::$10 ← (byte) main::y#2 + (byte) 1
  (byte) main::y#1 ← (byte~) main::$10
  (word~) main::$11 ← (word) main::idx#4 + (byte) 40
  (word) main::idx#2 ← (word~) main::$11
  (byte~) main::$12 ← (byte) main::e#4 - (byte) main::xd#2
  (byte) main::e#2 ← (byte~) main::$12
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Inversing boolean not (boolean~) main::$9 ← (byte) main::xd#1 >= (byte) main::e#1 from (boolean~) main::$8 ← (byte) main::xd#1 < (byte) main::e#1
Succesful SSA optimization Pass2UnaryNotSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::STAR#0 ← (byte) 81
  (byte[1000]) main::screen#0 ← (word) 1024
  (byte) main::x0#0 ← (byte) 0
  (byte) main::y0#0 ← (byte) 0
  (byte) main::x1#0 ← (byte) 39
  (byte) main::y1#0 ← (byte) 24
  (byte~) main::$0 ← (byte) main::x1#0 - (byte) main::x0#0
  (byte) main::xd#0 ← (byte~) main::$0
  (byte~) main::$1 ← (byte) main::y1#0 - (byte) main::y0#0
  (byte) main::yd#0 ← (byte~) main::$1
  (byte) main::x#0 ← (byte) main::x0#0
  (byte) main::y#0 ← (byte) main::y0#0
  (byte~) main::$2 ← (byte) main::yd#0 / (byte) 2
  (byte) main::e#0 ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::y#0 * (byte) 40
  (byte~) main::$4 ← (byte) main::x#0 + (byte~) main::$3
  (word) main::idx#0 ← (byte~) main::$4
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#3 ← phi( main/(byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::x1#2 ← phi( main/(byte) main::x1#0 main::@2/(byte) main::x1#1 )
  (byte) main::xd#1 ← phi( main/(byte) main::xd#0 main::@2/(byte) main::xd#3 )
  (byte) main::yd#1 ← phi( main/(byte) main::yd#0 main::@2/(byte) main::yd#2 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@2/(byte) main::x#3 )
  (word) main::idx#3 ← phi( main/(word) main::idx#0 main::@2/(word) main::idx#5 )
  (byte[1000]) main::screen#1 ← phi( main/(byte[1000]) main::screen#0 main::@2/(byte[1000]) main::screen#2 )
  (byte) main::STAR#1 ← phi( main/(byte) main::STAR#0 main::@2/(byte) main::STAR#2 )
  *((byte[1000]) main::screen#1 + (word) main::idx#3) ← (byte) main::STAR#1
  (byte~) main::$5 ← (byte) main::x#2 + (byte) 1
  (byte) main::x#1 ← (byte~) main::$5
  (word~) main::$6 ← (word) main::idx#3 + (byte) 1
  (word) main::idx#1 ← (word~) main::$6
  (byte~) main::$7 ← (byte) main::e#3 + (byte) main::yd#1
  (byte) main::e#1 ← (byte~) main::$7
  (boolean~) main::$9 ← (byte) main::xd#1 >= (byte) main::e#1
  if((boolean~) main::$9) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#3 main::@3/(byte) main::y#1 )
  (byte) main::xd#3 ← phi( main::@1/(byte) main::xd#1 main::@3/(byte) main::xd#2 )
  (byte) main::yd#2 ← phi( main::@1/(byte) main::yd#1 main::@3/(byte) main::yd#3 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (word) main::idx#5 ← phi( main::@1/(word) main::idx#1 main::@3/(word) main::idx#2 )
  (byte[1000]) main::screen#2 ← phi( main::@1/(byte[1000]) main::screen#1 main::@3/(byte[1000]) main::screen#3 )
  (byte) main::STAR#2 ← phi( main::@1/(byte) main::STAR#1 main::@3/(byte) main::STAR#3 )
  (byte) main::x#3 ← phi( main::@1/(byte) main::x#1 main::@3/(byte) main::x#4 )
  (byte) main::x1#1 ← phi( main::@1/(byte) main::x1#2 main::@3/(byte) main::x1#3 )
  (byte~) main::$13 ← (byte) main::x1#1 + (byte) 1
  (boolean~) main::$14 ← (byte) main::x#3 < (byte~) main::$13
  if((boolean~) main::$14) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::yd#3 ← phi( main::@1/(byte) main::yd#1 )
  (byte[1000]) main::screen#3 ← phi( main::@1/(byte[1000]) main::screen#1 )
  (byte) main::STAR#3 ← phi( main::@1/(byte) main::STAR#1 )
  (byte) main::x#4 ← phi( main::@1/(byte) main::x#1 )
  (byte) main::x1#3 ← phi( main::@1/(byte) main::x1#2 )
  (byte) main::xd#2 ← phi( main::@1/(byte) main::xd#1 )
  (byte) main::e#4 ← phi( main::@1/(byte) main::e#1 )
  (word) main::idx#4 ← phi( main::@1/(word) main::idx#1 )
  (byte) main::y#2 ← phi( main::@1/(byte) main::y#3 )
  (byte~) main::$10 ← (byte) main::y#2 + (byte) 1
  (byte) main::y#1 ← (byte~) main::$10
  (word~) main::$11 ← (word) main::idx#4 + (byte) 40
  (word) main::idx#2 ← (word~) main::$11
  (byte~) main::$12 ← (byte) main::e#4 - (byte) main::xd#2
  (byte) main::e#2 ← (byte~) main::$12
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Alias (byte) main::xd#0 = (byte~) main::$0 
Alias (byte) main::yd#0 = (byte~) main::$1 
Alias (byte) main::x#0 = (byte) main::x0#0 
Alias (byte) main::y#0 = (byte) main::y0#0 
Alias (byte) main::e#0 = (byte~) main::$2 
Alias (word) main::idx#0 = (byte~) main::$4 
Alias (byte) main::x#1 = (byte~) main::$5 (byte) main::x#4 
Alias (word) main::idx#1 = (word~) main::$6 (word) main::idx#4 
Alias (byte) main::e#1 = (byte~) main::$7 (byte) main::e#4 
Alias (byte) main::y#2 = (byte) main::y#3 
Alias (byte) main::xd#1 = (byte) main::xd#2 
Alias (byte) main::x1#2 = (byte) main::x1#3 
Alias (byte) main::STAR#1 = (byte) main::STAR#3 
Alias (byte[1000]) main::screen#1 = (byte[1000]) main::screen#3 
Alias (byte) main::yd#1 = (byte) main::yd#3 
Alias (byte) main::y#1 = (byte~) main::$10 
Alias (word) main::idx#2 = (word~) main::$11 
Alias (byte) main::e#2 = (byte~) main::$12 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::STAR#0 ← (byte) 81
  (byte[1000]) main::screen#0 ← (word) 1024
  (byte) main::x#0 ← (byte) 0
  (byte) main::y#0 ← (byte) 0
  (byte) main::x1#0 ← (byte) 39
  (byte) main::y1#0 ← (byte) 24
  (byte) main::xd#0 ← (byte) main::x1#0 - (byte) main::x#0
  (byte) main::yd#0 ← (byte) main::y1#0 - (byte) main::y#0
  (byte) main::e#0 ← (byte) main::yd#0 / (byte) 2
  (byte~) main::$3 ← (byte) main::y#0 * (byte) 40
  (word) main::idx#0 ← (byte) main::x#0 + (byte~) main::$3
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#2 ← phi( main/(byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::x1#2 ← phi( main/(byte) main::x1#0 main::@2/(byte) main::x1#1 )
  (byte) main::xd#1 ← phi( main/(byte) main::xd#0 main::@2/(byte) main::xd#3 )
  (byte) main::yd#1 ← phi( main/(byte) main::yd#0 main::@2/(byte) main::yd#2 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@2/(byte) main::x#3 )
  (word) main::idx#3 ← phi( main/(word) main::idx#0 main::@2/(word) main::idx#5 )
  (byte[1000]) main::screen#1 ← phi( main/(byte[1000]) main::screen#0 main::@2/(byte[1000]) main::screen#2 )
  (byte) main::STAR#1 ← phi( main/(byte) main::STAR#0 main::@2/(byte) main::STAR#2 )
  *((byte[1000]) main::screen#1 + (word) main::idx#3) ← (byte) main::STAR#1
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (word) main::idx#1 ← (word) main::idx#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (byte) main::yd#1
  (boolean~) main::$9 ← (byte) main::xd#1 >= (byte) main::e#1
  if((boolean~) main::$9) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 )
  (byte) main::xd#3 ← phi( main::@1/(byte) main::xd#1 main::@3/(byte) main::xd#1 )
  (byte) main::yd#2 ← phi( main::@1/(byte) main::yd#1 main::@3/(byte) main::yd#1 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (word) main::idx#5 ← phi( main::@1/(word) main::idx#1 main::@3/(word) main::idx#2 )
  (byte[1000]) main::screen#2 ← phi( main::@1/(byte[1000]) main::screen#1 main::@3/(byte[1000]) main::screen#1 )
  (byte) main::STAR#2 ← phi( main::@1/(byte) main::STAR#1 main::@3/(byte) main::STAR#1 )
  (byte) main::x#3 ← phi( main::@1/(byte) main::x#1 main::@3/(byte) main::x#1 )
  (byte) main::x1#1 ← phi( main::@1/(byte) main::x1#2 main::@3/(byte) main::x1#2 )
  (byte~) main::$13 ← (byte) main::x1#1 + (byte) 1
  (boolean~) main::$14 ← (byte) main::x#3 < (byte~) main::$13
  if((boolean~) main::$14) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (word) main::idx#2 ← (word) main::idx#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (byte) main::xd#1
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Alias (byte) main::x1#1 = (byte) main::x1#2 
Alias (byte) main::x#1 = (byte) main::x#3 
Alias (byte) main::STAR#1 = (byte) main::STAR#2 
Alias (byte[1000]) main::screen#1 = (byte[1000]) main::screen#2 
Alias (byte) main::yd#1 = (byte) main::yd#2 
Alias (byte) main::xd#1 = (byte) main::xd#3 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::STAR#0 ← (byte) 81
  (byte[1000]) main::screen#0 ← (word) 1024
  (byte) main::x#0 ← (byte) 0
  (byte) main::y#0 ← (byte) 0
  (byte) main::x1#0 ← (byte) 39
  (byte) main::y1#0 ← (byte) 24
  (byte) main::xd#0 ← (byte) main::x1#0 - (byte) main::x#0
  (byte) main::yd#0 ← (byte) main::y1#0 - (byte) main::y#0
  (byte) main::e#0 ← (byte) main::yd#0 / (byte) 2
  (byte~) main::$3 ← (byte) main::y#0 * (byte) 40
  (word) main::idx#0 ← (byte) main::x#0 + (byte~) main::$3
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#2 ← phi( main/(byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::x1#1 ← phi( main/(byte) main::x1#0 main::@2/(byte) main::x1#1 )
  (byte) main::xd#1 ← phi( main/(byte) main::xd#0 main::@2/(byte) main::xd#1 )
  (byte) main::yd#1 ← phi( main/(byte) main::yd#0 main::@2/(byte) main::yd#1 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@2/(byte) main::x#1 )
  (word) main::idx#3 ← phi( main/(word) main::idx#0 main::@2/(word) main::idx#5 )
  (byte[1000]) main::screen#1 ← phi( main/(byte[1000]) main::screen#0 main::@2/(byte[1000]) main::screen#1 )
  (byte) main::STAR#1 ← phi( main/(byte) main::STAR#0 main::@2/(byte) main::STAR#1 )
  *((byte[1000]) main::screen#1 + (word) main::idx#3) ← (byte) main::STAR#1
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (word) main::idx#1 ← (word) main::idx#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (byte) main::yd#1
  (boolean~) main::$9 ← (byte) main::xd#1 >= (byte) main::e#1
  if((boolean~) main::$9) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (word) main::idx#5 ← phi( main::@1/(word) main::idx#1 main::@3/(word) main::idx#2 )
  (byte~) main::$13 ← (byte) main::x1#1 + (byte) 1
  (boolean~) main::$14 ← (byte) main::x#1 < (byte~) main::$13
  if((boolean~) main::$14) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (word) main::idx#2 ← (word) main::idx#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (byte) main::xd#1
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Self Phi Eliminated (byte) main::STAR#1
Self Phi Eliminated (byte[1000]) main::screen#1
Self Phi Eliminated (byte) main::yd#1
Self Phi Eliminated (byte) main::xd#1
Self Phi Eliminated (byte) main::x1#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::STAR#0 ← (byte) 81
  (byte[1000]) main::screen#0 ← (word) 1024
  (byte) main::x#0 ← (byte) 0
  (byte) main::y#0 ← (byte) 0
  (byte) main::x1#0 ← (byte) 39
  (byte) main::y1#0 ← (byte) 24
  (byte) main::xd#0 ← (byte) main::x1#0 - (byte) main::x#0
  (byte) main::yd#0 ← (byte) main::y1#0 - (byte) main::y#0
  (byte) main::e#0 ← (byte) main::yd#0 / (byte) 2
  (byte~) main::$3 ← (byte) main::y#0 * (byte) 40
  (word) main::idx#0 ← (byte) main::x#0 + (byte~) main::$3
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#2 ← phi( main/(byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::x1#1 ← phi( main/(byte) main::x1#0 )
  (byte) main::xd#1 ← phi( main/(byte) main::xd#0 )
  (byte) main::yd#1 ← phi( main/(byte) main::yd#0 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@2/(byte) main::x#1 )
  (word) main::idx#3 ← phi( main/(word) main::idx#0 main::@2/(word) main::idx#5 )
  (byte[1000]) main::screen#1 ← phi( main/(byte[1000]) main::screen#0 )
  (byte) main::STAR#1 ← phi( main/(byte) main::STAR#0 )
  *((byte[1000]) main::screen#1 + (word) main::idx#3) ← (byte) main::STAR#1
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (word) main::idx#1 ← (word) main::idx#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (byte) main::yd#1
  (boolean~) main::$9 ← (byte) main::xd#1 >= (byte) main::e#1
  if((boolean~) main::$9) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (word) main::idx#5 ← phi( main::@1/(word) main::idx#1 main::@3/(word) main::idx#2 )
  (byte~) main::$13 ← (byte) main::x1#1 + (byte) 1
  (boolean~) main::$14 ← (byte) main::x#1 < (byte~) main::$13
  if((boolean~) main::$14) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (word) main::idx#2 ← (word) main::idx#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (byte) main::xd#1
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Redundant Phi (byte) main::STAR#1 (byte) main::STAR#0
Redundant Phi (byte[1000]) main::screen#1 (byte[1000]) main::screen#0
Redundant Phi (byte) main::yd#1 (byte) main::yd#0
Redundant Phi (byte) main::xd#1 (byte) main::xd#0
Redundant Phi (byte) main::x1#1 (byte) main::x1#0
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::STAR#0 ← (byte) 81
  (byte[1000]) main::screen#0 ← (word) 1024
  (byte) main::x#0 ← (byte) 0
  (byte) main::y#0 ← (byte) 0
  (byte) main::x1#0 ← (byte) 39
  (byte) main::y1#0 ← (byte) 24
  (byte) main::xd#0 ← (byte) main::x1#0 - (byte) main::x#0
  (byte) main::yd#0 ← (byte) main::y1#0 - (byte) main::y#0
  (byte) main::e#0 ← (byte) main::yd#0 / (byte) 2
  (byte~) main::$3 ← (byte) main::y#0 * (byte) 40
  (word) main::idx#0 ← (byte) main::x#0 + (byte~) main::$3
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#2 ← phi( main/(byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@2/(byte) main::x#1 )
  (word) main::idx#3 ← phi( main/(word) main::idx#0 main::@2/(word) main::idx#5 )
  *((byte[1000]) main::screen#0 + (word) main::idx#3) ← (byte) main::STAR#0
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (word) main::idx#1 ← (word) main::idx#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (byte) main::yd#0
  (boolean~) main::$9 ← (byte) main::xd#0 >= (byte) main::e#1
  if((boolean~) main::$9) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (word) main::idx#5 ← phi( main::@1/(word) main::idx#1 main::@3/(word) main::idx#2 )
  (byte~) main::$13 ← (byte) main::x1#0 + (byte) 1
  (boolean~) main::$14 ← (byte) main::x#1 < (byte~) main::$13
  if((boolean~) main::$14) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (word) main::idx#2 ← (word) main::idx#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (byte) main::xd#0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Simple Condition (boolean~) main::$9 if((byte) main::xd#0>=(byte) main::e#1) goto main::@2
Simple Condition (boolean~) main::$14 if((byte) main::x#1<(byte~) main::$13) goto main::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::STAR#0 ← (byte) 81
  (byte[1000]) main::screen#0 ← (word) 1024
  (byte) main::x#0 ← (byte) 0
  (byte) main::y#0 ← (byte) 0
  (byte) main::x1#0 ← (byte) 39
  (byte) main::y1#0 ← (byte) 24
  (byte) main::xd#0 ← (byte) main::x1#0 - (byte) main::x#0
  (byte) main::yd#0 ← (byte) main::y1#0 - (byte) main::y#0
  (byte) main::e#0 ← (byte) main::yd#0 / (byte) 2
  (byte~) main::$3 ← (byte) main::y#0 * (byte) 40
  (word) main::idx#0 ← (byte) main::x#0 + (byte~) main::$3
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#2 ← phi( main/(byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@2/(byte) main::x#1 )
  (word) main::idx#3 ← phi( main/(word) main::idx#0 main::@2/(word) main::idx#5 )
  *((byte[1000]) main::screen#0 + (word) main::idx#3) ← (byte) main::STAR#0
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (word) main::idx#1 ← (word) main::idx#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (byte) main::yd#0
  if((byte) main::xd#0>=(byte) main::e#1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (word) main::idx#5 ← phi( main::@1/(word) main::idx#1 main::@3/(word) main::idx#2 )
  (byte~) main::$13 ← (byte) main::x1#0 + (byte) 1
  if((byte) main::x#1<(byte~) main::$13) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (word) main::idx#2 ← (word) main::idx#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (byte) main::xd#0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Constant (const byte) main::STAR#0 = 81
Constant (const byte[1000]) main::screen#0 = 1024
Constant (const byte) main::x#0 = 0
Constant (const byte) main::y#0 = 0
Constant (const byte) main::x1#0 = 39
Constant (const byte) main::y1#0 = 24
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::xd#0 ← (const byte) main::x1#0 - (const byte) main::x#0
  (byte) main::yd#0 ← (const byte) main::y1#0 - (const byte) main::y#0
  (byte) main::e#0 ← (byte) main::yd#0 / (byte) 2
  (byte~) main::$3 ← (const byte) main::y#0 * (byte) 40
  (word) main::idx#0 ← (const byte) main::x#0 + (byte~) main::$3
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#2 ← phi( main/(const byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(const byte) main::x#0 main::@2/(byte) main::x#1 )
  (word) main::idx#3 ← phi( main/(word) main::idx#0 main::@2/(word) main::idx#5 )
  *((const byte[1000]) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (word) main::idx#1 ← (word) main::idx#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (byte) main::yd#0
  if((byte) main::xd#0>=(byte) main::e#1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (word) main::idx#5 ← phi( main::@1/(word) main::idx#1 main::@3/(word) main::idx#2 )
  (byte~) main::$13 ← (const byte) main::x1#0 + (byte) 1
  if((byte) main::x#1<(byte~) main::$13) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (word) main::idx#2 ← (word) main::idx#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (byte) main::xd#0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Constant (const byte) main::xd#0 = main::x1#0-main::x#0
Constant (const byte) main::yd#0 = main::y1#0-main::y#0
Constant (const byte) main::$3 = main::y#0*40
Constant (const byte) main::$13 = main::x1#0+1
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::e#0 ← (const byte) main::yd#0 / (byte) 2
  (word) main::idx#0 ← (const byte) main::x#0 + (const byte) main::$3
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#2 ← phi( main/(const byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::e#3 ← phi( main/(byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(const byte) main::x#0 main::@2/(byte) main::x#1 )
  (word) main::idx#3 ← phi( main/(word) main::idx#0 main::@2/(word) main::idx#5 )
  *((const byte[1000]) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (word) main::idx#1 ← (word) main::idx#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0
  if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (word) main::idx#5 ← phi( main::@1/(word) main::idx#1 main::@3/(word) main::idx#2 )
  if((byte) main::x#1<(const byte) main::$13) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (word) main::idx#2 ← (word) main::idx#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Constant (const byte) main::e#0 = main::yd#0/2
Constant (const word) main::idx#0 = main::x#0+main::$3
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#2 ← phi( main/(const byte) main::y#0 main::@2/(byte) main::y#4 )
  (byte) main::e#3 ← phi( main/(const byte) main::e#0 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(const byte) main::x#0 main::@2/(byte) main::x#1 )
  (word) main::idx#3 ← phi( main/(const word) main::idx#0 main::@2/(word) main::idx#5 )
  *((const byte[1000]) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (word) main::idx#1 ← (word) main::idx#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0
  if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (word) main::idx#5 ← phi( main::@1/(word) main::idx#1 main::@3/(word) main::idx#2 )
  if((byte) main::x#1<(const byte) main::$13) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (word) main::idx#2 ← (word) main::idx#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Multiple usages for variable. Not optimizing sub-constant (byte) main::y#2
Multiple usages for variable. Not optimizing sub-constant (word) main::idx#1
Multiple usages for variable. Not optimizing sub-constant (byte) main::y#2
Multiple usages for variable. Not optimizing sub-constant (word) main::idx#1
Inlining constant with var siblings (const byte) main::x#0
Inlining constant with var siblings (const byte) main::x#0
Inlining constant with var siblings (const byte) main::y#0
Inlining constant with var siblings (const byte) main::y#0
Inlining constant with var siblings (const byte) main::y#0
Inlining constant with var siblings (const byte) main::e#0
Inlining constant with var siblings (const byte) main::e#0
Inlining constant with var siblings (const byte) main::e#0
Inlining constant with var siblings (const byte) main::e#0
Inlining constant with var siblings (const word) main::idx#0
Inlining constant with var siblings (const word) main::idx#0
Inlining constant with var siblings (const word) main::idx#0
Inlining constant with var siblings (const word) main::idx#0
Constant inlined main::$3 = (byte) 0*(byte) 40
Constant inlined main::x#0 = (byte) 0
Constant inlined main::idx#0 = (byte) 0+(byte) 0*(byte) 40
Constant inlined main::y#0 = (byte) 0
Constant inlined main::e#0 = (const byte) main::yd#0/(byte) 2
Constant inlined main::$13 = (const byte) main::x1#0+(byte) 1
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::y#2 ← phi( main/(byte) 0 main::@2/(byte) main::y#4 )
  (byte) main::e#3 ← phi( main/(const byte) main::yd#0/(byte) 2 main::@2/(byte) main::e#5 )
  (byte) main::x#2 ← phi( main/(byte) 0 main::@2/(byte) main::x#1 )
  (word) main::idx#3 ← phi( main/(byte) 0+(byte) 0*(byte) 40 main::@2/(word) main::idx#5 )
  *((const byte[1000]) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (word) main::idx#1 ← (word) main::idx#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0
  if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 )
  (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 )
  (word) main::idx#5 ← phi( main::@1/(word) main::idx#1 main::@3/(word) main::idx#2 )
  if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (word) main::idx#2 ← (word) main::idx#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::STAR
(const byte) main::STAR#0 = (byte) 81
(byte) main::e
(byte) main::e#1
(byte) main::e#2
(byte) main::e#3
(byte) main::e#5
(word) main::idx
(word) main::idx#1
(word) main::idx#2
(word) main::idx#3
(word) main::idx#5
(byte[1000]) main::screen
(const byte[1000]) main::screen#0 = (word) 1024
(byte) main::x
(byte) main::x#1
(byte) main::x#2
(byte) main::x0
(byte) main::x1
(const byte) main::x1#0 = (byte) 39
(byte) main::xd
(const byte) main::xd#0 = (const byte) main::x1#0-(byte) 0
(byte) main::y
(byte) main::y#1
(byte) main::y#2
(byte) main::y#4
(byte) main::y0
(byte) main::y1
(const byte) main::y1#0 = (byte) 24
(byte) main::yd
(const byte) main::yd#0 = (const byte) main::y1#0-(byte) 0

Block Sequence Planned @begin @1 @end main main::@1 main::@3 main::@2 main::@return 
Added new block during phi lifting main::@5(between main::@2 and main::@1)
Added new block during phi lifting main::@6(between main::@1 and main::@2)
Block Sequence Planned @begin @1 @end main main::@1 main::@3 main::@2 main::@return main::@5 main::@6 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::y#2 ← phi( main/(byte) 0 main::@5/(byte~) main::y#5 )
  (byte) main::e#3 ← phi( main/(const byte) main::yd#0/(byte) 2 main::@5/(byte~) main::e#6 )
  (byte) main::x#2 ← phi( main/(byte) 0 main::@5/(byte~) main::x#5 )
  (word) main::idx#3 ← phi( main/(byte) 0+(byte) 0*(byte) 40 main::@5/(word~) main::idx#6 )
  *((const byte[1000]) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0
  (byte) main::x#1 ← (byte) main::x#2 + (byte) 1
  (word) main::idx#1 ← (word) main::idx#3 + (byte) 1
  (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0
  if((const byte) main::xd#0>=(byte) main::e#1) goto main::@6
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::y#1 ← (byte) main::y#2 + (byte) 1
  (word) main::idx#2 ← (word) main::idx#1 + (byte) 40
  (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0
  (word~) main::idx#8 ← (word) main::idx#2
  (byte~) main::e#8 ← (byte) main::e#2
  (byte~) main::y#7 ← (byte) main::y#1
  to:main::@2
main::@2: scope:[main]  from main::@3 main::@6
  (byte) main::y#4 ← phi( main::@6/(byte~) main::y#6 main::@3/(byte~) main::y#7 )
  (byte) main::e#5 ← phi( main::@6/(byte~) main::e#7 main::@3/(byte~) main::e#8 )
  (word) main::idx#5 ← phi( main::@6/(word~) main::idx#7 main::@3/(word~) main::idx#8 )
  if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@5
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
main::@5: scope:[main]  from main::@2
  (word~) main::idx#6 ← (word) main::idx#5
  (byte~) main::x#5 ← (byte) main::x#1
  (byte~) main::e#6 ← (byte) main::e#5
  (byte~) main::y#5 ← (byte) main::y#4
  to:main::@1
main::@6: scope:[main]  from main::@1
  (word~) main::idx#7 ← (word) main::idx#1
  (byte~) main::e#7 ← (byte) main::e#1
  (byte~) main::y#6 ← (byte) main::y#2
  to:main::@2

Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to 0:main 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  [1] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [2] (byte) main::y#2 ← phi( main/(byte) 0 main::@5/(byte~) main::y#5 ) [ main::idx#3 main::x#2 main::e#3 main::y#2 ]
  [2] (byte) main::e#3 ← phi( main/(const byte) main::yd#0/(byte) 2 main::@5/(byte~) main::e#6 ) [ main::idx#3 main::x#2 main::e#3 main::y#2 ]
  [2] (byte) main::x#2 ← phi( main/(byte) 0 main::@5/(byte~) main::x#5 ) [ main::idx#3 main::x#2 main::e#3 main::y#2 ]
  [2] (word) main::idx#3 ← phi( main/(byte) 0+(byte) 0*(byte) 40 main::@5/(word~) main::idx#6 ) [ main::idx#3 main::x#2 main::e#3 main::y#2 ]
  [3] *((const byte[1000]) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0 [ main::idx#3 main::x#2 main::e#3 main::y#2 ]
  [4] (byte) main::x#1 ← (byte) main::x#2 + (byte) 1 [ main::idx#3 main::e#3 main::y#2 main::x#1 ]
  [5] (word) main::idx#1 ← (word) main::idx#3 + (byte) 1 [ main::e#3 main::y#2 main::x#1 main::idx#1 ]
  [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::idx#1 main::e#1 ]
  [7] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@6 [ main::y#2 main::x#1 main::idx#1 main::e#1 ]
  to:main::@3
main::@3: scope:[main]  from main::@1
  [8] (byte) main::y#1 ← (byte) main::y#2 + (byte) 1 [ main::x#1 main::idx#1 main::e#1 main::y#1 ]
  [9] (word) main::idx#2 ← (word) main::idx#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::idx#2 ]
  [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::idx#2 main::e#2 ]
  [11] (word~) main::idx#8 ← (word) main::idx#2 [ main::x#1 main::y#1 main::e#2 main::idx#8 ]
  [12] (byte~) main::e#8 ← (byte) main::e#2 [ main::x#1 main::y#1 main::idx#8 main::e#8 ]
  [13] (byte~) main::y#7 ← (byte) main::y#1 [ main::x#1 main::idx#8 main::e#8 main::y#7 ]
  to:main::@2
main::@2: scope:[main]  from main::@3 main::@6
  [14] (byte) main::y#4 ← phi( main::@6/(byte~) main::y#6 main::@3/(byte~) main::y#7 ) [ main::x#1 main::idx#5 main::e#5 main::y#4 ]
  [14] (byte) main::e#5 ← phi( main::@6/(byte~) main::e#7 main::@3/(byte~) main::e#8 ) [ main::x#1 main::idx#5 main::e#5 main::y#4 ]
  [14] (word) main::idx#5 ← phi( main::@6/(word~) main::idx#7 main::@3/(word~) main::idx#8 ) [ main::x#1 main::idx#5 main::e#5 main::y#4 ]
  [15] if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@5 [ main::x#1 main::idx#5 main::e#5 main::y#4 ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [16] return  [ ]
  to:@return
main::@5: scope:[main]  from main::@2
  [17] (word~) main::idx#6 ← (word) main::idx#5 [ main::idx#6 main::x#1 main::e#5 main::y#4 ]
  [18] (byte~) main::x#5 ← (byte) main::x#1 [ main::idx#6 main::x#5 main::e#5 main::y#4 ]
  [19] (byte~) main::e#6 ← (byte) main::e#5 [ main::idx#6 main::x#5 main::e#6 main::y#4 ]
  [20] (byte~) main::y#5 ← (byte) main::y#4 [ main::idx#6 main::x#5 main::e#6 main::y#5 ]
  to:main::@1
main::@6: scope:[main]  from main::@1
  [21] (word~) main::idx#7 ← (word) main::idx#1 [ main::y#2 main::x#1 main::e#1 main::idx#7 ]
  [22] (byte~) main::e#7 ← (byte) main::e#1 [ main::y#2 main::x#1 main::idx#7 main::e#7 ]
  [23] (byte~) main::y#6 ← (byte) main::y#2 [ main::x#1 main::idx#7 main::e#7 main::y#6 ]
  to:main::@2

Created 7 initial phi equivalence classes
Coalesced [11] main::idx#8 ← main::idx#2
Coalesced [12] main::e#8 ← main::e#2
Coalesced [13] main::y#7 ← main::y#1
Coalesced [17] main::idx#6 ← main::idx#5
Coalesced [18] main::x#5 ← main::x#1
Coalesced [19] main::e#6 ← main::e#5
Coalesced [20] main::y#5 ← main::y#4
Coalesced [21] main::idx#7 ← main::idx#1
Coalesced [22] main::e#7 ← main::e#1
Coalesced (already) [23] main::y#6 ← main::y#2
Coalesced down to 4 phi equivalence classes
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6
Block Sequence Planned @begin @1 @end main main::@1 main::@3 main::@2 main::@return 
Adding NOP phi() at start of main
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  [1] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [2] (byte) main::y#2 ← phi( main/(byte) 0 main::@2/(byte) main::y#4 ) [ main::idx#3 main::x#2 main::e#3 main::y#2 ]
  [2] (byte) main::e#3 ← phi( main/(const byte) main::yd#0/(byte) 2 main::@2/(byte) main::e#5 ) [ main::idx#3 main::x#2 main::e#3 main::y#2 ]
  [2] (byte) main::x#2 ← phi( main/(byte) 0 main::@2/(byte) main::x#1 ) [ main::idx#3 main::x#2 main::e#3 main::y#2 ]
  [2] (word) main::idx#3 ← phi( main/(byte) 0+(byte) 0*(byte) 40 main::@2/(word) main::idx#5 ) [ main::idx#3 main::x#2 main::e#3 main::y#2 ]
  [3] *((const byte[1000]) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0 [ main::idx#3 main::x#2 main::e#3 main::y#2 ]
  [4] (byte) main::x#1 ← (byte) main::x#2 + (byte) 1 [ main::idx#3 main::e#3 main::y#2 main::x#1 ]
  [5] (word) main::idx#1 ← (word) main::idx#3 + (byte) 1 [ main::e#3 main::y#2 main::x#1 main::idx#1 ]
  [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::idx#1 main::e#1 ]
  [7] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ]
  to:main::@3
main::@3: scope:[main]  from main::@1
  [8] (byte) main::y#1 ← (byte) main::y#2 + (byte) 1 [ main::x#1 main::idx#1 main::e#1 main::y#1 ]
  [9] (word) main::idx#2 ← (word) main::idx#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::idx#2 ]
  [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::idx#2 main::e#2 ]
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [11] (byte) main::y#4 ← phi( main::@1/(byte) main::y#2 main::@3/(byte) main::y#1 ) [ main::idx#5 main::x#1 main::e#5 main::y#4 ]
  [11] (byte) main::e#5 ← phi( main::@1/(byte) main::e#1 main::@3/(byte) main::e#2 ) [ main::idx#5 main::x#1 main::e#5 main::y#4 ]
  [11] (word) main::idx#5 ← phi( main::@1/(word) main::idx#1 main::@3/(word) main::idx#2 ) [ main::idx#5 main::x#1 main::e#5 main::y#4 ]
  [12] if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@1 [ main::idx#5 main::x#1 main::e#5 main::y#4 ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [13] return  [ ]
  to:@return

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @end @begin 
main dominated by  @1 @begin main 
main::@1 dominated by  @1 @begin main::@1 main 
main::@3 dominated by  @1 @begin main::@1 main::@3 main 
main::@2 dominated by  @1 @begin main::@2 main::@1 main 
main::@return dominated by  @1 main::@return @begin main::@2 main::@1 main 

Found back edge: Loop head: main::@1 tails: main::@2 blocks: null
Populated: Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 
NATURAL LOOPS
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3  depth: 1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::STAR
(byte) main::e
(byte) main::e#1 11.0
(byte) main::e#2 22.0
(byte) main::e#3 5.5
(byte) main::e#5 16.5
(word) main::idx
(word) main::idx#1 8.25
(word) main::idx#2 11.0
(word) main::idx#3 11.0
(word) main::idx#5 16.5
(byte[1000]) main::screen
(byte) main::x
(byte) main::x#1 3.666666666666667
(byte) main::x#2 11.0
(byte) main::x0
(byte) main::x1
(byte) main::xd
(byte) main::y
(byte) main::y#1 7.333333333333333
(byte) main::y#2 5.5
(byte) main::y#4 16.5
(byte) main::y0
(byte) main::y1
(byte) main::yd

Initial phi equivalence classes
[ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ]
[ main::x#2 main::x#1 ]
[ main::e#3 main::e#5 main::e#1 main::e#2 ]
[ main::y#2 main::y#4 main::y#1 ]
Complete equivalence classes
[ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ]
[ main::x#2 main::x#1 ]
[ main::e#3 main::e#5 main::e#1 main::e#2 ]
[ main::y#2 main::y#4 main::y#1 ]
Allocated zp ZP_WORD:2 [ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ]
Allocated zp ZP_BYTE:4 [ main::x#2 main::x#1 ]
Allocated zp ZP_BYTE:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ]
Allocated zp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ]
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
  jmp b1
//SEG3 @1
b1:
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  jmp bend
//SEG6 @end
bend:
//SEG7 main
main: {
    .const STAR = $51
    .const screen = $400
    .const x1 = $27
    .const y1 = $18
    .const xd = x1-0
    .const yd = y1-0
    .label x = 4
    .label idx = 2
    .label e = 5
    .label y = 6
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG9 [2] phi (byte) main::y#2 = (byte) 0 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #0
    sta y
  //SEG10 [2] phi (byte) main::e#3 = (const byte) main::yd#0/(byte) 2 [phi:main->main::@1#1] -- zpby1=coby1 
    lda #yd/2
    sta e
  //SEG11 [2] phi (byte) main::x#2 = (byte) 0 [phi:main->main::@1#2] -- zpby1=coby1 
    lda #0
    sta x
  //SEG12 [2] phi (word) main::idx#3 = (byte) 0+(byte) 0*(byte) 40 [phi:main->main::@1#3] -- zpwo1=coby1 
    lda #0+0*$28
    sta idx
    lda #0
    sta idx+1
    jmp b1
  //SEG13 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG14 [2] phi (byte) main::y#2 = (byte) main::y#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [2] phi (byte) main::e#3 = (byte) main::e#5 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG16 [2] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@2->main::@1#2] -- register_copy 
  //SEG17 [2] phi (word) main::idx#3 = (word) main::idx#5 [phi:main::@2->main::@1#3] -- register_copy 
    jmp b1
  //SEG18 main::@1
  b1:
  //SEG19 [3] *((const byte[1000]) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] -- cowo1_staridx_zpwo1=coby2 
    lda #<screen
    clc
    adc idx
    sta !s++1
    lda #>screen
    adc idx+1
    sta !s++2
    lda #STAR
  !s:
    sta screen
  //SEG20 [4] (byte) main::x#1 ← (byte) main::x#2 + (byte) 1 [ main::idx#3 main::e#3 main::y#2 main::x#1 ] -- zpby1=zpby1_plus_1 
    inc x
  //SEG21 [5] (word) main::idx#1 ← (word) main::idx#3 + (byte) 1 [ main::e#3 main::y#2 main::x#1 main::idx#1 ] -- zpwo1=zpwo1_plus_1 
    inc idx
    bne !+
    inc idx+1
  !:
  //SEG22 [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] -- zpby1=zpby1_plus_coby1 
    lda e
    clc
    adc #yd
    sta e
  //SEG23 [7] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] -- coby1_ge_zpby1_then_la1 
    lda #xd
    cmp e
    bcs b2_from_b1
    jmp b3
  //SEG24 main::@3
  b3:
  //SEG25 [8] (byte) main::y#1 ← (byte) main::y#2 + (byte) 1 [ main::x#1 main::idx#1 main::e#1 main::y#1 ] -- zpby1=zpby1_plus_1 
    inc y
  //SEG26 [9] (word) main::idx#2 ← (word) main::idx#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] -- zpwo1=zpwo1_plus_coby1 
    lda idx
    clc
    adc #<$28
    sta idx
    bcc !+
    inc idx+1
  !:
  //SEG27 [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] -- zpby1=zpby1_minus_coby1 
    sec
    sbc #xd
    sta e
  //SEG28 [11] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  b2_from_b1:
  b2_from_b3:
  //SEG29 [11] phi (byte) main::y#4 = (byte) main::y#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG30 [11] phi (byte) main::e#5 = (byte) main::e#1 [phi:main::@1/main::@3->main::@2#1] -- register_copy 
  //SEG31 [11] phi (word) main::idx#5 = (word) main::idx#1 [phi:main::@1/main::@3->main::@2#2] -- register_copy 
    jmp b2
  //SEG32 main::@2
  b2:
  //SEG33 [12] if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@1 [ main::idx#5 main::x#1 main::e#5 main::y#4 ] -- zpby1_lt_coby1_then_la1 
    lda x
    cmp #x1+1
    bcc b1_from_b2
    jmp breturn
  //SEG34 main::@return
  breturn:
  //SEG35 [13] return  [ ]
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] *((const byte[1000]) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ main::x#2 main::x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ]
Statement [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] always clobbers reg byte a 
Statement [9] (word) main::idx#2 ← (word) main::idx#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] always clobbers reg byte a 
Statement [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] always clobbers reg byte a 
Statement [3] *((const byte[1000]) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] always clobbers reg byte a 
Statement [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] always clobbers reg byte a 
Statement [9] (word) main::idx#2 ← (word) main::idx#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] always clobbers reg byte a 
Statement [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] always clobbers reg byte a 
Potential registers zp ZP_WORD:2 [ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_BYTE:4 [ main::x#2 main::x#1 ] : zp ZP_BYTE:4 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 55: zp ZP_BYTE:5 [ main::e#3 main::e#5 main::e#1 main::e#2 ] 46.75: zp ZP_WORD:2 [ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ] 29.33: zp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ] 14.67: zp ZP_BYTE:4 [ main::x#2 main::x#1 ] 
Uplift Scope [] 

Uplifting [main] best 1265 combination reg byte y [ main::e#3 main::e#5 main::e#1 main::e#2 ] zp ZP_WORD:2 [ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ] zp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ] reg byte x [ main::x#2 main::x#1 ] 
Uplifting [] best 1265 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ]
Uplifting [main] best 1265 combination zp ZP_BYTE:6 [ main::y#2 main::y#4 main::y#1 ] 
Allocated (was zp ZP_BYTE:6) zp ZP_BYTE:4 [ main::y#2 main::y#4 main::y#1 ]
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 @1
b1:
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG6 @end
bend:
//SEG7 main
main: {
    .const STAR = $51
    .const screen = $400
    .const x1 = $27
    .const y1 = $18
    .const xd = x1-0
    .const yd = y1-0
    .label idx = 2
    .label y = 4
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG9 [2] phi (byte) main::y#2 = (byte) 0 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #0
    sta y
  //SEG10 [2] phi (byte) main::e#3 = (const byte) main::yd#0/(byte) 2 [phi:main->main::@1#1] -- yby=coby1 
    ldy #yd/2
  //SEG11 [2] phi (byte) main::x#2 = (byte) 0 [phi:main->main::@1#2] -- xby=coby1 
    ldx #0
  //SEG12 [2] phi (word) main::idx#3 = (byte) 0+(byte) 0*(byte) 40 [phi:main->main::@1#3] -- zpwo1=coby1 
    lda #0+0*$28
    sta idx
    lda #0
    sta idx+1
    jmp b1
  //SEG13 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG14 [2] phi (byte) main::y#2 = (byte) main::y#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [2] phi (byte) main::e#3 = (byte) main::e#5 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG16 [2] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@2->main::@1#2] -- register_copy 
  //SEG17 [2] phi (word) main::idx#3 = (word) main::idx#5 [phi:main::@2->main::@1#3] -- register_copy 
  //SEG18 main::@1
  b1:
  //SEG19 [3] *((const byte[1000]) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] -- cowo1_staridx_zpwo1=coby2 
    lda #<screen
    clc
    adc idx
    sta !s++1
    lda #>screen
    adc idx+1
    sta !s++2
    lda #STAR
  !s:
    sta screen
  //SEG20 [4] (byte) main::x#1 ← (byte) main::x#2 + (byte) 1 [ main::idx#3 main::e#3 main::y#2 main::x#1 ] -- xby=xby_plus_1 
    inx
  //SEG21 [5] (word) main::idx#1 ← (word) main::idx#3 + (byte) 1 [ main::e#3 main::y#2 main::x#1 main::idx#1 ] -- zpwo1=zpwo1_plus_1 
    inc idx
    bne !+
    inc idx+1
  !:
  //SEG22 [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] -- yby=yby_plus_coby1 
    tya
    clc
    adc #yd
    tay
  //SEG23 [7] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] -- coby1_ge_yby_then_la1 
    cpy #xd
    bcc b2_from_b1
  //SEG24 main::@3
  b3:
  //SEG25 [8] (byte) main::y#1 ← (byte) main::y#2 + (byte) 1 [ main::x#1 main::idx#1 main::e#1 main::y#1 ] -- zpby1=zpby1_plus_1 
    inc y
  //SEG26 [9] (word) main::idx#2 ← (word) main::idx#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] -- zpwo1=zpwo1_plus_coby1 
    lda idx
    clc
    adc #<$28
    sta idx
    bcc !+
    inc idx+1
  !:
  //SEG27 [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] -- yby=yby_minus_coby1 
    tya
    sec
    sbc #xd
    tay
  //SEG28 [11] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  b2_from_b1:
  b2_from_b3:
  //SEG29 [11] phi (byte) main::y#4 = (byte) main::y#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG30 [11] phi (byte) main::e#5 = (byte) main::e#1 [phi:main::@1/main::@3->main::@2#1] -- register_copy 
  //SEG31 [11] phi (word) main::idx#5 = (word) main::idx#1 [phi:main::@1/main::@3->main::@2#2] -- register_copy 
  //SEG32 main::@2
  b2:
  //SEG33 [12] if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@1 [ main::idx#5 main::x#1 main::e#5 main::y#4 ] -- xby_lt_coby1_then_la1 
    cpx #x1+1
    bcc b1_from_b2
  //SEG34 main::@return
  breturn:
  //SEG35 [13] return  [ ]
    rts
}

Replacing label b2_from_b1 with b2
Replacing label b1_from_b2 with b1
Removing instruction bbegin:
Removing instruction main_from_b1:
Removing instruction b1_from_b2:
Removing instruction b2_from_b1:
Removing instruction b2_from_b3:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 @1
b1:
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @1 to main [phi:@1->main]
  jsr main
//SEG6 @end
bend:
//SEG7 main
main: {
    .const STAR = $51
    .const screen = $400
    .const x1 = $27
    .const y1 = $18
    .const xd = x1-0
    .const yd = y1-0
    .label idx = 2
    .label y = 4
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG9 [2] phi (byte) main::y#2 = (byte) 0 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #0
    sta y
  //SEG10 [2] phi (byte) main::e#3 = (const byte) main::yd#0/(byte) 2 [phi:main->main::@1#1] -- yby=coby1 
    ldy #yd/2
  //SEG11 [2] phi (byte) main::x#2 = (byte) 0 [phi:main->main::@1#2] -- xby=coby1 
    ldx #0
  //SEG12 [2] phi (word) main::idx#3 = (byte) 0+(byte) 0*(byte) 40 [phi:main->main::@1#3] -- zpwo1=coby1 
    lda #0+0*$28
    sta idx
    lda #0
    sta idx+1
    jmp b1
  //SEG13 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG14 [2] phi (byte) main::y#2 = (byte) main::y#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [2] phi (byte) main::e#3 = (byte) main::e#5 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG16 [2] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@2->main::@1#2] -- register_copy 
  //SEG17 [2] phi (word) main::idx#3 = (word) main::idx#5 [phi:main::@2->main::@1#3] -- register_copy 
  //SEG18 main::@1
  b1:
  //SEG19 [3] *((const byte[1000]) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] -- cowo1_staridx_zpwo1=coby2 
    lda #<screen
    clc
    adc idx
    sta !s++1
    lda #>screen
    adc idx+1
    sta !s++2
    lda #STAR
  !s:
    sta screen
  //SEG20 [4] (byte) main::x#1 ← (byte) main::x#2 + (byte) 1 [ main::idx#3 main::e#3 main::y#2 main::x#1 ] -- xby=xby_plus_1 
    inx
  //SEG21 [5] (word) main::idx#1 ← (word) main::idx#3 + (byte) 1 [ main::e#3 main::y#2 main::x#1 main::idx#1 ] -- zpwo1=zpwo1_plus_1 
    inc idx
    bne !+
    inc idx+1
  !:
  //SEG22 [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] -- yby=yby_plus_coby1 
    tya
    clc
    adc #yd
    tay
  //SEG23 [7] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] -- coby1_ge_yby_then_la1 
    cpy #xd
    bcc b2
  //SEG24 main::@3
  b3:
  //SEG25 [8] (byte) main::y#1 ← (byte) main::y#2 + (byte) 1 [ main::x#1 main::idx#1 main::e#1 main::y#1 ] -- zpby1=zpby1_plus_1 
    inc y
  //SEG26 [9] (word) main::idx#2 ← (word) main::idx#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] -- zpwo1=zpwo1_plus_coby1 
    lda idx
    clc
    adc #<$28
    sta idx
    bcc !+
    inc idx+1
  !:
  //SEG27 [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] -- yby=yby_minus_coby1 
    tya
    sec
    sbc #xd
    tay
  //SEG28 [11] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  //SEG29 [11] phi (byte) main::y#4 = (byte) main::y#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG30 [11] phi (byte) main::e#5 = (byte) main::e#1 [phi:main::@1/main::@3->main::@2#1] -- register_copy 
  //SEG31 [11] phi (word) main::idx#5 = (word) main::idx#1 [phi:main::@1/main::@3->main::@2#2] -- register_copy 
  //SEG32 main::@2
  b2:
  //SEG33 [12] if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@1 [ main::idx#5 main::x#1 main::e#5 main::y#4 ] -- xby_lt_coby1_then_la1 
    cpx #x1+1
    bcc b1
  //SEG34 main::@return
  breturn:
  //SEG35 [13] return  [ ]
    rts
}

Removing instruction b1:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b3:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 @1
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @1 to main [phi:@1->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
    .const STAR = $51
    .const screen = $400
    .const x1 = $27
    .const y1 = $18
    .const xd = x1-0
    .const yd = y1-0
    .label idx = 2
    .label y = 4
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG9 [2] phi (byte) main::y#2 = (byte) 0 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #0
    sta y
  //SEG10 [2] phi (byte) main::e#3 = (const byte) main::yd#0/(byte) 2 [phi:main->main::@1#1] -- yby=coby1 
    ldy #yd/2
  //SEG11 [2] phi (byte) main::x#2 = (byte) 0 [phi:main->main::@1#2] -- xby=coby1 
    ldx #0
  //SEG12 [2] phi (word) main::idx#3 = (byte) 0+(byte) 0*(byte) 40 [phi:main->main::@1#3] -- zpwo1=coby1 
    lda #0+0*$28
    sta idx
    lda #0
    sta idx+1
    jmp b1
  //SEG13 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG14 [2] phi (byte) main::y#2 = (byte) main::y#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [2] phi (byte) main::e#3 = (byte) main::e#5 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG16 [2] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@2->main::@1#2] -- register_copy 
  //SEG17 [2] phi (word) main::idx#3 = (word) main::idx#5 [phi:main::@2->main::@1#3] -- register_copy 
  //SEG18 main::@1
  b1:
  //SEG19 [3] *((const byte[1000]) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] -- cowo1_staridx_zpwo1=coby2 
    lda #<screen
    clc
    adc idx
    sta !s++1
    lda #>screen
    adc idx+1
    sta !s++2
    lda #STAR
  !s:
    sta screen
  //SEG20 [4] (byte) main::x#1 ← (byte) main::x#2 + (byte) 1 [ main::idx#3 main::e#3 main::y#2 main::x#1 ] -- xby=xby_plus_1 
    inx
  //SEG21 [5] (word) main::idx#1 ← (word) main::idx#3 + (byte) 1 [ main::e#3 main::y#2 main::x#1 main::idx#1 ] -- zpwo1=zpwo1_plus_1 
    inc idx
    bne !+
    inc idx+1
  !:
  //SEG22 [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] -- yby=yby_plus_coby1 
    tya
    clc
    adc #yd
    tay
  //SEG23 [7] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] -- coby1_ge_yby_then_la1 
    cpy #xd
    bcc b2
  //SEG24 main::@3
  //SEG25 [8] (byte) main::y#1 ← (byte) main::y#2 + (byte) 1 [ main::x#1 main::idx#1 main::e#1 main::y#1 ] -- zpby1=zpby1_plus_1 
    inc y
  //SEG26 [9] (word) main::idx#2 ← (word) main::idx#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] -- zpwo1=zpwo1_plus_coby1 
    lda idx
    clc
    adc #<$28
    sta idx
    bcc !+
    inc idx+1
  !:
  //SEG27 [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] -- yby=yby_minus_coby1 
    tya
    sec
    sbc #xd
    tay
  //SEG28 [11] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  //SEG29 [11] phi (byte) main::y#4 = (byte) main::y#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG30 [11] phi (byte) main::e#5 = (byte) main::e#1 [phi:main::@1/main::@3->main::@2#1] -- register_copy 
  //SEG31 [11] phi (word) main::idx#5 = (word) main::idx#1 [phi:main::@1/main::@3->main::@2#2] -- register_copy 
  //SEG32 main::@2
  b2:
  //SEG33 [12] if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@1 [ main::idx#5 main::x#1 main::e#5 main::y#4 ] -- xby_lt_coby1_then_la1 
    cpx #x1+1
    bcc b1
  //SEG34 main::@return
  //SEG35 [13] return  [ ]
    rts
}

Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 @1
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @1 to main [phi:@1->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
    .const STAR = $51
    .const screen = $400
    .const x1 = $27
    .const y1 = $18
    .const xd = x1-0
    .const yd = y1-0
    .label idx = 2
    .label y = 4
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG9 [2] phi (byte) main::y#2 = (byte) 0 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #0
    sta y
  //SEG10 [2] phi (byte) main::e#3 = (const byte) main::yd#0/(byte) 2 [phi:main->main::@1#1] -- yby=coby1 
    ldy #yd/2
  //SEG11 [2] phi (byte) main::x#2 = (byte) 0 [phi:main->main::@1#2] -- xby=coby1 
    ldx #0
  //SEG12 [2] phi (word) main::idx#3 = (byte) 0+(byte) 0*(byte) 40 [phi:main->main::@1#3] -- zpwo1=coby1 
    lda #0+0*$28
    sta idx
    lda #0
    sta idx+1
  //SEG13 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG14 [2] phi (byte) main::y#2 = (byte) main::y#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [2] phi (byte) main::e#3 = (byte) main::e#5 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG16 [2] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@2->main::@1#2] -- register_copy 
  //SEG17 [2] phi (word) main::idx#3 = (word) main::idx#5 [phi:main::@2->main::@1#3] -- register_copy 
  //SEG18 main::@1
  b1:
  //SEG19 [3] *((const byte[1000]) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] -- cowo1_staridx_zpwo1=coby2 
    lda #<screen
    clc
    adc idx
    sta !s++1
    lda #>screen
    adc idx+1
    sta !s++2
    lda #STAR
  !s:
    sta screen
  //SEG20 [4] (byte) main::x#1 ← (byte) main::x#2 + (byte) 1 [ main::idx#3 main::e#3 main::y#2 main::x#1 ] -- xby=xby_plus_1 
    inx
  //SEG21 [5] (word) main::idx#1 ← (word) main::idx#3 + (byte) 1 [ main::e#3 main::y#2 main::x#1 main::idx#1 ] -- zpwo1=zpwo1_plus_1 
    inc idx
    bne !+
    inc idx+1
  !:
  //SEG22 [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] -- yby=yby_plus_coby1 
    tya
    clc
    adc #yd
    tay
  //SEG23 [7] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] -- coby1_ge_yby_then_la1 
    cpy #xd
    bcc b2
  //SEG24 main::@3
  //SEG25 [8] (byte) main::y#1 ← (byte) main::y#2 + (byte) 1 [ main::x#1 main::idx#1 main::e#1 main::y#1 ] -- zpby1=zpby1_plus_1 
    inc y
  //SEG26 [9] (word) main::idx#2 ← (word) main::idx#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] -- zpwo1=zpwo1_plus_coby1 
    lda idx
    clc
    adc #<$28
    sta idx
    bcc !+
    inc idx+1
  !:
  //SEG27 [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] -- yby=yby_minus_coby1 
    tya
    sec
    sbc #xd
    tay
  //SEG28 [11] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  //SEG29 [11] phi (byte) main::y#4 = (byte) main::y#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG30 [11] phi (byte) main::e#5 = (byte) main::e#1 [phi:main::@1/main::@3->main::@2#1] -- register_copy 
  //SEG31 [11] phi (word) main::idx#5 = (word) main::idx#1 [phi:main::@1/main::@3->main::@2#2] -- register_copy 
  //SEG32 main::@2
  b2:
  //SEG33 [12] if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@1 [ main::idx#5 main::x#1 main::e#5 main::y#4 ] -- xby_lt_coby1_then_la1 
    cpx #x1+1
    bcc b1
  //SEG34 main::@return
  //SEG35 [13] return  [ ]
    rts
}

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::STAR
(const byte) main::STAR#0 STAR = (byte) 81
(byte) main::e
(byte) main::e#1 reg byte y 11.0
(byte) main::e#2 reg byte y 22.0
(byte) main::e#3 reg byte y 5.5
(byte) main::e#5 reg byte y 16.5
(word) main::idx
(word) main::idx#1 idx zp ZP_WORD:2 8.25
(word) main::idx#2 idx zp ZP_WORD:2 11.0
(word) main::idx#3 idx zp ZP_WORD:2 11.0
(word) main::idx#5 idx zp ZP_WORD:2 16.5
(byte[1000]) main::screen
(const byte[1000]) main::screen#0 screen = (word) 1024
(byte) main::x
(byte) main::x#1 reg byte x 3.666666666666667
(byte) main::x#2 reg byte x 11.0
(byte) main::x0
(byte) main::x1
(const byte) main::x1#0 x1 = (byte) 39
(byte) main::xd
(const byte) main::xd#0 xd = (const byte) main::x1#0-(byte) 0
(byte) main::y
(byte) main::y#1 y zp ZP_BYTE:4 7.333333333333333
(byte) main::y#2 y zp ZP_BYTE:4 5.5
(byte) main::y#4 y zp ZP_BYTE:4 16.5
(byte) main::y0
(byte) main::y1
(const byte) main::y1#0 y1 = (byte) 24
(byte) main::yd
(const byte) main::yd#0 yd = (const byte) main::y1#0-(byte) 0

zp ZP_WORD:2 [ main::idx#3 main::idx#5 main::idx#1 main::idx#2 ]
reg byte x [ main::x#2 main::x#1 ]
reg byte y [ main::e#3 main::e#5 main::e#1 main::e#2 ]
zp ZP_BYTE:4 [ main::y#2 main::y#4 main::y#1 ]

FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 @1
//SEG4 [0] call main param-assignment [ ]
//SEG5 [1] phi from @1 to main [phi:@1->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
    .const STAR = $51
    .const screen = $400
    .const x1 = $27
    .const y1 = $18
    .const xd = x1-0
    .const yd = y1-0
    .label idx = 2
    .label y = 4
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG9 [2] phi (byte) main::y#2 = (byte) 0 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #0
    sta y
  //SEG10 [2] phi (byte) main::e#3 = (const byte) main::yd#0/(byte) 2 [phi:main->main::@1#1] -- yby=coby1 
    ldy #yd/2
  //SEG11 [2] phi (byte) main::x#2 = (byte) 0 [phi:main->main::@1#2] -- xby=coby1 
    ldx #0
  //SEG12 [2] phi (word) main::idx#3 = (byte) 0+(byte) 0*(byte) 40 [phi:main->main::@1#3] -- zpwo1=coby1 
    lda #0+0*$28
    sta idx
    lda #0
    sta idx+1
  //SEG13 [2] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG14 [2] phi (byte) main::y#2 = (byte) main::y#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [2] phi (byte) main::e#3 = (byte) main::e#5 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG16 [2] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@2->main::@1#2] -- register_copy 
  //SEG17 [2] phi (word) main::idx#3 = (word) main::idx#5 [phi:main::@2->main::@1#3] -- register_copy 
  //SEG18 main::@1
  b1:
  //SEG19 [3] *((const byte[1000]) main::screen#0 + (word) main::idx#3) ← (const byte) main::STAR#0 [ main::idx#3 main::x#2 main::e#3 main::y#2 ] -- cowo1_staridx_zpwo1=coby2 
    lda #<screen
    clc
    adc idx
    sta !s++1
    lda #>screen
    adc idx+1
    sta !s++2
    lda #STAR
  !s:
    sta screen
  //SEG20 [4] (byte) main::x#1 ← (byte) main::x#2 + (byte) 1 [ main::idx#3 main::e#3 main::y#2 main::x#1 ] -- xby=xby_plus_1 
    inx
  //SEG21 [5] (word) main::idx#1 ← (word) main::idx#3 + (byte) 1 [ main::e#3 main::y#2 main::x#1 main::idx#1 ] -- zpwo1=zpwo1_plus_1 
    inc idx
    bne !+
    inc idx+1
  !:
  //SEG22 [6] (byte) main::e#1 ← (byte) main::e#3 + (const byte) main::yd#0 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] -- yby=yby_plus_coby1 
    tya
    clc
    adc #yd
    tay
  //SEG23 [7] if((const byte) main::xd#0>=(byte) main::e#1) goto main::@2 [ main::y#2 main::x#1 main::idx#1 main::e#1 ] -- coby1_ge_yby_then_la1 
    cpy #xd
    bcc b2
  //SEG24 main::@3
  //SEG25 [8] (byte) main::y#1 ← (byte) main::y#2 + (byte) 1 [ main::x#1 main::idx#1 main::e#1 main::y#1 ] -- zpby1=zpby1_plus_1 
    inc y
  //SEG26 [9] (word) main::idx#2 ← (word) main::idx#1 + (byte) 40 [ main::x#1 main::e#1 main::y#1 main::idx#2 ] -- zpwo1=zpwo1_plus_coby1 
    lda idx
    clc
    adc #<$28
    sta idx
    bcc !+
    inc idx+1
  !:
  //SEG27 [10] (byte) main::e#2 ← (byte) main::e#1 - (const byte) main::xd#0 [ main::x#1 main::y#1 main::idx#2 main::e#2 ] -- yby=yby_minus_coby1 
    tya
    sec
    sbc #xd
    tay
  //SEG28 [11] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  //SEG29 [11] phi (byte) main::y#4 = (byte) main::y#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG30 [11] phi (byte) main::e#5 = (byte) main::e#1 [phi:main::@1/main::@3->main::@2#1] -- register_copy 
  //SEG31 [11] phi (word) main::idx#5 = (word) main::idx#1 [phi:main::@1/main::@3->main::@2#2] -- register_copy 
  //SEG32 main::@2
  b2:
  //SEG33 [12] if((byte) main::x#1<(const byte) main::x1#0+(byte) 1) goto main::@1 [ main::idx#5 main::x#1 main::e#5 main::y#4 ] -- xby_lt_coby1_then_la1 
    cpx #x1+1
    bcc b1
  //SEG34 main::@return
  //SEG35 [13] return  [ ]
    rts
}

