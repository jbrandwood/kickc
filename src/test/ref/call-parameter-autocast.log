Inlined call call __init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from __start::@1
  (byte) idx#17 ← phi( __start::@1/(byte) idx#18 )
  (word) print::w#0 ← (number) $1234
  call print 
  to:main::@1
main::@1: scope:[main]  from main
  (byte) idx#9 ← phi( main/(byte) idx#5 )
  (byte) idx#0 ← (byte) idx#9
  (word) print::w#1 ← (const word) main::w
  call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) idx#10 ← phi( main::@1/(byte) idx#5 )
  (byte) idx#1 ← (byte) idx#10
  (word) print::w#2 ← (word){ (number) $12, (number) $34 }
  call print 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) idx#11 ← phi( main::@2/(byte) idx#5 )
  (byte) idx#2 ← (byte) idx#11
  to:main::@return
main::@return: scope:[main]  from main::@3
  (byte) idx#12 ← phi( main::@3/(byte) idx#2 )
  (byte) idx#3 ← (byte) idx#12
  return 
  to:@return

(void()) print((word) print::w)
print: scope:[print]  from main main::@1 main::@2
  (word) print::w#3 ← phi( main/(word) print::w#0 main::@1/(word) print::w#1 main::@2/(word) print::w#2 )
  (byte) idx#13 ← phi( main/(byte) idx#17 main::@1/(byte) idx#0 main::@2/(byte) idx#1 )
  (byte~) print::$0 ← (byte) idx#13 * (const byte) SIZEOF_WORD
  *((const nomodify word*) SCREEN + (byte~) print::$0) ← (word) print::w#3
  (byte) idx#4 ← ++ (byte) idx#13
  to:print::@return
print::@return: scope:[print]  from print
  (byte) idx#14 ← phi( print/(byte) idx#4 )
  (byte) idx#5 ← (byte) idx#14
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  (byte) idx#6 ← (byte) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  (byte) idx#18 ← phi( __start::__init1/(byte) idx#6 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  (byte) idx#15 ← phi( __start::@1/(byte) idx#3 )
  (byte) idx#7 ← (byte) idx#15
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  (byte) idx#16 ← phi( __start::@2/(byte) idx#7 )
  (byte) idx#8 ← (byte) idx#16
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify word*) SCREEN = (word*)(number) $400
(const byte) SIZEOF_WORD = (byte) 2
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(byte) idx
(byte) idx#0
(byte) idx#1
(byte) idx#10
(byte) idx#11
(byte) idx#12
(byte) idx#13
(byte) idx#14
(byte) idx#15
(byte) idx#16
(byte) idx#17
(byte) idx#18
(byte) idx#2
(byte) idx#3
(byte) idx#4
(byte) idx#5
(byte) idx#6
(byte) idx#7
(byte) idx#8
(byte) idx#9
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(const word) main::w = (word) $1234
(void()) print((word) print::w)
(byte~) print::$0
(label) print::@return
(word) print::w
(word) print::w#0
(word) print::w#1
(word) print::w#2
(word) print::w#3

Fixing inline constructor with main::$3 ← (byte)$12 w= (byte)$34
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) $1234 in (word) print::w#0 ← (number) $1234
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (word) print::w#0 ← (unumber)(number) $1234
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (word*) 1024
Simplifying constant integer cast $1234
Simplifying constant integer cast $12
Simplifying constant integer cast $34
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (word) $1234
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias idx#0 = idx#9 
Alias idx#1 = idx#10 
Alias print::w#2 = main::$3 
Alias idx#11 = idx#2 idx#12 idx#3 
Alias idx#14 = idx#4 idx#5 
Alias idx#18 = idx#6 
Alias idx#15 = idx#7 idx#16 idx#8 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) idx#17 (byte) idx#18
Identical Phi Values (byte) idx#0 (byte) idx#14
Identical Phi Values (byte) idx#1 (byte) idx#14
Identical Phi Values (byte) idx#11 (byte) idx#14
Identical Phi Values (byte) idx#15 (byte) idx#11
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [7] (word) print::w#2 ← (byte) $12 w= (byte) $34
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) print::w#0 = $1234
Constant (const word) print::w#1 = main::w
Constant (const byte) idx#18 = 0
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $12*$100+$34 in [2] (word) print::w#2 ← (byte) $12*(number) $100+(byte) $34
Adding number conversion cast (unumber) $12*$100 in [2] (word) print::w#2 ← ((unumber)) (byte) $12*(number) $100+(byte) $34
Adding number conversion cast (unumber) $100 in [2] (word) print::w#2 ← ((unumber)) (unumber)(byte) $12*(number) $100+(byte) $34
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast [2] (word) print::w#2 ← (unumber)(unumber)(byte) $12*(unumber)(number) $100+(byte) $34
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast (unumber)(byte) $12*(unumber)(number) $100+(byte) $34
Simplifying constant integer cast (byte) $12*(unumber)(number) $100
Simplifying constant integer cast $100
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (word) $100
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant (const word) print::w#2 = $12*$100+$34
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to use shift [5] (byte~) print::$0 ← (byte) idx#13 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const word) print::w#0
Inlining constant with var siblings (const word) print::w#1
Inlining constant with var siblings (const word) print::w#2
Inlining constant with var siblings (const byte) idx#18
Constant inlined idx#18 = (byte) 0
Constant inlined print::w#2 = (byte) $12*(word) $100+(byte) $34
Constant inlined print::w#1 = (const word) main::w
Constant inlined print::w#0 = (word) $1234
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant (const byte) SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
CALL GRAPH
Calls in [main] to print:1 print:3 print:5 

Created 2 initial phi equivalence classes
Coalesced [2] idx#19 ← idx#14
Coalesced (already) [4] idx#20 ← idx#14
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@3
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call print 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call print 
  to:main::@return
main::@return: scope:[main]  from main::@2
  [6] return 
  to:@return

(void()) print((word) print::w)
print: scope:[print]  from main main::@1 main::@2
  [7] (word) print::w#3 ← phi( main/(word) $1234 main::@1/(const word) main::w main::@2/(byte) $12*(word) $100+(byte) $34 )
  [7] (byte) idx#13 ← phi( main/(byte) 0 main::@1/(byte) idx#14 main::@2/(byte) idx#14 )
  [8] (byte~) print::$0 ← (byte) idx#13 << (byte) 1
  [9] *((const nomodify word*) SCREEN + (byte~) print::$0) ← (word) print::w#3
  [10] (byte) idx#14 ← ++ (byte) idx#13
  to:print::@return
print::@return: scope:[print]  from print
  [11] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) idx
(byte) idx#13 8.666666666666666
(byte) idx#14 2.5
(void()) main()
(void()) print((word) print::w)
(byte~) print::$0 22.0
(word) print::w
(word) print::w#3 5.5

Initial phi equivalence classes
[ idx#13 idx#14 ]
[ print::w#3 ]
Added variable print::$0 to live range equivalence class [ print::$0 ]
Complete equivalence classes
[ idx#13 idx#14 ]
[ print::w#3 ]
[ print::$0 ]
Allocated zp[1]:2 [ idx#13 idx#14 ]
Allocated zp[2]:3 [ print::w#3 ]
Allocated zp[1]:5 [ print::$0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test auto-casting of call-parameters
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label idx = 2
  // main
main: {
    .const w = $1234
    // [1] call print 
    // [7] phi from main to print [phi:main->print]
  print_from_main:
    // [7] phi (word) print::w#3 = (word) $1234 [phi:main->print#0] -- vwuz1=vwuc1 
    lda #<$1234
    sta.z print.w
    lda #>$1234
    sta.z print.w+1
    // [7] phi (byte) idx#13 = (byte) 0 [phi:main->print#1] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    jsr print
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call print 
    // [7] phi from main::@1 to print [phi:main::@1->print]
  print_from___b1:
    // [7] phi (word) print::w#3 = (const word) main::w [phi:main::@1->print#0] -- vwuz1=vwuc1 
    lda #<w
    sta.z print.w
    lda #>w
    sta.z print.w+1
    // [7] phi (byte) idx#13 = (byte) idx#14 [phi:main::@1->print#1] -- register_copy 
    jsr print
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [5] call print 
    // [7] phi from main::@2 to print [phi:main::@2->print]
  print_from___b2:
    // [7] phi (word) print::w#3 = (byte) $12*(word) $100+(byte) $34 [phi:main::@2->print#0] -- vwuz1=vwuc1 
    lda #<$12*$100+$34
    sta.z print.w
    lda #>$12*$100+$34
    sta.z print.w+1
    // [7] phi (byte) idx#13 = (byte) idx#14 [phi:main::@2->print#1] -- register_copy 
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // print
// print(word zp(3) w)
print: {
    .label __0 = 5
    .label w = 3
    // [8] (byte~) print::$0 ← (byte) idx#13 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z idx
    asl
    sta.z __0
    // [9] *((const nomodify word*) SCREEN + (byte~) print::$0) ← (word) print::w#3 -- pwuc1_derefidx_vbuz1=vwuz2 
    ldy.z __0
    lda.z w
    sta SCREEN,y
    lda.z w+1
    sta SCREEN+1,y
    // [10] (byte) idx#14 ← ++ (byte) idx#13 -- vbuz1=_inc_vbuz1 
    inc.z idx
    jmp __breturn
    // print::@return
  __breturn:
    // [11] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [8] (byte~) print::$0 ← (byte) idx#13 << (byte) 1 [ idx#13 print::w#3 print::$0 ] ( print:1 [ idx#13 print::w#3 print::$0 ] { }  print:3 [ idx#13 print::w#3 print::$0 ] { { idx#13 = idx#14 } }  print:5 [ idx#13 print::w#3 print::$0 ] { { idx#13 = idx#14 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ idx#13 idx#14 ]
Statement [9] *((const nomodify word*) SCREEN + (byte~) print::$0) ← (word) print::w#3 [ idx#13 ] ( print:1 [ idx#13 ] { }  print:3 [ idx#13 ] { { idx#13 = idx#14 } }  print:5 [ idx#13 ] { { idx#13 = idx#14 } }  ) always clobbers reg byte a 
Statement [8] (byte~) print::$0 ← (byte) idx#13 << (byte) 1 [ idx#13 print::w#3 print::$0 ] ( print:1 [ idx#13 print::w#3 print::$0 ] { }  print:3 [ idx#13 print::w#3 print::$0 ] { { idx#13 = idx#14 } }  print:5 [ idx#13 print::w#3 print::$0 ] { { idx#13 = idx#14 } }  ) always clobbers reg byte a 
Statement [9] *((const nomodify word*) SCREEN + (byte~) print::$0) ← (word) print::w#3 [ idx#13 ] ( print:1 [ idx#13 ] { }  print:3 [ idx#13 ] { { idx#13 = idx#14 } }  print:5 [ idx#13 ] { { idx#13 = idx#14 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ idx#13 idx#14 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[2]:3 [ print::w#3 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ print::$0 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print] 22: zp[1]:5 [ print::$0 ] 5.5: zp[2]:3 [ print::w#3 ] 
Uplift Scope [] 11.17: zp[1]:2 [ idx#13 idx#14 ] 
Uplift Scope [main] 

Uplifting [print] best 105 combination reg byte a [ print::$0 ] zp[2]:3 [ print::w#3 ] 
Uplifting [] best 98 combination reg byte x [ idx#13 idx#14 ] 
Uplifting [main] best 98 combination 
Allocated (was zp[2]:3) zp[2]:2 [ print::w#3 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test auto-casting of call-parameters
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .const w = $1234
    // [1] call print 
    // [7] phi from main to print [phi:main->print]
  print_from_main:
    // [7] phi (word) print::w#3 = (word) $1234 [phi:main->print#0] -- vwuz1=vwuc1 
    lda #<$1234
    sta.z print.w
    lda #>$1234
    sta.z print.w+1
    // [7] phi (byte) idx#13 = (byte) 0 [phi:main->print#1] -- vbuxx=vbuc1 
    ldx #0
    jsr print
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call print 
    // [7] phi from main::@1 to print [phi:main::@1->print]
  print_from___b1:
    // [7] phi (word) print::w#3 = (const word) main::w [phi:main::@1->print#0] -- vwuz1=vwuc1 
    lda #<w
    sta.z print.w
    lda #>w
    sta.z print.w+1
    // [7] phi (byte) idx#13 = (byte) idx#14 [phi:main::@1->print#1] -- register_copy 
    jsr print
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [5] call print 
    // [7] phi from main::@2 to print [phi:main::@2->print]
  print_from___b2:
    // [7] phi (word) print::w#3 = (byte) $12*(word) $100+(byte) $34 [phi:main::@2->print#0] -- vwuz1=vwuc1 
    lda #<$12*$100+$34
    sta.z print.w
    lda #>$12*$100+$34
    sta.z print.w+1
    // [7] phi (byte) idx#13 = (byte) idx#14 [phi:main::@2->print#1] -- register_copy 
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // print
// print(word zp(2) w)
print: {
    .label w = 2
    // [8] (byte~) print::$0 ← (byte) idx#13 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [9] *((const nomodify word*) SCREEN + (byte~) print::$0) ← (word) print::w#3 -- pwuc1_derefidx_vbuaa=vwuz1 
    tay
    lda.z w
    sta SCREEN,y
    lda.z w+1
    sta SCREEN+1,y
    // [10] (byte) idx#14 ← ++ (byte) idx#13 -- vbuxx=_inc_vbuxx 
    inx
    jmp __breturn
    // print::@return
  __breturn:
    // [11] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction print_from___b1:
Removing instruction __b2_from___b1:
Removing instruction print_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify word*) SCREEN = (word*) 1024
(byte) idx
(byte) idx#13 reg byte x 8.666666666666666
(byte) idx#14 reg byte x 2.5
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(const word) main::w = (word) $1234
(void()) print((word) print::w)
(byte~) print::$0 reg byte a 22.0
(label) print::@return
(word) print::w
(word) print::w#3 w zp[2]:2 5.5

reg byte x [ idx#13 idx#14 ]
zp[2]:2 [ print::w#3 ]
reg byte a [ print::$0 ]


FINAL ASSEMBLER
Score: 86

  // File Comments
// Test auto-casting of call-parameters
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .const w = $1234
    // print(0x1234)
    // [1] call print 
    // [7] phi from main to print [phi:main->print]
    // [7] phi (word) print::w#3 = (word) $1234 [phi:main->print#0] -- vwuz1=vwuc1 
    lda #<$1234
    sta.z print.w
    lda #>$1234
    sta.z print.w+1
    // [7] phi (byte) idx#13 = (byte) 0 [phi:main->print#1] -- vbuxx=vbuc1 
    ldx #0
    jsr print
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // print(w)
    // [3] call print 
    // [7] phi from main::@1 to print [phi:main::@1->print]
    // [7] phi (word) print::w#3 = (const word) main::w [phi:main::@1->print#0] -- vwuz1=vwuc1 
    lda #<w
    sta.z print.w
    lda #>w
    sta.z print.w+1
    // [7] phi (byte) idx#13 = (byte) idx#14 [phi:main::@1->print#1] -- register_copy 
    jsr print
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // print( {0x12,0x34} )
    // [5] call print 
    // [7] phi from main::@2 to print [phi:main::@2->print]
    // [7] phi (word) print::w#3 = (byte) $12*(word) $100+(byte) $34 [phi:main::@2->print#0] -- vwuz1=vwuc1 
    lda #<$12*$100+$34
    sta.z print.w
    lda #>$12*$100+$34
    sta.z print.w+1
    // [7] phi (byte) idx#13 = (byte) idx#14 [phi:main::@2->print#1] -- register_copy 
    jsr print
    // main::@return
    // }
    // [6] return 
    rts
}
  // print
// print(word zp(2) w)
print: {
    .label w = 2
    // SCREEN[idx++] = w
    // [8] (byte~) print::$0 ← (byte) idx#13 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [9] *((const nomodify word*) SCREEN + (byte~) print::$0) ← (word) print::w#3 -- pwuc1_derefidx_vbuaa=vwuz1 
    tay
    lda.z w
    sta SCREEN,y
    lda.z w+1
    sta SCREEN+1,y
    // SCREEN[idx++] = w;
    // [10] (byte) idx#14 ← ++ (byte) idx#13 -- vbuxx=_inc_vbuxx 
    inx
    // print::@return
    // }
    // [11] return 
    rts
}
  // File Data

