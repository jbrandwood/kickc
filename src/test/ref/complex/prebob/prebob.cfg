@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  kickasm() {{ .const PHI = (1+sqrt(5))/2

 }}
  to:@2
@2: scope:[]  from @1
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @2
  [4] phi()

(void()) main()
main: scope:[main]  from @2
  [5] phi()
  [6] call mulf_init 
  to:main::@9
main::@9: scope:[main]  from main
  [7] phi()
  [8] call prepareBobs 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [9] phi()
  [10] call renderBobInit 
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main::@10
  [11] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  [12] phi()
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001
  [13] *((const byte*) CIA2_PORT_A) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0
  to:main::toD0181
main::toD0181: scope:[main]  from main::vicSelectGfxBank1_@1
  [14] phi()
  to:main::@7
main::@7: scope:[main]  from main::toD0181
  [15] *((const byte*) D018) ← (const byte) main::toD0181_return#0
  [16] call memset 
  to:main::@1
main::@1: scope:[main]  from main::@14 main::@7
  [17] (byte) main::angle#6 ← phi( main::@7/(byte) 0 main::@14/(byte) main::angle#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [18] if(*((const byte*) RASTER)<(byte) $f8) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [19] (byte) main::a#7 ← (byte) main::angle#6
  to:main::@4
main::@4: scope:[main]  from main::@13 main::@3
  [20] (byte) main::i#2 ← phi( main::@13/(byte) main::i#1 main::@3/(byte) 0 )
  [20] (byte) main::a#2 ← phi( main::@13/(byte) main::a#1 main::@3/(byte) main::a#7 )
  [20] (signed byte) main::r#2 ← phi( main::@13/(signed byte) main::r#1 main::@3/(signed byte) $1e )
  [21] *((const byte*) BORDERCOL) ← (byte) 1
  [22] (signed byte) mulf8s::a#0 ← (signed byte) main::r#2
  [23] (signed byte) mulf8s::b#0 ← *((const signed byte*) COS + (byte) main::a#2)
  [24] call mulf8s 
  [25] (signed word) mulf8s::return#2 ← (signed word) mulf8s::return#0
  to:main::@11
main::@11: scope:[main]  from main::@4
  [26] (signed word~) main::$9 ← (signed word) mulf8s::return#2
  [27] (signed word) main::x#0 ← (signed word~) main::$9 + (signed word)(number) $4b*(number) $100
  [28] (signed byte) mulf8s::a#1 ← (signed byte) main::r#2
  [29] (signed byte) mulf8s::b#1 ← *((const signed byte*) SIN + (byte) main::a#2)
  [30] call mulf8s 
  [31] (signed word) mulf8s::return#3 ← (signed word) mulf8s::return#0
  to:main::@12
main::@12: scope:[main]  from main::@11
  [32] (signed word~) main::$11 ← (signed word) mulf8s::return#3
  [33] (signed word~) main::$12 ← (signed word~) main::$11 << (byte) 1
  [34] (signed word) main::y#0 ← (signed word~) main::$12 + (signed word)(number) $5a*(number) $100
  [35] *((const byte*) BORDERCOL) ← (byte) 2
  [36] (byte) main::a#1 ← (byte) main::a#2 + (byte) $62
  [37] (signed byte) main::r#1 ← (signed byte) main::r#2 + (signed byte) 3
  [38] (byte) renderBob::xpos#0 ← > (signed word) main::x#0
  [39] (byte) renderBob::ypos#0 ← > (signed word) main::y#0
  [40] call renderBob 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [41] (byte) main::i#1 ← ++ (byte) main::i#2
  [42] if((byte) main::i#1!=(byte) $1a) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@13
  [43] (byte) main::angle#1 ← (byte) main::angle#6 + (byte) 3
  [44] *((const byte*) BORDERCOL) ← (byte) 0
  [45] call keyboard_key_pressed 
  [46] (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#0
  to:main::@14
main::@14: scope:[main]  from main::@5
  [47] (byte~) main::$18 ← (byte) keyboard_key_pressed::return#2
  [48] if((byte) 0!=(byte~) main::$18) goto main::@6
  to:main::@1
main::@6: scope:[main]  from main::@14 main::@15
  [49] phi()
  [50] call keyboard_key_pressed 
  [51] (byte) keyboard_key_pressed::return#3 ← (byte) keyboard_key_pressed::return#0
  to:main::@15
main::@15: scope:[main]  from main::@6
  [52] (byte~) main::$20 ← (byte) keyboard_key_pressed::return#3
  [53] if((byte) 0!=(byte~) main::$20) goto main::@6
  to:main::vicSelectGfxBank2
main::vicSelectGfxBank2: scope:[main]  from main::@15
  [54] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3
  to:main::vicSelectGfxBank2_toDd001
main::vicSelectGfxBank2_toDd001: scope:[main]  from main::vicSelectGfxBank2
  [55] phi()
  to:main::vicSelectGfxBank2_@1
main::vicSelectGfxBank2_@1: scope:[main]  from main::vicSelectGfxBank2_toDd001
  [56] *((const byte*) CIA2_PORT_A) ← (const byte) main::vicSelectGfxBank2_toDd001_return#0
  to:main::toD0182
main::toD0182: scope:[main]  from main::vicSelectGfxBank2_@1
  [57] phi()
  to:main::@8
main::@8: scope:[main]  from main::toD0182
  [58] *((const byte*) D018) ← (const byte) main::toD0182_return#0
  to:main::@return
main::@return: scope:[main]  from main::@8
  [59] return 
  to:@return

(byte()) keyboard_key_pressed((byte) keyboard_key_pressed::key)
keyboard_key_pressed: scope:[keyboard_key_pressed]  from main::@5 main::@6
  [60] phi()
  [61] call keyboard_matrix_read 
  [62] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  to:keyboard_key_pressed::@1
keyboard_key_pressed::@1: scope:[keyboard_key_pressed]  from keyboard_key_pressed
  [63] (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#2
  [64] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte*) keyboard_matrix_col_bitmask+(const byte) keyboard_key_pressed::colidx#0)
  to:keyboard_key_pressed::@return
keyboard_key_pressed::@return: scope:[keyboard_key_pressed]  from keyboard_key_pressed::@1
  [65] return 
  to:@return

(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_key_pressed
  [66] *((const byte*) CIA1_PORT_A) ← *((const byte*) keyboard_matrix_row_bitmask+(const byte) keyboard_key_pressed::rowidx#0)
  [67] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [68] return 
  to:@return

(void()) renderBob((byte) renderBob::xpos , (byte) renderBob::ypos)
renderBob: scope:[renderBob]  from main::@12
  [69] (byte) renderBob::x_char_offset#0 ← (byte) renderBob::xpos#0 >> (byte) 2
  [70] (byte) renderBob::y_char_offset#0 ← (byte) renderBob::ypos#0 >> (byte) 3
  [71] (byte~) renderBob::$8 ← (byte) renderBob::y_char_offset#0 << (byte) 1
  [72] (word) renderBob::y_offset#0 ← *((const word*) RENDERBOB_YOFFSET + (byte~) renderBob::$8)
  [73] (byte*~) renderBob::$2 ← (const byte*) BOB_SCREEN + (word) renderBob::y_offset#0
  [74] (byte*) renderBob::screen#0 ← (byte*~) renderBob::$2 + (byte) renderBob::x_char_offset#0
  [75] (byte~) renderBob::$4 ← (byte) renderBob::ypos#0 & (byte) 7
  [76] (byte~) renderBob::$5 ← (byte~) renderBob::$4 << (byte) 2
  [77] (byte~) renderBob::$6 ← (byte) renderBob::xpos#0 & (byte) 3
  [78] (byte) renderBob::bob_table_idx#0 ← (byte~) renderBob::$5 + (byte~) renderBob::$6
  [79] *((byte*) renderBob::screen#0) ← *((const byte*) BOB_TABLES + (byte) renderBob::bob_table_idx#0)
  [80] *((byte*) renderBob::screen#0 + (byte) $28) ← *((const byte*) BOB_TABLES+(byte) 1*(const byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [81] *((byte*) renderBob::screen#0 + (byte) $50) ← *((const byte*) BOB_TABLES+(byte) 2*(const byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [82] *((byte*) renderBob::screen#0 + (byte) 1) ← *((const byte*) BOB_TABLES+(byte) 3*(const byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [83] *((byte*) renderBob::screen#0 + (byte) $29) ← *((const byte*) BOB_TABLES+(byte) 4*(const byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [84] *((byte*) renderBob::screen#0 + (byte) $51) ← *((const byte*) BOB_TABLES+(byte) 5*(const byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [85] *((byte*) renderBob::screen#0 + (byte) 2) ← *((const byte*) BOB_TABLES+(byte) 6*(const byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [86] *((byte*) renderBob::screen#0 + (byte) $2a) ← *((const byte*) BOB_TABLES+(byte) 7*(const byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [87] *((byte*) renderBob::screen#0 + (byte) $52) ← *((const byte*) BOB_TABLES+(byte) 8*(const byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  to:renderBob::@return
renderBob::@return: scope:[renderBob]  from renderBob
  [88] return 
  to:@return

(signed word()) mulf8s((signed byte) mulf8s::a , (signed byte) mulf8s::b)
mulf8s: scope:[mulf8s]  from main::@11 main::@4
  [89] (signed byte) mulf8s::b#2 ← phi( main::@11/(signed byte) mulf8s::b#1 main::@4/(signed byte) mulf8s::b#0 )
  [89] (signed byte) mulf8s::mulf8s_prepare1_a#0 ← phi( main::@11/(signed byte) mulf8s::a#1 main::@4/(signed byte) mulf8s::a#0 )
  to:mulf8s::mulf8s_prepare1
mulf8s::mulf8s_prepare1: scope:[mulf8s]  from mulf8s
  [90] (byte) mulf8u_prepare::a#0 ← (byte)(signed byte) mulf8s::mulf8s_prepare1_a#0
  [91] call mulf8u_prepare 
  to:mulf8s::@1
mulf8s::@1: scope:[mulf8s]  from mulf8s::mulf8s_prepare1
  [92] (signed byte) mulf8s_prepared::b#0 ← (signed byte) mulf8s::b#2
  [93] call mulf8s_prepared 
  to:mulf8s::@2
mulf8s::@2: scope:[mulf8s]  from mulf8s::@1
  [94] (signed word) mulf8s::return#0 ← (signed word)(word) mulf8s_prepared::m#4
  to:mulf8s::@return
mulf8s::@return: scope:[mulf8s]  from mulf8s::@2
  [95] return 
  to:@return

(signed word()) mulf8s_prepared((signed byte) mulf8s_prepared::b)
mulf8s_prepared: scope:[mulf8s_prepared]  from mulf8s::@1
  [96] (byte) mulf8u_prepared::b#0 ← (byte)(signed byte) mulf8s_prepared::b#0
  [97] call mulf8u_prepared 
  [98] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0
  to:mulf8s_prepared::@5
mulf8s_prepared::@5: scope:[mulf8s_prepared]  from mulf8s_prepared
  [99] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#2
  [100] if(*((const signed byte*) mulf8s_prepared::memA)>=(signed byte) 0) goto mulf8s_prepared::@1
  to:mulf8s_prepared::@3
mulf8s_prepared::@3: scope:[mulf8s_prepared]  from mulf8s_prepared::@5
  [101] (byte~) mulf8s_prepared::$8 ← > (word) mulf8s_prepared::m#0
  [102] (byte~) mulf8s_prepared::$15 ← (byte~) mulf8s_prepared::$8 - (byte)(signed byte) mulf8s_prepared::b#0
  [103] (word) mulf8s_prepared::m#1 ← (word) mulf8s_prepared::m#0 hi= (byte~) mulf8s_prepared::$15
  to:mulf8s_prepared::@1
mulf8s_prepared::@1: scope:[mulf8s_prepared]  from mulf8s_prepared::@3 mulf8s_prepared::@5
  [104] (word) mulf8s_prepared::m#5 ← phi( mulf8s_prepared::@3/(word) mulf8s_prepared::m#1 mulf8s_prepared::@5/(word) mulf8s_prepared::m#0 )
  [105] if((signed byte) mulf8s_prepared::b#0>=(signed byte) 0) goto mulf8s_prepared::@2
  to:mulf8s_prepared::@4
mulf8s_prepared::@4: scope:[mulf8s_prepared]  from mulf8s_prepared::@1
  [106] (byte~) mulf8s_prepared::$12 ← > (word) mulf8s_prepared::m#5
  [107] (byte~) mulf8s_prepared::$16 ← (byte~) mulf8s_prepared::$12 - (byte)*((const signed byte*) mulf8s_prepared::memA)
  [108] (word) mulf8s_prepared::m#2 ← (word) mulf8s_prepared::m#5 hi= (byte~) mulf8s_prepared::$16
  to:mulf8s_prepared::@2
mulf8s_prepared::@2: scope:[mulf8s_prepared]  from mulf8s_prepared::@1 mulf8s_prepared::@4
  [109] (word) mulf8s_prepared::m#4 ← phi( mulf8s_prepared::@1/(word) mulf8s_prepared::m#5 mulf8s_prepared::@4/(word) mulf8s_prepared::m#2 )
  to:mulf8s_prepared::@return
mulf8s_prepared::@return: scope:[mulf8s_prepared]  from mulf8s_prepared::@2
  [110] return 
  to:@return

(word()) mulf8u_prepared((byte) mulf8u_prepared::b)
mulf8u_prepared: scope:[mulf8u_prepared]  from mulf8s_prepared
  [111] *((const byte*) mulf8u_prepared::memB) ← (byte) mulf8u_prepared::b#0
  asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
  [113] (word) mulf8u_prepared::return#0 ← *((const byte*) mulf8u_prepared::memB) w= *((const byte*) mulf8u_prepared::resL)
  to:mulf8u_prepared::@return
mulf8u_prepared::@return: scope:[mulf8u_prepared]  from mulf8u_prepared
  [114] return 
  to:@return

(void()) mulf8u_prepare((byte) mulf8u_prepare::a)
mulf8u_prepare: scope:[mulf8u_prepare]  from mulf8s::mulf8s_prepare1
  [115] *((const byte*) mulf8u_prepare::memA) ← (byte) mulf8u_prepare::a#0
  asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
  to:mulf8u_prepare::@return
mulf8u_prepare::@return: scope:[mulf8u_prepare]  from mulf8u_prepare
  [117] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from main::@7
  [118] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [119] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [120] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [121] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [122] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [123] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(void()) renderBobInit()
renderBobInit: scope:[renderBobInit]  from main::@10
  [124] phi()
  to:renderBobInit::@1
renderBobInit::@1: scope:[renderBobInit]  from renderBobInit renderBobInit::@1
  [125] (byte) renderBobInit::y#2 ← phi( renderBobInit/(byte) 0 renderBobInit::@1/(byte) renderBobInit::y#1 )
  [126] (word~) renderBobInit::$0 ← (word)(byte) renderBobInit::y#2
  [127] (word~) renderBobInit::$4 ← (word~) renderBobInit::$0 << (byte) 2
  [128] (word~) renderBobInit::$5 ← (word~) renderBobInit::$4 + (word~) renderBobInit::$0
  [129] (word~) renderBobInit::$1 ← (word~) renderBobInit::$5 << (byte) 3
  [130] (byte~) renderBobInit::$3 ← (byte) renderBobInit::y#2 << (byte) 1
  [131] *((const word*) RENDERBOB_YOFFSET + (byte~) renderBobInit::$3) ← (word~) renderBobInit::$1
  [132] (byte) renderBobInit::y#1 ← ++ (byte) renderBobInit::y#2
  [133] if((byte) renderBobInit::y#1!=(byte) $20) goto renderBobInit::@1
  to:renderBobInit::@return
renderBobInit::@return: scope:[renderBobInit]  from renderBobInit::@1
  [134] return 
  to:@return

(void()) prepareBobs()
prepareBobs: scope:[prepareBobs]  from main::@9
  [135] phi()
  [136] call progress_init 
  to:prepareBobs::@8
prepareBobs::@8: scope:[prepareBobs]  from prepareBobs
  [137] phi()
  [138] call bobCharsetFindOrAddGlyph 
  to:prepareBobs::@1
prepareBobs::@1: scope:[prepareBobs]  from prepareBobs::@8 prepareBobs::@9
  [139] (byte) prepareBobs::bob_table_idx#6 ← phi( prepareBobs::@8/(byte) 0 prepareBobs::@9/(byte) prepareBobs::bob_table_idx#12 )
  [139] (byte) bob_charset_next_id#14 ← phi( prepareBobs::@8/(byte) bob_charset_next_id#16 prepareBobs::@9/(byte) bob_charset_next_id#30 )
  [139] (byte) progress_idx#16 ← phi( prepareBobs::@8/(byte) 0 prepareBobs::@9/(byte) progress_idx#31 )
  [139] (byte*) progress_cursor#15 ← phi( prepareBobs::@8/(const byte*) SCREEN_BASIC prepareBobs::@9/(byte*) progress_cursor#31 )
  [139] (byte) prepareBobs::shift_y#2 ← phi( prepareBobs::@8/(byte) 0 prepareBobs::@9/(byte) prepareBobs::shift_y#1 )
  [140] if((byte) prepareBobs::shift_y#2<(const byte) BOB_SHIFTS_Y) goto prepareBobs::@2
  to:prepareBobs::@return
prepareBobs::@return: scope:[prepareBobs]  from prepareBobs::@1
  [141] return 
  to:@return
prepareBobs::@2: scope:[prepareBobs]  from prepareBobs::@1 prepareBobs::@13
  [142] (byte) progress_idx#31 ← phi( prepareBobs::@1/(byte) progress_idx#16 prepareBobs::@13/(byte) progress_idx#25 )
  [142] (byte*) progress_cursor#31 ← phi( prepareBobs::@1/(byte*) progress_cursor#15 prepareBobs::@13/(byte*) progress_cursor#24 )
  [142] (byte) bob_charset_next_id#30 ← phi( prepareBobs::@1/(byte) bob_charset_next_id#14 prepareBobs::@13/(byte) bob_charset_next_id#21 )
  [142] (byte) prepareBobs::bob_table_idx#12 ← phi( prepareBobs::@1/(byte) prepareBobs::bob_table_idx#6 prepareBobs::@13/(byte) prepareBobs::bob_table_idx#1 )
  [142] (byte) prepareBobs::shift_x#2 ← phi( prepareBobs::@1/(byte) 0 prepareBobs::@13/(byte) prepareBobs::shift_x#1 )
  [143] if((byte) prepareBobs::shift_x#2<(const byte) BOB_SHIFTS_X) goto prepareBobs::@3
  to:prepareBobs::@4
prepareBobs::@4: scope:[prepareBobs]  from prepareBobs::@2
  [144] phi()
  [145] call shiftProtoBobDown 
  to:prepareBobs::@9
prepareBobs::@9: scope:[prepareBobs]  from prepareBobs::@4
  [146] (byte) prepareBobs::shift_y#1 ← ++ (byte) prepareBobs::shift_y#2
  to:prepareBobs::@1
prepareBobs::@3: scope:[prepareBobs]  from prepareBobs::@2
  [147] (byte*) prepareBobs::bob_table#0 ← (const byte*) BOB_TABLES + (byte) prepareBobs::bob_table_idx#12
  to:prepareBobs::@5
prepareBobs::@5: scope:[prepareBobs]  from prepareBobs::@11 prepareBobs::@3
  [148] (byte*) progress_cursor#24 ← phi( prepareBobs::@11/(byte*) progress_cursor#17 prepareBobs::@3/(byte*) progress_cursor#31 )
  [148] (byte) progress_idx#25 ← phi( prepareBobs::@11/(byte) progress_idx#10 prepareBobs::@3/(byte) progress_idx#31 )
  [148] (byte*) prepareBobs::bob_table#2 ← phi( prepareBobs::@11/(byte*) prepareBobs::bob_table#1 prepareBobs::@3/(byte*) prepareBobs::bob_table#0 )
  [148] (byte) bob_charset_next_id#21 ← phi( prepareBobs::@11/(byte) bob_charset_next_id#16 prepareBobs::@3/(byte) bob_charset_next_id#30 )
  [148] (byte*) prepareBobs::bob_glyph#2 ← phi( prepareBobs::@11/(byte*) prepareBobs::bob_glyph#1 prepareBobs::@3/(const byte*) PROTO_BOB )
  [148] (byte) prepareBobs::cell#2 ← phi( prepareBobs::@11/(byte) prepareBobs::cell#1 prepareBobs::@3/(byte) 0 )
  [149] if((byte) prepareBobs::cell#2<(byte) 9) goto prepareBobs::@6
  to:prepareBobs::@7
prepareBobs::@7: scope:[prepareBobs]  from prepareBobs::@5
  [150] (byte) prepareBobs::bob_table_idx#1 ← ++ (byte) prepareBobs::bob_table_idx#12
  [151] call shiftProtoBobRight 
  to:prepareBobs::@12
prepareBobs::@12: scope:[prepareBobs]  from prepareBobs::@7
  [152] phi()
  [153] call shiftProtoBobRight 
  to:prepareBobs::@13
prepareBobs::@13: scope:[prepareBobs]  from prepareBobs::@12
  [154] (byte) prepareBobs::shift_x#1 ← ++ (byte) prepareBobs::shift_x#2
  to:prepareBobs::@2
prepareBobs::@6: scope:[prepareBobs]  from prepareBobs::@5
  [155] (byte*) bobCharsetFindOrAddGlyph::bob_glyph#1 ← (byte*) prepareBobs::bob_glyph#2
  [156] call bobCharsetFindOrAddGlyph 
  [157] (byte) bobCharsetFindOrAddGlyph::return#1 ← (byte) bobCharsetFindOrAddGlyph::glyph_id#11
  to:prepareBobs::@10
prepareBobs::@10: scope:[prepareBobs]  from prepareBobs::@6
  [158] (byte~) prepareBobs::$6 ← (byte) bobCharsetFindOrAddGlyph::return#1
  [159] *((byte*) prepareBobs::bob_table#2) ← (byte~) prepareBobs::$6
  [160] (byte*) prepareBobs::bob_glyph#1 ← (byte*) prepareBobs::bob_glyph#2 + (byte) 8
  [161] (byte*) prepareBobs::bob_table#1 ← (byte*) prepareBobs::bob_table#2 + (const byte) BOB_SHIFTS_X*(const byte) BOB_SHIFTS_Y
  [162] call progress_inc 
  to:prepareBobs::@11
prepareBobs::@11: scope:[prepareBobs]  from prepareBobs::@10
  [163] (byte) prepareBobs::cell#1 ← ++ (byte) prepareBobs::cell#2
  to:prepareBobs::@5

(void()) progress_inc()
progress_inc: scope:[progress_inc]  from prepareBobs::@10
  [164] (byte) progress_idx#8 ← ++ (byte) progress_idx#25
  [165] if((byte) progress_idx#8!=(byte) 8) goto progress_inc::@1
  to:progress_inc::@2
progress_inc::@2: scope:[progress_inc]  from progress_inc
  [166] *((byte*) progress_cursor#24) ← *((const byte*) progress_inc::progress_chars+(byte) 8)
  [167] (byte*) progress_cursor#8 ← ++ (byte*) progress_cursor#24
  to:progress_inc::@1
progress_inc::@1: scope:[progress_inc]  from progress_inc progress_inc::@2
  [168] (byte*) progress_cursor#17 ← phi( progress_inc/(byte*) progress_cursor#24 progress_inc::@2/(byte*) progress_cursor#8 )
  [168] (byte) progress_idx#10 ← phi( progress_inc/(byte) progress_idx#8 progress_inc::@2/(byte) 0 )
  [169] *((byte*) progress_cursor#17) ← *((const byte*) progress_inc::progress_chars + (byte) progress_idx#10)
  to:progress_inc::@return
progress_inc::@return: scope:[progress_inc]  from progress_inc::@1
  [170] return 
  to:@return

(byte()) bobCharsetFindOrAddGlyph((byte*) bobCharsetFindOrAddGlyph::bob_glyph)
bobCharsetFindOrAddGlyph: scope:[bobCharsetFindOrAddGlyph]  from prepareBobs::@6 prepareBobs::@8
  [171] (byte*) bobCharsetFindOrAddGlyph::bob_glyph#10 ← phi( prepareBobs::@8/(const byte*) PROTO_BOB+(byte) $30 prepareBobs::@6/(byte*) bobCharsetFindOrAddGlyph::bob_glyph#1 )
  [171] (byte) bob_charset_next_id#23 ← phi( prepareBobs::@8/(byte) 0 prepareBobs::@6/(byte) bob_charset_next_id#21 )
  to:bobCharsetFindOrAddGlyph::@1
bobCharsetFindOrAddGlyph::@1: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph bobCharsetFindOrAddGlyph::@6
  [172] (byte*) bobCharsetFindOrAddGlyph::glyph_cursor#11 ← phi( bobCharsetFindOrAddGlyph/(const byte*) BOB_CHARSET bobCharsetFindOrAddGlyph::@6/(byte*) bobCharsetFindOrAddGlyph::glyph_cursor#1 )
  [172] (byte) bobCharsetFindOrAddGlyph::glyph_id#11 ← phi( bobCharsetFindOrAddGlyph/(byte) 0 bobCharsetFindOrAddGlyph::@6/(byte) bobCharsetFindOrAddGlyph::glyph_id#1 )
  [173] if((byte) bobCharsetFindOrAddGlyph::glyph_id#11!=(byte) bob_charset_next_id#23) goto bobCharsetFindOrAddGlyph::@2
  to:bobCharsetFindOrAddGlyph::@7
bobCharsetFindOrAddGlyph::@7: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@1 bobCharsetFindOrAddGlyph::@8
  [174] (byte) bobCharsetFindOrAddGlyph::i1#2 ← phi( bobCharsetFindOrAddGlyph::@8/(byte) bobCharsetFindOrAddGlyph::i1#1 bobCharsetFindOrAddGlyph::@1/(byte) 0 )
  [175] if((byte) bobCharsetFindOrAddGlyph::i1#2<(byte) 8) goto bobCharsetFindOrAddGlyph::@8
  to:bobCharsetFindOrAddGlyph::@9
bobCharsetFindOrAddGlyph::@9: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@7
  [176] (byte) bob_charset_next_id#8 ← ++ (byte) bob_charset_next_id#23
  to:bobCharsetFindOrAddGlyph::@return
bobCharsetFindOrAddGlyph::@return: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@5 bobCharsetFindOrAddGlyph::@9
  [177] (byte) bob_charset_next_id#16 ← phi( bobCharsetFindOrAddGlyph::@5/(byte) bob_charset_next_id#23 bobCharsetFindOrAddGlyph::@9/(byte) bob_charset_next_id#8 )
  [178] return 
  to:@return
bobCharsetFindOrAddGlyph::@8: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@7
  [179] *((byte*) bobCharsetFindOrAddGlyph::glyph_cursor#11 + (byte) bobCharsetFindOrAddGlyph::i1#2) ← *((byte*) bobCharsetFindOrAddGlyph::bob_glyph#10 + (byte) bobCharsetFindOrAddGlyph::i1#2)
  [180] (byte) bobCharsetFindOrAddGlyph::i1#1 ← ++ (byte) bobCharsetFindOrAddGlyph::i1#2
  to:bobCharsetFindOrAddGlyph::@7
bobCharsetFindOrAddGlyph::@2: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@1 bobCharsetFindOrAddGlyph::@4
  [181] (byte) bobCharsetFindOrAddGlyph::i#2 ← phi( bobCharsetFindOrAddGlyph::@1/(byte) 0 bobCharsetFindOrAddGlyph::@4/(byte) bobCharsetFindOrAddGlyph::i#1 )
  [182] if((byte) bobCharsetFindOrAddGlyph::i#2<(byte) 8) goto bobCharsetFindOrAddGlyph::@3
  to:bobCharsetFindOrAddGlyph::@5
bobCharsetFindOrAddGlyph::@3: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@2
  [183] if(*((byte*) bobCharsetFindOrAddGlyph::glyph_cursor#11 + (byte) bobCharsetFindOrAddGlyph::i#2)==*((byte*) bobCharsetFindOrAddGlyph::bob_glyph#10 + (byte) bobCharsetFindOrAddGlyph::i#2)) goto bobCharsetFindOrAddGlyph::@4
  to:bobCharsetFindOrAddGlyph::@5
bobCharsetFindOrAddGlyph::@5: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@2 bobCharsetFindOrAddGlyph::@3
  [184] (byte) bobCharsetFindOrAddGlyph::found#2 ← phi( bobCharsetFindOrAddGlyph::@3/(byte) 0 bobCharsetFindOrAddGlyph::@2/(byte) 1 )
  [185] if((byte) 0==(byte) bobCharsetFindOrAddGlyph::found#2) goto bobCharsetFindOrAddGlyph::@6
  to:bobCharsetFindOrAddGlyph::@return
bobCharsetFindOrAddGlyph::@6: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@5
  [186] (byte) bobCharsetFindOrAddGlyph::glyph_id#1 ← ++ (byte) bobCharsetFindOrAddGlyph::glyph_id#11
  [187] (byte*) bobCharsetFindOrAddGlyph::glyph_cursor#1 ← (byte*) bobCharsetFindOrAddGlyph::glyph_cursor#11 + (byte) 8
  to:bobCharsetFindOrAddGlyph::@1
bobCharsetFindOrAddGlyph::@4: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@3
  [188] (byte) bobCharsetFindOrAddGlyph::i#1 ← ++ (byte) bobCharsetFindOrAddGlyph::i#2
  to:bobCharsetFindOrAddGlyph::@2

(void()) shiftProtoBobRight()
shiftProtoBobRight: scope:[shiftProtoBobRight]  from prepareBobs::@12 prepareBobs::@7
  [189] phi()
  to:shiftProtoBobRight::@1
shiftProtoBobRight::@1: scope:[shiftProtoBobRight]  from shiftProtoBobRight shiftProtoBobRight::@6
  [190] (byte) shiftProtoBobRight::carry#2 ← phi( shiftProtoBobRight/(byte) 0 shiftProtoBobRight::@6/(byte) shiftProtoBobRight::carry#10 )
  [190] (byte) shiftProtoBobRight::j#3 ← phi( shiftProtoBobRight/(byte) 0 shiftProtoBobRight::@6/(byte) shiftProtoBobRight::j#10 )
  [190] (byte) shiftProtoBobRight::i#2 ← phi( shiftProtoBobRight/(byte) 0 shiftProtoBobRight::@6/(byte) shiftProtoBobRight::i#1 )
  [191] if((byte) shiftProtoBobRight::i#2<(byte)(number) 3*(number) 3*(number) 8) goto shiftProtoBobRight::@2
  to:shiftProtoBobRight::@return
shiftProtoBobRight::@return: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@1
  [192] return 
  to:@return
shiftProtoBobRight::@2: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@1
  [193] (byte~) shiftProtoBobRight::$1 ← *((const byte*) PROTO_BOB + (byte) shiftProtoBobRight::j#3) & (byte) 1
  [194] if((byte) 0!=(byte~) shiftProtoBobRight::$1) goto shiftProtoBobRight::@3
  to:shiftProtoBobRight::@4
shiftProtoBobRight::@3: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@2
  [195] phi()
  to:shiftProtoBobRight::@4
shiftProtoBobRight::@4: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@2 shiftProtoBobRight::@3
  [196] (byte) shiftProtoBobRight::carry#1 ← phi( shiftProtoBobRight::@3/(byte) $80 shiftProtoBobRight::@2/(byte) 0 )
  [197] (byte~) shiftProtoBobRight::$5 ← *((const byte*) PROTO_BOB + (byte) shiftProtoBobRight::j#3) >> (byte) 1
  [198] (byte~) shiftProtoBobRight::$6 ← (byte) shiftProtoBobRight::carry#2 | (byte~) shiftProtoBobRight::$5
  [199] *((const byte*) PROTO_BOB + (byte) shiftProtoBobRight::j#3) ← (byte~) shiftProtoBobRight::$6
  [200] if((byte) shiftProtoBobRight::j#3>=(byte) $30) goto shiftProtoBobRight::@5
  to:shiftProtoBobRight::@7
shiftProtoBobRight::@7: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@4
  [201] (byte) shiftProtoBobRight::j#2 ← (byte) shiftProtoBobRight::j#3 + (byte) $18
  to:shiftProtoBobRight::@6
shiftProtoBobRight::@6: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@5 shiftProtoBobRight::@7
  [202] (byte) shiftProtoBobRight::j#10 ← phi( shiftProtoBobRight::@7/(byte) shiftProtoBobRight::j#2 shiftProtoBobRight::@5/(byte) shiftProtoBobRight::j#1 )
  [203] (byte) shiftProtoBobRight::i#1 ← ++ (byte) shiftProtoBobRight::i#2
  [204] (byte) shiftProtoBobRight::carry#10 ← (byte) shiftProtoBobRight::carry#1
  to:shiftProtoBobRight::@1
shiftProtoBobRight::@5: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@4
  [205] (byte) shiftProtoBobRight::j#1 ← (byte) shiftProtoBobRight::j#3 - (byte) $2f
  to:shiftProtoBobRight::@6

(void()) shiftProtoBobDown()
shiftProtoBobDown: scope:[shiftProtoBobDown]  from prepareBobs::@4
  [206] phi()
  to:shiftProtoBobDown::@1
shiftProtoBobDown::@1: scope:[shiftProtoBobDown]  from shiftProtoBobDown shiftProtoBobDown::@2
  [207] (byte) shiftProtoBobDown::i#2 ← phi( shiftProtoBobDown/(byte) $17 shiftProtoBobDown::@2/(byte) shiftProtoBobDown::i#1 )
  [208] if((byte) shiftProtoBobDown::i#2>(byte) 0) goto shiftProtoBobDown::@2
  to:shiftProtoBobDown::@3
shiftProtoBobDown::@3: scope:[shiftProtoBobDown]  from shiftProtoBobDown::@1
  [209] *((const byte*) PROTO_BOB) ← (byte) 0
  [210] *((const byte*) PROTO_BOB+(byte) $18) ← (byte) 0
  [211] *((const byte*) PROTO_BOB+(byte) $30) ← (byte) 0
  to:shiftProtoBobDown::@return
shiftProtoBobDown::@return: scope:[shiftProtoBobDown]  from shiftProtoBobDown::@3
  [212] return 
  to:@return
shiftProtoBobDown::@2: scope:[shiftProtoBobDown]  from shiftProtoBobDown::@1
  [213] *((const byte*) PROTO_BOB + (byte) shiftProtoBobDown::i#2) ← *((const byte*) PROTO_BOB+(byte) $17 + (byte) shiftProtoBobDown::i#2)
  [214] *((const byte*) PROTO_BOB+(byte) $18 + (byte) shiftProtoBobDown::i#2) ← *((const byte*) PROTO_BOB+(byte) $2f + (byte) shiftProtoBobDown::i#2)
  [215] *((const byte*) PROTO_BOB+(byte) $30 + (byte) shiftProtoBobDown::i#2) ← (byte) 0
  [216] (byte) shiftProtoBobDown::i#1 ← -- (byte) shiftProtoBobDown::i#2
  to:shiftProtoBobDown::@1

(void()) progress_init((byte*) progress_init::line)
progress_init: scope:[progress_init]  from prepareBobs
  [217] phi()
  to:progress_init::@return
progress_init::@return: scope:[progress_init]  from progress_init
  [218] return 
  to:@return

(void()) mulf_init()
mulf_init: scope:[mulf_init]  from main
  [219] phi()
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@3
  [220] (byte) mulf_init::x_2#3 ← phi( mulf_init/(byte) 0 mulf_init::@3/(byte) mulf_init::x_2#2 )
  [220] (byte*) mulf_init::sqr1_hi#2 ← phi( mulf_init/(const byte*) mulf_sqr1_hi+(byte) 1 mulf_init::@3/(byte*) mulf_init::sqr1_hi#1 )
  [220] (word) mulf_init::sqr#4 ← phi( mulf_init/(byte) 0 mulf_init::@3/(word) mulf_init::sqr#1 )
  [220] (byte) mulf_init::c#2 ← phi( mulf_init/(byte) 0 mulf_init::@3/(byte) mulf_init::c#1 )
  [220] (byte*) mulf_init::sqr1_lo#2 ← phi( mulf_init/(const byte*) mulf_sqr1_lo+(byte) 1 mulf_init::@3/(byte*) mulf_init::sqr1_lo#1 )
  [221] if((byte*) mulf_init::sqr1_lo#2!=(const byte*) mulf_sqr1_lo+(word) $200) goto mulf_init::@2
  to:mulf_init::@5
mulf_init::@5: scope:[mulf_init]  from mulf_init::@1 mulf_init::@8
  [222] (byte) mulf_init::dir#2 ← phi( mulf_init::@8/(byte) mulf_init::dir#4 mulf_init::@1/(byte) $ff )
  [222] (byte*) mulf_init::sqr2_hi#2 ← phi( mulf_init::@8/(byte*) mulf_init::sqr2_hi#1 mulf_init::@1/(const byte*) mulf_sqr2_hi )
  [222] (byte) mulf_init::x_255#2 ← phi( mulf_init::@8/(byte) mulf_init::x_255#1 mulf_init::@1/(byte) -1 )
  [222] (byte*) mulf_init::sqr2_lo#2 ← phi( mulf_init::@8/(byte*) mulf_init::sqr2_lo#1 mulf_init::@1/(const byte*) mulf_sqr2_lo )
  [223] if((byte*) mulf_init::sqr2_lo#2!=(const byte*) mulf_sqr2_lo+(word) $1ff) goto mulf_init::@6
  to:mulf_init::@7
mulf_init::@7: scope:[mulf_init]  from mulf_init::@5
  [224] *((const byte*) mulf_sqr2_lo+(word) $1ff) ← *((const byte*) mulf_sqr1_lo+(word) $100)
  [225] *((const byte*) mulf_sqr2_hi+(word) $1ff) ← *((const byte*) mulf_sqr1_hi+(word) $100)
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@7
  [226] return 
  to:@return
mulf_init::@6: scope:[mulf_init]  from mulf_init::@5
  [227] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte*) mulf_sqr1_lo + (byte) mulf_init::x_255#2)
  [228] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte*) mulf_sqr1_hi + (byte) mulf_init::x_255#2)
  [229] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2
  [230] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2
  [231] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@9
  to:mulf_init::@8
mulf_init::@9: scope:[mulf_init]  from mulf_init::@6
  [232] phi()
  to:mulf_init::@8
mulf_init::@8: scope:[mulf_init]  from mulf_init::@6 mulf_init::@9
  [233] (byte) mulf_init::dir#4 ← phi( mulf_init::@9/(byte) mulf_init::dir#2 mulf_init::@6/(byte) 1 )
  [234] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2
  to:mulf_init::@5
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1
  [235] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2
  [236] (byte~) mulf_init::$1 ← (byte) mulf_init::c#1 & (byte) 1
  [237] if((byte~) mulf_init::$1!=(byte) 0) goto mulf_init::@3
  to:mulf_init::@4
mulf_init::@4: scope:[mulf_init]  from mulf_init::@2
  [238] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3
  [239] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4
  to:mulf_init::@3
mulf_init::@3: scope:[mulf_init]  from mulf_init::@2 mulf_init::@4
  [240] (byte) mulf_init::x_2#2 ← phi( mulf_init::@2/(byte) mulf_init::x_2#3 mulf_init::@4/(byte) mulf_init::x_2#1 )
  [240] (word) mulf_init::sqr#3 ← phi( mulf_init::@2/(word) mulf_init::sqr#4 mulf_init::@4/(word) mulf_init::sqr#2 )
  [241] (byte~) mulf_init::$4 ← < (word) mulf_init::sqr#3
  [242] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$4
  [243] (byte~) mulf_init::$5 ← > (word) mulf_init::sqr#3
  [244] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$5
  [245] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2
  [246] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2
  [247] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2
  to:mulf_init::@1
