Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from print_sint_decimal::@2
  (byte*) utoa::buffer#21 ← phi( print_sint_decimal::@2/(byte*) utoa::buffer#5 )
  (word) utoa::value#12 ← phi( print_sint_decimal::@2/(word) utoa::value#1 )
  (byte) utoa::radix#1 ← phi( print_sint_decimal::@2/(byte) utoa::radix#0 )
  (byte) utoa::max_digits#0 ← (byte) 0
  (word*) utoa::digit_values#0 ← (word*) 0
  (bool~) utoa::$0 ← (byte) utoa::radix#1 == (const byte) DECIMAL
  if((bool~) utoa::$0) goto utoa::@1
  to:utoa::@6
utoa::@1: scope:[utoa]  from utoa
  (byte*) utoa::buffer#17 ← phi( utoa/(byte*) utoa::buffer#21 )
  (word) utoa::value#8 ← phi( utoa/(word) utoa::value#12 )
  (byte) utoa::max_digits#1 ← (number) 5
  (word*) utoa::digit_values#1 ← (const word*) RADIX_DECIMAL_VALUES
  to:utoa::@5
utoa::@6: scope:[utoa]  from utoa
  (word) utoa::value#13 ← phi( utoa/(word) utoa::value#12 )
  (byte*) utoa::buffer#16 ← phi( utoa/(byte*) utoa::buffer#21 )
  (byte) utoa::radix#2 ← phi( utoa/(byte) utoa::radix#1 )
  (bool~) utoa::$1 ← (byte) utoa::radix#2 == (const byte) HEXADECIMAL
  if((bool~) utoa::$1) goto utoa::@2
  to:utoa::@7
utoa::@2: scope:[utoa]  from utoa::@6
  (byte*) utoa::buffer#18 ← phi( utoa::@6/(byte*) utoa::buffer#16 )
  (word) utoa::value#9 ← phi( utoa::@6/(word) utoa::value#13 )
  (byte) utoa::max_digits#2 ← (number) 4
  (word*) utoa::digit_values#2 ← (const word*) RADIX_HEXADECIMAL_VALUES
  to:utoa::@5
utoa::@7: scope:[utoa]  from utoa::@6
  (word) utoa::value#14 ← phi( utoa::@6/(word) utoa::value#13 )
  (byte*) utoa::buffer#13 ← phi( utoa::@6/(byte*) utoa::buffer#16 )
  (byte) utoa::radix#3 ← phi( utoa::@6/(byte) utoa::radix#2 )
  (bool~) utoa::$2 ← (byte) utoa::radix#3 == (const byte) OCTAL
  if((bool~) utoa::$2) goto utoa::@3
  to:utoa::@8
utoa::@3: scope:[utoa]  from utoa::@7
  (byte*) utoa::buffer#19 ← phi( utoa::@7/(byte*) utoa::buffer#13 )
  (word) utoa::value#10 ← phi( utoa::@7/(word) utoa::value#14 )
  (byte) utoa::max_digits#3 ← (number) 6
  (word*) utoa::digit_values#3 ← (const word*) RADIX_OCTAL_VALUES
  to:utoa::@5
utoa::@8: scope:[utoa]  from utoa::@7
  (word) utoa::value#15 ← phi( utoa::@7/(word) utoa::value#14 )
  (byte*) utoa::buffer#10 ← phi( utoa::@7/(byte*) utoa::buffer#13 )
  (byte) utoa::radix#4 ← phi( utoa::@7/(byte) utoa::radix#3 )
  (bool~) utoa::$3 ← (byte) utoa::radix#4 == (const byte) BINARY
  if((bool~) utoa::$3) goto utoa::@4
  to:utoa::@9
utoa::@4: scope:[utoa]  from utoa::@8
  (byte*) utoa::buffer#20 ← phi( utoa::@8/(byte*) utoa::buffer#10 )
  (word) utoa::value#11 ← phi( utoa::@8/(word) utoa::value#15 )
  (byte) utoa::max_digits#4 ← (number) $10
  (word*) utoa::digit_values#4 ← (const word*) RADIX_BINARY_VALUES
  to:utoa::@5
utoa::@9: scope:[utoa]  from utoa::@8
  (byte*) utoa::buffer#6 ← phi( utoa::@8/(byte*) utoa::buffer#10 )
  *((byte*) utoa::buffer#6) ← (byte) 'e'
  (byte*) utoa::buffer#0 ← ++ (byte*) utoa::buffer#6
  *((byte*) utoa::buffer#0) ← (byte) 'r'
  (byte*) utoa::buffer#1 ← ++ (byte*) utoa::buffer#0
  *((byte*) utoa::buffer#1) ← (byte) 'r'
  (byte*) utoa::buffer#2 ← ++ (byte*) utoa::buffer#1
  *((byte*) utoa::buffer#2) ← (number) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@12 utoa::@9
  return 
  to:@return
utoa::@5: scope:[utoa]  from utoa::@1 utoa::@2 utoa::@3 utoa::@4
  (byte*) utoa::buffer#15 ← phi( utoa::@1/(byte*) utoa::buffer#17 utoa::@2/(byte*) utoa::buffer#18 utoa::@3/(byte*) utoa::buffer#19 utoa::@4/(byte*) utoa::buffer#20 )
  (word) utoa::value#7 ← phi( utoa::@1/(word) utoa::value#8 utoa::@2/(word) utoa::value#9 utoa::@3/(word) utoa::value#10 utoa::@4/(word) utoa::value#11 )
  (word*) utoa::digit_values#8 ← phi( utoa::@1/(word*) utoa::digit_values#1 utoa::@2/(word*) utoa::digit_values#2 utoa::@3/(word*) utoa::digit_values#3 utoa::@4/(word*) utoa::digit_values#4 )
  (byte) utoa::max_digits#7 ← phi( utoa::@1/(byte) utoa::max_digits#1 utoa::@2/(byte) utoa::max_digits#2 utoa::@3/(byte) utoa::max_digits#3 utoa::@4/(byte) utoa::max_digits#4 )
  (byte) utoa::started#0 ← (byte) 0
  (byte) utoa::digit#0 ← (byte) 0
  to:utoa::@10
utoa::@10: scope:[utoa]  from utoa::@13 utoa::@5
  (byte*) utoa::buffer#11 ← phi( utoa::@13/(byte*) utoa::buffer#14 utoa::@5/(byte*) utoa::buffer#15 )
  (byte) utoa::started#3 ← phi( utoa::@13/(byte) utoa::started#4 utoa::@5/(byte) utoa::started#0 )
  (word) utoa::value#5 ← phi( utoa::@13/(word) utoa::value#6 utoa::@5/(word) utoa::value#7 )
  (word*) utoa::digit_values#6 ← phi( utoa::@13/(word*) utoa::digit_values#7 utoa::@5/(word*) utoa::digit_values#8 )
  (byte) utoa::digit#2 ← phi( utoa::@13/(byte) utoa::digit#1 utoa::@5/(byte) utoa::digit#0 )
  (byte) utoa::max_digits#5 ← phi( utoa::@13/(byte) utoa::max_digits#6 utoa::@5/(byte) utoa::max_digits#7 )
  (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (number) 1
  (bool~) utoa::$5 ← (byte) utoa::digit#2 < (number~) utoa::$4
  if((bool~) utoa::$5) goto utoa::@11
  to:utoa::@12
utoa::@11: scope:[utoa]  from utoa::@10
  (byte) utoa::max_digits#8 ← phi( utoa::@10/(byte) utoa::max_digits#5 )
  (byte*) utoa::buffer#12 ← phi( utoa::@10/(byte*) utoa::buffer#11 )
  (byte) utoa::started#2 ← phi( utoa::@10/(byte) utoa::started#3 )
  (word) utoa::value#2 ← phi( utoa::@10/(word) utoa::value#5 )
  (word*) utoa::digit_values#5 ← phi( utoa::@10/(word*) utoa::digit_values#6 )
  (byte) utoa::digit#3 ← phi( utoa::@10/(byte) utoa::digit#2 )
  (byte~) utoa::$10 ← (byte) utoa::digit#3 * (const byte) SIZEOF_WORD
  (word) utoa::digit_value#0 ← *((word*) utoa::digit_values#5 + (byte~) utoa::$10)
  (bool~) utoa::$6 ← (word) utoa::value#2 >= (word) utoa::digit_value#0
  (bool~) utoa::$7 ← (byte) utoa::started#2 || (bool~) utoa::$6
  (bool~) utoa::$8 ← ! (bool~) utoa::$7
  if((bool~) utoa::$8) goto utoa::@13
  to:utoa::@14
utoa::@12: scope:[utoa]  from utoa::@10
  (byte*) utoa::buffer#7 ← phi( utoa::@10/(byte*) utoa::buffer#11 )
  (word) utoa::value#3 ← phi( utoa::@10/(word) utoa::value#5 )
  (byte~) utoa::$11 ← (byte)(word) utoa::value#3
  *((byte*) utoa::buffer#7) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#7
  *((byte*) utoa::buffer#3) ← (number) 0
  to:utoa::@return
utoa::@13: scope:[utoa]  from utoa::@11 utoa::@15
  (byte*) utoa::buffer#14 ← phi( utoa::@11/(byte*) utoa::buffer#12 utoa::@15/(byte*) utoa::buffer#4 )
  (byte) utoa::started#4 ← phi( utoa::@11/(byte) utoa::started#2 utoa::@15/(byte) utoa::started#1 )
  (word) utoa::value#6 ← phi( utoa::@11/(word) utoa::value#2 utoa::@15/(word) utoa::value#0 )
  (word*) utoa::digit_values#7 ← phi( utoa::@11/(word*) utoa::digit_values#5 utoa::@15/(word*) utoa::digit_values#9 )
  (byte) utoa::max_digits#6 ← phi( utoa::@11/(byte) utoa::max_digits#8 utoa::@15/(byte) utoa::max_digits#9 )
  (byte) utoa::digit#4 ← phi( utoa::@11/(byte) utoa::digit#3 utoa::@15/(byte) utoa::digit#5 )
  (byte) utoa::digit#1 ← ++ (byte) utoa::digit#4
  to:utoa::@10
utoa::@14: scope:[utoa]  from utoa::@11
  (word*) utoa::digit_values#10 ← phi( utoa::@11/(word*) utoa::digit_values#5 )
  (byte) utoa::max_digits#10 ← phi( utoa::@11/(byte) utoa::max_digits#8 )
  (byte) utoa::digit#6 ← phi( utoa::@11/(byte) utoa::digit#3 )
  (word) utoa::digit_value#1 ← phi( utoa::@11/(word) utoa::digit_value#0 )
  (word) utoa::value#4 ← phi( utoa::@11/(word) utoa::value#2 )
  (byte*) utoa::buffer#8 ← phi( utoa::@11/(byte*) utoa::buffer#12 )
  (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#8
  (word) utoa_append::value#0 ← (word) utoa::value#4
  (word) utoa_append::sub#0 ← (word) utoa::digit_value#1
  call utoa_append 
  (word) utoa_append::return#0 ← (word) utoa_append::return#2
  to:utoa::@15
utoa::@15: scope:[utoa]  from utoa::@14
  (word*) utoa::digit_values#9 ← phi( utoa::@14/(word*) utoa::digit_values#10 )
  (byte) utoa::max_digits#9 ← phi( utoa::@14/(byte) utoa::max_digits#10 )
  (byte) utoa::digit#5 ← phi( utoa::@14/(byte) utoa::digit#6 )
  (byte*) utoa::buffer#9 ← phi( utoa::@14/(byte*) utoa::buffer#8 )
  (word) utoa_append::return#3 ← phi( utoa::@14/(word) utoa_append::return#0 )
  (word~) utoa::$9 ← (word) utoa_append::return#3
  (word) utoa::value#0 ← (word~) utoa::$9
  (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#9
  (byte) utoa::started#1 ← (number) 1
  to:utoa::@13

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@14
  (byte*) utoa_append::buffer#3 ← phi( utoa::@14/(byte*) utoa_append::buffer#0 )
  (word) utoa_append::sub#3 ← phi( utoa::@14/(word) utoa_append::sub#0 )
  (word) utoa_append::value#5 ← phi( utoa::@14/(word) utoa_append::value#0 )
  (byte) utoa_append::digit#0 ← (byte) 0
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  (byte*) utoa_append::buffer#2 ← phi( utoa_append/(byte*) utoa_append::buffer#3 utoa_append::@2/(byte*) utoa_append::buffer#4 )
  (byte) utoa_append::digit#4 ← phi( utoa_append/(byte) utoa_append::digit#0 utoa_append::@2/(byte) utoa_append::digit#1 )
  (word) utoa_append::sub#1 ← phi( utoa_append/(word) utoa_append::sub#3 utoa_append::@2/(word) utoa_append::sub#2 )
  (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#5 utoa_append::@2/(word) utoa_append::value#1 )
  (bool~) utoa_append::$0 ← (word) utoa_append::value#2 >= (word) utoa_append::sub#1
  if((bool~) utoa_append::$0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  (byte*) utoa_append::buffer#4 ← phi( utoa_append::@1/(byte*) utoa_append::buffer#2 )
  (word) utoa_append::sub#2 ← phi( utoa_append::@1/(word) utoa_append::sub#1 )
  (word) utoa_append::value#3 ← phi( utoa_append::@1/(word) utoa_append::value#2 )
  (byte) utoa_append::digit#2 ← phi( utoa_append::@1/(byte) utoa_append::digit#4 )
  (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  (word) utoa_append::value#1 ← (word) utoa_append::value#3 - (word) utoa_append::sub#2
  to:utoa_append::@1
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  (word) utoa_append::value#4 ← phi( utoa_append::@1/(word) utoa_append::value#2 )
  (byte*) utoa_append::buffer#1 ← phi( utoa_append::@1/(byte*) utoa_append::buffer#2 )
  (byte) utoa_append::digit#3 ← phi( utoa_append::@1/(byte) utoa_append::digit#4 )
  *((byte*) utoa_append::buffer#1) ← *((const byte*) DIGITS + (byte) utoa_append::digit#3)
  (word) utoa_append::return#1 ← (word) utoa_append::value#4
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  (word) utoa_append::return#4 ← phi( utoa_append::@3/(word) utoa_append::return#1 )
  (word) utoa_append::return#2 ← (word) utoa_append::return#4
  return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from print_sint_decimal::@6
  (byte*) print_char_cursor#34 ← phi( print_sint_decimal::@6/(byte*) print_char_cursor#31 )
  (byte*) print_str::str#5 ← phi( print_sint_decimal::@6/(byte*) print_str::str#1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  (byte*) print_char_cursor#28 ← phi( print_str/(byte*) print_char_cursor#34 print_str::@3/(byte*) print_char_cursor#0 )
  (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#5 print_str::@3/(byte*) print_str::str#0 )
  (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#2)
  if((bool~) print_str::$1) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#27 ← phi( print_str::@1/(byte*) print_char_cursor#28 )
  (byte*) print_str::str#3 ← phi( print_str::@1/(byte*) print_str::str#2 )
  (byte) print_char::ch#0 ← *((byte*) print_str::str#3)
  call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  (byte*) print_str::str#4 ← phi( print_str::@2/(byte*) print_str::str#3 )
  (byte*) print_char_cursor#14 ← phi( print_str::@2/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#0 ← (byte*) print_char_cursor#14
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#4
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#15 ← phi( print_str::@1/(byte*) print_char_cursor#28 )
  (byte*) print_char_cursor#1 ← (byte*) print_char_cursor#15
  return 
  to:@return

(void()) print_sint_decimal((signed word) print_sint_decimal::w)
print_sint_decimal: scope:[print_sint_decimal]  from main::@6
  (byte*) print_char_cursor#35 ← phi( main::@6/(byte*) print_char_cursor#32 )
  (signed word) print_sint_decimal::w#2 ← phi( main::@6/(signed word) print_sint_decimal::w#1 )
  (bool~) print_sint_decimal::$0 ← (signed word) print_sint_decimal::w#2 < (number) 0
  if((bool~) print_sint_decimal::$0) goto print_sint_decimal::@1
  to:print_sint_decimal::@3
print_sint_decimal::@1: scope:[print_sint_decimal]  from print_sint_decimal
  (signed word) print_sint_decimal::w#5 ← phi( print_sint_decimal/(signed word) print_sint_decimal::w#2 )
  (byte*) print_char_cursor#29 ← phi( print_sint_decimal/(byte*) print_char_cursor#35 )
  (byte) print_char::ch#1 ← (byte) '-'
  call print_char 
  to:print_sint_decimal::@4
print_sint_decimal::@4: scope:[print_sint_decimal]  from print_sint_decimal::@1
  (signed word) print_sint_decimal::w#3 ← phi( print_sint_decimal::@1/(signed word) print_sint_decimal::w#5 )
  (byte*) print_char_cursor#16 ← phi( print_sint_decimal::@1/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#16
  (signed word~) print_sint_decimal::$5 ← - (signed word) print_sint_decimal::w#3
  (signed word) print_sint_decimal::w#0 ← (signed word~) print_sint_decimal::$5
  to:print_sint_decimal::@2
print_sint_decimal::@3: scope:[print_sint_decimal]  from print_sint_decimal
  (signed word) print_sint_decimal::w#7 ← phi( print_sint_decimal/(signed word) print_sint_decimal::w#2 )
  (byte*) print_char_cursor#30 ← phi( print_sint_decimal/(byte*) print_char_cursor#35 )
  (byte) print_char::ch#2 ← (byte) ' '
  call print_char 
  to:print_sint_decimal::@5
print_sint_decimal::@5: scope:[print_sint_decimal]  from print_sint_decimal::@3
  (signed word) print_sint_decimal::w#6 ← phi( print_sint_decimal::@3/(signed word) print_sint_decimal::w#7 )
  (byte*) print_char_cursor#17 ← phi( print_sint_decimal::@3/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#17
  to:print_sint_decimal::@2
print_sint_decimal::@2: scope:[print_sint_decimal]  from print_sint_decimal::@4 print_sint_decimal::@5
  (byte*) print_char_cursor#36 ← phi( print_sint_decimal::@4/(byte*) print_char_cursor#2 print_sint_decimal::@5/(byte*) print_char_cursor#3 )
  (signed word) print_sint_decimal::w#4 ← phi( print_sint_decimal::@4/(signed word) print_sint_decimal::w#0 print_sint_decimal::@5/(signed word) print_sint_decimal::w#6 )
  (word) utoa::value#1 ← (word)(signed word) print_sint_decimal::w#4
  (byte*) utoa::buffer#5 ← (const byte*) decimal_digits
  (byte) utoa::radix#0 ← (const byte) DECIMAL
  call utoa 
  to:print_sint_decimal::@6
print_sint_decimal::@6: scope:[print_sint_decimal]  from print_sint_decimal::@2
  (byte*) print_char_cursor#31 ← phi( print_sint_decimal::@2/(byte*) print_char_cursor#36 )
  (byte*) print_str::str#1 ← (const byte*) decimal_digits
  call print_str 
  to:print_sint_decimal::@7
print_sint_decimal::@7: scope:[print_sint_decimal]  from print_sint_decimal::@6
  (byte*) print_char_cursor#18 ← phi( print_sint_decimal::@6/(byte*) print_char_cursor#1 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#18
  to:print_sint_decimal::@return
print_sint_decimal::@return: scope:[print_sint_decimal]  from print_sint_decimal::@7
  (byte*) print_char_cursor#19 ← phi( print_sint_decimal::@7/(byte*) print_char_cursor#4 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#19
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from main::@10 print_sint_decimal::@1 print_sint_decimal::@3 print_str::@2
  (byte*) print_char_cursor#20 ← phi( main::@10/(byte*) print_char_cursor#8 print_sint_decimal::@1/(byte*) print_char_cursor#29 print_sint_decimal::@3/(byte*) print_char_cursor#30 print_str::@2/(byte*) print_char_cursor#27 )
  (byte) print_char::ch#4 ← phi( main::@10/(byte) print_char::ch#3 print_sint_decimal::@1/(byte) print_char::ch#1 print_sint_decimal::@3/(byte) print_char::ch#2 print_str::@2/(byte) print_char::ch#0 )
  *((byte*) print_char_cursor#20) ← (byte) print_char::ch#4
  (byte*) print_char_cursor#6 ← ++ (byte*) print_char_cursor#20
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#21 ← phi( print_char/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#21
  return 
  to:@return

(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
mul16u: scope:[mul16u]  from mul16s
  (word) mul16u::a#5 ← phi( mul16s/(word) mul16u::a#1 )
  (word) mul16u::b#1 ← phi( mul16s/(word) mul16u::b#0 )
  (dword) mul16u::res#0 ← (dword) 0
  (dword) mul16u::mb#0 ← (dword)(word) mul16u::b#1
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@4
  (dword) mul16u::mb#5 ← phi( mul16u/(dword) mul16u::mb#0 mul16u::@4/(dword) mul16u::mb#1 )
  (dword) mul16u::res#4 ← phi( mul16u/(dword) mul16u::res#0 mul16u::@4/(dword) mul16u::res#6 )
  (word) mul16u::a#2 ← phi( mul16u/(word) mul16u::a#5 mul16u::@4/(word) mul16u::a#0 )
  (bool~) mul16u::$0 ← (word) mul16u::a#2 != (number) 0
  if((bool~) mul16u::$0) goto mul16u::@2
  to:mul16u::@3
mul16u::@2: scope:[mul16u]  from mul16u::@1
  (dword) mul16u::res#5 ← phi( mul16u::@1/(dword) mul16u::res#4 )
  (dword) mul16u::mb#4 ← phi( mul16u::@1/(dword) mul16u::mb#5 )
  (word) mul16u::a#3 ← phi( mul16u::@1/(word) mul16u::a#2 )
  (number~) mul16u::$1 ← (word) mul16u::a#3 & (number) 1
  (bool~) mul16u::$2 ← (number~) mul16u::$1 != (number) 0
  (bool~) mul16u::$3 ← ! (bool~) mul16u::$2
  if((bool~) mul16u::$3) goto mul16u::@4
  to:mul16u::@5
mul16u::@3: scope:[mul16u]  from mul16u::@1
  (dword) mul16u::res#2 ← phi( mul16u::@1/(dword) mul16u::res#4 )
  (dword) mul16u::return#0 ← (dword) mul16u::res#2
  to:mul16u::@return
mul16u::@4: scope:[mul16u]  from mul16u::@2 mul16u::@5
  (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#5 mul16u::@5/(dword) mul16u::res#1 )
  (dword) mul16u::mb#2 ← phi( mul16u::@2/(dword) mul16u::mb#4 mul16u::@5/(dword) mul16u::mb#3 )
  (word) mul16u::a#4 ← phi( mul16u::@2/(word) mul16u::a#3 mul16u::@5/(word) mul16u::a#6 )
  (word~) mul16u::$5 ← (word) mul16u::a#4 >> (number) 1
  (word) mul16u::a#0 ← (word~) mul16u::$5
  (dword~) mul16u::$6 ← (dword) mul16u::mb#2 << (number) 1
  (dword) mul16u::mb#1 ← (dword~) mul16u::$6
  to:mul16u::@1
mul16u::@5: scope:[mul16u]  from mul16u::@2
  (word) mul16u::a#6 ← phi( mul16u::@2/(word) mul16u::a#3 )
  (dword) mul16u::mb#3 ← phi( mul16u::@2/(dword) mul16u::mb#4 )
  (dword) mul16u::res#3 ← phi( mul16u::@2/(dword) mul16u::res#5 )
  (dword~) mul16u::$4 ← (dword) mul16u::res#3 + (dword) mul16u::mb#3
  (dword) mul16u::res#1 ← (dword~) mul16u::$4
  to:mul16u::@4
mul16u::@return: scope:[mul16u]  from mul16u::@3
  (dword) mul16u::return#3 ← phi( mul16u::@3/(dword) mul16u::return#0 )
  (dword) mul16u::return#1 ← (dword) mul16u::return#3
  return 
  to:@return

(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
mul16s: scope:[mul16s]  from main::@1
  (signed word) mul16s::b#1 ← phi( main::@1/(signed word) mul16s::b#0 )
  (signed word) mul16s::a#1 ← phi( main::@1/(signed word) mul16s::a#0 )
  (word) mul16u::a#1 ← (word)(signed word) mul16s::a#1
  (word) mul16u::b#0 ← (word)(signed word) mul16s::b#1
  call mul16u 
  (dword) mul16u::return#2 ← (dword) mul16u::return#1
  to:mul16s::@5
mul16s::@5: scope:[mul16s]  from mul16s
  (signed word) mul16s::b#4 ← phi( mul16s/(signed word) mul16s::b#1 )
  (signed word) mul16s::a#2 ← phi( mul16s/(signed word) mul16s::a#1 )
  (dword) mul16u::return#4 ← phi( mul16s/(dword) mul16u::return#2 )
  (dword~) mul16s::$0 ← (dword) mul16u::return#4
  (dword) mul16s::m#0 ← (dword~) mul16s::$0
  (bool~) mul16s::$1 ← (signed word) mul16s::a#2 < (number) 0
  (bool~) mul16s::$2 ← ! (bool~) mul16s::$1
  if((bool~) mul16s::$2) goto mul16s::@1
  to:mul16s::@3
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@5
  (signed word) mul16s::a#4 ← phi( mul16s::@3/(signed word) mul16s::a#5 mul16s::@5/(signed word) mul16s::a#2 )
  (dword) mul16s::m#6 ← phi( mul16s::@3/(dword) mul16s::m#1 mul16s::@5/(dword) mul16s::m#0 )
  (signed word) mul16s::b#2 ← phi( mul16s::@3/(signed word) mul16s::b#3 mul16s::@5/(signed word) mul16s::b#4 )
  (bool~) mul16s::$3 ← (signed word) mul16s::b#2 < (number) 0
  (bool~) mul16s::$4 ← ! (bool~) mul16s::$3
  if((bool~) mul16s::$4) goto mul16s::@2
  to:mul16s::@4
mul16s::@3: scope:[mul16s]  from mul16s::@5
  (signed word) mul16s::a#5 ← phi( mul16s::@5/(signed word) mul16s::a#2 )
  (signed word) mul16s::b#3 ← phi( mul16s::@5/(signed word) mul16s::b#4 )
  (dword) mul16s::m#3 ← phi( mul16s::@5/(dword) mul16s::m#0 )
  (word~) mul16s::$6 ← > (dword) mul16s::m#3
  (word~) mul16s::$13 ← (word)(signed word) mul16s::b#3
  (word~) mul16s::$7 ← (word~) mul16s::$6 - (word~) mul16s::$13
  (word~) mul16s::$11 ← (word~) mul16s::$7
  (dword) mul16s::m#1 ← (dword) mul16s::m#3 hi= (word~) mul16s::$11
  to:mul16s::@1
mul16s::@2: scope:[mul16s]  from mul16s::@1 mul16s::@4
  (dword) mul16s::m#4 ← phi( mul16s::@1/(dword) mul16s::m#6 mul16s::@4/(dword) mul16s::m#2 )
  (signed dword) mul16s::return#0 ← (signed dword)(dword) mul16s::m#4
  to:mul16s::@return
mul16s::@4: scope:[mul16s]  from mul16s::@1
  (signed word) mul16s::a#3 ← phi( mul16s::@1/(signed word) mul16s::a#4 )
  (dword) mul16s::m#5 ← phi( mul16s::@1/(dword) mul16s::m#6 )
  (word~) mul16s::$9 ← > (dword) mul16s::m#5
  (word~) mul16s::$14 ← (word)(signed word) mul16s::a#3
  (word~) mul16s::$10 ← (word~) mul16s::$9 - (word~) mul16s::$14
  (word~) mul16s::$12 ← (word~) mul16s::$10
  (dword) mul16s::m#2 ← (dword) mul16s::m#5 hi= (word~) mul16s::$12
  to:mul16s::@2
mul16s::@return: scope:[mul16s]  from mul16s::@2
  (signed dword) mul16s::return#3 ← phi( mul16s::@2/(signed dword) mul16s::return#0 )
  (signed dword) mul16s::return#1 ← (signed dword) mul16s::return#3
  return 
  to:@return

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from divr16s::@4
  (word) divr16u::divisor#5 ← phi( divr16s::@4/(word) divr16u::divisor#0 )
  (word) divr16u::dividend#4 ← phi( divr16s::@4/(word) divr16u::dividend#1 )
  (word) divr16u::rem#9 ← phi( divr16s::@4/(word) divr16u::rem#3 )
  (word) divr16u::quotient#0 ← (word) 0
  (byte) divr16u::i#0 ← (byte) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (byte) divr16u::i#5 ← phi( divr16u/(byte) divr16u::i#0 divr16u::@3/(byte) divr16u::i#1 )
  (word) divr16u::divisor#3 ← phi( divr16u/(word) divr16u::divisor#5 divr16u::@3/(word) divr16u::divisor#6 )
  (word) divr16u::quotient#6 ← phi( divr16u/(word) divr16u::quotient#0 divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::dividend#2 ← phi( divr16u/(word) divr16u::dividend#4 divr16u::@3/(word) divr16u::dividend#5 )
  (word) divr16u::rem#4 ← phi( divr16u/(word) divr16u::rem#9 divr16u::@3/(word) divr16u::rem#10 )
  (word~) divr16u::$0 ← (word) divr16u::rem#4 << (number) 1
  (word) divr16u::rem#0 ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend#2
  (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
  (bool~) divr16u::$3 ← (number~) divr16u::$2 != (number) 0
  (bool~) divr16u::$4 ← ! (bool~) divr16u::$3
  if((bool~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (byte) divr16u::i#3 ← phi( divr16u::@1/(byte) divr16u::i#5 divr16u::@4/(byte) divr16u::i#6 )
  (word) divr16u::divisor#1 ← phi( divr16u::@1/(word) divr16u::divisor#3 divr16u::@4/(word) divr16u::divisor#4 )
  (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  (word) divr16u::quotient#3 ← phi( divr16u::@1/(word) divr16u::quotient#6 divr16u::@4/(word) divr16u::quotient#7 )
  (word) divr16u::dividend#3 ← phi( divr16u::@1/(word) divr16u::dividend#2 divr16u::@4/(word) divr16u::dividend#6 )
  (word~) divr16u::$6 ← (word) divr16u::dividend#3 << (number) 1
  (word) divr16u::dividend#0 ← (word~) divr16u::$6
  (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
  (word) divr16u::quotient#1 ← (word~) divr16u::$7
  (bool~) divr16u::$8 ← (word) divr16u::rem#5 >= (word) divr16u::divisor#1
  (bool~) divr16u::$9 ← ! (bool~) divr16u::$8
  if((bool~) divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (byte) divr16u::i#6 ← phi( divr16u::@1/(byte) divr16u::i#5 )
  (word) divr16u::divisor#4 ← phi( divr16u::@1/(word) divr16u::divisor#3 )
  (word) divr16u::quotient#7 ← phi( divr16u::@1/(word) divr16u::quotient#6 )
  (word) divr16u::dividend#6 ← phi( divr16u::@1/(word) divr16u::dividend#2 )
  (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 )
  (number~) divr16u::$5 ← (word) divr16u::rem#6 | (number) 1
  (word) divr16u::rem#1 ← (number~) divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (word) divr16u::divisor#6 ← phi( divr16u::@2/(word) divr16u::divisor#1 divr16u::@5/(word) divr16u::divisor#2 )
  (word) divr16u::quotient#8 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  (word) divr16u::dividend#5 ← phi( divr16u::@2/(word) divr16u::dividend#0 divr16u::@5/(word) divr16u::dividend#7 )
  (word) divr16u::rem#10 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 )
  (byte) divr16u::i#2 ← phi( divr16u::@2/(byte) divr16u::i#3 divr16u::@5/(byte) divr16u::i#4 )
  (byte) divr16u::i#1 ← (byte) divr16u::i#2 + rangenext(0,$f)
  (bool~) divr16u::$11 ← (byte) divr16u::i#1 != rangelast(0,$f)
  if((bool~) divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::dividend#7 ← phi( divr16u::@2/(word) divr16u::dividend#0 )
  (byte) divr16u::i#4 ← phi( divr16u::@2/(byte) divr16u::i#3 )
  (word) divr16u::divisor#2 ← phi( divr16u::@2/(word) divr16u::divisor#1 )
  (word) divr16u::rem#7 ← phi( divr16u::@2/(word) divr16u::rem#5 )
  (word) divr16u::quotient#4 ← phi( divr16u::@2/(word) divr16u::quotient#1 )
  (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#4
  (word~) divr16u::$10 ← (word) divr16u::rem#7 - (word) divr16u::divisor#2
  (word) divr16u::rem#2 ← (word~) divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) divr16u::quotient#5 ← phi( divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::rem#8 ← phi( divr16u::@3/(word) divr16u::rem#10 )
  (word) rem16u#0 ← (word) divr16u::rem#8
  (word) divr16u::return#0 ← (word) divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  (word) rem16u#11 ← phi( divr16u::@6/(word) rem16u#0 )
  (word) divr16u::return#3 ← phi( divr16u::@6/(word) divr16u::return#0 )
  (word) divr16u::return#1 ← (word) divr16u::return#3
  (word) rem16u#1 ← (word) rem16u#11
  return 
  to:@return

(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
divr16s: scope:[divr16s]  from div16s
  (word) rem16u#40 ← phi( div16s/(word) rem16u#23 )
  (signed word) divr16s::divisor#6 ← phi( div16s/(signed word) divr16s::divisor#0 )
  (signed word) divr16s::rem#1 ← phi( div16s/(signed word) divr16s::rem#0 )
  (signed word) divr16s::dividend#1 ← phi( div16s/(signed word) divr16s::dividend#0 )
  (byte) divr16s::neg#0 ← (byte) 0
  (word) divr16s::dividendu#0 ← (word) 0
  (word) divr16s::remu#0 ← (word) 0
  (bool~) divr16s::$0 ← (signed word) divr16s::dividend#1 < (number) 0
  (bool~) divr16s::$1 ← (signed word) divr16s::rem#1 < (number) 0
  (bool~) divr16s::$2 ← (bool~) divr16s::$0 || (bool~) divr16s::$1
  if((bool~) divr16s::$2) goto divr16s::@1
  to:divr16s::@6
divr16s::@1: scope:[divr16s]  from divr16s
  (word) rem16u#37 ← phi( divr16s/(word) rem16u#40 )
  (signed word) divr16s::divisor#4 ← phi( divr16s/(signed word) divr16s::divisor#6 )
  (signed word) divr16s::rem#2 ← phi( divr16s/(signed word) divr16s::rem#1 )
  (signed word) divr16s::dividend#2 ← phi( divr16s/(signed word) divr16s::dividend#1 )
  (signed word~) divr16s::$6 ← - (signed word) divr16s::dividend#2
  (word) divr16s::dividendu#1 ← (word)(signed word~) divr16s::$6
  (signed word~) divr16s::$7 ← - (signed word) divr16s::rem#2
  (word) divr16s::remu#1 ← (word)(signed word~) divr16s::$7
  (byte) divr16s::neg#1 ← (number) 1
  to:divr16s::@2
divr16s::@6: scope:[divr16s]  from divr16s
  (word) rem16u#38 ← phi( divr16s/(word) rem16u#40 )
  (byte) divr16s::neg#7 ← phi( divr16s/(byte) divr16s::neg#0 )
  (signed word) divr16s::divisor#5 ← phi( divr16s/(signed word) divr16s::divisor#6 )
  (signed word) divr16s::rem#3 ← phi( divr16s/(signed word) divr16s::rem#1 )
  (signed word) divr16s::dividend#3 ← phi( divr16s/(signed word) divr16s::dividend#1 )
  (word) divr16s::dividendu#2 ← (word)(signed word) divr16s::dividend#3
  (word) divr16s::remu#2 ← (word)(signed word) divr16s::rem#3
  to:divr16s::@2
divr16s::@2: scope:[divr16s]  from divr16s::@1 divr16s::@6
  (word) rem16u#32 ← phi( divr16s::@1/(word) rem16u#37 divr16s::@6/(word) rem16u#38 )
  (word) divr16s::remu#6 ← phi( divr16s::@1/(word) divr16s::remu#1 divr16s::@6/(word) divr16s::remu#2 )
  (word) divr16s::dividendu#6 ← phi( divr16s::@1/(word) divr16s::dividendu#1 divr16s::@6/(word) divr16s::dividendu#2 )
  (byte) divr16s::neg#5 ← phi( divr16s::@1/(byte) divr16s::neg#1 divr16s::@6/(byte) divr16s::neg#7 )
  (signed word) divr16s::divisor#1 ← phi( divr16s::@1/(signed word) divr16s::divisor#4 divr16s::@6/(signed word) divr16s::divisor#5 )
  (word) divr16s::divisoru#0 ← (word) 0
  (bool~) divr16s::$3 ← (signed word) divr16s::divisor#1 < (number) 0
  if((bool~) divr16s::$3) goto divr16s::@3
  to:divr16s::@7
divr16s::@3: scope:[divr16s]  from divr16s::@2
  (word) rem16u#27 ← phi( divr16s::@2/(word) rem16u#32 )
  (word) divr16s::remu#4 ← phi( divr16s::@2/(word) divr16s::remu#6 )
  (word) divr16s::dividendu#4 ← phi( divr16s::@2/(word) divr16s::dividendu#6 )
  (byte) divr16s::neg#3 ← phi( divr16s::@2/(byte) divr16s::neg#5 )
  (signed word) divr16s::divisor#2 ← phi( divr16s::@2/(signed word) divr16s::divisor#1 )
  (signed word~) divr16s::$8 ← - (signed word) divr16s::divisor#2
  (word) divr16s::divisoru#1 ← (word)(signed word~) divr16s::$8
  (number~) divr16s::$9 ← (byte) divr16s::neg#3 ^ (number) 1
  (byte) divr16s::neg#2 ← (number~) divr16s::$9
  to:divr16s::@4
divr16s::@7: scope:[divr16s]  from divr16s::@2
  (byte) divr16s::neg#8 ← phi( divr16s::@2/(byte) divr16s::neg#5 )
  (word) rem16u#28 ← phi( divr16s::@2/(word) rem16u#32 )
  (word) divr16s::remu#5 ← phi( divr16s::@2/(word) divr16s::remu#6 )
  (word) divr16s::dividendu#5 ← phi( divr16s::@2/(word) divr16s::dividendu#6 )
  (signed word) divr16s::divisor#3 ← phi( divr16s::@2/(signed word) divr16s::divisor#1 )
  (word) divr16s::divisoru#2 ← (word)(signed word) divr16s::divisor#3
  to:divr16s::@4
divr16s::@4: scope:[divr16s]  from divr16s::@3 divr16s::@7
  (byte) divr16s::neg#6 ← phi( divr16s::@3/(byte) divr16s::neg#2 divr16s::@7/(byte) divr16s::neg#8 )
  (word) rem16u#22 ← phi( divr16s::@3/(word) rem16u#27 divr16s::@7/(word) rem16u#28 )
  (word) divr16s::remu#3 ← phi( divr16s::@3/(word) divr16s::remu#4 divr16s::@7/(word) divr16s::remu#5 )
  (word) divr16s::divisoru#3 ← phi( divr16s::@3/(word) divr16s::divisoru#1 divr16s::@7/(word) divr16s::divisoru#2 )
  (word) divr16s::dividendu#3 ← phi( divr16s::@3/(word) divr16s::dividendu#4 divr16s::@7/(word) divr16s::dividendu#5 )
  (word) divr16u::dividend#1 ← (word) divr16s::dividendu#3
  (word) divr16u::divisor#0 ← (word) divr16s::divisoru#3
  (word) divr16u::rem#3 ← (word) divr16s::remu#3
  call divr16u 
  (word) divr16u::return#2 ← (word) divr16u::return#1
  to:divr16s::@9
divr16s::@9: scope:[divr16s]  from divr16s::@4
  (byte) divr16s::neg#4 ← phi( divr16s::@4/(byte) divr16s::neg#6 )
  (word) rem16u#12 ← phi( divr16s::@4/(word) rem16u#1 )
  (word) divr16u::return#4 ← phi( divr16s::@4/(word) divr16u::return#2 )
  (word~) divr16s::$4 ← (word) divr16u::return#4
  (word) rem16u#2 ← (word) rem16u#12
  (word) divr16s::resultu#0 ← (word~) divr16s::$4
  (bool~) divr16s::$5 ← (byte) divr16s::neg#4 == (number) 0
  if((bool~) divr16s::$5) goto divr16s::@5
  to:divr16s::@8
divr16s::@5: scope:[divr16s]  from divr16s::@9
  (word) divr16s::resultu#1 ← phi( divr16s::@9/(word) divr16s::resultu#0 )
  (word) rem16u#13 ← phi( divr16s::@9/(word) rem16u#2 )
  (signed word) rem16s#0 ← (signed word)(word) rem16u#13
  (signed word) divr16s::return#0 ← (signed word)(word) divr16s::resultu#1
  to:divr16s::@return
divr16s::@8: scope:[divr16s]  from divr16s::@9
  (word) divr16s::resultu#2 ← phi( divr16s::@9/(word) divr16s::resultu#0 )
  (word) rem16u#14 ← phi( divr16s::@9/(word) rem16u#2 )
  (signed word~) divr16s::$10 ← - (signed word)(word) rem16u#14
  (signed word) rem16s#1 ← (signed word~) divr16s::$10
  (signed word~) divr16s::$11 ← - (signed word)(word) divr16s::resultu#2
  (signed word) divr16s::return#1 ← (signed word~) divr16s::$11
  to:divr16s::@return
divr16s::@return: scope:[divr16s]  from divr16s::@5 divr16s::@8
  (signed word) rem16s#10 ← phi( divr16s::@5/(signed word) rem16s#0 divr16s::@8/(signed word) rem16s#1 )
  (word) rem16u#15 ← phi( divr16s::@5/(word) rem16u#13 divr16s::@8/(word) rem16u#14 )
  (signed word) divr16s::return#4 ← phi( divr16s::@5/(signed word) divr16s::return#0 divr16s::@8/(signed word) divr16s::return#1 )
  (signed word) divr16s::return#2 ← (signed word) divr16s::return#4
  (word) rem16u#3 ← (word) rem16u#15
  (signed word) rem16s#2 ← (signed word) rem16s#10
  return 
  to:@return

(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
div16s: scope:[div16s]  from main::@3
  (signed word) rem16s#17 ← phi( main::@3/(signed word) rem16s#18 )
  (word) rem16u#23 ← phi( main::@3/(word) rem16u#24 )
  (signed word) div16s::divisor#1 ← phi( main::@3/(signed word) div16s::divisor#0 )
  (signed word) div16s::dividend#1 ← phi( main::@3/(signed word) div16s::dividend#0 )
  (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#1
  (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#1
  (signed word) divr16s::rem#0 ← (number) 0
  call divr16s 
  (signed word) divr16s::return#3 ← (signed word) divr16s::return#2
  to:div16s::@1
div16s::@1: scope:[div16s]  from div16s
  (signed word) rem16s#11 ← phi( div16s/(signed word) rem16s#2 )
  (word) rem16u#16 ← phi( div16s/(word) rem16u#3 )
  (signed word) divr16s::return#5 ← phi( div16s/(signed word) divr16s::return#3 )
  (signed word~) div16s::$0 ← (signed word) divr16s::return#5
  (word) rem16u#4 ← (word) rem16u#16
  (signed word) rem16s#3 ← (signed word) rem16s#11
  (signed word) div16s::return#0 ← (signed word~) div16s::$0
  to:div16s::@return
div16s::@return: scope:[div16s]  from div16s::@1
  (signed word) rem16s#12 ← phi( div16s::@1/(signed word) rem16s#3 )
  (word) rem16u#17 ← phi( div16s::@1/(word) rem16u#4 )
  (signed word) div16s::return#3 ← phi( div16s::@1/(signed word) div16s::return#0 )
  (signed word) div16s::return#1 ← (signed word) div16s::return#3
  (word) rem16u#5 ← (word) rem16u#17
  (signed word) rem16s#4 ← (signed word) rem16s#12
  return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  (byte*) print_char_cursor#45 ← phi( _start::@1/(byte*) print_char_cursor#33 )
  (signed word) rem16s#29 ← phi( _start::@1/(signed word) rem16s#20 )
  (word) rem16u#41 ← phi( _start::@1/(word) rem16u#26 )
  (number~) main::$10 ← (number) 1 * (const byte) SIZEOF_SIGNED_WORD
  *((const signed word*) primenum + (number~) main::$10) ← (number) 2
  (number~) main::$11 ← (number) 2 * (const byte) SIZEOF_SIGNED_WORD
  *((const signed word*) primenum + (number~) main::$11) ← (number) 3
  (signed word) testnum#0 ← (number) 3
  (signed word) lasttest#0 ← (number) 2
  (signed word) lastprime#0 ← (number) 2
  to:main::@1
main::@1: scope:[main]  from main main::@11
  (byte*) print_char_cursor#44 ← phi( main/(byte*) print_char_cursor#45 main::@11/(byte*) print_char_cursor#9 )
  (signed word) lastprime#20 ← phi( main/(signed word) lastprime#0 main::@11/(signed word) lastprime#7 )
  (signed word) rem16s#28 ← phi( main/(signed word) rem16s#29 main::@11/(signed word) rem16s#19 )
  (word) rem16u#39 ← phi( main/(word) rem16u#41 main::@11/(word) rem16u#25 )
  (signed word) testnum#15 ← phi( main/(signed word) testnum#0 main::@11/(signed word) testnum#19 )
  (signed word) lasttest#6 ← phi( main/(signed word) lasttest#0 main::@11/(signed word) lasttest#12 )
  (signed word~) main::$12 ← (signed word) lasttest#6 * (const byte) SIZEOF_SIGNED_WORD
  (signed word) main::p#0 ← *((const signed word*) primenum + (signed word~) main::$12)
  (signed word) mul16s::a#0 ← (signed word) main::p#0
  (signed word) mul16s::b#0 ← (signed word) main::p#0
  call mul16s 
  (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#1
  to:main::@8
main::@8: scope:[main]  from main::@1
  (byte*) print_char_cursor#43 ← phi( main::@1/(byte*) print_char_cursor#44 )
  (signed word) lastprime#19 ← phi( main::@1/(signed word) lastprime#20 )
  (signed word) rem16s#25 ← phi( main::@1/(signed word) rem16s#28 )
  (word) rem16u#34 ← phi( main::@1/(word) rem16u#39 )
  (signed word) lasttest#13 ← phi( main::@1/(signed word) lasttest#6 )
  (signed word) testnum#7 ← phi( main::@1/(signed word) testnum#15 )
  (signed dword) mul16s::return#4 ← phi( main::@1/(signed dword) mul16s::return#2 )
  (signed dword~) main::$0 ← (signed dword) mul16s::return#4
  (signed word~) main::$15 ← (signed word)(signed dword~) main::$0
  (bool~) main::$1 ← (signed word) testnum#7 > (signed word~) main::$15
  (bool~) main::$2 ← ! (bool~) main::$1
  if((bool~) main::$2) goto main::@2
  to:main::@7
main::@2: scope:[main]  from main::@7 main::@8
  (byte*) print_char_cursor#41 ← phi( main::@7/(byte*) print_char_cursor#42 main::@8/(byte*) print_char_cursor#43 )
  (signed word) lastprime#17 ← phi( main::@7/(signed word) lastprime#18 main::@8/(signed word) lastprime#19 )
  (signed word) lasttest#19 ← phi( main::@7/(signed word) lasttest#1 main::@8/(signed word) lasttest#13 )
  (signed word) rem16s#21 ← phi( main::@7/(signed word) rem16s#24 main::@8/(signed word) rem16s#25 )
  (word) rem16u#29 ← phi( main::@7/(word) rem16u#33 main::@8/(word) rem16u#34 )
  (signed word) testnum#8 ← phi( main::@7/(signed word) testnum#16 main::@8/(signed word) testnum#7 )
  (signed word) testnum#1 ← (signed word) testnum#8 + (number) 2
  (signed word) primeptr#0 ← (number) 2
  to:main::@3
main::@7: scope:[main]  from main::@8
  (byte*) print_char_cursor#42 ← phi( main::@8/(byte*) print_char_cursor#43 )
  (signed word) lastprime#18 ← phi( main::@8/(signed word) lastprime#19 )
  (signed word) rem16s#24 ← phi( main::@8/(signed word) rem16s#25 )
  (word) rem16u#33 ← phi( main::@8/(word) rem16u#34 )
  (signed word) testnum#16 ← phi( main::@8/(signed word) testnum#7 )
  (signed word) lasttest#7 ← phi( main::@8/(signed word) lasttest#13 )
  (signed word) lasttest#1 ← ++ (signed word) lasttest#7
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@4
  (byte*) print_char_cursor#40 ← phi( main::@2/(byte*) print_char_cursor#41 main::@4/(byte*) print_char_cursor#37 )
  (signed word) lastprime#16 ← phi( main::@2/(signed word) lastprime#17 main::@4/(signed word) lastprime#11 )
  (signed word) lasttest#17 ← phi( main::@2/(signed word) lasttest#19 main::@4/(signed word) lasttest#8 )
  (signed word) rem16s#18 ← phi( main::@2/(signed word) rem16s#21 main::@4/(signed word) rem16s#22 )
  (word) rem16u#24 ← phi( main::@2/(word) rem16u#29 main::@4/(word) rem16u#30 )
  (signed word) testnum#9 ← phi( main::@2/(signed word) testnum#1 main::@4/(signed word) testnum#17 )
  (signed word) primeptr#7 ← phi( main::@2/(signed word) primeptr#0 main::@4/(signed word) primeptr#9 )
  (signed word~) main::$13 ← (signed word) primeptr#7 * (const byte) SIZEOF_SIGNED_WORD
  (signed word) div16s::dividend#0 ← (signed word) testnum#9
  (signed word) div16s::divisor#0 ← *((const signed word*) primenum + (signed word~) main::$13)
  call div16s 
  (signed word) div16s::return#2 ← (signed word) div16s::return#1
  to:main::@9
main::@9: scope:[main]  from main::@3
  (byte*) print_char_cursor#39 ← phi( main::@3/(byte*) print_char_cursor#40 )
  (signed word) lastprime#15 ← phi( main::@3/(signed word) lastprime#16 )
  (signed word) testnum#18 ← phi( main::@3/(signed word) testnum#9 )
  (signed word) lasttest#15 ← phi( main::@3/(signed word) lasttest#17 )
  (signed word) primeptr#8 ← phi( main::@3/(signed word) primeptr#7 )
  (signed word) rem16s#13 ← phi( main::@3/(signed word) rem16s#4 )
  (word) rem16u#18 ← phi( main::@3/(word) rem16u#5 )
  (word) rem16u#6 ← (word) rem16u#18
  (signed word) rem16s#5 ← (signed word) rem16s#13
  (signed word) primeptr#1 ← ++ (signed word) primeptr#8
  (bool~) main::$4 ← (signed word) rem16s#5 == (number) 0
  (bool~) main::$5 ← ! (bool~) main::$4
  if((bool~) main::$5) goto main::@4
  to:main::@5
main::@4: scope:[main]  from main::@5 main::@9
  (byte*) print_char_cursor#37 ← phi( main::@5/(byte*) print_char_cursor#38 main::@9/(byte*) print_char_cursor#39 )
  (signed word) rem16s#22 ← phi( main::@5/(signed word) rem16s#26 main::@9/(signed word) rem16s#5 )
  (word) rem16u#30 ← phi( main::@5/(word) rem16u#35 main::@9/(word) rem16u#6 )
  (signed word) lastprime#11 ← phi( main::@5/(signed word) lastprime#14 main::@9/(signed word) lastprime#15 )
  (signed word) testnum#17 ← phi( main::@5/(signed word) testnum#2 main::@9/(signed word) testnum#18 )
  (signed word) lasttest#8 ← phi( main::@5/(signed word) lasttest#14 main::@9/(signed word) lasttest#15 )
  (signed word) primeptr#9 ← phi( main::@5/(signed word) primeptr#2 main::@9/(signed word) primeptr#1 )
  (bool~) main::$6 ← (signed word) primeptr#9 <= (signed word) lasttest#8
  if((bool~) main::$6) goto main::@3
  to:main::@6
main::@5: scope:[main]  from main::@9
  (byte*) print_char_cursor#38 ← phi( main::@9/(byte*) print_char_cursor#39 )
  (signed word) rem16s#26 ← phi( main::@9/(signed word) rem16s#5 )
  (word) rem16u#35 ← phi( main::@9/(word) rem16u#6 )
  (signed word) lastprime#14 ← phi( main::@9/(signed word) lastprime#15 )
  (signed word) lasttest#14 ← phi( main::@9/(signed word) lasttest#15 )
  (signed word) testnum#10 ← phi( main::@9/(signed word) testnum#18 )
  (signed word) testnum#2 ← (signed word) testnum#10 + (number) 2
  (signed word) primeptr#2 ← (number) 2
  to:main::@4
main::@6: scope:[main]  from main::@4
  (signed word) rem16s#27 ← phi( main::@4/(signed word) rem16s#22 )
  (word) rem16u#36 ← phi( main::@4/(word) rem16u#30 )
  (signed word) primeptr#16 ← phi( main::@4/(signed word) primeptr#9 )
  (signed word) lasttest#20 ← phi( main::@4/(signed word) lasttest#8 )
  (byte*) print_char_cursor#32 ← phi( main::@4/(byte*) print_char_cursor#37 )
  (signed word) testnum#11 ← phi( main::@4/(signed word) testnum#17 )
  (signed word) lastprime#6 ← phi( main::@4/(signed word) lastprime#11 )
  (signed word) lastprime#1 ← ++ (signed word) lastprime#6
  (signed word~) main::$14 ← (signed word) lastprime#1 * (const byte) SIZEOF_SIGNED_WORD
  *((const signed word*) primenum + (signed word~) main::$14) ← (signed word) testnum#11
  (signed word) print_sint_decimal::w#1 ← (signed word) testnum#11
  call print_sint_decimal 
  to:main::@10
main::@10: scope:[main]  from main::@6
  (signed word) rem16s#23 ← phi( main::@6/(signed word) rem16s#27 )
  (word) rem16u#31 ← phi( main::@6/(word) rem16u#36 )
  (signed word) primeptr#15 ← phi( main::@6/(signed word) primeptr#16 )
  (signed word) testnum#21 ← phi( main::@6/(signed word) testnum#11 )
  (signed word) lasttest#18 ← phi( main::@6/(signed word) lasttest#20 )
  (signed word) lastprime#12 ← phi( main::@6/(signed word) lastprime#1 )
  (byte*) print_char_cursor#22 ← phi( main::@6/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#22
  (byte) print_char::ch#3 ← (byte) ' '
  call print_char 
  to:main::@11
main::@11: scope:[main]  from main::@10
  (signed word) rem16s#19 ← phi( main::@10/(signed word) rem16s#23 )
  (word) rem16u#25 ← phi( main::@10/(word) rem16u#31 )
  (signed word) primeptr#13 ← phi( main::@10/(signed word) primeptr#15 )
  (signed word) testnum#19 ← phi( main::@10/(signed word) testnum#21 )
  (signed word) lasttest#12 ← phi( main::@10/(signed word) lasttest#18 )
  (signed word) lastprime#7 ← phi( main::@10/(signed word) lastprime#12 )
  (byte*) print_char_cursor#23 ← phi( main::@10/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#23
  (bool~) main::$9 ← (signed word) lastprime#7 < (number) $3e8
  if((bool~) main::$9) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  (byte*) print_char_cursor#24 ← phi( main::@11/(byte*) print_char_cursor#9 )
  (signed word) rem16s#14 ← phi( main::@11/(signed word) rem16s#19 )
  (word) rem16u#19 ← phi( main::@11/(word) rem16u#25 )
  (signed word) primeptr#10 ← phi( main::@11/(signed word) primeptr#13 )
  (signed word) lastprime#8 ← phi( main::@11/(signed word) lastprime#7 )
  (signed word) lasttest#9 ← phi( main::@11/(signed word) lasttest#12 )
  (signed word) testnum#12 ← phi( main::@11/(signed word) testnum#19 )
  (signed word) testnum#3 ← (signed word) testnum#12
  (signed word) lasttest#2 ← (signed word) lasttest#9
  (signed word) lastprime#2 ← (signed word) lastprime#8
  (signed word) primeptr#3 ← (signed word) primeptr#10
  (word) rem16u#7 ← (word) rem16u#19
  (signed word) rem16s#6 ← (signed word) rem16s#14
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#24
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (byte*) print_screen#0 ← (byte*)(number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#11 ← (byte*) print_line_cursor#0
  (word) rem16u#8 ← (word) 0
  (signed word) rem16s#7 ← (signed word) 0
  (signed word) testnum#4 ← (signed word) 0
  (signed word) primeptr#4 ← (signed word) 0
  (signed word) lasttest#3 ← (signed word) 0
  (signed word) lastprime#3 ← (signed word) 0
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  (byte*) print_line_cursor#4 ← phi( _start::_init1/(byte*) print_line_cursor#0 )
  (byte*) print_screen#4 ← phi( _start::_init1/(byte*) print_screen#0 )
  (byte*) print_char_cursor#33 ← phi( _start::_init1/(byte*) print_char_cursor#11 )
  (signed word) rem16s#20 ← phi( _start::_init1/(signed word) rem16s#7 )
  (word) rem16u#26 ← phi( _start::_init1/(word) rem16u#8 )
  (signed word) primeptr#14 ← phi( _start::_init1/(signed word) primeptr#4 )
  (signed word) lastprime#13 ← phi( _start::_init1/(signed word) lastprime#3 )
  (signed word) lasttest#16 ← phi( _start::_init1/(signed word) lasttest#3 )
  (signed word) testnum#20 ← phi( _start::_init1/(signed word) testnum#4 )
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  (byte*) print_line_cursor#3 ← phi( _start::@1/(byte*) print_line_cursor#4 )
  (byte*) print_screen#3 ← phi( _start::@1/(byte*) print_screen#4 )
  (byte*) print_char_cursor#25 ← phi( _start::@1/(byte*) print_char_cursor#10 )
  (signed word) rem16s#15 ← phi( _start::@1/(signed word) rem16s#6 )
  (word) rem16u#20 ← phi( _start::@1/(word) rem16u#7 )
  (signed word) primeptr#11 ← phi( _start::@1/(signed word) primeptr#3 )
  (signed word) lastprime#9 ← phi( _start::@1/(signed word) lastprime#2 )
  (signed word) lasttest#10 ← phi( _start::@1/(signed word) lasttest#2 )
  (signed word) testnum#13 ← phi( _start::@1/(signed word) testnum#3 )
  (signed word) testnum#5 ← (signed word) testnum#13
  (signed word) lasttest#4 ← (signed word) lasttest#10
  (signed word) lastprime#4 ← (signed word) lastprime#9
  (signed word) primeptr#5 ← (signed word) primeptr#11
  (word) rem16u#9 ← (word) rem16u#20
  (signed word) rem16s#8 ← (signed word) rem16s#15
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#25
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  (signed word) lastprime#10 ← phi( _start::@2/(signed word) lastprime#4 )
  (signed word) lasttest#11 ← phi( _start::@2/(signed word) lasttest#4 )
  (signed word) primeptr#12 ← phi( _start::@2/(signed word) primeptr#5 )
  (signed word) testnum#14 ← phi( _start::@2/(signed word) testnum#5 )
  (signed word) rem16s#16 ← phi( _start::@2/(signed word) rem16s#8 )
  (word) rem16u#21 ← phi( _start::@2/(word) rem16u#9 )
  (byte*) print_char_cursor#26 ← phi( _start::@2/(byte*) print_char_cursor#12 )
  (byte*) print_line_cursor#2 ← phi( _start::@2/(byte*) print_line_cursor#3 )
  (byte*) print_screen#2 ← phi( _start::@2/(byte*) print_screen#3 )
  (byte*) print_screen#1 ← (byte*) print_screen#2
  (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#2
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#26
  (word) rem16u#10 ← (word) rem16u#21
  (signed word) rem16s#9 ← (signed word) rem16s#16
  (signed word) testnum#6 ← (signed word) testnum#14
  (signed word) primeptr#6 ← (signed word) primeptr#12
  (signed word) lasttest#5 ← (signed word) lasttest#11
  (signed word) lastprime#5 ← (signed word) lastprime#10
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) BINARY = (number) 2
(const byte) DECIMAL = (number) $a
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const byte) HEXADECIMAL = (number) $10
(const byte) OCTAL = (number) 8
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const word*) RADIX_BINARY_VALUES[]  = { (word) $8000, (word) $4000, (word) $2000, (word) $1000, (word) $800, (word) $400, (word) $200, (word) $100, (word) $80, (word) $40, (word) $20, (word) $10, (word) 8, (word) 4, (word) 2 }
(const word*) RADIX_DECIMAL_VALUES[]  = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(const word*) RADIX_HEXADECIMAL_VALUES[]  = { (word) $1000, (word) $100, (word) $10 }
(const word*) RADIX_OCTAL_VALUES[]  = { (word) $8000, (word) $1000, (word) $200, (word) $40, (word) 8 }
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(const byte) SIZEOF_WORD = (byte) 2
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(const byte*) decimal_digits[(number) 6]  = { fill( 6, 0) }
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(signed word~) div16s::$0
(label) div16s::@1
(label) div16s::@return
(signed word) div16s::dividend
(signed word) div16s::dividend#0
(signed word) div16s::dividend#1
(signed word) div16s::divisor
(signed word) div16s::divisor#0
(signed word) div16s::divisor#1
(signed word) div16s::return
(signed word) div16s::return#0
(signed word) div16s::return#1
(signed word) div16s::return#2
(signed word) div16s::return#3
(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
(bool~) divr16s::$0
(bool~) divr16s::$1
(signed word~) divr16s::$10
(signed word~) divr16s::$11
(bool~) divr16s::$2
(bool~) divr16s::$3
(word~) divr16s::$4
(bool~) divr16s::$5
(signed word~) divr16s::$6
(signed word~) divr16s::$7
(signed word~) divr16s::$8
(number~) divr16s::$9
(label) divr16s::@1
(label) divr16s::@2
(label) divr16s::@3
(label) divr16s::@4
(label) divr16s::@5
(label) divr16s::@6
(label) divr16s::@7
(label) divr16s::@8
(label) divr16s::@9
(label) divr16s::@return
(signed word) divr16s::dividend
(signed word) divr16s::dividend#0
(signed word) divr16s::dividend#1
(signed word) divr16s::dividend#2
(signed word) divr16s::dividend#3
(word) divr16s::dividendu
(word) divr16s::dividendu#0
(word) divr16s::dividendu#1
(word) divr16s::dividendu#2
(word) divr16s::dividendu#3
(word) divr16s::dividendu#4
(word) divr16s::dividendu#5
(word) divr16s::dividendu#6
(signed word) divr16s::divisor
(signed word) divr16s::divisor#0
(signed word) divr16s::divisor#1
(signed word) divr16s::divisor#2
(signed word) divr16s::divisor#3
(signed word) divr16s::divisor#4
(signed word) divr16s::divisor#5
(signed word) divr16s::divisor#6
(word) divr16s::divisoru
(word) divr16s::divisoru#0
(word) divr16s::divisoru#1
(word) divr16s::divisoru#2
(word) divr16s::divisoru#3
(byte) divr16s::neg
(byte) divr16s::neg#0
(byte) divr16s::neg#1
(byte) divr16s::neg#2
(byte) divr16s::neg#3
(byte) divr16s::neg#4
(byte) divr16s::neg#5
(byte) divr16s::neg#6
(byte) divr16s::neg#7
(byte) divr16s::neg#8
(signed word) divr16s::rem
(signed word) divr16s::rem#0
(signed word) divr16s::rem#1
(signed word) divr16s::rem#2
(signed word) divr16s::rem#3
(word) divr16s::remu
(word) divr16s::remu#0
(word) divr16s::remu#1
(word) divr16s::remu#2
(word) divr16s::remu#3
(word) divr16s::remu#4
(word) divr16s::remu#5
(word) divr16s::remu#6
(word) divr16s::resultu
(word) divr16s::resultu#0
(word) divr16s::resultu#1
(word) divr16s::resultu#2
(signed word) divr16s::return
(signed word) divr16s::return#0
(signed word) divr16s::return#1
(signed word) divr16s::return#2
(signed word) divr16s::return#3
(signed word) divr16s::return#4
(signed word) divr16s::return#5
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(word~) divr16u::$10
(bool~) divr16u::$11
(number~) divr16u::$2
(bool~) divr16u::$3
(bool~) divr16u::$4
(number~) divr16u::$5
(word~) divr16u::$6
(word~) divr16u::$7
(bool~) divr16u::$8
(bool~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0
(word) divr16u::dividend#1
(word) divr16u::dividend#2
(word) divr16u::dividend#3
(word) divr16u::dividend#4
(word) divr16u::dividend#5
(word) divr16u::dividend#6
(word) divr16u::dividend#7
(word) divr16u::divisor
(word) divr16u::divisor#0
(word) divr16u::divisor#1
(word) divr16u::divisor#2
(word) divr16u::divisor#3
(word) divr16u::divisor#4
(word) divr16u::divisor#5
(word) divr16u::divisor#6
(byte) divr16u::i
(byte) divr16u::i#0
(byte) divr16u::i#1
(byte) divr16u::i#2
(byte) divr16u::i#3
(byte) divr16u::i#4
(byte) divr16u::i#5
(byte) divr16u::i#6
(word) divr16u::quotient
(word) divr16u::quotient#0
(word) divr16u::quotient#1
(word) divr16u::quotient#2
(word) divr16u::quotient#3
(word) divr16u::quotient#4
(word) divr16u::quotient#5
(word) divr16u::quotient#6
(word) divr16u::quotient#7
(word) divr16u::quotient#8
(word) divr16u::rem
(word) divr16u::rem#0
(word) divr16u::rem#1
(word) divr16u::rem#10
(word) divr16u::rem#2
(word) divr16u::rem#3
(word) divr16u::rem#4
(word) divr16u::rem#5
(word) divr16u::rem#6
(word) divr16u::rem#7
(word) divr16u::rem#8
(word) divr16u::rem#9
(word) divr16u::return
(word) divr16u::return#0
(word) divr16u::return#1
(word) divr16u::return#2
(word) divr16u::return#3
(word) divr16u::return#4
(signed word) lastprime
(signed word) lastprime#0
(signed word) lastprime#1
(signed word) lastprime#10
(signed word) lastprime#11
(signed word) lastprime#12
(signed word) lastprime#13
(signed word) lastprime#14
(signed word) lastprime#15
(signed word) lastprime#16
(signed word) lastprime#17
(signed word) lastprime#18
(signed word) lastprime#19
(signed word) lastprime#2
(signed word) lastprime#20
(signed word) lastprime#3
(signed word) lastprime#4
(signed word) lastprime#5
(signed word) lastprime#6
(signed word) lastprime#7
(signed word) lastprime#8
(signed word) lastprime#9
(signed word) lasttest
(signed word) lasttest#0
(signed word) lasttest#1
(signed word) lasttest#10
(signed word) lasttest#11
(signed word) lasttest#12
(signed word) lasttest#13
(signed word) lasttest#14
(signed word) lasttest#15
(signed word) lasttest#16
(signed word) lasttest#17
(signed word) lasttest#18
(signed word) lasttest#19
(signed word) lasttest#2
(signed word) lasttest#20
(signed word) lasttest#3
(signed word) lasttest#4
(signed word) lasttest#5
(signed word) lasttest#6
(signed word) lasttest#7
(signed word) lasttest#8
(signed word) lasttest#9
(void()) main()
(signed dword~) main::$0
(bool~) main::$1
(number~) main::$10
(number~) main::$11
(signed word~) main::$12
(signed word~) main::$13
(signed word~) main::$14
(signed word~) main::$15
(bool~) main::$2
(bool~) main::$4
(bool~) main::$5
(bool~) main::$6
(bool~) main::$9
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(signed word) main::p
(signed word) main::p#0
(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
(dword~) mul16s::$0
(bool~) mul16s::$1
(word~) mul16s::$10
(word~) mul16s::$11
(word~) mul16s::$12
(word~) mul16s::$13
(word~) mul16s::$14
(bool~) mul16s::$2
(bool~) mul16s::$3
(bool~) mul16s::$4
(word~) mul16s::$6
(word~) mul16s::$7
(word~) mul16s::$9
(label) mul16s::@1
(label) mul16s::@2
(label) mul16s::@3
(label) mul16s::@4
(label) mul16s::@5
(label) mul16s::@return
(signed word) mul16s::a
(signed word) mul16s::a#0
(signed word) mul16s::a#1
(signed word) mul16s::a#2
(signed word) mul16s::a#3
(signed word) mul16s::a#4
(signed word) mul16s::a#5
(signed word) mul16s::b
(signed word) mul16s::b#0
(signed word) mul16s::b#1
(signed word) mul16s::b#2
(signed word) mul16s::b#3
(signed word) mul16s::b#4
(dword) mul16s::m
(dword) mul16s::m#0
(dword) mul16s::m#1
(dword) mul16s::m#2
(dword) mul16s::m#3
(dword) mul16s::m#4
(dword) mul16s::m#5
(dword) mul16s::m#6
(signed dword) mul16s::return
(signed dword) mul16s::return#0
(signed dword) mul16s::return#1
(signed dword) mul16s::return#2
(signed dword) mul16s::return#3
(signed dword) mul16s::return#4
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(bool~) mul16u::$0
(number~) mul16u::$1
(bool~) mul16u::$2
(bool~) mul16u::$3
(dword~) mul16u::$4
(word~) mul16u::$5
(dword~) mul16u::$6
(label) mul16u::@1
(label) mul16u::@2
(label) mul16u::@3
(label) mul16u::@4
(label) mul16u::@5
(label) mul16u::@return
(word) mul16u::a
(word) mul16u::a#0
(word) mul16u::a#1
(word) mul16u::a#2
(word) mul16u::a#3
(word) mul16u::a#4
(word) mul16u::a#5
(word) mul16u::a#6
(word) mul16u::b
(word) mul16u::b#0
(word) mul16u::b#1
(dword) mul16u::mb
(dword) mul16u::mb#0
(dword) mul16u::mb#1
(dword) mul16u::mb#2
(dword) mul16u::mb#3
(dword) mul16u::mb#4
(dword) mul16u::mb#5
(dword) mul16u::res
(dword) mul16u::res#0
(dword) mul16u::res#1
(dword) mul16u::res#2
(dword) mul16u::res#3
(dword) mul16u::res#4
(dword) mul16u::res#5
(dword) mul16u::res#6
(dword) mul16u::return
(dword) mul16u::return#0
(dword) mul16u::return#1
(dword) mul16u::return#2
(dword) mul16u::return#3
(dword) mul16u::return#4
(const signed word*) primenum[(number) $3e8]  = { fill( $3e8, 0) }
(signed word) primeptr
(signed word) primeptr#0
(signed word) primeptr#1
(signed word) primeptr#10
(signed word) primeptr#11
(signed word) primeptr#12
(signed word) primeptr#13
(signed word) primeptr#14
(signed word) primeptr#15
(signed word) primeptr#16
(signed word) primeptr#2
(signed word) primeptr#3
(signed word) primeptr#4
(signed word) primeptr#5
(signed word) primeptr#6
(signed word) primeptr#7
(signed word) primeptr#8
(signed word) primeptr#9
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#5
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#2
(byte*) print_line_cursor#3
(byte*) print_line_cursor#4
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(void()) print_sint_decimal((signed word) print_sint_decimal::w)
(bool~) print_sint_decimal::$0
(signed word~) print_sint_decimal::$5
(label) print_sint_decimal::@1
(label) print_sint_decimal::@2
(label) print_sint_decimal::@3
(label) print_sint_decimal::@4
(label) print_sint_decimal::@5
(label) print_sint_decimal::@6
(label) print_sint_decimal::@7
(label) print_sint_decimal::@return
(signed word) print_sint_decimal::w
(signed word) print_sint_decimal::w#0
(signed word) print_sint_decimal::w#1
(signed word) print_sint_decimal::w#2
(signed word) print_sint_decimal::w#3
(signed word) print_sint_decimal::w#4
(signed word) print_sint_decimal::w#5
(signed word) print_sint_decimal::w#6
(signed word) print_sint_decimal::w#7
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$1
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(signed word) rem16s
(signed word) rem16s#0
(signed word) rem16s#1
(signed word) rem16s#10
(signed word) rem16s#11
(signed word) rem16s#12
(signed word) rem16s#13
(signed word) rem16s#14
(signed word) rem16s#15
(signed word) rem16s#16
(signed word) rem16s#17
(signed word) rem16s#18
(signed word) rem16s#19
(signed word) rem16s#2
(signed word) rem16s#20
(signed word) rem16s#21
(signed word) rem16s#22
(signed word) rem16s#23
(signed word) rem16s#24
(signed word) rem16s#25
(signed word) rem16s#26
(signed word) rem16s#27
(signed word) rem16s#28
(signed word) rem16s#29
(signed word) rem16s#3
(signed word) rem16s#4
(signed word) rem16s#5
(signed word) rem16s#6
(signed word) rem16s#7
(signed word) rem16s#8
(signed word) rem16s#9
(word) rem16u
(word) rem16u#0
(word) rem16u#1
(word) rem16u#10
(word) rem16u#11
(word) rem16u#12
(word) rem16u#13
(word) rem16u#14
(word) rem16u#15
(word) rem16u#16
(word) rem16u#17
(word) rem16u#18
(word) rem16u#19
(word) rem16u#2
(word) rem16u#20
(word) rem16u#21
(word) rem16u#22
(word) rem16u#23
(word) rem16u#24
(word) rem16u#25
(word) rem16u#26
(word) rem16u#27
(word) rem16u#28
(word) rem16u#29
(word) rem16u#3
(word) rem16u#30
(word) rem16u#31
(word) rem16u#32
(word) rem16u#33
(word) rem16u#34
(word) rem16u#35
(word) rem16u#36
(word) rem16u#37
(word) rem16u#38
(word) rem16u#39
(word) rem16u#4
(word) rem16u#40
(word) rem16u#41
(word) rem16u#5
(word) rem16u#6
(word) rem16u#7
(word) rem16u#8
(word) rem16u#9
(signed word) testnum
(signed word) testnum#0
(signed word) testnum#1
(signed word) testnum#10
(signed word) testnum#11
(signed word) testnum#12
(signed word) testnum#13
(signed word) testnum#14
(signed word) testnum#15
(signed word) testnum#16
(signed word) testnum#17
(signed word) testnum#18
(signed word) testnum#19
(signed word) testnum#2
(signed word) testnum#20
(signed word) testnum#21
(signed word) testnum#3
(signed word) testnum#4
(signed word) testnum#5
(signed word) testnum#6
(signed word) testnum#7
(signed word) testnum#8
(signed word) testnum#9
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(bool~) utoa::$0
(bool~) utoa::$1
(byte~) utoa::$10
(byte~) utoa::$11
(bool~) utoa::$2
(bool~) utoa::$3
(number~) utoa::$4
(bool~) utoa::$5
(bool~) utoa::$6
(bool~) utoa::$7
(bool~) utoa::$8
(word~) utoa::$9
(label) utoa::@1
(label) utoa::@10
(label) utoa::@11
(label) utoa::@12
(label) utoa::@13
(label) utoa::@14
(label) utoa::@15
(label) utoa::@2
(label) utoa::@3
(label) utoa::@4
(label) utoa::@5
(label) utoa::@6
(label) utoa::@7
(label) utoa::@8
(label) utoa::@9
(label) utoa::@return
(byte*) utoa::buffer
(byte*) utoa::buffer#0
(byte*) utoa::buffer#1
(byte*) utoa::buffer#10
(byte*) utoa::buffer#11
(byte*) utoa::buffer#12
(byte*) utoa::buffer#13
(byte*) utoa::buffer#14
(byte*) utoa::buffer#15
(byte*) utoa::buffer#16
(byte*) utoa::buffer#17
(byte*) utoa::buffer#18
(byte*) utoa::buffer#19
(byte*) utoa::buffer#2
(byte*) utoa::buffer#20
(byte*) utoa::buffer#21
(byte*) utoa::buffer#3
(byte*) utoa::buffer#4
(byte*) utoa::buffer#5
(byte*) utoa::buffer#6
(byte*) utoa::buffer#7
(byte*) utoa::buffer#8
(byte*) utoa::buffer#9
(byte) utoa::digit
(byte) utoa::digit#0
(byte) utoa::digit#1
(byte) utoa::digit#2
(byte) utoa::digit#3
(byte) utoa::digit#4
(byte) utoa::digit#5
(byte) utoa::digit#6
(word) utoa::digit_value
(word) utoa::digit_value#0
(word) utoa::digit_value#1
(word*) utoa::digit_values
(word*) utoa::digit_values#0
(word*) utoa::digit_values#1
(word*) utoa::digit_values#10
(word*) utoa::digit_values#2
(word*) utoa::digit_values#3
(word*) utoa::digit_values#4
(word*) utoa::digit_values#5
(word*) utoa::digit_values#6
(word*) utoa::digit_values#7
(word*) utoa::digit_values#8
(word*) utoa::digit_values#9
(byte) utoa::max_digits
(byte) utoa::max_digits#0
(byte) utoa::max_digits#1
(byte) utoa::max_digits#10
(byte) utoa::max_digits#2
(byte) utoa::max_digits#3
(byte) utoa::max_digits#4
(byte) utoa::max_digits#5
(byte) utoa::max_digits#6
(byte) utoa::max_digits#7
(byte) utoa::max_digits#8
(byte) utoa::max_digits#9
(byte) utoa::radix
(byte) utoa::radix#0
(byte) utoa::radix#1
(byte) utoa::radix#2
(byte) utoa::radix#3
(byte) utoa::radix#4
(byte) utoa::started
(byte) utoa::started#0
(byte) utoa::started#1
(byte) utoa::started#2
(byte) utoa::started#3
(byte) utoa::started#4
(word) utoa::value
(word) utoa::value#0
(word) utoa::value#1
(word) utoa::value#10
(word) utoa::value#11
(word) utoa::value#12
(word) utoa::value#13
(word) utoa::value#14
(word) utoa::value#15
(word) utoa::value#2
(word) utoa::value#3
(word) utoa::value#4
(word) utoa::value#5
(word) utoa::value#6
(word) utoa::value#7
(word) utoa::value#8
(word) utoa::value#9
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(bool~) utoa_append::$0
(label) utoa_append::@1
(label) utoa_append::@2
(label) utoa_append::@3
(label) utoa_append::@return
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0
(byte*) utoa_append::buffer#1
(byte*) utoa_append::buffer#2
(byte*) utoa_append::buffer#3
(byte*) utoa_append::buffer#4
(byte) utoa_append::digit
(byte) utoa_append::digit#0
(byte) utoa_append::digit#1
(byte) utoa_append::digit#2
(byte) utoa_append::digit#3
(byte) utoa_append::digit#4
(word) utoa_append::return
(word) utoa_append::return#0
(word) utoa_append::return#1
(word) utoa_append::return#2
(word) utoa_append::return#3
(word) utoa_append::return#4
(word) utoa_append::sub
(word) utoa_append::sub#0
(word) utoa_append::sub#1
(word) utoa_append::sub#2
(word) utoa_append::sub#3
(word) utoa_append::value
(word) utoa_append::value#0
(word) utoa_append::value#1
(word) utoa_append::value#2
(word) utoa_append::value#3
(word) utoa_append::value#4
(word) utoa_append::value#5

Adding number conversion cast (unumber) 5 in (byte) utoa::max_digits#1 ← (number) 5
Adding number conversion cast (unumber) 4 in (byte) utoa::max_digits#2 ← (number) 4
Adding number conversion cast (unumber) 6 in (byte) utoa::max_digits#3 ← (number) 6
Adding number conversion cast (unumber) $10 in (byte) utoa::max_digits#4 ← (number) $10
Adding number conversion cast (unumber) 0 in *((byte*) utoa::buffer#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (number) 1
Adding number conversion cast (unumber) utoa::$4 in (number~) utoa::$4 ← (byte) utoa::max_digits#5 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte*) utoa::buffer#3) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) utoa::started#1 ← (number) 1
Adding number conversion cast (unumber) 0 in (bool~) print_str::$1 ← (number) 0 != *((byte*) print_str::str#2)
Adding number conversion cast (snumber) 0 in (bool~) print_sint_decimal::$0 ← (signed word) print_sint_decimal::w#2 < (number) 0
Adding number conversion cast (unumber) 0 in (bool~) mul16u::$0 ← (word) mul16u::a#2 != (number) 0
Adding number conversion cast (unumber) 1 in (number~) mul16u::$1 ← (word) mul16u::a#3 & (number) 1
Adding number conversion cast (unumber) mul16u::$1 in (number~) mul16u::$1 ← (word) mul16u::a#3 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) mul16u::$2 ← (unumber~) mul16u::$1 != (number) 0
Adding number conversion cast (unumber) 1 in (word~) mul16u::$5 ← (word) mul16u::a#4 >> (number) 1
Adding number conversion cast (unumber) 1 in (dword~) mul16u::$6 ← (dword) mul16u::mb#2 << (number) 1
Adding number conversion cast (snumber) 0 in (bool~) mul16s::$1 ← (signed word) mul16s::a#2 < (number) 0
Adding number conversion cast (snumber) 0 in (bool~) mul16s::$3 ← (signed word) mul16s::b#2 < (number) 0
Adding number conversion cast (unumber) 1 in (word~) divr16u::$0 ← (word) divr16u::rem#4 << (number) 1
Adding number conversion cast (unumber) $80 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (number) $80
Adding number conversion cast (unumber) divr16u::$2 in (number~) divr16u::$2 ← (byte~) divr16u::$1 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) divr16u::$3 ← (unumber~) divr16u::$2 != (number) 0
Adding number conversion cast (unumber) 1 in (word~) divr16u::$6 ← (word) divr16u::dividend#3 << (number) 1
Adding number conversion cast (unumber) 1 in (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (number) 1
Adding number conversion cast (unumber) 1 in (number~) divr16u::$5 ← (word) divr16u::rem#6 | (number) 1
Adding number conversion cast (unumber) divr16u::$5 in (number~) divr16u::$5 ← (word) divr16u::rem#6 | (unumber)(number) 1
Adding number conversion cast (snumber) 0 in (bool~) divr16s::$0 ← (signed word) divr16s::dividend#1 < (number) 0
Adding number conversion cast (snumber) 0 in (bool~) divr16s::$1 ← (signed word) divr16s::rem#1 < (number) 0
Adding number conversion cast (unumber) 1 in (byte) divr16s::neg#1 ← (number) 1
Adding number conversion cast (snumber) 0 in (bool~) divr16s::$3 ← (signed word) divr16s::divisor#1 < (number) 0
Adding number conversion cast (unumber) 1 in (number~) divr16s::$9 ← (byte) divr16s::neg#3 ^ (number) 1
Adding number conversion cast (unumber) divr16s::$9 in (number~) divr16s::$9 ← (byte) divr16s::neg#3 ^ (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) divr16s::$5 ← (byte) divr16s::neg#4 == (number) 0
Adding number conversion cast (snumber) 0 in (signed word) divr16s::rem#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) main::$10 ← (number) 1 * (const byte) SIZEOF_SIGNED_WORD
Adding number conversion cast (unumber) main::$10 in (number~) main::$10 ← (unumber)(number) 1 * (const byte) SIZEOF_SIGNED_WORD
Adding number conversion cast (snumber) 2 in *((const signed word*) primenum + (unumber~) main::$10) ← (number) 2
Adding number conversion cast (unumber) 2 in (number~) main::$11 ← (number) 2 * (const byte) SIZEOF_SIGNED_WORD
Adding number conversion cast (unumber) main::$11 in (number~) main::$11 ← (unumber)(number) 2 * (const byte) SIZEOF_SIGNED_WORD
Adding number conversion cast (snumber) 3 in *((const signed word*) primenum + (unumber~) main::$11) ← (number) 3
Adding number conversion cast (snumber) 3 in (signed word) testnum#0 ← (number) 3
Adding number conversion cast (snumber) 2 in (signed word) lasttest#0 ← (number) 2
Adding number conversion cast (snumber) 2 in (signed word) lastprime#0 ← (number) 2
Adding number conversion cast (snumber) 2 in (signed word) testnum#1 ← (signed word) testnum#8 + (number) 2
Adding number conversion cast (snumber) 2 in (signed word) primeptr#0 ← (number) 2
Adding number conversion cast (snumber) 0 in (bool~) main::$4 ← (signed word) rem16s#5 == (number) 0
Adding number conversion cast (snumber) 2 in (signed word) testnum#2 ← (signed word) testnum#10 + (number) 2
Adding number conversion cast (snumber) 2 in (signed word) primeptr#2 ← (number) 2
Adding number conversion cast (snumber) $3e8 in (bool~) main::$9 ← (signed word) lastprime#7 < (number) $3e8
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) utoa::max_digits#1 ← (unumber)(number) 5
Inlining cast (byte) utoa::max_digits#2 ← (unumber)(number) 4
Inlining cast (byte) utoa::max_digits#3 ← (unumber)(number) 6
Inlining cast (byte) utoa::max_digits#4 ← (unumber)(number) $10
Inlining cast *((byte*) utoa::buffer#2) ← (unumber)(number) 0
Inlining cast *((byte*) utoa::buffer#3) ← (unumber)(number) 0
Inlining cast (byte) utoa::started#1 ← (unumber)(number) 1
Inlining cast (byte) divr16s::neg#1 ← (unumber)(number) 1
Inlining cast (signed word) divr16s::rem#0 ← (snumber)(number) 0
Inlining cast *((const signed word*) primenum + (unumber~) main::$10) ← (snumber)(number) 2
Inlining cast *((const signed word*) primenum + (unumber~) main::$11) ← (snumber)(number) 3
Inlining cast (signed word) testnum#0 ← (snumber)(number) 3
Inlining cast (signed word) lasttest#0 ← (snumber)(number) 2
Inlining cast (signed word) lastprime#0 ← (snumber)(number) 2
Inlining cast (signed word) primeptr#0 ← (snumber)(number) 2
Inlining cast (signed word) primeptr#2 ← (snumber)(number) 2
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 5
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 3
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast $3e8
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 2
Finalized unsigned number type (byte) 2
Finalized signed number type (signed byte) 3
Finalized signed number type (signed byte) 3
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed word) $3e8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) utoa::$4 ← (byte) utoa::max_digits#5 - (byte) 1
Inferred type updated to byte in (unumber~) mul16u::$1 ← (word) mul16u::a#3 & (byte) 1
Inferred type updated to byte in (unumber~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
Inferred type updated to word in (unumber~) divr16u::$5 ← (word) divr16u::rem#6 | (byte) 1
Inferred type updated to byte in (unumber~) divr16s::$9 ← (byte) divr16s::neg#3 ^ (byte) 1
Inferred type updated to byte in (unumber~) main::$10 ← (byte) 1 * (const byte) SIZEOF_SIGNED_WORD
Inferred type updated to byte in (unumber~) main::$11 ← (byte) 2 * (const byte) SIZEOF_SIGNED_WORD
Inversing boolean not [137] (bool~) mul16u::$3 ← (byte~) mul16u::$1 == (byte) 0 from [136] (bool~) mul16u::$2 ← (byte~) mul16u::$1 != (byte) 0
Inversing boolean not [161] (bool~) mul16s::$2 ← (signed word) mul16s::a#2 >= (signed byte) 0 from [160] (bool~) mul16s::$1 ← (signed word) mul16s::a#2 < (signed byte) 0
Inversing boolean not [165] (bool~) mul16s::$4 ← (signed word) mul16s::b#2 >= (signed byte) 0 from [164] (bool~) mul16s::$3 ← (signed word) mul16s::b#2 < (signed byte) 0
Inversing boolean not [193] (bool~) divr16u::$4 ← (byte~) divr16u::$2 == (byte) 0 from [192] (bool~) divr16u::$3 ← (byte~) divr16u::$2 != (byte) 0
Inversing boolean not [201] (bool~) divr16u::$9 ← (word) divr16u::rem#5 < (word) divr16u::divisor#1 from [200] (bool~) divr16u::$8 ← (word) divr16u::rem#5 >= (word) divr16u::divisor#1
Inversing boolean not [309] (bool~) main::$2 ← (signed word) testnum#7 <= (signed word~) main::$15 from [308] (bool~) main::$1 ← (signed word) testnum#7 > (signed word~) main::$15
Inversing boolean not [327] (bool~) main::$5 ← (signed word) rem16s#5 != (signed byte) 0 from [326] (bool~) main::$4 ← (signed word) rem16s#5 == (signed byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias utoa::value#10 = utoa::value#8 utoa::value#12 utoa::value#13 utoa::value#9 utoa::value#14 utoa::value#15 utoa::value#11 
Alias utoa::buffer#10 = utoa::buffer#17 utoa::buffer#21 utoa::buffer#16 utoa::buffer#18 utoa::buffer#13 utoa::buffer#19 utoa::buffer#20 utoa::buffer#6 
Alias utoa::radix#1 = utoa::radix#2 utoa::radix#3 utoa::radix#4 
Alias utoa::digit#2 = utoa::digit#3 utoa::digit#6 utoa::digit#5 
Alias utoa::digit_values#10 = utoa::digit_values#5 utoa::digit_values#6 utoa::digit_values#9 
Alias utoa::value#2 = utoa::value#5 utoa::value#3 utoa::value#4 
Alias utoa::started#2 = utoa::started#3 
Alias utoa::buffer#11 = utoa::buffer#12 utoa::buffer#7 utoa::buffer#8 utoa::buffer#9 
Alias utoa::max_digits#10 = utoa::max_digits#8 utoa::max_digits#5 utoa::max_digits#9 
Alias utoa::digit_value#0 = utoa::digit_value#1 
Alias utoa_append::return#0 = utoa_append::return#3 
Alias utoa::value#0 = utoa::$9 
Alias utoa_append::digit#2 = utoa_append::digit#4 utoa_append::digit#3 
Alias utoa_append::value#2 = utoa_append::value#3 utoa_append::value#4 utoa_append::return#1 utoa_append::return#4 utoa_append::return#2 
Alias utoa_append::sub#1 = utoa_append::sub#2 
Alias utoa_append::buffer#1 = utoa_append::buffer#4 utoa_append::buffer#2 
Alias print_str::str#2 = print_str::str#3 print_str::str#4 
Alias print_char_cursor#1 = print_char_cursor#27 print_char_cursor#28 print_char_cursor#15 
Alias print_char_cursor#0 = print_char_cursor#14 
Alias print_char_cursor#29 = print_char_cursor#35 print_char_cursor#30 
Alias print_sint_decimal::w#2 = print_sint_decimal::w#5 print_sint_decimal::w#3 print_sint_decimal::w#7 print_sint_decimal::w#6 
Alias print_char_cursor#16 = print_char_cursor#2 
Alias print_sint_decimal::w#0 = print_sint_decimal::$5 
Alias print_char_cursor#17 = print_char_cursor#3 
Alias print_char_cursor#31 = print_char_cursor#36 
Alias print_char_cursor#18 = print_char_cursor#4 print_char_cursor#19 print_char_cursor#5 
Alias print_char_cursor#21 = print_char_cursor#6 print_char_cursor#7 
Alias mul16u::a#2 = mul16u::a#3 mul16u::a#6 
Alias mul16u::mb#3 = mul16u::mb#4 mul16u::mb#5 
Alias mul16u::res#2 = mul16u::res#5 mul16u::res#4 mul16u::return#0 mul16u::res#3 mul16u::return#3 mul16u::return#1 
Alias mul16u::a#0 = mul16u::$5 
Alias mul16u::mb#1 = mul16u::$6 
Alias mul16u::res#1 = mul16u::$4 
Alias mul16u::return#2 = mul16u::return#4 
Alias mul16s::a#1 = mul16s::a#2 mul16s::a#5 
Alias mul16s::b#1 = mul16s::b#4 mul16s::b#3 
Alias mul16s::m#0 = mul16s::$0 mul16s::m#3 
Alias mul16s::$11 = mul16s::$7 
Alias mul16s::m#5 = mul16s::m#6 
Alias mul16s::a#3 = mul16s::a#4 
Alias mul16s::$12 = mul16s::$10 
Alias mul16s::return#0 = mul16s::return#3 mul16s::return#1 
Alias divr16u::rem#0 = divr16u::$0 divr16u::rem#6 
Alias divr16u::dividend#0 = divr16u::$6 divr16u::dividend#7 
Alias divr16u::quotient#1 = divr16u::$7 divr16u::quotient#4 
Alias divr16u::dividend#2 = divr16u::dividend#6 
Alias divr16u::quotient#6 = divr16u::quotient#7 
Alias divr16u::divisor#3 = divr16u::divisor#4 
Alias divr16u::i#5 = divr16u::i#6 
Alias divr16u::rem#1 = divr16u::$5 
Alias divr16u::rem#5 = divr16u::rem#7 
Alias divr16u::divisor#1 = divr16u::divisor#2 
Alias divr16u::i#3 = divr16u::i#4 
Alias divr16u::rem#2 = divr16u::$10 
Alias divr16u::rem#10 = divr16u::rem#8 
Alias divr16u::return#0 = divr16u::quotient#5 divr16u::quotient#8 divr16u::return#3 divr16u::return#1 
Alias rem16u#0 = rem16u#11 rem16u#1 
Alias divr16s::dividend#1 = divr16s::dividend#2 divr16s::dividend#3 
Alias divr16s::rem#1 = divr16s::rem#2 divr16s::rem#3 
Alias divr16s::divisor#4 = divr16s::divisor#6 divr16s::divisor#5 
Alias rem16u#37 = rem16u#40 rem16u#38 
Alias divr16s::neg#0 = divr16s::neg#7 
Alias divr16s::divisor#1 = divr16s::divisor#2 divr16s::divisor#3 
Alias divr16s::neg#3 = divr16s::neg#5 divr16s::neg#8 
Alias divr16s::dividendu#4 = divr16s::dividendu#6 divr16s::dividendu#5 
Alias divr16s::remu#4 = divr16s::remu#6 divr16s::remu#5 
Alias rem16u#27 = rem16u#32 rem16u#28 
Alias divr16s::neg#2 = divr16s::$9 
Alias divr16u::return#2 = divr16u::return#4 
Alias divr16s::neg#4 = divr16s::neg#6 
Alias rem16u#12 = rem16u#2 rem16u#13 rem16u#14 
Alias divr16s::resultu#0 = divr16s::$4 divr16s::resultu#1 divr16s::resultu#2 
Alias rem16s#1 = divr16s::$10 
Alias divr16s::return#1 = divr16s::$11 
Alias divr16s::return#2 = divr16s::return#4 
Alias rem16u#15 = rem16u#3 
Alias rem16s#10 = rem16s#2 
Alias divr16s::return#3 = divr16s::return#5 
Alias rem16u#16 = rem16u#4 rem16u#17 rem16u#5 
Alias rem16s#11 = rem16s#3 rem16s#12 rem16s#4 
Alias div16s::return#0 = div16s::$0 div16s::return#3 div16s::return#1 
Alias mul16s::return#2 = mul16s::return#4 
Alias testnum#15 = testnum#7 testnum#16 
Alias lasttest#13 = lasttest#6 lasttest#7 
Alias rem16u#33 = rem16u#34 rem16u#39 
Alias rem16s#24 = rem16s#25 rem16s#28 
Alias lastprime#18 = lastprime#19 lastprime#20 
Alias print_char_cursor#42 = print_char_cursor#43 print_char_cursor#44 
Alias primeptr#7 = primeptr#8 
Alias lasttest#14 = lasttest#15 lasttest#17 
Alias testnum#10 = testnum#18 testnum#9 
Alias lastprime#14 = lastprime#15 lastprime#16 
Alias print_char_cursor#38 = print_char_cursor#39 print_char_cursor#40 
Alias rem16u#18 = rem16u#6 rem16u#35 
Alias rem16s#13 = rem16s#5 rem16s#26 
Alias lastprime#11 = lastprime#6 
Alias testnum#11 = testnum#17 testnum#21 testnum#19 testnum#12 testnum#3 
Alias print_char_cursor#32 = print_char_cursor#37 
Alias lasttest#12 = lasttest#20 lasttest#8 lasttest#18 lasttest#9 lasttest#2 
Alias primeptr#10 = primeptr#16 primeptr#9 primeptr#15 primeptr#13 primeptr#3 
Alias rem16u#19 = rem16u#36 rem16u#30 rem16u#31 rem16u#25 rem16u#7 
Alias rem16s#14 = rem16s#27 rem16s#22 rem16s#23 rem16s#19 rem16s#6 
Alias lastprime#1 = lastprime#12 lastprime#7 lastprime#8 lastprime#2 
Alias print_char_cursor#22 = print_char_cursor#8 
Alias print_char_cursor#10 = print_char_cursor#9 print_char_cursor#23 print_char_cursor#24 
Alias print_screen#0 = print_line_cursor#0 print_char_cursor#11 print_char_cursor#33 print_screen#4 print_line_cursor#4 print_screen#3 print_line_cursor#3 print_screen#2 print_line_cursor#2 print_screen#1 print_line_cursor#1 
Alias testnum#20 = testnum#4 
Alias lasttest#16 = lasttest#3 
Alias lastprime#13 = lastprime#3 
Alias primeptr#14 = primeptr#4 
Alias rem16u#26 = rem16u#8 
Alias rem16s#20 = rem16s#7 
Alias testnum#13 = testnum#5 testnum#14 testnum#6 
Alias lasttest#10 = lasttest#4 lasttest#11 lasttest#5 
Alias lastprime#10 = lastprime#4 lastprime#9 lastprime#5 
Alias primeptr#11 = primeptr#5 primeptr#12 primeptr#6 
Alias rem16u#10 = rem16u#9 rem16u#20 rem16u#21 
Alias rem16s#15 = rem16s#8 rem16s#16 rem16s#9 
Alias print_char_cursor#12 = print_char_cursor#25 print_char_cursor#26 print_char_cursor#13 
Successful SSA optimization Pass2AliasElimination
Alias utoa::value#10 = utoa::value#7 
Alias utoa::buffer#10 = utoa::buffer#15 
Alias utoa::digit#2 = utoa::digit#4 
Alias utoa::max_digits#10 = utoa::max_digits#6 
Alias utoa::digit_values#10 = utoa::digit_values#7 
Alias mul16u::a#2 = mul16u::a#4 
Alias mul16u::mb#2 = mul16u::mb#3 
Alias mul16s::b#1 = mul16s::b#2 
Alias mul16s::a#1 = mul16s::a#3 
Alias divr16u::dividend#2 = divr16u::dividend#3 
Alias divr16u::quotient#3 = divr16u::quotient#6 
Alias divr16u::divisor#1 = divr16u::divisor#3 divr16u::divisor#6 
Alias divr16u::i#2 = divr16u::i#3 divr16u::i#5 
Alias divr16u::dividend#0 = divr16u::dividend#5 
Alias divr16s::divisor#1 = divr16s::divisor#4 
Alias rem16u#22 = rem16u#27 rem16u#37 
Alias divr16s::dividendu#3 = divr16s::dividendu#4 
Alias divr16s::remu#3 = divr16s::remu#4 
Alias rem16u#12 = rem16u#15 
Alias testnum#15 = testnum#8 
Alias rem16u#29 = rem16u#33 
Alias rem16s#21 = rem16s#24 
Alias lastprime#17 = lastprime#18 
Alias print_char_cursor#41 = print_char_cursor#42 
Alias lasttest#12 = lasttest#14 
Alias lastprime#11 = lastprime#14 
Alias rem16u#18 = rem16u#19 
Alias rem16s#13 = rem16s#14 
Alias print_char_cursor#32 = print_char_cursor#38 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) utoa::radix#1 (byte) utoa::radix#0
Identical Phi Values (word) utoa::value#10 (word) utoa::value#1
Identical Phi Values (byte*) utoa::buffer#10 (byte*) utoa::buffer#5
Identical Phi Values (byte) utoa::max_digits#10 (byte) utoa::max_digits#7
Identical Phi Values (word*) utoa::digit_values#10 (word*) utoa::digit_values#8
Identical Phi Values (word) utoa_append::value#5 (word) utoa_append::value#0
Identical Phi Values (word) utoa_append::sub#3 (word) utoa_append::sub#0
Identical Phi Values (byte*) utoa_append::buffer#3 (byte*) utoa_append::buffer#0
Identical Phi Values (word) utoa_append::sub#1 (word) utoa_append::sub#3
Identical Phi Values (byte*) utoa_append::buffer#1 (byte*) utoa_append::buffer#3
Identical Phi Values (byte*) print_str::str#5 (byte*) print_str::str#1
Identical Phi Values (byte*) print_char_cursor#34 (byte*) print_char_cursor#31
Identical Phi Values (byte*) print_char_cursor#0 (byte*) print_char_cursor#21
Identical Phi Values (signed word) print_sint_decimal::w#2 (signed word) print_sint_decimal::w#1
Identical Phi Values (byte*) print_char_cursor#29 (byte*) print_char_cursor#32
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#21
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_char_cursor#21
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_char_cursor#1
Identical Phi Values (word) mul16u::b#1 (word) mul16u::b#0
Identical Phi Values (word) mul16u::a#5 (word) mul16u::a#1
Identical Phi Values (signed word) mul16s::a#1 (signed word) mul16s::a#0
Identical Phi Values (signed word) mul16s::b#1 (signed word) mul16s::b#0
Identical Phi Values (word) divr16u::rem#9 (word) divr16u::rem#3
Identical Phi Values (word) divr16u::dividend#4 (word) divr16u::dividend#1
Identical Phi Values (word) divr16u::divisor#5 (word) divr16u::divisor#0
Identical Phi Values (word) divr16u::divisor#1 (word) divr16u::divisor#5
Identical Phi Values (signed word) divr16s::dividend#1 (signed word) divr16s::dividend#0
Identical Phi Values (signed word) divr16s::rem#1 (signed word) divr16s::rem#0
Identical Phi Values (signed word) divr16s::divisor#1 (signed word) divr16s::divisor#0
Identical Phi Values (word) rem16u#22 (word) rem16u#23
Identical Phi Values (word) rem16u#12 (word) rem16u#0
Identical Phi Values (signed word) div16s::dividend#1 (signed word) div16s::dividend#0
Identical Phi Values (signed word) div16s::divisor#1 (signed word) div16s::divisor#0
Identical Phi Values (word) rem16u#23 (word) rem16u#24
Identical Phi Values (signed word) rem16s#17 (signed word) rem16s#18
Identical Phi Values (word) rem16u#16 (word) rem16u#12
Identical Phi Values (signed word) rem16s#11 (signed word) rem16s#10
Identical Phi Values (word) rem16u#41 (word) rem16u#26
Identical Phi Values (signed word) rem16s#29 (signed word) rem16s#20
Identical Phi Values (byte*) print_char_cursor#45 (byte*) print_screen#0
Identical Phi Values (signed word) lasttest#12 (signed word) lasttest#19
Identical Phi Values (signed word) lastprime#11 (signed word) lastprime#17
Identical Phi Values (byte*) print_char_cursor#32 (byte*) print_char_cursor#41
Identical Phi Values (word) rem16u#18 (word) rem16u#16
Identical Phi Values (signed word) rem16s#13 (signed word) rem16s#11
Identical Phi Values (byte*) print_char_cursor#22 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#21
Identical Phi Values (signed word) testnum#13 (signed word) testnum#11
Identical Phi Values (signed word) lasttest#10 (signed word) lasttest#12
Identical Phi Values (signed word) lastprime#10 (signed word) lastprime#1
Identical Phi Values (signed word) primeptr#11 (signed word) primeptr#10
Identical Phi Values (word) rem16u#10 (word) rem16u#18
Identical Phi Values (signed word) rem16s#15 (signed word) rem16s#13
Identical Phi Values (byte*) print_char_cursor#12 (byte*) print_char_cursor#10
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) print_char_cursor#31 (byte*) print_char_cursor#21
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) print_char_cursor#1 (byte*) print_char_cursor#21
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) utoa::$0 [4] if((byte) utoa::radix#0==(const byte) DECIMAL) goto utoa::@1
Simple Condition (bool~) utoa::$1 [8] if((byte) utoa::radix#0==(const byte) HEXADECIMAL) goto utoa::@2
Simple Condition (bool~) utoa::$2 [12] if((byte) utoa::radix#0==(const byte) OCTAL) goto utoa::@3
Simple Condition (bool~) utoa::$3 [16] if((byte) utoa::radix#0==(const byte) BINARY) goto utoa::@4
Simple Condition (bool~) utoa::$5 [33] if((byte) utoa::digit#2<(byte~) utoa::$4) goto utoa::@11
Simple Condition (bool~) utoa_append::$0 [58] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
Simple Condition (bool~) print_str::$1 [66] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
Simple Condition (bool~) print_sint_decimal::$0 [74] if((signed word) print_sint_decimal::w#1<(signed byte) 0) goto print_sint_decimal::@1
Simple Condition (bool~) mul16u::$0 [100] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2
Simple Condition (bool~) mul16u::$3 [103] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@4
Simple Condition (bool~) mul16s::$2 [116] if((signed word) mul16s::a#0>=(signed byte) 0) goto mul16s::@1
Simple Condition (bool~) mul16s::$4 [119] if((signed word) mul16s::b#0>=(signed byte) 0) goto mul16s::@2
Simple Condition (bool~) divr16u::$4 [139] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
Simple Condition (bool~) divr16u::$9 [144] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3
Simple Condition (bool~) divr16u::$11 [149] if((byte) divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1
Simple Condition (bool~) divr16s::$3 [172] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3
Simple Condition (bool~) divr16s::$5 [186] if((byte) divr16s::neg#4==(byte) 0) goto divr16s::@5
Simple Condition (bool~) main::$2 [220] if((signed word) testnum#15<=(signed word~) main::$15) goto main::@2
Simple Condition (bool~) main::$5 [234] if((signed word) rem16s#10!=(signed byte) 0) goto main::@4
Simple Condition (bool~) main::$6 [237] if((signed word) primeptr#10<=(signed word) lasttest#19) goto main::@3
Simple Condition (bool~) main::$9 [250] if((signed word) lastprime#1<(signed word) $3e8) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting ! if()-condition to reversed if() [38] (bool~) utoa::$8 ← ! (bool~) utoa::$7
Rewriting || if()-condition to two if()s [37] (bool~) utoa::$7 ← (byte) utoa::started#2 || (bool~) utoa::$6
Rewriting || if()-condition to two if()s [160] (bool~) divr16s::$2 ← (bool~) divr16s::$0 || (bool~) divr16s::$1
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition (byte) utoa::started#2
Constant right-side identified [203] (byte~) main::$10 ← (byte) 1 * (const byte) SIZEOF_SIGNED_WORD
Constant right-side identified [205] (byte~) main::$11 ← (byte) 2 * (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) utoa::max_digits#0 = 0
Constant (const word*) utoa::digit_values#0 = (word*) 0
Constant (const byte) utoa::max_digits#1 = 5
Constant (const word*) utoa::digit_values#1 = RADIX_DECIMAL_VALUES
Constant (const byte) utoa::max_digits#2 = 4
Constant (const word*) utoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES
Constant (const byte) utoa::max_digits#3 = 6
Constant (const word*) utoa::digit_values#3 = RADIX_OCTAL_VALUES
Constant (const byte) utoa::max_digits#4 = $10
Constant (const word*) utoa::digit_values#4 = RADIX_BINARY_VALUES
Constant (const byte) utoa::started#0 = 0
Constant (const byte) utoa::digit#0 = 0
Constant (const byte) utoa::started#1 = 1
Constant (const byte) utoa_append::digit#0 = 0
Constant (const byte) print_char::ch#1 = '-'
Constant (const byte) print_char::ch#2 = ' '
Constant (const byte*) utoa::buffer#5 = decimal_digits
Constant (const byte) utoa::radix#0 = DECIMAL
Constant (const byte*) print_str::str#1 = decimal_digits
Constant (const dword) mul16u::res#0 = 0
Constant (const word) divr16u::quotient#0 = 0
Constant (const byte) divr16u::i#0 = 0
Constant (const byte) divr16s::neg#0 = 0
Constant (const word) divr16s::dividendu#0 = 0
Constant (const word) divr16s::remu#0 = 0
Constant (const byte) divr16s::neg#1 = 1
Constant (const word) divr16s::divisoru#0 = 0
Constant (const signed word) divr16s::rem#0 = 0
Constant (const byte) main::$10 = 1*SIZEOF_SIGNED_WORD
Constant (const byte) main::$11 = 2*SIZEOF_SIGNED_WORD
Constant (const signed word) testnum#0 = 3
Constant (const signed word) lasttest#0 = 2
Constant (const signed word) lastprime#0 = 2
Constant (const signed word) primeptr#0 = 2
Constant (const signed word) primeptr#2 = 2
Constant (const byte) print_char::ch#3 = ' '
Constant (const byte*) print_screen#0 = (byte*) 1024
Constant (const word) rem16u#26 = 0
Constant (const signed word) rem16s#20 = 0
Constant (const signed word) testnum#20 = 0
Constant (const signed word) primeptr#14 = 0
Constant (const signed word) lasttest#16 = 0
Constant (const signed word) lastprime#13 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16s::remu#2 = (word)divr16s::rem#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [4] if((const byte) utoa::radix#0==(const byte) DECIMAL) goto utoa::@1
if() condition always false - eliminating [8] if((const byte) utoa::radix#0==(const byte) HEXADECIMAL) goto utoa::@2
if() condition always false - eliminating [12] if((const byte) utoa::radix#0==(const byte) OCTAL) goto utoa::@3
if() condition always false - eliminating [16] if((const byte) utoa::radix#0==(const byte) BINARY) goto utoa::@4
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [147] divr16u::i#1 ← ++ divr16u::i#2 to ++
Resolved ranged comparison value [149] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1 to (number) $10
De-inlining pointer[w] to *(pointer+w)   [212] (signed word) main::p#0 ← *((const signed word*) primenum + (signed word~) main::$12)
De-inlining pointer[w] to *(pointer+w)   [228] (signed word) div16s::divisor#0 ← *((const signed word*) primenum + (signed word~) main::$13)
De-inlining pointer[w] to *(pointer+w)   [242] *((const signed word*) primenum + (signed word~) main::$14) ← (signed word) testnum#11
Successful SSA optimization Pass2DeInlineWordDerefIdx
Simplifying constant evaluating to zero (word)(const signed word) divr16s::rem#0 in 
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused variable - keeping the phi block (word) rem16u#24
Eliminating unused variable - keeping the phi block (signed word) rem16s#18
Eliminating unused variable (signed word) div16s::return#2 and assignment [157] (signed word) div16s::return#2 ← (signed word) div16s::return#0
Eliminating unused constant (const byte) BINARY
Eliminating unused constant (const byte) OCTAL
Eliminating unused constant (const byte) HEXADECIMAL
Eliminating unused constant (const byte) utoa::max_digits#0
Eliminating unused constant (const word*) utoa::digit_values#0
Eliminating unused constant (const byte) utoa::radix#0
Eliminating unused constant (const word) divr16s::dividendu#0
Eliminating unused constant (const word) divr16s::remu#0
Eliminating unused constant (const word) divr16s::divisoru#0
Eliminating unused constant (const signed word) testnum#20
Eliminating unused constant (const signed word) primeptr#14
Eliminating unused constant (const signed word) lasttest#16
Eliminating unused constant (const signed word) lastprime#13
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (signed word) div16s::return#0 and assignment [133] (signed word) div16s::return#0 ← (signed word) divr16s::return#3
Eliminating unused variable - keeping the phi block (word) rem16u#29
Eliminating unused variable - keeping the phi block (signed word) rem16s#21
Eliminating unused constant (const byte) DECIMAL
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (signed word) divr16s::return#3 and assignment [132] (signed word) divr16s::return#3 ← (signed word) divr16s::return#2
Eliminating unused constant (const word) rem16u#26
Eliminating unused constant (const signed word) rem16s#20
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block (signed word) divr16s::return#2
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (signed word) divr16s::return#0 and assignment [124] (signed word) divr16s::return#0 ← (signed word)(word) divr16s::resultu#0
Eliminating unused variable (signed word) divr16s::return#1 and assignment [126] (signed word) divr16s::return#1 ← - (signed word)(word) divr16s::resultu#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (word) divr16s::resultu#0 and assignment [121] (word) divr16s::resultu#0 ← (word) divr16u::return#2
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (word) divr16u::return#2 and assignment [120] (word) divr16u::return#2 ← (word) divr16u::return#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte*) utoa::buffer#0 from unused block utoa::@9
Eliminating variable (byte*) utoa::buffer#1 from unused block utoa::@9
Eliminating variable (byte*) utoa::buffer#2 from unused block utoa::@9
Removing unused block utoa::@6
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing unused block utoa::@2
Removing unused block utoa::@7
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing unused block utoa::@3
Removing unused block utoa::@8
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing unused block utoa::@4
Removing unused block utoa::@9
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 0 in [8] (bool~) utoa::$12 ← (number) 0 != (byte) utoa::started#2
Adding number conversion cast (unumber) $10 in [89] if((byte) divr16u::i#1!=(number) $10) goto divr16u::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast $10
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $10
Successful SSA optimization PassNFinalizeNumberTypeConversions
Identical Phi Values (byte) utoa::max_digits#7 (const byte) utoa::max_digits#1
Identical Phi Values (word*) utoa::digit_values#8 (const word*) utoa::digit_values#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) utoa::$12 [9] if((byte) 0!=(byte) utoa::started#2) goto utoa::@14
Simple Condition (bool~) divr16s::$0 [96] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1
Simple Condition (bool~) utoa::$6 [158] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@14
Simple Condition (bool~) divr16s::$1 [159] if((const signed word) divr16s::rem#0<(signed byte) 0) goto divr16s::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [3] (byte~) utoa::$4 ← (const byte) utoa::max_digits#1 - (byte) 1
Constant right-side identified [99] (signed word~) divr16s::$7 ← - (const signed word) divr16s::rem#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) utoa::$4 = utoa::max_digits#1-1
Constant (const signed word) divr16s::$7 = -divr16s::rem#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) divr16s::remu#1 = (word)divr16s::$7
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [159] if((const signed word) divr16s::rem#0<(signed byte) 0) goto divr16s::@1
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero -(const signed word) divr16s::rem#0 in 
Simplifying constant evaluating to zero (word)(const signed word) divr16s::$7 in 
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused constant (const byte) utoa::max_digits#2
Eliminating unused constant (const word*) utoa::digit_values#2
Eliminating unused constant (const byte) utoa::max_digits#3
Eliminating unused constant (const word*) utoa::digit_values#3
Eliminating unused constant (const byte) utoa::max_digits#4
Eliminating unused constant (const word*) utoa::digit_values#4
Eliminating unused constant (const signed word) divr16s::rem#0
Eliminating unused constant (const signed word) divr16s::$7
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const word*) RADIX_BINARY_VALUES
Eliminating unused constant (const word*) RADIX_OCTAL_VALUES
Eliminating unused constant (const word*) RADIX_HEXADECIMAL_VALUES
Successful SSA optimization PassNEliminateUnusedVars
Inlining Noop Cast [63] (word~) mul16s::$13 ← (word)(signed word) mul16s::b#0 keeping mul16s::b#0
Inlining Noop Cast [69] (word~) mul16s::$14 ← (word)(signed word) mul16s::a#0 keeping mul16s::a#0
Inlining Noop Cast [93] (word) divr16s::dividendu#2 ← (word)(signed word) divr16s::dividend#0 keeping divr16s::dividend#0
Inlining Noop Cast [99] (word) divr16s::divisoru#2 ← (word)(signed word) divr16s::divisor#0 keeping divr16s::divisor#0
Inlining Noop Cast [106] (signed word) rem16s#0 ← (signed word)(word) rem16u#0 keeping rem16u#0
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [92] (word) divr16s::dividendu#1 ← (word)(signed word~) divr16s::$6 keeping divr16s::dividendu#1
Inlining Noop Cast [97] (word) divr16s::divisoru#1 ← (word)(signed word~) divr16s::$8 keeping divr16s::divisoru#1
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [3] (byte~) utoa::$10 ← (byte) utoa::digit#2 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [117] (signed word~) main::$12 ← (signed word) lasttest#13 * (const byte) SIZEOF_SIGNED_WORD
Rewriting multiplication to use shift [131] (signed word~) main::$13 ← (signed word) primeptr#7 * (const byte) SIZEOF_SIGNED_WORD
Rewriting multiplication to use shift [142] (signed word~) main::$14 ← (signed word) lastprime#1 * (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) utoa::started#0
Inlining constant with var siblings (const byte) utoa::digit#0
Inlining constant with var siblings (const byte) utoa::started#1
Inlining constant with var siblings (const byte*) utoa::buffer#5
Inlining constant with var siblings (const byte) utoa_append::digit#0
Inlining constant with var siblings (const byte*) print_str::str#1
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte) print_char::ch#2
Inlining constant with var siblings (const byte) print_char::ch#3
Inlining constant with var siblings (const dword) mul16u::res#0
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const byte) divr16u::i#0
Inlining constant with var siblings (const byte) divr16s::neg#0
Inlining constant with var siblings (const byte) divr16s::neg#1
Inlining constant with var siblings (const word) divr16s::remu#2
Inlining constant with var siblings (const word) divr16s::remu#1
Inlining constant with var siblings (const signed word) testnum#0
Inlining constant with var siblings (const signed word) lasttest#0
Inlining constant with var siblings (const signed word) lastprime#0
Inlining constant with var siblings (const signed word) primeptr#0
Inlining constant with var siblings (const signed word) primeptr#2
Constant inlined utoa_append::digit#0 = (byte) 0
Constant inlined utoa::digit_values#1 = (const word*) RADIX_DECIMAL_VALUES
Constant inlined divr16u::i#0 = (byte) 0
Constant inlined lastprime#0 = (signed byte) 2
Constant inlined primeptr#2 = (signed byte) 2
Constant inlined primeptr#0 = (signed byte) 2
Constant inlined main::$10 = (byte) 1*(const byte) SIZEOF_SIGNED_WORD
Constant inlined divr16s::neg#1 = (byte) 1
Constant inlined lasttest#0 = (signed byte) 2
Constant inlined main::$11 = (byte) 2*(const byte) SIZEOF_SIGNED_WORD
Constant inlined divr16s::neg#0 = (byte) 0
Constant inlined divr16u::quotient#0 = (word) 0
Constant inlined mul16u::res#0 = (dword) 0
Constant inlined utoa::digit#0 = (byte) 0
Constant inlined utoa::$4 = (const byte) utoa::max_digits#1-(byte) 1
Constant inlined testnum#0 = (signed byte) 3
Constant inlined utoa::started#1 = (byte) 1
Constant inlined utoa::started#0 = (byte) 0
Constant inlined print_char::ch#3 = (byte) ' '
Constant inlined print_char::ch#2 = (byte) ' '
Constant inlined utoa::buffer#5 = (const byte*) decimal_digits
Constant inlined print_char::ch#1 = (byte) '-'
Constant inlined print_str::str#1 = (const byte*) decimal_digits
Constant inlined divr16s::remu#1 = (word) 0
Constant inlined divr16s::remu#2 = (word) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(primenum+1*SIZEOF_SIGNED_WORD)
Consolidated array index constant in *(primenum+2*SIZEOF_SIGNED_WORD)
Successful SSA optimization Pass2ConstantAdditionElimination
Identical Phi Values (word) divr16s::remu#3 (word) 0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const word) divr16u::rem#3 = 0
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte) SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings (const word) divr16u::rem#3
Constant inlined divr16u::rem#3 = (word) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting utoa::@17(between utoa::@16 and utoa::@13)
Added new block during phi lifting mul16u::@6(between mul16u::@2 and mul16u::@4)
Added new block during phi lifting mul16s::@6(between mul16s::@5 and mul16s::@1)
Added new block during phi lifting mul16s::@7(between mul16s::@1 and mul16s::@2)
Added new block during phi lifting divr16u::@7(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@8(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@9(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting main::@12(between main::@11 and main::@1)
Added new block during phi lifting main::@13(between main::@8 and main::@2)
Added new block during phi lifting main::@14(between main::@4 and main::@3)
Added new block during phi lifting main::@15(between main::@9 and main::@4)
Adding NOP phi() at start of print_sint_decimal::@6
Adding NOP phi() at start of print_sint_decimal::@7
Adding NOP phi() at start of print_str
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa::@1
Adding NOP phi() at start of div16s::@1
Adding NOP phi() at start of divr16s::@10
Adding NOP phi() at start of mul16u::@3
CALL GRAPH
Calls in [main] to mul16s:8 div16s:23 print_sint_decimal:35 print_char:37 
Calls in [print_sint_decimal] to print_char:55 utoa:59 print_str:61 print_char:65 
Calls in [print_str] to print_char:75 
Calls in [utoa] to utoa_append:104 
Calls in [div16s] to divr16s:121 
Calls in [divr16s] to divr16u:134 
Calls in [mul16s] to mul16u:177 

Created 40 initial phi equivalence classes
Coalesced [14] lasttest#22 ← lasttest#1
Coalesced [17] testnum#23 ← testnum#1
Coalesced [27] testnum#25 ← testnum#2
Coalesced [36] print_char_cursor#46 ← print_char_cursor#21
Coalesced [40] lasttest#21 ← lasttest#19
Coalesced [41] testnum#22 ← testnum#11
Coalesced [42] lastprime#21 ← lastprime#1
Coalesced [43] print_char_cursor#50 ← print_char_cursor#21
Coalesced [44] primeptr#17 ← primeptr#10
Coalesced [45] testnum#24 ← testnum#11
Coalesced [46] primeptr#18 ← primeptr#1
Coalesced (already) [47] testnum#26 ← testnum#10
Coalesced (already) [48] lasttest#23 ← lasttest#13
Coalesced (already) [54] print_char_cursor#48 ← print_char_cursor#41
Coalesced [56] print_sint_decimal::w#9 ← print_sint_decimal::w#1
Coalesced (already) [64] print_char_cursor#47 ← print_char_cursor#41
Coalesced [67] print_sint_decimal::w#8 ← print_sint_decimal::w#0
Coalesced [73] print_char::ch#5 ← print_char::ch#0
Coalesced (already) [74] print_char_cursor#49 ← print_char_cursor#21
Coalesced [77] print_str::str#6 ← print_str::str#0
Coalesced [80] utoa::value#17 ← utoa::value#1
Coalesced [92] utoa::value#18 ← utoa::value#2
Coalesced [93] utoa::started#6 ← utoa::started#2
Coalesced [94] utoa::buffer#23 ← utoa::buffer#11
Coalesced [97] utoa::digit#7 ← utoa::digit#1
Coalesced (already) [98] utoa::value#16 ← utoa::value#6
Coalesced (already) [99] utoa::started#5 ← utoa::started#4
Coalesced (already) [100] utoa::buffer#22 ← utoa::buffer#14
Coalesced [108] utoa::value#19 ← utoa::value#0
Coalesced [109] utoa::buffer#24 ← utoa::buffer#4
Coalesced [110] utoa_append::value#6 ← utoa_append::value#0
Coalesced [117] utoa_append::value#7 ← utoa_append::value#1
Coalesced [118] utoa_append::digit#5 ← utoa_append::digit#1
Coalesced [130] divr16s::neg#10 ← divr16s::neg#3
Coalesced [137] rem16s#31 ← rem16s#1
Coalesced [144] divr16s::neg#9 ← divr16s::neg#2
Coalesced [147] divr16u::dividend#8 ← divr16u::dividend#1
Coalesced [154] divr16u::rem#13 ← divr16u::rem#1
Coalesced [161] divr16u::rem#15 ← divr16u::rem#2
Coalesced [162] divr16u::return#6 ← divr16u::quotient#2
Coalesced [168] divr16u::rem#11 ← divr16u::rem#10
Coalesced [169] divr16u::dividend#9 ← divr16u::dividend#0
Coalesced [170] divr16u::quotient#9 ← divr16u::return#0
Coalesced [171] divr16u::i#7 ← divr16u::i#1
Coalesced [172] divr16u::rem#14 ← divr16u::rem#5
Coalesced [173] divr16u::return#5 ← divr16u::quotient#1
Coalesced [174] divr16u::rem#12 ← divr16u::rem#0
Coalesced [184] mul16s::m#7 ← mul16s::m#1
Coalesced [190] mul16s::m#10 ← mul16s::m#2
Coalesced [194] mul16s::m#9 ← mul16s::m#5
Coalesced [195] mul16s::m#8 ← mul16s::m#0
Coalesced [197] mul16u::a#7 ← mul16u::a#1
Coalesced [198] mul16u::mb#6 ← mul16u::mb#0
Coalesced [206] mul16u::res#9 ← mul16u::res#1
Coalesced [210] mul16u::a#8 ← mul16u::a#0
Coalesced [211] mul16u::res#7 ← mul16u::res#6
Coalesced [212] mul16u::mb#7 ← mul16u::mb#1
Coalesced (already) [213] mul16u::res#8 ← mul16u::res#2
Coalesced down to 26 phi equivalence classes
Culled Empty Block (label) main::@12
Culled Empty Block (label) main::@14
Culled Empty Block (label) main::@15
Culled Empty Block (label) main::@13
Culled Empty Block (label) print_sint_decimal::@5
Culled Empty Block (label) print_sint_decimal::@7
Culled Empty Block (label) utoa::@1
Culled Empty Block (label) utoa::@5
Culled Empty Block (label) utoa::@17
Culled Empty Block (label) div16s::@1
Culled Empty Block (label) divr16s::@10
Culled Empty Block (label) divr16u::@7
Culled Empty Block (label) divr16u::@9
Culled Empty Block (label) divr16u::@8
Culled Empty Block (label) mul16s::@7
Culled Empty Block (label) mul16s::@6
Culled Empty Block (label) mul16u::@3
Culled Empty Block (label) mul16u::@6
Renumbering block utoa::@10 to utoa::@1
Renumbering block utoa::@11 to utoa::@2
Renumbering block utoa::@12 to utoa::@3
Renumbering block utoa::@13 to utoa::@4
Renumbering block utoa::@14 to utoa::@5
Renumbering block utoa::@15 to utoa::@6
Renumbering block utoa::@16 to utoa::@7
Renumbering block print_sint_decimal::@6 to print_sint_decimal::@5
Renumbering block mul16u::@4 to mul16u::@3
Renumbering block mul16u::@5 to mul16u::@4
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of print_sint_decimal::@3
Adding NOP phi() at start of print_sint_decimal::@5
Adding NOP phi() at start of print_sint_decimal::@1
Adding NOP phi() at start of print_str
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa_append
Adding NOP phi() at start of divr16u

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const signed word*) primenum+(byte) 1*(const byte) SIZEOF_SIGNED_WORD) ← (signed byte) 2
  [1] *((const signed word*) primenum+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (signed byte) 3
  to:main::@1
main::@1: scope:[main]  from main main::@11
  [2] (byte*) print_char_cursor#41 ← phi( main/(const byte*) print_screen#0 main::@11/(byte*) print_char_cursor#21 )
  [2] (signed word) lastprime#17 ← phi( main/(signed byte) 2 main::@11/(signed word) lastprime#1 )
  [2] (signed word) testnum#15 ← phi( main/(signed byte) 3 main::@11/(signed word) testnum#11 )
  [2] (signed word) lasttest#13 ← phi( main/(signed byte) 2 main::@11/(signed word) lasttest#19 )
  [3] (signed word~) main::$12 ← (signed word) lasttest#13 << (byte) 1
  [4] (signed word*~) main::$16 ← (const signed word*) primenum + (signed word~) main::$12
  [5] (signed word) main::p#0 ← *((signed word*~) main::$16)
  [6] (signed word) mul16s::a#0 ← (signed word) main::p#0
  [7] (signed word) mul16s::b#0 ← (signed word) main::p#0
  [8] call mul16s 
  [9] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0
  to:main::@8
main::@8: scope:[main]  from main::@1
  [10] (signed dword~) main::$0 ← (signed dword) mul16s::return#2
  [11] (signed word~) main::$15 ← (signed word)(signed dword~) main::$0
  [12] if((signed word) testnum#15<=(signed word~) main::$15) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@8
  [13] (signed word) lasttest#1 ← ++ (signed word) lasttest#13
  to:main::@2
main::@2: scope:[main]  from main::@7 main::@8
  [14] (signed word) lasttest#19 ← phi( main::@7/(signed word) lasttest#1 main::@8/(signed word) lasttest#13 )
  [15] (signed word) testnum#1 ← (signed word) testnum#15 + (signed byte) 2
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [16] (signed word) testnum#10 ← phi( main::@2/(signed word) testnum#1 main::@4/(signed word) testnum#11 )
  [16] (signed word) primeptr#7 ← phi( main::@2/(signed byte) 2 main::@4/(signed word) primeptr#10 )
  [17] (signed word~) main::$13 ← (signed word) primeptr#7 << (byte) 1
  [18] (signed word) div16s::dividend#0 ← (signed word) testnum#10
  [19] (signed word*~) main::$17 ← (const signed word*) primenum + (signed word~) main::$13
  [20] (signed word) div16s::divisor#0 ← *((signed word*~) main::$17)
  [21] call div16s 
  to:main::@9
main::@9: scope:[main]  from main::@3
  [22] (signed word) primeptr#1 ← ++ (signed word) primeptr#7
  [23] if((signed word) rem16s#10!=(signed byte) 0) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@9
  [24] (signed word) testnum#2 ← (signed word) testnum#10 + (signed byte) 2
  to:main::@4
main::@4: scope:[main]  from main::@5 main::@9
  [25] (signed word) testnum#11 ← phi( main::@5/(signed word) testnum#2 main::@9/(signed word) testnum#10 )
  [25] (signed word) primeptr#10 ← phi( main::@5/(signed byte) 2 main::@9/(signed word) primeptr#1 )
  [26] if((signed word) primeptr#10<=(signed word) lasttest#19) goto main::@3
  to:main::@6
main::@6: scope:[main]  from main::@4
  [27] (signed word) lastprime#1 ← ++ (signed word) lastprime#17
  [28] (signed word~) main::$14 ← (signed word) lastprime#1 << (byte) 1
  [29] (signed word*~) main::$18 ← (const signed word*) primenum + (signed word~) main::$14
  [30] *((signed word*~) main::$18) ← (signed word) testnum#11
  [31] (signed word) print_sint_decimal::w#1 ← (signed word) testnum#11
  [32] call print_sint_decimal 
  to:main::@10
main::@10: scope:[main]  from main::@6
  [33] phi()
  [34] call print_char 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [35] if((signed word) lastprime#1<(signed word) $3e8) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  [36] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from main::@10 print_sint_decimal::@1 print_sint_decimal::@3 print_str::@2
  [37] (byte*) print_char_cursor#20 ← phi( main::@10/(byte*) print_char_cursor#21 print_sint_decimal::@1/(byte*) print_char_cursor#41 print_sint_decimal::@3/(byte*) print_char_cursor#41 print_str::@2/(byte*) print_char_cursor#21 )
  [37] (byte) print_char::ch#4 ← phi( main::@10/(byte) ' ' print_sint_decimal::@1/(byte) '-' print_sint_decimal::@3/(byte) ' ' print_str::@2/(byte) print_char::ch#0 )
  [38] *((byte*) print_char_cursor#20) ← (byte) print_char::ch#4
  [39] (byte*) print_char_cursor#21 ← ++ (byte*) print_char_cursor#20
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [40] return 
  to:@return

(void()) print_sint_decimal((signed word) print_sint_decimal::w)
print_sint_decimal: scope:[print_sint_decimal]  from main::@6
  [41] if((signed word) print_sint_decimal::w#1<(signed byte) 0) goto print_sint_decimal::@1
  to:print_sint_decimal::@3
print_sint_decimal::@3: scope:[print_sint_decimal]  from print_sint_decimal
  [42] phi()
  [43] call print_char 
  to:print_sint_decimal::@2
print_sint_decimal::@2: scope:[print_sint_decimal]  from print_sint_decimal::@3 print_sint_decimal::@4
  [44] (signed word) print_sint_decimal::w#4 ← phi( print_sint_decimal::@4/(signed word) print_sint_decimal::w#0 print_sint_decimal::@3/(signed word) print_sint_decimal::w#1 )
  [45] (word) utoa::value#1 ← (word)(signed word) print_sint_decimal::w#4
  [46] call utoa 
  to:print_sint_decimal::@5
print_sint_decimal::@5: scope:[print_sint_decimal]  from print_sint_decimal::@2
  [47] phi()
  [48] call print_str 
  to:print_sint_decimal::@return
print_sint_decimal::@return: scope:[print_sint_decimal]  from print_sint_decimal::@5
  [49] return 
  to:@return
print_sint_decimal::@1: scope:[print_sint_decimal]  from print_sint_decimal
  [50] phi()
  [51] call print_char 
  to:print_sint_decimal::@4
print_sint_decimal::@4: scope:[print_sint_decimal]  from print_sint_decimal::@1
  [52] (signed word) print_sint_decimal::w#0 ← - (signed word) print_sint_decimal::w#1
  to:print_sint_decimal::@2

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from print_sint_decimal::@5
  [53] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [54] (byte*) print_str::str#2 ← phi( print_str/(const byte*) decimal_digits print_str::@3/(byte*) print_str::str#0 )
  [55] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [56] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [57] (byte) print_char::ch#0 ← *((byte*) print_str::str#2)
  [58] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [59] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2
  to:print_str::@1

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from print_sint_decimal::@2
  [60] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [61] (byte*) utoa::buffer#11 ← phi( utoa::@4/(byte*) utoa::buffer#14 utoa/(const byte*) decimal_digits )
  [61] (byte) utoa::started#2 ← phi( utoa::@4/(byte) utoa::started#4 utoa/(byte) 0 )
  [61] (word) utoa::value#2 ← phi( utoa::@4/(word) utoa::value#6 utoa/(word) utoa::value#1 )
  [61] (byte) utoa::digit#2 ← phi( utoa::@4/(byte) utoa::digit#1 utoa/(byte) 0 )
  [62] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [63] (byte~) utoa::$11 ← (byte)(word) utoa::value#2
  [64] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [65] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  [66] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [67] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [68] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [69] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10)
  [70] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [71] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [72] (byte*) utoa::buffer#14 ← phi( utoa::@7/(byte*) utoa::buffer#11 utoa::@6/(byte*) utoa::buffer#4 )
  [72] (byte) utoa::started#4 ← phi( utoa::@7/(byte) utoa::started#2 utoa::@6/(byte) 1 )
  [72] (word) utoa::value#6 ← phi( utoa::@7/(word) utoa::value#2 utoa::@6/(word) utoa::value#0 )
  [73] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [74] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [75] (word) utoa_append::value#0 ← (word) utoa::value#2
  [76] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [77] call utoa_append 
  [78] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [79] (word) utoa::value#0 ← (word) utoa_append::return#0
  [80] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11
  to:utoa::@4

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [81] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [82] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [82] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [83] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [84] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [85] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [86] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [87] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1

(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
div16s: scope:[div16s]  from main::@3
  [88] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0
  [89] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0
  [90] call divr16s 
  to:div16s::@return
div16s::@return: scope:[div16s]  from div16s
  [91] return 
  to:@return

(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
divr16s: scope:[divr16s]  from div16s
  [92] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1
  to:divr16s::@6
divr16s::@6: scope:[divr16s]  from divr16s
  [93] (word) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0
  to:divr16s::@2
divr16s::@2: scope:[divr16s]  from divr16s::@1 divr16s::@6
  [94] (word) divr16s::dividendu#3 ← phi( divr16s::@1/(word) divr16s::dividendu#7 divr16s::@6/(word) divr16s::dividendu#8 )
  [94] (byte) divr16s::neg#3 ← phi( divr16s::@1/(byte) 1 divr16s::@6/(byte) 0 )
  [95] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3
  to:divr16s::@7
divr16s::@7: scope:[divr16s]  from divr16s::@2
  [96] (word) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0
  to:divr16s::@4
divr16s::@4: scope:[divr16s]  from divr16s::@3 divr16s::@7
  [97] (byte) divr16s::neg#4 ← phi( divr16s::@3/(byte) divr16s::neg#2 divr16s::@7/(byte) divr16s::neg#3 )
  [97] (word) divr16s::divisoru#3 ← phi( divr16s::@3/(word) divr16s::divisoru#4 divr16s::@7/(word) divr16s::divisoru#5 )
  [98] (word) divr16u::dividend#1 ← (word) divr16s::dividendu#3
  [99] (word) divr16u::divisor#0 ← (word) divr16s::divisoru#3
  [100] call divr16u 
  to:divr16s::@9
divr16s::@9: scope:[divr16s]  from divr16s::@4
  [101] if((byte) divr16s::neg#4==(byte) 0) goto divr16s::@5
  to:divr16s::@8
divr16s::@8: scope:[divr16s]  from divr16s::@9
  [102] (signed word) rem16s#1 ← - (signed word)(word) rem16u#0
  to:divr16s::@return
divr16s::@return: scope:[divr16s]  from divr16s::@5 divr16s::@8
  [103] (signed word) rem16s#10 ← phi( divr16s::@5/(signed word) rem16s#30 divr16s::@8/(signed word) rem16s#1 )
  [104] return 
  to:@return
divr16s::@5: scope:[divr16s]  from divr16s::@9
  [105] (signed word) rem16s#30 ← (signed word)(word) rem16u#0
  to:divr16s::@return
divr16s::@3: scope:[divr16s]  from divr16s::@2
  [106] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0
  [107] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1
  [108] (word) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1
  to:divr16s::@4
divr16s::@1: scope:[divr16s]  from divr16s
  [109] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0
  [110] (word) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1
  to:divr16s::@2

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from divr16s::@4
  [111] phi()
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [112] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [112] (word) divr16u::quotient#3 ← phi( divr16u/(word) 0 divr16u::@3/(word) divr16u::return#0 )
  [112] (word) divr16u::dividend#2 ← phi( divr16u/(word) divr16u::dividend#1 divr16u::@3/(word) divr16u::dividend#0 )
  [112] (word) divr16u::rem#4 ← phi( divr16u/(word) 0 divr16u::@3/(word) divr16u::rem#10 )
  [113] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1
  [114] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2
  [115] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [116] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [117] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [118] (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [119] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1
  [120] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [121] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [122] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [123] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [124] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [124] (word) divr16u::rem#10 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 )
  [125] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [126] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [127] (word) rem16u#0 ← (word) divr16u::rem#10
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [128] return 
  to:@return

(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
mul16s: scope:[mul16s]  from main::@1
  [129] (word) mul16u::a#1 ← (word)(signed word) mul16s::a#0
  [130] (word) mul16u::b#0 ← (word)(signed word) mul16s::b#0
  [131] call mul16u 
  [132] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  to:mul16s::@5
mul16s::@5: scope:[mul16s]  from mul16s
  [133] (dword) mul16s::m#0 ← (dword) mul16u::return#2
  [134] if((signed word) mul16s::a#0>=(signed byte) 0) goto mul16s::@1
  to:mul16s::@3
mul16s::@3: scope:[mul16s]  from mul16s::@5
  [135] (word~) mul16s::$6 ← > (dword) mul16s::m#0
  [136] (word~) mul16s::$11 ← (word~) mul16s::$6 - (word)(signed word) mul16s::b#0
  [137] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$11
  to:mul16s::@1
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@5
  [138] (dword) mul16s::m#5 ← phi( mul16s::@3/(dword) mul16s::m#1 mul16s::@5/(dword) mul16s::m#0 )
  [139] if((signed word) mul16s::b#0>=(signed byte) 0) goto mul16s::@2
  to:mul16s::@4
mul16s::@4: scope:[mul16s]  from mul16s::@1
  [140] (word~) mul16s::$9 ← > (dword) mul16s::m#5
  [141] (word~) mul16s::$12 ← (word~) mul16s::$9 - (word)(signed word) mul16s::a#0
  [142] (dword) mul16s::m#2 ← (dword) mul16s::m#5 hi= (word~) mul16s::$12
  to:mul16s::@2
mul16s::@2: scope:[mul16s]  from mul16s::@1 mul16s::@4
  [143] (dword) mul16s::m#4 ← phi( mul16s::@1/(dword) mul16s::m#5 mul16s::@4/(dword) mul16s::m#2 )
  [144] (signed dword) mul16s::return#0 ← (signed dword)(dword) mul16s::m#4
  to:mul16s::@return
mul16s::@return: scope:[mul16s]  from mul16s::@2
  [145] return 
  to:@return

(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
mul16u: scope:[mul16u]  from mul16s
  [146] (dword) mul16u::mb#0 ← (dword)(word) mul16u::b#0
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [147] (dword) mul16u::mb#2 ← phi( mul16u/(dword) mul16u::mb#0 mul16u::@3/(dword) mul16u::mb#1 )
  [147] (dword) mul16u::res#2 ← phi( mul16u/(dword) 0 mul16u::@3/(dword) mul16u::res#6 )
  [147] (word) mul16u::a#2 ← phi( mul16u/(word) mul16u::a#1 mul16u::@3/(word) mul16u::a#0 )
  [148] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [149] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [150] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1
  [151] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [152] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [153] (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#2 mul16u::@4/(dword) mul16u::res#1 )
  [154] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte) 1
  [155] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1
  to:mul16u::@1

null depth in calling loop Loop head: print_str::@1 tails: print_str::@3 blocks: print_str::@3 print_str::@2 print_str::@1  in scope print_char

VARIABLE REGISTER WEIGHTS
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(signed word) div16s::dividend
(signed word) div16s::dividend#0 367.33333333333337
(signed word) div16s::divisor
(signed word) div16s::divisor#0 551.0
(signed word) div16s::return
(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
(signed word) divr16s::dividend
(signed word) divr16s::dividend#0 7001.0
(word) divr16s::dividendu
(signed word) divr16s::dividendu#1 10001.0
(word) divr16s::dividendu#3 4286.142857142857
(word) divr16s::dividendu#7 20002.0
(word) divr16s::dividendu#8 20002.0
(signed word) divr16s::divisor
(signed word) divr16s::divisor#0 3000.4285714285716
(word) divr16s::divisoru
(signed word) divr16s::divisoru#1 5000.5
(word) divr16s::divisoru#3 15001.5
(word) divr16s::divisoru#4 20002.0
(word) divr16s::divisoru#5 20002.0
(byte) divr16s::neg
(byte) divr16s::neg#2 10001.0
(byte) divr16s::neg#3 5000.5
(byte) divr16s::neg#4 7500.75
(signed word) divr16s::rem
(word) divr16s::remu
(word) divr16s::resultu
(signed word) divr16s::return
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 2.00000002E8
(byte~) divr16u::$2 2.00000002E8
(word) divr16u::dividend
(word) divr16u::dividend#0 2.500000025E7
(word) divr16u::dividend#1 36667.33333333333
(word) divr16u::dividend#2 4.287142914285715E7
(word) divr16u::divisor
(word) divr16u::divisor#0 1.1765294294117648E7
(byte) divr16u::i
(byte) divr16u::i#1 1.500000015E8
(byte) divr16u::i#2 1.5384615538461538E7
(word) divr16u::quotient
(word) divr16u::quotient#1 1.500000015E8
(word) divr16u::quotient#2 1.00000001E8
(word) divr16u::quotient#3 2.500000025E7
(word) divr16u::rem
(word) divr16u::rem#0 7.500000075E7
(word) divr16u::rem#1 2.00000002E8
(word) divr16u::rem#10 1.0003333466666667E8
(word) divr16u::rem#2 2.00000002E8
(word) divr16u::rem#4 2.00000002E8
(word) divr16u::rem#5 1.00000001E8
(word) divr16u::return
(word) divr16u::return#0 1.00000001E8
(signed word) lastprime
(signed word) lastprime#1 4.888888888888889
(signed word) lastprime#17 0.88
(signed word) lasttest
(signed word) lasttest#1 22.0
(signed word) lasttest#13 4.0
(signed word) lasttest#19 6.090909090909091
(void()) main()
(signed dword~) main::$0 11.0
(signed word~) main::$12 22.0
(signed word~) main::$13 101.0
(signed word~) main::$14 22.0
(signed word~) main::$15 22.0
(signed word*~) main::$16 22.0
(signed word*~) main::$17 202.0
(signed word*~) main::$18 22.0
(signed word) main::p
(signed word) main::p#0 16.5
(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
(word~) mul16s::$11 202.0
(word~) mul16s::$12 202.0
(word~) mul16s::$6 202.0
(word~) mul16s::$9 202.0
(signed word) mul16s::a
(signed word) mul16s::a#0 8.0
(signed word) mul16s::b
(signed word) mul16s::b#0 10.181818181818182
(dword) mul16s::m
(dword) mul16s::m#0 101.0
(dword) mul16s::m#1 202.0
(dword) mul16s::m#2 202.0
(dword) mul16s::m#4 202.0
(dword) mul16s::m#5 126.25
(signed dword) mul16s::return
(signed dword) mul16s::return#0 37.33333333333333
(signed dword) mul16s::return#2 22.0
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(byte~) mul16u::$1 200002.0
(word) mul16u::a
(word) mul16u::a#0 100001.0
(word) mul16u::a#1 367.33333333333337
(word) mul16u::a#2 66834.16666666666
(word) mul16u::b
(word) mul16u::b#0 101.0
(dword) mul16u::mb
(dword) mul16u::mb#0 2002.0
(dword) mul16u::mb#1 200002.0
(dword) mul16u::mb#2 43000.57142857143
(dword) mul16u::res
(dword) mul16u::res#1 200002.0
(dword) mul16u::res#2 50017.33333333333
(dword) mul16u::res#6 100001.0
(dword) mul16u::return
(dword) mul16u::return#2 202.0
(signed word) primeptr
(signed word) primeptr#1 101.0
(signed word) primeptr#10 151.5
(signed word) primeptr#7 50.5
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 200002.0
(byte) print_char::ch#4 1100002.0
(byte*) print_char_cursor
(byte*) print_char_cursor#20 1050108.0
(byte*) print_char_cursor#21 50001.09090909091
(byte*) print_char_cursor#41 6.454545454545455
(byte*) print_line_cursor
(byte*) print_screen
(void()) print_sint_decimal((signed word) print_sint_decimal::w)
(signed word) print_sint_decimal::w
(signed word) print_sint_decimal::w#0 202.0
(signed word) print_sint_decimal::w#1 52.33333333333333
(signed word) print_sint_decimal::w#4 202.0
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 200002.0
(byte*) print_str::str#2 100001.0
(signed word) rem16s
(signed word) rem16s#1 20002.0
(signed word) rem16s#10 3350.5
(signed word) rem16s#30 20002.0
(word) rem16u
(word) rem16u#0 25000.25
(signed word) testnum
(signed word) testnum#1 22.0
(signed word) testnum#10 51.875
(signed word) testnum#11 30.545454545454547
(signed word) testnum#15 2.5384615384615383
(signed word) testnum#2 202.0
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(byte~) utoa::$10 200002.0
(byte~) utoa::$11 2002.0
(byte*) utoa::buffer
(byte*) utoa::buffer#11 28714.714285714286
(byte*) utoa::buffer#14 150001.5
(byte*) utoa::buffer#3 2002.0
(byte*) utoa::buffer#4 200002.0
(byte) utoa::digit
(byte) utoa::digit#1 200002.0
(byte) utoa::digit#2 28571.714285714286
(word) utoa::digit_value
(word) utoa::digit_value#0 60000.600000000006
(word*) utoa::digit_values
(byte) utoa::max_digits
(byte) utoa::radix
(byte) utoa::started
(byte) utoa::started#2 50000.5
(byte) utoa::started#4 100001.0
(word) utoa::value
(word) utoa::value#0 100001.0
(word) utoa::value#1 551.0
(word) utoa::value#2 57286.42857142857
(word) utoa::value#6 150001.5
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0 137500.25
(byte) utoa_append::digit
(byte) utoa_append::digit#1 1.000000001E9
(byte) utoa_append::digit#2 1.0005000015E9
(word) utoa_append::return
(word) utoa_append::return#0 200002.0
(word) utoa_append::sub
(word) utoa_append::sub#0 3.333500005E8
(word) utoa_append::value
(word) utoa_append::value#0 366667.3333333334
(word) utoa_append::value#1 2.000000002E9
(word) utoa_append::value#2 5.0018333416666675E8

Initial phi equivalence classes
[ lasttest#13 lasttest#19 lasttest#1 ]
[ lastprime#17 lastprime#1 ]
[ primeptr#7 primeptr#10 primeptr#1 ]
[ testnum#10 testnum#1 testnum#15 testnum#11 testnum#2 ]
[ print_char::ch#4 print_char::ch#0 ]
[ print_char_cursor#20 print_char_cursor#41 print_char_cursor#21 ]
[ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 ]
[ print_str::str#2 print_str::str#0 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ]
[ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ]
[ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
[ rem16s#10 rem16s#30 rem16s#1 ]
[ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ]
[ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Added variable main::$12 to live range equivalence class [ main::$12 ]
Added variable main::$16 to live range equivalence class [ main::$16 ]
Added variable main::p#0 to live range equivalence class [ main::p#0 ]
Added variable mul16s::a#0 to live range equivalence class [ mul16s::a#0 ]
Added variable mul16s::b#0 to live range equivalence class [ mul16s::b#0 ]
Added variable mul16s::return#2 to live range equivalence class [ mul16s::return#2 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::$15 to live range equivalence class [ main::$15 ]
Added variable main::$13 to live range equivalence class [ main::$13 ]
Added variable div16s::dividend#0 to live range equivalence class [ div16s::dividend#0 ]
Added variable main::$17 to live range equivalence class [ main::$17 ]
Added variable div16s::divisor#0 to live range equivalence class [ div16s::divisor#0 ]
Added variable main::$14 to live range equivalence class [ main::$14 ]
Added variable main::$18 to live range equivalence class [ main::$18 ]
Added variable utoa::$11 to live range equivalence class [ utoa::$11 ]
Added variable utoa::buffer#3 to live range equivalence class [ utoa::buffer#3 ]
Added variable utoa::$10 to live range equivalence class [ utoa::$10 ]
Added variable utoa::digit_value#0 to live range equivalence class [ utoa::digit_value#0 ]
Added variable utoa_append::buffer#0 to live range equivalence class [ utoa_append::buffer#0 ]
Added variable utoa_append::sub#0 to live range equivalence class [ utoa_append::sub#0 ]
Added variable utoa_append::return#0 to live range equivalence class [ utoa_append::return#0 ]
Added variable divr16s::dividend#0 to live range equivalence class [ divr16s::dividend#0 ]
Added variable divr16s::divisor#0 to live range equivalence class [ divr16s::divisor#0 ]
Added variable divr16u::divisor#0 to live range equivalence class [ divr16u::divisor#0 ]
Added variable divr16s::divisoru#1 to live range equivalence class [ divr16s::divisoru#1 ]
Added variable divr16s::dividendu#1 to live range equivalence class [ divr16s::dividendu#1 ]
Added variable divr16u::$1 to live range equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to live range equivalence class [ divr16u::$2 ]
Added variable rem16u#0 to live range equivalence class [ rem16u#0 ]
Added variable mul16u::b#0 to live range equivalence class [ mul16u::b#0 ]
Added variable mul16u::return#2 to live range equivalence class [ mul16u::return#2 ]
Added variable mul16s::$6 to live range equivalence class [ mul16s::$6 ]
Added variable mul16s::$11 to live range equivalence class [ mul16s::$11 ]
Added variable mul16s::$9 to live range equivalence class [ mul16s::$9 ]
Added variable mul16s::$12 to live range equivalence class [ mul16s::$12 ]
Added variable mul16s::return#0 to live range equivalence class [ mul16s::return#0 ]
Added variable mul16u::$1 to live range equivalence class [ mul16u::$1 ]
Complete equivalence classes
[ lasttest#13 lasttest#19 lasttest#1 ]
[ lastprime#17 lastprime#1 ]
[ primeptr#7 primeptr#10 primeptr#1 ]
[ testnum#10 testnum#1 testnum#15 testnum#11 testnum#2 ]
[ print_char::ch#4 print_char::ch#0 ]
[ print_char_cursor#20 print_char_cursor#41 print_char_cursor#21 ]
[ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 ]
[ print_str::str#2 print_str::str#0 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ]
[ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ]
[ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
[ rem16s#10 rem16s#30 rem16s#1 ]
[ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ]
[ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
[ main::$12 ]
[ main::$16 ]
[ main::p#0 ]
[ mul16s::a#0 ]
[ mul16s::b#0 ]
[ mul16s::return#2 ]
[ main::$0 ]
[ main::$15 ]
[ main::$13 ]
[ div16s::dividend#0 ]
[ main::$17 ]
[ div16s::divisor#0 ]
[ main::$14 ]
[ main::$18 ]
[ utoa::$11 ]
[ utoa::buffer#3 ]
[ utoa::$10 ]
[ utoa::digit_value#0 ]
[ utoa_append::buffer#0 ]
[ utoa_append::sub#0 ]
[ utoa_append::return#0 ]
[ divr16s::dividend#0 ]
[ divr16s::divisor#0 ]
[ divr16u::divisor#0 ]
[ divr16s::divisoru#1 ]
[ divr16s::dividendu#1 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
[ rem16u#0 ]
[ mul16u::b#0 ]
[ mul16u::return#2 ]
[ mul16s::$6 ]
[ mul16s::$11 ]
[ mul16s::$9 ]
[ mul16s::$12 ]
[ mul16s::return#0 ]
[ mul16u::$1 ]
Allocated zp[2]:2 [ lasttest#13 lasttest#19 lasttest#1 ]
Allocated zp[2]:4 [ lastprime#17 lastprime#1 ]
Allocated zp[2]:6 [ primeptr#7 primeptr#10 primeptr#1 ]
Allocated zp[2]:8 [ testnum#10 testnum#1 testnum#15 testnum#11 testnum#2 ]
Allocated zp[1]:10 [ print_char::ch#4 print_char::ch#0 ]
Allocated zp[2]:11 [ print_char_cursor#20 print_char_cursor#41 print_char_cursor#21 ]
Allocated zp[2]:13 [ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 ]
Allocated zp[2]:15 [ print_str::str#2 print_str::str#0 ]
Allocated zp[1]:17 [ utoa::digit#2 utoa::digit#1 ]
Allocated zp[2]:18 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
Allocated zp[1]:20 [ utoa::started#2 utoa::started#4 ]
Allocated zp[2]:21 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
Allocated zp[2]:23 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
Allocated zp[1]:25 [ utoa_append::digit#2 utoa_append::digit#1 ]
Allocated zp[2]:26 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ]
Allocated zp[2]:28 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ]
Allocated zp[1]:30 [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
Allocated zp[2]:31 [ rem16s#10 rem16s#30 rem16s#1 ]
Allocated zp[2]:33 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp[2]:35 [ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ]
Allocated zp[2]:37 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp[1]:39 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp[4]:40 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ]
Allocated zp[2]:44 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ]
Allocated zp[4]:46 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
Allocated zp[4]:50 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated zp[2]:54 [ main::$12 ]
Allocated zp[2]:56 [ main::$16 ]
Allocated zp[2]:58 [ main::p#0 ]
Allocated zp[2]:60 [ mul16s::a#0 ]
Allocated zp[2]:62 [ mul16s::b#0 ]
Allocated zp[4]:64 [ mul16s::return#2 ]
Allocated zp[4]:68 [ main::$0 ]
Allocated zp[2]:72 [ main::$15 ]
Allocated zp[2]:74 [ main::$13 ]
Allocated zp[2]:76 [ div16s::dividend#0 ]
Allocated zp[2]:78 [ main::$17 ]
Allocated zp[2]:80 [ div16s::divisor#0 ]
Allocated zp[2]:82 [ main::$14 ]
Allocated zp[2]:84 [ main::$18 ]
Allocated zp[1]:86 [ utoa::$11 ]
Allocated zp[2]:87 [ utoa::buffer#3 ]
Allocated zp[1]:89 [ utoa::$10 ]
Allocated zp[2]:90 [ utoa::digit_value#0 ]
Allocated zp[2]:92 [ utoa_append::buffer#0 ]
Allocated zp[2]:94 [ utoa_append::sub#0 ]
Allocated zp[2]:96 [ utoa_append::return#0 ]
Allocated zp[2]:98 [ divr16s::dividend#0 ]
Allocated zp[2]:100 [ divr16s::divisor#0 ]
Allocated zp[2]:102 [ divr16u::divisor#0 ]
Allocated zp[2]:104 [ divr16s::divisoru#1 ]
Allocated zp[2]:106 [ divr16s::dividendu#1 ]
Allocated zp[1]:108 [ divr16u::$1 ]
Allocated zp[1]:109 [ divr16u::$2 ]
Allocated zp[2]:110 [ rem16u#0 ]
Allocated zp[2]:112 [ mul16u::b#0 ]
Allocated zp[4]:114 [ mul16u::return#2 ]
Allocated zp[2]:118 [ mul16s::$6 ]
Allocated zp[2]:120 [ mul16s::$11 ]
Allocated zp[2]:122 [ mul16s::$9 ]
Allocated zp[2]:124 [ mul16s::$12 ]
Allocated zp[4]:126 [ mul16s::return#0 ]
Allocated zp[1]:130 [ mul16u::$1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Calculates the 1000 first primes
// From A Comparison of Language Speed, The Transactor, March 1987, Volume 7, Issue 5
// http://csbruce.com/cbm/transactor/pdfs/trans_v7_i05.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  .label print_screen = $400
  // Remainder after unsigned 16-bit division
  .label rem16u = $6e
  // Remainder after signed 16 bit division
  .label rem16s = $1f
  .label testnum = 8
  .label lasttest = 2
  .label primeptr = 6
  .label lastprime = 4
  .label print_char_cursor = $b
  // main
main: {
    .label __0 = $44
    .label __12 = $36
    .label __13 = $4a
    .label __14 = $52
    .label __15 = $48
    .label p = $3a
    .label __16 = $38
    .label __17 = $4e
    .label __18 = $54
    // [0] *((const signed word*) primenum+(byte) 1*(const byte) SIZEOF_SIGNED_WORD) ← (signed byte) 2 -- _deref_pwsc1=vwsc2 
    lda #<2
    sta primenum+1*SIZEOF_SIGNED_WORD
    lda #>2
    sta primenum+1*SIZEOF_SIGNED_WORD+1
    // [1] *((const signed word*) primenum+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (signed byte) 3 -- _deref_pwsc1=vwsc2 
    lda #<3
    sta primenum+2*SIZEOF_SIGNED_WORD
    lda #>3
    sta primenum+2*SIZEOF_SIGNED_WORD+1
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [2] phi (byte*) print_char_cursor#41 = (const byte*) print_screen#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [2] phi (signed word) lastprime#17 = (signed byte) 2 [phi:main->main::@1#1] -- vwsz1=vbsc1 
    lda #<2
    sta.z lastprime
    lda #>2
    sta.z lastprime+1
    // [2] phi (signed word) testnum#15 = (signed byte) 3 [phi:main->main::@1#2] -- vwsz1=vbsc1 
    lda #<3
    sta.z testnum
    lda #>3
    sta.z testnum+1
    // [2] phi (signed word) lasttest#13 = (signed byte) 2 [phi:main->main::@1#3] -- vwsz1=vbsc1 
    lda #<2
    sta.z lasttest
    lda #>2
    sta.z lasttest+1
    jmp __b1
    // [2] phi from main::@11 to main::@1 [phi:main::@11->main::@1]
  __b1_from___b11:
    // [2] phi (byte*) print_char_cursor#41 = (byte*) print_char_cursor#21 [phi:main::@11->main::@1#0] -- register_copy 
    // [2] phi (signed word) lastprime#17 = (signed word) lastprime#1 [phi:main::@11->main::@1#1] -- register_copy 
    // [2] phi (signed word) testnum#15 = (signed word) testnum#11 [phi:main::@11->main::@1#2] -- register_copy 
    // [2] phi (signed word) lasttest#13 = (signed word) lasttest#19 [phi:main::@11->main::@1#3] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [3] (signed word~) main::$12 ← (signed word) lasttest#13 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z lasttest
    asl
    sta.z __12
    lda.z lasttest+1
    rol
    sta.z __12+1
    // [4] (signed word*~) main::$16 ← (const signed word*) primenum + (signed word~) main::$12 -- pwsz1=pwsc1_plus_vwsz2 
    lda #<primenum
    clc
    adc.z __12
    sta.z __16
    lda #>primenum
    adc.z __12+1
    sta.z __16+1
    // [5] (signed word) main::p#0 ← *((signed word*~) main::$16) -- vwsz1=_deref_pwsz2 
    ldy #0
    lda (__16),y
    sta.z p
    iny
    lda (__16),y
    sta.z p+1
    // [6] (signed word) mul16s::a#0 ← (signed word) main::p#0 -- vwsz1=vwsz2 
    lda.z p
    sta.z mul16s.a
    lda.z p+1
    sta.z mul16s.a+1
    // [7] (signed word) mul16s::b#0 ← (signed word) main::p#0 -- vwsz1=vwsz2 
    lda.z p
    sta.z mul16s.b
    lda.z p+1
    sta.z mul16s.b+1
    // [8] call mul16s 
    jsr mul16s
    // [9] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0 -- vdsz1=vdsz2 
    lda.z mul16s.return
    sta.z mul16s.return_1
    lda.z mul16s.return+1
    sta.z mul16s.return_1+1
    lda.z mul16s.return+2
    sta.z mul16s.return_1+2
    lda.z mul16s.return+3
    sta.z mul16s.return_1+3
    jmp __b8
    // main::@8
  __b8:
    // [10] (signed dword~) main::$0 ← (signed dword) mul16s::return#2 -- vdsz1=vdsz2 
    lda.z mul16s.return_1
    sta.z __0
    lda.z mul16s.return_1+1
    sta.z __0+1
    lda.z mul16s.return_1+2
    sta.z __0+2
    lda.z mul16s.return_1+3
    sta.z __0+3
    // [11] (signed word~) main::$15 ← (signed word)(signed dword~) main::$0 -- vwsz1=_sword_vdsz2 
    lda.z __0
    sta.z __15
    lda.z __0+1
    sta.z __15+1
    // [12] if((signed word) testnum#15<=(signed word~) main::$15) goto main::@2 -- vwsz1_le_vwsz2_then_la1 
    lda.z __15
    cmp.z testnum
    lda.z __15+1
    sbc.z testnum+1
    bvc !+
    eor #$80
  !:
    bpl __b2_from___b8
    jmp __b7
    // main::@7
  __b7:
    // [13] (signed word) lasttest#1 ← ++ (signed word) lasttest#13 -- vwsz1=_inc_vwsz1 
    inc.z lasttest
    bne !+
    inc.z lasttest+1
  !:
    // [14] phi from main::@7 main::@8 to main::@2 [phi:main::@7/main::@8->main::@2]
  __b2_from___b7:
  __b2_from___b8:
    // [14] phi (signed word) lasttest#19 = (signed word) lasttest#1 [phi:main::@7/main::@8->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [15] (signed word) testnum#1 ← (signed word) testnum#15 + (signed byte) 2 -- vwsz1=vwsz1_plus_vbsc1 
    lda.z testnum
    clc
    adc #<2
    sta.z testnum
    lda.z testnum+1
    adc #>2
    sta.z testnum+1
    // [16] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [16] phi (signed word) testnum#10 = (signed word) testnum#1 [phi:main::@2->main::@3#0] -- register_copy 
    // [16] phi (signed word) primeptr#7 = (signed byte) 2 [phi:main::@2->main::@3#1] -- vwsz1=vbsc1 
    lda #<2
    sta.z primeptr
    lda #>2
    sta.z primeptr+1
    jmp __b3
    // [16] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [16] phi (signed word) testnum#10 = (signed word) testnum#11 [phi:main::@4->main::@3#0] -- register_copy 
    // [16] phi (signed word) primeptr#7 = (signed word) primeptr#10 [phi:main::@4->main::@3#1] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [17] (signed word~) main::$13 ← (signed word) primeptr#7 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z primeptr
    asl
    sta.z __13
    lda.z primeptr+1
    rol
    sta.z __13+1
    // [18] (signed word) div16s::dividend#0 ← (signed word) testnum#10 -- vwsz1=vwsz2 
    lda.z testnum
    sta.z div16s.dividend
    lda.z testnum+1
    sta.z div16s.dividend+1
    // [19] (signed word*~) main::$17 ← (const signed word*) primenum + (signed word~) main::$13 -- pwsz1=pwsc1_plus_vwsz2 
    lda #<primenum
    clc
    adc.z __13
    sta.z __17
    lda #>primenum
    adc.z __13+1
    sta.z __17+1
    // [20] (signed word) div16s::divisor#0 ← *((signed word*~) main::$17) -- vwsz1=_deref_pwsz2 
    ldy #0
    lda (__17),y
    sta.z div16s.divisor
    iny
    lda (__17),y
    sta.z div16s.divisor+1
    // [21] call div16s 
    jsr div16s
    jmp __b9
    // main::@9
  __b9:
    // [22] (signed word) primeptr#1 ← ++ (signed word) primeptr#7 -- vwsz1=_inc_vwsz1 
    inc.z primeptr
    bne !+
    inc.z primeptr+1
  !:
    // [23] if((signed word) rem16s#10!=(signed byte) 0) goto main::@4 -- vwsz1_neq_0_then_la1 
    lda.z rem16s+1
    bne __b4_from___b9
    lda.z rem16s
    bne __b4_from___b9
    jmp __b5
    // main::@5
  __b5:
    // [24] (signed word) testnum#2 ← (signed word) testnum#10 + (signed byte) 2 -- vwsz1=vwsz1_plus_vbsc1 
    lda.z testnum
    clc
    adc #<2
    sta.z testnum
    lda.z testnum+1
    adc #>2
    sta.z testnum+1
    // [25] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
  __b4_from___b5:
    // [25] phi (signed word) testnum#11 = (signed word) testnum#2 [phi:main::@5->main::@4#0] -- register_copy 
    // [25] phi (signed word) primeptr#10 = (signed byte) 2 [phi:main::@5->main::@4#1] -- vwsz1=vbsc1 
    lda #<2
    sta.z primeptr
    lda #>2
    sta.z primeptr+1
    jmp __b4
    // [25] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
  __b4_from___b9:
    // [25] phi (signed word) testnum#11 = (signed word) testnum#10 [phi:main::@9->main::@4#0] -- register_copy 
    // [25] phi (signed word) primeptr#10 = (signed word) primeptr#1 [phi:main::@9->main::@4#1] -- register_copy 
    jmp __b4
    // main::@4
  __b4:
    // [26] if((signed word) primeptr#10<=(signed word) lasttest#19) goto main::@3 -- vwsz1_le_vwsz2_then_la1 
    lda.z lasttest
    cmp.z primeptr
    lda.z lasttest+1
    sbc.z primeptr+1
    bvc !+
    eor #$80
  !:
    bpl __b3_from___b4
    jmp __b6
    // main::@6
  __b6:
    // [27] (signed word) lastprime#1 ← ++ (signed word) lastprime#17 -- vwsz1=_inc_vwsz1 
    inc.z lastprime
    bne !+
    inc.z lastprime+1
  !:
    // [28] (signed word~) main::$14 ← (signed word) lastprime#1 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z lastprime
    asl
    sta.z __14
    lda.z lastprime+1
    rol
    sta.z __14+1
    // [29] (signed word*~) main::$18 ← (const signed word*) primenum + (signed word~) main::$14 -- pwsz1=pwsc1_plus_vwsz2 
    lda #<primenum
    clc
    adc.z __14
    sta.z __18
    lda #>primenum
    adc.z __14+1
    sta.z __18+1
    // [30] *((signed word*~) main::$18) ← (signed word) testnum#11 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda.z testnum
    sta (__18),y
    iny
    lda.z testnum+1
    sta (__18),y
    // [31] (signed word) print_sint_decimal::w#1 ← (signed word) testnum#11 -- vwsz1=vwsz2 
    lda.z testnum
    sta.z print_sint_decimal.w
    lda.z testnum+1
    sta.z print_sint_decimal.w+1
    // [32] call print_sint_decimal 
    jsr print_sint_decimal
    // [33] phi from main::@6 to main::@10 [phi:main::@6->main::@10]
  __b10_from___b6:
    jmp __b10
    // main::@10
  __b10:
    // [34] call print_char 
    // [37] phi from main::@10 to print_char [phi:main::@10->print_char]
  print_char_from___b10:
    // [37] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#21 [phi:main::@10->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#4 = (byte) ' ' [phi:main::@10->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    jmp __b11
    // main::@11
  __b11:
    // [35] if((signed word) lastprime#1<(signed word) $3e8) goto main::@1 -- vwsz1_lt_vwsc1_then_la1 
    lda.z lastprime
    cmp #<$3e8
    lda.z lastprime+1
    sbc #>$3e8
    bvc !+
    eor #$80
  !:
    bmi __b1_from___b11
    jmp __breturn
    // main::@return
  __breturn:
    // [36] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte zp($a) ch)
print_char: {
    .label ch = $a
    // [38] *((byte*) print_char_cursor#20) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [39] (byte*) print_char_cursor#21 ← ++ (byte*) print_char_cursor#20 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [40] return 
    rts
}
  // print_sint_decimal
// Print a signed int as DECIMAL
// print_sint_decimal(signed word zp($d) w)
print_sint_decimal: {
    .label w = $d
    // [41] if((signed word) print_sint_decimal::w#1<(signed byte) 0) goto print_sint_decimal::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sint_decimal
    // [42] phi from print_sint_decimal to print_sint_decimal::@3 [phi:print_sint_decimal->print_sint_decimal::@3]
  __b3_from_print_sint_decimal:
    jmp __b3
    // print_sint_decimal::@3
  __b3:
    // [43] call print_char 
    // [37] phi from print_sint_decimal::@3 to print_char [phi:print_sint_decimal::@3->print_char]
  print_char_from___b3:
    // [37] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#41 [phi:print_sint_decimal::@3->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#4 = (byte) ' ' [phi:print_sint_decimal::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    // [44] phi from print_sint_decimal::@3 print_sint_decimal::@4 to print_sint_decimal::@2 [phi:print_sint_decimal::@3/print_sint_decimal::@4->print_sint_decimal::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [44] phi (signed word) print_sint_decimal::w#4 = (signed word) print_sint_decimal::w#1 [phi:print_sint_decimal::@3/print_sint_decimal::@4->print_sint_decimal::@2#0] -- register_copy 
    jmp __b2
    // print_sint_decimal::@2
  __b2:
    // [45] (word) utoa::value#1 ← (word)(signed word) print_sint_decimal::w#4 -- vwuz1=vwuz2 
    lda.z w
    sta.z utoa.value
    lda.z w+1
    sta.z utoa.value+1
    // [46] call utoa 
    // [60] phi from print_sint_decimal::@2 to utoa [phi:print_sint_decimal::@2->utoa]
  utoa_from___b2:
    jsr utoa
    // [47] phi from print_sint_decimal::@2 to print_sint_decimal::@5 [phi:print_sint_decimal::@2->print_sint_decimal::@5]
  __b5_from___b2:
    jmp __b5
    // print_sint_decimal::@5
  __b5:
    // [48] call print_str 
    // [53] phi from print_sint_decimal::@5 to print_str [phi:print_sint_decimal::@5->print_str]
  print_str_from___b5:
    jsr print_str
    jmp __breturn
    // print_sint_decimal::@return
  __breturn:
    // [49] return 
    rts
    // [50] phi from print_sint_decimal to print_sint_decimal::@1 [phi:print_sint_decimal->print_sint_decimal::@1]
  __b1_from_print_sint_decimal:
    jmp __b1
    // print_sint_decimal::@1
  __b1:
    // [51] call print_char 
    // [37] phi from print_sint_decimal::@1 to print_char [phi:print_sint_decimal::@1->print_char]
  print_char_from___b1:
    // [37] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#41 [phi:print_sint_decimal::@1->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sint_decimal::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta.z print_char.ch
    jsr print_char
    jmp __b4
    // print_sint_decimal::@4
  __b4:
    // [52] (signed word) print_sint_decimal::w#0 ← - (signed word) print_sint_decimal::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($f) str)
print_str: {
    .label str = $f
    // [54] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  __b1_from_print_str:
    // [54] phi (byte*) print_str::str#2 = (const byte*) decimal_digits [phi:print_str->print_str::@1#0] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z str
    lda #>decimal_digits
    sta.z str+1
    jmp __b1
    // print_str::@1
  __b1:
    // [55] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [56] return 
    rts
    // print_str::@2
  __b2:
    // [57] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta.z print_char.ch
    // [58] call print_char 
    // [37] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [37] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#21 [phi:print_str::@2->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#4 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [59] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [54] phi from print_str::@3 to print_str::@1 [phi:print_str::@3->print_str::@1]
  __b1_from___b3:
    // [54] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($12) value, byte* zp($57) buffer)
utoa: {
    .const max_digits = 5
    .label __10 = $59
    .label __11 = $56
    .label digit_value = $5a
    .label buffer = $57
    .label digit = $11
    .label value = $12
    .label buffer_1 = $15
    .label started = $14
    // [61] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [61] phi (byte*) utoa::buffer#11 = (const byte*) decimal_digits [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z buffer_1
    lda #>decimal_digits
    sta.z buffer_1+1
    // [61] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [61] phi (word) utoa::value#2 = (word) utoa::value#1 [phi:utoa->utoa::@1#2] -- register_copy 
    // [61] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [62] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [63] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuz1=_byte_vwuz2 
    lda.z value
    sta.z __11
    // [64] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __11
    lda DIGITS,y
    ldy #0
    sta (buffer_1),y
    // [65] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz2 
    lda.z buffer_1
    clc
    adc #1
    sta.z buffer
    lda.z buffer_1+1
    adc #0
    sta.z buffer+1
    // [66] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [67] return 
    rts
    // utoa::@2
  __b2:
    // [68] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z digit
    asl
    sta.z __10
    // [69] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy.z __10
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [70] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [71] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [72] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [72] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [72] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [72] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [73] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [61] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [61] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [61] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [61] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [61] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [74] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 -- pbuz1=pbuz2 
    lda.z buffer_1
    sta.z utoa_append.buffer
    lda.z buffer_1+1
    sta.z utoa_append.buffer+1
    // [75] (word) utoa_append::value#0 ← (word) utoa::value#2 -- vwuz1=vwuz2 
    lda.z value
    sta.z utoa_append.value
    lda.z value+1
    sta.z utoa_append.value+1
    // [76] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 -- vwuz1=vwuz2 
    lda.z digit_value
    sta.z utoa_append.sub
    lda.z digit_value+1
    sta.z utoa_append.sub+1
    // [77] call utoa_append 
    // [81] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [78] (word) utoa_append::return#0 ← (word) utoa_append::value#2 -- vwuz1=vwuz2 
    lda.z utoa_append.value
    sta.z utoa_append.return
    lda.z utoa_append.value+1
    sta.z utoa_append.return+1
    jmp __b6
    // utoa::@6
  __b6:
    // [79] (word) utoa::value#0 ← (word) utoa_append::return#0 -- vwuz1=vwuz2 
    lda.z utoa_append.return
    sta.z value
    lda.z utoa_append.return+1
    sta.z value+1
    // [80] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [72] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [72] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [72] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [72] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($5c) buffer, word zp($17) value, word zp($5e) sub)
utoa_append: {
    .label buffer = $5c
    .label value = $17
    .label sub = $5e
    .label return = $60
    .label digit = $19
    // [82] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [82] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [82] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [83] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [84] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [85] return 
    rts
    // utoa_append::@2
  __b2:
    // [86] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [87] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [82] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [82] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [82] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // div16s
// Perform division on two signed 16-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// div16s(signed word zp($4c) dividend, signed word zp($50) divisor)
div16s: {
    .label dividend = $4c
    .label divisor = $50
    // [88] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0 -- vwsz1=vwsz2 
    lda.z dividend
    sta.z divr16s.dividend
    lda.z dividend+1
    sta.z divr16s.dividend+1
    // [89] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0 -- vwsz1=vwsz2 
    lda.z divisor
    sta.z divr16s.divisor
    lda.z divisor+1
    sta.z divr16s.divisor+1
    // [90] call divr16s 
    jsr divr16s
    jmp __breturn
    // div16s::@return
  __breturn:
    // [91] return 
    rts
}
  // divr16s
// Perform division on two signed 16-bit numbers with an initial remainder.
// Returns dividend/divisor. The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// divr16s(signed word zp($62) dividend, signed word zp($64) divisor)
divr16s: {
    .label dividendu = $6a
    .label divisoru = $68
    .label neg = $1e
    .label dividend = $62
    .label divisor = $64
    .label dividendu_1 = $1a
    .label divisoru_1 = $1c
    // [92] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1 -- vwsz1_lt_0_then_la1 
    lda.z dividend+1
    bmi __b1
    jmp __b6
    // divr16s::@6
  __b6:
    // [93] (word) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0 -- vwuz1=vwuz2 
    lda.z dividend
    sta.z dividendu_1
    lda.z dividend+1
    sta.z dividendu_1+1
    // [94] phi from divr16s::@6 to divr16s::@2 [phi:divr16s::@6->divr16s::@2]
  __b2_from___b6:
    // [94] phi (word) divr16s::dividendu#3 = (word) divr16s::dividendu#8 [phi:divr16s::@6->divr16s::@2#0] -- register_copy 
    // [94] phi (byte) divr16s::neg#3 = (byte) 0 [phi:divr16s::@6->divr16s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z neg
    jmp __b2
    // divr16s::@2
  __b2:
    // [95] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3 -- vwsz1_lt_0_then_la1 
    lda.z divisor+1
    bmi __b3
    jmp __b7
    // divr16s::@7
  __b7:
    // [96] (word) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0 -- vwuz1=vwuz2 
    lda.z divisor
    sta.z divisoru_1
    lda.z divisor+1
    sta.z divisoru_1+1
    // [97] phi from divr16s::@3 divr16s::@7 to divr16s::@4 [phi:divr16s::@3/divr16s::@7->divr16s::@4]
  __b4_from___b3:
  __b4_from___b7:
    // [97] phi (byte) divr16s::neg#4 = (byte) divr16s::neg#2 [phi:divr16s::@3/divr16s::@7->divr16s::@4#0] -- register_copy 
    // [97] phi (word) divr16s::divisoru#3 = (word) divr16s::divisoru#4 [phi:divr16s::@3/divr16s::@7->divr16s::@4#1] -- register_copy 
    jmp __b4
    // divr16s::@4
  __b4:
    // [98] (word) divr16u::dividend#1 ← (word) divr16s::dividendu#3 -- vwuz1=vwuz2 
    lda.z dividendu_1
    sta.z divr16u.dividend
    lda.z dividendu_1+1
    sta.z divr16u.dividend+1
    // [99] (word) divr16u::divisor#0 ← (word) divr16s::divisoru#3 -- vwuz1=vwuz2 
    lda.z divisoru_1
    sta.z divr16u.divisor
    lda.z divisoru_1+1
    sta.z divr16u.divisor+1
    // [100] call divr16u 
    // [111] phi from divr16s::@4 to divr16u [phi:divr16s::@4->divr16u]
  divr16u_from___b4:
    jsr divr16u
    jmp __b9
    // divr16s::@9
  __b9:
    // [101] if((byte) divr16s::neg#4==(byte) 0) goto divr16s::@5 -- vbuz1_eq_0_then_la1 
    lda.z neg
    cmp #0
    beq __b5
    jmp __b8
    // divr16s::@8
  __b8:
    // [102] (signed word) rem16s#1 ← - (signed word)(word) rem16u#0 -- vwsz1=_neg_vwsz2 
    sec
    lda #0
    sbc.z rem16u
    sta.z rem16s
    lda #0
    sbc.z rem16u+1
    sta.z rem16s+1
    // [103] phi from divr16s::@5 divr16s::@8 to divr16s::@return [phi:divr16s::@5/divr16s::@8->divr16s::@return]
  __breturn_from___b5:
  __breturn_from___b8:
    // [103] phi (signed word) rem16s#10 = (signed word) rem16s#30 [phi:divr16s::@5/divr16s::@8->divr16s::@return#0] -- register_copy 
    jmp __breturn
    // divr16s::@return
  __breturn:
    // [104] return 
    rts
    // divr16s::@5
  __b5:
    // [105] (signed word) rem16s#30 ← (signed word)(word) rem16u#0 -- vwsz1=vwsz2 
    lda.z rem16u
    sta.z rem16s
    lda.z rem16u+1
    sta.z rem16s+1
    jmp __breturn_from___b5
    // divr16s::@3
  __b3:
    // [106] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0 -- vwsz1=_neg_vwsz2 
    sec
    lda #0
    sbc.z divisor
    sta.z divisoru
    lda #0
    sbc.z divisor+1
    sta.z divisoru+1
    // [107] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #1
    eor.z neg
    sta.z neg
    // [108] (word) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1 -- vwuz1=vwuz2 
    lda.z divisoru
    sta.z divisoru_1
    lda.z divisoru+1
    sta.z divisoru_1+1
    jmp __b4_from___b3
    // divr16s::@1
  __b1:
    // [109] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0 -- vwsz1=_neg_vwsz2 
    sec
    lda #0
    sbc.z dividend
    sta.z dividendu
    lda #0
    sbc.z dividend+1
    sta.z dividendu+1
    // [110] (word) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1 -- vwuz1=vwuz2 
    lda.z dividendu
    sta.z dividendu_1
    lda.z dividendu+1
    sta.z dividendu_1+1
    // [94] phi from divr16s::@1 to divr16s::@2 [phi:divr16s::@1->divr16s::@2]
  __b2_from___b1:
    // [94] phi (word) divr16s::dividendu#3 = (word) divr16s::dividendu#7 [phi:divr16s::@1->divr16s::@2#0] -- register_copy 
    // [94] phi (byte) divr16s::neg#3 = (byte) 1 [phi:divr16s::@1->divr16s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta.z neg
    jmp __b2
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($23) dividend, word zp($66) divisor, word zp($21) rem)
divr16u: {
    .label __1 = $6c
    .label __2 = $6d
    .label rem = $21
    .label dividend = $23
    .label quotient = $25
    .label i = $27
    .label return = $25
    .label divisor = $66
    // [112] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  __b1_from_divr16u:
    // [112] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [112] phi (word) divr16u::quotient#3 = (word) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z quotient
    lda #>0
    sta.z quotient+1
    // [112] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#1 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [112] phi (word) divr16u::rem#4 = (word) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vwuc1 
    lda #<0
    sta.z rem
    lda #>0
    sta.z rem+1
    jmp __b1
    // [112] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  __b1_from___b3:
    // [112] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [112] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [112] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [112] phi (word) divr16u::rem#4 = (word) divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp __b1
    // divr16u::@1
  __b1:
    // [113] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // [114] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 -- vbuz1=_hi_vwuz2 
    lda.z dividend+1
    sta.z __1
    // [115] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and.z __1
    sta.z __2
    // [116] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuz1_eq_0_then_la1 
    lda.z __2
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr16u::@4
  __b4:
    // [117] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [118] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [118] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp __b2
    // divr16u::@2
  __b2:
    // [119] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // [120] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // [121] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3 -- vwuz1_lt_vwuz2_then_la1 
    lda.z rem+1
    cmp.z divisor+1
    bcc __b3_from___b2
    bne !+
    lda.z rem
    cmp.z divisor
    bcc __b3_from___b2
  !:
    jmp __b5
    // divr16u::@5
  __b5:
    // [122] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // [123] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z rem
    sec
    sbc.z divisor
    sta.z rem
    lda.z rem+1
    sbc.z divisor+1
    sta.z rem+1
    // [124] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [124] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [124] phi (word) divr16u::rem#10 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp __b3
    // divr16u::@3
  __b3:
    // [125] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [126] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp.z i
    bne __b1_from___b3
    jmp __b6
    // divr16u::@6
  __b6:
    // [127] (word) rem16u#0 ← (word) divr16u::rem#10 -- vwuz1=vwuz2 
    lda.z rem
    sta.z rem16u
    lda.z rem+1
    sta.z rem16u+1
    jmp __breturn
    // divr16u::@return
  __breturn:
    // [128] return 
    rts
}
  // mul16s
// Multiply of two signed ints to a signed long
// Fixes offsets introduced by using unsigned multiplication
// mul16s(signed word zp($3c) a, signed word zp($3e) b)
mul16s: {
    .label __6 = $76
    .label __9 = $7a
    .label __11 = $78
    .label __12 = $7c
    .label m = $28
    .label return = $7e
    .label a = $3c
    .label b = $3e
    .label return_1 = $40
    // [129] (word) mul16u::a#1 ← (word)(signed word) mul16s::a#0 -- vwuz1=vwuz2 
    lda.z a
    sta.z mul16u.a
    lda.z a+1
    sta.z mul16u.a+1
    // [130] (word) mul16u::b#0 ← (word)(signed word) mul16s::b#0 -- vwuz1=vwuz2 
    lda.z b
    sta.z mul16u.b
    lda.z b+1
    sta.z mul16u.b+1
    // [131] call mul16u 
    jsr mul16u
    // [132] (dword) mul16u::return#2 ← (dword) mul16u::res#2 -- vduz1=vduz2 
    lda.z mul16u.res
    sta.z mul16u.return
    lda.z mul16u.res+1
    sta.z mul16u.return+1
    lda.z mul16u.res+2
    sta.z mul16u.return+2
    lda.z mul16u.res+3
    sta.z mul16u.return+3
    jmp __b5
    // mul16s::@5
  __b5:
    // [133] (dword) mul16s::m#0 ← (dword) mul16u::return#2 -- vduz1=vduz2 
    lda.z mul16u.return
    sta.z m
    lda.z mul16u.return+1
    sta.z m+1
    lda.z mul16u.return+2
    sta.z m+2
    lda.z mul16u.return+3
    sta.z m+3
    // [134] if((signed word) mul16s::a#0>=(signed byte) 0) goto mul16s::@1 -- vwsz1_ge_0_then_la1 
    lda.z a+1
    bpl __b1_from___b5
    jmp __b3
    // mul16s::@3
  __b3:
    // [135] (word~) mul16s::$6 ← > (dword) mul16s::m#0 -- vwuz1=_hi_vduz2 
    lda.z m+2
    sta.z __6
    lda.z m+3
    sta.z __6+1
    // [136] (word~) mul16s::$11 ← (word~) mul16s::$6 - (word)(signed word) mul16s::b#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z __6
    sec
    sbc.z b
    sta.z __11
    lda.z __6+1
    sbc.z b+1
    sta.z __11+1
    // [137] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$11 -- vduz1=vduz1_sethi_vwuz2 
    lda.z __11
    sta.z m+2
    lda.z __11+1
    sta.z m+3
    // [138] phi from mul16s::@3 mul16s::@5 to mul16s::@1 [phi:mul16s::@3/mul16s::@5->mul16s::@1]
  __b1_from___b3:
  __b1_from___b5:
    // [138] phi (dword) mul16s::m#5 = (dword) mul16s::m#1 [phi:mul16s::@3/mul16s::@5->mul16s::@1#0] -- register_copy 
    jmp __b1
    // mul16s::@1
  __b1:
    // [139] if((signed word) mul16s::b#0>=(signed byte) 0) goto mul16s::@2 -- vwsz1_ge_0_then_la1 
    lda.z b+1
    bpl __b2_from___b1
    jmp __b4
    // mul16s::@4
  __b4:
    // [140] (word~) mul16s::$9 ← > (dword) mul16s::m#5 -- vwuz1=_hi_vduz2 
    lda.z m+2
    sta.z __9
    lda.z m+3
    sta.z __9+1
    // [141] (word~) mul16s::$12 ← (word~) mul16s::$9 - (word)(signed word) mul16s::a#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z __9
    sec
    sbc.z a
    sta.z __12
    lda.z __9+1
    sbc.z a+1
    sta.z __12+1
    // [142] (dword) mul16s::m#2 ← (dword) mul16s::m#5 hi= (word~) mul16s::$12 -- vduz1=vduz1_sethi_vwuz2 
    lda.z __12
    sta.z m+2
    lda.z __12+1
    sta.z m+3
    // [143] phi from mul16s::@1 mul16s::@4 to mul16s::@2 [phi:mul16s::@1/mul16s::@4->mul16s::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [143] phi (dword) mul16s::m#4 = (dword) mul16s::m#5 [phi:mul16s::@1/mul16s::@4->mul16s::@2#0] -- register_copy 
    jmp __b2
    // mul16s::@2
  __b2:
    // [144] (signed dword) mul16s::return#0 ← (signed dword)(dword) mul16s::m#4 -- vdsz1=vdsz2 
    lda.z m
    sta.z return
    lda.z m+1
    sta.z return+1
    lda.z m+2
    sta.z return+2
    lda.z m+3
    sta.z return+3
    jmp __breturn
    // mul16s::@return
  __breturn:
    // [145] return 
    rts
}
  // mul16u
// Perform binary multiplication of two unsigned 16-bit unsigned ints into a 32-bit unsigned long
// mul16u(word zp($2c) a, word zp($70) b)
mul16u: {
    .label __1 = $82
    .label mb = $32
    .label a = $2c
    .label res = $2e
    .label b = $70
    .label return = $72
    // [146] (dword) mul16u::mb#0 ← (dword)(word) mul16u::b#0 -- vduz1=_dword_vwuz2 
    lda.z b
    sta.z mb
    lda.z b+1
    sta.z mb+1
    lda #0
    sta.z mb+2
    sta.z mb+3
    // [147] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  __b1_from_mul16u:
    // [147] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
    // [147] phi (dword) mul16u::res#2 = (dword) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    lda #<0>>$10
    sta.z res+2
    lda #>0>>$10
    sta.z res+3
    // [147] phi (word) mul16u::a#2 = (word) mul16u::a#1 [phi:mul16u->mul16u::@1#2] -- register_copy 
    jmp __b1
    // mul16u::@1
  __b1:
    // [148] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda.z a
    bne __b2
    lda.z a+1
    bne __b2
    jmp __breturn
    // mul16u::@return
  __breturn:
    // [149] return 
    rts
    // mul16u::@2
  __b2:
    // [150] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1 -- vbuz1=vwuz2_band_vbuc1 
    lda #1
    and.z a
    sta.z __1
    // [151] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3 -- vbuz1_eq_0_then_la1 
    lda.z __1
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul16u::@4
  __b4:
    // [152] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    lda.z res+2
    adc.z mb+2
    sta.z res+2
    lda.z res+3
    adc.z mb+3
    sta.z res+3
    // [153] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [153] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    jmp __b3
    // mul16u::@3
  __b3:
    // [154] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte) 1 -- vwuz1=vwuz1_ror_1 
    lsr.z a+1
    ror.z a
    // [155] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1 -- vduz1=vduz1_rol_1 
    asl.z mb
    rol.z mb+1
    rol.z mb+2
    rol.z mb+3
    // [147] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
  __b1_from___b3:
    // [147] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
    // [147] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
    // [147] phi (word) mul16u::a#2 = (word) mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Digits used for storing the decimal unsigned int
  decimal_digits: .fill 6, 0
  primenum: .fill 2*$3e8, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const signed word*) primenum+(byte) 1*(const byte) SIZEOF_SIGNED_WORD) ← (signed byte) 2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const signed word*) primenum+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (signed byte) 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (signed word~) main::$12 ← (signed word) lasttest#13 << (byte) 1 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$12 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$12 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [4] (signed word*~) main::$16 ← (const signed word*) primenum + (signed word~) main::$12 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$16 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$16 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [5] (signed word) main::p#0 ← *((signed word*~) main::$16) [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::p#0 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::p#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [6] (signed word) mul16s::a#0 ← (signed word) main::p#0 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::p#0 mul16s::a#0 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::p#0 mul16s::a#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [7] (signed word) mul16s::b#0 ← (signed word) main::p#0 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [9] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::return#2 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::return#2 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [10] (signed dword~) main::$0 ← (signed dword) mul16s::return#2 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$0 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$0 ] { }  ) always clobbers reg byte a 
Statement [11] (signed word~) main::$15 ← (signed word)(signed dword~) main::$0 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$15 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$15 ] { }  ) always clobbers reg byte a 
Statement [12] if((signed word) testnum#15<=(signed word~) main::$15) goto main::@2 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 ] { }  ) always clobbers reg byte a 
Statement [15] (signed word) testnum#1 ← (signed word) testnum#15 + (signed byte) 2 [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#1 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#1 ] { }  ) always clobbers reg byte a 
Statement [17] (signed word~) main::$13 ← (signed word) primeptr#7 << (byte) 1 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 main::$13 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 main::$13 ] { { testnum#10 = div16s::dividend#0 } }  ) always clobbers reg byte a 
Statement [18] (signed word) div16s::dividend#0 ← (signed word) testnum#10 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 main::$13 div16s::dividend#0 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 main::$13 div16s::dividend#0 ] { { testnum#10 = div16s::dividend#0 } }  ) always clobbers reg byte a 
Statement [19] (signed word*~) main::$17 ← (const signed word*) primenum + (signed word~) main::$13 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::dividend#0 main::$17 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::dividend#0 main::$17 ] { { testnum#10 = div16s::dividend#0 } }  ) always clobbers reg byte a 
Statement [20] (signed word) div16s::divisor#0 ← *((signed word*~) main::$17) [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::dividend#0 div16s::divisor#0 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::dividend#0 div16s::divisor#0 ] { { testnum#10 = div16s::dividend#0 } }  ) always clobbers reg byte a reg byte y 
Statement [23] if((signed word) rem16s#10!=(signed byte) 0) goto main::@4 [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#10 primeptr#1 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#10 primeptr#1 ] { }  ) always clobbers reg byte a 
Statement [24] (signed word) testnum#2 ← (signed word) testnum#10 + (signed byte) 2 [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#2 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#2 ] { }  ) always clobbers reg byte a 
Statement [26] if((signed word) primeptr#10<=(signed word) lasttest#19) goto main::@3 [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#11 primeptr#10 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#11 primeptr#10 ] { }  ) always clobbers reg byte a 
Statement [28] (signed word~) main::$14 ← (signed word) lastprime#1 << (byte) 1 [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 main::$14 ] (  [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 main::$14 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [29] (signed word*~) main::$18 ← (const signed word*) primenum + (signed word~) main::$14 [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 main::$18 ] (  [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 main::$18 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [30] *((signed word*~) main::$18) ← (signed word) testnum#11 [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 ] (  [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a reg byte y 
Statement [31] (signed word) print_sint_decimal::w#1 ← (signed word) testnum#11 [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 print_sint_decimal::w#1 ] (  [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 print_sint_decimal::w#1 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [35] if((signed word) lastprime#1<(signed word) $3e8) goto main::@1 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 ] (  [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 ] { }  ) always clobbers reg byte a 
Statement [38] *((byte*) print_char_cursor#20) ← (byte) print_char::ch#4 [ print_char_cursor#20 ] ( print_char:34 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#20 ] { { print_char_cursor#20 = print_char_cursor#21 } }  print_sint_decimal:32::print_char:43 [ lasttest#19 testnum#11 lastprime#1 print_sint_decimal::w#1 print_char_cursor#20 ] { { testnum#11 = print_sint_decimal::w#1 } { print_char_cursor#20 = print_char_cursor#41 } }  print_sint_decimal:32::print_char:51 [ lasttest#19 testnum#11 lastprime#1 print_sint_decimal::w#1 print_char_cursor#20 ] { { testnum#11 = print_sint_decimal::w#1 } { print_char_cursor#20 = print_char_cursor#41 } }  print_sint_decimal:32::print_str:48::print_char:58 [ lasttest#19 testnum#11 lastprime#1 print_str::str#2 print_char_cursor#20 ] { { testnum#11 = print_sint_decimal::w#1 } { print_char::ch#0 = print_char::ch#4 } { print_char_cursor#20 = print_char_cursor#21 } }  ) always clobbers reg byte y 
Statement [41] if((signed word) print_sint_decimal::w#1<(signed byte) 0) goto print_sint_decimal::@1 [ print_char_cursor#41 print_sint_decimal::w#1 ] ( print_sint_decimal:32 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#41 print_sint_decimal::w#1 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [45] (word) utoa::value#1 ← (word)(signed word) print_sint_decimal::w#4 [ print_char_cursor#21 utoa::value#1 ] ( print_sint_decimal:32 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::value#1 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [52] (signed word) print_sint_decimal::w#0 ← - (signed word) print_sint_decimal::w#1 [ print_char_cursor#21 print_sint_decimal::w#0 ] ( print_sint_decimal:32 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 print_sint_decimal::w#0 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [55] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 [ print_char_cursor#21 print_str::str#2 ] ( print_sint_decimal:32::print_str:48 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 print_str::str#2 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a reg byte y 
Statement [57] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) [ print_char_cursor#21 print_char::ch#0 print_str::str#2 ] ( print_sint_decimal:32::print_str:48 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 print_char::ch#0 print_str::str#2 ] { { testnum#11 = print_sint_decimal::w#1 } { print_char::ch#0 = print_char::ch#4 } { print_char_cursor#20 = print_char_cursor#21 } }  ) always clobbers reg byte a reg byte y 
Statement [63] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 [ utoa::buffer#11 utoa::$11 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::buffer#11 utoa::$11 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [64] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) [ utoa::buffer#11 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::buffer#11 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a reg byte y 
Statement [65] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 [ utoa::buffer#3 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::buffer#3 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [66] *((byte*) utoa::buffer#3) ← (byte) 0 [ ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a reg byte y 
Statement [68] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:17 [ utoa::digit#2 utoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:20 [ utoa::started#2 utoa::started#4 ]
Statement [69] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [71] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [74] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 [ utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [75] (word) utoa_append::value#0 ← (word) utoa::value#2 [ utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [76] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 [ utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [78] (word) utoa_append::return#0 ← (word) utoa_append::value#2 [ utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [79] (word) utoa::value#0 ← (word) utoa_append::return#0 [ utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [83] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( print_sint_decimal:32::utoa:46::utoa_append:77 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:25 [ utoa_append::digit#2 utoa_append::digit#1 ]
Statement [84] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) [ utoa_append::value#2 ] ( print_sint_decimal:32::utoa:46::utoa_append:77 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:17 [ utoa::digit#2 utoa::digit#1 ]
Statement [87] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( print_sint_decimal:32::utoa:46::utoa_append:77 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [88] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0 [ div16s::divisor#0 divr16s::dividend#0 ] ( div16s:21 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::divisor#0 divr16s::dividend#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [89] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0 [ divr16s::dividend#0 divr16s::divisor#0 ] ( div16s:21 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::dividend#0 divr16s::divisor#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [92] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1 [ divr16s::dividend#0 divr16s::divisor#0 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::dividend#0 divr16s::divisor#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [93] (word) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#8 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisor#0 divr16s::dividendu#8 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [95] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3 [ divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:30 [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
Statement [96] (word) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [98] (word) divr16u::dividend#1 ← (word) divr16s::dividendu#3 [ divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#1 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [99] (word) divr16u::divisor#0 ← (word) divr16s::divisoru#3 [ divr16s::neg#4 divr16u::dividend#1 divr16u::divisor#0 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 divr16u::dividend#1 divr16u::divisor#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [102] (signed word) rem16s#1 ← - (signed word)(word) rem16u#0 [ rem16s#1 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 rem16s#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [105] (signed word) rem16s#30 ← (signed word)(word) rem16u#0 [ rem16s#30 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 rem16s#30 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [106] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [107] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1 [ divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [108] (word) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1 [ divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [109] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#1 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisor#0 divr16s::dividendu#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [110] (word) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1 [ divr16s::divisor#0 divr16s::dividendu#7 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisor#0 divr16s::dividendu#7 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [117] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( div16s:21::divr16s:90::divr16u:100 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:39 [ divr16u::i#2 divr16u::i#1 ]
Statement [121] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( div16s:21::divr16s:90::divr16u:100 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [123] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( div16s:21::divr16s:90::divr16u:100 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [127] (word) rem16u#0 ← (word) divr16u::rem#10 [ rem16u#0 ] ( div16s:21::divr16s:90::divr16u:100 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 rem16u#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [129] (word) mul16u::a#1 ← (word)(signed word) mul16s::a#0 [ mul16s::a#0 mul16s::b#0 mul16u::a#1 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::a#1 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [130] (word) mul16u::b#0 ← (word)(signed word) mul16s::b#0 [ mul16s::a#0 mul16s::b#0 mul16u::a#1 mul16u::b#0 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::a#1 mul16u::b#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [132] (dword) mul16u::return#2 ← (dword) mul16u::res#2 [ mul16s::a#0 mul16s::b#0 mul16u::return#2 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::return#2 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [133] (dword) mul16s::m#0 ← (dword) mul16u::return#2 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [134] if((signed word) mul16s::a#0>=(signed byte) 0) goto mul16s::@1 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [135] (word~) mul16s::$6 ← > (dword) mul16s::m#0 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$6 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$6 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [136] (word~) mul16s::$11 ← (word~) mul16s::$6 - (word)(signed word) mul16s::b#0 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$11 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$11 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [137] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$11 [ mul16s::a#0 mul16s::b#0 mul16s::m#1 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#1 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [139] if((signed word) mul16s::b#0>=(signed byte) 0) goto mul16s::@2 [ mul16s::a#0 mul16s::m#5 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::m#5 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [140] (word~) mul16s::$9 ← > (dword) mul16s::m#5 [ mul16s::a#0 mul16s::m#5 mul16s::$9 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::m#5 mul16s::$9 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [141] (word~) mul16s::$12 ← (word~) mul16s::$9 - (word)(signed word) mul16s::a#0 [ mul16s::m#5 mul16s::$12 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::m#5 mul16s::$12 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [142] (dword) mul16s::m#2 ← (dword) mul16s::m#5 hi= (word~) mul16s::$12 [ mul16s::m#2 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::m#2 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [144] (signed dword) mul16s::return#0 ← (signed dword)(dword) mul16s::m#4 [ mul16s::return#0 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::return#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [146] (dword) mul16u::mb#0 ← (dword)(word) mul16u::b#0 [ mul16u::a#1 mul16u::mb#0 ] ( mul16s:8::mul16u:131 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::a#1 mul16u::mb#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [148] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] ( mul16s:8::mul16u:131 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [150] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] ( mul16s:8::mul16u:131 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [152] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 [ mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] ( mul16s:8::mul16u:131 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [0] *((const signed word*) primenum+(byte) 1*(const byte) SIZEOF_SIGNED_WORD) ← (signed byte) 2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const signed word*) primenum+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (signed byte) 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (signed word~) main::$12 ← (signed word) lasttest#13 << (byte) 1 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$12 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$12 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [4] (signed word*~) main::$16 ← (const signed word*) primenum + (signed word~) main::$12 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$16 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$16 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [5] (signed word) main::p#0 ← *((signed word*~) main::$16) [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::p#0 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::p#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a reg byte y 
Statement [6] (signed word) mul16s::a#0 ← (signed word) main::p#0 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::p#0 mul16s::a#0 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::p#0 mul16s::a#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [7] (signed word) mul16s::b#0 ← (signed word) main::p#0 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [9] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::return#2 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::return#2 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [10] (signed dword~) main::$0 ← (signed dword) mul16s::return#2 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$0 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$0 ] { }  ) always clobbers reg byte a 
Statement [11] (signed word~) main::$15 ← (signed word)(signed dword~) main::$0 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$15 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 main::$15 ] { }  ) always clobbers reg byte a 
Statement [12] if((signed word) testnum#15<=(signed word~) main::$15) goto main::@2 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 ] (  [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 ] { }  ) always clobbers reg byte a 
Statement [15] (signed word) testnum#1 ← (signed word) testnum#15 + (signed byte) 2 [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#1 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#1 ] { }  ) always clobbers reg byte a 
Statement [17] (signed word~) main::$13 ← (signed word) primeptr#7 << (byte) 1 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 main::$13 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 main::$13 ] { { testnum#10 = div16s::dividend#0 } }  ) always clobbers reg byte a 
Statement [18] (signed word) div16s::dividend#0 ← (signed word) testnum#10 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 main::$13 div16s::dividend#0 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 main::$13 div16s::dividend#0 ] { { testnum#10 = div16s::dividend#0 } }  ) always clobbers reg byte a 
Statement [19] (signed word*~) main::$17 ← (const signed word*) primenum + (signed word~) main::$13 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::dividend#0 main::$17 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::dividend#0 main::$17 ] { { testnum#10 = div16s::dividend#0 } }  ) always clobbers reg byte a 
Statement [20] (signed word) div16s::divisor#0 ← *((signed word*~) main::$17) [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::dividend#0 div16s::divisor#0 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::dividend#0 div16s::divisor#0 ] { { testnum#10 = div16s::dividend#0 } }  ) always clobbers reg byte a reg byte y 
Statement [23] if((signed word) rem16s#10!=(signed byte) 0) goto main::@4 [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#10 primeptr#1 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#10 primeptr#1 ] { }  ) always clobbers reg byte a 
Statement [24] (signed word) testnum#2 ← (signed word) testnum#10 + (signed byte) 2 [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#2 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#2 ] { }  ) always clobbers reg byte a 
Statement [26] if((signed word) primeptr#10<=(signed word) lasttest#19) goto main::@3 [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#11 primeptr#10 ] (  [ lastprime#17 print_char_cursor#41 lasttest#19 testnum#11 primeptr#10 ] { }  ) always clobbers reg byte a 
Statement [28] (signed word~) main::$14 ← (signed word) lastprime#1 << (byte) 1 [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 main::$14 ] (  [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 main::$14 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [29] (signed word*~) main::$18 ← (const signed word*) primenum + (signed word~) main::$14 [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 main::$18 ] (  [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 main::$18 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [30] *((signed word*~) main::$18) ← (signed word) testnum#11 [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 ] (  [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a reg byte y 
Statement [31] (signed word) print_sint_decimal::w#1 ← (signed word) testnum#11 [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 print_sint_decimal::w#1 ] (  [ print_char_cursor#41 lasttest#19 testnum#11 lastprime#1 print_sint_decimal::w#1 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [35] if((signed word) lastprime#1<(signed word) $3e8) goto main::@1 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 ] (  [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 ] { }  ) always clobbers reg byte a 
Statement [38] *((byte*) print_char_cursor#20) ← (byte) print_char::ch#4 [ print_char_cursor#20 ] ( print_char:34 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#20 ] { { print_char_cursor#20 = print_char_cursor#21 } }  print_sint_decimal:32::print_char:43 [ lasttest#19 testnum#11 lastprime#1 print_sint_decimal::w#1 print_char_cursor#20 ] { { testnum#11 = print_sint_decimal::w#1 } { print_char_cursor#20 = print_char_cursor#41 } }  print_sint_decimal:32::print_char:51 [ lasttest#19 testnum#11 lastprime#1 print_sint_decimal::w#1 print_char_cursor#20 ] { { testnum#11 = print_sint_decimal::w#1 } { print_char_cursor#20 = print_char_cursor#41 } }  print_sint_decimal:32::print_str:48::print_char:58 [ lasttest#19 testnum#11 lastprime#1 print_str::str#2 print_char_cursor#20 ] { { testnum#11 = print_sint_decimal::w#1 } { print_char::ch#0 = print_char::ch#4 } { print_char_cursor#20 = print_char_cursor#21 } }  ) always clobbers reg byte y 
Statement [41] if((signed word) print_sint_decimal::w#1<(signed byte) 0) goto print_sint_decimal::@1 [ print_char_cursor#41 print_sint_decimal::w#1 ] ( print_sint_decimal:32 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#41 print_sint_decimal::w#1 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [45] (word) utoa::value#1 ← (word)(signed word) print_sint_decimal::w#4 [ print_char_cursor#21 utoa::value#1 ] ( print_sint_decimal:32 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::value#1 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [52] (signed word) print_sint_decimal::w#0 ← - (signed word) print_sint_decimal::w#1 [ print_char_cursor#21 print_sint_decimal::w#0 ] ( print_sint_decimal:32 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 print_sint_decimal::w#0 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [55] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 [ print_char_cursor#21 print_str::str#2 ] ( print_sint_decimal:32::print_str:48 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 print_str::str#2 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a reg byte y 
Statement [57] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) [ print_char_cursor#21 print_char::ch#0 print_str::str#2 ] ( print_sint_decimal:32::print_str:48 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 print_char::ch#0 print_str::str#2 ] { { testnum#11 = print_sint_decimal::w#1 } { print_char::ch#0 = print_char::ch#4 } { print_char_cursor#20 = print_char_cursor#21 } }  ) always clobbers reg byte a reg byte y 
Statement [63] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 [ utoa::buffer#11 utoa::$11 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::buffer#11 utoa::$11 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [64] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) [ utoa::buffer#11 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::buffer#11 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a reg byte y 
Statement [65] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 [ utoa::buffer#3 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::buffer#3 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [66] *((byte*) utoa::buffer#3) ← (byte) 0 [ ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a reg byte y 
Statement [68] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [69] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [71] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [74] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11 [ utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [75] (word) utoa_append::value#0 ← (word) utoa::value#2 [ utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [76] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0 [ utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [78] (word) utoa_append::return#0 ← (word) utoa_append::value#2 [ utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [79] (word) utoa::value#0 ← (word) utoa_append::return#0 [ utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( print_sint_decimal:32::utoa:46 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { testnum#11 = print_sint_decimal::w#1 } }  ) always clobbers reg byte a 
Statement [83] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( print_sint_decimal:32::utoa:46::utoa_append:77 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [84] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) [ utoa_append::value#2 ] ( print_sint_decimal:32::utoa:46::utoa_append:77 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [87] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( print_sint_decimal:32::utoa:46::utoa_append:77 [ lasttest#19 testnum#11 lastprime#1 print_char_cursor#21 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { testnum#11 = print_sint_decimal::w#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [88] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0 [ div16s::divisor#0 divr16s::dividend#0 ] ( div16s:21 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 div16s::divisor#0 divr16s::dividend#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [89] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0 [ divr16s::dividend#0 divr16s::divisor#0 ] ( div16s:21 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::dividend#0 divr16s::divisor#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [92] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1 [ divr16s::dividend#0 divr16s::divisor#0 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::dividend#0 divr16s::divisor#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [93] (word) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#8 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisor#0 divr16s::dividendu#8 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [95] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3 [ divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisor#0 divr16s::neg#3 divr16s::dividendu#3 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [96] (word) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#5 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [98] (word) divr16u::dividend#1 ← (word) divr16s::dividendu#3 [ divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#1 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisoru#3 divr16s::neg#4 divr16u::dividend#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [99] (word) divr16u::divisor#0 ← (word) divr16s::divisoru#3 [ divr16s::neg#4 divr16u::dividend#1 divr16u::divisor#0 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 divr16u::dividend#1 divr16u::divisor#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [102] (signed word) rem16s#1 ← - (signed word)(word) rem16u#0 [ rem16s#1 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 rem16s#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [105] (signed word) rem16s#30 ← (signed word)(word) rem16u#0 [ rem16s#30 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 rem16s#30 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [106] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0 [ divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#3 divr16s::dividendu#3 divr16s::divisoru#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [107] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1 [ divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::dividendu#3 divr16s::neg#2 divr16s::divisoru#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [108] (word) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1 [ divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::dividendu#3 divr16s::divisoru#4 divr16s::neg#2 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [109] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0 [ divr16s::divisor#0 divr16s::dividendu#1 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisor#0 divr16s::dividendu#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [110] (word) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1 [ divr16s::divisor#0 divr16s::dividendu#7 ] ( div16s:21::divr16s:90 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::divisor#0 divr16s::dividendu#7 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } }  ) always clobbers reg byte a 
Statement [117] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( div16s:21::divr16s:90::divr16u:100 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [121] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( div16s:21::divr16s:90::divr16u:100 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [123] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( div16s:21::divr16s:90::divr16u:100 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [127] (word) rem16u#0 ← (word) divr16u::rem#10 [ rem16u#0 ] ( div16s:21::divr16s:90::divr16u:100 [ lastprime#17 print_char_cursor#41 lasttest#19 primeptr#7 testnum#10 divr16s::neg#4 rem16u#0 ] { { testnum#10 = div16s::dividend#0 divr16s::dividend#0 } { divr16s::divisor#0 = div16s::divisor#0 } { divr16u::dividend#1 = divr16s::dividendu#3 } { divr16u::divisor#0 = divr16s::divisoru#3 } }  ) always clobbers reg byte a 
Statement [129] (word) mul16u::a#1 ← (word)(signed word) mul16s::a#0 [ mul16s::a#0 mul16s::b#0 mul16u::a#1 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::a#1 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [130] (word) mul16u::b#0 ← (word)(signed word) mul16s::b#0 [ mul16s::a#0 mul16s::b#0 mul16u::a#1 mul16u::b#0 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::a#1 mul16u::b#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [132] (dword) mul16u::return#2 ← (dword) mul16u::res#2 [ mul16s::a#0 mul16s::b#0 mul16u::return#2 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::return#2 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [133] (dword) mul16s::m#0 ← (dword) mul16u::return#2 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [134] if((signed word) mul16s::a#0>=(signed byte) 0) goto mul16s::@1 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [135] (word~) mul16s::$6 ← > (dword) mul16s::m#0 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$6 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$6 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [136] (word~) mul16s::$11 ← (word~) mul16s::$6 - (word)(signed word) mul16s::b#0 [ mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$11 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#0 mul16s::$11 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [137] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$11 [ mul16s::a#0 mul16s::b#0 mul16s::m#1 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16s::m#1 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [139] if((signed word) mul16s::b#0>=(signed byte) 0) goto mul16s::@2 [ mul16s::a#0 mul16s::m#5 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::m#5 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [140] (word~) mul16s::$9 ← > (dword) mul16s::m#5 [ mul16s::a#0 mul16s::m#5 mul16s::$9 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::m#5 mul16s::$9 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [141] (word~) mul16s::$12 ← (word~) mul16s::$9 - (word)(signed word) mul16s::a#0 [ mul16s::m#5 mul16s::$12 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::m#5 mul16s::$12 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [142] (dword) mul16s::m#2 ← (dword) mul16s::m#5 hi= (word~) mul16s::$12 [ mul16s::m#2 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::m#2 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [144] (signed dword) mul16s::return#0 ← (signed dword)(dword) mul16s::m#4 [ mul16s::return#0 ] ( mul16s:8 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::return#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } }  ) always clobbers reg byte a 
Statement [146] (dword) mul16u::mb#0 ← (dword)(word) mul16u::b#0 [ mul16u::a#1 mul16u::mb#0 ] ( mul16s:8::mul16u:131 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::a#1 mul16u::mb#0 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [148] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] ( mul16s:8::mul16u:131 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [150] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] ( mul16s:8::mul16u:131 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [152] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 [ mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] ( mul16s:8::mul16u:131 [ lasttest#13 testnum#15 lastprime#17 print_char_cursor#41 mul16s::a#0 mul16s::b#0 mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { mul16s::a#0 = main::p#0 mul16s::b#0 } { mul16s::return#0 = mul16s::return#2 } { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ lasttest#13 lasttest#19 lasttest#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ lastprime#17 lastprime#1 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ primeptr#7 primeptr#10 primeptr#1 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ testnum#10 testnum#1 testnum#15 testnum#11 testnum#2 ] : zp[2]:8 , 
Potential registers zp[1]:10 [ print_char::ch#4 print_char::ch#0 ] : zp[1]:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:11 [ print_char_cursor#20 print_char_cursor#41 print_char_cursor#21 ] : zp[2]:11 , 
Potential registers zp[2]:13 [ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 ] : zp[2]:13 , 
Potential registers zp[2]:15 [ print_str::str#2 print_str::str#0 ] : zp[2]:15 , 
Potential registers zp[1]:17 [ utoa::digit#2 utoa::digit#1 ] : zp[1]:17 , reg byte x , 
Potential registers zp[2]:18 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] : zp[2]:18 , 
Potential registers zp[1]:20 [ utoa::started#2 utoa::started#4 ] : zp[1]:20 , reg byte x , reg byte y , 
Potential registers zp[2]:21 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] : zp[2]:21 , 
Potential registers zp[2]:23 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] : zp[2]:23 , 
Potential registers zp[1]:25 [ utoa_append::digit#2 utoa_append::digit#1 ] : zp[1]:25 , reg byte x , reg byte y , 
Potential registers zp[2]:26 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ] : zp[2]:26 , 
Potential registers zp[2]:28 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ] : zp[2]:28 , 
Potential registers zp[1]:30 [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ] : zp[1]:30 , reg byte x , reg byte y , 
Potential registers zp[2]:31 [ rem16s#10 rem16s#30 rem16s#1 ] : zp[2]:31 , 
Potential registers zp[2]:33 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp[2]:33 , 
Potential registers zp[2]:35 [ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ] : zp[2]:35 , 
Potential registers zp[2]:37 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp[2]:37 , 
Potential registers zp[1]:39 [ divr16u::i#2 divr16u::i#1 ] : zp[1]:39 , reg byte x , reg byte y , 
Potential registers zp[4]:40 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ] : zp[4]:40 , 
Potential registers zp[2]:44 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] : zp[2]:44 , 
Potential registers zp[4]:46 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] : zp[4]:46 , 
Potential registers zp[4]:50 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] : zp[4]:50 , 
Potential registers zp[2]:54 [ main::$12 ] : zp[2]:54 , 
Potential registers zp[2]:56 [ main::$16 ] : zp[2]:56 , 
Potential registers zp[2]:58 [ main::p#0 ] : zp[2]:58 , 
Potential registers zp[2]:60 [ mul16s::a#0 ] : zp[2]:60 , 
Potential registers zp[2]:62 [ mul16s::b#0 ] : zp[2]:62 , 
Potential registers zp[4]:64 [ mul16s::return#2 ] : zp[4]:64 , 
Potential registers zp[4]:68 [ main::$0 ] : zp[4]:68 , 
Potential registers zp[2]:72 [ main::$15 ] : zp[2]:72 , 
Potential registers zp[2]:74 [ main::$13 ] : zp[2]:74 , 
Potential registers zp[2]:76 [ div16s::dividend#0 ] : zp[2]:76 , 
Potential registers zp[2]:78 [ main::$17 ] : zp[2]:78 , 
Potential registers zp[2]:80 [ div16s::divisor#0 ] : zp[2]:80 , 
Potential registers zp[2]:82 [ main::$14 ] : zp[2]:82 , 
Potential registers zp[2]:84 [ main::$18 ] : zp[2]:84 , 
Potential registers zp[1]:86 [ utoa::$11 ] : zp[1]:86 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:87 [ utoa::buffer#3 ] : zp[2]:87 , 
Potential registers zp[1]:89 [ utoa::$10 ] : zp[1]:89 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:90 [ utoa::digit_value#0 ] : zp[2]:90 , 
Potential registers zp[2]:92 [ utoa_append::buffer#0 ] : zp[2]:92 , 
Potential registers zp[2]:94 [ utoa_append::sub#0 ] : zp[2]:94 , 
Potential registers zp[2]:96 [ utoa_append::return#0 ] : zp[2]:96 , 
Potential registers zp[2]:98 [ divr16s::dividend#0 ] : zp[2]:98 , 
Potential registers zp[2]:100 [ divr16s::divisor#0 ] : zp[2]:100 , 
Potential registers zp[2]:102 [ divr16u::divisor#0 ] : zp[2]:102 , 
Potential registers zp[2]:104 [ divr16s::divisoru#1 ] : zp[2]:104 , 
Potential registers zp[2]:106 [ divr16s::dividendu#1 ] : zp[2]:106 , 
Potential registers zp[1]:108 [ divr16u::$1 ] : zp[1]:108 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:109 [ divr16u::$2 ] : zp[1]:109 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:110 [ rem16u#0 ] : zp[2]:110 , 
Potential registers zp[2]:112 [ mul16u::b#0 ] : zp[2]:112 , 
Potential registers zp[4]:114 [ mul16u::return#2 ] : zp[4]:114 , 
Potential registers zp[2]:118 [ mul16s::$6 ] : zp[2]:118 , 
Potential registers zp[2]:120 [ mul16s::$11 ] : zp[2]:120 , 
Potential registers zp[2]:122 [ mul16s::$9 ] : zp[2]:122 , 
Potential registers zp[2]:124 [ mul16s::$12 ] : zp[2]:124 , 
Potential registers zp[4]:126 [ mul16s::return#0 ] : zp[4]:126 , 
Potential registers zp[1]:130 [ mul16u::$1 ] : zp[1]:130 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [utoa_append] 2,500,550,003.5: zp[2]:23 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] 2,000,500,002.5: zp[1]:25 [ utoa_append::digit#2 utoa_append::digit#1 ] 333,350,000.5: zp[2]:94 [ utoa_append::sub#0 ] 200,002: zp[2]:96 [ utoa_append::return#0 ] 137,500.25: zp[2]:92 [ utoa_append::buffer#0 ] 
Uplift Scope [divr16u] 875,033,342.42: zp[2]:33 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 375,000,003.75: zp[2]:37 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 200,000,002: zp[1]:108 [ divr16u::$1 ] 200,000,002: zp[1]:109 [ divr16u::$2 ] 165,384,617.04: zp[1]:39 [ divr16u::i#2 divr16u::i#1 ] 67,908,096.73: zp[2]:35 [ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ] 11,765,294.29: zp[2]:102 [ divr16u::divisor#0 ] 
Uplift Scope [utoa] 378,718.21: zp[2]:21 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] 307,839.93: zp[2]:18 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] 228,573.71: zp[1]:17 [ utoa::digit#2 utoa::digit#1 ] 200,002: zp[1]:89 [ utoa::$10 ] 150,001.5: zp[1]:20 [ utoa::started#2 utoa::started#4 ] 60,000.6: zp[2]:90 [ utoa::digit_value#0 ] 2,002: zp[1]:86 [ utoa::$11 ] 2,002: zp[2]:87 [ utoa::buffer#3 ] 
Uplift Scope [print_char] 1,300,004: zp[1]:10 [ print_char::ch#4 print_char::ch#0 ] 
Uplift Scope [] 1,100,115.55: zp[2]:11 [ print_char_cursor#20 print_char_cursor#41 print_char_cursor#21 ] 43,354.5: zp[2]:31 [ rem16s#10 rem16s#30 rem16s#1 ] 25,000.25: zp[2]:110 [ rem16u#0 ] 308.96: zp[2]:8 [ testnum#10 testnum#1 testnum#15 testnum#11 testnum#2 ] 303: zp[2]:6 [ primeptr#7 primeptr#10 primeptr#1 ] 32.09: zp[2]:2 [ lasttest#13 lasttest#19 lasttest#1 ] 5.77: zp[2]:4 [ lastprime#17 lastprime#1 ] 
Uplift Scope [mul16u] 350,020.33: zp[4]:46 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] 245,004.57: zp[4]:50 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] 200,002: zp[1]:130 [ mul16u::$1 ] 167,202.5: zp[2]:44 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] 202: zp[4]:114 [ mul16u::return#2 ] 101: zp[2]:112 [ mul16u::b#0 ] 
Uplift Scope [print_str] 300,003: zp[2]:15 [ print_str::str#2 print_str::str#0 ] 
Uplift Scope [divr16s] 55,005.5: zp[2]:28 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ] 44,290.14: zp[2]:26 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ] 22,502.25: zp[1]:30 [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ] 10,001: zp[2]:106 [ divr16s::dividendu#1 ] 7,001: zp[2]:98 [ divr16s::dividend#0 ] 5,000.5: zp[2]:104 [ divr16s::divisoru#1 ] 3,000.43: zp[2]:100 [ divr16s::divisor#0 ] 
Uplift Scope [mul16s] 833.25: zp[4]:40 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ] 202: zp[2]:118 [ mul16s::$6 ] 202: zp[2]:120 [ mul16s::$11 ] 202: zp[2]:122 [ mul16s::$9 ] 202: zp[2]:124 [ mul16s::$12 ] 37.33: zp[4]:126 [ mul16s::return#0 ] 22: zp[4]:64 [ mul16s::return#2 ] 10.18: zp[2]:62 [ mul16s::b#0 ] 8: zp[2]:60 [ mul16s::a#0 ] 
Uplift Scope [div16s] 551: zp[2]:80 [ div16s::divisor#0 ] 367.33: zp[2]:76 [ div16s::dividend#0 ] 
Uplift Scope [print_sint_decimal] 456.33: zp[2]:13 [ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 ] 
Uplift Scope [main] 202: zp[2]:78 [ main::$17 ] 101: zp[2]:74 [ main::$13 ] 22: zp[2]:54 [ main::$12 ] 22: zp[2]:56 [ main::$16 ] 22: zp[2]:72 [ main::$15 ] 22: zp[2]:82 [ main::$14 ] 22: zp[2]:84 [ main::$18 ] 16.5: zp[2]:58 [ main::p#0 ] 11: zp[4]:68 [ main::$0 ] 
Uplift Scope [RADIX] 

Uplifting [utoa_append] best 281087 combination zp[2]:23 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ] zp[2]:94 [ utoa_append::sub#0 ] zp[2]:96 [ utoa_append::return#0 ] zp[2]:92 [ utoa_append::buffer#0 ] 
Uplifting [divr16u] best 260087 combination zp[2]:33 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp[2]:37 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp[2]:35 [ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ] zp[2]:102 [ divr16u::divisor#0 ] 
Uplifting [utoa] best 258783 combination zp[2]:21 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] zp[2]:18 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] zp[1]:17 [ utoa::digit#2 utoa::digit#1 ] reg byte a [ utoa::$10 ] reg byte x [ utoa::started#2 utoa::started#4 ] zp[2]:90 [ utoa::digit_value#0 ] reg byte a [ utoa::$11 ] zp[2]:87 [ utoa::buffer#3 ] 
Uplifting [print_char] best 258471 combination reg byte a [ print_char::ch#4 print_char::ch#0 ] 
Uplifting [] best 258471 combination zp[2]:11 [ print_char_cursor#20 print_char_cursor#41 print_char_cursor#21 ] zp[2]:31 [ rem16s#10 rem16s#30 rem16s#1 ] zp[2]:110 [ rem16u#0 ] zp[2]:8 [ testnum#10 testnum#1 testnum#15 testnum#11 testnum#2 ] zp[2]:6 [ primeptr#7 primeptr#10 primeptr#1 ] zp[2]:2 [ lasttest#13 lasttest#19 lasttest#1 ] zp[2]:4 [ lastprime#17 lastprime#1 ] 
Uplifting [mul16u] best 257871 combination zp[4]:46 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] zp[4]:50 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ] reg byte a [ mul16u::$1 ] zp[2]:44 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] zp[4]:114 [ mul16u::return#2 ] zp[2]:112 [ mul16u::b#0 ] 
Uplifting [print_str] best 257871 combination zp[2]:15 [ print_str::str#2 print_str::str#0 ] 
Uplifting [divr16s] best 257860 combination zp[2]:28 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ] zp[2]:26 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ] reg byte y [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ] zp[2]:106 [ divr16s::dividendu#1 ] zp[2]:98 [ divr16s::dividend#0 ] zp[2]:104 [ divr16s::divisoru#1 ] zp[2]:100 [ divr16s::divisor#0 ] 
Uplifting [mul16s] best 257860 combination zp[4]:40 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ] zp[2]:118 [ mul16s::$6 ] zp[2]:120 [ mul16s::$11 ] zp[2]:122 [ mul16s::$9 ] zp[2]:124 [ mul16s::$12 ] zp[4]:126 [ mul16s::return#0 ] zp[4]:64 [ mul16s::return#2 ] zp[2]:62 [ mul16s::b#0 ] zp[2]:60 [ mul16s::a#0 ] 
Uplifting [div16s] best 257860 combination zp[2]:80 [ div16s::divisor#0 ] zp[2]:76 [ div16s::dividend#0 ] 
Uplifting [print_sint_decimal] best 257860 combination zp[2]:13 [ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 ] 
Uplifting [main] best 257860 combination zp[2]:78 [ main::$17 ] zp[2]:74 [ main::$13 ] zp[2]:54 [ main::$12 ] zp[2]:56 [ main::$16 ] zp[2]:72 [ main::$15 ] zp[2]:82 [ main::$14 ] zp[2]:84 [ main::$18 ] zp[2]:58 [ main::p#0 ] zp[4]:68 [ main::$0 ] 
Uplifting [RADIX] best 257860 combination 
Attempting to uplift remaining variables inzp[1]:17 [ utoa::digit#2 utoa::digit#1 ]
Uplifting [utoa] best 257860 combination zp[1]:17 [ utoa::digit#2 utoa::digit#1 ] 
Coalescing zero page register [ zp[2]:31 [ rem16s#10 rem16s#30 rem16s#1 ] ] with [ zp[2]:110 [ rem16u#0 ] ] - score: 2
Coalescing zero page register [ zp[2]:8 [ testnum#10 testnum#1 testnum#15 testnum#11 testnum#2 ] ] with [ zp[2]:76 [ div16s::dividend#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:13 [ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 ] ] with [ zp[2]:18 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] ] with [ zp[2]:87 [ utoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 ] ] with [ zp[2]:92 [ utoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:23 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] with [ zp[2]:96 [ utoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 ] ] with [ zp[2]:35 [ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ] ] with [ zp[2]:98 [ divr16s::dividend#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 divr16s::dividend#0 ] ] with [ zp[2]:106 [ divr16s::dividendu#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:28 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 ] ] with [ zp[2]:100 [ divr16s::divisor#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:28 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16s::divisor#0 ] ] with [ zp[2]:102 [ divr16u::divisor#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:28 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16s::divisor#0 divr16u::divisor#0 ] ] with [ zp[2]:104 [ divr16s::divisoru#1 ] ] - score: 1
Coalescing zero page register [ zp[4]:40 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 ] ] with [ zp[4]:114 [ mul16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[4]:40 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#2 ] ] with [ zp[4]:126 [ mul16s::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:54 [ main::$12 ] ] with [ zp[2]:56 [ main::$16 ] ] - score: 1
Coalescing zero page register [ zp[2]:58 [ main::p#0 ] ] with [ zp[2]:60 [ mul16s::a#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:58 [ main::p#0 mul16s::a#0 ] ] with [ zp[2]:62 [ mul16s::b#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:64 [ mul16s::return#2 ] ] with [ zp[4]:68 [ main::$0 ] ] - score: 1
Coalescing zero page register [ zp[2]:74 [ main::$13 ] ] with [ zp[2]:78 [ main::$17 ] ] - score: 1
Coalescing zero page register [ zp[2]:82 [ main::$14 ] ] with [ zp[2]:84 [ main::$18 ] ] - score: 1
Coalescing zero page register [ zp[2]:90 [ utoa::digit_value#0 ] ] with [ zp[2]:94 [ utoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:118 [ mul16s::$6 ] ] with [ zp[2]:120 [ mul16s::$11 ] ] - score: 1
Coalescing zero page register [ zp[2]:122 [ mul16s::$9 ] ] with [ zp[2]:124 [ mul16s::$12 ] ] - score: 1
Coalescing zero page register [ zp[2]:13 [ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] ] with [ zp[2]:23 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ] ] - score: 2
Coalescing zero page register [ zp[2]:28 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16s::divisor#0 divr16u::divisor#0 divr16s::divisoru#1 ] ] with [ zp[2]:80 [ div16s::divisor#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:31 [ rem16s#10 rem16s#30 rem16s#1 rem16u#0 ] ] with [ zp[2]:33 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] - score: 1
Coalescing zero page register [ zp[4]:40 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#2 mul16s::return#0 ] ] with [ zp[4]:46 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] ] - score: 1
Coalescing zero page register [ zp[4]:40 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 ] ] with [ zp[4]:64 [ mul16s::return#2 main::$0 ] ] - score: 1
Coalescing zero page register [ zp[2]:54 [ main::$12 main::$16 ] ] with [ zp[2]:58 [ main::p#0 mul16s::a#0 mul16s::b#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:28 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16s::divisor#0 divr16u::divisor#0 divr16s::divisoru#1 div16s::divisor#0 ] ] with [ zp[2]:74 [ main::$13 main::$17 ] ] - score: 1
Coalescing zero page register [ zp[2]:13 [ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ] ] with [ zp[2]:6 [ primeptr#7 primeptr#10 primeptr#1 ] ]
Coalescing zero page register [ zp[2]:21 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ] ] with [ zp[2]:15 [ print_str::str#2 print_str::str#0 ] ]
Coalescing zero page register [ zp[2]:44 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 ] ] with [ zp[2]:26 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 divr16s::dividend#0 divr16s::dividendu#1 ] ]
Coalescing zero page register [ zp[2]:54 [ main::$12 main::$16 main::p#0 mul16s::a#0 mul16s::b#0 ] ] with [ zp[2]:31 [ rem16s#10 rem16s#30 rem16s#1 rem16u#0 divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ]
Coalescing zero page register [ zp[2]:72 [ main::$15 ] ] with [ zp[2]:37 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ]
Coalescing zero page register [ zp[2]:112 [ mul16u::b#0 ] ] with [ zp[2]:90 [ utoa::digit_value#0 utoa_append::sub#0 ] ]
Coalescing zero page register [ zp[2]:28 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16s::divisor#0 divr16u::divisor#0 divr16s::divisoru#1 div16s::divisor#0 main::$13 main::$17 ] ] with [ zp[2]:21 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 print_str::str#2 print_str::str#0 ] ]
Coalescing zero page register [ zp[2]:82 [ main::$14 main::$18 ] ] with [ zp[2]:13 [ print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 primeptr#7 primeptr#10 primeptr#1 ] ]
Coalescing zero page register [ zp[2]:118 [ mul16s::$6 mul16s::$11 ] ] with [ zp[2]:44 [ mul16u::a#2 mul16u::a#1 mul16u::a#0 divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 divr16s::dividend#0 divr16s::dividendu#1 ] ]
Coalescing zero page register [ zp[2]:122 [ mul16s::$9 mul16s::$12 ] ] with [ zp[2]:112 [ mul16u::b#0 utoa::digit_value#0 utoa_append::sub#0 ] ]
Allocated (was zp[2]:8) zp[2]:6 [ testnum#10 testnum#1 testnum#15 testnum#11 testnum#2 div16s::dividend#0 ]
Allocated (was zp[2]:11) zp[2]:8 [ print_char_cursor#20 print_char_cursor#41 print_char_cursor#21 ]
Allocated (was zp[1]:17) zp[1]:10 [ utoa::digit#2 utoa::digit#1 ]
Allocated (was zp[2]:28) zp[2]:11 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16s::divisor#0 divr16u::divisor#0 divr16s::divisoru#1 div16s::divisor#0 main::$13 main::$17 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 print_str::str#2 print_str::str#0 ]
Allocated (was zp[4]:40) zp[4]:13 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16s::return#2 main::$0 ]
Allocated (was zp[4]:50) zp[4]:17 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
Allocated (was zp[2]:54) zp[2]:21 [ main::$12 main::$16 main::p#0 mul16s::a#0 mul16s::b#0 rem16s#10 rem16s#30 rem16s#1 rem16u#0 divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated (was zp[2]:72) zp[2]:23 [ main::$15 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated (was zp[2]:82) zp[2]:25 [ main::$14 main::$18 print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 primeptr#7 primeptr#10 primeptr#1 ]
Allocated (was zp[2]:118) zp[2]:27 [ mul16s::$6 mul16s::$11 mul16u::a#2 mul16u::a#1 mul16u::a#0 divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 divr16s::dividend#0 divr16s::dividendu#1 ]
Allocated (was zp[2]:122) zp[2]:29 [ mul16s::$9 mul16s::$12 mul16u::b#0 utoa::digit_value#0 utoa_append::sub#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Calculates the 1000 first primes
// From A Comparison of Language Speed, The Transactor, March 1987, Volume 7, Issue 5
// http://csbruce.com/cbm/transactor/pdfs/trans_v7_i05.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  .label print_screen = $400
  // Remainder after unsigned 16-bit division
  .label rem16u = $15
  // Remainder after signed 16 bit division
  .label rem16s = $15
  .label testnum = 6
  .label lasttest = 2
  .label primeptr = $19
  .label lastprime = 4
  .label print_char_cursor = 8
  // main
main: {
    .label __0 = $d
    .label __12 = $15
    .label __13 = $b
    .label __14 = $19
    .label __15 = $17
    .label p = $15
    .label __16 = $15
    .label __17 = $b
    .label __18 = $19
    // [0] *((const signed word*) primenum+(byte) 1*(const byte) SIZEOF_SIGNED_WORD) ← (signed byte) 2 -- _deref_pwsc1=vwsc2 
    lda #<2
    sta primenum+1*SIZEOF_SIGNED_WORD
    lda #>2
    sta primenum+1*SIZEOF_SIGNED_WORD+1
    // [1] *((const signed word*) primenum+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (signed byte) 3 -- _deref_pwsc1=vwsc2 
    lda #<3
    sta primenum+2*SIZEOF_SIGNED_WORD
    lda #>3
    sta primenum+2*SIZEOF_SIGNED_WORD+1
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [2] phi (byte*) print_char_cursor#41 = (const byte*) print_screen#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [2] phi (signed word) lastprime#17 = (signed byte) 2 [phi:main->main::@1#1] -- vwsz1=vbsc1 
    lda #<2
    sta.z lastprime
    lda #>2
    sta.z lastprime+1
    // [2] phi (signed word) testnum#15 = (signed byte) 3 [phi:main->main::@1#2] -- vwsz1=vbsc1 
    lda #<3
    sta.z testnum
    lda #>3
    sta.z testnum+1
    // [2] phi (signed word) lasttest#13 = (signed byte) 2 [phi:main->main::@1#3] -- vwsz1=vbsc1 
    lda #<2
    sta.z lasttest
    lda #>2
    sta.z lasttest+1
    jmp __b1
    // [2] phi from main::@11 to main::@1 [phi:main::@11->main::@1]
  __b1_from___b11:
    // [2] phi (byte*) print_char_cursor#41 = (byte*) print_char_cursor#21 [phi:main::@11->main::@1#0] -- register_copy 
    // [2] phi (signed word) lastprime#17 = (signed word) lastprime#1 [phi:main::@11->main::@1#1] -- register_copy 
    // [2] phi (signed word) testnum#15 = (signed word) testnum#11 [phi:main::@11->main::@1#2] -- register_copy 
    // [2] phi (signed word) lasttest#13 = (signed word) lasttest#19 [phi:main::@11->main::@1#3] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [3] (signed word~) main::$12 ← (signed word) lasttest#13 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z lasttest
    asl
    sta.z __12
    lda.z lasttest+1
    rol
    sta.z __12+1
    // [4] (signed word*~) main::$16 ← (const signed word*) primenum + (signed word~) main::$12 -- pwsz1=pwsc1_plus_vwsz1 
    clc
    lda.z __16
    adc #<primenum
    sta.z __16
    lda.z __16+1
    adc #>primenum
    sta.z __16+1
    // [5] (signed word) main::p#0 ← *((signed word*~) main::$16) -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (p),y
    pha
    iny
    lda (p),y
    sta.z p+1
    pla
    sta.z p
    // [6] (signed word) mul16s::a#0 ← (signed word) main::p#0
    // [7] (signed word) mul16s::b#0 ← (signed word) main::p#0
    // [8] call mul16s 
    jsr mul16s
    // [9] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0
    jmp __b8
    // main::@8
  __b8:
    // [10] (signed dword~) main::$0 ← (signed dword) mul16s::return#2
    // [11] (signed word~) main::$15 ← (signed word)(signed dword~) main::$0 -- vwsz1=_sword_vdsz2 
    lda.z __0
    sta.z __15
    lda.z __0+1
    sta.z __15+1
    // [12] if((signed word) testnum#15<=(signed word~) main::$15) goto main::@2 -- vwsz1_le_vwsz2_then_la1 
    lda.z __15
    cmp.z testnum
    lda.z __15+1
    sbc.z testnum+1
    bvc !+
    eor #$80
  !:
    bpl __b2_from___b8
    jmp __b7
    // main::@7
  __b7:
    // [13] (signed word) lasttest#1 ← ++ (signed word) lasttest#13 -- vwsz1=_inc_vwsz1 
    inc.z lasttest
    bne !+
    inc.z lasttest+1
  !:
    // [14] phi from main::@7 main::@8 to main::@2 [phi:main::@7/main::@8->main::@2]
  __b2_from___b7:
  __b2_from___b8:
    // [14] phi (signed word) lasttest#19 = (signed word) lasttest#1 [phi:main::@7/main::@8->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [15] (signed word) testnum#1 ← (signed word) testnum#15 + (signed byte) 2 -- vwsz1=vwsz1_plus_vbsc1 
    lda.z testnum
    clc
    adc #<2
    sta.z testnum
    lda.z testnum+1
    adc #>2
    sta.z testnum+1
    // [16] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [16] phi (signed word) testnum#10 = (signed word) testnum#1 [phi:main::@2->main::@3#0] -- register_copy 
    // [16] phi (signed word) primeptr#7 = (signed byte) 2 [phi:main::@2->main::@3#1] -- vwsz1=vbsc1 
    lda #<2
    sta.z primeptr
    lda #>2
    sta.z primeptr+1
    jmp __b3
    // [16] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [16] phi (signed word) testnum#10 = (signed word) testnum#11 [phi:main::@4->main::@3#0] -- register_copy 
    // [16] phi (signed word) primeptr#7 = (signed word) primeptr#10 [phi:main::@4->main::@3#1] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [17] (signed word~) main::$13 ← (signed word) primeptr#7 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z primeptr
    asl
    sta.z __13
    lda.z primeptr+1
    rol
    sta.z __13+1
    // [18] (signed word) div16s::dividend#0 ← (signed word) testnum#10
    // [19] (signed word*~) main::$17 ← (const signed word*) primenum + (signed word~) main::$13 -- pwsz1=pwsc1_plus_vwsz1 
    clc
    lda.z __17
    adc #<primenum
    sta.z __17
    lda.z __17+1
    adc #>primenum
    sta.z __17+1
    // [20] (signed word) div16s::divisor#0 ← *((signed word*~) main::$17) -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (div16s.divisor),y
    pha
    iny
    lda (div16s.divisor),y
    sta.z div16s.divisor+1
    pla
    sta.z div16s.divisor
    // [21] call div16s 
    jsr div16s
    jmp __b9
    // main::@9
  __b9:
    // [22] (signed word) primeptr#1 ← ++ (signed word) primeptr#7 -- vwsz1=_inc_vwsz1 
    inc.z primeptr
    bne !+
    inc.z primeptr+1
  !:
    // [23] if((signed word) rem16s#10!=(signed byte) 0) goto main::@4 -- vwsz1_neq_0_then_la1 
    lda.z rem16s+1
    bne __b4_from___b9
    lda.z rem16s
    bne __b4_from___b9
    jmp __b5
    // main::@5
  __b5:
    // [24] (signed word) testnum#2 ← (signed word) testnum#10 + (signed byte) 2 -- vwsz1=vwsz1_plus_vbsc1 
    lda.z testnum
    clc
    adc #<2
    sta.z testnum
    lda.z testnum+1
    adc #>2
    sta.z testnum+1
    // [25] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
  __b4_from___b5:
    // [25] phi (signed word) testnum#11 = (signed word) testnum#2 [phi:main::@5->main::@4#0] -- register_copy 
    // [25] phi (signed word) primeptr#10 = (signed byte) 2 [phi:main::@5->main::@4#1] -- vwsz1=vbsc1 
    lda #<2
    sta.z primeptr
    lda #>2
    sta.z primeptr+1
    jmp __b4
    // [25] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
  __b4_from___b9:
    // [25] phi (signed word) testnum#11 = (signed word) testnum#10 [phi:main::@9->main::@4#0] -- register_copy 
    // [25] phi (signed word) primeptr#10 = (signed word) primeptr#1 [phi:main::@9->main::@4#1] -- register_copy 
    jmp __b4
    // main::@4
  __b4:
    // [26] if((signed word) primeptr#10<=(signed word) lasttest#19) goto main::@3 -- vwsz1_le_vwsz2_then_la1 
    lda.z lasttest
    cmp.z primeptr
    lda.z lasttest+1
    sbc.z primeptr+1
    bvc !+
    eor #$80
  !:
    bpl __b3_from___b4
    jmp __b6
    // main::@6
  __b6:
    // [27] (signed word) lastprime#1 ← ++ (signed word) lastprime#17 -- vwsz1=_inc_vwsz1 
    inc.z lastprime
    bne !+
    inc.z lastprime+1
  !:
    // [28] (signed word~) main::$14 ← (signed word) lastprime#1 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z lastprime
    asl
    sta.z __14
    lda.z lastprime+1
    rol
    sta.z __14+1
    // [29] (signed word*~) main::$18 ← (const signed word*) primenum + (signed word~) main::$14 -- pwsz1=pwsc1_plus_vwsz1 
    clc
    lda.z __18
    adc #<primenum
    sta.z __18
    lda.z __18+1
    adc #>primenum
    sta.z __18+1
    // [30] *((signed word*~) main::$18) ← (signed word) testnum#11 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda.z testnum
    sta (__18),y
    iny
    lda.z testnum+1
    sta (__18),y
    // [31] (signed word) print_sint_decimal::w#1 ← (signed word) testnum#11 -- vwsz1=vwsz2 
    lda.z testnum
    sta.z print_sint_decimal.w
    lda.z testnum+1
    sta.z print_sint_decimal.w+1
    // [32] call print_sint_decimal 
    jsr print_sint_decimal
    // [33] phi from main::@6 to main::@10 [phi:main::@6->main::@10]
  __b10_from___b6:
    jmp __b10
    // main::@10
  __b10:
    // [34] call print_char 
    // [37] phi from main::@10 to print_char [phi:main::@10->print_char]
  print_char_from___b10:
    // [37] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#21 [phi:main::@10->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#4 = (byte) ' ' [phi:main::@10->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp __b11
    // main::@11
  __b11:
    // [35] if((signed word) lastprime#1<(signed word) $3e8) goto main::@1 -- vwsz1_lt_vwsc1_then_la1 
    lda.z lastprime
    cmp #<$3e8
    lda.z lastprime+1
    sbc #>$3e8
    bvc !+
    eor #$80
  !:
    bmi __b1_from___b11
    jmp __breturn
    // main::@return
  __breturn:
    // [36] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [38] *((byte*) print_char_cursor#20) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [39] (byte*) print_char_cursor#21 ← ++ (byte*) print_char_cursor#20 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [40] return 
    rts
}
  // print_sint_decimal
// Print a signed int as DECIMAL
// print_sint_decimal(signed word zp($19) w)
print_sint_decimal: {
    .label w = $19
    // [41] if((signed word) print_sint_decimal::w#1<(signed byte) 0) goto print_sint_decimal::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sint_decimal
    // [42] phi from print_sint_decimal to print_sint_decimal::@3 [phi:print_sint_decimal->print_sint_decimal::@3]
  __b3_from_print_sint_decimal:
    jmp __b3
    // print_sint_decimal::@3
  __b3:
    // [43] call print_char 
    // [37] phi from print_sint_decimal::@3 to print_char [phi:print_sint_decimal::@3->print_char]
  print_char_from___b3:
    // [37] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#41 [phi:print_sint_decimal::@3->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#4 = (byte) ' ' [phi:print_sint_decimal::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [44] phi from print_sint_decimal::@3 print_sint_decimal::@4 to print_sint_decimal::@2 [phi:print_sint_decimal::@3/print_sint_decimal::@4->print_sint_decimal::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [44] phi (signed word) print_sint_decimal::w#4 = (signed word) print_sint_decimal::w#1 [phi:print_sint_decimal::@3/print_sint_decimal::@4->print_sint_decimal::@2#0] -- register_copy 
    jmp __b2
    // print_sint_decimal::@2
  __b2:
    // [45] (word) utoa::value#1 ← (word)(signed word) print_sint_decimal::w#4
    // [46] call utoa 
    // [60] phi from print_sint_decimal::@2 to utoa [phi:print_sint_decimal::@2->utoa]
  utoa_from___b2:
    jsr utoa
    // [47] phi from print_sint_decimal::@2 to print_sint_decimal::@5 [phi:print_sint_decimal::@2->print_sint_decimal::@5]
  __b5_from___b2:
    jmp __b5
    // print_sint_decimal::@5
  __b5:
    // [48] call print_str 
    // [53] phi from print_sint_decimal::@5 to print_str [phi:print_sint_decimal::@5->print_str]
  print_str_from___b5:
    jsr print_str
    jmp __breturn
    // print_sint_decimal::@return
  __breturn:
    // [49] return 
    rts
    // [50] phi from print_sint_decimal to print_sint_decimal::@1 [phi:print_sint_decimal->print_sint_decimal::@1]
  __b1_from_print_sint_decimal:
    jmp __b1
    // print_sint_decimal::@1
  __b1:
    // [51] call print_char 
    // [37] phi from print_sint_decimal::@1 to print_char [phi:print_sint_decimal::@1->print_char]
  print_char_from___b1:
    // [37] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#41 [phi:print_sint_decimal::@1->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sint_decimal::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_sint_decimal::@4
  __b4:
    // [52] (signed word) print_sint_decimal::w#0 ← - (signed word) print_sint_decimal::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($b) str)
print_str: {
    .label str = $b
    // [54] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  __b1_from_print_str:
    // [54] phi (byte*) print_str::str#2 = (const byte*) decimal_digits [phi:print_str->print_str::@1#0] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z str
    lda #>decimal_digits
    sta.z str+1
    jmp __b1
    // print_str::@1
  __b1:
    // [55] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [56] return 
    rts
    // print_str::@2
  __b2:
    // [57] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [58] call print_char 
    // [37] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [37] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#21 [phi:print_str::@2->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#4 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [59] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [54] phi from print_str::@3 to print_str::@1 [phi:print_str::@3->print_str::@1]
  __b1_from___b3:
    // [54] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($19) value, byte* zp($b) buffer)
utoa: {
    .const max_digits = 5
    .label digit_value = $1d
    .label buffer = $b
    .label digit = $a
    .label value = $19
    // [61] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [61] phi (byte*) utoa::buffer#11 = (const byte*) decimal_digits [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z buffer
    lda #>decimal_digits
    sta.z buffer+1
    // [61] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [61] phi (word) utoa::value#2 = (word) utoa::value#1 [phi:utoa->utoa::@1#2] -- register_copy 
    // [61] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [62] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [63] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuaa=_byte_vwuz1 
    lda.z value
    // [64] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // [65] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [66] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [67] return 
    rts
    // utoa::@2
  __b2:
    // [68] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [69] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [70] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [71] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [72] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [72] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [72] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [72] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [73] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [61] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [61] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [61] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [61] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [61] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [74] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
    // [75] (word) utoa_append::value#0 ← (word) utoa::value#2
    // [76] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
    // [77] call utoa_append 
    // [81] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [78] (word) utoa_append::return#0 ← (word) utoa_append::value#2
    jmp __b6
    // utoa::@6
  __b6:
    // [79] (word) utoa::value#0 ← (word) utoa_append::return#0
    // [80] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [72] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [72] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [72] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [72] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($b) buffer, word zp($19) value, word zp($1d) sub)
utoa_append: {
    .label buffer = $b
    .label value = $19
    .label sub = $1d
    .label return = $19
    // [82] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [82] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [82] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [83] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [84] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [85] return 
    rts
    // utoa_append::@2
  __b2:
    // [86] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // [87] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [82] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [82] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [82] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // div16s
// Perform division on two signed 16-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// div16s(signed word zp(6) dividend, signed word zp($b) divisor)
div16s: {
    .label dividend = 6
    .label divisor = $b
    // [88] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0 -- vwsz1=vwsz2 
    lda.z dividend
    sta.z divr16s.dividend
    lda.z dividend+1
    sta.z divr16s.dividend+1
    // [89] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0
    // [90] call divr16s 
    jsr divr16s
    jmp __breturn
    // div16s::@return
  __breturn:
    // [91] return 
    rts
}
  // divr16s
// Perform division on two signed 16-bit numbers with an initial remainder.
// Returns dividend/divisor. The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// divr16s(signed word zp($1b) dividend, signed word zp($b) divisor)
divr16s: {
    .label dividendu = $1b
    .label divisoru = $b
    .label dividend = $1b
    .label divisor = $b
    // [92] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1 -- vwsz1_lt_0_then_la1 
    lda.z dividend+1
    bmi __b1
    jmp __b6
    // divr16s::@6
  __b6:
    // [93] (word) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0
    // [94] phi from divr16s::@6 to divr16s::@2 [phi:divr16s::@6->divr16s::@2]
  __b2_from___b6:
    // [94] phi (word) divr16s::dividendu#3 = (word) divr16s::dividendu#8 [phi:divr16s::@6->divr16s::@2#0] -- register_copy 
    // [94] phi (byte) divr16s::neg#3 = (byte) 0 [phi:divr16s::@6->divr16s::@2#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b2
    // divr16s::@2
  __b2:
    // [95] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3 -- vwsz1_lt_0_then_la1 
    lda.z divisor+1
    bmi __b3
    jmp __b7
    // divr16s::@7
  __b7:
    // [96] (word) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0
    // [97] phi from divr16s::@3 divr16s::@7 to divr16s::@4 [phi:divr16s::@3/divr16s::@7->divr16s::@4]
  __b4_from___b3:
  __b4_from___b7:
    // [97] phi (byte) divr16s::neg#4 = (byte) divr16s::neg#2 [phi:divr16s::@3/divr16s::@7->divr16s::@4#0] -- register_copy 
    // [97] phi (word) divr16s::divisoru#3 = (word) divr16s::divisoru#4 [phi:divr16s::@3/divr16s::@7->divr16s::@4#1] -- register_copy 
    jmp __b4
    // divr16s::@4
  __b4:
    // [98] (word) divr16u::dividend#1 ← (word) divr16s::dividendu#3
    // [99] (word) divr16u::divisor#0 ← (word) divr16s::divisoru#3
    // [100] call divr16u 
    // [111] phi from divr16s::@4 to divr16u [phi:divr16s::@4->divr16u]
  divr16u_from___b4:
    jsr divr16u
    jmp __b9
    // divr16s::@9
  __b9:
    // [101] if((byte) divr16s::neg#4==(byte) 0) goto divr16s::@5 -- vbuyy_eq_0_then_la1 
    cpy #0
    beq __b5
    jmp __b8
    // divr16s::@8
  __b8:
    // [102] (signed word) rem16s#1 ← - (signed word)(word) rem16u#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z rem16s
    sta.z rem16s
    lda #0
    sbc.z rem16s+1
    sta.z rem16s+1
    // [103] phi from divr16s::@5 divr16s::@8 to divr16s::@return [phi:divr16s::@5/divr16s::@8->divr16s::@return]
  __breturn_from___b5:
  __breturn_from___b8:
    // [103] phi (signed word) rem16s#10 = (signed word) rem16s#30 [phi:divr16s::@5/divr16s::@8->divr16s::@return#0] -- register_copy 
    jmp __breturn
    // divr16s::@return
  __breturn:
    // [104] return 
    rts
    // divr16s::@5
  __b5:
    // [105] (signed word) rem16s#30 ← (signed word)(word) rem16u#0
    jmp __breturn_from___b5
    // divr16s::@3
  __b3:
    // [106] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z divisoru
    sta.z divisoru
    lda #0
    sbc.z divisoru+1
    sta.z divisoru+1
    // [107] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1 -- vbuyy=vbuyy_bxor_vbuc1 
    tya
    eor #1
    tay
    // [108] (word) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1
    jmp __b4_from___b3
    // divr16s::@1
  __b1:
    // [109] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z dividendu
    sta.z dividendu
    lda #0
    sbc.z dividendu+1
    sta.z dividendu+1
    // [110] (word) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1
    // [94] phi from divr16s::@1 to divr16s::@2 [phi:divr16s::@1->divr16s::@2]
  __b2_from___b1:
    // [94] phi (word) divr16s::dividendu#3 = (word) divr16s::dividendu#7 [phi:divr16s::@1->divr16s::@2#0] -- register_copy 
    // [94] phi (byte) divr16s::neg#3 = (byte) 1 [phi:divr16s::@1->divr16s::@2#1] -- vbuyy=vbuc1 
    ldy #1
    jmp __b2
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($1b) dividend, word zp($b) divisor, word zp($15) rem)
divr16u: {
    .label rem = $15
    .label dividend = $1b
    .label quotient = $17
    .label return = $17
    .label divisor = $b
    // [112] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  __b1_from_divr16u:
    // [112] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [112] phi (word) divr16u::quotient#3 = (word) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z quotient
    lda #>0
    sta.z quotient+1
    // [112] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#1 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [112] phi (word) divr16u::rem#4 = (word) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vwuc1 
    lda #<0
    sta.z rem
    lda #>0
    sta.z rem+1
    jmp __b1
    // [112] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  __b1_from___b3:
    // [112] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [112] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [112] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [112] phi (word) divr16u::rem#4 = (word) divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp __b1
    // divr16u::@1
  __b1:
    // [113] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // [114] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 -- vbuaa=_hi_vwuz1 
    lda.z dividend+1
    // [115] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [116] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr16u::@4
  __b4:
    // [117] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [118] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [118] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp __b2
    // divr16u::@2
  __b2:
    // [119] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // [120] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // [121] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3 -- vwuz1_lt_vwuz2_then_la1 
    lda.z rem+1
    cmp.z divisor+1
    bcc __b3_from___b2
    bne !+
    lda.z rem
    cmp.z divisor
    bcc __b3_from___b2
  !:
    jmp __b5
    // divr16u::@5
  __b5:
    // [122] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // [123] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z rem
    sec
    sbc.z divisor
    sta.z rem
    lda.z rem+1
    sbc.z divisor+1
    sta.z rem+1
    // [124] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [124] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [124] phi (word) divr16u::rem#10 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp __b3
    // divr16u::@3
  __b3:
    // [125] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [126] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b3
    jmp __b6
    // divr16u::@6
  __b6:
    // [127] (word) rem16u#0 ← (word) divr16u::rem#10
    jmp __breturn
    // divr16u::@return
  __breturn:
    // [128] return 
    rts
}
  // mul16s
// Multiply of two signed ints to a signed long
// Fixes offsets introduced by using unsigned multiplication
// mul16s(signed word zp($15) a, signed word zp($15) b)
mul16s: {
    .label __6 = $1b
    .label __9 = $1d
    .label __11 = $1b
    .label __12 = $1d
    .label m = $d
    .label return = $d
    .label a = $15
    .label b = $15
    // [129] (word) mul16u::a#1 ← (word)(signed word) mul16s::a#0 -- vwuz1=vwuz2 
    lda.z a
    sta.z mul16u.a
    lda.z a+1
    sta.z mul16u.a+1
    // [130] (word) mul16u::b#0 ← (word)(signed word) mul16s::b#0 -- vwuz1=vwuz2 
    lda.z b
    sta.z mul16u.b
    lda.z b+1
    sta.z mul16u.b+1
    // [131] call mul16u 
    jsr mul16u
    // [132] (dword) mul16u::return#2 ← (dword) mul16u::res#2
    jmp __b5
    // mul16s::@5
  __b5:
    // [133] (dword) mul16s::m#0 ← (dword) mul16u::return#2
    // [134] if((signed word) mul16s::a#0>=(signed byte) 0) goto mul16s::@1 -- vwsz1_ge_0_then_la1 
    lda.z a+1
    bpl __b1_from___b5
    jmp __b3
    // mul16s::@3
  __b3:
    // [135] (word~) mul16s::$6 ← > (dword) mul16s::m#0 -- vwuz1=_hi_vduz2 
    lda.z m+2
    sta.z __6
    lda.z m+3
    sta.z __6+1
    // [136] (word~) mul16s::$11 ← (word~) mul16s::$6 - (word)(signed word) mul16s::b#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z __11
    sec
    sbc.z b
    sta.z __11
    lda.z __11+1
    sbc.z b+1
    sta.z __11+1
    // [137] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$11 -- vduz1=vduz1_sethi_vwuz2 
    lda.z __11
    sta.z m+2
    lda.z __11+1
    sta.z m+3
    // [138] phi from mul16s::@3 mul16s::@5 to mul16s::@1 [phi:mul16s::@3/mul16s::@5->mul16s::@1]
  __b1_from___b3:
  __b1_from___b5:
    // [138] phi (dword) mul16s::m#5 = (dword) mul16s::m#1 [phi:mul16s::@3/mul16s::@5->mul16s::@1#0] -- register_copy 
    jmp __b1
    // mul16s::@1
  __b1:
    // [139] if((signed word) mul16s::b#0>=(signed byte) 0) goto mul16s::@2 -- vwsz1_ge_0_then_la1 
    lda.z b+1
    bpl __b2_from___b1
    jmp __b4
    // mul16s::@4
  __b4:
    // [140] (word~) mul16s::$9 ← > (dword) mul16s::m#5 -- vwuz1=_hi_vduz2 
    lda.z m+2
    sta.z __9
    lda.z m+3
    sta.z __9+1
    // [141] (word~) mul16s::$12 ← (word~) mul16s::$9 - (word)(signed word) mul16s::a#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z __12
    sec
    sbc.z a
    sta.z __12
    lda.z __12+1
    sbc.z a+1
    sta.z __12+1
    // [142] (dword) mul16s::m#2 ← (dword) mul16s::m#5 hi= (word~) mul16s::$12 -- vduz1=vduz1_sethi_vwuz2 
    lda.z __12
    sta.z m+2
    lda.z __12+1
    sta.z m+3
    // [143] phi from mul16s::@1 mul16s::@4 to mul16s::@2 [phi:mul16s::@1/mul16s::@4->mul16s::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [143] phi (dword) mul16s::m#4 = (dword) mul16s::m#5 [phi:mul16s::@1/mul16s::@4->mul16s::@2#0] -- register_copy 
    jmp __b2
    // mul16s::@2
  __b2:
    // [144] (signed dword) mul16s::return#0 ← (signed dword)(dword) mul16s::m#4
    jmp __breturn
    // mul16s::@return
  __breturn:
    // [145] return 
    rts
}
  // mul16u
// Perform binary multiplication of two unsigned 16-bit unsigned ints into a 32-bit unsigned long
// mul16u(word zp($1b) a, word zp($1d) b)
mul16u: {
    .label mb = $11
    .label a = $1b
    .label res = $d
    .label b = $1d
    .label return = $d
    // [146] (dword) mul16u::mb#0 ← (dword)(word) mul16u::b#0 -- vduz1=_dword_vwuz2 
    lda.z b
    sta.z mb
    lda.z b+1
    sta.z mb+1
    lda #0
    sta.z mb+2
    sta.z mb+3
    // [147] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  __b1_from_mul16u:
    // [147] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
    // [147] phi (dword) mul16u::res#2 = (dword) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    lda #<0>>$10
    sta.z res+2
    lda #>0>>$10
    sta.z res+3
    // [147] phi (word) mul16u::a#2 = (word) mul16u::a#1 [phi:mul16u->mul16u::@1#2] -- register_copy 
    jmp __b1
    // mul16u::@1
  __b1:
    // [148] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda.z a
    bne __b2
    lda.z a+1
    bne __b2
    jmp __breturn
    // mul16u::@return
  __breturn:
    // [149] return 
    rts
    // mul16u::@2
  __b2:
    // [150] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1 -- vbuaa=vwuz1_band_vbuc1 
    lda #1
    and.z a
    // [151] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul16u::@4
  __b4:
    // [152] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    lda.z res+2
    adc.z mb+2
    sta.z res+2
    lda.z res+3
    adc.z mb+3
    sta.z res+3
    // [153] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [153] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    jmp __b3
    // mul16u::@3
  __b3:
    // [154] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte) 1 -- vwuz1=vwuz1_ror_1 
    lsr.z a+1
    ror.z a
    // [155] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1 -- vduz1=vduz1_rol_1 
    asl.z mb
    rol.z mb+1
    rol.z mb+2
    rol.z mb+3
    // [147] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
  __b1_from___b3:
    // [147] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
    // [147] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
    // [147] phi (word) mul16u::a#2 = (word) mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Digits used for storing the decimal unsigned int
  decimal_digits: .fill 6, 0
  primenum: .fill 2*$3e8, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b8
Removing instruction jmp __b7
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b9
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b9
Removing instruction jmp __b8
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b2_from___b8 with __b2
Replacing label __b4_from___b9 with __b4
Replacing label __b4_from___b9 with __b4
Replacing label __b3_from___b4 with __b3
Replacing label __b1_from___b11 with __b1
Replacing label __b1_from_print_sint_decimal with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __breturn_from___b5 with __breturn
Replacing label __b4_from___b3 with __b4
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b3_from___b2 with __b3
Replacing label __b1_from___b3 with __b1
Replacing label __b1_from___b5 with __b1
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Removing instruction __b1_from___b11:
Removing instruction __b2_from___b7:
Removing instruction __b2_from___b8:
Removing instruction __b3_from___b4:
Removing instruction __b4_from___b9:
Removing instruction __b10_from___b6:
Removing instruction print_char_from___b10:
Removing instruction __b3_from_print_sint_decimal:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction utoa_from___b2:
Removing instruction __b5_from___b2:
Removing instruction print_str_from___b5:
Removing instruction __b1_from_print_sint_decimal:
Removing instruction print_char_from___b1:
Removing instruction __b4_from___b7:
Removing instruction utoa_append_from___b5:
Removing instruction __b2_from___b6:
Removing instruction __b7:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b7:
Removing instruction divr16u_from___b4:
Removing instruction __breturn_from___b5:
Removing instruction __breturn_from___b8:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b5:
Removing instruction __breturn:
Removing instruction __b1_from___b3:
Removing instruction __b1_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __breturn:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b8:
Removing instruction __b7:
Removing instruction __b3_from___b2:
Removing instruction __b9:
Removing instruction __b5:
Removing instruction __b4_from___b5:
Removing instruction __b6:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from_print_str:
Removing instruction __breturn:
Removing instruction print_char_from___b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b1_from_utoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1_from_utoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Removing instruction __b6:
Removing instruction __b9:
Removing instruction __b8:
Removing instruction __b2_from___b1:
Removing instruction __b1_from_divr16u:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b5:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b1_from_mul16u:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to __breturn in beq __b5
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda.z digit_value+1
Removing instruction lda #<0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b5:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction rts
Succesful ASM optimization Pass5UnreachableCodeElimination
Fixing long branch [190] bmi __b1 to bpl

FINAL SYMBOL TABLE
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const word*) RADIX_DECIMAL_VALUES[]  = { (word) $2710, (word) $3e8, (word) $64, (word) $a }
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(const byte*) decimal_digits[(number) 6]  = { fill( 6, 0) }
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(label) div16s::@return
(signed word) div16s::dividend
(signed word) div16s::dividend#0 dividend zp[2]:6 367.33333333333337
(signed word) div16s::divisor
(signed word) div16s::divisor#0 divisor zp[2]:11 551.0
(signed word) div16s::return
(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
(label) divr16s::@1
(label) divr16s::@2
(label) divr16s::@3
(label) divr16s::@4
(label) divr16s::@5
(label) divr16s::@6
(label) divr16s::@7
(label) divr16s::@8
(label) divr16s::@9
(label) divr16s::@return
(signed word) divr16s::dividend
(signed word) divr16s::dividend#0 dividend zp[2]:27 7001.0
(word) divr16s::dividendu
(signed word) divr16s::dividendu#1 dividendu zp[2]:27 10001.0
(word) divr16s::dividendu#3 dividendu zp[2]:27 4286.142857142857
(word) divr16s::dividendu#7 dividendu zp[2]:27 20002.0
(word) divr16s::dividendu#8 dividendu zp[2]:27 20002.0
(signed word) divr16s::divisor
(signed word) divr16s::divisor#0 divisor zp[2]:11 3000.4285714285716
(word) divr16s::divisoru
(signed word) divr16s::divisoru#1 divisoru zp[2]:11 5000.5
(word) divr16s::divisoru#3 divisoru zp[2]:11 15001.5
(word) divr16s::divisoru#4 divisoru zp[2]:11 20002.0
(word) divr16s::divisoru#5 divisoru zp[2]:11 20002.0
(byte) divr16s::neg
(byte) divr16s::neg#2 reg byte y 10001.0
(byte) divr16s::neg#3 reg byte y 5000.5
(byte) divr16s::neg#4 reg byte y 7500.75
(signed word) divr16s::rem
(word) divr16s::remu
(word) divr16s::resultu
(signed word) divr16s::return
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 2.00000002E8
(byte~) divr16u::$2 reg byte a 2.00000002E8
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp[2]:27 2.500000025E7
(word) divr16u::dividend#1 dividend zp[2]:27 36667.33333333333
(word) divr16u::dividend#2 dividend zp[2]:27 4.287142914285715E7
(word) divr16u::divisor
(word) divr16u::divisor#0 divisor zp[2]:11 1.1765294294117648E7
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 1.500000015E8
(byte) divr16u::i#2 reg byte x 1.5384615538461538E7
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp[2]:23 1.500000015E8
(word) divr16u::quotient#2 quotient zp[2]:23 1.00000001E8
(word) divr16u::quotient#3 quotient zp[2]:23 2.500000025E7
(word) divr16u::rem
(word) divr16u::rem#0 rem zp[2]:21 7.500000075E7
(word) divr16u::rem#1 rem zp[2]:21 2.00000002E8
(word) divr16u::rem#10 rem zp[2]:21 1.0003333466666667E8
(word) divr16u::rem#2 rem zp[2]:21 2.00000002E8
(word) divr16u::rem#4 rem zp[2]:21 2.00000002E8
(word) divr16u::rem#5 rem zp[2]:21 1.00000001E8
(word) divr16u::return
(word) divr16u::return#0 return zp[2]:23 1.00000001E8
(signed word) lastprime
(signed word) lastprime#1 lastprime zp[2]:4 4.888888888888889
(signed word) lastprime#17 lastprime zp[2]:4 0.88
(signed word) lasttest
(signed word) lasttest#1 lasttest zp[2]:2 22.0
(signed word) lasttest#13 lasttest zp[2]:2 4.0
(signed word) lasttest#19 lasttest zp[2]:2 6.090909090909091
(void()) main()
(signed dword~) main::$0 zp[4]:13 11.0
(signed word~) main::$12 zp[2]:21 22.0
(signed word~) main::$13 zp[2]:11 101.0
(signed word~) main::$14 zp[2]:25 22.0
(signed word~) main::$15 zp[2]:23 22.0
(signed word*~) main::$16 zp[2]:21 22.0
(signed word*~) main::$17 zp[2]:11 202.0
(signed word*~) main::$18 zp[2]:25 22.0
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(signed word) main::p
(signed word) main::p#0 p zp[2]:21 16.5
(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
(word~) mul16s::$11 zp[2]:27 202.0
(word~) mul16s::$12 zp[2]:29 202.0
(word~) mul16s::$6 zp[2]:27 202.0
(word~) mul16s::$9 zp[2]:29 202.0
(label) mul16s::@1
(label) mul16s::@2
(label) mul16s::@3
(label) mul16s::@4
(label) mul16s::@5
(label) mul16s::@return
(signed word) mul16s::a
(signed word) mul16s::a#0 a zp[2]:21 8.0
(signed word) mul16s::b
(signed word) mul16s::b#0 b zp[2]:21 10.181818181818182
(dword) mul16s::m
(dword) mul16s::m#0 m zp[4]:13 101.0
(dword) mul16s::m#1 m zp[4]:13 202.0
(dword) mul16s::m#2 m zp[4]:13 202.0
(dword) mul16s::m#4 m zp[4]:13 202.0
(dword) mul16s::m#5 m zp[4]:13 126.25
(signed dword) mul16s::return
(signed dword) mul16s::return#0 return zp[4]:13 37.33333333333333
(signed dword) mul16s::return#2 return zp[4]:13 22.0
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(byte~) mul16u::$1 reg byte a 200002.0
(label) mul16u::@1
(label) mul16u::@2
(label) mul16u::@3
(label) mul16u::@4
(label) mul16u::@return
(word) mul16u::a
(word) mul16u::a#0 a zp[2]:27 100001.0
(word) mul16u::a#1 a zp[2]:27 367.33333333333337
(word) mul16u::a#2 a zp[2]:27 66834.16666666666
(word) mul16u::b
(word) mul16u::b#0 b zp[2]:29 101.0
(dword) mul16u::mb
(dword) mul16u::mb#0 mb zp[4]:17 2002.0
(dword) mul16u::mb#1 mb zp[4]:17 200002.0
(dword) mul16u::mb#2 mb zp[4]:17 43000.57142857143
(dword) mul16u::res
(dword) mul16u::res#1 res zp[4]:13 200002.0
(dword) mul16u::res#2 res zp[4]:13 50017.33333333333
(dword) mul16u::res#6 res zp[4]:13 100001.0
(dword) mul16u::return
(dword) mul16u::return#2 return zp[4]:13 202.0
(const signed word*) primenum[(number) $3e8]  = { fill( $3e8, 0) }
(signed word) primeptr
(signed word) primeptr#1 primeptr zp[2]:25 101.0
(signed word) primeptr#10 primeptr zp[2]:25 151.5
(signed word) primeptr#7 primeptr zp[2]:25 50.5
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 200002.0
(byte) print_char::ch#4 reg byte a 1100002.0
(byte*) print_char_cursor
(byte*) print_char_cursor#20 print_char_cursor zp[2]:8 1050108.0
(byte*) print_char_cursor#21 print_char_cursor zp[2]:8 50001.09090909091
(byte*) print_char_cursor#41 print_char_cursor zp[2]:8 6.454545454545455
(byte*) print_line_cursor
(byte*) print_screen
(const byte*) print_screen#0 print_screen = (byte*) 1024
(void()) print_sint_decimal((signed word) print_sint_decimal::w)
(label) print_sint_decimal::@1
(label) print_sint_decimal::@2
(label) print_sint_decimal::@3
(label) print_sint_decimal::@4
(label) print_sint_decimal::@5
(label) print_sint_decimal::@return
(signed word) print_sint_decimal::w
(signed word) print_sint_decimal::w#0 w zp[2]:25 202.0
(signed word) print_sint_decimal::w#1 w zp[2]:25 52.33333333333333
(signed word) print_sint_decimal::w#4 w zp[2]:25 202.0
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:11 200002.0
(byte*) print_str::str#2 str zp[2]:11 100001.0
(signed word) rem16s
(signed word) rem16s#1 rem16s zp[2]:21 20002.0
(signed word) rem16s#10 rem16s zp[2]:21 3350.5
(signed word) rem16s#30 rem16s zp[2]:21 20002.0
(word) rem16u
(word) rem16u#0 rem16u zp[2]:21 25000.25
(signed word) testnum
(signed word) testnum#1 testnum zp[2]:6 22.0
(signed word) testnum#10 testnum zp[2]:6 51.875
(signed word) testnum#11 testnum zp[2]:6 30.545454545454547
(signed word) testnum#15 testnum zp[2]:6 2.5384615384615383
(signed word) testnum#2 testnum zp[2]:6 202.0
(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
(byte~) utoa::$10 reg byte a 200002.0
(byte~) utoa::$11 reg byte a 2002.0
(label) utoa::@1
(label) utoa::@2
(label) utoa::@3
(label) utoa::@4
(label) utoa::@5
(label) utoa::@6
(label) utoa::@7
(label) utoa::@return
(byte*) utoa::buffer
(byte*) utoa::buffer#11 buffer zp[2]:11 28714.714285714286
(byte*) utoa::buffer#14 buffer zp[2]:11 150001.5
(byte*) utoa::buffer#3 buffer zp[2]:11 2002.0
(byte*) utoa::buffer#4 buffer zp[2]:11 200002.0
(byte) utoa::digit
(byte) utoa::digit#1 digit zp[1]:10 200002.0
(byte) utoa::digit#2 digit zp[1]:10 28571.714285714286
(word) utoa::digit_value
(word) utoa::digit_value#0 digit_value zp[2]:29 60000.600000000006
(word*) utoa::digit_values
(byte) utoa::max_digits
(const byte) utoa::max_digits#1 max_digits = (byte) 5
(byte) utoa::radix
(byte) utoa::started
(byte) utoa::started#2 reg byte x 50000.5
(byte) utoa::started#4 reg byte x 100001.0
(word) utoa::value
(word) utoa::value#0 value zp[2]:25 100001.0
(word) utoa::value#1 value zp[2]:25 551.0
(word) utoa::value#2 value zp[2]:25 57286.42857142857
(word) utoa::value#6 value zp[2]:25 150001.5
(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
(label) utoa_append::@1
(label) utoa_append::@2
(label) utoa_append::@3
(label) utoa_append::@return
(byte*) utoa_append::buffer
(byte*) utoa_append::buffer#0 buffer zp[2]:11 137500.25
(byte) utoa_append::digit
(byte) utoa_append::digit#1 reg byte x 1.000000001E9
(byte) utoa_append::digit#2 reg byte x 1.0005000015E9
(word) utoa_append::return
(word) utoa_append::return#0 return zp[2]:25 200002.0
(word) utoa_append::sub
(word) utoa_append::sub#0 sub zp[2]:29 3.333500005E8
(word) utoa_append::value
(word) utoa_append::value#0 value zp[2]:25 366667.3333333334
(word) utoa_append::value#1 value zp[2]:25 2.000000002E9
(word) utoa_append::value#2 value zp[2]:25 5.0018333416666675E8

zp[2]:2 [ lasttest#13 lasttest#19 lasttest#1 ]
zp[2]:4 [ lastprime#17 lastprime#1 ]
zp[2]:6 [ testnum#10 testnum#1 testnum#15 testnum#11 testnum#2 div16s::dividend#0 ]
reg byte a [ print_char::ch#4 print_char::ch#0 ]
zp[2]:8 [ print_char_cursor#20 print_char_cursor#41 print_char_cursor#21 ]
zp[1]:10 [ utoa::digit#2 utoa::digit#1 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[2]:11 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16s::divisor#0 divr16u::divisor#0 divr16s::divisoru#1 div16s::divisor#0 main::$13 main::$17 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 print_str::str#2 print_str::str#0 ]
reg byte y [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[4]:13 [ mul16s::m#4 mul16s::m#5 mul16s::m#1 mul16s::m#0 mul16s::m#2 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16s::return#2 main::$0 ]
zp[4]:17 [ mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
zp[2]:21 [ main::$12 main::$16 main::p#0 mul16s::a#0 mul16s::b#0 rem16s#10 rem16s#30 rem16s#1 rem16u#0 divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
zp[2]:23 [ main::$15 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
zp[2]:25 [ main::$14 main::$18 print_sint_decimal::w#4 print_sint_decimal::w#0 print_sint_decimal::w#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 primeptr#7 primeptr#10 primeptr#1 ]
reg byte a [ utoa::$11 ]
reg byte a [ utoa::$10 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
zp[2]:27 [ mul16s::$6 mul16s::$11 mul16u::a#2 mul16u::a#1 mul16u::a#0 divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 divr16s::dividend#0 divr16s::dividendu#1 ]
zp[2]:29 [ mul16s::$9 mul16s::$12 mul16u::b#0 utoa::digit_value#0 utoa_append::sub#0 ]
reg byte a [ mul16u::$1 ]


FINAL ASSEMBLER
Score: 211151

  // File Comments
// Calculates the 1000 first primes
// From A Comparison of Language Speed, The Transactor, March 1987, Volume 7, Issue 5
// http://csbruce.com/cbm/transactor/pdfs/trans_v7_i05.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  .label print_screen = $400
  // Remainder after unsigned 16-bit division
  .label rem16u = $15
  // Remainder after signed 16 bit division
  .label rem16s = $15
  .label testnum = 6
  .label lasttest = 2
  .label primeptr = $19
  .label lastprime = 4
  .label print_char_cursor = 8
  // main
main: {
    .label __0 = $d
    .label __12 = $15
    .label __13 = $b
    .label __14 = $19
    .label __15 = $17
    .label p = $15
    .label __16 = $15
    .label __17 = $b
    .label __18 = $19
    // primenum[1] = 2
    // [0] *((const signed word*) primenum+(byte) 1*(const byte) SIZEOF_SIGNED_WORD) ← (signed byte) 2 -- _deref_pwsc1=vwsc2 
    lda #<2
    sta primenum+1*SIZEOF_SIGNED_WORD
    lda #>2
    sta primenum+1*SIZEOF_SIGNED_WORD+1
    // primenum[2] = 3
    // [1] *((const signed word*) primenum+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (signed byte) 3 -- _deref_pwsc1=vwsc2 
    lda #<3
    sta primenum+2*SIZEOF_SIGNED_WORD
    lda #>3
    sta primenum+2*SIZEOF_SIGNED_WORD+1
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // [2] phi (byte*) print_char_cursor#41 = (const byte*) print_screen#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [2] phi (signed word) lastprime#17 = (signed byte) 2 [phi:main->main::@1#1] -- vwsz1=vbsc1 
    lda #<2
    sta.z lastprime
    lda #>2
    sta.z lastprime+1
    // [2] phi (signed word) testnum#15 = (signed byte) 3 [phi:main->main::@1#2] -- vwsz1=vbsc1 
    lda #<3
    sta.z testnum
    lda #>3
    sta.z testnum+1
    // [2] phi (signed word) lasttest#13 = (signed byte) 2 [phi:main->main::@1#3] -- vwsz1=vbsc1 
    lda #<2
    sta.z lasttest
    lda #>2
    sta.z lasttest+1
    // [2] phi from main::@11 to main::@1 [phi:main::@11->main::@1]
    // [2] phi (byte*) print_char_cursor#41 = (byte*) print_char_cursor#21 [phi:main::@11->main::@1#0] -- register_copy 
    // [2] phi (signed word) lastprime#17 = (signed word) lastprime#1 [phi:main::@11->main::@1#1] -- register_copy 
    // [2] phi (signed word) testnum#15 = (signed word) testnum#11 [phi:main::@11->main::@1#2] -- register_copy 
    // [2] phi (signed word) lasttest#13 = (signed word) lasttest#19 [phi:main::@11->main::@1#3] -- register_copy 
    // main::@1
  __b1:
    // p = primenum[lasttest]
    // [3] (signed word~) main::$12 ← (signed word) lasttest#13 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z lasttest
    asl
    sta.z __12
    lda.z lasttest+1
    rol
    sta.z __12+1
    // [4] (signed word*~) main::$16 ← (const signed word*) primenum + (signed word~) main::$12 -- pwsz1=pwsc1_plus_vwsz1 
    clc
    lda.z __16
    adc #<primenum
    sta.z __16
    lda.z __16+1
    adc #>primenum
    sta.z __16+1
    // [5] (signed word) main::p#0 ← *((signed word*~) main::$16) -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (p),y
    pha
    iny
    lda (p),y
    sta.z p+1
    pla
    sta.z p
    // mul16s(p, p)
    // [6] (signed word) mul16s::a#0 ← (signed word) main::p#0
    // [7] (signed word) mul16s::b#0 ← (signed word) main::p#0
    // [8] call mul16s 
    jsr mul16s
    // [9] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0
    // main::@8
    // [10] (signed dword~) main::$0 ← (signed dword) mul16s::return#2
    // testnum > (int)mul16s(p, p)
    // [11] (signed word~) main::$15 ← (signed word)(signed dword~) main::$0 -- vwsz1=_sword_vdsz2 
    lda.z __0
    sta.z __15
    lda.z __0+1
    sta.z __15+1
    // if(testnum > (int)mul16s(p, p))
    // [12] if((signed word) testnum#15<=(signed word~) main::$15) goto main::@2 -- vwsz1_le_vwsz2_then_la1 
    lda.z __15
    cmp.z testnum
    lda.z __15+1
    sbc.z testnum+1
    bvc !+
    eor #$80
  !:
    bpl __b2
    // main::@7
    // lasttest++;
    // [13] (signed word) lasttest#1 ← ++ (signed word) lasttest#13 -- vwsz1=_inc_vwsz1 
    inc.z lasttest
    bne !+
    inc.z lasttest+1
  !:
    // [14] phi from main::@7 main::@8 to main::@2 [phi:main::@7/main::@8->main::@2]
    // [14] phi (signed word) lasttest#19 = (signed word) lasttest#1 [phi:main::@7/main::@8->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // testnum +=2
    // [15] (signed word) testnum#1 ← (signed word) testnum#15 + (signed byte) 2 -- vwsz1=vwsz1_plus_vbsc1 
    lda.z testnum
    clc
    adc #<2
    sta.z testnum
    lda.z testnum+1
    adc #>2
    sta.z testnum+1
    // [16] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // [16] phi (signed word) testnum#10 = (signed word) testnum#1 [phi:main::@2->main::@3#0] -- register_copy 
    // [16] phi (signed word) primeptr#7 = (signed byte) 2 [phi:main::@2->main::@3#1] -- vwsz1=vbsc1 
    lda #<2
    sta.z primeptr
    lda #>2
    sta.z primeptr+1
    // [16] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
    // [16] phi (signed word) testnum#10 = (signed word) testnum#11 [phi:main::@4->main::@3#0] -- register_copy 
    // [16] phi (signed word) primeptr#7 = (signed word) primeptr#10 [phi:main::@4->main::@3#1] -- register_copy 
    // main::@3
  __b3:
    // div16s(testnum, primenum[primeptr++])
    // [17] (signed word~) main::$13 ← (signed word) primeptr#7 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z primeptr
    asl
    sta.z __13
    lda.z primeptr+1
    rol
    sta.z __13+1
    // [18] (signed word) div16s::dividend#0 ← (signed word) testnum#10
    // [19] (signed word*~) main::$17 ← (const signed word*) primenum + (signed word~) main::$13 -- pwsz1=pwsc1_plus_vwsz1 
    clc
    lda.z __17
    adc #<primenum
    sta.z __17
    lda.z __17+1
    adc #>primenum
    sta.z __17+1
    // [20] (signed word) div16s::divisor#0 ← *((signed word*~) main::$17) -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (div16s.divisor),y
    pha
    iny
    lda (div16s.divisor),y
    sta.z div16s.divisor+1
    pla
    sta.z div16s.divisor
    // [21] call div16s 
    jsr div16s
    // main::@9
    // div16s(testnum, primenum[primeptr++]);
    // [22] (signed word) primeptr#1 ← ++ (signed word) primeptr#7 -- vwsz1=_inc_vwsz1 
    inc.z primeptr
    bne !+
    inc.z primeptr+1
  !:
    // if(rem16s == 0)
    // [23] if((signed word) rem16s#10!=(signed byte) 0) goto main::@4 -- vwsz1_neq_0_then_la1 
    lda.z rem16s+1
    bne __b4
    lda.z rem16s
    bne __b4
    // main::@5
    // testnum +=2
    // [24] (signed word) testnum#2 ← (signed word) testnum#10 + (signed byte) 2 -- vwsz1=vwsz1_plus_vbsc1 
    lda.z testnum
    clc
    adc #<2
    sta.z testnum
    lda.z testnum+1
    adc #>2
    sta.z testnum+1
    // [25] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
    // [25] phi (signed word) testnum#11 = (signed word) testnum#2 [phi:main::@5->main::@4#0] -- register_copy 
    // [25] phi (signed word) primeptr#10 = (signed byte) 2 [phi:main::@5->main::@4#1] -- vwsz1=vbsc1 
    lda #<2
    sta.z primeptr
    lda #>2
    sta.z primeptr+1
    // [25] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
    // [25] phi (signed word) testnum#11 = (signed word) testnum#10 [phi:main::@9->main::@4#0] -- register_copy 
    // [25] phi (signed word) primeptr#10 = (signed word) primeptr#1 [phi:main::@9->main::@4#1] -- register_copy 
    // main::@4
  __b4:
    // while (primeptr<=lasttest)
    // [26] if((signed word) primeptr#10<=(signed word) lasttest#19) goto main::@3 -- vwsz1_le_vwsz2_then_la1 
    lda.z lasttest
    cmp.z primeptr
    lda.z lasttest+1
    sbc.z primeptr+1
    bvc !+
    eor #$80
  !:
    bpl __b3
    // main::@6
    // primenum[++lastprime] = testnum;
    // [27] (signed word) lastprime#1 ← ++ (signed word) lastprime#17 -- vwsz1=_inc_vwsz1 
    inc.z lastprime
    bne !+
    inc.z lastprime+1
  !:
    // primenum[++lastprime] = testnum
    // [28] (signed word~) main::$14 ← (signed word) lastprime#1 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z lastprime
    asl
    sta.z __14
    lda.z lastprime+1
    rol
    sta.z __14+1
    // [29] (signed word*~) main::$18 ← (const signed word*) primenum + (signed word~) main::$14 -- pwsz1=pwsc1_plus_vwsz1 
    clc
    lda.z __18
    adc #<primenum
    sta.z __18
    lda.z __18+1
    adc #>primenum
    sta.z __18+1
    // [30] *((signed word*~) main::$18) ← (signed word) testnum#11 -- _deref_pwsz1=vwsz2 
    ldy #0
    lda.z testnum
    sta (__18),y
    iny
    lda.z testnum+1
    sta (__18),y
    // print_sint_decimal(testnum)
    // [31] (signed word) print_sint_decimal::w#1 ← (signed word) testnum#11 -- vwsz1=vwsz2 
    lda.z testnum
    sta.z print_sint_decimal.w
    lda.z testnum+1
    sta.z print_sint_decimal.w+1
    // [32] call print_sint_decimal 
    jsr print_sint_decimal
    // [33] phi from main::@6 to main::@10 [phi:main::@6->main::@10]
    // main::@10
    // print_char(' ')
    // [34] call print_char 
    // [37] phi from main::@10 to print_char [phi:main::@10->print_char]
    // [37] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#21 [phi:main::@10->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#4 = (byte) ' ' [phi:main::@10->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // main::@11
    // while(lastprime<totalprimes)
    // [35] if((signed word) lastprime#1<(signed word) $3e8) goto main::@1 -- vwsz1_lt_vwsc1_then_la1 
    lda.z lastprime
    cmp #<$3e8
    lda.z lastprime+1
    sbc #>$3e8
    bvc !+
    eor #$80
  !:
    bpl !__b1+
    jmp __b1
  !__b1:
    // main::@return
    // }
    // [36] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [38] *((byte*) print_char_cursor#20) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [39] (byte*) print_char_cursor#21 ← ++ (byte*) print_char_cursor#20 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [40] return 
    rts
}
  // print_sint_decimal
// Print a signed int as DECIMAL
// print_sint_decimal(signed word zp($19) w)
print_sint_decimal: {
    .label w = $19
    // if(w<0)
    // [41] if((signed word) print_sint_decimal::w#1<(signed byte) 0) goto print_sint_decimal::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1
    // [42] phi from print_sint_decimal to print_sint_decimal::@3 [phi:print_sint_decimal->print_sint_decimal::@3]
    // print_sint_decimal::@3
    // print_char(' ')
    // [43] call print_char 
    // [37] phi from print_sint_decimal::@3 to print_char [phi:print_sint_decimal::@3->print_char]
    // [37] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#41 [phi:print_sint_decimal::@3->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#4 = (byte) ' ' [phi:print_sint_decimal::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [44] phi from print_sint_decimal::@3 print_sint_decimal::@4 to print_sint_decimal::@2 [phi:print_sint_decimal::@3/print_sint_decimal::@4->print_sint_decimal::@2]
    // [44] phi (signed word) print_sint_decimal::w#4 = (signed word) print_sint_decimal::w#1 [phi:print_sint_decimal::@3/print_sint_decimal::@4->print_sint_decimal::@2#0] -- register_copy 
    // print_sint_decimal::@2
  __b2:
    // utoa((unsigned int)w, decimal_digits, DECIMAL)
    // [45] (word) utoa::value#1 ← (word)(signed word) print_sint_decimal::w#4
    // [46] call utoa 
    // [60] phi from print_sint_decimal::@2 to utoa [phi:print_sint_decimal::@2->utoa]
    jsr utoa
    // [47] phi from print_sint_decimal::@2 to print_sint_decimal::@5 [phi:print_sint_decimal::@2->print_sint_decimal::@5]
    // print_sint_decimal::@5
    // print_str(decimal_digits)
    // [48] call print_str 
    // [53] phi from print_sint_decimal::@5 to print_str [phi:print_sint_decimal::@5->print_str]
    jsr print_str
    // print_sint_decimal::@return
    // }
    // [49] return 
    rts
    // [50] phi from print_sint_decimal to print_sint_decimal::@1 [phi:print_sint_decimal->print_sint_decimal::@1]
    // print_sint_decimal::@1
  __b1:
    // print_char('-')
    // [51] call print_char 
    // [37] phi from print_sint_decimal::@1 to print_char [phi:print_sint_decimal::@1->print_char]
    // [37] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#41 [phi:print_sint_decimal::@1->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sint_decimal::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_sint_decimal::@4
    // w = -w
    // [52] (signed word) print_sint_decimal::w#0 ← - (signed word) print_sint_decimal::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($b) str)
print_str: {
    .label str = $b
    // [54] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
    // [54] phi (byte*) print_str::str#2 = (const byte*) decimal_digits [phi:print_str->print_str::@1#0] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z str
    lda #>decimal_digits
    sta.z str+1
    // print_str::@1
  __b1:
    // while(*str)
    // [55] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [56] return 
    rts
    // print_str::@2
  __b2:
    // print_char(*(str++))
    // [57] (byte) print_char::ch#0 ← *((byte*) print_str::str#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [58] call print_char 
    // [37] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
    // [37] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#21 [phi:print_str::@2->print_char#0] -- register_copy 
    // [37] phi (byte) print_char::ch#4 = (byte) print_char::ch#0 [phi:print_str::@2->print_char#1] -- register_copy 
    jsr print_char
    // print_str::@3
    // print_char(*(str++));
    // [59] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [54] phi from print_str::@3 to print_str::@1 [phi:print_str::@3->print_str::@1]
    // [54] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@3->print_str::@1#0] -- register_copy 
    jmp __b1
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($19) value, byte* zp($b) buffer)
utoa: {
    .const max_digits = 5
    .label digit_value = $1d
    .label buffer = $b
    .label digit = $a
    .label value = $19
    // [61] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
    // [61] phi (byte*) utoa::buffer#11 = (const byte*) decimal_digits [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z buffer
    lda #>decimal_digits
    sta.z buffer+1
    // [61] phi (byte) utoa::started#2 = (byte) 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [61] phi (word) utoa::value#2 = (word) utoa::value#1 [phi:utoa->utoa::@1#2] -- register_copy 
    // [61] phi (byte) utoa::digit#2 = (byte) 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    txa
    sta.z digit
    // utoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [62] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    // utoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [63] (byte~) utoa::$11 ← (byte)(word) utoa::value#2 -- vbuaa=_byte_vwuz1 
    lda.z value
    // [64] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [65] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [66] *((byte*) utoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // utoa::@return
    // }
    // [67] return 
    rts
    // utoa::@2
  __b2:
    // digit_value = digit_values[digit]
    // [68] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [69] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10) -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // if (started || value >= digit_value)
    // [70] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    // utoa::@7
    // [71] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [72] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
    // [72] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [72] phi (byte) utoa::started#4 = (byte) utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [72] phi (word) utoa::value#6 = (word) utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    // utoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [73] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [61] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
    // [61] phi (byte*) utoa::buffer#11 = (byte*) utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [61] phi (byte) utoa::started#2 = (byte) utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [61] phi (word) utoa::value#2 = (word) utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [61] phi (byte) utoa::digit#2 = (byte) utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // utoa_append(buffer++, value, digit_value)
    // [74] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
    // [75] (word) utoa_append::value#0 ← (word) utoa::value#2
    // [76] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
    // [77] call utoa_append 
    // [81] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
    jsr utoa_append
    // utoa_append(buffer++, value, digit_value)
    // [78] (word) utoa_append::return#0 ← (word) utoa_append::value#2
    // utoa::@6
    // value = utoa_append(buffer++, value, digit_value)
    // [79] (word) utoa::value#0 ← (word) utoa_append::return#0
    // value = utoa_append(buffer++, value, digit_value);
    // [80] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [72] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
    // [72] phi (byte*) utoa::buffer#14 = (byte*) utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [72] phi (byte) utoa::started#4 = (byte) 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [72] phi (word) utoa::value#6 = (word) utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($b) buffer, word zp($19) value, word zp($1d) sub)
utoa_append: {
    .label buffer = $b
    .label value = $19
    .label sub = $1d
    .label return = $19
    // [82] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
    // [82] phi (byte) utoa_append::digit#2 = (byte) 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [82] phi (word) utoa_append::value#2 = (word) utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    // utoa_append::@1
  __b1:
    // while (value >= sub)
    // [83] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    // utoa_append::@3
    // *buffer = DIGITS[digit]
    // [84] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // utoa_append::@return
    // }
    // [85] return 
    rts
    // utoa_append::@2
  __b2:
    // digit++;
    // [86] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // value -= sub
    // [87] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [82] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
    // [82] phi (byte) utoa_append::digit#2 = (byte) utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [82] phi (word) utoa_append::value#2 = (word) utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // div16s
// Perform division on two signed 16-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// div16s(signed word zp(6) dividend, signed word zp($b) divisor)
div16s: {
    .label dividend = 6
    .label divisor = $b
    // divr16s(dividend, divisor, 0)
    // [88] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0 -- vwsz1=vwsz2 
    lda.z dividend
    sta.z divr16s.dividend
    lda.z dividend+1
    sta.z divr16s.dividend+1
    // [89] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0
    // [90] call divr16s 
    jsr divr16s
    // div16s::@return
    // }
    // [91] return 
    rts
}
  // divr16s
// Perform division on two signed 16-bit numbers with an initial remainder.
// Returns dividend/divisor. The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
// divr16s(signed word zp($1b) dividend, signed word zp($b) divisor)
divr16s: {
    .label dividendu = $1b
    .label divisoru = $b
    .label dividend = $1b
    .label divisor = $b
    // if(dividend<0 || rem<0)
    // [92] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1 -- vwsz1_lt_0_then_la1 
    lda.z dividend+1
    bmi __b1
    // divr16s::@6
    // [93] (word) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0
    // [94] phi from divr16s::@6 to divr16s::@2 [phi:divr16s::@6->divr16s::@2]
    // [94] phi (word) divr16s::dividendu#3 = (word) divr16s::dividendu#8 [phi:divr16s::@6->divr16s::@2#0] -- register_copy 
    // [94] phi (byte) divr16s::neg#3 = (byte) 0 [phi:divr16s::@6->divr16s::@2#1] -- vbuyy=vbuc1 
    ldy #0
    // divr16s::@2
  __b2:
    // if(divisor<0)
    // [95] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3 -- vwsz1_lt_0_then_la1 
    lda.z divisor+1
    bmi __b3
    // divr16s::@7
    // [96] (word) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0
    // [97] phi from divr16s::@3 divr16s::@7 to divr16s::@4 [phi:divr16s::@3/divr16s::@7->divr16s::@4]
    // [97] phi (byte) divr16s::neg#4 = (byte) divr16s::neg#2 [phi:divr16s::@3/divr16s::@7->divr16s::@4#0] -- register_copy 
    // [97] phi (word) divr16s::divisoru#3 = (word) divr16s::divisoru#4 [phi:divr16s::@3/divr16s::@7->divr16s::@4#1] -- register_copy 
    // divr16s::@4
  __b4:
    // divr16u(dividendu, divisoru, remu)
    // [98] (word) divr16u::dividend#1 ← (word) divr16s::dividendu#3
    // [99] (word) divr16u::divisor#0 ← (word) divr16s::divisoru#3
    // [100] call divr16u 
    // [111] phi from divr16s::@4 to divr16u [phi:divr16s::@4->divr16u]
    jsr divr16u
    // divr16s::@9
    // if(neg==0)
    // [101] if((byte) divr16s::neg#4==(byte) 0) goto divr16s::@5 -- vbuyy_eq_0_then_la1 
    cpy #0
    beq __breturn
    // divr16s::@8
    // rem16s = -(signed int)rem16u
    // [102] (signed word) rem16s#1 ← - (signed word)(word) rem16u#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z rem16s
    sta.z rem16s
    lda #0
    sbc.z rem16s+1
    sta.z rem16s+1
    // [103] phi from divr16s::@5 divr16s::@8 to divr16s::@return [phi:divr16s::@5/divr16s::@8->divr16s::@return]
    // [103] phi (signed word) rem16s#10 = (signed word) rem16s#30 [phi:divr16s::@5/divr16s::@8->divr16s::@return#0] -- register_copy 
    // divr16s::@return
  __breturn:
    // }
    // [104] return 
    rts
    // divr16s::@5
    // [105] (signed word) rem16s#30 ← (signed word)(word) rem16u#0
    // divr16s::@3
  __b3:
    // -divisor
    // [106] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z divisoru
    sta.z divisoru
    lda #0
    sbc.z divisoru+1
    sta.z divisoru+1
    // neg = neg ^ 1
    // [107] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1 -- vbuyy=vbuyy_bxor_vbuc1 
    tya
    eor #1
    tay
    // [108] (word) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1
    jmp __b4
    // divr16s::@1
  __b1:
    // -dividend
    // [109] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z dividendu
    sta.z dividendu
    lda #0
    sbc.z dividendu+1
    sta.z dividendu+1
    // [110] (word) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1
    // [94] phi from divr16s::@1 to divr16s::@2 [phi:divr16s::@1->divr16s::@2]
    // [94] phi (word) divr16s::dividendu#3 = (word) divr16s::dividendu#7 [phi:divr16s::@1->divr16s::@2#0] -- register_copy 
    // [94] phi (byte) divr16s::neg#3 = (byte) 1 [phi:divr16s::@1->divr16s::@2#1] -- vbuyy=vbuc1 
    ldy #1
    jmp __b2
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($1b) dividend, word zp($b) divisor, word zp($15) rem)
divr16u: {
    .label rem = $15
    .label dividend = $1b
    .label quotient = $17
    .label return = $17
    .label divisor = $b
    // [112] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
    // [112] phi (byte) divr16u::i#2 = (byte) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [112] phi (word) divr16u::quotient#3 = (word) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    txa
    sta.z quotient
    sta.z quotient+1
    // [112] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#1 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [112] phi (word) divr16u::rem#4 = (word) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vwuc1 
    sta.z rem
    sta.z rem+1
    // [112] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
    // [112] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [112] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [112] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [112] phi (word) divr16u::rem#4 = (word) divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    // divr16u::@1
  __b1:
    // rem = rem << 1
    // [113] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // >dividend
    // [114] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 -- vbuaa=_hi_vwuz1 
    lda.z dividend+1
    // >dividend & $80
    // [115] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if( (>dividend & $80) != 0 )
    // [116] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2
    // divr16u::@4
    // rem = rem | 1
    // [117] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [118] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
    // [118] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    // divr16u::@2
  __b2:
    // dividend = dividend << 1
    // [119] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // quotient = quotient << 1
    // [120] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // if(rem>=divisor)
    // [121] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3 -- vwuz1_lt_vwuz2_then_la1 
    lda.z rem+1
    cmp.z divisor+1
    bcc __b3
    bne !+
    lda.z rem
    cmp.z divisor
    bcc __b3
  !:
    // divr16u::@5
    // quotient++;
    // [122] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // rem = rem - divisor
    // [123] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z rem
    sec
    sbc.z divisor
    sta.z rem
    lda.z rem+1
    sbc.z divisor+1
    sta.z rem+1
    // [124] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
    // [124] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [124] phi (word) divr16u::rem#10 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    // divr16u::@3
  __b3:
    // for( char i : 0..15)
    // [125] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [126] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // divr16u::@6
    // rem16u = rem
    // [127] (word) rem16u#0 ← (word) divr16u::rem#10
    // divr16u::@return
    // }
    // [128] return 
    rts
}
  // mul16s
// Multiply of two signed ints to a signed long
// Fixes offsets introduced by using unsigned multiplication
// mul16s(signed word zp($15) a, signed word zp($15) b)
mul16s: {
    .label __6 = $1b
    .label __9 = $1d
    .label __11 = $1b
    .label __12 = $1d
    .label m = $d
    .label return = $d
    .label a = $15
    .label b = $15
    // mul16u((unsigned int)a, (unsigned int) b)
    // [129] (word) mul16u::a#1 ← (word)(signed word) mul16s::a#0 -- vwuz1=vwuz2 
    lda.z a
    sta.z mul16u.a
    lda.z a+1
    sta.z mul16u.a+1
    // [130] (word) mul16u::b#0 ← (word)(signed word) mul16s::b#0 -- vwuz1=vwuz2 
    lda.z b
    sta.z mul16u.b
    lda.z b+1
    sta.z mul16u.b+1
    // [131] call mul16u 
    jsr mul16u
    // [132] (dword) mul16u::return#2 ← (dword) mul16u::res#2
    // mul16s::@5
    // m = mul16u((unsigned int)a, (unsigned int) b)
    // [133] (dword) mul16s::m#0 ← (dword) mul16u::return#2
    // if(a<0)
    // [134] if((signed word) mul16s::a#0>=(signed byte) 0) goto mul16s::@1 -- vwsz1_ge_0_then_la1 
    lda.z a+1
    bpl __b1
    // mul16s::@3
    // >m
    // [135] (word~) mul16s::$6 ← > (dword) mul16s::m#0 -- vwuz1=_hi_vduz2 
    lda.z m+2
    sta.z __6
    lda.z m+3
    sta.z __6+1
    // >m = (>m)-(unsigned int)b
    // [136] (word~) mul16s::$11 ← (word~) mul16s::$6 - (word)(signed word) mul16s::b#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z __11
    sec
    sbc.z b
    sta.z __11
    lda.z __11+1
    sbc.z b+1
    sta.z __11+1
    // [137] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$11 -- vduz1=vduz1_sethi_vwuz2 
    lda.z __11
    sta.z m+2
    lda.z __11+1
    sta.z m+3
    // [138] phi from mul16s::@3 mul16s::@5 to mul16s::@1 [phi:mul16s::@3/mul16s::@5->mul16s::@1]
    // [138] phi (dword) mul16s::m#5 = (dword) mul16s::m#1 [phi:mul16s::@3/mul16s::@5->mul16s::@1#0] -- register_copy 
    // mul16s::@1
  __b1:
    // if(b<0)
    // [139] if((signed word) mul16s::b#0>=(signed byte) 0) goto mul16s::@2 -- vwsz1_ge_0_then_la1 
    lda.z b+1
    bpl __b2
    // mul16s::@4
    // >m
    // [140] (word~) mul16s::$9 ← > (dword) mul16s::m#5 -- vwuz1=_hi_vduz2 
    lda.z m+2
    sta.z __9
    lda.z m+3
    sta.z __9+1
    // >m = (>m)-(unsigned int)a
    // [141] (word~) mul16s::$12 ← (word~) mul16s::$9 - (word)(signed word) mul16s::a#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z __12
    sec
    sbc.z a
    sta.z __12
    lda.z __12+1
    sbc.z a+1
    sta.z __12+1
    // [142] (dword) mul16s::m#2 ← (dword) mul16s::m#5 hi= (word~) mul16s::$12 -- vduz1=vduz1_sethi_vwuz2 
    lda.z __12
    sta.z m+2
    lda.z __12+1
    sta.z m+3
    // [143] phi from mul16s::@1 mul16s::@4 to mul16s::@2 [phi:mul16s::@1/mul16s::@4->mul16s::@2]
    // [143] phi (dword) mul16s::m#4 = (dword) mul16s::m#5 [phi:mul16s::@1/mul16s::@4->mul16s::@2#0] -- register_copy 
    // mul16s::@2
  __b2:
    // return (signed long)m;
    // [144] (signed dword) mul16s::return#0 ← (signed dword)(dword) mul16s::m#4
    // mul16s::@return
    // }
    // [145] return 
    rts
}
  // mul16u
// Perform binary multiplication of two unsigned 16-bit unsigned ints into a 32-bit unsigned long
// mul16u(word zp($1b) a, word zp($1d) b)
mul16u: {
    .label mb = $11
    .label a = $1b
    .label res = $d
    .label b = $1d
    .label return = $d
    // mb = b
    // [146] (dword) mul16u::mb#0 ← (dword)(word) mul16u::b#0 -- vduz1=_dword_vwuz2 
    lda.z b
    sta.z mb
    lda.z b+1
    sta.z mb+1
    lda #0
    sta.z mb+2
    sta.z mb+3
    // [147] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
    // [147] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#0 [phi:mul16u->mul16u::@1#0] -- register_copy 
    // [147] phi (dword) mul16u::res#2 = (dword) 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vduc1 
    sta.z res
    sta.z res+1
    lda #<0>>$10
    sta.z res+2
    lda #>0>>$10
    sta.z res+3
    // [147] phi (word) mul16u::a#2 = (word) mul16u::a#1 [phi:mul16u->mul16u::@1#2] -- register_copy 
    // mul16u::@1
  __b1:
    // while(a!=0)
    // [148] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda.z a
    bne __b2
    lda.z a+1
    bne __b2
    // mul16u::@return
    // }
    // [149] return 
    rts
    // mul16u::@2
  __b2:
    // a&1
    // [150] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1 -- vbuaa=vwuz1_band_vbuc1 
    lda #1
    and.z a
    // if( (a&1) != 0)
    // [151] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // mul16u::@4
    // res = res + mb
    // [152] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    lda.z res+2
    adc.z mb+2
    sta.z res+2
    lda.z res+3
    adc.z mb+3
    sta.z res+3
    // [153] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
    // [153] phi (dword) mul16u::res#6 = (dword) mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    // mul16u::@3
  __b3:
    // a = a>>1
    // [154] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte) 1 -- vwuz1=vwuz1_ror_1 
    lsr.z a+1
    ror.z a
    // mb = mb<<1
    // [155] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1 -- vduz1=vduz1_rol_1 
    asl.z mb
    rol.z mb+1
    rol.z mb+2
    rol.z mb+3
    // [147] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
    // [147] phi (dword) mul16u::mb#2 = (dword) mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
    // [147] phi (dword) mul16u::res#2 = (dword) mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
    // [147] phi (word) mul16u::a#2 = (word) mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Digits used for storing the decimal unsigned int
  decimal_digits: .fill 6, 0
  primenum: .fill 2*$3e8, 0

