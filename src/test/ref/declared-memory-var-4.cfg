@begin: scope:[]  from
  [0] (byte) bar_thing1 ← (byte) 'a'
  [1] (byte) bar_thing2 ← (byte) 'b'
  [2] (byte[$c]) bar_thing3 ← (const string) $0
  to:@1
@1: scope:[]  from @begin
  [3] phi()
  [4] call main 
  to:@end
@end: scope:[]  from @1
  [5] phi()

(void()) main()
main: scope:[main]  from @1
  [6] *((const byte*) main::SCREEN) ← *((byte*)(const struct foo*) main::barp)
  [7] *((const byte*) main::SCREEN+(byte) 1) ← *((byte*)(const struct foo*) main::barp+(const byte) OFFSET_STRUCT_FOO_THING2)
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [8] (byte) main::i#4 ← phi( main/(byte) 2 main::@1/(byte) main::i#3 )
  [8] (byte) main::j#2 ← phi( main/(byte) 0 main::@1/(byte) main::j#1 )
  [9] *((const byte*) main::SCREEN + (byte) main::i#4) ← *((byte[$c])(const struct foo*) main::barp+(const byte) OFFSET_STRUCT_FOO_THING3 + (byte) main::j#2)
  [10] (byte) main::i#3 ← ++ (byte) main::i#4
  [11] (byte) main::j#1 ← ++ (byte) main::j#2
  [12] if((byte) main::j#1!=(byte) $c) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [13] return 
  to:@return
