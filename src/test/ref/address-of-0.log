Setting inferred volatile on symbol affected by address-of (byte*~) main::$0 ← & (byte) main::b
Adding pointer type conversion cast (byte*) main::SCREEN in (byte*) main::SCREEN ← (number) $400
Identified constant variable (byte*) main::SCREEN
Culled Empty Block (label) main::@2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::SCREEN#0 ← ((byte*)) (number) $400
  (byte) main::b#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::b#2 ← phi( main/(byte) main::b#0 main::@1/(byte) main::b#1 )
  (byte*~) main::$0 ← & (byte) main::b#2
  (byte*) main::bp#0 ← (byte*~) main::$0
  (number~) main::$1 ← *((byte*) main::bp#0) + (number) 1
  (byte) main::c#0 ← (number~) main::$1
  *((byte*) main::SCREEN#0 + (byte) main::b#2) ← (byte) main::c#0
  (byte) main::b#1 ← (byte) main::b#2 + rangenext(0,$a)
  (bool~) main::$2 ← (byte) main::b#1 != rangelast(0,$a)
  if((bool~) main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(byte*~) main::$0
(number~) main::$1
(bool~) main::$2
(label) main::@1
(label) main::@return
(byte*) main::SCREEN
(byte*) main::SCREEN#0
(byte) main::b
(byte) main::b#0
(byte) main::b#1
(byte) main::b#2
(byte*) main::bp
(byte*) main::bp#0
(byte) main::c
(byte) main::c#0

Adding number conversion cast (unumber) 1 in (number~) main::$1 ← *((byte*) main::bp#0) + (number) 1
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← *((byte*) main::bp#0) + (unumber)(number) 1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) main::SCREEN#0 ← (byte*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$1 ← *((byte*) main::bp#0) + (byte) 1
Alias (byte*) main::bp#0 = (byte*~) main::$0 
Alias (byte) main::c#0 = (byte~) main::$1 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$2 [10] if((byte) main::b#1!=rangelast(0,$a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [3] (byte*) main::bp#0 ← & (byte) main::b#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::SCREEN#0 = (byte*) 1024
Constant (const byte*) main::bp#0 = &main::b#2
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [8] main::b#1 ← ++ main::b#2 to ++
Resolved ranged comparison value [10] if(main::b#1!=rangelast(0,$a)) goto main::@1 to (number) $b
Adding number conversion cast (unumber) $b in if((byte) main::b#1!=(number) $b) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 1 initial phi equivalence classes
Coalesced [6] main::b#3 ← main::b#0
Coalesced [13] main::b#4 ← main::b#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] (byte) main::b#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::b#2 ← phi( main/(byte) main::b#0 main::@1/(byte) main::b#1 )
  [6] (byte) main::c#0 ← *((const byte*) main::bp#0) + (byte) 1
  [7] *((const byte*) main::SCREEN#0 + (byte) main::b#2) ← (byte) main::c#0
  [8] (byte) main::b#1 ← ++ (byte) main::b#2
  [9] if((byte) main::b#1!=(byte) $b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [10] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte*) main::SCREEN
(byte) main::b
(byte) main::b#0 4.0
(byte) main::b#1 16.5
(byte) main::b#2 11.666666666666666
(byte*) main::bp
(byte) main::c
(byte) main::c#0 22.0

Initial phi equivalence classes
[ main::b#2 main::b#0 main::b#1 ]
Added variable main::c#0 to zero page equivalence class [ main::c#0 ]
Complete equivalence classes
[ main::b#2 main::b#0 main::b#1 ]
[ main::c#0 ]
Allocated zp ZP_BYTE:2 [ main::b#2 main::b#0 main::b#1 ]
Allocated zp ZP_BYTE:3 [ main::c#0 ]

INITIAL ASM
//SEG0 File Comments
// Test address-of - use the pointer to get the value
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label SCREEN = $400
    .label bp = b
    .label b = 2
    .label c = 3
  //SEG10 [4] (byte) main::b#0 ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta b
  //SEG11 [5] phi from main main::@1 to main::@1 [phi:main/main::@1->main::@1]
  b1_from_main:
  b1_from_b1:
  //SEG12 [5] phi (byte) main::b#2 = (byte) main::b#0 [phi:main/main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [6] (byte) main::c#0 ← *((const byte*) main::bp#0) + (byte) 1 -- vbuz1=_deref_pbuc1_plus_1 
    ldy bp
    iny
    sty c
  //SEG15 [7] *((const byte*) main::SCREEN#0 + (byte) main::b#2) ← (byte) main::c#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda c
    ldy b
    sta SCREEN,y
  //SEG16 [8] (byte) main::b#1 ← ++ (byte) main::b#2 -- vbuz1=_inc_vbuz1 
    inc b
  //SEG17 [9] if((byte) main::b#1!=(byte) $b) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp b
    bne b1_from_b1
    jmp breturn
  //SEG18 main::@return
  breturn:
  //SEG19 [10] return 
    rts
}
//SEG20 File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] (byte) main::b#0 ← (byte) 0 [ main::b#0 ] ( main:2 [ main::b#0 ] ) always clobbers reg byte a 
Statement [7] *((const byte*) main::SCREEN#0 + (byte) main::b#2) ← (byte) main::c#0 [ main::b#2 ] ( main:2 [ main::b#2 ] ) always clobbers reg byte y 
Statement [9] if((byte) main::b#1!=(byte) $b) goto main::@1 [ main::b#1 ] ( main:2 [ main::b#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::b#2 main::b#0 main::b#1 ] : zp ZP_BYTE:2 , 
Potential registers zp ZP_BYTE:3 [ main::c#0 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 32.17: zp ZP_BYTE:2 [ main::b#2 main::b#0 main::b#1 ] 22: zp ZP_BYTE:3 [ main::c#0 ] 
Uplift Scope [] 

Uplifting [main] best 368 combination zp ZP_BYTE:2 [ main::b#2 main::b#0 main::b#1 ] reg byte a [ main::c#0 ] 
Uplifting [] best 368 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ main::b#2 main::b#0 main::b#1 ]
Uplifting [main] best 368 combination zp ZP_BYTE:2 [ main::b#2 main::b#0 main::b#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Test address-of - use the pointer to get the value
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label SCREEN = $400
    .label bp = b
    .label b = 2
  //SEG10 [4] (byte) main::b#0 ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta b
  //SEG11 [5] phi from main main::@1 to main::@1 [phi:main/main::@1->main::@1]
  b1_from_main:
  b1_from_b1:
  //SEG12 [5] phi (byte) main::b#2 = (byte) main::b#0 [phi:main/main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [6] (byte) main::c#0 ← *((const byte*) main::bp#0) + (byte) 1 -- vbuaa=_deref_pbuc1_plus_1 
    lda bp
    clc
    adc #1
  //SEG15 [7] *((const byte*) main::SCREEN#0 + (byte) main::b#2) ← (byte) main::c#0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy b
    sta SCREEN,y
  //SEG16 [8] (byte) main::b#1 ← ++ (byte) main::b#2 -- vbuz1=_inc_vbuz1 
    inc b
  //SEG17 [9] if((byte) main::b#1!=(byte) $b) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp b
    bne b1_from_b1
    jmp breturn
  //SEG18 main::@return
  breturn:
  //SEG19 [10] return 
    rts
}
//SEG20 File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_main:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@return
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = (byte*) 1024
(byte) main::b
(byte) main::b#0 b zp ZP_BYTE:2 4.0
(byte) main::b#1 b zp ZP_BYTE:2 16.5
(byte) main::b#2 b zp ZP_BYTE:2 11.666666666666666
(byte*) main::bp
(const byte*) main::bp#0 bp = &(byte) main::b#2
(byte) main::c
(byte) main::c#0 reg byte a 22.0

zp ZP_BYTE:2 [ main::b#2 main::b#0 main::b#1 ]
reg byte a [ main::c#0 ]


FINAL ASSEMBLER
Score: 296

//SEG0 File Comments
// Test address-of - use the pointer to get the value
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
    .label SCREEN = $400
    .label bp = b
    .label b = 2
  //SEG10 [4] (byte) main::b#0 ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta b
  //SEG11 [5] phi from main main::@1 to main::@1 [phi:main/main::@1->main::@1]
  //SEG12 [5] phi (byte) main::b#2 = (byte) main::b#0 [phi:main/main::@1->main::@1#0] -- register_copy 
  //SEG13 main::@1
  b1:
  //SEG14 [6] (byte) main::c#0 ← *((const byte*) main::bp#0) + (byte) 1 -- vbuaa=_deref_pbuc1_plus_1 
    lda bp
    clc
    adc #1
  //SEG15 [7] *((const byte*) main::SCREEN#0 + (byte) main::b#2) ← (byte) main::c#0 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy b
    sta SCREEN,y
  //SEG16 [8] (byte) main::b#1 ← ++ (byte) main::b#2 -- vbuz1=_inc_vbuz1 
    inc b
  //SEG17 [9] if((byte) main::b#1!=(byte) $b) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp b
    bne b1
  //SEG18 main::@return
  //SEG19 [10] return 
    rts
}
//SEG20 File Data

