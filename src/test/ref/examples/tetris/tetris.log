Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) 53280
  (byte*) COLS#0 ← ((byte*)) (word/dword/signed dword) 55296
  (byte) BLACK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) DARK_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) 11
  to:@4
fill: scope:[fill]  from init init::@7
  (byte) fill::val#3 ← phi( init/(byte) fill::val#0 init::@7/(byte) fill::val#1 )
  (word) fill::size#2 ← phi( init/(word) fill::size#0 init::@7/(word) fill::size#1 )
  (byte*) fill::start#2 ← phi( init/(byte*) fill::start#0 init::@7/(byte*) fill::start#1 )
  (byte*~) fill::$0 ← (byte*) fill::start#2 + (word) fill::size#2
  (byte*) fill::end#0 ← (byte*~) fill::$0
  (byte*) fill::addr#0 ← (byte*) fill::start#2
  to:fill::@1
fill::@1: scope:[fill]  from fill fill::@1
  (byte*) fill::end#1 ← phi( fill/(byte*) fill::end#0 fill::@1/(byte*) fill::end#1 )
  (byte*) fill::addr#2 ← phi( fill/(byte*) fill::addr#0 fill::@1/(byte*) fill::addr#1 )
  (byte) fill::val#2 ← phi( fill/(byte) fill::val#3 fill::@1/(byte) fill::val#2 )
  *((byte*) fill::addr#2) ← (byte) fill::val#2
  (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2
  (bool~) fill::$1 ← (byte*) fill::addr#1 != (byte*) fill::end#1
  if((bool~) fill::$1) goto fill::@1
  to:fill::@return
fill::@return: scope:[fill]  from fill::@1
  return 
  to:@return
@4: scope:[]  from @begin
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*[20]) screen_lines#0 ← { fill( 20, 0) }
  (byte/word/signed word/dword/signed dword~) $0 ← (byte/signed byte/word/signed word/dword/signed dword) 20 * (byte/signed byte/word/signed word/dword/signed dword) 10
  (byte[$0]) playfield#0 ← { fill( $0, 0) }
  (byte/signed byte/word/signed word/dword/signed dword~) $1 ← (byte/signed byte/word/signed word/dword/signed dword) 4 * (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte[$1]) current_piece#0 ← { fill( $1, 0) }
  to:@8
main: scope:[main]  from @8
  (byte*) SCREEN#2 ← phi( @8/(byte*) SCREEN#3 )
  call init 
  to:main::@7
main::@7: scope:[main]  from main
  call render_playfield 
  to:main::@8
main::@8: scope:[main]  from main::@7
  call render_current_piece 
  to:main::@9
main::@9: scope:[main]  from main::@8
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@9
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
init: scope:[init]  from main
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#2 )
  *((byte[$1]) current_piece#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte) GREEN#0
  *((byte[$1]) current_piece#0 + (byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) GREEN#0
  *((byte[$1]) current_piece#0 + (byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) GREEN#0
  *((byte[$1]) current_piece#0 + (byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) GREEN#0
  (byte*) fill::start#0 ← (byte*) SCREEN#1
  (word) fill::size#0 ← (word/signed word/dword/signed dword) 1000
  (byte) fill::val#0 ← (byte/word/signed word/dword/signed dword) 160
  call fill 
  to:init::@7
init::@7: scope:[init]  from init
  (byte*) fill::start#1 ← (byte*) COLS#0
  (word) fill::size#1 ← (word/signed word/dword/signed dword) 1000
  (byte) fill::val#1 ← (byte) BLACK#0
  call fill 
  to:init::@8
init::@8: scope:[init]  from init::@7
  (byte*~) init::$2 ← (byte*) COLS#0 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*~) init::$3 ← (byte*~) init::$2 + (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte*) init::li#0 ← (byte*~) init::$3
  (byte) init::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:init::@1
init::@1: scope:[init]  from init::@1 init::@8
  (byte*) init::li#2 ← phi( init::@1/(byte*) init::li#1 init::@8/(byte*) init::li#0 )
  (byte) init::i#2 ← phi( init::@1/(byte) init::i#1 init::@8/(byte) init::i#0 )
  (byte~) init::$4 ← (byte) init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*[20]) screen_lines#0 + (byte~) init::$4) ← (byte*) init::li#2
  (byte*) init::li#1 ← (byte*) init::li#2 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte) init::i#1 ← (byte) init::i#2 + rangenext(0,19)
  (bool~) init::$5 ← (byte) init::i#1 != rangelast(0,19)
  if((bool~) init::$5) goto init::@1
  to:init::@4
init::@4: scope:[init]  from init::@1
  (byte*~) init::$6 ← (byte*) COLS#0 + (byte/signed byte/word/signed word/dword/signed dword) 14
  (byte*) init::line#0 ← (byte*~) init::$6
  (byte) init::l#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:init::@2
init::@2: scope:[init]  from init::@4 init::@5
  (byte) init::l#4 ← phi( init::@4/(byte) init::l#0 init::@5/(byte) init::l#1 )
  (byte*) init::line#4 ← phi( init::@4/(byte*) init::line#0 init::@5/(byte*) init::line#1 )
  (byte) init::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:init::@3
init::@3: scope:[init]  from init::@2 init::@3
  (byte) init::l#3 ← phi( init::@2/(byte) init::l#4 init::@3/(byte) init::l#3 )
  (byte) init::c#2 ← phi( init::@2/(byte) init::c#0 init::@3/(byte) init::c#1 )
  (byte*) init::line#2 ← phi( init::@2/(byte*) init::line#4 init::@3/(byte*) init::line#2 )
  (byte*~) init::$7 ← (byte*) init::line#2 + (byte) init::c#2
  *((byte*~) init::$7) ← (byte) DARK_GREY#0
  (byte) init::c#1 ← (byte) init::c#2 + rangenext(0,11)
  (bool~) init::$8 ← (byte) init::c#1 != rangelast(0,11)
  if((bool~) init::$8) goto init::@3
  to:init::@5
init::@5: scope:[init]  from init::@3
  (byte) init::l#2 ← phi( init::@3/(byte) init::l#3 )
  (byte*) init::line#3 ← phi( init::@3/(byte*) init::line#2 )
  (byte*) init::line#1 ← (byte*) init::line#3 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte) init::l#1 ← (byte) init::l#2 + rangenext(0,21)
  (bool~) init::$9 ← (byte) init::l#1 != rangelast(0,21)
  if((bool~) init::$9) goto init::@2
  to:init::@return
init::@return: scope:[init]  from init::@5
  return 
  to:@return
render_playfield: scope:[render_playfield]  from main::@7
  (byte) render_playfield::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) render_playfield::l#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render_playfield::@1
render_playfield::@1: scope:[render_playfield]  from render_playfield render_playfield::@3
  (byte) render_playfield::i#3 ← phi( render_playfield/(byte) render_playfield::i#0 render_playfield::@3/(byte) render_playfield::i#4 )
  (byte) render_playfield::l#2 ← phi( render_playfield/(byte) render_playfield::l#0 render_playfield::@3/(byte) render_playfield::l#1 )
  (byte~) render_playfield::$0 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte*) render_playfield::line#0 ← *((byte*[20]) screen_lines#0 + (byte~) render_playfield::$0)
  (byte) render_playfield::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:render_playfield::@2
render_playfield::@2: scope:[render_playfield]  from render_playfield::@1 render_playfield::@2
  (byte) render_playfield::l#4 ← phi( render_playfield::@1/(byte) render_playfield::l#2 render_playfield::@2/(byte) render_playfield::l#4 )
  (byte) render_playfield::i#2 ← phi( render_playfield::@1/(byte) render_playfield::i#3 render_playfield::@2/(byte) render_playfield::i#1 )
  (byte) render_playfield::c#2 ← phi( render_playfield::@1/(byte) render_playfield::c#0 render_playfield::@2/(byte) render_playfield::c#1 )
  (byte*) render_playfield::line#1 ← phi( render_playfield::@1/(byte*) render_playfield::line#0 render_playfield::@2/(byte*) render_playfield::line#1 )
  (byte*~) render_playfield::$1 ← (byte*) render_playfield::line#1 + (byte) render_playfield::c#2
  *((byte*~) render_playfield::$1) ← *((byte[$0]) playfield#0 + (byte) render_playfield::i#2)
  (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2
  (byte) render_playfield::c#1 ← (byte) render_playfield::c#2 + rangenext(0,9)
  (bool~) render_playfield::$2 ← (byte) render_playfield::c#1 != rangelast(0,9)
  if((bool~) render_playfield::$2) goto render_playfield::@2
  to:render_playfield::@3
render_playfield::@3: scope:[render_playfield]  from render_playfield::@2
  (byte) render_playfield::i#4 ← phi( render_playfield::@2/(byte) render_playfield::i#1 )
  (byte) render_playfield::l#3 ← phi( render_playfield::@2/(byte) render_playfield::l#4 )
  (byte) render_playfield::l#1 ← (byte) render_playfield::l#3 + rangenext(0,19)
  (bool~) render_playfield::$3 ← (byte) render_playfield::l#1 != rangelast(0,19)
  if((bool~) render_playfield::$3) goto render_playfield::@1
  to:render_playfield::@return
render_playfield::@return: scope:[render_playfield]  from render_playfield::@3
  return 
  to:@return
render_current_piece: scope:[render_current_piece]  from main::@8
  to:render_current_piece::@return
render_current_piece::@return: scope:[render_current_piece]  from render_current_piece
  return 
  to:@return
@8: scope:[]  from @4
  (byte*) SCREEN#3 ← phi( @4/(byte*) SCREEN#0 )
  call main 
  to:@9
@9: scope:[]  from @8
  to:@end
@end: scope:[]  from @9

SYMBOL TABLE SSA
(byte/word/signed word/dword/signed dword~) $0
(byte/signed byte/word/signed word/dword/signed dword~) $1
(label) @4
(label) @8
(label) @9
(label) @begin
(label) @end
(byte) BLACK
(byte) BLACK#0
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte*) COLS
(byte*) COLS#0
(byte) DARK_GREY
(byte) DARK_GREY#0
(byte) GREEN
(byte) GREEN#0
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte[$1]) current_piece
(byte[$1]) current_piece#0
(void()) fill((byte*) fill::start , (word) fill::size , (byte) fill::val)
(byte*~) fill::$0
(bool~) fill::$1
(label) fill::@1
(label) fill::@return
(byte*) fill::addr
(byte*) fill::addr#0
(byte*) fill::addr#1
(byte*) fill::addr#2
(byte*) fill::end
(byte*) fill::end#0
(byte*) fill::end#1
(word) fill::size
(word) fill::size#0
(word) fill::size#1
(word) fill::size#2
(byte*) fill::start
(byte*) fill::start#0
(byte*) fill::start#1
(byte*) fill::start#2
(byte) fill::val
(byte) fill::val#0
(byte) fill::val#1
(byte) fill::val#2
(byte) fill::val#3
(void()) init()
(byte*~) init::$2
(byte*~) init::$3
(byte~) init::$4
(bool~) init::$5
(byte*~) init::$6
(byte*~) init::$7
(bool~) init::$8
(bool~) init::$9
(label) init::@1
(label) init::@2
(label) init::@3
(label) init::@4
(label) init::@5
(label) init::@7
(label) init::@8
(label) init::@return
(byte) init::c
(byte) init::c#0
(byte) init::c#1
(byte) init::c#2
(byte) init::i
(byte) init::i#0
(byte) init::i#1
(byte) init::i#2
(byte) init::l
(byte) init::l#0
(byte) init::l#1
(byte) init::l#2
(byte) init::l#3
(byte) init::l#4
(byte*) init::li
(byte*) init::li#0
(byte*) init::li#1
(byte*) init::li#2
(byte*) init::line
(byte*) init::line#0
(byte*) init::line#1
(byte*) init::line#2
(byte*) init::line#3
(byte*) init::line#4
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte[$0]) playfield
(byte[$0]) playfield#0
(void()) render_current_piece()
(label) render_current_piece::@return
(void()) render_playfield()
(byte~) render_playfield::$0
(byte*~) render_playfield::$1
(bool~) render_playfield::$2
(bool~) render_playfield::$3
(label) render_playfield::@1
(label) render_playfield::@2
(label) render_playfield::@3
(label) render_playfield::@return
(byte) render_playfield::c
(byte) render_playfield::c#0
(byte) render_playfield::c#1
(byte) render_playfield::c#2
(byte) render_playfield::i
(byte) render_playfield::i#0
(byte) render_playfield::i#1
(byte) render_playfield::i#2
(byte) render_playfield::i#3
(byte) render_playfield::i#4
(byte) render_playfield::l
(byte) render_playfield::l#0
(byte) render_playfield::l#1
(byte) render_playfield::l#2
(byte) render_playfield::l#3
(byte) render_playfield::l#4
(byte*) render_playfield::line
(byte*) render_playfield::line#0
(byte*) render_playfield::line#1
(byte*[20]) screen_lines
(byte*[20]) screen_lines#0

Culled Empty Block (label) main::@9
Culled Empty Block (label) @9
Successful SSA optimization Pass2CullEmptyBlocks
Alias (byte*) fill::end#0 = (byte*~) fill::$0 
Alias (byte*) fill::addr#0 = (byte*) fill::start#2 
Alias (byte*) init::li#0 = (byte*~) init::$3 
Alias (byte*) init::line#0 = (byte*~) init::$6 
Alias (byte*) init::line#2 = (byte*) init::line#3 
Alias (byte) init::l#2 = (byte) init::l#3 
Alias (byte) render_playfield::l#3 = (byte) render_playfield::l#4 
Alias (byte) render_playfield::i#1 = (byte) render_playfield::i#4 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#3 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte) fill::val#2
Self Phi Eliminated (byte*) fill::end#1
Self Phi Eliminated (byte*) init::line#2
Self Phi Eliminated (byte) init::l#2
Self Phi Eliminated (byte*) render_playfield::line#1
Self Phi Eliminated (byte) render_playfield::l#3
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) fill::val#2 (byte) fill::val#3
Redundant Phi (byte*) fill::end#1 (byte*) fill::end#0
Redundant Phi (byte*) SCREEN#2 (byte*) SCREEN#0
Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#2
Redundant Phi (byte*) init::line#2 (byte*) init::line#4
Redundant Phi (byte) init::l#2 (byte) init::l#4
Redundant Phi (byte*) render_playfield::line#1 (byte*) render_playfield::line#0
Redundant Phi (byte) render_playfield::l#3 (byte) render_playfield::l#2
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) fill::$1 if((byte*) fill::addr#1!=(byte*) fill::end#0) goto fill::@1
Simple Condition (bool~) init::$5 if((byte) init::i#1!=rangelast(0,19)) goto init::@1
Simple Condition (bool~) init::$8 if((byte) init::c#1!=rangelast(0,11)) goto init::@3
Simple Condition (bool~) init::$9 if((byte) init::l#1!=rangelast(0,21)) goto init::@2
Simple Condition (bool~) render_playfield::$2 if((byte) render_playfield::c#1!=rangelast(0,9)) goto render_playfield::@2
Simple Condition (bool~) render_playfield::$3 if((byte) render_playfield::l#1!=rangelast(0,19)) goto render_playfield::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) BORDERCOL#0 = ((byte*))53280
Constant (const byte*) COLS#0 = ((byte*))55296
Constant (const byte) BLACK#0 = 0
Constant (const byte) GREEN#0 = 5
Constant (const byte) DARK_GREY#0 = 11
Constant (const byte*) SCREEN#0 = ((byte*))1024
Constant (const byte*[20]) screen_lines#0 = { fill( 20, 0) }
Constant (const byte/word/signed word/dword/signed dword) $0 = 20*10
Constant (const byte/signed byte/word/signed word/dword/signed dword) $1 = 4*4
Constant (const word) fill::size#0 = 1000
Constant (const byte) fill::val#0 = 160
Constant (const word) fill::size#1 = 1000
Constant (const byte) init::i#0 = 0
Constant (const byte) init::l#0 = 0
Constant (const byte) init::c#0 = 0
Constant (const byte) render_playfield::i#0 = 0
Constant (const byte) render_playfield::l#0 = 0
Constant (const byte) render_playfield::c#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte[$0]) playfield#0 = { fill( $0, 0) }
Constant (const byte[$1]) current_piece#0 = { fill( $1, 0) }
Constant (const byte*) fill::start#0 = SCREEN#0
Constant (const byte*) fill::start#1 = COLS#0
Constant (const byte) fill::val#1 = BLACK#0
Constant (const byte*) init::$2 = COLS#0+40
Constant (const byte*) init::line#0 = COLS#0+14
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) init::li#0 = init::$2+15
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(current_piece#0+0)
Consolidated array index constant in *(current_piece#0+1)
Consolidated array index constant in *(current_piece#0+2)
Consolidated array index constant in *(current_piece#0+4)
Successful SSA optimization Pass2ConstantAdditionElimination
if() condition always true - replacing block destination if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolved ranged next value init::i#1 ← ++ init::i#2 to ++
Resolved ranged comparison value if(init::i#1!=rangelast(0,19)) goto init::@1 to (byte/signed byte/word/signed word/dword/signed dword) 20
Resolved ranged next value init::c#1 ← ++ init::c#2 to ++
Resolved ranged comparison value if(init::c#1!=rangelast(0,11)) goto init::@3 to (byte/signed byte/word/signed word/dword/signed dword) 12
Resolved ranged next value init::l#1 ← ++ init::l#4 to ++
Resolved ranged comparison value if(init::l#1!=rangelast(0,21)) goto init::@2 to (byte/signed byte/word/signed word/dword/signed dword) 22
Resolved ranged next value render_playfield::c#1 ← ++ render_playfield::c#2 to ++
Resolved ranged comparison value if(render_playfield::c#1!=rangelast(0,9)) goto render_playfield::@2 to (byte/signed byte/word/signed word/dword/signed dword) 10
Resolved ranged next value render_playfield::l#1 ← ++ render_playfield::l#2 to ++
Resolved ranged comparison value if(render_playfield::l#1!=rangelast(0,19)) goto render_playfield::@1 to (byte/signed byte/word/signed word/dword/signed dword) 20
Culled Empty Block (label) @4
Culled Empty Block (label) main::@1
Culled Empty Block (label) init::@8
Culled Empty Block (label) init::@4
Successful SSA optimization Pass2CullEmptyBlocks
Inlining constant with var siblings (const word) fill::size#0
Inlining constant with var siblings (const byte) fill::val#0
Inlining constant with var siblings (const word) fill::size#1
Inlining constant with var siblings (const byte) fill::val#1
Inlining constant with var siblings (const byte) init::i#0
Inlining constant with var siblings (const byte) init::l#0
Inlining constant with var siblings (const byte) init::c#0
Inlining constant with var siblings (const byte*) init::line#0
Inlining constant with var siblings (const byte*) init::li#0
Inlining constant with var siblings (const byte) render_playfield::i#0
Inlining constant with var siblings (const byte) render_playfield::l#0
Inlining constant with var siblings (const byte) render_playfield::c#0
Constant inlined fill::val#0 = (byte/word/signed word/dword/signed dword) 160
Constant inlined init::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined init::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined init::line#0 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 14
Constant inlined fill::val#1 = (const byte) BLACK#0
Constant inlined init::li#0 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 15
Constant inlined fill::size#1 = (word/signed word/dword/signed dword) 1000
Constant inlined init::l#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined fill::size#0 = (word/signed word/dword/signed dword) 1000
Constant inlined $0 = (byte/signed byte/word/signed word/dword/signed dword) 20*(byte/signed byte/word/signed word/dword/signed dword) 10
Constant inlined init::$2 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 40
Constant inlined $1 = (byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 4
Constant inlined fill::start#1 = (const byte*) COLS#0
Constant inlined fill::start#0 = (const byte*) SCREEN#0
Constant inlined render_playfield::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_playfield::l#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined render_playfield::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values (word) fill::size#2 (word/signed word/dword/signed dword) 1000
Successful SSA optimization Pass2IdenticalPhiElimination
Simplifying constant plus zero current_piece#0+0
Added new block during phi lifting render_playfield::@5(between render_playfield::@3 and render_playfield::@1)
Added new block during phi lifting render_playfield::@6(between render_playfield::@2 and render_playfield::@2)
Added new block during phi lifting init::@9(between init::@1 and init::@1)
Added new block during phi lifting init::@10(between init::@5 and init::@2)
Added new block during phi lifting init::@11(between init::@3 and init::@3)
Added new block during phi lifting fill::@3(between fill::@1 and fill::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @8
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of render_current_piece
Adding NOP phi() at start of render_playfield
Adding NOP phi() at start of init::@7
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to init:5 render_playfield:7 render_current_piece:9 
Calls in [init] to fill:35 fill:37 

Created 12 initial phi equivalence classes
Coalesced [17] render_playfield::i#6 ← render_playfield::i#3
Coalesced [27] render_playfield::l#5 ← render_playfield::l#1
Coalesced [28] render_playfield::i#5 ← render_playfield::i#1
Coalesced [29] render_playfield::c#3 ← render_playfield::c#1
Coalesced (already) [30] render_playfield::i#7 ← render_playfield::i#1
Coalesced [54] init::line#5 ← init::line#1
Coalesced [55] init::l#5 ← init::l#1
Coalesced [56] init::c#3 ← init::c#1
Coalesced [57] init::i#3 ← init::i#1
Coalesced [58] init::li#3 ← init::li#1
Coalesced [61] fill::addr#3 ← fill::addr#0
Coalesced [67] fill::addr#4 ← fill::addr#1
Coalesced down to 10 phi equivalence classes
Culled Empty Block (label) render_playfield::@5
Culled Empty Block (label) render_playfield::@6
Culled Empty Block (label) init::@10
Culled Empty Block (label) init::@11
Culled Empty Block (label) init::@9
Culled Empty Block (label) fill::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @8
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of render_current_piece
Adding NOP phi() at start of render_playfield
Adding NOP phi() at start of init::@7

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@8
@8: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @8
  [3] phi()
main: scope:[main]  from @8
  [4] phi()
  [5] call init 
  to:main::@7
main::@7: scope:[main]  from main
  [6] phi()
  [7] call render_playfield 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [8] phi()
  [9] call render_current_piece 
  to:main::@2
main::@2: scope:[main]  from main::@2 main::@8
  [10] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0)
  to:main::@2
render_current_piece: scope:[render_current_piece]  from main::@8
  [11] phi()
  to:render_current_piece::@return
render_current_piece::@return: scope:[render_current_piece]  from render_current_piece
  [12] return 
  to:@return
render_playfield: scope:[render_playfield]  from main::@7
  [13] phi()
  to:render_playfield::@1
render_playfield::@1: scope:[render_playfield]  from render_playfield render_playfield::@3
  [14] (byte) render_playfield::i#3 ← phi( render_playfield/(byte/signed byte/word/signed word/dword/signed dword) 0 render_playfield::@3/(byte) render_playfield::i#1 )
  [14] (byte) render_playfield::l#2 ← phi( render_playfield/(byte/signed byte/word/signed word/dword/signed dword) 0 render_playfield::@3/(byte) render_playfield::l#1 )
  [15] (byte~) render_playfield::$0 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [16] (byte*) render_playfield::line#0 ← *((const byte*[20]) screen_lines#0 + (byte~) render_playfield::$0)
  to:render_playfield::@2
render_playfield::@2: scope:[render_playfield]  from render_playfield::@1 render_playfield::@2
  [17] (byte) render_playfield::i#2 ← phi( render_playfield::@1/(byte) render_playfield::i#3 render_playfield::@2/(byte) render_playfield::i#1 )
  [17] (byte) render_playfield::c#2 ← phi( render_playfield::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 render_playfield::@2/(byte) render_playfield::c#1 )
  [18] (byte*~) render_playfield::$1 ← (byte*) render_playfield::line#0 + (byte) render_playfield::c#2
  [19] *((byte*~) render_playfield::$1) ← *((const byte[20*10]) playfield#0 + (byte) render_playfield::i#2)
  [20] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2
  [21] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2
  [22] if((byte) render_playfield::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 10) goto render_playfield::@2
  to:render_playfield::@3
render_playfield::@3: scope:[render_playfield]  from render_playfield::@2
  [23] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2
  [24] if((byte) render_playfield::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 20) goto render_playfield::@1
  to:render_playfield::@return
render_playfield::@return: scope:[render_playfield]  from render_playfield::@3
  [25] return 
  to:@return
init: scope:[init]  from main
  [26] *((const byte[4*4]) current_piece#0) ← (const byte) GREEN#0
  [27] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const byte) GREEN#0
  [28] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (const byte) GREEN#0
  [29] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (const byte) GREEN#0
  [30] call fill 
  to:init::@7
init::@7: scope:[init]  from init
  [31] phi()
  [32] call fill 
  to:init::@1
init::@1: scope:[init]  from init::@1 init::@7
  [33] (byte*) init::li#2 ← phi( init::@1/(byte*) init::li#1 init::@7/(const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 15 )
  [33] (byte) init::i#2 ← phi( init::@1/(byte) init::i#1 init::@7/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [34] (byte~) init::$4 ← (byte) init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [35] *((const byte*[20]) screen_lines#0 + (byte~) init::$4) ← (byte*) init::li#2
  [36] (byte*) init::li#1 ← (byte*) init::li#2 + (byte/signed byte/word/signed word/dword/signed dword) 40
  [37] (byte) init::i#1 ← ++ (byte) init::i#2
  [38] if((byte) init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 20) goto init::@1
  to:init::@2
init::@2: scope:[init]  from init::@1 init::@5
  [39] (byte) init::l#4 ← phi( init::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 init::@5/(byte) init::l#1 )
  [39] (byte*) init::line#4 ← phi( init::@1/(const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 14 init::@5/(byte*) init::line#1 )
  to:init::@3
init::@3: scope:[init]  from init::@2 init::@3
  [40] (byte) init::c#2 ← phi( init::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 init::@3/(byte) init::c#1 )
  [41] (byte*~) init::$7 ← (byte*) init::line#4 + (byte) init::c#2
  [42] *((byte*~) init::$7) ← (const byte) DARK_GREY#0
  [43] (byte) init::c#1 ← ++ (byte) init::c#2
  [44] if((byte) init::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto init::@3
  to:init::@5
init::@5: scope:[init]  from init::@3
  [45] (byte*) init::line#1 ← (byte*) init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40
  [46] (byte) init::l#1 ← ++ (byte) init::l#4
  [47] if((byte) init::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 22) goto init::@2
  to:init::@return
init::@return: scope:[init]  from init::@5
  [48] return 
  to:@return
fill: scope:[fill]  from init init::@7
  [49] (byte) fill::val#3 ← phi( init/(byte/word/signed word/dword/signed dword) 160 init::@7/(const byte) BLACK#0 )
  [49] (byte*) fill::addr#0 ← phi( init/(const byte*) SCREEN#0 init::@7/(const byte*) COLS#0 )
  [50] (byte*) fill::end#0 ← (byte*) fill::addr#0 + (word/signed word/dword/signed dword) 1000
  to:fill::@1
fill::@1: scope:[fill]  from fill fill::@1
  [51] (byte*) fill::addr#2 ← phi( fill/(byte*) fill::addr#0 fill::@1/(byte*) fill::addr#1 )
  [52] *((byte*) fill::addr#2) ← (byte) fill::val#3
  [53] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2
  [54] if((byte*) fill::addr#1!=(byte*) fill::end#0) goto fill::@1
  to:fill::@return
fill::@return: scope:[fill]  from fill::@1
  [55] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) BLACK
(byte*) BORDERCOL
(byte*) COLS
(byte) DARK_GREY
(byte) GREEN
(byte*) SCREEN
(byte[4*4]) current_piece
(void()) fill((byte*) fill::start , (word) fill::size , (byte) fill::val)
(byte*) fill::addr
(byte*) fill::addr#0 2.0
(byte*) fill::addr#1 16.5
(byte*) fill::addr#2 17.5
(byte*) fill::end
(byte*) fill::end#0 2.6
(word) fill::size
(byte*) fill::start
(byte) fill::val
(byte) fill::val#3 1.8333333333333333
(void()) init()
(byte~) init::$4 22.0
(byte*~) init::$7 202.0
(byte) init::c
(byte) init::c#1 151.5
(byte) init::c#2 101.0
(byte) init::i
(byte) init::i#1 16.5
(byte) init::i#2 8.25
(byte) init::l
(byte) init::l#1 16.5
(byte) init::l#4 3.142857142857143
(byte*) init::li
(byte*) init::li#1 7.333333333333333
(byte*) init::li#2 11.0
(byte*) init::line
(byte*) init::line#1 7.333333333333333
(byte*) init::line#4 20.499999999999996
(void()) main()
(byte[20*10]) playfield
(void()) render_current_piece()
(void()) render_playfield()
(byte~) render_playfield::$0 22.0
(byte*~) render_playfield::$1 202.0
(byte) render_playfield::c
(byte) render_playfield::c#1 151.5
(byte) render_playfield::c#2 75.75
(byte) render_playfield::i
(byte) render_playfield::i#1 42.599999999999994
(byte) render_playfield::i#2 104.66666666666666
(byte) render_playfield::i#3 7.333333333333333
(byte) render_playfield::l
(byte) render_playfield::l#1 16.5
(byte) render_playfield::l#2 3.666666666666667
(byte*) render_playfield::line
(byte*) render_playfield::line#0 16.0
(byte*[20]) screen_lines

Initial phi equivalence classes
[ render_playfield::l#2 render_playfield::l#1 ]
[ render_playfield::c#2 render_playfield::c#1 ]
[ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
[ init::i#2 init::i#1 ]
[ init::li#2 init::li#1 ]
[ init::line#4 init::line#1 ]
[ init::l#4 init::l#1 ]
[ init::c#2 init::c#1 ]
[ fill::val#3 ]
[ fill::addr#2 fill::addr#0 fill::addr#1 ]
Added variable render_playfield::$0 to zero page equivalence class [ render_playfield::$0 ]
Added variable render_playfield::line#0 to zero page equivalence class [ render_playfield::line#0 ]
Added variable render_playfield::$1 to zero page equivalence class [ render_playfield::$1 ]
Added variable init::$4 to zero page equivalence class [ init::$4 ]
Added variable init::$7 to zero page equivalence class [ init::$7 ]
Added variable fill::end#0 to zero page equivalence class [ fill::end#0 ]
Complete equivalence classes
[ render_playfield::l#2 render_playfield::l#1 ]
[ render_playfield::c#2 render_playfield::c#1 ]
[ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
[ init::i#2 init::i#1 ]
[ init::li#2 init::li#1 ]
[ init::line#4 init::line#1 ]
[ init::l#4 init::l#1 ]
[ init::c#2 init::c#1 ]
[ fill::val#3 ]
[ fill::addr#2 fill::addr#0 fill::addr#1 ]
[ render_playfield::$0 ]
[ render_playfield::line#0 ]
[ render_playfield::$1 ]
[ init::$4 ]
[ init::$7 ]
[ fill::end#0 ]
Allocated zp ZP_BYTE:2 [ render_playfield::l#2 render_playfield::l#1 ]
Allocated zp ZP_BYTE:3 [ render_playfield::c#2 render_playfield::c#1 ]
Allocated zp ZP_BYTE:4 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Allocated zp ZP_BYTE:5 [ init::i#2 init::i#1 ]
Allocated zp ZP_WORD:6 [ init::li#2 init::li#1 ]
Allocated zp ZP_WORD:8 [ init::line#4 init::line#1 ]
Allocated zp ZP_BYTE:10 [ init::l#4 init::l#1 ]
Allocated zp ZP_BYTE:11 [ init::c#2 init::c#1 ]
Allocated zp ZP_BYTE:12 [ fill::val#3 ]
Allocated zp ZP_WORD:13 [ fill::addr#2 fill::addr#0 fill::addr#1 ]
Allocated zp ZP_BYTE:15 [ render_playfield::$0 ]
Allocated zp ZP_WORD:16 [ render_playfield::line#0 ]
Allocated zp ZP_WORD:18 [ render_playfield::$1 ]
Allocated zp ZP_BYTE:20 [ init::$4 ]
Allocated zp ZP_WORD:21 [ init::$7 ]
Allocated zp ZP_WORD:23 [ fill::end#0 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label BORDERCOL = $d020
  .label COLS = $d800
  .const BLACK = 0
  .const GREEN = 5
  .const DARK_GREY = $b
  .label SCREEN = $400
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @8 [phi:@begin->@8]
b8_from_bbegin:
  jmp b8
//SEG4 @8
b8:
//SEG5 [2] call main 
//SEG6 [4] phi from @8 to main [phi:@8->main]
main_from_b8:
  jsr main
//SEG7 [3] phi from @8 to @end [phi:@8->@end]
bend_from_b8:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call init 
    jsr init
  //SEG11 [6] phi from main to main::@7 [phi:main->main::@7]
  b7_from_main:
    jmp b7
  //SEG12 main::@7
  b7:
  //SEG13 [7] call render_playfield 
  //SEG14 [13] phi from main::@7 to render_playfield [phi:main::@7->render_playfield]
  render_playfield_from_b7:
    jsr render_playfield
  //SEG15 [8] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  b8_from_b7:
    jmp b8
  //SEG16 main::@8
  b8:
  //SEG17 [9] call render_current_piece 
  //SEG18 [11] phi from main::@8 to render_current_piece [phi:main::@8->render_current_piece]
  render_current_piece_from_b8:
    jsr render_current_piece
    jmp b2
  //SEG19 main::@2
  b2:
  //SEG20 [10] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp b2
}
//SEG21 render_current_piece
render_current_piece: {
    jmp breturn
  //SEG22 render_current_piece::@return
  breturn:
  //SEG23 [12] return 
    rts
}
//SEG24 render_playfield
render_playfield: {
    .label _0 = $f
    .label _1 = $12
    .label line = $10
    .label i = 4
    .label c = 3
    .label l = 2
  //SEG25 [14] phi from render_playfield to render_playfield::@1 [phi:render_playfield->render_playfield::@1]
  b1_from_render_playfield:
  //SEG26 [14] phi (byte) render_playfield::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield->render_playfield::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG27 [14] phi (byte) render_playfield::l#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield->render_playfield::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta l
    jmp b1
  //SEG28 [14] phi from render_playfield::@3 to render_playfield::@1 [phi:render_playfield::@3->render_playfield::@1]
  b1_from_b3:
  //SEG29 [14] phi (byte) render_playfield::i#3 = (byte) render_playfield::i#1 [phi:render_playfield::@3->render_playfield::@1#0] -- register_copy 
  //SEG30 [14] phi (byte) render_playfield::l#2 = (byte) render_playfield::l#1 [phi:render_playfield::@3->render_playfield::@1#1] -- register_copy 
    jmp b1
  //SEG31 render_playfield::@1
  b1:
  //SEG32 [15] (byte~) render_playfield::$0 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda l
    asl
    sta _0
  //SEG33 [16] (byte*) render_playfield::line#0 ← *((const byte*[20]) screen_lines#0 + (byte~) render_playfield::$0) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy _0
    lda screen_lines,y
    sta line
    lda screen_lines+1,y
    sta line+1
  //SEG34 [17] phi from render_playfield::@1 to render_playfield::@2 [phi:render_playfield::@1->render_playfield::@2]
  b2_from_b1:
  //SEG35 [17] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#3 [phi:render_playfield::@1->render_playfield::@2#0] -- register_copy 
  //SEG36 [17] phi (byte) render_playfield::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield::@1->render_playfield::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta c
    jmp b2
  //SEG37 [17] phi from render_playfield::@2 to render_playfield::@2 [phi:render_playfield::@2->render_playfield::@2]
  b2_from_b2:
  //SEG38 [17] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#1 [phi:render_playfield::@2->render_playfield::@2#0] -- register_copy 
  //SEG39 [17] phi (byte) render_playfield::c#2 = (byte) render_playfield::c#1 [phi:render_playfield::@2->render_playfield::@2#1] -- register_copy 
    jmp b2
  //SEG40 render_playfield::@2
  b2:
  //SEG41 [18] (byte*~) render_playfield::$1 ← (byte*) render_playfield::line#0 + (byte) render_playfield::c#2 -- pbuz1=pbuz2_plus_vbuz3 
    lda c
    clc
    adc line
    sta _1
    lda #0
    adc line+1
    sta _1+1
  //SEG42 [19] *((byte*~) render_playfield::$1) ← *((const byte[20*10]) playfield#0 + (byte) render_playfield::i#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda playfield,y
    ldy #0
    sta (_1),y
  //SEG43 [20] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG44 [21] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG45 [22] if((byte) render_playfield::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 10) goto render_playfield::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda c
    cmp #$a
    bne b2_from_b2
    jmp b3
  //SEG46 render_playfield::@3
  b3:
  //SEG47 [23] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG48 [24] if((byte) render_playfield::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 20) goto render_playfield::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #$14
    bne b1_from_b3
    jmp breturn
  //SEG49 render_playfield::@return
  breturn:
  //SEG50 [25] return 
    rts
}
//SEG51 init
init: {
    .label _4 = $14
    .label _7 = $15
    .label li = 6
    .label i = 5
    .label c = $b
    .label line = 8
    .label l = $a
  //SEG52 [26] *((const byte[4*4]) current_piece#0) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta current_piece
  //SEG53 [27] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta current_piece+1
  //SEG54 [28] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta current_piece+2
  //SEG55 [29] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta current_piece+4
  //SEG56 [30] call fill 
  //SEG57 [49] phi from init to fill [phi:init->fill]
  fill_from_init:
  //SEG58 [49] phi (byte) fill::val#3 = (byte/word/signed word/dword/signed dword) 160 [phi:init->fill#0] -- vbuz1=vbuc1 
    lda #$a0
    sta fill.val
  //SEG59 [49] phi (byte*) fill::addr#0 = (const byte*) SCREEN#0 [phi:init->fill#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta fill.addr
    lda #>SCREEN
    sta fill.addr+1
    jsr fill
  //SEG60 [31] phi from init to init::@7 [phi:init->init::@7]
  b7_from_init:
    jmp b7
  //SEG61 init::@7
  b7:
  //SEG62 [32] call fill 
  //SEG63 [49] phi from init::@7 to fill [phi:init::@7->fill]
  fill_from_b7:
  //SEG64 [49] phi (byte) fill::val#3 = (const byte) BLACK#0 [phi:init::@7->fill#0] -- vbuz1=vbuc1 
    lda #BLACK
    sta fill.val
  //SEG65 [49] phi (byte*) fill::addr#0 = (const byte*) COLS#0 [phi:init::@7->fill#1] -- pbuz1=pbuc1 
    lda #<COLS
    sta fill.addr
    lda #>COLS
    sta fill.addr+1
    jsr fill
  //SEG66 [33] phi from init::@7 to init::@1 [phi:init::@7->init::@1]
  b1_from_b7:
  //SEG67 [33] phi (byte*) init::li#2 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 15 [phi:init::@7->init::@1#0] -- pbuz1=pbuc1 
    lda #<COLS+$28+$f
    sta li
    lda #>COLS+$28+$f
    sta li+1
  //SEG68 [33] phi (byte) init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init::@7->init::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG69 [33] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  b1_from_b1:
  //SEG70 [33] phi (byte*) init::li#2 = (byte*) init::li#1 [phi:init::@1->init::@1#0] -- register_copy 
  //SEG71 [33] phi (byte) init::i#2 = (byte) init::i#1 [phi:init::@1->init::@1#1] -- register_copy 
    jmp b1
  //SEG72 init::@1
  b1:
  //SEG73 [34] (byte~) init::$4 ← (byte) init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta _4
  //SEG74 [35] *((const byte*[20]) screen_lines#0 + (byte~) init::$4) ← (byte*) init::li#2 -- pptc1_derefidx_vbuz1=pbuz2 
    ldy _4
    lda li
    sta screen_lines,y
    lda li+1
    sta screen_lines+1,y
  //SEG75 [36] (byte*) init::li#1 ← (byte*) init::li#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda li
    clc
    adc #$28
    sta li
    bcc !+
    inc li+1
  !:
  //SEG76 [37] (byte) init::i#1 ← ++ (byte) init::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG77 [38] if((byte) init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 20) goto init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$14
    bne b1_from_b1
  //SEG78 [39] phi from init::@1 to init::@2 [phi:init::@1->init::@2]
  b2_from_b1:
  //SEG79 [39] phi (byte) init::l#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init::@1->init::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG80 [39] phi (byte*) init::line#4 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 14 [phi:init::@1->init::@2#1] -- pbuz1=pbuc1 
    lda #<COLS+$e
    sta line
    lda #>COLS+$e
    sta line+1
    jmp b2
  //SEG81 [39] phi from init::@5 to init::@2 [phi:init::@5->init::@2]
  b2_from_b5:
  //SEG82 [39] phi (byte) init::l#4 = (byte) init::l#1 [phi:init::@5->init::@2#0] -- register_copy 
  //SEG83 [39] phi (byte*) init::line#4 = (byte*) init::line#1 [phi:init::@5->init::@2#1] -- register_copy 
    jmp b2
  //SEG84 init::@2
  b2:
  //SEG85 [40] phi from init::@2 to init::@3 [phi:init::@2->init::@3]
  b3_from_b2:
  //SEG86 [40] phi (byte) init::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init::@2->init::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta c
    jmp b3
  //SEG87 [40] phi from init::@3 to init::@3 [phi:init::@3->init::@3]
  b3_from_b3:
  //SEG88 [40] phi (byte) init::c#2 = (byte) init::c#1 [phi:init::@3->init::@3#0] -- register_copy 
    jmp b3
  //SEG89 init::@3
  b3:
  //SEG90 [41] (byte*~) init::$7 ← (byte*) init::line#4 + (byte) init::c#2 -- pbuz1=pbuz2_plus_vbuz3 
    lda c
    clc
    adc line
    sta _7
    lda #0
    adc line+1
    sta _7+1
  //SEG91 [42] *((byte*~) init::$7) ← (const byte) DARK_GREY#0 -- _deref_pbuz1=vbuc1 
    lda #DARK_GREY
    ldy #0
    sta (_7),y
  //SEG92 [43] (byte) init::c#1 ← ++ (byte) init::c#2 -- vbuz1=_inc_vbuz1 
    inc c
  //SEG93 [44] if((byte) init::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto init::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda c
    cmp #$c
    bne b3_from_b3
    jmp b5
  //SEG94 init::@5
  b5:
  //SEG95 [45] (byte*) init::line#1 ← (byte*) init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+1
  !:
  //SEG96 [46] (byte) init::l#1 ← ++ (byte) init::l#4 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG97 [47] if((byte) init::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 22) goto init::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #$16
    bne b2_from_b5
    jmp breturn
  //SEG98 init::@return
  breturn:
  //SEG99 [48] return 
    rts
}
//SEG100 fill
fill: {
    .label end = $17
    .label addr = $d
    .label val = $c
  //SEG101 [50] (byte*) fill::end#0 ← (byte*) fill::addr#0 + (word/signed word/dword/signed dword) 1000 -- pbuz1=pbuz2_plus_vwuc1 
    lda addr
    clc
    adc #<$3e8
    sta end
    lda addr+1
    adc #>$3e8
    sta end+1
  //SEG102 [51] phi from fill fill::@1 to fill::@1 [phi:fill/fill::@1->fill::@1]
  b1_from_fill:
  b1_from_b1:
  //SEG103 [51] phi (byte*) fill::addr#2 = (byte*) fill::addr#0 [phi:fill/fill::@1->fill::@1#0] -- register_copy 
    jmp b1
  //SEG104 fill::@1
  b1:
  //SEG105 [52] *((byte*) fill::addr#2) ← (byte) fill::val#3 -- _deref_pbuz1=vbuz2 
    lda val
    ldy #0
    sta (addr),y
  //SEG106 [53] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2 -- pbuz1=_inc_pbuz1 
    inc addr
    bne !+
    inc addr+1
  !:
  //SEG107 [54] if((byte*) fill::addr#1!=(byte*) fill::end#0) goto fill::@1 -- pbuz1_neq_pbuz2_then_la1 
    lda addr+1
    cmp end+1
    bne b1_from_b1
    lda addr
    cmp end
    bne b1_from_b1
    jmp breturn
  //SEG108 fill::@return
  breturn:
  //SEG109 [55] return 
    rts
}
  screen_lines: .fill 2*$14, 0
  playfield: .fill $14*$a, 0
  current_piece: .fill 4*4, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [15] (byte~) render_playfield::$0 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_playfield::l#2 render_playfield::i#3 render_playfield::$0 ] ( main:2::render_playfield:7 [ render_playfield::l#2 render_playfield::i#3 render_playfield::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ render_playfield::l#2 render_playfield::l#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Statement [16] (byte*) render_playfield::line#0 ← *((const byte*[20]) screen_lines#0 + (byte~) render_playfield::$0) [ render_playfield::l#2 render_playfield::i#3 render_playfield::line#0 ] ( main:2::render_playfield:7 [ render_playfield::l#2 render_playfield::i#3 render_playfield::line#0 ] ) always clobbers reg byte a 
Statement [18] (byte*~) render_playfield::$1 ← (byte*) render_playfield::line#0 + (byte) render_playfield::c#2 [ render_playfield::l#2 render_playfield::line#0 render_playfield::c#2 render_playfield::i#2 render_playfield::$1 ] ( main:2::render_playfield:7 [ render_playfield::l#2 render_playfield::line#0 render_playfield::c#2 render_playfield::i#2 render_playfield::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ render_playfield::c#2 render_playfield::c#1 ]
Statement [19] *((byte*~) render_playfield::$1) ← *((const byte[20*10]) playfield#0 + (byte) render_playfield::i#2) [ render_playfield::l#2 render_playfield::line#0 render_playfield::c#2 render_playfield::i#2 ] ( main:2::render_playfield:7 [ render_playfield::l#2 render_playfield::line#0 render_playfield::c#2 render_playfield::i#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ render_playfield::l#2 render_playfield::l#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:3 [ render_playfield::c#2 render_playfield::c#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:4 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Statement [26] *((const byte[4*4]) current_piece#0) ← (const byte) GREEN#0 [ ] ( main:2::init:5 [ ] ) always clobbers reg byte a 
Statement [27] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const byte) GREEN#0 [ ] ( main:2::init:5 [ ] ) always clobbers reg byte a 
Statement [28] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (const byte) GREEN#0 [ ] ( main:2::init:5 [ ] ) always clobbers reg byte a 
Statement [29] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (const byte) GREEN#0 [ ] ( main:2::init:5 [ ] ) always clobbers reg byte a 
Statement [34] (byte~) init::$4 ← (byte) init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ init::i#2 init::li#2 init::$4 ] ( main:2::init:5 [ init::i#2 init::li#2 init::$4 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ init::i#2 init::i#1 ]
Statement [35] *((const byte*[20]) screen_lines#0 + (byte~) init::$4) ← (byte*) init::li#2 [ init::i#2 init::li#2 ] ( main:2::init:5 [ init::i#2 init::li#2 ] ) always clobbers reg byte a 
Statement [36] (byte*) init::li#1 ← (byte*) init::li#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ init::i#2 init::li#1 ] ( main:2::init:5 [ init::i#2 init::li#1 ] ) always clobbers reg byte a 
Statement [41] (byte*~) init::$7 ← (byte*) init::line#4 + (byte) init::c#2 [ init::line#4 init::l#4 init::c#2 init::$7 ] ( main:2::init:5 [ init::line#4 init::l#4 init::c#2 init::$7 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ init::l#4 init::l#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:11 [ init::c#2 init::c#1 ]
Statement [42] *((byte*~) init::$7) ← (const byte) DARK_GREY#0 [ init::line#4 init::l#4 init::c#2 ] ( main:2::init:5 [ init::line#4 init::l#4 init::c#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:10 [ init::l#4 init::l#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:11 [ init::c#2 init::c#1 ]
Statement [45] (byte*) init::line#1 ← (byte*) init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ init::l#4 init::line#1 ] ( main:2::init:5 [ init::l#4 init::line#1 ] ) always clobbers reg byte a 
Statement [50] (byte*) fill::end#0 ← (byte*) fill::addr#0 + (word/signed word/dword/signed dword) 1000 [ fill::addr#0 fill::val#3 fill::end#0 ] ( main:2::init:5::fill:30 [ fill::addr#0 fill::val#3 fill::end#0 ] main:2::init:5::fill:32 [ fill::addr#0 fill::val#3 fill::end#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:12 [ fill::val#3 ]
Statement [52] *((byte*) fill::addr#2) ← (byte) fill::val#3 [ fill::val#3 fill::end#0 fill::addr#2 ] ( main:2::init:5::fill:30 [ fill::val#3 fill::end#0 fill::addr#2 ] main:2::init:5::fill:32 [ fill::val#3 fill::end#0 fill::addr#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:12 [ fill::val#3 ]
Statement [54] if((byte*) fill::addr#1!=(byte*) fill::end#0) goto fill::@1 [ fill::val#3 fill::end#0 fill::addr#1 ] ( main:2::init:5::fill:30 [ fill::val#3 fill::end#0 fill::addr#1 ] main:2::init:5::fill:32 [ fill::val#3 fill::end#0 fill::addr#1 ] ) always clobbers reg byte a 
Statement [15] (byte~) render_playfield::$0 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ render_playfield::l#2 render_playfield::i#3 render_playfield::$0 ] ( main:2::render_playfield:7 [ render_playfield::l#2 render_playfield::i#3 render_playfield::$0 ] ) always clobbers reg byte a 
Statement [16] (byte*) render_playfield::line#0 ← *((const byte*[20]) screen_lines#0 + (byte~) render_playfield::$0) [ render_playfield::l#2 render_playfield::i#3 render_playfield::line#0 ] ( main:2::render_playfield:7 [ render_playfield::l#2 render_playfield::i#3 render_playfield::line#0 ] ) always clobbers reg byte a 
Statement [18] (byte*~) render_playfield::$1 ← (byte*) render_playfield::line#0 + (byte) render_playfield::c#2 [ render_playfield::l#2 render_playfield::line#0 render_playfield::c#2 render_playfield::i#2 render_playfield::$1 ] ( main:2::render_playfield:7 [ render_playfield::l#2 render_playfield::line#0 render_playfield::c#2 render_playfield::i#2 render_playfield::$1 ] ) always clobbers reg byte a 
Statement [19] *((byte*~) render_playfield::$1) ← *((const byte[20*10]) playfield#0 + (byte) render_playfield::i#2) [ render_playfield::l#2 render_playfield::line#0 render_playfield::c#2 render_playfield::i#2 ] ( main:2::render_playfield:7 [ render_playfield::l#2 render_playfield::line#0 render_playfield::c#2 render_playfield::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [26] *((const byte[4*4]) current_piece#0) ← (const byte) GREEN#0 [ ] ( main:2::init:5 [ ] ) always clobbers reg byte a 
Statement [27] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const byte) GREEN#0 [ ] ( main:2::init:5 [ ] ) always clobbers reg byte a 
Statement [28] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (const byte) GREEN#0 [ ] ( main:2::init:5 [ ] ) always clobbers reg byte a 
Statement [29] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (const byte) GREEN#0 [ ] ( main:2::init:5 [ ] ) always clobbers reg byte a 
Statement [34] (byte~) init::$4 ← (byte) init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ init::i#2 init::li#2 init::$4 ] ( main:2::init:5 [ init::i#2 init::li#2 init::$4 ] ) always clobbers reg byte a 
Statement [35] *((const byte*[20]) screen_lines#0 + (byte~) init::$4) ← (byte*) init::li#2 [ init::i#2 init::li#2 ] ( main:2::init:5 [ init::i#2 init::li#2 ] ) always clobbers reg byte a 
Statement [36] (byte*) init::li#1 ← (byte*) init::li#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ init::i#2 init::li#1 ] ( main:2::init:5 [ init::i#2 init::li#1 ] ) always clobbers reg byte a 
Statement [41] (byte*~) init::$7 ← (byte*) init::line#4 + (byte) init::c#2 [ init::line#4 init::l#4 init::c#2 init::$7 ] ( main:2::init:5 [ init::line#4 init::l#4 init::c#2 init::$7 ] ) always clobbers reg byte a 
Statement [42] *((byte*~) init::$7) ← (const byte) DARK_GREY#0 [ init::line#4 init::l#4 init::c#2 ] ( main:2::init:5 [ init::line#4 init::l#4 init::c#2 ] ) always clobbers reg byte a reg byte y 
Statement [45] (byte*) init::line#1 ← (byte*) init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ init::l#4 init::line#1 ] ( main:2::init:5 [ init::l#4 init::line#1 ] ) always clobbers reg byte a 
Statement [50] (byte*) fill::end#0 ← (byte*) fill::addr#0 + (word/signed word/dword/signed dword) 1000 [ fill::addr#0 fill::val#3 fill::end#0 ] ( main:2::init:5::fill:30 [ fill::addr#0 fill::val#3 fill::end#0 ] main:2::init:5::fill:32 [ fill::addr#0 fill::val#3 fill::end#0 ] ) always clobbers reg byte a 
Statement [52] *((byte*) fill::addr#2) ← (byte) fill::val#3 [ fill::val#3 fill::end#0 fill::addr#2 ] ( main:2::init:5::fill:30 [ fill::val#3 fill::end#0 fill::addr#2 ] main:2::init:5::fill:32 [ fill::val#3 fill::end#0 fill::addr#2 ] ) always clobbers reg byte a reg byte y 
Statement [54] if((byte*) fill::addr#1!=(byte*) fill::end#0) goto fill::@1 [ fill::val#3 fill::end#0 fill::addr#1 ] ( main:2::init:5::fill:30 [ fill::val#3 fill::end#0 fill::addr#1 ] main:2::init:5::fill:32 [ fill::val#3 fill::end#0 fill::addr#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ render_playfield::l#2 render_playfield::l#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_BYTE:3 [ render_playfield::c#2 render_playfield::c#1 ] : zp ZP_BYTE:3 , reg byte x , 
Potential registers zp ZP_BYTE:4 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] : zp ZP_BYTE:4 , reg byte x , 
Potential registers zp ZP_BYTE:5 [ init::i#2 init::i#1 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:6 [ init::li#2 init::li#1 ] : zp ZP_WORD:6 , 
Potential registers zp ZP_WORD:8 [ init::line#4 init::line#1 ] : zp ZP_WORD:8 , 
Potential registers zp ZP_BYTE:10 [ init::l#4 init::l#1 ] : zp ZP_BYTE:10 , reg byte x , 
Potential registers zp ZP_BYTE:11 [ init::c#2 init::c#1 ] : zp ZP_BYTE:11 , reg byte x , 
Potential registers zp ZP_BYTE:12 [ fill::val#3 ] : zp ZP_BYTE:12 , reg byte x , 
Potential registers zp ZP_WORD:13 [ fill::addr#2 fill::addr#0 fill::addr#1 ] : zp ZP_WORD:13 , 
Potential registers zp ZP_BYTE:15 [ render_playfield::$0 ] : zp ZP_BYTE:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:16 [ render_playfield::line#0 ] : zp ZP_WORD:16 , 
Potential registers zp ZP_WORD:18 [ render_playfield::$1 ] : zp ZP_WORD:18 , 
Potential registers zp ZP_BYTE:20 [ init::$4 ] : zp ZP_BYTE:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:21 [ init::$7 ] : zp ZP_WORD:21 , 
Potential registers zp ZP_WORD:23 [ fill::end#0 ] : zp ZP_WORD:23 , 

REGISTER UPLIFT SCOPES
Uplift Scope [render_playfield] 227.25: zp ZP_BYTE:3 [ render_playfield::c#2 render_playfield::c#1 ] 202: zp ZP_WORD:18 [ render_playfield::$1 ] 154.6: zp ZP_BYTE:4 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] 22: zp ZP_BYTE:15 [ render_playfield::$0 ] 20.17: zp ZP_BYTE:2 [ render_playfield::l#2 render_playfield::l#1 ] 16: zp ZP_WORD:16 [ render_playfield::line#0 ] 
Uplift Scope [init] 252.5: zp ZP_BYTE:11 [ init::c#2 init::c#1 ] 202: zp ZP_WORD:21 [ init::$7 ] 27.83: zp ZP_WORD:8 [ init::line#4 init::line#1 ] 24.75: zp ZP_BYTE:5 [ init::i#2 init::i#1 ] 22: zp ZP_BYTE:20 [ init::$4 ] 19.64: zp ZP_BYTE:10 [ init::l#4 init::l#1 ] 18.33: zp ZP_WORD:6 [ init::li#2 init::li#1 ] 
Uplift Scope [fill] 36: zp ZP_WORD:13 [ fill::addr#2 fill::addr#0 fill::addr#1 ] 2.6: zp ZP_WORD:23 [ fill::end#0 ] 1.83: zp ZP_BYTE:12 [ fill::val#3 ] 
Uplift Scope [main] 
Uplift Scope [render_current_piece] 
Uplift Scope [] 

Uplifting [render_playfield] best 13740 combination reg byte x [ render_playfield::c#2 render_playfield::c#1 ] zp ZP_WORD:18 [ render_playfield::$1 ] zp ZP_BYTE:4 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] reg byte a [ render_playfield::$0 ] zp ZP_BYTE:2 [ render_playfield::l#2 render_playfield::l#1 ] zp ZP_WORD:16 [ render_playfield::line#0 ] 
Uplifting [init] best 12600 combination reg byte x [ init::c#2 init::c#1 ] zp ZP_WORD:21 [ init::$7 ] zp ZP_WORD:8 [ init::line#4 init::line#1 ] reg byte x [ init::i#2 init::i#1 ] reg byte a [ init::$4 ] zp ZP_BYTE:10 [ init::l#4 init::l#1 ] zp ZP_WORD:6 [ init::li#2 init::li#1 ] 
Uplifting [fill] best 12584 combination zp ZP_WORD:13 [ fill::addr#2 fill::addr#0 fill::addr#1 ] zp ZP_WORD:23 [ fill::end#0 ] reg byte x [ fill::val#3 ] 
Uplifting [main] best 12584 combination 
Uplifting [render_current_piece] best 12584 combination 
Uplifting [] best 12584 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:4 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Uplifting [render_playfield] best 12584 combination zp ZP_BYTE:4 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ render_playfield::l#2 render_playfield::l#1 ]
Uplifting [render_playfield] best 12584 combination zp ZP_BYTE:2 [ render_playfield::l#2 render_playfield::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ init::l#4 init::l#1 ]
Uplifting [init] best 12584 combination zp ZP_BYTE:10 [ init::l#4 init::l#1 ] 
Coalescing zero page register [ zp ZP_BYTE:2 [ render_playfield::l#2 render_playfield::l#1 ] ] with [ zp ZP_BYTE:10 [ init::l#4 init::l#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ init::li#2 init::li#1 ] ] with [ zp ZP_WORD:8 [ init::line#4 init::line#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ init::li#2 init::li#1 init::line#4 init::line#1 ] ] with [ zp ZP_WORD:13 [ fill::addr#2 fill::addr#0 fill::addr#1 ] ]
Coalescing zero page register [ zp ZP_WORD:6 [ init::li#2 init::li#1 init::line#4 init::line#1 fill::addr#2 fill::addr#0 fill::addr#1 ] ] with [ zp ZP_WORD:16 [ render_playfield::line#0 ] ]
Coalescing zero page register [ zp ZP_WORD:18 [ render_playfield::$1 ] ] with [ zp ZP_WORD:21 [ init::$7 ] ]
Coalescing zero page register [ zp ZP_WORD:18 [ render_playfield::$1 init::$7 ] ] with [ zp ZP_WORD:23 [ fill::end#0 ] ]
Allocated (was zp ZP_BYTE:4) zp ZP_BYTE:3 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
Allocated (was zp ZP_WORD:6) zp ZP_WORD:4 [ init::li#2 init::li#1 init::line#4 init::line#1 fill::addr#2 fill::addr#0 fill::addr#1 render_playfield::line#0 ]
Allocated (was zp ZP_WORD:18) zp ZP_WORD:6 [ render_playfield::$1 init::$7 fill::end#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label BORDERCOL = $d020
  .label COLS = $d800
  .const BLACK = 0
  .const GREEN = 5
  .const DARK_GREY = $b
  .label SCREEN = $400
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @8 [phi:@begin->@8]
b8_from_bbegin:
  jmp b8
//SEG4 @8
b8:
//SEG5 [2] call main 
//SEG6 [4] phi from @8 to main [phi:@8->main]
main_from_b8:
  jsr main
//SEG7 [3] phi from @8 to @end [phi:@8->@end]
bend_from_b8:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call init 
    jsr init
  //SEG11 [6] phi from main to main::@7 [phi:main->main::@7]
  b7_from_main:
    jmp b7
  //SEG12 main::@7
  b7:
  //SEG13 [7] call render_playfield 
  //SEG14 [13] phi from main::@7 to render_playfield [phi:main::@7->render_playfield]
  render_playfield_from_b7:
    jsr render_playfield
  //SEG15 [8] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  b8_from_b7:
    jmp b8
  //SEG16 main::@8
  b8:
  //SEG17 [9] call render_current_piece 
  //SEG18 [11] phi from main::@8 to render_current_piece [phi:main::@8->render_current_piece]
  render_current_piece_from_b8:
    jsr render_current_piece
    jmp b2
  //SEG19 main::@2
  b2:
  //SEG20 [10] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp b2
}
//SEG21 render_current_piece
render_current_piece: {
    jmp breturn
  //SEG22 render_current_piece::@return
  breturn:
  //SEG23 [12] return 
    rts
}
//SEG24 render_playfield
render_playfield: {
    .label _1 = 6
    .label line = 4
    .label i = 3
    .label l = 2
  //SEG25 [14] phi from render_playfield to render_playfield::@1 [phi:render_playfield->render_playfield::@1]
  b1_from_render_playfield:
  //SEG26 [14] phi (byte) render_playfield::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield->render_playfield::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG27 [14] phi (byte) render_playfield::l#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield->render_playfield::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta l
    jmp b1
  //SEG28 [14] phi from render_playfield::@3 to render_playfield::@1 [phi:render_playfield::@3->render_playfield::@1]
  b1_from_b3:
  //SEG29 [14] phi (byte) render_playfield::i#3 = (byte) render_playfield::i#1 [phi:render_playfield::@3->render_playfield::@1#0] -- register_copy 
  //SEG30 [14] phi (byte) render_playfield::l#2 = (byte) render_playfield::l#1 [phi:render_playfield::@3->render_playfield::@1#1] -- register_copy 
    jmp b1
  //SEG31 render_playfield::@1
  b1:
  //SEG32 [15] (byte~) render_playfield::$0 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_rol_1 
    lda l
    asl
  //SEG33 [16] (byte*) render_playfield::line#0 ← *((const byte*[20]) screen_lines#0 + (byte~) render_playfield::$0) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda screen_lines,y
    sta line
    lda screen_lines+1,y
    sta line+1
  //SEG34 [17] phi from render_playfield::@1 to render_playfield::@2 [phi:render_playfield::@1->render_playfield::@2]
  b2_from_b1:
  //SEG35 [17] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#3 [phi:render_playfield::@1->render_playfield::@2#0] -- register_copy 
  //SEG36 [17] phi (byte) render_playfield::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield::@1->render_playfield::@2#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b2
  //SEG37 [17] phi from render_playfield::@2 to render_playfield::@2 [phi:render_playfield::@2->render_playfield::@2]
  b2_from_b2:
  //SEG38 [17] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#1 [phi:render_playfield::@2->render_playfield::@2#0] -- register_copy 
  //SEG39 [17] phi (byte) render_playfield::c#2 = (byte) render_playfield::c#1 [phi:render_playfield::@2->render_playfield::@2#1] -- register_copy 
    jmp b2
  //SEG40 render_playfield::@2
  b2:
  //SEG41 [18] (byte*~) render_playfield::$1 ← (byte*) render_playfield::line#0 + (byte) render_playfield::c#2 -- pbuz1=pbuz2_plus_vbuxx 
    txa
    clc
    adc line
    sta _1
    lda #0
    adc line+1
    sta _1+1
  //SEG42 [19] *((byte*~) render_playfield::$1) ← *((const byte[20*10]) playfield#0 + (byte) render_playfield::i#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda playfield,y
    ldy #0
    sta (_1),y
  //SEG43 [20] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG44 [21] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG45 [22] if((byte) render_playfield::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 10) goto render_playfield::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$a
    bne b2_from_b2
    jmp b3
  //SEG46 render_playfield::@3
  b3:
  //SEG47 [23] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG48 [24] if((byte) render_playfield::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 20) goto render_playfield::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #$14
    bne b1_from_b3
    jmp breturn
  //SEG49 render_playfield::@return
  breturn:
  //SEG50 [25] return 
    rts
}
//SEG51 init
init: {
    .label _7 = 6
    .label li = 4
    .label line = 4
    .label l = 2
  //SEG52 [26] *((const byte[4*4]) current_piece#0) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta current_piece
  //SEG53 [27] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta current_piece+1
  //SEG54 [28] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta current_piece+2
  //SEG55 [29] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta current_piece+4
  //SEG56 [30] call fill 
  //SEG57 [49] phi from init to fill [phi:init->fill]
  fill_from_init:
  //SEG58 [49] phi (byte) fill::val#3 = (byte/word/signed word/dword/signed dword) 160 [phi:init->fill#0] -- vbuxx=vbuc1 
    ldx #$a0
  //SEG59 [49] phi (byte*) fill::addr#0 = (const byte*) SCREEN#0 [phi:init->fill#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta fill.addr
    lda #>SCREEN
    sta fill.addr+1
    jsr fill
  //SEG60 [31] phi from init to init::@7 [phi:init->init::@7]
  b7_from_init:
    jmp b7
  //SEG61 init::@7
  b7:
  //SEG62 [32] call fill 
  //SEG63 [49] phi from init::@7 to fill [phi:init::@7->fill]
  fill_from_b7:
  //SEG64 [49] phi (byte) fill::val#3 = (const byte) BLACK#0 [phi:init::@7->fill#0] -- vbuxx=vbuc1 
    ldx #BLACK
  //SEG65 [49] phi (byte*) fill::addr#0 = (const byte*) COLS#0 [phi:init::@7->fill#1] -- pbuz1=pbuc1 
    lda #<COLS
    sta fill.addr
    lda #>COLS
    sta fill.addr+1
    jsr fill
  //SEG66 [33] phi from init::@7 to init::@1 [phi:init::@7->init::@1]
  b1_from_b7:
  //SEG67 [33] phi (byte*) init::li#2 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 15 [phi:init::@7->init::@1#0] -- pbuz1=pbuc1 
    lda #<COLS+$28+$f
    sta li
    lda #>COLS+$28+$f
    sta li+1
  //SEG68 [33] phi (byte) init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init::@7->init::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG69 [33] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  b1_from_b1:
  //SEG70 [33] phi (byte*) init::li#2 = (byte*) init::li#1 [phi:init::@1->init::@1#0] -- register_copy 
  //SEG71 [33] phi (byte) init::i#2 = (byte) init::i#1 [phi:init::@1->init::@1#1] -- register_copy 
    jmp b1
  //SEG72 init::@1
  b1:
  //SEG73 [34] (byte~) init::$4 ← (byte) init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG74 [35] *((const byte*[20]) screen_lines#0 + (byte~) init::$4) ← (byte*) init::li#2 -- pptc1_derefidx_vbuaa=pbuz1 
    tay
    lda li
    sta screen_lines,y
    lda li+1
    sta screen_lines+1,y
  //SEG75 [36] (byte*) init::li#1 ← (byte*) init::li#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda li
    clc
    adc #$28
    sta li
    bcc !+
    inc li+1
  !:
  //SEG76 [37] (byte) init::i#1 ← ++ (byte) init::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG77 [38] if((byte) init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 20) goto init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$14
    bne b1_from_b1
  //SEG78 [39] phi from init::@1 to init::@2 [phi:init::@1->init::@2]
  b2_from_b1:
  //SEG79 [39] phi (byte) init::l#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init::@1->init::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG80 [39] phi (byte*) init::line#4 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 14 [phi:init::@1->init::@2#1] -- pbuz1=pbuc1 
    lda #<COLS+$e
    sta line
    lda #>COLS+$e
    sta line+1
    jmp b2
  //SEG81 [39] phi from init::@5 to init::@2 [phi:init::@5->init::@2]
  b2_from_b5:
  //SEG82 [39] phi (byte) init::l#4 = (byte) init::l#1 [phi:init::@5->init::@2#0] -- register_copy 
  //SEG83 [39] phi (byte*) init::line#4 = (byte*) init::line#1 [phi:init::@5->init::@2#1] -- register_copy 
    jmp b2
  //SEG84 init::@2
  b2:
  //SEG85 [40] phi from init::@2 to init::@3 [phi:init::@2->init::@3]
  b3_from_b2:
  //SEG86 [40] phi (byte) init::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init::@2->init::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG87 [40] phi from init::@3 to init::@3 [phi:init::@3->init::@3]
  b3_from_b3:
  //SEG88 [40] phi (byte) init::c#2 = (byte) init::c#1 [phi:init::@3->init::@3#0] -- register_copy 
    jmp b3
  //SEG89 init::@3
  b3:
  //SEG90 [41] (byte*~) init::$7 ← (byte*) init::line#4 + (byte) init::c#2 -- pbuz1=pbuz2_plus_vbuxx 
    txa
    clc
    adc line
    sta _7
    lda #0
    adc line+1
    sta _7+1
  //SEG91 [42] *((byte*~) init::$7) ← (const byte) DARK_GREY#0 -- _deref_pbuz1=vbuc1 
    lda #DARK_GREY
    ldy #0
    sta (_7),y
  //SEG92 [43] (byte) init::c#1 ← ++ (byte) init::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG93 [44] if((byte) init::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto init::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c
    bne b3_from_b3
    jmp b5
  //SEG94 init::@5
  b5:
  //SEG95 [45] (byte*) init::line#1 ← (byte*) init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+1
  !:
  //SEG96 [46] (byte) init::l#1 ← ++ (byte) init::l#4 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG97 [47] if((byte) init::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 22) goto init::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #$16
    bne b2_from_b5
    jmp breturn
  //SEG98 init::@return
  breturn:
  //SEG99 [48] return 
    rts
}
//SEG100 fill
fill: {
    .label end = 6
    .label addr = 4
  //SEG101 [50] (byte*) fill::end#0 ← (byte*) fill::addr#0 + (word/signed word/dword/signed dword) 1000 -- pbuz1=pbuz2_plus_vwuc1 
    lda addr
    clc
    adc #<$3e8
    sta end
    lda addr+1
    adc #>$3e8
    sta end+1
  //SEG102 [51] phi from fill fill::@1 to fill::@1 [phi:fill/fill::@1->fill::@1]
  b1_from_fill:
  b1_from_b1:
  //SEG103 [51] phi (byte*) fill::addr#2 = (byte*) fill::addr#0 [phi:fill/fill::@1->fill::@1#0] -- register_copy 
    jmp b1
  //SEG104 fill::@1
  b1:
  //SEG105 [52] *((byte*) fill::addr#2) ← (byte) fill::val#3 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (addr),y
  //SEG106 [53] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2 -- pbuz1=_inc_pbuz1 
    inc addr
    bne !+
    inc addr+1
  !:
  //SEG107 [54] if((byte*) fill::addr#1!=(byte*) fill::end#0) goto fill::@1 -- pbuz1_neq_pbuz2_then_la1 
    lda addr+1
    cmp end+1
    bne b1_from_b1
    lda addr
    cmp end
    bne b1_from_b1
    jmp breturn
  //SEG108 fill::@return
  breturn:
  //SEG109 [55] return 
    rts
}
  screen_lines: .fill 2*$14, 0
  playfield: .fill $14*$a, 0
  current_piece: .fill 4*4, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b8
Removing instruction jmp bend
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b7
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #GREEN
Removing instruction lda #GREEN
Removing instruction lda #GREEN
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Replacing label b1_from_b1 with b1
Replacing label b3_from_b3 with b3
Replacing label b2_from_b5 with b2
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b8_from_bbegin:
Removing instruction main_from_b8:
Removing instruction bend_from_b8:
Removing instruction b7_from_main:
Removing instruction render_playfield_from_b7:
Removing instruction b8_from_b7:
Removing instruction render_current_piece_from_b8:
Removing instruction b1_from_b3:
Removing instruction b2_from_b2:
Removing instruction b7_from_init:
Removing instruction fill_from_b7:
Removing instruction b1_from_b1:
Removing instruction b2_from_b5:
Removing instruction b3_from_b2:
Removing instruction b3_from_b3:
Removing instruction b1_from_fill:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b8:
Removing instruction bend:
Removing instruction b7:
Removing instruction b8:
Removing instruction breturn:
Removing instruction b1_from_render_playfield:
Removing instruction b2_from_b1:
Removing instruction b3:
Removing instruction breturn:
Removing instruction fill_from_init:
Removing instruction b7:
Removing instruction b1_from_b7:
Removing instruction b2_from_b1:
Removing instruction b5:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @8
(label) @begin
(label) @end
(byte) BLACK
(const byte) BLACK#0 BLACK = (byte/signed byte/word/signed word/dword/signed dword) 0
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) 53280
(byte*) COLS
(const byte*) COLS#0 COLS = ((byte*))(word/dword/signed dword) 55296
(byte) DARK_GREY
(const byte) DARK_GREY#0 DARK_GREY = (byte/signed byte/word/signed word/dword/signed dword) 11
(byte) GREEN
(const byte) GREEN#0 GREEN = (byte/signed byte/word/signed word/dword/signed dword) 5
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(byte[4*4]) current_piece
(const byte[4*4]) current_piece#0 current_piece = { fill( 4*4, 0) }
(void()) fill((byte*) fill::start , (word) fill::size , (byte) fill::val)
(label) fill::@1
(label) fill::@return
(byte*) fill::addr
(byte*) fill::addr#0 addr zp ZP_WORD:4 2.0
(byte*) fill::addr#1 addr zp ZP_WORD:4 16.5
(byte*) fill::addr#2 addr zp ZP_WORD:4 17.5
(byte*) fill::end
(byte*) fill::end#0 end zp ZP_WORD:6 2.6
(word) fill::size
(byte*) fill::start
(byte) fill::val
(byte) fill::val#3 reg byte x 1.8333333333333333
(void()) init()
(byte~) init::$4 reg byte a 22.0
(byte*~) init::$7 $7 zp ZP_WORD:6 202.0
(label) init::@1
(label) init::@2
(label) init::@3
(label) init::@5
(label) init::@7
(label) init::@return
(byte) init::c
(byte) init::c#1 reg byte x 151.5
(byte) init::c#2 reg byte x 101.0
(byte) init::i
(byte) init::i#1 reg byte x 16.5
(byte) init::i#2 reg byte x 8.25
(byte) init::l
(byte) init::l#1 l zp ZP_BYTE:2 16.5
(byte) init::l#4 l zp ZP_BYTE:2 3.142857142857143
(byte*) init::li
(byte*) init::li#1 li zp ZP_WORD:4 7.333333333333333
(byte*) init::li#2 li zp ZP_WORD:4 11.0
(byte*) init::line
(byte*) init::line#1 line zp ZP_WORD:4 7.333333333333333
(byte*) init::line#4 line zp ZP_WORD:4 20.499999999999996
(void()) main()
(label) main::@2
(label) main::@7
(label) main::@8
(byte[20*10]) playfield
(const byte[20*10]) playfield#0 playfield = { fill( 20*10, 0) }
(void()) render_current_piece()
(label) render_current_piece::@return
(void()) render_playfield()
(byte~) render_playfield::$0 reg byte a 22.0
(byte*~) render_playfield::$1 $1 zp ZP_WORD:6 202.0
(label) render_playfield::@1
(label) render_playfield::@2
(label) render_playfield::@3
(label) render_playfield::@return
(byte) render_playfield::c
(byte) render_playfield::c#1 reg byte x 151.5
(byte) render_playfield::c#2 reg byte x 75.75
(byte) render_playfield::i
(byte) render_playfield::i#1 i zp ZP_BYTE:3 42.599999999999994
(byte) render_playfield::i#2 i zp ZP_BYTE:3 104.66666666666666
(byte) render_playfield::i#3 i zp ZP_BYTE:3 7.333333333333333
(byte) render_playfield::l
(byte) render_playfield::l#1 l zp ZP_BYTE:2 16.5
(byte) render_playfield::l#2 l zp ZP_BYTE:2 3.666666666666667
(byte*) render_playfield::line
(byte*) render_playfield::line#0 line zp ZP_WORD:4 16.0
(byte*[20]) screen_lines
(const byte*[20]) screen_lines#0 screen_lines = { fill( 20, 0) }

zp ZP_BYTE:2 [ render_playfield::l#2 render_playfield::l#1 init::l#4 init::l#1 ]
reg byte x [ render_playfield::c#2 render_playfield::c#1 ]
zp ZP_BYTE:3 [ render_playfield::i#2 render_playfield::i#3 render_playfield::i#1 ]
reg byte x [ init::i#2 init::i#1 ]
zp ZP_WORD:4 [ init::li#2 init::li#1 init::line#4 init::line#1 fill::addr#2 fill::addr#0 fill::addr#1 render_playfield::line#0 ]
reg byte x [ init::c#2 init::c#1 ]
reg byte x [ fill::val#3 ]
reg byte a [ render_playfield::$0 ]
zp ZP_WORD:6 [ render_playfield::$1 init::$7 fill::end#0 ]
reg byte a [ init::$4 ]


FINAL ASSEMBLER
Score: 10410

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label BORDERCOL = $d020
  .label COLS = $d800
  .const BLACK = 0
  .const GREEN = 5
  .const DARK_GREY = $b
  .label SCREEN = $400
//SEG2 @begin
//SEG3 [1] phi from @begin to @8 [phi:@begin->@8]
//SEG4 @8
//SEG5 [2] call main 
//SEG6 [4] phi from @8 to main [phi:@8->main]
  jsr main
//SEG7 [3] phi from @8 to @end [phi:@8->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] call init 
    jsr init
  //SEG11 [6] phi from main to main::@7 [phi:main->main::@7]
  //SEG12 main::@7
  //SEG13 [7] call render_playfield 
  //SEG14 [13] phi from main::@7 to render_playfield [phi:main::@7->render_playfield]
    jsr render_playfield
  //SEG15 [8] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  //SEG16 main::@8
  //SEG17 [9] call render_current_piece 
  //SEG18 [11] phi from main::@8 to render_current_piece [phi:main::@8->render_current_piece]
    jsr render_current_piece
  //SEG19 main::@2
  b2:
  //SEG20 [10] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp b2
}
//SEG21 render_current_piece
render_current_piece: {
  //SEG22 render_current_piece::@return
  //SEG23 [12] return 
    rts
}
//SEG24 render_playfield
render_playfield: {
    .label _1 = 6
    .label line = 4
    .label i = 3
    .label l = 2
  //SEG25 [14] phi from render_playfield to render_playfield::@1 [phi:render_playfield->render_playfield::@1]
  //SEG26 [14] phi (byte) render_playfield::i#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield->render_playfield::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG27 [14] phi (byte) render_playfield::l#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield->render_playfield::@1#1] -- vbuz1=vbuc1 
    sta l
  //SEG28 [14] phi from render_playfield::@3 to render_playfield::@1 [phi:render_playfield::@3->render_playfield::@1]
  //SEG29 [14] phi (byte) render_playfield::i#3 = (byte) render_playfield::i#1 [phi:render_playfield::@3->render_playfield::@1#0] -- register_copy 
  //SEG30 [14] phi (byte) render_playfield::l#2 = (byte) render_playfield::l#1 [phi:render_playfield::@3->render_playfield::@1#1] -- register_copy 
  //SEG31 render_playfield::@1
  b1:
  //SEG32 [15] (byte~) render_playfield::$0 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuz1_rol_1 
    lda l
    asl
  //SEG33 [16] (byte*) render_playfield::line#0 ← *((const byte*[20]) screen_lines#0 + (byte~) render_playfield::$0) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda screen_lines,y
    sta line
    lda screen_lines+1,y
    sta line+1
  //SEG34 [17] phi from render_playfield::@1 to render_playfield::@2 [phi:render_playfield::@1->render_playfield::@2]
  //SEG35 [17] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#3 [phi:render_playfield::@1->render_playfield::@2#0] -- register_copy 
  //SEG36 [17] phi (byte) render_playfield::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:render_playfield::@1->render_playfield::@2#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG37 [17] phi from render_playfield::@2 to render_playfield::@2 [phi:render_playfield::@2->render_playfield::@2]
  //SEG38 [17] phi (byte) render_playfield::i#2 = (byte) render_playfield::i#1 [phi:render_playfield::@2->render_playfield::@2#0] -- register_copy 
  //SEG39 [17] phi (byte) render_playfield::c#2 = (byte) render_playfield::c#1 [phi:render_playfield::@2->render_playfield::@2#1] -- register_copy 
  //SEG40 render_playfield::@2
  b2:
  //SEG41 [18] (byte*~) render_playfield::$1 ← (byte*) render_playfield::line#0 + (byte) render_playfield::c#2 -- pbuz1=pbuz2_plus_vbuxx 
    txa
    clc
    adc line
    sta _1
    lda #0
    adc line+1
    sta _1+1
  //SEG42 [19] *((byte*~) render_playfield::$1) ← *((const byte[20*10]) playfield#0 + (byte) render_playfield::i#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda playfield,y
    ldy #0
    sta (_1),y
  //SEG43 [20] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG44 [21] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG45 [22] if((byte) render_playfield::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 10) goto render_playfield::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$a
    bne b2
  //SEG46 render_playfield::@3
  //SEG47 [23] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG48 [24] if((byte) render_playfield::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 20) goto render_playfield::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #$14
    bne b1
  //SEG49 render_playfield::@return
  //SEG50 [25] return 
    rts
}
//SEG51 init
init: {
    .label _7 = 6
    .label li = 4
    .label line = 4
    .label l = 2
  //SEG52 [26] *((const byte[4*4]) current_piece#0) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta current_piece
  //SEG53 [27] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    sta current_piece+1
  //SEG54 [28] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    sta current_piece+2
  //SEG55 [29] *((const byte[4*4]) current_piece#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (const byte) GREEN#0 -- _deref_pbuc1=vbuc2 
    sta current_piece+4
  //SEG56 [30] call fill 
  //SEG57 [49] phi from init to fill [phi:init->fill]
  //SEG58 [49] phi (byte) fill::val#3 = (byte/word/signed word/dword/signed dword) 160 [phi:init->fill#0] -- vbuxx=vbuc1 
    ldx #$a0
  //SEG59 [49] phi (byte*) fill::addr#0 = (const byte*) SCREEN#0 [phi:init->fill#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta fill.addr
    lda #>SCREEN
    sta fill.addr+1
    jsr fill
  //SEG60 [31] phi from init to init::@7 [phi:init->init::@7]
  //SEG61 init::@7
  //SEG62 [32] call fill 
  //SEG63 [49] phi from init::@7 to fill [phi:init::@7->fill]
  //SEG64 [49] phi (byte) fill::val#3 = (const byte) BLACK#0 [phi:init::@7->fill#0] -- vbuxx=vbuc1 
    ldx #BLACK
  //SEG65 [49] phi (byte*) fill::addr#0 = (const byte*) COLS#0 [phi:init::@7->fill#1] -- pbuz1=pbuc1 
    lda #<COLS
    sta fill.addr
    lda #>COLS
    sta fill.addr+1
    jsr fill
  //SEG66 [33] phi from init::@7 to init::@1 [phi:init::@7->init::@1]
  //SEG67 [33] phi (byte*) init::li#2 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 15 [phi:init::@7->init::@1#0] -- pbuz1=pbuc1 
    lda #<COLS+$28+$f
    sta li
    lda #>COLS+$28+$f
    sta li+1
  //SEG68 [33] phi (byte) init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init::@7->init::@1#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG69 [33] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  //SEG70 [33] phi (byte*) init::li#2 = (byte*) init::li#1 [phi:init::@1->init::@1#0] -- register_copy 
  //SEG71 [33] phi (byte) init::i#2 = (byte) init::i#1 [phi:init::@1->init::@1#1] -- register_copy 
  //SEG72 init::@1
  b1:
  //SEG73 [34] (byte~) init::$4 ← (byte) init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG74 [35] *((const byte*[20]) screen_lines#0 + (byte~) init::$4) ← (byte*) init::li#2 -- pptc1_derefidx_vbuaa=pbuz1 
    tay
    lda li
    sta screen_lines,y
    lda li+1
    sta screen_lines+1,y
  //SEG75 [36] (byte*) init::li#1 ← (byte*) init::li#2 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda li
    clc
    adc #$28
    sta li
    bcc !+
    inc li+1
  !:
  //SEG76 [37] (byte) init::i#1 ← ++ (byte) init::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG77 [38] if((byte) init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 20) goto init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$14
    bne b1
  //SEG78 [39] phi from init::@1 to init::@2 [phi:init::@1->init::@2]
  //SEG79 [39] phi (byte) init::l#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init::@1->init::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG80 [39] phi (byte*) init::line#4 = (const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 14 [phi:init::@1->init::@2#1] -- pbuz1=pbuc1 
    lda #<COLS+$e
    sta line
    lda #>COLS+$e
    sta line+1
  //SEG81 [39] phi from init::@5 to init::@2 [phi:init::@5->init::@2]
  //SEG82 [39] phi (byte) init::l#4 = (byte) init::l#1 [phi:init::@5->init::@2#0] -- register_copy 
  //SEG83 [39] phi (byte*) init::line#4 = (byte*) init::line#1 [phi:init::@5->init::@2#1] -- register_copy 
  //SEG84 init::@2
  b2:
  //SEG85 [40] phi from init::@2 to init::@3 [phi:init::@2->init::@3]
  //SEG86 [40] phi (byte) init::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init::@2->init::@3#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG87 [40] phi from init::@3 to init::@3 [phi:init::@3->init::@3]
  //SEG88 [40] phi (byte) init::c#2 = (byte) init::c#1 [phi:init::@3->init::@3#0] -- register_copy 
  //SEG89 init::@3
  b3:
  //SEG90 [41] (byte*~) init::$7 ← (byte*) init::line#4 + (byte) init::c#2 -- pbuz1=pbuz2_plus_vbuxx 
    txa
    clc
    adc line
    sta _7
    lda #0
    adc line+1
    sta _7+1
  //SEG91 [42] *((byte*~) init::$7) ← (const byte) DARK_GREY#0 -- _deref_pbuz1=vbuc1 
    lda #DARK_GREY
    ldy #0
    sta (_7),y
  //SEG92 [43] (byte) init::c#1 ← ++ (byte) init::c#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG93 [44] if((byte) init::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto init::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c
    bne b3
  //SEG94 init::@5
  //SEG95 [45] (byte*) init::line#1 ← (byte*) init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40 -- pbuz1=pbuz1_plus_vbuc1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+1
  !:
  //SEG96 [46] (byte) init::l#1 ← ++ (byte) init::l#4 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG97 [47] if((byte) init::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 22) goto init::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda l
    cmp #$16
    bne b2
  //SEG98 init::@return
  //SEG99 [48] return 
    rts
}
//SEG100 fill
fill: {
    .label end = 6
    .label addr = 4
  //SEG101 [50] (byte*) fill::end#0 ← (byte*) fill::addr#0 + (word/signed word/dword/signed dword) 1000 -- pbuz1=pbuz2_plus_vwuc1 
    lda addr
    clc
    adc #<$3e8
    sta end
    lda addr+1
    adc #>$3e8
    sta end+1
  //SEG102 [51] phi from fill fill::@1 to fill::@1 [phi:fill/fill::@1->fill::@1]
  //SEG103 [51] phi (byte*) fill::addr#2 = (byte*) fill::addr#0 [phi:fill/fill::@1->fill::@1#0] -- register_copy 
  //SEG104 fill::@1
  b1:
  //SEG105 [52] *((byte*) fill::addr#2) ← (byte) fill::val#3 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (addr),y
  //SEG106 [53] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2 -- pbuz1=_inc_pbuz1 
    inc addr
    bne !+
    inc addr+1
  !:
  //SEG107 [54] if((byte*) fill::addr#1!=(byte*) fill::end#0) goto fill::@1 -- pbuz1_neq_pbuz2_then_la1 
    lda addr+1
    cmp end+1
    bne b1
    lda addr
    cmp end
    bne b1
  //SEG108 fill::@return
  //SEG109 [55] return 
    rts
}
  screen_lines: .fill 2*$14, 0
  playfield: .fill $14*$a, 0
  current_piece: .fill 4*4, 0

