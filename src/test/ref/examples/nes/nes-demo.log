Resolved forward reference SPRITES to (const struct ObjectAttribute*) SPRITES
Resolved forward reference SPRITES to (const struct ObjectAttribute*) SPRITES
Resolved forward reference PALETTE to (const byte*) PALETTE
Resolved forward reference PALETTE to (const byte*) PALETTE
Inlined call call disableVideoOutput 
Inlined call call disableAudioOutput 
Inlined call call clearVBlankFlag 
Inlined call call waitForVBlank 
Inlined call call waitForVBlank 
Inlined call call enableVideoOutput 
Inlined call call transferSpriteBufferToPpu 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  asm { cld ldx#$ff txs  }
  to:main::disableVideoOutput1
main::disableVideoOutput1: scope:[main]  from main
  (byte*~) main::disableVideoOutput1_$2 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::disableVideoOutput1_$0 ← (byte*~) main::disableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
  *((byte*~) main::disableVideoOutput1_$0) ← (number) 0
  (byte*~) main::disableVideoOutput1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::disableVideoOutput1_$1 ← (byte*~) main::disableVideoOutput1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK
  *((byte*~) main::disableVideoOutput1_$1) ← (number) 0
  to:main::disableAudioOutput1
main::disableAudioOutput1: scope:[main]  from main::disableVideoOutput1
  *((const nomodify byte*) FR_COUNTER) ← (number) $40
  (byte*~) main::disableAudioOutput1_$1 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) main::disableAudioOutput1_$0 ← (byte*~) main::disableAudioOutput1_$1 + (const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
  *((byte*~) main::disableAudioOutput1_$0) ← (number) $40
  to:main::clearVBlankFlag1
main::clearVBlankFlag1: scope:[main]  from main::disableAudioOutput1
  asm { ldaPPU_PPUSTATUS  }
  to:main::waitForVBlank1
main::waitForVBlank1: scope:[main]  from main::clearVBlankFlag1
  to:main::waitForVBlank1_@1
main::waitForVBlank1_@1: scope:[main]  from main::waitForVBlank1 main::waitForVBlank1_@1
  (byte*~) main::waitForVBlank1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::waitForVBlank1_$2 ← (byte*~) main::waitForVBlank1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
  (number~) main::waitForVBlank1_$0 ← *((byte*~) main::waitForVBlank1_$2) & (number) $80
  (bool~) main::waitForVBlank1_$4 ← (number) 0 != (number~) main::waitForVBlank1_$0
  (bool~) main::waitForVBlank1_$1 ← ! (bool~) main::waitForVBlank1_$4
  if((bool~) main::waitForVBlank1_$1) goto main::waitForVBlank1_@1
  to:main::@3
main::@3: scope:[main]  from main::waitForVBlank1_@1
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@3
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#1 main::@3/(byte) main::i#0 )
  *((const nomodify byte*) MEMORY+(number) 0 + (byte) main::i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $100 + (byte) main::i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $200 + (byte) main::i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $300 + (byte) main::i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $400 + (byte) main::i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $500 + (byte) main::i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $600 + (byte) main::i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $700 + (byte) main::i#2) ← (number) 0
  (byte) main::i#1 ← ++ (byte) main::i#2
  (bool~) main::$8 ← (number) 0 != (byte) main::i#1
  if((bool~) main::$8) goto main::@1
  to:main::waitForVBlank2
main::waitForVBlank2: scope:[main]  from main::@1
  to:main::waitForVBlank2_@1
main::waitForVBlank2_@1: scope:[main]  from main::waitForVBlank2 main::waitForVBlank2_@1
  (byte*~) main::waitForVBlank2_$3 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::waitForVBlank2_$2 ← (byte*~) main::waitForVBlank2_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
  (number~) main::waitForVBlank2_$0 ← *((byte*~) main::waitForVBlank2_$2) & (number) $80
  (bool~) main::waitForVBlank2_$4 ← (number) 0 != (number~) main::waitForVBlank2_$0
  (bool~) main::waitForVBlank2_$1 ← ! (bool~) main::waitForVBlank2_$4
  if((bool~) main::waitForVBlank2_$1) goto main::waitForVBlank2_@1
  to:main::@4
main::@4: scope:[main]  from main::waitForVBlank2_@1
  call initPalette 
  to:main::@5
main::@5: scope:[main]  from main::@4
  call initSpriteBuffer 
  to:main::@6
main::@6: scope:[main]  from main::@5
  to:main::enableVideoOutput1
main::enableVideoOutput1: scope:[main]  from main::@6
  (byte*~) main::enableVideoOutput1_$2 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::enableVideoOutput1_$0 ← (byte*~) main::enableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
  *((byte*~) main::enableVideoOutput1_$0) ← (number) $80
  (byte*~) main::enableVideoOutput1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::enableVideoOutput1_$1 ← (byte*~) main::enableVideoOutput1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK
  *((byte*~) main::enableVideoOutput1_$1) ← (number) $10
  to:main::@2
main::@2: scope:[main]  from main::@2 main::enableVideoOutput1
  (bool~) main::$9 ← (number) 0 != (number) 1
  if((bool~) main::$9) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

interrupt(HARDWARE_STACK)(void()) vblank()
vblank: scope:[vblank]  from
  to:vblank::transferSpriteBufferToPpu1
vblank::transferSpriteBufferToPpu1: scope:[vblank]  from vblank
  (byte*~) vblank::transferSpriteBufferToPpu1_$2 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) vblank::transferSpriteBufferToPpu1_$0 ← (byte*~) vblank::transferSpriteBufferToPpu1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR
  *((byte*~) vblank::transferSpriteBufferToPpu1_$0) ← (number) 0
  (byte*~) vblank::transferSpriteBufferToPpu1_$3 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) vblank::transferSpriteBufferToPpu1_$1 ← (byte*~) vblank::transferSpriteBufferToPpu1_$3 + (const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA
  *((byte*~) vblank::transferSpriteBufferToPpu1_$1) ← >(const nomodify struct ObjectAttribute*) OAM_BUFFER
  to:vblank::@4
vblank::@4: scope:[vblank]  from vblank::transferSpriteBufferToPpu1
  (byte*~) vblank::$11 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) vblank::$7 ← (byte*~) vblank::$11 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
  *((byte*~) vblank::$7) ← (number) 1
  (byte*~) vblank::$12 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) vblank::$8 ← (byte*~) vblank::$12 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
  *((byte*~) vblank::$8) ← (number) 0
  (byte*~) vblank::$13 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) vblank::$9 ← (byte*~) vblank::$13 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
  (number~) vblank::$1 ← *((byte*~) vblank::$9) & (number) 1
  (bool~) vblank::$15 ← (number) 0 != (number~) vblank::$1
  (bool~) vblank::$2 ← ! (bool~) vblank::$15
  if((bool~) vblank::$2) goto vblank::@1
  to:vblank::@2
vblank::@1: scope:[vblank]  from vblank::@4 vblank::@5
  (byte*~) vblank::$14 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) vblank::$10 ← (byte*~) vblank::$14 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
  (number~) vblank::$3 ← *((byte*~) vblank::$10) & (number) 1
  (bool~) vblank::$16 ← (number) 0 != (number~) vblank::$3
  (bool~) vblank::$4 ← ! (bool~) vblank::$16
  if((bool~) vblank::$4) goto vblank::@return
  to:vblank::@3
vblank::@2: scope:[vblank]  from vblank::@4
  call moveLuigiRight 
  to:vblank::@5
vblank::@5: scope:[vblank]  from vblank::@2
  to:vblank::@1
vblank::@3: scope:[vblank]  from vblank::@1
  call moveLuigiLeft 
  to:vblank::@6
vblank::@6: scope:[vblank]  from vblank::@3
  to:vblank::@return
vblank::@return: scope:[vblank]  from vblank::@1 vblank::@6
  return 
  to:@return

(void()) moveLuigiRight()
moveLuigiRight: scope:[moveLuigiRight]  from vblank::@2
  (number~) moveLuigiRight::$5 ← (number) 0 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
  *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (number~) moveLuigiRight::$5) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (number~) moveLuigiRight::$5)
  (number~) moveLuigiRight::$7 ← (number) 1 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
  *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (number~) moveLuigiRight::$7) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (number~) moveLuigiRight::$7)
  (number~) moveLuigiRight::$9 ← (number) 2 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
  *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (number~) moveLuigiRight::$9) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (number~) moveLuigiRight::$9)
  (number~) moveLuigiRight::$11 ← (number) 3 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
  *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (number~) moveLuigiRight::$11) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (number~) moveLuigiRight::$11)
  to:moveLuigiRight::@return
moveLuigiRight::@return: scope:[moveLuigiRight]  from moveLuigiRight
  return 
  to:@return

(void()) moveLuigiLeft()
moveLuigiLeft: scope:[moveLuigiLeft]  from vblank::@3
  (number~) moveLuigiLeft::$5 ← (number) 0 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
  *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (number~) moveLuigiLeft::$5) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (number~) moveLuigiLeft::$5)
  (number~) moveLuigiLeft::$7 ← (number) 1 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
  *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (number~) moveLuigiLeft::$7) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (number~) moveLuigiLeft::$7)
  (number~) moveLuigiLeft::$9 ← (number) 2 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
  *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (number~) moveLuigiLeft::$9) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (number~) moveLuigiLeft::$9)
  (number~) moveLuigiLeft::$11 ← (number) 3 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
  *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (number~) moveLuigiLeft::$11) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (number~) moveLuigiLeft::$11)
  to:moveLuigiLeft::@return
moveLuigiLeft::@return: scope:[moveLuigiLeft]  from moveLuigiLeft
  return 
  to:@return

(void()) initSpriteBuffer()
initSpriteBuffer: scope:[initSpriteBuffer]  from main::@5
  (byte) initSpriteBuffer::i#0 ← (byte) 0
  to:initSpriteBuffer::@1
initSpriteBuffer::@1: scope:[initSpriteBuffer]  from initSpriteBuffer initSpriteBuffer::@1
  (byte) initSpriteBuffer::i#2 ← phi( initSpriteBuffer/(byte) initSpriteBuffer::i#0 initSpriteBuffer::@1/(byte) initSpriteBuffer::i#1 )
  (byte*~) initSpriteBuffer::$2 ← (byte*)(const struct ObjectAttribute*) SPRITES
  *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER + (byte) initSpriteBuffer::i#2) ← *((byte*~) initSpriteBuffer::$2 + (byte) initSpriteBuffer::i#2)
  (byte) initSpriteBuffer::i#1 ← ++ (byte) initSpriteBuffer::i#2
  (byte~) initSpriteBuffer::$0 ← sizeof  (const struct ObjectAttribute*) SPRITES
  (bool~) initSpriteBuffer::$1 ← (byte) initSpriteBuffer::i#1 != (byte~) initSpriteBuffer::$0
  if((bool~) initSpriteBuffer::$1) goto initSpriteBuffer::@1
  to:initSpriteBuffer::@return
initSpriteBuffer::@return: scope:[initSpriteBuffer]  from initSpriteBuffer::@1
  return 
  to:@return

(void()) initPalette()
initPalette: scope:[initPalette]  from main::@4
  asm { ldaPPU_PPUSTATUS  }
  (byte*~) initPalette::$5 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) initPalette::$2 ← (byte*~) initPalette::$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) initPalette::$2) ← >(const nomodify byte*) PPU_PALETTE
  (byte*~) initPalette::$6 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) initPalette::$3 ← (byte*~) initPalette::$6 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) initPalette::$3) ← <(const nomodify byte*) PPU_PALETTE
  (byte) initPalette::i#0 ← (byte) 0
  to:initPalette::@1
initPalette::@1: scope:[initPalette]  from initPalette initPalette::@2
  (byte) initPalette::i#2 ← phi( initPalette/(byte) initPalette::i#0 initPalette::@2/(byte) initPalette::i#1 )
  (byte~) initPalette::$0 ← sizeof  (const byte*) PALETTE
  (bool~) initPalette::$1 ← (byte) initPalette::i#2 < (byte~) initPalette::$0
  if((bool~) initPalette::$1) goto initPalette::@2
  to:initPalette::@return
initPalette::@2: scope:[initPalette]  from initPalette::@1
  (byte) initPalette::i#3 ← phi( initPalette::@1/(byte) initPalette::i#2 )
  (byte*~) initPalette::$7 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) initPalette::$4 ← (byte*~) initPalette::$7 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *((byte*~) initPalette::$4) ← *((const byte*) PALETTE + (byte) initPalette::i#3)
  (byte) initPalette::i#1 ← ++ (byte) initPalette::i#3
  to:initPalette::@1
initPalette::@return: scope:[initPalette]  from initPalette::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const struct RICOH_2A03*) APU = (struct RICOH_2A03*)(number) $4000
(const nomodify byte*) FR_COUNTER = (byte*)(number) $4017
(const nomodify byte*) MEMORY = (byte*)(number) 0
(const nomodify struct ObjectAttribute*) OAM_BUFFER = (struct ObjectAttribute*)(number) $200
(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X = (byte) 3
(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = (byte) $10
(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1 = (byte) $16
(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA = (byte) $14
(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR = (byte) 3
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR = (byte) 6
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL = (byte) 0
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA = (byte) 7
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK = (byte) 1
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = (byte) 2
(byte) ObjectAttribute::attributes
(byte) ObjectAttribute::tile
(byte) ObjectAttribute::x
(byte) ObjectAttribute::y
(const byte*) PALETTE[(number) $20]  = { (byte) $f, (byte) $31, (byte) $32, (byte) $33, (byte) $f, (byte) $35, (byte) $36, (byte) $37, (byte) $f, (byte) $39, (byte) $3a, (byte) $3b, (byte) $f, (byte) $3d, (byte) $3e, (byte) $f, (byte) $f, (byte) $1c, (byte) $15, (byte) $14, (byte) $f, (byte) 2, (byte) $38, (byte) $3c, (byte) $f, (byte) $30, (byte) $37, (byte) $1a, (byte) $f, (byte) $f, (byte) $f, (byte) $f }
(const struct RICOH_2C02*) PPU = (struct RICOH_2C02*)(number) $2000
(const nomodify byte*) PPU_PALETTE = (byte*)(number) $3f00
(const to_volatile byte*) PPU_PPUSTATUS = (byte*)(number) $2002
(byte) RICOH_2A03::DMC_FREQ
(byte) RICOH_2A03::DMC_LEN
(byte) RICOH_2A03::DMC_RAW
(byte) RICOH_2A03::DMC_START
(byte) RICOH_2A03::JOY1
(byte) RICOH_2A03::JOY2
(byte) RICOH_2A03::NOISE_HI
(byte) RICOH_2A03::NOISE_LO
(byte) RICOH_2A03::NOISE_VOL
(byte) RICOH_2A03::OAMDMA
(byte) RICOH_2A03::SND_CHN
(byte) RICOH_2A03::SQ1_HI
(byte) RICOH_2A03::SQ1_LO
(byte) RICOH_2A03::SQ1_SWEEP
(byte) RICOH_2A03::SQ1_VOL
(byte) RICOH_2A03::SQ2_HI
(byte) RICOH_2A03::SQ2_LO
(byte) RICOH_2A03::SQ2_SWEEP
(byte) RICOH_2A03::SQ2_VOL
(byte) RICOH_2A03::TRI_HI
(byte) RICOH_2A03::TRI_LINEAR
(byte) RICOH_2A03::TRI_LO
(byte) RICOH_2A03::UNUSED1
(byte) RICOH_2A03::UNUSED2
(byte) RICOH_2C02::OAMADDR
(byte) RICOH_2C02::OAMDATA
(byte) RICOH_2C02::PPUADDR
(byte) RICOH_2C02::PPUCTRL
(byte) RICOH_2C02::PPUDATA
(byte) RICOH_2C02::PPUMASK
(byte) RICOH_2C02::PPUSCROLL
(volatile byte) RICOH_2C02::PPUSTATUS loadstore
(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE = (byte) 4
(const struct ObjectAttribute*) SPRITES[]  = { { y: (byte) $80, tile: (byte) $36, attributes: (byte) 2, x: (byte) $80 }, { y: (byte) $80, tile: (byte) $37, attributes: (byte) 2, x: (byte) $88 }, { y: (byte) $88, tile: (byte) $38, attributes: (byte) 2, x: (byte) $80 }, { y: (byte) $88, tile: (byte) $39, attributes: (byte) 2, x: (byte) $88 } }
(const byte*) TILES[]  = kickasm {{ .import binary "smb1_chr.bin"
 }}
(const to_nomodify void()**) VECTORS[]  = { &interrupt(HARDWARE_STACK)(void()) vblank(), &(void()) main(), (void()*)(number) 0 }
(void()) initPalette()
(byte~) initPalette::$0
(bool~) initPalette::$1
(byte*~) initPalette::$2
(byte*~) initPalette::$3
(byte*~) initPalette::$4
(byte*~) initPalette::$5
(byte*~) initPalette::$6
(byte*~) initPalette::$7
(label) initPalette::@1
(label) initPalette::@2
(label) initPalette::@return
(byte) initPalette::i
(byte) initPalette::i#0
(byte) initPalette::i#1
(byte) initPalette::i#2
(byte) initPalette::i#3
(void()) initSpriteBuffer()
(byte~) initSpriteBuffer::$0
(bool~) initSpriteBuffer::$1
(byte*~) initSpriteBuffer::$2
(label) initSpriteBuffer::@1
(label) initSpriteBuffer::@return
(byte) initSpriteBuffer::i
(byte) initSpriteBuffer::i#0
(byte) initSpriteBuffer::i#1
(byte) initSpriteBuffer::i#2
(void()) main()
(bool~) main::$8
(bool~) main::$9
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(label) main::clearVBlankFlag1
(label) main::disableAudioOutput1
(byte*~) main::disableAudioOutput1_$0
(byte*~) main::disableAudioOutput1_$1
(label) main::disableVideoOutput1
(byte*~) main::disableVideoOutput1_$0
(byte*~) main::disableVideoOutput1_$1
(byte*~) main::disableVideoOutput1_$2
(byte*~) main::disableVideoOutput1_$3
(label) main::enableVideoOutput1
(byte*~) main::enableVideoOutput1_$0
(byte*~) main::enableVideoOutput1_$1
(byte*~) main::enableVideoOutput1_$2
(byte*~) main::enableVideoOutput1_$3
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(label) main::waitForVBlank1
(number~) main::waitForVBlank1_$0
(bool~) main::waitForVBlank1_$1
(byte*~) main::waitForVBlank1_$2
(byte*~) main::waitForVBlank1_$3
(bool~) main::waitForVBlank1_$4
(label) main::waitForVBlank1_@1
(label) main::waitForVBlank2
(number~) main::waitForVBlank2_$0
(bool~) main::waitForVBlank2_$1
(byte*~) main::waitForVBlank2_$2
(byte*~) main::waitForVBlank2_$3
(bool~) main::waitForVBlank2_$4
(label) main::waitForVBlank2_@1
(void()) moveLuigiLeft()
(number~) moveLuigiLeft::$11
(number~) moveLuigiLeft::$5
(number~) moveLuigiLeft::$7
(number~) moveLuigiLeft::$9
(label) moveLuigiLeft::@return
(void()) moveLuigiRight()
(number~) moveLuigiRight::$11
(number~) moveLuigiRight::$5
(number~) moveLuigiRight::$7
(number~) moveLuigiRight::$9
(label) moveLuigiRight::@return
interrupt(HARDWARE_STACK)(void()) vblank()
(number~) vblank::$1
(byte*~) vblank::$10
(byte*~) vblank::$11
(byte*~) vblank::$12
(byte*~) vblank::$13
(byte*~) vblank::$14
(bool~) vblank::$15
(bool~) vblank::$16
(bool~) vblank::$2
(number~) vblank::$3
(bool~) vblank::$4
(byte*~) vblank::$7
(byte*~) vblank::$8
(byte*~) vblank::$9
(label) vblank::@1
(label) vblank::@2
(label) vblank::@3
(label) vblank::@4
(label) vblank::@5
(label) vblank::@6
(label) vblank::@return
(label) vblank::transferSpriteBufferToPpu1
(byte*~) vblank::transferSpriteBufferToPpu1_$0
(byte*~) vblank::transferSpriteBufferToPpu1_$1
(byte*~) vblank::transferSpriteBufferToPpu1_$2
(byte*~) vblank::transferSpriteBufferToPpu1_$3

Adding number conversion cast (unumber) 0 in *((byte*~) main::disableVideoOutput1_$0) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*~) main::disableVideoOutput1_$1) ← (number) 0
Adding number conversion cast (unumber) $40 in *((const nomodify byte*) FR_COUNTER) ← (number) $40
Adding number conversion cast (unumber) $40 in *((byte*~) main::disableAudioOutput1_$0) ← (number) $40
Adding number conversion cast (unumber) $80 in (number~) main::waitForVBlank1_$0 ← *((byte*~) main::waitForVBlank1_$2) & (number) $80
Adding number conversion cast (unumber) main::waitForVBlank1_$0 in (number~) main::waitForVBlank1_$0 ← *((byte*~) main::waitForVBlank1_$2) & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) main::waitForVBlank1_$4 ← (number) 0 != (unumber~) main::waitForVBlank1_$0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) 0 + (byte) main::i#2) ← (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) 0 + (byte) main::i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $100 + (byte) main::i#2) ← (number) 0
Adding number conversion cast (unumber) $100 in *((const nomodify byte*) MEMORY+(number) $100 + (byte) main::i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $200 + (byte) main::i#2) ← (number) 0
Adding number conversion cast (unumber) $200 in *((const nomodify byte*) MEMORY+(number) $200 + (byte) main::i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $300 + (byte) main::i#2) ← (number) 0
Adding number conversion cast (unumber) $300 in *((const nomodify byte*) MEMORY+(number) $300 + (byte) main::i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $400 + (byte) main::i#2) ← (number) 0
Adding number conversion cast (unumber) $400 in *((const nomodify byte*) MEMORY+(number) $400 + (byte) main::i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $500 + (byte) main::i#2) ← (number) 0
Adding number conversion cast (unumber) $500 in *((const nomodify byte*) MEMORY+(number) $500 + (byte) main::i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $600 + (byte) main::i#2) ← (number) 0
Adding number conversion cast (unumber) $600 in *((const nomodify byte*) MEMORY+(number) $600 + (byte) main::i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $700 + (byte) main::i#2) ← (number) 0
Adding number conversion cast (unumber) $700 in *((const nomodify byte*) MEMORY+(number) $700 + (byte) main::i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in (bool~) main::$8 ← (number) 0 != (byte) main::i#1
Adding number conversion cast (unumber) $80 in (number~) main::waitForVBlank2_$0 ← *((byte*~) main::waitForVBlank2_$2) & (number) $80
Adding number conversion cast (unumber) main::waitForVBlank2_$0 in (number~) main::waitForVBlank2_$0 ← *((byte*~) main::waitForVBlank2_$2) & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) main::waitForVBlank2_$4 ← (number) 0 != (unumber~) main::waitForVBlank2_$0
Adding number conversion cast (unumber) $80 in *((byte*~) main::enableVideoOutput1_$0) ← (number) $80
Adding number conversion cast (unumber) $10 in *((byte*~) main::enableVideoOutput1_$1) ← (number) $10
Adding number conversion cast (unumber) 0 in *((byte*~) vblank::transferSpriteBufferToPpu1_$0) ← (number) 0
Adding number conversion cast (unumber) 1 in *((byte*~) vblank::$7) ← (number) 1
Adding number conversion cast (unumber) 0 in *((byte*~) vblank::$8) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) vblank::$1 ← *((byte*~) vblank::$9) & (number) 1
Adding number conversion cast (unumber) vblank::$1 in (number~) vblank::$1 ← *((byte*~) vblank::$9) & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) vblank::$15 ← (number) 0 != (unumber~) vblank::$1
Adding number conversion cast (unumber) 1 in (number~) vblank::$3 ← *((byte*~) vblank::$10) & (number) 1
Adding number conversion cast (unumber) vblank::$3 in (number~) vblank::$3 ← *((byte*~) vblank::$10) & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) vblank::$16 ← (number) 0 != (unumber~) vblank::$3
Adding number conversion cast (unumber) 0 in (number~) moveLuigiRight::$5 ← (number) 0 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Adding number conversion cast (unumber) moveLuigiRight::$5 in (number~) moveLuigiRight::$5 ← (unumber)(number) 0 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Adding number conversion cast (unumber) 1 in (number~) moveLuigiRight::$7 ← (number) 1 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Adding number conversion cast (unumber) moveLuigiRight::$7 in (number~) moveLuigiRight::$7 ← (unumber)(number) 1 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Adding number conversion cast (unumber) 2 in (number~) moveLuigiRight::$9 ← (number) 2 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Adding number conversion cast (unumber) moveLuigiRight::$9 in (number~) moveLuigiRight::$9 ← (unumber)(number) 2 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Adding number conversion cast (unumber) 3 in (number~) moveLuigiRight::$11 ← (number) 3 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Adding number conversion cast (unumber) moveLuigiRight::$11 in (number~) moveLuigiRight::$11 ← (unumber)(number) 3 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Adding number conversion cast (unumber) 0 in (number~) moveLuigiLeft::$5 ← (number) 0 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Adding number conversion cast (unumber) moveLuigiLeft::$5 in (number~) moveLuigiLeft::$5 ← (unumber)(number) 0 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Adding number conversion cast (unumber) 1 in (number~) moveLuigiLeft::$7 ← (number) 1 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Adding number conversion cast (unumber) moveLuigiLeft::$7 in (number~) moveLuigiLeft::$7 ← (unumber)(number) 1 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Adding number conversion cast (unumber) 2 in (number~) moveLuigiLeft::$9 ← (number) 2 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Adding number conversion cast (unumber) moveLuigiLeft::$9 in (number~) moveLuigiLeft::$9 ← (unumber)(number) 2 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Adding number conversion cast (unumber) 3 in (number~) moveLuigiLeft::$11 ← (number) 3 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Adding number conversion cast (unumber) moveLuigiLeft::$11 in (number~) moveLuigiLeft::$11 ← (unumber)(number) 3 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((byte*~) main::disableVideoOutput1_$0) ← (unumber)(number) 0
Inlining cast *((byte*~) main::disableVideoOutput1_$1) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) FR_COUNTER) ← (unumber)(number) $40
Inlining cast *((byte*~) main::disableAudioOutput1_$0) ← (unumber)(number) $40
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) 0 + (byte) main::i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $100 + (byte) main::i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $200 + (byte) main::i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $300 + (byte) main::i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $400 + (byte) main::i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $500 + (byte) main::i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $600 + (byte) main::i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $700 + (byte) main::i#2) ← (unumber)(number) 0
Inlining cast *((byte*~) main::enableVideoOutput1_$0) ← (unumber)(number) $80
Inlining cast *((byte*~) main::enableVideoOutput1_$1) ← (unumber)(number) $10
Inlining cast *((byte*~) vblank::transferSpriteBufferToPpu1_$0) ← (unumber)(number) 0
Inlining cast *((byte*~) vblank::$7) ← (unumber)(number) 1
Inlining cast *((byte*~) vblank::$8) ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 16128
Simplifying constant pointer cast (byte*) 16407
Simplifying constant pointer cast (byte*) 0
Simplifying constant pointer cast (struct ObjectAttribute*) 512
Simplifying constant pointer cast (void()*) 0
Simplifying constant pointer cast (byte*) 8194
Simplifying constant pointer cast (struct RICOH_2C02*) 8192
Simplifying constant pointer cast (struct RICOH_2A03*) 16384
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast $40
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $100
Simplifying constant integer cast 0
Simplifying constant integer cast $200
Simplifying constant integer cast 0
Simplifying constant integer cast $300
Simplifying constant integer cast 0
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast $500
Simplifying constant integer cast 0
Simplifying constant integer cast $600
Simplifying constant integer cast 0
Simplifying constant integer cast $700
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $200
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $300
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $400
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $500
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $600
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $700
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::waitForVBlank1_$0 ← *((byte*~) main::waitForVBlank1_$2) & (byte) $80
Inferred type updated to byte in (unumber~) main::waitForVBlank2_$0 ← *((byte*~) main::waitForVBlank2_$2) & (byte) $80
Inferred type updated to byte in (unumber~) vblank::$1 ← *((byte*~) vblank::$9) & (byte) 1
Inferred type updated to byte in (unumber~) vblank::$3 ← *((byte*~) vblank::$10) & (byte) 1
Inferred type updated to byte in (unumber~) moveLuigiRight::$5 ← (byte) 0 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Inferred type updated to byte in (unumber~) moveLuigiRight::$7 ← (byte) 1 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Inferred type updated to byte in (unumber~) moveLuigiRight::$9 ← (byte) 2 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Inferred type updated to byte in (unumber~) moveLuigiRight::$11 ← (byte) 3 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Inferred type updated to byte in (unumber~) moveLuigiLeft::$5 ← (byte) 0 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Inferred type updated to byte in (unumber~) moveLuigiLeft::$7 ← (byte) 1 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Inferred type updated to byte in (unumber~) moveLuigiLeft::$9 ← (byte) 2 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Inferred type updated to byte in (unumber~) moveLuigiLeft::$11 ← (byte) 3 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Inversing boolean not [16] (bool~) main::waitForVBlank1_$1 ← (byte) 0 == (byte~) main::waitForVBlank1_$0 from [15] (bool~) main::waitForVBlank1_$4 ← (byte) 0 != (byte~) main::waitForVBlank1_$0
Inversing boolean not [35] (bool~) main::waitForVBlank2_$1 ← (byte) 0 == (byte~) main::waitForVBlank2_$0 from [34] (bool~) main::waitForVBlank2_$4 ← (byte) 0 != (byte~) main::waitForVBlank2_$0
Inversing boolean not [64] (bool~) vblank::$2 ← (byte) 0 == (byte~) vblank::$1 from [63] (bool~) vblank::$15 ← (byte) 0 != (byte~) vblank::$1
Inversing boolean not [70] (bool~) vblank::$4 ← (byte) 0 == (byte~) vblank::$3 from [69] (bool~) vblank::$16 ← (byte) 0 != (byte~) vblank::$3
Successful SSA optimization Pass2UnaryNotSimplification
Alias initPalette::i#2 = initPalette::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::waitForVBlank1_$1 [16] if((byte) 0==(byte~) main::waitForVBlank1_$0) goto main::waitForVBlank1_@1
Simple Condition (bool~) main::$8 [29] if((byte) 0!=(byte) main::i#1) goto main::@1
Simple Condition (bool~) main::waitForVBlank2_$1 [34] if((byte) 0==(byte~) main::waitForVBlank2_$0) goto main::waitForVBlank2_@1
Simple Condition (bool~) main::$9 [44] if((number) 0!=(number) 1) goto main::@2
Simple Condition (bool~) vblank::$2 [62] if((byte) 0==(byte~) vblank::$1) goto vblank::@1
Simple Condition (bool~) vblank::$4 [67] if((byte) 0==(byte~) vblank::$3) goto vblank::@return
Simple Condition (bool~) initSpriteBuffer::$1 [96] if((byte) initSpriteBuffer::i#1!=(byte~) initSpriteBuffer::$0) goto initSpriteBuffer::@1
Simple Condition (bool~) initPalette::$1 [109] if((byte) initPalette::i#2<(byte~) initPalette::$0) goto initPalette::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [1] (byte*~) main::disableVideoOutput1_$2 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [4] (byte*~) main::disableVideoOutput1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [8] (byte*~) main::disableAudioOutput1_$1 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [12] (byte*~) main::waitForVBlank1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [30] (byte*~) main::waitForVBlank2_$3 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [37] (byte*~) main::enableVideoOutput1_$2 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [40] (byte*~) main::enableVideoOutput1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [46] (byte*~) vblank::transferSpriteBufferToPpu1_$2 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [49] (byte*~) vblank::transferSpriteBufferToPpu1_$3 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [52] (byte*~) vblank::$11 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [55] (byte*~) vblank::$12 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [58] (byte*~) vblank::$13 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [63] (byte*~) vblank::$14 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [71] (byte~) moveLuigiRight::$5 ← (byte) 0 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant right-side identified [73] (byte~) moveLuigiRight::$7 ← (byte) 1 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant right-side identified [75] (byte~) moveLuigiRight::$9 ← (byte) 2 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant right-side identified [77] (byte~) moveLuigiRight::$11 ← (byte) 3 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant right-side identified [80] (byte~) moveLuigiLeft::$5 ← (byte) 0 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant right-side identified [82] (byte~) moveLuigiLeft::$7 ← (byte) 1 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant right-side identified [84] (byte~) moveLuigiLeft::$9 ← (byte) 2 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant right-side identified [86] (byte~) moveLuigiLeft::$11 ← (byte) 3 * (const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant right-side identified [91] (byte*~) initSpriteBuffer::$2 ← (byte*)(const struct ObjectAttribute*) SPRITES
Constant right-side identified [94] (byte~) initSpriteBuffer::$0 ← sizeof  (const struct ObjectAttribute*) SPRITES
Constant right-side identified [99] (byte*~) initPalette::$5 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [102] (byte*~) initPalette::$6 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [107] (byte~) initPalette::$0 ← sizeof  (const byte*) PALETTE
Constant right-side identified [110] (byte*~) initPalette::$7 ← (byte*)(const struct RICOH_2C02*) PPU
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::disableVideoOutput1_$2 = (byte*)PPU
Constant (const byte*) main::disableVideoOutput1_$3 = (byte*)PPU
Constant (const byte*) main::disableAudioOutput1_$1 = (byte*)APU
Constant (const byte*) main::waitForVBlank1_$3 = (byte*)PPU
Constant (const byte) main::i#0 = 0
Constant (const byte*) main::waitForVBlank2_$3 = (byte*)PPU
Constant (const byte*) main::enableVideoOutput1_$2 = (byte*)PPU
Constant (const byte*) main::enableVideoOutput1_$3 = (byte*)PPU
Constant (const byte*) vblank::transferSpriteBufferToPpu1_$2 = (byte*)PPU
Constant (const byte*) vblank::transferSpriteBufferToPpu1_$3 = (byte*)APU
Constant (const byte*) vblank::$11 = (byte*)APU
Constant (const byte*) vblank::$12 = (byte*)APU
Constant (const byte*) vblank::$13 = (byte*)APU
Constant (const byte*) vblank::$14 = (byte*)APU
Constant (const byte) moveLuigiRight::$5 = 0*SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant (const byte) moveLuigiRight::$7 = 1*SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant (const byte) moveLuigiRight::$9 = 2*SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant (const byte) moveLuigiRight::$11 = 3*SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant (const byte) moveLuigiLeft::$5 = 0*SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant (const byte) moveLuigiLeft::$7 = 1*SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant (const byte) moveLuigiLeft::$9 = 2*SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant (const byte) moveLuigiLeft::$11 = 3*SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant (const byte) initSpriteBuffer::i#0 = 0
Constant (const byte*) initSpriteBuffer::$2 = (byte*)SPRITES
Constant (const byte) initSpriteBuffer::$0 = sizeof SPRITES
Constant (const byte*) initPalette::$5 = (byte*)PPU
Constant (const byte*) initPalette::$6 = (byte*)PPU
Constant (const byte) initPalette::i#0 = 0
Constant (const byte) initPalette::$0 = sizeof PALETTE
Constant (const byte*) initPalette::$7 = (byte*)PPU
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [44] if((number) 0!=(number) 1) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Converting *(pointer+n) to pointer[n] [3] *((byte*~) main::disableVideoOutput1_$0) ← (byte) 0  -- *(main::disableVideoOutput1_$2 + OFFSET_STRUCT_RICOH_2C02_PPUCTRL)
Converting *(pointer+n) to pointer[n] [6] *((byte*~) main::disableVideoOutput1_$1) ← (byte) 0  -- *(main::disableVideoOutput1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Converting *(pointer+n) to pointer[n] [10] *((byte*~) main::disableAudioOutput1_$0) ← (byte) $40  -- *(main::disableAudioOutput1_$1 + OFFSET_STRUCT_RICOH_2A03_DMC_FREQ)
Converting *(pointer+n) to pointer[n] [14] (byte~) main::waitForVBlank1_$0 ← *((byte*~) main::waitForVBlank1_$2) & (byte) $80  -- *(main::waitForVBlank1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Converting *(pointer+n) to pointer[n] [32] (byte~) main::waitForVBlank2_$0 ← *((byte*~) main::waitForVBlank2_$2) & (byte) $80  -- *(main::waitForVBlank2_$3 + OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Converting *(pointer+n) to pointer[n] [39] *((byte*~) main::enableVideoOutput1_$0) ← (byte) $80  -- *(main::enableVideoOutput1_$2 + OFFSET_STRUCT_RICOH_2C02_PPUCTRL)
Converting *(pointer+n) to pointer[n] [42] *((byte*~) main::enableVideoOutput1_$1) ← (byte) $10  -- *(main::enableVideoOutput1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Converting *(pointer+n) to pointer[n] [48] *((byte*~) vblank::transferSpriteBufferToPpu1_$0) ← (byte) 0  -- *(vblank::transferSpriteBufferToPpu1_$2 + OFFSET_STRUCT_RICOH_2C02_OAMADDR)
Converting *(pointer+n) to pointer[n] [51] *((byte*~) vblank::transferSpriteBufferToPpu1_$1) ← >(const nomodify struct ObjectAttribute*) OAM_BUFFER  -- *(vblank::transferSpriteBufferToPpu1_$3 + OFFSET_STRUCT_RICOH_2A03_OAMDMA)
Converting *(pointer+n) to pointer[n] [54] *((byte*~) vblank::$7) ← (byte) 1  -- *(vblank::$11 + OFFSET_STRUCT_RICOH_2A03_JOY1)
Converting *(pointer+n) to pointer[n] [57] *((byte*~) vblank::$8) ← (byte) 0  -- *(vblank::$12 + OFFSET_STRUCT_RICOH_2A03_JOY1)
Converting *(pointer+n) to pointer[n] [60] (byte~) vblank::$1 ← *((byte*~) vblank::$9) & (byte) 1  -- *(vblank::$13 + OFFSET_STRUCT_RICOH_2A03_JOY1)
Converting *(pointer+n) to pointer[n] [65] (byte~) vblank::$3 ← *((byte*~) vblank::$10) & (byte) 1  -- *(vblank::$14 + OFFSET_STRUCT_RICOH_2A03_JOY1)
Converting *(pointer+n) to pointer[n] [101] *((byte*~) initPalette::$2) ← >(const nomodify byte*) PPU_PALETTE  -- *(initPalette::$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [104] *((byte*~) initPalette::$3) ← <(const nomodify byte*) PPU_PALETTE  -- *(initPalette::$6 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [112] *((byte*~) initPalette::$4) ← *((const byte*) PALETTE + (byte) initPalette::i#2)  -- *(initPalette::$7 + OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE in 
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE in 
Simplifying constant evaluating to zero <(const nomodify byte*) PPU_PALETTE in [104] *((const byte*) initPalette::$6 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← <(const nomodify byte*) PPU_PALETTE
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::disableVideoOutput1_$2 in [2] (byte*~) main::disableVideoOutput1_$0 ← (const byte*) main::disableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
Simplifying expression containing zero main::disableVideoOutput1_$2 in [3] *((const byte*) main::disableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL) ← (byte) 0
Simplifying expression containing zero MEMORY in [19] *((const nomodify byte*) MEMORY+(byte) 0 + (byte) main::i#2) ← (byte) 0
Simplifying expression containing zero main::enableVideoOutput1_$2 in [38] (byte*~) main::enableVideoOutput1_$0 ← (const byte*) main::enableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
Simplifying expression containing zero main::enableVideoOutput1_$2 in [39] *((const byte*) main::enableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL) ← (byte) $80
Simplifying expression containing zero (byte*)OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X in [72] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (const byte) moveLuigiRight::$5) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (const byte) moveLuigiRight::$5)
Simplifying expression containing zero (byte*)OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X in [72] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (const byte) moveLuigiRight::$5) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X)
Simplifying expression containing zero (byte*)OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X in [81] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (const byte) moveLuigiLeft::$5) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (const byte) moveLuigiLeft::$5)
Simplifying expression containing zero (byte*)OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X in [81] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X + (const byte) moveLuigiLeft::$5) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*~) main::disableVideoOutput1_$0 and assignment [1] (byte*~) main::disableVideoOutput1_$0 ← (const byte*) main::disableVideoOutput1_$2
Eliminating unused variable (byte*~) main::disableVideoOutput1_$1 and assignment [3] (byte*~) main::disableVideoOutput1_$1 ← (const byte*) main::disableVideoOutput1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK
Eliminating unused variable (byte*~) main::disableAudioOutput1_$0 and assignment [6] (byte*~) main::disableAudioOutput1_$0 ← (const byte*) main::disableAudioOutput1_$1 + (const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
Eliminating unused variable (byte*~) main::waitForVBlank1_$2 and assignment [9] (byte*~) main::waitForVBlank1_$2 ← (const byte*) main::waitForVBlank1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
Eliminating unused variable (byte*~) main::waitForVBlank2_$2 and assignment [23] (byte*~) main::waitForVBlank2_$2 ← (const byte*) main::waitForVBlank2_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
Eliminating unused variable (byte*~) main::enableVideoOutput1_$0 and assignment [28] (byte*~) main::enableVideoOutput1_$0 ← (const byte*) main::enableVideoOutput1_$2
Eliminating unused variable (byte*~) main::enableVideoOutput1_$1 and assignment [30] (byte*~) main::enableVideoOutput1_$1 ← (const byte*) main::enableVideoOutput1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK
Eliminating unused variable (byte*~) vblank::transferSpriteBufferToPpu1_$0 and assignment [33] (byte*~) vblank::transferSpriteBufferToPpu1_$0 ← (const byte*) vblank::transferSpriteBufferToPpu1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR
Eliminating unused variable (byte*~) vblank::transferSpriteBufferToPpu1_$1 and assignment [35] (byte*~) vblank::transferSpriteBufferToPpu1_$1 ← (const byte*) vblank::transferSpriteBufferToPpu1_$3 + (const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA
Eliminating unused variable (byte*~) vblank::$7 and assignment [37] (byte*~) vblank::$7 ← (const byte*) vblank::$11 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
Eliminating unused variable (byte*~) vblank::$8 and assignment [39] (byte*~) vblank::$8 ← (const byte*) vblank::$12 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
Eliminating unused variable (byte*~) vblank::$9 and assignment [41] (byte*~) vblank::$9 ← (const byte*) vblank::$13 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
Eliminating unused variable (byte*~) vblank::$10 and assignment [44] (byte*~) vblank::$10 ← (const byte*) vblank::$14 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
Eliminating unused variable (byte*~) initPalette::$2 and assignment [66] (byte*~) initPalette::$2 ← (const byte*) initPalette::$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) initPalette::$3 and assignment [68] (byte*~) initPalette::$3 ← (const byte*) initPalette::$6 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) initPalette::$4 and assignment [72] (byte*~) initPalette::$4 ← (const byte*) initPalette::$7 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused constant (const byte) moveLuigiRight::$5
Eliminating unused constant (const byte) moveLuigiLeft::$5
Eliminating unused constant (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolving array sizeof() sizeof (const struct ObjectAttribute*) SPRITES
Resolving array sizeof() sizeof (const byte*) PALETTE
Successful SSA optimization PassNSizeOfSimplification
Adding number conversion cast (unumber) 4 in 
Adding number conversion cast (unumber) $20 in 
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 4
Simplifying constant integer cast $20
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $20
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) initSpriteBuffer::i#0
Inlining constant with var siblings (const byte) initPalette::i#0
Constant inlined main::disableVideoOutput1_$2 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined main::disableVideoOutput1_$3 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined moveLuigiRight::$9 = (byte) 2*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant inlined main::enableVideoOutput1_$3 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined main::enableVideoOutput1_$2 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined main::waitForVBlank1_$3 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined vblank::transferSpriteBufferToPpu1_$3 = (byte*)(const struct RICOH_2A03*) APU
Constant inlined initSpriteBuffer::i#0 = (byte) 0
Constant inlined vblank::transferSpriteBufferToPpu1_$2 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined main::i#0 = (byte) 0
Constant inlined main::disableAudioOutput1_$1 = (byte*)(const struct RICOH_2A03*) APU
Constant inlined vblank::$13 = (byte*)(const struct RICOH_2A03*) APU
Constant inlined vblank::$14 = (byte*)(const struct RICOH_2A03*) APU
Constant inlined moveLuigiLeft::$11 = (byte) 3*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant inlined initPalette::$5 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined initPalette::$6 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined initPalette::$7 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined initSpriteBuffer::$2 = (byte*)(const struct ObjectAttribute*) SPRITES
Constant inlined vblank::$11 = (byte*)(const struct RICOH_2A03*) APU
Constant inlined vblank::$12 = (byte*)(const struct RICOH_2A03*) APU
Constant inlined initSpriteBuffer::$0 = (byte) 4*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant inlined initPalette::$0 = (byte) $20*(const byte) SIZEOF_BYTE
Constant inlined initPalette::i#0 = (byte) 0
Constant inlined moveLuigiRight::$7 = (byte) 1*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant inlined main::waitForVBlank2_$3 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined moveLuigiLeft::$7 = (byte) 1*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant inlined moveLuigiRight::$11 = (byte) 3*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Constant inlined moveLuigiLeft::$9 = (byte) 2*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1)
Consolidated array index constant in *((byte*)OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+1*SIZEOF_STRUCT_OBJECTATTRIBUTE)
Consolidated array index constant in *((byte*)OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+1*SIZEOF_STRUCT_OBJECTATTRIBUTE)
Consolidated array index constant in *((byte*)OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+2*SIZEOF_STRUCT_OBJECTATTRIBUTE)
Consolidated array index constant in *((byte*)OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+2*SIZEOF_STRUCT_OBJECTATTRIBUTE)
Consolidated array index constant in *((byte*)OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+3*SIZEOF_STRUCT_OBJECTATTRIBUTE)
Consolidated array index constant in *((byte*)OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+3*SIZEOF_STRUCT_OBJECTATTRIBUTE)
Consolidated array index constant in *((byte*)OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+1*SIZEOF_STRUCT_OBJECTATTRIBUTE)
Consolidated array index constant in *((byte*)OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+1*SIZEOF_STRUCT_OBJECTATTRIBUTE)
Consolidated array index constant in *((byte*)OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+2*SIZEOF_STRUCT_OBJECTATTRIBUTE)
Consolidated array index constant in *((byte*)OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+2*SIZEOF_STRUCT_OBJECTATTRIBUTE)
Consolidated array index constant in *((byte*)OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+3*SIZEOF_STRUCT_OBJECTATTRIBUTE)
Consolidated array index constant in *((byte*)OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+3*SIZEOF_STRUCT_OBJECTATTRIBUTE)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Successful SSA optimization Pass2ConstantAdditionElimination
Added new block during phi lifting main::@7(between main::@1 and main::@1)
Added new block during phi lifting initSpriteBuffer::@2(between initSpriteBuffer::@1 and initSpriteBuffer::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::waitForVBlank1
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::waitForVBlank2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of initSpriteBuffer
Adding NOP phi() at start of vblank
Adding NOP phi() at start of vblank::@2
Adding NOP phi() at start of vblank::@5
Adding NOP phi() at start of vblank::@3
Adding NOP phi() at start of vblank::@6
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to initPalette:30 initSpriteBuffer:32 
Calls in [vblank] to moveLuigiRight:62 moveLuigiLeft:67 

Created 3 initial phi equivalence classes
Coalesced [37] main::i#3 ← main::i#1
Coalesced [44] initSpriteBuffer::i#3 ← initSpriteBuffer::i#1
Coalesced [53] initPalette::i#4 ← initPalette::i#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@7
Culled Empty Block (label) initSpriteBuffer::@2
Culled Empty Block (label) vblank::@5
Culled Empty Block (label) vblank::@6
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::waitForVBlank1
Adding NOP phi() at start of main::waitForVBlank2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of initSpriteBuffer
Adding NOP phi() at start of vblank
Adding NOP phi() at start of vblank::@2
Adding NOP phi() at start of vblank::@3

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  asm { cld ldx#$ff txs  }
  to:main::disableVideoOutput1
main::disableVideoOutput1: scope:[main]  from main
  [5] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0
  [6] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0
  to:main::disableAudioOutput1
main::disableAudioOutput1: scope:[main]  from main::disableVideoOutput1
  [7] *((const nomodify byte*) FR_COUNTER) ← (byte) $40
  [8] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40
  to:main::clearVBlankFlag1
main::clearVBlankFlag1: scope:[main]  from main::disableAudioOutput1
  asm { ldaPPU_PPUSTATUS  }
  to:main::waitForVBlank1
main::waitForVBlank1: scope:[main]  from main::clearVBlankFlag1
  [10] phi()
  to:main::waitForVBlank1_@1
main::waitForVBlank1_@1: scope:[main]  from main::waitForVBlank1 main::waitForVBlank1_@1
  [11] (byte~) main::waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80
  [12] if((byte) 0==(byte~) main::waitForVBlank1_$0) goto main::waitForVBlank1_@1
  to:main::@1
main::@1: scope:[main]  from main::@1 main::waitForVBlank1_@1
  [13] (byte) main::i#2 ← phi( main::@1/(byte) main::i#1 main::waitForVBlank1_@1/(byte) 0 )
  [14] *((const nomodify byte*) MEMORY + (byte) main::i#2) ← (byte) 0
  [15] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::i#2) ← (byte) 0
  [16] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::i#2) ← (byte) 0
  [17] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::i#2) ← (byte) 0
  [18] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::i#2) ← (byte) 0
  [19] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::i#2) ← (byte) 0
  [20] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::i#2) ← (byte) 0
  [21] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::i#2) ← (byte) 0
  [22] (byte) main::i#1 ← ++ (byte) main::i#2
  [23] if((byte) 0!=(byte) main::i#1) goto main::@1
  to:main::waitForVBlank2
main::waitForVBlank2: scope:[main]  from main::@1
  [24] phi()
  to:main::waitForVBlank2_@1
main::waitForVBlank2_@1: scope:[main]  from main::waitForVBlank2 main::waitForVBlank2_@1
  [25] (byte~) main::waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80
  [26] if((byte) 0==(byte~) main::waitForVBlank2_$0) goto main::waitForVBlank2_@1
  to:main::@3
main::@3: scope:[main]  from main::waitForVBlank2_@1
  [27] phi()
  [28] call initPalette 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [29] phi()
  [30] call initSpriteBuffer 
  to:main::enableVideoOutput1
main::enableVideoOutput1: scope:[main]  from main::@4
  [31] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80
  [32] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $10
  to:main::@2
main::@2: scope:[main]  from main::@2 main::enableVideoOutput1
  [33] phi()
  to:main::@2

(void()) initSpriteBuffer()
initSpriteBuffer: scope:[initSpriteBuffer]  from main::@4
  [34] phi()
  to:initSpriteBuffer::@1
initSpriteBuffer::@1: scope:[initSpriteBuffer]  from initSpriteBuffer initSpriteBuffer::@1
  [35] (byte) initSpriteBuffer::i#2 ← phi( initSpriteBuffer/(byte) 0 initSpriteBuffer::@1/(byte) initSpriteBuffer::i#1 )
  [36] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER + (byte) initSpriteBuffer::i#2) ← *((byte*)(const struct ObjectAttribute*) SPRITES + (byte) initSpriteBuffer::i#2)
  [37] (byte) initSpriteBuffer::i#1 ← ++ (byte) initSpriteBuffer::i#2
  [38] if((byte) initSpriteBuffer::i#1!=(byte) 4*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) goto initSpriteBuffer::@1
  to:initSpriteBuffer::@return
initSpriteBuffer::@return: scope:[initSpriteBuffer]  from initSpriteBuffer::@1
  [39] return 
  to:@return

(void()) initPalette()
initPalette: scope:[initPalette]  from main::@3
  asm { ldaPPU_PPUSTATUS  }
  [41] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify byte*) PPU_PALETTE
  [42] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0
  to:initPalette::@1
initPalette::@1: scope:[initPalette]  from initPalette initPalette::@2
  [43] (byte) initPalette::i#2 ← phi( initPalette/(byte) 0 initPalette::@2/(byte) initPalette::i#1 )
  [44] if((byte) initPalette::i#2<(byte) $20*(const byte) SIZEOF_BYTE) goto initPalette::@2
  to:initPalette::@return
initPalette::@return: scope:[initPalette]  from initPalette::@1
  [45] return 
  to:@return
initPalette::@2: scope:[initPalette]  from initPalette::@1
  [46] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← *((const byte*) PALETTE + (byte) initPalette::i#2)
  [47] (byte) initPalette::i#1 ← ++ (byte) initPalette::i#2
  to:initPalette::@1

interrupt(HARDWARE_STACK)(void()) vblank()
vblank: scope:[vblank]  from
  [48] phi()
  to:vblank::transferSpriteBufferToPpu1
vblank::transferSpriteBufferToPpu1: scope:[vblank]  from vblank
  [49] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR) ← (byte) 0
  [50] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA) ← >(const nomodify struct ObjectAttribute*) OAM_BUFFER
  to:vblank::@4
vblank::@4: scope:[vblank]  from vblank::transferSpriteBufferToPpu1
  [51] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1
  [52] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0
  [53] (byte~) vblank::$1 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1
  [54] if((byte) 0==(byte~) vblank::$1) goto vblank::@1
  to:vblank::@2
vblank::@2: scope:[vblank]  from vblank::@4
  [55] phi()
  [56] call moveLuigiRight 
  to:vblank::@1
vblank::@1: scope:[vblank]  from vblank::@2 vblank::@4
  [57] (byte~) vblank::$3 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1
  [58] if((byte) 0==(byte~) vblank::$3) goto vblank::@return
  to:vblank::@3
vblank::@3: scope:[vblank]  from vblank::@1
  [59] phi()
  [60] call moveLuigiLeft 
  to:vblank::@return
vblank::@return: scope:[vblank]  from vblank::@1 vblank::@3
  [61] return 
  to:@return

(void()) moveLuigiLeft()
moveLuigiLeft: scope:[moveLuigiLeft]  from vblank::@3
  [62] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X)
  [63] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 1*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 1*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE)
  [64] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 2*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 2*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE)
  [65] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 3*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 3*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE)
  to:moveLuigiLeft::@return
moveLuigiLeft::@return: scope:[moveLuigiLeft]  from moveLuigiLeft
  [66] return 
  to:@return

(void()) moveLuigiRight()
moveLuigiRight: scope:[moveLuigiRight]  from vblank::@2
  [67] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X)
  [68] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 1*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 1*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE)
  [69] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 2*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 2*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE)
  [70] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 3*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 3*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE)
  to:moveLuigiRight::@return
moveLuigiRight::@return: scope:[moveLuigiRight]  from moveLuigiRight
  [71] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) ObjectAttribute::attributes
(byte) ObjectAttribute::tile
(byte) ObjectAttribute::x
(byte) ObjectAttribute::y
(byte) RICOH_2A03::DMC_FREQ
(byte) RICOH_2A03::DMC_LEN
(byte) RICOH_2A03::DMC_RAW
(byte) RICOH_2A03::DMC_START
(byte) RICOH_2A03::JOY1
(byte) RICOH_2A03::JOY2
(byte) RICOH_2A03::NOISE_HI
(byte) RICOH_2A03::NOISE_LO
(byte) RICOH_2A03::NOISE_VOL
(byte) RICOH_2A03::OAMDMA
(byte) RICOH_2A03::SND_CHN
(byte) RICOH_2A03::SQ1_HI
(byte) RICOH_2A03::SQ1_LO
(byte) RICOH_2A03::SQ1_SWEEP
(byte) RICOH_2A03::SQ1_VOL
(byte) RICOH_2A03::SQ2_HI
(byte) RICOH_2A03::SQ2_LO
(byte) RICOH_2A03::SQ2_SWEEP
(byte) RICOH_2A03::SQ2_VOL
(byte) RICOH_2A03::TRI_HI
(byte) RICOH_2A03::TRI_LINEAR
(byte) RICOH_2A03::TRI_LO
(byte) RICOH_2A03::UNUSED1
(byte) RICOH_2A03::UNUSED2
(byte) RICOH_2C02::OAMADDR
(byte) RICOH_2C02::OAMDATA
(byte) RICOH_2C02::PPUADDR
(byte) RICOH_2C02::PPUCTRL
(byte) RICOH_2C02::PPUDATA
(byte) RICOH_2C02::PPUMASK
(byte) RICOH_2C02::PPUSCROLL
(volatile byte) RICOH_2C02::PPUSTATUS loadstore
(void()) initPalette()
(byte) initPalette::i
(byte) initPalette::i#1 2002.0
(byte) initPalette::i#2 1334.6666666666667
(void()) initSpriteBuffer()
(byte) initSpriteBuffer::i
(byte) initSpriteBuffer::i#1 1501.5
(byte) initSpriteBuffer::i#2 2002.0
(void()) main()
(byte) main::i
(byte) main::i#1 151.5
(byte) main::i#2 112.22222222222223
(byte~) main::waitForVBlank1_$0 202.0
(byte~) main::waitForVBlank2_$0 202.0
(void()) moveLuigiLeft()
(void()) moveLuigiRight()
interrupt(HARDWARE_STACK)(void()) vblank()
(byte~) vblank::$1 4.0
(byte~) vblank::$3 4.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ initSpriteBuffer::i#2 initSpriteBuffer::i#1 ]
[ initPalette::i#2 initPalette::i#1 ]
Added variable main::waitForVBlank1_$0 to live range equivalence class [ main::waitForVBlank1_$0 ]
Added variable main::waitForVBlank2_$0 to live range equivalence class [ main::waitForVBlank2_$0 ]
Added variable vblank::$1 to live range equivalence class [ vblank::$1 ]
Added variable vblank::$3 to live range equivalence class [ vblank::$3 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ initSpriteBuffer::i#2 initSpriteBuffer::i#1 ]
[ initPalette::i#2 initPalette::i#1 ]
[ main::waitForVBlank1_$0 ]
[ main::waitForVBlank2_$0 ]
[ vblank::$1 ]
[ vblank::$3 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ initSpriteBuffer::i#2 initSpriteBuffer::i#1 ]
Allocated zp[1]:4 [ initPalette::i#2 initPalette::i#1 ]
Allocated zp[1]:5 [ main::waitForVBlank1_$0 ]
Allocated zp[1]:6 [ main::waitForVBlank2_$0 ]
Allocated zp[1]:7 [ vblank::$1 ]
Allocated zp[1]:8 [ vblank::$3 ]

INITIAL ASM
Target platform is nes / MOS6502
  // File Comments
// A minimal NES demo
// Based on: https://github.com/gregkrsak/first_nes written by Greg M. Krsak, 2018. 
  // Upstart
  // Nintendo Entertainment System (NES) ROM
// https://sadistech.com/nesromtool/romdoc.html
// https://forums.nesdev.com/viewtopic.php?f=2&t=9896
// https://github.com/gregkrsak/first_nes
.file [name="nes-demo.nes", type="bin", segments="NesRom"]
.file [name="nes-demo.nes_hdr", type="bin", segments="Header"]
.file [name="nes-demo.nes_prg", type="bin", segments="ProgramRom"]
.file [name="nes-demo.nes_chr", type="bin", segments="CharacterRom"]
.segmentdef Header  [ start=$0000,       min=$0000, max=$000f, fill ]
.segmentdef Tiles   [ start=$0000,       min=$0000, max=$1fff, fill ]
.segmentdef Code    [ start=$c000,       min=$c000, max=$fff9 ]
.segmentdef Data    [ startAfter="Code", min=$c000, max=$fff9 ]
.segmentdef Vectors [ start=$fffa,       min=$fffa, max=$ffff ]
.segmentdef ProgramRom [ segments="Code, Data, Vectors" ]
.segmentdef CharacterRom [ segments="Tiles" ]
.segmentdef NesRom
.segment NesRom
.segmentout [ segments="Header" ]
.segmentout [ segments="ProgramRom" ]
.segmentout [ segments="CharacterRom" ]
.segment Header
.text   @"NES\$1a"
.byte   $01           // 1x 16KB ROM (PRG)
.byte   $01           // 1x 8KB VROM (CHR)
.byte   %00000001     // Mapper nibble 0000 == No mapping (a simple 16KB PRG + 8KB CHR game)
                      // Mirroring nibble 0001 == Vertical mirroring only
.segment Code

  // Global Constants & labels
  .const SIZEOF_STRUCT_OBJECTATTRIBUTE = 4
  .const OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
  .const OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
  .const OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
  .const OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
  .const OFFSET_STRUCT_OBJECTATTRIBUTE_X = 3
  .const OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
  .const OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
  .const OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
  .const OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
  .const SIZEOF_BYTE = 1
  // $3000-$3EFF	$0F00	Mirrors of $2000-$2EFF
  // $3F00-$3F1F	$0020	Palette RAM indexes
  .label PPU_PALETTE = $3f00
  // APU Frame Counter
  // generates low-frequency clocks for the channels and an optional 60 Hz interrupt.
  // https://wiki.nesdev.com/w/index.php/APU_Frame_Counter
  // ------+-----+---------------------------------------------------------------
  //  $4017 |	 W  | FR_COUNTER Frame Counter	Set mode and interrupt
  //  ------+-----+---------------------------------------------------------------
  //        |   7	| Sequencer mode: 0 selects 4-step sequence, 1 selects 5-step sequence
  //        |   6	| Interrupt inhibit flag. If set, the frame interrupt flag is cleared, otherwise it is unaffected.
  //  ------+-----+---------------------------------------------------------------
  // Side effects	After 3 or 4 CPU clock cycles*, the timer is reset.
  // If the mode flag is set, then both "quarter frame" and "half frame" signals are also generated.
  .label FR_COUNTER = $4017
  // Pointer to the start of RAM memory
  .label MEMORY = 0
  // OAM (Object Attribute Memory) Buffer
  // Will be transfered to the PPU via DMA
  .label OAM_BUFFER = $200
  // PPU Status Register for reading in ASM
  .label PPU_PPUSTATUS = $2002
  // NES Picture Processing Unit (PPU)
  .label PPU = $2000
  // NES CPU and audion processing unit (APU)
  .label APU = $4000
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
.segment Code
  // main
// RESET Called when the NES is reset, including when it is turned on.
main: {
    .label waitForVBlank1___0 = 5
    .label waitForVBlank2___0 = 6
    // Clear RAM - since it has all variables and the stack it is necesary to do it inline
    .label i = 2
    // asm { cld ldx#$ff txs  }
    // Initialize decimal-mode and stack
    cld
    ldx #$ff
    txs
    jmp disableVideoOutput1
    // main::disableVideoOutput1
  disableVideoOutput1:
    // [5] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU
    // [6] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    jmp disableAudioOutput1
    // main::disableAudioOutput1
  disableAudioOutput1:
    // [7] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta FR_COUNTER
    // [8] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
    jmp clearVBlankFlag1
    // main::clearVBlankFlag1
  clearVBlankFlag1:
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [10] phi from main::clearVBlankFlag1 to main::waitForVBlank1 [phi:main::clearVBlankFlag1->main::waitForVBlank1]
  waitForVBlank1_from_clearVBlankFlag1:
    jmp waitForVBlank1
    // main::waitForVBlank1
  waitForVBlank1:
    jmp waitForVBlank1___b1
    // main::waitForVBlank1_@1
  waitForVBlank1___b1:
    // [11] (byte~) main::waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuz1=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    sta.z waitForVBlank1___0
    // [12] if((byte) 0==(byte~) main::waitForVBlank1_$0) goto main::waitForVBlank1_@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z waitForVBlank1___0
    beq waitForVBlank1___b1
    // [13] phi from main::waitForVBlank1_@1 to main::@1 [phi:main::waitForVBlank1_@1->main::@1]
  __b1_from_waitForVBlank1___b1:
    // [13] phi (byte) main::i#2 = (byte) 0 [phi:main::waitForVBlank1_@1->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [13] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [13] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [14] *((const nomodify byte*) MEMORY + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z i
    sta MEMORY,y
    // [15] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z i
    sta MEMORY+$100,y
    // [16] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z i
    sta MEMORY+$200,y
    // [17] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z i
    sta MEMORY+$300,y
    // [18] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z i
    sta MEMORY+$400,y
    // [19] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z i
    sta MEMORY+$500,y
    // [20] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z i
    sta MEMORY+$600,y
    // [21] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z i
    sta MEMORY+$700,y
    // [22] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [23] if((byte) 0!=(byte) main::i#1) goto main::@1 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z i
    bne __b1_from___b1
    // [24] phi from main::@1 to main::waitForVBlank2 [phi:main::@1->main::waitForVBlank2]
  waitForVBlank2_from___b1:
    jmp waitForVBlank2
    // main::waitForVBlank2
  waitForVBlank2:
    jmp waitForVBlank2___b1
    // main::waitForVBlank2_@1
  waitForVBlank2___b1:
    // [25] (byte~) main::waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuz1=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    sta.z waitForVBlank2___0
    // [26] if((byte) 0==(byte~) main::waitForVBlank2_$0) goto main::waitForVBlank2_@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z waitForVBlank2___0
    beq waitForVBlank2___b1
    // [27] phi from main::waitForVBlank2_@1 to main::@3 [phi:main::waitForVBlank2_@1->main::@3]
  __b3_from_waitForVBlank2___b1:
    jmp __b3
    // main::@3
  __b3:
    // [28] call initPalette 
    // Now the PPU is ready.
    jsr initPalette
    // [29] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [30] call initSpriteBuffer 
    // [34] phi from main::@4 to initSpriteBuffer [phi:main::@4->initSpriteBuffer]
  initSpriteBuffer_from___b4:
    jsr initSpriteBuffer
    jmp enableVideoOutput1
    // main::enableVideoOutput1
  enableVideoOutput1:
    // [31] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 -- _deref_pbuc1=vbuc2 
    lda #$80
    sta PPU
    // [32] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $10 -- _deref_pbuc1=vbuc2 
    lda #$10
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // [33] phi from main::@2 main::enableVideoOutput1 to main::@2 [phi:main::@2/main::enableVideoOutput1->main::@2]
  __b2_from___b2:
  __b2_from_enableVideoOutput1:
    jmp __b2
  // Infinite loop
    // main::@2
  __b2:
    jmp __b2_from___b2
}
  // initSpriteBuffer
// Initialize OAM (Object Attribute Memory) Buffer with the SPRITE data
initSpriteBuffer: {
    .label i = 3
    // [35] phi from initSpriteBuffer to initSpriteBuffer::@1 [phi:initSpriteBuffer->initSpriteBuffer::@1]
  __b1_from_initSpriteBuffer:
    // [35] phi (byte) initSpriteBuffer::i#2 = (byte) 0 [phi:initSpriteBuffer->initSpriteBuffer::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [35] phi from initSpriteBuffer::@1 to initSpriteBuffer::@1 [phi:initSpriteBuffer::@1->initSpriteBuffer::@1]
  __b1_from___b1:
    // [35] phi (byte) initSpriteBuffer::i#2 = (byte) initSpriteBuffer::i#1 [phi:initSpriteBuffer::@1->initSpriteBuffer::@1#0] -- register_copy 
    jmp __b1
    // initSpriteBuffer::@1
  __b1:
    // [36] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER + (byte) initSpriteBuffer::i#2) ← *((byte*)(const struct ObjectAttribute*) SPRITES + (byte) initSpriteBuffer::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda SPRITES,y
    sta OAM_BUFFER,y
    // [37] (byte) initSpriteBuffer::i#1 ← ++ (byte) initSpriteBuffer::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [38] if((byte) initSpriteBuffer::i#1!=(byte) 4*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) goto initSpriteBuffer::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #4*SIZEOF_STRUCT_OBJECTATTRIBUTE
    cmp.z i
    bne __b1_from___b1
    jmp __breturn
    // initSpriteBuffer::@return
  __breturn:
    // [39] return 
    rts
}
  // initPalette
// Copy palette values to PPU
initPalette: {
    .label i = 4
    // asm { ldaPPU_PPUSTATUS  }
    // Reset the high/low latch to "high"
    lda PPU_PPUSTATUS
    // [41] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify byte*) PPU_PALETTE -- _deref_pbuc1=vbuc2 
    // Write the high byte of PPU Palette address
    lda #>PPU_PALETTE
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [42] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Write the low byte of PPU Palette address
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [43] phi from initPalette to initPalette::@1 [phi:initPalette->initPalette::@1]
  __b1_from_initPalette:
    // [43] phi (byte) initPalette::i#2 = (byte) 0 [phi:initPalette->initPalette::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
  // Write to PPU
    // initPalette::@1
  __b1:
    // [44] if((byte) initPalette::i#2<(byte) $20*(const byte) SIZEOF_BYTE) goto initPalette::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #$20*SIZEOF_BYTE
    bcc __b2
    jmp __breturn
    // initPalette::@return
  __breturn:
    // [45] return 
    rts
    // initPalette::@2
  __b2:
    // [46] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← *((const byte*) PALETTE + (byte) initPalette::i#2) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda PALETTE,y
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // [47] (byte) initPalette::i#1 ← ++ (byte) initPalette::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [43] phi from initPalette::@2 to initPalette::@1 [phi:initPalette::@2->initPalette::@1]
  __b1_from___b2:
    // [43] phi (byte) initPalette::i#2 = (byte) initPalette::i#1 [phi:initPalette::@2->initPalette::@1#0] -- register_copy 
    jmp __b1
}
  // vblank
// NMI Called when the PPU refreshes the screen (also known as the V-Blank period)
vblank: {
    .label __1 = 7
    .label __3 = 8
    // entry interrupt(HARDWARE_STACK)
    pha
    txa
    pha
    tya
    pha
    jmp transferSpriteBufferToPpu1
    // vblank::transferSpriteBufferToPpu1
  transferSpriteBufferToPpu1:
    // [49] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR
    // [50] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA) ← >(const nomodify struct ObjectAttribute*) OAM_BUFFER -- _deref_pbuc1=vbuc2 
    lda #>OAM_BUFFER
    sta APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA
    jmp __b4
    // vblank::@4
  __b4:
    // [51] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    // Freeze the button positions.
    lda #1
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [52] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [53] (byte~) vblank::$1 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 -- vbuz1=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    sta.z __1
    // [54] if((byte) 0==(byte~) vblank::$1) goto vblank::@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z __1
    beq __b1
    // [55] phi from vblank::@4 to vblank::@2 [phi:vblank::@4->vblank::@2]
  __b2_from___b4:
    jmp __b2
    // vblank::@2
  __b2:
    // [56] call moveLuigiRight 
    jsr moveLuigiRight
    jmp __b1
    // vblank::@1
  __b1:
    // [57] (byte~) vblank::$3 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 -- vbuz1=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    sta.z __3
    // [58] if((byte) 0==(byte~) vblank::$3) goto vblank::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z __3
    beq __breturn
    // [59] phi from vblank::@1 to vblank::@3 [phi:vblank::@1->vblank::@3]
  __b3_from___b1:
    jmp __b3
    // vblank::@3
  __b3:
    // [60] call moveLuigiLeft 
    jsr moveLuigiLeft
    jmp __breturn
    // vblank::@return
  __breturn:
    // [61] return  - exit interrupt(HARDWARE_STACK)
    pla
    tay
    pla
    tax
    pla
    rti
}
  // moveLuigiLeft
// move the Luigi sprites left
moveLuigiLeft: {
    // [62] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X
    // [63] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 1*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 1*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+1*SIZEOF_STRUCT_OBJECTATTRIBUTE
    // [64] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 2*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 2*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+2*SIZEOF_STRUCT_OBJECTATTRIBUTE
    // [65] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 3*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 3*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+3*SIZEOF_STRUCT_OBJECTATTRIBUTE
    jmp __breturn
    // moveLuigiLeft::@return
  __breturn:
    // [66] return 
    rts
}
  // moveLuigiRight
// move the Luigi sprites right
moveLuigiRight: {
    // [67] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X
    // [68] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 1*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 1*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+1*SIZEOF_STRUCT_OBJECTATTRIBUTE
    // [69] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 2*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 2*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+2*SIZEOF_STRUCT_OBJECTATTRIBUTE
    // [70] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 3*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 3*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+3*SIZEOF_STRUCT_OBJECTATTRIBUTE
    jmp __breturn
    // moveLuigiRight::@return
  __breturn:
    // [71] return 
    rts
}
  // File Data
.segment Data
  // Small Luigi Sprite Data
  SPRITES: .byte $80, $36, 2, $80, $80, $37, 2, $88, $88, $38, 2, $80, $88, $39, 2, $88
  PALETTE: .byte $f, $31, $32, $33, $f, $35, $36, $37, $f, $39, $3a, $3b, $f, $3d, $3e, $f, $f, $1c, $15, $14, $f, 2, $38, $3c, $f, $30, $37, $1a, $f, $f, $f, $f
.segment Tiles
TILES:
.import binary "smb1_chr.bin"

.segment Vectors
  VECTORS: .word vblank, main, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement asm { cld ldx#$ff txs  } always clobbers reg byte x 
Statement [5] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [6] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [7] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [11] (byte~) main::waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 [ main::waitForVBlank1_$0 ] (  [ main::waitForVBlank1_$0 ] { }  main:2 [ main::waitForVBlank1_$0 ] { }  ) always clobbers reg byte a 
Statement [14] *((const nomodify byte*) MEMORY + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] (  [ main::i#2 ] { }  main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [15] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] (  [ main::i#2 ] { }  main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [16] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] (  [ main::i#2 ] { }  main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [17] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] (  [ main::i#2 ] { }  main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [18] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] (  [ main::i#2 ] { }  main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [19] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] (  [ main::i#2 ] { }  main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [20] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] (  [ main::i#2 ] { }  main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [21] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] (  [ main::i#2 ] { }  main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [25] (byte~) main::waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 [ main::waitForVBlank2_$0 ] (  [ main::waitForVBlank2_$0 ] { }  main:2 [ main::waitForVBlank2_$0 ] { }  ) always clobbers reg byte a 
Statement [31] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [32] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $10 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [36] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER + (byte) initSpriteBuffer::i#2) ← *((byte*)(const struct ObjectAttribute*) SPRITES + (byte) initSpriteBuffer::i#2) [ initSpriteBuffer::i#2 ] ( initSpriteBuffer:30 [ initSpriteBuffer::i#2 ] { }  main:2::initSpriteBuffer:30 [ initSpriteBuffer::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ initSpriteBuffer::i#2 initSpriteBuffer::i#1 ]
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [41] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify byte*) PPU_PALETTE [ ] ( initPalette:28 [ ] { }  main:2::initPalette:28 [ ] { }  ) always clobbers reg byte a 
Statement [42] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 [ ] ( initPalette:28 [ ] { }  main:2::initPalette:28 [ ] { }  ) always clobbers reg byte a 
Statement [46] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← *((const byte*) PALETTE + (byte) initPalette::i#2) [ initPalette::i#2 ] ( initPalette:28 [ initPalette::i#2 ] { }  main:2::initPalette:28 [ initPalette::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ initPalette::i#2 initPalette::i#1 ]
Statement [49] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [50] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA) ← >(const nomodify struct ObjectAttribute*) OAM_BUFFER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [51] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [52] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [53] (byte~) vblank::$1 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 [ vblank::$1 ] (  [ vblank::$1 ] { }  ) always clobbers reg byte a 
Statement [57] (byte~) vblank::$3 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 [ vblank::$3 ] (  [ vblank::$3 ] { }  ) always clobbers reg byte a 
Statement [61] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement asm { cld ldx#$ff txs  } always clobbers reg byte x 
Statement [5] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [6] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [7] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [11] (byte~) main::waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 [ main::waitForVBlank1_$0 ] (  [ main::waitForVBlank1_$0 ] { }  main:2 [ main::waitForVBlank1_$0 ] { }  ) always clobbers reg byte a 
Statement [14] *((const nomodify byte*) MEMORY + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] (  [ main::i#2 ] { }  main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [15] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] (  [ main::i#2 ] { }  main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [16] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] (  [ main::i#2 ] { }  main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [17] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] (  [ main::i#2 ] { }  main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [18] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] (  [ main::i#2 ] { }  main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [19] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] (  [ main::i#2 ] { }  main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [20] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] (  [ main::i#2 ] { }  main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [21] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::i#2) ← (byte) 0 [ main::i#2 ] (  [ main::i#2 ] { }  main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [25] (byte~) main::waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 [ main::waitForVBlank2_$0 ] (  [ main::waitForVBlank2_$0 ] { }  main:2 [ main::waitForVBlank2_$0 ] { }  ) always clobbers reg byte a 
Statement [31] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [32] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $10 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [36] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER + (byte) initSpriteBuffer::i#2) ← *((byte*)(const struct ObjectAttribute*) SPRITES + (byte) initSpriteBuffer::i#2) [ initSpriteBuffer::i#2 ] ( initSpriteBuffer:30 [ initSpriteBuffer::i#2 ] { }  main:2::initSpriteBuffer:30 [ initSpriteBuffer::i#2 ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [41] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify byte*) PPU_PALETTE [ ] ( initPalette:28 [ ] { }  main:2::initPalette:28 [ ] { }  ) always clobbers reg byte a 
Statement [42] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 [ ] ( initPalette:28 [ ] { }  main:2::initPalette:28 [ ] { }  ) always clobbers reg byte a 
Statement [46] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← *((const byte*) PALETTE + (byte) initPalette::i#2) [ initPalette::i#2 ] ( initPalette:28 [ initPalette::i#2 ] { }  main:2::initPalette:28 [ initPalette::i#2 ] { }  ) always clobbers reg byte a 
Statement [49] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [50] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA) ← >(const nomodify struct ObjectAttribute*) OAM_BUFFER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [51] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [52] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [53] (byte~) vblank::$1 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 [ vblank::$1 ] (  [ vblank::$1 ] { }  ) always clobbers reg byte a 
Statement [57] (byte~) vblank::$3 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 [ vblank::$3 ] (  [ vblank::$3 ] { }  ) always clobbers reg byte a 
Statement [61] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ initSpriteBuffer::i#2 initSpriteBuffer::i#1 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ initPalette::i#2 initPalette::i#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::waitForVBlank1_$0 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ main::waitForVBlank2_$0 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ vblank::$1 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ vblank::$3 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [initSpriteBuffer] 3,503.5: zp[1]:3 [ initSpriteBuffer::i#2 initSpriteBuffer::i#1 ] 
Uplift Scope [initPalette] 3,336.67: zp[1]:4 [ initPalette::i#2 initPalette::i#1 ] 
Uplift Scope [main] 263.72: zp[1]:2 [ main::i#2 main::i#1 ] 202: zp[1]:5 [ main::waitForVBlank1_$0 ] 202: zp[1]:6 [ main::waitForVBlank2_$0 ] 
Uplift Scope [vblank] 4: zp[1]:7 [ vblank::$1 ] 4: zp[1]:8 [ vblank::$3 ] 
Uplift Scope [RICOH_2C02] 
Uplift Scope [RICOH_2A03] 
Uplift Scope [ObjectAttribute] 
Uplift Scope [moveLuigiRight] 
Uplift Scope [moveLuigiLeft] 
Uplift Scope [] 

Uplifting [initSpriteBuffer] best 2588 combination reg byte x [ initSpriteBuffer::i#2 initSpriteBuffer::i#1 ] 
Uplifting [initPalette] best 2468 combination reg byte x [ initPalette::i#2 initPalette::i#1 ] 
Uplifting [main] best 2018 combination reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::waitForVBlank1_$0 ] reg byte a [ main::waitForVBlank2_$0 ] 
Uplifting [vblank] best 2006 combination reg byte a [ vblank::$1 ] reg byte a [ vblank::$3 ] 
Uplifting [RICOH_2C02] best 2006 combination 
Uplifting [RICOH_2A03] best 2006 combination 
Uplifting [ObjectAttribute] best 2006 combination 
Uplifting [moveLuigiRight] best 2006 combination 
Uplifting [moveLuigiLeft] best 2006 combination 
Uplifting [] best 2006 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// A minimal NES demo
// Based on: https://github.com/gregkrsak/first_nes written by Greg M. Krsak, 2018. 
  // Upstart
  // Nintendo Entertainment System (NES) ROM
// https://sadistech.com/nesromtool/romdoc.html
// https://forums.nesdev.com/viewtopic.php?f=2&t=9896
// https://github.com/gregkrsak/first_nes
.file [name="nes-demo.nes", type="bin", segments="NesRom"]
.file [name="nes-demo.nes_hdr", type="bin", segments="Header"]
.file [name="nes-demo.nes_prg", type="bin", segments="ProgramRom"]
.file [name="nes-demo.nes_chr", type="bin", segments="CharacterRom"]
.segmentdef Header  [ start=$0000,       min=$0000, max=$000f, fill ]
.segmentdef Tiles   [ start=$0000,       min=$0000, max=$1fff, fill ]
.segmentdef Code    [ start=$c000,       min=$c000, max=$fff9 ]
.segmentdef Data    [ startAfter="Code", min=$c000, max=$fff9 ]
.segmentdef Vectors [ start=$fffa,       min=$fffa, max=$ffff ]
.segmentdef ProgramRom [ segments="Code, Data, Vectors" ]
.segmentdef CharacterRom [ segments="Tiles" ]
.segmentdef NesRom
.segment NesRom
.segmentout [ segments="Header" ]
.segmentout [ segments="ProgramRom" ]
.segmentout [ segments="CharacterRom" ]
.segment Header
.text   @"NES\$1a"
.byte   $01           // 1x 16KB ROM (PRG)
.byte   $01           // 1x 8KB VROM (CHR)
.byte   %00000001     // Mapper nibble 0000 == No mapping (a simple 16KB PRG + 8KB CHR game)
                      // Mirroring nibble 0001 == Vertical mirroring only
.segment Code

  // Global Constants & labels
  .const SIZEOF_STRUCT_OBJECTATTRIBUTE = 4
  .const OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
  .const OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
  .const OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
  .const OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
  .const OFFSET_STRUCT_OBJECTATTRIBUTE_X = 3
  .const OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
  .const OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
  .const OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
  .const OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
  .const SIZEOF_BYTE = 1
  // $3000-$3EFF	$0F00	Mirrors of $2000-$2EFF
  // $3F00-$3F1F	$0020	Palette RAM indexes
  .label PPU_PALETTE = $3f00
  // APU Frame Counter
  // generates low-frequency clocks for the channels and an optional 60 Hz interrupt.
  // https://wiki.nesdev.com/w/index.php/APU_Frame_Counter
  // ------+-----+---------------------------------------------------------------
  //  $4017 |	 W  | FR_COUNTER Frame Counter	Set mode and interrupt
  //  ------+-----+---------------------------------------------------------------
  //        |   7	| Sequencer mode: 0 selects 4-step sequence, 1 selects 5-step sequence
  //        |   6	| Interrupt inhibit flag. If set, the frame interrupt flag is cleared, otherwise it is unaffected.
  //  ------+-----+---------------------------------------------------------------
  // Side effects	After 3 or 4 CPU clock cycles*, the timer is reset.
  // If the mode flag is set, then both "quarter frame" and "half frame" signals are also generated.
  .label FR_COUNTER = $4017
  // Pointer to the start of RAM memory
  .label MEMORY = 0
  // OAM (Object Attribute Memory) Buffer
  // Will be transfered to the PPU via DMA
  .label OAM_BUFFER = $200
  // PPU Status Register for reading in ASM
  .label PPU_PPUSTATUS = $2002
  // NES Picture Processing Unit (PPU)
  .label PPU = $2000
  // NES CPU and audion processing unit (APU)
  .label APU = $4000
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
.segment Code
  // main
// RESET Called when the NES is reset, including when it is turned on.
main: {
    // asm { cld ldx#$ff txs  }
    // Initialize decimal-mode and stack
    cld
    ldx #$ff
    txs
    jmp disableVideoOutput1
    // main::disableVideoOutput1
  disableVideoOutput1:
    // [5] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU
    // [6] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    jmp disableAudioOutput1
    // main::disableAudioOutput1
  disableAudioOutput1:
    // [7] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta FR_COUNTER
    // [8] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
    jmp clearVBlankFlag1
    // main::clearVBlankFlag1
  clearVBlankFlag1:
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [10] phi from main::clearVBlankFlag1 to main::waitForVBlank1 [phi:main::clearVBlankFlag1->main::waitForVBlank1]
  waitForVBlank1_from_clearVBlankFlag1:
    jmp waitForVBlank1
    // main::waitForVBlank1
  waitForVBlank1:
    jmp waitForVBlank1___b1
    // main::waitForVBlank1_@1
  waitForVBlank1___b1:
    // [11] (byte~) main::waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // [12] if((byte) 0==(byte~) main::waitForVBlank1_$0) goto main::waitForVBlank1_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq waitForVBlank1___b1
    // [13] phi from main::waitForVBlank1_@1 to main::@1 [phi:main::waitForVBlank1_@1->main::@1]
  __b1_from_waitForVBlank1___b1:
    // [13] phi (byte) main::i#2 = (byte) 0 [phi:main::waitForVBlank1_@1->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [13] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [13] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [14] *((const nomodify byte*) MEMORY + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY,x
    // [15] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$100,x
    // [16] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$200,x
    // [17] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$300,x
    // [18] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$400,x
    // [19] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$500,x
    // [20] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$600,x
    // [21] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$700,x
    // [22] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [23] if((byte) 0!=(byte) main::i#1) goto main::@1 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b1_from___b1
    // [24] phi from main::@1 to main::waitForVBlank2 [phi:main::@1->main::waitForVBlank2]
  waitForVBlank2_from___b1:
    jmp waitForVBlank2
    // main::waitForVBlank2
  waitForVBlank2:
    jmp waitForVBlank2___b1
    // main::waitForVBlank2_@1
  waitForVBlank2___b1:
    // [25] (byte~) main::waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // [26] if((byte) 0==(byte~) main::waitForVBlank2_$0) goto main::waitForVBlank2_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq waitForVBlank2___b1
    // [27] phi from main::waitForVBlank2_@1 to main::@3 [phi:main::waitForVBlank2_@1->main::@3]
  __b3_from_waitForVBlank2___b1:
    jmp __b3
    // main::@3
  __b3:
    // [28] call initPalette 
    // Now the PPU is ready.
    jsr initPalette
    // [29] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [30] call initSpriteBuffer 
    // [34] phi from main::@4 to initSpriteBuffer [phi:main::@4->initSpriteBuffer]
  initSpriteBuffer_from___b4:
    jsr initSpriteBuffer
    jmp enableVideoOutput1
    // main::enableVideoOutput1
  enableVideoOutput1:
    // [31] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 -- _deref_pbuc1=vbuc2 
    lda #$80
    sta PPU
    // [32] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $10 -- _deref_pbuc1=vbuc2 
    lda #$10
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // [33] phi from main::@2 main::enableVideoOutput1 to main::@2 [phi:main::@2/main::enableVideoOutput1->main::@2]
  __b2_from___b2:
  __b2_from_enableVideoOutput1:
    jmp __b2
  // Infinite loop
    // main::@2
  __b2:
    jmp __b2_from___b2
}
  // initSpriteBuffer
// Initialize OAM (Object Attribute Memory) Buffer with the SPRITE data
initSpriteBuffer: {
    // [35] phi from initSpriteBuffer to initSpriteBuffer::@1 [phi:initSpriteBuffer->initSpriteBuffer::@1]
  __b1_from_initSpriteBuffer:
    // [35] phi (byte) initSpriteBuffer::i#2 = (byte) 0 [phi:initSpriteBuffer->initSpriteBuffer::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [35] phi from initSpriteBuffer::@1 to initSpriteBuffer::@1 [phi:initSpriteBuffer::@1->initSpriteBuffer::@1]
  __b1_from___b1:
    // [35] phi (byte) initSpriteBuffer::i#2 = (byte) initSpriteBuffer::i#1 [phi:initSpriteBuffer::@1->initSpriteBuffer::@1#0] -- register_copy 
    jmp __b1
    // initSpriteBuffer::@1
  __b1:
    // [36] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER + (byte) initSpriteBuffer::i#2) ← *((byte*)(const struct ObjectAttribute*) SPRITES + (byte) initSpriteBuffer::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda SPRITES,x
    sta OAM_BUFFER,x
    // [37] (byte) initSpriteBuffer::i#1 ← ++ (byte) initSpriteBuffer::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [38] if((byte) initSpriteBuffer::i#1!=(byte) 4*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) goto initSpriteBuffer::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4*SIZEOF_STRUCT_OBJECTATTRIBUTE
    bne __b1_from___b1
    jmp __breturn
    // initSpriteBuffer::@return
  __breturn:
    // [39] return 
    rts
}
  // initPalette
// Copy palette values to PPU
initPalette: {
    // asm { ldaPPU_PPUSTATUS  }
    // Reset the high/low latch to "high"
    lda PPU_PPUSTATUS
    // [41] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify byte*) PPU_PALETTE -- _deref_pbuc1=vbuc2 
    // Write the high byte of PPU Palette address
    lda #>PPU_PALETTE
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [42] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Write the low byte of PPU Palette address
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [43] phi from initPalette to initPalette::@1 [phi:initPalette->initPalette::@1]
  __b1_from_initPalette:
    // [43] phi (byte) initPalette::i#2 = (byte) 0 [phi:initPalette->initPalette::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // Write to PPU
    // initPalette::@1
  __b1:
    // [44] if((byte) initPalette::i#2<(byte) $20*(const byte) SIZEOF_BYTE) goto initPalette::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$20*SIZEOF_BYTE
    bcc __b2
    jmp __breturn
    // initPalette::@return
  __breturn:
    // [45] return 
    rts
    // initPalette::@2
  __b2:
    // [46] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← *((const byte*) PALETTE + (byte) initPalette::i#2) -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda PALETTE,x
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // [47] (byte) initPalette::i#1 ← ++ (byte) initPalette::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [43] phi from initPalette::@2 to initPalette::@1 [phi:initPalette::@2->initPalette::@1]
  __b1_from___b2:
    // [43] phi (byte) initPalette::i#2 = (byte) initPalette::i#1 [phi:initPalette::@2->initPalette::@1#0] -- register_copy 
    jmp __b1
}
  // vblank
// NMI Called when the PPU refreshes the screen (also known as the V-Blank period)
vblank: {
    // entry interrupt(HARDWARE_STACK)
    pha
    txa
    pha
    tya
    pha
    jmp transferSpriteBufferToPpu1
    // vblank::transferSpriteBufferToPpu1
  transferSpriteBufferToPpu1:
    // [49] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR
    // [50] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA) ← >(const nomodify struct ObjectAttribute*) OAM_BUFFER -- _deref_pbuc1=vbuc2 
    lda #>OAM_BUFFER
    sta APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA
    jmp __b4
    // vblank::@4
  __b4:
    // [51] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    // Freeze the button positions.
    lda #1
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [52] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [53] (byte~) vblank::$1 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [54] if((byte) 0==(byte~) vblank::$1) goto vblank::@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b1
    // [55] phi from vblank::@4 to vblank::@2 [phi:vblank::@4->vblank::@2]
  __b2_from___b4:
    jmp __b2
    // vblank::@2
  __b2:
    // [56] call moveLuigiRight 
    jsr moveLuigiRight
    jmp __b1
    // vblank::@1
  __b1:
    // [57] (byte~) vblank::$3 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [58] if((byte) 0==(byte~) vblank::$3) goto vblank::@return -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __breturn
    // [59] phi from vblank::@1 to vblank::@3 [phi:vblank::@1->vblank::@3]
  __b3_from___b1:
    jmp __b3
    // vblank::@3
  __b3:
    // [60] call moveLuigiLeft 
    jsr moveLuigiLeft
    jmp __breturn
    // vblank::@return
  __breturn:
    // [61] return  - exit interrupt(HARDWARE_STACK)
    pla
    tay
    pla
    tax
    pla
    rti
}
  // moveLuigiLeft
// move the Luigi sprites left
moveLuigiLeft: {
    // [62] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X
    // [63] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 1*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 1*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+1*SIZEOF_STRUCT_OBJECTATTRIBUTE
    // [64] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 2*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 2*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+2*SIZEOF_STRUCT_OBJECTATTRIBUTE
    // [65] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 3*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 3*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+3*SIZEOF_STRUCT_OBJECTATTRIBUTE
    jmp __breturn
    // moveLuigiLeft::@return
  __breturn:
    // [66] return 
    rts
}
  // moveLuigiRight
// move the Luigi sprites right
moveLuigiRight: {
    // [67] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X
    // [68] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 1*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 1*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+1*SIZEOF_STRUCT_OBJECTATTRIBUTE
    // [69] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 2*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 2*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+2*SIZEOF_STRUCT_OBJECTATTRIBUTE
    // [70] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 3*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 3*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+3*SIZEOF_STRUCT_OBJECTATTRIBUTE
    jmp __breturn
    // moveLuigiRight::@return
  __breturn:
    // [71] return 
    rts
}
  // File Data
.segment Data
  // Small Luigi Sprite Data
  SPRITES: .byte $80, $36, 2, $80, $80, $37, 2, $88, $88, $38, 2, $80, $88, $39, 2, $88
  PALETTE: .byte $f, $31, $32, $33, $f, $35, $36, $37, $f, $39, $3a, $3b, $f, $3d, $3e, $f, $f, $1c, $15, $14, $f, 2, $38, $3c, $f, $30, $37, $1a, $f, $f, $f, $f
.segment Tiles
TILES:
.import binary "smb1_chr.bin"

.segment Vectors
  VECTORS: .word vblank, main, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp disableVideoOutput1
Removing instruction jmp disableAudioOutput1
Removing instruction jmp clearVBlankFlag1
Removing instruction jmp waitForVBlank1
Removing instruction jmp waitForVBlank1___b1
Removing instruction jmp __b1
Removing instruction jmp waitForVBlank2
Removing instruction jmp waitForVBlank2___b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp enableVideoOutput1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp transferSpriteBufferToPpu1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #$40
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label waitForVBlank1___b1 with waitForVBlank1
Replacing label __b1_from___b1 with __b1
Replacing label waitForVBlank2___b1 with waitForVBlank2
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Removing instruction waitForVBlank1_from_clearVBlankFlag1:
Removing instruction waitForVBlank1___b1:
Removing instruction __b1_from___b1:
Removing instruction waitForVBlank2_from___b1:
Removing instruction waitForVBlank2___b1:
Removing instruction __b3_from_waitForVBlank2___b1:
Removing instruction __b4_from___b3:
Removing instruction initSpriteBuffer_from___b4:
Removing instruction __b2_from_enableVideoOutput1:
Removing instruction __b1_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction disableVideoOutput1:
Removing instruction disableAudioOutput1:
Removing instruction clearVBlankFlag1:
Removing instruction __b1_from_waitForVBlank1___b1:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction enableVideoOutput1:
Removing instruction __b2:
Removing instruction __b1_from_initSpriteBuffer:
Removing instruction __breturn:
Removing instruction __b1_from_initPalette:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction transferSpriteBufferToPpu1:
Removing instruction __b4:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Relabelling long label __b2_from___b2 to __b2
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldx #0 with TAX

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const struct RICOH_2A03*) APU = (struct RICOH_2A03*) 16384
(const nomodify byte*) FR_COUNTER = (byte*) 16407
(const nomodify byte*) MEMORY = (byte*) 0
(const nomodify struct ObjectAttribute*) OAM_BUFFER = (struct ObjectAttribute*) 512
(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X = (byte) 3
(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = (byte) $10
(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1 = (byte) $16
(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA = (byte) $14
(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR = (byte) 3
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR = (byte) 6
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA = (byte) 7
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK = (byte) 1
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = (byte) 2
(byte) ObjectAttribute::attributes
(byte) ObjectAttribute::tile
(byte) ObjectAttribute::x
(byte) ObjectAttribute::y
(const byte*) PALETTE[(number) $20]  = { (byte) $f, (byte) $31, (byte) $32, (byte) $33, (byte) $f, (byte) $35, (byte) $36, (byte) $37, (byte) $f, (byte) $39, (byte) $3a, (byte) $3b, (byte) $f, (byte) $3d, (byte) $3e, (byte) $f, (byte) $f, (byte) $1c, (byte) $15, (byte) $14, (byte) $f, (byte) 2, (byte) $38, (byte) $3c, (byte) $f, (byte) $30, (byte) $37, (byte) $1a, (byte) $f, (byte) $f, (byte) $f, (byte) $f }
(const struct RICOH_2C02*) PPU = (struct RICOH_2C02*) 8192
(const nomodify byte*) PPU_PALETTE = (byte*) 16128
(const to_volatile byte*) PPU_PPUSTATUS = (byte*) 8194
(byte) RICOH_2A03::DMC_FREQ
(byte) RICOH_2A03::DMC_LEN
(byte) RICOH_2A03::DMC_RAW
(byte) RICOH_2A03::DMC_START
(byte) RICOH_2A03::JOY1
(byte) RICOH_2A03::JOY2
(byte) RICOH_2A03::NOISE_HI
(byte) RICOH_2A03::NOISE_LO
(byte) RICOH_2A03::NOISE_VOL
(byte) RICOH_2A03::OAMDMA
(byte) RICOH_2A03::SND_CHN
(byte) RICOH_2A03::SQ1_HI
(byte) RICOH_2A03::SQ1_LO
(byte) RICOH_2A03::SQ1_SWEEP
(byte) RICOH_2A03::SQ1_VOL
(byte) RICOH_2A03::SQ2_HI
(byte) RICOH_2A03::SQ2_LO
(byte) RICOH_2A03::SQ2_SWEEP
(byte) RICOH_2A03::SQ2_VOL
(byte) RICOH_2A03::TRI_HI
(byte) RICOH_2A03::TRI_LINEAR
(byte) RICOH_2A03::TRI_LO
(byte) RICOH_2A03::UNUSED1
(byte) RICOH_2A03::UNUSED2
(byte) RICOH_2C02::OAMADDR
(byte) RICOH_2C02::OAMDATA
(byte) RICOH_2C02::PPUADDR
(byte) RICOH_2C02::PPUCTRL
(byte) RICOH_2C02::PPUDATA
(byte) RICOH_2C02::PPUMASK
(byte) RICOH_2C02::PPUSCROLL
(volatile byte) RICOH_2C02::PPUSTATUS loadstore
(const byte) SIZEOF_BYTE = (byte) 1
(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE = (byte) 4
(const struct ObjectAttribute*) SPRITES[]  = { { y: (byte) $80, tile: (byte) $36, attributes: (byte) 2, x: (byte) $80 }, { y: (byte) $80, tile: (byte) $37, attributes: (byte) 2, x: (byte) $88 }, { y: (byte) $88, tile: (byte) $38, attributes: (byte) 2, x: (byte) $80 }, { y: (byte) $88, tile: (byte) $39, attributes: (byte) 2, x: (byte) $88 } }
(const byte*) TILES[]  = kickasm {{ .import binary "smb1_chr.bin"
 }}
(const to_nomodify void()**) VECTORS[]  = { &interrupt(HARDWARE_STACK)(void()) vblank(), &(void()) main(), (void()*) 0 }
(void()) initPalette()
(label) initPalette::@1
(label) initPalette::@2
(label) initPalette::@return
(byte) initPalette::i
(byte) initPalette::i#1 reg byte x 2002.0
(byte) initPalette::i#2 reg byte x 1334.6666666666667
(void()) initSpriteBuffer()
(label) initSpriteBuffer::@1
(label) initSpriteBuffer::@return
(byte) initSpriteBuffer::i
(byte) initSpriteBuffer::i#1 reg byte x 1501.5
(byte) initSpriteBuffer::i#2 reg byte x 2002.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::clearVBlankFlag1
(label) main::disableAudioOutput1
(label) main::disableVideoOutput1
(label) main::enableVideoOutput1
(byte) main::i
(byte) main::i#1 reg byte x 151.5
(byte) main::i#2 reg byte x 112.22222222222223
(label) main::waitForVBlank1
(byte~) main::waitForVBlank1_$0 reg byte a 202.0
(label) main::waitForVBlank1_@1
(label) main::waitForVBlank2
(byte~) main::waitForVBlank2_$0 reg byte a 202.0
(label) main::waitForVBlank2_@1
(void()) moveLuigiLeft()
(label) moveLuigiLeft::@return
(void()) moveLuigiRight()
(label) moveLuigiRight::@return
interrupt(HARDWARE_STACK)(void()) vblank()
(byte~) vblank::$1 reg byte a 4.0
(byte~) vblank::$3 reg byte a 4.0
(label) vblank::@1
(label) vblank::@2
(label) vblank::@3
(label) vblank::@4
(label) vblank::@return
(label) vblank::transferSpriteBufferToPpu1

reg byte x [ main::i#2 main::i#1 ]
reg byte x [ initSpriteBuffer::i#2 initSpriteBuffer::i#1 ]
reg byte x [ initPalette::i#2 initPalette::i#1 ]
reg byte a [ main::waitForVBlank1_$0 ]
reg byte a [ main::waitForVBlank2_$0 ]
reg byte a [ vblank::$1 ]
reg byte a [ vblank::$3 ]


FINAL ASSEMBLER
Score: 1475

  // File Comments
// A minimal NES demo
// Based on: https://github.com/gregkrsak/first_nes written by Greg M. Krsak, 2018. 
  // Upstart
  // Nintendo Entertainment System (NES) ROM
// https://sadistech.com/nesromtool/romdoc.html
// https://forums.nesdev.com/viewtopic.php?f=2&t=9896
// https://github.com/gregkrsak/first_nes
.file [name="nes-demo.nes", type="bin", segments="NesRom"]
.file [name="nes-demo.nes_hdr", type="bin", segments="Header"]
.file [name="nes-demo.nes_prg", type="bin", segments="ProgramRom"]
.file [name="nes-demo.nes_chr", type="bin", segments="CharacterRom"]
.segmentdef Header  [ start=$0000,       min=$0000, max=$000f, fill ]
.segmentdef Tiles   [ start=$0000,       min=$0000, max=$1fff, fill ]
.segmentdef Code    [ start=$c000,       min=$c000, max=$fff9 ]
.segmentdef Data    [ startAfter="Code", min=$c000, max=$fff9 ]
.segmentdef Vectors [ start=$fffa,       min=$fffa, max=$ffff ]
.segmentdef ProgramRom [ segments="Code, Data, Vectors" ]
.segmentdef CharacterRom [ segments="Tiles" ]
.segmentdef NesRom
.segment NesRom
.segmentout [ segments="Header" ]
.segmentout [ segments="ProgramRom" ]
.segmentout [ segments="CharacterRom" ]
.segment Header
.text   @"NES\$1a"
.byte   $01           // 1x 16KB ROM (PRG)
.byte   $01           // 1x 8KB VROM (CHR)
.byte   %00000001     // Mapper nibble 0000 == No mapping (a simple 16KB PRG + 8KB CHR game)
                      // Mirroring nibble 0001 == Vertical mirroring only
.segment Code

  // Global Constants & labels
  .const SIZEOF_STRUCT_OBJECTATTRIBUTE = 4
  .const OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
  .const OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
  .const OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
  .const OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
  .const OFFSET_STRUCT_OBJECTATTRIBUTE_X = 3
  .const OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
  .const OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
  .const OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
  .const OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
  .const SIZEOF_BYTE = 1
  // $3000-$3EFF	$0F00	Mirrors of $2000-$2EFF
  // $3F00-$3F1F	$0020	Palette RAM indexes
  .label PPU_PALETTE = $3f00
  // APU Frame Counter
  // generates low-frequency clocks for the channels and an optional 60 Hz interrupt.
  // https://wiki.nesdev.com/w/index.php/APU_Frame_Counter
  // ------+-----+---------------------------------------------------------------
  //  $4017 |	 W  | FR_COUNTER Frame Counter	Set mode and interrupt
  //  ------+-----+---------------------------------------------------------------
  //        |   7	| Sequencer mode: 0 selects 4-step sequence, 1 selects 5-step sequence
  //        |   6	| Interrupt inhibit flag. If set, the frame interrupt flag is cleared, otherwise it is unaffected.
  //  ------+-----+---------------------------------------------------------------
  // Side effects	After 3 or 4 CPU clock cycles*, the timer is reset.
  // If the mode flag is set, then both "quarter frame" and "half frame" signals are also generated.
  .label FR_COUNTER = $4017
  // Pointer to the start of RAM memory
  .label MEMORY = 0
  // OAM (Object Attribute Memory) Buffer
  // Will be transfered to the PPU via DMA
  .label OAM_BUFFER = $200
  // PPU Status Register for reading in ASM
  .label PPU_PPUSTATUS = $2002
  // NES Picture Processing Unit (PPU)
  .label PPU = $2000
  // NES CPU and audion processing unit (APU)
  .label APU = $4000
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
.segment Code
  // main
// RESET Called when the NES is reset, including when it is turned on.
main: {
    // asm
    // asm { cld ldx#$ff txs  }
    // Initialize decimal-mode and stack
    cld
    ldx #$ff
    txs
    // main::disableVideoOutput1
    // PPU->PPUCTRL = 0
    // [5] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU
    // PPU->PPUMASK = 0
    // [6] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // main::disableAudioOutput1
    // *FR_COUNTER = 0b01000000
    // [7] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta FR_COUNTER
    // APU->DMC_FREQ  = 0b01000000
    // [8] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    sta APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
    // main::clearVBlankFlag1
    // asm
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [10] phi from main::clearVBlankFlag1 to main::waitForVBlank1 [phi:main::clearVBlankFlag1->main::waitForVBlank1]
    // main::waitForVBlank1
  waitForVBlank1:
    // main::waitForVBlank1_@1
    // PPU->PPUSTATUS&0x80
    // [11] (byte~) main::waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // while(!(PPU->PPUSTATUS&0x80))
    // [12] if((byte) 0==(byte~) main::waitForVBlank1_$0) goto main::waitForVBlank1_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq waitForVBlank1
    // [13] phi from main::waitForVBlank1_@1 to main::@1 [phi:main::waitForVBlank1_@1->main::@1]
    // [13] phi (byte) main::i#2 = (byte) 0 [phi:main::waitForVBlank1_@1->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [13] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [13] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // (MEMORY+0x000)[i] = 0
    // [14] *((const nomodify byte*) MEMORY + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY,x
    // (MEMORY+0x100)[i] = 0
    // [15] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$100,x
    // (MEMORY+0x200)[i] = 0
    // [16] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$200,x
    // (MEMORY+0x300)[i] = 0
    // [17] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$300,x
    // (MEMORY+0x400)[i] = 0
    // [18] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$400,x
    // (MEMORY+0x500)[i] = 0
    // [19] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$500,x
    // (MEMORY+0x600)[i] = 0
    // [20] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$600,x
    // (MEMORY+0x700)[i] = 0
    // [21] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$700,x
    // while (++i)
    // [22] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [23] if((byte) 0!=(byte) main::i#1) goto main::@1 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b1
    // [24] phi from main::@1 to main::waitForVBlank2 [phi:main::@1->main::waitForVBlank2]
    // main::waitForVBlank2
  waitForVBlank2:
    // main::waitForVBlank2_@1
    // PPU->PPUSTATUS&0x80
    // [25] (byte~) main::waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // while(!(PPU->PPUSTATUS&0x80))
    // [26] if((byte) 0==(byte~) main::waitForVBlank2_$0) goto main::waitForVBlank2_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq waitForVBlank2
    // [27] phi from main::waitForVBlank2_@1 to main::@3 [phi:main::waitForVBlank2_@1->main::@3]
    // main::@3
    // initPalette()
    // [28] call initPalette 
    // Now the PPU is ready.
    jsr initPalette
    // [29] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // main::@4
    // initSpriteBuffer()
    // [30] call initSpriteBuffer 
    // [34] phi from main::@4 to initSpriteBuffer [phi:main::@4->initSpriteBuffer]
    jsr initSpriteBuffer
    // main::enableVideoOutput1
    // PPU->PPUCTRL = 0b10000000
    // [31] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 -- _deref_pbuc1=vbuc2 
    lda #$80
    sta PPU
    // PPU->PPUMASK = 0b00010000
    // [32] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $10 -- _deref_pbuc1=vbuc2 
    lda #$10
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // [33] phi from main::@2 main::enableVideoOutput1 to main::@2 [phi:main::@2/main::enableVideoOutput1->main::@2]
  __b2:
  // Infinite loop
    // main::@2
    jmp __b2
}
  // initSpriteBuffer
// Initialize OAM (Object Attribute Memory) Buffer with the SPRITE data
initSpriteBuffer: {
    // [35] phi from initSpriteBuffer to initSpriteBuffer::@1 [phi:initSpriteBuffer->initSpriteBuffer::@1]
    // [35] phi (byte) initSpriteBuffer::i#2 = (byte) 0 [phi:initSpriteBuffer->initSpriteBuffer::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [35] phi from initSpriteBuffer::@1 to initSpriteBuffer::@1 [phi:initSpriteBuffer::@1->initSpriteBuffer::@1]
    // [35] phi (byte) initSpriteBuffer::i#2 = (byte) initSpriteBuffer::i#1 [phi:initSpriteBuffer::@1->initSpriteBuffer::@1#0] -- register_copy 
    // initSpriteBuffer::@1
  __b1:
    // ((char*)OAM_BUFFER)[i] = ((char*)SPRITES)[i]
    // [36] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER + (byte) initSpriteBuffer::i#2) ← *((byte*)(const struct ObjectAttribute*) SPRITES + (byte) initSpriteBuffer::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda SPRITES,x
    sta OAM_BUFFER,x
    // while (++i!=sizeof(SPRITES))
    // [37] (byte) initSpriteBuffer::i#1 ← ++ (byte) initSpriteBuffer::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [38] if((byte) initSpriteBuffer::i#1!=(byte) 4*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) goto initSpriteBuffer::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4*SIZEOF_STRUCT_OBJECTATTRIBUTE
    bne __b1
    // initSpriteBuffer::@return
    // }
    // [39] return 
    rts
}
  // initPalette
// Copy palette values to PPU
initPalette: {
    // asm
    // asm { ldaPPU_PPUSTATUS  }
    // Reset the high/low latch to "high"
    lda PPU_PPUSTATUS
    // PPU->PPUADDR = >PPU_PALETTE
    // [41] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify byte*) PPU_PALETTE -- _deref_pbuc1=vbuc2 
    // Write the high byte of PPU Palette address
    lda #>PPU_PALETTE
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // PPU->PPUADDR = <PPU_PALETTE
    // [42] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Write the low byte of PPU Palette address
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [43] phi from initPalette to initPalette::@1 [phi:initPalette->initPalette::@1]
    // [43] phi (byte) initPalette::i#2 = (byte) 0 [phi:initPalette->initPalette::@1#0] -- vbuxx=vbuc1 
    tax
  // Write to PPU
    // initPalette::@1
  __b1:
    // for(char i=0;i<sizeof(PALETTE);i++)
    // [44] if((byte) initPalette::i#2<(byte) $20*(const byte) SIZEOF_BYTE) goto initPalette::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$20*SIZEOF_BYTE
    bcc __b2
    // initPalette::@return
    // }
    // [45] return 
    rts
    // initPalette::@2
  __b2:
    // PPU->PPUDATA = PALETTE[i]
    // [46] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← *((const byte*) PALETTE + (byte) initPalette::i#2) -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda PALETTE,x
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // for(char i=0;i<sizeof(PALETTE);i++)
    // [47] (byte) initPalette::i#1 ← ++ (byte) initPalette::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [43] phi from initPalette::@2 to initPalette::@1 [phi:initPalette::@2->initPalette::@1]
    // [43] phi (byte) initPalette::i#2 = (byte) initPalette::i#1 [phi:initPalette::@2->initPalette::@1#0] -- register_copy 
    jmp __b1
}
  // vblank
// NMI Called when the PPU refreshes the screen (also known as the V-Blank period)
vblank: {
    // entry interrupt(HARDWARE_STACK)
    pha
    txa
    pha
    tya
    pha
    // vblank::transferSpriteBufferToPpu1
    // PPU->OAMADDR = 0
    // [49] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR
    // APU->OAMDMA = >OAM_BUFFER
    // [50] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA) ← >(const nomodify struct ObjectAttribute*) OAM_BUFFER -- _deref_pbuc1=vbuc2 
    lda #>OAM_BUFFER
    sta APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA
    // vblank::@4
    // APU->JOY1 = 1
    // [51] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    // Freeze the button positions.
    lda #1
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // APU->JOY1 = 0
    // [52] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // APU->JOY1&0b00000001
    // [53] (byte~) vblank::$1 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // if(APU->JOY1&0b00000001)
    // [54] if((byte) 0==(byte~) vblank::$1) goto vblank::@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b1
    // [55] phi from vblank::@4 to vblank::@2 [phi:vblank::@4->vblank::@2]
    // vblank::@2
    // moveLuigiRight()
    // [56] call moveLuigiRight 
    jsr moveLuigiRight
    // vblank::@1
  __b1:
    // APU->JOY1&0b00000001
    // [57] (byte~) vblank::$3 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // if(APU->JOY1&0b00000001)
    // [58] if((byte) 0==(byte~) vblank::$3) goto vblank::@return -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __breturn
    // [59] phi from vblank::@1 to vblank::@3 [phi:vblank::@1->vblank::@3]
    // vblank::@3
    // moveLuigiLeft()
    // [60] call moveLuigiLeft 
    jsr moveLuigiLeft
    // vblank::@return
  __breturn:
    // }
    // [61] return  - exit interrupt(HARDWARE_STACK)
    pla
    tay
    pla
    tax
    pla
    rti
}
  // moveLuigiLeft
// move the Luigi sprites left
moveLuigiLeft: {
    // OAM_BUFFER[0].x--;
    // [62] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X
    // OAM_BUFFER[1].x--;
    // [63] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 1*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 1*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+1*SIZEOF_STRUCT_OBJECTATTRIBUTE
    // OAM_BUFFER[2].x--;
    // [64] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 2*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 2*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+2*SIZEOF_STRUCT_OBJECTATTRIBUTE
    // OAM_BUFFER[3].x--;
    // [65] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 3*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← -- *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 3*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+3*SIZEOF_STRUCT_OBJECTATTRIBUTE
    // moveLuigiLeft::@return
    // }
    // [66] return 
    rts
}
  // moveLuigiRight
// move the Luigi sprites right
moveLuigiRight: {
    // OAM_BUFFER[0].x++;
    // [67] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X
    // OAM_BUFFER[1].x++;
    // [68] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 1*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 1*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+1*SIZEOF_STRUCT_OBJECTATTRIBUTE
    // OAM_BUFFER[2].x++;
    // [69] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 2*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 2*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+2*SIZEOF_STRUCT_OBJECTATTRIBUTE
    // OAM_BUFFER[3].x++;
    // [70] *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 3*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) ← ++ *((byte*)(const nomodify struct ObjectAttribute*) OAM_BUFFER+(const byte) OFFSET_STRUCT_OBJECTATTRIBUTE_X+(byte) 3*(const byte) SIZEOF_STRUCT_OBJECTATTRIBUTE) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+OFFSET_STRUCT_OBJECTATTRIBUTE_X+3*SIZEOF_STRUCT_OBJECTATTRIBUTE
    // moveLuigiRight::@return
    // }
    // [71] return 
    rts
}
  // File Data
.segment Data
  // Small Luigi Sprite Data
  SPRITES: .byte $80, $36, 2, $80, $80, $37, 2, $88, $88, $38, 2, $80, $88, $39, 2, $88
  PALETTE: .byte $f, $31, $32, $33, $f, $35, $36, $37, $f, $39, $3a, $3b, $f, $3d, $3e, $f, $f, $1c, $15, $14, $f, 2, $38, $3c, $f, $30, $37, $1a, $f, $f, $f, $f
.segment Tiles
TILES:
.import binary "smb1_chr.bin"

.segment Vectors
  VECTORS: .word vblank, main, 0

