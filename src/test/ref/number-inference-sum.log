
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (number~) main::$0 ← (const byte) main::b1 + (number) $fa
  (byte) main::b2#0 ← (number~) main::$0
  (number~) main::$1 ← (byte) main::b2#0 + (number) 1
  (word) main::w#0 ← (number~) main::$1
  (number~) main::$4 ← (number) 0 * (const byte) SIZEOF_WORD
  *((const nomodify word*) main::screen + (number~) main::$4) ← (word) main::w#0
  (bool~) main::$2 ← (word) main::w#0 > (number) $ff
  (bool~) main::$3 ← ! (bool~) main::$2
  if((bool~) main::$3) goto main::@return
  to:main::@1
main::@1: scope:[main]  from main
  *((const nomodify byte*) main::BG_COLOR) ← (const nomodify byte) main::RED
  to:main::@return
main::@return: scope:[main]  from main main::@1
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) SIZEOF_WORD = (byte) 2
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(number~) main::$0
(number~) main::$1
(bool~) main::$2
(bool~) main::$3
(number~) main::$4
(label) main::@1
(label) main::@return
(const nomodify byte*) main::BG_COLOR = (byte*)(number) $d020
(const nomodify byte) main::RED = (byte) 2
(const byte) main::b1 = (byte) $fa
(byte) main::b2
(byte) main::b2#0
(const nomodify word*) main::screen = (word*)(number) $400
(word) main::w
(word) main::w#0

Adding number conversion cast (unumber) $fa in (number~) main::$0 ← (const byte) main::b1 + (number) $fa
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (const byte) main::b1 + (unumber)(number) $fa
Adding number conversion cast (unumber) 1 in (number~) main::$1 ← (byte) main::b2#0 + (number) 1
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (byte) main::b2#0 + (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (number~) main::$4 ← (number) 0 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) main::$4 in (number~) main::$4 ← (unumber)(number) 0 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) $ff in (bool~) main::$2 ← (word) main::w#0 > (number) $ff
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (word*) 1024
Simplifying constant pointer cast (byte*) 53280
Simplifying constant integer cast $fa
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $fa
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (const byte) main::b1 + (byte) $fa
Inferred type updated to byte in (unumber~) main::$1 ← (byte) main::b2#0 + (byte) 1
Inferred type updated to byte in (unumber~) main::$4 ← (byte) 0 * (const byte) SIZEOF_WORD
Inversing boolean not [7] (bool~) main::$3 ← (word) main::w#0 <= (byte) $ff from [6] (bool~) main::$2 ← (word) main::w#0 > (byte) $ff
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::b2#0 = main::$0 
Alias main::w#0 = main::$1 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$3 [5] if((word) main::w#0<=(byte) $ff) goto main::@return
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [0] (byte) main::b2#0 ← (const byte) main::b1 + (byte) $fa
Constant right-side identified [2] (byte~) main::$4 ← (byte) 0 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::b2#0 = main::b1+$fa
Constant (const byte) main::$4 = 0*SIZEOF_WORD
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_WORD in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::screen in [3] *((const nomodify word*) main::screen + (const byte) main::$4) ← (word) main::w#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) main::$4
Eliminating unused constant (const byte) SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [0] (word) main::w#0 ← (const byte) main::b2#0 + (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) main::w#0 = main::b2#0+1
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [2] if((const word) main::w#0<=(byte) $ff) goto main::@return
Successful SSA optimization Pass2ConstantIfs
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify word*) main::screen) ← (const word) main::w#0
  to:main::@1
main::@1: scope:[main]  from main
  [1] *((const nomodify byte*) main::BG_COLOR) ← (const nomodify byte) main::RED
  to:main::@return
main::@return: scope:[main]  from main::@1
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::b2
(word) main::w

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test inference of number types using a long sum
// Currently fails - because the compiler does not handle byte+byte correctly (not truncating the result to 8 bits)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const RED = 2
    .const b1 = $fa
    .const b2 = b1+$fa
    .const w = b2+1
    .label screen = $400
    .label BG_COLOR = $d020
    // [0] *((const nomodify word*) main::screen) ← (const word) main::w#0 -- _deref_pwuc1=vwuc2 
    lda #<w
    sta screen
    lda #>w
    sta screen+1
    jmp __b1
    // main::@1
  __b1:
    // [1] *((const nomodify byte*) main::BG_COLOR) ← (const nomodify byte) main::RED -- _deref_pbuc1=vbuc2 
    lda #RED
    sta BG_COLOR
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify word*) main::screen) ← (const word) main::w#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const nomodify byte*) main::BG_COLOR) ← (const nomodify byte) main::RED [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 30 combination 
Uplifting [] best 30 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test inference of number types using a long sum
// Currently fails - because the compiler does not handle byte+byte correctly (not truncating the result to 8 bits)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const RED = 2
    .const b1 = $fa
    .const b2 = b1+$fa
    .const w = b2+1
    .label screen = $400
    .label BG_COLOR = $d020
    // [0] *((const nomodify word*) main::screen) ← (const word) main::w#0 -- _deref_pwuc1=vwuc2 
    lda #<w
    sta screen
    lda #>w
    sta screen+1
    jmp __b1
    // main::@1
  __b1:
    // [1] *((const nomodify byte*) main::BG_COLOR) ← (const nomodify byte) main::RED -- _deref_pbuc1=vbuc2 
    lda #RED
    sta BG_COLOR
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@1
(label) main::@return
(const nomodify byte*) main::BG_COLOR = (byte*) 53280
(const nomodify byte) main::RED = (byte) 2
(const byte) main::b1 = (byte) $fa
(byte) main::b2
(const byte) main::b2#0 b2 = (const byte) main::b1+(byte) $fa
(const nomodify word*) main::screen = (word*) 1024
(word) main::w
(const word) main::w#0 w = (const byte) main::b2#0+(byte) 1



FINAL ASSEMBLER
Score: 24

  // File Comments
// Test inference of number types using a long sum
// Currently fails - because the compiler does not handle byte+byte correctly (not truncating the result to 8 bits)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const RED = 2
    .const b1 = $fa
    .const b2 = b1+$fa
    .const w = b2+1
    .label screen = $400
    .label BG_COLOR = $d020
    // screen[0] = w
    // [0] *((const nomodify word*) main::screen) ← (const word) main::w#0 -- _deref_pwuc1=vwuc2 
    lda #<w
    sta screen
    lda #>w
    sta screen+1
    // main::@1
    // *BG_COLOR = RED
    // [1] *((const nomodify byte*) main::BG_COLOR) ← (const nomodify byte) main::RED -- _deref_pbuc1=vbuc2 
    lda #RED
    sta BG_COLOR
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

