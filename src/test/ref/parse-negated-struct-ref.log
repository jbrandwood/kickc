Setting struct to load/store in variable affected by address-of main::a = &aa

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::$3 = (byte*)main::a
  main::$2 = main::$3 + OFFSET_STRUCT_A_B
  main::$4 = 0 != *main::$2
  main::$0 = ! main::$4
  main::$1 = ! main::$0
  if(main::$1) goto main::@1
  to:main::@2
main::@1: scope:[main]  from main main::@2
  asm { jmp!a+ !a:  }
  to:main::@return
main::@2: scope:[main]  from main
  *main::SCREEN = 'a'
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
constant byte OFFSET_STRUCT_A_B = 0
void __start()
volatile struct A aa loadstore = { b: 1 }
void main()
bool~ main::$0
bool~ main::$1
byte*~ main::$2
byte*~ main::$3
bool~ main::$4
constant byte* const main::SCREEN = (byte*)$400
constant struct A* main::a = &aa

Adding number conversion cast (unumber) 0 in main::$4 = 0 != *main::$2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [3] main::$0 = 0 == *main::$2 from [2] main::$4 = 0 != *main::$2
Inversing boolean not [4] main::$1 = 0 != *main::$2 from [3] main::$0 = 0 == *main::$2
Successful SSA optimization Pass2UnaryNotSimplification
Simple Condition main::$1 [3] if(0!=*main::$2) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [0] main::$3 = (byte*)main::a
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$3 = (byte*)main::a
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [3] if(0!=*main::$2) goto main::@1  -- main::$3[OFFSET_STRUCT_A_B]
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero main::$3 in [1] main::$2 = main::$3 + OFFSET_STRUCT_A_B
Simplifying expression containing zero main::$3 in [3] if(0!=main::$3[OFFSET_STRUCT_A_B]) goto main::@1
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable main::$2 and assignment [0] main::$2 = main::$3
Eliminating unused constant OFFSET_STRUCT_A_B
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant inlined main::$3 = (byte*)main::a
Successful SSA optimization Pass2ConstantInlining
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] if(0!=*((byte*)main::a)) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main
  [1] *main::SCREEN = 'a'
  to:main::@1
main::@1: scope:[main]  from main main::@2
  asm { jmp!a+ !a:  }
  to:main::@return
main::@return: scope:[main]  from main::@1
  [3] return 
  to:@return


VARIABLE REGISTER WEIGHTS
volatile struct A aa loadstore = { b: 1 }
void main()

Initial phi equivalence classes
Added variable aa to live range equivalence class [ aa ]
Complete equivalence classes
[ aa ]
Allocated mem[1] [ aa ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] if(0!=*((byte*)main::a)) goto main::@1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *main::SCREEN = 'a' [ ] (  [ ] { }  ) always clobbers reg byte a 
Potential registers mem[1] [ aa ] : mem[1] , 

REGISTER UPLIFT SCOPES
Uplift Scope [A] 
Uplift Scope [main] 
Uplift Scope [] 0: mem[1] [ aa ] 

Uplifting [A] best 32 combination 
Uplifting [main] best 32 combination 
Uplifting [] best 32 combination mem[1] [ aa ] 
Attempting to uplift remaining variables inmem[1] [ aa ]
Uplifting [] best 32 combination mem[1] [ aa ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test parsing a negated struct reference - which causes problems with the ASMREL labels !a++
// https://gitlab.com/camelot/kickc/issues/266
  // Upstart
  // Commodore 64 PRG executable file
.file [name="parse-negated-struct-ref.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label a = aa
    // [0] if(0!=*((byte*)main::a)) goto main::@1 -- 0_neq__deref_pbuc1_then_la1 
    lda a
    cmp #0
    bne __b1
    jmp __b2
    // main::@2
  __b2:
    // [1] *main::SCREEN = 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta SCREEN
    jmp __b1
    // main::@1
  __b1:
    // asm { jmp!a+ !a:  }
    // ASMREL labels
    jmp !a+
  !a:
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
}
  // File Data
.segment Data
  aa: .byte 1

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to !a+ in bne __b1
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
volatile struct A aa loadstore mem[1] = { b: 1 }
void main()
constant byte* const main::SCREEN = (byte*) 1024
constant struct A* main::a = &aa

mem[1] [ aa ]


FINAL ASSEMBLER
Score: 23

  // File Comments
// Test parsing a negated struct reference - which causes problems with the ASMREL labels !a++
// https://gitlab.com/camelot/kickc/issues/266
  // Upstart
  // Commodore 64 PRG executable file
.file [name="parse-negated-struct-ref.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label a = aa
    // if(!a->b)
    // [0] if(0!=*((byte*)main::a)) goto main::@1 -- 0_neq__deref_pbuc1_then_la1 
    lda a
    cmp #0
    bne !a+
    // main::@2
    // *SCREEN = 'a'
    // [1] *main::SCREEN = 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta SCREEN
    // main::@1
    // asm
    // asm { jmp!a+ !a:  }
    // ASMREL labels
    jmp !a+
  !a:
    // main::@return
    // }
    // [3] return 
    rts
}
  // File Data
.segment Data
  aa: .byte 1

