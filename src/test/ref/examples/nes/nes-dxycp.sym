constant struct RICOH_2A03* APU = (struct RICOH_2A03*) 16384
constant byte* const FR_COUNTER = (byte*) 16407
constant byte* const MEMORY = (byte*) 0
constant byte* MESSAGE[$40]  = "rex-of-camelot-presents-a-dxycp-on-nintendo-entertainment-system"z
constant byte OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
constant byte OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
constant byte OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
constant byte OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
constant byte OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
constant byte OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
constant byte OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
constant byte OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
constant byte OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
constant byte OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES = 2
constant byte OFFSET_STRUCT_SPRITEDATA_TILE = 1
constant byte OFFSET_STRUCT_SPRITEDATA_X = 3
constant byte* PALETTE[$20]  = { 1, $21, $f, $30, 1, $21, $f, $30, 1, $21, $f, $30, 1, $21, $f, $30, 1, $f, $30, 8, 1, $f, $18, 8, 1, $30, $37, $1a, $f, $f, $f, $f }
constant struct RICOH_2C02* PPU = (struct RICOH_2C02*) 8192
constant byte* const PPU_ATTRIBUTE_TABLE_0 = (byte*) 9152
constant byte* const PPU_NAME_TABLE_0 = (byte*) 8192
constant byte* const PPU_PALETTE = (byte*) 16128
constant volatile byte* const PPU_PPUSTATUS = (byte*) 8194
constant const byte* SINTABLE_184[$ef]  = kickasm {{ .fill 239, round(71.5+71.5*sin(2*PI*i/239))
 }}
constant const byte* SINTABLE_240[$100]  = kickasm {{ .fill $100, round(115.5+107.5*sin(2*PI*i/256))
 }}
constant const byte* SINTABLE_64[$59]  = kickasm {{ .fill 89, round(52.5+52.5*sin(2*PI*i/89))
 }}
constant byte SIZEOF_BYTE = 1
constant struct SpriteData* SPRITE_BUFFER[$100]  = { fill( $100, 0) }
constant byte* TILES[]  = kickasm {{ .var filechargen = LoadBinary("characters.901225-01.bin")
     .for(var c=0; c<256; c++) {
        // Plane 0
        .fill 8, filechargen.get(c*8+i)
        // Plane 1
        .fill 8, 0
    }
 }}
constant void()* const* VECTORS[]  = { &vblank, &main, 0 }
void __start()
void main()
byte~ main::$7 reg byte y 126.25
byte main::initNES1_i
byte main::initNES1_i#1 reg byte x 151.5
byte main::initNES1_i#2 reg byte x 112.22222222222223
byte~ main::initNES1_waitForVBlank1_$0 reg byte a 202.0
byte~ main::initNES1_waitForVBlank2_$0 reg byte a 202.0
byte main::s
byte main::s#1 reg byte x 202.0
byte main::s#2 reg byte x 72.14285714285714
void ppuDataFill(void* const ppuDataFill::ppuData , byte ppuDataFill::val , word ppuDataFill::size)
word ppuDataFill::i
word ppuDataFill::i#1 i zp[2]:10 2002.0
word ppuDataFill::i#2 i zp[2]:10 1001.0
void* const ppuDataFill::ppuData
byte~ ppuDataFill::ppuDataPrepare1_$0 reg byte a 202.0
byte~ ppuDataFill::ppuDataPrepare1_$1 reg byte a 202.0
void* const ppuDataFill::ppuDataPrepare1_ppuData
void* const ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataPrepare1_ppuData zp[2]:6 67.33333333333333
byte ppuDataFill::ppuDataPut1_val
word ppuDataFill::size
word ppuDataFill::size#3 size zp[2]:8 111.22222222222223
byte ppuDataFill::val
byte ppuDataFill::val#4 reg byte x 111.22222222222223
void ppuDataTransfer(void* const ppuDataTransfer::ppuData , void* const ppuDataTransfer::cpuData , word ppuDataTransfer::size)
void* const ppuDataTransfer::cpuData
constant void* const ppuDataTransfer::cpuData#0 cpuData = (void* const)PALETTE
byte* ppuDataTransfer::cpuSrc
byte* ppuDataTransfer::cpuSrc#1 cpuSrc zp[2]:8 1001.0
byte* ppuDataTransfer::cpuSrc#2 cpuSrc zp[2]:8 750.75
word ppuDataTransfer::i
word ppuDataTransfer::i#1 i zp[2]:6 2002.0
word ppuDataTransfer::i#2 i zp[2]:6 600.5999999999999
void* const ppuDataTransfer::ppuData
constant void* const ppuDataTransfer::ppuData#0 ppuData = (void* const)PPU_PALETTE
void* const ppuDataTransfer::ppuDataPrepare1_ppuData
byte ppuDataTransfer::ppuDataPut1_val
byte ppuDataTransfer::ppuDataPut1_val#0 reg byte a 2002.0
word ppuDataTransfer::size
constant word ppuDataTransfer::size#0 size = $20*SIZEOF_BYTE
byte readJoy1()
byte~ readJoy1::$1 zp[1]:16 101.0
byte~ readJoy1::$2 reg byte a 202.0
byte readJoy1::i
byte readJoy1::i#1 reg byte x 202.0
byte readJoy1::i#2 reg byte x 60.599999999999994
byte readJoy1::joy
byte readJoy1::joy#1 reg byte a 101.0
byte readJoy1::joy#2 reg byte a 51.0
byte readJoy1::return
byte readJoy1::return#2 reg byte a 4.0
__interrupt(hardware_all) void vblank()
byte~ vblank::$10 reg byte x 4.0
byte~ vblank::$12 reg byte x 4.0
byte~ vblank::$14 reg byte a 22.0
byte~ vblank::$17 zp[1]:4 22.0
byte~ vblank::$19 zp[1]:4 22.0
byte~ vblank::$23 zp[1]:5 22.0
byte~ vblank::$25 zp[1]:5 22.0
byte~ vblank::$28 zp[1]:15 8.25
byte~ vblank::$5 reg byte x 4.0
byte~ vblank::$7 reg byte x 4.0
byte vblank::joy
byte vblank::joy#0 reg byte a 4.0
struct SpriteData* vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer
byte vblank::s
byte vblank::s#1 s zp[1]:2 22.0
byte vblank::s#2 s zp[1]:2 2.933333333333333
byte vblank::x_idx
byte vblank::x_idx#0 x_idx zp[1]:4 0.6666666666666666
byte vblank::x_idx#1 x_idx zp[1]:4 5.5
byte vblank::x_idx#2 x_idx zp[1]:4 7.125
byte vblank::x_idx_2
byte vblank::x_idx_2#0 x_idx_2 zp[1]:5 4.0
byte vblank::x_idx_2#1 x_idx_2 zp[1]:5 16.5
byte vblank::x_idx_2#2 x_idx_2 zp[1]:5 4.75
byte vblank::y_idx
byte vblank::y_idx#0 y_idx zp[1]:3 0.3333333333333333
byte vblank::y_idx#1 y_idx zp[1]:3 1.8333333333333333
byte vblank::y_idx#2 y_idx zp[1]:3 8.75
volatile byte x_sin_idx loadstore zp[1]:13 0.7692307692307693
volatile byte x_sin_idx_2 loadstore zp[1]:14 0.5555555555555556
volatile byte y_sin_idx loadstore zp[1]:12 0.8

reg byte x [ vblank::$7 vblank::$5 ]
reg byte x [ vblank::$12 vblank::$10 ]
zp[1]:2 [ vblank::s#2 vblank::s#1 ]
zp[1]:3 [ vblank::y_idx#2 vblank::y_idx#1 vblank::y_idx#0 ]
zp[1]:4 [ vblank::x_idx#2 vblank::x_idx#1 vblank::x_idx#0 vblank::$19 vblank::$17 ]
zp[1]:5 [ vblank::x_idx_2#2 vblank::x_idx_2#1 vblank::x_idx_2#0 vblank::$25 vblank::$23 ]
reg byte x [ main::initNES1_i#2 main::initNES1_i#1 ]
reg byte x [ main::s#2 main::s#1 ]
reg byte x [ readJoy1::i#2 readJoy1::i#1 ]
reg byte a [ readJoy1::joy#2 readJoy1::joy#1 ]
zp[2]:6 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
zp[2]:8 [ ppuDataFill::size#3 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ]
reg byte x [ ppuDataFill::val#4 ]
zp[2]:10 [ ppuDataFill::i#2 ppuDataFill::i#1 ]
zp[1]:12 [ y_sin_idx ]
zp[1]:13 [ x_sin_idx ]
zp[1]:14 [ x_sin_idx_2 ]
reg byte a [ readJoy1::return#2 ]
reg byte a [ vblank::joy#0 ]
zp[1]:15 [ vblank::$28 ]
reg byte a [ vblank::$14 ]
reg byte a [ main::initNES1_waitForVBlank1_$0 ]
reg byte a [ main::initNES1_waitForVBlank2_$0 ]
reg byte y [ main::$7 ]
zp[1]:16 [ readJoy1::$1 ]
reg byte a [ readJoy1::$2 ]
reg byte a [ ppuDataTransfer::ppuDataPut1_val#0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$1 ]
