Identified constant variable (signed byte*) main::SCREEN

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (signed byte[]) main::msg ← { (number) -1, (number) 0, (number) 1 }
  (signed byte*) main::SCREEN ← ((signed byte*)) (number) $400
  *((signed byte*) main::SCREEN + (number) 0) ← *((signed byte[]) main::msg + (number) 0)
  *((signed byte*) main::SCREEN + (number) 1) ← *((signed byte[]) main::msg + (number) 1)
  *((signed byte*) main::SCREEN + (number) 2) ← *((signed byte[]) main::msg + (number) 2)
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(label) main::@return
(signed byte*) main::SCREEN
(signed byte[]) main::msg

Adding number conversion cast (unumber) 0 in *((signed byte*) main::SCREEN + (number) 0) ← *((signed byte[]) main::msg + (number) 0)
Adding number conversion cast (unumber) 0 in *((signed byte*) main::SCREEN + (number) 0) ← *((signed byte[]) main::msg + (unumber)(number) 0)
Adding number conversion cast (unumber) 1 in *((signed byte*) main::SCREEN + (number) 1) ← *((signed byte[]) main::msg + (number) 1)
Adding number conversion cast (unumber) 1 in *((signed byte*) main::SCREEN + (number) 1) ← *((signed byte[]) main::msg + (unumber)(number) 1)
Adding number conversion cast (unumber) 2 in *((signed byte*) main::SCREEN + (number) 2) ← *((signed byte[]) main::msg + (number) 2)
Adding number conversion cast (unumber) 2 in *((signed byte*) main::SCREEN + (number) 2) ← *((signed byte[]) main::msg + (unumber)(number) 2)
Successful SSA optimization PassNAddNumberTypeConversions
Added casts to value list in (signed byte[]) main::msg ← (signed byte[]){ (signed byte)(number) -1, (signed byte)(number) 0, (signed byte)(number) 1 }
Successful SSA optimization PassNAddInitializerValueListTypeCasts
Inlining cast (signed byte*) main::SCREEN ← (signed byte*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast -1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant pointer cast (signed byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Identified constant from value list (signed byte[]) { (signed byte) -1, (signed byte) 0, (signed byte) 1 }
Successful SSA optimization Pass2ConstantInitializerValueLists
Constant (const signed byte[]) main::msg = { -1, 0, 1 }
Constant (const signed byte*) main::SCREEN = (signed byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::msg in [2] *((const signed byte*) main::SCREEN + (byte) 0) ← *((const signed byte[]) main::msg + (byte) 0)
Simplifying expression containing zero main::SCREEN in [2] *((const signed byte*) main::SCREEN + (byte) 0) ← *((const signed byte[]) main::msg)
Successful SSA optimization PassNSimplifyExpressionWithZero
Consolidated array index constant in *(main::msg+1)
Consolidated array index constant in *(main::SCREEN+1)
Consolidated array index constant in *(main::msg+2)
Consolidated array index constant in *(main::SCREEN+2)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((const signed byte*) main::SCREEN) ← *((const signed byte[]) main::msg)
  [5] *((const signed byte*) main::SCREEN+(byte) 1) ← *((const signed byte[]) main::msg+(byte) 1)
  [6] *((const signed byte*) main::SCREEN+(byte) 2) ← *((const signed byte[]) main::msg+(byte) 2)
  to:main::@return
main::@return: scope:[main]  from main
  [7] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test an array with mixed byte/number types
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    // [4] *((const signed byte*) main::SCREEN) ← *((const signed byte[]) main::msg) -- _deref_pbsc1=_deref_pbsc2 
    lda msg
    sta SCREEN
    // [5] *((const signed byte*) main::SCREEN+(byte) 1) ← *((const signed byte[]) main::msg+(byte) 1) -- _deref_pbsc1=_deref_pbsc2 
    lda msg+1
    sta SCREEN+1
    // [6] *((const signed byte*) main::SCREEN+(byte) 2) ← *((const signed byte[]) main::msg+(byte) 2) -- _deref_pbsc1=_deref_pbsc2 
    lda msg+2
    sta SCREEN+2
    jmp breturn
    // main::@return
  breturn:
    // [7] return 
    rts
    msg: .byte -1, 0, 1
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const signed byte*) main::SCREEN) ← *((const signed byte[]) main::msg) [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const signed byte*) main::SCREEN+(byte) 1) ← *((const signed byte[]) main::msg+(byte) 1) [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const signed byte*) main::SCREEN+(byte) 2) ← *((const signed byte[]) main::msg+(byte) 2) [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 45 combination 
Uplifting [] best 45 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test an array with mixed byte/number types
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    // [4] *((const signed byte*) main::SCREEN) ← *((const signed byte[]) main::msg) -- _deref_pbsc1=_deref_pbsc2 
    lda msg
    sta SCREEN
    // [5] *((const signed byte*) main::SCREEN+(byte) 1) ← *((const signed byte[]) main::msg+(byte) 1) -- _deref_pbsc1=_deref_pbsc2 
    lda msg+1
    sta SCREEN+1
    // [6] *((const signed byte*) main::SCREEN+(byte) 2) ← *((const signed byte[]) main::msg+(byte) 2) -- _deref_pbsc1=_deref_pbsc2 
    lda msg+2
    sta SCREEN+2
    jmp breturn
    // main::@return
  breturn:
    // [7] return 
    rts
    msg: .byte -1, 0, 1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@return
(const signed byte*) main::SCREEN SCREEN = (signed byte*) 1024
(const signed byte[]) main::msg msg = { (signed byte) -1, (signed byte) 0, (signed byte) 1 }



FINAL ASSEMBLER
Score: 30

  // File Comments
// Test an array with mixed byte/number types
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    // SCREEN[0] = msg[0]
    // [4] *((const signed byte*) main::SCREEN) ← *((const signed byte[]) main::msg) -- _deref_pbsc1=_deref_pbsc2 
    lda msg
    sta SCREEN
    // SCREEN[1] = msg[1]
    // [5] *((const signed byte*) main::SCREEN+(byte) 1) ← *((const signed byte[]) main::msg+(byte) 1) -- _deref_pbsc1=_deref_pbsc2 
    lda msg+1
    sta SCREEN+1
    // SCREEN[2] = msg[2]
    // [6] *((const signed byte*) main::SCREEN+(byte) 2) ← *((const signed byte[]) main::msg+(byte) 2) -- _deref_pbsc1=_deref_pbsc2 
    lda msg+2
    sta SCREEN+2
    // main::@return
    // }
    // [7] return 
    rts
    msg: .byte -1, 0, 1
}
  // File Data

