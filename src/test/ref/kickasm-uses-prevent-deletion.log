Resolved forward reference irq to interrupt(KERNEL_KEYBOARD)(void()) irq()

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  kickasm( uses irq uses KERNEL_IRQ) {{ sei
        lda #<irq;
        sta KERNEL_IRQ
        lda #>irq;
        sta KERNEL_IRQ+1
        cli
     }}
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

interrupt(KERNEL_KEYBOARD)(void()) irq()
irq: scope:[irq]  from
  *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) WHITE
  *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) BLACK
  to:irq::@return
irq::@return: scope:[irq]  from irq
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify byte*) BG_COLOR = (byte*)(number) $d021
(const nomodify byte) BLACK = (byte) 0
(const nomodify void()**) KERNEL_IRQ = (void()**)(number) $314
(const nomodify byte) WHITE = (byte) 1
interrupt(KERNEL_KEYBOARD)(void()) irq()
(label) irq::@return
(void()) main()
(label) main::@return

Simplifying constant pointer cast (void()**) 788
Simplifying constant pointer cast (byte*) 53281
Successful SSA optimization PassNCastSimplification
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  kickasm( uses irq uses KERNEL_IRQ) {{ sei
        lda #<irq;
        sta KERNEL_IRQ
        lda #>irq;
        sta KERNEL_IRQ+1
        cli
     }}
  to:main::@return
main::@return: scope:[main]  from main
  [5] return 
  to:@return

interrupt(KERNEL_KEYBOARD)(void()) irq()
irq: scope:[irq]  from
  [6] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) WHITE
  [7] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) BLACK
  to:irq::@return
irq::@return: scope:[irq]  from irq
  [8] return 
  to:@return


VARIABLE REGISTER WEIGHTS
interrupt(KERNEL_KEYBOARD)(void()) irq()
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Ensure that an inline kickasm uses-clause is anough to prevent a function from being deleted
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const BLACK = 0
  .const WHITE = 1
  // The vector used when the KERNAL serves IRQ interrupts
  .label KERNEL_IRQ = $314
  .label BG_COLOR = $d021
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // kickasm( uses irq uses KERNEL_IRQ) {{ sei         lda #<irq;         sta KERNEL_IRQ         lda #>irq;         sta KERNEL_IRQ+1         cli      }}
    sei
        lda #<irq;
        sta KERNEL_IRQ
        lda #>irq;
        sta KERNEL_IRQ+1
        cli
    
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // irq
// The Interrupt Handler
irq: {
    // entry interrupt(KERNEL_KEYBOARD)
    // [6] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) WHITE -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BG_COLOR
    // [7] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BG_COLOR
    jmp __breturn
    // irq::@return
  __breturn:
    // [8] return  - exit interrupt(KERNEL_KEYBOARD)
    jmp $ea31
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) WHITE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) BLACK [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [irq] 
Uplift Scope [] 

Uplifting [main] best 295 combination 
Uplifting [irq] best 295 combination 
Uplifting [] best 295 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Ensure that an inline kickasm uses-clause is anough to prevent a function from being deleted
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const BLACK = 0
  .const WHITE = 1
  // The vector used when the KERNAL serves IRQ interrupts
  .label KERNEL_IRQ = $314
  .label BG_COLOR = $d021
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // kickasm( uses irq uses KERNEL_IRQ) {{ sei         lda #<irq;         sta KERNEL_IRQ         lda #>irq;         sta KERNEL_IRQ+1         cli      }}
    sei
        lda #<irq;
        sta KERNEL_IRQ
        lda #>irq;
        sta KERNEL_IRQ+1
        cli
    
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // irq
// The Interrupt Handler
irq: {
    // entry interrupt(KERNEL_KEYBOARD)
    // [6] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) WHITE -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BG_COLOR
    // [7] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BG_COLOR
    jmp __breturn
    // irq::@return
  __breturn:
    // [8] return  - exit interrupt(KERNEL_KEYBOARD)
    jmp $ea31
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const nomodify byte*) BG_COLOR = (byte*) 53281
(const nomodify byte) BLACK = (byte) 0
(const nomodify void()**) KERNEL_IRQ = (void()**) 788
(const nomodify byte) WHITE = (byte) 1
interrupt(KERNEL_KEYBOARD)(void()) irq()
(label) irq::@return
(void()) main()
(label) main::@return



FINAL ASSEMBLER
Score: 277

  // File Comments
// Ensure that an inline kickasm uses-clause is anough to prevent a function from being deleted
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const BLACK = 0
  .const WHITE = 1
  // The vector used when the KERNAL serves IRQ interrupts
  .label KERNEL_IRQ = $314
  .label BG_COLOR = $d021
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // kickasm
    // kickasm( uses irq uses KERNEL_IRQ) {{ sei         lda #<irq;         sta KERNEL_IRQ         lda #>irq;         sta KERNEL_IRQ+1         cli      }}
    sei
        lda #<irq;
        sta KERNEL_IRQ
        lda #>irq;
        sta KERNEL_IRQ+1
        cli
    
    // main::@return
    // }
    // [5] return 
    rts
}
  // irq
// The Interrupt Handler
irq: {
    // entry interrupt(KERNEL_KEYBOARD)
    // *BG_COLOR = WHITE
    // [6] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) WHITE -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BG_COLOR
    // *BG_COLOR = BLACK
    // [7] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BG_COLOR
    // irq::@return
    // }
    // [8] return  - exit interrupt(KERNEL_KEYBOARD)
    jmp $ea31
}
  // File Data

