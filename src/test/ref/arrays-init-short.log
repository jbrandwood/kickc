
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::i#2 = phi( main/main::i#0, main::@2/main::i#1 )
  main::$0 = 0 != msg1[main::i#2]
  if(main::$0) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  SCREEN[main::i#3] = msg1[main::i#3]
  main::i#1 = ++ main::i#3
  to:main::@1
main::@3: scope:[main]  from main::@1
  main::i1#0 = 0
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@5
  main::i1#2 = phi( main::@3/main::i1#0, main::@5/main::i1#1 )
  main::$1 = 0 != msg2[main::i1#2]
  if(main::$1) goto main::@5
  to:main::@return
main::@5: scope:[main]  from main::@4
  main::i1#3 = phi( main::@4/main::i1#2 )
  (SCREEN+$28)[main::i1#3] = msg2[main::i1#3]
  main::i1#1 = ++ main::i1#3
  to:main::@4
main::@return: scope:[main]  from main::@4
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
void __start()
label __start::@1
label __start::@return
void main()
bool~ main::$0
bool~ main::$1
label main::@1
label main::@2
label main::@3
label main::@4
label main::@5
label main::@return
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i1
byte main::i1#0
byte main::i1#1
byte main::i1#2
byte main::i1#3
const byte* msg1[$10]  = "camelot"
const byte* msg2[$10]  = { 'c', 'm', 'l' }

Adding number conversion cast (unumber) 0 in main::$0 = 0 != msg1[main::i#2]
Adding number conversion cast (unumber) 0 in main::$1 = 0 != msg2[main::i1#2]
Adding number conversion cast (unumber) $28 in (SCREEN+$28)[main::i1#3] = msg2[main::i1#3]
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::i#2 = main::i#3 
Alias main::i1#2 = main::i1#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$0 [3] if(0!=msg1[main::i#2]) goto main::@2
Simple Condition main::$1 [9] if(0!=msg2[main::i1#2]) goto main::@5
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Constant main::i1#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::i1#0
Constant inlined main::i#0 = 0
Constant inlined main::i1#0 = 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [9] main::i1#4 = main::i1#1
Coalesced [12] main::i#4 = main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@3
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] main::i#2 = phi( main/0, main::@2/main::i#1 )
  [2] if(0!=msg1[main::i#2]) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@4
  [3] main::i1#2 = phi( main::@1/0, main::@4/main::i1#1 )
  [4] if(0!=msg2[main::i1#2]) goto main::@4
  to:main::@return
main::@return: scope:[main]  from main::@3
  [5] return 
  to:@return
main::@4: scope:[main]  from main::@3
  [6] (SCREEN+$28)[main::i1#2] = msg2[main::i1#2]
  [7] main::i1#1 = ++ main::i1#2
  to:main::@3
main::@2: scope:[main]  from main::@1
  [8] SCREEN[main::i#2] = msg1[main::i#2]
  [9] main::i#1 = ++ main::i#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
byte main::i
byte main::i#1 22.0
byte main::i#2 18.333333333333332
byte main::i1
byte main::i1#1 22.0
byte main::i1#2 18.333333333333332

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::i1#2 main::i1#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] if(0!=msg1[main::i#2]) goto main::@2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [4] if(0!=msg2[main::i1#2]) goto main::@4 [ main::i1#2 ] (  [ main::i1#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::i1#2 main::i1#1 ]
Statement [6] (SCREEN+$28)[main::i1#2] = msg2[main::i1#2] [ main::i1#2 ] (  [ main::i1#2 ] { }  ) always clobbers reg byte a 
Statement [8] SCREEN[main::i#2] = msg1[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [2] if(0!=msg1[main::i#2]) goto main::@2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [4] if(0!=msg2[main::i1#2]) goto main::@4 [ main::i1#2 ] (  [ main::i1#2 ] { }  ) always clobbers reg byte a 
Statement [6] (SCREEN+$28)[main::i1#2] = msg2[main::i1#2] [ main::i1#2 ] (  [ main::i1#2 ] { }  ) always clobbers reg byte a 
Statement [8] SCREEN[main::i#2] = msg1[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::i1#2 main::i1#1 ] : zp[1]:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 40.33: zp[1]:2 [ main::i#2 main::i#1 ] 40.33: zp[1]:3 [ main::i1#2 main::i1#1 ] 
Uplift Scope [] 

Uplifting [main] best 606 combination reg byte x [ main::i#2 main::i#1 ] reg byte x [ main::i1#2 main::i1#1 ] 
Uplifting [] best 606 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a short array initializer - the rest should be zero-filled
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // main::@1
  __b1:
    // [2] if(0!=msg1[main::i#2]) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuxx_then_la1 
    lda msg1,x
    cmp #0
    bne __b2
    // [3] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    // [3] phi main::i1#2 = 0 [phi:main::@1->main::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // main::@3
  __b3:
    // [4] if(0!=msg2[main::i1#2]) goto main::@4 -- vbuc1_neq_pbuc2_derefidx_vbuxx_then_la1 
    lda msg2,x
    cmp #0
    bne __b4
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
    // main::@4
  __b4:
    // [6] (SCREEN+$28)[main::i1#2] = msg2[main::i1#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda msg2,x
    sta SCREEN+$28,x
    // [7] main::i1#1 = ++ main::i1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [3] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [3] phi main::i1#2 = main::i1#1 [phi:main::@4->main::@3#0] -- register_copy 
    jmp __b3
    // main::@2
  __b2:
    // [8] SCREEN[main::i#2] = msg1[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda msg1,x
    sta SCREEN,x
    // [9] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  msg1: .text "camelot"
  .byte 0
  .fill 8, 0
  msg2: .byte 'c', 'm', 'l'
  .fill $d, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction __b3_from___b1:
Removing instruction __breturn:
Removing instruction __b3_from___b4:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
void main()
label main::@1
label main::@2
label main::@3
label main::@4
label main::@return
byte main::i
byte main::i#1 reg byte x 22.0
byte main::i#2 reg byte x 18.333333333333332
byte main::i1
byte main::i1#1 reg byte x 22.0
byte main::i1#2 reg byte x 18.333333333333332
const byte* msg1[$10]  = "camelot"
const byte* msg2[$10]  = { 'c', 'm', 'l' }

reg byte x [ main::i#2 main::i#1 ]
reg byte x [ main::i1#2 main::i1#1 ]


FINAL ASSEMBLER
Score: 516

  // File Comments
// Test a short array initializer - the rest should be zero-filled
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // main::@1
  __b1:
    // for(char i=0;msg1[i];i++)
    // [2] if(0!=msg1[main::i#2]) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuxx_then_la1 
    lda msg1,x
    cmp #0
    bne __b2
    // [3] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // [3] phi main::i1#2 = 0 [phi:main::@1->main::@3#0] -- vbuxx=vbuc1 
    ldx #0
    // main::@3
  __b3:
    // for(char i=0;msg2[i];i++)
    // [4] if(0!=msg2[main::i1#2]) goto main::@4 -- vbuc1_neq_pbuc2_derefidx_vbuxx_then_la1 
    lda msg2,x
    cmp #0
    bne __b4
    // main::@return
    // }
    // [5] return 
    rts
    // main::@4
  __b4:
    // (SCREEN+40)[i] = msg2[i]
    // [6] (SCREEN+$28)[main::i1#2] = msg2[main::i1#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda msg2,x
    sta SCREEN+$28,x
    // for(char i=0;msg2[i];i++)
    // [7] main::i1#1 = ++ main::i1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [3] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
    // [3] phi main::i1#2 = main::i1#1 [phi:main::@4->main::@3#0] -- register_copy 
    jmp __b3
    // main::@2
  __b2:
    // SCREEN[i] = msg1[i]
    // [8] SCREEN[main::i#2] = msg1[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda msg1,x
    sta SCREEN,x
    // for(char i=0;msg1[i];i++)
    // [9] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  msg1: .text "camelot"
  .byte 0
  .fill 8, 0
  msg2: .byte 'c', 'm', 'l'
  .fill $d, 0

