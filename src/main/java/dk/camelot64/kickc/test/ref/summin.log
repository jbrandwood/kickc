void main() {
  byte s1=sum(1,2);
  byte s2=sum(3,4);
  byte s3=sum(9,13);
  byte s4=s1+s2+s3;
}

byte sum(byte a, byte b) {
  return a+b;
}

PROGRAM
proc (void()) main()
  (byte~) main::$0 ← call sum (byte/signed byte/word/signed word) 1 (byte/signed byte/word/signed word) 2 
  (byte) main::s1 ← (byte~) main::$0
  (byte~) main::$1 ← call sum (byte/signed byte/word/signed word) 3 (byte/signed byte/word/signed word) 4 
  (byte) main::s2 ← (byte~) main::$1
  (byte~) main::$2 ← call sum (byte/signed byte/word/signed word) 9 (byte/signed byte/word/signed word) 13 
  (byte) main::s3 ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::s1 + (byte) main::s2
  (byte~) main::$4 ← (byte~) main::$3 + (byte) main::s3
  (byte) main::s4 ← (byte~) main::$4
main::@return:
  return 
endproc // main()
proc (byte()) sum((byte) sum::a , (byte) sum::b)
  (byte~) sum::$0 ← (byte) sum::a + (byte) sum::b
  (byte) sum::return ← (byte~) sum::$0
  goto sum::@return
sum::@return:
  (byte) sum::return ← (byte) sum::return
  return (byte) sum::return
endproc // sum()
  call main 

SYMBOLS
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$2
(byte~) main::$3
(byte~) main::$4
(label) main::@return
(byte) main::s1
(byte) main::s2
(byte) main::s3
(byte) main::s4
(byte()) sum((byte) sum::a , (byte) sum::b)
(byte~) sum::$0
(label) sum::@return
(byte) sum::a
(byte) sum::b
(byte) sum::return

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from
  (byte~) main::$0 ← call sum (byte/signed byte/word/signed word) 1 (byte/signed byte/word/signed word) 2 
  (byte) main::s1 ← (byte~) main::$0
  (byte~) main::$1 ← call sum (byte/signed byte/word/signed word) 3 (byte/signed byte/word/signed word) 4 
  (byte) main::s2 ← (byte~) main::$1
  (byte~) main::$2 ← call sum (byte/signed byte/word/signed word) 9 (byte/signed byte/word/signed word) 13 
  (byte) main::s3 ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::s1 + (byte) main::s2
  (byte~) main::$4 ← (byte~) main::$3 + (byte) main::s3
  (byte) main::s4 ← (byte~) main::$4
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
sum: scope:[sum]  from
  (byte~) sum::$0 ← (byte) sum::a + (byte) sum::b
  (byte) sum::return ← (byte~) sum::$0
  to:sum::@return
sum::@return: scope:[sum]  from sum sum::@1
  (byte) sum::return ← (byte) sum::return
  return (byte) sum::return
  to:@return
sum::@1: scope:[sum]  from
  to:sum::@return
@2: scope:[]  from @1
  call main 
  to:@end
@end: scope:[]  from @2

Removing empty block @1
Removing empty block sum::@1
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@2
main: scope:[main]  from
  (byte~) main::$0 ← call sum (byte/signed byte/word/signed word) 1 (byte/signed byte/word/signed word) 2 
  (byte) main::s1 ← (byte~) main::$0
  (byte~) main::$1 ← call sum (byte/signed byte/word/signed word) 3 (byte/signed byte/word/signed word) 4 
  (byte) main::s2 ← (byte~) main::$1
  (byte~) main::$2 ← call sum (byte/signed byte/word/signed word) 9 (byte/signed byte/word/signed word) 13 
  (byte) main::s3 ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::s1 + (byte) main::s2
  (byte~) main::$4 ← (byte~) main::$3 + (byte) main::s3
  (byte) main::s4 ← (byte~) main::$4
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
sum: scope:[sum]  from
  (byte~) sum::$0 ← (byte) sum::a + (byte) sum::b
  (byte) sum::return ← (byte~) sum::$0
  to:sum::@return
sum::@return: scope:[sum]  from sum
  (byte) sum::return ← (byte) sum::return
  return (byte) sum::return
  to:@return
@2: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @2

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @2
  (byte) sum::a ← (byte/signed byte/word/signed word) 1
  (byte) sum::b ← (byte/signed byte/word/signed word) 2
  (byte) sum::return ← call sum param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte~) main::$0 ← (byte) sum::return
  (byte) main::s1 ← (byte~) main::$0
  (byte) sum::a ← (byte/signed byte/word/signed word) 3
  (byte) sum::b ← (byte/signed byte/word/signed word) 4
  (byte) sum::return ← call sum param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte~) main::$1 ← (byte) sum::return
  (byte) main::s2 ← (byte~) main::$1
  (byte) sum::a ← (byte/signed byte/word/signed word) 9
  (byte) sum::b ← (byte/signed byte/word/signed word) 13
  (byte) sum::return ← call sum param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte~) main::$2 ← (byte) sum::return
  (byte) main::s3 ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::s1 + (byte) main::s2
  (byte~) main::$4 ← (byte~) main::$3 + (byte) main::s3
  (byte) main::s4 ← (byte~) main::$4
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
sum: scope:[sum]  from main main::@1 main::@2
  (byte~) sum::$0 ← (byte) sum::a + (byte) sum::b
  (byte) sum::return ← (byte~) sum::$0
  to:sum::@return
sum::@return: scope:[sum]  from sum
  (byte) sum::return ← (byte) sum::return
  return (byte) sum::return
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @2
  (byte) sum::a#0 ← (byte/signed byte/word/signed word) 1
  (byte) sum::b#0 ← (byte/signed byte/word/signed word) 2
  (byte) sum::return#0 ← call sum param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte) sum::return#5 ← phi( main/(byte) sum::return#0 )
  (byte~) main::$0 ← (byte) sum::return#5
  (byte) main::s1#0 ← (byte~) main::$0
  (byte) sum::a#1 ← (byte/signed byte/word/signed word) 3
  (byte) sum::b#1 ← (byte/signed byte/word/signed word) 4
  (byte) sum::return#1 ← call sum param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) main::s1#2 ← phi( main::@1/(byte) main::s1#0 )
  (byte) sum::return#6 ← phi( main::@1/(byte) sum::return#1 )
  (byte~) main::$1 ← (byte) sum::return#6
  (byte) main::s2#0 ← (byte~) main::$1
  (byte) sum::a#2 ← (byte/signed byte/word/signed word) 9
  (byte) sum::b#2 ← (byte/signed byte/word/signed word) 13
  (byte) sum::return#2 ← call sum param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::s2#1 ← phi( main::@2/(byte) main::s2#0 )
  (byte) main::s1#1 ← phi( main::@2/(byte) main::s1#2 )
  (byte) sum::return#7 ← phi( main::@2/(byte) sum::return#2 )
  (byte~) main::$2 ← (byte) sum::return#7
  (byte) main::s3#0 ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::s1#1 + (byte) main::s2#1
  (byte~) main::$4 ← (byte~) main::$3 + (byte) main::s3#0
  (byte) main::s4#0 ← (byte~) main::$4
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
sum: scope:[sum]  from main main::@1 main::@2
  (byte) sum::b#3 ← phi( main/(byte) sum::b#0 main::@1/(byte) sum::b#1 main::@2/(byte) sum::b#2 )
  (byte) sum::a#3 ← phi( main/(byte) sum::a#0 main::@1/(byte) sum::a#1 main::@2/(byte) sum::a#2 )
  (byte~) sum::$0 ← (byte) sum::a#3 + (byte) sum::b#3
  (byte) sum::return#3 ← (byte~) sum::$0
  to:sum::@return
sum::@return: scope:[sum]  from sum
  (byte) sum::return#8 ← phi( sum/(byte) sum::return#3 )
  (byte) sum::return#4 ← (byte) sum::return#8
  return (byte) sum::return#4
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @2
  (byte) sum::a#0 ← (byte/signed byte/word/signed word) 1
  (byte) sum::b#0 ← (byte/signed byte/word/signed word) 2
  call sum param-assignment
  (byte) sum::return#0 ← (byte) sum::return#4
  to:main::@1
main::@1: scope:[main]  from main
  (byte) sum::return#5 ← phi( main/(byte) sum::return#0 )
  (byte~) main::$0 ← (byte) sum::return#5
  (byte) main::s1#0 ← (byte~) main::$0
  (byte) sum::a#1 ← (byte/signed byte/word/signed word) 3
  (byte) sum::b#1 ← (byte/signed byte/word/signed word) 4
  call sum param-assignment
  (byte) sum::return#1 ← (byte) sum::return#4
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) main::s1#2 ← phi( main::@1/(byte) main::s1#0 )
  (byte) sum::return#6 ← phi( main::@1/(byte) sum::return#1 )
  (byte~) main::$1 ← (byte) sum::return#6
  (byte) main::s2#0 ← (byte~) main::$1
  (byte) sum::a#2 ← (byte/signed byte/word/signed word) 9
  (byte) sum::b#2 ← (byte/signed byte/word/signed word) 13
  call sum param-assignment
  (byte) sum::return#2 ← (byte) sum::return#4
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::s2#1 ← phi( main::@2/(byte) main::s2#0 )
  (byte) main::s1#1 ← phi( main::@2/(byte) main::s1#2 )
  (byte) sum::return#7 ← phi( main::@2/(byte) sum::return#2 )
  (byte~) main::$2 ← (byte) sum::return#7
  (byte) main::s3#0 ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::s1#1 + (byte) main::s2#1
  (byte~) main::$4 ← (byte~) main::$3 + (byte) main::s3#0
  (byte) main::s4#0 ← (byte~) main::$4
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
sum: scope:[sum]  from main main::@1 main::@2
  (byte) sum::b#3 ← phi( main/(byte) sum::b#0 main::@1/(byte) sum::b#1 main::@2/(byte) sum::b#2 )
  (byte) sum::a#3 ← phi( main/(byte) sum::a#0 main::@1/(byte) sum::a#1 main::@2/(byte) sum::a#2 )
  (byte~) sum::$0 ← (byte) sum::a#3 + (byte) sum::b#3
  (byte) sum::return#3 ← (byte~) sum::$0
  to:sum::@return
sum::@return: scope:[sum]  from sum
  (byte) sum::return#8 ← phi( sum/(byte) sum::return#3 )
  (byte) sum::return#4 ← (byte) sum::return#8
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

INITIAL SSA SYMBOL TABLE
(label) @2
(label) @3
(label) @begin
(label) @end
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$2
(byte~) main::$3
(byte~) main::$4
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::s1
(byte) main::s1#0
(byte) main::s1#1
(byte) main::s1#2
(byte) main::s2
(byte) main::s2#0
(byte) main::s2#1
(byte) main::s3
(byte) main::s3#0
(byte) main::s4
(byte) main::s4#0
(byte()) sum((byte) sum::a , (byte) sum::b)
(byte~) sum::$0
(label) sum::@return
(byte) sum::a
(byte) sum::a#0
(byte) sum::a#1
(byte) sum::a#2
(byte) sum::a#3
(byte) sum::b
(byte) sum::b#0
(byte) sum::b#1
(byte) sum::b#2
(byte) sum::b#3
(byte) sum::return
(byte) sum::return#0
(byte) sum::return#1
(byte) sum::return#2
(byte) sum::return#3
(byte) sum::return#4
(byte) sum::return#5
(byte) sum::return#6
(byte) sum::return#7
(byte) sum::return#8

Culled Empty Block (label) @3
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @2
  (byte) sum::a#0 ← (byte/signed byte/word/signed word) 1
  (byte) sum::b#0 ← (byte/signed byte/word/signed word) 2
  call sum param-assignment
  (byte) sum::return#0 ← (byte) sum::return#4
  to:main::@1
main::@1: scope:[main]  from main
  (byte) sum::return#5 ← phi( main/(byte) sum::return#0 )
  (byte~) main::$0 ← (byte) sum::return#5
  (byte) main::s1#0 ← (byte~) main::$0
  (byte) sum::a#1 ← (byte/signed byte/word/signed word) 3
  (byte) sum::b#1 ← (byte/signed byte/word/signed word) 4
  call sum param-assignment
  (byte) sum::return#1 ← (byte) sum::return#4
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) main::s1#2 ← phi( main::@1/(byte) main::s1#0 )
  (byte) sum::return#6 ← phi( main::@1/(byte) sum::return#1 )
  (byte~) main::$1 ← (byte) sum::return#6
  (byte) main::s2#0 ← (byte~) main::$1
  (byte) sum::a#2 ← (byte/signed byte/word/signed word) 9
  (byte) sum::b#2 ← (byte/signed byte/word/signed word) 13
  call sum param-assignment
  (byte) sum::return#2 ← (byte) sum::return#4
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::s2#1 ← phi( main::@2/(byte) main::s2#0 )
  (byte) main::s1#1 ← phi( main::@2/(byte) main::s1#2 )
  (byte) sum::return#7 ← phi( main::@2/(byte) sum::return#2 )
  (byte~) main::$2 ← (byte) sum::return#7
  (byte) main::s3#0 ← (byte~) main::$2
  (byte~) main::$3 ← (byte) main::s1#1 + (byte) main::s2#1
  (byte~) main::$4 ← (byte~) main::$3 + (byte) main::s3#0
  (byte) main::s4#0 ← (byte~) main::$4
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
sum: scope:[sum]  from main main::@1 main::@2
  (byte) sum::b#3 ← phi( main/(byte) sum::b#0 main::@1/(byte) sum::b#1 main::@2/(byte) sum::b#2 )
  (byte) sum::a#3 ← phi( main/(byte) sum::a#0 main::@1/(byte) sum::a#1 main::@2/(byte) sum::a#2 )
  (byte~) sum::$0 ← (byte) sum::a#3 + (byte) sum::b#3
  (byte) sum::return#3 ← (byte~) sum::$0
  to:sum::@return
sum::@return: scope:[sum]  from sum
  (byte) sum::return#8 ← phi( sum/(byte) sum::return#3 )
  (byte) sum::return#4 ← (byte) sum::return#8
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Not aliassing across scopes: main::$0 sum::return#5
Not aliassing across scopes: main::$1 sum::return#6
Not aliassing across scopes: main::$2 sum::return#7
Alias (byte) sum::return#0 = (byte) sum::return#4 (byte) sum::return#5 (byte) sum::return#1 (byte) sum::return#6 (byte) sum::return#2 (byte) sum::return#7 (byte) sum::return#3 (byte~) sum::$0 (byte) sum::return#8 
Alias (byte) main::s1#0 = (byte~) main::$0 (byte) main::s1#2 (byte) main::s1#1 
Alias (byte) main::s2#0 = (byte~) main::$1 (byte) main::s2#1 
Alias (byte) main::s3#0 = (byte~) main::$2 
Alias (byte) main::s4#0 = (byte~) main::$4 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @2
  (byte) sum::a#0 ← (byte/signed byte/word/signed word) 1
  (byte) sum::b#0 ← (byte/signed byte/word/signed word) 2
  call sum param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte) main::s1#0 ← (byte) sum::return#0
  (byte) sum::a#1 ← (byte/signed byte/word/signed word) 3
  (byte) sum::b#1 ← (byte/signed byte/word/signed word) 4
  call sum param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) main::s2#0 ← (byte) sum::return#0
  (byte) sum::a#2 ← (byte/signed byte/word/signed word) 9
  (byte) sum::b#2 ← (byte/signed byte/word/signed word) 13
  call sum param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::s3#0 ← (byte) sum::return#0
  (byte~) main::$3 ← (byte) main::s1#0 + (byte) main::s2#0
  (byte) main::s4#0 ← (byte~) main::$3 + (byte) main::s3#0
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
sum: scope:[sum]  from main main::@1 main::@2
  (byte) sum::b#3 ← phi( main/(byte) sum::b#0 main::@1/(byte) sum::b#1 main::@2/(byte) sum::b#2 )
  (byte) sum::a#3 ← phi( main/(byte) sum::a#0 main::@1/(byte) sum::a#1 main::@2/(byte) sum::a#2 )
  (byte) sum::return#0 ← (byte) sum::a#3 + (byte) sum::b#3
  to:sum::@return
sum::@return: scope:[sum]  from sum
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Not aliassing across scopes: main::s1#0 sum::return#0
Not aliassing across scopes: main::s2#0 sum::return#0
Not aliassing across scopes: main::s3#0 sum::return#0
Constant (const byte) sum::a#0 = 1
Constant (const byte) sum::b#0 = 2
Constant (const byte) sum::a#1 = 3
Constant (const byte) sum::b#1 = 4
Constant (const byte) sum::a#2 = 9
Constant (const byte) sum::b#2 = 13
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @2
  call sum param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte) main::s1#0 ← (byte) sum::return#0
  call sum param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) main::s2#0 ← (byte) sum::return#0
  call sum param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::s3#0 ← (byte) sum::return#0
  (byte~) main::$3 ← (byte) main::s1#0 + (byte) main::s2#0
  (byte) main::s4#0 ← (byte~) main::$3 + (byte) main::s3#0
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
sum: scope:[sum]  from main main::@1 main::@2
  (byte) sum::b#3 ← phi( main/(const byte) sum::b#0 main::@1/(const byte) sum::b#1 main::@2/(const byte) sum::b#2 )
  (byte) sum::a#3 ← phi( main/(const byte) sum::a#0 main::@1/(const byte) sum::a#1 main::@2/(const byte) sum::a#2 )
  (byte) sum::return#0 ← (byte) sum::a#3 + (byte) sum::b#3
  to:sum::@return
sum::@return: scope:[sum]  from sum
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Not aliassing across scopes: main::s1#0 sum::return#0
Not aliassing across scopes: main::s2#0 sum::return#0
Not aliassing across scopes: main::s3#0 sum::return#0
Inlining constant with var siblings (const byte) sum::a#0
Inlining constant with different constant siblings (const byte) sum::a#0
Inlining constant with different constant siblings (const byte) sum::a#0
Inlining constant with var siblings (const byte) sum::b#0
Inlining constant with different constant siblings (const byte) sum::b#0
Inlining constant with different constant siblings (const byte) sum::b#0
Inlining constant with var siblings (const byte) sum::a#1
Inlining constant with different constant siblings (const byte) sum::a#1
Inlining constant with different constant siblings (const byte) sum::a#1
Inlining constant with var siblings (const byte) sum::b#1
Inlining constant with different constant siblings (const byte) sum::b#1
Inlining constant with different constant siblings (const byte) sum::b#1
Inlining constant with var siblings (const byte) sum::a#2
Inlining constant with different constant siblings (const byte) sum::a#2
Inlining constant with different constant siblings (const byte) sum::a#2
Inlining constant with var siblings (const byte) sum::b#2
Inlining constant with different constant siblings (const byte) sum::b#2
Inlining constant with different constant siblings (const byte) sum::b#2
Constant inlined sum::b#1 = (byte/signed byte/word/signed word) 4
Constant inlined sum::a#2 = (byte/signed byte/word/signed word) 9
Constant inlined sum::b#0 = (byte/signed byte/word/signed word) 2
Constant inlined sum::a#1 = (byte/signed byte/word/signed word) 3
Constant inlined sum::b#2 = (byte/signed byte/word/signed word) 13
Constant inlined sum::a#0 = (byte/signed byte/word/signed word) 1
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @2
  call sum param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte) main::s1#0 ← (byte) sum::return#0
  call sum param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) main::s2#0 ← (byte) sum::return#0
  call sum param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::s3#0 ← (byte) sum::return#0
  (byte~) main::$3 ← (byte) main::s1#0 + (byte) main::s2#0
  (byte) main::s4#0 ← (byte~) main::$3 + (byte) main::s3#0
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
sum: scope:[sum]  from main main::@1 main::@2
  (byte) sum::b#3 ← phi( main/(byte/signed byte/word/signed word) 2 main::@1/(byte/signed byte/word/signed word) 4 main::@2/(byte/signed byte/word/signed word) 13 )
  (byte) sum::a#3 ← phi( main/(byte/signed byte/word/signed word) 1 main::@1/(byte/signed byte/word/signed word) 3 main::@2/(byte/signed byte/word/signed word) 9 )
  (byte) sum::return#0 ← (byte) sum::a#3 + (byte) sum::b#3
  to:sum::@return
sum::@return: scope:[sum]  from sum
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

FINAL SYMBOL TABLE
(label) @2
(label) @begin
(label) @end
(void()) main()
(byte~) main::$3
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::s1
(byte) main::s1#0
(byte) main::s2
(byte) main::s2#0
(byte) main::s3
(byte) main::s3#0
(byte) main::s4
(byte) main::s4#0
(byte()) sum((byte) sum::a , (byte) sum::b)
(label) sum::@return
(byte) sum::a
(byte) sum::a#3
(byte) sum::b
(byte) sum::b#3
(byte) sum::return
(byte) sum::return#0

Block Sequence Planned @begin @2 @end main main::@1 main::@2 main::@3 main::@return sum sum::@return 
Block Sequence Planned @begin @2 @end main main::@1 main::@2 main::@3 main::@return sum sum::@return 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@2
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2
main: scope:[main]  from @2
  call sum param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte) main::s1#0 ← (byte) sum::return#0
  call sum param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) main::s2#0 ← (byte) sum::return#0
  call sum param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::s3#0 ← (byte) sum::return#0
  (byte~) main::$3 ← (byte) main::s1#0 + (byte) main::s2#0
  (byte) main::s4#0 ← (byte~) main::$3 + (byte) main::s3#0
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
sum: scope:[sum]  from main main::@1 main::@2
  (byte) sum::b#3 ← phi( main/(byte/signed byte/word/signed word) 2 main::@1/(byte/signed byte/word/signed word) 4 main::@2/(byte/signed byte/word/signed word) 13 )
  (byte) sum::a#3 ← phi( main/(byte/signed byte/word/signed word) 1 main::@1/(byte/signed byte/word/signed word) 3 main::@2/(byte/signed byte/word/signed word) 9 )
  (byte) sum::return#0 ← (byte) sum::a#3 + (byte) sum::b#3
  to:sum::@return
sum::@return: scope:[sum]  from sum
  return 
  to:@return

Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:0 
Calls in [main] to sum:2 sum:4 sum:6 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  to:@2
@2: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @2
main: scope:[main]  from @2
  [1] phi() [ ]
  [2] call sum param-assignment [ sum::return#0 ]
  to:main::@1
main::@1: scope:[main]  from main
  [3] (byte) main::s1#0 ← (byte) sum::return#0 [ main::s1#0 ]
  [4] call sum param-assignment [ main::s1#0 sum::return#0 ]
  to:main::@2
main::@2: scope:[main]  from main::@1
  [5] (byte) main::s2#0 ← (byte) sum::return#0 [ main::s1#0 main::s2#0 ]
  [6] call sum param-assignment [ main::s1#0 sum::return#0 main::s2#0 ]
  to:main::@3
main::@3: scope:[main]  from main::@2
  [7] (byte) main::s3#0 ← (byte) sum::return#0 [ main::s1#0 main::s2#0 main::s3#0 ]
  [8] (byte~) main::$3 ← (byte) main::s1#0 + (byte) main::s2#0 [ main::s3#0 main::$3 ]
  [9] (byte) main::s4#0 ← (byte~) main::$3 + (byte) main::s3#0 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@3
  [10] return  [ ]
  to:@return
sum: scope:[sum]  from main main::@1 main::@2
  [11] (byte) sum::b#3 ← phi( main/(byte/signed byte/word/signed word) 2 main::@1/(byte/signed byte/word/signed word) 4 main::@2/(byte/signed byte/word/signed word) 13 ) [ sum::a#3 sum::b#3 ]
  [11] (byte) sum::a#3 ← phi( main/(byte/signed byte/word/signed word) 1 main::@1/(byte/signed byte/word/signed word) 3 main::@2/(byte/signed byte/word/signed word) 9 ) [ sum::a#3 sum::b#3 ]
  [12] (byte) sum::return#0 ← (byte) sum::a#3 + (byte) sum::b#3 [ sum::return#0 ]
  to:sum::@return
sum::@return: scope:[sum]  from sum
  [13] return  [ sum::return#0 ]
  to:@return

Created 2 initial phi equivalence classes
Coalesced down to 2 phi equivalence classes
Block Sequence Planned @begin @2 @end main main::@1 main::@2 main::@3 main::@return sum sum::@return 
Adding NOP phi() at start of main
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - BEFORE EFFECTIVE LIVE RANGES
@begin: scope:[]  from
  to:@2
@2: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @2
main: scope:[main]  from @2
  [1] phi() [ ]
  [2] call sum param-assignment [ sum::return#0 ]
  to:main::@1
main::@1: scope:[main]  from main
  [3] (byte) main::s1#0 ← (byte) sum::return#0 [ main::s1#0 ]
  [4] call sum param-assignment [ main::s1#0 sum::return#0 ]
  to:main::@2
main::@2: scope:[main]  from main::@1
  [5] (byte) main::s2#0 ← (byte) sum::return#0 [ main::s1#0 main::s2#0 ]
  [6] call sum param-assignment [ main::s1#0 sum::return#0 main::s2#0 ]
  to:main::@3
main::@3: scope:[main]  from main::@2
  [7] (byte) main::s3#0 ← (byte) sum::return#0 [ main::s1#0 main::s2#0 main::s3#0 ]
  [8] (byte~) main::$3 ← (byte) main::s1#0 + (byte) main::s2#0 [ main::s3#0 main::$3 ]
  [9] (byte) main::s4#0 ← (byte~) main::$3 + (byte) main::s3#0 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@3
  [10] return  [ ]
  to:@return
sum: scope:[sum]  from main main::@1 main::@2
  [11] (byte) sum::b#3 ← phi( main/(byte/signed byte/word/signed word) 2 main::@1/(byte/signed byte/word/signed word) 4 main::@2/(byte/signed byte/word/signed word) 13 ) [ sum::a#3 sum::b#3 ]
  [11] (byte) sum::a#3 ← phi( main/(byte/signed byte/word/signed word) 1 main::@1/(byte/signed byte/word/signed word) 3 main::@2/(byte/signed byte/word/signed word) 9 ) [ sum::a#3 sum::b#3 ]
  [12] (byte) sum::return#0 ← (byte) sum::a#3 + (byte) sum::b#3 [ sum::return#0 ]
  to:sum::@return
sum::@return: scope:[sum]  from sum
  [13] return  [ sum::return#0 ]
  to:@return

CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  to:@2
@2: scope:[]  from @begin
  [0] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @2
main: scope:[main]  from @2
  [1] phi() [ ] ( main:0 [ ] )
  [2] call sum param-assignment [ sum::return#0 ] ( main:0 [ sum::return#0 ] )
  to:main::@1
main::@1: scope:[main]  from main
  [3] (byte) main::s1#0 ← (byte) sum::return#0 [ main::s1#0 ] ( main:0 [ main::s1#0 ] )
  [4] call sum param-assignment [ main::s1#0 sum::return#0 ] ( main:0 [ main::s1#0 sum::return#0 ] )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [5] (byte) main::s2#0 ← (byte) sum::return#0 [ main::s1#0 main::s2#0 ] ( main:0 [ main::s1#0 main::s2#0 ] )
  [6] call sum param-assignment [ main::s1#0 sum::return#0 main::s2#0 ] ( main:0 [ main::s1#0 sum::return#0 main::s2#0 ] )
  to:main::@3
main::@3: scope:[main]  from main::@2
  [7] (byte) main::s3#0 ← (byte) sum::return#0 [ main::s1#0 main::s2#0 main::s3#0 ] ( main:0 [ main::s1#0 main::s2#0 main::s3#0 ] )
  [8] (byte~) main::$3 ← (byte) main::s1#0 + (byte) main::s2#0 [ main::s3#0 main::$3 ] ( main:0 [ main::s3#0 main::$3 ] )
  [9] (byte) main::s4#0 ← (byte~) main::$3 + (byte) main::s3#0 [ ] ( main:0 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@3
  [10] return  [ ] ( main:0 [ ] )
  to:@return
sum: scope:[sum]  from main main::@1 main::@2
  [11] (byte) sum::b#3 ← phi( main/(byte/signed byte/word/signed word) 2 main::@1/(byte/signed byte/word/signed word) 4 main::@2/(byte/signed byte/word/signed word) 13 ) [ sum::a#3 sum::b#3 ] ( main:0::sum:2 [ sum::a#3 sum::b#3 ] main:0::sum:4 [ main::s1#0 sum::a#3 sum::b#3 ] main:0::sum:6 [ main::s1#0 main::s2#0 sum::a#3 sum::b#3 ] )
  [11] (byte) sum::a#3 ← phi( main/(byte/signed byte/word/signed word) 1 main::@1/(byte/signed byte/word/signed word) 3 main::@2/(byte/signed byte/word/signed word) 9 ) [ sum::a#3 sum::b#3 ] ( main:0::sum:2 [ sum::a#3 sum::b#3 ] main:0::sum:4 [ main::s1#0 sum::a#3 sum::b#3 ] main:0::sum:6 [ main::s1#0 main::s2#0 sum::a#3 sum::b#3 ] )
  [12] (byte) sum::return#0 ← (byte) sum::a#3 + (byte) sum::b#3 [ sum::return#0 ] ( main:0::sum:2 [ sum::return#0 ] main:0::sum:4 [ main::s1#0 sum::return#0 ] main:0::sum:6 [ main::s1#0 main::s2#0 sum::return#0 ] )
  to:sum::@return
sum::@return: scope:[sum]  from sum
  [13] return  [ sum::return#0 ] ( main:0::sum:2 [ sum::return#0 ] main:0::sum:4 [ main::s1#0 sum::return#0 ] main:0::sum:6 [ main::s1#0 main::s2#0 sum::return#0 ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@2 dominated by  @2 @begin 
@end dominated by  @2 @begin @end 
main dominated by  @2 @begin main 
main::@1 dominated by  @2 @begin main::@1 main 
main::@2 dominated by  @2 @begin main::@1 main::@2 main 
main::@3 dominated by  @2 @begin main::@1 main::@2 main main::@3 
main::@return dominated by  main::@return @2 @begin main::@1 main::@2 main main::@3 
sum dominated by  @2 @begin main sum 
sum::@return dominated by  @2 @begin main sum sum::@return 

NATURAL LOOPS

Found 0 loops in scope []
Found 0 loops in scope [main]
Found 0 loops in scope [sum]
NATURAL LOOPS WITH DEPTH


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$3 4.0
(byte) main::s1
(byte) main::s1#0 0.8
(byte) main::s2
(byte) main::s2#0 1.3333333333333333
(byte) main::s3
(byte) main::s3#0 2.0
(byte) main::s4
(byte) main::s4#0 20.0
(byte()) sum((byte) sum::a , (byte) sum::b)
(byte) sum::a
(byte) sum::a#3 2.0
(byte) sum::b
(byte) sum::b#3 2.0
(byte) sum::return
(byte) sum::return#0 1.6

Initial phi equivalence classes
[ sum::a#3 ]
[ sum::b#3 ]
Added variable main::s1#0 to zero page equivalence class [ main::s1#0 ]
Added variable main::s2#0 to zero page equivalence class [ main::s2#0 ]
Added variable main::s3#0 to zero page equivalence class [ main::s3#0 ]
Added variable main::$3 to zero page equivalence class [ main::$3 ]
Added variable main::s4#0 to zero page equivalence class [ main::s4#0 ]
Added variable sum::return#0 to zero page equivalence class [ sum::return#0 ]
Complete equivalence classes
[ sum::a#3 ]
[ sum::b#3 ]
[ main::s1#0 ]
[ main::s2#0 ]
[ main::s3#0 ]
[ main::$3 ]
[ main::s4#0 ]
[ sum::return#0 ]
Allocated zp ZP_BYTE:2 [ sum::a#3 ]
Allocated zp ZP_BYTE:3 [ sum::b#3 ]
Allocated zp ZP_BYTE:4 [ main::s1#0 ]
Allocated zp ZP_BYTE:5 [ main::s2#0 ]
Allocated zp ZP_BYTE:6 [ main::s3#0 ]
Allocated zp ZP_BYTE:7 [ main::$3 ]
Allocated zp ZP_BYTE:8 [ main::s4#0 ]
Allocated zp ZP_BYTE:9 [ sum::return#0 ]
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
  jmp b2
//SEG3 @2
b2:
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
  jmp bend
//SEG6 @end
bend:
//SEG7 main
main: {
    .label _3 = 7
    .label s1 = 4
    .label s2 = 5
    .label s3 = 6
    .label s4 = 8
  //SEG8 [2] call sum param-assignment [ sum::return#0 ] ( main:0 [ sum::return#0 ] )
  //SEG9 [11] phi from main to sum [phi:main->sum]
  sum_from_main:
  //SEG10 [11] phi (byte) sum::b#3 = (byte/signed byte/word/signed word) 2 [phi:main->sum#0] -- zpby1=coby1 
    lda #2
    sta sum.b
  //SEG11 [11] phi (byte) sum::a#3 = (byte/signed byte/word/signed word) 1 [phi:main->sum#1] -- zpby1=coby1 
    lda #1
    sta sum.a
    jsr sum
    jmp b1
  //SEG12 main::@1
  b1:
  //SEG13 [3] (byte) main::s1#0 ← (byte) sum::return#0 [ main::s1#0 ] ( main:0 [ main::s1#0 ] ) -- zpby1=zpby2 
    lda sum.return
    sta s1
  //SEG14 [4] call sum param-assignment [ main::s1#0 sum::return#0 ] ( main:0 [ main::s1#0 sum::return#0 ] )
  //SEG15 [11] phi from main::@1 to sum [phi:main::@1->sum]
  sum_from_b1:
  //SEG16 [11] phi (byte) sum::b#3 = (byte/signed byte/word/signed word) 4 [phi:main::@1->sum#0] -- zpby1=coby1 
    lda #4
    sta sum.b
  //SEG17 [11] phi (byte) sum::a#3 = (byte/signed byte/word/signed word) 3 [phi:main::@1->sum#1] -- zpby1=coby1 
    lda #3
    sta sum.a
    jsr sum
    jmp b2
  //SEG18 main::@2
  b2:
  //SEG19 [5] (byte) main::s2#0 ← (byte) sum::return#0 [ main::s1#0 main::s2#0 ] ( main:0 [ main::s1#0 main::s2#0 ] ) -- zpby1=zpby2 
    lda sum.return
    sta s2
  //SEG20 [6] call sum param-assignment [ main::s1#0 sum::return#0 main::s2#0 ] ( main:0 [ main::s1#0 sum::return#0 main::s2#0 ] )
  //SEG21 [11] phi from main::@2 to sum [phi:main::@2->sum]
  sum_from_b2:
  //SEG22 [11] phi (byte) sum::b#3 = (byte/signed byte/word/signed word) 13 [phi:main::@2->sum#0] -- zpby1=coby1 
    lda #$d
    sta sum.b
  //SEG23 [11] phi (byte) sum::a#3 = (byte/signed byte/word/signed word) 9 [phi:main::@2->sum#1] -- zpby1=coby1 
    lda #9
    sta sum.a
    jsr sum
    jmp b3
  //SEG24 main::@3
  b3:
  //SEG25 [7] (byte) main::s3#0 ← (byte) sum::return#0 [ main::s1#0 main::s2#0 main::s3#0 ] ( main:0 [ main::s1#0 main::s2#0 main::s3#0 ] ) -- zpby1=zpby2 
    lda sum.return
    sta s3
  //SEG26 [8] (byte~) main::$3 ← (byte) main::s1#0 + (byte) main::s2#0 [ main::s3#0 main::$3 ] ( main:0 [ main::s3#0 main::$3 ] ) -- zpby1=zpby2_plus_zpby3 
    lda s1
    clc
    adc s2
    sta _3
  //SEG27 [9] (byte) main::s4#0 ← (byte~) main::$3 + (byte) main::s3#0 [ ] ( main:0 [ ] ) -- zpby1=zpby2_plus_zpby3 
    lda _3
    clc
    adc s3
    sta s4
    jmp breturn
  //SEG28 main::@return
  breturn:
  //SEG29 [10] return  [ ] ( main:0 [ ] )
    rts
}
//SEG30 sum
sum: {
    .label return = 9
    .label a = 2
    .label b = 3
  //SEG31 [12] (byte) sum::return#0 ← (byte) sum::a#3 + (byte) sum::b#3 [ sum::return#0 ] ( main:0::sum:2 [ sum::return#0 ] main:0::sum:4 [ main::s1#0 sum::return#0 ] main:0::sum:6 [ main::s1#0 main::s2#0 sum::return#0 ] ) -- zpby1=zpby2_plus_zpby3 
    lda a
    clc
    adc b
    sta return
    jmp breturn
  //SEG32 sum::@return
  breturn:
  //SEG33 [13] return  [ sum::return#0 ] ( main:0::sum:2 [ sum::return#0 ] main:0::sum:4 [ main::s1#0 sum::return#0 ] main:0::sum:6 [ main::s1#0 main::s2#0 sum::return#0 ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ sum::a#3 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ sum::b#3 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ main::s1#0 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ main::s2#0 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ main::s3#0 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ main::$3 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ main::s4#0 ] : zp ZP_BYTE:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ sum::return#0 ] : zp ZP_BYTE:9 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 20: zp ZP_BYTE:8 [ main::s4#0 ] 4: zp ZP_BYTE:7 [ main::$3 ] 2: zp ZP_BYTE:6 [ main::s3#0 ] 1.33: zp ZP_BYTE:5 [ main::s2#0 ] 0.8: zp ZP_BYTE:4 [ main::s1#0 ] 
Uplift Scope [sum] 2: zp ZP_BYTE:2 [ sum::a#3 ] 2: zp ZP_BYTE:3 [ sum::b#3 ] 1.6: zp ZP_BYTE:9 [ sum::return#0 ] 
Uplift Scope [] 

Uplifting [main] best 152 combination reg byte a [ main::s4#0 ] reg byte a [ main::$3 ] zp ZP_BYTE:6 [ main::s3#0 ] reg byte x [ main::s2#0 ] zp ZP_BYTE:4 [ main::s1#0 ] 
Uplifting [sum] best 126 combination reg byte y [ sum::a#3 ] reg byte a [ sum::b#3 ] reg byte a [ sum::return#0 ] 
Uplifting [] best 126 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ main::s3#0 ]
Uplifting [main] best 126 combination zp ZP_BYTE:6 [ main::s3#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:4 [ main::s1#0 ]
Uplifting [main] best 126 combination zp ZP_BYTE:4 [ main::s1#0 ] 
Allocated (was zp ZP_BYTE:4) zp ZP_BYTE:2 [ main::s1#0 ]
Allocated (was zp ZP_BYTE:6) zp ZP_BYTE:3 [ main::s3#0 ]
Removing instruction jmp b2
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 @2
b2:
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
//SEG6 @end
bend:
//SEG7 main
main: {
    .label s1 = 2
    .label s3 = 3
  //SEG8 [2] call sum param-assignment [ sum::return#0 ] ( main:0 [ sum::return#0 ] )
  //SEG9 [11] phi from main to sum [phi:main->sum]
  sum_from_main:
  //SEG10 [11] phi (byte) sum::b#3 = (byte/signed byte/word/signed word) 2 [phi:main->sum#0] -- aby=coby1 
    lda #2
  //SEG11 [11] phi (byte) sum::a#3 = (byte/signed byte/word/signed word) 1 [phi:main->sum#1] -- yby=coby1 
    ldy #1
    jsr sum
  //SEG12 main::@1
  b1:
  //SEG13 [3] (byte) main::s1#0 ← (byte) sum::return#0 [ main::s1#0 ] ( main:0 [ main::s1#0 ] ) -- zpby1=aby 
    sta s1
  //SEG14 [4] call sum param-assignment [ main::s1#0 sum::return#0 ] ( main:0 [ main::s1#0 sum::return#0 ] )
  //SEG15 [11] phi from main::@1 to sum [phi:main::@1->sum]
  sum_from_b1:
  //SEG16 [11] phi (byte) sum::b#3 = (byte/signed byte/word/signed word) 4 [phi:main::@1->sum#0] -- aby=coby1 
    lda #4
  //SEG17 [11] phi (byte) sum::a#3 = (byte/signed byte/word/signed word) 3 [phi:main::@1->sum#1] -- yby=coby1 
    ldy #3
    jsr sum
  //SEG18 main::@2
  b2:
  //SEG19 [5] (byte) main::s2#0 ← (byte) sum::return#0 [ main::s1#0 main::s2#0 ] ( main:0 [ main::s1#0 main::s2#0 ] ) -- xby=aby 
    tax
  //SEG20 [6] call sum param-assignment [ main::s1#0 sum::return#0 main::s2#0 ] ( main:0 [ main::s1#0 sum::return#0 main::s2#0 ] )
  //SEG21 [11] phi from main::@2 to sum [phi:main::@2->sum]
  sum_from_b2:
  //SEG22 [11] phi (byte) sum::b#3 = (byte/signed byte/word/signed word) 13 [phi:main::@2->sum#0] -- aby=coby1 
    lda #$d
  //SEG23 [11] phi (byte) sum::a#3 = (byte/signed byte/word/signed word) 9 [phi:main::@2->sum#1] -- yby=coby1 
    ldy #9
    jsr sum
  //SEG24 main::@3
  b3:
  //SEG25 [7] (byte) main::s3#0 ← (byte) sum::return#0 [ main::s1#0 main::s2#0 main::s3#0 ] ( main:0 [ main::s1#0 main::s2#0 main::s3#0 ] ) -- zpby1=aby 
    sta s3
  //SEG26 [8] (byte~) main::$3 ← (byte) main::s1#0 + (byte) main::s2#0 [ main::s3#0 main::$3 ] ( main:0 [ main::s3#0 main::$3 ] ) -- aby=zpby1_plus_xby 
    txa
    clc
    adc s1
  //SEG27 [9] (byte) main::s4#0 ← (byte~) main::$3 + (byte) main::s3#0 [ ] ( main:0 [ ] ) -- aby=aby_plus_zpby1 
    clc
    adc s3
  //SEG28 main::@return
  breturn:
  //SEG29 [10] return  [ ] ( main:0 [ ] )
    rts
}
//SEG30 sum
sum: {
  //SEG31 [12] (byte) sum::return#0 ← (byte) sum::a#3 + (byte) sum::b#3 [ sum::return#0 ] ( main:0::sum:2 [ sum::return#0 ] main:0::sum:4 [ main::s1#0 sum::return#0 ] main:0::sum:6 [ main::s1#0 main::s2#0 sum::return#0 ] ) -- aby=yby_plus_aby 
    sty $ff
    clc
    adc $ff
  //SEG32 sum::@return
  breturn:
  //SEG33 [13] return  [ sum::return#0 ] ( main:0::sum:2 [ sum::return#0 ] main:0::sum:4 [ main::s1#0 sum::return#0 ] main:0::sum:6 [ main::s1#0 main::s2#0 sum::return#0 ] )
    rts
}

Removing instruction bbegin:
Removing instruction main_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 @2
b2:
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @2 to main [phi:@2->main]
  jsr main
//SEG6 @end
bend:
//SEG7 main
main: {
    .label s1 = 2
    .label s3 = 3
  //SEG8 [2] call sum param-assignment [ sum::return#0 ] ( main:0 [ sum::return#0 ] )
  //SEG9 [11] phi from main to sum [phi:main->sum]
  sum_from_main:
  //SEG10 [11] phi (byte) sum::b#3 = (byte/signed byte/word/signed word) 2 [phi:main->sum#0] -- aby=coby1 
    lda #2
  //SEG11 [11] phi (byte) sum::a#3 = (byte/signed byte/word/signed word) 1 [phi:main->sum#1] -- yby=coby1 
    ldy #1
    jsr sum
  //SEG12 main::@1
  b1:
  //SEG13 [3] (byte) main::s1#0 ← (byte) sum::return#0 [ main::s1#0 ] ( main:0 [ main::s1#0 ] ) -- zpby1=aby 
    sta s1
  //SEG14 [4] call sum param-assignment [ main::s1#0 sum::return#0 ] ( main:0 [ main::s1#0 sum::return#0 ] )
  //SEG15 [11] phi from main::@1 to sum [phi:main::@1->sum]
  sum_from_b1:
  //SEG16 [11] phi (byte) sum::b#3 = (byte/signed byte/word/signed word) 4 [phi:main::@1->sum#0] -- aby=coby1 
    lda #4
  //SEG17 [11] phi (byte) sum::a#3 = (byte/signed byte/word/signed word) 3 [phi:main::@1->sum#1] -- yby=coby1 
    ldy #3
    jsr sum
  //SEG18 main::@2
  b2:
  //SEG19 [5] (byte) main::s2#0 ← (byte) sum::return#0 [ main::s1#0 main::s2#0 ] ( main:0 [ main::s1#0 main::s2#0 ] ) -- xby=aby 
    tax
  //SEG20 [6] call sum param-assignment [ main::s1#0 sum::return#0 main::s2#0 ] ( main:0 [ main::s1#0 sum::return#0 main::s2#0 ] )
  //SEG21 [11] phi from main::@2 to sum [phi:main::@2->sum]
  sum_from_b2:
  //SEG22 [11] phi (byte) sum::b#3 = (byte/signed byte/word/signed word) 13 [phi:main::@2->sum#0] -- aby=coby1 
    lda #$d
  //SEG23 [11] phi (byte) sum::a#3 = (byte/signed byte/word/signed word) 9 [phi:main::@2->sum#1] -- yby=coby1 
    ldy #9
    jsr sum
  //SEG24 main::@3
  b3:
  //SEG25 [7] (byte) main::s3#0 ← (byte) sum::return#0 [ main::s1#0 main::s2#0 main::s3#0 ] ( main:0 [ main::s1#0 main::s2#0 main::s3#0 ] ) -- zpby1=aby 
    sta s3
  //SEG26 [8] (byte~) main::$3 ← (byte) main::s1#0 + (byte) main::s2#0 [ main::s3#0 main::$3 ] ( main:0 [ main::s3#0 main::$3 ] ) -- aby=zpby1_plus_xby 
    txa
    clc
    adc s1
  //SEG27 [9] (byte) main::s4#0 ← (byte~) main::$3 + (byte) main::s3#0 [ ] ( main:0 [ ] ) -- aby=aby_plus_zpby1 
    clc
    adc s3
  //SEG28 main::@return
  breturn:
  //SEG29 [10] return  [ ] ( main:0 [ ] )
    rts
}
//SEG30 sum
sum: {
  //SEG31 [12] (byte) sum::return#0 ← (byte) sum::a#3 + (byte) sum::b#3 [ sum::return#0 ] ( main:0::sum:2 [ sum::return#0 ] main:0::sum:4 [ main::s1#0 sum::return#0 ] main:0::sum:6 [ main::s1#0 main::s2#0 sum::return#0 ] ) -- aby=yby_plus_aby 
    sty $ff
    clc
    adc $ff
  //SEG32 sum::@return
  breturn:
  //SEG33 [13] return  [ sum::return#0 ] ( main:0::sum:2 [ sum::return#0 ] main:0::sum:4 [ main::s1#0 sum::return#0 ] main:0::sum:6 [ main::s1#0 main::s2#0 sum::return#0 ] )
    rts
}

Removing instruction b2:
Removing instruction bend:
Removing instruction sum_from_main:
Removing instruction b1:
Removing instruction sum_from_b1:
Removing instruction b2:
Removing instruction sum_from_b2:
Removing instruction b3:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 @2
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @2 to main [phi:@2->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
    .label s1 = 2
    .label s3 = 3
  //SEG8 [2] call sum param-assignment [ sum::return#0 ] ( main:0 [ sum::return#0 ] )
  //SEG9 [11] phi from main to sum [phi:main->sum]
  //SEG10 [11] phi (byte) sum::b#3 = (byte/signed byte/word/signed word) 2 [phi:main->sum#0] -- aby=coby1 
    lda #2
  //SEG11 [11] phi (byte) sum::a#3 = (byte/signed byte/word/signed word) 1 [phi:main->sum#1] -- yby=coby1 
    ldy #1
    jsr sum
  //SEG12 main::@1
  //SEG13 [3] (byte) main::s1#0 ← (byte) sum::return#0 [ main::s1#0 ] ( main:0 [ main::s1#0 ] ) -- zpby1=aby 
    sta s1
  //SEG14 [4] call sum param-assignment [ main::s1#0 sum::return#0 ] ( main:0 [ main::s1#0 sum::return#0 ] )
  //SEG15 [11] phi from main::@1 to sum [phi:main::@1->sum]
  //SEG16 [11] phi (byte) sum::b#3 = (byte/signed byte/word/signed word) 4 [phi:main::@1->sum#0] -- aby=coby1 
    lda #4
  //SEG17 [11] phi (byte) sum::a#3 = (byte/signed byte/word/signed word) 3 [phi:main::@1->sum#1] -- yby=coby1 
    ldy #3
    jsr sum
  //SEG18 main::@2
  //SEG19 [5] (byte) main::s2#0 ← (byte) sum::return#0 [ main::s1#0 main::s2#0 ] ( main:0 [ main::s1#0 main::s2#0 ] ) -- xby=aby 
    tax
  //SEG20 [6] call sum param-assignment [ main::s1#0 sum::return#0 main::s2#0 ] ( main:0 [ main::s1#0 sum::return#0 main::s2#0 ] )
  //SEG21 [11] phi from main::@2 to sum [phi:main::@2->sum]
  //SEG22 [11] phi (byte) sum::b#3 = (byte/signed byte/word/signed word) 13 [phi:main::@2->sum#0] -- aby=coby1 
    lda #$d
  //SEG23 [11] phi (byte) sum::a#3 = (byte/signed byte/word/signed word) 9 [phi:main::@2->sum#1] -- yby=coby1 
    ldy #9
    jsr sum
  //SEG24 main::@3
  //SEG25 [7] (byte) main::s3#0 ← (byte) sum::return#0 [ main::s1#0 main::s2#0 main::s3#0 ] ( main:0 [ main::s1#0 main::s2#0 main::s3#0 ] ) -- zpby1=aby 
    sta s3
  //SEG26 [8] (byte~) main::$3 ← (byte) main::s1#0 + (byte) main::s2#0 [ main::s3#0 main::$3 ] ( main:0 [ main::s3#0 main::$3 ] ) -- aby=zpby1_plus_xby 
    txa
    clc
    adc s1
  //SEG27 [9] (byte) main::s4#0 ← (byte~) main::$3 + (byte) main::s3#0 [ ] ( main:0 [ ] ) -- aby=aby_plus_zpby1 
    clc
    adc s3
  //SEG28 main::@return
  //SEG29 [10] return  [ ] ( main:0 [ ] )
    rts
}
//SEG30 sum
sum: {
  //SEG31 [12] (byte) sum::return#0 ← (byte) sum::a#3 + (byte) sum::b#3 [ sum::return#0 ] ( main:0::sum:2 [ sum::return#0 ] main:0::sum:4 [ main::s1#0 sum::return#0 ] main:0::sum:6 [ main::s1#0 main::s2#0 sum::return#0 ] ) -- aby=yby_plus_aby 
    sty $ff
    clc
    adc $ff
  //SEG32 sum::@return
  //SEG33 [13] return  [ sum::return#0 ] ( main:0::sum:2 [ sum::return#0 ] main:0::sum:4 [ main::s1#0 sum::return#0 ] main:0::sum:6 [ main::s1#0 main::s2#0 sum::return#0 ] )
    rts
}

FINAL SYMBOL TABLE
(label) @2
(label) @begin
(label) @end
(void()) main()
(byte~) main::$3 reg byte a 4.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::s1
(byte) main::s1#0 s1 zp ZP_BYTE:2 0.8
(byte) main::s2
(byte) main::s2#0 reg byte x 1.3333333333333333
(byte) main::s3
(byte) main::s3#0 s3 zp ZP_BYTE:3 2.0
(byte) main::s4
(byte) main::s4#0 reg byte a 20.0
(byte()) sum((byte) sum::a , (byte) sum::b)
(label) sum::@return
(byte) sum::a
(byte) sum::a#3 reg byte y 2.0
(byte) sum::b
(byte) sum::b#3 reg byte a 2.0
(byte) sum::return
(byte) sum::return#0 reg byte a 1.6

reg byte y [ sum::a#3 ]
reg byte a [ sum::b#3 ]
zp ZP_BYTE:2 [ main::s1#0 ]
reg byte x [ main::s2#0 ]
zp ZP_BYTE:3 [ main::s3#0 ]
reg byte a [ main::$3 ]
reg byte a [ main::s4#0 ]
reg byte a [ sum::return#0 ]

FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 @2
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @2 to main [phi:@2->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
    .label s1 = 2
    .label s3 = 3
  //SEG8 [2] call sum param-assignment [ sum::return#0 ] ( main:0 [ sum::return#0 ] )
  //SEG9 [11] phi from main to sum [phi:main->sum]
  //SEG10 [11] phi (byte) sum::b#3 = (byte/signed byte/word/signed word) 2 [phi:main->sum#0] -- aby=coby1 
    lda #2
  //SEG11 [11] phi (byte) sum::a#3 = (byte/signed byte/word/signed word) 1 [phi:main->sum#1] -- yby=coby1 
    ldy #1
    jsr sum
  //SEG12 main::@1
  //SEG13 [3] (byte) main::s1#0 ← (byte) sum::return#0 [ main::s1#0 ] ( main:0 [ main::s1#0 ] ) -- zpby1=aby 
    sta s1
  //SEG14 [4] call sum param-assignment [ main::s1#0 sum::return#0 ] ( main:0 [ main::s1#0 sum::return#0 ] )
  //SEG15 [11] phi from main::@1 to sum [phi:main::@1->sum]
  //SEG16 [11] phi (byte) sum::b#3 = (byte/signed byte/word/signed word) 4 [phi:main::@1->sum#0] -- aby=coby1 
    lda #4
  //SEG17 [11] phi (byte) sum::a#3 = (byte/signed byte/word/signed word) 3 [phi:main::@1->sum#1] -- yby=coby1 
    ldy #3
    jsr sum
  //SEG18 main::@2
  //SEG19 [5] (byte) main::s2#0 ← (byte) sum::return#0 [ main::s1#0 main::s2#0 ] ( main:0 [ main::s1#0 main::s2#0 ] ) -- xby=aby 
    tax
  //SEG20 [6] call sum param-assignment [ main::s1#0 sum::return#0 main::s2#0 ] ( main:0 [ main::s1#0 sum::return#0 main::s2#0 ] )
  //SEG21 [11] phi from main::@2 to sum [phi:main::@2->sum]
  //SEG22 [11] phi (byte) sum::b#3 = (byte/signed byte/word/signed word) 13 [phi:main::@2->sum#0] -- aby=coby1 
    lda #$d
  //SEG23 [11] phi (byte) sum::a#3 = (byte/signed byte/word/signed word) 9 [phi:main::@2->sum#1] -- yby=coby1 
    ldy #9
    jsr sum
  //SEG24 main::@3
  //SEG25 [7] (byte) main::s3#0 ← (byte) sum::return#0 [ main::s1#0 main::s2#0 main::s3#0 ] ( main:0 [ main::s1#0 main::s2#0 main::s3#0 ] ) -- zpby1=aby 
    sta s3
  //SEG26 [8] (byte~) main::$3 ← (byte) main::s1#0 + (byte) main::s2#0 [ main::s3#0 main::$3 ] ( main:0 [ main::s3#0 main::$3 ] ) -- aby=zpby1_plus_xby 
    txa
    clc
    adc s1
  //SEG27 [9] (byte) main::s4#0 ← (byte~) main::$3 + (byte) main::s3#0 [ ] ( main:0 [ ] ) -- aby=aby_plus_zpby1 
    clc
    adc s3
  //SEG28 main::@return
  //SEG29 [10] return  [ ] ( main:0 [ ] )
    rts
}
//SEG30 sum
sum: {
  //SEG31 [12] (byte) sum::return#0 ← (byte) sum::a#3 + (byte) sum::b#3 [ sum::return#0 ] ( main:0::sum:2 [ sum::return#0 ] main:0::sum:4 [ main::s1#0 sum::return#0 ] main:0::sum:6 [ main::s1#0 main::s2#0 sum::return#0 ] ) -- aby=yby_plus_aby 
    sty $ff
    clc
    adc $ff
  //SEG32 sum::@return
  //SEG33 [13] return  [ sum::return#0 ] ( main:0::sum:2 [ sum::return#0 ] main:0::sum:4 [ main::s1#0 sum::return#0 ] main:0::sum:6 [ main::s1#0 main::s2#0 sum::return#0 ] )
    rts
}

