
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (dword) output::dw#0 ← (const dword) main::dw
  call output 
  to:main::@1
main::@1: scope:[main]  from main
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) output((dword) output::dw)
output: scope:[output]  from main
  (dword) output::dw#1 ← phi( main/(dword) output::dw#0 )
  *((const nomodify dword*) screen) ← (dword) output::dw#1
  to:output::@return
output::@return: scope:[output]  from output
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(label) main::@1
(label) main::@return
(const dword) main::dw = (dword)(const to_nomodify byte*) main::msg
(const to_nomodify byte*) main::msg[]  = (byte*) "camelot"
(void()) output((dword) output::dw)
(label) output::@return
(dword) output::dw
(dword) output::dw#0
(dword) output::dw#1
(const nomodify dword*) screen = (dword*)(number) $400

Simplifying constant pointer cast (dword*) 1024
Successful SSA optimization PassNCastSimplification
Identical Phi Values (dword) output::dw#1 (dword) output::dw#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const dword) output::dw#0 = main::dw
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant inlined output::dw#0 = (const dword) main::dw
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
CALL GRAPH
Calls in [main] to output:1 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) main::@1
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call output 
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return

(void()) output((dword) output::dw)
output: scope:[output]  from main
  [3] *((const nomodify dword*) screen) ← (const dword) main::dw
  to:output::@return
output::@return: scope:[output]  from output
  [4] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(void()) output((dword) output::dw)
(dword) output::dw

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test casting the address of an inline string to a dword.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // main
main: {
    .label dw = msg
    // [1] call output 
    jsr output
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
    msg: .text "camelot"
    .byte 0
}
  // output
output: {
    // [3] *((const nomodify dword*) screen) ← (const dword) main::dw -- _deref_pduc1=vduc2 
    lda #<main.dw
    sta screen
    lda #>main.dw
    sta screen+1
    lda #<main.dw>>$10
    sta screen+2
    lda #>main.dw>>$10
    sta screen+3
    jmp __breturn
    // output::@return
  __breturn:
    // [4] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] *((const nomodify dword*) screen) ← (const dword) main::dw [ ] ( output:1 [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [output] 
Uplift Scope [] 

Uplifting [main] best 48 combination 
Uplifting [output] best 48 combination 
Uplifting [] best 48 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test casting the address of an inline string to a dword.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // main
main: {
    .label dw = msg
    // [1] call output 
    jsr output
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
    msg: .text "camelot"
    .byte 0
}
  // output
output: {
    // [3] *((const nomodify dword*) screen) ← (const dword) main::dw -- _deref_pduc1=vduc2 
    lda #<main.dw
    sta screen
    lda #>main.dw
    sta screen+1
    lda #<main.dw>>$10
    sta screen+2
    lda #>main.dw>>$10
    sta screen+3
    jmp __breturn
    // output::@return
  __breturn:
    // [4] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@return
(const dword) main::dw = (dword)(const to_nomodify byte*) main::msg
(const to_nomodify byte*) main::msg[]  = (byte*) "camelot"
(void()) output((dword) output::dw)
(label) output::@return
(dword) output::dw
(const nomodify dword*) screen = (dword*) 1024



FINAL ASSEMBLER
Score: 42

  // File Comments
// Test casting the address of an inline string to a dword.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // main
main: {
    .label dw = msg
    // output(dw)
    // [1] call output 
    jsr output
    // main::@return
    // }
    // [2] return 
    rts
    msg: .text "camelot"
    .byte 0
}
  // output
output: {
    // *screen = dw
    // [3] *((const nomodify dword*) screen) ← (const dword) main::dw -- _deref_pduc1=vduc2 
    lda #<main.dw
    sta screen
    lda #>main.dw
    sta screen+1
    lda #<main.dw>>$10
    sta screen+2
    lda #>main.dw>>$10
    sta screen+3
    // output::@return
    // }
    // [4] return 
    rts
}
  // File Data

