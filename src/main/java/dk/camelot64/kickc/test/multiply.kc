// Implementation of the Seriously Fast Multiplication
// See http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
// Utilizes the fact that a*b = ((a+b)/2)^2 - ((a-b)/2)^2

byte* BGCOL = $d021;

void main() {
    init_mul_tables();
    init_mul_tables_asm();
    mul_tables_compare();
}

// mul_sqr tables will contain f(x)=int(x*x/4).
byte[512] mul_sqr_lo;
byte[512] mul_sqr_hi;

void init_mul_tables() {
  // If f(x) = x*x/4 then f(x+1) = f(x) + x/2 + 1/4
  byte* sqr_lo = mul_sqr_lo+1;
  byte* sqr_hi = mul_sqr_hi+1;
  word sqr = 0; // sqr = (i*i)/4
  byte i_2 = 0; // i/2
  for(word i : 1..511) {
    if((i&1)==0) {
        // sqr++ on even numbers because 1 = 2*1/4 (from the two previous numbers) + 1/2 (half of the previous uneven number)
        sqr++;
        // increase i/2 on even numbers
        i_2++;
    }
    *sqr_lo++ = <sqr;
    *sqr_hi++ = >sqr;
    // sqr = sqr + i/2 (when uneven 1/2 is not added here)
    sqr = sqr + i_2;
  }

}

// ASM based multiplication tables
byte[512] asm_mul_sqr_lo;
byte[512] asm_mul_sqr_hi;
// Initialize the multiplication tables using ASM code from
// http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
void init_mul_tables_asm() {
    asm{
        ldx #$00
        txa
        .byte $c9
    lb1:
        tya
        adc #$00
    ml1:
        sta asm_mul_sqr_hi,x
        tay
        cmp #$40
        txa
        ror
    ml9:
        adc #$00
        sta ml9+1
        inx
    ml0:
        sta asm_mul_sqr_lo,x
        bne lb1
        inc ml0+2
        inc ml1+2
        clc
        iny
        bne lb1
    }
}

// Compare the ASM-based mul tables with the KC-based mul tables
// Red screen on failure - green on success
void mul_tables_compare() {
     *BGCOL = 5;
    for( byte i: 0..255) {
        if(mul_sqr_lo[i] != asm_mul_sqr_lo[i])
            *BGCOL = 2;
        if((mul_sqr_hi+$100)[i] != (asm_mul_sqr_hi+$100)[i])
            *BGCOL = 2;
        if(mul_sqr_lo[i] != asm_mul_sqr_lo[i])
            *BGCOL = 2;
        if((mul_sqr_hi+$100)[i] != (asm_mul_sqr_hi+$100)[i])
            *BGCOL = 2;
    }
}