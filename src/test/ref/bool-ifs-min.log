
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::i#2 = phi( main/main::i#0, main::@2/main::i#1 )
  main::$0 = main::i#2 < $a
  main::$1 = main::i#2 & 1
  main::$2 = main::$1 == 0
  main::$3 = main::$0 && main::$2
  main::$4 = ! main::$3
  if(main::$4) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  main::i#3 = phi( main::@1/main::i#2, main::@3/main::i#4 )
  main::i#1 = main::i#3 + rangenext(0,$14)
  main::$5 = main::i#1 != rangelast(0,$14)
  if(main::$5) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  main::i#4 = phi( main::@1/main::i#2 )
  main::screen[main::i#4] = '*'
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
bool~ main::$0
number~ main::$1
bool~ main::$2
bool~ main::$3
bool~ main::$4
bool~ main::$5
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i#4
const nomodify byte* main::screen = (byte*)$400

Adding number conversion cast (unumber) $a in main::$0 = main::i#2 < $a
Adding number conversion cast (unumber) 1 in main::$1 = main::i#2 & 1
Adding number conversion cast (unumber) main::$1 in main::$1 = main::i#2 & (unumber)1
Adding number conversion cast (unumber) 0 in main::$2 = main::$1 == 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $a
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$1 = main::i#2 & 1
Alias main::i#2 = main::i#4 
Successful SSA optimization Pass2AliasElimination
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$5 [10] if(main::i#1!=rangelast(0,$14)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting ! if()-condition to reversed if() [6] main::$4 = ! main::$3
Rewriting && if()-condition to two if()s [5] main::$3 = main::$0 && main::$2
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [8] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [10] if(main::i#1!=rangelast(0,$14)) goto main::@1 to $15
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $15 in [6] if(main::i#1!=$15) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $15
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $15
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition main::$0 [4] if(main::i#2<$a) goto main::@4
Simple Condition main::$2 [9] if(main::$1==0) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [4] if(main::i#2>=$a) goto main::@2
Negating conditional jump and destination [9] if(main::$1!=0) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@5(between main::@2 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [9] main::i#5 = main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@5
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] main::i#2 = phi( main/0, main::@2/main::i#1 )
  [2] main::$1 = main::i#2 & 1
  [3] if(main::i#2>=$a) goto main::@2
  to:main::@4
main::@4: scope:[main]  from main::@1
  [4] if(main::$1!=0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@4
  [5] main::screen[main::i#2] = '*'
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3 main::@4
  [6] main::i#1 = ++ main::i#2
  [7] if(main::i#1!=$15) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [8] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte~ main::$1 11.0
byte main::i
byte main::i#1 16.5
byte main::i#2 11.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [5] main::screen[main::i#2] = '*' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [2] main::$1 = main::i#2 & 1 [ main::i#2 main::$1 ] (  [ main::i#2 main::$1 ] { }  ) always clobbers reg byte a 
Statement [5] main::screen[main::i#2] = '*' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::$1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 27.5: zp[1]:2 [ main::i#2 main::i#1 ] 11: zp[1]:3 [ main::$1 ] 
Uplift Scope [] 

Uplifting [main] best 471 combination reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$1 ] 
Uplifting [] best 471 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// A test of boolean conditions using && || and !
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$1 = main::i#2 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [3] if(main::i#2>=$a) goto main::@2 -- vbuxx_ge_vbuc1_then_la1 
    cpx #$a
    bcs __b2
    jmp __b4
    // main::@4
  __b4:
    // [4] if(main::$1!=0) goto main::@2 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b2
    jmp __b3
    // main::@3
  __b3:
    // [5] main::screen[main::i#2] = '*' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta screen,x
    jmp __b2
    // main::@2
  __b2:
    // [6] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [7] if(main::i#1!=$15) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$15
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
byte~ main::$1 reg byte a 11.0
byte main::i
byte main::i#1 reg byte x 16.5
byte main::i#2 reg byte x 11.0
const nomodify byte* main::screen = (byte*) 1024

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::$1 ]


FINAL ASSEMBLER
Score: 291

  // File Comments
// A test of boolean conditions using && || and !
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // i&1
    // [2] main::$1 = main::i#2 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if( (i<10) && ((i&1)==0) )
    // [3] if(main::i#2>=$a) goto main::@2 -- vbuxx_ge_vbuc1_then_la1 
    cpx #$a
    bcs __b2
    // main::@4
    // [4] if(main::$1!=0) goto main::@2 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b2
    // main::@3
    // screen[i] = '*'
    // [5] main::screen[main::i#2] = '*' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'*'
    sta screen,x
    // main::@2
  __b2:
    // for( char i : 0..20)
    // [6] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [7] if(main::i#1!=$15) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$15
    bne __b1
    // main::@return
    // }
    // [8] return 
    rts
}
  // File Data

