@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@3/(byte) main::i#1 )
  [6] (byte) sum::b#0 ← (byte) main::i#2 + (byte) 1
  [7] (byte) sum::c#0 ← (byte) main::i#2 + (byte) 2
  [8] (byte) sum::a#0 ← (byte) main::i#2
  [9] call sum 
  [10] (byte) sum::return#0 ← (byte) sum::return#1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [11] (byte~) main::$2 ← (byte) sum::return#0
  [12] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$2
  [13] (byte) sum2::b#0 ← (byte) main::i#2 + (byte) 1
  [14] (byte) sum2::c#0 ← (byte) main::i#2 + (byte) 2
  [15] (byte) sum2::a#0 ← (byte) main::i#2
  [16] call sum2 
  [17] (byte) sum2::return#0 ← (byte) sum2::return#1
  to:main::@3
main::@3: scope:[main]  from main::@2
  [18] (byte~) main::$5 ← (byte) sum2::return#0
  [19] *((const byte*) SCREEN2#0 + (byte) main::i#2) ← (byte~) main::$5
  [20] (byte) main::i#1 ← ++ (byte) main::i#2
  [21] if((byte) main::i#1!=(byte) $b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [22] return 
  to:@return
sum2: scope:[sum2]  from main::@2
  [23] (byte~) sum2::$0 ← (byte) sum2::a#0 + (byte) sum2::b#0
  [24] (byte) sum2::return#1 ← (byte~) sum2::$0 + (byte) sum2::c#0
  to:sum2::@return
sum2::@return: scope:[sum2]  from sum2
  [25] return 
  to:@return
sum: scope:[sum]  from main::@1
  [26] (byte~) sum::$0 ← (byte) sum::a#0 + (byte) sum::b#0
  [27] (byte) sum::return#1 ← (byte~) sum::$0 + (byte) sum::c#0
  to:sum::@return
sum::@return: scope:[sum]  from sum
  [28] return 
  to:@return
