byte* SCREEN = $0400;

main();

void main() {
    byte i=100;
    do {
        byte j=100;
        do {
            nest1();
        } while (--j>0)
    } while (--i>0)
}

void nest1() {
    byte i=100;
    do {
        byte j=100;
        do {
            nest2();
        } while (--j>0)
    } while (--i>0)
}

void nest2() {
    byte i=100;
    do {
        byte j=100;
        do {
            *SCREEN = j;
        } while (--j>0)
    } while (--i>0)
}

Adding pre/post-modifier (byte) main::j ← -- (byte) main::j
Adding pre/post-modifier (byte) main::i ← -- (byte) main::i
Adding pre/post-modifier (byte) nest1::j ← -- (byte) nest1::j
Adding pre/post-modifier (byte) nest1::i ← -- (byte) nest1::i
Adding pre/post-modifier (byte) nest2::j ← -- (byte) nest2::j
Adding pre/post-modifier (byte) nest2::i ← -- (byte) nest2::i
PROGRAM
  (byte*) SCREEN ← (word) 1024
  (void~) $0 ← call main 
proc (void()) main()
  (byte) main::i ← (byte) 100
main::@1:
  (byte) main::j ← (byte) 100
main::@2:
  (void~) main::$0 ← call nest1 
  (byte) main::j ← -- (byte) main::j
  (boolean~) main::$1 ← (byte) main::j > (byte) 0
  if((boolean~) main::$1) goto main::@2
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$2 ← (byte) main::i > (byte) 0
  if((boolean~) main::$2) goto main::@1
main::@return:
  return 
endproc // main()
proc (void()) nest1()
  (byte) nest1::i ← (byte) 100
nest1::@1:
  (byte) nest1::j ← (byte) 100
nest1::@2:
  (void~) nest1::$0 ← call nest2 
  (byte) nest1::j ← -- (byte) nest1::j
  (boolean~) nest1::$1 ← (byte) nest1::j > (byte) 0
  if((boolean~) nest1::$1) goto nest1::@2
  (byte) nest1::i ← -- (byte) nest1::i
  (boolean~) nest1::$2 ← (byte) nest1::i > (byte) 0
  if((boolean~) nest1::$2) goto nest1::@1
nest1::@return:
  return 
endproc // nest1()
proc (void()) nest2()
  (byte) nest2::i ← (byte) 100
nest2::@1:
  (byte) nest2::j ← (byte) 100
nest2::@2:
  *((byte*) SCREEN) ← (byte) nest2::j
  (byte) nest2::j ← -- (byte) nest2::j
  (boolean~) nest2::$0 ← (byte) nest2::j > (byte) 0
  if((boolean~) nest2::$0) goto nest2::@2
  (byte) nest2::i ← -- (byte) nest2::i
  (boolean~) nest2::$1 ← (byte) nest2::i > (byte) 0
  if((boolean~) nest2::$1) goto nest2::@1
nest2::@return:
  return 
endproc // nest2()

SYMBOLS
(void~) $0
(byte*) SCREEN
(void()) main()
(void~) main::$0
(boolean~) main::$1
(boolean~) main::$2
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::j
(void()) nest1()
(void~) nest1::$0
(boolean~) nest1::$1
(boolean~) nest1::$2
(label) nest1::@1
(label) nest1::@2
(label) nest1::@return
(byte) nest1::i
(byte) nest1::j
(void()) nest2()
(boolean~) nest2::$0
(boolean~) nest2::$1
(label) nest2::@1
(label) nest2::@2
(label) nest2::@return
(byte) nest2::i
(byte) nest2::j

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (void~) $0 ← call main 
  to:@1
main: scope:[main]  from
  (byte) main::i ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::j ← (byte) 100
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  (void~) main::$0 ← call nest1 
  (byte) main::j ← -- (byte) main::j
  (boolean~) main::$1 ← (byte) main::j > (byte) 0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$2 ← (byte) main::i > (byte) 0
  if((boolean~) main::$2) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@3
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
nest1: scope:[nest1]  from
  (byte) nest1::i ← (byte) 100
  to:nest1::@1
nest1::@1: scope:[nest1]  from nest1 nest1::@3
  (byte) nest1::j ← (byte) 100
  to:nest1::@2
nest1::@2: scope:[nest1]  from nest1::@1 nest1::@2
  (void~) nest1::$0 ← call nest2 
  (byte) nest1::j ← -- (byte) nest1::j
  (boolean~) nest1::$1 ← (byte) nest1::j > (byte) 0
  if((boolean~) nest1::$1) goto nest1::@2
  to:nest1::@3
nest1::@3: scope:[nest1]  from nest1::@2
  (byte) nest1::i ← -- (byte) nest1::i
  (boolean~) nest1::$2 ← (byte) nest1::i > (byte) 0
  if((boolean~) nest1::$2) goto nest1::@1
  to:nest1::@4
nest1::@4: scope:[nest1]  from nest1::@3
  to:nest1::@return
nest1::@return: scope:[nest1]  from nest1::@4
  return 
  to:@return
@2: scope:[]  from @1
  to:@3
nest2: scope:[nest2]  from
  (byte) nest2::i ← (byte) 100
  to:nest2::@1
nest2::@1: scope:[nest2]  from nest2 nest2::@3
  (byte) nest2::j ← (byte) 100
  to:nest2::@2
nest2::@2: scope:[nest2]  from nest2::@1 nest2::@2
  *((byte*) SCREEN) ← (byte) nest2::j
  (byte) nest2::j ← -- (byte) nest2::j
  (boolean~) nest2::$0 ← (byte) nest2::j > (byte) 0
  if((boolean~) nest2::$0) goto nest2::@2
  to:nest2::@3
nest2::@3: scope:[nest2]  from nest2::@2
  (byte) nest2::i ← -- (byte) nest2::i
  (boolean~) nest2::$1 ← (byte) nest2::i > (byte) 0
  if((boolean~) nest2::$1) goto nest2::@1
  to:nest2::@4
nest2::@4: scope:[nest2]  from nest2::@3
  to:nest2::@return
nest2::@return: scope:[nest2]  from nest2::@4
  return 
  to:@return
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

Removing empty block main::@4
Removing empty block @1
Removing empty block nest1::@4
Removing empty block @2
Removing empty block nest2::@4
Removing empty block @3
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (void~) $0 ← call main 
  to:@end
main: scope:[main]  from
  (byte) main::i ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::j ← (byte) 100
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  (void~) main::$0 ← call nest1 
  (byte) main::j ← -- (byte) main::j
  (boolean~) main::$1 ← (byte) main::j > (byte) 0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$2 ← (byte) main::i > (byte) 0
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest1: scope:[nest1]  from
  (byte) nest1::i ← (byte) 100
  to:nest1::@1
nest1::@1: scope:[nest1]  from nest1 nest1::@3
  (byte) nest1::j ← (byte) 100
  to:nest1::@2
nest1::@2: scope:[nest1]  from nest1::@1 nest1::@2
  (void~) nest1::$0 ← call nest2 
  (byte) nest1::j ← -- (byte) nest1::j
  (boolean~) nest1::$1 ← (byte) nest1::j > (byte) 0
  if((boolean~) nest1::$1) goto nest1::@2
  to:nest1::@3
nest1::@3: scope:[nest1]  from nest1::@2
  (byte) nest1::i ← -- (byte) nest1::i
  (boolean~) nest1::$2 ← (byte) nest1::i > (byte) 0
  if((boolean~) nest1::$2) goto nest1::@1
  to:nest1::@return
nest1::@return: scope:[nest1]  from nest1::@3
  return 
  to:@return
nest2: scope:[nest2]  from
  (byte) nest2::i ← (byte) 100
  to:nest2::@1
nest2::@1: scope:[nest2]  from nest2 nest2::@3
  (byte) nest2::j ← (byte) 100
  to:nest2::@2
nest2::@2: scope:[nest2]  from nest2::@1 nest2::@2
  *((byte*) SCREEN) ← (byte) nest2::j
  (byte) nest2::j ← -- (byte) nest2::j
  (boolean~) nest2::$0 ← (byte) nest2::j > (byte) 0
  if((boolean~) nest2::$0) goto nest2::@2
  to:nest2::@3
nest2::@3: scope:[nest2]  from nest2::@2
  (byte) nest2::i ← -- (byte) nest2::i
  (boolean~) nest2::$1 ← (byte) nest2::i > (byte) 0
  if((boolean~) nest2::$1) goto nest2::@1
  to:nest2::@return
nest2::@return: scope:[nest2]  from nest2::@3
  return 
  to:@return
@end: scope:[]  from @begin

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  call main param-assignment
  to:@4
@4: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte) main::i ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::j ← (byte) 100
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  call nest1 param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte) main::j ← -- (byte) main::j
  (boolean~) main::$1 ← (byte) main::j > (byte) 0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@5
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$2 ← (byte) main::i > (byte) 0
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest1: scope:[nest1]  from main::@2
  (byte) nest1::i ← (byte) 100
  to:nest1::@1
nest1::@1: scope:[nest1]  from nest1 nest1::@3
  (byte) nest1::j ← (byte) 100
  to:nest1::@2
nest1::@2: scope:[nest1]  from nest1::@1 nest1::@5
  call nest2 param-assignment
  to:nest1::@5
nest1::@5: scope:[nest1]  from nest1::@2
  (byte) nest1::j ← -- (byte) nest1::j
  (boolean~) nest1::$1 ← (byte) nest1::j > (byte) 0
  if((boolean~) nest1::$1) goto nest1::@2
  to:nest1::@3
nest1::@3: scope:[nest1]  from nest1::@5
  (byte) nest1::i ← -- (byte) nest1::i
  (boolean~) nest1::$2 ← (byte) nest1::i > (byte) 0
  if((boolean~) nest1::$2) goto nest1::@1
  to:nest1::@return
nest1::@return: scope:[nest1]  from nest1::@3
  return 
  to:@return
nest2: scope:[nest2]  from nest1::@2
  (byte) nest2::i ← (byte) 100
  to:nest2::@1
nest2::@1: scope:[nest2]  from nest2 nest2::@3
  (byte) nest2::j ← (byte) 100
  to:nest2::@2
nest2::@2: scope:[nest2]  from nest2::@1 nest2::@2
  *((byte*) SCREEN) ← (byte) nest2::j
  (byte) nest2::j ← -- (byte) nest2::j
  (boolean~) nest2::$0 ← (byte) nest2::j > (byte) 0
  if((boolean~) nest2::$0) goto nest2::@2
  to:nest2::@3
nest2::@3: scope:[nest2]  from nest2::@2
  (byte) nest2::i ← -- (byte) nest2::i
  (boolean~) nest2::$1 ← (byte) nest2::i > (byte) 0
  if((boolean~) nest2::$1) goto nest2::@1
  to:nest2::@return
nest2::@return: scope:[nest2]  from nest2::@3
  return 
  to:@return
@end: scope:[]  from @4

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@4
@4: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#13 ← phi( @begin/(byte*) SCREEN#0 )
  (byte) main::i#0 ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#11 ← phi( main/(byte*) SCREEN#13 main::@3/(byte*) SCREEN#14 )
  (byte) main::i#5 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  (byte) main::j#0 ← (byte) 100
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte*) SCREEN#10 ← phi( main::@1/(byte*) SCREEN#11 main::@5/(byte*) SCREEN#12 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#5 main::@5/(byte) main::i#3 )
  (byte) main::j#3 ← phi( main::@1/(byte) main::j#0 main::@5/(byte) main::j#1 )
  call nest1 param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte*) SCREEN#12 ← phi( main::@2/(byte*) SCREEN#10 )
  (byte) main::i#3 ← phi( main::@2/(byte) main::i#4 )
  (byte) main::j#2 ← phi( main::@2/(byte) main::j#3 )
  (byte) main::j#1 ← -- (byte) main::j#2
  (boolean~) main::$1 ← (byte) main::j#1 > (byte) 0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@5
  (byte*) SCREEN#14 ← phi( main::@5/(byte*) SCREEN#12 )
  (byte) main::i#2 ← phi( main::@5/(byte) main::i#3 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$2 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest1: scope:[nest1]  from main::@2
  (byte*) SCREEN#8 ← phi( main::@2/(byte*) SCREEN#10 )
  (byte) nest1::i#0 ← (byte) 100
  to:nest1::@1
nest1::@1: scope:[nest1]  from nest1 nest1::@3
  (byte*) SCREEN#6 ← phi( nest1/(byte*) SCREEN#8 nest1::@3/(byte*) SCREEN#9 )
  (byte) nest1::i#5 ← phi( nest1/(byte) nest1::i#0 nest1::@3/(byte) nest1::i#1 )
  (byte) nest1::j#0 ← (byte) 100
  to:nest1::@2
nest1::@2: scope:[nest1]  from nest1::@1 nest1::@5
  (byte*) SCREEN#5 ← phi( nest1::@1/(byte*) SCREEN#6 nest1::@5/(byte*) SCREEN#7 )
  (byte) nest1::i#4 ← phi( nest1::@1/(byte) nest1::i#5 nest1::@5/(byte) nest1::i#3 )
  (byte) nest1::j#3 ← phi( nest1::@1/(byte) nest1::j#0 nest1::@5/(byte) nest1::j#1 )
  call nest2 param-assignment
  to:nest1::@5
nest1::@5: scope:[nest1]  from nest1::@2
  (byte*) SCREEN#7 ← phi( nest1::@2/(byte*) SCREEN#5 )
  (byte) nest1::i#3 ← phi( nest1::@2/(byte) nest1::i#4 )
  (byte) nest1::j#2 ← phi( nest1::@2/(byte) nest1::j#3 )
  (byte) nest1::j#1 ← -- (byte) nest1::j#2
  (boolean~) nest1::$1 ← (byte) nest1::j#1 > (byte) 0
  if((boolean~) nest1::$1) goto nest1::@2
  to:nest1::@3
nest1::@3: scope:[nest1]  from nest1::@5
  (byte*) SCREEN#9 ← phi( nest1::@5/(byte*) SCREEN#7 )
  (byte) nest1::i#2 ← phi( nest1::@5/(byte) nest1::i#3 )
  (byte) nest1::i#1 ← -- (byte) nest1::i#2
  (boolean~) nest1::$2 ← (byte) nest1::i#1 > (byte) 0
  if((boolean~) nest1::$2) goto nest1::@1
  to:nest1::@return
nest1::@return: scope:[nest1]  from nest1::@3
  return 
  to:@return
nest2: scope:[nest2]  from nest1::@2
  (byte*) SCREEN#3 ← phi( nest1::@2/(byte*) SCREEN#5 )
  (byte) nest2::i#0 ← (byte) 100
  to:nest2::@1
nest2::@1: scope:[nest2]  from nest2 nest2::@3
  (byte) nest2::i#4 ← phi( nest2/(byte) nest2::i#0 nest2::@3/(byte) nest2::i#1 )
  (byte*) SCREEN#2 ← phi( nest2/(byte*) SCREEN#3 nest2::@3/(byte*) SCREEN#4 )
  (byte) nest2::j#0 ← (byte) 100
  to:nest2::@2
nest2::@2: scope:[nest2]  from nest2::@1 nest2::@2
  (byte) nest2::i#3 ← phi( nest2::@1/(byte) nest2::i#4 nest2::@2/(byte) nest2::i#3 )
  (byte*) SCREEN#1 ← phi( nest2::@1/(byte*) SCREEN#2 nest2::@2/(byte*) SCREEN#1 )
  (byte) nest2::j#2 ← phi( nest2::@1/(byte) nest2::j#0 nest2::@2/(byte) nest2::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest2::j#2
  (byte) nest2::j#1 ← -- (byte) nest2::j#2
  (boolean~) nest2::$0 ← (byte) nest2::j#1 > (byte) 0
  if((boolean~) nest2::$0) goto nest2::@2
  to:nest2::@3
nest2::@3: scope:[nest2]  from nest2::@2
  (byte*) SCREEN#4 ← phi( nest2::@2/(byte*) SCREEN#1 )
  (byte) nest2::i#2 ← phi( nest2::@2/(byte) nest2::i#3 )
  (byte) nest2::i#1 ← -- (byte) nest2::i#2
  (boolean~) nest2::$1 ← (byte) nest2::i#1 > (byte) 0
  if((boolean~) nest2::$1) goto nest2::@1
  to:nest2::@return
nest2::@return: scope:[nest2]  from nest2::@3
  return 
  to:@return
@end: scope:[]  from @4

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@4
@4: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#13 ← phi( @begin/(byte*) SCREEN#0 )
  (byte) main::i#0 ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#11 ← phi( main/(byte*) SCREEN#13 main::@3/(byte*) SCREEN#14 )
  (byte) main::i#5 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  (byte) main::j#0 ← (byte) 100
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte*) SCREEN#10 ← phi( main::@1/(byte*) SCREEN#11 main::@5/(byte*) SCREEN#12 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#5 main::@5/(byte) main::i#3 )
  (byte) main::j#3 ← phi( main::@1/(byte) main::j#0 main::@5/(byte) main::j#1 )
  call nest1 param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte*) SCREEN#12 ← phi( main::@2/(byte*) SCREEN#10 )
  (byte) main::i#3 ← phi( main::@2/(byte) main::i#4 )
  (byte) main::j#2 ← phi( main::@2/(byte) main::j#3 )
  (byte) main::j#1 ← -- (byte) main::j#2
  (boolean~) main::$1 ← (byte) main::j#1 > (byte) 0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@5
  (byte*) SCREEN#14 ← phi( main::@5/(byte*) SCREEN#12 )
  (byte) main::i#2 ← phi( main::@5/(byte) main::i#3 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$2 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest1: scope:[nest1]  from main::@2
  (byte*) SCREEN#8 ← phi( main::@2/(byte*) SCREEN#10 )
  (byte) nest1::i#0 ← (byte) 100
  to:nest1::@1
nest1::@1: scope:[nest1]  from nest1 nest1::@3
  (byte*) SCREEN#6 ← phi( nest1/(byte*) SCREEN#8 nest1::@3/(byte*) SCREEN#9 )
  (byte) nest1::i#5 ← phi( nest1/(byte) nest1::i#0 nest1::@3/(byte) nest1::i#1 )
  (byte) nest1::j#0 ← (byte) 100
  to:nest1::@2
nest1::@2: scope:[nest1]  from nest1::@1 nest1::@5
  (byte*) SCREEN#5 ← phi( nest1::@1/(byte*) SCREEN#6 nest1::@5/(byte*) SCREEN#7 )
  (byte) nest1::i#4 ← phi( nest1::@1/(byte) nest1::i#5 nest1::@5/(byte) nest1::i#3 )
  (byte) nest1::j#3 ← phi( nest1::@1/(byte) nest1::j#0 nest1::@5/(byte) nest1::j#1 )
  call nest2 param-assignment
  to:nest1::@5
nest1::@5: scope:[nest1]  from nest1::@2
  (byte*) SCREEN#7 ← phi( nest1::@2/(byte*) SCREEN#5 )
  (byte) nest1::i#3 ← phi( nest1::@2/(byte) nest1::i#4 )
  (byte) nest1::j#2 ← phi( nest1::@2/(byte) nest1::j#3 )
  (byte) nest1::j#1 ← -- (byte) nest1::j#2
  (boolean~) nest1::$1 ← (byte) nest1::j#1 > (byte) 0
  if((boolean~) nest1::$1) goto nest1::@2
  to:nest1::@3
nest1::@3: scope:[nest1]  from nest1::@5
  (byte*) SCREEN#9 ← phi( nest1::@5/(byte*) SCREEN#7 )
  (byte) nest1::i#2 ← phi( nest1::@5/(byte) nest1::i#3 )
  (byte) nest1::i#1 ← -- (byte) nest1::i#2
  (boolean~) nest1::$2 ← (byte) nest1::i#1 > (byte) 0
  if((boolean~) nest1::$2) goto nest1::@1
  to:nest1::@return
nest1::@return: scope:[nest1]  from nest1::@3
  return 
  to:@return
nest2: scope:[nest2]  from nest1::@2
  (byte*) SCREEN#3 ← phi( nest1::@2/(byte*) SCREEN#5 )
  (byte) nest2::i#0 ← (byte) 100
  to:nest2::@1
nest2::@1: scope:[nest2]  from nest2 nest2::@3
  (byte) nest2::i#4 ← phi( nest2/(byte) nest2::i#0 nest2::@3/(byte) nest2::i#1 )
  (byte*) SCREEN#2 ← phi( nest2/(byte*) SCREEN#3 nest2::@3/(byte*) SCREEN#4 )
  (byte) nest2::j#0 ← (byte) 100
  to:nest2::@2
nest2::@2: scope:[nest2]  from nest2::@1 nest2::@2
  (byte) nest2::i#3 ← phi( nest2::@1/(byte) nest2::i#4 nest2::@2/(byte) nest2::i#3 )
  (byte*) SCREEN#1 ← phi( nest2::@1/(byte*) SCREEN#2 nest2::@2/(byte*) SCREEN#1 )
  (byte) nest2::j#2 ← phi( nest2::@1/(byte) nest2::j#0 nest2::@2/(byte) nest2::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest2::j#2
  (byte) nest2::j#1 ← -- (byte) nest2::j#2
  (boolean~) nest2::$0 ← (byte) nest2::j#1 > (byte) 0
  if((boolean~) nest2::$0) goto nest2::@2
  to:nest2::@3
nest2::@3: scope:[nest2]  from nest2::@2
  (byte*) SCREEN#4 ← phi( nest2::@2/(byte*) SCREEN#1 )
  (byte) nest2::i#2 ← phi( nest2::@2/(byte) nest2::i#3 )
  (byte) nest2::i#1 ← -- (byte) nest2::i#2
  (boolean~) nest2::$1 ← (byte) nest2::i#1 > (byte) 0
  if((boolean~) nest2::$1) goto nest2::@1
  to:nest2::@return
nest2::@return: scope:[nest2]  from nest2::@3
  return 
  to:@return
@end: scope:[]  from @4

Culled Empty Block (label) @4
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#13 ← phi( @begin/(byte*) SCREEN#0 )
  (byte) main::i#0 ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#11 ← phi( main/(byte*) SCREEN#13 main::@3/(byte*) SCREEN#14 )
  (byte) main::i#5 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  (byte) main::j#0 ← (byte) 100
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte*) SCREEN#10 ← phi( main::@1/(byte*) SCREEN#11 main::@5/(byte*) SCREEN#12 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#5 main::@5/(byte) main::i#3 )
  (byte) main::j#3 ← phi( main::@1/(byte) main::j#0 main::@5/(byte) main::j#1 )
  call nest1 param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte*) SCREEN#12 ← phi( main::@2/(byte*) SCREEN#10 )
  (byte) main::i#3 ← phi( main::@2/(byte) main::i#4 )
  (byte) main::j#2 ← phi( main::@2/(byte) main::j#3 )
  (byte) main::j#1 ← -- (byte) main::j#2
  (boolean~) main::$1 ← (byte) main::j#1 > (byte) 0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@5
  (byte*) SCREEN#14 ← phi( main::@5/(byte*) SCREEN#12 )
  (byte) main::i#2 ← phi( main::@5/(byte) main::i#3 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$2 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest1: scope:[nest1]  from main::@2
  (byte*) SCREEN#8 ← phi( main::@2/(byte*) SCREEN#10 )
  (byte) nest1::i#0 ← (byte) 100
  to:nest1::@1
nest1::@1: scope:[nest1]  from nest1 nest1::@3
  (byte*) SCREEN#6 ← phi( nest1/(byte*) SCREEN#8 nest1::@3/(byte*) SCREEN#9 )
  (byte) nest1::i#5 ← phi( nest1/(byte) nest1::i#0 nest1::@3/(byte) nest1::i#1 )
  (byte) nest1::j#0 ← (byte) 100
  to:nest1::@2
nest1::@2: scope:[nest1]  from nest1::@1 nest1::@5
  (byte*) SCREEN#5 ← phi( nest1::@1/(byte*) SCREEN#6 nest1::@5/(byte*) SCREEN#7 )
  (byte) nest1::i#4 ← phi( nest1::@1/(byte) nest1::i#5 nest1::@5/(byte) nest1::i#3 )
  (byte) nest1::j#3 ← phi( nest1::@1/(byte) nest1::j#0 nest1::@5/(byte) nest1::j#1 )
  call nest2 param-assignment
  to:nest1::@5
nest1::@5: scope:[nest1]  from nest1::@2
  (byte*) SCREEN#7 ← phi( nest1::@2/(byte*) SCREEN#5 )
  (byte) nest1::i#3 ← phi( nest1::@2/(byte) nest1::i#4 )
  (byte) nest1::j#2 ← phi( nest1::@2/(byte) nest1::j#3 )
  (byte) nest1::j#1 ← -- (byte) nest1::j#2
  (boolean~) nest1::$1 ← (byte) nest1::j#1 > (byte) 0
  if((boolean~) nest1::$1) goto nest1::@2
  to:nest1::@3
nest1::@3: scope:[nest1]  from nest1::@5
  (byte*) SCREEN#9 ← phi( nest1::@5/(byte*) SCREEN#7 )
  (byte) nest1::i#2 ← phi( nest1::@5/(byte) nest1::i#3 )
  (byte) nest1::i#1 ← -- (byte) nest1::i#2
  (boolean~) nest1::$2 ← (byte) nest1::i#1 > (byte) 0
  if((boolean~) nest1::$2) goto nest1::@1
  to:nest1::@return
nest1::@return: scope:[nest1]  from nest1::@3
  return 
  to:@return
nest2: scope:[nest2]  from nest1::@2
  (byte*) SCREEN#3 ← phi( nest1::@2/(byte*) SCREEN#5 )
  (byte) nest2::i#0 ← (byte) 100
  to:nest2::@1
nest2::@1: scope:[nest2]  from nest2 nest2::@3
  (byte) nest2::i#4 ← phi( nest2/(byte) nest2::i#0 nest2::@3/(byte) nest2::i#1 )
  (byte*) SCREEN#2 ← phi( nest2/(byte*) SCREEN#3 nest2::@3/(byte*) SCREEN#4 )
  (byte) nest2::j#0 ← (byte) 100
  to:nest2::@2
nest2::@2: scope:[nest2]  from nest2::@1 nest2::@2
  (byte) nest2::i#3 ← phi( nest2::@1/(byte) nest2::i#4 nest2::@2/(byte) nest2::i#3 )
  (byte*) SCREEN#1 ← phi( nest2::@1/(byte*) SCREEN#2 nest2::@2/(byte*) SCREEN#1 )
  (byte) nest2::j#2 ← phi( nest2::@1/(byte) nest2::j#0 nest2::@2/(byte) nest2::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest2::j#2
  (byte) nest2::j#1 ← -- (byte) nest2::j#2
  (boolean~) nest2::$0 ← (byte) nest2::j#1 > (byte) 0
  if((boolean~) nest2::$0) goto nest2::@2
  to:nest2::@3
nest2::@3: scope:[nest2]  from nest2::@2
  (byte*) SCREEN#4 ← phi( nest2::@2/(byte*) SCREEN#1 )
  (byte) nest2::i#2 ← phi( nest2::@2/(byte) nest2::i#3 )
  (byte) nest2::i#1 ← -- (byte) nest2::i#2
  (boolean~) nest2::$1 ← (byte) nest2::i#1 > (byte) 0
  if((boolean~) nest2::$1) goto nest2::@1
  to:nest2::@return
nest2::@return: scope:[nest2]  from nest2::@3
  return 
  to:@return
@end: scope:[]  from @begin

Constant (byte*) SCREEN#0 (word) 1024
Constant (byte) main::i#0 (byte) 100
Constant (byte) main::j#0 (byte) 100
Constant (byte) nest1::i#0 (byte) 100
Constant (byte) nest1::j#0 (byte) 100
Constant (byte) nest2::i#0 (byte) 100
Constant (byte) nest2::j#0 (byte) 100
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#13 ← phi( @begin/(word) 1024 )
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#11 ← phi( main/(byte*) SCREEN#13 main::@3/(byte*) SCREEN#14 )
  (byte) main::i#5 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte*) SCREEN#10 ← phi( main::@1/(byte*) SCREEN#11 main::@5/(byte*) SCREEN#12 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#5 main::@5/(byte) main::i#3 )
  (byte) main::j#3 ← phi( main::@1/(byte) 100 main::@5/(byte) main::j#1 )
  call nest1 param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte*) SCREEN#12 ← phi( main::@2/(byte*) SCREEN#10 )
  (byte) main::i#3 ← phi( main::@2/(byte) main::i#4 )
  (byte) main::j#2 ← phi( main::@2/(byte) main::j#3 )
  (byte) main::j#1 ← -- (byte) main::j#2
  (boolean~) main::$1 ← (byte) main::j#1 > (byte) 0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@5
  (byte*) SCREEN#14 ← phi( main::@5/(byte*) SCREEN#12 )
  (byte) main::i#2 ← phi( main::@5/(byte) main::i#3 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$2 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest1: scope:[nest1]  from main::@2
  (byte*) SCREEN#8 ← phi( main::@2/(byte*) SCREEN#10 )
  to:nest1::@1
nest1::@1: scope:[nest1]  from nest1 nest1::@3
  (byte*) SCREEN#6 ← phi( nest1/(byte*) SCREEN#8 nest1::@3/(byte*) SCREEN#9 )
  (byte) nest1::i#5 ← phi( nest1/(byte) 100 nest1::@3/(byte) nest1::i#1 )
  to:nest1::@2
nest1::@2: scope:[nest1]  from nest1::@1 nest1::@5
  (byte*) SCREEN#5 ← phi( nest1::@1/(byte*) SCREEN#6 nest1::@5/(byte*) SCREEN#7 )
  (byte) nest1::i#4 ← phi( nest1::@1/(byte) nest1::i#5 nest1::@5/(byte) nest1::i#3 )
  (byte) nest1::j#3 ← phi( nest1::@1/(byte) 100 nest1::@5/(byte) nest1::j#1 )
  call nest2 param-assignment
  to:nest1::@5
nest1::@5: scope:[nest1]  from nest1::@2
  (byte*) SCREEN#7 ← phi( nest1::@2/(byte*) SCREEN#5 )
  (byte) nest1::i#3 ← phi( nest1::@2/(byte) nest1::i#4 )
  (byte) nest1::j#2 ← phi( nest1::@2/(byte) nest1::j#3 )
  (byte) nest1::j#1 ← -- (byte) nest1::j#2
  (boolean~) nest1::$1 ← (byte) nest1::j#1 > (byte) 0
  if((boolean~) nest1::$1) goto nest1::@2
  to:nest1::@3
nest1::@3: scope:[nest1]  from nest1::@5
  (byte*) SCREEN#9 ← phi( nest1::@5/(byte*) SCREEN#7 )
  (byte) nest1::i#2 ← phi( nest1::@5/(byte) nest1::i#3 )
  (byte) nest1::i#1 ← -- (byte) nest1::i#2
  (boolean~) nest1::$2 ← (byte) nest1::i#1 > (byte) 0
  if((boolean~) nest1::$2) goto nest1::@1
  to:nest1::@return
nest1::@return: scope:[nest1]  from nest1::@3
  return 
  to:@return
nest2: scope:[nest2]  from nest1::@2
  (byte*) SCREEN#3 ← phi( nest1::@2/(byte*) SCREEN#5 )
  to:nest2::@1
nest2::@1: scope:[nest2]  from nest2 nest2::@3
  (byte) nest2::i#4 ← phi( nest2/(byte) 100 nest2::@3/(byte) nest2::i#1 )
  (byte*) SCREEN#2 ← phi( nest2/(byte*) SCREEN#3 nest2::@3/(byte*) SCREEN#4 )
  to:nest2::@2
nest2::@2: scope:[nest2]  from nest2::@1 nest2::@2
  (byte) nest2::i#3 ← phi( nest2::@1/(byte) nest2::i#4 nest2::@2/(byte) nest2::i#3 )
  (byte*) SCREEN#1 ← phi( nest2::@1/(byte*) SCREEN#2 nest2::@2/(byte*) SCREEN#1 )
  (byte) nest2::j#2 ← phi( nest2::@1/(byte) 100 nest2::@2/(byte) nest2::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest2::j#2
  (byte) nest2::j#1 ← -- (byte) nest2::j#2
  (boolean~) nest2::$0 ← (byte) nest2::j#1 > (byte) 0
  if((boolean~) nest2::$0) goto nest2::@2
  to:nest2::@3
nest2::@3: scope:[nest2]  from nest2::@2
  (byte*) SCREEN#4 ← phi( nest2::@2/(byte*) SCREEN#1 )
  (byte) nest2::i#2 ← phi( nest2::@2/(byte) nest2::i#3 )
  (byte) nest2::i#1 ← -- (byte) nest2::i#2
  (boolean~) nest2::$1 ← (byte) nest2::i#1 > (byte) 0
  if((boolean~) nest2::$1) goto nest2::@1
  to:nest2::@return
nest2::@return: scope:[nest2]  from nest2::@3
  return 
  to:@return
@end: scope:[]  from @begin

Alias (byte) main::j#2 = (byte) main::j#3 
Alias (byte) main::i#2 = (byte) main::i#3 (byte) main::i#4 
Alias (byte*) SCREEN#10 = (byte*) SCREEN#12 (byte*) SCREEN#14 (byte*) SCREEN#8 
Alias (byte) nest1::j#2 = (byte) nest1::j#3 
Alias (byte) nest1::i#2 = (byte) nest1::i#3 (byte) nest1::i#4 
Alias (byte*) SCREEN#3 = (byte*) SCREEN#7 (byte*) SCREEN#5 (byte*) SCREEN#9 
Alias (byte) nest2::i#2 = (byte) nest2::i#3 
Alias (byte*) SCREEN#1 = (byte*) SCREEN#4 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#13 ← phi( @begin/(word) 1024 )
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#11 ← phi( main/(byte*) SCREEN#13 main::@3/(byte*) SCREEN#10 )
  (byte) main::i#5 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte*) SCREEN#10 ← phi( main::@1/(byte*) SCREEN#11 main::@5/(byte*) SCREEN#10 )
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#5 main::@5/(byte) main::i#2 )
  (byte) main::j#2 ← phi( main::@1/(byte) 100 main::@5/(byte) main::j#1 )
  call nest1 param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte) main::j#1 ← -- (byte) main::j#2
  (boolean~) main::$1 ← (byte) main::j#1 > (byte) 0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@5
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$2 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest1: scope:[nest1]  from main::@2
  to:nest1::@1
nest1::@1: scope:[nest1]  from nest1 nest1::@3
  (byte*) SCREEN#6 ← phi( nest1/(byte*) SCREEN#10 nest1::@3/(byte*) SCREEN#3 )
  (byte) nest1::i#5 ← phi( nest1/(byte) 100 nest1::@3/(byte) nest1::i#1 )
  to:nest1::@2
nest1::@2: scope:[nest1]  from nest1::@1 nest1::@5
  (byte*) SCREEN#3 ← phi( nest1::@1/(byte*) SCREEN#6 nest1::@5/(byte*) SCREEN#3 )
  (byte) nest1::i#2 ← phi( nest1::@1/(byte) nest1::i#5 nest1::@5/(byte) nest1::i#2 )
  (byte) nest1::j#2 ← phi( nest1::@1/(byte) 100 nest1::@5/(byte) nest1::j#1 )
  call nest2 param-assignment
  to:nest1::@5
nest1::@5: scope:[nest1]  from nest1::@2
  (byte) nest1::j#1 ← -- (byte) nest1::j#2
  (boolean~) nest1::$1 ← (byte) nest1::j#1 > (byte) 0
  if((boolean~) nest1::$1) goto nest1::@2
  to:nest1::@3
nest1::@3: scope:[nest1]  from nest1::@5
  (byte) nest1::i#1 ← -- (byte) nest1::i#2
  (boolean~) nest1::$2 ← (byte) nest1::i#1 > (byte) 0
  if((boolean~) nest1::$2) goto nest1::@1
  to:nest1::@return
nest1::@return: scope:[nest1]  from nest1::@3
  return 
  to:@return
nest2: scope:[nest2]  from nest1::@2
  to:nest2::@1
nest2::@1: scope:[nest2]  from nest2 nest2::@3
  (byte) nest2::i#4 ← phi( nest2/(byte) 100 nest2::@3/(byte) nest2::i#1 )
  (byte*) SCREEN#2 ← phi( nest2/(byte*) SCREEN#3 nest2::@3/(byte*) SCREEN#1 )
  to:nest2::@2
nest2::@2: scope:[nest2]  from nest2::@1 nest2::@2
  (byte) nest2::i#2 ← phi( nest2::@1/(byte) nest2::i#4 nest2::@2/(byte) nest2::i#2 )
  (byte*) SCREEN#1 ← phi( nest2::@1/(byte*) SCREEN#2 nest2::@2/(byte*) SCREEN#1 )
  (byte) nest2::j#2 ← phi( nest2::@1/(byte) 100 nest2::@2/(byte) nest2::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest2::j#2
  (byte) nest2::j#1 ← -- (byte) nest2::j#2
  (boolean~) nest2::$0 ← (byte) nest2::j#1 > (byte) 0
  if((boolean~) nest2::$0) goto nest2::@2
  to:nest2::@3
nest2::@3: scope:[nest2]  from nest2::@2
  (byte) nest2::i#1 ← -- (byte) nest2::i#2
  (boolean~) nest2::$1 ← (byte) nest2::i#1 > (byte) 0
  if((boolean~) nest2::$1) goto nest2::@1
  to:nest2::@return
nest2::@return: scope:[nest2]  from nest2::@3
  return 
  to:@return
@end: scope:[]  from @begin

Redundant Phi (byte*) SCREEN#13 (word) 1024
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#11 ← phi( main/(word) 1024 main::@3/(byte*) SCREEN#10 )
  (byte) main::i#5 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte*) SCREEN#10 ← phi( main::@1/(byte*) SCREEN#11 main::@5/(byte*) SCREEN#10 )
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#5 main::@5/(byte) main::i#2 )
  (byte) main::j#2 ← phi( main::@1/(byte) 100 main::@5/(byte) main::j#1 )
  call nest1 param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte) main::j#1 ← -- (byte) main::j#2
  (boolean~) main::$1 ← (byte) main::j#1 > (byte) 0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@5
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$2 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest1: scope:[nest1]  from main::@2
  to:nest1::@1
nest1::@1: scope:[nest1]  from nest1 nest1::@3
  (byte*) SCREEN#6 ← phi( nest1/(byte*) SCREEN#10 nest1::@3/(byte*) SCREEN#3 )
  (byte) nest1::i#5 ← phi( nest1/(byte) 100 nest1::@3/(byte) nest1::i#1 )
  to:nest1::@2
nest1::@2: scope:[nest1]  from nest1::@1 nest1::@5
  (byte*) SCREEN#3 ← phi( nest1::@1/(byte*) SCREEN#6 nest1::@5/(byte*) SCREEN#3 )
  (byte) nest1::i#2 ← phi( nest1::@1/(byte) nest1::i#5 nest1::@5/(byte) nest1::i#2 )
  (byte) nest1::j#2 ← phi( nest1::@1/(byte) 100 nest1::@5/(byte) nest1::j#1 )
  call nest2 param-assignment
  to:nest1::@5
nest1::@5: scope:[nest1]  from nest1::@2
  (byte) nest1::j#1 ← -- (byte) nest1::j#2
  (boolean~) nest1::$1 ← (byte) nest1::j#1 > (byte) 0
  if((boolean~) nest1::$1) goto nest1::@2
  to:nest1::@3
nest1::@3: scope:[nest1]  from nest1::@5
  (byte) nest1::i#1 ← -- (byte) nest1::i#2
  (boolean~) nest1::$2 ← (byte) nest1::i#1 > (byte) 0
  if((boolean~) nest1::$2) goto nest1::@1
  to:nest1::@return
nest1::@return: scope:[nest1]  from nest1::@3
  return 
  to:@return
nest2: scope:[nest2]  from nest1::@2
  to:nest2::@1
nest2::@1: scope:[nest2]  from nest2 nest2::@3
  (byte) nest2::i#4 ← phi( nest2/(byte) 100 nest2::@3/(byte) nest2::i#1 )
  (byte*) SCREEN#2 ← phi( nest2/(byte*) SCREEN#3 nest2::@3/(byte*) SCREEN#1 )
  to:nest2::@2
nest2::@2: scope:[nest2]  from nest2::@1 nest2::@2
  (byte) nest2::i#2 ← phi( nest2::@1/(byte) nest2::i#4 nest2::@2/(byte) nest2::i#2 )
  (byte*) SCREEN#1 ← phi( nest2::@1/(byte*) SCREEN#2 nest2::@2/(byte*) SCREEN#1 )
  (byte) nest2::j#2 ← phi( nest2::@1/(byte) 100 nest2::@2/(byte) nest2::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest2::j#2
  (byte) nest2::j#1 ← -- (byte) nest2::j#2
  (boolean~) nest2::$0 ← (byte) nest2::j#1 > (byte) 0
  if((boolean~) nest2::$0) goto nest2::@2
  to:nest2::@3
nest2::@3: scope:[nest2]  from nest2::@2
  (byte) nest2::i#1 ← -- (byte) nest2::i#2
  (boolean~) nest2::$1 ← (byte) nest2::i#1 > (byte) 0
  if((boolean~) nest2::$1) goto nest2::@1
  to:nest2::@return
nest2::@return: scope:[nest2]  from nest2::@3
  return 
  to:@return
@end: scope:[]  from @begin

Self Phi Eliminated (byte) main::i#2
Self Phi Eliminated (byte*) SCREEN#10
Self Phi Eliminated (byte) nest1::i#2
Self Phi Eliminated (byte*) SCREEN#3
Self Phi Eliminated (byte*) SCREEN#1
Self Phi Eliminated (byte) nest2::i#2
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#11 ← phi( main/(word) 1024 main::@3/(byte*) SCREEN#10 )
  (byte) main::i#5 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte*) SCREEN#10 ← phi( main::@1/(byte*) SCREEN#11 )
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#5 )
  (byte) main::j#2 ← phi( main::@1/(byte) 100 main::@5/(byte) main::j#1 )
  call nest1 param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte) main::j#1 ← -- (byte) main::j#2
  (boolean~) main::$1 ← (byte) main::j#1 > (byte) 0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@5
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$2 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest1: scope:[nest1]  from main::@2
  to:nest1::@1
nest1::@1: scope:[nest1]  from nest1 nest1::@3
  (byte*) SCREEN#6 ← phi( nest1/(byte*) SCREEN#10 nest1::@3/(byte*) SCREEN#3 )
  (byte) nest1::i#5 ← phi( nest1/(byte) 100 nest1::@3/(byte) nest1::i#1 )
  to:nest1::@2
nest1::@2: scope:[nest1]  from nest1::@1 nest1::@5
  (byte*) SCREEN#3 ← phi( nest1::@1/(byte*) SCREEN#6 )
  (byte) nest1::i#2 ← phi( nest1::@1/(byte) nest1::i#5 )
  (byte) nest1::j#2 ← phi( nest1::@1/(byte) 100 nest1::@5/(byte) nest1::j#1 )
  call nest2 param-assignment
  to:nest1::@5
nest1::@5: scope:[nest1]  from nest1::@2
  (byte) nest1::j#1 ← -- (byte) nest1::j#2
  (boolean~) nest1::$1 ← (byte) nest1::j#1 > (byte) 0
  if((boolean~) nest1::$1) goto nest1::@2
  to:nest1::@3
nest1::@3: scope:[nest1]  from nest1::@5
  (byte) nest1::i#1 ← -- (byte) nest1::i#2
  (boolean~) nest1::$2 ← (byte) nest1::i#1 > (byte) 0
  if((boolean~) nest1::$2) goto nest1::@1
  to:nest1::@return
nest1::@return: scope:[nest1]  from nest1::@3
  return 
  to:@return
nest2: scope:[nest2]  from nest1::@2
  to:nest2::@1
nest2::@1: scope:[nest2]  from nest2 nest2::@3
  (byte) nest2::i#4 ← phi( nest2/(byte) 100 nest2::@3/(byte) nest2::i#1 )
  (byte*) SCREEN#2 ← phi( nest2/(byte*) SCREEN#3 nest2::@3/(byte*) SCREEN#1 )
  to:nest2::@2
nest2::@2: scope:[nest2]  from nest2::@1 nest2::@2
  (byte) nest2::i#2 ← phi( nest2::@1/(byte) nest2::i#4 )
  (byte*) SCREEN#1 ← phi( nest2::@1/(byte*) SCREEN#2 )
  (byte) nest2::j#2 ← phi( nest2::@1/(byte) 100 nest2::@2/(byte) nest2::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest2::j#2
  (byte) nest2::j#1 ← -- (byte) nest2::j#2
  (boolean~) nest2::$0 ← (byte) nest2::j#1 > (byte) 0
  if((boolean~) nest2::$0) goto nest2::@2
  to:nest2::@3
nest2::@3: scope:[nest2]  from nest2::@2
  (byte) nest2::i#1 ← -- (byte) nest2::i#2
  (boolean~) nest2::$1 ← (byte) nest2::i#1 > (byte) 0
  if((boolean~) nest2::$1) goto nest2::@1
  to:nest2::@return
nest2::@return: scope:[nest2]  from nest2::@3
  return 
  to:@return
@end: scope:[]  from @begin

Simple Condition (boolean~) main::$1 if((byte) main::j#1>(byte) 0) goto main::@2
Simple Condition (boolean~) main::$2 if((byte) main::i#1>(byte) 0) goto main::@1
Simple Condition (boolean~) nest1::$1 if((byte) nest1::j#1>(byte) 0) goto nest1::@2
Simple Condition (boolean~) nest1::$2 if((byte) nest1::i#1>(byte) 0) goto nest1::@1
Simple Condition (boolean~) nest2::$0 if((byte) nest2::j#1>(byte) 0) goto nest2::@2
Simple Condition (boolean~) nest2::$1 if((byte) nest2::i#1>(byte) 0) goto nest2::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#11 ← phi( main/(word) 1024 main::@3/(byte*) SCREEN#10 )
  (byte) main::i#5 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte*) SCREEN#10 ← phi( main::@1/(byte*) SCREEN#11 )
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#5 )
  (byte) main::j#2 ← phi( main::@1/(byte) 100 main::@5/(byte) main::j#1 )
  call nest1 param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte) main::j#1 ← -- (byte) main::j#2
  if((byte) main::j#1>(byte) 0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@5
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest1: scope:[nest1]  from main::@2
  to:nest1::@1
nest1::@1: scope:[nest1]  from nest1 nest1::@3
  (byte*) SCREEN#6 ← phi( nest1/(byte*) SCREEN#10 nest1::@3/(byte*) SCREEN#3 )
  (byte) nest1::i#5 ← phi( nest1/(byte) 100 nest1::@3/(byte) nest1::i#1 )
  to:nest1::@2
nest1::@2: scope:[nest1]  from nest1::@1 nest1::@5
  (byte*) SCREEN#3 ← phi( nest1::@1/(byte*) SCREEN#6 )
  (byte) nest1::i#2 ← phi( nest1::@1/(byte) nest1::i#5 )
  (byte) nest1::j#2 ← phi( nest1::@1/(byte) 100 nest1::@5/(byte) nest1::j#1 )
  call nest2 param-assignment
  to:nest1::@5
nest1::@5: scope:[nest1]  from nest1::@2
  (byte) nest1::j#1 ← -- (byte) nest1::j#2
  if((byte) nest1::j#1>(byte) 0) goto nest1::@2
  to:nest1::@3
nest1::@3: scope:[nest1]  from nest1::@5
  (byte) nest1::i#1 ← -- (byte) nest1::i#2
  if((byte) nest1::i#1>(byte) 0) goto nest1::@1
  to:nest1::@return
nest1::@return: scope:[nest1]  from nest1::@3
  return 
  to:@return
nest2: scope:[nest2]  from nest1::@2
  to:nest2::@1
nest2::@1: scope:[nest2]  from nest2 nest2::@3
  (byte) nest2::i#4 ← phi( nest2/(byte) 100 nest2::@3/(byte) nest2::i#1 )
  (byte*) SCREEN#2 ← phi( nest2/(byte*) SCREEN#3 nest2::@3/(byte*) SCREEN#1 )
  to:nest2::@2
nest2::@2: scope:[nest2]  from nest2::@1 nest2::@2
  (byte) nest2::i#2 ← phi( nest2::@1/(byte) nest2::i#4 )
  (byte*) SCREEN#1 ← phi( nest2::@1/(byte*) SCREEN#2 )
  (byte) nest2::j#2 ← phi( nest2::@1/(byte) 100 nest2::@2/(byte) nest2::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest2::j#2
  (byte) nest2::j#1 ← -- (byte) nest2::j#2
  if((byte) nest2::j#1>(byte) 0) goto nest2::@2
  to:nest2::@3
nest2::@3: scope:[nest2]  from nest2::@2
  (byte) nest2::i#1 ← -- (byte) nest2::i#2
  if((byte) nest2::i#1>(byte) 0) goto nest2::@1
  to:nest2::@return
nest2::@return: scope:[nest2]  from nest2::@3
  return 
  to:@return
@end: scope:[]  from @begin

Alias (byte) main::i#2 = (byte) main::i#5 
Alias (byte*) SCREEN#10 = (byte*) SCREEN#11 
Alias (byte) nest1::i#2 = (byte) nest1::i#5 
Alias (byte*) SCREEN#3 = (byte*) SCREEN#6 
Alias (byte*) SCREEN#1 = (byte*) SCREEN#2 
Alias (byte) nest2::i#2 = (byte) nest2::i#4 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#10 ← phi( main/(word) 1024 main::@3/(byte*) SCREEN#10 )
  (byte) main::i#2 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte) main::j#2 ← phi( main::@1/(byte) 100 main::@5/(byte) main::j#1 )
  call nest1 param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte) main::j#1 ← -- (byte) main::j#2
  if((byte) main::j#1>(byte) 0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@5
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest1: scope:[nest1]  from main::@2
  to:nest1::@1
nest1::@1: scope:[nest1]  from nest1 nest1::@3
  (byte*) SCREEN#3 ← phi( nest1/(byte*) SCREEN#10 nest1::@3/(byte*) SCREEN#3 )
  (byte) nest1::i#2 ← phi( nest1/(byte) 100 nest1::@3/(byte) nest1::i#1 )
  to:nest1::@2
nest1::@2: scope:[nest1]  from nest1::@1 nest1::@5
  (byte) nest1::j#2 ← phi( nest1::@1/(byte) 100 nest1::@5/(byte) nest1::j#1 )
  call nest2 param-assignment
  to:nest1::@5
nest1::@5: scope:[nest1]  from nest1::@2
  (byte) nest1::j#1 ← -- (byte) nest1::j#2
  if((byte) nest1::j#1>(byte) 0) goto nest1::@2
  to:nest1::@3
nest1::@3: scope:[nest1]  from nest1::@5
  (byte) nest1::i#1 ← -- (byte) nest1::i#2
  if((byte) nest1::i#1>(byte) 0) goto nest1::@1
  to:nest1::@return
nest1::@return: scope:[nest1]  from nest1::@3
  return 
  to:@return
nest2: scope:[nest2]  from nest1::@2
  to:nest2::@1
nest2::@1: scope:[nest2]  from nest2 nest2::@3
  (byte) nest2::i#2 ← phi( nest2/(byte) 100 nest2::@3/(byte) nest2::i#1 )
  (byte*) SCREEN#1 ← phi( nest2/(byte*) SCREEN#3 nest2::@3/(byte*) SCREEN#1 )
  to:nest2::@2
nest2::@2: scope:[nest2]  from nest2::@1 nest2::@2
  (byte) nest2::j#2 ← phi( nest2::@1/(byte) 100 nest2::@2/(byte) nest2::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest2::j#2
  (byte) nest2::j#1 ← -- (byte) nest2::j#2
  if((byte) nest2::j#1>(byte) 0) goto nest2::@2
  to:nest2::@3
nest2::@3: scope:[nest2]  from nest2::@2
  (byte) nest2::i#1 ← -- (byte) nest2::i#2
  if((byte) nest2::i#1>(byte) 0) goto nest2::@1
  to:nest2::@return
nest2::@return: scope:[nest2]  from nest2::@3
  return 
  to:@return
@end: scope:[]  from @begin

Self Phi Eliminated (byte*) SCREEN#10
Self Phi Eliminated (byte*) SCREEN#3
Self Phi Eliminated (byte*) SCREEN#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#10 ← phi( main/(word) 1024 )
  (byte) main::i#2 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte) main::j#2 ← phi( main::@1/(byte) 100 main::@5/(byte) main::j#1 )
  call nest1 param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte) main::j#1 ← -- (byte) main::j#2
  if((byte) main::j#1>(byte) 0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@5
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest1: scope:[nest1]  from main::@2
  to:nest1::@1
nest1::@1: scope:[nest1]  from nest1 nest1::@3
  (byte*) SCREEN#3 ← phi( nest1/(byte*) SCREEN#10 )
  (byte) nest1::i#2 ← phi( nest1/(byte) 100 nest1::@3/(byte) nest1::i#1 )
  to:nest1::@2
nest1::@2: scope:[nest1]  from nest1::@1 nest1::@5
  (byte) nest1::j#2 ← phi( nest1::@1/(byte) 100 nest1::@5/(byte) nest1::j#1 )
  call nest2 param-assignment
  to:nest1::@5
nest1::@5: scope:[nest1]  from nest1::@2
  (byte) nest1::j#1 ← -- (byte) nest1::j#2
  if((byte) nest1::j#1>(byte) 0) goto nest1::@2
  to:nest1::@3
nest1::@3: scope:[nest1]  from nest1::@5
  (byte) nest1::i#1 ← -- (byte) nest1::i#2
  if((byte) nest1::i#1>(byte) 0) goto nest1::@1
  to:nest1::@return
nest1::@return: scope:[nest1]  from nest1::@3
  return 
  to:@return
nest2: scope:[nest2]  from nest1::@2
  to:nest2::@1
nest2::@1: scope:[nest2]  from nest2 nest2::@3
  (byte) nest2::i#2 ← phi( nest2/(byte) 100 nest2::@3/(byte) nest2::i#1 )
  (byte*) SCREEN#1 ← phi( nest2/(byte*) SCREEN#3 )
  to:nest2::@2
nest2::@2: scope:[nest2]  from nest2::@1 nest2::@2
  (byte) nest2::j#2 ← phi( nest2::@1/(byte) 100 nest2::@2/(byte) nest2::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest2::j#2
  (byte) nest2::j#1 ← -- (byte) nest2::j#2
  if((byte) nest2::j#1>(byte) 0) goto nest2::@2
  to:nest2::@3
nest2::@3: scope:[nest2]  from nest2::@2
  (byte) nest2::i#1 ← -- (byte) nest2::i#2
  if((byte) nest2::i#1>(byte) 0) goto nest2::@1
  to:nest2::@return
nest2::@return: scope:[nest2]  from nest2::@3
  return 
  to:@return
@end: scope:[]  from @begin

Constant (byte*) SCREEN#10 (word) 1024
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#2 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte) main::j#2 ← phi( main::@1/(byte) 100 main::@5/(byte) main::j#1 )
  call nest1 param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte) main::j#1 ← -- (byte) main::j#2
  if((byte) main::j#1>(byte) 0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@5
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest1: scope:[nest1]  from main::@2
  to:nest1::@1
nest1::@1: scope:[nest1]  from nest1 nest1::@3
  (byte*) SCREEN#3 ← phi( nest1/(word) 1024 )
  (byte) nest1::i#2 ← phi( nest1/(byte) 100 nest1::@3/(byte) nest1::i#1 )
  to:nest1::@2
nest1::@2: scope:[nest1]  from nest1::@1 nest1::@5
  (byte) nest1::j#2 ← phi( nest1::@1/(byte) 100 nest1::@5/(byte) nest1::j#1 )
  call nest2 param-assignment
  to:nest1::@5
nest1::@5: scope:[nest1]  from nest1::@2
  (byte) nest1::j#1 ← -- (byte) nest1::j#2
  if((byte) nest1::j#1>(byte) 0) goto nest1::@2
  to:nest1::@3
nest1::@3: scope:[nest1]  from nest1::@5
  (byte) nest1::i#1 ← -- (byte) nest1::i#2
  if((byte) nest1::i#1>(byte) 0) goto nest1::@1
  to:nest1::@return
nest1::@return: scope:[nest1]  from nest1::@3
  return 
  to:@return
nest2: scope:[nest2]  from nest1::@2
  to:nest2::@1
nest2::@1: scope:[nest2]  from nest2 nest2::@3
  (byte) nest2::i#2 ← phi( nest2/(byte) 100 nest2::@3/(byte) nest2::i#1 )
  (byte*) SCREEN#1 ← phi( nest2/(byte*) SCREEN#3 )
  to:nest2::@2
nest2::@2: scope:[nest2]  from nest2::@1 nest2::@2
  (byte) nest2::j#2 ← phi( nest2::@1/(byte) 100 nest2::@2/(byte) nest2::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest2::j#2
  (byte) nest2::j#1 ← -- (byte) nest2::j#2
  if((byte) nest2::j#1>(byte) 0) goto nest2::@2
  to:nest2::@3
nest2::@3: scope:[nest2]  from nest2::@2
  (byte) nest2::i#1 ← -- (byte) nest2::i#2
  if((byte) nest2::i#1>(byte) 0) goto nest2::@1
  to:nest2::@return
nest2::@return: scope:[nest2]  from nest2::@3
  return 
  to:@return
@end: scope:[]  from @begin

Alias (byte*) SCREEN#1 = (byte*) SCREEN#3 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#2 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte) main::j#2 ← phi( main::@1/(byte) 100 main::@5/(byte) main::j#1 )
  call nest1 param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte) main::j#1 ← -- (byte) main::j#2
  if((byte) main::j#1>(byte) 0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@5
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest1: scope:[nest1]  from main::@2
  to:nest1::@1
nest1::@1: scope:[nest1]  from nest1 nest1::@3
  (byte*) SCREEN#1 ← phi( nest1/(word) 1024 )
  (byte) nest1::i#2 ← phi( nest1/(byte) 100 nest1::@3/(byte) nest1::i#1 )
  to:nest1::@2
nest1::@2: scope:[nest1]  from nest1::@1 nest1::@5
  (byte) nest1::j#2 ← phi( nest1::@1/(byte) 100 nest1::@5/(byte) nest1::j#1 )
  call nest2 param-assignment
  to:nest1::@5
nest1::@5: scope:[nest1]  from nest1::@2
  (byte) nest1::j#1 ← -- (byte) nest1::j#2
  if((byte) nest1::j#1>(byte) 0) goto nest1::@2
  to:nest1::@3
nest1::@3: scope:[nest1]  from nest1::@5
  (byte) nest1::i#1 ← -- (byte) nest1::i#2
  if((byte) nest1::i#1>(byte) 0) goto nest1::@1
  to:nest1::@return
nest1::@return: scope:[nest1]  from nest1::@3
  return 
  to:@return
nest2: scope:[nest2]  from nest1::@2
  to:nest2::@1
nest2::@1: scope:[nest2]  from nest2 nest2::@3
  (byte) nest2::i#2 ← phi( nest2/(byte) 100 nest2::@3/(byte) nest2::i#1 )
  to:nest2::@2
nest2::@2: scope:[nest2]  from nest2::@1 nest2::@2
  (byte) nest2::j#2 ← phi( nest2::@1/(byte) 100 nest2::@2/(byte) nest2::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest2::j#2
  (byte) nest2::j#1 ← -- (byte) nest2::j#2
  if((byte) nest2::j#1>(byte) 0) goto nest2::@2
  to:nest2::@3
nest2::@3: scope:[nest2]  from nest2::@2
  (byte) nest2::i#1 ← -- (byte) nest2::i#2
  if((byte) nest2::i#1>(byte) 0) goto nest2::@1
  to:nest2::@return
nest2::@return: scope:[nest2]  from nest2::@3
  return 
  to:@return
@end: scope:[]  from @begin

Redundant Phi (byte*) SCREEN#1 (word) 1024
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#2 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  (byte) main::j#2 ← phi( main::@1/(byte) 100 main::@5/(byte) main::j#1 )
  call nest1 param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte) main::j#1 ← -- (byte) main::j#2
  if((byte) main::j#1>(byte) 0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@5
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest1: scope:[nest1]  from main::@2
  to:nest1::@1
nest1::@1: scope:[nest1]  from nest1 nest1::@3
  (byte) nest1::i#2 ← phi( nest1/(byte) 100 nest1::@3/(byte) nest1::i#1 )
  to:nest1::@2
nest1::@2: scope:[nest1]  from nest1::@1 nest1::@5
  (byte) nest1::j#2 ← phi( nest1::@1/(byte) 100 nest1::@5/(byte) nest1::j#1 )
  call nest2 param-assignment
  to:nest1::@5
nest1::@5: scope:[nest1]  from nest1::@2
  (byte) nest1::j#1 ← -- (byte) nest1::j#2
  if((byte) nest1::j#1>(byte) 0) goto nest1::@2
  to:nest1::@3
nest1::@3: scope:[nest1]  from nest1::@5
  (byte) nest1::i#1 ← -- (byte) nest1::i#2
  if((byte) nest1::i#1>(byte) 0) goto nest1::@1
  to:nest1::@return
nest1::@return: scope:[nest1]  from nest1::@3
  return 
  to:@return
nest2: scope:[nest2]  from nest1::@2
  to:nest2::@1
nest2::@1: scope:[nest2]  from nest2 nest2::@3
  (byte) nest2::i#2 ← phi( nest2/(byte) 100 nest2::@3/(byte) nest2::i#1 )
  to:nest2::@2
nest2::@2: scope:[nest2]  from nest2::@1 nest2::@2
  (byte) nest2::j#2 ← phi( nest2::@1/(byte) 100 nest2::@2/(byte) nest2::j#1 )
  *((word) 1024) ← (byte) nest2::j#2
  (byte) nest2::j#1 ← -- (byte) nest2::j#2
  if((byte) nest2::j#1>(byte) 0) goto nest2::@2
  to:nest2::@3
nest2::@3: scope:[nest2]  from nest2::@2
  (byte) nest2::i#1 ← -- (byte) nest2::i#2
  if((byte) nest2::i#1>(byte) 0) goto nest2::@1
  to:nest2::@return
nest2::@return: scope:[nest2]  from nest2::@3
  return 
  to:@return
@end: scope:[]  from @begin

Block Sequence Planned @begin @end main main::@1 main::@2 main::@5 main::@3 main::@return nest1 nest1::@1 nest1::@2 nest1::@5 nest1::@3 nest1::@return nest2 nest2::@1 nest2::@2 nest2::@3 nest2::@return 
Added new block during phi lifting main::@6(between main::@3 and main::@1)
Added new block during phi lifting main::@7(between main::@5 and main::@2)
Added new block during phi lifting nest1::@6(between nest1::@3 and nest1::@1)
Added new block during phi lifting nest1::@7(between nest1::@5 and nest1::@2)
Added new block during phi lifting nest2::@5(between nest2::@3 and nest2::@1)
Added new block during phi lifting nest2::@6(between nest2::@2 and nest2::@2)
Block Sequence Planned @begin @end main main::@1 main::@2 main::@5 main::@3 main::@return main::@6 main::@7 nest1 nest1::@1 nest1::@2 nest1::@5 nest1::@3 nest1::@return nest1::@6 nest1::@7 nest2 nest2::@1 nest2::@2 nest2::@3 nest2::@return nest2::@5 nest2::@6 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  call main param-assignment
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@6
  (byte) main::i#2 ← phi( main/(byte) 100 main::@6/(byte~) main::i#6 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@7
  (byte) main::j#2 ← phi( main::@1/(byte) 100 main::@7/(byte~) main::j#4 )
  call nest1 param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte) main::j#1 ← -- (byte) main::j#2
  if((byte) main::j#1>(byte) 0) goto main::@7
  to:main::@3
main::@3: scope:[main]  from main::@5
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@6
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
main::@6: scope:[main]  from main::@3
  (byte~) main::i#6 ← (byte) main::i#1
  to:main::@1
main::@7: scope:[main]  from main::@5
  (byte~) main::j#4 ← (byte) main::j#1
  to:main::@2
nest1: scope:[nest1]  from main::@2
  to:nest1::@1
nest1::@1: scope:[nest1]  from nest1 nest1::@6
  (byte) nest1::i#2 ← phi( nest1/(byte) 100 nest1::@6/(byte~) nest1::i#6 )
  to:nest1::@2
nest1::@2: scope:[nest1]  from nest1::@1 nest1::@7
  (byte) nest1::j#2 ← phi( nest1::@1/(byte) 100 nest1::@7/(byte~) nest1::j#4 )
  call nest2 param-assignment
  to:nest1::@5
nest1::@5: scope:[nest1]  from nest1::@2
  (byte) nest1::j#1 ← -- (byte) nest1::j#2
  if((byte) nest1::j#1>(byte) 0) goto nest1::@7
  to:nest1::@3
nest1::@3: scope:[nest1]  from nest1::@5
  (byte) nest1::i#1 ← -- (byte) nest1::i#2
  if((byte) nest1::i#1>(byte) 0) goto nest1::@6
  to:nest1::@return
nest1::@return: scope:[nest1]  from nest1::@3
  return 
  to:@return
nest1::@6: scope:[nest1]  from nest1::@3
  (byte~) nest1::i#6 ← (byte) nest1::i#1
  to:nest1::@1
nest1::@7: scope:[nest1]  from nest1::@5
  (byte~) nest1::j#4 ← (byte) nest1::j#1
  to:nest1::@2
nest2: scope:[nest2]  from nest1::@2
  to:nest2::@1
nest2::@1: scope:[nest2]  from nest2 nest2::@5
  (byte) nest2::i#2 ← phi( nest2/(byte) 100 nest2::@5/(byte~) nest2::i#5 )
  to:nest2::@2
nest2::@2: scope:[nest2]  from nest2::@1 nest2::@6
  (byte) nest2::j#2 ← phi( nest2::@1/(byte) 100 nest2::@6/(byte~) nest2::j#3 )
  *((word) 1024) ← (byte) nest2::j#2
  (byte) nest2::j#1 ← -- (byte) nest2::j#2
  if((byte) nest2::j#1>(byte) 0) goto nest2::@6
  to:nest2::@3
nest2::@3: scope:[nest2]  from nest2::@2
  (byte) nest2::i#1 ← -- (byte) nest2::i#2
  if((byte) nest2::i#1>(byte) 0) goto nest2::@5
  to:nest2::@return
nest2::@return: scope:[nest2]  from nest2::@3
  return 
  to:@return
nest2::@5: scope:[nest2]  from nest2::@3
  (byte~) nest2::i#5 ← (byte) nest2::i#1
  to:nest2::@1
nest2::@6: scope:[nest2]  from nest2::@2
  (byte~) nest2::j#3 ← (byte) nest2::j#1
  to:nest2::@2

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagated nest1::j#2 through call [13] call nest2 param-assignment
Propagating live ranges...
Propagated nest1::j#2 through call [13] call nest2 param-assignment
Propagating live ranges...
Propagated nest1::j#2 through call [13] call nest2 param-assignment
Propagated nest1::i#2 through call [13] call nest2 param-assignment
Propagating live ranges...
Propagated nest1::j#2 through call [13] call nest2 param-assignment
Propagated nest1::i#2 through call [13] call nest2 param-assignment
Propagating live ranges...
Propagated nest1::j#2 through call [13] call nest2 param-assignment
Propagated nest1::i#2 through call [13] call nest2 param-assignment
Propagating live ranges...
Propagated main::j#2 through call [13] call nest2 param-assignment
Propagated nest1::j#2 through call [13] call nest2 param-assignment
Propagated nest1::i#2 through call [13] call nest2 param-assignment
Propagating live ranges...
Propagated main::j#2 through call [13] call nest2 param-assignment
Propagated nest1::j#2 through call [13] call nest2 param-assignment
Propagated nest1::i#2 through call [13] call nest2 param-assignment
Propagating live ranges...
Propagated main::j#2 through call [3] call nest1 param-assignment
Propagated main::j#2 through call [13] call nest2 param-assignment
Propagated main::i#2 through call [13] call nest2 param-assignment
Propagated nest1::j#2 through call [13] call nest2 param-assignment
Propagated nest1::i#2 through call [13] call nest2 param-assignment
Propagating live ranges...
Propagated main::j#2 through call [3] call nest1 param-assignment
Propagated main::j#2 through call [13] call nest2 param-assignment
Propagated main::i#2 through call [13] call nest2 param-assignment
Propagated nest1::j#2 through call [13] call nest2 param-assignment
Propagated nest1::i#2 through call [13] call nest2 param-assignment
Propagating live ranges...
Propagated main::j#2 through call [3] call nest1 param-assignment
Propagated main::i#2 through call [3] call nest1 param-assignment
Propagated main::j#2 through call [13] call nest2 param-assignment
Propagated main::i#2 through call [13] call nest2 param-assignment
Propagated nest1::j#2 through call [13] call nest2 param-assignment
Propagated nest1::i#2 through call [13] call nest2 param-assignment
Propagating live ranges...
Propagated main::j#2 through call [3] call nest1 param-assignment
Propagated main::i#2 through call [3] call nest1 param-assignment
Propagated main::j#2 through call [13] call nest2 param-assignment
Propagated main::i#2 through call [13] call nest2 param-assignment
Propagated nest1::j#2 through call [13] call nest2 param-assignment
Propagated nest1::i#2 through call [13] call nest2 param-assignment
Propagating live ranges...
Propagated main::j#2 through call [3] call nest1 param-assignment
Propagated main::i#2 through call [3] call nest1 param-assignment
Propagated main::j#2 through call [13] call nest2 param-assignment
Propagated main::i#2 through call [13] call nest2 param-assignment
Propagated nest1::j#2 through call [13] call nest2 param-assignment
Propagated nest1::i#2 through call [13] call nest2 param-assignment
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@6
  [1] (byte) main::i#2 ← phi( main/(byte) 100 main::@6/(byte~) main::i#6 ) [ main::i#2 ]
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@7
  [2] (byte) main::j#2 ← phi( main::@1/(byte) 100 main::@7/(byte~) main::j#4 ) [ main::j#2 main::i#2 ]
  [3] call nest1 param-assignment [ main::j#2 main::i#2 ]
  to:main::@5
main::@5: scope:[main]  from main::@2
  [4] (byte) main::j#1 ← -- (byte) main::j#2 [ main::j#1 main::i#2 ]
  [5] if((byte) main::j#1>(byte) 0) goto main::@7 [ main::j#1 main::i#2 ]
  to:main::@3
main::@3: scope:[main]  from main::@5
  [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ]
  [7] if((byte) main::i#1>(byte) 0) goto main::@6 [ main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@3
  [8] return  [ ]
  to:@return
main::@6: scope:[main]  from main::@3
  [9] (byte~) main::i#6 ← (byte) main::i#1 [ main::i#6 ]
  to:main::@1
main::@7: scope:[main]  from main::@5
  [10] (byte~) main::j#4 ← (byte) main::j#1 [ main::j#4 main::i#2 ]
  to:main::@2
nest1: scope:[nest1]  from main::@2
  to:nest1::@1
nest1::@1: scope:[nest1]  from nest1 nest1::@6
  [11] (byte) nest1::i#2 ← phi( nest1/(byte) 100 nest1::@6/(byte~) nest1::i#6 ) [ main::j#2 main::i#2 nest1::i#2 ]
  to:nest1::@2
nest1::@2: scope:[nest1]  from nest1::@1 nest1::@7
  [12] (byte) nest1::j#2 ← phi( nest1::@1/(byte) 100 nest1::@7/(byte~) nest1::j#4 ) [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 ]
  [13] call nest2 param-assignment [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 ]
  to:nest1::@5
nest1::@5: scope:[nest1]  from nest1::@2
  [14] (byte) nest1::j#1 ← -- (byte) nest1::j#2 [ main::j#2 main::i#2 nest1::j#1 nest1::i#2 ]
  [15] if((byte) nest1::j#1>(byte) 0) goto nest1::@7 [ main::j#2 main::i#2 nest1::j#1 nest1::i#2 ]
  to:nest1::@3
nest1::@3: scope:[nest1]  from nest1::@5
  [16] (byte) nest1::i#1 ← -- (byte) nest1::i#2 [ main::j#2 main::i#2 nest1::i#1 ]
  [17] if((byte) nest1::i#1>(byte) 0) goto nest1::@6 [ main::j#2 main::i#2 nest1::i#1 ]
  to:nest1::@return
nest1::@return: scope:[nest1]  from nest1::@3
  [18] return  [ main::j#2 main::i#2 ]
  to:@return
nest1::@6: scope:[nest1]  from nest1::@3
  [19] (byte~) nest1::i#6 ← (byte) nest1::i#1 [ main::j#2 main::i#2 nest1::i#6 ]
  to:nest1::@1
nest1::@7: scope:[nest1]  from nest1::@5
  [20] (byte~) nest1::j#4 ← (byte) nest1::j#1 [ main::j#2 main::i#2 nest1::j#4 nest1::i#2 ]
  to:nest1::@2
nest2: scope:[nest2]  from nest1::@2
  to:nest2::@1
nest2::@1: scope:[nest2]  from nest2 nest2::@5
  [21] (byte) nest2::i#2 ← phi( nest2/(byte) 100 nest2::@5/(byte~) nest2::i#5 ) [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::i#2 ]
  to:nest2::@2
nest2::@2: scope:[nest2]  from nest2::@1 nest2::@6
  [22] (byte) nest2::j#2 ← phi( nest2::@1/(byte) 100 nest2::@6/(byte~) nest2::j#3 ) [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#2 nest2::i#2 ]
  [23] *((word) 1024) ← (byte) nest2::j#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#2 nest2::i#2 ]
  [24] (byte) nest2::j#1 ← -- (byte) nest2::j#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#1 nest2::i#2 ]
  [25] if((byte) nest2::j#1>(byte) 0) goto nest2::@6 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#1 nest2::i#2 ]
  to:nest2::@3
nest2::@3: scope:[nest2]  from nest2::@2
  [26] (byte) nest2::i#1 ← -- (byte) nest2::i#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::i#1 ]
  [27] if((byte) nest2::i#1>(byte) 0) goto nest2::@5 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::i#1 ]
  to:nest2::@return
nest2::@return: scope:[nest2]  from nest2::@3
  [28] return  [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 ]
  to:@return
nest2::@5: scope:[nest2]  from nest2::@3
  [29] (byte~) nest2::i#5 ← (byte) nest2::i#1 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::i#5 ]
  to:nest2::@1
nest2::@6: scope:[nest2]  from nest2::@2
  [30] (byte~) nest2::j#3 ← (byte) nest2::j#1 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#3 nest2::i#2 ]
  to:nest2::@2

Created 6 initial phi equivalence classes
Coalesced [9] main::i#6 ← main::i#1
Coalesced [10] main::j#4 ← main::j#1
Coalesced [19] nest1::i#6 ← nest1::i#1
Coalesced [20] nest1::j#4 ← nest1::j#1
Coalesced [29] nest2::i#5 ← nest2::i#1
Coalesced [30] nest2::j#3 ← nest2::j#1
Coalesced down to 6 phi equivalence classes
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@7
Culled Empty Block (label) nest1::@6
Culled Empty Block (label) nest1::@7
Culled Empty Block (label) nest2::@5
Culled Empty Block (label) nest2::@6
Block Sequence Planned @begin @end main main::@1 main::@2 main::@5 main::@3 main::@return nest1 nest1::@1 nest1::@2 nest1::@5 nest1::@3 nest1::@return nest2 nest2::@1 nest2::@2 nest2::@3 nest2::@return 
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagated nest1::j#2 through call [11] call nest2 param-assignment
Propagating live ranges...
Propagated nest1::j#2 through call [11] call nest2 param-assignment
Propagating live ranges...
Propagated nest1::j#2 through call [11] call nest2 param-assignment
Propagated nest1::i#2 through call [11] call nest2 param-assignment
Propagating live ranges...
Propagated nest1::j#2 through call [11] call nest2 param-assignment
Propagated nest1::i#2 through call [11] call nest2 param-assignment
Propagating live ranges...
Propagated nest1::j#2 through call [11] call nest2 param-assignment
Propagated nest1::i#2 through call [11] call nest2 param-assignment
Propagating live ranges...
Propagated main::j#2 through call [11] call nest2 param-assignment
Propagated nest1::j#2 through call [11] call nest2 param-assignment
Propagated nest1::i#2 through call [11] call nest2 param-assignment
Propagating live ranges...
Propagated main::j#2 through call [11] call nest2 param-assignment
Propagated nest1::j#2 through call [11] call nest2 param-assignment
Propagated nest1::i#2 through call [11] call nest2 param-assignment
Propagating live ranges...
Propagated main::j#2 through call [3] call nest1 param-assignment
Propagated main::j#2 through call [11] call nest2 param-assignment
Propagated main::i#2 through call [11] call nest2 param-assignment
Propagated nest1::j#2 through call [11] call nest2 param-assignment
Propagated nest1::i#2 through call [11] call nest2 param-assignment
Propagating live ranges...
Propagated main::j#2 through call [3] call nest1 param-assignment
Propagated main::j#2 through call [11] call nest2 param-assignment
Propagated main::i#2 through call [11] call nest2 param-assignment
Propagated nest1::j#2 through call [11] call nest2 param-assignment
Propagated nest1::i#2 through call [11] call nest2 param-assignment
Propagating live ranges...
Propagated main::j#2 through call [3] call nest1 param-assignment
Propagated main::i#2 through call [3] call nest1 param-assignment
Propagated main::j#2 through call [11] call nest2 param-assignment
Propagated main::i#2 through call [11] call nest2 param-assignment
Propagated nest1::j#2 through call [11] call nest2 param-assignment
Propagated nest1::i#2 through call [11] call nest2 param-assignment
Propagating live ranges...
Propagated main::j#2 through call [3] call nest1 param-assignment
Propagated main::i#2 through call [3] call nest1 param-assignment
Propagated main::j#2 through call [11] call nest2 param-assignment
Propagated main::i#2 through call [11] call nest2 param-assignment
Propagated nest1::j#2 through call [11] call nest2 param-assignment
Propagated nest1::i#2 through call [11] call nest2 param-assignment
Propagating live ranges...
Propagated main::j#2 through call [3] call nest1 param-assignment
Propagated main::i#2 through call [3] call nest1 param-assignment
Propagated main::j#2 through call [11] call nest2 param-assignment
Propagated main::i#2 through call [11] call nest2 param-assignment
Propagated nest1::j#2 through call [11] call nest2 param-assignment
Propagated nest1::i#2 through call [11] call nest2 param-assignment
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [1] (byte) main::i#2 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 ) [ main::i#2 ]
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@5
  [2] (byte) main::j#2 ← phi( main::@1/(byte) 100 main::@5/(byte) main::j#1 ) [ main::j#2 main::i#2 ]
  [3] call nest1 param-assignment [ main::j#2 main::i#2 ]
  to:main::@5
main::@5: scope:[main]  from main::@2
  [4] (byte) main::j#1 ← -- (byte) main::j#2 [ main::j#1 main::i#2 ]
  [5] if((byte) main::j#1>(byte) 0) goto main::@2 [ main::j#1 main::i#2 ]
  to:main::@3
main::@3: scope:[main]  from main::@5
  [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ]
  [7] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@3
  [8] return  [ ]
  to:@return
nest1: scope:[nest1]  from main::@2
  to:nest1::@1
nest1::@1: scope:[nest1]  from nest1 nest1::@3
  [9] (byte) nest1::i#2 ← phi( nest1/(byte) 100 nest1::@3/(byte) nest1::i#1 ) [ main::j#2 main::i#2 nest1::i#2 ]
  to:nest1::@2
nest1::@2: scope:[nest1]  from nest1::@1 nest1::@5
  [10] (byte) nest1::j#2 ← phi( nest1::@1/(byte) 100 nest1::@5/(byte) nest1::j#1 ) [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 ]
  [11] call nest2 param-assignment [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 ]
  to:nest1::@5
nest1::@5: scope:[nest1]  from nest1::@2
  [12] (byte) nest1::j#1 ← -- (byte) nest1::j#2 [ main::j#2 main::i#2 nest1::j#1 nest1::i#2 ]
  [13] if((byte) nest1::j#1>(byte) 0) goto nest1::@2 [ main::j#2 main::i#2 nest1::j#1 nest1::i#2 ]
  to:nest1::@3
nest1::@3: scope:[nest1]  from nest1::@5
  [14] (byte) nest1::i#1 ← -- (byte) nest1::i#2 [ main::j#2 main::i#2 nest1::i#1 ]
  [15] if((byte) nest1::i#1>(byte) 0) goto nest1::@1 [ main::j#2 main::i#2 nest1::i#1 ]
  to:nest1::@return
nest1::@return: scope:[nest1]  from nest1::@3
  [16] return  [ main::j#2 main::i#2 ]
  to:@return
nest2: scope:[nest2]  from nest1::@2
  to:nest2::@1
nest2::@1: scope:[nest2]  from nest2 nest2::@3
  [17] (byte) nest2::i#2 ← phi( nest2/(byte) 100 nest2::@3/(byte) nest2::i#1 ) [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::i#2 ]
  to:nest2::@2
nest2::@2: scope:[nest2]  from nest2::@1 nest2::@2
  [18] (byte) nest2::j#2 ← phi( nest2::@1/(byte) 100 nest2::@2/(byte) nest2::j#1 ) [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#2 nest2::i#2 ]
  [19] *((word) 1024) ← (byte) nest2::j#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#2 nest2::i#2 ]
  [20] (byte) nest2::j#1 ← -- (byte) nest2::j#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#1 nest2::i#2 ]
  [21] if((byte) nest2::j#1>(byte) 0) goto nest2::@2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#1 nest2::i#2 ]
  to:nest2::@3
nest2::@3: scope:[nest2]  from nest2::@2
  [22] (byte) nest2::i#1 ← -- (byte) nest2::i#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::i#1 ]
  [23] if((byte) nest2::i#1>(byte) 0) goto nest2::@1 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::i#1 ]
  to:nest2::@return
nest2::@return: scope:[nest2]  from nest2::@3
  [24] return  [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 ]
  to:@return

CALL GRAPH
Calls in [] to 0:main 
Calls in [main] to 3:nest1 
Calls in [nest1] to 11:nest2 

DOMINATORS
@begin dominated by  @begin 
@end dominated by  @end @begin 
main dominated by  @begin main 
main::@1 dominated by  @begin main::@1 main 
main::@2 dominated by  @begin main::@2 main::@1 main 
main::@5 dominated by  @begin main::@2 main::@1 main::@5 main 
main::@3 dominated by  @begin main::@2 main::@1 main::@3 main main::@5 
main::@return dominated by  @begin main::@2 main::@1 main::@3 main main::@5 main::@return 
nest1 dominated by  @begin main::@2 main::@1 main nest1 
nest1::@1 dominated by  nest1::@1 @begin main::@2 main::@1 main nest1 
nest1::@2 dominated by  nest1::@1 nest1::@2 @begin main::@2 main::@1 main nest1 
nest1::@5 dominated by  nest1::@1 nest1::@2 nest1::@5 @begin main::@2 main::@1 main nest1 
nest1::@3 dominated by  nest1::@1 nest1::@2 nest1::@5 nest1::@3 @begin main::@2 main::@1 main nest1 
nest1::@return dominated by  nest1::@1 nest1::@2 nest1::@5 nest1::@3 @begin nest1::@return main::@2 main::@1 main nest1 
nest2 dominated by  nest1::@1 nest1::@2 @begin main::@2 main::@1 main nest2 nest1 
nest2::@1 dominated by  nest1::@1 nest1::@2 @begin main::@2 main::@1 main nest2 nest2::@1 nest1 
nest2::@2 dominated by  nest1::@1 nest1::@2 @begin main::@2 main::@1 main nest2::@2 nest2 nest2::@1 nest1 
nest2::@3 dominated by  nest1::@1 nest1::@2 @begin main::@2 main::@1 main nest2::@3 nest2::@2 nest2 nest2::@1 nest1 
nest2::@return dominated by  nest1::@1 nest1::@2 nest2::@return @begin main::@2 main::@1 main nest2::@3 nest2::@2 nest2 nest2::@1 nest1 

Found back edge: Loop head: main::@2 tails: main::@5 blocks: null
Found back edge: Loop head: main::@1 tails: main::@3 blocks: null
Found back edge: Loop head: nest1::@2 tails: nest1::@5 blocks: null
Found back edge: Loop head: nest1::@1 tails: nest1::@3 blocks: null
Found back edge: Loop head: nest2::@2 tails: nest2::@2 blocks: null
Found back edge: Loop head: nest2::@1 tails: nest2::@3 blocks: null
Populated: Loop head: main::@2 tails: main::@5 blocks: main::@5 main::@2 
Populated: Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@5 main::@2 main::@1 
Populated: Loop head: nest1::@2 tails: nest1::@5 blocks: nest1::@5 nest1::@2 
Populated: Loop head: nest1::@1 tails: nest1::@3 blocks: nest1::@3 nest1::@5 nest1::@2 nest1::@1 
Populated: Loop head: nest2::@2 tails: nest2::@2 blocks: nest2::@2 
Populated: Loop head: nest2::@1 tails: nest2::@3 blocks: nest2::@3 nest2::@2 nest2::@1 
NATURAL LOOPS
Loop head: main::@2 tails: main::@5 blocks: main::@5 main::@2 
Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@5 main::@2 main::@1 
Loop head: nest1::@2 tails: nest1::@5 blocks: nest1::@5 nest1::@2 
Loop head: nest1::@1 tails: nest1::@3 blocks: nest1::@3 nest1::@5 nest1::@2 nest1::@1 
Loop head: nest2::@2 tails: nest2::@2 blocks: nest2::@2 
Loop head: nest2::@1 tails: nest2::@3 blocks: nest2::@3 nest2::@2 nest2::@1 

Found 0 loops in scope []
Found 2 loops in scope [main]
  Loop head: main::@2 tails: main::@5 blocks: main::@5 main::@2 
  Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@5 main::@2 main::@1 
Found 2 loops in scope [nest1]
  Loop head: nest1::@2 tails: nest1::@5 blocks: nest1::@5 nest1::@2 
  Loop head: nest1::@1 tails: nest1::@3 blocks: nest1::@3 nest1::@5 nest1::@2 nest1::@1 
Found 2 loops in scope [nest2]
  Loop head: nest2::@2 tails: nest2::@2 blocks: nest2::@2 
  Loop head: nest2::@1 tails: nest2::@3 blocks: nest2::@3 nest2::@2 nest2::@1 
NATURAL LOOPS WITH DEPTH
Loop head: main::@2 tails: main::@5 blocks: main::@5 main::@2  depth: 2
Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@5 main::@2 main::@1  depth: 1
Loop head: nest1::@2 tails: nest1::@5 blocks: nest1::@5 nest1::@2  depth: 4
Loop head: nest1::@1 tails: nest1::@3 blocks: nest1::@3 nest1::@5 nest1::@2 nest1::@1  depth: 3
Loop head: nest2::@2 tails: nest2::@2 blocks: nest2::@2  depth: 6
Loop head: nest2::@1 tails: nest2::@3 blocks: nest2::@3 nest2::@2 nest2::@1  depth: 5


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 1.0476190476190477
(byte) main::j
(byte) main::j#1 151.5
(byte) main::j#2 11.222222222222221
(void()) nest1()
(byte) nest1::i
(byte) nest1::i#1 1501.5
(byte) nest1::i#2 154.0
(byte) nest1::j
(byte) nest1::j#1 15001.5
(byte) nest1::j#2 2000.2
(void()) nest2()
(byte) nest2::i
(byte) nest2::i#1 150001.5
(byte) nest2::i#2 40000.4
(byte) nest2::j
(byte) nest2::j#1 1500001.5
(byte) nest2::j#2 1500001.5

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ nest1::i#2 nest1::i#1 ]
[ nest1::j#2 nest1::j#1 ]
[ nest2::i#2 nest2::i#1 ]
[ nest2::j#2 nest2::j#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ nest1::i#2 nest1::i#1 ]
[ nest1::j#2 nest1::j#1 ]
[ nest2::i#2 nest2::i#1 ]
[ nest2::j#2 nest2::j#1 ]
Allocated zp byte:2 to zp byte:2 [ main::i#2 main::i#1 ]
Allocated zp byte:3 to zp byte:3 [ main::j#2 main::j#1 ]
Allocated zp byte:4 to zp byte:4 [ nest1::i#2 nest1::i#1 ]
Allocated zp byte:5 to zp byte:5 [ nest1::j#2 nest1::j#1 ]
Allocated zp byte:6 to zp byte:6 [ nest2::i#2 nest2::i#1 ]
Allocated zp byte:7 to zp byte:7 [ nest2::j#2 nest2::j#1 ]
INITIAL ASM
//SEG0 @begin
bbegin:
//SEG1 [0] call main param-assignment [ ]
  jsr main
  jmp bend
//SEG2 @end
bend:
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  b1_from_main:
  //SEG5 [1] phi (byte) main::i#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $2
    jmp b1
  //SEG6 [1] phi from main::@3 to main::@1
  b1_from_b3:
  //SEG7 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
    jmp b1
  //SEG8 main::@1
  b1:
  //SEG9 [2] phi from main::@1 to main::@2
  b2_from_b1:
  //SEG10 [2] phi (byte) main::j#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $3
    jmp b2
  //SEG11 [2] phi from main::@5 to main::@2
  b2_from_b5:
  //SEG12 [2] phi (byte) main::j#2 = (byte) main::j#1 -- register_copy 
    jmp b2
  //SEG13 main::@2
  b2:
  //SEG14 [3] call nest1 param-assignment [ main::j#2 main::i#2 ]
    jsr nest1
    jmp b5
  //SEG15 main::@5
  b5:
  //SEG16 [4] (byte) main::j#1 ← -- (byte) main::j#2 [ main::j#1 main::i#2 ] -- zpby1=_dec_zpby1 
    dec $3
  //SEG17 [5] if((byte) main::j#1>(byte) 0) goto main::@2 [ main::j#1 main::i#2 ] -- zpby1_gt_0_then_la1 
    lda $3
    bne b2_from_b5
    jmp b3
  //SEG18 main::@3
  b3:
  //SEG19 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- zpby1=_dec_zpby1 
    dec $2
  //SEG20 [7] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 ] -- zpby1_gt_0_then_la1 
    lda $2
    bne b1_from_b3
    jmp breturn
  //SEG21 main::@return
  breturn:
  //SEG22 [8] return  [ ]
    rts
}
//SEG23 nest1
nest1: {
  //SEG24 [9] phi from nest1 to nest1::@1
  b1_from_nest1:
  //SEG25 [9] phi (byte) nest1::i#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $4
    jmp b1
  //SEG26 [9] phi from nest1::@3 to nest1::@1
  b1_from_b3:
  //SEG27 [9] phi (byte) nest1::i#2 = (byte) nest1::i#1 -- register_copy 
    jmp b1
  //SEG28 nest1::@1
  b1:
  //SEG29 [10] phi from nest1::@1 to nest1::@2
  b2_from_b1:
  //SEG30 [10] phi (byte) nest1::j#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $5
    jmp b2
  //SEG31 [10] phi from nest1::@5 to nest1::@2
  b2_from_b5:
  //SEG32 [10] phi (byte) nest1::j#2 = (byte) nest1::j#1 -- register_copy 
    jmp b2
  //SEG33 nest1::@2
  b2:
  //SEG34 [11] call nest2 param-assignment [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 ]
    jsr nest2
    jmp b5
  //SEG35 nest1::@5
  b5:
  //SEG36 [12] (byte) nest1::j#1 ← -- (byte) nest1::j#2 [ main::j#2 main::i#2 nest1::j#1 nest1::i#2 ] -- zpby1=_dec_zpby1 
    dec $5
  //SEG37 [13] if((byte) nest1::j#1>(byte) 0) goto nest1::@2 [ main::j#2 main::i#2 nest1::j#1 nest1::i#2 ] -- zpby1_gt_0_then_la1 
    lda $5
    bne b2_from_b5
    jmp b3
  //SEG38 nest1::@3
  b3:
  //SEG39 [14] (byte) nest1::i#1 ← -- (byte) nest1::i#2 [ main::j#2 main::i#2 nest1::i#1 ] -- zpby1=_dec_zpby1 
    dec $4
  //SEG40 [15] if((byte) nest1::i#1>(byte) 0) goto nest1::@1 [ main::j#2 main::i#2 nest1::i#1 ] -- zpby1_gt_0_then_la1 
    lda $4
    bne b1_from_b3
    jmp breturn
  //SEG41 nest1::@return
  breturn:
  //SEG42 [16] return  [ main::j#2 main::i#2 ]
    rts
}
//SEG43 nest2
nest2: {
  //SEG44 [17] phi from nest2 to nest2::@1
  b1_from_nest2:
  //SEG45 [17] phi (byte) nest2::i#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $6
    jmp b1
  //SEG46 [17] phi from nest2::@3 to nest2::@1
  b1_from_b3:
  //SEG47 [17] phi (byte) nest2::i#2 = (byte) nest2::i#1 -- register_copy 
    jmp b1
  //SEG48 nest2::@1
  b1:
  //SEG49 [18] phi from nest2::@1 to nest2::@2
  b2_from_b1:
  //SEG50 [18] phi (byte) nest2::j#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $7
    jmp b2
  //SEG51 [18] phi from nest2::@2 to nest2::@2
  b2_from_b2:
  //SEG52 [18] phi (byte) nest2::j#2 = (byte) nest2::j#1 -- register_copy 
    jmp b2
  //SEG53 nest2::@2
  b2:
  //SEG54 [19] *((word) 1024) ← (byte) nest2::j#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#2 nest2::i#2 ] -- _star_cowo1=zpby1 
    lda $7
    sta $400
  //SEG55 [20] (byte) nest2::j#1 ← -- (byte) nest2::j#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#1 nest2::i#2 ] -- zpby1=_dec_zpby1 
    dec $7
  //SEG56 [21] if((byte) nest2::j#1>(byte) 0) goto nest2::@2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#1 nest2::i#2 ] -- zpby1_gt_0_then_la1 
    lda $7
    bne b2_from_b2
    jmp b3
  //SEG57 nest2::@3
  b3:
  //SEG58 [22] (byte) nest2::i#1 ← -- (byte) nest2::i#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::i#1 ] -- zpby1=_dec_zpby1 
    dec $6
  //SEG59 [23] if((byte) nest2::i#1>(byte) 0) goto nest2::@1 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::i#1 ] -- zpby1_gt_0_then_la1 
    lda $6
    bne b1_from_b3
    jmp breturn
  //SEG60 nest2::@return
  breturn:
  //SEG61 [24] return  [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 ]
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp byte:2 [ main::i#2 main::i#1 ] : zp byte:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:3 [ main::j#2 main::j#1 ] : zp byte:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:4 [ nest1::i#2 nest1::i#1 ] : zp byte:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:5 [ nest1::j#2 nest1::j#1 ] : zp byte:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:6 [ nest2::i#2 nest2::i#1 ] : zp byte:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:7 [ nest2::j#2 nest2::j#1 ] : zp byte:7 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [nest2] 3,000,003: zp byte:7 [ nest2::j#2 nest2::j#1 ] 190,001.9: zp byte:6 [ nest2::i#2 nest2::i#1 ] 
Uplift Scope [nest1] 17,001.7: zp byte:5 [ nest1::j#2 nest1::j#1 ] 1,655.5: zp byte:4 [ nest1::i#2 nest1::i#1 ] 
Uplift Scope [main] 162.72: zp byte:3 [ main::j#2 main::j#1 ] 17.55: zp byte:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [nest2] best 23613122 combination reg byte y [ nest2::j#2 nest2::j#1 ] reg byte x [ nest2::i#2 nest2::i#1 ] 
Uplifting [nest1] best 23563122 combination reg byte a [ nest1::j#2 nest1::j#1 ] zp byte:4 [ nest1::i#2 nest1::i#1 ] 
Uplifting [main] best 23563122 combination zp byte:3 [ main::j#2 main::j#1 ] zp byte:2 [ main::i#2 main::i#1 ] 
Uplifting [] best 23563122 combination 
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 @begin
bbegin:
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @end
bend:
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  b1_from_main:
  //SEG5 [1] phi (byte) main::i#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $2
    jmp b1
  //SEG6 [1] phi from main::@3 to main::@1
  b1_from_b3:
  //SEG7 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
  //SEG8 main::@1
  b1:
  //SEG9 [2] phi from main::@1 to main::@2
  b2_from_b1:
  //SEG10 [2] phi (byte) main::j#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $3
    jmp b2
  //SEG11 [2] phi from main::@5 to main::@2
  b2_from_b5:
  //SEG12 [2] phi (byte) main::j#2 = (byte) main::j#1 -- register_copy 
  //SEG13 main::@2
  b2:
  //SEG14 [3] call nest1 param-assignment [ main::j#2 main::i#2 ]
    jsr nest1
  //SEG15 main::@5
  b5:
  //SEG16 [4] (byte) main::j#1 ← -- (byte) main::j#2 [ main::j#1 main::i#2 ] -- zpby1=_dec_zpby1 
    dec $3
  //SEG17 [5] if((byte) main::j#1>(byte) 0) goto main::@2 [ main::j#1 main::i#2 ] -- zpby1_gt_0_then_la1 
    lda $3
    bne b2_from_b5
  //SEG18 main::@3
  b3:
  //SEG19 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- zpby1=_dec_zpby1 
    dec $2
  //SEG20 [7] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 ] -- zpby1_gt_0_then_la1 
    lda $2
    bne b1_from_b3
  //SEG21 main::@return
  breturn:
  //SEG22 [8] return  [ ]
    rts
}
//SEG23 nest1
nest1: {
  //SEG24 [9] phi from nest1 to nest1::@1
  b1_from_nest1:
  //SEG25 [9] phi (byte) nest1::i#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $4
    jmp b1
  //SEG26 [9] phi from nest1::@3 to nest1::@1
  b1_from_b3:
  //SEG27 [9] phi (byte) nest1::i#2 = (byte) nest1::i#1 -- register_copy 
  //SEG28 nest1::@1
  b1:
  //SEG29 [10] phi from nest1::@1 to nest1::@2
  b2_from_b1:
  //SEG30 [10] phi (byte) nest1::j#2 = (byte) 100 -- aby=coby1 
    lda #$64
    jmp b2
  //SEG31 [10] phi from nest1::@5 to nest1::@2
  b2_from_b5:
  //SEG32 [10] phi (byte) nest1::j#2 = (byte) nest1::j#1 -- register_copy 
  //SEG33 nest1::@2
  b2:
  //SEG34 [11] call nest2 param-assignment [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 ]
    jsr nest2
  //SEG35 nest1::@5
  b5:
  //SEG36 [12] (byte) nest1::j#1 ← -- (byte) nest1::j#2 [ main::j#2 main::i#2 nest1::j#1 nest1::i#2 ] -- aby=_dec_aby 
    sec
    sbc #$1
  //SEG37 [13] if((byte) nest1::j#1>(byte) 0) goto nest1::@2 [ main::j#2 main::i#2 nest1::j#1 nest1::i#2 ] -- aby_gt_0_then_la1 
    cmp #$0
    bne b2_from_b5
  //SEG38 nest1::@3
  b3:
  //SEG39 [14] (byte) nest1::i#1 ← -- (byte) nest1::i#2 [ main::j#2 main::i#2 nest1::i#1 ] -- zpby1=_dec_zpby1 
    dec $4
  //SEG40 [15] if((byte) nest1::i#1>(byte) 0) goto nest1::@1 [ main::j#2 main::i#2 nest1::i#1 ] -- zpby1_gt_0_then_la1 
    lda $4
    bne b1_from_b3
  //SEG41 nest1::@return
  breturn:
  //SEG42 [16] return  [ main::j#2 main::i#2 ]
    rts
}
//SEG43 nest2
nest2: {
  //SEG44 [17] phi from nest2 to nest2::@1
  b1_from_nest2:
  //SEG45 [17] phi (byte) nest2::i#2 = (byte) 100 -- xby=coby1 
    ldx #$64
    jmp b1
  //SEG46 [17] phi from nest2::@3 to nest2::@1
  b1_from_b3:
  //SEG47 [17] phi (byte) nest2::i#2 = (byte) nest2::i#1 -- register_copy 
  //SEG48 nest2::@1
  b1:
  //SEG49 [18] phi from nest2::@1 to nest2::@2
  b2_from_b1:
  //SEG50 [18] phi (byte) nest2::j#2 = (byte) 100 -- yby=coby1 
    ldy #$64
    jmp b2
  //SEG51 [18] phi from nest2::@2 to nest2::@2
  b2_from_b2:
  //SEG52 [18] phi (byte) nest2::j#2 = (byte) nest2::j#1 -- register_copy 
  //SEG53 nest2::@2
  b2:
  //SEG54 [19] *((word) 1024) ← (byte) nest2::j#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#2 nest2::i#2 ] -- _star_cowo1=yby 
    sty $400
  //SEG55 [20] (byte) nest2::j#1 ← -- (byte) nest2::j#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#1 nest2::i#2 ] -- yby=_dec_yby 
    dey
  //SEG56 [21] if((byte) nest2::j#1>(byte) 0) goto nest2::@2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#1 nest2::i#2 ] -- yby_gt_0_then_la1 
    cpy #$0
    bne b2_from_b2
  //SEG57 nest2::@3
  b3:
  //SEG58 [22] (byte) nest2::i#1 ← -- (byte) nest2::i#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::i#1 ] -- xby=_dec_xby 
    dex
  //SEG59 [23] if((byte) nest2::i#1>(byte) 0) goto nest2::@1 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::i#1 ] -- xby_gt_0_then_la1 
    cpx #$0
    bne b1_from_b3
  //SEG60 nest2::@return
  breturn:
  //SEG61 [24] return  [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 ]
    rts
}

Replacing label b2_from_b5 with b2
Replacing label b1_from_b3 with b1
Replacing label b2_from_b5 with b2
Replacing label b1_from_b3 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b5:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b5:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 @begin
bbegin:
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @end
bend:
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  b1_from_main:
  //SEG5 [1] phi (byte) main::i#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $2
    jmp b1
  //SEG6 [1] phi from main::@3 to main::@1
  //SEG7 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
  //SEG8 main::@1
  b1:
  //SEG9 [2] phi from main::@1 to main::@2
  //SEG10 [2] phi (byte) main::j#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $3
    jmp b2
  //SEG11 [2] phi from main::@5 to main::@2
  //SEG12 [2] phi (byte) main::j#2 = (byte) main::j#1 -- register_copy 
  //SEG13 main::@2
  b2:
  //SEG14 [3] call nest1 param-assignment [ main::j#2 main::i#2 ]
    jsr nest1
  //SEG15 main::@5
  b5:
  //SEG16 [4] (byte) main::j#1 ← -- (byte) main::j#2 [ main::j#1 main::i#2 ] -- zpby1=_dec_zpby1 
    dec $3
  //SEG17 [5] if((byte) main::j#1>(byte) 0) goto main::@2 [ main::j#1 main::i#2 ] -- zpby1_gt_0_then_la1 
    lda $3
    bne b2
  //SEG18 main::@3
  b3:
  //SEG19 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- zpby1=_dec_zpby1 
    dec $2
  //SEG20 [7] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 ] -- zpby1_gt_0_then_la1 
    lda $2
    bne b1
  //SEG21 main::@return
  breturn:
  //SEG22 [8] return  [ ]
    rts
}
//SEG23 nest1
nest1: {
  //SEG24 [9] phi from nest1 to nest1::@1
  b1_from_nest1:
  //SEG25 [9] phi (byte) nest1::i#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $4
    jmp b1
  //SEG26 [9] phi from nest1::@3 to nest1::@1
  //SEG27 [9] phi (byte) nest1::i#2 = (byte) nest1::i#1 -- register_copy 
  //SEG28 nest1::@1
  b1:
  //SEG29 [10] phi from nest1::@1 to nest1::@2
  //SEG30 [10] phi (byte) nest1::j#2 = (byte) 100 -- aby=coby1 
    lda #$64
    jmp b2
  //SEG31 [10] phi from nest1::@5 to nest1::@2
  //SEG32 [10] phi (byte) nest1::j#2 = (byte) nest1::j#1 -- register_copy 
  //SEG33 nest1::@2
  b2:
  //SEG34 [11] call nest2 param-assignment [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 ]
    jsr nest2
  //SEG35 nest1::@5
  b5:
  //SEG36 [12] (byte) nest1::j#1 ← -- (byte) nest1::j#2 [ main::j#2 main::i#2 nest1::j#1 nest1::i#2 ] -- aby=_dec_aby 
    sec
    sbc #$1
  //SEG37 [13] if((byte) nest1::j#1>(byte) 0) goto nest1::@2 [ main::j#2 main::i#2 nest1::j#1 nest1::i#2 ] -- aby_gt_0_then_la1 
    cmp #$0
    bne b2
  //SEG38 nest1::@3
  b3:
  //SEG39 [14] (byte) nest1::i#1 ← -- (byte) nest1::i#2 [ main::j#2 main::i#2 nest1::i#1 ] -- zpby1=_dec_zpby1 
    dec $4
  //SEG40 [15] if((byte) nest1::i#1>(byte) 0) goto nest1::@1 [ main::j#2 main::i#2 nest1::i#1 ] -- zpby1_gt_0_then_la1 
    lda $4
    bne b1
  //SEG41 nest1::@return
  breturn:
  //SEG42 [16] return  [ main::j#2 main::i#2 ]
    rts
}
//SEG43 nest2
nest2: {
  //SEG44 [17] phi from nest2 to nest2::@1
  b1_from_nest2:
  //SEG45 [17] phi (byte) nest2::i#2 = (byte) 100 -- xby=coby1 
    ldx #$64
    jmp b1
  //SEG46 [17] phi from nest2::@3 to nest2::@1
  //SEG47 [17] phi (byte) nest2::i#2 = (byte) nest2::i#1 -- register_copy 
  //SEG48 nest2::@1
  b1:
  //SEG49 [18] phi from nest2::@1 to nest2::@2
  //SEG50 [18] phi (byte) nest2::j#2 = (byte) 100 -- yby=coby1 
    ldy #$64
    jmp b2
  //SEG51 [18] phi from nest2::@2 to nest2::@2
  //SEG52 [18] phi (byte) nest2::j#2 = (byte) nest2::j#1 -- register_copy 
  //SEG53 nest2::@2
  b2:
  //SEG54 [19] *((word) 1024) ← (byte) nest2::j#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#2 nest2::i#2 ] -- _star_cowo1=yby 
    sty $400
  //SEG55 [20] (byte) nest2::j#1 ← -- (byte) nest2::j#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#1 nest2::i#2 ] -- yby=_dec_yby 
    dey
  //SEG56 [21] if((byte) nest2::j#1>(byte) 0) goto nest2::@2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#1 nest2::i#2 ] -- yby_gt_0_then_la1 
    cpy #$0
    bne b2
  //SEG57 nest2::@3
  b3:
  //SEG58 [22] (byte) nest2::i#1 ← -- (byte) nest2::i#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::i#1 ] -- xby=_dec_xby 
    dex
  //SEG59 [23] if((byte) nest2::i#1>(byte) 0) goto nest2::@1 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::i#1 ] -- xby_gt_0_then_la1 
    cpx #$0
    bne b1
  //SEG60 nest2::@return
  breturn:
  //SEG61 [24] return  [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 ]
    rts
}

Removing instruction bbegin:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b5:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_nest1:
Removing instruction b5:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_nest2:
Removing instruction b3:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 @begin
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @end
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  //SEG5 [1] phi (byte) main::i#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $2
    jmp b1
  //SEG6 [1] phi from main::@3 to main::@1
  //SEG7 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
  //SEG8 main::@1
  b1:
  //SEG9 [2] phi from main::@1 to main::@2
  //SEG10 [2] phi (byte) main::j#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $3
    jmp b2
  //SEG11 [2] phi from main::@5 to main::@2
  //SEG12 [2] phi (byte) main::j#2 = (byte) main::j#1 -- register_copy 
  //SEG13 main::@2
  b2:
  //SEG14 [3] call nest1 param-assignment [ main::j#2 main::i#2 ]
    jsr nest1
  //SEG15 main::@5
  //SEG16 [4] (byte) main::j#1 ← -- (byte) main::j#2 [ main::j#1 main::i#2 ] -- zpby1=_dec_zpby1 
    dec $3
  //SEG17 [5] if((byte) main::j#1>(byte) 0) goto main::@2 [ main::j#1 main::i#2 ] -- zpby1_gt_0_then_la1 
    lda $3
    bne b2
  //SEG18 main::@3
  //SEG19 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- zpby1=_dec_zpby1 
    dec $2
  //SEG20 [7] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 ] -- zpby1_gt_0_then_la1 
    lda $2
    bne b1
  //SEG21 main::@return
  //SEG22 [8] return  [ ]
    rts
}
//SEG23 nest1
nest1: {
  //SEG24 [9] phi from nest1 to nest1::@1
  //SEG25 [9] phi (byte) nest1::i#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $4
    jmp b1
  //SEG26 [9] phi from nest1::@3 to nest1::@1
  //SEG27 [9] phi (byte) nest1::i#2 = (byte) nest1::i#1 -- register_copy 
  //SEG28 nest1::@1
  b1:
  //SEG29 [10] phi from nest1::@1 to nest1::@2
  //SEG30 [10] phi (byte) nest1::j#2 = (byte) 100 -- aby=coby1 
    lda #$64
    jmp b2
  //SEG31 [10] phi from nest1::@5 to nest1::@2
  //SEG32 [10] phi (byte) nest1::j#2 = (byte) nest1::j#1 -- register_copy 
  //SEG33 nest1::@2
  b2:
  //SEG34 [11] call nest2 param-assignment [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 ]
    jsr nest2
  //SEG35 nest1::@5
  //SEG36 [12] (byte) nest1::j#1 ← -- (byte) nest1::j#2 [ main::j#2 main::i#2 nest1::j#1 nest1::i#2 ] -- aby=_dec_aby 
    sec
    sbc #$1
  //SEG37 [13] if((byte) nest1::j#1>(byte) 0) goto nest1::@2 [ main::j#2 main::i#2 nest1::j#1 nest1::i#2 ] -- aby_gt_0_then_la1 
    cmp #$0
    bne b2
  //SEG38 nest1::@3
  //SEG39 [14] (byte) nest1::i#1 ← -- (byte) nest1::i#2 [ main::j#2 main::i#2 nest1::i#1 ] -- zpby1=_dec_zpby1 
    dec $4
  //SEG40 [15] if((byte) nest1::i#1>(byte) 0) goto nest1::@1 [ main::j#2 main::i#2 nest1::i#1 ] -- zpby1_gt_0_then_la1 
    lda $4
    bne b1
  //SEG41 nest1::@return
  //SEG42 [16] return  [ main::j#2 main::i#2 ]
    rts
}
//SEG43 nest2
nest2: {
  //SEG44 [17] phi from nest2 to nest2::@1
  //SEG45 [17] phi (byte) nest2::i#2 = (byte) 100 -- xby=coby1 
    ldx #$64
    jmp b1
  //SEG46 [17] phi from nest2::@3 to nest2::@1
  //SEG47 [17] phi (byte) nest2::i#2 = (byte) nest2::i#1 -- register_copy 
  //SEG48 nest2::@1
  b1:
  //SEG49 [18] phi from nest2::@1 to nest2::@2
  //SEG50 [18] phi (byte) nest2::j#2 = (byte) 100 -- yby=coby1 
    ldy #$64
    jmp b2
  //SEG51 [18] phi from nest2::@2 to nest2::@2
  //SEG52 [18] phi (byte) nest2::j#2 = (byte) nest2::j#1 -- register_copy 
  //SEG53 nest2::@2
  b2:
  //SEG54 [19] *((word) 1024) ← (byte) nest2::j#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#2 nest2::i#2 ] -- _star_cowo1=yby 
    sty $400
  //SEG55 [20] (byte) nest2::j#1 ← -- (byte) nest2::j#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#1 nest2::i#2 ] -- yby=_dec_yby 
    dey
  //SEG56 [21] if((byte) nest2::j#1>(byte) 0) goto nest2::@2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#1 nest2::i#2 ] -- yby_gt_0_then_la1 
    cpy #$0
    bne b2
  //SEG57 nest2::@3
  //SEG58 [22] (byte) nest2::i#1 ← -- (byte) nest2::i#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::i#1 ] -- xby=_dec_xby 
    dex
  //SEG59 [23] if((byte) nest2::i#1>(byte) 0) goto nest2::@1 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::i#1 ] -- xby_gt_0_then_la1 
    cpx #$0
    bne b1
  //SEG60 nest2::@return
  //SEG61 [24] return  [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 ]
    rts
}

Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b2
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 @begin
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @end
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  //SEG5 [1] phi (byte) main::i#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $2
  //SEG6 [1] phi from main::@3 to main::@1
  //SEG7 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
  //SEG8 main::@1
  b1:
  //SEG9 [2] phi from main::@1 to main::@2
  //SEG10 [2] phi (byte) main::j#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $3
  //SEG11 [2] phi from main::@5 to main::@2
  //SEG12 [2] phi (byte) main::j#2 = (byte) main::j#1 -- register_copy 
  //SEG13 main::@2
  b2:
  //SEG14 [3] call nest1 param-assignment [ main::j#2 main::i#2 ]
    jsr nest1
  //SEG15 main::@5
  //SEG16 [4] (byte) main::j#1 ← -- (byte) main::j#2 [ main::j#1 main::i#2 ] -- zpby1=_dec_zpby1 
    dec $3
  //SEG17 [5] if((byte) main::j#1>(byte) 0) goto main::@2 [ main::j#1 main::i#2 ] -- zpby1_gt_0_then_la1 
    lda $3
    bne b2
  //SEG18 main::@3
  //SEG19 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- zpby1=_dec_zpby1 
    dec $2
  //SEG20 [7] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 ] -- zpby1_gt_0_then_la1 
    lda $2
    bne b1
  //SEG21 main::@return
  //SEG22 [8] return  [ ]
    rts
}
//SEG23 nest1
nest1: {
  //SEG24 [9] phi from nest1 to nest1::@1
  //SEG25 [9] phi (byte) nest1::i#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $4
  //SEG26 [9] phi from nest1::@3 to nest1::@1
  //SEG27 [9] phi (byte) nest1::i#2 = (byte) nest1::i#1 -- register_copy 
  //SEG28 nest1::@1
  b1:
  //SEG29 [10] phi from nest1::@1 to nest1::@2
  //SEG30 [10] phi (byte) nest1::j#2 = (byte) 100 -- aby=coby1 
    lda #$64
  //SEG31 [10] phi from nest1::@5 to nest1::@2
  //SEG32 [10] phi (byte) nest1::j#2 = (byte) nest1::j#1 -- register_copy 
  //SEG33 nest1::@2
  b2:
  //SEG34 [11] call nest2 param-assignment [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 ]
    jsr nest2
  //SEG35 nest1::@5
  //SEG36 [12] (byte) nest1::j#1 ← -- (byte) nest1::j#2 [ main::j#2 main::i#2 nest1::j#1 nest1::i#2 ] -- aby=_dec_aby 
    sec
    sbc #$1
  //SEG37 [13] if((byte) nest1::j#1>(byte) 0) goto nest1::@2 [ main::j#2 main::i#2 nest1::j#1 nest1::i#2 ] -- aby_gt_0_then_la1 
    cmp #$0
    bne b2
  //SEG38 nest1::@3
  //SEG39 [14] (byte) nest1::i#1 ← -- (byte) nest1::i#2 [ main::j#2 main::i#2 nest1::i#1 ] -- zpby1=_dec_zpby1 
    dec $4
  //SEG40 [15] if((byte) nest1::i#1>(byte) 0) goto nest1::@1 [ main::j#2 main::i#2 nest1::i#1 ] -- zpby1_gt_0_then_la1 
    lda $4
    bne b1
  //SEG41 nest1::@return
  //SEG42 [16] return  [ main::j#2 main::i#2 ]
    rts
}
//SEG43 nest2
nest2: {
  //SEG44 [17] phi from nest2 to nest2::@1
  //SEG45 [17] phi (byte) nest2::i#2 = (byte) 100 -- xby=coby1 
    ldx #$64
  //SEG46 [17] phi from nest2::@3 to nest2::@1
  //SEG47 [17] phi (byte) nest2::i#2 = (byte) nest2::i#1 -- register_copy 
  //SEG48 nest2::@1
  b1:
  //SEG49 [18] phi from nest2::@1 to nest2::@2
  //SEG50 [18] phi (byte) nest2::j#2 = (byte) 100 -- yby=coby1 
    ldy #$64
  //SEG51 [18] phi from nest2::@2 to nest2::@2
  //SEG52 [18] phi (byte) nest2::j#2 = (byte) nest2::j#1 -- register_copy 
  //SEG53 nest2::@2
  b2:
  //SEG54 [19] *((word) 1024) ← (byte) nest2::j#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#2 nest2::i#2 ] -- _star_cowo1=yby 
    sty $400
  //SEG55 [20] (byte) nest2::j#1 ← -- (byte) nest2::j#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#1 nest2::i#2 ] -- yby=_dec_yby 
    dey
  //SEG56 [21] if((byte) nest2::j#1>(byte) 0) goto nest2::@2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#1 nest2::i#2 ] -- yby_gt_0_then_la1 
    cpy #$0
    bne b2
  //SEG57 nest2::@3
  //SEG58 [22] (byte) nest2::i#1 ← -- (byte) nest2::i#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::i#1 ] -- xby=_dec_xby 
    dex
  //SEG59 [23] if((byte) nest2::i#1>(byte) 0) goto nest2::@1 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::i#1 ] -- xby_gt_0_then_la1 
    cpx #$0
    bne b1
  //SEG60 nest2::@return
  //SEG61 [24] return  [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 ]
    rts
}

FINAL SYMBOL TABLE
(label) @begin
(label) @end
(byte*) SCREEN
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@5
(label) main::@return
(byte) main::i
(byte) main::i#1 zp byte:2 16.5
(byte) main::i#2 zp byte:2 1.0476190476190477
(byte) main::j
(byte) main::j#1 zp byte:3 151.5
(byte) main::j#2 zp byte:3 11.222222222222221
(void()) nest1()
(label) nest1::@1
(label) nest1::@2
(label) nest1::@3
(label) nest1::@5
(label) nest1::@return
(byte) nest1::i
(byte) nest1::i#1 zp byte:4 1501.5
(byte) nest1::i#2 zp byte:4 154.0
(byte) nest1::j
(byte) nest1::j#1 reg byte a 15001.5
(byte) nest1::j#2 reg byte a 2000.2
(void()) nest2()
(label) nest2::@1
(label) nest2::@2
(label) nest2::@3
(label) nest2::@return
(byte) nest2::i
(byte) nest2::i#1 reg byte x 150001.5
(byte) nest2::i#2 reg byte x 40000.4
(byte) nest2::j
(byte) nest2::j#1 reg byte y 1500001.5
(byte) nest2::j#2 reg byte y 1500001.5

zp byte:2 [ main::i#2 main::i#1 ]
zp byte:3 [ main::j#2 main::j#1 ]
zp byte:4 [ nest1::i#2 nest1::i#1 ]
reg byte a [ nest1::j#2 nest1::j#1 ]
reg byte x [ nest2::i#2 nest2::i#1 ]
reg byte y [ nest2::j#2 nest2::j#1 ]

FINAL CODE
//SEG0 @begin
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @end
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  //SEG5 [1] phi (byte) main::i#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $2
  //SEG6 [1] phi from main::@3 to main::@1
  //SEG7 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
  //SEG8 main::@1
  b1:
  //SEG9 [2] phi from main::@1 to main::@2
  //SEG10 [2] phi (byte) main::j#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $3
  //SEG11 [2] phi from main::@5 to main::@2
  //SEG12 [2] phi (byte) main::j#2 = (byte) main::j#1 -- register_copy 
  //SEG13 main::@2
  b2:
  //SEG14 [3] call nest1 param-assignment [ main::j#2 main::i#2 ]
    jsr nest1
  //SEG15 main::@5
  //SEG16 [4] (byte) main::j#1 ← -- (byte) main::j#2 [ main::j#1 main::i#2 ] -- zpby1=_dec_zpby1 
    dec $3
  //SEG17 [5] if((byte) main::j#1>(byte) 0) goto main::@2 [ main::j#1 main::i#2 ] -- zpby1_gt_0_then_la1 
    lda $3
    bne b2
  //SEG18 main::@3
  //SEG19 [6] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- zpby1=_dec_zpby1 
    dec $2
  //SEG20 [7] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 ] -- zpby1_gt_0_then_la1 
    lda $2
    bne b1
  //SEG21 main::@return
  //SEG22 [8] return  [ ]
    rts
}
//SEG23 nest1
nest1: {
  //SEG24 [9] phi from nest1 to nest1::@1
  //SEG25 [9] phi (byte) nest1::i#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $4
  //SEG26 [9] phi from nest1::@3 to nest1::@1
  //SEG27 [9] phi (byte) nest1::i#2 = (byte) nest1::i#1 -- register_copy 
  //SEG28 nest1::@1
  b1:
  //SEG29 [10] phi from nest1::@1 to nest1::@2
  //SEG30 [10] phi (byte) nest1::j#2 = (byte) 100 -- aby=coby1 
    lda #$64
  //SEG31 [10] phi from nest1::@5 to nest1::@2
  //SEG32 [10] phi (byte) nest1::j#2 = (byte) nest1::j#1 -- register_copy 
  //SEG33 nest1::@2
  b2:
  //SEG34 [11] call nest2 param-assignment [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 ]
    jsr nest2
  //SEG35 nest1::@5
  //SEG36 [12] (byte) nest1::j#1 ← -- (byte) nest1::j#2 [ main::j#2 main::i#2 nest1::j#1 nest1::i#2 ] -- aby=_dec_aby 
    sec
    sbc #$1
  //SEG37 [13] if((byte) nest1::j#1>(byte) 0) goto nest1::@2 [ main::j#2 main::i#2 nest1::j#1 nest1::i#2 ] -- aby_gt_0_then_la1 
    cmp #$0
    bne b2
  //SEG38 nest1::@3
  //SEG39 [14] (byte) nest1::i#1 ← -- (byte) nest1::i#2 [ main::j#2 main::i#2 nest1::i#1 ] -- zpby1=_dec_zpby1 
    dec $4
  //SEG40 [15] if((byte) nest1::i#1>(byte) 0) goto nest1::@1 [ main::j#2 main::i#2 nest1::i#1 ] -- zpby1_gt_0_then_la1 
    lda $4
    bne b1
  //SEG41 nest1::@return
  //SEG42 [16] return  [ main::j#2 main::i#2 ]
    rts
}
//SEG43 nest2
nest2: {
  //SEG44 [17] phi from nest2 to nest2::@1
  //SEG45 [17] phi (byte) nest2::i#2 = (byte) 100 -- xby=coby1 
    ldx #$64
  //SEG46 [17] phi from nest2::@3 to nest2::@1
  //SEG47 [17] phi (byte) nest2::i#2 = (byte) nest2::i#1 -- register_copy 
  //SEG48 nest2::@1
  b1:
  //SEG49 [18] phi from nest2::@1 to nest2::@2
  //SEG50 [18] phi (byte) nest2::j#2 = (byte) 100 -- yby=coby1 
    ldy #$64
  //SEG51 [18] phi from nest2::@2 to nest2::@2
  //SEG52 [18] phi (byte) nest2::j#2 = (byte) nest2::j#1 -- register_copy 
  //SEG53 nest2::@2
  b2:
  //SEG54 [19] *((word) 1024) ← (byte) nest2::j#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#2 nest2::i#2 ] -- _star_cowo1=yby 
    sty $400
  //SEG55 [20] (byte) nest2::j#1 ← -- (byte) nest2::j#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#1 nest2::i#2 ] -- yby=_dec_yby 
    dey
  //SEG56 [21] if((byte) nest2::j#1>(byte) 0) goto nest2::@2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::j#1 nest2::i#2 ] -- yby_gt_0_then_la1 
    cpy #$0
    bne b2
  //SEG57 nest2::@3
  //SEG58 [22] (byte) nest2::i#1 ← -- (byte) nest2::i#2 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::i#1 ] -- xby=_dec_xby 
    dex
  //SEG59 [23] if((byte) nest2::i#1>(byte) 0) goto nest2::@1 [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 nest2::i#1 ] -- xby_gt_0_then_la1 
    cpx #$0
    bne b1
  //SEG60 nest2::@return
  //SEG61 [24] return  [ main::j#2 main::i#2 nest1::j#2 nest1::i#2 ]
    rts
}

