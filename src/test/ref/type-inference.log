
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (byte) main::b#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::b#2 ← phi( main/(byte) main::b#0 main::@1/(byte) main::b#1 )
  (number~) main::$0 ← (number) -$30 + (byte) main::b#2
  (byte~) main::$2 ← (byte) main::b#2 * (const byte) SIZEOF_WORD
  *((const nomodify word*) main::screen + (byte~) main::$2) ← (number~) main::$0
  (byte) main::b#1 ← (byte) main::b#2 + rangenext(0,$14)
  (bool~) main::$1 ← (byte) main::b#1 != rangelast(0,$14)
  if((bool~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) SIZEOF_WORD = (byte) 2
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(number~) main::$0
(bool~) main::$1
(byte~) main::$2
(label) main::@1
(label) main::@return
(byte) main::b
(byte) main::b#0
(byte) main::b#1
(byte) main::b#2
(const nomodify word*) main::screen = (word*)(number) $400

Adding number conversion cast (unumber) -$30 in (number~) main::$0 ← (number) -$30 + (byte) main::b#2
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (unumber)(number) -$30 + (byte) main::b#2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (word*) 1024
Simplifying constant integer cast -$30
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) -$30
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) -$30 + (byte) main::b#2
Simple Condition (bool~) main::$1 [7] if((byte) main::b#1!=rangelast(0,$14)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::b#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [5] main::b#1 ← ++ main::b#2 to ++
Resolved ranged comparison value [7] if(main::b#1!=rangelast(0,$14)) goto main::@1 to (number) $15
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $15 in [5] if((byte) main::b#1!=(number) $15) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $15
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $15
Successful SSA optimization PassNFinalizeNumberTypeConversions
Rewriting multiplication to use shift [2] (byte~) main::$2 ← (byte) main::b#2 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) main::b#0
Constant inlined main::b#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant (const byte) SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [8] main::b#3 ← main::b#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] (byte) main::b#2 ← phi( main/(byte) 0 main::@1/(byte) main::b#1 )
  [2] (byte~) main::$0 ← (byte) -$30 + (byte) main::b#2
  [3] (byte~) main::$2 ← (byte) main::b#2 << (byte) 1
  [4] *((const nomodify word*) main::screen + (byte~) main::$2) ← (byte~) main::$0
  [5] (byte) main::b#1 ← ++ (byte) main::b#2
  [6] if((byte) main::b#1!=(byte) $15) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$0 11.0
(byte~) main::$2 22.0
(byte) main::b
(byte) main::b#1 16.5
(byte) main::b#2 11.0

Initial phi equivalence classes
[ main::b#2 main::b#1 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Complete equivalence classes
[ main::b#2 main::b#1 ]
[ main::$0 ]
[ main::$2 ]
Allocated zp[1]:2 [ main::b#2 main::b#1 ]
Allocated zp[1]:3 [ main::$0 ]
Allocated zp[1]:4 [ main::$2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test inference of integer types in expressions
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    .label __0 = 3
    .label __2 = 4
    .label b = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::b#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z b
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi (byte) main::b#2 = (byte) main::b#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] (byte~) main::$0 ← (byte) -$30 + (byte) main::b#2 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z b
    axs #-[-$30]
    stx.z __0
    // [3] (byte~) main::$2 ← (byte) main::b#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z b
    asl
    sta.z __2
    // [4] *((const nomodify word*) main::screen + (byte~) main::$2) ← (byte~) main::$0 -- pwuc1_derefidx_vbuz1=vbuz2 
    lda.z __2
    ldx.z __0
    tay
    txa
    sta screen,y
    // [5] (byte) main::b#1 ← ++ (byte) main::b#2 -- vbuz1=_inc_vbuz1 
    inc.z b
    // [6] if((byte) main::b#1!=(byte) $15) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$15
    cmp.z b
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] (byte~) main::$2 ← (byte) main::b#2 << (byte) 1 [ main::b#2 main::$0 main::$2 ] (  [ main::b#2 main::$0 main::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::b#2 main::b#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::$0 ]
Statement [4] *((const nomodify word*) main::screen + (byte~) main::$2) ← (byte~) main::$0 [ main::b#2 ] (  [ main::b#2 ] { }  ) always clobbers reg byte a 
Statement [2] (byte~) main::$0 ← (byte) -$30 + (byte) main::b#2 [ main::b#2 main::$0 ] (  [ main::b#2 main::$0 ] { }  ) always clobbers reg byte a 
Statement [3] (byte~) main::$2 ← (byte) main::b#2 << (byte) 1 [ main::b#2 main::$0 main::$2 ] (  [ main::b#2 main::$0 main::$2 ] { }  ) always clobbers reg byte a 
Statement [4] *((const nomodify word*) main::screen + (byte~) main::$2) ← (byte~) main::$0 [ main::b#2 ] (  [ main::b#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::b#2 main::b#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::$0 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::$2 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 27.5: zp[1]:2 [ main::b#2 main::b#1 ] 22: zp[1]:4 [ main::$2 ] 11: zp[1]:3 [ main::$0 ] 
Uplift Scope [] 

Uplifting [main] best 461 combination zp[1]:2 [ main::b#2 main::b#1 ] reg byte a [ main::$2 ] reg byte x [ main::$0 ] 
Uplifting [] best 461 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::b#2 main::b#1 ]
Uplifting [main] best 461 combination zp[1]:2 [ main::b#2 main::b#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test inference of integer types in expressions
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    .label b = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::b#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z b
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi (byte) main::b#2 = (byte) main::b#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] (byte~) main::$0 ← (byte) -$30 + (byte) main::b#2 -- vbuxx=vbuc1_plus_vbuz1 
    lax.z b
    axs #-[-$30]
    // [3] (byte~) main::$2 ← (byte) main::b#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z b
    asl
    // [4] *((const nomodify word*) main::screen + (byte~) main::$2) ← (byte~) main::$0 -- pwuc1_derefidx_vbuaa=vbuxx 
    tay
    txa
    sta screen,y
    // [5] (byte) main::b#1 ← ++ (byte) main::b#2 -- vbuz1=_inc_vbuz1 
    inc.z b
    // [6] if((byte) main::b#1!=(byte) $15) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$15
    cmp.z b
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(void()) main()
(byte~) main::$0 reg byte x 11.0
(byte~) main::$2 reg byte a 22.0
(label) main::@1
(label) main::@return
(byte) main::b
(byte) main::b#1 b zp[1]:2 16.5
(byte) main::b#2 b zp[1]:2 11.0
(const nomodify word*) main::screen = (word*) 1024

zp[1]:2 [ main::b#2 main::b#1 ]
reg byte x [ main::$0 ]
reg byte a [ main::$2 ]


FINAL ASSEMBLER
Score: 371

  // File Comments
// Test inference of integer types in expressions
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    .label b = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (byte) main::b#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z b
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi (byte) main::b#2 = (byte) main::b#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // -0x30+b
    // [2] (byte~) main::$0 ← (byte) -$30 + (byte) main::b#2 -- vbuxx=vbuc1_plus_vbuz1 
    lax.z b
    axs #-[-$30]
    // screen[b] = -0x30+b
    // [3] (byte~) main::$2 ← (byte) main::b#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z b
    asl
    // [4] *((const nomodify word*) main::screen + (byte~) main::$2) ← (byte~) main::$0 -- pwuc1_derefidx_vbuaa=vbuxx 
    tay
    txa
    sta screen,y
    // for( byte b: 0..20)
    // [5] (byte) main::b#1 ← ++ (byte) main::b#2 -- vbuz1=_inc_vbuz1 
    inc.z b
    // [6] if((byte) main::b#1!=(byte) $15) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$15
    cmp.z b
    bne __b1
    // main::@return
    // }
    // [7] return 
    rts
}
  // File Data

