
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) idx#0 ← (byte) 0
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) idx#27 ← phi( @1/(byte) idx#26 )
  (byte) main::c#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) idx#23 ← phi( main/(byte) idx#27 main::@2/(byte) idx#1 )
  (byte) main::c#2 ← phi( main/(byte) main::c#0 main::@2/(byte) main::c#1 )
  (byte) outsw::c#0 ← (byte) main::c#2
  call outsw 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) main::c#3 ← phi( main::@1/(byte) main::c#2 )
  (byte) idx#12 ← phi( main::@1/(byte) idx#5 )
  (byte) idx#1 ← (byte) idx#12
  (byte) main::c#1 ← (byte) main::c#3 + rangenext(0,$27)
  (bool~) main::$1 ← (byte) main::c#1 != rangelast(0,$27)
  if((bool~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte) idx#13 ← phi( main::@2/(byte) idx#1 )
  (byte) idx#2 ← (byte) idx#13
  return 
  to:@return

(void()) outsw((byte) outsw::c)
outsw: scope:[outsw]  from main::@1
  (byte) outsw::c#2 ← phi( main::@1/(byte) outsw::c#0 )
  (byte) idx#24 ← phi( main::@1/(byte) idx#23 )
  (byte) out::c#0 ← (byte) '-'
  call out 
  to:outsw::@1
outsw::@1: scope:[outsw]  from outsw
  (byte) outsw::c#1 ← phi( outsw/(byte) outsw::c#2 )
  (byte) idx#14 ← phi( outsw/(byte) idx#10 )
  (byte) idx#3 ← (byte) idx#14
  (byte) outw::c#0 ← (byte) outsw::c#1
  call outw 
  to:outsw::@2
outsw::@2: scope:[outsw]  from outsw::@1
  (byte) idx#15 ← phi( outsw::@1/(byte) idx#8 )
  (byte) idx#4 ← (byte) idx#15
  to:outsw::@return
outsw::@return: scope:[outsw]  from outsw::@2
  (byte) idx#16 ← phi( outsw::@2/(byte) idx#4 )
  (byte) idx#5 ← (byte) idx#16
  return 
  to:@return

(void()) outw((byte) outw::c)
outw: scope:[outw]  from outsw::@1
  (byte) idx#25 ← phi( outsw::@1/(byte) idx#3 )
  (byte) outw::c#1 ← phi( outsw::@1/(byte) outw::c#0 )
  (byte~) outw::$0 ← (byte) outw::c#1 << (number) 4
  (byte) out::c#1 ← (byte~) outw::$0
  call out 
  to:outw::@1
outw::@1: scope:[outw]  from outw
  (byte) outw::c#2 ← phi( outw/(byte) outw::c#1 )
  (byte) idx#17 ← phi( outw/(byte) idx#10 )
  (byte) idx#6 ← (byte) idx#17
  (number~) outw::$2 ← (byte) outw::c#2 & (number) $f
  (byte) out::c#2 ← (number~) outw::$2
  call out 
  to:outw::@2
outw::@2: scope:[outw]  from outw::@1
  (byte) idx#18 ← phi( outw::@1/(byte) idx#10 )
  (byte) idx#7 ← (byte) idx#18
  to:outw::@return
outw::@return: scope:[outw]  from outw::@2
  (byte) idx#19 ← phi( outw::@2/(byte) idx#7 )
  (byte) idx#8 ← (byte) idx#19
  return 
  to:@return

(void()) out((byte) out::c)
out: scope:[out]  from outsw outw outw::@1
  (byte) out::c#3 ← phi( outsw/(byte) out::c#0 outw/(byte) out::c#1 outw::@1/(byte) out::c#2 )
  (byte) idx#20 ← phi( outsw/(byte) idx#24 outw/(byte) idx#25 outw::@1/(byte) idx#6 )
  (byte) idx#9 ← ++ (byte) idx#20
  *((const nomodify byte*) SCREEN + (byte) idx#9) ← (byte) out::c#3
  to:out::@return
out::@return: scope:[out]  from out
  (byte) idx#21 ← phi( out/(byte) idx#9 )
  (byte) idx#10 ← (byte) idx#21
  return 
  to:@return
@1: scope:[]  from @begin
  (byte) idx#26 ← phi( @begin/(byte) idx#0 )
  call main 
  to:@2
@2: scope:[]  from @1
  (byte) idx#22 ← phi( @1/(byte) idx#2 )
  (byte) idx#11 ← (byte) idx#22
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify byte*) SCREEN = (byte*)(number) $400
(byte) idx
(byte) idx#0
(byte) idx#1
(byte) idx#10
(byte) idx#11
(byte) idx#12
(byte) idx#13
(byte) idx#14
(byte) idx#15
(byte) idx#16
(byte) idx#17
(byte) idx#18
(byte) idx#19
(byte) idx#2
(byte) idx#20
(byte) idx#21
(byte) idx#22
(byte) idx#23
(byte) idx#24
(byte) idx#25
(byte) idx#26
(byte) idx#27
(byte) idx#3
(byte) idx#4
(byte) idx#5
(byte) idx#6
(byte) idx#7
(byte) idx#8
(byte) idx#9
(void()) main()
(bool~) main::$1
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::c
(byte) main::c#0
(byte) main::c#1
(byte) main::c#2
(byte) main::c#3
(void()) out((byte) out::c)
(label) out::@return
(byte) out::c
(byte) out::c#0
(byte) out::c#1
(byte) out::c#2
(byte) out::c#3
(void()) outsw((byte) outsw::c)
(label) outsw::@1
(label) outsw::@2
(label) outsw::@return
(byte) outsw::c
(byte) outsw::c#0
(byte) outsw::c#1
(byte) outsw::c#2
(void()) outw((byte) outw::c)
(byte~) outw::$0
(number~) outw::$2
(label) outw::@1
(label) outw::@2
(label) outw::@return
(byte) outw::c
(byte) outw::c#0
(byte) outw::c#1
(byte) outw::c#2

Adding number conversion cast (unumber) 4 in (byte~) outw::$0 ← (byte) outw::c#1 << (number) 4
Adding number conversion cast (unumber) $f in (number~) outw::$2 ← (byte) outw::c#2 & (number) $f
Adding number conversion cast (unumber) outw::$2 in (number~) outw::$2 ← (byte) outw::c#2 & (unumber)(number) $f
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) outw::$2 ← (byte) outw::c#2 & (byte) $f
Alias main::c#2 = main::c#3 
Alias idx#1 = idx#12 idx#13 idx#2 
Alias outsw::c#1 = outsw::c#2 
Alias idx#14 = idx#3 
Alias idx#15 = idx#4 idx#16 idx#5 
Alias out::c#1 = outw::$0 
Alias outw::c#1 = outw::c#2 
Alias idx#17 = idx#6 
Alias out::c#2 = outw::$2 
Alias idx#18 = idx#7 idx#19 idx#8 
Alias idx#10 = idx#21 idx#9 
Alias idx#0 = idx#26 
Alias idx#11 = idx#22 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) idx#27 (byte) idx#0
Identical Phi Values (byte) idx#1 (byte) idx#15
Identical Phi Values (byte) idx#24 (byte) idx#23
Identical Phi Values (byte) outsw::c#1 (byte) outsw::c#0
Identical Phi Values (byte) idx#14 (byte) idx#10
Identical Phi Values (byte) idx#15 (byte) idx#18
Identical Phi Values (byte) outw::c#1 (byte) outw::c#0
Identical Phi Values (byte) idx#25 (byte) idx#14
Identical Phi Values (byte) idx#17 (byte) idx#10
Identical Phi Values (byte) idx#18 (byte) idx#10
Identical Phi Values (byte) idx#11 (byte) idx#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$1 [9] if((byte) main::c#1!=rangelast(0,$27)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) idx#0 = 0
Constant (const byte) main::c#0 = 0
Constant (const byte) out::c#0 = '-'
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [7] main::c#1 ← ++ main::c#2 to ++
Resolved ranged comparison value [9] if(main::c#1!=rangelast(0,$27)) goto main::@1 to (number) $28
Adding number conversion cast (unumber) $28 in if((byte) main::c#1!=(number) $28) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) main::c#0
Inlining constant with var siblings (const byte) out::c#0
Inlining constant with var siblings (const byte) idx#0
Constant inlined out::c#0 = (byte) '-'
Constant inlined main::c#0 = (byte) 0
Constant inlined idx#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@3(between main::@2 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of outsw::@2
Adding NOP phi() at start of outw::@2
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to outsw:8 
Calls in [outsw] to out:15 outw:17 
Calls in [outw] to out:23 out:27 

Created 4 initial phi equivalence classes
Coalesced [12] main::c#4 ← main::c#1
Coalesced [13] idx#28 ← idx#10
Coalesced [14] idx#29 ← idx#23
Coalesced (already) [21] idx#30 ← idx#10
Coalesced [22] out::c#4 ← out::c#1
Coalesced (already) [25] idx#31 ← idx#10
Coalesced [26] out::c#5 ← out::c#2
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Culled Empty Block (label) outsw::@2
Culled Empty Block (label) outw::@2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of outsw

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) idx#23 ← phi( main/(byte) 0 main::@2/(byte) idx#10 )
  [5] (byte) main::c#2 ← phi( main/(byte) 0 main::@2/(byte) main::c#1 )
  [6] (byte) outsw::c#0 ← (byte) main::c#2
  [7] call outsw 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] (byte) main::c#1 ← ++ (byte) main::c#2
  [9] if((byte) main::c#1!=(byte) $28) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return 
  to:@return

(void()) outsw((byte) outsw::c)
outsw: scope:[outsw]  from main::@1
  [11] phi()
  [12] call out 
  to:outsw::@1
outsw::@1: scope:[outsw]  from outsw
  [13] (byte) outw::c#0 ← (byte) outsw::c#0
  [14] call outw 
  to:outsw::@return
outsw::@return: scope:[outsw]  from outsw::@1
  [15] return 
  to:@return

(void()) outw((byte) outw::c)
outw: scope:[outw]  from outsw::@1
  [16] (byte) out::c#1 ← (byte) outw::c#0 << (byte) 4
  [17] call out 
  to:outw::@1
outw::@1: scope:[outw]  from outw
  [18] (byte) out::c#2 ← (byte) outw::c#0 & (byte) $f
  [19] call out 
  to:outw::@return
outw::@return: scope:[outw]  from outw::@1
  [20] return 
  to:@return

(void()) out((byte) out::c)
out: scope:[out]  from outsw outw outw::@1
  [21] (byte) out::c#3 ← phi( outsw/(byte) '-' outw/(byte) out::c#1 outw::@1/(byte) out::c#2 )
  [21] (byte) idx#20 ← phi( outsw/(byte) idx#23 outw/(byte) idx#10 outw::@1/(byte) idx#10 )
  [22] (byte) idx#10 ← ++ (byte) idx#20
  [23] *((const nomodify byte*) SCREEN + (byte) idx#10) ← (byte) out::c#3
  to:out::@return
out::@return: scope:[out]  from out
  [24] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) idx
(byte) idx#10 14673.666666666668
(byte) idx#20 121004.0
(byte) idx#23 367.33333333333337
(void()) main()
(byte) main::c
(byte) main::c#1 151.5
(byte) main::c#2 101.0
(void()) out((byte) out::c)
(byte) out::c
(byte) out::c#1 20002.0
(byte) out::c#2 20002.0
(byte) out::c#3 60001.5
(void()) outsw((byte) outsw::c)
(byte) outsw::c
(byte) outsw::c#0 367.33333333333337
(void()) outw((byte) outw::c)
(byte) outw::c
(byte) outw::c#0 7001.0

Initial phi equivalence classes
[ main::c#2 main::c#1 ]
[ idx#20 idx#23 idx#10 ]
[ out::c#3 out::c#1 out::c#2 ]
Added variable outsw::c#0 to live range equivalence class [ outsw::c#0 ]
Added variable outw::c#0 to live range equivalence class [ outw::c#0 ]
Complete equivalence classes
[ main::c#2 main::c#1 ]
[ idx#20 idx#23 idx#10 ]
[ out::c#3 out::c#1 out::c#2 ]
[ outsw::c#0 ]
[ outw::c#0 ]
Allocated zp[1]:2 [ main::c#2 main::c#1 ]
Allocated zp[1]:3 [ idx#20 idx#23 idx#10 ]
Allocated zp[1]:4 [ out::c#3 out::c#1 out::c#2 ]
Allocated zp[1]:5 [ outsw::c#0 ]
Allocated zp[1]:6 [ outw::c#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test effective live range and register allocation
// Here main::c, outsw::c and outw::c can all have the same allocation
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label idx = 3
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label c = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) idx#23 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [5] phi (byte) main::c#2 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b1
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [5] phi (byte) idx#23 = (byte) idx#10 [phi:main::@2->main::@1#0] -- register_copy 
    // [5] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] (byte) outsw::c#0 ← (byte) main::c#2 -- vbuz1=vbuz2 
    lda.z c
    sta.z outsw.c
    // [7] call outsw 
    // [11] phi from main::@1 to outsw [phi:main::@1->outsw]
  outsw_from___b1:
    jsr outsw
    jmp __b2
    // main::@2
  __b2:
    // [8] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [9] if((byte) main::c#1!=(byte) $28) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z c
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // outsw
// outsw(byte zp(5) c)
outsw: {
    .label c = 5
    // [12] call out 
    // [21] phi from outsw to out [phi:outsw->out]
  out_from_outsw:
    // [21] phi (byte) out::c#3 = (byte) '-' [phi:outsw->out#0] -- vbuz1=vbuc1 
    lda #'-'
    sta.z out.c
    // [21] phi (byte) idx#20 = (byte) idx#23 [phi:outsw->out#1] -- register_copy 
    jsr out
    jmp __b1
    // outsw::@1
  __b1:
    // [13] (byte) outw::c#0 ← (byte) outsw::c#0 -- vbuz1=vbuz2 
    lda.z c
    sta.z outw.c
    // [14] call outw 
    jsr outw
    jmp __breturn
    // outsw::@return
  __breturn:
    // [15] return 
    rts
}
  // outw
// outw(byte zp(6) c)
outw: {
    .label c = 6
    // [16] (byte) out::c#1 ← (byte) outw::c#0 << (byte) 4 -- vbuz1=vbuz2_rol_4 
    lda.z c
    asl
    asl
    asl
    asl
    sta.z out.c
    // [17] call out 
    // [21] phi from outw to out [phi:outw->out]
  out_from_outw:
    // [21] phi (byte) out::c#3 = (byte) out::c#1 [phi:outw->out#0] -- register_copy 
    // [21] phi (byte) idx#20 = (byte) idx#10 [phi:outw->out#1] -- register_copy 
    jsr out
    jmp __b1
    // outw::@1
  __b1:
    // [18] (byte) out::c#2 ← (byte) outw::c#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z c
    sta.z out.c
    // [19] call out 
    // [21] phi from outw::@1 to out [phi:outw::@1->out]
  out_from___b1:
    // [21] phi (byte) out::c#3 = (byte) out::c#2 [phi:outw::@1->out#0] -- register_copy 
    // [21] phi (byte) idx#20 = (byte) idx#10 [phi:outw::@1->out#1] -- register_copy 
    jsr out
    jmp __breturn
    // outw::@return
  __breturn:
    // [20] return 
    rts
}
  // out
// out(byte zp(4) c)
out: {
    .label c = 4
    // [22] (byte) idx#10 ← ++ (byte) idx#20 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [23] *((const nomodify byte*) SCREEN + (byte) idx#10) ← (byte) out::c#3 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z c
    ldy.z idx
    sta SCREEN,y
    jmp __breturn
    // out::@return
  __breturn:
    // [24] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [16] (byte) out::c#1 ← (byte) outw::c#0 << (byte) 4 [ idx#10 outw::c#0 out::c#1 ] ( main:2::outsw:7::outw:14 [ main::c#2 idx#10 outw::c#0 out::c#1 ] { { outsw::c#0 = main::c#2 outw::c#0 } { idx#10 = idx#20 } { out::c#1 = out::c#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::c#2 main::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ idx#20 idx#23 idx#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:6 [ outw::c#0 ]
Statement [18] (byte) out::c#2 ← (byte) outw::c#0 & (byte) $f [ idx#10 out::c#2 ] ( main:2::outsw:7::outw:14 [ main::c#2 idx#10 out::c#2 ] { { outsw::c#0 = main::c#2 outw::c#0 } { idx#10 = idx#20 } { out::c#2 = out::c#3 } }  ) always clobbers reg byte a 
Statement [16] (byte) out::c#1 ← (byte) outw::c#0 << (byte) 4 [ idx#10 outw::c#0 out::c#1 ] ( main:2::outsw:7::outw:14 [ main::c#2 idx#10 outw::c#0 out::c#1 ] { { outsw::c#0 = main::c#2 outw::c#0 } { idx#10 = idx#20 } { out::c#1 = out::c#3 } }  ) always clobbers reg byte a 
Statement [18] (byte) out::c#2 ← (byte) outw::c#0 & (byte) $f [ idx#10 out::c#2 ] ( main:2::outsw:7::outw:14 [ main::c#2 idx#10 out::c#2 ] { { outsw::c#0 = main::c#2 outw::c#0 } { idx#10 = idx#20 } { out::c#2 = out::c#3 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::c#2 main::c#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ idx#20 idx#23 idx#10 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ out::c#3 out::c#1 out::c#2 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ outsw::c#0 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ outw::c#0 ] : zp[1]:6 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 136,045: zp[1]:3 [ idx#20 idx#23 idx#10 ] 
Uplift Scope [out] 100,005.5: zp[1]:4 [ out::c#3 out::c#1 out::c#2 ] 
Uplift Scope [outw] 7,001: zp[1]:6 [ outw::c#0 ] 
Uplift Scope [outsw] 367.33: zp[1]:5 [ outsw::c#0 ] 
Uplift Scope [main] 252.5: zp[1]:2 [ main::c#2 main::c#1 ] 

Uplifting [] best 472 combination reg byte x [ idx#20 idx#23 idx#10 ] 
Uplifting [out] best 460 combination reg byte a [ out::c#3 out::c#1 out::c#2 ] 
Uplifting [outw] best 455 combination reg byte y [ outw::c#0 ] 
Uplifting [outsw] best 422 combination reg byte y [ outsw::c#0 ] 
Uplifting [main] best 302 combination reg byte y [ main::c#2 main::c#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test effective live range and register allocation
// Here main::c, outsw::c and outw::c can all have the same allocation
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) idx#23 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (byte) main::c#2 = (byte) 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [5] phi (byte) idx#23 = (byte) idx#10 [phi:main::@2->main::@1#0] -- register_copy 
    // [5] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] (byte) outsw::c#0 ← (byte) main::c#2
    // [7] call outsw 
    // [11] phi from main::@1 to outsw [phi:main::@1->outsw]
  outsw_from___b1:
    jsr outsw
    jmp __b2
    // main::@2
  __b2:
    // [8] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [9] if((byte) main::c#1!=(byte) $28) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$28
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // outsw
// outsw(byte register(Y) c)
outsw: {
    // [12] call out 
    // [21] phi from outsw to out [phi:outsw->out]
  out_from_outsw:
    // [21] phi (byte) out::c#3 = (byte) '-' [phi:outsw->out#0] -- vbuaa=vbuc1 
    lda #'-'
    // [21] phi (byte) idx#20 = (byte) idx#23 [phi:outsw->out#1] -- register_copy 
    jsr out
    jmp __b1
    // outsw::@1
  __b1:
    // [13] (byte) outw::c#0 ← (byte) outsw::c#0
    // [14] call outw 
    jsr outw
    jmp __breturn
    // outsw::@return
  __breturn:
    // [15] return 
    rts
}
  // outw
// outw(byte register(Y) c)
outw: {
    // [16] (byte) out::c#1 ← (byte) outw::c#0 << (byte) 4 -- vbuaa=vbuyy_rol_4 
    tya
    asl
    asl
    asl
    asl
    // [17] call out 
    // [21] phi from outw to out [phi:outw->out]
  out_from_outw:
    // [21] phi (byte) out::c#3 = (byte) out::c#1 [phi:outw->out#0] -- register_copy 
    // [21] phi (byte) idx#20 = (byte) idx#10 [phi:outw->out#1] -- register_copy 
    jsr out
    jmp __b1
    // outw::@1
  __b1:
    // [18] (byte) out::c#2 ← (byte) outw::c#0 & (byte) $f -- vbuaa=vbuyy_band_vbuc1 
    tya
    and #$f
    // [19] call out 
    // [21] phi from outw::@1 to out [phi:outw::@1->out]
  out_from___b1:
    // [21] phi (byte) out::c#3 = (byte) out::c#2 [phi:outw::@1->out#0] -- register_copy 
    // [21] phi (byte) idx#20 = (byte) idx#10 [phi:outw::@1->out#1] -- register_copy 
    jsr out
    jmp __breturn
    // outw::@return
  __breturn:
    // [20] return 
    rts
}
  // out
// out(byte register(A) c)
out: {
    // [22] (byte) idx#10 ← ++ (byte) idx#20 -- vbuxx=_inc_vbuxx 
    inx
    // [23] *((const nomodify byte*) SCREEN + (byte) idx#10) ← (byte) out::c#3 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    jmp __breturn
    // out::@return
  __breturn:
    // [24] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b2:
Removing instruction outsw_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction out_from_outsw:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction out_from_outw:
Removing instruction __b1:
Removing instruction out_from___b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const nomodify byte*) SCREEN = (byte*) 1024
(byte) idx
(byte) idx#10 reg byte x 14673.666666666668
(byte) idx#20 reg byte x 121004.0
(byte) idx#23 reg byte x 367.33333333333337
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::c
(byte) main::c#1 reg byte y 151.5
(byte) main::c#2 reg byte y 101.0
(void()) out((byte) out::c)
(label) out::@return
(byte) out::c
(byte) out::c#1 reg byte a 20002.0
(byte) out::c#2 reg byte a 20002.0
(byte) out::c#3 reg byte a 60001.5
(void()) outsw((byte) outsw::c)
(label) outsw::@1
(label) outsw::@return
(byte) outsw::c
(byte) outsw::c#0 reg byte y 367.33333333333337
(void()) outw((byte) outw::c)
(label) outw::@1
(label) outw::@return
(byte) outw::c
(byte) outw::c#0 reg byte y 7001.0

reg byte y [ main::c#2 main::c#1 ]
reg byte x [ idx#20 idx#23 idx#10 ]
reg byte a [ out::c#3 out::c#1 out::c#2 ]
reg byte y [ outsw::c#0 ]
reg byte y [ outw::c#0 ]


FINAL ASSEMBLER
Score: 182

  // File Comments
// Test effective live range and register allocation
// Here main::c, outsw::c and outw::c can all have the same allocation
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) idx#23 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (byte) main::c#2 = (byte) 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #0
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [5] phi (byte) idx#23 = (byte) idx#10 [phi:main::@2->main::@1#0] -- register_copy 
    // [5] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@2->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // outsw(c)
    // [6] (byte) outsw::c#0 ← (byte) main::c#2
    // [7] call outsw 
    // [11] phi from main::@1 to outsw [phi:main::@1->outsw]
    jsr outsw
    // main::@2
    // for(char c: 0..39 )
    // [8] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [9] if((byte) main::c#1!=(byte) $28) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$28
    bne __b1
    // main::@return
    // }
    // [10] return 
    rts
}
  // outsw
// outsw(byte register(Y) c)
outsw: {
    // out('-')
    // [12] call out 
    // [21] phi from outsw to out [phi:outsw->out]
    // [21] phi (byte) out::c#3 = (byte) '-' [phi:outsw->out#0] -- vbuaa=vbuc1 
    lda #'-'
    // [21] phi (byte) idx#20 = (byte) idx#23 [phi:outsw->out#1] -- register_copy 
    jsr out
    // outsw::@1
    // outw(c)
    // [13] (byte) outw::c#0 ← (byte) outsw::c#0
    // [14] call outw 
    jsr outw
    // outsw::@return
    // }
    // [15] return 
    rts
}
  // outw
// outw(byte register(Y) c)
outw: {
    // out(c<<4)
    // [16] (byte) out::c#1 ← (byte) outw::c#0 << (byte) 4 -- vbuaa=vbuyy_rol_4 
    tya
    asl
    asl
    asl
    asl
    // [17] call out 
    // [21] phi from outw to out [phi:outw->out]
    // [21] phi (byte) out::c#3 = (byte) out::c#1 [phi:outw->out#0] -- register_copy 
    // [21] phi (byte) idx#20 = (byte) idx#10 [phi:outw->out#1] -- register_copy 
    jsr out
    // outw::@1
    // out(c&0x0f)
    // [18] (byte) out::c#2 ← (byte) outw::c#0 & (byte) $f -- vbuaa=vbuyy_band_vbuc1 
    tya
    and #$f
    // [19] call out 
    // [21] phi from outw::@1 to out [phi:outw::@1->out]
    // [21] phi (byte) out::c#3 = (byte) out::c#2 [phi:outw::@1->out#0] -- register_copy 
    // [21] phi (byte) idx#20 = (byte) idx#10 [phi:outw::@1->out#1] -- register_copy 
    jsr out
    // outw::@return
    // }
    // [20] return 
    rts
}
  // out
// out(byte register(A) c)
out: {
    // idx++;
    // [22] (byte) idx#10 ← ++ (byte) idx#20 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[idx] = c
    // [23] *((const nomodify byte*) SCREEN + (byte) idx#10) ← (byte) out::c#3 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // out::@return
    // }
    // [24] return 
    rts
}
  // File Data

