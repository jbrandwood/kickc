
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  [5] call conio_c64_init 
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [6] phi()
  [7] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [8] return 
  to:@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  [9] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  [10] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2
  to:conio_c64_init::@1
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  [11] phi()
  to:conio_c64_init::@1
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  [12] conio_c64_init::line#2 = phi( conio_c64_init::@2/conio_c64_init::line#0, conio_c64_init/$19-1 )
  [13] gotoxy::y#2 = conio_c64_init::line#2
  [14] call gotoxy 
  to:conio_c64_init::@return
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@1
  [15] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [16] phi()
  [17] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  [18] phi()
  [19] call cputc 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [20] phi()
  [21] call cputs 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [22] phi()
  [23] call cputc 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [24] phi()
  [25] call cputs 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [26] phi()
  [27] call printf_sint 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [28] phi()
  [29] call cputs 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [30] phi()
  [31] call printf_sint 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [32] phi()
  [33] call cputs 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [34] phi()
  [35] call cputc 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [36] phi()
  [37] call cputs 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [38] phi()
  [39] call cputc 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [40] phi()
  [41] call cputs 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [42] phi()
  [43] call printf_sint 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [44] phi()
  [45] call cputs 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [46] phi()
  [47] call printf_sint 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [48] phi()
  [49] call cputs 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [50] phi()
  [51] call cputc 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [52] phi()
  [53] call cputs 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [54] phi()
  [55] call cputc 
  to:main::@20
main::@20: scope:[main]  from main::@19
  [56] phi()
  [57] call cputs 
  to:main::@21
main::@21: scope:[main]  from main::@20
  [58] phi()
  [59] call printf_sint 
  to:main::@22
main::@22: scope:[main]  from main::@21
  [60] phi()
  [61] call cputs 
  to:main::@23
main::@23: scope:[main]  from main::@22
  [62] phi()
  [63] call printf_sint 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [64] phi()
  [65] call cputs 
  to:main::@25
main::@25: scope:[main]  from main::@24
  [66] phi()
  [67] call cputc 
  to:main::@26
main::@26: scope:[main]  from main::@25
  [68] phi()
  [69] call cputs 
  to:main::@27
main::@27: scope:[main]  from main::@26
  [70] phi()
  [71] call cputc 
  to:main::@28
main::@28: scope:[main]  from main::@27
  [72] phi()
  [73] call cputs 
  to:main::@29
main::@29: scope:[main]  from main::@28
  [74] phi()
  [75] call printf_sint 
  to:main::@30
main::@30: scope:[main]  from main::@29
  [76] phi()
  [77] call cputs 
  to:main::@31
main::@31: scope:[main]  from main::@30
  [78] phi()
  [79] call printf_sint 
  to:main::@32
main::@32: scope:[main]  from main::@31
  [80] phi()
  [81] call cputs 
  to:main::@33
main::@33: scope:[main]  from main::@32
  [82] phi()
  [83] call cputc 
  to:main::@34
main::@34: scope:[main]  from main::@33
  [84] phi()
  [85] call cputs 
  to:main::@35
main::@35: scope:[main]  from main::@34
  [86] phi()
  [87] call cputc 
  to:main::@36
main::@36: scope:[main]  from main::@35
  [88] phi()
  [89] call cputs 
  to:main::@37
main::@37: scope:[main]  from main::@36
  [90] phi()
  [91] call printf_sint 
  to:main::@38
main::@38: scope:[main]  from main::@37
  [92] phi()
  [93] call cputs 
  to:main::@39
main::@39: scope:[main]  from main::@38
  [94] phi()
  [95] call printf_sint 
  to:main::@40
main::@40: scope:[main]  from main::@39
  [96] phi()
  [97] call cputs 
  to:main::@return
main::@return: scope:[main]  from main::@40
  [98] return 
  to:@return

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1
  [99] if(gotoxy::y#2<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [100] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [101] gotoxy::y#4 = phi( gotoxy::@3/gotoxy::y#2, gotoxy/0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [102] conio_cursor_x = gotoxy::x#2
  [103] conio_cursor_y = gotoxy::y#4
  [104] gotoxy::$7 = (word)gotoxy::y#4
  [105] gotoxy::$8 = gotoxy::$7 << 2
  [106] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [107] gotoxy::line_offset#0 = gotoxy::$9 << 3
  [108] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [109] conio_line_text = gotoxy::$5
  [110] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [111] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [112] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [113] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [114] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@5/clrscr::line_cols#1 )
  [114] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@5/clrscr::line_text#1 )
  [114] clrscr::l#2 = phi( clrscr/0, clrscr::@5/clrscr::l#1 )
  [115] if(clrscr::l#2<$19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [116] conio_cursor_x = 0
  [117] conio_cursor_y = 0
  [118] conio_line_text = DEFAULT_SCREEN
  [119] conio_line_color = COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [120] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [121] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@4/clrscr::c#1 )
  [122] if(clrscr::c#2<$28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [123] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [124] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [125] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [126] clrscr::line_text#5[clrscr::c#2] = ' '
  [127] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE
  [128] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@3

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 main::@1 main::@11 main::@17 main::@19 main::@25 main::@27 main::@3 main::@33 main::@35 main::@9 printf_number_buffer::@3
  [129] cputc::c#13 = phi( cputs::@2/cputc::c#0, main::@1/'%', main::@11/'%', main::@17/'%', main::@19/'%', main::@25/'%', main::@27/'%', main::@3/'%', main::@33/'%', main::@35/'%', main::@9/'%', printf_number_buffer::@3/cputc::c#2 )
  [130] if(cputc::c#13=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [131] conio_line_text[conio_cursor_x] = cputc::c#13
  [132] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [133] conio_cursor_x = ++ conio_cursor_x
  [134] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [135] phi()
  [136] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [137] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [138] phi()
  [139] call cputln 
  to:cputc::@return

void cputs(const byte* cputs::s)
cputs: scope:[cputs]  from main::@10 main::@12 main::@14 main::@16 main::@18 main::@2 main::@20 main::@22 main::@24 main::@26 main::@28 main::@30 main::@32 main::@34 main::@36 main::@38 main::@4 main::@40 main::@6 main::@8 printf_number_buffer::@2
  [140] cputs::s#23 = phi( main::@10/main::s4, main::@12/main::s5, main::@14/main::s2, main::@16/main::s3, main::@18/main::s4, main::@2/main::s, main::@20/main::s9, main::@22/main::s2, main::@24/main::s3, main::@26/main::s12, main::@28/main::s5, main::@30/main::s2, main::@32/main::s3, main::@34/main::s12, main::@36/main::s9, main::@38/main::s2, main::@4/main::s1, main::@40/main::s3, main::@6/main::s2, main::@8/main::s3, printf_number_buffer::@2/printf_number_buffer::buffer_digits#0 )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [141] cputs::s#22 = phi( cputs/cputs::s#23, cputs::@2/cputs::s#0 )
  [142] cputs::c#1 = *cputs::s#22
  [143] cputs::s#0 = ++ cputs::s#22
  [144] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [145] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [146] cputc::c#0 = cputs::c#1
  [147] call cputc 
  to:cputs::@1

void printf_sint(signed word printf_sint::value , byte printf_sint::format_min_length , byte printf_sint::format_justify_left , byte printf_sint::format_sign_always , byte printf_sint::format_zero_padding , byte printf_sint::format_upper_case , byte printf_sint::format_radix)
printf_sint: scope:[printf_sint]  from main::@13 main::@15 main::@21 main::@23 main::@29 main::@31 main::@37 main::@39 main::@5 main::@7
  [148] printf_sint::value#11 = phi( main::@13/1, main::@15/2, main::@21/1, main::@23/1, main::@29/2, main::@31/2, main::@37/2, main::@39/1, main::@5/1, main::@7/2 )
  [149] *((byte*)&printf_buffer) = 0
  [150] if(printf_sint::value#11<0) goto printf_sint::@1
  to:printf_sint::@2
printf_sint::@1: scope:[printf_sint]  from printf_sint
  [151] printf_sint::value#0 = - printf_sint::value#11
  [152] *((byte*)&printf_buffer) = '-'
  to:printf_sint::@2
printf_sint::@2: scope:[printf_sint]  from printf_sint printf_sint::@1
  [153] printf_sint::value#13 = phi( printf_sint::@1/printf_sint::value#0, printf_sint/printf_sint::value#11 )
  [154] utoa::value#1 = (word)printf_sint::value#13
  [155] call utoa 
  to:printf_sint::@3
printf_sint::@3: scope:[printf_sint]  from printf_sint::@2
  [156] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer)
  [157] call printf_number_buffer 
  to:printf_sint::@return
printf_sint::@return: scope:[printf_sint]  from printf_sint::@3
  [158] return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [159] conio_line_text = conio_line_text + $28
  [160] conio_line_color = conio_line_color + $28
  [161] conio_cursor_x = 0
  [162] conio_cursor_y = ++ conio_cursor_y
  [163] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [164] return 
  to:@return

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from printf_sint::@2
  [165] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [166] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [166] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [166] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/utoa::value#1 )
  [166] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [167] if(utoa::digit#2<5-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [168] utoa::$11 = (byte)utoa::value#2
  [169] *utoa::buffer#11 = DIGITS[utoa::$11]
  [170] utoa::buffer#3 = ++ utoa::buffer#11
  [171] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [172] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [173] utoa::$10 = utoa::digit#2 << 1
  [174] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [175] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [176] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [177] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [177] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [177] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [178] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [179] utoa_append::buffer#0 = utoa::buffer#11
  [180] utoa_append::value#0 = utoa::value#2
  [181] utoa_append::sub#0 = utoa::digit_value#0
  [182] call utoa_append 
  [183] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [184] utoa::value#0 = utoa_append::return#0
  [185] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_sint::@3
  [186] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [187] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [188] cputc::c#2 = printf_number_buffer::buffer_sign#0
  [189] call cputc 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [190] phi()
  [191] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [192] return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [193] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [194] phi()
  [195] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [196] phi()
  [197] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [198] phi()
  [199] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [200] phi()
  [201] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [202] conio_line_text = conio_line_text - $28
  [203] conio_line_color = conio_line_color - $28
  [204] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [205] return 
  to:@return

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [206] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [207] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [207] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [208] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [209] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [210] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [211] utoa_append::digit#1 = ++ utoa_append::digit#2
  [212] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [213] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [213] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$28, cscroll::@2/(void*)COLORRAM+$28 )
  [214] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28
  [215] memcpy::src#4 = (byte*)memcpy::source#2
  [216] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [217] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [217] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [218] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [219] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [220] *memcpy::dst#2 = *memcpy::src#2
  [221] memcpy::dst#1 = ++ memcpy::dst#2
  [222] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [223] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [223] memset::str#3 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$28-$28, cscroll::@4/(void*)COLORRAM+(word)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [224] memset::end#0 = (byte*)memset::str#3 + $28
  [225] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [226] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [227] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [228] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [229] *memset::dst#2 = memset::c#4
  [230] memset::dst#1 = ++ memset::dst#2
  to:memset::@2
