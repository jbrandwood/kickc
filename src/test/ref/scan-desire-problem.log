Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call (byte~) init::$3 ← call toD018 (const nomodify byte*) screen (const nomodify byte*) charset 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from init::@2 init::@3
  (byte) memset::c#5 ← phi( init::@2/(byte) memset::c#0 init::@3/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( init::@2/(void*) memset::str#0 init::@3/(void*) memset::str#1 )
  (word) memset::num#2 ← phi( init::@2/(word) memset::num#0 init::@3/(word) memset::num#1 )
  (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#4 memset::@3/(void*) memset::str#5 )
  (void*) memset::return#0 ← (void*) memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#4 ← phi( memset/(byte) memset::c#5 )
  (word) memset::num#3 ← phi( memset/(word) memset::num#2 )
  (void*) memset::str#3 ← phi( memset/(void*) memset::str#4 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#3
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#3
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#3 ← phi( memset::@2/(byte) memset::c#4 memset::@4/(byte) memset::c#2 )
  (void*) memset::str#5 ← phi( memset::@2/(void*) memset::str#3 memset::@4/(void*) memset::str#6 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#6 ← phi( memset::@3/(void*) memset::str#5 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#2 ← phi( memset::@3/(byte) memset::c#3 )
  *((byte*) memset::dst#3) ← (byte) memset::c#2
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#4 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#4
  return 
  to:@return

(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
mul8u: scope:[mul8u]  from draw_block
  (byte) mul8u::a#5 ← phi( draw_block/(byte) mul8u::a#1 )
  (byte) mul8u::b#1 ← phi( draw_block/(byte) mul8u::b#0 )
  (word) mul8u::res#0 ← (word) 0
  (word) mul8u::mb#0 ← (word)(byte) mul8u::b#1
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@4
  (word) mul8u::mb#5 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@4/(word) mul8u::mb#1 )
  (word) mul8u::res#4 ← phi( mul8u/(word) mul8u::res#0 mul8u::@4/(word) mul8u::res#6 )
  (byte) mul8u::a#2 ← phi( mul8u/(byte) mul8u::a#5 mul8u::@4/(byte) mul8u::a#0 )
  (bool~) mul8u::$0 ← (byte) mul8u::a#2 != (number) 0
  if((bool~) mul8u::$0) goto mul8u::@2
  to:mul8u::@3
mul8u::@2: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#5 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::mb#4 ← phi( mul8u::@1/(word) mul8u::mb#5 )
  (byte) mul8u::a#3 ← phi( mul8u::@1/(byte) mul8u::a#2 )
  (number~) mul8u::$1 ← (byte) mul8u::a#3 & (number) 1
  (bool~) mul8u::$2 ← (number~) mul8u::$1 != (number) 0
  (bool~) mul8u::$3 ← ! (bool~) mul8u::$2
  if((bool~) mul8u::$3) goto mul8u::@4
  to:mul8u::@5
mul8u::@3: scope:[mul8u]  from mul8u::@1
  (word) mul8u::res#2 ← phi( mul8u::@1/(word) mul8u::res#4 )
  (word) mul8u::return#0 ← (word) mul8u::res#2
  to:mul8u::@return
mul8u::@4: scope:[mul8u]  from mul8u::@2 mul8u::@5
  (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#5 mul8u::@5/(word) mul8u::res#1 )
  (word) mul8u::mb#2 ← phi( mul8u::@2/(word) mul8u::mb#4 mul8u::@5/(word) mul8u::mb#3 )
  (byte) mul8u::a#4 ← phi( mul8u::@2/(byte) mul8u::a#3 mul8u::@5/(byte) mul8u::a#6 )
  (byte~) mul8u::$5 ← (byte) mul8u::a#4 >> (number) 1
  (byte) mul8u::a#0 ← (byte~) mul8u::$5
  (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
  (word) mul8u::mb#1 ← (word~) mul8u::$6
  to:mul8u::@1
mul8u::@5: scope:[mul8u]  from mul8u::@2
  (byte) mul8u::a#6 ← phi( mul8u::@2/(byte) mul8u::a#3 )
  (word) mul8u::mb#3 ← phi( mul8u::@2/(word) mul8u::mb#4 )
  (word) mul8u::res#3 ← phi( mul8u::@2/(word) mul8u::res#5 )
  (word~) mul8u::$4 ← (word) mul8u::res#3 + (word) mul8u::mb#3
  (word) mul8u::res#1 ← (word~) mul8u::$4
  to:mul8u::@4
mul8u::@return: scope:[mul8u]  from mul8u::@3
  (word) mul8u::return#3 ← phi( mul8u::@3/(word) mul8u::return#0 )
  (word) mul8u::return#1 ← (word) mul8u::return#3
  return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  call init 
  to:main::@7
main::@7: scope:[main]  from main
  (byte) main::x#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@5 main::@7
  (byte) main::x#2 ← phi( main::@5/(byte) main::x#1 main::@7/(byte) main::x#0 )
  (bool~) main::$1 ← (byte) main::x#2 < (number) $10
  if((bool~) main::$1) goto main::@2
  to:main::@6
main::@2: scope:[main]  from main::@1
  (byte) main::x#6 ← phi( main::@1/(byte) main::x#2 )
  (byte) main::y#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@8
  (byte) main::x#5 ← phi( main::@2/(byte) main::x#6 main::@8/(byte) main::x#7 )
  (byte) main::y#2 ← phi( main::@2/(byte) main::y#0 main::@8/(byte) main::y#1 )
  (bool~) main::$2 ← (byte) main::y#2 < (number) 9
  if((bool~) main::$2) goto main::@4
  to:main::@5
main::@4: scope:[main]  from main::@3
  (byte) main::y#3 ← phi( main::@3/(byte) main::y#2 )
  (byte) main::x#3 ← phi( main::@3/(byte) main::x#5 )
  (byte~) main::$3 ← (byte) main::x#3 + (byte) main::y#3
  (byte) main::z#0 ← (byte~) main::$3
  (byte) main::tile#0 ← *((const nomodify byte*) level_address + (byte) main::z#0)
  (byte) draw_block::tileno#0 ← (byte) main::tile#0
  (byte) draw_block::x#0 ← (byte) main::x#3
  (byte) draw_block::y#0 ← (byte) main::y#3
  (byte) draw_block::color#0 ← (const nomodify byte) YELLOW
  call draw_block 
  to:main::@8
main::@8: scope:[main]  from main::@4
  (byte) main::x#7 ← phi( main::@4/(byte) main::x#3 )
  (byte) main::y#4 ← phi( main::@4/(byte) main::y#3 )
  (byte) main::y#1 ← ++ (byte) main::y#4
  to:main::@3
main::@5: scope:[main]  from main::@3
  (byte) main::x#4 ← phi( main::@3/(byte) main::x#5 )
  (byte) main::x#1 ← ++ (byte) main::x#4
  to:main::@1
main::@6: scope:[main]  from main::@1 main::@6
  if(true) goto main::@6
  to:main::@return
main::@return: scope:[main]  from main::@6
  return 
  to:@return

(void()) init()
init: scope:[init]  from main
  call init_sprites 
  to:init::@2
init::@2: scope:[init]  from init
  (void*) memset::str#0 ← (void*)(const nomodify byte*) screen
  (byte) memset::c#0 ← (number) 0
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:init::@3
init::@3: scope:[init]  from init::@2
  (void*) memset::str#1 ← (void*)(const nomodify byte*) colors
  (byte) memset::c#1 ← (const nomodify byte) BLACK
  (word) memset::num#1 ← (number) $3e8
  call memset 
  (void*) memset::return#3 ← (void*) memset::return#1
  to:init::@4
init::@4: scope:[init]  from init::@3
  (byte*) init::toD0181_screen#0 ← (const nomodify byte*) screen
  (byte*) init::toD0181_gfx#0 ← (const nomodify byte*) charset
  to:init::toD0181
init::toD0181: scope:[init]  from init::@4
  (byte*) init::toD0181_gfx#1 ← phi( init::@4/(byte*) init::toD0181_gfx#0 )
  (byte*) init::toD0181_screen#1 ← phi( init::@4/(byte*) init::toD0181_screen#0 )
  (word~) init::toD0181_$7 ← (word)(byte*) init::toD0181_screen#1
  (number~) init::toD0181_$0 ← (word~) init::toD0181_$7 & (number) $3fff
  (number~) init::toD0181_$1 ← (number~) init::toD0181_$0 * (number) 4
  (number~) init::toD0181_$2 ← > (number~) init::toD0181_$1
  (byte~) init::toD0181_$3 ← > (word)(byte*) init::toD0181_gfx#1
  (number~) init::toD0181_$4 ← (byte~) init::toD0181_$3 / (number) 4
  (number~) init::toD0181_$5 ← (number~) init::toD0181_$4 & (number) $f
  (number~) init::toD0181_$6 ← (number~) init::toD0181_$2 | (number~) init::toD0181_$5
  (byte) init::toD0181_return#0 ← (number~) init::toD0181_$6
  to:init::toD0181_@return
init::toD0181_@return: scope:[init]  from init::toD0181
  (byte) init::toD0181_return#2 ← phi( init::toD0181/(byte) init::toD0181_return#0 )
  (byte) init::toD0181_return#1 ← (byte) init::toD0181_return#2
  to:init::@1
init::@1: scope:[init]  from init::toD0181_@return
  (byte) init::toD0181_return#3 ← phi( init::toD0181_@return/(byte) init::toD0181_return#1 )
  (byte~) init::$3 ← (byte) init::toD0181_return#3
  *((const nomodify byte*) D018) ← (byte~) init::$3
  asm { lda#$5b sta$d011  }
  *((const nomodify byte*) BORDER_COLOR) ← (const nomodify byte) BLACK
  *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) BLACK
  *((const nomodify byte*) BG_COLOR1) ← (const nomodify byte) RED
  *((const nomodify byte*) BG_COLOR2) ← (const nomodify byte) BLUE
  *((const nomodify byte*) BG_COLOR3) ← (const nomodify byte) GREEN
  to:init::@return
init::@return: scope:[init]  from init::@1
  return 
  to:@return

(void()) init_sprites()
init_sprites: scope:[init_sprites]  from init
  *((const nomodify byte*) SPRITES_ENABLE) ← (number) 1
  *((const nomodify byte*) SPRITES_EXPAND_X) ← (number) 0
  *((const nomodify byte*) SPRITES_EXPAND_Y) ← (number) 0
  *((const nomodify byte*) SPRITES_XMSB) ← (number) 0
  *((const nomodify byte*) SPRITES_COLOR) ← (const nomodify byte) WHITE
  *((const nomodify byte*) SPRITES_MC) ← (number) 0
  to:init_sprites::@return
init_sprites::@return: scope:[init_sprites]  from init_sprites
  return 
  to:@return

(void()) draw_block((byte) draw_block::tileno , (byte) draw_block::x , (byte) draw_block::y , (byte) draw_block::color)
draw_block: scope:[draw_block]  from main::@4
  (byte) draw_block::y#2 ← phi( main::@4/(byte) draw_block::y#0 )
  (byte) draw_block::x#1 ← phi( main::@4/(byte) draw_block::x#0 )
  (byte) draw_block::tileno#2 ← phi( main::@4/(byte) draw_block::tileno#0 )
  (byte~) draw_block::$0 ← (byte) draw_block::tileno#2 << (number) 2
  (byte) draw_block::tileno#1 ← (byte~) draw_block::$0
  (byte~) draw_block::$1 ← (byte) draw_block::x#1 << (number) 1
  (word) draw_block::x1#0 ← (byte~) draw_block::$1
  (byte~) draw_block::$2 ← (byte) draw_block::y#2 << (number) 1
  (byte) draw_block::y#1 ← (byte~) draw_block::$2
  (byte) mul8u::a#1 ← (byte) draw_block::y#1
  (byte) mul8u::b#0 ← (number) $28
  call mul8u 
  (word) mul8u::return#2 ← (word) mul8u::return#1
  to:draw_block::@1
draw_block::@1: scope:[draw_block]  from draw_block
  (byte) draw_block::tileno#3 ← phi( draw_block/(byte) draw_block::tileno#1 )
  (word) draw_block::x1#1 ← phi( draw_block/(word) draw_block::x1#0 )
  (word) mul8u::return#4 ← phi( draw_block/(word) mul8u::return#2 )
  (word~) draw_block::$3 ← (word) mul8u::return#4
  (word) draw_block::z#0 ← (word~) draw_block::$3
  (word~) draw_block::$4 ← (word) draw_block::z#0 + (word) draw_block::x1#1
  (word) draw_block::z#1 ← (word~) draw_block::$4
  (byte) draw_block::drawtile#0 ← *((const nomodify byte*) tileset + (byte) draw_block::tileno#3)
  *((const nomodify byte*) screen + (word) draw_block::z#1) ← (byte) draw_block::drawtile#0
  *((const nomodify byte*) colors + (word) draw_block::z#1) ← (const nomodify byte) YELLOW
  (number~) draw_block::$5 ← (word) draw_block::z#1 + (number) 1
  *((const nomodify byte*) screen + (number~) draw_block::$5) ← (number) 1
  (number~) draw_block::$6 ← (word) draw_block::z#1 + (number) 1
  *((const nomodify byte*) colors + (number~) draw_block::$6) ← (const nomodify byte) YELLOW
  (number~) draw_block::$7 ← (word) draw_block::z#1 + (number) $28
  *((const nomodify byte*) screen + (number~) draw_block::$7) ← (number) 2
  (number~) draw_block::$8 ← (word) draw_block::z#1 + (number) $28
  *((const nomodify byte*) colors + (number~) draw_block::$8) ← (const nomodify byte) YELLOW
  (number~) draw_block::$9 ← (word) draw_block::z#1 + (number) $29
  *((const nomodify byte*) screen + (number~) draw_block::$9) ← (number) 3
  (number~) draw_block::$10 ← (word) draw_block::z#1 + (number) $29
  *((const nomodify byte*) colors + (number~) draw_block::$10) ← (const nomodify byte) YELLOW
  to:draw_block::@return
draw_block::@return: scope:[draw_block]  from draw_block::@1
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) BG_COLOR = (byte*)(number) $d021
(const nomodify byte*) BG_COLOR1 = (byte*)(number) $d022
(const nomodify byte*) BG_COLOR2 = (byte*)(number) $d023
(const nomodify byte*) BG_COLOR3 = (byte*)(number) $d024
(const nomodify byte) BLACK = (byte) 0
(const nomodify byte) BLUE = (byte) 6
(const nomodify byte*) BORDER_COLOR = (byte*)(number) $d020
(const nomodify byte*) D018 = (byte*)(number) $d018
(const nomodify byte) GREEN = (byte) 5
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const nomodify byte) RED = (byte) 2
(const nomodify byte*) SPRITES_COLOR = (byte*)(number) $d027
(const nomodify byte*) SPRITES_ENABLE = (byte*)(number) $d015
(const nomodify byte*) SPRITES_EXPAND_X = (byte*)(number) $d01d
(const nomodify byte*) SPRITES_EXPAND_Y = (byte*)(number) $d017
(const nomodify byte*) SPRITES_MC = (byte*)(number) $d01c
(const nomodify byte*) SPRITES_XMSB = (byte*)(number) $d010
(const nomodify byte) WHITE = (byte) 1
(const nomodify byte) YELLOW = (byte) 7
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(const nomodify byte*) charset = (byte*)(number) $2000
(const nomodify byte*) colors = (byte*)(number) $d800
(void()) draw_block((byte) draw_block::tileno , (byte) draw_block::x , (byte) draw_block::y , (byte) draw_block::color)
(byte~) draw_block::$0
(byte~) draw_block::$1
(number~) draw_block::$10
(byte~) draw_block::$2
(word~) draw_block::$3
(word~) draw_block::$4
(number~) draw_block::$5
(number~) draw_block::$6
(number~) draw_block::$7
(number~) draw_block::$8
(number~) draw_block::$9
(label) draw_block::@1
(label) draw_block::@return
(byte) draw_block::color
(byte) draw_block::color#0
(byte) draw_block::drawtile
(byte) draw_block::drawtile#0
(byte) draw_block::tileno
(byte) draw_block::tileno#0
(byte) draw_block::tileno#1
(byte) draw_block::tileno#2
(byte) draw_block::tileno#3
(byte) draw_block::x
(byte) draw_block::x#0
(byte) draw_block::x#1
(word) draw_block::x1
(word) draw_block::x1#0
(word) draw_block::x1#1
(byte) draw_block::y
(byte) draw_block::y#0
(byte) draw_block::y#1
(byte) draw_block::y#2
(word) draw_block::z
(word) draw_block::z#0
(word) draw_block::z#1
(void()) init()
(byte~) init::$3
(label) init::@1
(label) init::@2
(label) init::@3
(label) init::@4
(label) init::@return
(label) init::toD0181
(number~) init::toD0181_$0
(number~) init::toD0181_$1
(number~) init::toD0181_$2
(byte~) init::toD0181_$3
(number~) init::toD0181_$4
(number~) init::toD0181_$5
(number~) init::toD0181_$6
(word~) init::toD0181_$7
(label) init::toD0181_@return
(byte*) init::toD0181_gfx
(byte*) init::toD0181_gfx#0
(byte*) init::toD0181_gfx#1
(byte) init::toD0181_return
(byte) init::toD0181_return#0
(byte) init::toD0181_return#1
(byte) init::toD0181_return#2
(byte) init::toD0181_return#3
(byte*) init::toD0181_screen
(byte*) init::toD0181_screen#0
(byte*) init::toD0181_screen#1
(void()) init_sprites()
(label) init_sprites::@return
(const nomodify byte*) level_address = (byte*)(number) $3000
(void()) main()
(bool~) main::$1
(bool~) main::$2
(byte~) main::$3
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@return
(byte) main::tile
(byte) main::tile#0
(byte) main::x
(byte) main::x#0
(byte) main::x#1
(byte) main::x#2
(byte) main::x#3
(byte) main::x#4
(byte) main::x#5
(byte) main::x#6
(byte) main::x#7
(byte) main::y
(byte) main::y#0
(byte) main::y#1
(byte) main::y#2
(byte) main::y#3
(byte) main::y#4
(byte) main::z
(byte) main::z#0
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte) memset::c#5
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(word) memset::num#3
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::return#4
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void*) memset::str#6
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(bool~) mul8u::$0
(number~) mul8u::$1
(bool~) mul8u::$2
(bool~) mul8u::$3
(word~) mul8u::$4
(byte~) mul8u::$5
(word~) mul8u::$6
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@5
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0
(byte) mul8u::a#1
(byte) mul8u::a#2
(byte) mul8u::a#3
(byte) mul8u::a#4
(byte) mul8u::a#5
(byte) mul8u::a#6
(byte) mul8u::b
(byte) mul8u::b#0
(byte) mul8u::b#1
(word) mul8u::mb
(word) mul8u::mb#0
(word) mul8u::mb#1
(word) mul8u::mb#2
(word) mul8u::mb#3
(word) mul8u::mb#4
(word) mul8u::mb#5
(word) mul8u::res
(word) mul8u::res#0
(word) mul8u::res#1
(word) mul8u::res#2
(word) mul8u::res#3
(word) mul8u::res#4
(word) mul8u::res#5
(word) mul8u::res#6
(word) mul8u::return
(word) mul8u::return#0
(word) mul8u::return#1
(word) mul8u::return#2
(word) mul8u::return#3
(word) mul8u::return#4
(const nomodify byte*) screen = (byte*)(number) $400
(const nomodify byte*) tileset = (byte*)(number) $2800

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$0 ← (byte) mul8u::a#2 != (number) 0
Adding number conversion cast (unumber) 1 in (number~) mul8u::$1 ← (byte) mul8u::a#3 & (number) 1
Adding number conversion cast (unumber) mul8u::$1 in (number~) mul8u::$1 ← (byte) mul8u::a#3 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) mul8u::$2 ← (unumber~) mul8u::$1 != (number) 0
Adding number conversion cast (unumber) 1 in (byte~) mul8u::$5 ← (byte) mul8u::a#4 >> (number) 1
Adding number conversion cast (unumber) 1 in (word~) mul8u::$6 ← (word) mul8u::mb#2 << (number) 1
Adding number conversion cast (unumber) $10 in (bool~) main::$1 ← (byte) main::x#2 < (number) $10
Adding number conversion cast (unumber) 9 in (bool~) main::$2 ← (byte) main::y#2 < (number) 9
Adding number conversion cast (unumber) 0 in (byte) memset::c#0 ← (number) 0
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (unumber) $3e8 in (word) memset::num#1 ← (number) $3e8
Adding number conversion cast (unumber) $3fff in (number~) init::toD0181_$0 ← (word~) init::toD0181_$7 & (number) $3fff
Adding number conversion cast (unumber) init::toD0181_$0 in (number~) init::toD0181_$0 ← (word~) init::toD0181_$7 & (unumber)(number) $3fff
Adding number conversion cast (unumber) 4 in (number~) init::toD0181_$1 ← (unumber~) init::toD0181_$0 * (number) 4
Adding number conversion cast (unumber) init::toD0181_$1 in (number~) init::toD0181_$1 ← (unumber~) init::toD0181_$0 * (unumber)(number) 4
Adding number conversion cast (unumber) init::toD0181_$2 in (number~) init::toD0181_$2 ← > (unumber~) init::toD0181_$1
Adding number conversion cast (unumber) 4 in (number~) init::toD0181_$4 ← (byte~) init::toD0181_$3 / (number) 4
Adding number conversion cast (unumber) init::toD0181_$4 in (number~) init::toD0181_$4 ← (byte~) init::toD0181_$3 / (unumber)(number) 4
Adding number conversion cast (unumber) $f in (number~) init::toD0181_$5 ← (unumber~) init::toD0181_$4 & (number) $f
Adding number conversion cast (unumber) init::toD0181_$5 in (number~) init::toD0181_$5 ← (unumber~) init::toD0181_$4 & (unumber)(number) $f
Adding number conversion cast (unumber) init::toD0181_$6 in (number~) init::toD0181_$6 ← (unumber~) init::toD0181_$2 | (unumber~) init::toD0181_$5
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) SPRITES_ENABLE) ← (number) 1
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) SPRITES_EXPAND_X) ← (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) SPRITES_EXPAND_Y) ← (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) SPRITES_XMSB) ← (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) SPRITES_MC) ← (number) 0
Adding number conversion cast (unumber) 2 in (byte~) draw_block::$0 ← (byte) draw_block::tileno#2 << (number) 2
Adding number conversion cast (unumber) 1 in (byte~) draw_block::$1 ← (byte) draw_block::x#1 << (number) 1
Adding number conversion cast (unumber) 1 in (byte~) draw_block::$2 ← (byte) draw_block::y#2 << (number) 1
Adding number conversion cast (unumber) $28 in (byte) mul8u::b#0 ← (number) $28
Adding number conversion cast (unumber) 1 in (number~) draw_block::$5 ← (word) draw_block::z#1 + (number) 1
Adding number conversion cast (unumber) draw_block::$5 in (number~) draw_block::$5 ← (word) draw_block::z#1 + (unumber)(number) 1
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) screen + (unumber~) draw_block::$5) ← (number) 1
Adding number conversion cast (unumber) 1 in (number~) draw_block::$6 ← (word) draw_block::z#1 + (number) 1
Adding number conversion cast (unumber) draw_block::$6 in (number~) draw_block::$6 ← (word) draw_block::z#1 + (unumber)(number) 1
Adding number conversion cast (unumber) $28 in (number~) draw_block::$7 ← (word) draw_block::z#1 + (number) $28
Adding number conversion cast (unumber) draw_block::$7 in (number~) draw_block::$7 ← (word) draw_block::z#1 + (unumber)(number) $28
Adding number conversion cast (unumber) 2 in *((const nomodify byte*) screen + (unumber~) draw_block::$7) ← (number) 2
Adding number conversion cast (unumber) $28 in (number~) draw_block::$8 ← (word) draw_block::z#1 + (number) $28
Adding number conversion cast (unumber) draw_block::$8 in (number~) draw_block::$8 ← (word) draw_block::z#1 + (unumber)(number) $28
Adding number conversion cast (unumber) $29 in (number~) draw_block::$9 ← (word) draw_block::z#1 + (number) $29
Adding number conversion cast (unumber) draw_block::$9 in (number~) draw_block::$9 ← (word) draw_block::z#1 + (unumber)(number) $29
Adding number conversion cast (unumber) 3 in *((const nomodify byte*) screen + (unumber~) draw_block::$9) ← (number) 3
Adding number conversion cast (unumber) $29 in (number~) draw_block::$10 ← (word) draw_block::z#1 + (number) $29
Adding number conversion cast (unumber) draw_block::$10 in (number~) draw_block::$10 ← (word) draw_block::z#1 + (unumber)(number) $29
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3
Inlining cast (byte) memset::c#0 ← (unumber)(number) 0
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Inlining cast (word) memset::num#1 ← (unumber)(number) $3e8
Inlining cast *((const nomodify byte*) SPRITES_ENABLE) ← (unumber)(number) 1
Inlining cast *((const nomodify byte*) SPRITES_EXPAND_X) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) SPRITES_EXPAND_Y) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) SPRITES_XMSB) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) SPRITES_MC) ← (unumber)(number) 0
Inlining cast (byte) mul8u::b#0 ← (unumber)(number) $28
Inlining cast *((const nomodify byte*) screen + (unumber~) draw_block::$5) ← (unumber)(number) 1
Inlining cast *((const nomodify byte*) screen + (unumber~) draw_block::$7) ← (unumber)(number) 2
Inlining cast *((const nomodify byte*) screen + (unumber~) draw_block::$9) ← (unumber)(number) 3
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53264
Simplifying constant pointer cast (byte*) 53287
Simplifying constant pointer cast (byte*) 53269
Simplifying constant pointer cast (byte*) 53271
Simplifying constant pointer cast (byte*) 53276
Simplifying constant pointer cast (byte*) 53277
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53281
Simplifying constant pointer cast (byte*) 53282
Simplifying constant pointer cast (byte*) 53283
Simplifying constant pointer cast (byte*) 53284
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 8192
Simplifying constant pointer cast (byte*) 10240
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 12288
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $10
Simplifying constant integer cast 9
Simplifying constant integer cast 0
Simplifying constant integer cast $3e8
Simplifying constant integer cast $3e8
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $28
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $28
Simplifying constant integer cast 2
Simplifying constant integer cast $28
Simplifying constant integer cast $29
Simplifying constant integer cast 3
Simplifying constant integer cast $29
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $29
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $29
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) mul8u::$1 ← (byte) mul8u::a#3 & (byte) 1
Inferred type updated to word in (unumber~) init::toD0181_$0 ← (word~) init::toD0181_$7 & (word) $3fff
Inferred type updated to word in (unumber~) init::toD0181_$1 ← (word~) init::toD0181_$0 * (byte) 4
Inferred type updated to byte in (unumber~) init::toD0181_$2 ← > (word~) init::toD0181_$1
Inferred type updated to byte in (unumber~) init::toD0181_$4 ← (byte~) init::toD0181_$3 / (byte) 4
Inferred type updated to byte in (unumber~) init::toD0181_$5 ← (byte~) init::toD0181_$4 & (byte) $f
Inferred type updated to byte in (unumber~) init::toD0181_$6 ← (byte~) init::toD0181_$2 | (byte~) init::toD0181_$5
Inferred type updated to word in (unumber~) draw_block::$5 ← (word) draw_block::z#1 + (byte) 1
Inferred type updated to word in (unumber~) draw_block::$6 ← (word) draw_block::z#1 + (byte) 1
Inferred type updated to word in (unumber~) draw_block::$7 ← (word) draw_block::z#1 + (byte) $28
Inferred type updated to word in (unumber~) draw_block::$8 ← (word) draw_block::z#1 + (byte) $28
Inferred type updated to word in (unumber~) draw_block::$9 ← (word) draw_block::z#1 + (byte) $29
Inferred type updated to word in (unumber~) draw_block::$10 ← (word) draw_block::z#1 + (byte) $29
Inversing boolean not [2] (bool~) memset::$1 ← (word) memset::num#2 <= (byte) 0 from [1] (bool~) memset::$0 ← (word) memset::num#2 > (byte) 0
Inversing boolean not [29] (bool~) mul8u::$3 ← (byte~) mul8u::$1 == (byte) 0 from [28] (bool~) mul8u::$2 ← (byte~) mul8u::$1 != (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias mul8u::a#2 = mul8u::a#3 mul8u::a#6 
Alias mul8u::mb#3 = mul8u::mb#4 mul8u::mb#5 
Alias mul8u::res#2 = mul8u::res#5 mul8u::res#4 mul8u::return#0 mul8u::res#3 mul8u::return#3 mul8u::return#1 
Alias mul8u::a#0 = mul8u::$5 
Alias mul8u::mb#1 = mul8u::$6 
Alias mul8u::res#1 = mul8u::$4 
Alias main::x#2 = main::x#6 
Alias main::x#3 = main::x#5 main::x#7 main::x#4 
Alias main::y#2 = main::y#3 main::y#4 
Alias main::z#0 = main::$3 
Alias init::toD0181_screen#0 = init::toD0181_screen#1 
Alias init::toD0181_gfx#0 = init::toD0181_gfx#1 
Alias init::toD0181_return#0 = init::toD0181_$6 init::toD0181_return#2 init::toD0181_return#1 init::toD0181_return#3 init::$3 
Alias draw_block::tileno#1 = draw_block::$0 draw_block::tileno#3 
Alias draw_block::x1#0 = draw_block::$1 draw_block::x1#1 
Alias draw_block::y#1 = draw_block::$2 
Alias mul8u::return#2 = mul8u::return#4 
Alias draw_block::z#0 = draw_block::$3 
Alias draw_block::z#1 = draw_block::$4 
Successful SSA optimization Pass2AliasElimination
Alias mul8u::a#2 = mul8u::a#4 
Alias mul8u::mb#2 = mul8u::mb#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#5 (void*) memset::str#3
Identical Phi Values (byte) memset::c#2 (byte) memset::c#4
Identical Phi Values (byte) mul8u::b#1 (byte) mul8u::b#0
Identical Phi Values (byte) mul8u::a#5 (byte) mul8u::a#1
Identical Phi Values (byte) main::x#3 (byte) main::x#2
Identical Phi Values (byte) draw_block::tileno#2 (byte) draw_block::tileno#0
Identical Phi Values (byte) draw_block::x#1 (byte) draw_block::x#0
Identical Phi Values (byte) draw_block::y#2 (byte) draw_block::y#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memset::$1 [2] if((word) memset::num#2<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [9] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) mul8u::$0 [18] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2
Simple Condition (bool~) mul8u::$3 [21] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@4
Simple Condition (bool~) main::$1 [31] if((byte) main::x#2<(byte) $10) goto main::@2
Simple Condition (bool~) main::$2 [35] if((byte) main::y#2<(byte) 9) goto main::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const word) mul8u::res#0 = 0
Constant (const byte) main::x#0 = 0
Constant (const byte) main::y#0 = 0
Constant (const byte) draw_block::color#0 = YELLOW
Constant (const void*) memset::str#0 = (void*)screen
Constant (const byte) memset::c#0 = 0
Constant (const word) memset::num#0 = $3e8
Constant (const void*) memset::str#1 = (void*)colors
Constant (const byte) memset::c#1 = BLACK
Constant (const word) memset::num#1 = $3e8
Constant (const byte*) init::toD0181_screen#0 = screen
Constant (const byte*) init::toD0181_gfx#0 = charset
Constant (const byte) mul8u::b#0 = $28
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) mul8u::mb#0 = (word)mul8u::b#0
Constant (const word) init::toD0181_$7 = (word)init::toD0181_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)init::toD0181_gfx#0 in [64] (byte~) init::toD0181_$3 ← > (word)(const byte*) init::toD0181_gfx#0
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [45] if(true) goto main::@6
Successful SSA optimization Pass2ConstantIfs
De-inlining pointer[w] to *(pointer+w)   [94] *((const nomodify byte*) screen + (word) draw_block::z#1) ← (byte) draw_block::drawtile#0
De-inlining pointer[w] to *(pointer+w)   [95] *((const nomodify byte*) colors + (word) draw_block::z#1) ← (const nomodify byte) YELLOW
De-inlining pointer[w] to *(pointer+w)   [97] *((const nomodify byte*) screen + (word~) draw_block::$5) ← (byte) 1
De-inlining pointer[w] to *(pointer+w)   [99] *((const nomodify byte*) colors + (word~) draw_block::$6) ← (const nomodify byte) YELLOW
De-inlining pointer[w] to *(pointer+w)   [101] *((const nomodify byte*) screen + (word~) draw_block::$7) ← (byte) 2
De-inlining pointer[w] to *(pointer+w)   [103] *((const nomodify byte*) colors + (word~) draw_block::$8) ← (const nomodify byte) YELLOW
De-inlining pointer[w] to *(pointer+w)   [105] *((const nomodify byte*) screen + (word~) draw_block::$9) ← (byte) 3
De-inlining pointer[w] to *(pointer+w)   [107] *((const nomodify byte*) colors + (word~) draw_block::$10) ← (const nomodify byte) YELLOW
Successful SSA optimization Pass2DeInlineWordDerefIdx
Eliminating unused variable (void*) memset::return#2 and assignment [35] (void*) memset::return#2 ← (void*) memset::str#3
Eliminating unused variable (void*) memset::return#3 and assignment [37] (void*) memset::return#3 ← (void*) memset::str#3
Eliminating unused constant (const byte) draw_block::color#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [35] (word~) init::toD0181_$0 ← (const word) init::toD0181_$7 & (word) $3fff
Constant right-side identified [38] (byte~) init::toD0181_$3 ← > (word)(const byte*) init::toD0181_gfx#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) init::toD0181_$0 = init::toD0181_$7&$3fff
Constant (const byte) init::toD0181_$3 = >(word)init::toD0181_gfx#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [35] (word~) init::toD0181_$1 ← (const word) init::toD0181_$0 * (byte) 4
Constant right-side identified [37] (byte~) init::toD0181_$4 ← (const byte) init::toD0181_$3 / (byte) 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) init::toD0181_$1 = init::toD0181_$0*4
Constant (const byte) init::toD0181_$4 = init::toD0181_$3/4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [35] (byte~) init::toD0181_$2 ← > (const word) init::toD0181_$1
Constant right-side identified [36] (byte~) init::toD0181_$5 ← (const byte) init::toD0181_$4 & (byte) $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) init::toD0181_$2 = >init::toD0181_$1
Constant (const byte) init::toD0181_$5 = init::toD0181_$4&$f
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [35] (byte) init::toD0181_return#0 ← (const byte) init::toD0181_$2 | (const byte) init::toD0181_$5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) init::toD0181_return#0 = init::toD0181_$2|init::toD0181_$5
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [2] (byte*~) memset::$4 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [4] (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings (const void*) memset::str#0
Inlining constant with var siblings (const byte) memset::c#0
Inlining constant with var siblings (const word) memset::num#0
Inlining constant with var siblings (const void*) memset::str#1
Inlining constant with var siblings (const byte) memset::c#1
Inlining constant with var siblings (const word) memset::num#1
Inlining constant with var siblings (const word) mul8u::res#0
Inlining constant with var siblings (const word) mul8u::mb#0
Inlining constant with var siblings (const byte) main::x#0
Inlining constant with var siblings (const byte) main::y#0
Constant inlined init::toD0181_gfx#0 = (const nomodify byte*) charset
Constant inlined init::toD0181_$2 = >(word)(const nomodify byte*) screen&(word) $3fff*(byte) 4
Constant inlined init::toD0181_$3 = >(word)(const nomodify byte*) charset
Constant inlined memset::str#1 = (void*)(const nomodify byte*) colors
Constant inlined init::toD0181_$0 = (word)(const nomodify byte*) screen&(word) $3fff
Constant inlined memset::str#0 = (void*)(const nomodify byte*) screen
Constant inlined init::toD0181_$1 = (word)(const nomodify byte*) screen&(word) $3fff*(byte) 4
Constant inlined mul8u::mb#0 = (word)(const byte) mul8u::b#0
Constant inlined init::toD0181_$7 = (word)(const nomodify byte*) screen
Constant inlined init::toD0181_$4 = >(word)(const nomodify byte*) charset/(byte) 4
Constant inlined init::toD0181_$5 = >(word)(const nomodify byte*) charset/(byte) 4&(byte) $f
Constant inlined memset::num#1 = (word) $3e8
Constant inlined main::x#0 = (byte) 0
Constant inlined memset::num#0 = (word) $3e8
Constant inlined main::y#0 = (byte) 0
Constant inlined mul8u::res#0 = (word) 0
Constant inlined memset::c#0 = (byte) 0
Constant inlined memset::c#1 = (const nomodify byte) BLACK
Constant inlined init::toD0181_screen#0 = (const nomodify byte*) screen
Successful SSA optimization Pass2ConstantInlining
Consolidated constant in assignment draw_block::$13
Consolidated constant in assignment draw_block::$14
Consolidated constant in assignment draw_block::$15
Consolidated constant in assignment draw_block::$16
Consolidated constant in assignment draw_block::$17
Consolidated constant in assignment draw_block::$18
Successful SSA optimization Pass2ConstantAdditionElimination
Alias draw_block::z#1 = draw_block::$5 draw_block::$6 draw_block::$7 draw_block::$8 draw_block::$9 draw_block::$10 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) memset::num#2 (word) $3e8
Successful SSA optimization Pass2IdenticalPhiElimination
if() condition always false - eliminating [1] if((word) $3e8<=(byte) 0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Added new block during phi lifting mul8u::@6(between mul8u::@2 and mul8u::@4)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of mul8u::@3
Adding NOP phi() at start of init
Adding NOP phi() at start of init::@2
Adding NOP phi() at start of init::@3
Adding NOP phi() at start of init::@4
Adding NOP phi() at start of init::toD0181
Adding NOP phi() at start of init::toD0181_@return
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [main] to init:1 draw_block:16 
Calls in [draw_block] to mul8u:23 
Calls in [init] to init_sprites:62 memset:64 memset:66 

Created 9 initial phi equivalence classes
Coalesced [10] main::x#8 ← main::x#1
Coalesced [18] main::y#5 ← main::y#1
Coalesced [45] mul8u::a#7 ← mul8u::a#1
Coalesced [53] mul8u::res#9 ← mul8u::res#1
Coalesced [57] mul8u::a#8 ← mul8u::a#0
Coalesced [58] mul8u::res#7 ← mul8u::res#6
Coalesced [59] mul8u::mb#6 ← mul8u::mb#1
Coalesced (already) [60] mul8u::res#8 ← mul8u::res#2
Coalesced [87] memset::dst#5 ← memset::dst#1
Coalesced down to 8 phi equivalence classes
Culled Empty Block (label) main::@7
Culled Empty Block (label) main::@2
Culled Empty Block (label) mul8u::@3
Culled Empty Block (label) mul8u::@6
Culled Empty Block (label) init::@4
Culled Empty Block (label) init::toD0181_@return
Culled Empty Block (label) memset::@1
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block mul8u::@4 to mul8u::@3
Renumbering block mul8u::@5 to mul8u::@4
Renumbering block main::@3 to main::@2
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Renumbering block main::@6 to main::@5
Renumbering block main::@8 to main::@6
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of mul8u
Adding NOP phi() at start of init
Adding NOP phi() at start of init::@2
Adding NOP phi() at start of init::@3
Adding NOP phi() at start of init::toD0181

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call init 
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [2] (byte) main::x#2 ← phi( main::@4/(byte) main::x#1 main/(byte) 0 )
  [3] if((byte) main::x#2<(byte) $10) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@1 main::@5
  [4] phi()
  to:main::@5
main::@2: scope:[main]  from main::@1 main::@6
  [5] (byte) main::y#2 ← phi( main::@1/(byte) 0 main::@6/(byte) main::y#1 )
  [6] if((byte) main::y#2<(byte) 9) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@2
  [7] (byte) main::x#1 ← ++ (byte) main::x#2
  to:main::@1
main::@3: scope:[main]  from main::@2
  [8] (byte) main::z#0 ← (byte) main::x#2 + (byte) main::y#2
  [9] (byte) main::tile#0 ← *((const nomodify byte*) level_address + (byte) main::z#0)
  [10] (byte) draw_block::tileno#0 ← (byte) main::tile#0
  [11] (byte) draw_block::x#0 ← (byte) main::x#2
  [12] (byte) draw_block::y#0 ← (byte) main::y#2
  [13] call draw_block 
  to:main::@6
main::@6: scope:[main]  from main::@3
  [14] (byte) main::y#1 ← ++ (byte) main::y#2
  to:main::@2

(void()) draw_block((byte) draw_block::tileno , (byte) draw_block::x , (byte) draw_block::y , (byte) draw_block::color)
draw_block: scope:[draw_block]  from main::@3
  [15] (byte) draw_block::tileno#1 ← (byte) draw_block::tileno#0 << (byte) 2
  [16] (word) draw_block::x1#0 ← (byte) draw_block::x#0 << (byte) 1
  [17] (byte) draw_block::y#1 ← (byte) draw_block::y#0 << (byte) 1
  [18] (byte) mul8u::a#1 ← (byte) draw_block::y#1
  [19] call mul8u 
  [20] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:draw_block::@1
draw_block::@1: scope:[draw_block]  from draw_block
  [21] (word) draw_block::z#0 ← (word) mul8u::return#2
  [22] (word) draw_block::z#1 ← (word) draw_block::z#0 + (word) draw_block::x1#0
  [23] (byte) draw_block::drawtile#0 ← *((const nomodify byte*) tileset + (byte) draw_block::tileno#1)
  [24] (byte*~) draw_block::$11 ← (const nomodify byte*) screen + (word) draw_block::z#1
  [25] *((byte*~) draw_block::$11) ← (byte) draw_block::drawtile#0
  [26] (byte*~) draw_block::$12 ← (const nomodify byte*) colors + (word) draw_block::z#1
  [27] *((byte*~) draw_block::$12) ← (const nomodify byte) YELLOW
  [28] (byte*~) draw_block::$13 ← (const nomodify byte*) screen+(byte) 1 + (word) draw_block::z#1
  [29] *((byte*~) draw_block::$13) ← (byte) 1
  [30] (byte*~) draw_block::$14 ← (const nomodify byte*) colors+(byte) 1 + (word) draw_block::z#1
  [31] *((byte*~) draw_block::$14) ← (const nomodify byte) YELLOW
  [32] (byte*~) draw_block::$15 ← (const nomodify byte*) screen+(byte) $28 + (word) draw_block::z#1
  [33] *((byte*~) draw_block::$15) ← (byte) 2
  [34] (byte*~) draw_block::$16 ← (const nomodify byte*) colors+(byte) $28 + (word) draw_block::z#1
  [35] *((byte*~) draw_block::$16) ← (const nomodify byte) YELLOW
  [36] (byte*~) draw_block::$17 ← (const nomodify byte*) screen+(byte) $29 + (word) draw_block::z#1
  [37] *((byte*~) draw_block::$17) ← (byte) 3
  [38] (byte*~) draw_block::$18 ← (const nomodify byte*) colors+(byte) $29 + (word) draw_block::z#1
  [39] *((byte*~) draw_block::$18) ← (const nomodify byte) YELLOW
  to:draw_block::@return
draw_block::@return: scope:[draw_block]  from draw_block::@1
  [40] return 
  to:@return

(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
mul8u: scope:[mul8u]  from draw_block
  [41] phi()
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [42] (word) mul8u::mb#2 ← phi( mul8u/(word)(const byte) mul8u::b#0 mul8u::@3/(word) mul8u::mb#1 )
  [42] (word) mul8u::res#2 ← phi( mul8u/(word) 0 mul8u::@3/(word) mul8u::res#6 )
  [42] (byte) mul8u::a#2 ← phi( mul8u/(byte) mul8u::a#1 mul8u::@3/(byte) mul8u::a#0 )
  [43] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [44] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [45] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1
  [46] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [47] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [48] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [49] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1
  [50] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1
  to:mul8u::@1

(void()) init()
init: scope:[init]  from main
  [51] phi()
  [52] call init_sprites 
  to:init::@2
init::@2: scope:[init]  from init
  [53] phi()
  [54] call memset 
  to:init::@3
init::@3: scope:[init]  from init::@2
  [55] phi()
  [56] call memset 
  to:init::toD0181
init::toD0181: scope:[init]  from init::@3
  [57] phi()
  to:init::@1
init::@1: scope:[init]  from init::toD0181
  [58] *((const nomodify byte*) D018) ← (const byte) init::toD0181_return#0
  asm { lda#$5b sta$d011  }
  [60] *((const nomodify byte*) BORDER_COLOR) ← (const nomodify byte) BLACK
  [61] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) BLACK
  [62] *((const nomodify byte*) BG_COLOR1) ← (const nomodify byte) RED
  [63] *((const nomodify byte*) BG_COLOR2) ← (const nomodify byte) BLUE
  [64] *((const nomodify byte*) BG_COLOR3) ← (const nomodify byte) GREEN
  to:init::@return
init::@return: scope:[init]  from init::@1
  [65] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from init::@2 init::@3
  [66] (byte) memset::c#4 ← phi( init::@2/(byte) 0 init::@3/(const nomodify byte) BLACK )
  [66] (void*) memset::str#3 ← phi( init::@2/(void*)(const nomodify byte*) screen init::@3/(void*)(const nomodify byte*) colors )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [67] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) $3e8
  [68] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [69] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [70] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [71] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [72] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [73] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void()) init_sprites()
init_sprites: scope:[init_sprites]  from init
  [74] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) 1
  [75] *((const nomodify byte*) SPRITES_EXPAND_X) ← (byte) 0
  [76] *((const nomodify byte*) SPRITES_EXPAND_Y) ← (byte) 0
  [77] *((const nomodify byte*) SPRITES_XMSB) ← (byte) 0
  [78] *((const nomodify byte*) SPRITES_COLOR) ← (const nomodify byte) WHITE
  [79] *((const nomodify byte*) SPRITES_MC) ← (byte) 0
  to:init_sprites::@return
init_sprites::@return: scope:[init_sprites]  from init_sprites
  [80] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(void()) draw_block((byte) draw_block::tileno , (byte) draw_block::x , (byte) draw_block::y , (byte) draw_block::color)
(byte*~) draw_block::$11 2002.0
(byte*~) draw_block::$12 2002.0
(byte*~) draw_block::$13 2002.0
(byte*~) draw_block::$14 2002.0
(byte*~) draw_block::$15 2002.0
(byte*~) draw_block::$16 2002.0
(byte*~) draw_block::$17 2002.0
(byte*~) draw_block::$18 2002.0
(byte) draw_block::color
(byte) draw_block::drawtile
(byte) draw_block::drawtile#0 1001.0
(byte) draw_block::tileno
(byte) draw_block::tileno#0 367.33333333333337
(byte) draw_block::tileno#1 250.25
(byte) draw_block::x
(byte) draw_block::x#0 367.33333333333337
(word) draw_block::x1
(word) draw_block::x1#0 333.6666666666667
(byte) draw_block::y
(byte) draw_block::y#0 367.33333333333337
(byte) draw_block::y#1 2002.0
(word) draw_block::z
(word) draw_block::z#0 2002.0
(word) draw_block::z#1 563.0625
(void()) init()
(byte*) init::toD0181_gfx
(byte) init::toD0181_return
(byte*) init::toD0181_screen
(void()) init_sprites()
(void()) main()
(byte) main::tile
(byte) main::tile#0 202.0
(byte) main::x
(byte) main::x#1 22.0
(byte) main::x#2 21.363636363636363
(byte) main::y
(byte) main::y#1 202.0
(byte) main::y#2 63.125
(byte) main::z
(byte) main::z#0 202.0
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte) memset::c#4 143.0
(byte*) memset::dst
(byte*) memset::dst#1 2002.0
(byte*) memset::dst#2 1368.3333333333335
(byte*) memset::dst#4 202.0
(byte*) memset::end
(byte*) memset::end#0 183.66666666666669
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#3
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 2.0000002E7
(byte) mul8u::a
(byte) mul8u::a#0 1.0000001E7
(byte) mul8u::a#1 5501.0
(byte) mul8u::a#2 6668334.166666666
(byte) mul8u::b
(word) mul8u::mb
(word) mul8u::mb#1 2.0000002E7
(word) mul8u::mb#2 4285714.714285715
(word) mul8u::res
(word) mul8u::res#1 2.0000002E7
(word) mul8u::res#2 5000167.333333333
(word) mul8u::res#6 1.0000001E7
(word) mul8u::return
(word) mul8u::return#2 2002.0

Initial phi equivalence classes
[ main::x#2 main::x#1 ]
[ main::y#2 main::y#1 ]
[ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#1 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
Added variable main::z#0 to live range equivalence class [ main::z#0 ]
Added variable main::tile#0 to live range equivalence class [ main::tile#0 ]
Added variable draw_block::tileno#0 to live range equivalence class [ draw_block::tileno#0 ]
Added variable draw_block::x#0 to live range equivalence class [ draw_block::x#0 ]
Added variable draw_block::y#0 to live range equivalence class [ draw_block::y#0 ]
Added variable draw_block::tileno#1 to live range equivalence class [ draw_block::tileno#1 ]
Added variable draw_block::x1#0 to live range equivalence class [ draw_block::x1#0 ]
Added variable draw_block::y#1 to live range equivalence class [ draw_block::y#1 ]
Added variable mul8u::return#2 to live range equivalence class [ mul8u::return#2 ]
Added variable draw_block::z#0 to live range equivalence class [ draw_block::z#0 ]
Added variable draw_block::z#1 to live range equivalence class [ draw_block::z#1 ]
Added variable draw_block::drawtile#0 to live range equivalence class [ draw_block::drawtile#0 ]
Added variable draw_block::$11 to live range equivalence class [ draw_block::$11 ]
Added variable draw_block::$12 to live range equivalence class [ draw_block::$12 ]
Added variable draw_block::$13 to live range equivalence class [ draw_block::$13 ]
Added variable draw_block::$14 to live range equivalence class [ draw_block::$14 ]
Added variable draw_block::$15 to live range equivalence class [ draw_block::$15 ]
Added variable draw_block::$16 to live range equivalence class [ draw_block::$16 ]
Added variable draw_block::$17 to live range equivalence class [ draw_block::$17 ]
Added variable draw_block::$18 to live range equivalence class [ draw_block::$18 ]
Added variable mul8u::$1 to live range equivalence class [ mul8u::$1 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Complete equivalence classes
[ main::x#2 main::x#1 ]
[ main::y#2 main::y#1 ]
[ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#1 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ main::z#0 ]
[ main::tile#0 ]
[ draw_block::tileno#0 ]
[ draw_block::x#0 ]
[ draw_block::y#0 ]
[ draw_block::tileno#1 ]
[ draw_block::x1#0 ]
[ draw_block::y#1 ]
[ mul8u::return#2 ]
[ draw_block::z#0 ]
[ draw_block::z#1 ]
[ draw_block::drawtile#0 ]
[ draw_block::$11 ]
[ draw_block::$12 ]
[ draw_block::$13 ]
[ draw_block::$14 ]
[ draw_block::$15 ]
[ draw_block::$16 ]
[ draw_block::$17 ]
[ draw_block::$18 ]
[ mul8u::$1 ]
[ memset::end#0 ]
Allocated zp[1]:2 [ main::x#2 main::x#1 ]
Allocated zp[1]:3 [ main::y#2 main::y#1 ]
Allocated zp[1]:4 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
Allocated zp[2]:5 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
Allocated zp[2]:7 [ mul8u::mb#2 mul8u::mb#1 ]
Allocated zp[2]:9 [ memset::str#3 ]
Allocated zp[1]:11 [ memset::c#4 ]
Allocated zp[2]:12 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[1]:14 [ main::z#0 ]
Allocated zp[1]:15 [ main::tile#0 ]
Allocated zp[1]:16 [ draw_block::tileno#0 ]
Allocated zp[1]:17 [ draw_block::x#0 ]
Allocated zp[1]:18 [ draw_block::y#0 ]
Allocated zp[1]:19 [ draw_block::tileno#1 ]
Allocated zp[2]:20 [ draw_block::x1#0 ]
Allocated zp[1]:22 [ draw_block::y#1 ]
Allocated zp[2]:23 [ mul8u::return#2 ]
Allocated zp[2]:25 [ draw_block::z#0 ]
Allocated zp[2]:27 [ draw_block::z#1 ]
Allocated zp[1]:29 [ draw_block::drawtile#0 ]
Allocated zp[2]:30 [ draw_block::$11 ]
Allocated zp[2]:32 [ draw_block::$12 ]
Allocated zp[2]:34 [ draw_block::$13 ]
Allocated zp[2]:36 [ draw_block::$14 ]
Allocated zp[2]:38 [ draw_block::$15 ]
Allocated zp[2]:40 [ draw_block::$16 ]
Allocated zp[2]:42 [ draw_block::$17 ]
Allocated zp[2]:44 [ draw_block::$18 ]
Allocated zp[1]:46 [ mul8u::$1 ]
Allocated zp[2]:47 [ memset::end#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Illustrates a problem with a missing fragment - pbuc1_derefidx_vwuz1=vbuz2
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // The colors of the C64
  .const BLACK = 0
  .const WHITE = 1
  .const RED = 2
  .const GREEN = 5
  .const BLUE = 6
  .const YELLOW = 7
  .label SPRITES_XMSB = $d010
  .label SPRITES_COLOR = $d027
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label BORDER_COLOR = $d020
  .label BG_COLOR = $d021
  .label BG_COLOR1 = $d022
  .label BG_COLOR2 = $d023
  .label BG_COLOR3 = $d024
  .label D018 = $d018
  .label screen = $400
  .label charset = $2000
  .label tileset = $2800
  .label colors = $d800
  .label level_address = $3000
  // main
main: {
    .label z = $e
    .label tile = $f
    .label y = 3
    .label x = 2
    // [1] call init 
    // [51] phi from main to init [phi:main->init]
  init_from_main:
    jsr init
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [2] phi (byte) main::x#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    jmp __b1
    // main::@1
  __b1:
    // [3] if((byte) main::x#2<(byte) $10) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x
    cmp #$10
    bcc __b2_from___b1
    // [4] phi from main::@1 main::@5 to main::@5 [phi:main::@1/main::@5->main::@5]
  __b5_from___b1:
  __b5_from___b5:
    jmp __b5
    // main::@5
  __b5:
    jmp __b5_from___b5
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [5] phi (byte) main::y#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    jmp __b2
    // main::@2
  __b2:
    // [6] if((byte) main::y#2<(byte) 9) goto main::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z y
    cmp #9
    bcc __b3
    jmp __b4
    // main::@4
  __b4:
    // [7] (byte) main::x#1 ← ++ (byte) main::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [2] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [2] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@4->main::@1#0] -- register_copy 
    jmp __b1
    // main::@3
  __b3:
    // [8] (byte) main::z#0 ← (byte) main::x#2 + (byte) main::y#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z x
    clc
    adc.z y
    sta.z z
    // [9] (byte) main::tile#0 ← *((const nomodify byte*) level_address + (byte) main::z#0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z z
    lda level_address,y
    sta.z tile
    // [10] (byte) draw_block::tileno#0 ← (byte) main::tile#0 -- vbuz1=vbuz2 
    lda.z tile
    sta.z draw_block.tileno
    // [11] (byte) draw_block::x#0 ← (byte) main::x#2 -- vbuz1=vbuz2 
    lda.z x
    sta.z draw_block.x
    // [12] (byte) draw_block::y#0 ← (byte) main::y#2 -- vbuz1=vbuz2 
    lda.z y
    sta.z draw_block.y
    // [13] call draw_block 
    jsr draw_block
    jmp __b6
    // main::@6
  __b6:
    // [14] (byte) main::y#1 ← ++ (byte) main::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [5] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  __b2_from___b6:
    // [5] phi (byte) main::y#2 = (byte) main::y#1 [phi:main::@6->main::@2#0] -- register_copy 
    jmp __b2
}
  // draw_block
// draw_block(byte zp($10) tileno, byte zp($11) x, byte zp($12) y)
draw_block: {
    .label tileno = $10
    .label x = $11
    .label y = $12
    .label tileno_1 = $13
    .label x1 = $14
    .label y_1 = $16
    .label z = $19
    .label z_1 = $1b
    .label drawtile = $1d
    .label __11 = $1e
    .label __12 = $20
    .label __13 = $22
    .label __14 = $24
    .label __15 = $26
    .label __16 = $28
    .label __17 = $2a
    .label __18 = $2c
    // [15] (byte) draw_block::tileno#1 ← (byte) draw_block::tileno#0 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z tileno
    asl
    asl
    sta.z tileno_1
    // [16] (word) draw_block::x1#0 ← (byte) draw_block::x#0 << (byte) 1 -- vwuz1=vbuz2_rol_1 
    lda.z x
    asl
    sta.z x1
    lda #0
    rol
    sta.z x1+1
    // [17] (byte) draw_block::y#1 ← (byte) draw_block::y#0 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z y
    asl
    sta.z y_1
    // [18] (byte) mul8u::a#1 ← (byte) draw_block::y#1 -- vbuz1=vbuz2 
    lda.z y_1
    sta.z mul8u.a
    // [19] call mul8u 
    // [41] phi from draw_block to mul8u [phi:draw_block->mul8u]
  mul8u_from_draw_block:
    jsr mul8u
    // [20] (word) mul8u::return#2 ← (word) mul8u::res#2 -- vwuz1=vwuz2 
    lda.z mul8u.res
    sta.z mul8u.return
    lda.z mul8u.res+1
    sta.z mul8u.return+1
    jmp __b1
    // draw_block::@1
  __b1:
    // [21] (word) draw_block::z#0 ← (word) mul8u::return#2 -- vwuz1=vwuz2 
    lda.z mul8u.return
    sta.z z
    lda.z mul8u.return+1
    sta.z z+1
    // [22] (word) draw_block::z#1 ← (word) draw_block::z#0 + (word) draw_block::x1#0 -- vwuz1=vwuz2_plus_vwuz3 
    lda.z z
    clc
    adc.z x1
    sta.z z_1
    lda.z z+1
    adc.z x1+1
    sta.z z_1+1
    // [23] (byte) draw_block::drawtile#0 ← *((const nomodify byte*) tileset + (byte) draw_block::tileno#1) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z tileno_1
    lda tileset,y
    sta.z drawtile
    // [24] (byte*~) draw_block::$11 ← (const nomodify byte*) screen + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<screen
    sta.z __11
    lda.z z_1+1
    adc #>screen
    sta.z __11+1
    // [25] *((byte*~) draw_block::$11) ← (byte) draw_block::drawtile#0 -- _deref_pbuz1=vbuz2 
    lda.z drawtile
    ldy #0
    sta (__11),y
    // [26] (byte*~) draw_block::$12 ← (const nomodify byte*) colors + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<colors
    sta.z __12
    lda.z z_1+1
    adc #>colors
    sta.z __12+1
    // [27] *((byte*~) draw_block::$12) ← (const nomodify byte) YELLOW -- _deref_pbuz1=vbuc1 
    lda #YELLOW
    ldy #0
    sta (__12),y
    // [28] (byte*~) draw_block::$13 ← (const nomodify byte*) screen+(byte) 1 + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<screen+1
    sta.z __13
    lda.z z_1+1
    adc #>screen+1
    sta.z __13+1
    // [29] *((byte*~) draw_block::$13) ← (byte) 1 -- _deref_pbuz1=vbuc1 
    lda #1
    ldy #0
    sta (__13),y
    // [30] (byte*~) draw_block::$14 ← (const nomodify byte*) colors+(byte) 1 + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<colors+1
    sta.z __14
    lda.z z_1+1
    adc #>colors+1
    sta.z __14+1
    // [31] *((byte*~) draw_block::$14) ← (const nomodify byte) YELLOW -- _deref_pbuz1=vbuc1 
    lda #YELLOW
    ldy #0
    sta (__14),y
    // [32] (byte*~) draw_block::$15 ← (const nomodify byte*) screen+(byte) $28 + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<screen+$28
    sta.z __15
    lda.z z_1+1
    adc #>screen+$28
    sta.z __15+1
    // [33] *((byte*~) draw_block::$15) ← (byte) 2 -- _deref_pbuz1=vbuc1 
    lda #2
    ldy #0
    sta (__15),y
    // [34] (byte*~) draw_block::$16 ← (const nomodify byte*) colors+(byte) $28 + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<colors+$28
    sta.z __16
    lda.z z_1+1
    adc #>colors+$28
    sta.z __16+1
    // [35] *((byte*~) draw_block::$16) ← (const nomodify byte) YELLOW -- _deref_pbuz1=vbuc1 
    lda #YELLOW
    ldy #0
    sta (__16),y
    // [36] (byte*~) draw_block::$17 ← (const nomodify byte*) screen+(byte) $29 + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<screen+$29
    sta.z __17
    lda.z z_1+1
    adc #>screen+$29
    sta.z __17+1
    // [37] *((byte*~) draw_block::$17) ← (byte) 3 -- _deref_pbuz1=vbuc1 
    lda #3
    ldy #0
    sta (__17),y
    // [38] (byte*~) draw_block::$18 ← (const nomodify byte*) colors+(byte) $29 + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<colors+$29
    sta.z __18
    lda.z z_1+1
    adc #>colors+$29
    sta.z __18+1
    // [39] *((byte*~) draw_block::$18) ← (const nomodify byte) YELLOW -- _deref_pbuz1=vbuc1 
    lda #YELLOW
    ldy #0
    sta (__18),y
    jmp __breturn
    // draw_block::@return
  __breturn:
    // [40] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte zp(4) a)
mul8u: {
    .const b = $28
    .label __1 = $2e
    .label a = 4
    .label mb = 7
    .label res = 5
    .label return = $17
    // [42] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  __b1_from_mul8u:
    // [42] phi (word) mul8u::mb#2 = (word)(const byte) mul8u::b#0 [phi:mul8u->mul8u::@1#0] -- vwuz1=vwuc1 
    lda #<b
    sta.z mb
    lda #>b
    sta.z mb+1
    // [42] phi (word) mul8u::res#2 = (word) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [42] phi (byte) mul8u::a#2 = (byte) mul8u::a#1 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp __b1
    // mul8u::@1
  __b1:
    // [43] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2 -- vbuz1_neq_0_then_la1 
    lda.z a
    cmp #0
    bne __b2
    jmp __breturn
    // mul8u::@return
  __breturn:
    // [44] return 
    rts
    // mul8u::@2
  __b2:
    // [45] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and.z a
    sta.z __1
    // [46] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuz1_eq_0_then_la1 
    lda.z __1
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul8u::@4
  __b4:
    // [47] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [48] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [48] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp __b3
    // mul8u::@3
  __b3:
    // [49] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr.z a
    // [50] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [42] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  __b1_from___b3:
    // [42] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [42] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [42] phi (byte) mul8u::a#2 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // init
init: {
    .const toD0181_return = (>(screen&$3fff)*4)|(>charset)/4&$f
    // [52] call init_sprites 
    jsr init_sprites
    // [53] phi from init to init::@2 [phi:init->init::@2]
  __b2_from_init:
    jmp __b2
    // init::@2
  __b2:
    // [54] call memset 
    // [66] phi from init::@2 to memset [phi:init::@2->memset]
  memset_from___b2:
    // [66] phi (byte) memset::c#4 = (byte) 0 [phi:init::@2->memset#0] -- vbuz1=vbuc1 
    lda #0
    sta.z memset.c
    // [66] phi (void*) memset::str#3 = (void*)(const nomodify byte*) screen [phi:init::@2->memset#1] -- pvoz1=pvoc1 
    lda #<screen
    sta.z memset.str
    lda #>screen
    sta.z memset.str+1
    jsr memset
    // [55] phi from init::@2 to init::@3 [phi:init::@2->init::@3]
  __b3_from___b2:
    jmp __b3
    // init::@3
  __b3:
    // [56] call memset 
    // [66] phi from init::@3 to memset [phi:init::@3->memset]
  memset_from___b3:
    // [66] phi (byte) memset::c#4 = (const nomodify byte) BLACK [phi:init::@3->memset#0] -- vbuz1=vbuc1 
    lda #BLACK
    sta.z memset.c
    // [66] phi (void*) memset::str#3 = (void*)(const nomodify byte*) colors [phi:init::@3->memset#1] -- pvoz1=pvoc1 
    lda #<colors
    sta.z memset.str
    lda #>colors
    sta.z memset.str+1
    jsr memset
    // [57] phi from init::@3 to init::toD0181 [phi:init::@3->init::toD0181]
  toD0181_from___b3:
    jmp toD0181
    // init::toD0181
  toD0181:
    jmp __b1
    // init::@1
  __b1:
    // [58] *((const nomodify byte*) D018) ← (const byte) init::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // asm { lda#$5b sta$d011  }
    lda #$5b
    sta $d011
    // [60] *((const nomodify byte*) BORDER_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDER_COLOR
    // [61] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BG_COLOR
    // [62] *((const nomodify byte*) BG_COLOR1) ← (const nomodify byte) RED -- _deref_pbuc1=vbuc2 
    lda #RED
    sta BG_COLOR1
    // [63] *((const nomodify byte*) BG_COLOR2) ← (const nomodify byte) BLUE -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BG_COLOR2
    // [64] *((const nomodify byte*) BG_COLOR3) ← (const nomodify byte) GREEN -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BG_COLOR3
    jmp __breturn
    // init::@return
  __breturn:
    // [65] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(9) str, byte zp($b) c)
memset: {
    .label end = $2f
    .label dst = $c
    .label str = 9
    .label c = $b
    jmp __b1
    // memset::@1
  __b1:
    // [67] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) $3e8 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z str
    clc
    adc #<$3e8
    sta.z end
    lda.z str+1
    adc #>$3e8
    sta.z end+1
    // [68] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 -- pbuz1=pbuz2 
    lda.z str
    sta.z dst
    lda.z str+1
    sta.z dst+1
    // [69] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [69] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [70] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [71] return 
    rts
    // memset::@3
  __b3:
    // [72] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // [73] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // init_sprites
init_sprites: {
    // [74] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta SPRITES_ENABLE
    // [75] *((const nomodify byte*) SPRITES_EXPAND_X) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // one sprite enabled
    lda #0
    sta SPRITES_EXPAND_X
    // [76] *((const nomodify byte*) SPRITES_EXPAND_Y) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_EXPAND_Y
    // [77] *((const nomodify byte*) SPRITES_XMSB) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_XMSB
    // [78] *((const nomodify byte*) SPRITES_COLOR) ← (const nomodify byte) WHITE -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta SPRITES_COLOR
    // [79] *((const nomodify byte*) SPRITES_MC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
    jmp __breturn
    // init_sprites::@return
  __breturn:
    // [80] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [8] (byte) main::z#0 ← (byte) main::x#2 + (byte) main::y#2 [ main::x#2 main::y#2 main::z#0 ] (  [ main::x#2 main::y#2 main::z#0 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::x#2 main::x#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::y#2 main::y#1 ]
Statement [15] (byte) draw_block::tileno#1 ← (byte) draw_block::tileno#0 << (byte) 2 [ draw_block::x#0 draw_block::y#0 draw_block::tileno#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::x#0 draw_block::y#0 draw_block::tileno#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } { mul8u::a#1 = draw_block::y#1 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:17 [ draw_block::x#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:18 [ draw_block::y#0 ]
Statement [16] (word) draw_block::x1#0 ← (byte) draw_block::x#0 << (byte) 1 [ draw_block::y#0 draw_block::tileno#1 draw_block::x1#0 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::y#0 draw_block::tileno#1 draw_block::x1#0 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } { mul8u::a#1 = draw_block::y#1 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:19 [ draw_block::tileno#1 ]
Statement [17] (byte) draw_block::y#1 ← (byte) draw_block::y#0 << (byte) 1 [ draw_block::tileno#1 draw_block::x1#0 draw_block::y#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::tileno#1 draw_block::x1#0 draw_block::y#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } { mul8u::a#1 = draw_block::y#1 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [20] (word) mul8u::return#2 ← (word) mul8u::res#2 [ draw_block::tileno#1 draw_block::x1#0 mul8u::return#2 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::tileno#1 draw_block::x1#0 mul8u::return#2 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } { mul8u::a#1 = draw_block::y#1 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [21] (word) draw_block::z#0 ← (word) mul8u::return#2 [ draw_block::tileno#1 draw_block::x1#0 draw_block::z#0 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::tileno#1 draw_block::x1#0 draw_block::z#0 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [22] (word) draw_block::z#1 ← (word) draw_block::z#0 + (word) draw_block::x1#0 [ draw_block::tileno#1 draw_block::z#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::tileno#1 draw_block::z#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [24] (byte*~) draw_block::$11 ← (const nomodify byte*) screen + (word) draw_block::z#1 [ draw_block::z#1 draw_block::drawtile#0 draw_block::$11 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 draw_block::drawtile#0 draw_block::$11 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:29 [ draw_block::drawtile#0 ]
Statement [25] *((byte*~) draw_block::$11) ← (byte) draw_block::drawtile#0 [ draw_block::z#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::x#2 main::x#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:3 [ main::y#2 main::y#1 ]
Statement [26] (byte*~) draw_block::$12 ← (const nomodify byte*) colors + (word) draw_block::z#1 [ draw_block::z#1 draw_block::$12 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 draw_block::$12 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [27] *((byte*~) draw_block::$12) ← (const nomodify byte) YELLOW [ draw_block::z#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a reg byte y 
Statement [28] (byte*~) draw_block::$13 ← (const nomodify byte*) screen+(byte) 1 + (word) draw_block::z#1 [ draw_block::z#1 draw_block::$13 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 draw_block::$13 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [29] *((byte*~) draw_block::$13) ← (byte) 1 [ draw_block::z#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a reg byte y 
Statement [30] (byte*~) draw_block::$14 ← (const nomodify byte*) colors+(byte) 1 + (word) draw_block::z#1 [ draw_block::z#1 draw_block::$14 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 draw_block::$14 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [31] *((byte*~) draw_block::$14) ← (const nomodify byte) YELLOW [ draw_block::z#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a reg byte y 
Statement [32] (byte*~) draw_block::$15 ← (const nomodify byte*) screen+(byte) $28 + (word) draw_block::z#1 [ draw_block::z#1 draw_block::$15 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 draw_block::$15 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [33] *((byte*~) draw_block::$15) ← (byte) 2 [ draw_block::z#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a reg byte y 
Statement [34] (byte*~) draw_block::$16 ← (const nomodify byte*) colors+(byte) $28 + (word) draw_block::z#1 [ draw_block::z#1 draw_block::$16 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 draw_block::$16 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [35] *((byte*~) draw_block::$16) ← (const nomodify byte) YELLOW [ draw_block::z#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a reg byte y 
Statement [36] (byte*~) draw_block::$17 ← (const nomodify byte*) screen+(byte) $29 + (word) draw_block::z#1 [ draw_block::z#1 draw_block::$17 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 draw_block::$17 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [37] *((byte*~) draw_block::$17) ← (byte) 3 [ draw_block::z#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a reg byte y 
Statement [38] (byte*~) draw_block::$18 ← (const nomodify byte*) colors+(byte) $29 + (word) draw_block::z#1 [ draw_block::$18 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::$18 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [39] *((byte*~) draw_block::$18) ← (const nomodify byte) YELLOW [ ] ( draw_block:13 [ main::x#2 main::y#2 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a reg byte y 
Statement [47] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ( draw_block:13::mul8u:19 [ main::x#2 main::y#2 draw_block::tileno#1 draw_block::x1#0 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } { mul8u::a#1 = draw_block::y#1 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
Statement [58] *((const nomodify byte*) D018) ← (const byte) init::toD0181_return#0 [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement asm { lda#$5b sta$d011  } always clobbers reg byte a 
Statement [60] *((const nomodify byte*) BORDER_COLOR) ← (const nomodify byte) BLACK [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [61] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) BLACK [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [62] *((const nomodify byte*) BG_COLOR1) ← (const nomodify byte) RED [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [63] *((const nomodify byte*) BG_COLOR2) ← (const nomodify byte) BLUE [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [64] *((const nomodify byte*) BG_COLOR3) ← (const nomodify byte) GREEN [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [67] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) $3e8 [ memset::str#3 memset::c#4 memset::end#0 ] ( init:1::memset:54 [ memset::str#3 memset::c#4 memset::end#0 ] { }  init:1::memset:56 [ memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:11 [ memset::c#4 ]
Statement [68] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( init:1::memset:54 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  init:1::memset:56 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [70] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( init:1::memset:54 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  init:1::memset:56 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [72] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( init:1::memset:54 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  init:1::memset:56 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:11 [ memset::c#4 ]
Statement [74] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) 1 [ ] ( init:1::init_sprites:52 [ ] { }  ) always clobbers reg byte a 
Statement [75] *((const nomodify byte*) SPRITES_EXPAND_X) ← (byte) 0 [ ] ( init:1::init_sprites:52 [ ] { }  ) always clobbers reg byte a 
Statement [76] *((const nomodify byte*) SPRITES_EXPAND_Y) ← (byte) 0 [ ] ( init:1::init_sprites:52 [ ] { }  ) always clobbers reg byte a 
Statement [77] *((const nomodify byte*) SPRITES_XMSB) ← (byte) 0 [ ] ( init:1::init_sprites:52 [ ] { }  ) always clobbers reg byte a 
Statement [78] *((const nomodify byte*) SPRITES_COLOR) ← (const nomodify byte) WHITE [ ] ( init:1::init_sprites:52 [ ] { }  ) always clobbers reg byte a 
Statement [79] *((const nomodify byte*) SPRITES_MC) ← (byte) 0 [ ] ( init:1::init_sprites:52 [ ] { }  ) always clobbers reg byte a 
Statement [8] (byte) main::z#0 ← (byte) main::x#2 + (byte) main::y#2 [ main::x#2 main::y#2 main::z#0 ] (  [ main::x#2 main::y#2 main::z#0 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [15] (byte) draw_block::tileno#1 ← (byte) draw_block::tileno#0 << (byte) 2 [ draw_block::x#0 draw_block::y#0 draw_block::tileno#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::x#0 draw_block::y#0 draw_block::tileno#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } { mul8u::a#1 = draw_block::y#1 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [16] (word) draw_block::x1#0 ← (byte) draw_block::x#0 << (byte) 1 [ draw_block::y#0 draw_block::tileno#1 draw_block::x1#0 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::y#0 draw_block::tileno#1 draw_block::x1#0 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } { mul8u::a#1 = draw_block::y#1 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [17] (byte) draw_block::y#1 ← (byte) draw_block::y#0 << (byte) 1 [ draw_block::tileno#1 draw_block::x1#0 draw_block::y#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::tileno#1 draw_block::x1#0 draw_block::y#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } { mul8u::a#1 = draw_block::y#1 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [20] (word) mul8u::return#2 ← (word) mul8u::res#2 [ draw_block::tileno#1 draw_block::x1#0 mul8u::return#2 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::tileno#1 draw_block::x1#0 mul8u::return#2 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } { mul8u::a#1 = draw_block::y#1 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [21] (word) draw_block::z#0 ← (word) mul8u::return#2 [ draw_block::tileno#1 draw_block::x1#0 draw_block::z#0 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::tileno#1 draw_block::x1#0 draw_block::z#0 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [22] (word) draw_block::z#1 ← (word) draw_block::z#0 + (word) draw_block::x1#0 [ draw_block::tileno#1 draw_block::z#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::tileno#1 draw_block::z#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [24] (byte*~) draw_block::$11 ← (const nomodify byte*) screen + (word) draw_block::z#1 [ draw_block::z#1 draw_block::drawtile#0 draw_block::$11 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 draw_block::drawtile#0 draw_block::$11 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [25] *((byte*~) draw_block::$11) ← (byte) draw_block::drawtile#0 [ draw_block::z#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a reg byte y 
Statement [26] (byte*~) draw_block::$12 ← (const nomodify byte*) colors + (word) draw_block::z#1 [ draw_block::z#1 draw_block::$12 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 draw_block::$12 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [27] *((byte*~) draw_block::$12) ← (const nomodify byte) YELLOW [ draw_block::z#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a reg byte y 
Statement [28] (byte*~) draw_block::$13 ← (const nomodify byte*) screen+(byte) 1 + (word) draw_block::z#1 [ draw_block::z#1 draw_block::$13 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 draw_block::$13 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [29] *((byte*~) draw_block::$13) ← (byte) 1 [ draw_block::z#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a reg byte y 
Statement [30] (byte*~) draw_block::$14 ← (const nomodify byte*) colors+(byte) 1 + (word) draw_block::z#1 [ draw_block::z#1 draw_block::$14 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 draw_block::$14 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [31] *((byte*~) draw_block::$14) ← (const nomodify byte) YELLOW [ draw_block::z#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a reg byte y 
Statement [32] (byte*~) draw_block::$15 ← (const nomodify byte*) screen+(byte) $28 + (word) draw_block::z#1 [ draw_block::z#1 draw_block::$15 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 draw_block::$15 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [33] *((byte*~) draw_block::$15) ← (byte) 2 [ draw_block::z#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a reg byte y 
Statement [34] (byte*~) draw_block::$16 ← (const nomodify byte*) colors+(byte) $28 + (word) draw_block::z#1 [ draw_block::z#1 draw_block::$16 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 draw_block::$16 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [35] *((byte*~) draw_block::$16) ← (const nomodify byte) YELLOW [ draw_block::z#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a reg byte y 
Statement [36] (byte*~) draw_block::$17 ← (const nomodify byte*) screen+(byte) $29 + (word) draw_block::z#1 [ draw_block::z#1 draw_block::$17 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 draw_block::$17 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [37] *((byte*~) draw_block::$17) ← (byte) 3 [ draw_block::z#1 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::z#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a reg byte y 
Statement [38] (byte*~) draw_block::$18 ← (const nomodify byte*) colors+(byte) $29 + (word) draw_block::z#1 [ draw_block::$18 ] ( draw_block:13 [ main::x#2 main::y#2 draw_block::$18 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a 
Statement [39] *((byte*~) draw_block::$18) ← (const nomodify byte) YELLOW [ ] ( draw_block:13 [ main::x#2 main::y#2 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } }  ) always clobbers reg byte a reg byte y 
Statement [45] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 [ mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] ( draw_block:13::mul8u:19 [ main::x#2 main::y#2 draw_block::tileno#1 draw_block::x1#0 mul8u::res#2 mul8u::a#2 mul8u::mb#2 mul8u::$1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } { mul8u::a#1 = draw_block::y#1 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [47] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 [ mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] ( draw_block:13::mul8u:19 [ main::x#2 main::y#2 draw_block::tileno#1 draw_block::x1#0 mul8u::a#2 mul8u::mb#2 mul8u::res#1 ] { { draw_block::tileno#0 = main::tile#0 } { draw_block::x#0 = main::x#2 } { draw_block::y#0 = main::y#2 } { mul8u::a#1 = draw_block::y#1 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [58] *((const nomodify byte*) D018) ← (const byte) init::toD0181_return#0 [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement asm { lda#$5b sta$d011  } always clobbers reg byte a 
Statement [60] *((const nomodify byte*) BORDER_COLOR) ← (const nomodify byte) BLACK [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [61] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) BLACK [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [62] *((const nomodify byte*) BG_COLOR1) ← (const nomodify byte) RED [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [63] *((const nomodify byte*) BG_COLOR2) ← (const nomodify byte) BLUE [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [64] *((const nomodify byte*) BG_COLOR3) ← (const nomodify byte) GREEN [ ] ( init:1 [ ] { }  ) always clobbers reg byte a 
Statement [67] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) $3e8 [ memset::str#3 memset::c#4 memset::end#0 ] ( init:1::memset:54 [ memset::str#3 memset::c#4 memset::end#0 ] { }  init:1::memset:56 [ memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [68] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( init:1::memset:54 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  init:1::memset:56 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [70] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( init:1::memset:54 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  init:1::memset:56 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [72] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( init:1::memset:54 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  init:1::memset:56 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [74] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) 1 [ ] ( init:1::init_sprites:52 [ ] { }  ) always clobbers reg byte a 
Statement [75] *((const nomodify byte*) SPRITES_EXPAND_X) ← (byte) 0 [ ] ( init:1::init_sprites:52 [ ] { }  ) always clobbers reg byte a 
Statement [76] *((const nomodify byte*) SPRITES_EXPAND_Y) ← (byte) 0 [ ] ( init:1::init_sprites:52 [ ] { }  ) always clobbers reg byte a 
Statement [77] *((const nomodify byte*) SPRITES_XMSB) ← (byte) 0 [ ] ( init:1::init_sprites:52 [ ] { }  ) always clobbers reg byte a 
Statement [78] *((const nomodify byte*) SPRITES_COLOR) ← (const nomodify byte) WHITE [ ] ( init:1::init_sprites:52 [ ] { }  ) always clobbers reg byte a 
Statement [79] *((const nomodify byte*) SPRITES_MC) ← (byte) 0 [ ] ( init:1::init_sprites:52 [ ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::x#2 main::x#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[1]:3 [ main::y#2 main::y#1 ] : zp[1]:3 , reg byte x , 
Potential registers zp[1]:4 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[2]:5 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ mul8u::mb#2 mul8u::mb#1 ] : zp[2]:7 , 
Potential registers zp[2]:9 [ memset::str#3 ] : zp[2]:9 , 
Potential registers zp[1]:11 [ memset::c#4 ] : zp[1]:11 , reg byte x , 
Potential registers zp[2]:12 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:12 , 
Potential registers zp[1]:14 [ main::z#0 ] : zp[1]:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:15 [ main::tile#0 ] : zp[1]:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:16 [ draw_block::tileno#0 ] : zp[1]:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:17 [ draw_block::x#0 ] : zp[1]:17 , reg byte x , reg byte y , 
Potential registers zp[1]:18 [ draw_block::y#0 ] : zp[1]:18 , reg byte x , reg byte y , 
Potential registers zp[1]:19 [ draw_block::tileno#1 ] : zp[1]:19 , reg byte x , reg byte y , 
Potential registers zp[2]:20 [ draw_block::x1#0 ] : zp[2]:20 , 
Potential registers zp[1]:22 [ draw_block::y#1 ] : zp[1]:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:23 [ mul8u::return#2 ] : zp[2]:23 , 
Potential registers zp[2]:25 [ draw_block::z#0 ] : zp[2]:25 , 
Potential registers zp[2]:27 [ draw_block::z#1 ] : zp[2]:27 , 
Potential registers zp[1]:29 [ draw_block::drawtile#0 ] : zp[1]:29 , reg byte x , reg byte y , 
Potential registers zp[2]:30 [ draw_block::$11 ] : zp[2]:30 , 
Potential registers zp[2]:32 [ draw_block::$12 ] : zp[2]:32 , 
Potential registers zp[2]:34 [ draw_block::$13 ] : zp[2]:34 , 
Potential registers zp[2]:36 [ draw_block::$14 ] : zp[2]:36 , 
Potential registers zp[2]:38 [ draw_block::$15 ] : zp[2]:38 , 
Potential registers zp[2]:40 [ draw_block::$16 ] : zp[2]:40 , 
Potential registers zp[2]:42 [ draw_block::$17 ] : zp[2]:42 , 
Potential registers zp[2]:44 [ draw_block::$18 ] : zp[2]:44 , 
Potential registers zp[1]:46 [ mul8u::$1 ] : zp[1]:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:47 [ memset::end#0 ] : zp[2]:47 , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul8u] 35,000,170.33: zp[2]:5 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] 24,285,716.71: zp[2]:7 [ mul8u::mb#2 mul8u::mb#1 ] 20,000,002: zp[1]:46 [ mul8u::$1 ] 16,673,836.17: zp[1]:4 [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] 2,002: zp[2]:23 [ mul8u::return#2 ] 
Uplift Scope [draw_block] 2,002: zp[1]:22 [ draw_block::y#1 ] 2,002: zp[2]:25 [ draw_block::z#0 ] 2,002: zp[2]:30 [ draw_block::$11 ] 2,002: zp[2]:32 [ draw_block::$12 ] 2,002: zp[2]:34 [ draw_block::$13 ] 2,002: zp[2]:36 [ draw_block::$14 ] 2,002: zp[2]:38 [ draw_block::$15 ] 2,002: zp[2]:40 [ draw_block::$16 ] 2,002: zp[2]:42 [ draw_block::$17 ] 2,002: zp[2]:44 [ draw_block::$18 ] 1,001: zp[1]:29 [ draw_block::drawtile#0 ] 563.06: zp[2]:27 [ draw_block::z#1 ] 367.33: zp[1]:16 [ draw_block::tileno#0 ] 367.33: zp[1]:17 [ draw_block::x#0 ] 367.33: zp[1]:18 [ draw_block::y#0 ] 333.67: zp[2]:20 [ draw_block::x1#0 ] 250.25: zp[1]:19 [ draw_block::tileno#1 ] 
Uplift Scope [memset] 3,572.33: zp[2]:12 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 183.67: zp[2]:47 [ memset::end#0 ] 143: zp[1]:11 [ memset::c#4 ] 0: zp[2]:9 [ memset::str#3 ] 
Uplift Scope [main] 265.12: zp[1]:3 [ main::y#2 main::y#1 ] 202: zp[1]:14 [ main::z#0 ] 202: zp[1]:15 [ main::tile#0 ] 43.36: zp[1]:2 [ main::x#2 main::x#1 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [init] 
Uplift Scope [init_sprites] 
Uplift Scope [] 

Uplifting [mul8u] best 92884 combination zp[2]:5 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] zp[2]:7 [ mul8u::mb#2 mul8u::mb#1 ] reg byte a [ mul8u::$1 ] reg byte x [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ] zp[2]:23 [ mul8u::return#2 ] 
Uplifting [draw_block] best 92274 combination reg byte a [ draw_block::y#1 ] zp[2]:25 [ draw_block::z#0 ] zp[2]:30 [ draw_block::$11 ] zp[2]:32 [ draw_block::$12 ] zp[2]:34 [ draw_block::$13 ] zp[2]:36 [ draw_block::$14 ] zp[2]:38 [ draw_block::$15 ] zp[2]:40 [ draw_block::$16 ] zp[2]:42 [ draw_block::$17 ] zp[2]:44 [ draw_block::$18 ] reg byte x [ draw_block::drawtile#0 ] zp[2]:27 [ draw_block::z#1 ] reg byte y [ draw_block::tileno#0 ] reg byte x [ draw_block::x#0 ] zp[1]:18 [ draw_block::y#0 ] zp[2]:20 [ draw_block::x1#0 ] zp[1]:19 [ draw_block::tileno#1 ] 
Limited combination testing to 100 combinations of 1296 possible.
Uplifting [memset] best 92258 combination zp[2]:12 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:47 [ memset::end#0 ] reg byte x [ memset::c#4 ] zp[2]:9 [ memset::str#3 ] 
Uplifting [main] best 91258 combination zp[1]:3 [ main::y#2 main::y#1 ] reg byte a [ main::z#0 ] reg byte y [ main::tile#0 ] zp[1]:2 [ main::x#2 main::x#1 ] 
Uplifting [MOS6526_CIA] best 91258 combination 
Uplifting [MOS6569_VICII] best 91258 combination 
Uplifting [MOS6581_SID] best 91258 combination 
Uplifting [init] best 91258 combination 
Uplifting [init_sprites] best 91258 combination 
Uplifting [] best 91258 combination 
Attempting to uplift remaining variables inzp[1]:18 [ draw_block::y#0 ]
Uplifting [draw_block] best 91258 combination zp[1]:18 [ draw_block::y#0 ] 
Attempting to uplift remaining variables inzp[1]:3 [ main::y#2 main::y#1 ]
Uplifting [main] best 91258 combination zp[1]:3 [ main::y#2 main::y#1 ] 
Attempting to uplift remaining variables inzp[1]:19 [ draw_block::tileno#1 ]
Uplifting [draw_block] best 91254 combination reg byte y [ draw_block::tileno#1 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::x#2 main::x#1 ]
Uplifting [main] best 91254 combination zp[1]:2 [ main::x#2 main::x#1 ] 
Coalescing zero page register [ zp[1]:3 [ main::y#2 main::y#1 ] ] with [ zp[1]:18 [ draw_block::y#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:5 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] ] with [ zp[2]:23 [ mul8u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:9 [ memset::str#3 ] ] with [ zp[2]:12 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:20 [ draw_block::x1#0 ] ] with [ zp[2]:27 [ draw_block::z#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:5 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 ] ] with [ zp[2]:25 [ draw_block::z#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:20 [ draw_block::x1#0 draw_block::z#1 ] ] with [ zp[2]:44 [ draw_block::$18 ] ] - score: 1
Coalescing zero page register [ zp[2]:9 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ] with [ zp[2]:5 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 draw_block::z#0 ] ]
Coalescing zero page register [ zp[2]:30 [ draw_block::$11 ] ] with [ zp[2]:7 [ mul8u::mb#2 mul8u::mb#1 ] ]
Coalescing zero page register [ zp[2]:47 [ memset::end#0 ] ] with [ zp[2]:20 [ draw_block::x1#0 draw_block::z#1 draw_block::$18 ] ]
Allocated (was zp[2]:9) zp[2]:4 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 draw_block::z#0 ]
Allocated (was zp[2]:30) zp[2]:6 [ draw_block::$11 mul8u::mb#2 mul8u::mb#1 ]
Allocated (was zp[2]:32) zp[2]:8 [ draw_block::$12 ]
Allocated (was zp[2]:34) zp[2]:10 [ draw_block::$13 ]
Allocated (was zp[2]:36) zp[2]:12 [ draw_block::$14 ]
Allocated (was zp[2]:38) zp[2]:14 [ draw_block::$15 ]
Allocated (was zp[2]:40) zp[2]:16 [ draw_block::$16 ]
Allocated (was zp[2]:42) zp[2]:18 [ draw_block::$17 ]
Allocated (was zp[2]:47) zp[2]:20 [ memset::end#0 draw_block::x1#0 draw_block::z#1 draw_block::$18 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates a problem with a missing fragment - pbuc1_derefidx_vwuz1=vbuz2
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // The colors of the C64
  .const BLACK = 0
  .const WHITE = 1
  .const RED = 2
  .const GREEN = 5
  .const BLUE = 6
  .const YELLOW = 7
  .label SPRITES_XMSB = $d010
  .label SPRITES_COLOR = $d027
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label BORDER_COLOR = $d020
  .label BG_COLOR = $d021
  .label BG_COLOR1 = $d022
  .label BG_COLOR2 = $d023
  .label BG_COLOR3 = $d024
  .label D018 = $d018
  .label screen = $400
  .label charset = $2000
  .label tileset = $2800
  .label colors = $d800
  .label level_address = $3000
  // main
main: {
    .label y = 3
    .label x = 2
    // [1] call init 
    // [51] phi from main to init [phi:main->init]
  init_from_main:
    jsr init
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [2] phi (byte) main::x#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    jmp __b1
    // main::@1
  __b1:
    // [3] if((byte) main::x#2<(byte) $10) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x
    cmp #$10
    bcc __b2_from___b1
    // [4] phi from main::@1 main::@5 to main::@5 [phi:main::@1/main::@5->main::@5]
  __b5_from___b1:
  __b5_from___b5:
    jmp __b5
    // main::@5
  __b5:
    jmp __b5_from___b5
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [5] phi (byte) main::y#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    jmp __b2
    // main::@2
  __b2:
    // [6] if((byte) main::y#2<(byte) 9) goto main::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z y
    cmp #9
    bcc __b3
    jmp __b4
    // main::@4
  __b4:
    // [7] (byte) main::x#1 ← ++ (byte) main::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [2] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [2] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@4->main::@1#0] -- register_copy 
    jmp __b1
    // main::@3
  __b3:
    // [8] (byte) main::z#0 ← (byte) main::x#2 + (byte) main::y#2 -- vbuaa=vbuz1_plus_vbuz2 
    lda.z x
    clc
    adc.z y
    // [9] (byte) main::tile#0 ← *((const nomodify byte*) level_address + (byte) main::z#0) -- vbuyy=pbuc1_derefidx_vbuaa 
    tax
    ldy level_address,x
    // [10] (byte) draw_block::tileno#0 ← (byte) main::tile#0
    // [11] (byte) draw_block::x#0 ← (byte) main::x#2 -- vbuxx=vbuz1 
    ldx.z x
    // [12] (byte) draw_block::y#0 ← (byte) main::y#2
    // [13] call draw_block 
    jsr draw_block
    jmp __b6
    // main::@6
  __b6:
    // [14] (byte) main::y#1 ← ++ (byte) main::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [5] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  __b2_from___b6:
    // [5] phi (byte) main::y#2 = (byte) main::y#1 [phi:main::@6->main::@2#0] -- register_copy 
    jmp __b2
}
  // draw_block
// draw_block(byte register(Y) tileno, byte register(X) x, byte zp(3) y)
draw_block: {
    .label y = 3
    .label x1 = $14
    .label z = 4
    .label z_1 = $14
    .label __11 = 6
    .label __12 = 8
    .label __13 = $a
    .label __14 = $c
    .label __15 = $e
    .label __16 = $10
    .label __17 = $12
    .label __18 = $14
    // [15] (byte) draw_block::tileno#1 ← (byte) draw_block::tileno#0 << (byte) 2 -- vbuyy=vbuyy_rol_2 
    tya
    asl
    asl
    tay
    // [16] (word) draw_block::x1#0 ← (byte) draw_block::x#0 << (byte) 1 -- vwuz1=vbuxx_rol_1 
    txa
    asl
    sta.z x1
    lda #0
    rol
    sta.z x1+1
    // [17] (byte) draw_block::y#1 ← (byte) draw_block::y#0 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z y
    asl
    // [18] (byte) mul8u::a#1 ← (byte) draw_block::y#1 -- vbuxx=vbuaa 
    tax
    // [19] call mul8u 
    // [41] phi from draw_block to mul8u [phi:draw_block->mul8u]
  mul8u_from_draw_block:
    jsr mul8u
    // [20] (word) mul8u::return#2 ← (word) mul8u::res#2
    jmp __b1
    // draw_block::@1
  __b1:
    // [21] (word) draw_block::z#0 ← (word) mul8u::return#2
    // [22] (word) draw_block::z#1 ← (word) draw_block::z#0 + (word) draw_block::x1#0 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z z_1
    clc
    adc.z z
    sta.z z_1
    lda.z z_1+1
    adc.z z+1
    sta.z z_1+1
    // [23] (byte) draw_block::drawtile#0 ← *((const nomodify byte*) tileset + (byte) draw_block::tileno#1) -- vbuxx=pbuc1_derefidx_vbuyy 
    ldx tileset,y
    // [24] (byte*~) draw_block::$11 ← (const nomodify byte*) screen + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<screen
    sta.z __11
    lda.z z_1+1
    adc #>screen
    sta.z __11+1
    // [25] *((byte*~) draw_block::$11) ← (byte) draw_block::drawtile#0 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (__11),y
    // [26] (byte*~) draw_block::$12 ← (const nomodify byte*) colors + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<colors
    sta.z __12
    lda.z z_1+1
    adc #>colors
    sta.z __12+1
    // [27] *((byte*~) draw_block::$12) ← (const nomodify byte) YELLOW -- _deref_pbuz1=vbuc1 
    lda #YELLOW
    ldy #0
    sta (__12),y
    // [28] (byte*~) draw_block::$13 ← (const nomodify byte*) screen+(byte) 1 + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<screen+1
    sta.z __13
    lda.z z_1+1
    adc #>screen+1
    sta.z __13+1
    // [29] *((byte*~) draw_block::$13) ← (byte) 1 -- _deref_pbuz1=vbuc1 
    lda #1
    ldy #0
    sta (__13),y
    // [30] (byte*~) draw_block::$14 ← (const nomodify byte*) colors+(byte) 1 + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<colors+1
    sta.z __14
    lda.z z_1+1
    adc #>colors+1
    sta.z __14+1
    // [31] *((byte*~) draw_block::$14) ← (const nomodify byte) YELLOW -- _deref_pbuz1=vbuc1 
    lda #YELLOW
    ldy #0
    sta (__14),y
    // [32] (byte*~) draw_block::$15 ← (const nomodify byte*) screen+(byte) $28 + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<screen+$28
    sta.z __15
    lda.z z_1+1
    adc #>screen+$28
    sta.z __15+1
    // [33] *((byte*~) draw_block::$15) ← (byte) 2 -- _deref_pbuz1=vbuc1 
    lda #2
    ldy #0
    sta (__15),y
    // [34] (byte*~) draw_block::$16 ← (const nomodify byte*) colors+(byte) $28 + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<colors+$28
    sta.z __16
    lda.z z_1+1
    adc #>colors+$28
    sta.z __16+1
    // [35] *((byte*~) draw_block::$16) ← (const nomodify byte) YELLOW -- _deref_pbuz1=vbuc1 
    lda #YELLOW
    ldy #0
    sta (__16),y
    // [36] (byte*~) draw_block::$17 ← (const nomodify byte*) screen+(byte) $29 + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<screen+$29
    sta.z __17
    lda.z z_1+1
    adc #>screen+$29
    sta.z __17+1
    // [37] *((byte*~) draw_block::$17) ← (byte) 3 -- _deref_pbuz1=vbuc1 
    lda #3
    ldy #0
    sta (__17),y
    // [38] (byte*~) draw_block::$18 ← (const nomodify byte*) colors+(byte) $29 + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __18
    adc #<colors+$29
    sta.z __18
    lda.z __18+1
    adc #>colors+$29
    sta.z __18+1
    // [39] *((byte*~) draw_block::$18) ← (const nomodify byte) YELLOW -- _deref_pbuz1=vbuc1 
    lda #YELLOW
    ldy #0
    sta (__18),y
    jmp __breturn
    // draw_block::@return
  __breturn:
    // [40] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte register(X) a)
mul8u: {
    .const b = $28
    .label mb = 6
    .label res = 4
    .label return = 4
    // [42] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  __b1_from_mul8u:
    // [42] phi (word) mul8u::mb#2 = (word)(const byte) mul8u::b#0 [phi:mul8u->mul8u::@1#0] -- vwuz1=vwuc1 
    lda #<b
    sta.z mb
    lda #>b
    sta.z mb+1
    // [42] phi (word) mul8u::res#2 = (word) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [42] phi (byte) mul8u::a#2 = (byte) mul8u::a#1 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp __b1
    // mul8u::@1
  __b1:
    // [43] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    jmp __breturn
    // mul8u::@return
  __breturn:
    // [44] return 
    rts
    // mul8u::@2
  __b2:
    // [45] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [46] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul8u::@4
  __b4:
    // [47] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [48] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [48] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp __b3
    // mul8u::@3
  __b3:
    // [49] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // [50] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [42] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  __b1_from___b3:
    // [42] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [42] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [42] phi (byte) mul8u::a#2 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // init
init: {
    .const toD0181_return = (>(screen&$3fff)*4)|(>charset)/4&$f
    // [52] call init_sprites 
    jsr init_sprites
    // [53] phi from init to init::@2 [phi:init->init::@2]
  __b2_from_init:
    jmp __b2
    // init::@2
  __b2:
    // [54] call memset 
    // [66] phi from init::@2 to memset [phi:init::@2->memset]
  memset_from___b2:
    // [66] phi (byte) memset::c#4 = (byte) 0 [phi:init::@2->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [66] phi (void*) memset::str#3 = (void*)(const nomodify byte*) screen [phi:init::@2->memset#1] -- pvoz1=pvoc1 
    lda #<screen
    sta.z memset.str
    lda #>screen
    sta.z memset.str+1
    jsr memset
    // [55] phi from init::@2 to init::@3 [phi:init::@2->init::@3]
  __b3_from___b2:
    jmp __b3
    // init::@3
  __b3:
    // [56] call memset 
    // [66] phi from init::@3 to memset [phi:init::@3->memset]
  memset_from___b3:
    // [66] phi (byte) memset::c#4 = (const nomodify byte) BLACK [phi:init::@3->memset#0] -- vbuxx=vbuc1 
    ldx #BLACK
    // [66] phi (void*) memset::str#3 = (void*)(const nomodify byte*) colors [phi:init::@3->memset#1] -- pvoz1=pvoc1 
    lda #<colors
    sta.z memset.str
    lda #>colors
    sta.z memset.str+1
    jsr memset
    // [57] phi from init::@3 to init::toD0181 [phi:init::@3->init::toD0181]
  toD0181_from___b3:
    jmp toD0181
    // init::toD0181
  toD0181:
    jmp __b1
    // init::@1
  __b1:
    // [58] *((const nomodify byte*) D018) ← (const byte) init::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // asm { lda#$5b sta$d011  }
    lda #$5b
    sta $d011
    // [60] *((const nomodify byte*) BORDER_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDER_COLOR
    // [61] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BG_COLOR
    // [62] *((const nomodify byte*) BG_COLOR1) ← (const nomodify byte) RED -- _deref_pbuc1=vbuc2 
    lda #RED
    sta BG_COLOR1
    // [63] *((const nomodify byte*) BG_COLOR2) ← (const nomodify byte) BLUE -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BG_COLOR2
    // [64] *((const nomodify byte*) BG_COLOR3) ← (const nomodify byte) GREEN -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BG_COLOR3
    jmp __breturn
    // init::@return
  __breturn:
    // [65] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(4) str, byte register(X) c)
memset: {
    .label end = $14
    .label dst = 4
    .label str = 4
    jmp __b1
    // memset::@1
  __b1:
    // [67] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) $3e8 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z str
    clc
    adc #<$3e8
    sta.z end
    lda.z str+1
    adc #>$3e8
    sta.z end+1
    // [68] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [69] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [69] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [70] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [71] return 
    rts
    // memset::@3
  __b3:
    // [72] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [73] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // init_sprites
init_sprites: {
    // [74] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta SPRITES_ENABLE
    // [75] *((const nomodify byte*) SPRITES_EXPAND_X) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // one sprite enabled
    lda #0
    sta SPRITES_EXPAND_X
    // [76] *((const nomodify byte*) SPRITES_EXPAND_Y) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_EXPAND_Y
    // [77] *((const nomodify byte*) SPRITES_XMSB) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_XMSB
    // [78] *((const nomodify byte*) SPRITES_COLOR) ← (const nomodify byte) WHITE -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta SPRITES_COLOR
    // [79] *((const nomodify byte*) SPRITES_MC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
    jmp __breturn
    // init_sprites::@return
  __breturn:
    // [80] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b5
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp toD0181
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction lda #>0
Removing instruction lda #BLACK
Removing instruction lda #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b5_from___b5 with __b5
Replacing label __b3_from___b2 with __b3
Replacing label __b2_from___b3 with __b2
Removing instruction __b5_from___b1:
Removing instruction __b5_from___b5:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Removing instruction __b2_from_init:
Removing instruction memset_from___b2:
Removing instruction __b3_from___b2:
Removing instruction memset_from___b3:
Removing instruction toD0181_from___b3:
Removing instruction toD0181:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction init_from_main:
Removing instruction __b1_from_main:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b2_from___b6:
Removing instruction mul8u_from_draw_block:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_mul8u:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Relabelling long label __b2_from___b1 to __b4
Succesful ASM optimization Pass5RelabelLongLabels

FINAL SYMBOL TABLE
(const nomodify byte*) BG_COLOR = (byte*) 53281
(const nomodify byte*) BG_COLOR1 = (byte*) 53282
(const nomodify byte*) BG_COLOR2 = (byte*) 53283
(const nomodify byte*) BG_COLOR3 = (byte*) 53284
(const nomodify byte) BLACK = (byte) 0
(const nomodify byte) BLUE = (byte) 6
(const nomodify byte*) BORDER_COLOR = (byte*) 53280
(const nomodify byte*) D018 = (byte*) 53272
(const nomodify byte) GREEN = (byte) 5
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const nomodify byte) RED = (byte) 2
(const nomodify byte*) SPRITES_COLOR = (byte*) 53287
(const nomodify byte*) SPRITES_ENABLE = (byte*) 53269
(const nomodify byte*) SPRITES_EXPAND_X = (byte*) 53277
(const nomodify byte*) SPRITES_EXPAND_Y = (byte*) 53271
(const nomodify byte*) SPRITES_MC = (byte*) 53276
(const nomodify byte*) SPRITES_XMSB = (byte*) 53264
(const nomodify byte) WHITE = (byte) 1
(const nomodify byte) YELLOW = (byte) 7
(const nomodify byte*) charset = (byte*) 8192
(const nomodify byte*) colors = (byte*) 55296
(void()) draw_block((byte) draw_block::tileno , (byte) draw_block::x , (byte) draw_block::y , (byte) draw_block::color)
(byte*~) draw_block::$11 zp[2]:6 2002.0
(byte*~) draw_block::$12 zp[2]:8 2002.0
(byte*~) draw_block::$13 zp[2]:10 2002.0
(byte*~) draw_block::$14 zp[2]:12 2002.0
(byte*~) draw_block::$15 zp[2]:14 2002.0
(byte*~) draw_block::$16 zp[2]:16 2002.0
(byte*~) draw_block::$17 zp[2]:18 2002.0
(byte*~) draw_block::$18 zp[2]:20 2002.0
(label) draw_block::@1
(label) draw_block::@return
(byte) draw_block::color
(byte) draw_block::drawtile
(byte) draw_block::drawtile#0 reg byte x 1001.0
(byte) draw_block::tileno
(byte) draw_block::tileno#0 reg byte y 367.33333333333337
(byte) draw_block::tileno#1 reg byte y 250.25
(byte) draw_block::x
(byte) draw_block::x#0 reg byte x 367.33333333333337
(word) draw_block::x1
(word) draw_block::x1#0 x1 zp[2]:20 333.6666666666667
(byte) draw_block::y
(byte) draw_block::y#0 y zp[1]:3 367.33333333333337
(byte) draw_block::y#1 reg byte a 2002.0
(word) draw_block::z
(word) draw_block::z#0 z zp[2]:4 2002.0
(word) draw_block::z#1 z_1 zp[2]:20 563.0625
(void()) init()
(label) init::@1
(label) init::@2
(label) init::@3
(label) init::@return
(label) init::toD0181
(byte*) init::toD0181_gfx
(byte) init::toD0181_return
(const byte) init::toD0181_return#0 toD0181_return = >(word)(const nomodify byte*) screen&(word) $3fff*(byte) 4|>(word)(const nomodify byte*) charset/(byte) 4&(byte) $f
(byte*) init::toD0181_screen
(void()) init_sprites()
(label) init_sprites::@return
(const nomodify byte*) level_address = (byte*) 12288
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(byte) main::tile
(byte) main::tile#0 reg byte y 202.0
(byte) main::x
(byte) main::x#1 x zp[1]:2 22.0
(byte) main::x#2 x zp[1]:2 21.363636363636363
(byte) main::y
(byte) main::y#1 y zp[1]:3 202.0
(byte) main::y#2 y zp[1]:3 63.125
(byte) main::z
(byte) main::z#0 reg byte a 202.0
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(byte) memset::c#4 reg byte x 143.0
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:4 2002.0
(byte*) memset::dst#2 dst zp[2]:4 1368.3333333333335
(byte*) memset::dst#4 dst zp[2]:4 202.0
(byte*) memset::end
(byte*) memset::end#0 end zp[2]:20 183.66666666666669
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp[2]:4
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 reg byte a 2.0000002E7
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0 reg byte x 1.0000001E7
(byte) mul8u::a#1 reg byte x 5501.0
(byte) mul8u::a#2 reg byte x 6668334.166666666
(byte) mul8u::b
(const byte) mul8u::b#0 b = (byte) $28
(word) mul8u::mb
(word) mul8u::mb#1 mb zp[2]:6 2.0000002E7
(word) mul8u::mb#2 mb zp[2]:6 4285714.714285715
(word) mul8u::res
(word) mul8u::res#1 res zp[2]:4 2.0000002E7
(word) mul8u::res#2 res zp[2]:4 5000167.333333333
(word) mul8u::res#6 res zp[2]:4 1.0000001E7
(word) mul8u::return
(word) mul8u::return#2 return zp[2]:4 2002.0
(const nomodify byte*) screen = (byte*) 1024
(const nomodify byte*) tileset = (byte*) 10240

zp[1]:2 [ main::x#2 main::x#1 ]
zp[1]:3 [ main::y#2 main::y#1 draw_block::y#0 ]
reg byte x [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
zp[2]:4 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 draw_block::z#0 ]
reg byte x [ memset::c#4 ]
reg byte a [ main::z#0 ]
reg byte y [ main::tile#0 ]
reg byte y [ draw_block::tileno#0 ]
reg byte x [ draw_block::x#0 ]
reg byte y [ draw_block::tileno#1 ]
reg byte a [ draw_block::y#1 ]
reg byte x [ draw_block::drawtile#0 ]
zp[2]:6 [ draw_block::$11 mul8u::mb#2 mul8u::mb#1 ]
zp[2]:8 [ draw_block::$12 ]
zp[2]:10 [ draw_block::$13 ]
zp[2]:12 [ draw_block::$14 ]
zp[2]:14 [ draw_block::$15 ]
zp[2]:16 [ draw_block::$16 ]
zp[2]:18 [ draw_block::$17 ]
reg byte a [ mul8u::$1 ]
zp[2]:20 [ memset::end#0 draw_block::x1#0 draw_block::z#1 draw_block::$18 ]


FINAL ASSEMBLER
Score: 75497

  // File Comments
// Illustrates a problem with a missing fragment - pbuc1_derefidx_vwuz1=vbuz2
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // The colors of the C64
  .const BLACK = 0
  .const WHITE = 1
  .const RED = 2
  .const GREEN = 5
  .const BLUE = 6
  .const YELLOW = 7
  .label SPRITES_XMSB = $d010
  .label SPRITES_COLOR = $d027
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label BORDER_COLOR = $d020
  .label BG_COLOR = $d021
  .label BG_COLOR1 = $d022
  .label BG_COLOR2 = $d023
  .label BG_COLOR3 = $d024
  .label D018 = $d018
  .label screen = $400
  .label charset = $2000
  .label tileset = $2800
  .label colors = $d800
  .label level_address = $3000
  // main
main: {
    .label y = 3
    .label x = 2
    // init()
    // [1] call init 
    // [51] phi from main to init [phi:main->init]
    jsr init
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // [2] phi (byte) main::x#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // main::@1
  __b1:
    // for (byte x = 0; x < 16; x++ )
    // [3] if((byte) main::x#2<(byte) $10) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x
    cmp #$10
    bcc __b4
    // [4] phi from main::@1 main::@5 to main::@5 [phi:main::@1/main::@5->main::@5]
    // main::@5
  __b5:
    jmp __b5
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b4:
    // [5] phi (byte) main::y#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // main::@2
  __b2:
    // for (byte y = 0; y < 9; y++)
    // [6] if((byte) main::y#2<(byte) 9) goto main::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z y
    cmp #9
    bcc __b3
    // main::@4
    // for (byte x = 0; x < 16; x++ )
    // [7] (byte) main::x#1 ← ++ (byte) main::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [2] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [2] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@4->main::@1#0] -- register_copy 
    jmp __b1
    // main::@3
  __b3:
    // z = x+y
    // [8] (byte) main::z#0 ← (byte) main::x#2 + (byte) main::y#2 -- vbuaa=vbuz1_plus_vbuz2 
    lda.z x
    clc
    adc.z y
    // tile = level_address[z]
    // [9] (byte) main::tile#0 ← *((const nomodify byte*) level_address + (byte) main::z#0) -- vbuyy=pbuc1_derefidx_vbuaa 
    tax
    ldy level_address,x
    // draw_block(tile,x,y,YELLOW)
    // [10] (byte) draw_block::tileno#0 ← (byte) main::tile#0
    // [11] (byte) draw_block::x#0 ← (byte) main::x#2 -- vbuxx=vbuz1 
    ldx.z x
    // [12] (byte) draw_block::y#0 ← (byte) main::y#2
    // [13] call draw_block 
    jsr draw_block
    // main::@6
    // for (byte y = 0; y < 9; y++)
    // [14] (byte) main::y#1 ← ++ (byte) main::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [5] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
    // [5] phi (byte) main::y#2 = (byte) main::y#1 [phi:main::@6->main::@2#0] -- register_copy 
    jmp __b2
}
  // draw_block
// draw_block(byte register(Y) tileno, byte register(X) x, byte zp(3) y)
draw_block: {
    .label y = 3
    .label x1 = $14
    .label z = 4
    .label z_1 = $14
    .label __11 = 6
    .label __12 = 8
    .label __13 = $a
    .label __14 = $c
    .label __15 = $e
    .label __16 = $10
    .label __17 = $12
    .label __18 = $14
    // tileno = tileno << 2
    // [15] (byte) draw_block::tileno#1 ← (byte) draw_block::tileno#0 << (byte) 2 -- vbuyy=vbuyy_rol_2 
    tya
    asl
    asl
    tay
    // x1 = x << 1
    // [16] (word) draw_block::x1#0 ← (byte) draw_block::x#0 << (byte) 1 -- vwuz1=vbuxx_rol_1 
    txa
    asl
    sta.z x1
    lda #0
    rol
    sta.z x1+1
    // y = y << 1
    // [17] (byte) draw_block::y#1 ← (byte) draw_block::y#0 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda.z y
    asl
    // mul8u(y,40)
    // [18] (byte) mul8u::a#1 ← (byte) draw_block::y#1 -- vbuxx=vbuaa 
    tax
    // [19] call mul8u 
    // [41] phi from draw_block to mul8u [phi:draw_block->mul8u]
    jsr mul8u
    // mul8u(y,40)
    // [20] (word) mul8u::return#2 ← (word) mul8u::res#2
    // draw_block::@1
    // z = mul8u(y,40)
    // [21] (word) draw_block::z#0 ← (word) mul8u::return#2
    // z = z + x1
    // [22] (word) draw_block::z#1 ← (word) draw_block::z#0 + (word) draw_block::x1#0 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z z_1
    clc
    adc.z z
    sta.z z_1
    lda.z z_1+1
    adc.z z+1
    sta.z z_1+1
    // drawtile = tileset[tileno]
    // [23] (byte) draw_block::drawtile#0 ← *((const nomodify byte*) tileset + (byte) draw_block::tileno#1) -- vbuxx=pbuc1_derefidx_vbuyy 
    ldx tileset,y
    // screen[z] = drawtile
    // [24] (byte*~) draw_block::$11 ← (const nomodify byte*) screen + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<screen
    sta.z __11
    lda.z z_1+1
    adc #>screen
    sta.z __11+1
    // [25] *((byte*~) draw_block::$11) ← (byte) draw_block::drawtile#0 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (__11),y
    // colors[z] = YELLOW
    // [26] (byte*~) draw_block::$12 ← (const nomodify byte*) colors + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<colors
    sta.z __12
    lda.z z_1+1
    adc #>colors
    sta.z __12+1
    // [27] *((byte*~) draw_block::$12) ← (const nomodify byte) YELLOW -- _deref_pbuz1=vbuc1 
    lda #YELLOW
    sta (__12),y
    // screen[z+1] = 1
    // [28] (byte*~) draw_block::$13 ← (const nomodify byte*) screen+(byte) 1 + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<screen+1
    sta.z __13
    lda.z z_1+1
    adc #>screen+1
    sta.z __13+1
    // [29] *((byte*~) draw_block::$13) ← (byte) 1 -- _deref_pbuz1=vbuc1 
    lda #1
    sta (__13),y
    // colors[z+1] = YELLOW
    // [30] (byte*~) draw_block::$14 ← (const nomodify byte*) colors+(byte) 1 + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<colors+1
    sta.z __14
    lda.z z_1+1
    adc #>colors+1
    sta.z __14+1
    // [31] *((byte*~) draw_block::$14) ← (const nomodify byte) YELLOW -- _deref_pbuz1=vbuc1 
    lda #YELLOW
    sta (__14),y
    // screen[z+40] = 2
    // [32] (byte*~) draw_block::$15 ← (const nomodify byte*) screen+(byte) $28 + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<screen+$28
    sta.z __15
    lda.z z_1+1
    adc #>screen+$28
    sta.z __15+1
    // [33] *((byte*~) draw_block::$15) ← (byte) 2 -- _deref_pbuz1=vbuc1 
    lda #2
    sta (__15),y
    // colors[z+40] = YELLOW
    // [34] (byte*~) draw_block::$16 ← (const nomodify byte*) colors+(byte) $28 + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<colors+$28
    sta.z __16
    lda.z z_1+1
    adc #>colors+$28
    sta.z __16+1
    // [35] *((byte*~) draw_block::$16) ← (const nomodify byte) YELLOW -- _deref_pbuz1=vbuc1 
    lda #YELLOW
    sta (__16),y
    // screen[z+41] = 3
    // [36] (byte*~) draw_block::$17 ← (const nomodify byte*) screen+(byte) $29 + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z z_1
    clc
    adc #<screen+$29
    sta.z __17
    lda.z z_1+1
    adc #>screen+$29
    sta.z __17+1
    // [37] *((byte*~) draw_block::$17) ← (byte) 3 -- _deref_pbuz1=vbuc1 
    lda #3
    sta (__17),y
    // colors[z+41] = YELLOW
    // [38] (byte*~) draw_block::$18 ← (const nomodify byte*) colors+(byte) $29 + (word) draw_block::z#1 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __18
    adc #<colors+$29
    sta.z __18
    lda.z __18+1
    adc #>colors+$29
    sta.z __18+1
    // [39] *((byte*~) draw_block::$18) ← (const nomodify byte) YELLOW -- _deref_pbuz1=vbuc1 
    lda #YELLOW
    sta (__18),y
    // draw_block::@return
    // }
    // [40] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// mul8u(byte register(X) a)
mul8u: {
    .const b = $28
    .label mb = 6
    .label res = 4
    .label return = 4
    // [42] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
    // [42] phi (word) mul8u::mb#2 = (word)(const byte) mul8u::b#0 [phi:mul8u->mul8u::@1#0] -- vwuz1=vwuc1 
    lda #<b
    sta.z mb
    lda #>b
    sta.z mb+1
    // [42] phi (word) mul8u::res#2 = (word) 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z res
    sta.z res+1
    // [42] phi (byte) mul8u::a#2 = (byte) mul8u::a#1 [phi:mul8u->mul8u::@1#2] -- register_copy 
    // mul8u::@1
  __b1:
    // while(a!=0)
    // [43] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    // mul8u::@return
    // }
    // [44] return 
    rts
    // mul8u::@2
  __b2:
    // a&1
    // [45] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if( (a&1) != 0)
    // [46] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // mul8u::@4
    // res = res + mb
    // [47] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z res
    clc
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [48] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
    // [48] phi (word) mul8u::res#6 = (word) mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    // mul8u::@3
  __b3:
    // a = a>>1
    // [49] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // mb = mb<<1
    // [50] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [42] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
    // [42] phi (word) mul8u::mb#2 = (word) mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [42] phi (word) mul8u::res#2 = (word) mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [42] phi (byte) mul8u::a#2 = (byte) mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // init
init: {
    .const toD0181_return = (>(screen&$3fff)*4)|(>charset)/4&$f
    // init_sprites()
    // [52] call init_sprites 
    jsr init_sprites
    // [53] phi from init to init::@2 [phi:init->init::@2]
    // init::@2
    // memset(screen, 0, 1000)
    // [54] call memset 
    // [66] phi from init::@2 to memset [phi:init::@2->memset]
    // [66] phi (byte) memset::c#4 = (byte) 0 [phi:init::@2->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [66] phi (void*) memset::str#3 = (void*)(const nomodify byte*) screen [phi:init::@2->memset#1] -- pvoz1=pvoc1 
    lda #<screen
    sta.z memset.str
    lda #>screen
    sta.z memset.str+1
    jsr memset
    // [55] phi from init::@2 to init::@3 [phi:init::@2->init::@3]
    // init::@3
    // memset(colors, BLACK, 1000)
    // [56] call memset 
    // [66] phi from init::@3 to memset [phi:init::@3->memset]
    // [66] phi (byte) memset::c#4 = (const nomodify byte) BLACK [phi:init::@3->memset#0] -- vbuxx=vbuc1 
    ldx #BLACK
    // [66] phi (void*) memset::str#3 = (void*)(const nomodify byte*) colors [phi:init::@3->memset#1] -- pvoz1=pvoc1 
    lda #<colors
    sta.z memset.str
    lda #>colors
    sta.z memset.str+1
    jsr memset
    // [57] phi from init::@3 to init::toD0181 [phi:init::@3->init::toD0181]
    // init::toD0181
    // init::@1
    // *D018 = toD018(screen, charset)
    // [58] *((const nomodify byte*) D018) ← (const byte) init::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // asm
    // asm { lda#$5b sta$d011  }
    lda #$5b
    sta $d011
    // *BORDER_COLOR = BLACK
    // [60] *((const nomodify byte*) BORDER_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDER_COLOR
    // *BG_COLOR = BLACK
    // [61] *((const nomodify byte*) BG_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    sta BG_COLOR
    // *BG_COLOR1 = RED
    // [62] *((const nomodify byte*) BG_COLOR1) ← (const nomodify byte) RED -- _deref_pbuc1=vbuc2 
    lda #RED
    sta BG_COLOR1
    // *BG_COLOR2 = BLUE
    // [63] *((const nomodify byte*) BG_COLOR2) ← (const nomodify byte) BLUE -- _deref_pbuc1=vbuc2 
    lda #BLUE
    sta BG_COLOR2
    // *BG_COLOR3 = GREEN
    // [64] *((const nomodify byte*) BG_COLOR3) ← (const nomodify byte) GREEN -- _deref_pbuc1=vbuc2 
    lda #GREEN
    sta BG_COLOR3
    // init::@return
    // }
    // [65] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(4) str, byte register(X) c)
memset: {
    .label end = $14
    .label dst = 4
    .label str = 4
    // memset::@1
    // end = (char*)str + num
    // [67] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) $3e8 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z str
    clc
    adc #<$3e8
    sta.z end
    lda.z str+1
    adc #>$3e8
    sta.z end+1
    // [68] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [69] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [69] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [70] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
    // }
    // [71] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [72] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [73] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // init_sprites
init_sprites: {
    // *SPRITES_ENABLE = %00000001
    // [74] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta SPRITES_ENABLE
    // *SPRITES_EXPAND_X = 0
    // [75] *((const nomodify byte*) SPRITES_EXPAND_X) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // one sprite enabled
    lda #0
    sta SPRITES_EXPAND_X
    // *SPRITES_EXPAND_Y = 0
    // [76] *((const nomodify byte*) SPRITES_EXPAND_Y) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta SPRITES_EXPAND_Y
    // *SPRITES_XMSB = 0
    // [77] *((const nomodify byte*) SPRITES_XMSB) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta SPRITES_XMSB
    // *SPRITES_COLOR = WHITE
    // [78] *((const nomodify byte*) SPRITES_COLOR) ← (const nomodify byte) WHITE -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta SPRITES_COLOR
    // *SPRITES_MC = 0
    // [79] *((const nomodify byte*) SPRITES_MC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
    // init_sprites::@return
    // }
    // [80] return 
    rts
}
  // File Data

