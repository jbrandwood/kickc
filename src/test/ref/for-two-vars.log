
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::sc#0 = main::SCREEN+$27
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::sc#3 = phi( main/main::sc#0, main::@2/main::sc#1 )
  main::i#2 = phi( main/main::i#0, main::@2/main::i#1 )
  main::$0 = main::i#2 < $28
  if(main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::sc#2 = phi( main::@1/main::sc#3 )
  main::i#3 = phi( main::@1/main::i#2 )
  *main::sc#2 = main::i#3
  main::i#1 = ++ main::i#3
  main::sc#1 = -- main::sc#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
bool~ main::$0
const nomodify byte* main::SCREEN = (byte*)$400
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte* main::sc
byte* main::sc#0
byte* main::sc#1
byte* main::sc#2
byte* main::sc#3

Adding number conversion cast (unumber) $27 in main::sc#0 = main::SCREEN+$27
Adding number conversion cast (unumber) $28 in main::$0 = main::i#2 < $28
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $27
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $27
Finalized unsigned number type $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::i#2 = main::i#3 
Alias main::sc#2 = main::sc#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$0 [4] if(main::i#2<$28) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::sc#0 = main::SCREEN+$27
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::sc#0
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Constant inlined main::sc#0 = main::SCREEN+$27
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [7] main::i#4 = main::i#1
Coalesced [8] main::sc#4 = main::sc#1
Coalesced down to 2 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] main::sc#2 = phi( main/main::SCREEN+$27, main::@2/main::sc#1 )
  [1] main::i#2 = phi( main/0, main::@2/main::i#1 )
  [2] if(main::i#2<$28) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [3] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [4] *main::sc#2 = main::i#2
  [5] main::i#1 = ++ main::i#2
  [6] main::sc#1 = -- main::sc#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
byte main::i
byte main::i#1 11.0
byte main::i#2 14.666666666666666
byte* main::sc
byte* main::sc#1 22.0
byte* main::sc#2 8.25

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::sc#2 main::sc#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::sc#2 main::sc#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:3 [ main::sc#2 main::sc#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *main::sc#2 = main::i#2 [ main::i#2 main::sc#2 ] (  [ main::i#2 main::sc#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [6] main::sc#1 = -- main::sc#2 [ main::i#1 main::sc#1 ] (  [ main::i#1 main::sc#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [4] *main::sc#2 = main::i#2 [ main::i#2 main::sc#2 ] (  [ main::i#2 main::sc#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [6] main::sc#1 = -- main::sc#2 [ main::i#1 main::sc#1 ] (  [ main::i#1 main::sc#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[2]:3 [ main::sc#2 main::sc#1 ] : zp[2]:3 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 30.25: zp[2]:3 [ main::sc#2 main::sc#1 ] 25.67: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 536 combination zp[2]:3 [ main::sc#2 main::sc#1 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 536 combination 
Allocated (was zp[2]:3) zp[2]:2 [ main::sc#2 main::sc#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a for-loop with two iterating variables
// Illustrates that for()-loops currently cannot contain two variable declarations.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    .label sc = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::sc#2 = main::SCREEN+$27 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$27
    sta.z sc
    lda #>SCREEN+$27
    sta.z sc+1
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // main::@1
  __b1:
    // [2] if(main::i#2<$28) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@2
  __b2:
    // [4] *main::sc#2 = main::i#2 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (sc),y
    // [5] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [6] main::sc#1 = -- main::sc#2 -- pbuz1=_dec_pbuz1 
    lda.z sc
    bne !+
    dec.z sc+1
  !:
    dec.z sc
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi main::sc#2 = main::sc#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
const nomodify byte* main::SCREEN = (byte*) 1024
byte main::i
byte main::i#1 reg byte x 11.0
byte main::i#2 reg byte x 14.666666666666666
byte* main::sc
byte* main::sc#1 sc zp[2]:2 22.0
byte* main::sc#2 sc zp[2]:2 8.25

reg byte x [ main::i#2 main::i#1 ]
zp[2]:2 [ main::sc#2 main::sc#1 ]


FINAL ASSEMBLER
Score: 476

  // File Comments
// Test a for-loop with two iterating variables
// Illustrates that for()-loops currently cannot contain two variable declarations.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    .label sc = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::sc#2 = main::SCREEN+$27 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$27
    sta.z sc
    lda #>SCREEN+$27
    sta.z sc+1
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // main::@1
  __b1:
    // for( byte i=0; i<40; i++, sc--)
    // [2] if(main::i#2<$28) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc __b2
    // main::@return
    // }
    // [3] return 
    rts
    // main::@2
  __b2:
    // *sc = i
    // [4] *main::sc#2 = main::i#2 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (sc),y
    // for( byte i=0; i<40; i++, sc--)
    // [5] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [6] main::sc#1 = -- main::sc#2 -- pbuz1=_dec_pbuz1 
    lda.z sc
    bne !+
    dec.z sc+1
  !:
    dec.z sc
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi main::sc#2 = main::sc#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
}
  // File Data

