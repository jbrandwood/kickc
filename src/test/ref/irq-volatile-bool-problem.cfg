@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (bool) framedone#11 ← false
  to:@2
@2: scope:[]  from @1
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @2
  [4] phi()
main: scope:[main]  from @2
  asm { sei  }
  [6] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0
  [7] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f
  [8] *((const byte*) RASTER#0) ← (byte/word/signed word/dword/signed dword) $fd
  [9] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0
  [10] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq()
  asm { cli  }
  to:main::@2
main::@2: scope:[main]  from main main::@2 main::@7
  [12] if(*((const byte*) RASTER#0)>=(byte/signed byte/word/signed word/dword/signed dword) $14) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@2
  [13] (bool) framedone#0 ← true
  to:main::@2
irq: scope:[irq]  from
  [14] *((const byte*) BGCOL#0) ← ++ *((const byte*) BGCOL#0)
  [15] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  [16] if(*((const byte*) RASTER#0)<=(byte/signed byte/word/signed word/dword/signed dword) $32) goto irq::@1
  to:irq::@2
irq::@2: scope:[irq]  from irq
  [17] (bool) framedone#3 ← false
  to:irq::@1
irq::@1: scope:[irq]  from irq irq::@2
  [18] *((const byte*) BGCOL#0) ← -- *((const byte*) BGCOL#0)
  to:irq::@return
irq::@return: scope:[irq]  from irq::@1
  [19] return 
  to:@return
