Identified constant variable (byte*) SCREEN
Culled Empty Block (label) main::@4

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (number) $400
  (byte[]) TEXT#0 ← (const string) $0
  to:@1
main: scope:[main]  from @1
  (byte*) main::cursor#0 ← (byte*) SCREEN#0
  (byte) main::i#0 ← (number) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) main::cursor#2 ← phi( main/(byte*) main::cursor#0 main::@2/(byte*) main::cursor#1 )
  (byte) main::i#3 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#4 )
  *((byte*) main::cursor#2) ← *((byte[]) TEXT#0 + (byte) main::i#3)
  (byte) main::i#1 ← ++ (byte) main::i#3
  (bool~) main::$0 ← (byte) main::i#1 == (number) 8
  (bool~) main::$1 ← ! (bool~) main::$0
  if((bool~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#1 main::@3/(byte) main::i#2 )
  (byte*) main::cursor#3 ← phi( main::@1/(byte*) main::cursor#2 main::@3/(byte*) main::cursor#4 )
  (byte*) main::cursor#1 ← ++ (byte*) main::cursor#3
  (byte*~) main::$2 ← (byte*) SCREEN#0 + (number) $3e8
  (bool~) main::$3 ← (byte*) main::cursor#1 < (byte*~) main::$2
  if((bool~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte*) main::cursor#4 ← phi( main::@1/(byte*) main::cursor#2 )
  (byte) main::i#2 ← (number) 0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(const string) $0 = (string) "camelot "z
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(byte[]) TEXT
(byte[]) TEXT#0
(void()) main()
(bool~) main::$0
(bool~) main::$1
(byte*~) main::$2
(bool~) main::$3
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte*) main::cursor
(byte*) main::cursor#0
(byte*) main::cursor#1
(byte*) main::cursor#2
(byte*) main::cursor#3
(byte*) main::cursor#4
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4

Adding number conversion cast (unumber) 0 in (byte) main::i#0 ← (number) 0
Adding number conversion cast (unumber) 8 in (bool~) main::$0 ← (byte) main::i#1 == (number) 8
Adding number conversion cast (unumber) $3e8 in (byte*~) main::$2 ← (byte*) SCREEN#0 + (number) $3e8
Adding number conversion cast (unumber) 0 in (byte) main::i#2 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) SCREEN#0 ← (byte*)(number) $400
Inlining cast (byte) main::i#0 ← (unumber)(number) 0
Inlining cast (byte) main::i#2 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast $3e8
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [8] (bool~) main::$1 ← (byte) main::i#1 != (byte) 8 from [7] (bool~) main::$0 ← (byte) main::i#1 == (byte) 8
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) main::cursor#2 = (byte*) main::cursor#4 
Successful SSA optimization Pass2AliasElimination
Alias (byte*) main::cursor#2 = (byte*) main::cursor#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$1 [9] if((byte) main::i#1!=(byte) 8) goto main::@2
Simple Condition (bool~) main::$3 [14] if((byte*) main::cursor#1<(byte*~) main::$2) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) SCREEN#0 = (byte*) 1024
Constant (const byte[]) TEXT#0 = $0
Constant (const byte) main::i#0 = 0
Constant (const byte) main::i#2 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) main::cursor#0 = SCREEN#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [6] (byte*~) main::$2 ← (const byte*) SCREEN#0 + (word) $3e8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::$2 = SCREEN#0+$3e8
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#2
Inlining constant with var siblings (const byte*) main::cursor#0
Constant inlined main::i#0 = (byte) 0
Constant inlined main::i#2 = (byte) 0
Constant inlined $0 = (const byte[]) TEXT#0
Constant inlined main::cursor#0 = (const byte*) SCREEN#0
Constant inlined main::$2 = (const byte*) SCREEN#0+(word) $3e8
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@5(between main::@2 and main::@1)
Added new block during phi lifting main::@6(between main::@1 and main::@2)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
CALL GRAPH
Calls in [] to main:2 

Created 3 initial phi equivalence classes
Coalesced [15] main::i#5 ← main::i#4
Coalesced [16] main::cursor#5 ← main::cursor#1
Coalesced [17] main::i#6 ← main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@5
Renumbering block main::@6 to main::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte*) main::cursor#2 ← phi( main/(const byte*) SCREEN#0 main::@2/(byte*) main::cursor#1 )
  [5] (byte) main::i#3 ← phi( main/(byte) 0 main::@2/(byte) main::i#4 )
  [6] *((byte*) main::cursor#2) ← *((const byte[]) TEXT#0 + (byte) main::i#3)
  [7] (byte) main::i#1 ← ++ (byte) main::i#3
  [8] if((byte) main::i#1!=(byte) 8) goto main::@3
  to:main::@2
main::@3: scope:[main]  from main::@1
  [9] phi()
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [10] (byte) main::i#4 ← phi( main::@3/(byte) main::i#1 main::@1/(byte) 0 )
  [11] (byte*) main::cursor#1 ← ++ (byte*) main::cursor#2
  [12] if((byte*) main::cursor#1<(const byte*) SCREEN#0+(word) $3e8) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [13] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(byte[]) TEXT
(void()) main()
(byte*) main::cursor
(byte*) main::cursor#1 16.5
(byte*) main::cursor#2 5.5
(byte) main::i
(byte) main::i#1 11.0
(byte) main::i#3 16.5
(byte) main::i#4 7.333333333333333

Initial phi equivalence classes
[ main::i#3 main::i#4 main::i#1 ]
[ main::cursor#2 main::cursor#1 ]
Complete equivalence classes
[ main::i#3 main::i#4 main::i#1 ]
[ main::cursor#2 main::cursor#1 ]
Allocated zp ZP_BYTE:2 [ main::i#3 main::i#4 main::i#1 ]
Allocated zp ZP_WORD:3 [ main::cursor#2 main::cursor#1 ]

INITIAL ASM
Target platform is c64basic / 6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label i = 2
    .label cursor = 3
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte*) main::cursor#2 = (const byte*) SCREEN#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z cursor
    lda #>SCREEN
    sta.z cursor+1
    // [5] phi (byte) main::i#3 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp b1
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
    // [5] phi (byte*) main::cursor#2 = (byte*) main::cursor#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [5] phi (byte) main::i#3 = (byte) main::i#4 [phi:main::@2->main::@1#1] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] *((byte*) main::cursor#2) ← *((const byte[]) TEXT#0 + (byte) main::i#3) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda TEXT,y
    ldy #0
    sta (cursor),y
    // [7] (byte) main::i#1 ← ++ (byte) main::i#3 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [8] if((byte) main::i#1!=(byte) 8) goto main::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z i
    bne b3_from_b1
    // [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    // [10] phi (byte) main::i#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp b2
    // [9] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  b3_from_b1:
    jmp b3
    // main::@3
  b3:
    // [10] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  b2_from_b3:
    // [10] phi (byte) main::i#4 = (byte) main::i#1 [phi:main::@3->main::@2#0] -- register_copy 
    jmp b2
    // main::@2
  b2:
    // [11] (byte*) main::cursor#1 ← ++ (byte*) main::cursor#2 -- pbuz1=_inc_pbuz1 
    inc.z cursor
    bne !+
    inc.z cursor+1
  !:
    // [12] if((byte*) main::cursor#1<(const byte*) SCREEN#0+(word) $3e8) goto main::@1 -- pbuz1_lt_pbuc1_then_la1 
    lda.z cursor+1
    cmp #>SCREEN+$3e8
    bcc b1_from_b2
    bne !+
    lda.z cursor
    cmp #<SCREEN+$3e8
    bcc b1_from_b2
  !:
    jmp breturn
    // main::@return
  breturn:
    // [13] return 
    rts
}
  // File Data
  TEXT: .text "camelot "

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] *((byte*) main::cursor#2) ← *((const byte[]) TEXT#0 + (byte) main::i#3) [ main::i#3 main::cursor#2 ] ( main:2 [ main::i#3 main::cursor#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#3 main::i#4 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ main::i#3 main::i#4 main::i#1 ]
Statement [12] if((byte*) main::cursor#1<(const byte*) SCREEN#0+(word) $3e8) goto main::@1 [ main::i#4 main::cursor#1 ] ( main:2 [ main::i#4 main::cursor#1 ] ) always clobbers reg byte a 
Statement [6] *((byte*) main::cursor#2) ← *((const byte[]) TEXT#0 + (byte) main::i#3) [ main::i#3 main::cursor#2 ] ( main:2 [ main::i#3 main::cursor#2 ] ) always clobbers reg byte a reg byte y 
Statement [12] if((byte*) main::cursor#1<(const byte*) SCREEN#0+(word) $3e8) goto main::@1 [ main::i#4 main::cursor#1 ] ( main:2 [ main::i#4 main::cursor#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#3 main::i#4 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_WORD:3 [ main::cursor#2 main::cursor#1 ] : zp ZP_WORD:3 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 34.83: zp ZP_BYTE:2 [ main::i#3 main::i#4 main::i#1 ] 22: zp ZP_WORD:3 [ main::cursor#2 main::cursor#1 ] 
Uplift Scope [] 

Uplifting [main] best 828 combination reg byte x [ main::i#3 main::i#4 main::i#1 ] zp ZP_WORD:3 [ main::cursor#2 main::cursor#1 ] 
Uplifting [] best 828 combination 
Allocated (was zp ZP_WORD:3) zp ZP_WORD:2 [ main::cursor#2 main::cursor#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label cursor = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte*) main::cursor#2 = (const byte*) SCREEN#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z cursor
    lda #>SCREEN
    sta.z cursor+1
    // [5] phi (byte) main::i#3 = (byte) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
    // [5] phi (byte*) main::cursor#2 = (byte*) main::cursor#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [5] phi (byte) main::i#3 = (byte) main::i#4 [phi:main::@2->main::@1#1] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] *((byte*) main::cursor#2) ← *((const byte[]) TEXT#0 + (byte) main::i#3) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda TEXT,x
    ldy #0
    sta (cursor),y
    // [7] (byte) main::i#1 ← ++ (byte) main::i#3 -- vbuxx=_inc_vbuxx 
    inx
    // [8] if((byte) main::i#1!=(byte) 8) goto main::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b3_from_b1
    // [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    // [10] phi (byte) main::i#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b2
    // [9] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  b3_from_b1:
    jmp b3
    // main::@3
  b3:
    // [10] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  b2_from_b3:
    // [10] phi (byte) main::i#4 = (byte) main::i#1 [phi:main::@3->main::@2#0] -- register_copy 
    jmp b2
    // main::@2
  b2:
    // [11] (byte*) main::cursor#1 ← ++ (byte*) main::cursor#2 -- pbuz1=_inc_pbuz1 
    inc.z cursor
    bne !+
    inc.z cursor+1
  !:
    // [12] if((byte*) main::cursor#1<(const byte*) SCREEN#0+(word) $3e8) goto main::@1 -- pbuz1_lt_pbuc1_then_la1 
    lda.z cursor+1
    cmp #>SCREEN+$3e8
    bcc b1_from_b2
    bne !+
    lda.z cursor
    cmp #<SCREEN+$3e8
    bcc b1_from_b2
  !:
    jmp breturn
    // main::@return
  breturn:
    // [13] return 
    rts
}
  // File Data
  TEXT: .text "camelot "

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b3_from_b1 with b2
Replacing label b1_from_b2 with b1
Replacing label b1_from_b2 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b2:
Removing instruction b3_from_b1:
Removing instruction b3:
Removing instruction b2_from_b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b2_from_b1:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Removing instruction jmp b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (byte*) 1024
(byte[]) TEXT
(const byte[]) TEXT#0 TEXT = (string) "camelot "z
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte*) main::cursor
(byte*) main::cursor#1 cursor zp ZP_WORD:2 16.5
(byte*) main::cursor#2 cursor zp ZP_WORD:2 5.5
(byte) main::i
(byte) main::i#1 reg byte x 11.0
(byte) main::i#3 reg byte x 16.5
(byte) main::i#4 reg byte x 7.333333333333333

reg byte x [ main::i#3 main::i#4 main::i#1 ]
zp ZP_WORD:2 [ main::cursor#2 main::cursor#1 ]


FINAL ASSEMBLER
Score: 636

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label cursor = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte*) main::cursor#2 = (const byte*) SCREEN#0 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta.z cursor
    lda #>SCREEN
    sta.z cursor+1
    // [5] phi (byte) main::i#3 = (byte) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [5] phi (byte*) main::cursor#2 = (byte*) main::cursor#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [5] phi (byte) main::i#3 = (byte) main::i#4 [phi:main::@2->main::@1#1] -- register_copy 
    // main::@1
  b1:
    // *cursor = TEXT[i]
    // [6] *((byte*) main::cursor#2) ← *((const byte[]) TEXT#0 + (byte) main::i#3) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda TEXT,x
    ldy #0
    sta (cursor),y
    // if(++i==8)
    // [7] (byte) main::i#1 ← ++ (byte) main::i#3 -- vbuxx=_inc_vbuxx 
    inx
    // [8] if((byte) main::i#1!=(byte) 8) goto main::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b2
    // [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [10] phi (byte) main::i#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [9] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // main::@3
    // [10] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
    // [10] phi (byte) main::i#4 = (byte) main::i#1 [phi:main::@3->main::@2#0] -- register_copy 
    // main::@2
  b2:
    // while(++cursor<SCREEN+1000)
    // [11] (byte*) main::cursor#1 ← ++ (byte*) main::cursor#2 -- pbuz1=_inc_pbuz1 
    inc.z cursor
    bne !+
    inc.z cursor+1
  !:
    // [12] if((byte*) main::cursor#1<(const byte*) SCREEN#0+(word) $3e8) goto main::@1 -- pbuz1_lt_pbuc1_then_la1 
    lda.z cursor+1
    cmp #>SCREEN+$3e8
    bcc b1
    bne !+
    lda.z cursor
    cmp #<SCREEN+$3e8
    bcc b1
  !:
    // main::@return
    // }
    // [13] return 
    rts
}
  // File Data
  TEXT: .text "camelot "

