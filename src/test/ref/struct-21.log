Setting struct to load/store in variable affected by address-of main::ptr = &main::point1
Removing C-classic struct-unwound assignment main::point1 = struct-unwound {*(&main::point1)}

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  *(&main::point1) = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT)
  main::$2 = (char *)main::ptr
  main::$0 = main::$2 + OFFSET_STRUCT_POINT_X
  SCREEN[0] = *main::$0
  main::$3 = (char *)main::ptr
  main::$1 = main::$3 + OFFSET_STRUCT_POINT_Y
  SCREEN[1] = *main::$1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant struct Point $0 = { x: 2, y: 3 }
__constant char OFFSET_STRUCT_POINT_X = 0
__constant char OFFSET_STRUCT_POINT_Y = 1
__constant char * const SCREEN = (char *)$400
__constant char SIZEOF_STRUCT_POINT = 2
void __start()
void main()
char *main::$0
char *main::$1
char *main::$2
char *main::$3
__loadstore volatile struct Point main::point1
__constant struct Point *main::ptr = &main::point1

Adding number conversion cast (unumber) 0 in SCREEN[0] = *main::$0
Adding number conversion cast (unumber) 1 in SCREEN[1] = *main::$1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [1] main::$2 = (char *)main::ptr
Constant right-side identified [4] main::$3 = (char *)main::ptr
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$2 = (char *)main::ptr
Constant main::$3 = (char *)main::ptr
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [3] SCREEN[0] = *main::$0  -- main::$2[OFFSET_STRUCT_POINT_X]
Converting *(pointer+n) to pointer[n] [6] SCREEN[1] = *main::$1  -- main::$3[OFFSET_STRUCT_POINT_Y]
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero main::$2 in [2] main::$0 = main::$2 + OFFSET_STRUCT_POINT_X
Simplifying expression containing zero main::$2 in [3] SCREEN[0] = main::$2[OFFSET_STRUCT_POINT_X]
Simplifying expression containing zero SCREEN in [3] SCREEN[0] = *main::$2
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable main::$0 and assignment [1] main::$0 = main::$2
Eliminating unused variable main::$1 and assignment [3] main::$1 = main::$3 + OFFSET_STRUCT_POINT_Y
Eliminating unused constant OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant inlined main::$2 = (char *)main::ptr
Constant inlined main::$3 = (char *)main::ptr
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((char *)main::ptr+OFFSET_STRUCT_POINT_Y)
Consolidated array index constant in *(SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *(&main::point1) = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT)
  [1] *SCREEN = *((char *)main::ptr)
  [2] *(SCREEN+1) = *((char *)main::ptr+OFFSET_STRUCT_POINT_Y)
  to:main::@return
main::@return: scope:[main]  from main
  [3] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
__loadstore volatile struct Point main::point1

Initial phi equivalence classes
Added variable main::point1 to live range equivalence class [ main::point1 ]
Complete equivalence classes
[ main::point1 ]
Allocated zp[2]:2 [ main::point1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *(&main::point1) = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT) [ ] (  [ ] { }  ) always clobbers reg byte a reg byte y 
Statement [1] *SCREEN = *((char *)main::ptr) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *(SCREEN+1) = *((char *)main::ptr+OFFSET_STRUCT_POINT_Y) [ ] (  [ ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::point1 ] : zp[2]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [Point] 
Uplift Scope [main] 0: zp[2]:2 [ main::point1 ] 
Uplift Scope [] 

Uplifting [Point] best 39 combination 
Uplifting [main] best 39 combination zp[2]:2 [ main::point1 ] 
Uplifting [] best 39 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct with C-Standard behavior - address-of
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-21.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 2
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label ptr = point1
    .label point1 = 2
    // [0] *(&main::point1) = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda __0-1,y
    sta point1-1,y
    dey
    bne !-
    // [1] *SCREEN = *((char *)main::ptr) -- _deref_pbuc1=_deref_pbuc2 
    lda.z ptr
    sta SCREEN
    // [2] *(SCREEN+1) = *((char *)main::ptr+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda.z ptr+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
}
  // File Data
.segment Data
  __0: .byte 2, 3

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant struct Point $0 = { x: 2, y: 3 }
__constant char OFFSET_STRUCT_POINT_Y = 1
__constant char * const SCREEN = (char *) 1024
__constant char SIZEOF_STRUCT_POINT = 2
void main()
__loadstore volatile struct Point main::point1 // zp[2]:2
__constant struct Point *main::ptr = &main::point1

zp[2]:2 [ main::point1 ]


FINAL ASSEMBLER
Score: 36

  // File Comments
// Minimal struct with C-Standard behavior - address-of
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-21.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 2
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label ptr = point1
    .label point1 = 2
    // __ma struct Point point1 = { 2, 3 }
    // [0] *(&main::point1) = memcpy(*(&$0), struct Point, SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda __0-1,y
    sta point1-1,y
    dey
    bne !-
    // SCREEN[0] = ptr->x
    // [1] *SCREEN = *((char *)main::ptr) -- _deref_pbuc1=_deref_pbuc2 
    lda.z ptr
    sta SCREEN
    // SCREEN[1] = ptr->y
    // [2] *(SCREEN+1) = *((char *)main::ptr+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda.z ptr+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    // main::@return
    // }
    // [3] return 
    rts
}
  // File Data
.segment Data
  __0: .byte 2, 3

