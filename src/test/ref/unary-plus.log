
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  *((const byte*) main::SCREEN + (number) 0) ← (const byte) main::i
  *((const byte*) main::SCREEN + (number) 1) ← +(number) 3
  (number~) main::$0 ← (number) 0 * (const byte) SIZEOF_SIGNED_WORD
  *((const signed word*) main::SCREEN2 + (number~) main::$0) ← (const signed word) main::j
  (number~) main::$1 ← (number) 1 * (const byte) SIZEOF_SIGNED_WORD
  *((const signed word*) main::SCREEN2 + (number~) main::$1) ← +(number) 3
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(number~) main::$0
(number~) main::$1
(label) main::@return
(const byte*) main::SCREEN = (byte*)(number) $400
(const signed word*) main::SCREEN2 = (signed word*)(number) $428
(const byte) main::i = (byte)+(number) 3
(const signed word) main::j = (signed word)+(number) 3

Adding number conversion cast (unumber) 0 in *((const byte*) main::SCREEN + (number) 0) ← (const byte) main::i
Adding number conversion cast (unumber) +3 in *((const byte*) main::SCREEN + (number) 1) ← +(number) 3
Adding number conversion cast (unumber) 1 in *((const byte*) main::SCREEN + (number) 1) ← ((unumber)) +(number) 3
Adding number conversion cast (unumber) 0 in (number~) main::$0 ← (number) 0 * (const byte) SIZEOF_SIGNED_WORD
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (unumber)(number) 0 * (const byte) SIZEOF_SIGNED_WORD
Adding number conversion cast (unumber) 1 in (number~) main::$1 ← (number) 1 * (const byte) SIZEOF_SIGNED_WORD
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (unumber)(number) 1 * (const byte) SIZEOF_SIGNED_WORD
Adding number conversion cast (snumber) +3 in *((const signed word*) main::SCREEN2 + (unumber~) main::$1) ← +(number) 3
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((const byte*) main::SCREEN + (unumber)(number) 1) ← (unumber)+(number) 3
Inlining cast *((const signed word*) main::SCREEN2 + (unumber~) main::$1) ← (snumber)+(number) 3
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (signed word*) 1064
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) 0 * (const byte) SIZEOF_SIGNED_WORD
Inferred type updated to byte in (unumber~) main::$1 ← (byte) 1 * (const byte) SIZEOF_SIGNED_WORD
Constant right-side identified [1] *((const byte*) main::SCREEN + (byte) 1) ← (unumber)+(number) 3
Constant right-side identified [2] (byte~) main::$0 ← (byte) 0 * (const byte) SIZEOF_SIGNED_WORD
Constant right-side identified [4] (byte~) main::$1 ← (byte) 1 * (const byte) SIZEOF_SIGNED_WORD
Constant right-side identified [5] *((const signed word*) main::SCREEN2 + (byte~) main::$1) ← (snumber)+(number) 3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$0 = 0*SIZEOF_SIGNED_WORD
Constant (const byte) main::$1 = 1*SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_SIGNED_WORD in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::SCREEN in [0] *((const byte*) main::SCREEN + (byte) 0) ← (const byte) main::i
Simplifying expression containing zero main::SCREEN2 in [3] *((const signed word*) main::SCREEN2 + (const byte) main::$0) ← (const signed word) main::j
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) main::$0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant inlined main::$1 = (byte) 1*(const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::SCREEN+1)
Consolidated array index constant in *(main::SCREEN2+1*SIZEOF_SIGNED_WORD)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const byte*) main::SCREEN) ← (const byte) main::i
  [1] *((const byte*) main::SCREEN+(byte) 1) ← (byte)+(number) 3
  [2] *((const signed word*) main::SCREEN2) ← (const signed word) main::j
  [3] *((const signed word*) main::SCREEN2+(byte) 1*(const byte) SIZEOF_SIGNED_WORD) ← (signed byte)+(number) 3
  to:main::@return
main::@return: scope:[main]  from main
  [4] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test unary plus
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  // main
main: {
    .const i = 3
    .const j = 3
    .label SCREEN = $400
    .label SCREEN2 = $428
    // [0] *((const byte*) main::SCREEN) ← (const byte) main::i -- _deref_pbuc1=vbuc2 
    lda #i
    sta SCREEN
    // [1] *((const byte*) main::SCREEN+(byte) 1) ← (byte)+(number) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta SCREEN+1
    // [2] *((const signed word*) main::SCREEN2) ← (const signed word) main::j -- _deref_pwsc1=vwsc2 
    lda #<j
    sta SCREEN2
    lda #>j
    sta SCREEN2+1
    // [3] *((const signed word*) main::SCREEN2+(byte) 1*(const byte) SIZEOF_SIGNED_WORD) ← (signed byte)+(number) 3 -- _deref_pwsc1=vwsc2 
    lda #<3
    sta SCREEN2+1*SIZEOF_SIGNED_WORD
    lda #>3
    sta SCREEN2+1*SIZEOF_SIGNED_WORD+1
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const byte*) main::SCREEN) ← (const byte) main::i [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const byte*) main::SCREEN+(byte) 1) ← (byte)+(number) 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((const signed word*) main::SCREEN2) ← (const signed word) main::j [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((const signed word*) main::SCREEN2+(byte) 1*(const byte) SIZEOF_SIGNED_WORD) ← (signed byte)+(number) 3 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 45 combination 
Uplifting [] best 45 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test unary plus
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  // main
main: {
    .const i = 3
    .const j = 3
    .label SCREEN = $400
    .label SCREEN2 = $428
    // [0] *((const byte*) main::SCREEN) ← (const byte) main::i -- _deref_pbuc1=vbuc2 
    lda #i
    sta SCREEN
    // [1] *((const byte*) main::SCREEN+(byte) 1) ← (byte)+(number) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta SCREEN+1
    // [2] *((const signed word*) main::SCREEN2) ← (const signed word) main::j -- _deref_pwsc1=vwsc2 
    lda #<j
    sta SCREEN2
    lda #>j
    sta SCREEN2+1
    // [3] *((const signed word*) main::SCREEN2+(byte) 1*(const byte) SIZEOF_SIGNED_WORD) ← (signed byte)+(number) 3 -- _deref_pwsc1=vwsc2 
    lda #<3
    sta SCREEN2+1*SIZEOF_SIGNED_WORD
    lda #>3
    sta SCREEN2+1*SIZEOF_SIGNED_WORD+1
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(void()) main()
(label) main::@return
(const byte*) main::SCREEN = (byte*) 1024
(const signed word*) main::SCREEN2 = (signed word*) 1064
(const byte) main::i = (byte)+(number) 3
(const signed word) main::j = (signed word)+(number) 3



FINAL ASSEMBLER
Score: 42

  // File Comments
// Test unary plus
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_SIGNED_WORD = 2
  // main
main: {
    .const i = 3
    .const j = 3
    .label SCREEN = $400
    .label SCREEN2 = $428
    // SCREEN[0] = i
    // [0] *((const byte*) main::SCREEN) ← (const byte) main::i -- _deref_pbuc1=vbuc2 
    lda #i
    sta SCREEN
    // SCREEN[1] = +3
    // [1] *((const byte*) main::SCREEN+(byte) 1) ← (byte)+(number) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta SCREEN+1
    // SCREEN2[0] = j
    // [2] *((const signed word*) main::SCREEN2) ← (const signed word) main::j -- _deref_pwsc1=vwsc2 
    lda #<j
    sta SCREEN2
    lda #>j
    sta SCREEN2+1
    // SCREEN2[1] = +3
    // [3] *((const signed word*) main::SCREEN2+(byte) 1*(const byte) SIZEOF_SIGNED_WORD) ← (signed byte)+(number) 3 -- _deref_pwsc1=vwsc2 
    lda #<3
    sta SCREEN2+1*SIZEOF_SIGNED_WORD
    lda #>3
    sta SCREEN2+1*SIZEOF_SIGNED_WORD+1
    // main::@return
    // }
    // [4] return 
    rts
}
  // File Data

