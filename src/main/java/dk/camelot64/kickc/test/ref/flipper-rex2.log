byte[1000] SCREEN = $0400;
byte[16*16] buffer1 = $1000;
byte[16*16] buffer2 = $1100;
byte *RASTER = $d012;

void main() {
  prepare();
  do {
    for( byte c : 25..1) {
      do { } while(*RASTER!=254);
      do { } while(*RASTER!=255);
    }
    flip();
    plot();
  } while(true);
}

// Prepare buffer
void prepare() {
   for( byte i : 0..255) {
      buffer1[i] = i;
   }
}

// Flip buffer
void flip() {
   byte srcIdx = 0;
   byte dstIdx = 15;
   for( byte r : 16..1) {
      for( byte c : 16..1) {
         buffer2[dstIdx] = buffer1[srcIdx++];
         dstIdx = dstIdx+16;
      }
      dstIdx--;
     }
   for(byte i : 0..255) {
      buffer1[i] = buffer2[i];
   }
}

// Plot buffer on screen
void plot() {
   byte* line = SCREEN+5*40+12;
   byte i=0;
   for(byte y : 16..1) {
     for(byte x=0; x<16; x++ ) {
       line[x] = buffer1[i++];
     }
     line = line+40;
   }
}
Adding pre/post-modifier (byte) flip::srcIdx ← ++ (byte) flip::srcIdx
Adding pre/post-modifier (byte) flip::dstIdx ← -- (byte) flip::dstIdx
Adding pre/post-modifier (byte) plot::i ← ++ (byte) plot::i
Adding pre/post-modifier (byte) plot::x ← ++ (byte) plot::x
PROGRAM
  (byte[1000]) SCREEN ← (word) 1024
  (byte[256]) buffer1 ← (word) 4096
  (byte[256]) buffer2 ← (word) 4352
  (byte*) RASTER ← (word) 53266
proc (void()) main()
  (void~) main::$0 ← call prepare 
main::@1:
  (byte) main::c ← (byte) 25
main::@2:
main::@3:
  (byte~) main::$1 ← * (byte*) RASTER
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
main::@4:
  (byte~) main::$3 ← * (byte*) RASTER
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  (byte) main::c ← -- (byte) main::c
  (boolean~) main::$5 ← (byte) main::c != (byte) 0
  if((boolean~) main::$5) goto main::@2
  (void~) main::$6 ← call flip 
  (void~) main::$7 ← call plot 
  if(true) goto main::@1
main::@return:
  return 
endproc // main()
proc (void()) prepare()
  (byte) prepare::i ← (byte) 0
prepare::@1:
  *((byte[256]) buffer1 + (byte) prepare::i) ← (byte) prepare::i
  (byte) prepare::i ← ++ (byte) prepare::i
  (boolean~) prepare::$0 ← (byte) prepare::i != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
prepare::@return:
  return 
endproc // prepare()
proc (void()) flip()
  (byte) flip::srcIdx ← (byte) 0
  (byte) flip::dstIdx ← (byte) 15
  (byte) flip::r ← (byte) 16
flip::@1:
  (byte) flip::c ← (byte) 16
flip::@2:
  (byte~) flip::$0 ← (byte[256]) buffer1 *idx (byte) flip::srcIdx
  *((byte[256]) buffer2 + (byte) flip::dstIdx) ← (byte~) flip::$0
  (byte) flip::srcIdx ← ++ (byte) flip::srcIdx
  (byte~) flip::$1 ← (byte) flip::dstIdx + (byte) 16
  (byte) flip::dstIdx ← (byte~) flip::$1
  (byte) flip::c ← -- (byte) flip::c
  (boolean~) flip::$2 ← (byte) flip::c != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  (byte) flip::dstIdx ← -- (byte) flip::dstIdx
  (byte) flip::r ← -- (byte) flip::r
  (boolean~) flip::$3 ← (byte) flip::r != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  (byte) flip::i ← (byte) 0
flip::@3:
  (byte~) flip::$4 ← (byte[256]) buffer2 *idx (byte) flip::i
  *((byte[256]) buffer1 + (byte) flip::i) ← (byte~) flip::$4
  (byte) flip::i ← ++ (byte) flip::i
  (boolean~) flip::$5 ← (byte) flip::i != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
flip::@return:
  return 
endproc // flip()
proc (void()) plot()
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line ← (byte*~) plot::$2
  (byte) plot::i ← (byte) 0
  (byte) plot::y ← (byte) 16
plot::@1:
  (byte) plot::x ← (byte) 0
plot::@2:
  (byte~) plot::$3 ← (byte[256]) buffer1 *idx (byte) plot::i
  *((byte*) plot::line + (byte) plot::x) ← (byte~) plot::$3
  (byte) plot::i ← ++ (byte) plot::i
  (byte) plot::x ← ++ (byte) plot::x
  (boolean~) plot::$4 ← (byte) plot::x < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  (byte*~) plot::$5 ← (byte*) plot::line + (byte) 40
  (byte*) plot::line ← (byte*~) plot::$5
  (byte) plot::y ← -- (byte) plot::y
  (boolean~) plot::$6 ← (byte) plot::y != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
plot::@return:
  return 
endproc // plot()
  call main 

SYMBOLS
(byte*) RASTER
(byte[1000]) SCREEN
(byte[256]) buffer1
(byte[256]) buffer2
(void()) flip()
(byte~) flip::$0
(byte~) flip::$1
(boolean~) flip::$2
(boolean~) flip::$3
(byte~) flip::$4
(boolean~) flip::$5
(label) flip::@1
(label) flip::@2
(label) flip::@3
(label) flip::@return
(byte) flip::c
(byte) flip::dstIdx
(byte) flip::i
(byte) flip::r
(byte) flip::srcIdx
(void()) main()
(void~) main::$0
(byte~) main::$1
(boolean~) main::$2
(byte~) main::$3
(boolean~) main::$4
(boolean~) main::$5
(void~) main::$6
(void~) main::$7
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(byte) main::c
(void()) plot()
(byte~) plot::$0
(byte*~) plot::$1
(byte*~) plot::$2
(byte~) plot::$3
(boolean~) plot::$4
(byte*~) plot::$5
(boolean~) plot::$6
(label) plot::@1
(label) plot::@2
(label) plot::@return
(byte) plot::i
(byte*) plot::line
(byte) plot::x
(byte) plot::y
(void()) prepare()
(boolean~) prepare::$0
(label) prepare::@1
(label) prepare::@return
(byte) prepare::i

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[1000]) SCREEN ← (word) 1024
  (byte[256]) buffer1 ← (word) 4096
  (byte[256]) buffer2 ← (word) 4352
  (byte*) RASTER ← (word) 53266
  to:@1
main: scope:[main]  from
  (void~) main::$0 ← call prepare 
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte) main::c ← (byte) 25
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@6
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte~) main::$1 ← * (byte*) RASTER
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@5
main::@5: scope:[main]  from main::@3
  to:main::@4
main::@4: scope:[main]  from main::@4 main::@5
  (byte~) main::$3 ← * (byte*) RASTER
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c ← -- (byte) main::c
  (boolean~) main::$5 ← (byte) main::c != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  (void~) main::$6 ← call flip 
  (void~) main::$7 ← call plot 
  if(true) goto main::@1
  to:main::@8
main::@8: scope:[main]  from main::@7
  to:main::@return
main::@return: scope:[main]  from main::@8
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
prepare: scope:[prepare]  from
  (byte) prepare::i ← (byte) 0
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  *((byte[256]) buffer1 + (byte) prepare::i) ← (byte) prepare::i
  (byte) prepare::i ← ++ (byte) prepare::i
  (boolean~) prepare::$0 ← (byte) prepare::i != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@2
prepare::@2: scope:[prepare]  from prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@2
  return 
  to:@return
@2: scope:[]  from @1
  to:@3
flip: scope:[flip]  from
  (byte) flip::srcIdx ← (byte) 0
  (byte) flip::dstIdx ← (byte) 15
  (byte) flip::r ← (byte) 16
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::c ← (byte) 16
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte~) flip::$0 ← (byte[256]) buffer1 *idx (byte) flip::srcIdx
  *((byte[256]) buffer2 + (byte) flip::dstIdx) ← (byte~) flip::$0
  (byte) flip::srcIdx ← ++ (byte) flip::srcIdx
  (byte~) flip::$1 ← (byte) flip::dstIdx + (byte) 16
  (byte) flip::dstIdx ← (byte~) flip::$1
  (byte) flip::c ← -- (byte) flip::c
  (boolean~) flip::$2 ← (byte) flip::c != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx ← -- (byte) flip::dstIdx
  (byte) flip::r ← -- (byte) flip::r
  (boolean~) flip::$3 ← (byte) flip::r != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  (byte) flip::i ← (byte) 0
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte~) flip::$4 ← (byte[256]) buffer2 *idx (byte) flip::i
  *((byte[256]) buffer1 + (byte) flip::i) ← (byte~) flip::$4
  (byte) flip::i ← ++ (byte) flip::i
  (boolean~) flip::$5 ← (byte) flip::i != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@6
flip::@6: scope:[flip]  from flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@6
  return 
  to:@return
@3: scope:[]  from @2
  to:@4
plot: scope:[plot]  from
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line ← (byte*~) plot::$2
  (byte) plot::i ← (byte) 0
  (byte) plot::y ← (byte) 16
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::x ← (byte) 0
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte~) plot::$3 ← (byte[256]) buffer1 *idx (byte) plot::i
  *((byte*) plot::line + (byte) plot::x) ← (byte~) plot::$3
  (byte) plot::i ← ++ (byte) plot::i
  (byte) plot::x ← ++ (byte) plot::x
  (boolean~) plot::$4 ← (byte) plot::x < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*~) plot::$5 ← (byte*) plot::line + (byte) 40
  (byte*) plot::line ← (byte*~) plot::$5
  (byte) plot::y ← -- (byte) plot::y
  (boolean~) plot::$6 ← (byte) plot::y != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@4
plot::@4: scope:[plot]  from plot::@3
  to:plot::@return
plot::@return: scope:[plot]  from plot::@4
  return 
  to:@return
@4: scope:[]  from @3
  call main 
  to:@end
@end: scope:[]  from @4

Removing empty block main::@5
Removing empty block main::@8
Removing empty block @1
Removing empty block prepare::@2
Removing empty block @2
Removing empty block flip::@6
Removing empty block @3
Removing empty block plot::@4
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[1000]) SCREEN ← (word) 1024
  (byte[256]) buffer1 ← (word) 4096
  (byte[256]) buffer2 ← (word) 4352
  (byte*) RASTER ← (word) 53266
  to:@4
main: scope:[main]  from
  (void~) main::$0 ← call prepare 
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte) main::c ← (byte) 25
  to:main::@3
main::@2: scope:[main]  from main::@6
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte~) main::$1 ← * (byte*) RASTER
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c ← -- (byte) main::c
  (boolean~) main::$5 ← (byte) main::c != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  (void~) main::$6 ← call flip 
  (void~) main::$7 ← call plot 
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
prepare: scope:[prepare]  from
  (byte) prepare::i ← (byte) 0
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  *((byte[256]) buffer1 + (byte) prepare::i) ← (byte) prepare::i
  (byte) prepare::i ← ++ (byte) prepare::i
  (boolean~) prepare::$0 ← (byte) prepare::i != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from
  (byte) flip::srcIdx ← (byte) 0
  (byte) flip::dstIdx ← (byte) 15
  (byte) flip::r ← (byte) 16
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::c ← (byte) 16
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte~) flip::$0 ← (byte[256]) buffer1 *idx (byte) flip::srcIdx
  *((byte[256]) buffer2 + (byte) flip::dstIdx) ← (byte~) flip::$0
  (byte) flip::srcIdx ← ++ (byte) flip::srcIdx
  (byte~) flip::$1 ← (byte) flip::dstIdx + (byte) 16
  (byte) flip::dstIdx ← (byte~) flip::$1
  (byte) flip::c ← -- (byte) flip::c
  (boolean~) flip::$2 ← (byte) flip::c != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx ← -- (byte) flip::dstIdx
  (byte) flip::r ← -- (byte) flip::r
  (boolean~) flip::$3 ← (byte) flip::r != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  (byte) flip::i ← (byte) 0
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte~) flip::$4 ← (byte[256]) buffer2 *idx (byte) flip::i
  *((byte[256]) buffer1 + (byte) flip::i) ← (byte~) flip::$4
  (byte) flip::i ← ++ (byte) flip::i
  (boolean~) flip::$5 ← (byte) flip::i != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line ← (byte*~) plot::$2
  (byte) plot::i ← (byte) 0
  (byte) plot::y ← (byte) 16
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::x ← (byte) 0
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte~) plot::$3 ← (byte[256]) buffer1 *idx (byte) plot::i
  *((byte*) plot::line + (byte) plot::x) ← (byte~) plot::$3
  (byte) plot::i ← ++ (byte) plot::i
  (byte) plot::x ← ++ (byte) plot::x
  (boolean~) plot::$4 ← (byte) plot::x < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*~) plot::$5 ← (byte*) plot::line + (byte) 40
  (byte*) plot::line ← (byte*~) plot::$5
  (byte) plot::y ← -- (byte) plot::y
  (boolean~) plot::$6 ← (byte) plot::y != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @4

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte[1000]) SCREEN ← (word) 1024
  (byte[256]) buffer1 ← (word) 4096
  (byte[256]) buffer2 ← (word) 4352
  (byte*) RASTER ← (word) 53266
  to:@4
main: scope:[main]  from @4
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte) main::c ← (byte) 25
  to:main::@3
main::@2: scope:[main]  from main::@6
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte~) main::$1 ← * (byte*) RASTER
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c ← -- (byte) main::c
  (boolean~) main::$5 ← (byte) main::c != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  (byte) prepare::i ← (byte) 0
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  *((byte[256]) buffer1 + (byte) prepare::i) ← (byte) prepare::i
  (byte) prepare::i ← ++ (byte) prepare::i
  (boolean~) prepare::$0 ← (byte) prepare::i != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  (byte) flip::srcIdx ← (byte) 0
  (byte) flip::dstIdx ← (byte) 15
  (byte) flip::r ← (byte) 16
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::c ← (byte) 16
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte~) flip::$0 ← (byte[256]) buffer1 *idx (byte) flip::srcIdx
  *((byte[256]) buffer2 + (byte) flip::dstIdx) ← (byte~) flip::$0
  (byte) flip::srcIdx ← ++ (byte) flip::srcIdx
  (byte~) flip::$1 ← (byte) flip::dstIdx + (byte) 16
  (byte) flip::dstIdx ← (byte~) flip::$1
  (byte) flip::c ← -- (byte) flip::c
  (boolean~) flip::$2 ← (byte) flip::c != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx ← -- (byte) flip::dstIdx
  (byte) flip::r ← -- (byte) flip::r
  (boolean~) flip::$3 ← (byte) flip::r != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  (byte) flip::i ← (byte) 0
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte~) flip::$4 ← (byte[256]) buffer2 *idx (byte) flip::i
  *((byte[256]) buffer1 + (byte) flip::i) ← (byte~) flip::$4
  (byte) flip::i ← ++ (byte) flip::i
  (boolean~) flip::$5 ← (byte) flip::i != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line ← (byte*~) plot::$2
  (byte) plot::i ← (byte) 0
  (byte) plot::y ← (byte) 16
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::x ← (byte) 0
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte~) plot::$3 ← (byte[256]) buffer1 *idx (byte) plot::i
  *((byte*) plot::line + (byte) plot::x) ← (byte~) plot::$3
  (byte) plot::i ← ++ (byte) plot::i
  (byte) plot::x ← ++ (byte) plot::x
  (boolean~) plot::$4 ← (byte) plot::x < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*~) plot::$5 ← (byte*) plot::line + (byte) 40
  (byte*) plot::line ← (byte*~) plot::$5
  (byte) plot::y ← -- (byte) plot::y
  (boolean~) plot::$6 ← (byte) plot::y != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@5
@5: scope:[]  from @4
  to:@end
@end: scope:[]  from @5

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte[1000]) SCREEN#0 ← (word) 1024
  (byte[256]) buffer1#0 ← (word) 4096
  (byte[256]) buffer2#0 ← (word) 4352
  (byte*) RASTER#0 ← (word) 53266
  to:@4
main: scope:[main]  from @4
  (byte[256]) buffer2#15 ← phi( @4/(byte[256]) buffer2#17 )
  (byte[1000]) SCREEN#11 ← phi( @4/(byte[1000]) SCREEN#12 )
  (byte*) RASTER#8 ← phi( @4/(byte*) RASTER#10 )
  (byte[256]) buffer1#9 ← phi( @4/(byte[256]) buffer1#14 )
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  (byte[256]) buffer2#14 ← phi( main/(byte[256]) buffer2#15 )
  (byte[256]) buffer1#23 ← phi( main/(byte[256]) buffer1#9 )
  (byte[1000]) SCREEN#10 ← phi( main/(byte[1000]) SCREEN#11 )
  (byte*) RASTER#6 ← phi( main/(byte*) RASTER#8 )
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#13 main::@9/(byte[256]) buffer2#14 )
  (byte[256]) buffer1#20 ← phi( main::@11/(byte[256]) buffer1#22 main::@9/(byte[256]) buffer1#23 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#9 main::@9/(byte[1000]) SCREEN#10 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#5 main::@9/(byte*) RASTER#6 )
  (byte) main::c#0 ← (byte) 25
  to:main::@3
main::@2: scope:[main]  from main::@6
  (byte[256]) buffer2#12 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#21 ← phi( main::@6/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#8 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  (byte) main::c#5 ← phi( main::@6/(byte) main::c#1 )
  (byte*) RASTER#4 ← phi( main::@6/(byte*) RASTER#7 )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#19 ← phi( main::@1/(byte[256]) buffer1#20 main::@2/(byte[256]) buffer1#21 main::@3/(byte[256]) buffer1#19 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) main::c#0 main::@2/(byte) main::c#5 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#4 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte[256]) buffer2#9 ← phi( main::@3/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#18 ← phi( main::@3/(byte[256]) buffer1#19 main::@4/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#5 ← phi( main::@3/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#5 )
  (byte) main::c#3 ← phi( main::@3/(byte) main::c#4 main::@4/(byte) main::c#3 )
  (byte*) RASTER#2 ← phi( main::@3/(byte*) RASTER#1 main::@4/(byte*) RASTER#2 )
  (byte~) main::$3 ← * (byte*) RASTER#2
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte[256]) buffer2#8 ← phi( main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#17 ← phi( main::@4/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#4 ← phi( main::@4/(byte[1000]) SCREEN#5 )
  (byte*) RASTER#7 ← phi( main::@4/(byte*) RASTER#2 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#3 )
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) RASTER#11 ← phi( main::@6/(byte*) RASTER#7 )
  (byte[256]) buffer2#7 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#15 ← phi( main::@6/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#3 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  (byte[256]) buffer2#16 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#16 ← phi( main::@7/(byte[256]) buffer1#15 )
  (byte*) RASTER#9 ← phi( main::@7/(byte*) RASTER#11 )
  (byte[1000]) SCREEN#2 ← phi( main::@7/(byte[1000]) SCREEN#3 )
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte[256]) buffer2#13 ← phi( main::@10/(byte[256]) buffer2#16 )
  (byte[256]) buffer1#22 ← phi( main::@10/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#9 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte*) RASTER#5 ← phi( main::@10/(byte*) RASTER#9 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  (byte[256]) buffer1#5 ← phi( main/(byte[256]) buffer1#9 )
  (byte) prepare::i#0 ← (byte) 0
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#5 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  (byte[256]) buffer2#5 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#10 ← phi( main::@7/(byte[256]) buffer1#15 )
  (byte) flip::srcIdx#0 ← (byte) 0
  (byte) flip::dstIdx#0 ← (byte) 15
  (byte) flip::r#0 ← (byte) 16
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#5 flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#4 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  (byte) flip::c#0 ← (byte) 16
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::r#3 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#3 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#2 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#2 )
  (byte~) flip::$0 ← (byte[256]) buffer1#2 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte~) flip::$1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::dstIdx#1 ← (byte~) flip::$1
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte[256]) buffer2#6 ← phi( flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#4 ← phi( flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@2/(byte[256]) buffer1#2 )
  (byte) flip::r#2 ← phi( flip::@2/(byte) flip::r#3 )
  (byte) flip::dstIdx#4 ← phi( flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#4
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  (byte[256]) buffer1#7 ← phi( flip::@4/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#4 ← phi( flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::i#0 ← (byte) 0
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@3/(byte[256]) buffer1#3 flip::@5/(byte[256]) buffer1#7 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) flip::i#0 )
  (byte[256]) buffer2#2 ← phi( flip::@3/(byte[256]) buffer2#2 flip::@5/(byte[256]) buffer2#4 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte[256]) buffer1#12 ← phi( main::@10/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#1 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1 + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line#0 ← (byte*~) plot::$2
  (byte) plot::i#0 ← (byte) 0
  (byte) plot::y#0 ← (byte) 16
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) plot::i#0 plot::@3/(byte) plot::i#4 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#12 plot::@3/(byte[256]) buffer1#13 )
  (byte) plot::x#0 ← (byte) 0
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::y#3 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#3 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#4 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#4 )
  (byte~) plot::$3 ← (byte[256]) buffer1#4 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte) plot::i#4 ← phi( plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@2/(byte[256]) buffer1#4 )
  (byte) plot::y#2 ← phi( plot::@2/(byte) plot::y#3 )
  (byte*) plot::line#3 ← phi( plot::@2/(byte*) plot::line#2 )
  (byte*~) plot::$5 ← (byte*) plot::line#3 + (byte) 40
  (byte*) plot::line#1 ← (byte*~) plot::$5
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  (byte[256]) buffer2#17 ← phi( @begin/(byte[256]) buffer2#0 )
  (byte[1000]) SCREEN#12 ← phi( @begin/(byte[1000]) SCREEN#0 )
  (byte*) RASTER#10 ← phi( @begin/(byte*) RASTER#0 )
  (byte[256]) buffer1#14 ← phi( @begin/(byte[256]) buffer1#0 )
  call main param-assignment
  to:@5
@5: scope:[]  from @4
  to:@end
@end: scope:[]  from @5

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte[1000]) SCREEN#0 ← (word) 1024
  (byte[256]) buffer1#0 ← (word) 4096
  (byte[256]) buffer2#0 ← (word) 4352
  (byte*) RASTER#0 ← (word) 53266
  to:@4
main: scope:[main]  from @4
  (byte[256]) buffer2#15 ← phi( @4/(byte[256]) buffer2#17 )
  (byte[1000]) SCREEN#11 ← phi( @4/(byte[1000]) SCREEN#12 )
  (byte*) RASTER#8 ← phi( @4/(byte*) RASTER#10 )
  (byte[256]) buffer1#9 ← phi( @4/(byte[256]) buffer1#14 )
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  (byte[256]) buffer2#14 ← phi( main/(byte[256]) buffer2#15 )
  (byte[256]) buffer1#23 ← phi( main/(byte[256]) buffer1#9 )
  (byte[1000]) SCREEN#10 ← phi( main/(byte[1000]) SCREEN#11 )
  (byte*) RASTER#6 ← phi( main/(byte*) RASTER#8 )
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#13 main::@9/(byte[256]) buffer2#14 )
  (byte[256]) buffer1#20 ← phi( main::@11/(byte[256]) buffer1#22 main::@9/(byte[256]) buffer1#23 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#9 main::@9/(byte[1000]) SCREEN#10 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#5 main::@9/(byte*) RASTER#6 )
  (byte) main::c#0 ← (byte) 25
  to:main::@3
main::@2: scope:[main]  from main::@6
  (byte[256]) buffer2#12 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#21 ← phi( main::@6/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#8 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  (byte) main::c#5 ← phi( main::@6/(byte) main::c#1 )
  (byte*) RASTER#4 ← phi( main::@6/(byte*) RASTER#7 )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#19 ← phi( main::@1/(byte[256]) buffer1#20 main::@2/(byte[256]) buffer1#21 main::@3/(byte[256]) buffer1#19 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) main::c#0 main::@2/(byte) main::c#5 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#4 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte[256]) buffer2#9 ← phi( main::@3/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#18 ← phi( main::@3/(byte[256]) buffer1#19 main::@4/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#5 ← phi( main::@3/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#5 )
  (byte) main::c#3 ← phi( main::@3/(byte) main::c#4 main::@4/(byte) main::c#3 )
  (byte*) RASTER#2 ← phi( main::@3/(byte*) RASTER#1 main::@4/(byte*) RASTER#2 )
  (byte~) main::$3 ← * (byte*) RASTER#2
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte[256]) buffer2#8 ← phi( main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#17 ← phi( main::@4/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#4 ← phi( main::@4/(byte[1000]) SCREEN#5 )
  (byte*) RASTER#7 ← phi( main::@4/(byte*) RASTER#2 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#3 )
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) RASTER#11 ← phi( main::@6/(byte*) RASTER#7 )
  (byte[256]) buffer2#7 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#15 ← phi( main::@6/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#3 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  (byte[256]) buffer2#16 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#16 ← phi( main::@7/(byte[256]) buffer1#15 )
  (byte*) RASTER#9 ← phi( main::@7/(byte*) RASTER#11 )
  (byte[1000]) SCREEN#2 ← phi( main::@7/(byte[1000]) SCREEN#3 )
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte[256]) buffer2#13 ← phi( main::@10/(byte[256]) buffer2#16 )
  (byte[256]) buffer1#22 ← phi( main::@10/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#9 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte*) RASTER#5 ← phi( main::@10/(byte*) RASTER#9 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  (byte[256]) buffer1#5 ← phi( main/(byte[256]) buffer1#9 )
  (byte) prepare::i#0 ← (byte) 0
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#5 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  (byte[256]) buffer2#5 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#10 ← phi( main::@7/(byte[256]) buffer1#15 )
  (byte) flip::srcIdx#0 ← (byte) 0
  (byte) flip::dstIdx#0 ← (byte) 15
  (byte) flip::r#0 ← (byte) 16
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#5 flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#4 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  (byte) flip::c#0 ← (byte) 16
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::r#3 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#3 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#2 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#2 )
  (byte~) flip::$0 ← (byte[256]) buffer1#2 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte~) flip::$1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::dstIdx#1 ← (byte~) flip::$1
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte[256]) buffer2#6 ← phi( flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#4 ← phi( flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@2/(byte[256]) buffer1#2 )
  (byte) flip::r#2 ← phi( flip::@2/(byte) flip::r#3 )
  (byte) flip::dstIdx#4 ← phi( flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#4
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  (byte[256]) buffer1#7 ← phi( flip::@4/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#4 ← phi( flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::i#0 ← (byte) 0
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@3/(byte[256]) buffer1#3 flip::@5/(byte[256]) buffer1#7 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) flip::i#0 )
  (byte[256]) buffer2#2 ← phi( flip::@3/(byte[256]) buffer2#2 flip::@5/(byte[256]) buffer2#4 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte[256]) buffer1#12 ← phi( main::@10/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#1 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1 + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line#0 ← (byte*~) plot::$2
  (byte) plot::i#0 ← (byte) 0
  (byte) plot::y#0 ← (byte) 16
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) plot::i#0 plot::@3/(byte) plot::i#4 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#12 plot::@3/(byte[256]) buffer1#13 )
  (byte) plot::x#0 ← (byte) 0
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::y#3 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#3 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#4 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#4 )
  (byte~) plot::$3 ← (byte[256]) buffer1#4 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte) plot::i#4 ← phi( plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@2/(byte[256]) buffer1#4 )
  (byte) plot::y#2 ← phi( plot::@2/(byte) plot::y#3 )
  (byte*) plot::line#3 ← phi( plot::@2/(byte*) plot::line#2 )
  (byte*~) plot::$5 ← (byte*) plot::line#3 + (byte) 40
  (byte*) plot::line#1 ← (byte*~) plot::$5
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  (byte[256]) buffer2#17 ← phi( @begin/(byte[256]) buffer2#0 )
  (byte[1000]) SCREEN#12 ← phi( @begin/(byte[1000]) SCREEN#0 )
  (byte*) RASTER#10 ← phi( @begin/(byte*) RASTER#0 )
  (byte[256]) buffer1#14 ← phi( @begin/(byte[256]) buffer1#0 )
  call main param-assignment
  to:@5
@5: scope:[]  from @4
  to:@end
@end: scope:[]  from @5

INITIAL SSA SYMBOL TABLE
(label) @4
(label) @5
(label) @begin
(label) @end
(byte*) RASTER
(byte*) RASTER#0
(byte*) RASTER#1
(byte*) RASTER#10
(byte*) RASTER#11
(byte*) RASTER#2
(byte*) RASTER#3
(byte*) RASTER#4
(byte*) RASTER#5
(byte*) RASTER#6
(byte*) RASTER#7
(byte*) RASTER#8
(byte*) RASTER#9
(byte[1000]) SCREEN
(byte[1000]) SCREEN#0
(byte[1000]) SCREEN#1
(byte[1000]) SCREEN#10
(byte[1000]) SCREEN#11
(byte[1000]) SCREEN#12
(byte[1000]) SCREEN#2
(byte[1000]) SCREEN#3
(byte[1000]) SCREEN#4
(byte[1000]) SCREEN#5
(byte[1000]) SCREEN#6
(byte[1000]) SCREEN#7
(byte[1000]) SCREEN#8
(byte[1000]) SCREEN#9
(byte[256]) buffer1
(byte[256]) buffer1#0
(byte[256]) buffer1#1
(byte[256]) buffer1#10
(byte[256]) buffer1#11
(byte[256]) buffer1#12
(byte[256]) buffer1#13
(byte[256]) buffer1#14
(byte[256]) buffer1#15
(byte[256]) buffer1#16
(byte[256]) buffer1#17
(byte[256]) buffer1#18
(byte[256]) buffer1#19
(byte[256]) buffer1#2
(byte[256]) buffer1#20
(byte[256]) buffer1#21
(byte[256]) buffer1#22
(byte[256]) buffer1#23
(byte[256]) buffer1#3
(byte[256]) buffer1#4
(byte[256]) buffer1#5
(byte[256]) buffer1#6
(byte[256]) buffer1#7
(byte[256]) buffer1#8
(byte[256]) buffer1#9
(byte[256]) buffer2
(byte[256]) buffer2#0
(byte[256]) buffer2#1
(byte[256]) buffer2#10
(byte[256]) buffer2#11
(byte[256]) buffer2#12
(byte[256]) buffer2#13
(byte[256]) buffer2#14
(byte[256]) buffer2#15
(byte[256]) buffer2#16
(byte[256]) buffer2#17
(byte[256]) buffer2#2
(byte[256]) buffer2#3
(byte[256]) buffer2#4
(byte[256]) buffer2#5
(byte[256]) buffer2#6
(byte[256]) buffer2#7
(byte[256]) buffer2#8
(byte[256]) buffer2#9
(void()) flip()
(byte~) flip::$0
(byte~) flip::$1
(boolean~) flip::$2
(boolean~) flip::$3
(byte~) flip::$4
(boolean~) flip::$5
(label) flip::@1
(label) flip::@2
(label) flip::@3
(label) flip::@4
(label) flip::@5
(label) flip::@return
(byte) flip::c
(byte) flip::c#0
(byte) flip::c#1
(byte) flip::c#2
(byte) flip::dstIdx
(byte) flip::dstIdx#0
(byte) flip::dstIdx#1
(byte) flip::dstIdx#2
(byte) flip::dstIdx#3
(byte) flip::dstIdx#4
(byte) flip::dstIdx#5
(byte) flip::i
(byte) flip::i#0
(byte) flip::i#1
(byte) flip::i#2
(byte) flip::r
(byte) flip::r#0
(byte) flip::r#1
(byte) flip::r#2
(byte) flip::r#3
(byte) flip::r#4
(byte) flip::srcIdx
(byte) flip::srcIdx#0
(byte) flip::srcIdx#1
(byte) flip::srcIdx#2
(byte) flip::srcIdx#3
(byte) flip::srcIdx#4
(void()) main()
(byte~) main::$1
(boolean~) main::$2
(byte~) main::$3
(boolean~) main::$4
(boolean~) main::$5
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@6
(label) main::@7
(label) main::@9
(label) main::@return
(byte) main::c
(byte) main::c#0
(byte) main::c#1
(byte) main::c#2
(byte) main::c#3
(byte) main::c#4
(byte) main::c#5
(void()) plot()
(byte~) plot::$0
(byte*~) plot::$1
(byte*~) plot::$2
(byte~) plot::$3
(boolean~) plot::$4
(byte*~) plot::$5
(boolean~) plot::$6
(label) plot::@1
(label) plot::@2
(label) plot::@3
(label) plot::@return
(byte) plot::i
(byte) plot::i#0
(byte) plot::i#1
(byte) plot::i#2
(byte) plot::i#3
(byte) plot::i#4
(byte*) plot::line
(byte*) plot::line#0
(byte*) plot::line#1
(byte*) plot::line#2
(byte*) plot::line#3
(byte*) plot::line#4
(byte) plot::x
(byte) plot::x#0
(byte) plot::x#1
(byte) plot::x#2
(byte) plot::y
(byte) plot::y#0
(byte) plot::y#1
(byte) plot::y#2
(byte) plot::y#3
(byte) plot::y#4
(void()) prepare()
(boolean~) prepare::$0
(label) prepare::@1
(label) prepare::@return
(byte) prepare::i
(byte) prepare::i#0
(byte) prepare::i#1
(byte) prepare::i#2

Culled Empty Block (label) @5
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[1000]) SCREEN#0 ← (word) 1024
  (byte[256]) buffer1#0 ← (word) 4096
  (byte[256]) buffer2#0 ← (word) 4352
  (byte*) RASTER#0 ← (word) 53266
  to:@4
main: scope:[main]  from @4
  (byte[256]) buffer2#15 ← phi( @4/(byte[256]) buffer2#17 )
  (byte[1000]) SCREEN#11 ← phi( @4/(byte[1000]) SCREEN#12 )
  (byte*) RASTER#8 ← phi( @4/(byte*) RASTER#10 )
  (byte[256]) buffer1#9 ← phi( @4/(byte[256]) buffer1#14 )
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  (byte[256]) buffer2#14 ← phi( main/(byte[256]) buffer2#15 )
  (byte[256]) buffer1#23 ← phi( main/(byte[256]) buffer1#9 )
  (byte[1000]) SCREEN#10 ← phi( main/(byte[1000]) SCREEN#11 )
  (byte*) RASTER#6 ← phi( main/(byte*) RASTER#8 )
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#13 main::@9/(byte[256]) buffer2#14 )
  (byte[256]) buffer1#20 ← phi( main::@11/(byte[256]) buffer1#22 main::@9/(byte[256]) buffer1#23 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#9 main::@9/(byte[1000]) SCREEN#10 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#5 main::@9/(byte*) RASTER#6 )
  (byte) main::c#0 ← (byte) 25
  to:main::@3
main::@2: scope:[main]  from main::@6
  (byte[256]) buffer2#12 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#21 ← phi( main::@6/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#8 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  (byte) main::c#5 ← phi( main::@6/(byte) main::c#1 )
  (byte*) RASTER#4 ← phi( main::@6/(byte*) RASTER#7 )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#19 ← phi( main::@1/(byte[256]) buffer1#20 main::@2/(byte[256]) buffer1#21 main::@3/(byte[256]) buffer1#19 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) main::c#0 main::@2/(byte) main::c#5 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#4 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte[256]) buffer2#9 ← phi( main::@3/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#18 ← phi( main::@3/(byte[256]) buffer1#19 main::@4/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#5 ← phi( main::@3/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#5 )
  (byte) main::c#3 ← phi( main::@3/(byte) main::c#4 main::@4/(byte) main::c#3 )
  (byte*) RASTER#2 ← phi( main::@3/(byte*) RASTER#1 main::@4/(byte*) RASTER#2 )
  (byte~) main::$3 ← * (byte*) RASTER#2
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte[256]) buffer2#8 ← phi( main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#17 ← phi( main::@4/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#4 ← phi( main::@4/(byte[1000]) SCREEN#5 )
  (byte*) RASTER#7 ← phi( main::@4/(byte*) RASTER#2 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#3 )
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) RASTER#11 ← phi( main::@6/(byte*) RASTER#7 )
  (byte[256]) buffer2#7 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#15 ← phi( main::@6/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#3 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  (byte[256]) buffer2#16 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#16 ← phi( main::@7/(byte[256]) buffer1#15 )
  (byte*) RASTER#9 ← phi( main::@7/(byte*) RASTER#11 )
  (byte[1000]) SCREEN#2 ← phi( main::@7/(byte[1000]) SCREEN#3 )
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte[256]) buffer2#13 ← phi( main::@10/(byte[256]) buffer2#16 )
  (byte[256]) buffer1#22 ← phi( main::@10/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#9 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte*) RASTER#5 ← phi( main::@10/(byte*) RASTER#9 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  (byte[256]) buffer1#5 ← phi( main/(byte[256]) buffer1#9 )
  (byte) prepare::i#0 ← (byte) 0
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#5 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  (byte[256]) buffer2#5 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#10 ← phi( main::@7/(byte[256]) buffer1#15 )
  (byte) flip::srcIdx#0 ← (byte) 0
  (byte) flip::dstIdx#0 ← (byte) 15
  (byte) flip::r#0 ← (byte) 16
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#5 flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#4 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  (byte) flip::c#0 ← (byte) 16
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::r#3 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#3 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#2 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#2 )
  (byte~) flip::$0 ← (byte[256]) buffer1#2 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte~) flip::$1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::dstIdx#1 ← (byte~) flip::$1
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte[256]) buffer2#6 ← phi( flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#4 ← phi( flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@2/(byte[256]) buffer1#2 )
  (byte) flip::r#2 ← phi( flip::@2/(byte) flip::r#3 )
  (byte) flip::dstIdx#4 ← phi( flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#4
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  (byte[256]) buffer1#7 ← phi( flip::@4/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#4 ← phi( flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::i#0 ← (byte) 0
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@3/(byte[256]) buffer1#3 flip::@5/(byte[256]) buffer1#7 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) flip::i#0 )
  (byte[256]) buffer2#2 ← phi( flip::@3/(byte[256]) buffer2#2 flip::@5/(byte[256]) buffer2#4 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte[256]) buffer1#12 ← phi( main::@10/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#1 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1 + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line#0 ← (byte*~) plot::$2
  (byte) plot::i#0 ← (byte) 0
  (byte) plot::y#0 ← (byte) 16
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) plot::i#0 plot::@3/(byte) plot::i#4 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#12 plot::@3/(byte[256]) buffer1#13 )
  (byte) plot::x#0 ← (byte) 0
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::y#3 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#3 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#4 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#4 )
  (byte~) plot::$3 ← (byte[256]) buffer1#4 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte) plot::i#4 ← phi( plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@2/(byte[256]) buffer1#4 )
  (byte) plot::y#2 ← phi( plot::@2/(byte) plot::y#3 )
  (byte*) plot::line#3 ← phi( plot::@2/(byte*) plot::line#2 )
  (byte*~) plot::$5 ← (byte*) plot::line#3 + (byte) 40
  (byte*) plot::line#1 ← (byte*~) plot::$5
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  (byte[256]) buffer2#17 ← phi( @begin/(byte[256]) buffer2#0 )
  (byte[1000]) SCREEN#12 ← phi( @begin/(byte[1000]) SCREEN#0 )
  (byte*) RASTER#10 ← phi( @begin/(byte*) RASTER#0 )
  (byte[256]) buffer1#14 ← phi( @begin/(byte[256]) buffer1#0 )
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Not aliassing identity: buffer2#2 buffer2#2
Not aliassing identity: buffer1#3 buffer1#3
Alias (byte[256]) buffer1#0 = (byte[256]) buffer1#9 (byte[256]) buffer1#14 (byte[256]) buffer1#23 (byte[256]) buffer1#5 
Alias (byte*) RASTER#0 = (byte*) RASTER#8 (byte*) RASTER#10 (byte*) RASTER#6 
Alias (byte[1000]) SCREEN#0 = (byte[1000]) SCREEN#11 (byte[1000]) SCREEN#12 (byte[1000]) SCREEN#10 
Alias (byte[256]) buffer2#0 = (byte[256]) buffer2#15 (byte[256]) buffer2#17 (byte[256]) buffer2#14 
Alias (byte*) RASTER#11 = (byte*) RASTER#4 (byte*) RASTER#7 (byte*) RASTER#2 (byte*) RASTER#9 (byte*) RASTER#5 
Alias (byte) main::c#1 = (byte) main::c#5 
Alias (byte[1000]) SCREEN#1 = (byte[1000]) SCREEN#8 (byte[1000]) SCREEN#4 (byte[1000]) SCREEN#5 (byte[1000]) SCREEN#3 (byte[1000]) SCREEN#2 (byte[1000]) SCREEN#9 
Alias (byte[256]) buffer1#10 = (byte[256]) buffer1#21 (byte[256]) buffer1#17 (byte[256]) buffer1#18 (byte[256]) buffer1#15 (byte[256]) buffer1#16 (byte[256]) buffer1#22 (byte[256]) buffer1#12 
Alias (byte[256]) buffer2#12 = (byte[256]) buffer2#8 (byte[256]) buffer2#9 (byte[256]) buffer2#7 (byte[256]) buffer2#16 (byte[256]) buffer2#13 (byte[256]) buffer2#5 
Alias (byte) main::c#2 = (byte) main::c#3 
Alias (byte) flip::dstIdx#1 = (byte~) flip::$1 (byte) flip::dstIdx#4 
Alias (byte) flip::r#2 = (byte) flip::r#3 
Alias (byte[256]) buffer1#11 = (byte[256]) buffer1#2 (byte[256]) buffer1#7 
Alias (byte) flip::srcIdx#1 = (byte) flip::srcIdx#4 
Alias (byte[256]) buffer2#1 = (byte[256]) buffer2#6 (byte[256]) buffer2#4 
Alias (byte*) plot::line#0 = (byte*~) plot::$2 
Alias (byte*) plot::line#2 = (byte*) plot::line#3 
Alias (byte) plot::y#2 = (byte) plot::y#3 
Alias (byte[256]) buffer1#13 = (byte[256]) buffer1#4 
Alias (byte) plot::i#1 = (byte) plot::i#4 
Alias (byte*) plot::line#1 = (byte*~) plot::$5 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[1000]) SCREEN#0 ← (word) 1024
  (byte[256]) buffer1#0 ← (word) 4096
  (byte[256]) buffer2#0 ← (word) 4352
  (byte*) RASTER#0 ← (word) 53266
  to:@4
main: scope:[main]  from @4
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#12 main::@9/(byte[256]) buffer2#0 )
  (byte[256]) buffer1#20 ← phi( main::@11/(byte[256]) buffer1#10 main::@9/(byte[256]) buffer1#0 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#1 main::@9/(byte[1000]) SCREEN#0 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#11 main::@9/(byte*) RASTER#0 )
  (byte) main::c#0 ← (byte) 25
  to:main::@3
main::@2: scope:[main]  from main::@6
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#19 ← phi( main::@1/(byte[256]) buffer1#20 main::@2/(byte[256]) buffer1#10 main::@3/(byte[256]) buffer1#19 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#1 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) main::c#0 main::@2/(byte) main::c#1 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#11 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte[256]) buffer2#12 ← phi( main::@3/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#12 )
  (byte[256]) buffer1#10 ← phi( main::@3/(byte[256]) buffer1#19 main::@4/(byte[256]) buffer1#10 )
  (byte[1000]) SCREEN#1 ← phi( main::@3/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#1 )
  (byte) main::c#2 ← phi( main::@3/(byte) main::c#4 main::@4/(byte) main::c#2 )
  (byte*) RASTER#11 ← phi( main::@3/(byte*) RASTER#1 main::@4/(byte*) RASTER#11 )
  (byte~) main::$3 ← * (byte*) RASTER#11
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  (byte) prepare::i#0 ← (byte) 0
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#0 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  (byte) flip::srcIdx#0 ← (byte) 0
  (byte) flip::dstIdx#0 ← (byte) 15
  (byte) flip::r#0 ← (byte) 16
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#12 flip::@4/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  (byte) flip::c#0 ← (byte) 16
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#2 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#11 )
  (byte~) flip::$0 ← (byte[256]) buffer1#11 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  (byte) flip::i#0 ← (byte) 0
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@3/(byte[256]) buffer1#3 flip::@5/(byte[256]) buffer1#11 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) flip::i#0 )
  (byte[256]) buffer2#2 ← phi( flip::@3/(byte[256]) buffer2#2 flip::@5/(byte[256]) buffer2#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1 + (byte~) plot::$0
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 12
  (byte) plot::i#0 ← (byte) 0
  (byte) plot::y#0 ← (byte) 16
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) plot::i#0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#10 plot::@3/(byte[256]) buffer1#13 )
  (byte) plot::x#0 ← (byte) 0
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#2 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#13 )
  (byte~) plot::$3 ← (byte[256]) buffer1#13 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Not aliassing identity: buffer2#2 buffer2#2
Not aliassing identity: buffer1#3 buffer1#3
Self Phi Eliminated (byte*) RASTER#1
Self Phi Eliminated (byte) main::c#4
Self Phi Eliminated (byte[1000]) SCREEN#6
Self Phi Eliminated (byte[256]) buffer1#19
Self Phi Eliminated (byte[256]) buffer2#10
Self Phi Eliminated (byte*) RASTER#11
Self Phi Eliminated (byte) main::c#2
Self Phi Eliminated (byte[1000]) SCREEN#1
Self Phi Eliminated (byte[256]) buffer1#10
Self Phi Eliminated (byte[256]) buffer2#12
Self Phi Eliminated (byte[256]) buffer1#1
Self Phi Eliminated (byte[256]) buffer1#11
Self Phi Eliminated (byte[256]) buffer2#1
Self Phi Eliminated (byte) flip::r#2
Self Phi Eliminated (byte[256]) buffer2#2
Self Phi Eliminated (byte[256]) buffer1#3
Self Phi Eliminated (byte[256]) buffer1#13
Self Phi Eliminated (byte*) plot::line#2
Self Phi Eliminated (byte) plot::y#2
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[1000]) SCREEN#0 ← (word) 1024
  (byte[256]) buffer1#0 ← (word) 4096
  (byte[256]) buffer2#0 ← (word) 4352
  (byte*) RASTER#0 ← (word) 53266
  to:@4
main: scope:[main]  from @4
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#12 main::@9/(byte[256]) buffer2#0 )
  (byte[256]) buffer1#20 ← phi( main::@11/(byte[256]) buffer1#10 main::@9/(byte[256]) buffer1#0 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#1 main::@9/(byte[1000]) SCREEN#0 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#11 main::@9/(byte*) RASTER#0 )
  (byte) main::c#0 ← (byte) 25
  to:main::@3
main::@2: scope:[main]  from main::@6
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 )
  (byte[256]) buffer1#19 ← phi( main::@1/(byte[256]) buffer1#20 main::@2/(byte[256]) buffer1#10 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#1 )
  (byte) main::c#4 ← phi( main::@1/(byte) main::c#0 main::@2/(byte) main::c#1 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#11 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte[256]) buffer2#12 ← phi( main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#10 ← phi( main::@3/(byte[256]) buffer1#19 )
  (byte[1000]) SCREEN#1 ← phi( main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#2 ← phi( main::@3/(byte) main::c#4 )
  (byte*) RASTER#11 ← phi( main::@3/(byte*) RASTER#1 )
  (byte~) main::$3 ← * (byte*) RASTER#11
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  (byte) prepare::i#0 ← (byte) 0
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#0 )
  (byte) prepare::i#2 ← phi( prepare/(byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  (byte) flip::srcIdx#0 ← (byte) 0
  (byte) flip::dstIdx#0 ← (byte) 15
  (byte) flip::r#0 ← (byte) 16
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#12 flip::@4/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  (byte) flip::c#0 ← (byte) 16
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@1/(byte[256]) buffer1#6 )
  (byte~) flip::$0 ← (byte[256]) buffer1#11 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  (byte) flip::i#0 ← (byte) 0
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@5/(byte[256]) buffer1#11 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) flip::i#0 )
  (byte[256]) buffer2#2 ← phi( flip::@5/(byte[256]) buffer2#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1 + (byte~) plot::$0
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 12
  (byte) plot::i#0 ← (byte) 0
  (byte) plot::y#0 ← (byte) 16
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) plot::i#0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#10 plot::@3/(byte[256]) buffer1#13 )
  (byte) plot::x#0 ← (byte) 0
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@1/(byte[256]) buffer1#8 )
  (byte~) plot::$3 ← (byte[256]) buffer1#13 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Redundant Phi (byte*) RASTER#11 (byte*) RASTER#1
Redundant Phi (byte) main::c#2 (byte) main::c#4
Redundant Phi (byte[1000]) SCREEN#1 (byte[1000]) SCREEN#6
Redundant Phi (byte[256]) buffer1#10 (byte[256]) buffer1#19
Redundant Phi (byte[256]) buffer2#12 (byte[256]) buffer2#10
Redundant Phi (byte[256]) buffer1#1 (byte[256]) buffer1#0
Redundant Phi (byte[256]) buffer1#11 (byte[256]) buffer1#6
Redundant Phi (byte[256]) buffer2#1 (byte[256]) buffer2#3
Redundant Phi (byte) flip::r#2 (byte) flip::r#4
Redundant Phi (byte[256]) buffer2#2 (byte[256]) buffer2#1
Redundant Phi (byte[256]) buffer1#3 (byte[256]) buffer1#11
Redundant Phi (byte[256]) buffer1#13 (byte[256]) buffer1#8
Redundant Phi (byte*) plot::line#2 (byte*) plot::line#4
Redundant Phi (byte) plot::y#2 (byte) plot::y#4
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[1000]) SCREEN#0 ← (word) 1024
  (byte[256]) buffer1#0 ← (word) 4096
  (byte[256]) buffer2#0 ← (word) 4352
  (byte*) RASTER#0 ← (word) 53266
  to:@4
main: scope:[main]  from @4
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#10 main::@9/(byte[256]) buffer2#0 )
  (byte[256]) buffer1#20 ← phi( main::@11/(byte[256]) buffer1#19 main::@9/(byte[256]) buffer1#0 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#6 main::@9/(byte[1000]) SCREEN#0 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#1 main::@9/(byte*) RASTER#0 )
  (byte) main::c#0 ← (byte) 25
  to:main::@3
main::@2: scope:[main]  from main::@6
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#19 ← phi( main::@1/(byte[256]) buffer1#20 main::@2/(byte[256]) buffer1#19 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) main::c#0 main::@2/(byte) main::c#1 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#1
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#4
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  (byte) prepare::i#0 ← (byte) 0
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  (byte) flip::srcIdx#0 ← (byte) 0
  (byte) flip::dstIdx#0 ← (byte) 15
  (byte) flip::r#0 ← (byte) 16
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#10 flip::@4/(byte[256]) buffer2#3 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#19 flip::@4/(byte[256]) buffer1#6 )
  (byte) flip::c#0 ← (byte) 16
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#6 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#3 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#4
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  (byte) flip::i#0 ← (byte) 0
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) flip::i#0 )
  (byte~) flip::$4 ← (byte[256]) buffer2#3 *idx (byte) flip::i#2
  *((byte[256]) buffer1#6 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#6 + (byte~) plot::$0
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 12
  (byte) plot::i#0 ← (byte) 0
  (byte) plot::y#0 ← (byte) 16
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) plot::i#0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#19 plot::@3/(byte[256]) buffer1#8 )
  (byte) plot::x#0 ← (byte) 0
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#8 *idx (byte) plot::i#2
  *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#4
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Simple Condition (boolean~) main::$2 if((byte~) main::$1!=(byte) 254) goto main::@3
Simple Condition (boolean~) main::$4 if((byte~) main::$3!=(byte) 255) goto main::@4
Simple Condition (boolean~) main::$5 if((byte) main::c#1!=(byte) 0) goto main::@2
Simple Condition (boolean~) prepare::$0 if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
Simple Condition (boolean~) flip::$2 if((byte) flip::c#1!=(byte) 0) goto flip::@2
Simple Condition (boolean~) flip::$3 if((byte) flip::r#1!=(byte) 0) goto flip::@1
Simple Condition (boolean~) flip::$5 if((byte) flip::i#1!=(byte) 0) goto flip::@3
Simple Condition (boolean~) plot::$4 if((byte) plot::x#1<(byte) 16) goto plot::@2
Simple Condition (boolean~) plot::$6 if((byte) plot::y#1!=(byte) 0) goto plot::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[1000]) SCREEN#0 ← (word) 1024
  (byte[256]) buffer1#0 ← (word) 4096
  (byte[256]) buffer2#0 ← (word) 4352
  (byte*) RASTER#0 ← (word) 53266
  to:@4
main: scope:[main]  from @4
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#10 main::@9/(byte[256]) buffer2#0 )
  (byte[256]) buffer1#20 ← phi( main::@11/(byte[256]) buffer1#19 main::@9/(byte[256]) buffer1#0 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#6 main::@9/(byte[1000]) SCREEN#0 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#1 main::@9/(byte*) RASTER#0 )
  (byte) main::c#0 ← (byte) 25
  to:main::@3
main::@2: scope:[main]  from main::@6
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#19 ← phi( main::@1/(byte[256]) buffer1#20 main::@2/(byte[256]) buffer1#19 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) main::c#0 main::@2/(byte) main::c#1 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#1
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#4
  if((byte) main::c#1!=(byte) 0) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  (byte) prepare::i#0 ← (byte) 0
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  (byte) flip::srcIdx#0 ← (byte) 0
  (byte) flip::dstIdx#0 ← (byte) 15
  (byte) flip::r#0 ← (byte) 16
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#10 flip::@4/(byte[256]) buffer2#3 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#19 flip::@4/(byte[256]) buffer1#6 )
  (byte) flip::c#0 ← (byte) 16
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#6 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#3 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#4
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  (byte) flip::i#0 ← (byte) 0
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) flip::i#0 )
  (byte~) flip::$4 ← (byte[256]) buffer2#3 *idx (byte) flip::i#2
  *((byte[256]) buffer1#6 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#6 + (byte~) plot::$0
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 12
  (byte) plot::i#0 ← (byte) 0
  (byte) plot::y#0 ← (byte) 16
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) plot::i#0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#19 plot::@3/(byte[256]) buffer1#8 )
  (byte) plot::x#0 ← (byte) 0
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#8 *idx (byte) plot::i#2
  *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#4
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Constant (const byte[1000]) SCREEN#0 = 1024
Constant (const byte[256]) buffer1#0 = 4096
Constant (const byte[256]) buffer2#0 = 4352
Constant (const byte*) RASTER#0 = 53266
Constant (const byte) main::c#0 = 25
Constant (const byte) prepare::i#0 = 0
Constant (const byte) flip::srcIdx#0 = 0
Constant (const byte) flip::dstIdx#0 = 15
Constant (const byte) flip::r#0 = 16
Constant (const byte) flip::c#0 = 16
Constant (const byte) flip::i#0 = 0
Constant (const byte) plot::$0 = 5*40
Constant (const byte) plot::i#0 = 0
Constant (const byte) plot::y#0 = 16
Constant (const byte) plot::x#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@4
main: scope:[main]  from @4
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#10 main::@9/(const byte[256]) buffer2#0 )
  (byte[256]) buffer1#20 ← phi( main::@11/(byte[256]) buffer1#19 main::@9/(const byte[256]) buffer1#0 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#6 main::@9/(const byte[1000]) SCREEN#0 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#1 main::@9/(const byte*) RASTER#0 )
  to:main::@3
main::@2: scope:[main]  from main::@6
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#19 ← phi( main::@1/(byte[256]) buffer1#20 main::@2/(byte[256]) buffer1#19 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(const byte) main::c#0 main::@2/(byte) main::c#1 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#1
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#4
  if((byte) main::c#1!=(byte) 0) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(const byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(const byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(const byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#10 flip::@4/(byte[256]) buffer2#3 )
  (byte) flip::srcIdx#3 ← phi( flip/(const byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#19 flip::@4/(byte[256]) buffer1#6 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(const byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#6 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#3 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#4
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(const byte) flip::i#0 )
  (byte~) flip::$4 ← (byte[256]) buffer2#3 *idx (byte) flip::i#2
  *((byte[256]) buffer1#6 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#6 + (const byte) plot::$0
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 12
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(const byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(const byte) plot::i#0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#19 plot::@3/(byte[256]) buffer1#8 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(const byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#8 *idx (byte) plot::i#2
  *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#4
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Multiple usages for variable. Not optimizing sub-constant (byte[1000]) SCREEN#6
Consolidated constant in assignment plot::line#0
Succesful SSA optimization Pass2ConstantAdditionElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@4
main: scope:[main]  from @4
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#10 main::@9/(const byte[256]) buffer2#0 )
  (byte[256]) buffer1#20 ← phi( main::@11/(byte[256]) buffer1#19 main::@9/(const byte[256]) buffer1#0 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#6 main::@9/(const byte[1000]) SCREEN#0 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#1 main::@9/(const byte*) RASTER#0 )
  to:main::@3
main::@2: scope:[main]  from main::@6
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#19 ← phi( main::@1/(byte[256]) buffer1#20 main::@2/(byte[256]) buffer1#19 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(const byte) main::c#0 main::@2/(byte) main::c#1 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#1
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#4
  if((byte) main::c#1!=(byte) 0) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(const byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(const byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(const byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#10 flip::@4/(byte[256]) buffer2#3 )
  (byte) flip::srcIdx#3 ← phi( flip/(const byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#19 flip::@4/(byte[256]) buffer1#6 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(const byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#6 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#3 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#4
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(const byte) flip::i#0 )
  (byte~) flip::$4 ← (byte[256]) buffer2#3 *idx (byte) flip::i#2
  *((byte[256]) buffer1#6 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#6
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (const byte) plot::$0+(byte) 12
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(const byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(const byte) plot::i#0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#19 plot::@3/(byte[256]) buffer1#8 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(const byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#8 *idx (byte) plot::i#2
  *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#4
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Culled Empty Block (label) main::@9
Culled Empty Block (label) main::@2
Culled Empty Block (label) flip::@5
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@4
main: scope:[main]  from @4
  call prepare param-assignment
  to:main::@1
main::@1: scope:[main]  from main main::@11
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#10 main/(const byte[256]) buffer2#0 )
  (byte[256]) buffer1#20 ← phi( main::@11/(byte[256]) buffer1#19 main/(const byte[256]) buffer1#0 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#6 main/(const byte[1000]) SCREEN#0 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#1 main/(const byte*) RASTER#0 )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@3 main::@6
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@6/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#19 ← phi( main::@1/(byte[256]) buffer1#20 main::@6/(byte[256]) buffer1#19 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@6/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(const byte) main::c#0 main::@6/(byte) main::c#1 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@6/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#1
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#4
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(const byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(const byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(const byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#10 flip::@4/(byte[256]) buffer2#3 )
  (byte) flip::srcIdx#3 ← phi( flip/(const byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#19 flip::@4/(byte[256]) buffer1#6 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(const byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#6 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#3 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#4
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(const byte) flip::i#0 )
  (byte~) flip::$4 ← (byte[256]) buffer2#3 *idx (byte) flip::i#2
  *((byte[256]) buffer1#6 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#6
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (const byte) plot::$0+(byte) 12
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(const byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(const byte) plot::i#0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#19 plot::@3/(byte[256]) buffer1#8 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(const byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#8 *idx (byte) plot::i#2
  *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#4
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Not aliassing across scopes: plot::$1 SCREEN#6
Self Phi Eliminated (byte*) RASTER#1
Self Phi Eliminated (byte[1000]) SCREEN#6
Self Phi Eliminated (byte[256]) buffer1#19
Self Phi Eliminated (byte[256]) buffer2#10
Self Phi Eliminated (byte[256]) buffer1#6
Self Phi Eliminated (byte[256]) buffer2#3
Self Phi Eliminated (byte[256]) buffer1#8
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@4
main: scope:[main]  from @4
  call prepare param-assignment
  to:main::@1
main::@1: scope:[main]  from main main::@11
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#10 main/(const byte[256]) buffer2#0 )
  (byte[256]) buffer1#20 ← phi( main::@11/(byte[256]) buffer1#19 main/(const byte[256]) buffer1#0 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#6 main/(const byte[1000]) SCREEN#0 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#1 main/(const byte*) RASTER#0 )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@3 main::@6
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 )
  (byte[256]) buffer1#19 ← phi( main::@1/(byte[256]) buffer1#20 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 )
  (byte) main::c#4 ← phi( main::@1/(const byte) main::c#0 main::@6/(byte) main::c#1 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#1
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#4
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(const byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(const byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(const byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#10 )
  (byte) flip::srcIdx#3 ← phi( flip/(const byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#19 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(const byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#6 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#3 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#4
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(const byte) flip::i#0 )
  (byte~) flip::$4 ← (byte[256]) buffer2#3 *idx (byte) flip::i#2
  *((byte[256]) buffer1#6 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#6
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (const byte) plot::$0+(byte) 12
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(const byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(const byte) plot::i#0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#19 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(const byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#8 *idx (byte) plot::i#2
  *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#4
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Redundant Phi (byte*) RASTER#1 (byte*) RASTER#3
Redundant Phi (byte[1000]) SCREEN#6 (byte[1000]) SCREEN#7
Redundant Phi (byte[256]) buffer1#19 (byte[256]) buffer1#20
Redundant Phi (byte[256]) buffer2#10 (byte[256]) buffer2#11
Redundant Phi (byte[256]) buffer1#6 (byte[256]) buffer1#19
Redundant Phi (byte[256]) buffer2#3 (byte[256]) buffer2#10
Redundant Phi (byte[256]) buffer1#8 (byte[256]) buffer1#19
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@4
main: scope:[main]  from @4
  call prepare param-assignment
  to:main::@1
main::@1: scope:[main]  from main main::@11
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#11 main/(const byte[256]) buffer2#0 )
  (byte[256]) buffer1#20 ← phi( main::@11/(byte[256]) buffer1#20 main/(const byte[256]) buffer1#0 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#7 main/(const byte[1000]) SCREEN#0 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#3 main/(const byte*) RASTER#0 )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@3 main::@6
  (byte) main::c#4 ← phi( main::@1/(const byte) main::c#0 main::@6/(byte) main::c#1 )
  (byte~) main::$1 ← * (byte*) RASTER#3
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#3
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#4
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(const byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(const byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(const byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte) flip::srcIdx#3 ← phi( flip/(const byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(const byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#20 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#11 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#4
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(const byte) flip::i#0 )
  (byte~) flip::$4 ← (byte[256]) buffer2#11 *idx (byte) flip::i#2
  *((byte[256]) buffer1#20 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#7
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (const byte) plot::$0+(byte) 12
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(const byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(const byte) plot::i#0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(const byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#20 *idx (byte) plot::i#2
  *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#4
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Not aliassing identity: RASTER#3 RASTER#3
Not aliassing identity: SCREEN#7 SCREEN#7
Not aliassing identity: buffer1#20 buffer1#20
Not aliassing identity: buffer2#11 buffer2#11
Not aliassing across scopes: plot::$1 SCREEN#7
Self Phi Eliminated (byte*) RASTER#3
Self Phi Eliminated (byte[1000]) SCREEN#7
Self Phi Eliminated (byte[256]) buffer1#20
Self Phi Eliminated (byte[256]) buffer2#11
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@4
main: scope:[main]  from @4
  call prepare param-assignment
  to:main::@1
main::@1: scope:[main]  from main main::@11
  (byte[256]) buffer2#11 ← phi( main/(const byte[256]) buffer2#0 )
  (byte[256]) buffer1#20 ← phi( main/(const byte[256]) buffer1#0 )
  (byte[1000]) SCREEN#7 ← phi( main/(const byte[1000]) SCREEN#0 )
  (byte*) RASTER#3 ← phi( main/(const byte*) RASTER#0 )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@3 main::@6
  (byte) main::c#4 ← phi( main::@1/(const byte) main::c#0 main::@6/(byte) main::c#1 )
  (byte~) main::$1 ← * (byte*) RASTER#3
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#3
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#4
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(const byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(const byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(const byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte) flip::srcIdx#3 ← phi( flip/(const byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(const byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#20 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#11 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#4
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(const byte) flip::i#0 )
  (byte~) flip::$4 ← (byte[256]) buffer2#11 *idx (byte) flip::i#2
  *((byte[256]) buffer1#20 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#7
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (const byte) plot::$0+(byte) 12
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(const byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(const byte) plot::i#0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(const byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#20 *idx (byte) plot::i#2
  *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#4
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Redundant Phi (byte*) RASTER#3 (const byte*) RASTER#0
Redundant Phi (byte[1000]) SCREEN#7 (const byte[1000]) SCREEN#0
Redundant Phi (byte[256]) buffer1#20 (const byte[256]) buffer1#0
Redundant Phi (byte[256]) buffer2#11 (const byte[256]) buffer2#0
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@4
main: scope:[main]  from @4
  call prepare param-assignment
  to:main::@1
main::@1: scope:[main]  from main main::@11
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@3 main::@6
  (byte) main::c#4 ← phi( main::@1/(const byte) main::c#0 main::@6/(byte) main::c#1 )
  (byte~) main::$1 ← * (const byte*) RASTER#0
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (const byte*) RASTER#0
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#4
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(const byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(const byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(const byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte) flip::srcIdx#3 ← phi( flip/(const byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(const byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (const byte[256]) buffer1#0 *idx (byte) flip::srcIdx#2
  *((const byte[256]) buffer2#0 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#4
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(const byte) flip::i#0 )
  (byte~) flip::$4 ← (const byte[256]) buffer2#0 *idx (byte) flip::i#2
  *((const byte[256]) buffer1#0 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*~) plot::$1 ← (const byte[1000]) SCREEN#0
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (const byte) plot::$0+(byte) 12
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(const byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(const byte) plot::i#0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(const byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (const byte[256]) buffer1#0 *idx (byte) plot::i#2
  *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#4
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Constant (const byte*) plot::$1 = SCREEN#0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@4
main: scope:[main]  from @4
  call prepare param-assignment
  to:main::@1
main::@1: scope:[main]  from main main::@11
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@3 main::@6
  (byte) main::c#4 ← phi( main::@1/(const byte) main::c#0 main::@6/(byte) main::c#1 )
  (byte~) main::$1 ← * (const byte*) RASTER#0
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (const byte*) RASTER#0
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#4
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(const byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(const byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(const byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte) flip::srcIdx#3 ← phi( flip/(const byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(const byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (const byte[256]) buffer1#0 *idx (byte) flip::srcIdx#2
  *((const byte[256]) buffer2#0 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#4
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(const byte) flip::i#0 )
  (byte~) flip::$4 ← (const byte[256]) buffer2#0 *idx (byte) flip::i#2
  *((const byte[256]) buffer1#0 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*) plot::line#0 ← (const byte*) plot::$1 + (const byte) plot::$0+(byte) 12
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(const byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(const byte) plot::i#0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(const byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (const byte[256]) buffer1#0 *idx (byte) plot::i#2
  *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#4
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Constant (const byte*) plot::line#0 = plot::$1+plot::$0+12
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@4
main: scope:[main]  from @4
  call prepare param-assignment
  to:main::@1
main::@1: scope:[main]  from main main::@11
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@3 main::@6
  (byte) main::c#4 ← phi( main::@1/(const byte) main::c#0 main::@6/(byte) main::c#1 )
  (byte~) main::$1 ← * (const byte*) RASTER#0
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (const byte*) RASTER#0
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#4
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(const byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(const byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(const byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte) flip::srcIdx#3 ← phi( flip/(const byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(const byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (const byte[256]) buffer1#0 *idx (byte) flip::srcIdx#2
  *((const byte[256]) buffer2#0 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#4
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(const byte) flip::i#0 )
  (byte~) flip::$4 ← (const byte[256]) buffer2#0 *idx (byte) flip::i#2
  *((const byte[256]) buffer1#0 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(const byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(const byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(const byte) plot::i#0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(const byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (const byte[256]) buffer1#0 *idx (byte) plot::i#2
  *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#4
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::srcIdx#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::i#2
Culled Empty Block (label) main::@1
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@4
main: scope:[main]  from @4
  call prepare param-assignment
  to:main::@3
main::@3: scope:[main]  from main main::@11 main::@3 main::@6
  (byte) main::c#4 ← phi( main/(const byte) main::c#0 main::@6/(byte) main::c#1 main::@11/(const byte) main::c#0 )
  (byte~) main::$1 ← * (const byte*) RASTER#0
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (const byte*) RASTER#0
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#4
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(const byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(const byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(const byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte) flip::srcIdx#3 ← phi( flip/(const byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(const byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (const byte[256]) buffer1#0 *idx (byte) flip::srcIdx#2
  *((const byte[256]) buffer2#0 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#4
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(const byte) flip::i#0 )
  (byte~) flip::$4 ← (const byte[256]) buffer2#0 *idx (byte) flip::i#2
  *((const byte[256]) buffer1#0 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(const byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(const byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(const byte) plot::i#0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(const byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (const byte[256]) buffer1#0 *idx (byte) plot::i#2
  *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#4
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::srcIdx#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::srcIdx#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::i#2
Inlining constant with var siblings (const byte) main::c#0
Inlining constant with var siblings (const byte) main::c#0
Inlining constant with var siblings (const byte) prepare::i#0
Inlining constant with var siblings (const byte) prepare::i#0
Inlining constant with var siblings (const byte) flip::srcIdx#0
Inlining constant with var siblings (const byte) flip::srcIdx#0
Inlining constant with var siblings (const byte) flip::srcIdx#0
Inlining constant with var siblings (const byte) flip::dstIdx#0
Inlining constant with var siblings (const byte) flip::dstIdx#0
Inlining constant with var siblings (const byte) flip::dstIdx#0
Inlining constant with var siblings (const byte) flip::dstIdx#0
Inlining constant with var siblings (const byte) flip::r#0
Inlining constant with var siblings (const byte) flip::r#0
Inlining constant with var siblings (const byte) flip::c#0
Inlining constant with var siblings (const byte) flip::c#0
Inlining constant with var siblings (const byte) flip::i#0
Inlining constant with var siblings (const byte) flip::i#0
Inlining constant with var siblings (const byte) plot::i#0
Inlining constant with var siblings (const byte) plot::i#0
Inlining constant with var siblings (const byte) plot::i#0
Inlining constant with var siblings (const byte) plot::y#0
Inlining constant with var siblings (const byte) plot::y#0
Inlining constant with var siblings (const byte) plot::x#0
Inlining constant with var siblings (const byte) plot::x#0
Inlining constant with var siblings (const byte*) plot::line#0
Inlining constant with var siblings (const byte*) plot::line#0
Constant inlined flip::r#0 = (byte) 16
Constant inlined flip::dstIdx#0 = (byte) 15
Constant inlined plot::x#0 = (byte) 0
Constant inlined prepare::i#0 = (byte) 0
Constant inlined plot::i#0 = (byte) 0
Constant inlined flip::i#0 = (byte) 0
Constant inlined main::c#0 = (byte) 25
Constant inlined plot::y#0 = (byte) 16
Constant inlined plot::$1 = (const byte[1000]) SCREEN#0
Constant inlined plot::$0 = (byte) 5*(byte) 40
Constant inlined flip::c#0 = (byte) 16
Constant inlined plot::line#0 = (const byte[1000]) SCREEN#0+(byte) 5*(byte) 40+(byte) 12
Constant inlined flip::srcIdx#0 = (byte) 0
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@4
main: scope:[main]  from @4
  call prepare param-assignment
  to:main::@3
main::@3: scope:[main]  from main main::@11 main::@3 main::@6
  (byte) main::c#4 ← phi( main/(byte) 25 main::@6/(byte) main::c#1 main::@11/(byte) 25 )
  (byte~) main::$1 ← * (const byte*) RASTER#0
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (const byte*) RASTER#0
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#4
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (const byte[256]) buffer1#0 *idx (byte) flip::srcIdx#2
  *((const byte[256]) buffer2#0 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#4
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (const byte[256]) buffer2#0 *idx (byte) flip::i#2
  *((const byte[256]) buffer1#0 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(const byte[1000]) SCREEN#0+(byte) 5*(byte) 40+(byte) 12 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (const byte[256]) buffer1#0 *idx (byte) plot::i#2
  *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#4
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4

FINAL SYMBOL TABLE
(label) @4
(label) @begin
(label) @end
(byte*) RASTER
(const byte*) RASTER#0 = (word) 53266
(byte[1000]) SCREEN
(const byte[1000]) SCREEN#0 = (word) 1024
(byte[256]) buffer1
(const byte[256]) buffer1#0 = (word) 4096
(byte[256]) buffer2
(const byte[256]) buffer2#0 = (word) 4352
(void()) flip()
(byte~) flip::$0
(byte~) flip::$4
(label) flip::@1
(label) flip::@2
(label) flip::@3
(label) flip::@4
(label) flip::@return
(byte) flip::c
(byte) flip::c#1
(byte) flip::c#2
(byte) flip::dstIdx
(byte) flip::dstIdx#1
(byte) flip::dstIdx#2
(byte) flip::dstIdx#3
(byte) flip::dstIdx#5
(byte) flip::i
(byte) flip::i#1
(byte) flip::i#2
(byte) flip::r
(byte) flip::r#1
(byte) flip::r#4
(byte) flip::srcIdx
(byte) flip::srcIdx#1
(byte) flip::srcIdx#2
(byte) flip::srcIdx#3
(void()) main()
(byte~) main::$1
(byte~) main::$3
(label) main::@10
(label) main::@11
(label) main::@3
(label) main::@4
(label) main::@6
(label) main::@7
(label) main::@return
(byte) main::c
(byte) main::c#1
(byte) main::c#4
(void()) plot()
(byte~) plot::$3
(label) plot::@1
(label) plot::@2
(label) plot::@3
(label) plot::@return
(byte) plot::i
(byte) plot::i#1
(byte) plot::i#2
(byte) plot::i#3
(byte*) plot::line
(byte*) plot::line#1
(byte*) plot::line#4
(byte) plot::x
(byte) plot::x#1
(byte) plot::x#2
(byte) plot::y
(byte) plot::y#1
(byte) plot::y#4
(void()) prepare()
(label) prepare::@1
(label) prepare::@return
(byte) prepare::i
(byte) prepare::i#1
(byte) prepare::i#2

Block Sequence Planned @begin @4 @end main main::@3 main::@4 main::@6 main::@7 main::@10 main::@11 main::@return plot plot::@1 plot::@2 plot::@3 plot::@return flip flip::@1 flip::@2 flip::@4 flip::@3 flip::@return prepare prepare::@1 prepare::@return 
Added new block during phi lifting main::@12(between main::@6 and main::@3)
Added new block during phi lifting plot::@5(between plot::@3 and plot::@1)
Added new block during phi lifting plot::@6(between plot::@2 and plot::@2)
Added new block during phi lifting flip::@7(between flip::@4 and flip::@1)
Added new block during phi lifting flip::@8(between flip::@2 and flip::@2)
Added new block during phi lifting flip::@9(between flip::@3 and flip::@3)
Added new block during phi lifting prepare::@3(between prepare::@1 and prepare::@1)
Block Sequence Planned @begin @4 @end main main::@3 main::@4 main::@6 main::@7 main::@10 main::@11 main::@return main::@12 plot plot::@1 plot::@2 plot::@3 plot::@return plot::@5 plot::@6 flip flip::@1 flip::@2 flip::@4 flip::@3 flip::@return flip::@9 flip::@7 flip::@8 prepare prepare::@1 prepare::@return prepare::@3 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@4
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4
main: scope:[main]  from @4
  call prepare param-assignment
  to:main::@3
main::@3: scope:[main]  from main main::@11 main::@12 main::@3
  (byte) main::c#4 ← phi( main/(byte) 25 main::@12/(byte~) main::c#6 main::@11/(byte) 25 )
  (byte~) main::$1 ← * (const byte*) RASTER#0
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (const byte*) RASTER#0
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#4
  if((byte) main::c#1!=(byte) 0) goto main::@12
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
main::@12: scope:[main]  from main::@6
  (byte~) main::c#6 ← (byte) main::c#1
  to:main::@3
plot: scope:[plot]  from main::@10
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@5
  (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@5/(byte~) plot::y#5 )
  (byte*) plot::line#4 ← phi( plot/(const byte[1000]) SCREEN#0+(byte) 5*(byte) 40+(byte) 12 plot::@5/(byte*~) plot::line#5 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@5/(byte~) plot::i#5 )
  (byte~) plot::i#6 ← (byte) plot::i#3
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@6
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@6/(byte~) plot::x#3 )
  (byte) plot::i#2 ← phi( plot::@1/(byte~) plot::i#6 plot::@6/(byte~) plot::i#7 )
  (byte~) plot::$3 ← (const byte[256]) buffer1#0 *idx (byte) plot::i#2
  *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@6
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#4
  if((byte) plot::y#1!=(byte) 0) goto plot::@5
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
plot::@5: scope:[plot]  from plot::@3
  (byte~) plot::i#5 ← (byte) plot::i#1
  (byte*~) plot::line#5 ← (byte*) plot::line#1
  (byte~) plot::y#5 ← (byte) plot::y#1
  to:plot::@1
plot::@6: scope:[plot]  from plot::@2
  (byte~) plot::i#7 ← (byte) plot::i#1
  (byte~) plot::x#3 ← (byte) plot::x#1
  to:plot::@2
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@7
  (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@7/(byte~) flip::r#5 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@7/(byte~) flip::dstIdx#6 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@7/(byte~) flip::srcIdx#5 )
  (byte~) flip::srcIdx#6 ← (byte) flip::srcIdx#3
  (byte~) flip::dstIdx#7 ← (byte) flip::dstIdx#5
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@8
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@8/(byte~) flip::c#3 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte~) flip::dstIdx#7 flip::@8/(byte~) flip::dstIdx#8 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte~) flip::srcIdx#6 flip::@8/(byte~) flip::srcIdx#7 )
  (byte~) flip::$0 ← (const byte[256]) buffer1#0 *idx (byte) flip::srcIdx#2
  *((const byte[256]) buffer2#0 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@8
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#4
  if((byte) flip::r#1!=(byte) 0) goto flip::@7
  to:flip::@3
flip::@3: scope:[flip]  from flip::@4 flip::@9
  (byte) flip::i#2 ← phi( flip::@9/(byte~) flip::i#3 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (const byte[256]) buffer2#0 *idx (byte) flip::i#2
  *((const byte[256]) buffer1#0 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@9
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
flip::@9: scope:[flip]  from flip::@3
  (byte~) flip::i#3 ← (byte) flip::i#1
  to:flip::@3
flip::@7: scope:[flip]  from flip::@4
  (byte~) flip::srcIdx#5 ← (byte) flip::srcIdx#1
  (byte~) flip::dstIdx#6 ← (byte) flip::dstIdx#2
  (byte~) flip::r#5 ← (byte) flip::r#1
  to:flip::@1
flip::@8: scope:[flip]  from flip::@2
  (byte~) flip::srcIdx#7 ← (byte) flip::srcIdx#1
  (byte~) flip::dstIdx#8 ← (byte) flip::dstIdx#1
  (byte~) flip::c#3 ← (byte) flip::c#1
  to:flip::@2
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@3
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@3/(byte~) prepare::i#3 )
  *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@3
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
prepare::@3: scope:[prepare]  from prepare::@1
  (byte~) prepare::i#3 ← (byte) prepare::i#1
  to:prepare::@1

Adding NOP phi() at start of main
Adding NOP phi() at start of plot
Adding NOP phi() at start of flip
Adding NOP phi() at start of prepare
CALL GRAPH
Calls in [] to main:0 
Calls in [main] to prepare:2 flip:10 plot:11 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  to:@4
@4: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @4
main: scope:[main]  from @4
  [1] phi() [ ]
  [2] call prepare param-assignment [ ]
  to:main::@3
main::@3: scope:[main]  from main main::@11 main::@12 main::@3
  [3] (byte) main::c#4 ← phi( main/(byte) 25 main::@12/(byte~) main::c#6 main::@11/(byte) 25 ) [ main::c#4 ]
  [4] (byte~) main::$1 ← * (const byte*) RASTER#0 [ main::c#4 main::$1 ]
  [5] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#4 ]
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  [6] (byte~) main::$3 ← * (const byte*) RASTER#0 [ main::c#4 main::$3 ]
  [7] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#4 ]
  to:main::@6
main::@6: scope:[main]  from main::@4
  [8] (byte) main::c#1 ← -- (byte) main::c#4 [ main::c#1 ]
  [9] if((byte) main::c#1!=(byte) 0) goto main::@12 [ main::c#1 ]
  to:main::@7
main::@7: scope:[main]  from main::@6
  [10] call flip param-assignment [ ]
  to:main::@10
main::@10: scope:[main]  from main::@7
  [11] call plot param-assignment [ ]
  to:main::@11
main::@11: scope:[main]  from main::@10
  [12] if(true) goto main::@3 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@11
  [13] return  [ ]
  to:@return
main::@12: scope:[main]  from main::@6
  [14] (byte~) main::c#6 ← (byte) main::c#1 [ main::c#6 ]
  to:main::@3
plot: scope:[plot]  from main::@10
  [15] phi() [ ]
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@5
  [16] (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@5/(byte~) plot::y#5 ) [ plot::i#3 plot::line#4 plot::y#4 ]
  [16] (byte*) plot::line#4 ← phi( plot/(const byte[1000]) SCREEN#0+(byte) 5*(byte) 40+(byte) 12 plot::@5/(byte*~) plot::line#5 ) [ plot::i#3 plot::line#4 plot::y#4 ]
  [16] (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@5/(byte~) plot::i#5 ) [ plot::i#3 plot::line#4 plot::y#4 ]
  [17] (byte~) plot::i#6 ← (byte) plot::i#3 [ plot::line#4 plot::y#4 plot::i#6 ]
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@6
  [18] (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@6/(byte~) plot::x#3 ) [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ]
  [18] (byte) plot::i#2 ← phi( plot::@1/(byte~) plot::i#6 plot::@6/(byte~) plot::i#7 ) [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ]
  [19] (byte~) plot::$3 ← (const byte[256]) buffer1#0 *idx (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ]
  [20] *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ]
  [21] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::x#2 plot::i#1 ]
  [22] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ]
  [23] if((byte) plot::x#1<(byte) 16) goto plot::@6 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ]
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  [24] (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40 [ plot::y#4 plot::i#1 plot::line#1 ]
  [25] (byte) plot::y#1 ← -- (byte) plot::y#4 [ plot::i#1 plot::line#1 plot::y#1 ]
  [26] if((byte) plot::y#1!=(byte) 0) goto plot::@5 [ plot::i#1 plot::line#1 plot::y#1 ]
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  [27] return  [ ]
  to:@return
plot::@5: scope:[plot]  from plot::@3
  [28] (byte~) plot::i#5 ← (byte) plot::i#1 [ plot::i#5 plot::line#1 plot::y#1 ]
  [29] (byte*~) plot::line#5 ← (byte*) plot::line#1 [ plot::i#5 plot::line#5 plot::y#1 ]
  [30] (byte~) plot::y#5 ← (byte) plot::y#1 [ plot::i#5 plot::line#5 plot::y#5 ]
  to:plot::@1
plot::@6: scope:[plot]  from plot::@2
  [31] (byte~) plot::i#7 ← (byte) plot::i#1 [ plot::line#4 plot::y#4 plot::i#7 plot::x#1 ]
  [32] (byte~) plot::x#3 ← (byte) plot::x#1 [ plot::line#4 plot::y#4 plot::i#7 plot::x#3 ]
  to:plot::@2
flip: scope:[flip]  from main::@7
  [33] phi() [ ]
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@7
  [34] (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@7/(byte~) flip::r#5 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#4 ]
  [34] (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@7/(byte~) flip::dstIdx#6 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#4 ]
  [34] (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@7/(byte~) flip::srcIdx#5 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#4 ]
  [35] (byte~) flip::srcIdx#6 ← (byte) flip::srcIdx#3 [ flip::dstIdx#5 flip::r#4 flip::srcIdx#6 ]
  [36] (byte~) flip::dstIdx#7 ← (byte) flip::dstIdx#5 [ flip::r#4 flip::srcIdx#6 flip::dstIdx#7 ]
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@8
  [37] (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@8/(byte~) flip::c#3 ) [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ]
  [37] (byte) flip::dstIdx#3 ← phi( flip::@1/(byte~) flip::dstIdx#7 flip::@8/(byte~) flip::dstIdx#8 ) [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ]
  [37] (byte) flip::srcIdx#2 ← phi( flip::@1/(byte~) flip::srcIdx#6 flip::@8/(byte~) flip::srcIdx#7 ) [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ]
  [38] (byte~) flip::$0 ← (const byte[256]) buffer1#0 *idx (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ]
  [39] *((const byte[256]) buffer2#0 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ]
  [40] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::r#4 flip::dstIdx#3 flip::c#2 flip::srcIdx#1 ]
  [41] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::r#4 flip::c#2 flip::srcIdx#1 flip::dstIdx#1 ]
  [42] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ]
  [43] if((byte) flip::c#1!=(byte) 0) goto flip::@8 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ]
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  [44] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ]
  [45] (byte) flip::r#1 ← -- (byte) flip::r#4 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ]
  [46] if((byte) flip::r#1!=(byte) 0) goto flip::@7 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ]
  to:flip::@3
flip::@3: scope:[flip]  from flip::@4 flip::@9
  [47] (byte) flip::i#2 ← phi( flip::@9/(byte~) flip::i#3 flip::@4/(byte) 0 ) [ flip::i#2 ]
  [48] (byte~) flip::$4 ← (const byte[256]) buffer2#0 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ]
  [49] *((const byte[256]) buffer1#0 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ]
  [50] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ]
  [51] if((byte) flip::i#1!=(byte) 0) goto flip::@9 [ flip::i#1 ]
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  [52] return  [ ]
  to:@return
flip::@9: scope:[flip]  from flip::@3
  [53] (byte~) flip::i#3 ← (byte) flip::i#1 [ flip::i#3 ]
  to:flip::@3
flip::@7: scope:[flip]  from flip::@4
  [54] (byte~) flip::srcIdx#5 ← (byte) flip::srcIdx#1 [ flip::srcIdx#5 flip::dstIdx#2 flip::r#1 ]
  [55] (byte~) flip::dstIdx#6 ← (byte) flip::dstIdx#2 [ flip::srcIdx#5 flip::dstIdx#6 flip::r#1 ]
  [56] (byte~) flip::r#5 ← (byte) flip::r#1 [ flip::srcIdx#5 flip::dstIdx#6 flip::r#5 ]
  to:flip::@1
flip::@8: scope:[flip]  from flip::@2
  [57] (byte~) flip::srcIdx#7 ← (byte) flip::srcIdx#1 [ flip::r#4 flip::srcIdx#7 flip::dstIdx#1 flip::c#1 ]
  [58] (byte~) flip::dstIdx#8 ← (byte) flip::dstIdx#1 [ flip::r#4 flip::srcIdx#7 flip::dstIdx#8 flip::c#1 ]
  [59] (byte~) flip::c#3 ← (byte) flip::c#1 [ flip::r#4 flip::srcIdx#7 flip::dstIdx#8 flip::c#3 ]
  to:flip::@2
prepare: scope:[prepare]  from main
  [60] phi() [ ]
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@3
  [61] (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@3/(byte~) prepare::i#3 ) [ prepare::i#2 ]
  [62] *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ]
  [63] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ]
  [64] if((byte) prepare::i#1!=(byte) 0) goto prepare::@3 [ prepare::i#1 ]
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  [65] return  [ ]
  to:@return
prepare::@3: scope:[prepare]  from prepare::@1
  [66] (byte~) prepare::i#3 ← (byte) prepare::i#1 [ prepare::i#3 ]
  to:prepare::@1

Created 14 initial phi equivalence classes
Coalesced [14] main::c#6 ← main::c#1
Coalesced [17] plot::i#6 ← plot::i#3
Coalesced [28] plot::i#5 ← plot::i#1
Coalesced [29] plot::line#5 ← plot::line#1
Coalesced [30] plot::y#5 ← plot::y#1
Coalesced (already) [31] plot::i#7 ← plot::i#1
Coalesced [32] plot::x#3 ← plot::x#1
Coalesced [35] flip::srcIdx#6 ← flip::srcIdx#3
Coalesced [36] flip::dstIdx#7 ← flip::dstIdx#5
Coalesced [53] flip::i#3 ← flip::i#1
Coalesced [54] flip::srcIdx#5 ← flip::srcIdx#1
Coalesced [55] flip::dstIdx#6 ← flip::dstIdx#2
Coalesced [56] flip::r#5 ← flip::r#1
Coalesced (already) [57] flip::srcIdx#7 ← flip::srcIdx#1
Coalesced [58] flip::dstIdx#8 ← flip::dstIdx#1
Coalesced [59] flip::c#3 ← flip::c#1
Coalesced [66] prepare::i#3 ← prepare::i#1
Coalesced down to 11 phi equivalence classes
Culled Empty Block (label) main::@12
Culled Empty Block (label) plot::@5
Culled Empty Block (label) plot::@6
Culled Empty Block (label) flip::@9
Culled Empty Block (label) flip::@7
Culled Empty Block (label) flip::@8
Culled Empty Block (label) prepare::@3
Block Sequence Planned @begin @4 @end main main::@3 main::@4 main::@6 main::@7 main::@10 main::@11 main::@return plot plot::@1 plot::@2 plot::@3 plot::@return flip flip::@1 flip::@2 flip::@4 flip::@3 flip::@return prepare prepare::@1 prepare::@return 
Adding NOP phi() at start of main
Adding NOP phi() at start of plot
Adding NOP phi() at start of flip
Adding NOP phi() at start of prepare
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - BEFORE EFFECTIVE LIVE RANGES
@begin: scope:[]  from
  to:@4
@4: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @4
main: scope:[main]  from @4
  [1] phi() [ ]
  [2] call prepare param-assignment [ ]
  to:main::@3
main::@3: scope:[main]  from main main::@11 main::@3 main::@6
  [3] (byte) main::c#4 ← phi( main/(byte) 25 main::@6/(byte) main::c#1 main::@11/(byte) 25 ) [ main::c#4 ]
  [4] (byte~) main::$1 ← * (const byte*) RASTER#0 [ main::c#4 main::$1 ]
  [5] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#4 ]
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  [6] (byte~) main::$3 ← * (const byte*) RASTER#0 [ main::c#4 main::$3 ]
  [7] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#4 ]
  to:main::@6
main::@6: scope:[main]  from main::@4
  [8] (byte) main::c#1 ← -- (byte) main::c#4 [ main::c#1 ]
  [9] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ]
  to:main::@7
main::@7: scope:[main]  from main::@6
  [10] call flip param-assignment [ ]
  to:main::@10
main::@10: scope:[main]  from main::@7
  [11] call plot param-assignment [ ]
  to:main::@11
main::@11: scope:[main]  from main::@10
  [12] if(true) goto main::@3 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@11
  [13] return  [ ]
  to:@return
plot: scope:[plot]  from main::@10
  [14] phi() [ ]
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  [15] (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 ) [ plot::i#3 plot::line#4 plot::y#4 ]
  [15] (byte*) plot::line#4 ← phi( plot/(const byte[1000]) SCREEN#0+(byte) 5*(byte) 40+(byte) 12 plot::@3/(byte*) plot::line#1 ) [ plot::i#3 plot::line#4 plot::y#4 ]
  [15] (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 ) [ plot::i#3 plot::line#4 plot::y#4 ]
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  [16] (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 ) [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ]
  [16] (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 ) [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ]
  [17] (byte~) plot::$3 ← (const byte[256]) buffer1#0 *idx (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ]
  [18] *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ]
  [19] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ]
  [20] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ]
  [21] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ]
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  [22] (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40 [ plot::y#4 plot::i#1 plot::line#1 ]
  [23] (byte) plot::y#1 ← -- (byte) plot::y#4 [ plot::i#1 plot::line#1 plot::y#1 ]
  [24] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ]
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  [25] return  [ ]
  to:@return
flip: scope:[flip]  from main::@7
  [26] phi() [ ]
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  [27] (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#4 ]
  [27] (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#4 ]
  [27] (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#4 ]
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  [28] (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 ) [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ]
  [28] (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 ) [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ]
  [28] (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 ) [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ]
  [29] (byte~) flip::$0 ← (const byte[256]) buffer1#0 *idx (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ]
  [30] *((const byte[256]) buffer2#0 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ]
  [31] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ]
  [32] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ]
  [33] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ]
  [34] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ]
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  [35] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ]
  [36] (byte) flip::r#1 ← -- (byte) flip::r#4 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ]
  [37] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ]
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  [38] (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 ) [ flip::i#2 ]
  [39] (byte~) flip::$4 ← (const byte[256]) buffer2#0 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ]
  [40] *((const byte[256]) buffer1#0 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ]
  [41] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ]
  [42] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ]
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  [43] return  [ ]
  to:@return
prepare: scope:[prepare]  from main
  [44] phi() [ ]
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  [45] (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 ) [ prepare::i#2 ]
  [46] *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ]
  [47] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ]
  [48] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ]
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  [49] return  [ ]
  to:@return

CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  to:@4
@4: scope:[]  from @begin
  [0] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @4
main: scope:[main]  from @4
  [1] phi() [ ] ( main:0 [ ] )
  [2] call prepare param-assignment [ ] ( main:0 [ ] )
  to:main::@3
main::@3: scope:[main]  from main main::@11 main::@3 main::@6
  [3] (byte) main::c#4 ← phi( main/(byte) 25 main::@6/(byte) main::c#1 main::@11/(byte) 25 ) [ main::c#4 ] ( main:0 [ main::c#4 ] )
  [4] (byte~) main::$1 ← * (const byte*) RASTER#0 [ main::c#4 main::$1 ] ( main:0 [ main::c#4 main::$1 ] )
  [5] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#4 ] ( main:0 [ main::c#4 ] )
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  [6] (byte~) main::$3 ← * (const byte*) RASTER#0 [ main::c#4 main::$3 ] ( main:0 [ main::c#4 main::$3 ] )
  [7] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#4 ] ( main:0 [ main::c#4 ] )
  to:main::@6
main::@6: scope:[main]  from main::@4
  [8] (byte) main::c#1 ← -- (byte) main::c#4 [ main::c#1 ] ( main:0 [ main::c#1 ] )
  [9] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] ( main:0 [ main::c#1 ] )
  to:main::@7
main::@7: scope:[main]  from main::@6
  [10] call flip param-assignment [ ] ( main:0 [ ] )
  to:main::@10
main::@10: scope:[main]  from main::@7
  [11] call plot param-assignment [ ] ( main:0 [ ] )
  to:main::@11
main::@11: scope:[main]  from main::@10
  [12] if(true) goto main::@3 [ ] ( main:0 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@11
  [13] return  [ ] ( main:0 [ ] )
  to:@return
plot: scope:[plot]  from main::@10
  [14] phi() [ ] ( main:0::plot:11 [ ] )
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  [15] (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 ) [ plot::i#3 plot::line#4 plot::y#4 ] ( main:0::plot:11 [ plot::i#3 plot::line#4 plot::y#4 ] )
  [15] (byte*) plot::line#4 ← phi( plot/(const byte[1000]) SCREEN#0+(byte) 5*(byte) 40+(byte) 12 plot::@3/(byte*) plot::line#1 ) [ plot::i#3 plot::line#4 plot::y#4 ] ( main:0::plot:11 [ plot::i#3 plot::line#4 plot::y#4 ] )
  [15] (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 ) [ plot::i#3 plot::line#4 plot::y#4 ] ( main:0::plot:11 [ plot::i#3 plot::line#4 plot::y#4 ] )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  [16] (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 ) [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] )
  [16] (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 ) [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] )
  [17] (byte~) plot::$3 ← (const byte[256]) buffer1#0 *idx (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ] )
  [18] *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] )
  [19] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] )
  [20] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] )
  [21] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] )
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  [22] (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40 [ plot::y#4 plot::i#1 plot::line#1 ] ( main:0::plot:11 [ plot::y#4 plot::i#1 plot::line#1 ] )
  [23] (byte) plot::y#1 ← -- (byte) plot::y#4 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:0::plot:11 [ plot::i#1 plot::line#1 plot::y#1 ] )
  [24] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:0::plot:11 [ plot::i#1 plot::line#1 plot::y#1 ] )
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  [25] return  [ ] ( main:0::plot:11 [ ] )
  to:@return
flip: scope:[flip]  from main::@7
  [26] phi() [ ] ( main:0::flip:10 [ ] )
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  [27] (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#4 ] ( main:0::flip:10 [ flip::srcIdx#3 flip::dstIdx#5 flip::r#4 ] )
  [27] (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#4 ] ( main:0::flip:10 [ flip::srcIdx#3 flip::dstIdx#5 flip::r#4 ] )
  [27] (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#4 ] ( main:0::flip:10 [ flip::srcIdx#3 flip::dstIdx#5 flip::r#4 ] )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  [28] (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 ) [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] )
  [28] (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 ) [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] )
  [28] (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 ) [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] )
  [29] (byte~) flip::$0 ← (const byte[256]) buffer1#0 *idx (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ] )
  [30] *((const byte[256]) buffer2#0 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] )
  [31] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] )
  [32] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] )
  [33] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] )
  [34] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] )
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  [35] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] )
  [36] (byte) flip::r#1 ← -- (byte) flip::r#4 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:0::flip:10 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] )
  [37] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:0::flip:10 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] )
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  [38] (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 ) [ flip::i#2 ] ( main:0::flip:10 [ flip::i#2 ] )
  [39] (byte~) flip::$4 ← (const byte[256]) buffer2#0 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] ( main:0::flip:10 [ flip::i#2 flip::$4 ] )
  [40] *((const byte[256]) buffer1#0 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] ( main:0::flip:10 [ flip::i#2 ] )
  [41] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] ( main:0::flip:10 [ flip::i#1 ] )
  [42] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] ( main:0::flip:10 [ flip::i#1 ] )
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  [43] return  [ ] ( main:0::flip:10 [ ] )
  to:@return
prepare: scope:[prepare]  from main
  [44] phi() [ ] ( main:0::prepare:2 [ ] )
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  [45] (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 ) [ prepare::i#2 ] ( main:0::prepare:2 [ prepare::i#2 ] )
  [46] *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] ( main:0::prepare:2 [ prepare::i#2 ] )
  [47] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] ( main:0::prepare:2 [ prepare::i#1 ] )
  [48] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] ( main:0::prepare:2 [ prepare::i#1 ] )
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  [49] return  [ ] ( main:0::prepare:2 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@4 dominated by  @4 @begin 
@end dominated by  @4 @end @begin 
main dominated by  @4 @begin main 
main::@3 dominated by  @4 @begin main::@3 main 
main::@4 dominated by  @4 @begin main::@4 main::@3 main 
main::@6 dominated by  @4 @begin main::@4 main::@3 main::@6 main 
main::@7 dominated by  @4 @begin main::@4 main::@3 main::@6 main main::@7 
main::@10 dominated by  @4 @begin main::@4 main::@3 main::@6 main main::@7 main::@10 
main::@11 dominated by  @4 @begin main::@4 main::@3 main::@6 main main::@7 main::@10 main::@11 
main::@return dominated by  @4 @begin main::@4 main::@3 main::@6 main main::@7 main::@return main::@10 main::@11 
plot dominated by  @4 @begin main::@4 main::@3 main::@6 plot main main::@7 main::@10 
plot::@1 dominated by  @4 @begin main::@4 main::@3 main::@6 main plot main::@7 plot::@1 main::@10 
plot::@2 dominated by  @4 @begin main::@4 main::@3 main::@6 main plot main::@7 plot::@2 plot::@1 main::@10 
plot::@3 dominated by  @4 @begin main::@4 main::@3 main::@6 main plot main::@7 plot::@2 plot::@1 main::@10 plot::@3 
plot::@return dominated by  @4 @begin main::@4 main::@3 plot::@return main::@6 main plot main::@7 plot::@2 plot::@1 main::@10 plot::@3 
flip dominated by  @4 @begin main::@4 main::@3 main::@6 main main::@7 flip 
flip::@1 dominated by  @4 @begin main::@4 main::@3 main::@6 main main::@7 flip::@1 flip 
flip::@2 dominated by  @4 @begin main::@4 main::@3 main::@6 main main::@7 flip::@1 flip::@2 flip 
flip::@4 dominated by  flip::@4 @4 @begin main::@4 main::@3 main::@6 main main::@7 flip::@1 flip::@2 flip 
flip::@3 dominated by  flip::@4 flip::@3 @4 @begin main::@4 main::@3 main::@6 main main::@7 flip::@1 flip::@2 flip 
flip::@return dominated by  flip::@4 flip::@3 @4 @begin main::@4 main::@3 main::@6 main main::@7 flip::@return flip::@1 flip::@2 flip 
prepare dominated by  @4 @begin prepare main 
prepare::@1 dominated by  @4 @begin prepare main prepare::@1 
prepare::@return dominated by  @4 @begin prepare::@return prepare main prepare::@1 

Found back edge: Loop head: main::@3 tails: main::@3 blocks: null
Found back edge: Loop head: main::@4 tails: main::@4 blocks: null
Found back edge: Loop head: main::@3 tails: main::@6 blocks: null
Found back edge: Loop head: main::@3 tails: main::@11 blocks: null
Found back edge: Loop head: plot::@2 tails: plot::@2 blocks: null
Found back edge: Loop head: plot::@1 tails: plot::@3 blocks: null
Found back edge: Loop head: flip::@2 tails: flip::@2 blocks: null
Found back edge: Loop head: flip::@1 tails: flip::@4 blocks: null
Found back edge: Loop head: flip::@3 tails: flip::@3 blocks: null
Found back edge: Loop head: prepare::@1 tails: prepare::@1 blocks: null
Populated: Loop head: main::@3 tails: main::@3 blocks: main::@3 
Populated: Loop head: main::@4 tails: main::@4 blocks: main::@4 
Populated: Loop head: main::@3 tails: main::@6 blocks: main::@6 main::@4 main::@3 
Populated: Loop head: main::@3 tails: main::@11 blocks: main::@11 main::@10 main::@7 main::@6 main::@4 main::@3 
Populated: Loop head: plot::@2 tails: plot::@2 blocks: plot::@2 
Populated: Loop head: plot::@1 tails: plot::@3 blocks: plot::@3 plot::@2 plot::@1 
Populated: Loop head: flip::@2 tails: flip::@2 blocks: flip::@2 
Populated: Loop head: flip::@1 tails: flip::@4 blocks: flip::@4 flip::@2 flip::@1 
Populated: Loop head: flip::@3 tails: flip::@3 blocks: flip::@3 
Populated: Loop head: prepare::@1 tails: prepare::@1 blocks: prepare::@1 
NATURAL LOOPS
Loop head: main::@3 tails: main::@3 blocks: main::@3 
Loop head: main::@4 tails: main::@4 blocks: main::@4 
Loop head: main::@3 tails: main::@6 blocks: main::@6 main::@4 main::@3 
Loop head: main::@3 tails: main::@11 blocks: main::@11 main::@10 main::@7 main::@6 main::@4 main::@3 
Loop head: plot::@2 tails: plot::@2 blocks: plot::@2 
Loop head: plot::@1 tails: plot::@3 blocks: plot::@3 plot::@2 plot::@1 
Loop head: flip::@2 tails: flip::@2 blocks: flip::@2 
Loop head: flip::@1 tails: flip::@4 blocks: flip::@4 flip::@2 flip::@1 
Loop head: flip::@3 tails: flip::@3 blocks: flip::@3 
Loop head: prepare::@1 tails: prepare::@1 blocks: prepare::@1 

Found 0 loops in scope []
Found 4 loops in scope [main]
  Loop head: main::@3 tails: main::@3 blocks: main::@3 
  Loop head: main::@4 tails: main::@4 blocks: main::@4 
  Loop head: main::@3 tails: main::@6 blocks: main::@6 main::@4 main::@3 
  Loop head: main::@3 tails: main::@11 blocks: main::@11 main::@10 main::@7 main::@6 main::@4 main::@3 
Found 1 loops in scope [prepare]
  Loop head: prepare::@1 tails: prepare::@1 blocks: prepare::@1 
Found 3 loops in scope [flip]
  Loop head: flip::@2 tails: flip::@2 blocks: flip::@2 
  Loop head: flip::@1 tails: flip::@4 blocks: flip::@4 flip::@2 flip::@1 
  Loop head: flip::@3 tails: flip::@3 blocks: flip::@3 
Found 2 loops in scope [plot]
  Loop head: plot::@2 tails: plot::@2 blocks: plot::@2 
  Loop head: plot::@1 tails: plot::@3 blocks: plot::@3 plot::@2 plot::@1 
NATURAL LOOPS WITH DEPTH
Loop head: main::@3 tails: main::@3 blocks: main::@3  depth: 3
Loop head: main::@4 tails: main::@4 blocks: main::@4  depth: 3
Loop head: main::@3 tails: main::@6 blocks: main::@6 main::@4 main::@3  depth: 2
Loop head: main::@3 tails: main::@11 blocks: main::@11 main::@10 main::@7 main::@6 main::@4 main::@3  depth: 1
Loop head: plot::@2 tails: plot::@2 blocks: plot::@2  depth: 3
Loop head: plot::@1 tails: plot::@3 blocks: plot::@3 plot::@2 plot::@1  depth: 2
Loop head: flip::@2 tails: flip::@2 blocks: flip::@2  depth: 3
Loop head: flip::@1 tails: flip::@4 blocks: flip::@4 flip::@2 flip::@1  depth: 2
Loop head: flip::@3 tails: flip::@3 blocks: flip::@3  depth: 2
Loop head: prepare::@1 tails: prepare::@1 blocks: prepare::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) RASTER
(byte[1000]) SCREEN
(byte[256]) buffer1
(byte[256]) buffer2
(void()) flip()
(byte~) flip::$0 2002.0
(byte~) flip::$4 202.0
(byte) flip::c
(byte) flip::c#1 1501.5
(byte) flip::c#2 400.4
(byte) flip::dstIdx
(byte) flip::dstIdx#1 701.0
(byte) flip::dstIdx#2 67.33333333333333
(byte) flip::dstIdx#3 776.0
(byte) flip::dstIdx#5 202.0
(byte) flip::i
(byte) flip::i#1 151.5
(byte) flip::i#2 134.66666666666666
(byte) flip::r
(byte) flip::r#1 151.5
(byte) flip::r#4 22.444444444444443
(byte) flip::srcIdx
(byte) flip::srcIdx#1 300.42857142857144
(byte) flip::srcIdx#2 1034.6666666666667
(byte) flip::srcIdx#3 202.0
(void()) main()
(byte~) main::$1 2002.0
(byte~) main::$3 2002.0
(byte) main::c
(byte) main::c#1 151.5
(byte) main::c#4 40.4
(void()) plot()
(byte~) plot::$3 2002.0
(byte) plot::i
(byte) plot::i#1 350.5
(byte) plot::i#2 1034.6666666666667
(byte) plot::i#3 202.0
(byte*) plot::line
(byte*) plot::line#1 67.33333333333333
(byte*) plot::line#4 171.85714285714283
(byte) plot::x
(byte) plot::x#1 1501.5
(byte) plot::x#2 750.75
(byte) plot::y
(byte) plot::y#1 151.5
(byte) plot::y#4 25.25
(void()) prepare()
(byte) prepare::i
(byte) prepare::i#1 16.5
(byte) prepare::i#2 22.0

Initial phi equivalence classes
[ main::c#4 main::c#1 ]
[ plot::line#4 plot::line#1 ]
[ plot::y#4 plot::y#1 ]
[ plot::i#2 plot::i#3 plot::i#1 ]
[ plot::x#2 plot::x#1 ]
[ flip::r#4 flip::r#1 ]
[ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ]
[ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ]
[ flip::c#2 flip::c#1 ]
[ flip::i#2 flip::i#1 ]
[ prepare::i#2 prepare::i#1 ]
Added variable main::$1 to zero page equivalence class [ main::$1 ]
Added variable main::$3 to zero page equivalence class [ main::$3 ]
Added variable plot::$3 to zero page equivalence class [ plot::$3 ]
Added variable flip::$0 to zero page equivalence class [ flip::$0 ]
Added variable flip::$4 to zero page equivalence class [ flip::$4 ]
Complete equivalence classes
[ main::c#4 main::c#1 ]
[ plot::line#4 plot::line#1 ]
[ plot::y#4 plot::y#1 ]
[ plot::i#2 plot::i#3 plot::i#1 ]
[ plot::x#2 plot::x#1 ]
[ flip::r#4 flip::r#1 ]
[ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ]
[ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ]
[ flip::c#2 flip::c#1 ]
[ flip::i#2 flip::i#1 ]
[ prepare::i#2 prepare::i#1 ]
[ main::$1 ]
[ main::$3 ]
[ plot::$3 ]
[ flip::$0 ]
[ flip::$4 ]
Allocated zp ZP_BYTE:2 [ main::c#4 main::c#1 ]
Allocated zp ZP_PTR_BYTE:3 [ plot::line#4 plot::line#1 ]
Allocated zp ZP_BYTE:5 [ plot::y#4 plot::y#1 ]
Allocated zp ZP_BYTE:6 [ plot::i#2 plot::i#3 plot::i#1 ]
Allocated zp ZP_BYTE:7 [ plot::x#2 plot::x#1 ]
Allocated zp ZP_BYTE:8 [ flip::r#4 flip::r#1 ]
Allocated zp ZP_BYTE:9 [ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ]
Allocated zp ZP_BYTE:10 [ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ]
Allocated zp ZP_BYTE:11 [ flip::c#2 flip::c#1 ]
Allocated zp ZP_BYTE:12 [ flip::i#2 flip::i#1 ]
Allocated zp ZP_BYTE:13 [ prepare::i#2 prepare::i#1 ]
Allocated zp ZP_BYTE:14 [ main::$1 ]
Allocated zp ZP_BYTE:15 [ main::$3 ]
Allocated zp ZP_BYTE:16 [ plot::$3 ]
Allocated zp ZP_BYTE:17 [ flip::$0 ]
Allocated zp ZP_BYTE:18 [ flip::$4 ]
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const buffer1 = $1000
  .const buffer2 = $1100
  .const RASTER = $d012
//SEG2 @begin
bbegin:
  jmp b4
//SEG3 @4
b4:
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @4 to main [phi:@4->main]
main_from_b4:
  jsr main
  jmp bend
//SEG6 @end
bend:
//SEG7 main
main: {
    .label _1 = $e
    .label _3 = $f
    .label c = 2
  //SEG8 [2] call prepare param-assignment [ ] ( main:0 [ ] )
  //SEG9 [44] phi from main to prepare [phi:main->prepare]
  prepare_from_main:
    jsr prepare
  //SEG10 [3] phi from main main::@11 to main::@3 [phi:main/main::@11->main::@3]
  b3_from_main:
  b3_from_b11:
  //SEG11 [3] phi (byte) main::c#4 = (byte) 25 [phi:main/main::@11->main::@3#0] -- zpby1=coby1 
    lda #$19
    sta c
    jmp b3
  //SEG12 [3] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  b3_from_b3:
    jmp b3
  //SEG13 [3] phi from main::@6 to main::@3 [phi:main::@6->main::@3]
  b3_from_b6:
  //SEG14 [3] phi (byte) main::c#4 = (byte) main::c#1 [phi:main::@6->main::@3#0] -- register_copy 
    jmp b3
  //SEG15 main::@3
  b3:
  //SEG16 [4] (byte~) main::$1 ← * (const byte*) RASTER#0 [ main::c#4 main::$1 ] ( main:0 [ main::c#4 main::$1 ] ) -- zpby1=_star_cowo1 
    lda RASTER
    sta _1
  //SEG17 [5] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#4 ] ( main:0 [ main::c#4 ] ) -- zpby1_neq_coby1_then_la1 
    lda _1
    cmp #$fe
    bne b3_from_b3
    jmp b4
  //SEG18 main::@4
  b4:
  //SEG19 [6] (byte~) main::$3 ← * (const byte*) RASTER#0 [ main::c#4 main::$3 ] ( main:0 [ main::c#4 main::$3 ] ) -- zpby1=_star_cowo1 
    lda RASTER
    sta _3
  //SEG20 [7] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#4 ] ( main:0 [ main::c#4 ] ) -- zpby1_neq_coby1_then_la1 
    lda _3
    cmp #$ff
    bne b4
    jmp b6
  //SEG21 main::@6
  b6:
  //SEG22 [8] (byte) main::c#1 ← -- (byte) main::c#4 [ main::c#1 ] ( main:0 [ main::c#1 ] ) -- zpby1=_dec_zpby1 
    dec c
  //SEG23 [9] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] ( main:0 [ main::c#1 ] ) -- zpby1_neq_0_then_la1 
    lda c
    bne b3_from_b6
    jmp b7
  //SEG24 main::@7
  b7:
  //SEG25 [10] call flip param-assignment [ ] ( main:0 [ ] )
  //SEG26 [26] phi from main::@7 to flip [phi:main::@7->flip]
  flip_from_b7:
    jsr flip
    jmp b10
  //SEG27 main::@10
  b10:
  //SEG28 [11] call plot param-assignment [ ] ( main:0 [ ] )
  //SEG29 [14] phi from main::@10 to plot [phi:main::@10->plot]
  plot_from_b10:
    jsr plot
    jmp b11
  //SEG30 main::@11
  b11:
  //SEG31 [12] if(true) goto main::@3 [ ] ( main:0 [ ] ) -- true_then_la1 
    jmp b3_from_b11
    jmp breturn
  //SEG32 main::@return
  breturn:
  //SEG33 [13] return  [ ] ( main:0 [ ] )
    rts
}
//SEG34 plot
plot: {
    .label _3 = $10
    .label i = 6
    .label x = 7
    .label line = 3
    .label y = 5
  //SEG35 [15] phi from plot to plot::@1 [phi:plot->plot::@1]
  b1_from_plot:
  //SEG36 [15] phi (byte) plot::y#4 = (byte) 16 [phi:plot->plot::@1#0] -- zpby1=coby1 
    lda #$10
    sta y
  //SEG37 [15] phi (byte*) plot::line#4 = (const byte[1000]) SCREEN#0+(byte) 5*(byte) 40+(byte) 12 [phi:plot->plot::@1#1] -- zpptrby1=cowo1 
    lda #<SCREEN+5*$28+$c
    sta line
    lda #>SCREEN+5*$28+$c
    sta line+1
  //SEG38 [15] phi (byte) plot::i#3 = (byte) 0 [phi:plot->plot::@1#2] -- zpby1=coby1 
    lda #0
    sta i
    jmp b1
  //SEG39 [15] phi from plot::@3 to plot::@1 [phi:plot::@3->plot::@1]
  b1_from_b3:
  //SEG40 [15] phi (byte) plot::y#4 = (byte) plot::y#1 [phi:plot::@3->plot::@1#0] -- register_copy 
  //SEG41 [15] phi (byte*) plot::line#4 = (byte*) plot::line#1 [phi:plot::@3->plot::@1#1] -- register_copy 
  //SEG42 [15] phi (byte) plot::i#3 = (byte) plot::i#1 [phi:plot::@3->plot::@1#2] -- register_copy 
    jmp b1
  //SEG43 plot::@1
  b1:
  //SEG44 [16] phi from plot::@1 to plot::@2 [phi:plot::@1->plot::@2]
  b2_from_b1:
  //SEG45 [16] phi (byte) plot::x#2 = (byte) 0 [phi:plot::@1->plot::@2#0] -- zpby1=coby1 
    lda #0
    sta x
  //SEG46 [16] phi (byte) plot::i#2 = (byte) plot::i#3 [phi:plot::@1->plot::@2#1] -- register_copy 
    jmp b2
  //SEG47 [16] phi from plot::@2 to plot::@2 [phi:plot::@2->plot::@2]
  b2_from_b2:
  //SEG48 [16] phi (byte) plot::x#2 = (byte) plot::x#1 [phi:plot::@2->plot::@2#0] -- register_copy 
  //SEG49 [16] phi (byte) plot::i#2 = (byte) plot::i#1 [phi:plot::@2->plot::@2#1] -- register_copy 
    jmp b2
  //SEG50 plot::@2
  b2:
  //SEG51 [17] (byte~) plot::$3 ← (const byte[256]) buffer1#0 *idx (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ] ) -- zpby1=cowo1_staridx_zpby2 
    ldx i
    lda buffer1,x
    sta _3
  //SEG52 [18] *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ) -- zpptrby1_staridx_zpby1=zpby2 
    lda _3
    ldy x
    sta (line),y
  //SEG53 [19] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] ) -- zpby1=_inc_zpby1 
    inc i
  //SEG54 [20] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ) -- zpby1=_inc_zpby1 
    inc x
  //SEG55 [21] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ) -- zpby1_lt_coby1_then_la1 
    lda x
    cmp #$10
    bcc b2_from_b2
    jmp b3
  //SEG56 plot::@3
  b3:
  //SEG57 [22] (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40 [ plot::y#4 plot::i#1 plot::line#1 ] ( main:0::plot:11 [ plot::y#4 plot::i#1 plot::line#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+1
  !:
  //SEG58 [23] (byte) plot::y#1 ← -- (byte) plot::y#4 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:0::plot:11 [ plot::i#1 plot::line#1 plot::y#1 ] ) -- zpby1=_dec_zpby1 
    dec y
  //SEG59 [24] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:0::plot:11 [ plot::i#1 plot::line#1 plot::y#1 ] ) -- zpby1_neq_0_then_la1 
    lda y
    bne b1_from_b3
    jmp breturn
  //SEG60 plot::@return
  breturn:
  //SEG61 [25] return  [ ] ( main:0::plot:11 [ ] )
    rts
}
//SEG62 flip
flip: {
    .label _0 = $11
    .label _4 = $12
    .label srcIdx = 9
    .label dstIdx = $a
    .label c = $b
    .label r = 8
    .label i = $c
  //SEG63 [27] phi from flip to flip::@1 [phi:flip->flip::@1]
  b1_from_flip:
  //SEG64 [27] phi (byte) flip::r#4 = (byte) 16 [phi:flip->flip::@1#0] -- zpby1=coby1 
    lda #$10
    sta r
  //SEG65 [27] phi (byte) flip::dstIdx#5 = (byte) 15 [phi:flip->flip::@1#1] -- zpby1=coby1 
    lda #$f
    sta dstIdx
  //SEG66 [27] phi (byte) flip::srcIdx#3 = (byte) 0 [phi:flip->flip::@1#2] -- zpby1=coby1 
    lda #0
    sta srcIdx
    jmp b1
  //SEG67 [27] phi from flip::@4 to flip::@1 [phi:flip::@4->flip::@1]
  b1_from_b4:
  //SEG68 [27] phi (byte) flip::r#4 = (byte) flip::r#1 [phi:flip::@4->flip::@1#0] -- register_copy 
  //SEG69 [27] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 [phi:flip::@4->flip::@1#1] -- register_copy 
  //SEG70 [27] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 [phi:flip::@4->flip::@1#2] -- register_copy 
    jmp b1
  //SEG71 flip::@1
  b1:
  //SEG72 [28] phi from flip::@1 to flip::@2 [phi:flip::@1->flip::@2]
  b2_from_b1:
  //SEG73 [28] phi (byte) flip::c#2 = (byte) 16 [phi:flip::@1->flip::@2#0] -- zpby1=coby1 
    lda #$10
    sta c
  //SEG74 [28] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 [phi:flip::@1->flip::@2#1] -- register_copy 
  //SEG75 [28] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 [phi:flip::@1->flip::@2#2] -- register_copy 
    jmp b2
  //SEG76 [28] phi from flip::@2 to flip::@2 [phi:flip::@2->flip::@2]
  b2_from_b2:
  //SEG77 [28] phi (byte) flip::c#2 = (byte) flip::c#1 [phi:flip::@2->flip::@2#0] -- register_copy 
  //SEG78 [28] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 [phi:flip::@2->flip::@2#1] -- register_copy 
  //SEG79 [28] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 [phi:flip::@2->flip::@2#2] -- register_copy 
    jmp b2
  //SEG80 flip::@2
  b2:
  //SEG81 [29] (byte~) flip::$0 ← (const byte[256]) buffer1#0 *idx (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ] ) -- zpby1=cowo1_staridx_zpby2 
    ldx srcIdx
    lda buffer1,x
    sta _0
  //SEG82 [30] *((const byte[256]) buffer2#0 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ) -- cowo1_staridx_zpby1=zpby2 
    lda _0
    ldx dstIdx
    sta buffer2,x
  //SEG83 [31] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] ) -- zpby1=_inc_zpby1 
    inc srcIdx
  //SEG84 [32] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ) -- zpby1=zpby1_plus_coby1 
    lda dstIdx
    clc
    adc #$10
    sta dstIdx
  //SEG85 [33] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ) -- zpby1=_dec_zpby1 
    dec c
  //SEG86 [34] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ) -- zpby1_neq_0_then_la1 
    lda c
    bne b2_from_b2
    jmp b4
  //SEG87 flip::@4
  b4:
  //SEG88 [35] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] ) -- zpby1=_dec_zpby1 
    dec dstIdx
  //SEG89 [36] (byte) flip::r#1 ← -- (byte) flip::r#4 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:0::flip:10 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ) -- zpby1=_dec_zpby1 
    dec r
  //SEG90 [37] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:0::flip:10 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ) -- zpby1_neq_0_then_la1 
    lda r
    bne b1_from_b4
  //SEG91 [38] phi from flip::@4 to flip::@3 [phi:flip::@4->flip::@3]
  b3_from_b4:
  //SEG92 [38] phi (byte) flip::i#2 = (byte) 0 [phi:flip::@4->flip::@3#0] -- zpby1=coby1 
    lda #0
    sta i
    jmp b3
  //SEG93 [38] phi from flip::@3 to flip::@3 [phi:flip::@3->flip::@3]
  b3_from_b3:
  //SEG94 [38] phi (byte) flip::i#2 = (byte) flip::i#1 [phi:flip::@3->flip::@3#0] -- register_copy 
    jmp b3
  //SEG95 flip::@3
  b3:
  //SEG96 [39] (byte~) flip::$4 ← (const byte[256]) buffer2#0 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] ( main:0::flip:10 [ flip::i#2 flip::$4 ] ) -- zpby1=cowo1_staridx_zpby2 
    ldx i
    lda buffer2,x
    sta _4
  //SEG97 [40] *((const byte[256]) buffer1#0 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] ( main:0::flip:10 [ flip::i#2 ] ) -- cowo1_staridx_zpby1=zpby2 
    lda _4
    ldx i
    sta buffer1,x
  //SEG98 [41] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] ( main:0::flip:10 [ flip::i#1 ] ) -- zpby1=_inc_zpby1 
    inc i
  //SEG99 [42] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] ( main:0::flip:10 [ flip::i#1 ] ) -- zpby1_neq_0_then_la1 
    lda i
    bne b3_from_b3
    jmp breturn
  //SEG100 flip::@return
  breturn:
  //SEG101 [43] return  [ ] ( main:0::flip:10 [ ] )
    rts
}
//SEG102 prepare
prepare: {
    .label i = $d
  //SEG103 [45] phi from prepare to prepare::@1 [phi:prepare->prepare::@1]
  b1_from_prepare:
  //SEG104 [45] phi (byte) prepare::i#2 = (byte) 0 [phi:prepare->prepare::@1#0] -- zpby1=coby1 
    lda #0
    sta i
    jmp b1
  //SEG105 [45] phi from prepare::@1 to prepare::@1 [phi:prepare::@1->prepare::@1]
  b1_from_b1:
  //SEG106 [45] phi (byte) prepare::i#2 = (byte) prepare::i#1 [phi:prepare::@1->prepare::@1#0] -- register_copy 
    jmp b1
  //SEG107 prepare::@1
  b1:
  //SEG108 [46] *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] ( main:0::prepare:2 [ prepare::i#2 ] ) -- cowo1_staridx_zpby1=zpby1 
    ldx i
    txa
    sta buffer1,x
  //SEG109 [47] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] ( main:0::prepare:2 [ prepare::i#1 ] ) -- zpby1=_inc_zpby1 
    inc i
  //SEG110 [48] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] ( main:0::prepare:2 [ prepare::i#1 ] ) -- zpby1_neq_0_then_la1 
    lda i
    bne b1_from_b1
    jmp breturn
  //SEG111 prepare::@return
  breturn:
  //SEG112 [49] return  [ ] ( main:0::prepare:2 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [22] (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40 [ plot::y#4 plot::i#1 plot::line#1 ] ( main:0::plot:11 [ plot::y#4 plot::i#1 plot::line#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ plot::y#4 plot::y#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ plot::i#2 plot::i#3 plot::i#1 ]
Statement [32] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ flip::r#4 flip::r#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:11 [ flip::c#2 flip::c#1 ]
Statement [22] (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40 [ plot::y#4 plot::i#1 plot::line#1 ] ( main:0::plot:11 [ plot::y#4 plot::i#1 plot::line#1 ] ) always clobbers reg byte a 
Statement [32] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::c#4 main::c#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_PTR_BYTE:3 [ plot::line#4 plot::line#1 ] : zp ZP_PTR_BYTE:3 , 
Potential registers zp ZP_BYTE:5 [ plot::y#4 plot::y#1 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ plot::i#2 plot::i#3 plot::i#1 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ plot::x#2 plot::x#1 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ flip::r#4 flip::r#1 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ] : zp ZP_BYTE:9 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:11 [ flip::c#2 flip::c#1 ] : zp ZP_BYTE:11 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ flip::i#2 flip::i#1 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ prepare::i#2 prepare::i#1 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ main::$1 ] : zp ZP_BYTE:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ main::$3 ] : zp ZP_BYTE:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ plot::$3 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ flip::$0 ] : zp ZP_BYTE:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:18 [ flip::$4 ] : zp ZP_BYTE:18 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [flip] 2,002: zp ZP_BYTE:17 [ flip::$0 ] 1,901.9: zp ZP_BYTE:11 [ flip::c#2 flip::c#1 ] 1,746.33: zp ZP_BYTE:10 [ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ] 1,537.1: zp ZP_BYTE:9 [ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ] 286.17: zp ZP_BYTE:12 [ flip::i#2 flip::i#1 ] 202: zp ZP_BYTE:18 [ flip::$4 ] 173.94: zp ZP_BYTE:8 [ flip::r#4 flip::r#1 ] 
Uplift Scope [plot] 2,252.25: zp ZP_BYTE:7 [ plot::x#2 plot::x#1 ] 2,002: zp ZP_BYTE:16 [ plot::$3 ] 1,587.17: zp ZP_BYTE:6 [ plot::i#2 plot::i#3 plot::i#1 ] 239.19: zp ZP_PTR_BYTE:3 [ plot::line#4 plot::line#1 ] 176.75: zp ZP_BYTE:5 [ plot::y#4 plot::y#1 ] 
Uplift Scope [main] 2,002: zp ZP_BYTE:14 [ main::$1 ] 2,002: zp ZP_BYTE:15 [ main::$3 ] 191.9: zp ZP_BYTE:2 [ main::c#4 main::c#1 ] 
Uplift Scope [prepare] 38.5: zp ZP_BYTE:13 [ prepare::i#2 prepare::i#1 ] 
Uplift Scope [] 

Uplifting [flip] best 159992 combination reg byte a [ flip::$0 ] zp ZP_BYTE:11 [ flip::c#2 flip::c#1 ] reg byte y [ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ] reg byte x [ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ] reg byte x [ flip::i#2 flip::i#1 ] reg byte a [ flip::$4 ] zp ZP_BYTE:8 [ flip::r#4 flip::r#1 ] 
Uplifting [plot] best 135692 combination reg byte y [ plot::x#2 plot::x#1 ] reg byte a [ plot::$3 ] reg byte x [ plot::i#2 plot::i#3 plot::i#1 ] zp ZP_PTR_BYTE:3 [ plot::line#4 plot::line#1 ] zp ZP_BYTE:5 [ plot::y#4 plot::y#1 ] 
Uplifting [main] best 120292 combination reg byte a [ main::$1 ] reg byte a [ main::$3 ] reg byte x [ main::c#4 main::c#1 ] 
Uplifting [prepare] best 120192 combination reg byte x [ prepare::i#2 prepare::i#1 ] 
Uplifting [] best 120192 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:11 [ flip::c#2 flip::c#1 ]
Uplifting [flip] best 120192 combination zp ZP_BYTE:11 [ flip::c#2 flip::c#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ plot::y#4 plot::y#1 ]
Uplifting [plot] best 120192 combination zp ZP_BYTE:5 [ plot::y#4 plot::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ flip::r#4 flip::r#1 ]
Uplifting [flip] best 120192 combination zp ZP_BYTE:8 [ flip::r#4 flip::r#1 ] 
Coalescing zero page register [ zp ZP_BYTE:5 [ plot::y#4 plot::y#1 ] ] with [ zp ZP_BYTE:8 [ flip::r#4 flip::r#1 ] ]
Allocated (was zp ZP_PTR_BYTE:3) zp ZP_PTR_BYTE:2 [ plot::line#4 plot::line#1 ]
Allocated (was zp ZP_BYTE:5) zp ZP_BYTE:4 [ plot::y#4 plot::y#1 flip::r#4 flip::r#1 ]
Allocated (was zp ZP_BYTE:11) zp ZP_BYTE:5 [ flip::c#2 flip::c#1 ]
Removing instruction jmp b4
Removing instruction jmp bend
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const buffer1 = $1000
  .const buffer2 = $1100
  .const RASTER = $d012
//SEG2 @begin
bbegin:
//SEG3 @4
b4:
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @4 to main [phi:@4->main]
main_from_b4:
  jsr main
//SEG6 @end
bend:
//SEG7 main
main: {
  //SEG8 [2] call prepare param-assignment [ ] ( main:0 [ ] )
  //SEG9 [44] phi from main to prepare [phi:main->prepare]
  prepare_from_main:
    jsr prepare
  //SEG10 [3] phi from main main::@11 to main::@3 [phi:main/main::@11->main::@3]
  b3_from_main:
  b3_from_b11:
  //SEG11 [3] phi (byte) main::c#4 = (byte) 25 [phi:main/main::@11->main::@3#0] -- xby=coby1 
    ldx #$19
    jmp b3
  //SEG12 [3] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  b3_from_b3:
    jmp b3
  //SEG13 [3] phi from main::@6 to main::@3 [phi:main::@6->main::@3]
  b3_from_b6:
  //SEG14 [3] phi (byte) main::c#4 = (byte) main::c#1 [phi:main::@6->main::@3#0] -- register_copy 
  //SEG15 main::@3
  b3:
  //SEG16 [4] (byte~) main::$1 ← * (const byte*) RASTER#0 [ main::c#4 main::$1 ] ( main:0 [ main::c#4 main::$1 ] ) -- aby=_star_cowo1 
    lda RASTER
  //SEG17 [5] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#4 ] ( main:0 [ main::c#4 ] ) -- aby_neq_coby1_then_la1 
    cmp #$fe
    bne b3_from_b3
  //SEG18 main::@4
  b4:
  //SEG19 [6] (byte~) main::$3 ← * (const byte*) RASTER#0 [ main::c#4 main::$3 ] ( main:0 [ main::c#4 main::$3 ] ) -- aby=_star_cowo1 
    lda RASTER
  //SEG20 [7] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#4 ] ( main:0 [ main::c#4 ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b4
  //SEG21 main::@6
  b6:
  //SEG22 [8] (byte) main::c#1 ← -- (byte) main::c#4 [ main::c#1 ] ( main:0 [ main::c#1 ] ) -- xby=_dec_xby 
    dex
  //SEG23 [9] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] ( main:0 [ main::c#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b3_from_b6
  //SEG24 main::@7
  b7:
  //SEG25 [10] call flip param-assignment [ ] ( main:0 [ ] )
  //SEG26 [26] phi from main::@7 to flip [phi:main::@7->flip]
  flip_from_b7:
    jsr flip
  //SEG27 main::@10
  b10:
  //SEG28 [11] call plot param-assignment [ ] ( main:0 [ ] )
  //SEG29 [14] phi from main::@10 to plot [phi:main::@10->plot]
  plot_from_b10:
    jsr plot
  //SEG30 main::@11
  b11:
  //SEG31 [12] if(true) goto main::@3 [ ] ( main:0 [ ] ) -- true_then_la1 
    jmp b3_from_b11
  //SEG32 main::@return
  breturn:
  //SEG33 [13] return  [ ] ( main:0 [ ] )
    rts
}
//SEG34 plot
plot: {
    .label line = 2
    .label y = 4
  //SEG35 [15] phi from plot to plot::@1 [phi:plot->plot::@1]
  b1_from_plot:
  //SEG36 [15] phi (byte) plot::y#4 = (byte) 16 [phi:plot->plot::@1#0] -- zpby1=coby1 
    lda #$10
    sta y
  //SEG37 [15] phi (byte*) plot::line#4 = (const byte[1000]) SCREEN#0+(byte) 5*(byte) 40+(byte) 12 [phi:plot->plot::@1#1] -- zpptrby1=cowo1 
    lda #<SCREEN+5*$28+$c
    sta line
    lda #>SCREEN+5*$28+$c
    sta line+1
  //SEG38 [15] phi (byte) plot::i#3 = (byte) 0 [phi:plot->plot::@1#2] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG39 [15] phi from plot::@3 to plot::@1 [phi:plot::@3->plot::@1]
  b1_from_b3:
  //SEG40 [15] phi (byte) plot::y#4 = (byte) plot::y#1 [phi:plot::@3->plot::@1#0] -- register_copy 
  //SEG41 [15] phi (byte*) plot::line#4 = (byte*) plot::line#1 [phi:plot::@3->plot::@1#1] -- register_copy 
  //SEG42 [15] phi (byte) plot::i#3 = (byte) plot::i#1 [phi:plot::@3->plot::@1#2] -- register_copy 
  //SEG43 plot::@1
  b1:
  //SEG44 [16] phi from plot::@1 to plot::@2 [phi:plot::@1->plot::@2]
  b2_from_b1:
  //SEG45 [16] phi (byte) plot::x#2 = (byte) 0 [phi:plot::@1->plot::@2#0] -- yby=coby1 
    ldy #0
  //SEG46 [16] phi (byte) plot::i#2 = (byte) plot::i#3 [phi:plot::@1->plot::@2#1] -- register_copy 
    jmp b2
  //SEG47 [16] phi from plot::@2 to plot::@2 [phi:plot::@2->plot::@2]
  b2_from_b2:
  //SEG48 [16] phi (byte) plot::x#2 = (byte) plot::x#1 [phi:plot::@2->plot::@2#0] -- register_copy 
  //SEG49 [16] phi (byte) plot::i#2 = (byte) plot::i#1 [phi:plot::@2->plot::@2#1] -- register_copy 
  //SEG50 plot::@2
  b2:
  //SEG51 [17] (byte~) plot::$3 ← (const byte[256]) buffer1#0 *idx (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ] ) -- aby=cowo1_staridx_xby 
    lda buffer1,x
  //SEG52 [18] *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ) -- zpptrby1_staridx_yby=aby 
    sta (line),y
  //SEG53 [19] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] ) -- xby=_inc_xby 
    inx
  //SEG54 [20] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ) -- yby=_inc_yby 
    iny
  //SEG55 [21] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ) -- yby_lt_coby1_then_la1 
    cpy #$10
    bcc b2_from_b2
  //SEG56 plot::@3
  b3:
  //SEG57 [22] (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40 [ plot::y#4 plot::i#1 plot::line#1 ] ( main:0::plot:11 [ plot::y#4 plot::i#1 plot::line#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+1
  !:
  //SEG58 [23] (byte) plot::y#1 ← -- (byte) plot::y#4 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:0::plot:11 [ plot::i#1 plot::line#1 plot::y#1 ] ) -- zpby1=_dec_zpby1 
    dec y
  //SEG59 [24] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:0::plot:11 [ plot::i#1 plot::line#1 plot::y#1 ] ) -- zpby1_neq_0_then_la1 
    lda y
    bne b1_from_b3
  //SEG60 plot::@return
  breturn:
  //SEG61 [25] return  [ ] ( main:0::plot:11 [ ] )
    rts
}
//SEG62 flip
flip: {
    .label c = 5
    .label r = 4
  //SEG63 [27] phi from flip to flip::@1 [phi:flip->flip::@1]
  b1_from_flip:
  //SEG64 [27] phi (byte) flip::r#4 = (byte) 16 [phi:flip->flip::@1#0] -- zpby1=coby1 
    lda #$10
    sta r
  //SEG65 [27] phi (byte) flip::dstIdx#5 = (byte) 15 [phi:flip->flip::@1#1] -- yby=coby1 
    ldy #$f
  //SEG66 [27] phi (byte) flip::srcIdx#3 = (byte) 0 [phi:flip->flip::@1#2] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG67 [27] phi from flip::@4 to flip::@1 [phi:flip::@4->flip::@1]
  b1_from_b4:
  //SEG68 [27] phi (byte) flip::r#4 = (byte) flip::r#1 [phi:flip::@4->flip::@1#0] -- register_copy 
  //SEG69 [27] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 [phi:flip::@4->flip::@1#1] -- register_copy 
  //SEG70 [27] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 [phi:flip::@4->flip::@1#2] -- register_copy 
  //SEG71 flip::@1
  b1:
  //SEG72 [28] phi from flip::@1 to flip::@2 [phi:flip::@1->flip::@2]
  b2_from_b1:
  //SEG73 [28] phi (byte) flip::c#2 = (byte) 16 [phi:flip::@1->flip::@2#0] -- zpby1=coby1 
    lda #$10
    sta c
  //SEG74 [28] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 [phi:flip::@1->flip::@2#1] -- register_copy 
  //SEG75 [28] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 [phi:flip::@1->flip::@2#2] -- register_copy 
    jmp b2
  //SEG76 [28] phi from flip::@2 to flip::@2 [phi:flip::@2->flip::@2]
  b2_from_b2:
  //SEG77 [28] phi (byte) flip::c#2 = (byte) flip::c#1 [phi:flip::@2->flip::@2#0] -- register_copy 
  //SEG78 [28] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 [phi:flip::@2->flip::@2#1] -- register_copy 
  //SEG79 [28] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 [phi:flip::@2->flip::@2#2] -- register_copy 
  //SEG80 flip::@2
  b2:
  //SEG81 [29] (byte~) flip::$0 ← (const byte[256]) buffer1#0 *idx (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ] ) -- aby=cowo1_staridx_xby 
    lda buffer1,x
  //SEG82 [30] *((const byte[256]) buffer2#0 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ) -- cowo1_staridx_yby=aby 
    sta buffer2,y
  //SEG83 [31] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] ) -- xby=_inc_xby 
    inx
  //SEG84 [32] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ) -- yby=yby_plus_coby1 
    tya
    clc
    adc #$10
    tay
  //SEG85 [33] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ) -- zpby1=_dec_zpby1 
    dec c
  //SEG86 [34] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ) -- zpby1_neq_0_then_la1 
    lda c
    bne b2_from_b2
  //SEG87 flip::@4
  b4:
  //SEG88 [35] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] ) -- yby=_dec_yby 
    dey
  //SEG89 [36] (byte) flip::r#1 ← -- (byte) flip::r#4 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:0::flip:10 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ) -- zpby1=_dec_zpby1 
    dec r
  //SEG90 [37] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:0::flip:10 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ) -- zpby1_neq_0_then_la1 
    lda r
    bne b1_from_b4
  //SEG91 [38] phi from flip::@4 to flip::@3 [phi:flip::@4->flip::@3]
  b3_from_b4:
  //SEG92 [38] phi (byte) flip::i#2 = (byte) 0 [phi:flip::@4->flip::@3#0] -- xby=coby1 
    ldx #0
    jmp b3
  //SEG93 [38] phi from flip::@3 to flip::@3 [phi:flip::@3->flip::@3]
  b3_from_b3:
  //SEG94 [38] phi (byte) flip::i#2 = (byte) flip::i#1 [phi:flip::@3->flip::@3#0] -- register_copy 
  //SEG95 flip::@3
  b3:
  //SEG96 [39] (byte~) flip::$4 ← (const byte[256]) buffer2#0 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] ( main:0::flip:10 [ flip::i#2 flip::$4 ] ) -- aby=cowo1_staridx_xby 
    lda buffer2,x
  //SEG97 [40] *((const byte[256]) buffer1#0 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] ( main:0::flip:10 [ flip::i#2 ] ) -- cowo1_staridx_xby=aby 
    sta buffer1,x
  //SEG98 [41] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] ( main:0::flip:10 [ flip::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG99 [42] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] ( main:0::flip:10 [ flip::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b3_from_b3
  //SEG100 flip::@return
  breturn:
  //SEG101 [43] return  [ ] ( main:0::flip:10 [ ] )
    rts
}
//SEG102 prepare
prepare: {
  //SEG103 [45] phi from prepare to prepare::@1 [phi:prepare->prepare::@1]
  b1_from_prepare:
  //SEG104 [45] phi (byte) prepare::i#2 = (byte) 0 [phi:prepare->prepare::@1#0] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG105 [45] phi from prepare::@1 to prepare::@1 [phi:prepare::@1->prepare::@1]
  b1_from_b1:
  //SEG106 [45] phi (byte) prepare::i#2 = (byte) prepare::i#1 [phi:prepare::@1->prepare::@1#0] -- register_copy 
  //SEG107 prepare::@1
  b1:
  //SEG108 [46] *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] ( main:0::prepare:2 [ prepare::i#2 ] ) -- cowo1_staridx_xby=xby 
    txa
    sta buffer1,x
  //SEG109 [47] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] ( main:0::prepare:2 [ prepare::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG110 [48] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] ( main:0::prepare:2 [ prepare::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b1_from_b1
  //SEG111 prepare::@return
  breturn:
  //SEG112 [49] return  [ ] ( main:0::prepare:2 [ ] )
    rts
}

Replacing label b3_from_b6 with b3
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b4 with b1
Replacing label b3_from_b3 with b3
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction main_from_b4:
Removing instruction b3_from_main:
Removing instruction b3_from_b6:
Removing instruction flip_from_b7:
Removing instruction plot_from_b10:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b1_from_b4:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b3_from_b3:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const buffer1 = $1000
  .const buffer2 = $1100
  .const RASTER = $d012
//SEG2 @begin
//SEG3 @4
b4:
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @4 to main [phi:@4->main]
  jsr main
//SEG6 @end
bend:
//SEG7 main
main: {
  //SEG8 [2] call prepare param-assignment [ ] ( main:0 [ ] )
  //SEG9 [44] phi from main to prepare [phi:main->prepare]
  prepare_from_main:
    jsr prepare
  //SEG10 [3] phi from main main::@11 to main::@3 [phi:main/main::@11->main::@3]
  b3_from_b11:
  //SEG11 [3] phi (byte) main::c#4 = (byte) 25 [phi:main/main::@11->main::@3#0] -- xby=coby1 
    ldx #$19
    jmp b3
  //SEG12 [3] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  b3_from_b3:
    jmp b3
  //SEG13 [3] phi from main::@6 to main::@3 [phi:main::@6->main::@3]
  //SEG14 [3] phi (byte) main::c#4 = (byte) main::c#1 [phi:main::@6->main::@3#0] -- register_copy 
  //SEG15 main::@3
  b3:
  //SEG16 [4] (byte~) main::$1 ← * (const byte*) RASTER#0 [ main::c#4 main::$1 ] ( main:0 [ main::c#4 main::$1 ] ) -- aby=_star_cowo1 
    lda RASTER
  //SEG17 [5] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#4 ] ( main:0 [ main::c#4 ] ) -- aby_neq_coby1_then_la1 
    cmp #$fe
    bne b3_from_b3
  //SEG18 main::@4
  b4:
  //SEG19 [6] (byte~) main::$3 ← * (const byte*) RASTER#0 [ main::c#4 main::$3 ] ( main:0 [ main::c#4 main::$3 ] ) -- aby=_star_cowo1 
    lda RASTER
  //SEG20 [7] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#4 ] ( main:0 [ main::c#4 ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b4
  //SEG21 main::@6
  b6:
  //SEG22 [8] (byte) main::c#1 ← -- (byte) main::c#4 [ main::c#1 ] ( main:0 [ main::c#1 ] ) -- xby=_dec_xby 
    dex
  //SEG23 [9] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] ( main:0 [ main::c#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG24 main::@7
  b7:
  //SEG25 [10] call flip param-assignment [ ] ( main:0 [ ] )
  //SEG26 [26] phi from main::@7 to flip [phi:main::@7->flip]
    jsr flip
  //SEG27 main::@10
  b10:
  //SEG28 [11] call plot param-assignment [ ] ( main:0 [ ] )
  //SEG29 [14] phi from main::@10 to plot [phi:main::@10->plot]
    jsr plot
  //SEG30 main::@11
  b11:
  //SEG31 [12] if(true) goto main::@3 [ ] ( main:0 [ ] ) -- true_then_la1 
    jmp b3_from_b11
  //SEG32 main::@return
  breturn:
  //SEG33 [13] return  [ ] ( main:0 [ ] )
    rts
}
//SEG34 plot
plot: {
    .label line = 2
    .label y = 4
  //SEG35 [15] phi from plot to plot::@1 [phi:plot->plot::@1]
  b1_from_plot:
  //SEG36 [15] phi (byte) plot::y#4 = (byte) 16 [phi:plot->plot::@1#0] -- zpby1=coby1 
    lda #$10
    sta y
  //SEG37 [15] phi (byte*) plot::line#4 = (const byte[1000]) SCREEN#0+(byte) 5*(byte) 40+(byte) 12 [phi:plot->plot::@1#1] -- zpptrby1=cowo1 
    lda #<SCREEN+5*$28+$c
    sta line
    lda #>SCREEN+5*$28+$c
    sta line+1
  //SEG38 [15] phi (byte) plot::i#3 = (byte) 0 [phi:plot->plot::@1#2] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG39 [15] phi from plot::@3 to plot::@1 [phi:plot::@3->plot::@1]
  //SEG40 [15] phi (byte) plot::y#4 = (byte) plot::y#1 [phi:plot::@3->plot::@1#0] -- register_copy 
  //SEG41 [15] phi (byte*) plot::line#4 = (byte*) plot::line#1 [phi:plot::@3->plot::@1#1] -- register_copy 
  //SEG42 [15] phi (byte) plot::i#3 = (byte) plot::i#1 [phi:plot::@3->plot::@1#2] -- register_copy 
  //SEG43 plot::@1
  b1:
  //SEG44 [16] phi from plot::@1 to plot::@2 [phi:plot::@1->plot::@2]
  //SEG45 [16] phi (byte) plot::x#2 = (byte) 0 [phi:plot::@1->plot::@2#0] -- yby=coby1 
    ldy #0
  //SEG46 [16] phi (byte) plot::i#2 = (byte) plot::i#3 [phi:plot::@1->plot::@2#1] -- register_copy 
    jmp b2
  //SEG47 [16] phi from plot::@2 to plot::@2 [phi:plot::@2->plot::@2]
  //SEG48 [16] phi (byte) plot::x#2 = (byte) plot::x#1 [phi:plot::@2->plot::@2#0] -- register_copy 
  //SEG49 [16] phi (byte) plot::i#2 = (byte) plot::i#1 [phi:plot::@2->plot::@2#1] -- register_copy 
  //SEG50 plot::@2
  b2:
  //SEG51 [17] (byte~) plot::$3 ← (const byte[256]) buffer1#0 *idx (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ] ) -- aby=cowo1_staridx_xby 
    lda buffer1,x
  //SEG52 [18] *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ) -- zpptrby1_staridx_yby=aby 
    sta (line),y
  //SEG53 [19] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] ) -- xby=_inc_xby 
    inx
  //SEG54 [20] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ) -- yby=_inc_yby 
    iny
  //SEG55 [21] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ) -- yby_lt_coby1_then_la1 
    cpy #$10
    bcc b2
  //SEG56 plot::@3
  b3:
  //SEG57 [22] (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40 [ plot::y#4 plot::i#1 plot::line#1 ] ( main:0::plot:11 [ plot::y#4 plot::i#1 plot::line#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+1
  !:
  //SEG58 [23] (byte) plot::y#1 ← -- (byte) plot::y#4 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:0::plot:11 [ plot::i#1 plot::line#1 plot::y#1 ] ) -- zpby1=_dec_zpby1 
    dec y
  //SEG59 [24] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:0::plot:11 [ plot::i#1 plot::line#1 plot::y#1 ] ) -- zpby1_neq_0_then_la1 
    lda y
    bne b1
  //SEG60 plot::@return
  breturn:
  //SEG61 [25] return  [ ] ( main:0::plot:11 [ ] )
    rts
}
//SEG62 flip
flip: {
    .label c = 5
    .label r = 4
  //SEG63 [27] phi from flip to flip::@1 [phi:flip->flip::@1]
  b1_from_flip:
  //SEG64 [27] phi (byte) flip::r#4 = (byte) 16 [phi:flip->flip::@1#0] -- zpby1=coby1 
    lda #$10
    sta r
  //SEG65 [27] phi (byte) flip::dstIdx#5 = (byte) 15 [phi:flip->flip::@1#1] -- yby=coby1 
    ldy #$f
  //SEG66 [27] phi (byte) flip::srcIdx#3 = (byte) 0 [phi:flip->flip::@1#2] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG67 [27] phi from flip::@4 to flip::@1 [phi:flip::@4->flip::@1]
  //SEG68 [27] phi (byte) flip::r#4 = (byte) flip::r#1 [phi:flip::@4->flip::@1#0] -- register_copy 
  //SEG69 [27] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 [phi:flip::@4->flip::@1#1] -- register_copy 
  //SEG70 [27] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 [phi:flip::@4->flip::@1#2] -- register_copy 
  //SEG71 flip::@1
  b1:
  //SEG72 [28] phi from flip::@1 to flip::@2 [phi:flip::@1->flip::@2]
  //SEG73 [28] phi (byte) flip::c#2 = (byte) 16 [phi:flip::@1->flip::@2#0] -- zpby1=coby1 
    lda #$10
    sta c
  //SEG74 [28] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 [phi:flip::@1->flip::@2#1] -- register_copy 
  //SEG75 [28] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 [phi:flip::@1->flip::@2#2] -- register_copy 
    jmp b2
  //SEG76 [28] phi from flip::@2 to flip::@2 [phi:flip::@2->flip::@2]
  //SEG77 [28] phi (byte) flip::c#2 = (byte) flip::c#1 [phi:flip::@2->flip::@2#0] -- register_copy 
  //SEG78 [28] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 [phi:flip::@2->flip::@2#1] -- register_copy 
  //SEG79 [28] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 [phi:flip::@2->flip::@2#2] -- register_copy 
  //SEG80 flip::@2
  b2:
  //SEG81 [29] (byte~) flip::$0 ← (const byte[256]) buffer1#0 *idx (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ] ) -- aby=cowo1_staridx_xby 
    lda buffer1,x
  //SEG82 [30] *((const byte[256]) buffer2#0 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ) -- cowo1_staridx_yby=aby 
    sta buffer2,y
  //SEG83 [31] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] ) -- xby=_inc_xby 
    inx
  //SEG84 [32] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ) -- yby=yby_plus_coby1 
    tya
    clc
    adc #$10
    tay
  //SEG85 [33] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ) -- zpby1=_dec_zpby1 
    dec c
  //SEG86 [34] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ) -- zpby1_neq_0_then_la1 
    lda c
    bne b2
  //SEG87 flip::@4
  b4:
  //SEG88 [35] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] ) -- yby=_dec_yby 
    dey
  //SEG89 [36] (byte) flip::r#1 ← -- (byte) flip::r#4 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:0::flip:10 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ) -- zpby1=_dec_zpby1 
    dec r
  //SEG90 [37] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:0::flip:10 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ) -- zpby1_neq_0_then_la1 
    lda r
    bne b1
  //SEG91 [38] phi from flip::@4 to flip::@3 [phi:flip::@4->flip::@3]
  b3_from_b4:
  //SEG92 [38] phi (byte) flip::i#2 = (byte) 0 [phi:flip::@4->flip::@3#0] -- xby=coby1 
    ldx #0
    jmp b3
  //SEG93 [38] phi from flip::@3 to flip::@3 [phi:flip::@3->flip::@3]
  //SEG94 [38] phi (byte) flip::i#2 = (byte) flip::i#1 [phi:flip::@3->flip::@3#0] -- register_copy 
  //SEG95 flip::@3
  b3:
  //SEG96 [39] (byte~) flip::$4 ← (const byte[256]) buffer2#0 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] ( main:0::flip:10 [ flip::i#2 flip::$4 ] ) -- aby=cowo1_staridx_xby 
    lda buffer2,x
  //SEG97 [40] *((const byte[256]) buffer1#0 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] ( main:0::flip:10 [ flip::i#2 ] ) -- cowo1_staridx_xby=aby 
    sta buffer1,x
  //SEG98 [41] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] ( main:0::flip:10 [ flip::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG99 [42] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] ( main:0::flip:10 [ flip::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG100 flip::@return
  breturn:
  //SEG101 [43] return  [ ] ( main:0::flip:10 [ ] )
    rts
}
//SEG102 prepare
prepare: {
  //SEG103 [45] phi from prepare to prepare::@1 [phi:prepare->prepare::@1]
  b1_from_prepare:
  //SEG104 [45] phi (byte) prepare::i#2 = (byte) 0 [phi:prepare->prepare::@1#0] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG105 [45] phi from prepare::@1 to prepare::@1 [phi:prepare::@1->prepare::@1]
  //SEG106 [45] phi (byte) prepare::i#2 = (byte) prepare::i#1 [phi:prepare::@1->prepare::@1#0] -- register_copy 
  //SEG107 prepare::@1
  b1:
  //SEG108 [46] *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] ( main:0::prepare:2 [ prepare::i#2 ] ) -- cowo1_staridx_xby=xby 
    txa
    sta buffer1,x
  //SEG109 [47] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] ( main:0::prepare:2 [ prepare::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG110 [48] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] ( main:0::prepare:2 [ prepare::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG111 prepare::@return
  breturn:
  //SEG112 [49] return  [ ] ( main:0::prepare:2 [ ] )
    rts
}

Removing instruction b4:
Removing instruction bend:
Removing instruction prepare_from_main:
Removing instruction b6:
Removing instruction b7:
Removing instruction b10:
Removing instruction b11:
Removing instruction breturn:
Removing instruction b1_from_plot:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_flip:
Removing instruction b4:
Removing instruction b3_from_b4:
Removing instruction breturn:
Removing instruction b1_from_prepare:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const buffer1 = $1000
  .const buffer2 = $1100
  .const RASTER = $d012
//SEG2 @begin
//SEG3 @4
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @4 to main [phi:@4->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] call prepare param-assignment [ ] ( main:0 [ ] )
  //SEG9 [44] phi from main to prepare [phi:main->prepare]
    jsr prepare
  //SEG10 [3] phi from main main::@11 to main::@3 [phi:main/main::@11->main::@3]
  b3_from_b11:
  //SEG11 [3] phi (byte) main::c#4 = (byte) 25 [phi:main/main::@11->main::@3#0] -- xby=coby1 
    ldx #$19
    jmp b3
  //SEG12 [3] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  b3_from_b3:
    jmp b3
  //SEG13 [3] phi from main::@6 to main::@3 [phi:main::@6->main::@3]
  //SEG14 [3] phi (byte) main::c#4 = (byte) main::c#1 [phi:main::@6->main::@3#0] -- register_copy 
  //SEG15 main::@3
  b3:
  //SEG16 [4] (byte~) main::$1 ← * (const byte*) RASTER#0 [ main::c#4 main::$1 ] ( main:0 [ main::c#4 main::$1 ] ) -- aby=_star_cowo1 
    lda RASTER
  //SEG17 [5] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#4 ] ( main:0 [ main::c#4 ] ) -- aby_neq_coby1_then_la1 
    cmp #$fe
    bne b3_from_b3
  //SEG18 main::@4
  b4:
  //SEG19 [6] (byte~) main::$3 ← * (const byte*) RASTER#0 [ main::c#4 main::$3 ] ( main:0 [ main::c#4 main::$3 ] ) -- aby=_star_cowo1 
    lda RASTER
  //SEG20 [7] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#4 ] ( main:0 [ main::c#4 ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b4
  //SEG21 main::@6
  //SEG22 [8] (byte) main::c#1 ← -- (byte) main::c#4 [ main::c#1 ] ( main:0 [ main::c#1 ] ) -- xby=_dec_xby 
    dex
  //SEG23 [9] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] ( main:0 [ main::c#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG24 main::@7
  //SEG25 [10] call flip param-assignment [ ] ( main:0 [ ] )
  //SEG26 [26] phi from main::@7 to flip [phi:main::@7->flip]
    jsr flip
  //SEG27 main::@10
  //SEG28 [11] call plot param-assignment [ ] ( main:0 [ ] )
  //SEG29 [14] phi from main::@10 to plot [phi:main::@10->plot]
    jsr plot
  //SEG30 main::@11
  //SEG31 [12] if(true) goto main::@3 [ ] ( main:0 [ ] ) -- true_then_la1 
    jmp b3_from_b11
  //SEG32 main::@return
  //SEG33 [13] return  [ ] ( main:0 [ ] )
    rts
}
//SEG34 plot
plot: {
    .label line = 2
    .label y = 4
  //SEG35 [15] phi from plot to plot::@1 [phi:plot->plot::@1]
  //SEG36 [15] phi (byte) plot::y#4 = (byte) 16 [phi:plot->plot::@1#0] -- zpby1=coby1 
    lda #$10
    sta y
  //SEG37 [15] phi (byte*) plot::line#4 = (const byte[1000]) SCREEN#0+(byte) 5*(byte) 40+(byte) 12 [phi:plot->plot::@1#1] -- zpptrby1=cowo1 
    lda #<SCREEN+5*$28+$c
    sta line
    lda #>SCREEN+5*$28+$c
    sta line+1
  //SEG38 [15] phi (byte) plot::i#3 = (byte) 0 [phi:plot->plot::@1#2] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG39 [15] phi from plot::@3 to plot::@1 [phi:plot::@3->plot::@1]
  //SEG40 [15] phi (byte) plot::y#4 = (byte) plot::y#1 [phi:plot::@3->plot::@1#0] -- register_copy 
  //SEG41 [15] phi (byte*) plot::line#4 = (byte*) plot::line#1 [phi:plot::@3->plot::@1#1] -- register_copy 
  //SEG42 [15] phi (byte) plot::i#3 = (byte) plot::i#1 [phi:plot::@3->plot::@1#2] -- register_copy 
  //SEG43 plot::@1
  b1:
  //SEG44 [16] phi from plot::@1 to plot::@2 [phi:plot::@1->plot::@2]
  //SEG45 [16] phi (byte) plot::x#2 = (byte) 0 [phi:plot::@1->plot::@2#0] -- yby=coby1 
    ldy #0
  //SEG46 [16] phi (byte) plot::i#2 = (byte) plot::i#3 [phi:plot::@1->plot::@2#1] -- register_copy 
    jmp b2
  //SEG47 [16] phi from plot::@2 to plot::@2 [phi:plot::@2->plot::@2]
  //SEG48 [16] phi (byte) plot::x#2 = (byte) plot::x#1 [phi:plot::@2->plot::@2#0] -- register_copy 
  //SEG49 [16] phi (byte) plot::i#2 = (byte) plot::i#1 [phi:plot::@2->plot::@2#1] -- register_copy 
  //SEG50 plot::@2
  b2:
  //SEG51 [17] (byte~) plot::$3 ← (const byte[256]) buffer1#0 *idx (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ] ) -- aby=cowo1_staridx_xby 
    lda buffer1,x
  //SEG52 [18] *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ) -- zpptrby1_staridx_yby=aby 
    sta (line),y
  //SEG53 [19] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] ) -- xby=_inc_xby 
    inx
  //SEG54 [20] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ) -- yby=_inc_yby 
    iny
  //SEG55 [21] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ) -- yby_lt_coby1_then_la1 
    cpy #$10
    bcc b2
  //SEG56 plot::@3
  //SEG57 [22] (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40 [ plot::y#4 plot::i#1 plot::line#1 ] ( main:0::plot:11 [ plot::y#4 plot::i#1 plot::line#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+1
  !:
  //SEG58 [23] (byte) plot::y#1 ← -- (byte) plot::y#4 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:0::plot:11 [ plot::i#1 plot::line#1 plot::y#1 ] ) -- zpby1=_dec_zpby1 
    dec y
  //SEG59 [24] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:0::plot:11 [ plot::i#1 plot::line#1 plot::y#1 ] ) -- zpby1_neq_0_then_la1 
    lda y
    bne b1
  //SEG60 plot::@return
  //SEG61 [25] return  [ ] ( main:0::plot:11 [ ] )
    rts
}
//SEG62 flip
flip: {
    .label c = 5
    .label r = 4
  //SEG63 [27] phi from flip to flip::@1 [phi:flip->flip::@1]
  //SEG64 [27] phi (byte) flip::r#4 = (byte) 16 [phi:flip->flip::@1#0] -- zpby1=coby1 
    lda #$10
    sta r
  //SEG65 [27] phi (byte) flip::dstIdx#5 = (byte) 15 [phi:flip->flip::@1#1] -- yby=coby1 
    ldy #$f
  //SEG66 [27] phi (byte) flip::srcIdx#3 = (byte) 0 [phi:flip->flip::@1#2] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG67 [27] phi from flip::@4 to flip::@1 [phi:flip::@4->flip::@1]
  //SEG68 [27] phi (byte) flip::r#4 = (byte) flip::r#1 [phi:flip::@4->flip::@1#0] -- register_copy 
  //SEG69 [27] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 [phi:flip::@4->flip::@1#1] -- register_copy 
  //SEG70 [27] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 [phi:flip::@4->flip::@1#2] -- register_copy 
  //SEG71 flip::@1
  b1:
  //SEG72 [28] phi from flip::@1 to flip::@2 [phi:flip::@1->flip::@2]
  //SEG73 [28] phi (byte) flip::c#2 = (byte) 16 [phi:flip::@1->flip::@2#0] -- zpby1=coby1 
    lda #$10
    sta c
  //SEG74 [28] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 [phi:flip::@1->flip::@2#1] -- register_copy 
  //SEG75 [28] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 [phi:flip::@1->flip::@2#2] -- register_copy 
    jmp b2
  //SEG76 [28] phi from flip::@2 to flip::@2 [phi:flip::@2->flip::@2]
  //SEG77 [28] phi (byte) flip::c#2 = (byte) flip::c#1 [phi:flip::@2->flip::@2#0] -- register_copy 
  //SEG78 [28] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 [phi:flip::@2->flip::@2#1] -- register_copy 
  //SEG79 [28] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 [phi:flip::@2->flip::@2#2] -- register_copy 
  //SEG80 flip::@2
  b2:
  //SEG81 [29] (byte~) flip::$0 ← (const byte[256]) buffer1#0 *idx (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ] ) -- aby=cowo1_staridx_xby 
    lda buffer1,x
  //SEG82 [30] *((const byte[256]) buffer2#0 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ) -- cowo1_staridx_yby=aby 
    sta buffer2,y
  //SEG83 [31] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] ) -- xby=_inc_xby 
    inx
  //SEG84 [32] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ) -- yby=yby_plus_coby1 
    tya
    clc
    adc #$10
    tay
  //SEG85 [33] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ) -- zpby1=_dec_zpby1 
    dec c
  //SEG86 [34] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ) -- zpby1_neq_0_then_la1 
    lda c
    bne b2
  //SEG87 flip::@4
  //SEG88 [35] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] ) -- yby=_dec_yby 
    dey
  //SEG89 [36] (byte) flip::r#1 ← -- (byte) flip::r#4 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:0::flip:10 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ) -- zpby1=_dec_zpby1 
    dec r
  //SEG90 [37] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:0::flip:10 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ) -- zpby1_neq_0_then_la1 
    lda r
    bne b1
  //SEG91 [38] phi from flip::@4 to flip::@3 [phi:flip::@4->flip::@3]
  //SEG92 [38] phi (byte) flip::i#2 = (byte) 0 [phi:flip::@4->flip::@3#0] -- xby=coby1 
    ldx #0
    jmp b3
  //SEG93 [38] phi from flip::@3 to flip::@3 [phi:flip::@3->flip::@3]
  //SEG94 [38] phi (byte) flip::i#2 = (byte) flip::i#1 [phi:flip::@3->flip::@3#0] -- register_copy 
  //SEG95 flip::@3
  b3:
  //SEG96 [39] (byte~) flip::$4 ← (const byte[256]) buffer2#0 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] ( main:0::flip:10 [ flip::i#2 flip::$4 ] ) -- aby=cowo1_staridx_xby 
    lda buffer2,x
  //SEG97 [40] *((const byte[256]) buffer1#0 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] ( main:0::flip:10 [ flip::i#2 ] ) -- cowo1_staridx_xby=aby 
    sta buffer1,x
  //SEG98 [41] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] ( main:0::flip:10 [ flip::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG99 [42] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] ( main:0::flip:10 [ flip::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG100 flip::@return
  //SEG101 [43] return  [ ] ( main:0::flip:10 [ ] )
    rts
}
//SEG102 prepare
prepare: {
  //SEG103 [45] phi from prepare to prepare::@1 [phi:prepare->prepare::@1]
  //SEG104 [45] phi (byte) prepare::i#2 = (byte) 0 [phi:prepare->prepare::@1#0] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG105 [45] phi from prepare::@1 to prepare::@1 [phi:prepare::@1->prepare::@1]
  //SEG106 [45] phi (byte) prepare::i#2 = (byte) prepare::i#1 [phi:prepare::@1->prepare::@1#0] -- register_copy 
  //SEG107 prepare::@1
  b1:
  //SEG108 [46] *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] ( main:0::prepare:2 [ prepare::i#2 ] ) -- cowo1_staridx_xby=xby 
    txa
    sta buffer1,x
  //SEG109 [47] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] ( main:0::prepare:2 [ prepare::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG110 [48] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] ( main:0::prepare:2 [ prepare::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG111 prepare::@return
  //SEG112 [49] return  [ ] ( main:0::prepare:2 [ ] )
    rts
}

Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const buffer1 = $1000
  .const buffer2 = $1100
  .const RASTER = $d012
//SEG2 @begin
//SEG3 @4
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @4 to main [phi:@4->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] call prepare param-assignment [ ] ( main:0 [ ] )
  //SEG9 [44] phi from main to prepare [phi:main->prepare]
    jsr prepare
  //SEG10 [3] phi from main main::@11 to main::@3 [phi:main/main::@11->main::@3]
  b3_from_b11:
  //SEG11 [3] phi (byte) main::c#4 = (byte) 25 [phi:main/main::@11->main::@3#0] -- xby=coby1 
    ldx #$19
    jmp b3
  //SEG12 [3] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  b3_from_b3:
  //SEG13 [3] phi from main::@6 to main::@3 [phi:main::@6->main::@3]
  //SEG14 [3] phi (byte) main::c#4 = (byte) main::c#1 [phi:main::@6->main::@3#0] -- register_copy 
  //SEG15 main::@3
  b3:
  //SEG16 [4] (byte~) main::$1 ← * (const byte*) RASTER#0 [ main::c#4 main::$1 ] ( main:0 [ main::c#4 main::$1 ] ) -- aby=_star_cowo1 
    lda RASTER
  //SEG17 [5] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#4 ] ( main:0 [ main::c#4 ] ) -- aby_neq_coby1_then_la1 
    cmp #$fe
    bne b3_from_b3
  //SEG18 main::@4
  b4:
  //SEG19 [6] (byte~) main::$3 ← * (const byte*) RASTER#0 [ main::c#4 main::$3 ] ( main:0 [ main::c#4 main::$3 ] ) -- aby=_star_cowo1 
    lda RASTER
  //SEG20 [7] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#4 ] ( main:0 [ main::c#4 ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b4
  //SEG21 main::@6
  //SEG22 [8] (byte) main::c#1 ← -- (byte) main::c#4 [ main::c#1 ] ( main:0 [ main::c#1 ] ) -- xby=_dec_xby 
    dex
  //SEG23 [9] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] ( main:0 [ main::c#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG24 main::@7
  //SEG25 [10] call flip param-assignment [ ] ( main:0 [ ] )
  //SEG26 [26] phi from main::@7 to flip [phi:main::@7->flip]
    jsr flip
  //SEG27 main::@10
  //SEG28 [11] call plot param-assignment [ ] ( main:0 [ ] )
  //SEG29 [14] phi from main::@10 to plot [phi:main::@10->plot]
    jsr plot
  //SEG30 main::@11
  //SEG31 [12] if(true) goto main::@3 [ ] ( main:0 [ ] ) -- true_then_la1 
    jmp b3_from_b11
  //SEG32 main::@return
  //SEG33 [13] return  [ ] ( main:0 [ ] )
    rts
}
//SEG34 plot
plot: {
    .label line = 2
    .label y = 4
  //SEG35 [15] phi from plot to plot::@1 [phi:plot->plot::@1]
  //SEG36 [15] phi (byte) plot::y#4 = (byte) 16 [phi:plot->plot::@1#0] -- zpby1=coby1 
    lda #$10
    sta y
  //SEG37 [15] phi (byte*) plot::line#4 = (const byte[1000]) SCREEN#0+(byte) 5*(byte) 40+(byte) 12 [phi:plot->plot::@1#1] -- zpptrby1=cowo1 
    lda #<SCREEN+5*$28+$c
    sta line
    lda #>SCREEN+5*$28+$c
    sta line+1
  //SEG38 [15] phi (byte) plot::i#3 = (byte) 0 [phi:plot->plot::@1#2] -- xby=coby1 
    ldx #0
  //SEG39 [15] phi from plot::@3 to plot::@1 [phi:plot::@3->plot::@1]
  //SEG40 [15] phi (byte) plot::y#4 = (byte) plot::y#1 [phi:plot::@3->plot::@1#0] -- register_copy 
  //SEG41 [15] phi (byte*) plot::line#4 = (byte*) plot::line#1 [phi:plot::@3->plot::@1#1] -- register_copy 
  //SEG42 [15] phi (byte) plot::i#3 = (byte) plot::i#1 [phi:plot::@3->plot::@1#2] -- register_copy 
  //SEG43 plot::@1
  b1:
  //SEG44 [16] phi from plot::@1 to plot::@2 [phi:plot::@1->plot::@2]
  //SEG45 [16] phi (byte) plot::x#2 = (byte) 0 [phi:plot::@1->plot::@2#0] -- yby=coby1 
    ldy #0
  //SEG46 [16] phi (byte) plot::i#2 = (byte) plot::i#3 [phi:plot::@1->plot::@2#1] -- register_copy 
  //SEG47 [16] phi from plot::@2 to plot::@2 [phi:plot::@2->plot::@2]
  //SEG48 [16] phi (byte) plot::x#2 = (byte) plot::x#1 [phi:plot::@2->plot::@2#0] -- register_copy 
  //SEG49 [16] phi (byte) plot::i#2 = (byte) plot::i#1 [phi:plot::@2->plot::@2#1] -- register_copy 
  //SEG50 plot::@2
  b2:
  //SEG51 [17] (byte~) plot::$3 ← (const byte[256]) buffer1#0 *idx (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ] ) -- aby=cowo1_staridx_xby 
    lda buffer1,x
  //SEG52 [18] *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ) -- zpptrby1_staridx_yby=aby 
    sta (line),y
  //SEG53 [19] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] ) -- xby=_inc_xby 
    inx
  //SEG54 [20] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ) -- yby=_inc_yby 
    iny
  //SEG55 [21] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ) -- yby_lt_coby1_then_la1 
    cpy #$10
    bcc b2
  //SEG56 plot::@3
  //SEG57 [22] (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40 [ plot::y#4 plot::i#1 plot::line#1 ] ( main:0::plot:11 [ plot::y#4 plot::i#1 plot::line#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+1
  !:
  //SEG58 [23] (byte) plot::y#1 ← -- (byte) plot::y#4 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:0::plot:11 [ plot::i#1 plot::line#1 plot::y#1 ] ) -- zpby1=_dec_zpby1 
    dec y
  //SEG59 [24] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:0::plot:11 [ plot::i#1 plot::line#1 plot::y#1 ] ) -- zpby1_neq_0_then_la1 
    lda y
    bne b1
  //SEG60 plot::@return
  //SEG61 [25] return  [ ] ( main:0::plot:11 [ ] )
    rts
}
//SEG62 flip
flip: {
    .label c = 5
    .label r = 4
  //SEG63 [27] phi from flip to flip::@1 [phi:flip->flip::@1]
  //SEG64 [27] phi (byte) flip::r#4 = (byte) 16 [phi:flip->flip::@1#0] -- zpby1=coby1 
    lda #$10
    sta r
  //SEG65 [27] phi (byte) flip::dstIdx#5 = (byte) 15 [phi:flip->flip::@1#1] -- yby=coby1 
    ldy #$f
  //SEG66 [27] phi (byte) flip::srcIdx#3 = (byte) 0 [phi:flip->flip::@1#2] -- xby=coby1 
    ldx #0
  //SEG67 [27] phi from flip::@4 to flip::@1 [phi:flip::@4->flip::@1]
  //SEG68 [27] phi (byte) flip::r#4 = (byte) flip::r#1 [phi:flip::@4->flip::@1#0] -- register_copy 
  //SEG69 [27] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 [phi:flip::@4->flip::@1#1] -- register_copy 
  //SEG70 [27] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 [phi:flip::@4->flip::@1#2] -- register_copy 
  //SEG71 flip::@1
  b1:
  //SEG72 [28] phi from flip::@1 to flip::@2 [phi:flip::@1->flip::@2]
  //SEG73 [28] phi (byte) flip::c#2 = (byte) 16 [phi:flip::@1->flip::@2#0] -- zpby1=coby1 
    lda #$10
    sta c
  //SEG74 [28] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 [phi:flip::@1->flip::@2#1] -- register_copy 
  //SEG75 [28] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 [phi:flip::@1->flip::@2#2] -- register_copy 
  //SEG76 [28] phi from flip::@2 to flip::@2 [phi:flip::@2->flip::@2]
  //SEG77 [28] phi (byte) flip::c#2 = (byte) flip::c#1 [phi:flip::@2->flip::@2#0] -- register_copy 
  //SEG78 [28] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 [phi:flip::@2->flip::@2#1] -- register_copy 
  //SEG79 [28] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 [phi:flip::@2->flip::@2#2] -- register_copy 
  //SEG80 flip::@2
  b2:
  //SEG81 [29] (byte~) flip::$0 ← (const byte[256]) buffer1#0 *idx (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ] ) -- aby=cowo1_staridx_xby 
    lda buffer1,x
  //SEG82 [30] *((const byte[256]) buffer2#0 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ) -- cowo1_staridx_yby=aby 
    sta buffer2,y
  //SEG83 [31] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] ) -- xby=_inc_xby 
    inx
  //SEG84 [32] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ) -- yby=yby_plus_coby1 
    tya
    clc
    adc #$10
    tay
  //SEG85 [33] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ) -- zpby1=_dec_zpby1 
    dec c
  //SEG86 [34] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ) -- zpby1_neq_0_then_la1 
    lda c
    bne b2
  //SEG87 flip::@4
  //SEG88 [35] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] ) -- yby=_dec_yby 
    dey
  //SEG89 [36] (byte) flip::r#1 ← -- (byte) flip::r#4 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:0::flip:10 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ) -- zpby1=_dec_zpby1 
    dec r
  //SEG90 [37] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:0::flip:10 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ) -- zpby1_neq_0_then_la1 
    lda r
    bne b1
  //SEG91 [38] phi from flip::@4 to flip::@3 [phi:flip::@4->flip::@3]
  //SEG92 [38] phi (byte) flip::i#2 = (byte) 0 [phi:flip::@4->flip::@3#0] -- xby=coby1 
    ldx #0
  //SEG93 [38] phi from flip::@3 to flip::@3 [phi:flip::@3->flip::@3]
  //SEG94 [38] phi (byte) flip::i#2 = (byte) flip::i#1 [phi:flip::@3->flip::@3#0] -- register_copy 
  //SEG95 flip::@3
  b3:
  //SEG96 [39] (byte~) flip::$4 ← (const byte[256]) buffer2#0 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] ( main:0::flip:10 [ flip::i#2 flip::$4 ] ) -- aby=cowo1_staridx_xby 
    lda buffer2,x
  //SEG97 [40] *((const byte[256]) buffer1#0 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] ( main:0::flip:10 [ flip::i#2 ] ) -- cowo1_staridx_xby=aby 
    sta buffer1,x
  //SEG98 [41] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] ( main:0::flip:10 [ flip::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG99 [42] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] ( main:0::flip:10 [ flip::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG100 flip::@return
  //SEG101 [43] return  [ ] ( main:0::flip:10 [ ] )
    rts
}
//SEG102 prepare
prepare: {
  //SEG103 [45] phi from prepare to prepare::@1 [phi:prepare->prepare::@1]
  //SEG104 [45] phi (byte) prepare::i#2 = (byte) 0 [phi:prepare->prepare::@1#0] -- xby=coby1 
    ldx #0
  //SEG105 [45] phi from prepare::@1 to prepare::@1 [phi:prepare::@1->prepare::@1]
  //SEG106 [45] phi (byte) prepare::i#2 = (byte) prepare::i#1 [phi:prepare::@1->prepare::@1#0] -- register_copy 
  //SEG107 prepare::@1
  b1:
  //SEG108 [46] *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] ( main:0::prepare:2 [ prepare::i#2 ] ) -- cowo1_staridx_xby=xby 
    txa
    sta buffer1,x
  //SEG109 [47] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] ( main:0::prepare:2 [ prepare::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG110 [48] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] ( main:0::prepare:2 [ prepare::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG111 prepare::@return
  //SEG112 [49] return  [ ] ( main:0::prepare:2 [ ] )
    rts
}

Replacing label b3_from_b3 with b3
Removing instruction b3_from_b3:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const buffer1 = $1000
  .const buffer2 = $1100
  .const RASTER = $d012
//SEG2 @begin
//SEG3 @4
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @4 to main [phi:@4->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] call prepare param-assignment [ ] ( main:0 [ ] )
  //SEG9 [44] phi from main to prepare [phi:main->prepare]
    jsr prepare
  //SEG10 [3] phi from main main::@11 to main::@3 [phi:main/main::@11->main::@3]
  b3_from_b11:
  //SEG11 [3] phi (byte) main::c#4 = (byte) 25 [phi:main/main::@11->main::@3#0] -- xby=coby1 
    ldx #$19
    jmp b3
  //SEG12 [3] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  //SEG13 [3] phi from main::@6 to main::@3 [phi:main::@6->main::@3]
  //SEG14 [3] phi (byte) main::c#4 = (byte) main::c#1 [phi:main::@6->main::@3#0] -- register_copy 
  //SEG15 main::@3
  b3:
  //SEG16 [4] (byte~) main::$1 ← * (const byte*) RASTER#0 [ main::c#4 main::$1 ] ( main:0 [ main::c#4 main::$1 ] ) -- aby=_star_cowo1 
    lda RASTER
  //SEG17 [5] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#4 ] ( main:0 [ main::c#4 ] ) -- aby_neq_coby1_then_la1 
    cmp #$fe
    bne b3
  //SEG18 main::@4
  b4:
  //SEG19 [6] (byte~) main::$3 ← * (const byte*) RASTER#0 [ main::c#4 main::$3 ] ( main:0 [ main::c#4 main::$3 ] ) -- aby=_star_cowo1 
    lda RASTER
  //SEG20 [7] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#4 ] ( main:0 [ main::c#4 ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b4
  //SEG21 main::@6
  //SEG22 [8] (byte) main::c#1 ← -- (byte) main::c#4 [ main::c#1 ] ( main:0 [ main::c#1 ] ) -- xby=_dec_xby 
    dex
  //SEG23 [9] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] ( main:0 [ main::c#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG24 main::@7
  //SEG25 [10] call flip param-assignment [ ] ( main:0 [ ] )
  //SEG26 [26] phi from main::@7 to flip [phi:main::@7->flip]
    jsr flip
  //SEG27 main::@10
  //SEG28 [11] call plot param-assignment [ ] ( main:0 [ ] )
  //SEG29 [14] phi from main::@10 to plot [phi:main::@10->plot]
    jsr plot
  //SEG30 main::@11
  //SEG31 [12] if(true) goto main::@3 [ ] ( main:0 [ ] ) -- true_then_la1 
    jmp b3_from_b11
  //SEG32 main::@return
  //SEG33 [13] return  [ ] ( main:0 [ ] )
    rts
}
//SEG34 plot
plot: {
    .label line = 2
    .label y = 4
  //SEG35 [15] phi from plot to plot::@1 [phi:plot->plot::@1]
  //SEG36 [15] phi (byte) plot::y#4 = (byte) 16 [phi:plot->plot::@1#0] -- zpby1=coby1 
    lda #$10
    sta y
  //SEG37 [15] phi (byte*) plot::line#4 = (const byte[1000]) SCREEN#0+(byte) 5*(byte) 40+(byte) 12 [phi:plot->plot::@1#1] -- zpptrby1=cowo1 
    lda #<SCREEN+5*$28+$c
    sta line
    lda #>SCREEN+5*$28+$c
    sta line+1
  //SEG38 [15] phi (byte) plot::i#3 = (byte) 0 [phi:plot->plot::@1#2] -- xby=coby1 
    ldx #0
  //SEG39 [15] phi from plot::@3 to plot::@1 [phi:plot::@3->plot::@1]
  //SEG40 [15] phi (byte) plot::y#4 = (byte) plot::y#1 [phi:plot::@3->plot::@1#0] -- register_copy 
  //SEG41 [15] phi (byte*) plot::line#4 = (byte*) plot::line#1 [phi:plot::@3->plot::@1#1] -- register_copy 
  //SEG42 [15] phi (byte) plot::i#3 = (byte) plot::i#1 [phi:plot::@3->plot::@1#2] -- register_copy 
  //SEG43 plot::@1
  b1:
  //SEG44 [16] phi from plot::@1 to plot::@2 [phi:plot::@1->plot::@2]
  //SEG45 [16] phi (byte) plot::x#2 = (byte) 0 [phi:plot::@1->plot::@2#0] -- yby=coby1 
    ldy #0
  //SEG46 [16] phi (byte) plot::i#2 = (byte) plot::i#3 [phi:plot::@1->plot::@2#1] -- register_copy 
  //SEG47 [16] phi from plot::@2 to plot::@2 [phi:plot::@2->plot::@2]
  //SEG48 [16] phi (byte) plot::x#2 = (byte) plot::x#1 [phi:plot::@2->plot::@2#0] -- register_copy 
  //SEG49 [16] phi (byte) plot::i#2 = (byte) plot::i#1 [phi:plot::@2->plot::@2#1] -- register_copy 
  //SEG50 plot::@2
  b2:
  //SEG51 [17] (byte~) plot::$3 ← (const byte[256]) buffer1#0 *idx (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ] ) -- aby=cowo1_staridx_xby 
    lda buffer1,x
  //SEG52 [18] *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ) -- zpptrby1_staridx_yby=aby 
    sta (line),y
  //SEG53 [19] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] ) -- xby=_inc_xby 
    inx
  //SEG54 [20] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ) -- yby=_inc_yby 
    iny
  //SEG55 [21] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ) -- yby_lt_coby1_then_la1 
    cpy #$10
    bcc b2
  //SEG56 plot::@3
  //SEG57 [22] (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40 [ plot::y#4 plot::i#1 plot::line#1 ] ( main:0::plot:11 [ plot::y#4 plot::i#1 plot::line#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+1
  !:
  //SEG58 [23] (byte) plot::y#1 ← -- (byte) plot::y#4 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:0::plot:11 [ plot::i#1 plot::line#1 plot::y#1 ] ) -- zpby1=_dec_zpby1 
    dec y
  //SEG59 [24] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:0::plot:11 [ plot::i#1 plot::line#1 plot::y#1 ] ) -- zpby1_neq_0_then_la1 
    lda y
    bne b1
  //SEG60 plot::@return
  //SEG61 [25] return  [ ] ( main:0::plot:11 [ ] )
    rts
}
//SEG62 flip
flip: {
    .label c = 5
    .label r = 4
  //SEG63 [27] phi from flip to flip::@1 [phi:flip->flip::@1]
  //SEG64 [27] phi (byte) flip::r#4 = (byte) 16 [phi:flip->flip::@1#0] -- zpby1=coby1 
    lda #$10
    sta r
  //SEG65 [27] phi (byte) flip::dstIdx#5 = (byte) 15 [phi:flip->flip::@1#1] -- yby=coby1 
    ldy #$f
  //SEG66 [27] phi (byte) flip::srcIdx#3 = (byte) 0 [phi:flip->flip::@1#2] -- xby=coby1 
    ldx #0
  //SEG67 [27] phi from flip::@4 to flip::@1 [phi:flip::@4->flip::@1]
  //SEG68 [27] phi (byte) flip::r#4 = (byte) flip::r#1 [phi:flip::@4->flip::@1#0] -- register_copy 
  //SEG69 [27] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 [phi:flip::@4->flip::@1#1] -- register_copy 
  //SEG70 [27] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 [phi:flip::@4->flip::@1#2] -- register_copy 
  //SEG71 flip::@1
  b1:
  //SEG72 [28] phi from flip::@1 to flip::@2 [phi:flip::@1->flip::@2]
  //SEG73 [28] phi (byte) flip::c#2 = (byte) 16 [phi:flip::@1->flip::@2#0] -- zpby1=coby1 
    lda #$10
    sta c
  //SEG74 [28] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 [phi:flip::@1->flip::@2#1] -- register_copy 
  //SEG75 [28] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 [phi:flip::@1->flip::@2#2] -- register_copy 
  //SEG76 [28] phi from flip::@2 to flip::@2 [phi:flip::@2->flip::@2]
  //SEG77 [28] phi (byte) flip::c#2 = (byte) flip::c#1 [phi:flip::@2->flip::@2#0] -- register_copy 
  //SEG78 [28] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 [phi:flip::@2->flip::@2#1] -- register_copy 
  //SEG79 [28] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 [phi:flip::@2->flip::@2#2] -- register_copy 
  //SEG80 flip::@2
  b2:
  //SEG81 [29] (byte~) flip::$0 ← (const byte[256]) buffer1#0 *idx (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ] ) -- aby=cowo1_staridx_xby 
    lda buffer1,x
  //SEG82 [30] *((const byte[256]) buffer2#0 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ) -- cowo1_staridx_yby=aby 
    sta buffer2,y
  //SEG83 [31] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] ) -- xby=_inc_xby 
    inx
  //SEG84 [32] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ) -- yby=yby_plus_coby1 
    tya
    clc
    adc #$10
    tay
  //SEG85 [33] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ) -- zpby1=_dec_zpby1 
    dec c
  //SEG86 [34] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ) -- zpby1_neq_0_then_la1 
    lda c
    bne b2
  //SEG87 flip::@4
  //SEG88 [35] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] ) -- yby=_dec_yby 
    dey
  //SEG89 [36] (byte) flip::r#1 ← -- (byte) flip::r#4 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:0::flip:10 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ) -- zpby1=_dec_zpby1 
    dec r
  //SEG90 [37] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:0::flip:10 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ) -- zpby1_neq_0_then_la1 
    lda r
    bne b1
  //SEG91 [38] phi from flip::@4 to flip::@3 [phi:flip::@4->flip::@3]
  //SEG92 [38] phi (byte) flip::i#2 = (byte) 0 [phi:flip::@4->flip::@3#0] -- xby=coby1 
    ldx #0
  //SEG93 [38] phi from flip::@3 to flip::@3 [phi:flip::@3->flip::@3]
  //SEG94 [38] phi (byte) flip::i#2 = (byte) flip::i#1 [phi:flip::@3->flip::@3#0] -- register_copy 
  //SEG95 flip::@3
  b3:
  //SEG96 [39] (byte~) flip::$4 ← (const byte[256]) buffer2#0 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] ( main:0::flip:10 [ flip::i#2 flip::$4 ] ) -- aby=cowo1_staridx_xby 
    lda buffer2,x
  //SEG97 [40] *((const byte[256]) buffer1#0 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] ( main:0::flip:10 [ flip::i#2 ] ) -- cowo1_staridx_xby=aby 
    sta buffer1,x
  //SEG98 [41] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] ( main:0::flip:10 [ flip::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG99 [42] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] ( main:0::flip:10 [ flip::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG100 flip::@return
  //SEG101 [43] return  [ ] ( main:0::flip:10 [ ] )
    rts
}
//SEG102 prepare
prepare: {
  //SEG103 [45] phi from prepare to prepare::@1 [phi:prepare->prepare::@1]
  //SEG104 [45] phi (byte) prepare::i#2 = (byte) 0 [phi:prepare->prepare::@1#0] -- xby=coby1 
    ldx #0
  //SEG105 [45] phi from prepare::@1 to prepare::@1 [phi:prepare::@1->prepare::@1]
  //SEG106 [45] phi (byte) prepare::i#2 = (byte) prepare::i#1 [phi:prepare::@1->prepare::@1#0] -- register_copy 
  //SEG107 prepare::@1
  b1:
  //SEG108 [46] *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] ( main:0::prepare:2 [ prepare::i#2 ] ) -- cowo1_staridx_xby=xby 
    txa
    sta buffer1,x
  //SEG109 [47] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] ( main:0::prepare:2 [ prepare::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG110 [48] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] ( main:0::prepare:2 [ prepare::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG111 prepare::@return
  //SEG112 [49] return  [ ] ( main:0::prepare:2 [ ] )
    rts
}

Removing instruction jmp b3
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const buffer1 = $1000
  .const buffer2 = $1100
  .const RASTER = $d012
//SEG2 @begin
//SEG3 @4
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @4 to main [phi:@4->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] call prepare param-assignment [ ] ( main:0 [ ] )
  //SEG9 [44] phi from main to prepare [phi:main->prepare]
    jsr prepare
  //SEG10 [3] phi from main main::@11 to main::@3 [phi:main/main::@11->main::@3]
  b3_from_b11:
  //SEG11 [3] phi (byte) main::c#4 = (byte) 25 [phi:main/main::@11->main::@3#0] -- xby=coby1 
    ldx #$19
  //SEG12 [3] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  //SEG13 [3] phi from main::@6 to main::@3 [phi:main::@6->main::@3]
  //SEG14 [3] phi (byte) main::c#4 = (byte) main::c#1 [phi:main::@6->main::@3#0] -- register_copy 
  //SEG15 main::@3
  b3:
  //SEG16 [4] (byte~) main::$1 ← * (const byte*) RASTER#0 [ main::c#4 main::$1 ] ( main:0 [ main::c#4 main::$1 ] ) -- aby=_star_cowo1 
    lda RASTER
  //SEG17 [5] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#4 ] ( main:0 [ main::c#4 ] ) -- aby_neq_coby1_then_la1 
    cmp #$fe
    bne b3
  //SEG18 main::@4
  b4:
  //SEG19 [6] (byte~) main::$3 ← * (const byte*) RASTER#0 [ main::c#4 main::$3 ] ( main:0 [ main::c#4 main::$3 ] ) -- aby=_star_cowo1 
    lda RASTER
  //SEG20 [7] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#4 ] ( main:0 [ main::c#4 ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b4
  //SEG21 main::@6
  //SEG22 [8] (byte) main::c#1 ← -- (byte) main::c#4 [ main::c#1 ] ( main:0 [ main::c#1 ] ) -- xby=_dec_xby 
    dex
  //SEG23 [9] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] ( main:0 [ main::c#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG24 main::@7
  //SEG25 [10] call flip param-assignment [ ] ( main:0 [ ] )
  //SEG26 [26] phi from main::@7 to flip [phi:main::@7->flip]
    jsr flip
  //SEG27 main::@10
  //SEG28 [11] call plot param-assignment [ ] ( main:0 [ ] )
  //SEG29 [14] phi from main::@10 to plot [phi:main::@10->plot]
    jsr plot
  //SEG30 main::@11
  //SEG31 [12] if(true) goto main::@3 [ ] ( main:0 [ ] ) -- true_then_la1 
    jmp b3_from_b11
  //SEG32 main::@return
  //SEG33 [13] return  [ ] ( main:0 [ ] )
    rts
}
//SEG34 plot
plot: {
    .label line = 2
    .label y = 4
  //SEG35 [15] phi from plot to plot::@1 [phi:plot->plot::@1]
  //SEG36 [15] phi (byte) plot::y#4 = (byte) 16 [phi:plot->plot::@1#0] -- zpby1=coby1 
    lda #$10
    sta y
  //SEG37 [15] phi (byte*) plot::line#4 = (const byte[1000]) SCREEN#0+(byte) 5*(byte) 40+(byte) 12 [phi:plot->plot::@1#1] -- zpptrby1=cowo1 
    lda #<SCREEN+5*$28+$c
    sta line
    lda #>SCREEN+5*$28+$c
    sta line+1
  //SEG38 [15] phi (byte) plot::i#3 = (byte) 0 [phi:plot->plot::@1#2] -- xby=coby1 
    ldx #0
  //SEG39 [15] phi from plot::@3 to plot::@1 [phi:plot::@3->plot::@1]
  //SEG40 [15] phi (byte) plot::y#4 = (byte) plot::y#1 [phi:plot::@3->plot::@1#0] -- register_copy 
  //SEG41 [15] phi (byte*) plot::line#4 = (byte*) plot::line#1 [phi:plot::@3->plot::@1#1] -- register_copy 
  //SEG42 [15] phi (byte) plot::i#3 = (byte) plot::i#1 [phi:plot::@3->plot::@1#2] -- register_copy 
  //SEG43 plot::@1
  b1:
  //SEG44 [16] phi from plot::@1 to plot::@2 [phi:plot::@1->plot::@2]
  //SEG45 [16] phi (byte) plot::x#2 = (byte) 0 [phi:plot::@1->plot::@2#0] -- yby=coby1 
    ldy #0
  //SEG46 [16] phi (byte) plot::i#2 = (byte) plot::i#3 [phi:plot::@1->plot::@2#1] -- register_copy 
  //SEG47 [16] phi from plot::@2 to plot::@2 [phi:plot::@2->plot::@2]
  //SEG48 [16] phi (byte) plot::x#2 = (byte) plot::x#1 [phi:plot::@2->plot::@2#0] -- register_copy 
  //SEG49 [16] phi (byte) plot::i#2 = (byte) plot::i#1 [phi:plot::@2->plot::@2#1] -- register_copy 
  //SEG50 plot::@2
  b2:
  //SEG51 [17] (byte~) plot::$3 ← (const byte[256]) buffer1#0 *idx (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ] ) -- aby=cowo1_staridx_xby 
    lda buffer1,x
  //SEG52 [18] *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ) -- zpptrby1_staridx_yby=aby 
    sta (line),y
  //SEG53 [19] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] ) -- xby=_inc_xby 
    inx
  //SEG54 [20] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ) -- yby=_inc_yby 
    iny
  //SEG55 [21] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ) -- yby_lt_coby1_then_la1 
    cpy #$10
    bcc b2
  //SEG56 plot::@3
  //SEG57 [22] (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40 [ plot::y#4 plot::i#1 plot::line#1 ] ( main:0::plot:11 [ plot::y#4 plot::i#1 plot::line#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+1
  !:
  //SEG58 [23] (byte) plot::y#1 ← -- (byte) plot::y#4 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:0::plot:11 [ plot::i#1 plot::line#1 plot::y#1 ] ) -- zpby1=_dec_zpby1 
    dec y
  //SEG59 [24] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:0::plot:11 [ plot::i#1 plot::line#1 plot::y#1 ] ) -- zpby1_neq_0_then_la1 
    lda y
    bne b1
  //SEG60 plot::@return
  //SEG61 [25] return  [ ] ( main:0::plot:11 [ ] )
    rts
}
//SEG62 flip
flip: {
    .label c = 5
    .label r = 4
  //SEG63 [27] phi from flip to flip::@1 [phi:flip->flip::@1]
  //SEG64 [27] phi (byte) flip::r#4 = (byte) 16 [phi:flip->flip::@1#0] -- zpby1=coby1 
    lda #$10
    sta r
  //SEG65 [27] phi (byte) flip::dstIdx#5 = (byte) 15 [phi:flip->flip::@1#1] -- yby=coby1 
    ldy #$f
  //SEG66 [27] phi (byte) flip::srcIdx#3 = (byte) 0 [phi:flip->flip::@1#2] -- xby=coby1 
    ldx #0
  //SEG67 [27] phi from flip::@4 to flip::@1 [phi:flip::@4->flip::@1]
  //SEG68 [27] phi (byte) flip::r#4 = (byte) flip::r#1 [phi:flip::@4->flip::@1#0] -- register_copy 
  //SEG69 [27] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 [phi:flip::@4->flip::@1#1] -- register_copy 
  //SEG70 [27] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 [phi:flip::@4->flip::@1#2] -- register_copy 
  //SEG71 flip::@1
  b1:
  //SEG72 [28] phi from flip::@1 to flip::@2 [phi:flip::@1->flip::@2]
  //SEG73 [28] phi (byte) flip::c#2 = (byte) 16 [phi:flip::@1->flip::@2#0] -- zpby1=coby1 
    lda #$10
    sta c
  //SEG74 [28] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 [phi:flip::@1->flip::@2#1] -- register_copy 
  //SEG75 [28] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 [phi:flip::@1->flip::@2#2] -- register_copy 
  //SEG76 [28] phi from flip::@2 to flip::@2 [phi:flip::@2->flip::@2]
  //SEG77 [28] phi (byte) flip::c#2 = (byte) flip::c#1 [phi:flip::@2->flip::@2#0] -- register_copy 
  //SEG78 [28] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 [phi:flip::@2->flip::@2#1] -- register_copy 
  //SEG79 [28] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 [phi:flip::@2->flip::@2#2] -- register_copy 
  //SEG80 flip::@2
  b2:
  //SEG81 [29] (byte~) flip::$0 ← (const byte[256]) buffer1#0 *idx (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ] ) -- aby=cowo1_staridx_xby 
    lda buffer1,x
  //SEG82 [30] *((const byte[256]) buffer2#0 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ) -- cowo1_staridx_yby=aby 
    sta buffer2,y
  //SEG83 [31] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] ) -- xby=_inc_xby 
    inx
  //SEG84 [32] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ) -- yby=yby_plus_coby1 
    tya
    clc
    adc #$10
    tay
  //SEG85 [33] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ) -- zpby1=_dec_zpby1 
    dec c
  //SEG86 [34] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ) -- zpby1_neq_0_then_la1 
    lda c
    bne b2
  //SEG87 flip::@4
  //SEG88 [35] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] ) -- yby=_dec_yby 
    dey
  //SEG89 [36] (byte) flip::r#1 ← -- (byte) flip::r#4 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:0::flip:10 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ) -- zpby1=_dec_zpby1 
    dec r
  //SEG90 [37] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:0::flip:10 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ) -- zpby1_neq_0_then_la1 
    lda r
    bne b1
  //SEG91 [38] phi from flip::@4 to flip::@3 [phi:flip::@4->flip::@3]
  //SEG92 [38] phi (byte) flip::i#2 = (byte) 0 [phi:flip::@4->flip::@3#0] -- xby=coby1 
    ldx #0
  //SEG93 [38] phi from flip::@3 to flip::@3 [phi:flip::@3->flip::@3]
  //SEG94 [38] phi (byte) flip::i#2 = (byte) flip::i#1 [phi:flip::@3->flip::@3#0] -- register_copy 
  //SEG95 flip::@3
  b3:
  //SEG96 [39] (byte~) flip::$4 ← (const byte[256]) buffer2#0 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] ( main:0::flip:10 [ flip::i#2 flip::$4 ] ) -- aby=cowo1_staridx_xby 
    lda buffer2,x
  //SEG97 [40] *((const byte[256]) buffer1#0 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] ( main:0::flip:10 [ flip::i#2 ] ) -- cowo1_staridx_xby=aby 
    sta buffer1,x
  //SEG98 [41] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] ( main:0::flip:10 [ flip::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG99 [42] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] ( main:0::flip:10 [ flip::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG100 flip::@return
  //SEG101 [43] return  [ ] ( main:0::flip:10 [ ] )
    rts
}
//SEG102 prepare
prepare: {
  //SEG103 [45] phi from prepare to prepare::@1 [phi:prepare->prepare::@1]
  //SEG104 [45] phi (byte) prepare::i#2 = (byte) 0 [phi:prepare->prepare::@1#0] -- xby=coby1 
    ldx #0
  //SEG105 [45] phi from prepare::@1 to prepare::@1 [phi:prepare::@1->prepare::@1]
  //SEG106 [45] phi (byte) prepare::i#2 = (byte) prepare::i#1 [phi:prepare::@1->prepare::@1#0] -- register_copy 
  //SEG107 prepare::@1
  b1:
  //SEG108 [46] *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] ( main:0::prepare:2 [ prepare::i#2 ] ) -- cowo1_staridx_xby=xby 
    txa
    sta buffer1,x
  //SEG109 [47] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] ( main:0::prepare:2 [ prepare::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG110 [48] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] ( main:0::prepare:2 [ prepare::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG111 prepare::@return
  //SEG112 [49] return  [ ] ( main:0::prepare:2 [ ] )
    rts
}

FINAL SYMBOL TABLE
(label) @4
(label) @begin
(label) @end
(byte*) RASTER
(const byte*) RASTER#0 RASTER = (word) 53266
(byte[1000]) SCREEN
(const byte[1000]) SCREEN#0 SCREEN = (word) 1024
(byte[256]) buffer1
(const byte[256]) buffer1#0 buffer1 = (word) 4096
(byte[256]) buffer2
(const byte[256]) buffer2#0 buffer2 = (word) 4352
(void()) flip()
(byte~) flip::$0 reg byte a 2002.0
(byte~) flip::$4 reg byte a 202.0
(label) flip::@1
(label) flip::@2
(label) flip::@3
(label) flip::@4
(label) flip::@return
(byte) flip::c
(byte) flip::c#1 c zp ZP_BYTE:5 1501.5
(byte) flip::c#2 c zp ZP_BYTE:5 400.4
(byte) flip::dstIdx
(byte) flip::dstIdx#1 reg byte y 701.0
(byte) flip::dstIdx#2 reg byte y 67.33333333333333
(byte) flip::dstIdx#3 reg byte y 776.0
(byte) flip::dstIdx#5 reg byte y 202.0
(byte) flip::i
(byte) flip::i#1 reg byte x 151.5
(byte) flip::i#2 reg byte x 134.66666666666666
(byte) flip::r
(byte) flip::r#1 r zp ZP_BYTE:4 151.5
(byte) flip::r#4 r zp ZP_BYTE:4 22.444444444444443
(byte) flip::srcIdx
(byte) flip::srcIdx#1 reg byte x 300.42857142857144
(byte) flip::srcIdx#2 reg byte x 1034.6666666666667
(byte) flip::srcIdx#3 reg byte x 202.0
(void()) main()
(byte~) main::$1 reg byte a 2002.0
(byte~) main::$3 reg byte a 2002.0
(label) main::@10
(label) main::@11
(label) main::@3
(label) main::@4
(label) main::@6
(label) main::@7
(label) main::@return
(byte) main::c
(byte) main::c#1 reg byte x 151.5
(byte) main::c#4 reg byte x 40.4
(void()) plot()
(byte~) plot::$3 reg byte a 2002.0
(label) plot::@1
(label) plot::@2
(label) plot::@3
(label) plot::@return
(byte) plot::i
(byte) plot::i#1 reg byte x 350.5
(byte) plot::i#2 reg byte x 1034.6666666666667
(byte) plot::i#3 reg byte x 202.0
(byte*) plot::line
(byte*) plot::line#1 line zp ZP_PTR_BYTE:2 67.33333333333333
(byte*) plot::line#4 line zp ZP_PTR_BYTE:2 171.85714285714283
(byte) plot::x
(byte) plot::x#1 reg byte y 1501.5
(byte) plot::x#2 reg byte y 750.75
(byte) plot::y
(byte) plot::y#1 y zp ZP_BYTE:4 151.5
(byte) plot::y#4 y zp ZP_BYTE:4 25.25
(void()) prepare()
(label) prepare::@1
(label) prepare::@return
(byte) prepare::i
(byte) prepare::i#1 reg byte x 16.5
(byte) prepare::i#2 reg byte x 22.0

reg byte x [ main::c#4 main::c#1 ]
zp ZP_PTR_BYTE:2 [ plot::line#4 plot::line#1 ]
zp ZP_BYTE:4 [ plot::y#4 plot::y#1 flip::r#4 flip::r#1 ]
reg byte x [ plot::i#2 plot::i#3 plot::i#1 ]
reg byte y [ plot::x#2 plot::x#1 ]
reg byte x [ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ]
reg byte y [ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ]
zp ZP_BYTE:5 [ flip::c#2 flip::c#1 ]
reg byte x [ flip::i#2 flip::i#1 ]
reg byte x [ prepare::i#2 prepare::i#1 ]
reg byte a [ main::$1 ]
reg byte a [ main::$3 ]
reg byte a [ plot::$3 ]
reg byte a [ flip::$0 ]
reg byte a [ flip::$4 ]

FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const buffer1 = $1000
  .const buffer2 = $1100
  .const RASTER = $d012
//SEG2 @begin
//SEG3 @4
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @4 to main [phi:@4->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] call prepare param-assignment [ ] ( main:0 [ ] )
  //SEG9 [44] phi from main to prepare [phi:main->prepare]
    jsr prepare
  //SEG10 [3] phi from main main::@11 to main::@3 [phi:main/main::@11->main::@3]
  b3_from_b11:
  //SEG11 [3] phi (byte) main::c#4 = (byte) 25 [phi:main/main::@11->main::@3#0] -- xby=coby1 
    ldx #$19
  //SEG12 [3] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  //SEG13 [3] phi from main::@6 to main::@3 [phi:main::@6->main::@3]
  //SEG14 [3] phi (byte) main::c#4 = (byte) main::c#1 [phi:main::@6->main::@3#0] -- register_copy 
  //SEG15 main::@3
  b3:
  //SEG16 [4] (byte~) main::$1 ← * (const byte*) RASTER#0 [ main::c#4 main::$1 ] ( main:0 [ main::c#4 main::$1 ] ) -- aby=_star_cowo1 
    lda RASTER
  //SEG17 [5] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#4 ] ( main:0 [ main::c#4 ] ) -- aby_neq_coby1_then_la1 
    cmp #$fe
    bne b3
  //SEG18 main::@4
  b4:
  //SEG19 [6] (byte~) main::$3 ← * (const byte*) RASTER#0 [ main::c#4 main::$3 ] ( main:0 [ main::c#4 main::$3 ] ) -- aby=_star_cowo1 
    lda RASTER
  //SEG20 [7] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#4 ] ( main:0 [ main::c#4 ] ) -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b4
  //SEG21 main::@6
  //SEG22 [8] (byte) main::c#1 ← -- (byte) main::c#4 [ main::c#1 ] ( main:0 [ main::c#1 ] ) -- xby=_dec_xby 
    dex
  //SEG23 [9] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] ( main:0 [ main::c#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG24 main::@7
  //SEG25 [10] call flip param-assignment [ ] ( main:0 [ ] )
  //SEG26 [26] phi from main::@7 to flip [phi:main::@7->flip]
    jsr flip
  //SEG27 main::@10
  //SEG28 [11] call plot param-assignment [ ] ( main:0 [ ] )
  //SEG29 [14] phi from main::@10 to plot [phi:main::@10->plot]
    jsr plot
  //SEG30 main::@11
  //SEG31 [12] if(true) goto main::@3 [ ] ( main:0 [ ] ) -- true_then_la1 
    jmp b3_from_b11
  //SEG32 main::@return
  //SEG33 [13] return  [ ] ( main:0 [ ] )
    rts
}
//SEG34 plot
plot: {
    .label line = 2
    .label y = 4
  //SEG35 [15] phi from plot to plot::@1 [phi:plot->plot::@1]
  //SEG36 [15] phi (byte) plot::y#4 = (byte) 16 [phi:plot->plot::@1#0] -- zpby1=coby1 
    lda #$10
    sta y
  //SEG37 [15] phi (byte*) plot::line#4 = (const byte[1000]) SCREEN#0+(byte) 5*(byte) 40+(byte) 12 [phi:plot->plot::@1#1] -- zpptrby1=cowo1 
    lda #<SCREEN+5*$28+$c
    sta line
    lda #>SCREEN+5*$28+$c
    sta line+1
  //SEG38 [15] phi (byte) plot::i#3 = (byte) 0 [phi:plot->plot::@1#2] -- xby=coby1 
    ldx #0
  //SEG39 [15] phi from plot::@3 to plot::@1 [phi:plot::@3->plot::@1]
  //SEG40 [15] phi (byte) plot::y#4 = (byte) plot::y#1 [phi:plot::@3->plot::@1#0] -- register_copy 
  //SEG41 [15] phi (byte*) plot::line#4 = (byte*) plot::line#1 [phi:plot::@3->plot::@1#1] -- register_copy 
  //SEG42 [15] phi (byte) plot::i#3 = (byte) plot::i#1 [phi:plot::@3->plot::@1#2] -- register_copy 
  //SEG43 plot::@1
  b1:
  //SEG44 [16] phi from plot::@1 to plot::@2 [phi:plot::@1->plot::@2]
  //SEG45 [16] phi (byte) plot::x#2 = (byte) 0 [phi:plot::@1->plot::@2#0] -- yby=coby1 
    ldy #0
  //SEG46 [16] phi (byte) plot::i#2 = (byte) plot::i#3 [phi:plot::@1->plot::@2#1] -- register_copy 
  //SEG47 [16] phi from plot::@2 to plot::@2 [phi:plot::@2->plot::@2]
  //SEG48 [16] phi (byte) plot::x#2 = (byte) plot::x#1 [phi:plot::@2->plot::@2#0] -- register_copy 
  //SEG49 [16] phi (byte) plot::i#2 = (byte) plot::i#1 [phi:plot::@2->plot::@2#1] -- register_copy 
  //SEG50 plot::@2
  b2:
  //SEG51 [17] (byte~) plot::$3 ← (const byte[256]) buffer1#0 *idx (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 plot::$3 ] ) -- aby=cowo1_staridx_xby 
    lda buffer1,x
  //SEG52 [18] *((byte*) plot::line#4 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#2 plot::x#2 ] ) -- zpptrby1_staridx_yby=aby 
    sta (line),y
  //SEG53 [19] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#2 ] ) -- xby=_inc_xby 
    inx
  //SEG54 [20] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ) -- yby=_inc_yby 
    iny
  //SEG55 [21] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ( main:0::plot:11 [ plot::line#4 plot::y#4 plot::i#1 plot::x#1 ] ) -- yby_lt_coby1_then_la1 
    cpy #$10
    bcc b2
  //SEG56 plot::@3
  //SEG57 [22] (byte*) plot::line#1 ← (byte*) plot::line#4 + (byte) 40 [ plot::y#4 plot::i#1 plot::line#1 ] ( main:0::plot:11 [ plot::y#4 plot::i#1 plot::line#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+1
  !:
  //SEG58 [23] (byte) plot::y#1 ← -- (byte) plot::y#4 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:0::plot:11 [ plot::i#1 plot::line#1 plot::y#1 ] ) -- zpby1=_dec_zpby1 
    dec y
  //SEG59 [24] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] ( main:0::plot:11 [ plot::i#1 plot::line#1 plot::y#1 ] ) -- zpby1_neq_0_then_la1 
    lda y
    bne b1
  //SEG60 plot::@return
  //SEG61 [25] return  [ ] ( main:0::plot:11 [ ] )
    rts
}
//SEG62 flip
flip: {
    .label c = 5
    .label r = 4
  //SEG63 [27] phi from flip to flip::@1 [phi:flip->flip::@1]
  //SEG64 [27] phi (byte) flip::r#4 = (byte) 16 [phi:flip->flip::@1#0] -- zpby1=coby1 
    lda #$10
    sta r
  //SEG65 [27] phi (byte) flip::dstIdx#5 = (byte) 15 [phi:flip->flip::@1#1] -- yby=coby1 
    ldy #$f
  //SEG66 [27] phi (byte) flip::srcIdx#3 = (byte) 0 [phi:flip->flip::@1#2] -- xby=coby1 
    ldx #0
  //SEG67 [27] phi from flip::@4 to flip::@1 [phi:flip::@4->flip::@1]
  //SEG68 [27] phi (byte) flip::r#4 = (byte) flip::r#1 [phi:flip::@4->flip::@1#0] -- register_copy 
  //SEG69 [27] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 [phi:flip::@4->flip::@1#1] -- register_copy 
  //SEG70 [27] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 [phi:flip::@4->flip::@1#2] -- register_copy 
  //SEG71 flip::@1
  b1:
  //SEG72 [28] phi from flip::@1 to flip::@2 [phi:flip::@1->flip::@2]
  //SEG73 [28] phi (byte) flip::c#2 = (byte) 16 [phi:flip::@1->flip::@2#0] -- zpby1=coby1 
    lda #$10
    sta c
  //SEG74 [28] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 [phi:flip::@1->flip::@2#1] -- register_copy 
  //SEG75 [28] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 [phi:flip::@1->flip::@2#2] -- register_copy 
  //SEG76 [28] phi from flip::@2 to flip::@2 [phi:flip::@2->flip::@2]
  //SEG77 [28] phi (byte) flip::c#2 = (byte) flip::c#1 [phi:flip::@2->flip::@2#0] -- register_copy 
  //SEG78 [28] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 [phi:flip::@2->flip::@2#1] -- register_copy 
  //SEG79 [28] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 [phi:flip::@2->flip::@2#2] -- register_copy 
  //SEG80 flip::@2
  b2:
  //SEG81 [29] (byte~) flip::$0 ← (const byte[256]) buffer1#0 *idx (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::$0 ] ) -- aby=cowo1_staridx_xby 
    lda buffer1,x
  //SEG82 [30] *((const byte[256]) buffer2#0 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#2 flip::dstIdx#3 flip::c#2 ] ) -- cowo1_staridx_yby=aby 
    sta buffer2,y
  //SEG83 [31] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#3 flip::c#2 ] ) -- xby=_inc_xby 
    inx
  //SEG84 [32] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::c#2 flip::dstIdx#1 ] ) -- yby=yby_plus_coby1 
    tya
    clc
    adc #$10
    tay
  //SEG85 [33] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ) -- zpby1=_dec_zpby1 
    dec c
  //SEG86 [34] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#1 flip::c#1 ] ) -- zpby1_neq_0_then_la1 
    lda c
    bne b2
  //SEG87 flip::@4
  //SEG88 [35] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] ( main:0::flip:10 [ flip::r#4 flip::srcIdx#1 flip::dstIdx#2 ] ) -- yby=_dec_yby 
    dey
  //SEG89 [36] (byte) flip::r#1 ← -- (byte) flip::r#4 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:0::flip:10 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ) -- zpby1=_dec_zpby1 
    dec r
  //SEG90 [37] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ( main:0::flip:10 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] ) -- zpby1_neq_0_then_la1 
    lda r
    bne b1
  //SEG91 [38] phi from flip::@4 to flip::@3 [phi:flip::@4->flip::@3]
  //SEG92 [38] phi (byte) flip::i#2 = (byte) 0 [phi:flip::@4->flip::@3#0] -- xby=coby1 
    ldx #0
  //SEG93 [38] phi from flip::@3 to flip::@3 [phi:flip::@3->flip::@3]
  //SEG94 [38] phi (byte) flip::i#2 = (byte) flip::i#1 [phi:flip::@3->flip::@3#0] -- register_copy 
  //SEG95 flip::@3
  b3:
  //SEG96 [39] (byte~) flip::$4 ← (const byte[256]) buffer2#0 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] ( main:0::flip:10 [ flip::i#2 flip::$4 ] ) -- aby=cowo1_staridx_xby 
    lda buffer2,x
  //SEG97 [40] *((const byte[256]) buffer1#0 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] ( main:0::flip:10 [ flip::i#2 ] ) -- cowo1_staridx_xby=aby 
    sta buffer1,x
  //SEG98 [41] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] ( main:0::flip:10 [ flip::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG99 [42] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] ( main:0::flip:10 [ flip::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b3
  //SEG100 flip::@return
  //SEG101 [43] return  [ ] ( main:0::flip:10 [ ] )
    rts
}
//SEG102 prepare
prepare: {
  //SEG103 [45] phi from prepare to prepare::@1 [phi:prepare->prepare::@1]
  //SEG104 [45] phi (byte) prepare::i#2 = (byte) 0 [phi:prepare->prepare::@1#0] -- xby=coby1 
    ldx #0
  //SEG105 [45] phi from prepare::@1 to prepare::@1 [phi:prepare::@1->prepare::@1]
  //SEG106 [45] phi (byte) prepare::i#2 = (byte) prepare::i#1 [phi:prepare::@1->prepare::@1#0] -- register_copy 
  //SEG107 prepare::@1
  b1:
  //SEG108 [46] *((const byte[256]) buffer1#0 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] ( main:0::prepare:2 [ prepare::i#2 ] ) -- cowo1_staridx_xby=xby 
    txa
    sta buffer1,x
  //SEG109 [47] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] ( main:0::prepare:2 [ prepare::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG110 [48] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] ( main:0::prepare:2 [ prepare::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG111 prepare::@return
  //SEG112 [49] return  [ ] ( main:0::prepare:2 [ ] )
    rts
}

