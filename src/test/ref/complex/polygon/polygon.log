Resolved forward reference irq_bottom_1 to interrupt(KERNEL_MIN)(void()) irq_bottom_1()
Resolved forward reference irq_bottom_2 to interrupt(KERNEL_KEYBOARD)(void()) irq_bottom_2()
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Added struct type cast to parameter value list call printf_uchar (byte) main::p0_idx (struct printf_format_number){ (byte) 2, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (const byte) HEXADECIMAL } 
Added struct type cast to parameter value list call printf_ulong (dword) main::cyclecount (struct printf_format_number){ (byte) 6, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) DECIMAL } 
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call (byte~) $0 ← call toD018 (const nomodify byte*) SCREEN (const nomodify byte*) CANVAS2 
Inlined call (byte~) main::$15 ← call toD018 (const nomodify byte*) SCREEN (const nomodify byte*) CANVAS1 
Inlined call (byte~) main::$16 ← call toD018 (const nomodify byte*) SCREEN (const nomodify byte*) CANVAS2 
Inlined call (byte~) irq_bottom_1::$0 ← call toD018 (const nomodify byte*) CONSOLE (const nomodify byte*) PETSCII 
Inlined call call plot (byte) line::x (byte) line::y 
Inlined call call plot (byte) line::x (byte) line::y 
Inlined call call plot (byte) line::x (byte) line::y 
Inlined call call plot (byte) line::x (byte) line::y 
Eliminating unused variable with no statement (void~) main::$21

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  (byte) toupper::ch#1 ← phi( strupr::@2/(byte) toupper::ch#0 )
  (bool~) toupper::$0 ← (byte) toupper::ch#1 >= (byte) 'a'
  (bool~) toupper::$1 ← (byte) toupper::ch#1 <= (byte) 'z'
  (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
  if((bool~) toupper::$2) goto toupper::@1
  to:toupper::@2
toupper::@1: scope:[toupper]  from toupper
  (byte) toupper::ch#2 ← phi( toupper/(byte) toupper::ch#1 )
  (byte~) toupper::$3 ← (byte) toupper::ch#2 + (byte) 'A'-(byte) 'a'
  (byte) toupper::return#0 ← (byte~) toupper::$3
  to:toupper::@return
toupper::@2: scope:[toupper]  from toupper
  (byte) toupper::ch#3 ← phi( toupper/(byte) toupper::ch#1 )
  (byte) toupper::return#1 ← (byte) toupper::ch#3
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper::@1 toupper::@2
  (byte) toupper::return#4 ← phi( toupper::@1/(byte) toupper::return#0 toupper::@2/(byte) toupper::return#1 )
  (byte) toupper::return#2 ← (byte) toupper::return#4
  return 
  to:@return

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@3 cscroll::@4
  (word) memcpy::num#2 ← phi( cscroll::@3/(word) memcpy::num#0 cscroll::@4/(word) memcpy::num#1 )
  (void*) memcpy::destination#2 ← phi( cscroll::@3/(void*) memcpy::destination#0 cscroll::@4/(void*) memcpy::destination#1 )
  (void*) memcpy::source#2 ← phi( cscroll::@3/(void*) memcpy::source#0 cscroll::@4/(void*) memcpy::source#1 )
  (byte*) memcpy::src#0 ← ((byte*)) (void*) memcpy::source#2
  (byte*) memcpy::dst#0 ← ((byte*)) (void*) memcpy::destination#2
  (byte*~) memcpy::$2 ← (byte*)(void*) memcpy::source#2
  (byte*~) memcpy::$0 ← (byte*~) memcpy::$2 + (word) memcpy::num#2
  (byte*) memcpy::src_end#0 ← (byte*~) memcpy::$0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  (void*) memcpy::destination#4 ← phi( memcpy/(void*) memcpy::destination#2 memcpy::@2/(void*) memcpy::destination#5 )
  (byte*) memcpy::dst#3 ← phi( memcpy/(byte*) memcpy::dst#0 memcpy::@2/(byte*) memcpy::dst#1 )
  (byte*) memcpy::src_end#1 ← phi( memcpy/(byte*) memcpy::src_end#0 memcpy::@2/(byte*) memcpy::src_end#2 )
  (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#0 memcpy::@2/(byte*) memcpy::src#1 )
  (bool~) memcpy::$1 ← (byte*) memcpy::src#2 != (byte*) memcpy::src_end#1
  if((bool~) memcpy::$1) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#5 ← phi( memcpy::@1/(void*) memcpy::destination#4 )
  (byte*) memcpy::src_end#2 ← phi( memcpy::@1/(byte*) memcpy::src_end#1 )
  (byte*) memcpy::dst#2 ← phi( memcpy::@1/(byte*) memcpy::dst#3 )
  (byte*) memcpy::src#3 ← phi( memcpy::@1/(byte*) memcpy::src#2 )
  *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#3)
  (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#3 ← phi( memcpy::@1/(void*) memcpy::destination#4 )
  (void*) memcpy::return#0 ← (void*) memcpy::destination#3
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  (void*) memcpy::return#4 ← phi( memcpy::@3/(void*) memcpy::return#0 )
  (void*) memcpy::return#1 ← (void*) memcpy::return#4
  return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@5 cscroll::@6 main main::@13 main::@14 main::@18
  (byte) memset::c#9 ← phi( cscroll::@5/(byte) memset::c#0 cscroll::@6/(byte) memset::c#1 main/(byte) memset::c#2 main::@13/(byte) memset::c#3 main::@14/(byte) memset::c#4 main::@18/(byte) memset::c#5 )
  (void*) memset::str#8 ← phi( cscroll::@5/(void*) memset::str#0 cscroll::@6/(void*) memset::str#1 main/(void*) memset::str#2 main::@13/(void*) memset::str#3 main::@14/(void*) memset::str#4 main::@18/(void*) memset::str#5 )
  (word) memset::num#6 ← phi( cscroll::@5/(word) memset::num#0 cscroll::@6/(word) memset::num#1 main/(word) memset::num#2 main::@13/(word) memset::num#3 main::@14/(word) memset::num#4 main::@18/(word) memset::num#5 )
  (bool~) memset::$0 ← (word) memset::num#6 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#6 ← phi( memset/(void*) memset::str#8 memset::@3/(void*) memset::str#9 )
  (void*) memset::return#0 ← (void*) memset::str#6
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#8 ← phi( memset/(byte) memset::c#9 )
  (word) memset::num#7 ← phi( memset/(word) memset::num#6 )
  (void*) memset::str#7 ← phi( memset/(void*) memset::str#8 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#7
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#7
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#7
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#7 ← phi( memset::@2/(byte) memset::c#8 memset::@4/(byte) memset::c#6 )
  (void*) memset::str#9 ← phi( memset::@2/(void*) memset::str#7 memset::@4/(void*) memset::str#10 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#10 ← phi( memset::@3/(void*) memset::str#9 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#6 ← phi( memset::@3/(byte) memset::c#7 )
  *((byte*) memset::dst#3) ← (byte) memset::c#6
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#8 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#8
  return 
  to:@return

(byte*()) strupr((byte*) strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  (byte*) strupr::str#1 ← phi( printf_number_buffer::@11/(byte*) strupr::str#0 )
  (byte*) strupr::src#0 ← (byte*) strupr::str#1
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@4
  (byte*) strupr::str#3 ← phi( strupr/(byte*) strupr::str#1 strupr::@4/(byte*) strupr::str#4 )
  (byte*) strupr::src#2 ← phi( strupr/(byte*) strupr::src#0 strupr::@4/(byte*) strupr::src#1 )
  (bool~) strupr::$1 ← (number) 0 != *((byte*) strupr::src#2)
  if((bool~) strupr::$1) goto strupr::@2
  to:strupr::@3
strupr::@2: scope:[strupr]  from strupr::@1
  (byte*) strupr::str#5 ← phi( strupr::@1/(byte*) strupr::str#3 )
  (byte*) strupr::src#3 ← phi( strupr::@1/(byte*) strupr::src#2 )
  (byte) toupper::ch#0 ← *((byte*) strupr::src#3)
  call toupper 
  (byte) toupper::return#3 ← (byte) toupper::return#2
  to:strupr::@4
strupr::@4: scope:[strupr]  from strupr::@2
  (byte*) strupr::str#4 ← phi( strupr::@2/(byte*) strupr::str#5 )
  (byte*) strupr::src#4 ← phi( strupr::@2/(byte*) strupr::src#3 )
  (byte) toupper::return#5 ← phi( strupr::@2/(byte) toupper::return#3 )
  (byte~) strupr::$0 ← (byte) toupper::return#5
  *((byte*) strupr::src#4) ← (byte~) strupr::$0
  (byte*) strupr::src#1 ← ++ (byte*) strupr::src#4
  to:strupr::@1
strupr::@3: scope:[strupr]  from strupr::@1
  (byte*) strupr::str#2 ← phi( strupr::@1/(byte*) strupr::str#3 )
  (byte*) strupr::return#0 ← (byte*) strupr::str#2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@3
  (byte*) strupr::return#3 ← phi( strupr::@3/(byte*) strupr::return#0 )
  (byte*) strupr::return#1 ← (byte*) strupr::return#3
  return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  (byte*) strlen::str#4 ← phi( printf_number_buffer::@6/(byte*) strlen::str#1 )
  (word) strlen::len#0 ← (word) 0
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  (word) strlen::len#4 ← phi( strlen/(word) strlen::len#0 strlen::@2/(word) strlen::len#1 )
  (byte*) strlen::str#2 ← phi( strlen/(byte*) strlen::str#4 strlen::@2/(byte*) strlen::str#0 )
  (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#2)
  if((bool~) strlen::$0) goto strlen::@2
  to:strlen::@3
strlen::@2: scope:[strlen]  from strlen::@1
  (byte*) strlen::str#3 ← phi( strlen::@1/(byte*) strlen::str#2 )
  (word) strlen::len#2 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::len#1 ← ++ (word) strlen::len#2
  (byte*) strlen::str#0 ← ++ (byte*) strlen::str#3
  to:strlen::@1
strlen::@3: scope:[strlen]  from strlen::@1
  (word) strlen::len#3 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::return#0 ← (word) strlen::len#3
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@3
  (word) strlen::return#3 ← phi( strlen::@3/(word) strlen::return#0 )
  (word) strlen::return#1 ← (word) strlen::return#3
  return 
  to:@return

(dword()) clock()
clock: scope:[clock]  from main::@12
  (number~) clock::$0 ← (number) $ffffffff - *((const nomodify dword*) CIA2_TIMER_AB)
  (dword) clock::return#0 ← (number~) clock::$0
  to:clock::@return
clock::@return: scope:[clock]  from clock
  (dword) clock::return#3 ← phi( clock/(dword) clock::return#0 )
  (dword) clock::return#1 ← (dword) clock::return#3
  return 
  to:@return

(void()) clock_start()
clock_start: scope:[clock_start]  from main::@8
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_STOP|(const nomodify byte) CIA_TIMER_CONTROL_CONTINUOUS|(const nomodify byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_STOP|(const nomodify byte) CIA_TIMER_CONTROL_CONTINUOUS|(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  *((const nomodify dword*) CIA2_TIMER_AB) ← (number) $ffffffff
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START|(const nomodify byte) CIA_TIMER_CONTROL_CONTINUOUS|(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START|(const nomodify byte) CIA_TIMER_CONTROL_CONTINUOUS|(const nomodify byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES
  to:clock_start::@return
clock_start::@return: scope:[clock_start]  from clock_start
  return 
  to:@return

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@3
  (byte*) uctoa::buffer#21 ← phi( printf_uchar::@3/(byte*) uctoa::buffer#5 )
  (byte) uctoa::value#12 ← phi( printf_uchar::@3/(byte) uctoa::value#1 )
  (byte) uctoa::radix#1 ← phi( printf_uchar::@3/(byte) uctoa::radix#0 )
  (byte) uctoa::max_digits#0 ← (byte) 0
  (byte*) uctoa::digit_values#0 ← (byte*) 0
  (bool~) uctoa::$0 ← (byte) uctoa::radix#1 == (const byte) DECIMAL
  if((bool~) uctoa::$0) goto uctoa::@1
  to:uctoa::@6
uctoa::@1: scope:[uctoa]  from uctoa
  (byte*) uctoa::buffer#17 ← phi( uctoa/(byte*) uctoa::buffer#21 )
  (byte) uctoa::value#8 ← phi( uctoa/(byte) uctoa::value#12 )
  (byte) uctoa::max_digits#1 ← (number) 3
  (byte*) uctoa::digit_values#1 ← (const byte*) RADIX_DECIMAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@6: scope:[uctoa]  from uctoa
  (byte) uctoa::value#13 ← phi( uctoa/(byte) uctoa::value#12 )
  (byte*) uctoa::buffer#16 ← phi( uctoa/(byte*) uctoa::buffer#21 )
  (byte) uctoa::radix#2 ← phi( uctoa/(byte) uctoa::radix#1 )
  (bool~) uctoa::$1 ← (byte) uctoa::radix#2 == (const byte) HEXADECIMAL
  if((bool~) uctoa::$1) goto uctoa::@2
  to:uctoa::@7
uctoa::@2: scope:[uctoa]  from uctoa::@6
  (byte*) uctoa::buffer#18 ← phi( uctoa::@6/(byte*) uctoa::buffer#16 )
  (byte) uctoa::value#9 ← phi( uctoa::@6/(byte) uctoa::value#13 )
  (byte) uctoa::max_digits#2 ← (number) 2
  (byte*) uctoa::digit_values#2 ← (const byte*) RADIX_HEXADECIMAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@7: scope:[uctoa]  from uctoa::@6
  (byte) uctoa::value#14 ← phi( uctoa::@6/(byte) uctoa::value#13 )
  (byte*) uctoa::buffer#13 ← phi( uctoa::@6/(byte*) uctoa::buffer#16 )
  (byte) uctoa::radix#3 ← phi( uctoa::@6/(byte) uctoa::radix#2 )
  (bool~) uctoa::$2 ← (byte) uctoa::radix#3 == (const byte) OCTAL
  if((bool~) uctoa::$2) goto uctoa::@3
  to:uctoa::@8
uctoa::@3: scope:[uctoa]  from uctoa::@7
  (byte*) uctoa::buffer#19 ← phi( uctoa::@7/(byte*) uctoa::buffer#13 )
  (byte) uctoa::value#10 ← phi( uctoa::@7/(byte) uctoa::value#14 )
  (byte) uctoa::max_digits#3 ← (number) 3
  (byte*) uctoa::digit_values#3 ← (const byte*) RADIX_OCTAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@8: scope:[uctoa]  from uctoa::@7
  (byte) uctoa::value#15 ← phi( uctoa::@7/(byte) uctoa::value#14 )
  (byte*) uctoa::buffer#10 ← phi( uctoa::@7/(byte*) uctoa::buffer#13 )
  (byte) uctoa::radix#4 ← phi( uctoa::@7/(byte) uctoa::radix#3 )
  (bool~) uctoa::$3 ← (byte) uctoa::radix#4 == (const byte) BINARY
  if((bool~) uctoa::$3) goto uctoa::@4
  to:uctoa::@9
uctoa::@4: scope:[uctoa]  from uctoa::@8
  (byte*) uctoa::buffer#20 ← phi( uctoa::@8/(byte*) uctoa::buffer#10 )
  (byte) uctoa::value#11 ← phi( uctoa::@8/(byte) uctoa::value#15 )
  (byte) uctoa::max_digits#4 ← (number) 8
  (byte*) uctoa::digit_values#4 ← (const byte*) RADIX_BINARY_VALUES_CHAR
  to:uctoa::@5
uctoa::@9: scope:[uctoa]  from uctoa::@8
  (byte*) uctoa::buffer#6 ← phi( uctoa::@8/(byte*) uctoa::buffer#10 )
  *((byte*) uctoa::buffer#6) ← (byte) 'e'
  (byte*) uctoa::buffer#0 ← ++ (byte*) uctoa::buffer#6
  *((byte*) uctoa::buffer#0) ← (byte) 'r'
  (byte*) uctoa::buffer#1 ← ++ (byte*) uctoa::buffer#0
  *((byte*) uctoa::buffer#1) ← (byte) 'r'
  (byte*) uctoa::buffer#2 ← ++ (byte*) uctoa::buffer#1
  *((byte*) uctoa::buffer#2) ← (number) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@12 uctoa::@9
  return 
  to:@return
uctoa::@5: scope:[uctoa]  from uctoa::@1 uctoa::@2 uctoa::@3 uctoa::@4
  (byte*) uctoa::buffer#15 ← phi( uctoa::@1/(byte*) uctoa::buffer#17 uctoa::@2/(byte*) uctoa::buffer#18 uctoa::@3/(byte*) uctoa::buffer#19 uctoa::@4/(byte*) uctoa::buffer#20 )
  (byte) uctoa::value#7 ← phi( uctoa::@1/(byte) uctoa::value#8 uctoa::@2/(byte) uctoa::value#9 uctoa::@3/(byte) uctoa::value#10 uctoa::@4/(byte) uctoa::value#11 )
  (byte*) uctoa::digit_values#8 ← phi( uctoa::@1/(byte*) uctoa::digit_values#1 uctoa::@2/(byte*) uctoa::digit_values#2 uctoa::@3/(byte*) uctoa::digit_values#3 uctoa::@4/(byte*) uctoa::digit_values#4 )
  (byte) uctoa::max_digits#7 ← phi( uctoa::@1/(byte) uctoa::max_digits#1 uctoa::@2/(byte) uctoa::max_digits#2 uctoa::@3/(byte) uctoa::max_digits#3 uctoa::@4/(byte) uctoa::max_digits#4 )
  (byte) uctoa::started#0 ← (byte) 0
  (byte) uctoa::digit#0 ← (byte) 0
  to:uctoa::@10
uctoa::@10: scope:[uctoa]  from uctoa::@13 uctoa::@5
  (byte*) uctoa::buffer#11 ← phi( uctoa::@13/(byte*) uctoa::buffer#14 uctoa::@5/(byte*) uctoa::buffer#15 )
  (byte) uctoa::started#3 ← phi( uctoa::@13/(byte) uctoa::started#4 uctoa::@5/(byte) uctoa::started#0 )
  (byte) uctoa::value#5 ← phi( uctoa::@13/(byte) uctoa::value#6 uctoa::@5/(byte) uctoa::value#7 )
  (byte*) uctoa::digit_values#6 ← phi( uctoa::@13/(byte*) uctoa::digit_values#7 uctoa::@5/(byte*) uctoa::digit_values#8 )
  (byte) uctoa::digit#2 ← phi( uctoa::@13/(byte) uctoa::digit#1 uctoa::@5/(byte) uctoa::digit#0 )
  (byte) uctoa::max_digits#5 ← phi( uctoa::@13/(byte) uctoa::max_digits#6 uctoa::@5/(byte) uctoa::max_digits#7 )
  (number~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (number) 1
  (bool~) uctoa::$5 ← (byte) uctoa::digit#2 < (number~) uctoa::$4
  if((bool~) uctoa::$5) goto uctoa::@11
  to:uctoa::@12
uctoa::@11: scope:[uctoa]  from uctoa::@10
  (byte) uctoa::max_digits#8 ← phi( uctoa::@10/(byte) uctoa::max_digits#5 )
  (byte*) uctoa::buffer#12 ← phi( uctoa::@10/(byte*) uctoa::buffer#11 )
  (byte) uctoa::started#2 ← phi( uctoa::@10/(byte) uctoa::started#3 )
  (byte) uctoa::value#2 ← phi( uctoa::@10/(byte) uctoa::value#5 )
  (byte) uctoa::digit#3 ← phi( uctoa::@10/(byte) uctoa::digit#2 )
  (byte*) uctoa::digit_values#5 ← phi( uctoa::@10/(byte*) uctoa::digit_values#6 )
  (byte) uctoa::digit_value#0 ← *((byte*) uctoa::digit_values#5 + (byte) uctoa::digit#3)
  (bool~) uctoa::$6 ← (byte) uctoa::value#2 >= (byte) uctoa::digit_value#0
  (bool~) uctoa::$7 ← (byte) uctoa::started#2 || (bool~) uctoa::$6
  (bool~) uctoa::$8 ← ! (bool~) uctoa::$7
  if((bool~) uctoa::$8) goto uctoa::@13
  to:uctoa::@14
uctoa::@12: scope:[uctoa]  from uctoa::@10
  (byte*) uctoa::buffer#7 ← phi( uctoa::@10/(byte*) uctoa::buffer#11 )
  (byte) uctoa::value#3 ← phi( uctoa::@10/(byte) uctoa::value#5 )
  (byte~) uctoa::$10 ← (byte)(byte) uctoa::value#3
  *((byte*) uctoa::buffer#7) ← *((const byte*) DIGITS + (byte~) uctoa::$10)
  (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#7
  *((byte*) uctoa::buffer#3) ← (number) 0
  to:uctoa::@return
uctoa::@13: scope:[uctoa]  from uctoa::@11 uctoa::@15
  (byte*) uctoa::buffer#14 ← phi( uctoa::@11/(byte*) uctoa::buffer#12 uctoa::@15/(byte*) uctoa::buffer#4 )
  (byte) uctoa::started#4 ← phi( uctoa::@11/(byte) uctoa::started#2 uctoa::@15/(byte) uctoa::started#1 )
  (byte) uctoa::value#6 ← phi( uctoa::@11/(byte) uctoa::value#2 uctoa::@15/(byte) uctoa::value#0 )
  (byte*) uctoa::digit_values#7 ← phi( uctoa::@11/(byte*) uctoa::digit_values#5 uctoa::@15/(byte*) uctoa::digit_values#9 )
  (byte) uctoa::max_digits#6 ← phi( uctoa::@11/(byte) uctoa::max_digits#8 uctoa::@15/(byte) uctoa::max_digits#9 )
  (byte) uctoa::digit#4 ← phi( uctoa::@11/(byte) uctoa::digit#3 uctoa::@15/(byte) uctoa::digit#5 )
  (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#4
  to:uctoa::@10
uctoa::@14: scope:[uctoa]  from uctoa::@11
  (byte*) uctoa::digit_values#10 ← phi( uctoa::@11/(byte*) uctoa::digit_values#5 )
  (byte) uctoa::max_digits#10 ← phi( uctoa::@11/(byte) uctoa::max_digits#8 )
  (byte) uctoa::digit#6 ← phi( uctoa::@11/(byte) uctoa::digit#3 )
  (byte) uctoa::digit_value#1 ← phi( uctoa::@11/(byte) uctoa::digit_value#0 )
  (byte) uctoa::value#4 ← phi( uctoa::@11/(byte) uctoa::value#2 )
  (byte*) uctoa::buffer#8 ← phi( uctoa::@11/(byte*) uctoa::buffer#12 )
  (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#8
  (byte) uctoa_append::value#0 ← (byte) uctoa::value#4
  (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#1
  call uctoa_append 
  (byte) uctoa_append::return#0 ← (byte) uctoa_append::return#2
  to:uctoa::@15
uctoa::@15: scope:[uctoa]  from uctoa::@14
  (byte*) uctoa::digit_values#9 ← phi( uctoa::@14/(byte*) uctoa::digit_values#10 )
  (byte) uctoa::max_digits#9 ← phi( uctoa::@14/(byte) uctoa::max_digits#10 )
  (byte) uctoa::digit#5 ← phi( uctoa::@14/(byte) uctoa::digit#6 )
  (byte*) uctoa::buffer#9 ← phi( uctoa::@14/(byte*) uctoa::buffer#8 )
  (byte) uctoa_append::return#3 ← phi( uctoa::@14/(byte) uctoa_append::return#0 )
  (byte~) uctoa::$9 ← (byte) uctoa_append::return#3
  (byte) uctoa::value#0 ← (byte~) uctoa::$9
  (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#9
  (byte) uctoa::started#1 ← (number) 1
  to:uctoa::@13

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@14
  (byte*) uctoa_append::buffer#3 ← phi( uctoa::@14/(byte*) uctoa_append::buffer#0 )
  (byte) uctoa_append::sub#3 ← phi( uctoa::@14/(byte) uctoa_append::sub#0 )
  (byte) uctoa_append::value#5 ← phi( uctoa::@14/(byte) uctoa_append::value#0 )
  (byte) uctoa_append::digit#0 ← (byte) 0
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  (byte*) uctoa_append::buffer#2 ← phi( uctoa_append/(byte*) uctoa_append::buffer#3 uctoa_append::@2/(byte*) uctoa_append::buffer#4 )
  (byte) uctoa_append::digit#4 ← phi( uctoa_append/(byte) uctoa_append::digit#0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  (byte) uctoa_append::sub#1 ← phi( uctoa_append/(byte) uctoa_append::sub#3 uctoa_append::@2/(byte) uctoa_append::sub#2 )
  (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#5 uctoa_append::@2/(byte) uctoa_append::value#1 )
  (bool~) uctoa_append::$0 ← (byte) uctoa_append::value#2 >= (byte) uctoa_append::sub#1
  if((bool~) uctoa_append::$0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  (byte*) uctoa_append::buffer#4 ← phi( uctoa_append::@1/(byte*) uctoa_append::buffer#2 )
  (byte) uctoa_append::sub#2 ← phi( uctoa_append::@1/(byte) uctoa_append::sub#1 )
  (byte) uctoa_append::value#3 ← phi( uctoa_append::@1/(byte) uctoa_append::value#2 )
  (byte) uctoa_append::digit#2 ← phi( uctoa_append::@1/(byte) uctoa_append::digit#4 )
  (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#3 - (byte) uctoa_append::sub#2
  to:uctoa_append::@1
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  (byte) uctoa_append::value#4 ← phi( uctoa_append::@1/(byte) uctoa_append::value#2 )
  (byte*) uctoa_append::buffer#1 ← phi( uctoa_append::@1/(byte*) uctoa_append::buffer#2 )
  (byte) uctoa_append::digit#3 ← phi( uctoa_append::@1/(byte) uctoa_append::digit#4 )
  *((byte*) uctoa_append::buffer#1) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#3)
  (byte) uctoa_append::return#1 ← (byte) uctoa_append::value#4
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  (byte) uctoa_append::return#4 ← phi( uctoa_append::@3/(byte) uctoa_append::return#1 )
  (byte) uctoa_append::return#2 ← (byte) uctoa_append::return#4
  return 
  to:@return

(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
ultoa: scope:[ultoa]  from printf_ulong::@3
  (byte*) ultoa::buffer#21 ← phi( printf_ulong::@3/(byte*) ultoa::buffer#5 )
  (dword) ultoa::value#12 ← phi( printf_ulong::@3/(dword) ultoa::value#1 )
  (byte) ultoa::radix#1 ← phi( printf_ulong::@3/(byte) ultoa::radix#0 )
  (byte) ultoa::max_digits#0 ← (byte) 0
  (dword*) ultoa::digit_values#0 ← (dword*) 0
  (bool~) ultoa::$0 ← (byte) ultoa::radix#1 == (const byte) DECIMAL
  if((bool~) ultoa::$0) goto ultoa::@1
  to:ultoa::@6
ultoa::@1: scope:[ultoa]  from ultoa
  (byte*) ultoa::buffer#17 ← phi( ultoa/(byte*) ultoa::buffer#21 )
  (dword) ultoa::value#8 ← phi( ultoa/(dword) ultoa::value#12 )
  (byte) ultoa::max_digits#1 ← (number) $a
  (dword*) ultoa::digit_values#1 ← (const dword*) RADIX_DECIMAL_VALUES_LONG
  to:ultoa::@5
ultoa::@6: scope:[ultoa]  from ultoa
  (dword) ultoa::value#13 ← phi( ultoa/(dword) ultoa::value#12 )
  (byte*) ultoa::buffer#16 ← phi( ultoa/(byte*) ultoa::buffer#21 )
  (byte) ultoa::radix#2 ← phi( ultoa/(byte) ultoa::radix#1 )
  (bool~) ultoa::$1 ← (byte) ultoa::radix#2 == (const byte) HEXADECIMAL
  if((bool~) ultoa::$1) goto ultoa::@2
  to:ultoa::@7
ultoa::@2: scope:[ultoa]  from ultoa::@6
  (byte*) ultoa::buffer#18 ← phi( ultoa::@6/(byte*) ultoa::buffer#16 )
  (dword) ultoa::value#9 ← phi( ultoa::@6/(dword) ultoa::value#13 )
  (byte) ultoa::max_digits#2 ← (number) 8
  (dword*) ultoa::digit_values#2 ← (const dword*) RADIX_HEXADECIMAL_VALUES_LONG
  to:ultoa::@5
ultoa::@7: scope:[ultoa]  from ultoa::@6
  (dword) ultoa::value#14 ← phi( ultoa::@6/(dword) ultoa::value#13 )
  (byte*) ultoa::buffer#13 ← phi( ultoa::@6/(byte*) ultoa::buffer#16 )
  (byte) ultoa::radix#3 ← phi( ultoa::@6/(byte) ultoa::radix#2 )
  (bool~) ultoa::$2 ← (byte) ultoa::radix#3 == (const byte) OCTAL
  if((bool~) ultoa::$2) goto ultoa::@3
  to:ultoa::@8
ultoa::@3: scope:[ultoa]  from ultoa::@7
  (byte*) ultoa::buffer#19 ← phi( ultoa::@7/(byte*) ultoa::buffer#13 )
  (dword) ultoa::value#10 ← phi( ultoa::@7/(dword) ultoa::value#14 )
  (byte) ultoa::max_digits#3 ← (number) $b
  (dword*) ultoa::digit_values#3 ← (const dword*) RADIX_OCTAL_VALUES_LONG
  to:ultoa::@5
ultoa::@8: scope:[ultoa]  from ultoa::@7
  (dword) ultoa::value#15 ← phi( ultoa::@7/(dword) ultoa::value#14 )
  (byte*) ultoa::buffer#10 ← phi( ultoa::@7/(byte*) ultoa::buffer#13 )
  (byte) ultoa::radix#4 ← phi( ultoa::@7/(byte) ultoa::radix#3 )
  (bool~) ultoa::$3 ← (byte) ultoa::radix#4 == (const byte) BINARY
  if((bool~) ultoa::$3) goto ultoa::@4
  to:ultoa::@9
ultoa::@4: scope:[ultoa]  from ultoa::@8
  (byte*) ultoa::buffer#20 ← phi( ultoa::@8/(byte*) ultoa::buffer#10 )
  (dword) ultoa::value#11 ← phi( ultoa::@8/(dword) ultoa::value#15 )
  (byte) ultoa::max_digits#4 ← (number) $20
  (dword*) ultoa::digit_values#4 ← (const dword*) RADIX_BINARY_VALUES_LONG
  to:ultoa::@5
ultoa::@9: scope:[ultoa]  from ultoa::@8
  (byte*) ultoa::buffer#6 ← phi( ultoa::@8/(byte*) ultoa::buffer#10 )
  *((byte*) ultoa::buffer#6) ← (byte) 'e'
  (byte*) ultoa::buffer#0 ← ++ (byte*) ultoa::buffer#6
  *((byte*) ultoa::buffer#0) ← (byte) 'r'
  (byte*) ultoa::buffer#1 ← ++ (byte*) ultoa::buffer#0
  *((byte*) ultoa::buffer#1) ← (byte) 'r'
  (byte*) ultoa::buffer#2 ← ++ (byte*) ultoa::buffer#1
  *((byte*) ultoa::buffer#2) ← (number) 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@12 ultoa::@9
  return 
  to:@return
ultoa::@5: scope:[ultoa]  from ultoa::@1 ultoa::@2 ultoa::@3 ultoa::@4
  (byte*) ultoa::buffer#15 ← phi( ultoa::@1/(byte*) ultoa::buffer#17 ultoa::@2/(byte*) ultoa::buffer#18 ultoa::@3/(byte*) ultoa::buffer#19 ultoa::@4/(byte*) ultoa::buffer#20 )
  (dword) ultoa::value#7 ← phi( ultoa::@1/(dword) ultoa::value#8 ultoa::@2/(dword) ultoa::value#9 ultoa::@3/(dword) ultoa::value#10 ultoa::@4/(dword) ultoa::value#11 )
  (dword*) ultoa::digit_values#8 ← phi( ultoa::@1/(dword*) ultoa::digit_values#1 ultoa::@2/(dword*) ultoa::digit_values#2 ultoa::@3/(dword*) ultoa::digit_values#3 ultoa::@4/(dword*) ultoa::digit_values#4 )
  (byte) ultoa::max_digits#7 ← phi( ultoa::@1/(byte) ultoa::max_digits#1 ultoa::@2/(byte) ultoa::max_digits#2 ultoa::@3/(byte) ultoa::max_digits#3 ultoa::@4/(byte) ultoa::max_digits#4 )
  (byte) ultoa::started#0 ← (byte) 0
  (byte) ultoa::digit#0 ← (byte) 0
  to:ultoa::@10
ultoa::@10: scope:[ultoa]  from ultoa::@13 ultoa::@5
  (byte*) ultoa::buffer#11 ← phi( ultoa::@13/(byte*) ultoa::buffer#14 ultoa::@5/(byte*) ultoa::buffer#15 )
  (byte) ultoa::started#3 ← phi( ultoa::@13/(byte) ultoa::started#4 ultoa::@5/(byte) ultoa::started#0 )
  (dword) ultoa::value#5 ← phi( ultoa::@13/(dword) ultoa::value#6 ultoa::@5/(dword) ultoa::value#7 )
  (dword*) ultoa::digit_values#6 ← phi( ultoa::@13/(dword*) ultoa::digit_values#7 ultoa::@5/(dword*) ultoa::digit_values#8 )
  (byte) ultoa::digit#2 ← phi( ultoa::@13/(byte) ultoa::digit#1 ultoa::@5/(byte) ultoa::digit#0 )
  (byte) ultoa::max_digits#5 ← phi( ultoa::@13/(byte) ultoa::max_digits#6 ultoa::@5/(byte) ultoa::max_digits#7 )
  (number~) ultoa::$4 ← (byte) ultoa::max_digits#5 - (number) 1
  (bool~) ultoa::$5 ← (byte) ultoa::digit#2 < (number~) ultoa::$4
  if((bool~) ultoa::$5) goto ultoa::@11
  to:ultoa::@12
ultoa::@11: scope:[ultoa]  from ultoa::@10
  (byte) ultoa::max_digits#8 ← phi( ultoa::@10/(byte) ultoa::max_digits#5 )
  (byte*) ultoa::buffer#12 ← phi( ultoa::@10/(byte*) ultoa::buffer#11 )
  (byte) ultoa::started#2 ← phi( ultoa::@10/(byte) ultoa::started#3 )
  (dword) ultoa::value#2 ← phi( ultoa::@10/(dword) ultoa::value#5 )
  (dword*) ultoa::digit_values#5 ← phi( ultoa::@10/(dword*) ultoa::digit_values#6 )
  (byte) ultoa::digit#3 ← phi( ultoa::@10/(byte) ultoa::digit#2 )
  (byte~) ultoa::$10 ← (byte) ultoa::digit#3 * (const byte) SIZEOF_DWORD
  (dword) ultoa::digit_value#0 ← *((dword*) ultoa::digit_values#5 + (byte~) ultoa::$10)
  (bool~) ultoa::$6 ← (dword) ultoa::value#2 >= (dword) ultoa::digit_value#0
  (bool~) ultoa::$7 ← (byte) ultoa::started#2 || (bool~) ultoa::$6
  (bool~) ultoa::$8 ← ! (bool~) ultoa::$7
  if((bool~) ultoa::$8) goto ultoa::@13
  to:ultoa::@14
ultoa::@12: scope:[ultoa]  from ultoa::@10
  (byte*) ultoa::buffer#7 ← phi( ultoa::@10/(byte*) ultoa::buffer#11 )
  (dword) ultoa::value#3 ← phi( ultoa::@10/(dword) ultoa::value#5 )
  (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#3
  *((byte*) ultoa::buffer#7) ← *((const byte*) DIGITS + (byte~) ultoa::$11)
  (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#7
  *((byte*) ultoa::buffer#3) ← (number) 0
  to:ultoa::@return
ultoa::@13: scope:[ultoa]  from ultoa::@11 ultoa::@15
  (byte*) ultoa::buffer#14 ← phi( ultoa::@11/(byte*) ultoa::buffer#12 ultoa::@15/(byte*) ultoa::buffer#4 )
  (byte) ultoa::started#4 ← phi( ultoa::@11/(byte) ultoa::started#2 ultoa::@15/(byte) ultoa::started#1 )
  (dword) ultoa::value#6 ← phi( ultoa::@11/(dword) ultoa::value#2 ultoa::@15/(dword) ultoa::value#0 )
  (dword*) ultoa::digit_values#7 ← phi( ultoa::@11/(dword*) ultoa::digit_values#5 ultoa::@15/(dword*) ultoa::digit_values#9 )
  (byte) ultoa::max_digits#6 ← phi( ultoa::@11/(byte) ultoa::max_digits#8 ultoa::@15/(byte) ultoa::max_digits#9 )
  (byte) ultoa::digit#4 ← phi( ultoa::@11/(byte) ultoa::digit#3 ultoa::@15/(byte) ultoa::digit#5 )
  (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#4
  to:ultoa::@10
ultoa::@14: scope:[ultoa]  from ultoa::@11
  (dword*) ultoa::digit_values#10 ← phi( ultoa::@11/(dword*) ultoa::digit_values#5 )
  (byte) ultoa::max_digits#10 ← phi( ultoa::@11/(byte) ultoa::max_digits#8 )
  (byte) ultoa::digit#6 ← phi( ultoa::@11/(byte) ultoa::digit#3 )
  (dword) ultoa::digit_value#1 ← phi( ultoa::@11/(dword) ultoa::digit_value#0 )
  (dword) ultoa::value#4 ← phi( ultoa::@11/(dword) ultoa::value#2 )
  (byte*) ultoa::buffer#8 ← phi( ultoa::@11/(byte*) ultoa::buffer#12 )
  (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#8
  (dword) ultoa_append::value#0 ← (dword) ultoa::value#4
  (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#1
  call ultoa_append 
  (dword) ultoa_append::return#0 ← (dword) ultoa_append::return#2
  to:ultoa::@15
ultoa::@15: scope:[ultoa]  from ultoa::@14
  (dword*) ultoa::digit_values#9 ← phi( ultoa::@14/(dword*) ultoa::digit_values#10 )
  (byte) ultoa::max_digits#9 ← phi( ultoa::@14/(byte) ultoa::max_digits#10 )
  (byte) ultoa::digit#5 ← phi( ultoa::@14/(byte) ultoa::digit#6 )
  (byte*) ultoa::buffer#9 ← phi( ultoa::@14/(byte*) ultoa::buffer#8 )
  (dword) ultoa_append::return#3 ← phi( ultoa::@14/(dword) ultoa_append::return#0 )
  (dword~) ultoa::$9 ← (dword) ultoa_append::return#3
  (dword) ultoa::value#0 ← (dword~) ultoa::$9
  (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#9
  (byte) ultoa::started#1 ← (number) 1
  to:ultoa::@13

(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@14
  (byte*) ultoa_append::buffer#3 ← phi( ultoa::@14/(byte*) ultoa_append::buffer#0 )
  (dword) ultoa_append::sub#3 ← phi( ultoa::@14/(dword) ultoa_append::sub#0 )
  (dword) ultoa_append::value#5 ← phi( ultoa::@14/(dword) ultoa_append::value#0 )
  (byte) ultoa_append::digit#0 ← (byte) 0
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  (byte*) ultoa_append::buffer#2 ← phi( ultoa_append/(byte*) ultoa_append::buffer#3 ultoa_append::@2/(byte*) ultoa_append::buffer#4 )
  (byte) ultoa_append::digit#4 ← phi( ultoa_append/(byte) ultoa_append::digit#0 ultoa_append::@2/(byte) ultoa_append::digit#1 )
  (dword) ultoa_append::sub#1 ← phi( ultoa_append/(dword) ultoa_append::sub#3 ultoa_append::@2/(dword) ultoa_append::sub#2 )
  (dword) ultoa_append::value#2 ← phi( ultoa_append/(dword) ultoa_append::value#5 ultoa_append::@2/(dword) ultoa_append::value#1 )
  (bool~) ultoa_append::$0 ← (dword) ultoa_append::value#2 >= (dword) ultoa_append::sub#1
  if((bool~) ultoa_append::$0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  (byte*) ultoa_append::buffer#4 ← phi( ultoa_append::@1/(byte*) ultoa_append::buffer#2 )
  (dword) ultoa_append::sub#2 ← phi( ultoa_append::@1/(dword) ultoa_append::sub#1 )
  (dword) ultoa_append::value#3 ← phi( ultoa_append::@1/(dword) ultoa_append::value#2 )
  (byte) ultoa_append::digit#2 ← phi( ultoa_append::@1/(byte) ultoa_append::digit#4 )
  (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2
  (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#3 - (dword) ultoa_append::sub#2
  to:ultoa_append::@1
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  (dword) ultoa_append::value#4 ← phi( ultoa_append::@1/(dword) ultoa_append::value#2 )
  (byte*) ultoa_append::buffer#1 ← phi( ultoa_append::@1/(byte*) ultoa_append::buffer#2 )
  (byte) ultoa_append::digit#3 ← phi( ultoa_append::@1/(byte) ultoa_append::digit#4 )
  *((byte*) ultoa_append::buffer#1) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#3)
  (dword) ultoa_append::return#1 ← (dword) ultoa_append::value#4
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  (dword) ultoa_append::return#4 ← phi( ultoa_append::@3/(dword) ultoa_append::return#1 )
  (dword) ultoa_append::return#2 ← (dword) ultoa_append::return#4
  return 
  to:@return
@1: scope:[]  from @begin
  (byte) conio_cursor_x ← (byte) 0
  (byte) conio_cursor_y ← (byte) 0
  (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  (byte) conio_textcolor ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  (byte) conio_scroll_enable ← (byte) 1
  to:@2

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from cscroll::@2 main::@24
  (byte) gotoxy::x#5 ← phi( cscroll::@2/(byte) gotoxy::x#1 main::@24/(byte) gotoxy::x#2 )
  (byte) gotoxy::y#3 ← phi( cscroll::@2/(byte) gotoxy::y#1 main::@24/(byte) gotoxy::y#2 )
  (bool~) gotoxy::$0 ← (byte) gotoxy::y#3 > (number) $19
  (bool~) gotoxy::$1 ← ! (bool~) gotoxy::$0
  if((bool~) gotoxy::$1) goto gotoxy::@1
  to:gotoxy::@3
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  (byte) gotoxy::y#5 ← phi( gotoxy/(byte) gotoxy::y#3 gotoxy::@3/(byte) gotoxy::y#0 )
  (byte) gotoxy::x#3 ← phi( gotoxy/(byte) gotoxy::x#5 gotoxy::@3/(byte) gotoxy::x#6 )
  (bool~) gotoxy::$2 ← (byte) gotoxy::x#3 >= (number) $28
  (bool~) gotoxy::$3 ← ! (bool~) gotoxy::$2
  if((bool~) gotoxy::$3) goto gotoxy::@2
  to:gotoxy::@4
gotoxy::@3: scope:[gotoxy]  from gotoxy
  (byte) gotoxy::x#6 ← phi( gotoxy/(byte) gotoxy::x#5 )
  (byte) gotoxy::y#0 ← (number) 0
  to:gotoxy::@1
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  (byte) gotoxy::y#4 ← phi( gotoxy::@1/(byte) gotoxy::y#5 gotoxy::@4/(byte) gotoxy::y#6 )
  (byte) gotoxy::x#4 ← phi( gotoxy::@1/(byte) gotoxy::x#3 gotoxy::@4/(byte) gotoxy::x#0 )
  (byte) conio_cursor_x ← (byte) gotoxy::x#4
  (byte) conio_cursor_y ← (byte) gotoxy::y#4
  (word~) gotoxy::$8 ← (word)(byte) gotoxy::y#4
  (number~) gotoxy::$4 ← (word~) gotoxy::$8 * (number) $28
  (number~) gotoxy::$5 ← (number~) gotoxy::$4 + (byte) gotoxy::x#4
  (word) gotoxy::offset#0 ← (number~) gotoxy::$5
  (byte*~) gotoxy::$6 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0
  (byte*) conio_cursor_text ← (byte*~) gotoxy::$6
  (byte*~) gotoxy::$7 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0
  (byte*) conio_cursor_color ← (byte*~) gotoxy::$7
  to:gotoxy::@return
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  (byte) gotoxy::y#6 ← phi( gotoxy::@1/(byte) gotoxy::y#5 )
  (byte) gotoxy::x#0 ← (number) 0
  to:gotoxy::@2
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  return 
  to:@return

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@9 printf_padding::@2
  (byte) cputc::c#3 ← phi( cputs::@2/(byte) cputc::c#0 printf_number_buffer::@9/(byte) cputc::c#2 printf_padding::@2/(byte) cputc::c#1 )
  (bool~) cputc::$0 ← (byte) cputc::c#3 == (byte) '
'
  if((bool~) cputc::$0) goto cputc::@1
  to:cputc::@2
cputc::@1: scope:[cputc]  from cputc
  call cputln 
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@1
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc
  (byte) cputc::c#4 ← phi( cputc/(byte) cputc::c#3 )
  *((byte*) conio_cursor_text) ← (byte) cputc::c#4
  (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text
  *((byte*) conio_cursor_color) ← (byte) conio_textcolor
  (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color
  (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  (bool~) cputc::$1 ← (byte) conio_cursor_x == (number) $28
  (bool~) cputc::$2 ← ! (bool~) cputc::$1
  if((bool~) cputc::$2) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  call cscroll 
  to:cputc::@5
cputc::@5: scope:[cputc]  from cputc::@3
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@2 cputc::@4 cputc::@5
  return 
  to:@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1
  (number~) cputln::$0 ← (number) $28 - (byte) conio_cursor_x
  (word) cputln::ln_offset#0 ← (number~) cputln::$0
  (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0
  (byte*) conio_cursor_text ← (byte*~) cputln::$1
  (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0
  (byte*) conio_cursor_color ← (byte*~) cputln::$2
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  call cscroll 
  to:cputln::@1
cputln::@1: scope:[cputln]  from cputln
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln::@1
  return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputc::@3 cputln
  (bool~) cscroll::$0 ← (byte) conio_cursor_y == (number) $19
  (bool~) cscroll::$1 ← ! (bool~) cscroll::$0
  if((bool~) cscroll::$1) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  (bool~) cscroll::$9 ← (number) 0 != (byte) conio_scroll_enable
  if((bool~) cscroll::$9) goto cscroll::@3
  to:cscroll::@2
cscroll::@3: scope:[cscroll]  from cscroll::@1
  (void*) memcpy::destination#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT
  (void*) memcpy::source#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $28
  (word) memcpy::num#0 ← (number) $19*(number) $28-(number) $28
  call memcpy 
  (void*) memcpy::return#2 ← (void*) memcpy::return#1
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  (void*) memcpy::destination#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS
  (void*) memcpy::source#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $28
  (word) memcpy::num#1 ← (number) $19*(number) $28-(number) $28
  call memcpy 
  (void*) memcpy::return#3 ← (void*) memcpy::return#1
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(number) $28
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $28
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:cscroll::@6
cscroll::@6: scope:[cscroll]  from cscroll::@5
  (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(number) $28
  (byte) memset::c#1 ← (byte) conio_textcolor
  (word) memset::num#1 ← (number) $28
  call memset 
  (void*) memset::return#3 ← (void*) memset::return#1
  to:cscroll::@7
cscroll::@7: scope:[cscroll]  from cscroll::@6
  (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (number) $28
  (byte*) conio_cursor_text ← (byte*~) cscroll::$7
  (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (number) $28
  (byte*) conio_cursor_color ← (byte*~) cscroll::$8
  (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@2: scope:[cscroll]  from cscroll::@1
  (byte) gotoxy::x#1 ← (number) 0
  (byte) gotoxy::y#1 ← (number) 0
  call gotoxy 
  to:cscroll::@8
cscroll::@8: scope:[cscroll]  from cscroll::@2
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@7 cscroll::@8
  return 
  to:@return

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@25 main::@27 printf_number_buffer::@5
  (to_nomodify byte*) cputs::s#5 ← phi( main::@25/(to_nomodify byte*) cputs::s#2 main::@27/(to_nomodify byte*) cputs::s#3 printf_number_buffer::@5/(to_nomodify byte*) cputs::s#1 )
  (byte) cputs::c#0 ← (byte) 0
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@3
  (to_nomodify byte*) cputs::s#4 ← phi( cputs/(to_nomodify byte*) cputs::s#5 cputs::@3/(to_nomodify byte*) cputs::s#6 )
  (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#4)
  (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#4
  (bool~) cputs::$1 ← (number) 0 != (byte) cputs::c#1
  if((bool~) cputs::$1) goto cputs::@2
  to:cputs::@return
cputs::@2: scope:[cputs]  from cputs::@1
  (to_nomodify byte*) cputs::s#7 ← phi( cputs::@1/(to_nomodify byte*) cputs::s#0 )
  (byte) cputs::c#2 ← phi( cputs::@1/(byte) cputs::c#1 )
  (byte) cputc::c#0 ← (byte) cputs::c#2
  call cputc 
  to:cputs::@3
cputs::@3: scope:[cputs]  from cputs::@2
  (to_nomodify byte*) cputs::s#6 ← phi( cputs::@2/(to_nomodify byte*) cputs::s#7 )
  to:cputs::@1
cputs::@return: scope:[cputs]  from cputs::@1
  return 
  to:@return

(byte()) textcolor((byte) textcolor::color)
textcolor: scope:[textcolor]  from main::@16
  (byte) textcolor::color#1 ← phi( main::@16/(byte) textcolor::color#0 )
  (byte) textcolor::old#0 ← (byte) conio_textcolor
  (byte) conio_textcolor ← (byte) textcolor::color#1
  (byte) textcolor::return#0 ← (byte) textcolor::old#0
  to:textcolor::@return
textcolor::@return: scope:[textcolor]  from textcolor
  (byte) textcolor::return#3 ← phi( textcolor/(byte) textcolor::return#0 )
  (byte) textcolor::return#1 ← (byte) textcolor::return#3
  return 
  to:@return

(byte()) kbhit()
kbhit: scope:[kbhit]  from irq_bottom_2
  *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (number) 0
  (byte~) kbhit::$0 ← ~ *((const nomodify byte*) CONIO_CIA1_PORT_B)
  (byte) kbhit::return#0 ← (byte~) kbhit::$0
  to:kbhit::@return
kbhit::@return: scope:[kbhit]  from kbhit
  (byte) kbhit::return#3 ← phi( kbhit/(byte) kbhit::return#0 )
  (byte) kbhit::return#1 ← (byte) kbhit::return#3
  return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  (byte) printf_padding::pad#5 ← phi( printf_number_buffer::@10/(byte) printf_padding::pad#1 printf_number_buffer::@12/(byte) printf_padding::pad#2 printf_number_buffer::@8/(byte) printf_padding::pad#0 )
  (byte) printf_padding::length#4 ← phi( printf_number_buffer::@10/(byte) printf_padding::length#1 printf_number_buffer::@12/(byte) printf_padding::length#2 printf_number_buffer::@8/(byte) printf_padding::length#0 )
  (byte) printf_padding::i#0 ← (byte) 0
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  (byte) printf_padding::pad#4 ← phi( printf_padding/(byte) printf_padding::pad#5 printf_padding::@3/(byte) printf_padding::pad#6 )
  (byte) printf_padding::length#3 ← phi( printf_padding/(byte) printf_padding::length#4 printf_padding::@3/(byte) printf_padding::length#5 )
  (byte) printf_padding::i#2 ← phi( printf_padding/(byte) printf_padding::i#0 printf_padding::@3/(byte) printf_padding::i#1 )
  (bool~) printf_padding::$0 ← (byte) printf_padding::i#2 < (byte) printf_padding::length#3
  if((bool~) printf_padding::$0) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  (byte) printf_padding::length#6 ← phi( printf_padding::@1/(byte) printf_padding::length#3 )
  (byte) printf_padding::i#4 ← phi( printf_padding::@1/(byte) printf_padding::i#2 )
  (byte) printf_padding::pad#3 ← phi( printf_padding::@1/(byte) printf_padding::pad#4 )
  (byte) cputc::c#1 ← (byte) printf_padding::pad#3
  call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  (byte) printf_padding::pad#6 ← phi( printf_padding::@2/(byte) printf_padding::pad#3 )
  (byte) printf_padding::length#5 ← phi( printf_padding::@2/(byte) printf_padding::length#6 )
  (byte) printf_padding::i#3 ← phi( printf_padding::@2/(byte) printf_padding::i#4 )
  (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#3
  to:printf_padding::@1
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  return 
  to:@return

(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
printf_ulong: scope:[printf_ulong]  from main::@28
  (byte) printf_ulong::format_upper_case#5 ← phi( main::@28/(byte) printf_ulong::format_upper_case#0 )
  (byte) printf_ulong::format_zero_padding#5 ← phi( main::@28/(byte) printf_ulong::format_zero_padding#0 )
  (byte) printf_ulong::format_justify_left#5 ← phi( main::@28/(byte) printf_ulong::format_justify_left#0 )
  (byte) printf_ulong::format_min_length#5 ← phi( main::@28/(byte) printf_ulong::format_min_length#0 )
  (byte) printf_ulong::format_radix#5 ← phi( main::@28/(byte) printf_ulong::format_radix#0 )
  (dword) printf_ulong::uvalue#4 ← phi( main::@28/(dword) printf_ulong::uvalue#0 )
  (byte) printf_ulong::format_sign_always#1 ← phi( main::@28/(byte) printf_ulong::format_sign_always#0 )
  (bool~) printf_ulong::$5 ← (number) 0 != (byte) printf_ulong::format_sign_always#1
  if((bool~) printf_ulong::$5) goto printf_ulong::@1
  to:printf_ulong::@2
printf_ulong::@1: scope:[printf_ulong]  from printf_ulong
  (byte) printf_ulong::format_upper_case#3 ← phi( printf_ulong/(byte) printf_ulong::format_upper_case#5 )
  (byte) printf_ulong::format_zero_padding#3 ← phi( printf_ulong/(byte) printf_ulong::format_zero_padding#5 )
  (byte) printf_ulong::format_sign_always#4 ← phi( printf_ulong/(byte) printf_ulong::format_sign_always#1 )
  (byte) printf_ulong::format_justify_left#3 ← phi( printf_ulong/(byte) printf_ulong::format_justify_left#5 )
  (byte) printf_ulong::format_min_length#3 ← phi( printf_ulong/(byte) printf_ulong::format_min_length#5 )
  (byte) printf_ulong::format_radix#3 ← phi( printf_ulong/(byte) printf_ulong::format_radix#5 )
  (dword) printf_ulong::uvalue#2 ← phi( printf_ulong/(dword) printf_ulong::uvalue#4 )
  (byte~) printf_ulong::$1 ← (byte) '+'
  to:printf_ulong::@3
printf_ulong::@2: scope:[printf_ulong]  from printf_ulong
  (byte) printf_ulong::format_upper_case#4 ← phi( printf_ulong/(byte) printf_ulong::format_upper_case#5 )
  (byte) printf_ulong::format_zero_padding#4 ← phi( printf_ulong/(byte) printf_ulong::format_zero_padding#5 )
  (byte) printf_ulong::format_sign_always#5 ← phi( printf_ulong/(byte) printf_ulong::format_sign_always#1 )
  (byte) printf_ulong::format_justify_left#4 ← phi( printf_ulong/(byte) printf_ulong::format_justify_left#5 )
  (byte) printf_ulong::format_min_length#4 ← phi( printf_ulong/(byte) printf_ulong::format_min_length#5 )
  (byte) printf_ulong::format_radix#4 ← phi( printf_ulong/(byte) printf_ulong::format_radix#5 )
  (dword) printf_ulong::uvalue#3 ← phi( printf_ulong/(dword) printf_ulong::uvalue#4 )
  (number~) printf_ulong::$0 ← (number) 0
  to:printf_ulong::@3
printf_ulong::@3: scope:[printf_ulong]  from printf_ulong::@1 printf_ulong::@2
  (byte) printf_ulong::format_upper_case#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_upper_case#3 printf_ulong::@2/(byte) printf_ulong::format_upper_case#4 )
  (byte) printf_ulong::format_zero_padding#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_zero_padding#3 printf_ulong::@2/(byte) printf_ulong::format_zero_padding#4 )
  (byte) printf_ulong::format_sign_always#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_sign_always#4 printf_ulong::@2/(byte) printf_ulong::format_sign_always#5 )
  (byte) printf_ulong::format_justify_left#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_justify_left#3 printf_ulong::@2/(byte) printf_ulong::format_justify_left#4 )
  (byte) printf_ulong::format_min_length#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_min_length#3 printf_ulong::@2/(byte) printf_ulong::format_min_length#4 )
  (byte) printf_ulong::format_radix#1 ← phi( printf_ulong::@1/(byte) printf_ulong::format_radix#3 printf_ulong::@2/(byte) printf_ulong::format_radix#4 )
  (dword) printf_ulong::uvalue#1 ← phi( printf_ulong::@1/(dword) printf_ulong::uvalue#2 printf_ulong::@2/(dword) printf_ulong::uvalue#3 )
  (number~) printf_ulong::$2 ← phi( printf_ulong::@1/(byte~) printf_ulong::$1 printf_ulong::@2/(number~) printf_ulong::$0 )
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (number~) printf_ulong::$2
  (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#1
  (byte*) ultoa::buffer#5 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) ultoa::radix#0 ← (byte) printf_ulong::format_radix#1
  call ultoa 
  to:printf_ulong::@4
printf_ulong::@4: scope:[printf_ulong]  from printf_ulong::@3
  (byte) printf_ulong::format_radix#2 ← phi( printf_ulong::@3/(byte) printf_ulong::format_radix#1 )
  (byte) printf_ulong::format_upper_case#1 ← phi( printf_ulong::@3/(byte) printf_ulong::format_upper_case#2 )
  (byte) printf_ulong::format_zero_padding#1 ← phi( printf_ulong::@3/(byte) printf_ulong::format_zero_padding#2 )
  (byte) printf_ulong::format_sign_always#2 ← phi( printf_ulong::@3/(byte) printf_ulong::format_sign_always#3 )
  (byte) printf_ulong::format_justify_left#1 ← phi( printf_ulong::@3/(byte) printf_ulong::format_justify_left#2 )
  (byte) printf_ulong::format_min_length#1 ← phi( printf_ulong::@3/(byte) printf_ulong::format_min_length#2 )
  (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  (byte*) printf_number_buffer::buffer_digits#0 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) printf_number_buffer::format_min_length#0 ← (byte) printf_ulong::format_min_length#1
  (byte) printf_number_buffer::format_justify_left#0 ← (byte) printf_ulong::format_justify_left#1
  (byte) printf_number_buffer::format_sign_always#0 ← (byte) printf_ulong::format_sign_always#2
  (byte) printf_number_buffer::format_zero_padding#0 ← (byte) printf_ulong::format_zero_padding#1
  (byte) printf_number_buffer::format_upper_case#0 ← (byte) printf_ulong::format_upper_case#1
  (byte) printf_number_buffer::format_radix#0 ← (byte) printf_ulong::format_radix#2
  call printf_number_buffer 
  to:printf_ulong::@5
printf_ulong::@5: scope:[printf_ulong]  from printf_ulong::@4
  to:printf_ulong::@return
printf_ulong::@return: scope:[printf_ulong]  from printf_ulong::@5
  return 
  to:@return

(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from main::@26
  (byte) printf_uchar::format_upper_case#5 ← phi( main::@26/(byte) printf_uchar::format_upper_case#0 )
  (byte) printf_uchar::format_zero_padding#5 ← phi( main::@26/(byte) printf_uchar::format_zero_padding#0 )
  (byte) printf_uchar::format_justify_left#5 ← phi( main::@26/(byte) printf_uchar::format_justify_left#0 )
  (byte) printf_uchar::format_min_length#5 ← phi( main::@26/(byte) printf_uchar::format_min_length#0 )
  (byte) printf_uchar::format_radix#5 ← phi( main::@26/(byte) printf_uchar::format_radix#0 )
  (byte) printf_uchar::uvalue#4 ← phi( main::@26/(byte) printf_uchar::uvalue#0 )
  (byte) printf_uchar::format_sign_always#1 ← phi( main::@26/(byte) printf_uchar::format_sign_always#0 )
  (bool~) printf_uchar::$5 ← (number) 0 != (byte) printf_uchar::format_sign_always#1
  if((bool~) printf_uchar::$5) goto printf_uchar::@1
  to:printf_uchar::@2
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  (byte) printf_uchar::format_upper_case#3 ← phi( printf_uchar/(byte) printf_uchar::format_upper_case#5 )
  (byte) printf_uchar::format_zero_padding#3 ← phi( printf_uchar/(byte) printf_uchar::format_zero_padding#5 )
  (byte) printf_uchar::format_sign_always#4 ← phi( printf_uchar/(byte) printf_uchar::format_sign_always#1 )
  (byte) printf_uchar::format_justify_left#3 ← phi( printf_uchar/(byte) printf_uchar::format_justify_left#5 )
  (byte) printf_uchar::format_min_length#3 ← phi( printf_uchar/(byte) printf_uchar::format_min_length#5 )
  (byte) printf_uchar::format_radix#3 ← phi( printf_uchar/(byte) printf_uchar::format_radix#5 )
  (byte) printf_uchar::uvalue#2 ← phi( printf_uchar/(byte) printf_uchar::uvalue#4 )
  (byte~) printf_uchar::$1 ← (byte) '+'
  to:printf_uchar::@3
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar
  (byte) printf_uchar::format_upper_case#4 ← phi( printf_uchar/(byte) printf_uchar::format_upper_case#5 )
  (byte) printf_uchar::format_zero_padding#4 ← phi( printf_uchar/(byte) printf_uchar::format_zero_padding#5 )
  (byte) printf_uchar::format_sign_always#5 ← phi( printf_uchar/(byte) printf_uchar::format_sign_always#1 )
  (byte) printf_uchar::format_justify_left#4 ← phi( printf_uchar/(byte) printf_uchar::format_justify_left#5 )
  (byte) printf_uchar::format_min_length#4 ← phi( printf_uchar/(byte) printf_uchar::format_min_length#5 )
  (byte) printf_uchar::format_radix#4 ← phi( printf_uchar/(byte) printf_uchar::format_radix#5 )
  (byte) printf_uchar::uvalue#3 ← phi( printf_uchar/(byte) printf_uchar::uvalue#4 )
  (number~) printf_uchar::$0 ← (number) 0
  to:printf_uchar::@3
printf_uchar::@3: scope:[printf_uchar]  from printf_uchar::@1 printf_uchar::@2
  (byte) printf_uchar::format_upper_case#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_upper_case#3 printf_uchar::@2/(byte) printf_uchar::format_upper_case#4 )
  (byte) printf_uchar::format_zero_padding#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_zero_padding#3 printf_uchar::@2/(byte) printf_uchar::format_zero_padding#4 )
  (byte) printf_uchar::format_sign_always#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_sign_always#4 printf_uchar::@2/(byte) printf_uchar::format_sign_always#5 )
  (byte) printf_uchar::format_justify_left#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_justify_left#3 printf_uchar::@2/(byte) printf_uchar::format_justify_left#4 )
  (byte) printf_uchar::format_min_length#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_min_length#3 printf_uchar::@2/(byte) printf_uchar::format_min_length#4 )
  (byte) printf_uchar::format_radix#1 ← phi( printf_uchar::@1/(byte) printf_uchar::format_radix#3 printf_uchar::@2/(byte) printf_uchar::format_radix#4 )
  (byte) printf_uchar::uvalue#1 ← phi( printf_uchar::@1/(byte) printf_uchar::uvalue#2 printf_uchar::@2/(byte) printf_uchar::uvalue#3 )
  (number~) printf_uchar::$2 ← phi( printf_uchar::@1/(byte~) printf_uchar::$1 printf_uchar::@2/(number~) printf_uchar::$0 )
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (number~) printf_uchar::$2
  (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#1
  (byte*) uctoa::buffer#5 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) uctoa::radix#0 ← (byte) printf_uchar::format_radix#1
  call uctoa 
  to:printf_uchar::@4
printf_uchar::@4: scope:[printf_uchar]  from printf_uchar::@3
  (byte) printf_uchar::format_radix#2 ← phi( printf_uchar::@3/(byte) printf_uchar::format_radix#1 )
  (byte) printf_uchar::format_upper_case#1 ← phi( printf_uchar::@3/(byte) printf_uchar::format_upper_case#2 )
  (byte) printf_uchar::format_zero_padding#1 ← phi( printf_uchar::@3/(byte) printf_uchar::format_zero_padding#2 )
  (byte) printf_uchar::format_sign_always#2 ← phi( printf_uchar::@3/(byte) printf_uchar::format_sign_always#3 )
  (byte) printf_uchar::format_justify_left#1 ← phi( printf_uchar::@3/(byte) printf_uchar::format_justify_left#2 )
  (byte) printf_uchar::format_min_length#1 ← phi( printf_uchar::@3/(byte) printf_uchar::format_min_length#2 )
  (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  (byte*) printf_number_buffer::buffer_digits#1 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) printf_number_buffer::format_min_length#1 ← (byte) printf_uchar::format_min_length#1
  (byte) printf_number_buffer::format_justify_left#1 ← (byte) printf_uchar::format_justify_left#1
  (byte) printf_number_buffer::format_sign_always#1 ← (byte) printf_uchar::format_sign_always#2
  (byte) printf_number_buffer::format_zero_padding#1 ← (byte) printf_uchar::format_zero_padding#1
  (byte) printf_number_buffer::format_upper_case#1 ← (byte) printf_uchar::format_upper_case#1
  (byte) printf_number_buffer::format_radix#1 ← (byte) printf_uchar::format_radix#2
  call printf_number_buffer 
  to:printf_uchar::@5
printf_uchar::@5: scope:[printf_uchar]  from printf_uchar::@4
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@5
  return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@4 printf_ulong::@4
  (byte) printf_number_buffer::format_upper_case#11 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_upper_case#1 printf_ulong::@4/(byte) printf_number_buffer::format_upper_case#0 )
  (byte) printf_number_buffer::buffer_sign#8 ← phi( printf_uchar::@4/(byte) printf_number_buffer::buffer_sign#1 printf_ulong::@4/(byte) printf_number_buffer::buffer_sign#0 )
  (byte*) printf_number_buffer::buffer_digits#5 ← phi( printf_uchar::@4/(byte*) printf_number_buffer::buffer_digits#1 printf_ulong::@4/(byte*) printf_number_buffer::buffer_digits#0 )
  (byte) printf_number_buffer::format_zero_padding#5 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_zero_padding#1 printf_ulong::@4/(byte) printf_number_buffer::format_zero_padding#0 )
  (byte) printf_number_buffer::format_justify_left#4 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_justify_left#1 printf_ulong::@4/(byte) printf_number_buffer::format_justify_left#0 )
  (byte) printf_number_buffer::format_min_length#2 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_min_length#1 printf_ulong::@4/(byte) printf_number_buffer::format_min_length#0 )
  (signed byte) printf_number_buffer::padding#0 ← (signed byte) 0
  (bool~) printf_number_buffer::$26 ← (number) 0 != (byte) printf_number_buffer::format_min_length#2
  (bool~) printf_number_buffer::$0 ← ! (bool~) printf_number_buffer::$26
  if((bool~) printf_number_buffer::$0) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@14
  (byte*) printf_number_buffer::buffer_digits#13 ← phi( printf_number_buffer/(byte*) printf_number_buffer::buffer_digits#5 printf_number_buffer::@13/(byte*) printf_number_buffer::buffer_digits#16 printf_number_buffer::@14/(byte*) printf_number_buffer::buffer_digits#17 )
  (byte) printf_number_buffer::format_upper_case#8 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_upper_case#11 printf_number_buffer::@13/(byte) printf_number_buffer::format_upper_case#12 printf_number_buffer::@14/(byte) printf_number_buffer::format_upper_case#13 )
  (byte) printf_number_buffer::buffer_sign#6 ← phi( printf_number_buffer/(byte) printf_number_buffer::buffer_sign#8 printf_number_buffer::@13/(byte) printf_number_buffer::buffer_sign#9 printf_number_buffer::@14/(byte) printf_number_buffer::buffer_sign#10 )
  (signed byte) printf_number_buffer::padding#3 ← phi( printf_number_buffer/(signed byte) printf_number_buffer::padding#0 printf_number_buffer::@13/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@14/(signed byte) printf_number_buffer::padding#2 )
  (byte) printf_number_buffer::format_zero_padding#2 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_zero_padding#5 printf_number_buffer::@13/(byte) printf_number_buffer::format_zero_padding#6 printf_number_buffer::@14/(byte) printf_number_buffer::format_zero_padding#7 )
  (byte) printf_number_buffer::format_justify_left#2 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_justify_left#4 printf_number_buffer::@13/(byte) printf_number_buffer::format_justify_left#5 printf_number_buffer::@14/(byte) printf_number_buffer::format_justify_left#6 )
  (bool~) printf_number_buffer::$27 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#2
  (bool~) printf_number_buffer::$1 ← ! (bool~) printf_number_buffer::$27
  (bool~) printf_number_buffer::$28 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#2
  (bool~) printf_number_buffer::$2 ← ! (bool~) printf_number_buffer::$28
  (bool~) printf_number_buffer::$3 ← (bool~) printf_number_buffer::$1 && (bool~) printf_number_buffer::$2
  (bool~) printf_number_buffer::$4 ← (bool~) printf_number_buffer::$3 && (signed byte) printf_number_buffer::padding#3
  (bool~) printf_number_buffer::$5 ← ! (bool~) printf_number_buffer::$4
  if((bool~) printf_number_buffer::$5) goto printf_number_buffer::@2
  to:printf_number_buffer::@8
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  (byte) printf_number_buffer::format_upper_case#17 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_upper_case#11 )
  (byte) printf_number_buffer::format_zero_padding#17 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_zero_padding#5 )
  (byte) printf_number_buffer::format_justify_left#12 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_justify_left#4 )
  (byte) printf_number_buffer::format_min_length#6 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_min_length#2 )
  (byte) printf_number_buffer::buffer_sign#5 ← phi( printf_number_buffer/(byte) printf_number_buffer::buffer_sign#8 )
  (byte*) printf_number_buffer::buffer_digits#2 ← phi( printf_number_buffer/(byte*) printf_number_buffer::buffer_digits#5 )
  (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#2
  call strlen 
  (word) strlen::return#2 ← (word) strlen::return#1
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@6
  (byte*) printf_number_buffer::buffer_digits#19 ← phi( printf_number_buffer::@6/(byte*) printf_number_buffer::buffer_digits#2 )
  (byte) printf_number_buffer::format_upper_case#15 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_upper_case#17 )
  (byte) printf_number_buffer::format_zero_padding#11 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_zero_padding#17 )
  (byte) printf_number_buffer::format_justify_left#8 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_justify_left#12 )
  (byte) printf_number_buffer::format_min_length#4 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_min_length#6 )
  (byte) printf_number_buffer::buffer_sign#2 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::buffer_sign#5 )
  (word) strlen::return#4 ← phi( printf_number_buffer::@6/(word) strlen::return#2 )
  (word~) printf_number_buffer::$19 ← (word) strlen::return#4
  (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  (bool~) printf_number_buffer::$29 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#2
  (bool~) printf_number_buffer::$20 ← ! (bool~) printf_number_buffer::$29
  if((bool~) printf_number_buffer::$20) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@15 printf_number_buffer::@7
  (byte*) printf_number_buffer::buffer_digits#16 ← phi( printf_number_buffer::@15/(byte*) printf_number_buffer::buffer_digits#19 printf_number_buffer::@7/(byte*) printf_number_buffer::buffer_digits#20 )
  (byte) printf_number_buffer::format_upper_case#12 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_upper_case#15 printf_number_buffer::@7/(byte) printf_number_buffer::format_upper_case#16 )
  (byte) printf_number_buffer::buffer_sign#9 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::buffer_sign#2 printf_number_buffer::@7/(byte) printf_number_buffer::buffer_sign#12 )
  (byte) printf_number_buffer::format_zero_padding#6 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_zero_padding#11 printf_number_buffer::@7/(byte) printf_number_buffer::format_zero_padding#12 )
  (byte) printf_number_buffer::format_justify_left#5 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_justify_left#8 printf_number_buffer::@7/(byte) printf_number_buffer::format_justify_left#9 )
  (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@15/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@7/(signed byte) printf_number_buffer::len#1 )
  (byte) printf_number_buffer::format_min_length#3 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_min_length#4 printf_number_buffer::@7/(byte) printf_number_buffer::format_min_length#5 )
  (signed byte~) printf_number_buffer::$25 ← (signed byte)(byte) printf_number_buffer::format_min_length#3
  (signed byte~) printf_number_buffer::$21 ← (signed byte~) printf_number_buffer::$25 - (signed byte) printf_number_buffer::len#2
  (signed byte) printf_number_buffer::padding#1 ← (signed byte~) printf_number_buffer::$21
  (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (number) 0
  (bool~) printf_number_buffer::$23 ← ! (bool~) printf_number_buffer::$22
  if((bool~) printf_number_buffer::$23) goto printf_number_buffer::@1
  to:printf_number_buffer::@14
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@15
  (byte*) printf_number_buffer::buffer_digits#20 ← phi( printf_number_buffer::@15/(byte*) printf_number_buffer::buffer_digits#19 )
  (byte) printf_number_buffer::format_upper_case#16 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_upper_case#15 )
  (byte) printf_number_buffer::buffer_sign#12 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::buffer_sign#2 )
  (byte) printf_number_buffer::format_zero_padding#12 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_zero_padding#11 )
  (byte) printf_number_buffer::format_justify_left#9 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_justify_left#8 )
  (byte) printf_number_buffer::format_min_length#5 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_min_length#4 )
  (signed byte) printf_number_buffer::len#3 ← phi( printf_number_buffer::@15/(signed byte) printf_number_buffer::len#0 )
  (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#3
  to:printf_number_buffer::@13
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@13
  (byte*) printf_number_buffer::buffer_digits#17 ← phi( printf_number_buffer::@13/(byte*) printf_number_buffer::buffer_digits#16 )
  (byte) printf_number_buffer::format_upper_case#13 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_upper_case#12 )
  (byte) printf_number_buffer::buffer_sign#10 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::buffer_sign#9 )
  (byte) printf_number_buffer::format_zero_padding#7 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_zero_padding#6 )
  (byte) printf_number_buffer::format_justify_left#6 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_justify_left#5 )
  (signed byte) printf_number_buffer::padding#2 ← (number) 0
  to:printf_number_buffer::@1
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16
  (byte) printf_number_buffer::format_justify_left#17 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_justify_left#2 printf_number_buffer::@16/(byte) printf_number_buffer::format_justify_left#19 )
  (byte*) printf_number_buffer::buffer_digits#11 ← phi( printf_number_buffer::@1/(byte*) printf_number_buffer::buffer_digits#13 printf_number_buffer::@16/(byte*) printf_number_buffer::buffer_digits#14 )
  (byte) printf_number_buffer::format_upper_case#6 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_upper_case#8 printf_number_buffer::@16/(byte) printf_number_buffer::format_upper_case#9 )
  (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer::@1/(signed byte) printf_number_buffer::padding#3 printf_number_buffer::@16/(signed byte) printf_number_buffer::padding#12 )
  (byte) printf_number_buffer::format_zero_padding#9 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_zero_padding#2 printf_number_buffer::@16/(byte) printf_number_buffer::format_zero_padding#13 )
  (byte) printf_number_buffer::buffer_sign#3 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::buffer_sign#6 printf_number_buffer::@16/(byte) printf_number_buffer::buffer_sign#7 )
  (bool~) printf_number_buffer::$30 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#3
  (bool~) printf_number_buffer::$7 ← ! (bool~) printf_number_buffer::$30
  if((bool~) printf_number_buffer::$7) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@1
  (byte) printf_number_buffer::format_justify_left#21 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_justify_left#2 )
  (byte*) printf_number_buffer::buffer_digits#18 ← phi( printf_number_buffer::@1/(byte*) printf_number_buffer::buffer_digits#13 )
  (byte) printf_number_buffer::format_upper_case#14 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_upper_case#8 )
  (byte) printf_number_buffer::format_zero_padding#18 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_zero_padding#2 )
  (byte) printf_number_buffer::buffer_sign#11 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::buffer_sign#6 )
  (signed byte) printf_number_buffer::padding#4 ← phi( printf_number_buffer::@1/(signed byte) printf_number_buffer::padding#3 )
  (byte) printf_padding::pad#0 ← (byte) ' '
  (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#4
  call printf_padding 
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@8
  (byte) printf_number_buffer::format_justify_left#19 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_justify_left#21 )
  (byte*) printf_number_buffer::buffer_digits#14 ← phi( printf_number_buffer::@8/(byte*) printf_number_buffer::buffer_digits#18 )
  (byte) printf_number_buffer::format_upper_case#9 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_upper_case#14 )
  (signed byte) printf_number_buffer::padding#12 ← phi( printf_number_buffer::@8/(signed byte) printf_number_buffer::padding#4 )
  (byte) printf_number_buffer::format_zero_padding#13 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_zero_padding#18 )
  (byte) printf_number_buffer::buffer_sign#7 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::buffer_sign#11 )
  to:printf_number_buffer::@2
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@17 printf_number_buffer::@2
  (byte) printf_number_buffer::format_justify_left#14 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_justify_left#16 printf_number_buffer::@2/(byte) printf_number_buffer::format_justify_left#17 )
  (byte*) printf_number_buffer::buffer_digits#9 ← phi( printf_number_buffer::@17/(byte*) printf_number_buffer::buffer_digits#10 printf_number_buffer::@2/(byte*) printf_number_buffer::buffer_digits#11 )
  (byte) printf_number_buffer::format_upper_case#4 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_upper_case#5 printf_number_buffer::@2/(byte) printf_number_buffer::format_upper_case#6 )
  (signed byte) printf_number_buffer::padding#5 ← phi( printf_number_buffer::@17/(signed byte) printf_number_buffer::padding#9 printf_number_buffer::@2/(signed byte) printf_number_buffer::padding#10 )
  (byte) printf_number_buffer::format_zero_padding#3 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_zero_padding#8 printf_number_buffer::@2/(byte) printf_number_buffer::format_zero_padding#9 )
  (bool~) printf_number_buffer::$9 ← (byte) printf_number_buffer::format_zero_padding#3 && (signed byte) printf_number_buffer::padding#5
  (bool~) printf_number_buffer::$10 ← ! (bool~) printf_number_buffer::$9
  if((bool~) printf_number_buffer::$10) goto printf_number_buffer::@4
  to:printf_number_buffer::@10
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  (byte) printf_number_buffer::format_justify_left#20 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_justify_left#17 )
  (byte*) printf_number_buffer::buffer_digits#15 ← phi( printf_number_buffer::@2/(byte*) printf_number_buffer::buffer_digits#11 )
  (byte) printf_number_buffer::format_upper_case#10 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_upper_case#6 )
  (signed byte) printf_number_buffer::padding#13 ← phi( printf_number_buffer::@2/(signed byte) printf_number_buffer::padding#10 )
  (byte) printf_number_buffer::format_zero_padding#14 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_zero_padding#9 )
  (byte) printf_number_buffer::buffer_sign#4 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::buffer_sign#3 )
  (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#4
  call cputc 
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@9
  (byte) printf_number_buffer::format_justify_left#16 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_justify_left#20 )
  (byte*) printf_number_buffer::buffer_digits#10 ← phi( printf_number_buffer::@9/(byte*) printf_number_buffer::buffer_digits#15 )
  (byte) printf_number_buffer::format_upper_case#5 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_upper_case#10 )
  (signed byte) printf_number_buffer::padding#9 ← phi( printf_number_buffer::@9/(signed byte) printf_number_buffer::padding#13 )
  (byte) printf_number_buffer::format_zero_padding#8 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_zero_padding#14 )
  to:printf_number_buffer::@3
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@18 printf_number_buffer::@3
  (signed byte) printf_number_buffer::padding#15 ← phi( printf_number_buffer::@18/(signed byte) printf_number_buffer::padding#16 printf_number_buffer::@3/(signed byte) printf_number_buffer::padding#5 )
  (byte) printf_number_buffer::format_justify_left#11 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_justify_left#13 printf_number_buffer::@3/(byte) printf_number_buffer::format_justify_left#14 )
  (byte) printf_number_buffer::format_zero_padding#16 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_zero_padding#19 printf_number_buffer::@3/(byte) printf_number_buffer::format_zero_padding#3 )
  (byte*) printf_number_buffer::buffer_digits#7 ← phi( printf_number_buffer::@18/(byte*) printf_number_buffer::buffer_digits#8 printf_number_buffer::@3/(byte*) printf_number_buffer::buffer_digits#9 )
  (byte) printf_number_buffer::format_upper_case#2 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_upper_case#3 printf_number_buffer::@3/(byte) printf_number_buffer::format_upper_case#4 )
  (bool~) printf_number_buffer::$31 ← (number) 0 != (byte) printf_number_buffer::format_upper_case#2
  (bool~) printf_number_buffer::$12 ← ! (bool~) printf_number_buffer::$31
  if((bool~) printf_number_buffer::$12) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@3
  (byte) printf_number_buffer::format_justify_left#18 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_justify_left#14 )
  (byte) printf_number_buffer::format_zero_padding#21 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_zero_padding#3 )
  (byte*) printf_number_buffer::buffer_digits#12 ← phi( printf_number_buffer::@3/(byte*) printf_number_buffer::buffer_digits#9 )
  (byte) printf_number_buffer::format_upper_case#7 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_upper_case#4 )
  (signed byte) printf_number_buffer::padding#6 ← phi( printf_number_buffer::@3/(signed byte) printf_number_buffer::padding#5 )
  (byte) printf_padding::pad#1 ← (byte) '0'
  (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#6
  call printf_padding 
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@10
  (signed byte) printf_number_buffer::padding#16 ← phi( printf_number_buffer::@10/(signed byte) printf_number_buffer::padding#6 )
  (byte) printf_number_buffer::format_justify_left#13 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_justify_left#18 )
  (byte) printf_number_buffer::format_zero_padding#19 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_zero_padding#21 )
  (byte*) printf_number_buffer::buffer_digits#8 ← phi( printf_number_buffer::@10/(byte*) printf_number_buffer::buffer_digits#12 )
  (byte) printf_number_buffer::format_upper_case#3 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_upper_case#7 )
  to:printf_number_buffer::@4
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@20 printf_number_buffer::@4
  (signed byte) printf_number_buffer::padding#11 ← phi( printf_number_buffer::@20/(signed byte) printf_number_buffer::padding#14 printf_number_buffer::@4/(signed byte) printf_number_buffer::padding#15 )
  (byte) printf_number_buffer::format_justify_left#7 ← phi( printf_number_buffer::@20/(byte) printf_number_buffer::format_justify_left#10 printf_number_buffer::@4/(byte) printf_number_buffer::format_justify_left#11 )
  (byte) printf_number_buffer::format_zero_padding#10 ← phi( printf_number_buffer::@20/(byte) printf_number_buffer::format_zero_padding#15 printf_number_buffer::@4/(byte) printf_number_buffer::format_zero_padding#16 )
  (byte*) printf_number_buffer::buffer_digits#3 ← phi( printf_number_buffer::@20/(byte*) printf_number_buffer::buffer_digits#6 printf_number_buffer::@4/(byte*) printf_number_buffer::buffer_digits#7 )
  (to_nomodify byte*) cputs::s#1 ← (byte*) printf_number_buffer::buffer_digits#3
  call cputs 
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@5
  (signed byte) printf_number_buffer::padding#7 ← phi( printf_number_buffer::@5/(signed byte) printf_number_buffer::padding#11 )
  (byte) printf_number_buffer::format_justify_left#3 ← phi( printf_number_buffer::@5/(byte) printf_number_buffer::format_justify_left#7 )
  (byte) printf_number_buffer::format_zero_padding#4 ← phi( printf_number_buffer::@5/(byte) printf_number_buffer::format_zero_padding#10 )
  (bool~) printf_number_buffer::$32 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#4
  (bool~) printf_number_buffer::$14 ← ! (bool~) printf_number_buffer::$32
  (bool~) printf_number_buffer::$15 ← (byte) printf_number_buffer::format_justify_left#3 && (bool~) printf_number_buffer::$14
  (bool~) printf_number_buffer::$16 ← (bool~) printf_number_buffer::$15 && (signed byte) printf_number_buffer::padding#7
  (bool~) printf_number_buffer::$17 ← ! (bool~) printf_number_buffer::$16
  if((bool~) printf_number_buffer::$17) goto printf_number_buffer::@return
  to:printf_number_buffer::@12
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  (signed byte) printf_number_buffer::padding#17 ← phi( printf_number_buffer::@4/(signed byte) printf_number_buffer::padding#15 )
  (byte) printf_number_buffer::format_justify_left#15 ← phi( printf_number_buffer::@4/(byte) printf_number_buffer::format_justify_left#11 )
  (byte) printf_number_buffer::format_zero_padding#20 ← phi( printf_number_buffer::@4/(byte) printf_number_buffer::format_zero_padding#16 )
  (byte*) printf_number_buffer::buffer_digits#4 ← phi( printf_number_buffer::@4/(byte*) printf_number_buffer::buffer_digits#7 )
  (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#4
  call strupr 
  (byte*) strupr::return#2 ← (byte*) strupr::return#1
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@11
  (signed byte) printf_number_buffer::padding#14 ← phi( printf_number_buffer::@11/(signed byte) printf_number_buffer::padding#17 )
  (byte) printf_number_buffer::format_justify_left#10 ← phi( printf_number_buffer::@11/(byte) printf_number_buffer::format_justify_left#15 )
  (byte) printf_number_buffer::format_zero_padding#15 ← phi( printf_number_buffer::@11/(byte) printf_number_buffer::format_zero_padding#20 )
  (byte*) printf_number_buffer::buffer_digits#6 ← phi( printf_number_buffer::@11/(byte*) printf_number_buffer::buffer_digits#4 )
  to:printf_number_buffer::@5
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  (signed byte) printf_number_buffer::padding#8 ← phi( printf_number_buffer::@19/(signed byte) printf_number_buffer::padding#7 )
  (byte) printf_padding::pad#2 ← (byte) ' '
  (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#8
  call printf_padding 
  to:printf_number_buffer::@21
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@19 printf_number_buffer::@21
  return 
  to:@return
@2: scope:[]  from @1
  (byte*) toD0181_screen#0 ← (const nomodify byte*) SCREEN
  (byte*) toD0181_gfx#0 ← (const nomodify byte*) CANVAS2
  to:toD0181
toD0181: scope:[]  from @2
  (byte*) toD0181_gfx#1 ← phi( @2/(byte*) toD0181_gfx#0 )
  (byte*) toD0181_screen#1 ← phi( @2/(byte*) toD0181_screen#0 )
  (word~) toD0181_$7 ← (word)(byte*) toD0181_screen#1
  (number~) toD0181_$0 ← (word~) toD0181_$7 & (number) $3fff
  (number~) toD0181_$1 ← (number~) toD0181_$0 * (number) 4
  (number~) toD0181_$2 ← > (number~) toD0181_$1
  (byte~) toD0181_$3 ← > (word)(byte*) toD0181_gfx#1
  (number~) toD0181_$4 ← (byte~) toD0181_$3 / (number) 4
  (number~) toD0181_$5 ← (number~) toD0181_$4 & (number) $f
  (number~) toD0181_$6 ← (number~) toD0181_$2 | (number~) toD0181_$5
  (byte) toD0181_return#0 ← (number~) toD0181_$6
  to:toD0181_@return
toD0181_@return: scope:[]  from toD0181
  (byte) toD0181_return#2 ← phi( toD0181/(byte) toD0181_return#0 )
  (byte) toD0181_return#1 ← (byte) toD0181_return#2
  to:@4
@4: scope:[]  from toD0181_@return
  (byte) toD0181_return#3 ← phi( toD0181_@return/(byte) toD0181_return#1 )
  (byte~) $0 ← (byte) toD0181_return#3
  (volatile byte) canvas_show_memory ← (byte~) $0
  (volatile byte) canvas_show_flag ← (byte) 0
  to:@3

(void()) main()
main: scope:[main]  from @3
  (void*) memset::str#2 ← (void*)(const nomodify byte*) CONSOLE
  (byte) memset::c#2 ← (byte) ' '
  (word) memset::num#2 ← (number) $28*(number) $19
  call memset 
  (void*) memset::return#4 ← (void*) memset::return#1
  to:main::@13
main::@13: scope:[main]  from main
  (void*) memset::str#3 ← (void*)(const nomodify byte*) SCREEN
  (byte) memset::c#3 ← (number) 0
  (word) memset::num#3 ← (number) $28*(number) $19
  call memset 
  (void*) memset::return#5 ← (void*) memset::return#1
  to:main::@14
main::@14: scope:[main]  from main::@13
  (void*) memset::str#4 ← (void*)(const nomodify byte*) COLS
  (byte) memset::c#4 ← (const nomodify byte) BLACK
  (word) memset::num#4 ← (number) $28*(number) $19
  call memset 
  (void*) memset::return#6 ← (void*) memset::return#1
  to:main::@15
main::@15: scope:[main]  from main::@14
  (byte*) main::screen#0 ← (const nomodify byte*) SCREEN+(number) $c
  (byte*) main::cols#0 ← (const nomodify byte*) COLS+(number) $c
  (byte) main::y#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@15 main::@6
  (byte*) main::screen#6 ← phi( main::@15/(byte*) main::screen#0 main::@6/(byte*) main::screen#1 )
  (byte*) main::cols#6 ← phi( main::@15/(byte*) main::cols#0 main::@6/(byte*) main::cols#1 )
  (byte) main::y#2 ← phi( main::@15/(byte) main::y#0 main::@6/(byte) main::y#1 )
  (bool~) main::$7 ← (byte) main::y#2 < (number) $10
  if((bool~) main::$7) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  (byte*) main::screen#5 ← phi( main::@1/(byte*) main::screen#6 )
  (byte*) main::cols#5 ← phi( main::@1/(byte*) main::cols#6 )
  (byte) main::y#3 ← phi( main::@1/(byte) main::y#2 )
  (byte) main::c#0 ← (byte) main::y#3
  (byte) main::x#0 ← (byte) 0
  to:main::@4
main::@3: scope:[main]  from main::@1
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (const nomodify byte) BLACK
  call setup_irq 
  to:main::@16
main::@16: scope:[main]  from main::@3
  (byte) textcolor::color#0 ← (const nomodify byte) WHITE
  call textcolor 
  (byte) textcolor::return#2 ← (byte) textcolor::return#1
  to:main::@17
main::@17: scope:[main]  from main::@16
  (byte) main::p0_idx#0 ← (byte) $f0
  (number~) main::$5 ← (byte) main::p0_idx#0 + (number) $f
  (byte) main::p1_idx#0 ← (number~) main::$5
  (number~) main::$6 ← (byte) main::p0_idx#0 + (number) $aa
  (byte) main::p2_idx#0 ← (number~) main::$6
  (byte*) main::canvas#0 ← (const nomodify byte*) CANVAS1
  to:main::@7
main::@4: scope:[main]  from main::@2 main::@5
  (byte) main::y#5 ← phi( main::@2/(byte) main::y#3 main::@5/(byte) main::y#6 )
  (byte*) main::screen#4 ← phi( main::@2/(byte*) main::screen#5 main::@5/(byte*) main::screen#2 )
  (byte) main::c#3 ← phi( main::@2/(byte) main::c#0 main::@5/(byte) main::c#1 )
  (byte*) main::cols#4 ← phi( main::@2/(byte*) main::cols#5 main::@5/(byte*) main::cols#2 )
  (byte) main::x#2 ← phi( main::@2/(byte) main::x#0 main::@5/(byte) main::x#1 )
  (bool~) main::$8 ← (byte) main::x#2 < (number) $10
  if((bool~) main::$8) goto main::@5
  to:main::@6
main::@5: scope:[main]  from main::@4
  (byte) main::y#6 ← phi( main::@4/(byte) main::y#5 )
  (byte*) main::screen#2 ← phi( main::@4/(byte*) main::screen#4 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#3 )
  (byte) main::x#3 ← phi( main::@4/(byte) main::x#2 )
  (byte*) main::cols#2 ← phi( main::@4/(byte*) main::cols#4 )
  *((byte*) main::cols#2 + (byte) main::x#3) ← (const nomodify byte) WHITE
  *((byte*) main::screen#2 + (byte) main::x#3) ← (byte) main::c#2
  (byte) main::c#1 ← (byte) main::c#2 + (number) $10
  (byte) main::x#1 ← ++ (byte) main::x#3
  to:main::@4
main::@6: scope:[main]  from main::@4
  (byte) main::y#4 ← phi( main::@4/(byte) main::y#5 )
  (byte*) main::screen#3 ← phi( main::@4/(byte*) main::screen#4 )
  (byte*) main::cols#3 ← phi( main::@4/(byte*) main::cols#4 )
  (byte*) main::cols#1 ← (byte*) main::cols#3 + (number) $28
  (byte*) main::screen#1 ← (byte*) main::screen#3 + (number) $28
  (byte) main::y#1 ← ++ (byte) main::y#4
  to:main::@1
main::@7: scope:[main]  from main::@17 main::@29
  (byte*) main::canvas#11 ← phi( main::@17/(byte*) main::canvas#0 main::@29/(byte*) main::canvas#12 )
  (byte) main::p2_idx#8 ← phi( main::@17/(byte) main::p2_idx#0 main::@29/(byte) main::p2_idx#9 )
  (byte) main::p1_idx#8 ← phi( main::@17/(byte) main::p1_idx#0 main::@29/(byte) main::p1_idx#9 )
  (byte) main::p0_idx#11 ← phi( main::@17/(byte) main::p0_idx#0 main::@29/(byte) main::p0_idx#13 )
  (bool~) main::$23 ← (number) 0 != (number) 1
  if((bool~) main::$23) goto main::@8
  to:main::@return
main::@8: scope:[main]  from main::@7
  (byte*) main::canvas#10 ← phi( main::@7/(byte*) main::canvas#11 )
  (byte) main::p2_idx#7 ← phi( main::@7/(byte) main::p2_idx#8 )
  (byte) main::p1_idx#6 ← phi( main::@7/(byte) main::p1_idx#8 )
  (byte) main::p0_idx#8 ← phi( main::@7/(byte) main::p0_idx#11 )
  call clock_start 
  to:main::@18
main::@18: scope:[main]  from main::@8
  (byte*) main::canvas#9 ← phi( main::@8/(byte*) main::canvas#10 )
  (byte) main::p2_idx#6 ← phi( main::@8/(byte) main::p2_idx#7 )
  (byte) main::p1_idx#4 ← phi( main::@8/(byte) main::p1_idx#6 )
  (byte) main::p0_idx#5 ← phi( main::@8/(byte) main::p0_idx#8 )
  (void*) memset::str#5 ← (void*)(const nomodify byte*) LINE_BUFFER
  (byte) memset::c#5 ← (number) 0
  (word) memset::num#5 ← (number) $800
  call memset 
  (void*) memset::return#7 ← (void*) memset::return#1
  to:main::@19
main::@19: scope:[main]  from main::@18
  (byte*) main::canvas#8 ← phi( main::@18/(byte*) main::canvas#9 )
  (byte) main::p2_idx#4 ← phi( main::@18/(byte) main::p2_idx#6 )
  (byte) main::p1_idx#2 ← phi( main::@18/(byte) main::p1_idx#4 )
  (byte) main::p0_idx#2 ← phi( main::@18/(byte) main::p0_idx#5 )
  (byte) main::x0#0 ← *((const byte*) COSTAB + (byte) main::p0_idx#2)
  (byte) main::y0#0 ← *((const byte*) SINTAB + (byte) main::p0_idx#2)
  (byte) main::x1#0 ← *((const byte*) COSTAB + (byte) main::p1_idx#2)
  (byte) main::y1#0 ← *((const byte*) SINTAB + (byte) main::p1_idx#2)
  (byte*) line::canvas#0 ← (const nomodify byte*) LINE_BUFFER
  (byte) line::x1#0 ← (byte) main::x0#0
  (byte) line::y1#0 ← (byte) main::y0#0
  (byte) line::x2#0 ← (byte) main::x1#0
  (byte) line::y2#0 ← (byte) main::y1#0
  call line 
  to:main::@20
main::@20: scope:[main]  from main::@19
  (byte*) main::canvas#7 ← phi( main::@19/(byte*) main::canvas#8 )
  (byte) main::p1_idx#7 ← phi( main::@19/(byte) main::p1_idx#2 )
  (byte) main::p0_idx#9 ← phi( main::@19/(byte) main::p0_idx#2 )
  (byte) main::y0#2 ← phi( main::@19/(byte) main::y0#0 )
  (byte) main::x0#2 ← phi( main::@19/(byte) main::x0#0 )
  (byte) main::y1#1 ← phi( main::@19/(byte) main::y1#0 )
  (byte) main::x1#1 ← phi( main::@19/(byte) main::x1#0 )
  (byte) main::p2_idx#2 ← phi( main::@19/(byte) main::p2_idx#4 )
  (byte) main::x2#0 ← *((const byte*) COSTAB + (byte) main::p2_idx#2)
  (byte) main::y2#0 ← *((const byte*) SINTAB + (byte) main::p2_idx#2)
  (byte*) line::canvas#1 ← (const nomodify byte*) LINE_BUFFER
  (byte) line::x1#1 ← (byte) main::x1#1
  (byte) line::y1#1 ← (byte) main::y1#1
  (byte) line::x2#1 ← (byte) main::x2#0
  (byte) line::y2#1 ← (byte) main::y2#0
  call line 
  to:main::@21
main::@21: scope:[main]  from main::@20
  (byte*) main::canvas#6 ← phi( main::@20/(byte*) main::canvas#7 )
  (byte) main::p2_idx#5 ← phi( main::@20/(byte) main::p2_idx#2 )
  (byte) main::p1_idx#5 ← phi( main::@20/(byte) main::p1_idx#7 )
  (byte) main::p0_idx#6 ← phi( main::@20/(byte) main::p0_idx#9 )
  (byte) main::y0#1 ← phi( main::@20/(byte) main::y0#2 )
  (byte) main::x0#1 ← phi( main::@20/(byte) main::x0#2 )
  (byte) main::y2#1 ← phi( main::@20/(byte) main::y2#0 )
  (byte) main::x2#1 ← phi( main::@20/(byte) main::x2#0 )
  (byte*) line::canvas#2 ← (const nomodify byte*) LINE_BUFFER
  (byte) line::x1#2 ← (byte) main::x2#1
  (byte) line::y1#2 ← (byte) main::y2#1
  (byte) line::x2#2 ← (byte) main::x0#1
  (byte) line::y2#2 ← (byte) main::y0#1
  call line 
  to:main::@22
main::@22: scope:[main]  from main::@21
  (byte*) main::canvas#5 ← phi( main::@21/(byte*) main::canvas#6 )
  (byte) main::p2_idx#3 ← phi( main::@21/(byte) main::p2_idx#5 )
  (byte) main::p1_idx#3 ← phi( main::@21/(byte) main::p1_idx#5 )
  (byte) main::p0_idx#3 ← phi( main::@21/(byte) main::p0_idx#6 )
  (byte) main::p0_idx#1 ← ++ (byte) main::p0_idx#3
  (byte) main::p1_idx#1 ← ++ (byte) main::p1_idx#3
  (byte) main::p2_idx#1 ← ++ (byte) main::p2_idx#3
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) RED
  to:main::@9
main::@9: scope:[main]  from main::@22 main::@9
  (byte) main::p2_idx#23 ← phi( main::@22/(byte) main::p2_idx#1 main::@9/(byte) main::p2_idx#23 )
  (byte) main::p1_idx#23 ← phi( main::@22/(byte) main::p1_idx#1 main::@9/(byte) main::p1_idx#23 )
  (byte) main::p0_idx#23 ← phi( main::@22/(byte) main::p0_idx#1 main::@9/(byte) main::p0_idx#23 )
  (byte*) main::canvas#4 ← phi( main::@22/(byte*) main::canvas#5 main::@9/(byte*) main::canvas#4 )
  (bool~) main::$24 ← (number) 0 != (volatile byte) canvas_show_flag
  if((bool~) main::$24) goto main::@9
  to:main::@10
main::@10: scope:[main]  from main::@9
  (byte) main::p2_idx#22 ← phi( main::@9/(byte) main::p2_idx#23 )
  (byte) main::p1_idx#22 ← phi( main::@9/(byte) main::p1_idx#23 )
  (byte) main::p0_idx#22 ← phi( main::@9/(byte) main::p0_idx#23 )
  (byte*) main::canvas#2 ← phi( main::@9/(byte*) main::canvas#4 )
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK
  (byte*) eorfill::line_buffer#0 ← (const nomodify byte*) LINE_BUFFER
  (byte*) eorfill::canvas#0 ← (byte*) main::canvas#2
  call eorfill 
  to:main::@23
main::@23: scope:[main]  from main::@10
  (byte) main::p2_idx#21 ← phi( main::@10/(byte) main::p2_idx#22 )
  (byte) main::p1_idx#21 ← phi( main::@10/(byte) main::p1_idx#22 )
  (byte) main::p0_idx#21 ← phi( main::@10/(byte) main::p0_idx#22 )
  (byte*) main::canvas#3 ← phi( main::@10/(byte*) main::canvas#2 )
  (word~) main::$22 ← (byte*) main::canvas#3 ^ (const nomodify byte*) CANVAS1^(const nomodify byte*) CANVAS2
  (byte*) main::canvas#1 ← ((byte*)) (word~) main::$22
  (byte*) main::toD0181_screen#0 ← (const nomodify byte*) SCREEN
  (byte*) main::toD0181_gfx#0 ← (const nomodify byte*) CANVAS1
  to:main::toD0181
main::toD0181: scope:[main]  from main::@23
  (byte*) main::canvas#23 ← phi( main::@23/(byte*) main::canvas#1 )
  (byte) main::p2_idx#20 ← phi( main::@23/(byte) main::p2_idx#21 )
  (byte) main::p1_idx#20 ← phi( main::@23/(byte) main::p1_idx#21 )
  (byte) main::p0_idx#20 ← phi( main::@23/(byte) main::p0_idx#21 )
  (byte*) main::toD0181_gfx#1 ← phi( main::@23/(byte*) main::toD0181_gfx#0 )
  (byte*) main::toD0181_screen#1 ← phi( main::@23/(byte*) main::toD0181_screen#0 )
  (word~) main::toD0181_$7 ← (word)(byte*) main::toD0181_screen#1
  (number~) main::toD0181_$0 ← (word~) main::toD0181_$7 & (number) $3fff
  (number~) main::toD0181_$1 ← (number~) main::toD0181_$0 * (number) 4
  (number~) main::toD0181_$2 ← > (number~) main::toD0181_$1
  (byte~) main::toD0181_$3 ← > (word)(byte*) main::toD0181_gfx#1
  (number~) main::toD0181_$4 ← (byte~) main::toD0181_$3 / (number) 4
  (number~) main::toD0181_$5 ← (number~) main::toD0181_$4 & (number) $f
  (number~) main::toD0181_$6 ← (number~) main::toD0181_$2 | (number~) main::toD0181_$5
  (byte) main::toD0181_return#0 ← (number~) main::toD0181_$6
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  (byte*) main::canvas#22 ← phi( main::toD0181/(byte*) main::canvas#23 )
  (byte) main::p2_idx#19 ← phi( main::toD0181/(byte) main::p2_idx#20 )
  (byte) main::p1_idx#19 ← phi( main::toD0181/(byte) main::p1_idx#20 )
  (byte) main::p0_idx#19 ← phi( main::toD0181/(byte) main::p0_idx#20 )
  (byte) main::toD0181_return#2 ← phi( main::toD0181/(byte) main::toD0181_return#0 )
  (byte) main::toD0181_return#1 ← (byte) main::toD0181_return#2
  to:main::@11
main::@11: scope:[main]  from main::toD0181_@return
  (byte*) main::canvas#21 ← phi( main::toD0181_@return/(byte*) main::canvas#22 )
  (byte) main::p2_idx#18 ← phi( main::toD0181_@return/(byte) main::p2_idx#19 )
  (byte) main::p1_idx#18 ← phi( main::toD0181_@return/(byte) main::p1_idx#19 )
  (byte) main::p0_idx#17 ← phi( main::toD0181_@return/(byte) main::p0_idx#19 )
  (byte) main::toD0181_return#3 ← phi( main::toD0181_@return/(byte) main::toD0181_return#1 )
  (byte~) main::$15 ← (byte) main::toD0181_return#3
  (byte*) main::toD0182_screen#0 ← (const nomodify byte*) SCREEN
  (byte*) main::toD0182_gfx#0 ← (const nomodify byte*) CANVAS2
  to:main::toD0182
main::toD0182: scope:[main]  from main::@11
  (byte*) main::canvas#20 ← phi( main::@11/(byte*) main::canvas#21 )
  (byte) main::p2_idx#17 ← phi( main::@11/(byte) main::p2_idx#18 )
  (byte) main::p1_idx#17 ← phi( main::@11/(byte) main::p1_idx#18 )
  (byte) main::p0_idx#15 ← phi( main::@11/(byte) main::p0_idx#17 )
  (byte*) main::toD0182_gfx#1 ← phi( main::@11/(byte*) main::toD0182_gfx#0 )
  (byte*) main::toD0182_screen#1 ← phi( main::@11/(byte*) main::toD0182_screen#0 )
  (word~) main::toD0182_$7 ← (word)(byte*) main::toD0182_screen#1
  (number~) main::toD0182_$0 ← (word~) main::toD0182_$7 & (number) $3fff
  (number~) main::toD0182_$1 ← (number~) main::toD0182_$0 * (number) 4
  (number~) main::toD0182_$2 ← > (number~) main::toD0182_$1
  (byte~) main::toD0182_$3 ← > (word)(byte*) main::toD0182_gfx#1
  (number~) main::toD0182_$4 ← (byte~) main::toD0182_$3 / (number) 4
  (number~) main::toD0182_$5 ← (number~) main::toD0182_$4 & (number) $f
  (number~) main::toD0182_$6 ← (number~) main::toD0182_$2 | (number~) main::toD0182_$5
  (byte) main::toD0182_return#0 ← (number~) main::toD0182_$6
  to:main::toD0182_@return
main::toD0182_@return: scope:[main]  from main::toD0182
  (byte*) main::canvas#19 ← phi( main::toD0182/(byte*) main::canvas#20 )
  (byte) main::p2_idx#16 ← phi( main::toD0182/(byte) main::p2_idx#17 )
  (byte) main::p1_idx#16 ← phi( main::toD0182/(byte) main::p1_idx#17 )
  (byte) main::p0_idx#14 ← phi( main::toD0182/(byte) main::p0_idx#15 )
  (byte) main::toD0182_return#2 ← phi( main::toD0182/(byte) main::toD0182_return#0 )
  (byte) main::toD0182_return#1 ← (byte) main::toD0182_return#2
  to:main::@12
main::@12: scope:[main]  from main::toD0182_@return
  (byte*) main::canvas#18 ← phi( main::toD0182_@return/(byte*) main::canvas#19 )
  (byte) main::p2_idx#15 ← phi( main::toD0182_@return/(byte) main::p2_idx#16 )
  (byte) main::p1_idx#15 ← phi( main::toD0182_@return/(byte) main::p1_idx#16 )
  (byte) main::p0_idx#12 ← phi( main::toD0182_@return/(byte) main::p0_idx#14 )
  (byte) main::toD0182_return#3 ← phi( main::toD0182_@return/(byte) main::toD0182_return#1 )
  (byte~) main::$16 ← (byte) main::toD0182_return#3
  (byte~) main::$17 ← (byte~) main::$15 ^ (byte~) main::$16
  (volatile byte) canvas_show_memory ← (volatile byte) canvas_show_memory ^ (byte~) main::$17
  (volatile byte) canvas_show_flag ← (number) 1
  call clock 
  (dword) clock::return#2 ← (dword) clock::return#1
  to:main::@24
main::@24: scope:[main]  from main::@12
  (byte*) main::canvas#17 ← phi( main::@12/(byte*) main::canvas#18 )
  (byte) main::p2_idx#14 ← phi( main::@12/(byte) main::p2_idx#15 )
  (byte) main::p1_idx#14 ← phi( main::@12/(byte) main::p1_idx#15 )
  (byte) main::p0_idx#10 ← phi( main::@12/(byte) main::p0_idx#12 )
  (dword) clock::return#4 ← phi( main::@12/(dword) clock::return#2 )
  (dword~) main::$18 ← (dword) clock::return#4
  (dword~) main::$19 ← (dword~) main::$18 - (const nomodify dword) CLOCKS_PER_INIT
  (dword) main::cyclecount#0 ← (dword~) main::$19
  (byte) gotoxy::x#2 ← (number) 0
  (byte) gotoxy::y#2 ← (number) $18
  call gotoxy 
  to:main::@25
main::@25: scope:[main]  from main::@24
  (byte*) main::canvas#16 ← phi( main::@24/(byte*) main::canvas#17 )
  (byte) main::p2_idx#13 ← phi( main::@24/(byte) main::p2_idx#14 )
  (byte) main::p1_idx#13 ← phi( main::@24/(byte) main::p1_idx#14 )
  (dword) main::cyclecount#4 ← phi( main::@24/(dword) main::cyclecount#0 )
  (byte) main::p0_idx#7 ← phi( main::@24/(byte) main::p0_idx#10 )
  (to_nomodify byte*) cputs::s#2 ← (const byte*) main::s
  call cputs 
  to:main::@26
main::@26: scope:[main]  from main::@25
  (byte*) main::canvas#15 ← phi( main::@25/(byte*) main::canvas#16 )
  (byte) main::p2_idx#12 ← phi( main::@25/(byte) main::p2_idx#13 )
  (byte) main::p1_idx#12 ← phi( main::@25/(byte) main::p1_idx#13 )
  (dword) main::cyclecount#3 ← phi( main::@25/(dword) main::cyclecount#4 )
  (byte) main::p0_idx#4 ← phi( main::@25/(byte) main::p0_idx#7 )
  (byte) printf_uchar::uvalue#0 ← (byte) main::p0_idx#4
  (byte) printf_uchar::format_min_length#0 ← (byte) 2
  (byte) printf_uchar::format_justify_left#0 ← (byte) 0
  (byte) printf_uchar::format_sign_always#0 ← (byte) 0
  (byte) printf_uchar::format_zero_padding#0 ← (byte) 1
  (byte) printf_uchar::format_upper_case#0 ← (byte) 0
  (byte) printf_uchar::format_radix#0 ← (const byte) HEXADECIMAL
  call printf_uchar 
  to:main::@27
main::@27: scope:[main]  from main::@26
  (byte*) main::canvas#14 ← phi( main::@26/(byte*) main::canvas#15 )
  (byte) main::p2_idx#11 ← phi( main::@26/(byte) main::p2_idx#12 )
  (byte) main::p1_idx#11 ← phi( main::@26/(byte) main::p1_idx#12 )
  (byte) main::p0_idx#18 ← phi( main::@26/(byte) main::p0_idx#4 )
  (dword) main::cyclecount#2 ← phi( main::@26/(dword) main::cyclecount#3 )
  (to_nomodify byte*) cputs::s#3 ← (const byte*) main::s1
  call cputs 
  to:main::@28
main::@28: scope:[main]  from main::@27
  (byte*) main::canvas#13 ← phi( main::@27/(byte*) main::canvas#14 )
  (byte) main::p2_idx#10 ← phi( main::@27/(byte) main::p2_idx#11 )
  (byte) main::p1_idx#10 ← phi( main::@27/(byte) main::p1_idx#11 )
  (byte) main::p0_idx#16 ← phi( main::@27/(byte) main::p0_idx#18 )
  (dword) main::cyclecount#1 ← phi( main::@27/(dword) main::cyclecount#2 )
  (dword) printf_ulong::uvalue#0 ← (dword) main::cyclecount#1
  (byte) printf_ulong::format_min_length#0 ← (byte) 6
  (byte) printf_ulong::format_justify_left#0 ← (byte) 0
  (byte) printf_ulong::format_sign_always#0 ← (byte) 0
  (byte) printf_ulong::format_zero_padding#0 ← (byte) 0
  (byte) printf_ulong::format_upper_case#0 ← (byte) 0
  (byte) printf_ulong::format_radix#0 ← (const byte) DECIMAL
  call printf_ulong 
  to:main::@29
main::@29: scope:[main]  from main::@28
  (byte*) main::canvas#12 ← phi( main::@28/(byte*) main::canvas#13 )
  (byte) main::p2_idx#9 ← phi( main::@28/(byte) main::p2_idx#10 )
  (byte) main::p1_idx#9 ← phi( main::@28/(byte) main::p1_idx#10 )
  (byte) main::p0_idx#13 ← phi( main::@28/(byte) main::p0_idx#16 )
  to:main::@7
main::@return: scope:[main]  from main::@7
  return 
  to:@return

(void()) setup_irq()
setup_irq: scope:[setup_irq]  from main::@3
  asm { sei  }
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (number) $7f
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(number) 8
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER
  *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1()
  asm { cli  }
  to:setup_irq::@return
setup_irq::@return: scope:[setup_irq]  from setup_irq
  return 
  to:@return

interrupt(KERNEL_MIN)(void()) irq_bottom_1()
irq_bottom_1: scope:[irq_bottom_1]  from
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) WHITE
  (byte*) irq_bottom_1::toD0181_screen#0 ← (const nomodify byte*) CONSOLE
  (byte*) irq_bottom_1::toD0181_gfx#0 ← (const nomodify byte*) PETSCII
  to:irq_bottom_1::toD0181
irq_bottom_1::toD0181: scope:[irq_bottom_1]  from irq_bottom_1
  (byte*) irq_bottom_1::toD0181_gfx#1 ← phi( irq_bottom_1/(byte*) irq_bottom_1::toD0181_gfx#0 )
  (byte*) irq_bottom_1::toD0181_screen#1 ← phi( irq_bottom_1/(byte*) irq_bottom_1::toD0181_screen#0 )
  (word~) irq_bottom_1::toD0181_$7 ← (word)(byte*) irq_bottom_1::toD0181_screen#1
  (number~) irq_bottom_1::toD0181_$0 ← (word~) irq_bottom_1::toD0181_$7 & (number) $3fff
  (number~) irq_bottom_1::toD0181_$1 ← (number~) irq_bottom_1::toD0181_$0 * (number) 4
  (number~) irq_bottom_1::toD0181_$2 ← > (number~) irq_bottom_1::toD0181_$1
  (byte~) irq_bottom_1::toD0181_$3 ← > (word)(byte*) irq_bottom_1::toD0181_gfx#1
  (number~) irq_bottom_1::toD0181_$4 ← (byte~) irq_bottom_1::toD0181_$3 / (number) 4
  (number~) irq_bottom_1::toD0181_$5 ← (number~) irq_bottom_1::toD0181_$4 & (number) $f
  (number~) irq_bottom_1::toD0181_$6 ← (number~) irq_bottom_1::toD0181_$2 | (number~) irq_bottom_1::toD0181_$5
  (byte) irq_bottom_1::toD0181_return#0 ← (number~) irq_bottom_1::toD0181_$6
  to:irq_bottom_1::toD0181_@return
irq_bottom_1::toD0181_@return: scope:[irq_bottom_1]  from irq_bottom_1::toD0181
  (byte) irq_bottom_1::toD0181_return#2 ← phi( irq_bottom_1::toD0181/(byte) irq_bottom_1::toD0181_return#0 )
  (byte) irq_bottom_1::toD0181_return#1 ← (byte) irq_bottom_1::toD0181_return#2
  to:irq_bottom_1::@1
irq_bottom_1::@1: scope:[irq_bottom_1]  from irq_bottom_1::toD0181_@return
  (byte) irq_bottom_1::toD0181_return#3 ← phi( irq_bottom_1::toD0181_@return/(byte) irq_bottom_1::toD0181_return#1 )
  (byte~) irq_bottom_1::$0 ← (byte) irq_bottom_1::toD0181_return#3
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (byte~) irq_bottom_1::$0
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM
  *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_KEYBOARD)(void()) irq_bottom_2()
  to:irq_bottom_1::@return
irq_bottom_1::@return: scope:[irq_bottom_1]  from irq_bottom_1::@1
  return 
  to:@return

interrupt(KERNEL_KEYBOARD)(void()) irq_bottom_2()
irq_bottom_2: scope:[irq_bottom_2]  from
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK
  call kbhit 
  (byte) kbhit::return#2 ← (byte) kbhit::return#1
  to:irq_bottom_2::@3
irq_bottom_2::@3: scope:[irq_bottom_2]  from irq_bottom_2
  (byte) kbhit::return#4 ← phi( irq_bottom_2/(byte) kbhit::return#2 )
  (byte~) irq_bottom_2::$0 ← (byte) kbhit::return#4
  (bool~) irq_bottom_2::$3 ← (number) 0 != (byte~) irq_bottom_2::$0
  (bool~) irq_bottom_2::$1 ← ! (bool~) irq_bottom_2::$3
  (bool~) irq_bottom_2::$2 ← ! (bool~) irq_bottom_2::$1
  if((bool~) irq_bottom_2::$2) goto irq_bottom_2::@1
  to:irq_bottom_2::@2
irq_bottom_2::@1: scope:[irq_bottom_2]  from irq_bottom_2::@2 irq_bottom_2::@3
  (volatile byte) canvas_show_flag ← (number) 0
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(number) 8
  *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1()
  to:irq_bottom_2::@return
irq_bottom_2::@2: scope:[irq_bottom_2]  from irq_bottom_2::@3
  *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (volatile byte) canvas_show_memory
  to:irq_bottom_2::@1
irq_bottom_2::@return: scope:[irq_bottom_2]  from irq_bottom_2::@1
  return 
  to:@return

(void()) line((byte*) line::canvas , (byte) line::x1 , (byte) line::y1 , (byte) line::x2 , (byte) line::y2)
line: scope:[line]  from main::@19 main::@20 main::@21
  (byte) line::y2#8 ← phi( main::@19/(byte) line::y2#0 main::@20/(byte) line::y2#1 main::@21/(byte) line::y2#2 )
  (byte) line::x2#3 ← phi( main::@19/(byte) line::x2#0 main::@20/(byte) line::x2#1 main::@21/(byte) line::x2#2 )
  (byte) line::y1#3 ← phi( main::@19/(byte) line::y1#0 main::@20/(byte) line::y1#1 main::@21/(byte) line::y1#2 )
  (byte) line::x1#3 ← phi( main::@19/(byte) line::x1#0 main::@20/(byte) line::x1#1 main::@21/(byte) line::x1#2 )
  (byte) line::x#0 ← (byte) line::x1#3
  (byte) line::y#0 ← (byte) line::y1#3
  (byte~) line::$0 ← (byte) line::x2#3 - (byte) line::x1#3
  (byte) abs_u8::u#0 ← (byte~) line::$0
  call abs_u8 
  (byte) abs_u8::return#0 ← (byte) abs_u8::return#4
  to:line::@13
line::@13: scope:[line]  from line
  (byte) line::x#21 ← phi( line/(byte) line::x#0 )
  (byte) line::y#22 ← phi( line/(byte) line::y#0 )
  (byte) line::x1#5 ← phi( line/(byte) line::x1#3 )
  (byte) line::x2#6 ← phi( line/(byte) line::x2#3 )
  (byte) line::y1#4 ← phi( line/(byte) line::y1#3 )
  (byte) line::y2#4 ← phi( line/(byte) line::y2#8 )
  (byte) abs_u8::return#5 ← phi( line/(byte) abs_u8::return#0 )
  (byte~) line::$1 ← (byte) abs_u8::return#5
  (byte) line::dx#0 ← (byte~) line::$1
  (byte~) line::$2 ← (byte) line::y2#4 - (byte) line::y1#4
  (byte) abs_u8::u#1 ← (byte~) line::$2
  call abs_u8 
  (byte) abs_u8::return#1 ← (byte) abs_u8::return#4
  to:line::@14
line::@14: scope:[line]  from line::@13
  (byte) line::x#20 ← phi( line::@13/(byte) line::x#21 )
  (byte) line::y#21 ← phi( line::@13/(byte) line::y#22 )
  (byte) line::dx#15 ← phi( line::@13/(byte) line::dx#0 )
  (byte) line::y1#6 ← phi( line::@13/(byte) line::y1#4 )
  (byte) line::y2#9 ← phi( line::@13/(byte) line::y2#4 )
  (byte) line::x1#4 ← phi( line::@13/(byte) line::x1#5 )
  (byte) line::x2#4 ← phi( line::@13/(byte) line::x2#6 )
  (byte) abs_u8::return#6 ← phi( line::@13/(byte) abs_u8::return#1 )
  (byte~) line::$3 ← (byte) abs_u8::return#6
  (byte) line::dy#0 ← (byte~) line::$3
  (byte~) line::$4 ← (byte) line::x2#4 - (byte) line::x1#4
  (byte) sgn_u8::u#0 ← (byte~) line::$4
  call sgn_u8 
  (byte) sgn_u8::return#0 ← (byte) sgn_u8::return#4
  to:line::@15
line::@15: scope:[line]  from line::@14
  (byte) line::x2#15 ← phi( line::@14/(byte) line::x2#4 )
  (byte) line::x#18 ← phi( line::@14/(byte) line::x#20 )
  (byte) line::y#19 ← phi( line::@14/(byte) line::y#21 )
  (byte) line::dy#11 ← phi( line::@14/(byte) line::dy#0 )
  (byte) line::dx#11 ← phi( line::@14/(byte) line::dx#15 )
  (byte) line::y1#5 ← phi( line::@14/(byte) line::y1#6 )
  (byte) line::y2#5 ← phi( line::@14/(byte) line::y2#9 )
  (byte) sgn_u8::return#5 ← phi( line::@14/(byte) sgn_u8::return#0 )
  (byte~) line::$5 ← (byte) sgn_u8::return#5
  (byte) line::sx#0 ← (byte~) line::$5
  (byte~) line::$6 ← (byte) line::y2#5 - (byte) line::y1#5
  (byte) sgn_u8::u#1 ← (byte~) line::$6
  call sgn_u8 
  (byte) sgn_u8::return#1 ← (byte) sgn_u8::return#4
  to:line::@16
line::@16: scope:[line]  from line::@15
  (byte) line::x2#13 ← phi( line::@15/(byte) line::x2#15 )
  (byte) line::x#14 ← phi( line::@15/(byte) line::x#18 )
  (byte) line::y2#10 ← phi( line::@15/(byte) line::y2#5 )
  (byte) line::y#12 ← phi( line::@15/(byte) line::y#19 )
  (byte) line::dy#6 ← phi( line::@15/(byte) line::dy#11 )
  (byte) line::dx#6 ← phi( line::@15/(byte) line::dx#11 )
  (byte) line::sx#1 ← phi( line::@15/(byte) line::sx#0 )
  (byte) sgn_u8::return#6 ← phi( line::@15/(byte) sgn_u8::return#1 )
  (byte~) line::$7 ← (byte) sgn_u8::return#6
  (byte) line::sy#0 ← (byte~) line::$7
  (bool~) line::$8 ← (byte) line::sx#1 == (number) $ff
  (bool~) line::$9 ← ! (bool~) line::$8
  if((bool~) line::$9) goto line::@1
  to:line::@3
line::@1: scope:[line]  from line::@16 line::@3
  (byte) line::x2#12 ← phi( line::@16/(byte) line::x2#13 line::@3/(byte) line::x2#14 )
  (byte) line::y2#16 ← phi( line::@16/(byte) line::y2#10 line::@3/(byte) line::y2#3 )
  (byte) line::sx#13 ← phi( line::@16/(byte) line::sx#1 line::@3/(byte) line::sx#15 )
  (byte) line::sy#9 ← phi( line::@16/(byte) line::sy#0 line::@3/(byte) line::sy#12 )
  (byte) line::y#13 ← phi( line::@16/(byte) line::y#12 line::@3/(byte) line::y#1 )
  (byte) line::x#9 ← phi( line::@16/(byte) line::x#14 line::@3/(byte) line::x#15 )
  (byte) line::dy#1 ← phi( line::@16/(byte) line::dy#6 line::@3/(byte) line::dy#7 )
  (byte) line::dx#1 ← phi( line::@16/(byte) line::dx#6 line::@3/(byte) line::dx#7 )
  (bool~) line::$10 ← (byte) line::dx#1 > (byte) line::dy#1
  if((bool~) line::$10) goto line::@2
  to:line::@4
line::@3: scope:[line]  from line::@16
  (byte) line::x2#14 ← phi( line::@16/(byte) line::x2#13 )
  (byte) line::sx#15 ← phi( line::@16/(byte) line::sx#1 )
  (byte) line::sy#12 ← phi( line::@16/(byte) line::sy#0 )
  (byte) line::x#15 ← phi( line::@16/(byte) line::x#14 )
  (byte) line::dy#7 ← phi( line::@16/(byte) line::dy#6 )
  (byte) line::dx#7 ← phi( line::@16/(byte) line::dx#6 )
  (byte) line::y2#6 ← phi( line::@16/(byte) line::y2#10 )
  (byte) line::y#4 ← phi( line::@16/(byte) line::y#12 )
  (byte) line::y#1 ← ++ (byte) line::y#4
  (byte) line::y2#3 ← ++ (byte) line::y2#6
  to:line::@1
line::@2: scope:[line]  from line::@1
  (byte) line::sy#13 ← phi( line::@1/(byte) line::sy#9 )
  (byte) line::x2#11 ← phi( line::@1/(byte) line::x2#12 )
  (byte) line::dy#14 ← phi( line::@1/(byte) line::dy#1 )
  (byte) line::sx#11 ← phi( line::@1/(byte) line::sx#13 )
  (byte) line::y#16 ← phi( line::@1/(byte) line::y#13 )
  (byte) line::x#11 ← phi( line::@1/(byte) line::x#9 )
  (byte) line::dx#2 ← phi( line::@1/(byte) line::dx#1 )
  (number~) line::$17 ← (byte) line::dx#2 / (number) 2
  (byte) line::e1#0 ← (number~) line::$17
  to:line::@8
line::@4: scope:[line]  from line::@1
  (byte) line::sx#9 ← phi( line::@1/(byte) line::sx#13 )
  (byte) line::y2#15 ← phi( line::@1/(byte) line::y2#16 )
  (byte) line::dx#12 ← phi( line::@1/(byte) line::dx#1 )
  (byte) line::sy#6 ← phi( line::@1/(byte) line::sy#9 )
  (byte) line::y#5 ← phi( line::@1/(byte) line::y#13 )
  (byte) line::x#3 ← phi( line::@1/(byte) line::x#9 )
  (byte) line::dy#2 ← phi( line::@1/(byte) line::dy#1 )
  (number~) line::$11 ← (byte) line::dy#2 / (number) 2
  (byte) line::e#0 ← (number~) line::$11
  (byte) line::plot1_x#0 ← (byte) line::x#3
  (byte) line::plot1_y#0 ← (byte) line::y#5
  to:line::plot1
line::plot1: scope:[line]  from line::@4
  (byte) line::sx#7 ← phi( line::@4/(byte) line::sx#9 )
  (byte) line::x#17 ← phi( line::@4/(byte) line::x#3 )
  (byte) line::y2#13 ← phi( line::@4/(byte) line::y2#15 )
  (byte) line::dy#9 ← phi( line::@4/(byte) line::dy#2 )
  (byte) line::dx#9 ← phi( line::@4/(byte) line::dx#12 )
  (byte) line::e#6 ← phi( line::@4/(byte) line::e#0 )
  (byte) line::sy#4 ← phi( line::@4/(byte) line::sy#6 )
  (byte) line::y#14 ← phi( line::@4/(byte) line::y#5 )
  (byte) line::plot1_y#1 ← phi( line::@4/(byte) line::plot1_y#0 )
  (byte) line::plot1_x#1 ← phi( line::@4/(byte) line::plot1_x#0 )
  (number~) line::plot1_$0 ← (byte) line::plot1_x#1 / (number) 8
  (number~) line::plot1_$2 ← (number~) line::plot1_$0 * (const byte) SIZEOF_POINTER
  (byte*) line::plot1_column#0 ← *((const byte**) plot_column + (number~) line::plot1_$2)
  (number~) line::plot1_$1 ← (byte) line::plot1_x#1 & (number) 7
  *((byte*) line::plot1_column#0 + (byte) line::plot1_y#1) ← *((byte*) line::plot1_column#0 + (byte) line::plot1_y#1) | *((const byte*) plot_bit + (number~) line::plot1_$1)
  to:line::@5
line::@5: scope:[line]  from line::@6 line::plot1
  (byte) line::sx#4 ← phi( line::@6/(byte) line::sx#6 line::plot1/(byte) line::sx#7 )
  (byte) line::x#10 ← phi( line::@6/(byte) line::x#16 line::plot1/(byte) line::x#17 )
  (byte) line::y2#11 ← phi( line::@6/(byte) line::y2#7 line::plot1/(byte) line::y2#13 )
  (byte) line::dy#3 ← phi( line::@6/(byte) line::dy#8 line::plot1/(byte) line::dy#9 )
  (byte) line::dx#3 ← phi( line::@6/(byte) line::dx#8 line::plot1/(byte) line::dx#9 )
  (byte) line::e#3 ← phi( line::@6/(byte) line::e#5 line::plot1/(byte) line::e#6 )
  (byte) line::sy#1 ← phi( line::@6/(byte) line::sy#3 line::plot1/(byte) line::sy#4 )
  (byte) line::y#6 ← phi( line::@6/(byte) line::y#7 line::plot1/(byte) line::y#14 )
  (byte) line::y#2 ← (byte) line::y#6 + (byte) line::sy#1
  (byte) line::e#1 ← (byte) line::e#3 + (byte) line::dx#3
  (bool~) line::$13 ← (byte) line::dy#3 < (byte) line::e#1
  (bool~) line::$14 ← ! (bool~) line::$13
  if((bool~) line::$14) goto line::@6
  to:line::@7
line::@6: scope:[line]  from line::@5 line::plot2
  (byte) line::sx#6 ← phi( line::@5/(byte) line::sx#4 line::plot2/(byte) line::sx#10 )
  (byte) line::x#16 ← phi( line::@5/(byte) line::x#10 line::plot2/(byte) line::x#19 )
  (byte) line::dy#8 ← phi( line::@5/(byte) line::dy#3 line::plot2/(byte) line::dy#12 )
  (byte) line::dx#8 ← phi( line::@5/(byte) line::dx#3 line::plot2/(byte) line::dx#13 )
  (byte) line::e#5 ← phi( line::@5/(byte) line::e#1 line::plot2/(byte) line::e#7 )
  (byte) line::sy#3 ← phi( line::@5/(byte) line::sy#1 line::plot2/(byte) line::sy#7 )
  (byte) line::y2#7 ← phi( line::@5/(byte) line::y2#11 line::plot2/(byte) line::y2#12 )
  (byte) line::y#7 ← phi( line::@5/(byte) line::y#2 line::plot2/(byte) line::y#15 )
  (bool~) line::$16 ← (byte) line::y#7 != (byte) line::y2#7
  if((bool~) line::$16) goto line::@5
  to:line::@return
line::@7: scope:[line]  from line::@5
  (byte) line::dx#16 ← phi( line::@5/(byte) line::dx#3 )
  (byte) line::sy#10 ← phi( line::@5/(byte) line::sy#1 )
  (byte) line::y2#14 ← phi( line::@5/(byte) line::y2#11 )
  (byte) line::y#8 ← phi( line::@5/(byte) line::y#2 )
  (byte) line::dy#4 ← phi( line::@5/(byte) line::dy#3 )
  (byte) line::e#4 ← phi( line::@5/(byte) line::e#1 )
  (byte) line::sx#2 ← phi( line::@5/(byte) line::sx#4 )
  (byte) line::x#4 ← phi( line::@5/(byte) line::x#10 )
  (byte) line::x#1 ← (byte) line::x#4 + (byte) line::sx#2
  (byte) line::e#2 ← (byte) line::e#4 - (byte) line::dy#4
  (byte) line::plot2_x#0 ← (byte) line::x#1
  (byte) line::plot2_y#0 ← (byte) line::y#8
  to:line::plot2
line::plot2: scope:[line]  from line::@7
  (byte) line::sx#10 ← phi( line::@7/(byte) line::sx#2 )
  (byte) line::x#19 ← phi( line::@7/(byte) line::x#1 )
  (byte) line::dy#12 ← phi( line::@7/(byte) line::dy#4 )
  (byte) line::dx#13 ← phi( line::@7/(byte) line::dx#16 )
  (byte) line::e#7 ← phi( line::@7/(byte) line::e#2 )
  (byte) line::sy#7 ← phi( line::@7/(byte) line::sy#10 )
  (byte) line::y2#12 ← phi( line::@7/(byte) line::y2#14 )
  (byte) line::y#15 ← phi( line::@7/(byte) line::y#8 )
  (byte) line::plot2_y#1 ← phi( line::@7/(byte) line::plot2_y#0 )
  (byte) line::plot2_x#1 ← phi( line::@7/(byte) line::plot2_x#0 )
  (number~) line::plot2_$0 ← (byte) line::plot2_x#1 / (number) 8
  (number~) line::plot2_$2 ← (number~) line::plot2_$0 * (const byte) SIZEOF_POINTER
  (byte*) line::plot2_column#0 ← *((const byte**) plot_column + (number~) line::plot2_$2)
  (number~) line::plot2_$1 ← (byte) line::plot2_x#1 & (number) 7
  *((byte*) line::plot2_column#0 + (byte) line::plot2_y#1) ← *((byte*) line::plot2_column#0 + (byte) line::plot2_y#1) | *((const byte*) plot_bit + (number~) line::plot2_$1)
  to:line::@6
line::@8: scope:[line]  from line::@2 line::@9
  (byte) line::sy#11 ← phi( line::@2/(byte) line::sy#13 line::@9/(byte) line::sy#14 )
  (byte) line::x2#10 ← phi( line::@2/(byte) line::x2#11 line::@9/(byte) line::x2#5 )
  (byte) line::dx#14 ← phi( line::@2/(byte) line::dx#2 line::@9/(byte) line::dx#17 )
  (byte) line::dy#13 ← phi( line::@2/(byte) line::dy#14 line::@9/(byte) line::dy#15 )
  (byte) line::e1#6 ← phi( line::@2/(byte) line::e1#0 line::@9/(byte) line::e1#7 )
  (byte) line::sx#8 ← phi( line::@2/(byte) line::sx#11 line::@9/(byte) line::sx#12 )
  (byte) line::y#9 ← phi( line::@2/(byte) line::y#16 line::@9/(byte) line::y#17 )
  (byte) line::x#5 ← phi( line::@2/(byte) line::x#11 line::@9/(byte) line::x#7 )
  (byte) line::plot3_x#0 ← (byte) line::x#5
  (byte) line::plot3_y#0 ← (byte) line::y#9
  to:line::plot3
line::plot3: scope:[line]  from line::@8
  (byte) line::sy#8 ← phi( line::@8/(byte) line::sy#11 )
  (byte) line::y#20 ← phi( line::@8/(byte) line::y#9 )
  (byte) line::x2#9 ← phi( line::@8/(byte) line::x2#10 )
  (byte) line::dx#10 ← phi( line::@8/(byte) line::dx#14 )
  (byte) line::dy#10 ← phi( line::@8/(byte) line::dy#13 )
  (byte) line::e1#5 ← phi( line::@8/(byte) line::e1#6 )
  (byte) line::sx#5 ← phi( line::@8/(byte) line::sx#8 )
  (byte) line::x#12 ← phi( line::@8/(byte) line::x#5 )
  (byte) line::plot3_y#1 ← phi( line::@8/(byte) line::plot3_y#0 )
  (byte) line::plot3_x#1 ← phi( line::@8/(byte) line::plot3_x#0 )
  (number~) line::plot3_$0 ← (byte) line::plot3_x#1 / (number) 8
  (number~) line::plot3_$2 ← (number~) line::plot3_$0 * (const byte) SIZEOF_POINTER
  (byte*) line::plot3_column#0 ← *((const byte**) plot_column + (number~) line::plot3_$2)
  (number~) line::plot3_$1 ← (byte) line::plot3_x#1 & (number) 7
  *((byte*) line::plot3_column#0 + (byte) line::plot3_y#1) ← *((byte*) line::plot3_column#0 + (byte) line::plot3_y#1) | *((const byte*) plot_bit + (number~) line::plot3_$1)
  to:line::@12
line::@12: scope:[line]  from line::plot3
  (byte) line::sy#5 ← phi( line::plot3/(byte) line::sy#8 )
  (byte) line::y#18 ← phi( line::plot3/(byte) line::y#20 )
  (byte) line::x2#8 ← phi( line::plot3/(byte) line::x2#9 )
  (byte) line::dx#4 ← phi( line::plot3/(byte) line::dx#10 )
  (byte) line::dy#5 ← phi( line::plot3/(byte) line::dy#10 )
  (byte) line::e1#3 ← phi( line::plot3/(byte) line::e1#5 )
  (byte) line::sx#3 ← phi( line::plot3/(byte) line::sx#5 )
  (byte) line::x#6 ← phi( line::plot3/(byte) line::x#12 )
  (byte) line::x#2 ← (byte) line::x#6 + (byte) line::sx#3
  (byte) line::e1#1 ← (byte) line::e1#3 + (byte) line::dy#5
  (bool~) line::$19 ← (byte) line::dx#4 < (byte) line::e1#1
  (bool~) line::$20 ← ! (bool~) line::$19
  if((bool~) line::$20) goto line::@9
  to:line::@10
line::@9: scope:[line]  from line::@10 line::@12
  (byte) line::sy#14 ← phi( line::@10/(byte) line::sy#2 line::@12/(byte) line::sy#5 )
  (byte) line::dx#17 ← phi( line::@10/(byte) line::dx#5 line::@12/(byte) line::dx#4 )
  (byte) line::dy#15 ← phi( line::@10/(byte) line::dy#16 line::@12/(byte) line::dy#5 )
  (byte) line::e1#7 ← phi( line::@10/(byte) line::e1#2 line::@12/(byte) line::e1#1 )
  (byte) line::sx#12 ← phi( line::@10/(byte) line::sx#14 line::@12/(byte) line::sx#3 )
  (byte) line::y#17 ← phi( line::@10/(byte) line::y#3 line::@12/(byte) line::y#18 )
  (byte) line::x2#5 ← phi( line::@10/(byte) line::x2#7 line::@12/(byte) line::x2#8 )
  (byte) line::x#7 ← phi( line::@10/(byte) line::x#13 line::@12/(byte) line::x#2 )
  (bool~) line::$21 ← (byte) line::x#7 != (byte) line::x2#5
  if((bool~) line::$21) goto line::@8
  to:line::@11
line::@10: scope:[line]  from line::@12
  (byte) line::dy#16 ← phi( line::@12/(byte) line::dy#5 )
  (byte) line::sx#14 ← phi( line::@12/(byte) line::sx#3 )
  (byte) line::x2#7 ← phi( line::@12/(byte) line::x2#8 )
  (byte) line::x#13 ← phi( line::@12/(byte) line::x#2 )
  (byte) line::dx#5 ← phi( line::@12/(byte) line::dx#4 )
  (byte) line::e1#4 ← phi( line::@12/(byte) line::e1#1 )
  (byte) line::sy#2 ← phi( line::@12/(byte) line::sy#5 )
  (byte) line::y#10 ← phi( line::@12/(byte) line::y#18 )
  (byte) line::y#3 ← (byte) line::y#10 + (byte) line::sy#2
  (byte) line::e1#2 ← (byte) line::e1#4 - (byte) line::dx#5
  to:line::@9
line::@11: scope:[line]  from line::@9
  (byte) line::y#11 ← phi( line::@9/(byte) line::y#17 )
  (byte) line::x#8 ← phi( line::@9/(byte) line::x#7 )
  (byte) line::plot4_x#0 ← (byte) line::x#8
  (byte) line::plot4_y#0 ← (byte) line::y#11
  to:line::plot4
line::plot4: scope:[line]  from line::@11
  (byte) line::plot4_y#1 ← phi( line::@11/(byte) line::plot4_y#0 )
  (byte) line::plot4_x#1 ← phi( line::@11/(byte) line::plot4_x#0 )
  (number~) line::plot4_$0 ← (byte) line::plot4_x#1 / (number) 8
  (number~) line::plot4_$2 ← (number~) line::plot4_$0 * (const byte) SIZEOF_POINTER
  (byte*) line::plot4_column#0 ← *((const byte**) plot_column + (number~) line::plot4_$2)
  (number~) line::plot4_$1 ← (byte) line::plot4_x#1 & (number) 7
  *((byte*) line::plot4_column#0 + (byte) line::plot4_y#1) ← *((byte*) line::plot4_column#0 + (byte) line::plot4_y#1) | *((const byte*) plot_bit + (number~) line::plot4_$1)
  to:line::@return
line::@return: scope:[line]  from line::@6 line::plot4
  return 
  to:@return

(void()) eorfill((byte*) eorfill::line_buffer , (byte*) eorfill::canvas)
eorfill: scope:[eorfill]  from main::@10
  (byte*) eorfill::canvas#1 ← phi( main::@10/(byte*) eorfill::canvas#0 )
  (byte*) eorfill::line_buffer#1 ← phi( main::@10/(byte*) eorfill::line_buffer#0 )
  (byte*) eorfill::line_column#0 ← (byte*) eorfill::line_buffer#1
  (byte*) eorfill::fill_column#0 ← (byte*) eorfill::canvas#1
  (byte) eorfill::x#0 ← (byte) 0
  to:eorfill::@1
eorfill::@1: scope:[eorfill]  from eorfill eorfill::@5
  (byte*) eorfill::fill_column#6 ← phi( eorfill/(byte*) eorfill::fill_column#0 eorfill::@5/(byte*) eorfill::fill_column#1 )
  (byte*) eorfill::line_column#5 ← phi( eorfill/(byte*) eorfill::line_column#0 eorfill::@5/(byte*) eorfill::line_column#1 )
  (byte) eorfill::x#2 ← phi( eorfill/(byte) eorfill::x#0 eorfill::@5/(byte) eorfill::x#1 )
  (bool~) eorfill::$0 ← (byte) eorfill::x#2 < (number) $10
  if((bool~) eorfill::$0) goto eorfill::@2
  to:eorfill::@return
eorfill::@2: scope:[eorfill]  from eorfill::@1
  (byte) eorfill::x#5 ← phi( eorfill::@1/(byte) eorfill::x#2 )
  (byte*) eorfill::fill_column#5 ← phi( eorfill::@1/(byte*) eorfill::fill_column#6 )
  (byte*) eorfill::line_column#2 ← phi( eorfill::@1/(byte*) eorfill::line_column#5 )
  (byte) eorfill::eor#0 ← *((byte*) eorfill::line_column#2 + (number) 0)
  (byte) eorfill::y#0 ← (byte) 1
  to:eorfill::@3
eorfill::@3: scope:[eorfill]  from eorfill::@2 eorfill::@4
  (byte) eorfill::x#4 ← phi( eorfill::@2/(byte) eorfill::x#5 eorfill::@4/(byte) eorfill::x#6 )
  (byte*) eorfill::fill_column#4 ← phi( eorfill::@2/(byte*) eorfill::fill_column#5 eorfill::@4/(byte*) eorfill::fill_column#2 )
  (byte*) eorfill::line_column#6 ← phi( eorfill::@2/(byte*) eorfill::line_column#2 eorfill::@4/(byte*) eorfill::line_column#3 )
  (byte) eorfill::eor#3 ← phi( eorfill::@2/(byte) eorfill::eor#0 eorfill::@4/(byte) eorfill::eor#1 )
  (byte) eorfill::y#2 ← phi( eorfill::@2/(byte) eorfill::y#0 eorfill::@4/(byte) eorfill::y#1 )
  (bool~) eorfill::$1 ← (byte) eorfill::y#2 < (number) $10*(number) 8
  if((bool~) eorfill::$1) goto eorfill::@4
  to:eorfill::@5
eorfill::@4: scope:[eorfill]  from eorfill::@3
  (byte) eorfill::x#6 ← phi( eorfill::@3/(byte) eorfill::x#4 )
  (byte*) eorfill::fill_column#2 ← phi( eorfill::@3/(byte*) eorfill::fill_column#4 )
  (byte) eorfill::y#3 ← phi( eorfill::@3/(byte) eorfill::y#2 )
  (byte*) eorfill::line_column#3 ← phi( eorfill::@3/(byte*) eorfill::line_column#6 )
  (byte) eorfill::eor#2 ← phi( eorfill::@3/(byte) eorfill::eor#3 )
  (byte) eorfill::eor#1 ← (byte) eorfill::eor#2 ^ *((byte*) eorfill::line_column#3 + (byte) eorfill::y#3)
  *((byte*) eorfill::fill_column#2 + (byte) eorfill::y#3) ← (byte) eorfill::eor#1
  (byte) eorfill::y#1 ← ++ (byte) eorfill::y#3
  to:eorfill::@3
eorfill::@5: scope:[eorfill]  from eorfill::@3
  (byte) eorfill::x#3 ← phi( eorfill::@3/(byte) eorfill::x#4 )
  (byte*) eorfill::fill_column#3 ← phi( eorfill::@3/(byte*) eorfill::fill_column#4 )
  (byte*) eorfill::line_column#4 ← phi( eorfill::@3/(byte*) eorfill::line_column#6 )
  (byte*) eorfill::line_column#1 ← (byte*) eorfill::line_column#4 + (number) $10*(number) 8
  (byte*) eorfill::fill_column#1 ← (byte*) eorfill::fill_column#3 + (number) $10*(number) 8
  (byte) eorfill::x#1 ← ++ (byte) eorfill::x#3
  to:eorfill::@1
eorfill::@return: scope:[eorfill]  from eorfill::@1
  return 
  to:@return

(byte()) abs_u8((byte) abs_u8::u)
abs_u8: scope:[abs_u8]  from line line::@13
  (byte) abs_u8::u#2 ← phi( line/(byte) abs_u8::u#0 line::@13/(byte) abs_u8::u#1 )
  (number~) abs_u8::$0 ← (byte) abs_u8::u#2 & (number) $80
  (bool~) abs_u8::$2 ← (number) 0 != (number~) abs_u8::$0
  if((bool~) abs_u8::$2) goto abs_u8::@1
  to:abs_u8::@2
abs_u8::@1: scope:[abs_u8]  from abs_u8
  (byte) abs_u8::u#3 ← phi( abs_u8/(byte) abs_u8::u#2 )
  (byte~) abs_u8::$1 ← - (byte) abs_u8::u#3
  (byte) abs_u8::return#2 ← (byte~) abs_u8::$1
  to:abs_u8::@return
abs_u8::@2: scope:[abs_u8]  from abs_u8
  (byte) abs_u8::u#4 ← phi( abs_u8/(byte) abs_u8::u#2 )
  (byte) abs_u8::return#3 ← (byte) abs_u8::u#4
  to:abs_u8::@return
abs_u8::@return: scope:[abs_u8]  from abs_u8::@1 abs_u8::@2
  (byte) abs_u8::return#7 ← phi( abs_u8::@1/(byte) abs_u8::return#2 abs_u8::@2/(byte) abs_u8::return#3 )
  (byte) abs_u8::return#4 ← (byte) abs_u8::return#7
  return 
  to:@return

(byte()) sgn_u8((byte) sgn_u8::u)
sgn_u8: scope:[sgn_u8]  from line::@14 line::@15
  (byte) sgn_u8::u#2 ← phi( line::@14/(byte) sgn_u8::u#0 line::@15/(byte) sgn_u8::u#1 )
  (number~) sgn_u8::$0 ← (byte) sgn_u8::u#2 & (number) $80
  (bool~) sgn_u8::$1 ← (number) 0 != (number~) sgn_u8::$0
  if((bool~) sgn_u8::$1) goto sgn_u8::@1
  to:sgn_u8::@2
sgn_u8::@1: scope:[sgn_u8]  from sgn_u8
  (byte) sgn_u8::return#2 ← (number) -1
  to:sgn_u8::@return
sgn_u8::@2: scope:[sgn_u8]  from sgn_u8
  (byte) sgn_u8::return#3 ← (number) 1
  to:sgn_u8::@return
sgn_u8::@return: scope:[sgn_u8]  from sgn_u8::@1 sgn_u8::@2
  (byte) sgn_u8::return#7 ← phi( sgn_u8::@1/(byte) sgn_u8::return#2 sgn_u8::@2/(byte) sgn_u8::return#3 )
  (byte) sgn_u8::return#4 ← (byte) sgn_u8::return#7
  return 
  to:@return
@3: scope:[]  from @4
  call main 
  to:@5
@5: scope:[]  from @3
  to:@end
@end: scope:[]  from @5

SYMBOL TABLE SSA
(byte~) $0
(label) @1
(label) @2
(label) @3
(label) @4
(label) @5
(label) @begin
(label) @end
(const byte) BINARY = (number) 2
(const nomodify byte) BLACK = (byte) 0
(const nomodify byte) BORDER_YPOS_BOTTOM = (byte) $fa
(const nomodify byte*) CANVAS1 = (byte*)(number) $3000
(const nomodify byte*) CANVAS2 = (byte*)(number) $3800
(const nomodify struct MOS6526_CIA*) CIA1 = (struct MOS6526_CIA*)(number) $dc00
(const nomodify struct MOS6526_CIA*) CIA2 = (struct MOS6526_CIA*)(number) $dd00
(const nomodify dword*) CIA2_TIMER_AB = (dword*)(number) $dd04
(const nomodify byte) CIA_INTERRUPT_CLEAR = (byte) $7f
(const nomodify byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES = (byte) 0
(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = (byte) $40
(const nomodify byte) CIA_TIMER_CONTROL_CONTINUOUS = (byte) 0
(const nomodify byte) CIA_TIMER_CONTROL_START = (byte) 1
(const nomodify byte) CIA_TIMER_CONTROL_STOP = (byte) 0
(const nomodify dword) CLOCKS_PER_INIT = (dword) $12
(const nomodify byte*) COLS = (byte*)(number) $d800
(const nomodify byte*) CONIO_CIA1_PORT_A = (byte*)(number) $dc00
(const nomodify byte*) CONIO_CIA1_PORT_B = (byte*)(number) $dc01
(const nomodify byte*) CONIO_SCREEN_COLORS = (byte*)(number) $d800
(const nomodify byte*) CONIO_SCREEN_TEXT = (byte*)(number) $400
(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT = (byte) $e
(const nomodify byte*) CONSOLE = (byte*)(number) $400
(const byte*) COSTAB = (const byte*) SINTAB+(number) $40
(const byte) DECIMAL = (number) $a
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const byte) HEXADECIMAL = (number) $10
(const nomodify byte) IRQ_RASTER = (byte) 1
(const nomodify void()**) KERNEL_IRQ = (void()**)(number) $314
(const nomodify byte*) LINE_BUFFER = (byte*)(number) $2000
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) OCTAL = (number) 8
(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = (byte) $d
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = (byte) $e
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = (byte) $f
(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = (byte) $21
(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = (byte) $20
(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = (byte) $11
(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE = (byte) $1a
(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS = (byte) $19
(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY = (byte) $18
(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER = (byte) $12
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = (byte) 1
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN = (byte) 0
(const nomodify byte*) PETSCII = (byte*)(number) $1000
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const byte*) RADIX_BINARY_VALUES_CHAR[]  = { (byte) $80, (byte) $40, (byte) $20, (byte) $10, (byte) 8, (byte) 4, (byte) 2 }
(const dword*) RADIX_BINARY_VALUES_LONG[]  = { (dword) $80000000, (dword) $40000000, (dword) $20000000, (dword) $10000000, (dword) $8000000, (dword) $4000000, (dword) $2000000, (dword) $1000000, (dword) $800000, (dword) $400000, (dword) $200000, (dword) $100000, (dword) $80000, (dword) $40000, (dword) $20000, (dword) $10000, (dword) $8000, (dword) $4000, (dword) $2000, (dword) $1000, (dword) $800, (dword) $400, (dword) $200, (dword) $100, (dword) $80, (dword) $40, (dword) $20, (dword) $10, (dword) 8, (dword) 4, (dword) 2 }
(const byte*) RADIX_DECIMAL_VALUES_CHAR[]  = { (byte) $64, (byte) $a }
(const dword*) RADIX_DECIMAL_VALUES_LONG[]  = { (dword) $3b9aca00, (dword) $5f5e100, (dword) $989680, (dword) $f4240, (dword) $186a0, (dword) $2710, (dword) $3e8, (dword) $64, (dword) $a }
(const byte*) RADIX_HEXADECIMAL_VALUES_CHAR[]  = { (byte) $10 }
(const dword*) RADIX_HEXADECIMAL_VALUES_LONG[]  = { (dword) $10000000, (dword) $1000000, (dword) $100000, (dword) $10000, (dword) $1000, (dword) $100, (dword) $10 }
(const byte*) RADIX_OCTAL_VALUES_CHAR[]  = { (byte) $40, (byte) 8 }
(const dword*) RADIX_OCTAL_VALUES_LONG[]  = { (dword) $40000000, (dword) $8000000, (dword) $1000000, (dword) $200000, (dword) $40000, (dword) $8000, (dword) $1000, (dword) $200, (dword) $40, (dword) 8 }
(const nomodify byte) RED = (byte) 2
(const nomodify byte*) SCREEN = (byte*)(number) $2c00
(const byte*) SINTAB[(number) $140]  = kickasm {{ .fill $200, 63 + 63*sin(i*2*PI/$100)
 }}
(const byte) SIZEOF_DWORD = (byte) 4
(const byte) SIZEOF_POINTER = (byte) 2
(const nomodify struct MOS6569_VICII*) VICII = (struct MOS6569_VICII*)(number) $d000
(const nomodify byte) WHITE = (byte) 1
(byte()) abs_u8((byte) abs_u8::u)
(number~) abs_u8::$0
(byte~) abs_u8::$1
(bool~) abs_u8::$2
(label) abs_u8::@1
(label) abs_u8::@2
(label) abs_u8::@return
(byte) abs_u8::return
(byte) abs_u8::return#0
(byte) abs_u8::return#1
(byte) abs_u8::return#2
(byte) abs_u8::return#3
(byte) abs_u8::return#4
(byte) abs_u8::return#5
(byte) abs_u8::return#6
(byte) abs_u8::return#7
(byte) abs_u8::u
(byte) abs_u8::u#0
(byte) abs_u8::u#1
(byte) abs_u8::u#2
(byte) abs_u8::u#3
(byte) abs_u8::u#4
(volatile byte) canvas_show_flag loadstore
(volatile byte) canvas_show_memory loadstore
(dword()) clock()
(number~) clock::$0
(label) clock::@return
(dword) clock::return
(dword) clock::return#0
(dword) clock::return#1
(dword) clock::return#2
(dword) clock::return#3
(dword) clock::return#4
(void()) clock_start()
(label) clock_start::@return
(byte*) conio_cursor_color loadstore
(byte*) conio_cursor_text loadstore
(byte) conio_cursor_x loadstore
(byte) conio_cursor_y loadstore
(byte) conio_scroll_enable loadstore
(byte) conio_textcolor loadstore
(void()) cputc((byte) cputc::c)
(bool~) cputc::$0
(bool~) cputc::$1
(bool~) cputc::$2
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@4
(label) cputc::@5
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0
(byte) cputc::c#1
(byte) cputc::c#2
(byte) cputc::c#3
(byte) cputc::c#4
(void()) cputln()
(number~) cputln::$0
(byte*~) cputln::$1
(byte*~) cputln::$2
(label) cputln::@1
(label) cputln::@return
(word) cputln::ln_offset
(word) cputln::ln_offset#0
(void()) cputs((to_nomodify byte*) cputs::s)
(bool~) cputs::$1
(label) cputs::@1
(label) cputs::@2
(label) cputs::@3
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#0
(byte) cputs::c#1
(byte) cputs::c#2
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0
(to_nomodify byte*) cputs::s#1
(to_nomodify byte*) cputs::s#2
(to_nomodify byte*) cputs::s#3
(to_nomodify byte*) cputs::s#4
(to_nomodify byte*) cputs::s#5
(to_nomodify byte*) cputs::s#6
(to_nomodify byte*) cputs::s#7
(void()) cscroll()
(bool~) cscroll::$0
(bool~) cscroll::$1
(byte*~) cscroll::$7
(byte*~) cscroll::$8
(bool~) cscroll::$9
(label) cscroll::@1
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@6
(label) cscroll::@7
(label) cscroll::@8
(label) cscroll::@return
(void()) eorfill((byte*) eorfill::line_buffer , (byte*) eorfill::canvas)
(bool~) eorfill::$0
(bool~) eorfill::$1
(label) eorfill::@1
(label) eorfill::@2
(label) eorfill::@3
(label) eorfill::@4
(label) eorfill::@5
(label) eorfill::@return
(byte*) eorfill::canvas
(byte*) eorfill::canvas#0
(byte*) eorfill::canvas#1
(byte) eorfill::eor
(byte) eorfill::eor#0
(byte) eorfill::eor#1
(byte) eorfill::eor#2
(byte) eorfill::eor#3
(byte*) eorfill::fill_column
(byte*) eorfill::fill_column#0
(byte*) eorfill::fill_column#1
(byte*) eorfill::fill_column#2
(byte*) eorfill::fill_column#3
(byte*) eorfill::fill_column#4
(byte*) eorfill::fill_column#5
(byte*) eorfill::fill_column#6
(byte*) eorfill::line_buffer
(byte*) eorfill::line_buffer#0
(byte*) eorfill::line_buffer#1
(byte*) eorfill::line_column
(byte*) eorfill::line_column#0
(byte*) eorfill::line_column#1
(byte*) eorfill::line_column#2
(byte*) eorfill::line_column#3
(byte*) eorfill::line_column#4
(byte*) eorfill::line_column#5
(byte*) eorfill::line_column#6
(byte) eorfill::x
(byte) eorfill::x#0
(byte) eorfill::x#1
(byte) eorfill::x#2
(byte) eorfill::x#3
(byte) eorfill::x#4
(byte) eorfill::x#5
(byte) eorfill::x#6
(byte) eorfill::y
(byte) eorfill::y#0
(byte) eorfill::y#1
(byte) eorfill::y#2
(byte) eorfill::y#3
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(bool~) gotoxy::$0
(bool~) gotoxy::$1
(bool~) gotoxy::$2
(bool~) gotoxy::$3
(number~) gotoxy::$4
(number~) gotoxy::$5
(byte*~) gotoxy::$6
(byte*~) gotoxy::$7
(word~) gotoxy::$8
(label) gotoxy::@1
(label) gotoxy::@2
(label) gotoxy::@3
(label) gotoxy::@4
(label) gotoxy::@return
(word) gotoxy::offset
(word) gotoxy::offset#0
(byte) gotoxy::x
(byte) gotoxy::x#0
(byte) gotoxy::x#1
(byte) gotoxy::x#2
(byte) gotoxy::x#3
(byte) gotoxy::x#4
(byte) gotoxy::x#5
(byte) gotoxy::x#6
(byte) gotoxy::y
(byte) gotoxy::y#0
(byte) gotoxy::y#1
(byte) gotoxy::y#2
(byte) gotoxy::y#3
(byte) gotoxy::y#4
(byte) gotoxy::y#5
(byte) gotoxy::y#6
interrupt(KERNEL_MIN)(void()) irq_bottom_1()
(byte~) irq_bottom_1::$0
(label) irq_bottom_1::@1
(label) irq_bottom_1::@return
(label) irq_bottom_1::toD0181
(number~) irq_bottom_1::toD0181_$0
(number~) irq_bottom_1::toD0181_$1
(number~) irq_bottom_1::toD0181_$2
(byte~) irq_bottom_1::toD0181_$3
(number~) irq_bottom_1::toD0181_$4
(number~) irq_bottom_1::toD0181_$5
(number~) irq_bottom_1::toD0181_$6
(word~) irq_bottom_1::toD0181_$7
(label) irq_bottom_1::toD0181_@return
(byte*) irq_bottom_1::toD0181_gfx
(byte*) irq_bottom_1::toD0181_gfx#0
(byte*) irq_bottom_1::toD0181_gfx#1
(byte) irq_bottom_1::toD0181_return
(byte) irq_bottom_1::toD0181_return#0
(byte) irq_bottom_1::toD0181_return#1
(byte) irq_bottom_1::toD0181_return#2
(byte) irq_bottom_1::toD0181_return#3
(byte*) irq_bottom_1::toD0181_screen
(byte*) irq_bottom_1::toD0181_screen#0
(byte*) irq_bottom_1::toD0181_screen#1
interrupt(KERNEL_KEYBOARD)(void()) irq_bottom_2()
(byte~) irq_bottom_2::$0
(bool~) irq_bottom_2::$1
(bool~) irq_bottom_2::$2
(bool~) irq_bottom_2::$3
(label) irq_bottom_2::@1
(label) irq_bottom_2::@2
(label) irq_bottom_2::@3
(label) irq_bottom_2::@return
(byte()) kbhit()
(byte~) kbhit::$0
(label) kbhit::@return
(byte) kbhit::return
(byte) kbhit::return#0
(byte) kbhit::return#1
(byte) kbhit::return#2
(byte) kbhit::return#3
(byte) kbhit::return#4
(void()) line((byte*) line::canvas , (byte) line::x1 , (byte) line::y1 , (byte) line::x2 , (byte) line::y2)
(byte~) line::$0
(byte~) line::$1
(bool~) line::$10
(number~) line::$11
(bool~) line::$13
(bool~) line::$14
(bool~) line::$16
(number~) line::$17
(bool~) line::$19
(byte~) line::$2
(bool~) line::$20
(bool~) line::$21
(byte~) line::$3
(byte~) line::$4
(byte~) line::$5
(byte~) line::$6
(byte~) line::$7
(bool~) line::$8
(bool~) line::$9
(label) line::@1
(label) line::@10
(label) line::@11
(label) line::@12
(label) line::@13
(label) line::@14
(label) line::@15
(label) line::@16
(label) line::@2
(label) line::@3
(label) line::@4
(label) line::@5
(label) line::@6
(label) line::@7
(label) line::@8
(label) line::@9
(label) line::@return
(byte*) line::canvas
(byte*) line::canvas#0
(byte*) line::canvas#1
(byte*) line::canvas#2
(byte) line::dx
(byte) line::dx#0
(byte) line::dx#1
(byte) line::dx#10
(byte) line::dx#11
(byte) line::dx#12
(byte) line::dx#13
(byte) line::dx#14
(byte) line::dx#15
(byte) line::dx#16
(byte) line::dx#17
(byte) line::dx#2
(byte) line::dx#3
(byte) line::dx#4
(byte) line::dx#5
(byte) line::dx#6
(byte) line::dx#7
(byte) line::dx#8
(byte) line::dx#9
(byte) line::dy
(byte) line::dy#0
(byte) line::dy#1
(byte) line::dy#10
(byte) line::dy#11
(byte) line::dy#12
(byte) line::dy#13
(byte) line::dy#14
(byte) line::dy#15
(byte) line::dy#16
(byte) line::dy#2
(byte) line::dy#3
(byte) line::dy#4
(byte) line::dy#5
(byte) line::dy#6
(byte) line::dy#7
(byte) line::dy#8
(byte) line::dy#9
(byte) line::e
(byte) line::e#0
(byte) line::e#1
(byte) line::e#2
(byte) line::e#3
(byte) line::e#4
(byte) line::e#5
(byte) line::e#6
(byte) line::e#7
(byte) line::e1
(byte) line::e1#0
(byte) line::e1#1
(byte) line::e1#2
(byte) line::e1#3
(byte) line::e1#4
(byte) line::e1#5
(byte) line::e1#6
(byte) line::e1#7
(label) line::plot1
(number~) line::plot1_$0
(number~) line::plot1_$1
(number~) line::plot1_$2
(byte*) line::plot1_column
(byte*) line::plot1_column#0
(byte) line::plot1_x
(byte) line::plot1_x#0
(byte) line::plot1_x#1
(byte) line::plot1_y
(byte) line::plot1_y#0
(byte) line::plot1_y#1
(label) line::plot2
(number~) line::plot2_$0
(number~) line::plot2_$1
(number~) line::plot2_$2
(byte*) line::plot2_column
(byte*) line::plot2_column#0
(byte) line::plot2_x
(byte) line::plot2_x#0
(byte) line::plot2_x#1
(byte) line::plot2_y
(byte) line::plot2_y#0
(byte) line::plot2_y#1
(label) line::plot3
(number~) line::plot3_$0
(number~) line::plot3_$1
(number~) line::plot3_$2
(byte*) line::plot3_column
(byte*) line::plot3_column#0
(byte) line::plot3_x
(byte) line::plot3_x#0
(byte) line::plot3_x#1
(byte) line::plot3_y
(byte) line::plot3_y#0
(byte) line::plot3_y#1
(label) line::plot4
(number~) line::plot4_$0
(number~) line::plot4_$1
(number~) line::plot4_$2
(byte*) line::plot4_column
(byte*) line::plot4_column#0
(byte) line::plot4_x
(byte) line::plot4_x#0
(byte) line::plot4_x#1
(byte) line::plot4_y
(byte) line::plot4_y#0
(byte) line::plot4_y#1
(byte) line::sx
(byte) line::sx#0
(byte) line::sx#1
(byte) line::sx#10
(byte) line::sx#11
(byte) line::sx#12
(byte) line::sx#13
(byte) line::sx#14
(byte) line::sx#15
(byte) line::sx#2
(byte) line::sx#3
(byte) line::sx#4
(byte) line::sx#5
(byte) line::sx#6
(byte) line::sx#7
(byte) line::sx#8
(byte) line::sx#9
(byte) line::sy
(byte) line::sy#0
(byte) line::sy#1
(byte) line::sy#10
(byte) line::sy#11
(byte) line::sy#12
(byte) line::sy#13
(byte) line::sy#14
(byte) line::sy#2
(byte) line::sy#3
(byte) line::sy#4
(byte) line::sy#5
(byte) line::sy#6
(byte) line::sy#7
(byte) line::sy#8
(byte) line::sy#9
(byte) line::x
(byte) line::x#0
(byte) line::x#1
(byte) line::x#10
(byte) line::x#11
(byte) line::x#12
(byte) line::x#13
(byte) line::x#14
(byte) line::x#15
(byte) line::x#16
(byte) line::x#17
(byte) line::x#18
(byte) line::x#19
(byte) line::x#2
(byte) line::x#20
(byte) line::x#21
(byte) line::x#3
(byte) line::x#4
(byte) line::x#5
(byte) line::x#6
(byte) line::x#7
(byte) line::x#8
(byte) line::x#9
(byte) line::x1
(byte) line::x1#0
(byte) line::x1#1
(byte) line::x1#2
(byte) line::x1#3
(byte) line::x1#4
(byte) line::x1#5
(byte) line::x2
(byte) line::x2#0
(byte) line::x2#1
(byte) line::x2#10
(byte) line::x2#11
(byte) line::x2#12
(byte) line::x2#13
(byte) line::x2#14
(byte) line::x2#15
(byte) line::x2#2
(byte) line::x2#3
(byte) line::x2#4
(byte) line::x2#5
(byte) line::x2#6
(byte) line::x2#7
(byte) line::x2#8
(byte) line::x2#9
(byte) line::y
(byte) line::y#0
(byte) line::y#1
(byte) line::y#10
(byte) line::y#11
(byte) line::y#12
(byte) line::y#13
(byte) line::y#14
(byte) line::y#15
(byte) line::y#16
(byte) line::y#17
(byte) line::y#18
(byte) line::y#19
(byte) line::y#2
(byte) line::y#20
(byte) line::y#21
(byte) line::y#22
(byte) line::y#3
(byte) line::y#4
(byte) line::y#5
(byte) line::y#6
(byte) line::y#7
(byte) line::y#8
(byte) line::y#9
(byte) line::y1
(byte) line::y1#0
(byte) line::y1#1
(byte) line::y1#2
(byte) line::y1#3
(byte) line::y1#4
(byte) line::y1#5
(byte) line::y1#6
(byte) line::y2
(byte) line::y2#0
(byte) line::y2#1
(byte) line::y2#10
(byte) line::y2#11
(byte) line::y2#12
(byte) line::y2#13
(byte) line::y2#14
(byte) line::y2#15
(byte) line::y2#16
(byte) line::y2#2
(byte) line::y2#3
(byte) line::y2#4
(byte) line::y2#5
(byte) line::y2#6
(byte) line::y2#7
(byte) line::y2#8
(byte) line::y2#9
(void()) main()
(byte~) main::$15
(byte~) main::$16
(byte~) main::$17
(dword~) main::$18
(dword~) main::$19
(word~) main::$22
(bool~) main::$23
(bool~) main::$24
(number~) main::$5
(number~) main::$6
(bool~) main::$7
(bool~) main::$8
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@18
(label) main::@19
(label) main::@2
(label) main::@20
(label) main::@21
(label) main::@22
(label) main::@23
(label) main::@24
(label) main::@25
(label) main::@26
(label) main::@27
(label) main::@28
(label) main::@29
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::c
(byte) main::c#0
(byte) main::c#1
(byte) main::c#2
(byte) main::c#3
(byte*) main::canvas
(byte*) main::canvas#0
(byte*) main::canvas#1
(byte*) main::canvas#10
(byte*) main::canvas#11
(byte*) main::canvas#12
(byte*) main::canvas#13
(byte*) main::canvas#14
(byte*) main::canvas#15
(byte*) main::canvas#16
(byte*) main::canvas#17
(byte*) main::canvas#18
(byte*) main::canvas#19
(byte*) main::canvas#2
(byte*) main::canvas#20
(byte*) main::canvas#21
(byte*) main::canvas#22
(byte*) main::canvas#23
(byte*) main::canvas#3
(byte*) main::canvas#4
(byte*) main::canvas#5
(byte*) main::canvas#6
(byte*) main::canvas#7
(byte*) main::canvas#8
(byte*) main::canvas#9
(byte*) main::cols
(byte*) main::cols#0
(byte*) main::cols#1
(byte*) main::cols#2
(byte*) main::cols#3
(byte*) main::cols#4
(byte*) main::cols#5
(byte*) main::cols#6
(dword) main::cyclecount
(dword) main::cyclecount#0
(dword) main::cyclecount#1
(dword) main::cyclecount#2
(dword) main::cyclecount#3
(dword) main::cyclecount#4
(byte) main::p0_idx
(byte) main::p0_idx#0
(byte) main::p0_idx#1
(byte) main::p0_idx#10
(byte) main::p0_idx#11
(byte) main::p0_idx#12
(byte) main::p0_idx#13
(byte) main::p0_idx#14
(byte) main::p0_idx#15
(byte) main::p0_idx#16
(byte) main::p0_idx#17
(byte) main::p0_idx#18
(byte) main::p0_idx#19
(byte) main::p0_idx#2
(byte) main::p0_idx#20
(byte) main::p0_idx#21
(byte) main::p0_idx#22
(byte) main::p0_idx#23
(byte) main::p0_idx#3
(byte) main::p0_idx#4
(byte) main::p0_idx#5
(byte) main::p0_idx#6
(byte) main::p0_idx#7
(byte) main::p0_idx#8
(byte) main::p0_idx#9
(byte) main::p1_idx
(byte) main::p1_idx#0
(byte) main::p1_idx#1
(byte) main::p1_idx#10
(byte) main::p1_idx#11
(byte) main::p1_idx#12
(byte) main::p1_idx#13
(byte) main::p1_idx#14
(byte) main::p1_idx#15
(byte) main::p1_idx#16
(byte) main::p1_idx#17
(byte) main::p1_idx#18
(byte) main::p1_idx#19
(byte) main::p1_idx#2
(byte) main::p1_idx#20
(byte) main::p1_idx#21
(byte) main::p1_idx#22
(byte) main::p1_idx#23
(byte) main::p1_idx#3
(byte) main::p1_idx#4
(byte) main::p1_idx#5
(byte) main::p1_idx#6
(byte) main::p1_idx#7
(byte) main::p1_idx#8
(byte) main::p1_idx#9
(byte) main::p2_idx
(byte) main::p2_idx#0
(byte) main::p2_idx#1
(byte) main::p2_idx#10
(byte) main::p2_idx#11
(byte) main::p2_idx#12
(byte) main::p2_idx#13
(byte) main::p2_idx#14
(byte) main::p2_idx#15
(byte) main::p2_idx#16
(byte) main::p2_idx#17
(byte) main::p2_idx#18
(byte) main::p2_idx#19
(byte) main::p2_idx#2
(byte) main::p2_idx#20
(byte) main::p2_idx#21
(byte) main::p2_idx#22
(byte) main::p2_idx#23
(byte) main::p2_idx#3
(byte) main::p2_idx#4
(byte) main::p2_idx#5
(byte) main::p2_idx#6
(byte) main::p2_idx#7
(byte) main::p2_idx#8
(byte) main::p2_idx#9
(const byte*) main::s[(byte) 8]  = (byte*) "frame: "
(const byte*) main::s1[(byte) $a]  = (byte*) " cycles: "
(byte*) main::screen
(byte*) main::screen#0
(byte*) main::screen#1
(byte*) main::screen#2
(byte*) main::screen#3
(byte*) main::screen#4
(byte*) main::screen#5
(byte*) main::screen#6
(label) main::toD0181
(number~) main::toD0181_$0
(number~) main::toD0181_$1
(number~) main::toD0181_$2
(byte~) main::toD0181_$3
(number~) main::toD0181_$4
(number~) main::toD0181_$5
(number~) main::toD0181_$6
(word~) main::toD0181_$7
(label) main::toD0181_@return
(byte*) main::toD0181_gfx
(byte*) main::toD0181_gfx#0
(byte*) main::toD0181_gfx#1
(byte) main::toD0181_return
(byte) main::toD0181_return#0
(byte) main::toD0181_return#1
(byte) main::toD0181_return#2
(byte) main::toD0181_return#3
(byte*) main::toD0181_screen
(byte*) main::toD0181_screen#0
(byte*) main::toD0181_screen#1
(label) main::toD0182
(number~) main::toD0182_$0
(number~) main::toD0182_$1
(number~) main::toD0182_$2
(byte~) main::toD0182_$3
(number~) main::toD0182_$4
(number~) main::toD0182_$5
(number~) main::toD0182_$6
(word~) main::toD0182_$7
(label) main::toD0182_@return
(byte*) main::toD0182_gfx
(byte*) main::toD0182_gfx#0
(byte*) main::toD0182_gfx#1
(byte) main::toD0182_return
(byte) main::toD0182_return#0
(byte) main::toD0182_return#1
(byte) main::toD0182_return#2
(byte) main::toD0182_return#3
(byte*) main::toD0182_screen
(byte*) main::toD0182_screen#0
(byte*) main::toD0182_screen#1
(byte) main::x
(byte) main::x#0
(byte) main::x#1
(byte) main::x#2
(byte) main::x#3
(byte) main::x0
(byte) main::x0#0
(byte) main::x0#1
(byte) main::x0#2
(byte) main::x1
(byte) main::x1#0
(byte) main::x1#1
(byte) main::x2
(byte) main::x2#0
(byte) main::x2#1
(byte) main::y
(byte) main::y#0
(byte) main::y#1
(byte) main::y#2
(byte) main::y#3
(byte) main::y#4
(byte) main::y#5
(byte) main::y#6
(byte) main::y0
(byte) main::y0#0
(byte) main::y0#1
(byte) main::y0#2
(byte) main::y1
(byte) main::y1#0
(byte) main::y1#1
(byte) main::y2
(byte) main::y2#0
(byte) main::y2#1
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(byte*~) memcpy::$0
(bool~) memcpy::$1
(byte*~) memcpy::$2
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@3
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#0
(void*) memcpy::destination#1
(void*) memcpy::destination#2
(void*) memcpy::destination#3
(void*) memcpy::destination#4
(void*) memcpy::destination#5
(byte*) memcpy::dst
(byte*) memcpy::dst#0
(byte*) memcpy::dst#1
(byte*) memcpy::dst#2
(byte*) memcpy::dst#3
(word) memcpy::num
(word) memcpy::num#0
(word) memcpy::num#1
(word) memcpy::num#2
(void*) memcpy::return
(void*) memcpy::return#0
(void*) memcpy::return#1
(void*) memcpy::return#2
(void*) memcpy::return#3
(void*) memcpy::return#4
(void*) memcpy::source
(void*) memcpy::source#0
(void*) memcpy::source#1
(void*) memcpy::source#2
(byte*) memcpy::src
(byte*) memcpy::src#0
(byte*) memcpy::src#1
(byte*) memcpy::src#2
(byte*) memcpy::src#3
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0
(byte*) memcpy::src_end#1
(byte*) memcpy::src_end#2
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte) memset::c#5
(byte) memset::c#6
(byte) memset::c#7
(byte) memset::c#8
(byte) memset::c#9
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(word) memset::num#3
(word) memset::num#4
(word) memset::num#5
(word) memset::num#6
(word) memset::num#7
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::return#4
(void*) memset::return#5
(void*) memset::return#6
(void*) memset::return#7
(void*) memset::return#8
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#10
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void*) memset::str#6
(void*) memset::str#7
(void*) memset::str#8
(void*) memset::str#9
(const byte*) plot_bit[(number) 8]  = { (byte) $80, (byte) $40, (byte) $20, (byte) $10, (byte) 8, (byte) 4, (byte) 2, (byte) 1 }
(const byte**) plot_column[(number) $10]  = { (const nomodify byte*) LINE_BUFFER+(number) 0, (const nomodify byte*) LINE_BUFFER+(number) 1*(number) $80, (const nomodify byte*) LINE_BUFFER+(number) 2*(number) $80, (const nomodify byte*) LINE_BUFFER+(number) 3*(number) $80, (const nomodify byte*) LINE_BUFFER+(number) 4*(number) $80, (const nomodify byte*) LINE_BUFFER+(number) 5*(number) $80, (const nomodify byte*) LINE_BUFFER+(number) 6*(number) $80, (const nomodify byte*) LINE_BUFFER+(number) 7*(number) $80, (const nomodify byte*) LINE_BUFFER+(number) 8*(number) $80, (const nomodify byte*) LINE_BUFFER+(number) 9*(number) $80, (const nomodify byte*) LINE_BUFFER+(number) $a*(number) $80, (const nomodify byte*) LINE_BUFFER+(number) $b*(number) $80, (const nomodify byte*) LINE_BUFFER+(number) $c*(number) $80, (const nomodify byte*) LINE_BUFFER+(number) $d*(number) $80, (const nomodify byte*) LINE_BUFFER+(number) $e*(number) $80, (const nomodify byte*) LINE_BUFFER+(number) $f*(number) $80 }
(struct printf_buffer_number) printf_buffer loadstore = {}
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(bool~) printf_number_buffer::$0
(bool~) printf_number_buffer::$1
(bool~) printf_number_buffer::$10
(bool~) printf_number_buffer::$12
(bool~) printf_number_buffer::$14
(bool~) printf_number_buffer::$15
(bool~) printf_number_buffer::$16
(bool~) printf_number_buffer::$17
(word~) printf_number_buffer::$19
(bool~) printf_number_buffer::$2
(bool~) printf_number_buffer::$20
(signed byte~) printf_number_buffer::$21
(bool~) printf_number_buffer::$22
(bool~) printf_number_buffer::$23
(signed byte~) printf_number_buffer::$25
(bool~) printf_number_buffer::$26
(bool~) printf_number_buffer::$27
(bool~) printf_number_buffer::$28
(bool~) printf_number_buffer::$29
(bool~) printf_number_buffer::$3
(bool~) printf_number_buffer::$30
(bool~) printf_number_buffer::$31
(bool~) printf_number_buffer::$32
(bool~) printf_number_buffer::$4
(bool~) printf_number_buffer::$5
(bool~) printf_number_buffer::$7
(bool~) printf_number_buffer::$9
(label) printf_number_buffer::@1
(label) printf_number_buffer::@10
(label) printf_number_buffer::@11
(label) printf_number_buffer::@12
(label) printf_number_buffer::@13
(label) printf_number_buffer::@14
(label) printf_number_buffer::@15
(label) printf_number_buffer::@16
(label) printf_number_buffer::@17
(label) printf_number_buffer::@18
(label) printf_number_buffer::@19
(label) printf_number_buffer::@2
(label) printf_number_buffer::@20
(label) printf_number_buffer::@21
(label) printf_number_buffer::@3
(label) printf_number_buffer::@4
(label) printf_number_buffer::@5
(label) printf_number_buffer::@6
(label) printf_number_buffer::@7
(label) printf_number_buffer::@8
(label) printf_number_buffer::@9
(label) printf_number_buffer::@return
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte*) printf_number_buffer::buffer_digits#0
(byte*) printf_number_buffer::buffer_digits#1
(byte*) printf_number_buffer::buffer_digits#10
(byte*) printf_number_buffer::buffer_digits#11
(byte*) printf_number_buffer::buffer_digits#12
(byte*) printf_number_buffer::buffer_digits#13
(byte*) printf_number_buffer::buffer_digits#14
(byte*) printf_number_buffer::buffer_digits#15
(byte*) printf_number_buffer::buffer_digits#16
(byte*) printf_number_buffer::buffer_digits#17
(byte*) printf_number_buffer::buffer_digits#18
(byte*) printf_number_buffer::buffer_digits#19
(byte*) printf_number_buffer::buffer_digits#2
(byte*) printf_number_buffer::buffer_digits#20
(byte*) printf_number_buffer::buffer_digits#3
(byte*) printf_number_buffer::buffer_digits#4
(byte*) printf_number_buffer::buffer_digits#5
(byte*) printf_number_buffer::buffer_digits#6
(byte*) printf_number_buffer::buffer_digits#7
(byte*) printf_number_buffer::buffer_digits#8
(byte*) printf_number_buffer::buffer_digits#9
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0
(byte) printf_number_buffer::buffer_sign#1
(byte) printf_number_buffer::buffer_sign#10
(byte) printf_number_buffer::buffer_sign#11
(byte) printf_number_buffer::buffer_sign#12
(byte) printf_number_buffer::buffer_sign#2
(byte) printf_number_buffer::buffer_sign#3
(byte) printf_number_buffer::buffer_sign#4
(byte) printf_number_buffer::buffer_sign#5
(byte) printf_number_buffer::buffer_sign#6
(byte) printf_number_buffer::buffer_sign#7
(byte) printf_number_buffer::buffer_sign#8
(byte) printf_number_buffer::buffer_sign#9
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_justify_left#0
(byte) printf_number_buffer::format_justify_left#1
(byte) printf_number_buffer::format_justify_left#10
(byte) printf_number_buffer::format_justify_left#11
(byte) printf_number_buffer::format_justify_left#12
(byte) printf_number_buffer::format_justify_left#13
(byte) printf_number_buffer::format_justify_left#14
(byte) printf_number_buffer::format_justify_left#15
(byte) printf_number_buffer::format_justify_left#16
(byte) printf_number_buffer::format_justify_left#17
(byte) printf_number_buffer::format_justify_left#18
(byte) printf_number_buffer::format_justify_left#19
(byte) printf_number_buffer::format_justify_left#2
(byte) printf_number_buffer::format_justify_left#20
(byte) printf_number_buffer::format_justify_left#21
(byte) printf_number_buffer::format_justify_left#3
(byte) printf_number_buffer::format_justify_left#4
(byte) printf_number_buffer::format_justify_left#5
(byte) printf_number_buffer::format_justify_left#6
(byte) printf_number_buffer::format_justify_left#7
(byte) printf_number_buffer::format_justify_left#8
(byte) printf_number_buffer::format_justify_left#9
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_min_length#0
(byte) printf_number_buffer::format_min_length#1
(byte) printf_number_buffer::format_min_length#2
(byte) printf_number_buffer::format_min_length#3
(byte) printf_number_buffer::format_min_length#4
(byte) printf_number_buffer::format_min_length#5
(byte) printf_number_buffer::format_min_length#6
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_radix#0
(byte) printf_number_buffer::format_radix#1
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_sign_always#0
(byte) printf_number_buffer::format_sign_always#1
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_upper_case#0
(byte) printf_number_buffer::format_upper_case#1
(byte) printf_number_buffer::format_upper_case#10
(byte) printf_number_buffer::format_upper_case#11
(byte) printf_number_buffer::format_upper_case#12
(byte) printf_number_buffer::format_upper_case#13
(byte) printf_number_buffer::format_upper_case#14
(byte) printf_number_buffer::format_upper_case#15
(byte) printf_number_buffer::format_upper_case#16
(byte) printf_number_buffer::format_upper_case#17
(byte) printf_number_buffer::format_upper_case#2
(byte) printf_number_buffer::format_upper_case#3
(byte) printf_number_buffer::format_upper_case#4
(byte) printf_number_buffer::format_upper_case#5
(byte) printf_number_buffer::format_upper_case#6
(byte) printf_number_buffer::format_upper_case#7
(byte) printf_number_buffer::format_upper_case#8
(byte) printf_number_buffer::format_upper_case#9
(byte) printf_number_buffer::format_zero_padding
(byte) printf_number_buffer::format_zero_padding#0
(byte) printf_number_buffer::format_zero_padding#1
(byte) printf_number_buffer::format_zero_padding#10
(byte) printf_number_buffer::format_zero_padding#11
(byte) printf_number_buffer::format_zero_padding#12
(byte) printf_number_buffer::format_zero_padding#13
(byte) printf_number_buffer::format_zero_padding#14
(byte) printf_number_buffer::format_zero_padding#15
(byte) printf_number_buffer::format_zero_padding#16
(byte) printf_number_buffer::format_zero_padding#17
(byte) printf_number_buffer::format_zero_padding#18
(byte) printf_number_buffer::format_zero_padding#19
(byte) printf_number_buffer::format_zero_padding#2
(byte) printf_number_buffer::format_zero_padding#20
(byte) printf_number_buffer::format_zero_padding#21
(byte) printf_number_buffer::format_zero_padding#3
(byte) printf_number_buffer::format_zero_padding#4
(byte) printf_number_buffer::format_zero_padding#5
(byte) printf_number_buffer::format_zero_padding#6
(byte) printf_number_buffer::format_zero_padding#7
(byte) printf_number_buffer::format_zero_padding#8
(byte) printf_number_buffer::format_zero_padding#9
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::len#0
(signed byte) printf_number_buffer::len#1
(signed byte) printf_number_buffer::len#2
(signed byte) printf_number_buffer::len#3
(signed byte) printf_number_buffer::padding
(signed byte) printf_number_buffer::padding#0
(signed byte) printf_number_buffer::padding#1
(signed byte) printf_number_buffer::padding#10
(signed byte) printf_number_buffer::padding#11
(signed byte) printf_number_buffer::padding#12
(signed byte) printf_number_buffer::padding#13
(signed byte) printf_number_buffer::padding#14
(signed byte) printf_number_buffer::padding#15
(signed byte) printf_number_buffer::padding#16
(signed byte) printf_number_buffer::padding#17
(signed byte) printf_number_buffer::padding#2
(signed byte) printf_number_buffer::padding#3
(signed byte) printf_number_buffer::padding#4
(signed byte) printf_number_buffer::padding#5
(signed byte) printf_number_buffer::padding#6
(signed byte) printf_number_buffer::padding#7
(signed byte) printf_number_buffer::padding#8
(signed byte) printf_number_buffer::padding#9
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(bool~) printf_padding::$0
(label) printf_padding::@1
(label) printf_padding::@2
(label) printf_padding::@3
(label) printf_padding::@return
(byte) printf_padding::i
(byte) printf_padding::i#0
(byte) printf_padding::i#1
(byte) printf_padding::i#2
(byte) printf_padding::i#3
(byte) printf_padding::i#4
(byte) printf_padding::length
(byte) printf_padding::length#0
(byte) printf_padding::length#1
(byte) printf_padding::length#2
(byte) printf_padding::length#3
(byte) printf_padding::length#4
(byte) printf_padding::length#5
(byte) printf_padding::length#6
(byte) printf_padding::pad
(byte) printf_padding::pad#0
(byte) printf_padding::pad#1
(byte) printf_padding::pad#2
(byte) printf_padding::pad#3
(byte) printf_padding::pad#4
(byte) printf_padding::pad#5
(byte) printf_padding::pad#6
(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
(number~) printf_uchar::$0
(byte~) printf_uchar::$1
(number~) printf_uchar::$2
(bool~) printf_uchar::$5
(label) printf_uchar::@1
(label) printf_uchar::@2
(label) printf_uchar::@3
(label) printf_uchar::@4
(label) printf_uchar::@5
(label) printf_uchar::@return
(struct printf_format_number) printf_uchar::format
(byte) printf_uchar::format_justify_left
(byte) printf_uchar::format_justify_left#0
(byte) printf_uchar::format_justify_left#1
(byte) printf_uchar::format_justify_left#2
(byte) printf_uchar::format_justify_left#3
(byte) printf_uchar::format_justify_left#4
(byte) printf_uchar::format_justify_left#5
(byte) printf_uchar::format_min_length
(byte) printf_uchar::format_min_length#0
(byte) printf_uchar::format_min_length#1
(byte) printf_uchar::format_min_length#2
(byte) printf_uchar::format_min_length#3
(byte) printf_uchar::format_min_length#4
(byte) printf_uchar::format_min_length#5
(byte) printf_uchar::format_radix
(byte) printf_uchar::format_radix#0
(byte) printf_uchar::format_radix#1
(byte) printf_uchar::format_radix#2
(byte) printf_uchar::format_radix#3
(byte) printf_uchar::format_radix#4
(byte) printf_uchar::format_radix#5
(byte) printf_uchar::format_sign_always
(byte) printf_uchar::format_sign_always#0
(byte) printf_uchar::format_sign_always#1
(byte) printf_uchar::format_sign_always#2
(byte) printf_uchar::format_sign_always#3
(byte) printf_uchar::format_sign_always#4
(byte) printf_uchar::format_sign_always#5
(byte) printf_uchar::format_upper_case
(byte) printf_uchar::format_upper_case#0
(byte) printf_uchar::format_upper_case#1
(byte) printf_uchar::format_upper_case#2
(byte) printf_uchar::format_upper_case#3
(byte) printf_uchar::format_upper_case#4
(byte) printf_uchar::format_upper_case#5
(byte) printf_uchar::format_zero_padding
(byte) printf_uchar::format_zero_padding#0
(byte) printf_uchar::format_zero_padding#1
(byte) printf_uchar::format_zero_padding#2
(byte) printf_uchar::format_zero_padding#3
(byte) printf_uchar::format_zero_padding#4
(byte) printf_uchar::format_zero_padding#5
(byte) printf_uchar::uvalue
(byte) printf_uchar::uvalue#0
(byte) printf_uchar::uvalue#1
(byte) printf_uchar::uvalue#2
(byte) printf_uchar::uvalue#3
(byte) printf_uchar::uvalue#4
(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
(number~) printf_ulong::$0
(byte~) printf_ulong::$1
(number~) printf_ulong::$2
(bool~) printf_ulong::$5
(label) printf_ulong::@1
(label) printf_ulong::@2
(label) printf_ulong::@3
(label) printf_ulong::@4
(label) printf_ulong::@5
(label) printf_ulong::@return
(struct printf_format_number) printf_ulong::format
(byte) printf_ulong::format_justify_left
(byte) printf_ulong::format_justify_left#0
(byte) printf_ulong::format_justify_left#1
(byte) printf_ulong::format_justify_left#2
(byte) printf_ulong::format_justify_left#3
(byte) printf_ulong::format_justify_left#4
(byte) printf_ulong::format_justify_left#5
(byte) printf_ulong::format_min_length
(byte) printf_ulong::format_min_length#0
(byte) printf_ulong::format_min_length#1
(byte) printf_ulong::format_min_length#2
(byte) printf_ulong::format_min_length#3
(byte) printf_ulong::format_min_length#4
(byte) printf_ulong::format_min_length#5
(byte) printf_ulong::format_radix
(byte) printf_ulong::format_radix#0
(byte) printf_ulong::format_radix#1
(byte) printf_ulong::format_radix#2
(byte) printf_ulong::format_radix#3
(byte) printf_ulong::format_radix#4
(byte) printf_ulong::format_radix#5
(byte) printf_ulong::format_sign_always
(byte) printf_ulong::format_sign_always#0
(byte) printf_ulong::format_sign_always#1
(byte) printf_ulong::format_sign_always#2
(byte) printf_ulong::format_sign_always#3
(byte) printf_ulong::format_sign_always#4
(byte) printf_ulong::format_sign_always#5
(byte) printf_ulong::format_upper_case
(byte) printf_ulong::format_upper_case#0
(byte) printf_ulong::format_upper_case#1
(byte) printf_ulong::format_upper_case#2
(byte) printf_ulong::format_upper_case#3
(byte) printf_ulong::format_upper_case#4
(byte) printf_ulong::format_upper_case#5
(byte) printf_ulong::format_zero_padding
(byte) printf_ulong::format_zero_padding#0
(byte) printf_ulong::format_zero_padding#1
(byte) printf_ulong::format_zero_padding#2
(byte) printf_ulong::format_zero_padding#3
(byte) printf_ulong::format_zero_padding#4
(byte) printf_ulong::format_zero_padding#5
(dword) printf_ulong::uvalue
(dword) printf_ulong::uvalue#0
(dword) printf_ulong::uvalue#1
(dword) printf_ulong::uvalue#2
(dword) printf_ulong::uvalue#3
(dword) printf_ulong::uvalue#4
(void()) setup_irq()
(label) setup_irq::@return
(byte()) sgn_u8((byte) sgn_u8::u)
(number~) sgn_u8::$0
(bool~) sgn_u8::$1
(label) sgn_u8::@1
(label) sgn_u8::@2
(label) sgn_u8::@return
(byte) sgn_u8::return
(byte) sgn_u8::return#0
(byte) sgn_u8::return#1
(byte) sgn_u8::return#2
(byte) sgn_u8::return#3
(byte) sgn_u8::return#4
(byte) sgn_u8::return#5
(byte) sgn_u8::return#6
(byte) sgn_u8::return#7
(byte) sgn_u8::u
(byte) sgn_u8::u#0
(byte) sgn_u8::u#1
(byte) sgn_u8::u#2
(word()) strlen((byte*) strlen::str)
(bool~) strlen::$0
(label) strlen::@1
(label) strlen::@2
(label) strlen::@3
(label) strlen::@return
(word) strlen::len
(word) strlen::len#0
(word) strlen::len#1
(word) strlen::len#2
(word) strlen::len#3
(word) strlen::len#4
(word) strlen::return
(word) strlen::return#0
(word) strlen::return#1
(word) strlen::return#2
(word) strlen::return#3
(word) strlen::return#4
(byte*) strlen::str
(byte*) strlen::str#0
(byte*) strlen::str#1
(byte*) strlen::str#2
(byte*) strlen::str#3
(byte*) strlen::str#4
(byte*()) strupr((byte*) strupr::str)
(byte~) strupr::$0
(bool~) strupr::$1
(label) strupr::@1
(label) strupr::@2
(label) strupr::@3
(label) strupr::@4
(label) strupr::@return
(byte*) strupr::return
(byte*) strupr::return#0
(byte*) strupr::return#1
(byte*) strupr::return#2
(byte*) strupr::return#3
(byte*) strupr::src
(byte*) strupr::src#0
(byte*) strupr::src#1
(byte*) strupr::src#2
(byte*) strupr::src#3
(byte*) strupr::src#4
(byte*) strupr::str
(byte*) strupr::str#0
(byte*) strupr::str#1
(byte*) strupr::str#2
(byte*) strupr::str#3
(byte*) strupr::str#4
(byte*) strupr::str#5
(byte()) textcolor((byte) textcolor::color)
(label) textcolor::@return
(byte) textcolor::color
(byte) textcolor::color#0
(byte) textcolor::color#1
(byte) textcolor::old
(byte) textcolor::old#0
(byte) textcolor::return
(byte) textcolor::return#0
(byte) textcolor::return#1
(byte) textcolor::return#2
(byte) textcolor::return#3
(label) toD0181
(number~) toD0181_$0
(number~) toD0181_$1
(number~) toD0181_$2
(byte~) toD0181_$3
(number~) toD0181_$4
(number~) toD0181_$5
(number~) toD0181_$6
(word~) toD0181_$7
(label) toD0181_@return
(byte*) toD0181_gfx
(byte*) toD0181_gfx#0
(byte*) toD0181_gfx#1
(byte) toD0181_return
(byte) toD0181_return#0
(byte) toD0181_return#1
(byte) toD0181_return#2
(byte) toD0181_return#3
(byte*) toD0181_screen
(byte*) toD0181_screen#0
(byte*) toD0181_screen#1
(byte()) toupper((byte) toupper::ch)
(bool~) toupper::$0
(bool~) toupper::$1
(bool~) toupper::$2
(byte~) toupper::$3
(label) toupper::@1
(label) toupper::@2
(label) toupper::@return
(byte) toupper::ch
(byte) toupper::ch#0
(byte) toupper::ch#1
(byte) toupper::ch#2
(byte) toupper::ch#3
(byte) toupper::return
(byte) toupper::return#0
(byte) toupper::return#1
(byte) toupper::return#2
(byte) toupper::return#3
(byte) toupper::return#4
(byte) toupper::return#5
(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
(bool~) uctoa::$0
(bool~) uctoa::$1
(byte~) uctoa::$10
(bool~) uctoa::$2
(bool~) uctoa::$3
(number~) uctoa::$4
(bool~) uctoa::$5
(bool~) uctoa::$6
(bool~) uctoa::$7
(bool~) uctoa::$8
(byte~) uctoa::$9
(label) uctoa::@1
(label) uctoa::@10
(label) uctoa::@11
(label) uctoa::@12
(label) uctoa::@13
(label) uctoa::@14
(label) uctoa::@15
(label) uctoa::@2
(label) uctoa::@3
(label) uctoa::@4
(label) uctoa::@5
(label) uctoa::@6
(label) uctoa::@7
(label) uctoa::@8
(label) uctoa::@9
(label) uctoa::@return
(byte*) uctoa::buffer
(byte*) uctoa::buffer#0
(byte*) uctoa::buffer#1
(byte*) uctoa::buffer#10
(byte*) uctoa::buffer#11
(byte*) uctoa::buffer#12
(byte*) uctoa::buffer#13
(byte*) uctoa::buffer#14
(byte*) uctoa::buffer#15
(byte*) uctoa::buffer#16
(byte*) uctoa::buffer#17
(byte*) uctoa::buffer#18
(byte*) uctoa::buffer#19
(byte*) uctoa::buffer#2
(byte*) uctoa::buffer#20
(byte*) uctoa::buffer#21
(byte*) uctoa::buffer#3
(byte*) uctoa::buffer#4
(byte*) uctoa::buffer#5
(byte*) uctoa::buffer#6
(byte*) uctoa::buffer#7
(byte*) uctoa::buffer#8
(byte*) uctoa::buffer#9
(byte) uctoa::digit
(byte) uctoa::digit#0
(byte) uctoa::digit#1
(byte) uctoa::digit#2
(byte) uctoa::digit#3
(byte) uctoa::digit#4
(byte) uctoa::digit#5
(byte) uctoa::digit#6
(byte) uctoa::digit_value
(byte) uctoa::digit_value#0
(byte) uctoa::digit_value#1
(byte*) uctoa::digit_values
(byte*) uctoa::digit_values#0
(byte*) uctoa::digit_values#1
(byte*) uctoa::digit_values#10
(byte*) uctoa::digit_values#2
(byte*) uctoa::digit_values#3
(byte*) uctoa::digit_values#4
(byte*) uctoa::digit_values#5
(byte*) uctoa::digit_values#6
(byte*) uctoa::digit_values#7
(byte*) uctoa::digit_values#8
(byte*) uctoa::digit_values#9
(byte) uctoa::max_digits
(byte) uctoa::max_digits#0
(byte) uctoa::max_digits#1
(byte) uctoa::max_digits#10
(byte) uctoa::max_digits#2
(byte) uctoa::max_digits#3
(byte) uctoa::max_digits#4
(byte) uctoa::max_digits#5
(byte) uctoa::max_digits#6
(byte) uctoa::max_digits#7
(byte) uctoa::max_digits#8
(byte) uctoa::max_digits#9
(byte) uctoa::radix
(byte) uctoa::radix#0
(byte) uctoa::radix#1
(byte) uctoa::radix#2
(byte) uctoa::radix#3
(byte) uctoa::radix#4
(byte) uctoa::started
(byte) uctoa::started#0
(byte) uctoa::started#1
(byte) uctoa::started#2
(byte) uctoa::started#3
(byte) uctoa::started#4
(byte) uctoa::value
(byte) uctoa::value#0
(byte) uctoa::value#1
(byte) uctoa::value#10
(byte) uctoa::value#11
(byte) uctoa::value#12
(byte) uctoa::value#13
(byte) uctoa::value#14
(byte) uctoa::value#15
(byte) uctoa::value#2
(byte) uctoa::value#3
(byte) uctoa::value#4
(byte) uctoa::value#5
(byte) uctoa::value#6
(byte) uctoa::value#7
(byte) uctoa::value#8
(byte) uctoa::value#9
(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
(bool~) uctoa_append::$0
(label) uctoa_append::@1
(label) uctoa_append::@2
(label) uctoa_append::@3
(label) uctoa_append::@return
(byte*) uctoa_append::buffer
(byte*) uctoa_append::buffer#0
(byte*) uctoa_append::buffer#1
(byte*) uctoa_append::buffer#2
(byte*) uctoa_append::buffer#3
(byte*) uctoa_append::buffer#4
(byte) uctoa_append::digit
(byte) uctoa_append::digit#0
(byte) uctoa_append::digit#1
(byte) uctoa_append::digit#2
(byte) uctoa_append::digit#3
(byte) uctoa_append::digit#4
(byte) uctoa_append::return
(byte) uctoa_append::return#0
(byte) uctoa_append::return#1
(byte) uctoa_append::return#2
(byte) uctoa_append::return#3
(byte) uctoa_append::return#4
(byte) uctoa_append::sub
(byte) uctoa_append::sub#0
(byte) uctoa_append::sub#1
(byte) uctoa_append::sub#2
(byte) uctoa_append::sub#3
(byte) uctoa_append::value
(byte) uctoa_append::value#0
(byte) uctoa_append::value#1
(byte) uctoa_append::value#2
(byte) uctoa_append::value#3
(byte) uctoa_append::value#4
(byte) uctoa_append::value#5
(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
(bool~) ultoa::$0
(bool~) ultoa::$1
(byte~) ultoa::$10
(byte~) ultoa::$11
(bool~) ultoa::$2
(bool~) ultoa::$3
(number~) ultoa::$4
(bool~) ultoa::$5
(bool~) ultoa::$6
(bool~) ultoa::$7
(bool~) ultoa::$8
(dword~) ultoa::$9
(label) ultoa::@1
(label) ultoa::@10
(label) ultoa::@11
(label) ultoa::@12
(label) ultoa::@13
(label) ultoa::@14
(label) ultoa::@15
(label) ultoa::@2
(label) ultoa::@3
(label) ultoa::@4
(label) ultoa::@5
(label) ultoa::@6
(label) ultoa::@7
(label) ultoa::@8
(label) ultoa::@9
(label) ultoa::@return
(byte*) ultoa::buffer
(byte*) ultoa::buffer#0
(byte*) ultoa::buffer#1
(byte*) ultoa::buffer#10
(byte*) ultoa::buffer#11
(byte*) ultoa::buffer#12
(byte*) ultoa::buffer#13
(byte*) ultoa::buffer#14
(byte*) ultoa::buffer#15
(byte*) ultoa::buffer#16
(byte*) ultoa::buffer#17
(byte*) ultoa::buffer#18
(byte*) ultoa::buffer#19
(byte*) ultoa::buffer#2
(byte*) ultoa::buffer#20
(byte*) ultoa::buffer#21
(byte*) ultoa::buffer#3
(byte*) ultoa::buffer#4
(byte*) ultoa::buffer#5
(byte*) ultoa::buffer#6
(byte*) ultoa::buffer#7
(byte*) ultoa::buffer#8
(byte*) ultoa::buffer#9
(byte) ultoa::digit
(byte) ultoa::digit#0
(byte) ultoa::digit#1
(byte) ultoa::digit#2
(byte) ultoa::digit#3
(byte) ultoa::digit#4
(byte) ultoa::digit#5
(byte) ultoa::digit#6
(dword) ultoa::digit_value
(dword) ultoa::digit_value#0
(dword) ultoa::digit_value#1
(dword*) ultoa::digit_values
(dword*) ultoa::digit_values#0
(dword*) ultoa::digit_values#1
(dword*) ultoa::digit_values#10
(dword*) ultoa::digit_values#2
(dword*) ultoa::digit_values#3
(dword*) ultoa::digit_values#4
(dword*) ultoa::digit_values#5
(dword*) ultoa::digit_values#6
(dword*) ultoa::digit_values#7
(dword*) ultoa::digit_values#8
(dword*) ultoa::digit_values#9
(byte) ultoa::max_digits
(byte) ultoa::max_digits#0
(byte) ultoa::max_digits#1
(byte) ultoa::max_digits#10
(byte) ultoa::max_digits#2
(byte) ultoa::max_digits#3
(byte) ultoa::max_digits#4
(byte) ultoa::max_digits#5
(byte) ultoa::max_digits#6
(byte) ultoa::max_digits#7
(byte) ultoa::max_digits#8
(byte) ultoa::max_digits#9
(byte) ultoa::radix
(byte) ultoa::radix#0
(byte) ultoa::radix#1
(byte) ultoa::radix#2
(byte) ultoa::radix#3
(byte) ultoa::radix#4
(byte) ultoa::started
(byte) ultoa::started#0
(byte) ultoa::started#1
(byte) ultoa::started#2
(byte) ultoa::started#3
(byte) ultoa::started#4
(dword) ultoa::value
(dword) ultoa::value#0
(dword) ultoa::value#1
(dword) ultoa::value#10
(dword) ultoa::value#11
(dword) ultoa::value#12
(dword) ultoa::value#13
(dword) ultoa::value#14
(dword) ultoa::value#15
(dword) ultoa::value#2
(dword) ultoa::value#3
(dword) ultoa::value#4
(dword) ultoa::value#5
(dword) ultoa::value#6
(dword) ultoa::value#7
(dword) ultoa::value#8
(dword) ultoa::value#9
(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
(bool~) ultoa_append::$0
(label) ultoa_append::@1
(label) ultoa_append::@2
(label) ultoa_append::@3
(label) ultoa_append::@return
(byte*) ultoa_append::buffer
(byte*) ultoa_append::buffer#0
(byte*) ultoa_append::buffer#1
(byte*) ultoa_append::buffer#2
(byte*) ultoa_append::buffer#3
(byte*) ultoa_append::buffer#4
(byte) ultoa_append::digit
(byte) ultoa_append::digit#0
(byte) ultoa_append::digit#1
(byte) ultoa_append::digit#2
(byte) ultoa_append::digit#3
(byte) ultoa_append::digit#4
(dword) ultoa_append::return
(dword) ultoa_append::return#0
(dword) ultoa_append::return#1
(dword) ultoa_append::return#2
(dword) ultoa_append::return#3
(dword) ultoa_append::return#4
(dword) ultoa_append::sub
(dword) ultoa_append::sub#0
(dword) ultoa_append::sub#1
(dword) ultoa_append::sub#2
(dword) ultoa_append::sub#3
(dword) ultoa_append::value
(dword) ultoa_append::value#0
(dword) ultoa_append::value#1
(dword) ultoa_append::value#2
(dword) ultoa_append::value#3
(dword) ultoa_append::value#4
(dword) ultoa_append::value#5

Adding number conversion cast (unumber) 0 in 
Adding number conversion cast (unumber) 1*$80 in 
Adding number conversion cast (unumber) 2*$80 in 
Adding number conversion cast (unumber) 3*$80 in 
Adding number conversion cast (unumber) 4*$80 in 
Adding number conversion cast (unumber) 5*$80 in 
Adding number conversion cast (unumber) 6*$80 in 
Adding number conversion cast (unumber) 7*$80 in 
Adding number conversion cast (unumber) 8*$80 in 
Adding number conversion cast (unumber) 9*$80 in 
Adding number conversion cast (unumber) $a*$80 in 
Adding number conversion cast (unumber) $b*$80 in 
Adding number conversion cast (unumber) $c*$80 in 
Adding number conversion cast (unumber) $d*$80 in 
Adding number conversion cast (unumber) $e*$80 in 
Adding number conversion cast (unumber) $f*$80 in 
Adding number conversion cast (unumber) $40 in 
Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#6 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) strupr::$1 ← (number) 0 != *((byte*) strupr::src#2)
Adding number conversion cast (unumber) 0 in (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#2)
Adding number conversion cast (unumber) $ffffffff in (number~) clock::$0 ← (number) $ffffffff - *((const nomodify dword*) CIA2_TIMER_AB)
Adding number conversion cast (unumber) clock::$0 in (number~) clock::$0 ← (unumber)(number) $ffffffff - *((const nomodify dword*) CIA2_TIMER_AB)
Adding number conversion cast (unumber) $ffffffff in *((const nomodify dword*) CIA2_TIMER_AB) ← (number) $ffffffff
Adding number conversion cast (unumber) 3 in (byte) uctoa::max_digits#1 ← (number) 3
Adding number conversion cast (unumber) 2 in (byte) uctoa::max_digits#2 ← (number) 2
Adding number conversion cast (unumber) 3 in (byte) uctoa::max_digits#3 ← (number) 3
Adding number conversion cast (unumber) 8 in (byte) uctoa::max_digits#4 ← (number) 8
Adding number conversion cast (unumber) 0 in *((byte*) uctoa::buffer#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (number) 1
Adding number conversion cast (unumber) uctoa::$4 in (number~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte*) uctoa::buffer#3) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) uctoa::started#1 ← (number) 1
Adding number conversion cast (unumber) $a in (byte) ultoa::max_digits#1 ← (number) $a
Adding number conversion cast (unumber) 8 in (byte) ultoa::max_digits#2 ← (number) 8
Adding number conversion cast (unumber) $b in (byte) ultoa::max_digits#3 ← (number) $b
Adding number conversion cast (unumber) $20 in (byte) ultoa::max_digits#4 ← (number) $20
Adding number conversion cast (unumber) 0 in *((byte*) ultoa::buffer#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) ultoa::$4 ← (byte) ultoa::max_digits#5 - (number) 1
Adding number conversion cast (unumber) ultoa::$4 in (number~) ultoa::$4 ← (byte) ultoa::max_digits#5 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte*) ultoa::buffer#3) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) ultoa::started#1 ← (number) 1
Adding number conversion cast (unumber) $19 in (bool~) gotoxy::$0 ← (byte) gotoxy::y#3 > (number) $19
Adding number conversion cast (unumber) $28 in (bool~) gotoxy::$2 ← (byte) gotoxy::x#3 >= (number) $28
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (number~) gotoxy::$4 ← (word~) gotoxy::$8 * (number) $28
Adding number conversion cast (unumber) gotoxy::$4 in (number~) gotoxy::$4 ← (word~) gotoxy::$8 * (unumber)(number) $28
Adding number conversion cast (unumber) gotoxy::$5 in (number~) gotoxy::$5 ← (unumber~) gotoxy::$4 + (byte) gotoxy::x#4
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) cputc::$1 ← (byte) conio_cursor_x == (number) $28
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) $28 in (number~) cputln::$0 ← (number) $28 - (byte) conio_cursor_x
Adding number conversion cast (unumber) cputln::$0 in (number~) cputln::$0 ← (unumber)(number) $28 - (byte) conio_cursor_x
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) $19 in (bool~) cscroll::$0 ← (byte) conio_cursor_y == (number) $19
Adding number conversion cast (unumber) 0 in (bool~) cscroll::$9 ← (number) 0 != (byte) conio_scroll_enable
Adding number conversion cast (unumber) $28 in (void*) memcpy::source#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $28
Adding number conversion cast (unumber) $19*$28-$28 in (word) memcpy::num#0 ← (number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $28 in (void*) memcpy::source#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $28
Adding number conversion cast (unumber) $19*$28-$28 in (word) memcpy::num#1 ← (number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $28 in (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $19*$28 in (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(unumber)(number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#0 ← (number) $28
Adding number conversion cast (unumber) $28 in (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $19*$28 in (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(unumber)(number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#1 ← (number) $28
Adding number conversion cast (unumber) $28 in (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (number) $28
Adding number conversion cast (unumber) $28 in (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (number) $28
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) cputs::$1 ← (number) 0 != (byte) cputs::c#1
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) printf_ulong::$5 ← (number) 0 != (byte) printf_ulong::format_sign_always#1
Adding number conversion cast (unumber) printf_ulong::$2 in (byte) printf_ulong::format_upper_case#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_upper_case#3 printf_ulong::@2/(byte) printf_ulong::format_upper_case#4 )
  (byte) printf_ulong::format_zero_padding#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_zero_padding#3 printf_ulong::@2/(byte) printf_ulong::format_zero_padding#4 )
  (byte) printf_ulong::format_sign_always#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_sign_always#4 printf_ulong::@2/(byte) printf_ulong::format_sign_always#5 )
  (byte) printf_ulong::format_justify_left#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_justify_left#3 printf_ulong::@2/(byte) printf_ulong::format_justify_left#4 )
  (byte) printf_ulong::format_min_length#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_min_length#3 printf_ulong::@2/(byte) printf_ulong::format_min_length#4 )
  (byte) printf_ulong::format_radix#1 ← phi( printf_ulong::@1/(byte) printf_ulong::format_radix#3 printf_ulong::@2/(byte) printf_ulong::format_radix#4 )
  (dword) printf_ulong::uvalue#1 ← phi( printf_ulong::@1/(dword) printf_ulong::uvalue#2 printf_ulong::@2/(dword) printf_ulong::uvalue#3 )
  (number~) printf_ulong::$2 ← phi( printf_ulong::@1/(byte~) printf_ulong::$1 printf_ulong::@2/(number~) printf_ulong::$0 )
Adding number conversion cast (unumber) printf_ulong::$0 in (byte) printf_ulong::format_upper_case#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_upper_case#3 printf_ulong::@2/(byte) printf_ulong::format_upper_case#4 )
  (byte) printf_ulong::format_zero_padding#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_zero_padding#3 printf_ulong::@2/(byte) printf_ulong::format_zero_padding#4 )
  (byte) printf_ulong::format_sign_always#3 ← phi( printf_ulong::@1/(byte) printf_ulong::format_sign_always#4 printf_ulong::@2/(byte) printf_ulong::format_sign_always#5 )
  (byte) printf_ulong::format_justify_left#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_justify_left#3 printf_ulong::@2/(byte) printf_ulong::format_justify_left#4 )
  (byte) printf_ulong::format_min_length#2 ← phi( printf_ulong::@1/(byte) printf_ulong::format_min_length#3 printf_ulong::@2/(byte) printf_ulong::format_min_length#4 )
  (byte) printf_ulong::format_radix#1 ← phi( printf_ulong::@1/(byte) printf_ulong::format_radix#3 printf_ulong::@2/(byte) printf_ulong::format_radix#4 )
  (dword) printf_ulong::uvalue#1 ← phi( printf_ulong::@1/(dword) printf_ulong::uvalue#2 printf_ulong::@2/(dword) printf_ulong::uvalue#3 )
  (unumber~) printf_ulong::$2 ← phi( printf_ulong::@1/(byte~) printf_ulong::$1 printf_ulong::@2/(number~) printf_ulong::$0 )
Adding number conversion cast (unumber) 0 in (bool~) printf_uchar::$5 ← (number) 0 != (byte) printf_uchar::format_sign_always#1
Adding number conversion cast (unumber) printf_uchar::$2 in (byte) printf_uchar::format_upper_case#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_upper_case#3 printf_uchar::@2/(byte) printf_uchar::format_upper_case#4 )
  (byte) printf_uchar::format_zero_padding#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_zero_padding#3 printf_uchar::@2/(byte) printf_uchar::format_zero_padding#4 )
  (byte) printf_uchar::format_sign_always#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_sign_always#4 printf_uchar::@2/(byte) printf_uchar::format_sign_always#5 )
  (byte) printf_uchar::format_justify_left#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_justify_left#3 printf_uchar::@2/(byte) printf_uchar::format_justify_left#4 )
  (byte) printf_uchar::format_min_length#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_min_length#3 printf_uchar::@2/(byte) printf_uchar::format_min_length#4 )
  (byte) printf_uchar::format_radix#1 ← phi( printf_uchar::@1/(byte) printf_uchar::format_radix#3 printf_uchar::@2/(byte) printf_uchar::format_radix#4 )
  (byte) printf_uchar::uvalue#1 ← phi( printf_uchar::@1/(byte) printf_uchar::uvalue#2 printf_uchar::@2/(byte) printf_uchar::uvalue#3 )
  (number~) printf_uchar::$2 ← phi( printf_uchar::@1/(byte~) printf_uchar::$1 printf_uchar::@2/(number~) printf_uchar::$0 )
Adding number conversion cast (unumber) printf_uchar::$0 in (byte) printf_uchar::format_upper_case#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_upper_case#3 printf_uchar::@2/(byte) printf_uchar::format_upper_case#4 )
  (byte) printf_uchar::format_zero_padding#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_zero_padding#3 printf_uchar::@2/(byte) printf_uchar::format_zero_padding#4 )
  (byte) printf_uchar::format_sign_always#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_sign_always#4 printf_uchar::@2/(byte) printf_uchar::format_sign_always#5 )
  (byte) printf_uchar::format_justify_left#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_justify_left#3 printf_uchar::@2/(byte) printf_uchar::format_justify_left#4 )
  (byte) printf_uchar::format_min_length#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_min_length#3 printf_uchar::@2/(byte) printf_uchar::format_min_length#4 )
  (byte) printf_uchar::format_radix#1 ← phi( printf_uchar::@1/(byte) printf_uchar::format_radix#3 printf_uchar::@2/(byte) printf_uchar::format_radix#4 )
  (byte) printf_uchar::uvalue#1 ← phi( printf_uchar::@1/(byte) printf_uchar::uvalue#2 printf_uchar::@2/(byte) printf_uchar::uvalue#3 )
  (unumber~) printf_uchar::$2 ← phi( printf_uchar::@1/(byte~) printf_uchar::$1 printf_uchar::@2/(number~) printf_uchar::$0 )
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$26 ← (number) 0 != (byte) printf_number_buffer::format_min_length#2
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$27 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#2
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$28 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#2
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$29 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#2
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (number) 0
Adding number conversion cast (snumber) 0 in (signed byte) printf_number_buffer::padding#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$30 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#3
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$31 ← (number) 0 != (byte) printf_number_buffer::format_upper_case#2
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$32 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#4
Adding number conversion cast (unumber) $3fff in (number~) toD0181_$0 ← (word~) toD0181_$7 & (number) $3fff
Adding number conversion cast (unumber) toD0181_$0 in (number~) toD0181_$0 ← (word~) toD0181_$7 & (unumber)(number) $3fff
Adding number conversion cast (unumber) 4 in (number~) toD0181_$1 ← (unumber~) toD0181_$0 * (number) 4
Adding number conversion cast (unumber) toD0181_$1 in (number~) toD0181_$1 ← (unumber~) toD0181_$0 * (unumber)(number) 4
Adding number conversion cast (unumber) toD0181_$2 in (number~) toD0181_$2 ← > (unumber~) toD0181_$1
Adding number conversion cast (unumber) 4 in (number~) toD0181_$4 ← (byte~) toD0181_$3 / (number) 4
Adding number conversion cast (unumber) toD0181_$4 in (number~) toD0181_$4 ← (byte~) toD0181_$3 / (unumber)(number) 4
Adding number conversion cast (unumber) $f in (number~) toD0181_$5 ← (unumber~) toD0181_$4 & (number) $f
Adding number conversion cast (unumber) toD0181_$5 in (number~) toD0181_$5 ← (unumber~) toD0181_$4 & (unumber)(number) $f
Adding number conversion cast (unumber) toD0181_$6 in (number~) toD0181_$6 ← (unumber~) toD0181_$2 | (unumber~) toD0181_$5
Adding number conversion cast (unumber) $28*$19 in (word) memset::num#2 ← (number) $28*(number) $19
Adding number conversion cast (unumber) 0 in (byte) memset::c#3 ← (number) 0
Adding number conversion cast (unumber) $28*$19 in (word) memset::num#3 ← (number) $28*(number) $19
Adding number conversion cast (unumber) $28*$19 in (word) memset::num#4 ← (number) $28*(number) $19
Adding number conversion cast (unumber) $c in (byte*) main::screen#0 ← (const nomodify byte*) SCREEN+(number) $c
Adding number conversion cast (unumber) $c in (byte*) main::cols#0 ← (const nomodify byte*) COLS+(number) $c
Adding number conversion cast (unumber) $10 in (bool~) main::$7 ← (byte) main::y#2 < (number) $10
Adding number conversion cast (unumber) $f in (number~) main::$5 ← (byte) main::p0_idx#0 + (number) $f
Adding number conversion cast (unumber) main::$5 in (number~) main::$5 ← (byte) main::p0_idx#0 + (unumber)(number) $f
Adding number conversion cast (unumber) $aa in (number~) main::$6 ← (byte) main::p0_idx#0 + (number) $aa
Adding number conversion cast (unumber) main::$6 in (number~) main::$6 ← (byte) main::p0_idx#0 + (unumber)(number) $aa
Adding number conversion cast (unumber) $10 in (bool~) main::$8 ← (byte) main::x#2 < (number) $10
Adding number conversion cast (unumber) $10 in (byte) main::c#1 ← (byte) main::c#2 + (number) $10
Adding number conversion cast (unumber) $28 in (byte*) main::cols#1 ← (byte*) main::cols#3 + (number) $28
Adding number conversion cast (unumber) $28 in (byte*) main::screen#1 ← (byte*) main::screen#3 + (number) $28
Adding number conversion cast (unumber) 0 in (byte) memset::c#5 ← (number) 0
Adding number conversion cast (unumber) $800 in (word) memset::num#5 ← (number) $800
Adding number conversion cast (unumber) 0 in (bool~) main::$24 ← (number) 0 != (volatile byte) canvas_show_flag
Adding number conversion cast (unumber) $3fff in (number~) main::toD0181_$0 ← (word~) main::toD0181_$7 & (number) $3fff
Adding number conversion cast (unumber) main::toD0181_$0 in (number~) main::toD0181_$0 ← (word~) main::toD0181_$7 & (unumber)(number) $3fff
Adding number conversion cast (unumber) 4 in (number~) main::toD0181_$1 ← (unumber~) main::toD0181_$0 * (number) 4
Adding number conversion cast (unumber) main::toD0181_$1 in (number~) main::toD0181_$1 ← (unumber~) main::toD0181_$0 * (unumber)(number) 4
Adding number conversion cast (unumber) main::toD0181_$2 in (number~) main::toD0181_$2 ← > (unumber~) main::toD0181_$1
Adding number conversion cast (unumber) 4 in (number~) main::toD0181_$4 ← (byte~) main::toD0181_$3 / (number) 4
Adding number conversion cast (unumber) main::toD0181_$4 in (number~) main::toD0181_$4 ← (byte~) main::toD0181_$3 / (unumber)(number) 4
Adding number conversion cast (unumber) $f in (number~) main::toD0181_$5 ← (unumber~) main::toD0181_$4 & (number) $f
Adding number conversion cast (unumber) main::toD0181_$5 in (number~) main::toD0181_$5 ← (unumber~) main::toD0181_$4 & (unumber)(number) $f
Adding number conversion cast (unumber) main::toD0181_$6 in (number~) main::toD0181_$6 ← (unumber~) main::toD0181_$2 | (unumber~) main::toD0181_$5
Adding number conversion cast (unumber) $3fff in (number~) main::toD0182_$0 ← (word~) main::toD0182_$7 & (number) $3fff
Adding number conversion cast (unumber) main::toD0182_$0 in (number~) main::toD0182_$0 ← (word~) main::toD0182_$7 & (unumber)(number) $3fff
Adding number conversion cast (unumber) 4 in (number~) main::toD0182_$1 ← (unumber~) main::toD0182_$0 * (number) 4
Adding number conversion cast (unumber) main::toD0182_$1 in (number~) main::toD0182_$1 ← (unumber~) main::toD0182_$0 * (unumber)(number) 4
Adding number conversion cast (unumber) main::toD0182_$2 in (number~) main::toD0182_$2 ← > (unumber~) main::toD0182_$1
Adding number conversion cast (unumber) 4 in (number~) main::toD0182_$4 ← (byte~) main::toD0182_$3 / (number) 4
Adding number conversion cast (unumber) main::toD0182_$4 in (number~) main::toD0182_$4 ← (byte~) main::toD0182_$3 / (unumber)(number) 4
Adding number conversion cast (unumber) $f in (number~) main::toD0182_$5 ← (unumber~) main::toD0182_$4 & (number) $f
Adding number conversion cast (unumber) main::toD0182_$5 in (number~) main::toD0182_$5 ← (unumber~) main::toD0182_$4 & (unumber)(number) $f
Adding number conversion cast (unumber) main::toD0182_$6 in (number~) main::toD0182_$6 ← (unumber~) main::toD0182_$2 | (unumber~) main::toD0182_$5
Adding number conversion cast (unumber) 1 in (volatile byte) canvas_show_flag ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#2 ← (number) 0
Adding number conversion cast (unumber) $18 in (byte) gotoxy::y#2 ← (number) $18
Adding number conversion cast (unumber) $7f in *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (number) $7f
Adding number conversion cast (unumber) BORDER_YPOS_BOTTOM-8 in *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(number) 8
Adding number conversion cast (unumber) 8 in *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← ((unumber)) (const nomodify byte) BORDER_YPOS_BOTTOM-(number) 8
Adding number conversion cast (unumber) $3fff in (number~) irq_bottom_1::toD0181_$0 ← (word~) irq_bottom_1::toD0181_$7 & (number) $3fff
Adding number conversion cast (unumber) irq_bottom_1::toD0181_$0 in (number~) irq_bottom_1::toD0181_$0 ← (word~) irq_bottom_1::toD0181_$7 & (unumber)(number) $3fff
Adding number conversion cast (unumber) 4 in (number~) irq_bottom_1::toD0181_$1 ← (unumber~) irq_bottom_1::toD0181_$0 * (number) 4
Adding number conversion cast (unumber) irq_bottom_1::toD0181_$1 in (number~) irq_bottom_1::toD0181_$1 ← (unumber~) irq_bottom_1::toD0181_$0 * (unumber)(number) 4
Adding number conversion cast (unumber) irq_bottom_1::toD0181_$2 in (number~) irq_bottom_1::toD0181_$2 ← > (unumber~) irq_bottom_1::toD0181_$1
Adding number conversion cast (unumber) 4 in (number~) irq_bottom_1::toD0181_$4 ← (byte~) irq_bottom_1::toD0181_$3 / (number) 4
Adding number conversion cast (unumber) irq_bottom_1::toD0181_$4 in (number~) irq_bottom_1::toD0181_$4 ← (byte~) irq_bottom_1::toD0181_$3 / (unumber)(number) 4
Adding number conversion cast (unumber) $f in (number~) irq_bottom_1::toD0181_$5 ← (unumber~) irq_bottom_1::toD0181_$4 & (number) $f
Adding number conversion cast (unumber) irq_bottom_1::toD0181_$5 in (number~) irq_bottom_1::toD0181_$5 ← (unumber~) irq_bottom_1::toD0181_$4 & (unumber)(number) $f
Adding number conversion cast (unumber) irq_bottom_1::toD0181_$6 in (number~) irq_bottom_1::toD0181_$6 ← (unumber~) irq_bottom_1::toD0181_$2 | (unumber~) irq_bottom_1::toD0181_$5
Adding number conversion cast (unumber) 0 in (bool~) irq_bottom_2::$3 ← (number) 0 != (byte~) irq_bottom_2::$0
Adding number conversion cast (unumber) 0 in (volatile byte) canvas_show_flag ← (number) 0
Adding number conversion cast (unumber) BORDER_YPOS_BOTTOM-8 in *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(number) 8
Adding number conversion cast (unumber) 8 in *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← ((unumber)) (const nomodify byte) BORDER_YPOS_BOTTOM-(number) 8
Adding number conversion cast (unumber) $ff in (bool~) line::$8 ← (byte) line::sx#1 == (number) $ff
Adding number conversion cast (unumber) 2 in (number~) line::$17 ← (byte) line::dx#2 / (number) 2
Adding number conversion cast (unumber) line::$17 in (number~) line::$17 ← (byte) line::dx#2 / (unumber)(number) 2
Adding number conversion cast (unumber) 2 in (number~) line::$11 ← (byte) line::dy#2 / (number) 2
Adding number conversion cast (unumber) line::$11 in (number~) line::$11 ← (byte) line::dy#2 / (unumber)(number) 2
Adding number conversion cast (unumber) 8 in (number~) line::plot1_$0 ← (byte) line::plot1_x#1 / (number) 8
Adding number conversion cast (unumber) line::plot1_$0 in (number~) line::plot1_$0 ← (byte) line::plot1_x#1 / (unumber)(number) 8
Adding number conversion cast (unumber) line::plot1_$2 in (number~) line::plot1_$2 ← (unumber~) line::plot1_$0 * (const byte) SIZEOF_POINTER
Adding number conversion cast (unumber) 7 in (number~) line::plot1_$1 ← (byte) line::plot1_x#1 & (number) 7
Adding number conversion cast (unumber) line::plot1_$1 in (number~) line::plot1_$1 ← (byte) line::plot1_x#1 & (unumber)(number) 7
Adding number conversion cast (unumber) 8 in (number~) line::plot2_$0 ← (byte) line::plot2_x#1 / (number) 8
Adding number conversion cast (unumber) line::plot2_$0 in (number~) line::plot2_$0 ← (byte) line::plot2_x#1 / (unumber)(number) 8
Adding number conversion cast (unumber) line::plot2_$2 in (number~) line::plot2_$2 ← (unumber~) line::plot2_$0 * (const byte) SIZEOF_POINTER
Adding number conversion cast (unumber) 7 in (number~) line::plot2_$1 ← (byte) line::plot2_x#1 & (number) 7
Adding number conversion cast (unumber) line::plot2_$1 in (number~) line::plot2_$1 ← (byte) line::plot2_x#1 & (unumber)(number) 7
Adding number conversion cast (unumber) 8 in (number~) line::plot3_$0 ← (byte) line::plot3_x#1 / (number) 8
Adding number conversion cast (unumber) line::plot3_$0 in (number~) line::plot3_$0 ← (byte) line::plot3_x#1 / (unumber)(number) 8
Adding number conversion cast (unumber) line::plot3_$2 in (number~) line::plot3_$2 ← (unumber~) line::plot3_$0 * (const byte) SIZEOF_POINTER
Adding number conversion cast (unumber) 7 in (number~) line::plot3_$1 ← (byte) line::plot3_x#1 & (number) 7
Adding number conversion cast (unumber) line::plot3_$1 in (number~) line::plot3_$1 ← (byte) line::plot3_x#1 & (unumber)(number) 7
Adding number conversion cast (unumber) 8 in (number~) line::plot4_$0 ← (byte) line::plot4_x#1 / (number) 8
Adding number conversion cast (unumber) line::plot4_$0 in (number~) line::plot4_$0 ← (byte) line::plot4_x#1 / (unumber)(number) 8
Adding number conversion cast (unumber) line::plot4_$2 in (number~) line::plot4_$2 ← (unumber~) line::plot4_$0 * (const byte) SIZEOF_POINTER
Adding number conversion cast (unumber) 7 in (number~) line::plot4_$1 ← (byte) line::plot4_x#1 & (number) 7
Adding number conversion cast (unumber) line::plot4_$1 in (number~) line::plot4_$1 ← (byte) line::plot4_x#1 & (unumber)(number) 7
Adding number conversion cast (unumber) $10 in (bool~) eorfill::$0 ← (byte) eorfill::x#2 < (number) $10
Adding number conversion cast (unumber) 0 in (byte) eorfill::eor#0 ← *((byte*) eorfill::line_column#2 + (number) 0)
Adding number conversion cast (unumber) $10*8 in (bool~) eorfill::$1 ← (byte) eorfill::y#2 < (number) $10*(number) 8
Adding number conversion cast (unumber) $10*8 in (byte*) eorfill::line_column#1 ← (byte*) eorfill::line_column#4 + (number) $10*(number) 8
Adding number conversion cast (unumber) $10*8 in (byte*) eorfill::fill_column#1 ← (byte*) eorfill::fill_column#3 + (number) $10*(number) 8
Adding number conversion cast (unumber) $80 in (number~) abs_u8::$0 ← (byte) abs_u8::u#2 & (number) $80
Adding number conversion cast (unumber) abs_u8::$0 in (number~) abs_u8::$0 ← (byte) abs_u8::u#2 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) abs_u8::$2 ← (number) 0 != (unumber~) abs_u8::$0
Adding number conversion cast (unumber) $80 in (number~) sgn_u8::$0 ← (byte) sgn_u8::u#2 & (number) $80
Adding number conversion cast (unumber) sgn_u8::$0 in (number~) sgn_u8::$0 ← (byte) sgn_u8::u#2 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) sgn_u8::$1 ← (number) 0 != (unumber~) sgn_u8::$0
Adding number conversion cast (unumber) -1 in (byte) sgn_u8::return#2 ← (number) -1
Adding number conversion cast (unumber) 1 in (byte) sgn_u8::return#3 ← (number) 1
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) 0 in (unumber~) printf_ulong::$0 ← (number) 0
Adding number conversion cast (unumber) 0 in (unumber~) printf_uchar::$0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#2
Inlining cast (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#2
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#7
Inlining cast *((const nomodify dword*) CIA2_TIMER_AB) ← (unumber)(number) $ffffffff
Inlining cast (byte) uctoa::max_digits#1 ← (unumber)(number) 3
Inlining cast (byte) uctoa::max_digits#2 ← (unumber)(number) 2
Inlining cast (byte) uctoa::max_digits#3 ← (unumber)(number) 3
Inlining cast (byte) uctoa::max_digits#4 ← (unumber)(number) 8
Inlining cast *((byte*) uctoa::buffer#2) ← (unumber)(number) 0
Inlining cast *((byte*) uctoa::buffer#3) ← (unumber)(number) 0
Inlining cast (byte) uctoa::started#1 ← (unumber)(number) 1
Inlining cast (byte) ultoa::max_digits#1 ← (unumber)(number) $a
Inlining cast (byte) ultoa::max_digits#2 ← (unumber)(number) 8
Inlining cast (byte) ultoa::max_digits#3 ← (unumber)(number) $b
Inlining cast (byte) ultoa::max_digits#4 ← (unumber)(number) $20
Inlining cast *((byte*) ultoa::buffer#2) ← (unumber)(number) 0
Inlining cast *((byte*) ultoa::buffer#3) ← (unumber)(number) 0
Inlining cast (byte) ultoa::started#1 ← (unumber)(number) 1
Inlining cast (byte) gotoxy::y#0 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::x#0 ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (word) memcpy::num#0 ← (unumber)(number) $19*(number) $28-(number) $28
Inlining cast (word) memcpy::num#1 ← (unumber)(number) $19*(number) $28-(number) $28
Inlining cast (word) memset::num#0 ← (unumber)(number) $28
Inlining cast (word) memset::num#1 ← (unumber)(number) $28
Inlining cast (byte) gotoxy::x#1 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#1 ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (unumber)(number) 0
Inlining cast (unumber~) printf_ulong::$0 ← (unumber)(number) 0
Inlining cast (unumber~) printf_uchar::$0 ← (unumber)(number) 0
Inlining cast (signed byte) printf_number_buffer::padding#2 ← (snumber)(number) 0
Inlining cast (word) memset::num#2 ← (unumber)(number) $28*(number) $19
Inlining cast (byte) memset::c#3 ← (unumber)(number) 0
Inlining cast (word) memset::num#3 ← (unumber)(number) $28*(number) $19
Inlining cast (word) memset::num#4 ← (unumber)(number) $28*(number) $19
Inlining cast (byte) memset::c#5 ← (unumber)(number) 0
Inlining cast (word) memset::num#5 ← (unumber)(number) $800
Inlining cast (byte*) main::canvas#1 ← (byte*)(word~) main::$22
Inlining cast (volatile byte) canvas_show_flag ← (unumber)(number) 1
Inlining cast (byte) gotoxy::x#2 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#2 ← (unumber)(number) $18
Inlining cast *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (unumber)(const nomodify byte) BORDER_YPOS_BOTTOM-(unumber)(number) 8
Inlining cast (volatile byte) canvas_show_flag ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (unumber)(const nomodify byte) BORDER_YPOS_BOTTOM-(unumber)(number) 8
Inlining cast (byte) sgn_u8::return#2 ← (unumber)(number) -1
Inlining cast (byte) sgn_u8::return#3 ← (unumber)(number) 1
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (struct MOS6569_VICII*) 53248
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (struct MOS6526_CIA*) 56320
Simplifying constant pointer cast (struct MOS6526_CIA*) 56576
Simplifying constant pointer cast (dword*) 56580
Simplifying constant pointer cast (void()**) 788
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 56320
Simplifying constant pointer cast (byte*) 56321
Simplifying constant pointer cast (byte*) 8192
Simplifying constant pointer cast (byte*) 12288
Simplifying constant pointer cast (byte*) 14336
Simplifying constant pointer cast (byte*) 11264
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 4096
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ffffffff
Simplifying constant integer cast $ffffffff
Simplifying constant integer cast 3
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) uctoa::value#3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $a
Simplifying constant integer cast 8
Simplifying constant integer cast $b
Simplifying constant integer cast $20
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 0
Simplifying constant integer cast $c
Simplifying constant integer cast $c
Simplifying constant integer cast $10
Simplifying constant integer cast $f
Simplifying constant integer cast $aa
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $800
Simplifying constant integer cast 0
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $18
Simplifying constant integer cast $7f
Simplifying constant integer cast (const nomodify byte) BORDER_YPOS_BOTTOM-(unumber)(number) 8
Simplifying constant integer cast 8
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast (const nomodify byte) BORDER_YPOS_BOTTOM-(unumber)(number) 8
Simplifying constant integer cast 8
Simplifying constant integer cast $ff
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 8
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 7
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast -1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (dword) $ffffffff
Finalized unsigned number type (dword) $ffffffff
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $aa
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $800
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) 8
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) -1
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to dword in (unumber~) clock::$0 ← (dword) $ffffffff - *((const nomodify dword*) CIA2_TIMER_AB)
Inferred type updated to byte in (unumber~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (byte) 1
Inferred type updated to byte in (unumber~) ultoa::$4 ← (byte) ultoa::max_digits#5 - (byte) 1
Inferred type updated to word in (unumber~) gotoxy::$4 ← (word~) gotoxy::$8 * (byte) $28
Inferred type updated to word in (unumber~) gotoxy::$5 ← (word~) gotoxy::$4 + (byte) gotoxy::x#4
Inferred type updated to byte in (unumber~) cputln::$0 ← (byte) $28 - (byte) conio_cursor_x
Inferred type updated to byte in (unumber~) printf_ulong::$0 ← (byte) 0
Inferred type updated to byte for (unumber~) printf_ulong::$2
Inferred type updated to byte in (unumber~) printf_uchar::$0 ← (byte) 0
Inferred type updated to byte for (unumber~) printf_uchar::$2
Inferred type updated to word in (unumber~) toD0181_$0 ← (word~) toD0181_$7 & (word) $3fff
Inferred type updated to word in (unumber~) toD0181_$1 ← (word~) toD0181_$0 * (byte) 4
Inferred type updated to byte in (unumber~) toD0181_$2 ← > (word~) toD0181_$1
Inferred type updated to byte in (unumber~) toD0181_$4 ← (byte~) toD0181_$3 / (byte) 4
Inferred type updated to byte in (unumber~) toD0181_$5 ← (byte~) toD0181_$4 & (byte) $f
Inferred type updated to byte in (unumber~) toD0181_$6 ← (byte~) toD0181_$2 | (byte~) toD0181_$5
Inferred type updated to byte in (unumber~) main::$5 ← (byte) main::p0_idx#0 + (byte) $f
Inferred type updated to byte in (unumber~) main::$6 ← (byte) main::p0_idx#0 + (byte) $aa
Inferred type updated to word in (unumber~) main::toD0181_$0 ← (word~) main::toD0181_$7 & (word) $3fff
Inferred type updated to word in (unumber~) main::toD0181_$1 ← (word~) main::toD0181_$0 * (byte) 4
Inferred type updated to byte in (unumber~) main::toD0181_$2 ← > (word~) main::toD0181_$1
Inferred type updated to byte in (unumber~) main::toD0181_$4 ← (byte~) main::toD0181_$3 / (byte) 4
Inferred type updated to byte in (unumber~) main::toD0181_$5 ← (byte~) main::toD0181_$4 & (byte) $f
Inferred type updated to byte in (unumber~) main::toD0181_$6 ← (byte~) main::toD0181_$2 | (byte~) main::toD0181_$5
Inferred type updated to word in (unumber~) main::toD0182_$0 ← (word~) main::toD0182_$7 & (word) $3fff
Inferred type updated to word in (unumber~) main::toD0182_$1 ← (word~) main::toD0182_$0 * (byte) 4
Inferred type updated to byte in (unumber~) main::toD0182_$2 ← > (word~) main::toD0182_$1
Inferred type updated to byte in (unumber~) main::toD0182_$4 ← (byte~) main::toD0182_$3 / (byte) 4
Inferred type updated to byte in (unumber~) main::toD0182_$5 ← (byte~) main::toD0182_$4 & (byte) $f
Inferred type updated to byte in (unumber~) main::toD0182_$6 ← (byte~) main::toD0182_$2 | (byte~) main::toD0182_$5
Inferred type updated to word in (unumber~) irq_bottom_1::toD0181_$0 ← (word~) irq_bottom_1::toD0181_$7 & (word) $3fff
Inferred type updated to word in (unumber~) irq_bottom_1::toD0181_$1 ← (word~) irq_bottom_1::toD0181_$0 * (byte) 4
Inferred type updated to byte in (unumber~) irq_bottom_1::toD0181_$2 ← > (word~) irq_bottom_1::toD0181_$1
Inferred type updated to byte in (unumber~) irq_bottom_1::toD0181_$4 ← (byte~) irq_bottom_1::toD0181_$3 / (byte) 4
Inferred type updated to byte in (unumber~) irq_bottom_1::toD0181_$5 ← (byte~) irq_bottom_1::toD0181_$4 & (byte) $f
Inferred type updated to byte in (unumber~) irq_bottom_1::toD0181_$6 ← (byte~) irq_bottom_1::toD0181_$2 | (byte~) irq_bottom_1::toD0181_$5
Inferred type updated to byte in (unumber~) line::$17 ← (byte) line::dx#2 / (byte) 2
Inferred type updated to byte in (unumber~) line::$11 ← (byte) line::dy#2 / (byte) 2
Inferred type updated to byte in (unumber~) line::plot1_$0 ← (byte) line::plot1_x#1 / (byte) 8
Inferred type updated to byte in (unumber~) line::plot1_$2 ← (byte~) line::plot1_$0 * (const byte) SIZEOF_POINTER
Inferred type updated to byte in (unumber~) line::plot1_$1 ← (byte) line::plot1_x#1 & (byte) 7
Inferred type updated to byte in (unumber~) line::plot2_$0 ← (byte) line::plot2_x#1 / (byte) 8
Inferred type updated to byte in (unumber~) line::plot2_$2 ← (byte~) line::plot2_$0 * (const byte) SIZEOF_POINTER
Inferred type updated to byte in (unumber~) line::plot2_$1 ← (byte) line::plot2_x#1 & (byte) 7
Inferred type updated to byte in (unumber~) line::plot3_$0 ← (byte) line::plot3_x#1 / (byte) 8
Inferred type updated to byte in (unumber~) line::plot3_$2 ← (byte~) line::plot3_$0 * (const byte) SIZEOF_POINTER
Inferred type updated to byte in (unumber~) line::plot3_$1 ← (byte) line::plot3_x#1 & (byte) 7
Inferred type updated to byte in (unumber~) line::plot4_$0 ← (byte) line::plot4_x#1 / (byte) 8
Inferred type updated to byte in (unumber~) line::plot4_$2 ← (byte~) line::plot4_$0 * (const byte) SIZEOF_POINTER
Inferred type updated to byte in (unumber~) line::plot4_$1 ← (byte) line::plot4_x#1 & (byte) 7
Inferred type updated to byte in (unumber~) abs_u8::$0 ← (byte) abs_u8::u#2 & (byte) $80
Inferred type updated to byte in (unumber~) sgn_u8::$0 ← (byte) sgn_u8::u#2 & (byte) $80
Inversing boolean not [33] (bool~) memset::$1 ← (word) memset::num#6 <= (byte) 0 from [32] (bool~) memset::$0 ← (word) memset::num#6 > (byte) 0
Inversing boolean not [262] (bool~) gotoxy::$1 ← (byte) gotoxy::y#3 <= (byte) $19 from [261] (bool~) gotoxy::$0 ← (byte) gotoxy::y#3 > (byte) $19
Inversing boolean not [266] (bool~) gotoxy::$3 ← (byte) gotoxy::x#3 < (byte) $28 from [265] (bool~) gotoxy::$2 ← (byte) gotoxy::x#3 >= (byte) $28
Inversing boolean not [295] (bool~) cputc::$2 ← (byte) conio_cursor_x != (byte) $28 from [294] (bool~) cputc::$1 ← (byte) conio_cursor_x == (byte) $28
Inversing boolean not [312] (bool~) cscroll::$1 ← (byte) conio_cursor_y != (byte) $19 from [311] (bool~) cscroll::$0 ← (byte) conio_cursor_y == (byte) $19
Inversing boolean not [432] (bool~) printf_number_buffer::$0 ← (byte) 0 == (byte) printf_number_buffer::format_min_length#2 from [431] (bool~) printf_number_buffer::$26 ← (byte) 0 != (byte) printf_number_buffer::format_min_length#2
Inversing boolean not [436] (bool~) printf_number_buffer::$1 ← (byte) 0 == (byte) printf_number_buffer::format_justify_left#2 from [435] (bool~) printf_number_buffer::$27 ← (byte) 0 != (byte) printf_number_buffer::format_justify_left#2
Inversing boolean not [438] (bool~) printf_number_buffer::$2 ← (byte) 0 == (byte) printf_number_buffer::format_zero_padding#2 from [437] (bool~) printf_number_buffer::$28 ← (byte) 0 != (byte) printf_number_buffer::format_zero_padding#2
Inversing boolean not [451] (bool~) printf_number_buffer::$20 ← (byte) 0 == (byte) printf_number_buffer::buffer_sign#2 from [450] (bool~) printf_number_buffer::$29 ← (byte) 0 != (byte) printf_number_buffer::buffer_sign#2
Inversing boolean not [458] (bool~) printf_number_buffer::$23 ← (signed byte) printf_number_buffer::padding#1 >= (signed byte) 0 from [457] (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (signed byte) 0
Inversing boolean not [466] (bool~) printf_number_buffer::$7 ← (byte) 0 == (byte) printf_number_buffer::buffer_sign#3 from [465] (bool~) printf_number_buffer::$30 ← (byte) 0 != (byte) printf_number_buffer::buffer_sign#3
Inversing boolean not [483] (bool~) printf_number_buffer::$12 ← (byte) 0 == (byte) printf_number_buffer::format_upper_case#2 from [482] (bool~) printf_number_buffer::$31 ← (byte) 0 != (byte) printf_number_buffer::format_upper_case#2
Inversing boolean not [495] (bool~) printf_number_buffer::$14 ← (byte) 0 == (byte) printf_number_buffer::format_zero_padding#4 from [494] (bool~) printf_number_buffer::$32 ← (byte) 0 != (byte) printf_number_buffer::format_zero_padding#4
Inversing boolean not [736] (bool~) irq_bottom_2::$1 ← (byte) 0 == (byte~) irq_bottom_2::$0 from [735] (bool~) irq_bottom_2::$3 ← (byte) 0 != (byte~) irq_bottom_2::$0
Inversing boolean not [737] (bool~) irq_bottom_2::$2 ← (byte) 0 != (byte~) irq_bottom_2::$0 from [736] (bool~) irq_bottom_2::$1 ← (byte) 0 == (byte~) irq_bottom_2::$0
Inversing boolean not [777] (bool~) line::$9 ← (byte) line::sx#1 != (byte) $ff from [776] (bool~) line::$8 ← (byte) line::sx#1 == (byte) $ff
Inversing boolean not [803] (bool~) line::$14 ← (byte) line::dy#3 >= (byte) line::e#1 from [802] (bool~) line::$13 ← (byte) line::dy#3 < (byte) line::e#1
Inversing boolean not [832] (bool~) line::$20 ← (byte) line::dx#4 >= (byte) line::e1#1 from [831] (bool~) line::$19 ← (byte) line::dx#4 < (byte) line::e1#1
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Alias candidate removed (volatile)toD0181_return#0 = toD0181_$6 toD0181_return#2 toD0181_return#1 toD0181_return#3 $0 canvas_show_memory 
Alias toupper::ch#1 = toupper::ch#2 toupper::ch#3 toupper::return#1 
Alias toupper::return#0 = toupper::$3 
Alias toupper::return#2 = toupper::return#4 
Alias memcpy::src_end#0 = memcpy::$0 
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#3 = memcpy::destination#5 memcpy::destination#4 memcpy::return#0 memcpy::return#4 memcpy::return#1 
Alias memset::return#0 = memset::str#6 memset::return#8 memset::return#1 
Alias memset::str#7 = memset::str#8 
Alias memset::num#6 = memset::num#7 
Alias memset::c#8 = memset::c#9 
Alias memset::end#0 = memset::$2 
Alias memset::c#6 = memset::c#7 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#10 = memset::str#9 
Alias strupr::src#0 = strupr::str#1 
Alias strupr::src#2 = strupr::src#3 strupr::src#4 
Alias strupr::str#2 = strupr::str#5 strupr::str#3 strupr::str#4 strupr::return#0 strupr::return#3 strupr::return#1 
Alias toupper::return#3 = toupper::return#5 
Alias strlen::len#2 = strlen::len#4 strlen::len#3 strlen::return#0 strlen::return#3 strlen::return#1 
Alias strlen::str#2 = strlen::str#3 
Alias clock::return#0 = clock::$0 clock::return#3 clock::return#1 
Alias uctoa::value#10 = uctoa::value#8 uctoa::value#12 uctoa::value#13 uctoa::value#9 uctoa::value#14 uctoa::value#15 uctoa::value#11 
Alias uctoa::buffer#10 = uctoa::buffer#17 uctoa::buffer#21 uctoa::buffer#16 uctoa::buffer#18 uctoa::buffer#13 uctoa::buffer#19 uctoa::buffer#20 uctoa::buffer#6 
Alias uctoa::radix#1 = uctoa::radix#2 uctoa::radix#3 uctoa::radix#4 
Alias uctoa::digit_values#10 = uctoa::digit_values#5 uctoa::digit_values#6 uctoa::digit_values#9 
Alias uctoa::digit#2 = uctoa::digit#3 uctoa::digit#6 uctoa::digit#5 
Alias uctoa::value#2 = uctoa::value#5 uctoa::value#3 uctoa::$10 uctoa::value#4 
Alias uctoa::started#2 = uctoa::started#3 
Alias uctoa::buffer#11 = uctoa::buffer#12 uctoa::buffer#7 uctoa::buffer#8 uctoa::buffer#9 
Alias uctoa::max_digits#10 = uctoa::max_digits#8 uctoa::max_digits#5 uctoa::max_digits#9 
Alias uctoa::digit_value#0 = uctoa::digit_value#1 
Alias uctoa_append::return#0 = uctoa_append::return#3 
Alias uctoa::value#0 = uctoa::$9 
Alias uctoa_append::digit#2 = uctoa_append::digit#4 uctoa_append::digit#3 
Alias uctoa_append::value#2 = uctoa_append::value#3 uctoa_append::value#4 uctoa_append::return#1 uctoa_append::return#4 uctoa_append::return#2 
Alias uctoa_append::sub#1 = uctoa_append::sub#2 
Alias uctoa_append::buffer#1 = uctoa_append::buffer#4 uctoa_append::buffer#2 
Alias ultoa::value#10 = ultoa::value#8 ultoa::value#12 ultoa::value#13 ultoa::value#9 ultoa::value#14 ultoa::value#15 ultoa::value#11 
Alias ultoa::buffer#10 = ultoa::buffer#17 ultoa::buffer#21 ultoa::buffer#16 ultoa::buffer#18 ultoa::buffer#13 ultoa::buffer#19 ultoa::buffer#20 ultoa::buffer#6 
Alias ultoa::radix#1 = ultoa::radix#2 ultoa::radix#3 ultoa::radix#4 
Alias ultoa::digit#2 = ultoa::digit#3 ultoa::digit#6 ultoa::digit#5 
Alias ultoa::digit_values#10 = ultoa::digit_values#5 ultoa::digit_values#6 ultoa::digit_values#9 
Alias ultoa::value#2 = ultoa::value#5 ultoa::value#3 ultoa::value#4 
Alias ultoa::started#2 = ultoa::started#3 
Alias ultoa::buffer#11 = ultoa::buffer#12 ultoa::buffer#7 ultoa::buffer#8 ultoa::buffer#9 
Alias ultoa::max_digits#10 = ultoa::max_digits#8 ultoa::max_digits#5 ultoa::max_digits#9 
Alias ultoa::digit_value#0 = ultoa::digit_value#1 
Alias ultoa_append::return#0 = ultoa_append::return#3 
Alias ultoa::value#0 = ultoa::$9 
Alias ultoa_append::digit#2 = ultoa_append::digit#4 ultoa_append::digit#3 
Alias ultoa_append::value#2 = ultoa_append::value#3 ultoa_append::value#4 ultoa_append::return#1 ultoa_append::return#4 ultoa_append::return#2 
Alias ultoa_append::sub#1 = ultoa_append::sub#2 
Alias ultoa_append::buffer#1 = ultoa_append::buffer#4 ultoa_append::buffer#2 
Alias gotoxy::x#5 = gotoxy::x#6 
Alias gotoxy::offset#0 = gotoxy::$5 
Alias gotoxy::y#5 = gotoxy::y#6 
Alias cputc::c#3 = cputc::c#4 
Alias cputln::ln_offset#0 = cputln::$0 
Alias cputs::c#1 = cputs::c#2 
Alias cputs::s#0 = cputs::s#7 cputs::s#6 
Alias textcolor::return#0 = textcolor::old#0 textcolor::return#3 textcolor::return#1 
Alias kbhit::return#0 = kbhit::$0 kbhit::return#3 kbhit::return#1 
Alias printf_padding::pad#3 = printf_padding::pad#4 printf_padding::pad#6 
Alias printf_padding::i#2 = printf_padding::i#4 printf_padding::i#3 
Alias printf_padding::length#3 = printf_padding::length#6 printf_padding::length#5 
Alias printf_ulong::uvalue#2 = printf_ulong::uvalue#4 printf_ulong::uvalue#3 
Alias printf_ulong::format_radix#3 = printf_ulong::format_radix#5 printf_ulong::format_radix#4 
Alias printf_ulong::format_min_length#3 = printf_ulong::format_min_length#5 printf_ulong::format_min_length#4 
Alias printf_ulong::format_justify_left#3 = printf_ulong::format_justify_left#5 printf_ulong::format_justify_left#4 
Alias printf_ulong::format_sign_always#1 = printf_ulong::format_sign_always#4 printf_ulong::format_sign_always#5 
Alias printf_ulong::format_zero_padding#3 = printf_ulong::format_zero_padding#5 printf_ulong::format_zero_padding#4 
Alias printf_ulong::format_upper_case#3 = printf_ulong::format_upper_case#5 printf_ulong::format_upper_case#4 
Alias printf_ulong::format_min_length#1 = printf_ulong::format_min_length#2 
Alias printf_ulong::format_justify_left#1 = printf_ulong::format_justify_left#2 
Alias printf_ulong::format_sign_always#2 = printf_ulong::format_sign_always#3 
Alias printf_ulong::format_zero_padding#1 = printf_ulong::format_zero_padding#2 
Alias printf_ulong::format_upper_case#1 = printf_ulong::format_upper_case#2 
Alias printf_ulong::format_radix#1 = printf_ulong::format_radix#2 
Alias printf_uchar::uvalue#2 = printf_uchar::uvalue#4 printf_uchar::uvalue#3 
Alias printf_uchar::format_radix#3 = printf_uchar::format_radix#5 printf_uchar::format_radix#4 
Alias printf_uchar::format_min_length#3 = printf_uchar::format_min_length#5 printf_uchar::format_min_length#4 
Alias printf_uchar::format_justify_left#3 = printf_uchar::format_justify_left#5 printf_uchar::format_justify_left#4 
Alias printf_uchar::format_sign_always#1 = printf_uchar::format_sign_always#4 printf_uchar::format_sign_always#5 
Alias printf_uchar::format_zero_padding#3 = printf_uchar::format_zero_padding#5 printf_uchar::format_zero_padding#4 
Alias printf_uchar::format_upper_case#3 = printf_uchar::format_upper_case#5 printf_uchar::format_upper_case#4 
Alias printf_uchar::format_min_length#1 = printf_uchar::format_min_length#2 
Alias printf_uchar::format_justify_left#1 = printf_uchar::format_justify_left#2 
Alias printf_uchar::format_sign_always#2 = printf_uchar::format_sign_always#3 
Alias printf_uchar::format_zero_padding#1 = printf_uchar::format_zero_padding#2 
Alias printf_uchar::format_upper_case#1 = printf_uchar::format_upper_case#2 
Alias printf_uchar::format_radix#1 = printf_uchar::format_radix#2 
Alias printf_number_buffer::buffer_digits#19 = printf_number_buffer::buffer_digits#2 printf_number_buffer::buffer_digits#5 printf_number_buffer::buffer_digits#20 
Alias printf_number_buffer::buffer_sign#12 = printf_number_buffer::buffer_sign#5 printf_number_buffer::buffer_sign#8 printf_number_buffer::buffer_sign#2 
Alias printf_number_buffer::format_min_length#2 = printf_number_buffer::format_min_length#6 printf_number_buffer::format_min_length#4 printf_number_buffer::format_min_length#5 
Alias printf_number_buffer::format_justify_left#12 = printf_number_buffer::format_justify_left#4 printf_number_buffer::format_justify_left#8 printf_number_buffer::format_justify_left#9 
Alias printf_number_buffer::format_zero_padding#11 = printf_number_buffer::format_zero_padding#17 printf_number_buffer::format_zero_padding#5 printf_number_buffer::format_zero_padding#12 
Alias printf_number_buffer::format_upper_case#11 = printf_number_buffer::format_upper_case#17 printf_number_buffer::format_upper_case#15 printf_number_buffer::format_upper_case#16 
Alias strlen::return#2 = strlen::return#4 
Alias printf_number_buffer::padding#1 = printf_number_buffer::$21 
Alias printf_number_buffer::len#0 = printf_number_buffer::len#3 
Alias printf_number_buffer::format_justify_left#5 = printf_number_buffer::format_justify_left#6 
Alias printf_number_buffer::format_zero_padding#6 = printf_number_buffer::format_zero_padding#7 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#9 
Alias printf_number_buffer::format_upper_case#12 = printf_number_buffer::format_upper_case#13 
Alias printf_number_buffer::buffer_digits#16 = printf_number_buffer::buffer_digits#17 
Alias printf_number_buffer::padding#12 = printf_number_buffer::padding#4 printf_number_buffer::padding#3 
Alias printf_number_buffer::buffer_sign#11 = printf_number_buffer::buffer_sign#6 printf_number_buffer::buffer_sign#7 
Alias printf_number_buffer::format_zero_padding#13 = printf_number_buffer::format_zero_padding#18 printf_number_buffer::format_zero_padding#2 
Alias printf_number_buffer::format_upper_case#14 = printf_number_buffer::format_upper_case#8 printf_number_buffer::format_upper_case#9 
Alias printf_number_buffer::buffer_digits#13 = printf_number_buffer::buffer_digits#18 printf_number_buffer::buffer_digits#14 
Alias printf_number_buffer::format_justify_left#19 = printf_number_buffer::format_justify_left#21 printf_number_buffer::format_justify_left#2 
Alias printf_number_buffer::buffer_sign#3 = printf_number_buffer::buffer_sign#4 
Alias printf_number_buffer::format_zero_padding#14 = printf_number_buffer::format_zero_padding#9 printf_number_buffer::format_zero_padding#8 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#13 printf_number_buffer::padding#9 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#6 printf_number_buffer::format_upper_case#5 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#15 printf_number_buffer::buffer_digits#11 
Alias printf_number_buffer::format_justify_left#16 = printf_number_buffer::format_justify_left#20 printf_number_buffer::format_justify_left#17 
Alias printf_number_buffer::padding#16 = printf_number_buffer::padding#6 printf_number_buffer::padding#5 
Alias printf_number_buffer::format_upper_case#3 = printf_number_buffer::format_upper_case#7 printf_number_buffer::format_upper_case#4 
Alias printf_number_buffer::buffer_digits#12 = printf_number_buffer::buffer_digits#9 printf_number_buffer::buffer_digits#8 
Alias printf_number_buffer::format_zero_padding#19 = printf_number_buffer::format_zero_padding#21 printf_number_buffer::format_zero_padding#3 
Alias printf_number_buffer::format_justify_left#13 = printf_number_buffer::format_justify_left#18 printf_number_buffer::format_justify_left#14 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#4 
Alias printf_number_buffer::format_justify_left#3 = printf_number_buffer::format_justify_left#7 
Alias printf_number_buffer::padding#11 = printf_number_buffer::padding#7 printf_number_buffer::padding#8 
Alias printf_number_buffer::buffer_digits#4 = printf_number_buffer::buffer_digits#7 printf_number_buffer::buffer_digits#6 
Alias printf_number_buffer::format_zero_padding#15 = printf_number_buffer::format_zero_padding#20 printf_number_buffer::format_zero_padding#16 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#15 printf_number_buffer::format_justify_left#11 
Alias printf_number_buffer::padding#14 = printf_number_buffer::padding#17 printf_number_buffer::padding#15 
Alias toD0181_screen#0 = toD0181_screen#1 
Alias toD0181_gfx#0 = toD0181_gfx#1 
Alias main::y#2 = main::y#3 main::c#0 
Alias main::cols#5 = main::cols#6 
Alias main::screen#5 = main::screen#6 
Alias main::p1_idx#0 = main::$5 
Alias main::p2_idx#0 = main::$6 
Alias main::cols#2 = main::cols#4 main::cols#3 
Alias main::x#2 = main::x#3 
Alias main::c#2 = main::c#3 
Alias main::screen#2 = main::screen#4 main::screen#3 
Alias main::y#4 = main::y#6 main::y#5 
Alias main::p0_idx#11 = main::p0_idx#8 main::p0_idx#5 main::p0_idx#2 main::p0_idx#9 main::p0_idx#6 main::p0_idx#3 
Alias main::p1_idx#2 = main::p1_idx#6 main::p1_idx#8 main::p1_idx#4 main::p1_idx#7 main::p1_idx#5 main::p1_idx#3 
Alias main::p2_idx#2 = main::p2_idx#7 main::p2_idx#8 main::p2_idx#6 main::p2_idx#4 main::p2_idx#5 main::p2_idx#3 
Alias main::canvas#10 = main::canvas#11 main::canvas#9 main::canvas#8 main::canvas#7 main::canvas#6 main::canvas#5 
Alias main::x1#0 = main::x1#1 
Alias main::y1#0 = main::y1#1 
Alias main::x0#0 = main::x0#2 main::x0#1 
Alias main::y0#0 = main::y0#2 main::y0#1 
Alias main::x2#0 = main::x2#1 
Alias main::y2#0 = main::y2#1 
Alias main::canvas#2 = main::canvas#4 main::canvas#3 
Alias main::p0_idx#10 = main::p0_idx#22 main::p0_idx#23 main::p0_idx#21 main::p0_idx#20 main::p0_idx#19 main::p0_idx#17 main::p0_idx#15 main::p0_idx#14 main::p0_idx#12 main::p0_idx#7 main::p0_idx#4 main::p0_idx#18 main::p0_idx#16 main::p0_idx#13 
Alias main::p1_idx#10 = main::p1_idx#22 main::p1_idx#23 main::p1_idx#21 main::p1_idx#20 main::p1_idx#19 main::p1_idx#18 main::p1_idx#17 main::p1_idx#16 main::p1_idx#15 main::p1_idx#14 main::p1_idx#13 main::p1_idx#12 main::p1_idx#11 main::p1_idx#9 
Alias main::p2_idx#10 = main::p2_idx#22 main::p2_idx#23 main::p2_idx#21 main::p2_idx#20 main::p2_idx#19 main::p2_idx#18 main::p2_idx#17 main::p2_idx#16 main::p2_idx#15 main::p2_idx#14 main::p2_idx#13 main::p2_idx#12 main::p2_idx#11 main::p2_idx#9 
Alias main::toD0181_screen#0 = main::toD0181_screen#1 
Alias main::toD0181_gfx#0 = main::toD0181_gfx#1 
Alias main::canvas#1 = main::canvas#23 main::canvas#22 main::canvas#21 main::canvas#20 main::canvas#19 main::canvas#18 main::canvas#17 main::canvas#16 main::canvas#15 main::canvas#14 main::canvas#13 main::canvas#12 
Alias main::toD0181_return#0 = main::toD0181_$6 main::toD0181_return#2 main::toD0181_return#1 main::toD0181_return#3 main::$15 
Alias main::toD0182_screen#0 = main::toD0182_screen#1 
Alias main::toD0182_gfx#0 = main::toD0182_gfx#1 
Alias main::toD0182_return#0 = main::toD0182_$6 main::toD0182_return#2 main::toD0182_return#1 main::toD0182_return#3 main::$16 
Alias clock::return#2 = clock::return#4 
Alias main::cyclecount#0 = main::$19 main::cyclecount#4 main::cyclecount#3 main::cyclecount#2 main::cyclecount#1 
Alias irq_bottom_1::toD0181_screen#0 = irq_bottom_1::toD0181_screen#1 
Alias irq_bottom_1::toD0181_gfx#0 = irq_bottom_1::toD0181_gfx#1 
Alias irq_bottom_1::toD0181_return#0 = irq_bottom_1::toD0181_$6 irq_bottom_1::toD0181_return#2 irq_bottom_1::toD0181_return#1 irq_bottom_1::toD0181_return#3 irq_bottom_1::$0 
Alias kbhit::return#2 = kbhit::return#4 
Alias line::x#0 = line::x1#3 line::x1#5 line::x#21 line::x1#4 line::x#20 line::x#18 line::x#14 line::x#15 
Alias line::y#0 = line::y1#3 line::y1#4 line::y#22 line::y1#6 line::y#21 line::y1#5 line::y#19 line::y#12 line::y#4 
Alias abs_u8::u#0 = line::$0 
Alias abs_u8::return#0 = abs_u8::return#5 
Alias line::y2#10 = line::y2#4 line::y2#8 line::y2#9 line::y2#5 line::y2#6 
Alias line::x2#13 = line::x2#6 line::x2#3 line::x2#4 line::x2#15 line::x2#14 
Alias line::dx#0 = line::$1 line::dx#15 line::dx#11 line::dx#6 line::dx#7 
Alias abs_u8::u#1 = line::$2 
Alias abs_u8::return#1 = abs_u8::return#6 
Alias line::dy#0 = line::$3 line::dy#11 line::dy#6 line::dy#7 
Alias sgn_u8::u#0 = line::$4 
Alias sgn_u8::return#0 = sgn_u8::return#5 
Alias line::sx#0 = line::$5 line::sx#1 line::sx#15 
Alias sgn_u8::u#1 = line::$6 
Alias sgn_u8::return#1 = sgn_u8::return#6 
Alias line::sy#0 = line::$7 line::sy#12 
Alias line::dx#1 = line::dx#2 line::dx#12 line::dx#9 
Alias line::x#11 = line::x#9 line::x#3 line::plot1_x#0 line::plot1_x#1 line::x#17 
Alias line::y#13 = line::y#16 line::y#5 line::plot1_y#0 line::plot1_y#1 line::y#14 
Alias line::sx#11 = line::sx#13 line::sx#9 line::sx#7 
Alias line::dy#1 = line::dy#14 line::dy#2 line::dy#9 
Alias line::x2#11 = line::x2#12 
Alias line::sy#13 = line::sy#9 line::sy#6 line::sy#4 
Alias line::e1#0 = line::$17 
Alias line::y2#13 = line::y2#15 line::y2#16 
Alias line::e#0 = line::$11 line::e#6 
Alias line::x#10 = line::x#4 
Alias line::sx#10 = line::sx#2 line::sx#4 
Alias line::e#1 = line::e#4 
Alias line::dy#12 = line::dy#4 line::dy#3 
Alias line::y#15 = line::y#8 line::y#2 line::plot2_y#0 line::plot2_y#1 
Alias line::y2#11 = line::y2#14 line::y2#12 
Alias line::sy#1 = line::sy#10 line::sy#7 
Alias line::dx#13 = line::dx#16 line::dx#3 
Alias line::plot2_x#0 = line::x#1 line::plot2_x#1 line::x#19 
Alias line::e#2 = line::e#7 
Alias line::x#12 = line::plot3_x#0 line::x#5 line::plot3_x#1 line::x#6 
Alias line::y#10 = line::plot3_y#0 line::y#9 line::plot3_y#1 line::y#20 line::y#18 
Alias line::sx#14 = line::sx#5 line::sx#8 line::sx#3 
Alias line::e1#3 = line::e1#5 line::e1#6 
Alias line::dy#10 = line::dy#13 line::dy#5 line::dy#16 
Alias line::dx#10 = line::dx#14 line::dx#4 line::dx#5 
Alias line::x2#10 = line::x2#9 line::x2#8 line::x2#7 
Alias line::sy#11 = line::sy#8 line::sy#5 line::sy#2 
Alias line::e1#1 = line::e1#4 
Alias line::x#13 = line::x#2 
Alias line::x#7 = line::x#8 line::plot4_x#0 line::plot4_x#1 
Alias line::y#11 = line::y#17 line::plot4_y#0 line::plot4_y#1 
Alias eorfill::line_column#0 = eorfill::line_buffer#1 
Alias eorfill::fill_column#0 = eorfill::canvas#1 
Alias eorfill::line_column#2 = eorfill::line_column#5 
Alias eorfill::fill_column#5 = eorfill::fill_column#6 
Alias eorfill::x#2 = eorfill::x#5 
Alias eorfill::eor#2 = eorfill::eor#3 
Alias eorfill::line_column#3 = eorfill::line_column#6 eorfill::line_column#4 
Alias eorfill::y#2 = eorfill::y#3 
Alias eorfill::fill_column#2 = eorfill::fill_column#4 eorfill::fill_column#3 
Alias eorfill::x#3 = eorfill::x#6 eorfill::x#4 
Alias abs_u8::u#2 = abs_u8::u#3 abs_u8::u#4 abs_u8::return#3 
Alias abs_u8::return#2 = abs_u8::$1 
Alias abs_u8::return#4 = abs_u8::return#7 
Alias sgn_u8::return#4 = sgn_u8::return#7 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Alias candidate removed (volatile)toD0181_return#0 = toD0181_$6 toD0181_return#2 toD0181_return#1 toD0181_return#3 $0 canvas_show_memory 
Alias uctoa::value#10 = uctoa::value#7 
Alias uctoa::buffer#10 = uctoa::buffer#15 
Alias uctoa::digit#2 = uctoa::digit#4 
Alias uctoa::max_digits#10 = uctoa::max_digits#6 
Alias uctoa::digit_values#10 = uctoa::digit_values#7 
Alias ultoa::value#10 = ultoa::value#7 
Alias ultoa::buffer#10 = ultoa::buffer#15 
Alias ultoa::digit#2 = ultoa::digit#4 
Alias ultoa::max_digits#10 = ultoa::max_digits#6 
Alias ultoa::digit_values#10 = ultoa::digit_values#7 
Alias gotoxy::x#3 = gotoxy::x#5 
Alias gotoxy::y#4 = gotoxy::y#5 
Alias printf_ulong::uvalue#1 = printf_ulong::uvalue#2 
Alias printf_ulong::format_radix#1 = printf_ulong::format_radix#3 
Alias printf_ulong::format_min_length#1 = printf_ulong::format_min_length#3 
Alias printf_ulong::format_justify_left#1 = printf_ulong::format_justify_left#3 
Alias printf_ulong::format_sign_always#1 = printf_ulong::format_sign_always#2 
Alias printf_ulong::format_zero_padding#1 = printf_ulong::format_zero_padding#3 
Alias printf_ulong::format_upper_case#1 = printf_ulong::format_upper_case#3 
Alias printf_uchar::uvalue#1 = printf_uchar::uvalue#2 
Alias printf_uchar::format_radix#1 = printf_uchar::format_radix#3 
Alias printf_uchar::format_min_length#1 = printf_uchar::format_min_length#3 
Alias printf_uchar::format_justify_left#1 = printf_uchar::format_justify_left#3 
Alias printf_uchar::format_sign_always#1 = printf_uchar::format_sign_always#2 
Alias printf_uchar::format_zero_padding#1 = printf_uchar::format_zero_padding#3 
Alias printf_uchar::format_upper_case#1 = printf_uchar::format_upper_case#3 
Alias printf_number_buffer::format_min_length#2 = printf_number_buffer::format_min_length#3 
Alias printf_number_buffer::format_justify_left#12 = printf_number_buffer::format_justify_left#5 
Alias printf_number_buffer::format_zero_padding#11 = printf_number_buffer::format_zero_padding#6 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#12 
Alias printf_number_buffer::format_upper_case#11 = printf_number_buffer::format_upper_case#12 
Alias printf_number_buffer::buffer_digits#16 = printf_number_buffer::buffer_digits#19 
Alias printf_number_buffer::buffer_sign#11 = printf_number_buffer::buffer_sign#3 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#14 printf_number_buffer::format_zero_padding#13 printf_number_buffer::format_zero_padding#19 printf_number_buffer::format_zero_padding#15 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#12 printf_number_buffer::padding#16 printf_number_buffer::padding#14 printf_number_buffer::padding#11 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#14 printf_number_buffer::format_upper_case#3 printf_number_buffer::format_upper_case#2 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#13 printf_number_buffer::buffer_digits#12 printf_number_buffer::buffer_digits#4 printf_number_buffer::buffer_digits#3 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#16 printf_number_buffer::format_justify_left#19 printf_number_buffer::format_justify_left#13 printf_number_buffer::format_justify_left#3 
Alias line::dx#0 = line::dx#1 
Alias line::dy#0 = line::dy#1 
Alias line::x#0 = line::x#11 
Alias line::sy#0 = line::sy#13 
Alias line::sx#0 = line::sx#11 
Alias line::x2#11 = line::x2#13 
Alias line::y#15 = line::y#7 
Alias line::y2#11 = line::y2#7 
Alias line::sy#1 = line::sy#3 
Alias line::dx#13 = line::dx#8 
Alias line::dy#12 = line::dy#8 
Alias line::sx#10 = line::sx#6 
Alias line::x#13 = line::x#7 
Alias line::x2#10 = line::x2#5 
Alias line::sx#12 = line::sx#14 
Alias line::dy#10 = line::dy#15 
Alias line::dx#10 = line::dx#17 
Alias line::sy#11 = line::sy#14 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Alias candidate removed (volatile)toD0181_return#0 = toD0181_$6 toD0181_return#2 toD0181_return#1 toD0181_return#3 $0 canvas_show_memory 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#12 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#11 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#11 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#11 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#16 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Alias candidate removed (volatile)toD0181_return#0 = toD0181_$6 toD0181_return#2 toD0181_return#1 toD0181_return#3 $0 canvas_show_memory 
Identical Phi Values (byte) toupper::ch#1 (byte) toupper::ch#0
Identical Phi Values (byte*) memcpy::src_end#1 (byte*) memcpy::src_end#0
Identical Phi Values (void*) memcpy::destination#3 (void*) memcpy::destination#2
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#10 (void*) memset::str#7
Identical Phi Values (byte) memset::c#6 (byte) memset::c#8
Identical Phi Values (byte*) strupr::src#0 (byte*) strupr::str#0
Identical Phi Values (byte*) strupr::str#2 (byte*) strupr::src#0
Identical Phi Values (byte*) strlen::str#4 (byte*) strlen::str#1
Identical Phi Values (byte) uctoa::radix#1 (byte) uctoa::radix#0
Identical Phi Values (byte) uctoa::value#10 (byte) uctoa::value#1
Identical Phi Values (byte*) uctoa::buffer#10 (byte*) uctoa::buffer#5
Identical Phi Values (byte) uctoa::max_digits#10 (byte) uctoa::max_digits#7
Identical Phi Values (byte*) uctoa::digit_values#10 (byte*) uctoa::digit_values#8
Identical Phi Values (byte) uctoa_append::value#5 (byte) uctoa_append::value#0
Identical Phi Values (byte) uctoa_append::sub#3 (byte) uctoa_append::sub#0
Identical Phi Values (byte*) uctoa_append::buffer#3 (byte*) uctoa_append::buffer#0
Identical Phi Values (byte) uctoa_append::sub#1 (byte) uctoa_append::sub#3
Identical Phi Values (byte*) uctoa_append::buffer#1 (byte*) uctoa_append::buffer#3
Identical Phi Values (byte) ultoa::radix#1 (byte) ultoa::radix#0
Identical Phi Values (dword) ultoa::value#10 (dword) ultoa::value#1
Identical Phi Values (byte*) ultoa::buffer#10 (byte*) ultoa::buffer#5
Identical Phi Values (byte) ultoa::max_digits#10 (byte) ultoa::max_digits#7
Identical Phi Values (dword*) ultoa::digit_values#10 (dword*) ultoa::digit_values#8
Identical Phi Values (dword) ultoa_append::value#5 (dword) ultoa_append::value#0
Identical Phi Values (dword) ultoa_append::sub#3 (dword) ultoa_append::sub#0
Identical Phi Values (byte*) ultoa_append::buffer#3 (byte*) ultoa_append::buffer#0
Identical Phi Values (dword) ultoa_append::sub#1 (dword) ultoa_append::sub#3
Identical Phi Values (byte*) ultoa_append::buffer#1 (byte*) ultoa_append::buffer#3
Identical Phi Values (byte) textcolor::color#1 (byte) textcolor::color#0
Identical Phi Values (byte) printf_padding::length#3 (byte) printf_padding::length#4
Identical Phi Values (byte) printf_padding::pad#3 (byte) printf_padding::pad#5
Identical Phi Values (byte) printf_ulong::format_sign_always#1 (byte) printf_ulong::format_sign_always#0
Identical Phi Values (dword) printf_ulong::uvalue#1 (dword) printf_ulong::uvalue#0
Identical Phi Values (byte) printf_ulong::format_radix#1 (byte) printf_ulong::format_radix#0
Identical Phi Values (byte) printf_ulong::format_min_length#1 (byte) printf_ulong::format_min_length#0
Identical Phi Values (byte) printf_ulong::format_justify_left#1 (byte) printf_ulong::format_justify_left#0
Identical Phi Values (byte) printf_ulong::format_zero_padding#1 (byte) printf_ulong::format_zero_padding#0
Identical Phi Values (byte) printf_ulong::format_upper_case#1 (byte) printf_ulong::format_upper_case#0
Identical Phi Values (byte) printf_uchar::format_sign_always#1 (byte) printf_uchar::format_sign_always#0
Identical Phi Values (byte) printf_uchar::uvalue#1 (byte) printf_uchar::uvalue#0
Identical Phi Values (byte) printf_uchar::format_radix#1 (byte) printf_uchar::format_radix#0
Identical Phi Values (byte) printf_uchar::format_min_length#1 (byte) printf_uchar::format_min_length#0
Identical Phi Values (byte) printf_uchar::format_justify_left#1 (byte) printf_uchar::format_justify_left#0
Identical Phi Values (byte) printf_uchar::format_zero_padding#1 (byte) printf_uchar::format_zero_padding#0
Identical Phi Values (byte) printf_uchar::format_upper_case#1 (byte) printf_uchar::format_upper_case#0
Identical Phi Values (byte) toD0181_return#2 (byte) toD0181_return#0
Identical Phi Values (byte) toD0181_return#3 (byte) toD0181_return#1
Identical Phi Values (byte*) main::cols#2 (byte*) main::cols#5
Identical Phi Values (byte*) main::screen#2 (byte*) main::screen#5
Identical Phi Values (byte) main::y#4 (byte) main::y#2
Identical Phi Values (byte*) main::canvas#2 (byte*) main::canvas#10
Identical Phi Values (byte) main::p0_idx#10 (byte) main::p0_idx#1
Identical Phi Values (byte) main::p1_idx#10 (byte) main::p1_idx#1
Identical Phi Values (byte) main::p2_idx#10 (byte) main::p2_idx#1
Identical Phi Values (byte) line::sy#1 (byte) line::sy#0
Identical Phi Values (byte) line::dx#13 (byte) line::dx#0
Identical Phi Values (byte) line::dy#12 (byte) line::dy#0
Identical Phi Values (byte) line::y2#11 (byte) line::y2#13
Identical Phi Values (byte) line::sx#10 (byte) line::sx#0
Identical Phi Values (byte) line::sx#12 (byte) line::sx#0
Identical Phi Values (byte) line::dy#10 (byte) line::dy#0
Identical Phi Values (byte) line::dx#10 (byte) line::dx#0
Identical Phi Values (byte) line::x2#10 (byte) line::x2#11
Identical Phi Values (byte) line::sy#11 (byte) line::sy#0
Identical Phi Values (byte*) eorfill::line_column#0 (byte*) eorfill::line_buffer#0
Identical Phi Values (byte*) eorfill::fill_column#0 (byte*) eorfill::canvas#0
Identical Phi Values (byte*) eorfill::line_column#3 (byte*) eorfill::line_column#2
Identical Phi Values (byte*) eorfill::fill_column#2 (byte*) eorfill::fill_column#5
Identical Phi Values (byte) eorfill::x#3 (byte) eorfill::x#2
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#7
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memcpy::$1 [15] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
Simple Condition (bool~) memset::$1 [22] if((word) memset::num#6<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [29] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) strupr::$1 [36] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2
Simple Condition (bool~) strlen::$0 [48] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
Simple Condition (bool~) uctoa::$0 [64] if((byte) uctoa::radix#0==(const byte) DECIMAL) goto uctoa::@1
Simple Condition (bool~) uctoa::$1 [68] if((byte) uctoa::radix#0==(const byte) HEXADECIMAL) goto uctoa::@2
Simple Condition (bool~) uctoa::$2 [72] if((byte) uctoa::radix#0==(const byte) OCTAL) goto uctoa::@3
Simple Condition (bool~) uctoa::$3 [76] if((byte) uctoa::radix#0==(const byte) BINARY) goto uctoa::@4
Simple Condition (bool~) uctoa::$5 [93] if((byte) uctoa::digit#2<(byte~) uctoa::$4) goto uctoa::@11
Simple Condition (bool~) uctoa_append::$0 [116] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
Simple Condition (bool~) ultoa::$0 [125] if((byte) ultoa::radix#0==(const byte) DECIMAL) goto ultoa::@1
Simple Condition (bool~) ultoa::$1 [129] if((byte) ultoa::radix#0==(const byte) HEXADECIMAL) goto ultoa::@2
Simple Condition (bool~) ultoa::$2 [133] if((byte) ultoa::radix#0==(const byte) OCTAL) goto ultoa::@3
Simple Condition (bool~) ultoa::$3 [137] if((byte) ultoa::radix#0==(const byte) BINARY) goto ultoa::@4
Simple Condition (bool~) ultoa::$5 [154] if((byte) ultoa::digit#2<(byte~) ultoa::$4) goto ultoa::@11
Simple Condition (bool~) ultoa_append::$0 [179] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2
Simple Condition (bool~) gotoxy::$1 [192] if((byte) gotoxy::y#3<=(byte) $19) goto gotoxy::@1
Simple Condition (bool~) gotoxy::$3 [195] if((byte) gotoxy::x#3<(byte) $28) goto gotoxy::@2
Simple Condition (bool~) cputc::$0 [211] if((byte) cputc::c#3==(byte) '
') goto cputc::@1
Simple Condition (bool~) cputc::$2 [219] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
Simple Condition (bool~) cscroll::$1 [234] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
Simple Condition (bool~) cscroll::$9 [236] if((byte) 0!=(byte) conio_scroll_enable) goto cscroll::@3
Simple Condition (bool~) cputs::$1 [272] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
Simple Condition (bool~) printf_padding::$0 [287] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2
Simple Condition (bool~) printf_ulong::$5 [294] if((byte) 0!=(byte) printf_ulong::format_sign_always#0) goto printf_ulong::@1
Simple Condition (bool~) printf_uchar::$5 [315] if((byte) 0!=(byte) printf_uchar::format_sign_always#0) goto printf_uchar::@1
Simple Condition (bool~) printf_number_buffer::$0 [337] if((byte) 0==(byte) printf_number_buffer::format_min_length#2) goto printf_number_buffer::@1
Simple Condition (bool~) printf_number_buffer::$20 [351] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
Simple Condition (bool~) printf_number_buffer::$23 [356] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@1
Simple Condition (bool~) printf_number_buffer::$7 [360] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
Simple Condition (bool~) printf_number_buffer::$12 [370] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
Simple Condition (bool~) main::$7 [425] if((byte) main::y#2<(byte) $10) goto main::@2
Simple Condition (bool~) main::$8 [439] if((byte) main::x#2<(byte) $10) goto main::@5
Simple Condition (bool~) main::$23 [449] if((number) 0!=(number) 1) goto main::@8
Simple Condition (bool~) main::$24 [486] if((byte) 0!=(volatile byte) canvas_show_flag) goto main::@9
Simple Condition (bool~) irq_bottom_2::$2 [573] if((byte) 0!=(byte~) irq_bottom_2::$0) goto irq_bottom_2::@1
Simple Condition (bool~) line::$9 [598] if((byte) line::sx#0!=(byte) $ff) goto line::@1
Simple Condition (bool~) line::$10 [601] if((byte) line::dx#0>(byte) line::dy#0) goto line::@2
Simple Condition (bool~) line::$14 [615] if((byte) line::dy#0>=(byte) line::e#1) goto line::@6
Simple Condition (bool~) line::$16 [618] if((byte) line::y#15!=(byte) line::y2#13) goto line::@5
Simple Condition (bool~) line::$20 [635] if((byte) line::dx#0>=(byte) line::e1#1) goto line::@9
Simple Condition (bool~) line::$21 [638] if((byte) line::x#13!=(byte) line::x2#11) goto line::@8
Simple Condition (bool~) eorfill::$0 [651] if((byte) eorfill::x#2<(byte) $10) goto eorfill::@2
Simple Condition (bool~) eorfill::$1 [656] if((byte) eorfill::y#2<(byte)(number) $10*(number) 8) goto eorfill::@4
Simple Condition (bool~) abs_u8::$2 [667] if((byte) 0!=(byte~) abs_u8::$0) goto abs_u8::@1
Simple Condition (bool~) sgn_u8::$1 [674] if((byte) 0!=(byte~) sgn_u8::$0) goto sgn_u8::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting && if()-condition to two if()s [3] (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
Rewriting ! if()-condition to reversed if() [97] (bool~) uctoa::$8 ← ! (bool~) uctoa::$7
Rewriting || if()-condition to two if()s [96] (bool~) uctoa::$7 ← (byte) uctoa::started#2 || (bool~) uctoa::$6
Rewriting ! if()-condition to reversed if() [159] (bool~) ultoa::$8 ← ! (bool~) ultoa::$7
Rewriting || if()-condition to two if()s [158] (bool~) ultoa::$7 ← (byte) ultoa::started#2 || (bool~) ultoa::$6
Rewriting ! if()-condition to reversed if() [343] (bool~) printf_number_buffer::$5 ← ! (bool~) printf_number_buffer::$4
Rewriting && if()-condition to two if()s [342] (bool~) printf_number_buffer::$4 ← (bool~) printf_number_buffer::$3 && (signed byte) printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [341] (bool~) printf_number_buffer::$3 ← (bool~) printf_number_buffer::$1 && (bool~) printf_number_buffer::$2
Rewriting ! if()-condition to reversed if() [365] (bool~) printf_number_buffer::$10 ← ! (bool~) printf_number_buffer::$9
Rewriting && if()-condition to two if()s [364] (bool~) printf_number_buffer::$9 ← (byte) printf_number_buffer::format_zero_padding#10 && (signed byte) printf_number_buffer::padding#10
Rewriting ! if()-condition to reversed if() [379] (bool~) printf_number_buffer::$17 ← ! (bool~) printf_number_buffer::$16
Rewriting && if()-condition to two if()s [378] (bool~) printf_number_buffer::$16 ← (bool~) printf_number_buffer::$15 && (signed byte) printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [377] (bool~) printf_number_buffer::$15 ← (byte) printf_number_buffer::format_justify_left#10 && (bool~) printf_number_buffer::$14
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition (byte) uctoa::started#2
Warning! Adding boolean cast to non-boolean condition (byte) ultoa::started#2
Warning! Adding boolean cast to non-boolean condition (byte) printf_number_buffer::format_zero_padding#10
Warning! Adding boolean cast to non-boolean condition (byte) printf_number_buffer::format_justify_left#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Constant right-side identified [239] (word) memcpy::num#0 ← (unumber)(number) $19*(number) $28-(number) $28
Constant right-side identified [244] (word) memcpy::num#1 ← (unumber)(number) $19*(number) $28-(number) $28
Constant right-side identified [407] (word) memset::num#2 ← (unumber)(number) $28*(number) $19
Constant right-side identified [412] (word) memset::num#3 ← (unumber)(number) $28*(number) $19
Constant right-side identified [417] (word) memset::num#4 ← (unumber)(number) $28*(number) $19
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) strlen::len#0 = 0
Constant (const byte) uctoa::max_digits#0 = 0
Constant (const byte*) uctoa::digit_values#0 = (byte*) 0
Constant (const byte) uctoa::max_digits#1 = 3
Constant (const byte*) uctoa::digit_values#1 = RADIX_DECIMAL_VALUES_CHAR
Constant (const byte) uctoa::max_digits#2 = 2
Constant (const byte*) uctoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES_CHAR
Constant (const byte) uctoa::max_digits#3 = 3
Constant (const byte*) uctoa::digit_values#3 = RADIX_OCTAL_VALUES_CHAR
Constant (const byte) uctoa::max_digits#4 = 8
Constant (const byte*) uctoa::digit_values#4 = RADIX_BINARY_VALUES_CHAR
Constant (const byte) uctoa::started#0 = 0
Constant (const byte) uctoa::digit#0 = 0
Constant (const byte) uctoa::started#1 = 1
Constant (const byte) uctoa_append::digit#0 = 0
Constant (const byte) ultoa::max_digits#0 = 0
Constant (const dword*) ultoa::digit_values#0 = (dword*) 0
Constant (const byte) ultoa::max_digits#1 = $a
Constant (const dword*) ultoa::digit_values#1 = RADIX_DECIMAL_VALUES_LONG
Constant (const byte) ultoa::max_digits#2 = 8
Constant (const dword*) ultoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES_LONG
Constant (const byte) ultoa::max_digits#3 = $b
Constant (const dword*) ultoa::digit_values#3 = RADIX_OCTAL_VALUES_LONG
Constant (const byte) ultoa::max_digits#4 = $20
Constant (const dword*) ultoa::digit_values#4 = RADIX_BINARY_VALUES_LONG
Constant (const byte) ultoa::started#0 = 0
Constant (const byte) ultoa::digit#0 = 0
Constant (const byte) ultoa::started#1 = 1
Constant (const byte) ultoa_append::digit#0 = 0
Constant (const byte) gotoxy::y#0 = 0
Constant (const byte) gotoxy::x#0 = 0
Constant (const void*) memcpy::destination#0 = (void*)CONIO_SCREEN_TEXT
Constant (const void*) memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
Constant (const word) memcpy::num#0 = (unumber)$19*$28-$28
Constant (const void*) memcpy::destination#1 = (void*)CONIO_SCREEN_COLORS
Constant (const void*) memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
Constant (const word) memcpy::num#1 = (unumber)$19*$28-$28
Constant (const void*) memset::str#0 = (void*)CONIO_SCREEN_TEXT+(word)$19*$28-$28
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $28
Constant (const void*) memset::str#1 = (void*)CONIO_SCREEN_COLORS+(word)$19*$28-$28
Constant (const word) memset::num#1 = $28
Constant (const byte) gotoxy::x#1 = 0
Constant (const byte) gotoxy::y#1 = 0
Constant (const byte) cputs::c#0 = 0
Constant (const byte) printf_padding::i#0 = 0
Constant (const byte) printf_ulong::$1 = '+'
Constant (const byte) printf_ulong::$0 = 0
Constant (const byte*) ultoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) printf_number_buffer::buffer_digits#0 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte) printf_uchar::$1 = '+'
Constant (const byte) printf_uchar::$0 = 0
Constant (const byte*) uctoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) printf_number_buffer::buffer_digits#1 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const signed byte) printf_number_buffer::padding#0 = 0
Constant (const signed byte) printf_number_buffer::padding#2 = 0
Constant (const byte) printf_padding::pad#0 = ' '
Constant (const byte) printf_padding::pad#1 = '0'
Constant (const byte) printf_padding::pad#2 = ' '
Constant (const byte*) toD0181_screen#0 = SCREEN
Constant (const byte*) toD0181_gfx#0 = CANVAS2
Constant (const void*) memset::str#2 = (void*)CONSOLE
Constant (const byte) memset::c#2 = ' '
Constant (const word) memset::num#2 = (unumber)$28*$19
Constant (const void*) memset::str#3 = (void*)SCREEN
Constant (const byte) memset::c#3 = 0
Constant (const word) memset::num#3 = (unumber)$28*$19
Constant (const void*) memset::str#4 = (void*)COLS
Constant (const byte) memset::c#4 = BLACK
Constant (const word) memset::num#4 = (unumber)$28*$19
Constant (const byte*) main::screen#0 = SCREEN+$c
Constant (const byte*) main::cols#0 = COLS+$c
Constant (const byte) main::y#0 = 0
Constant (const byte) main::x#0 = 0
Constant (const byte) textcolor::color#0 = WHITE
Constant (const byte) main::p0_idx#0 = $f0
Constant (const byte*) main::canvas#0 = CANVAS1
Constant (const void*) memset::str#5 = (void*)LINE_BUFFER
Constant (const byte) memset::c#5 = 0
Constant (const word) memset::num#5 = $800
Constant (const byte*) line::canvas#0 = LINE_BUFFER
Constant (const byte*) line::canvas#1 = LINE_BUFFER
Constant (const byte*) line::canvas#2 = LINE_BUFFER
Constant (const byte*) eorfill::line_buffer#0 = LINE_BUFFER
Constant (const byte*) main::toD0181_screen#0 = SCREEN
Constant (const byte*) main::toD0181_gfx#0 = CANVAS1
Constant (const byte*) main::toD0182_screen#0 = SCREEN
Constant (const byte*) main::toD0182_gfx#0 = CANVAS2
Constant (const byte) gotoxy::x#2 = 0
Constant (const byte) gotoxy::y#2 = $18
Constant (const to_nomodify byte*) cputs::s#2 = main::s
Constant (const byte) printf_uchar::format_min_length#0 = 2
Constant (const byte) printf_uchar::format_justify_left#0 = 0
Constant (const byte) printf_uchar::format_sign_always#0 = 0
Constant (const byte) printf_uchar::format_zero_padding#0 = 1
Constant (const byte) printf_uchar::format_upper_case#0 = 0
Constant (const byte) printf_uchar::format_radix#0 = HEXADECIMAL
Constant (const to_nomodify byte*) cputs::s#3 = main::s1
Constant (const byte) printf_ulong::format_min_length#0 = 6
Constant (const byte) printf_ulong::format_justify_left#0 = 0
Constant (const byte) printf_ulong::format_sign_always#0 = 0
Constant (const byte) printf_ulong::format_zero_padding#0 = 0
Constant (const byte) printf_ulong::format_upper_case#0 = 0
Constant (const byte) printf_ulong::format_radix#0 = DECIMAL
Constant (const byte*) irq_bottom_1::toD0181_screen#0 = CONSOLE
Constant (const byte*) irq_bottom_1::toD0181_gfx#0 = PETSCII
Constant (const byte) eorfill::x#0 = 0
Constant (const byte) eorfill::y#0 = 1
Constant (const byte) sgn_u8::return#2 = -1
Constant (const byte) sgn_u8::return#3 = 1
Constant (const byte) conio_scroll_enable = 1
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) ultoa::radix#0 = printf_ulong::format_radix#0
Constant (const byte) printf_number_buffer::format_min_length#0 = printf_ulong::format_min_length#0
Constant (const byte) printf_number_buffer::format_justify_left#0 = printf_ulong::format_justify_left#0
Constant (const byte) printf_number_buffer::format_sign_always#0 = printf_ulong::format_sign_always#0
Constant (const byte) printf_number_buffer::format_zero_padding#0 = printf_ulong::format_zero_padding#0
Constant (const byte) printf_number_buffer::format_upper_case#0 = printf_ulong::format_upper_case#0
Constant (const byte) printf_number_buffer::format_radix#0 = printf_ulong::format_radix#0
Constant (const byte) uctoa::radix#0 = printf_uchar::format_radix#0
Constant (const byte) printf_number_buffer::format_min_length#1 = printf_uchar::format_min_length#0
Constant (const byte) printf_number_buffer::format_justify_left#1 = printf_uchar::format_justify_left#0
Constant (const byte) printf_number_buffer::format_sign_always#1 = printf_uchar::format_sign_always#0
Constant (const byte) printf_number_buffer::format_zero_padding#1 = printf_uchar::format_zero_padding#0
Constant (const byte) printf_number_buffer::format_upper_case#1 = printf_uchar::format_upper_case#0
Constant (const byte) printf_number_buffer::format_radix#1 = printf_uchar::format_radix#0
Constant (const word) toD0181_$7 = (word)toD0181_screen#0
Constant (const word) main::toD0181_$7 = (word)main::toD0181_screen#0
Constant (const word) main::toD0182_$7 = (word)main::toD0182_screen#0
Constant (const word) irq_bottom_1::toD0181_$7 = (word)irq_bottom_1::toD0181_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)toD0181_gfx#0 in [394] (byte~) toD0181_$3 ← > (word)(const byte*) toD0181_gfx#0
Constant value identified (word)main::toD0181_gfx#0 in [499] (byte~) main::toD0181_$3 ← > (word)(const byte*) main::toD0181_gfx#0
Constant value identified (word)main::toD0182_gfx#0 in [509] (byte~) main::toD0182_$3 ← > (word)(const byte*) main::toD0182_gfx#0
Constant value identified (word)irq_bottom_1::toD0181_gfx#0 in [559] (byte~) irq_bottom_1::toD0181_$3 ← > (word)(const byte*) irq_bottom_1::toD0181_gfx#0
Successful SSA optimization Pass2ConstantValues
if() condition always false - eliminating [64] if((const byte) uctoa::radix#0==(const byte) DECIMAL) goto uctoa::@1
if() condition always true - replacing block destination [68] if((const byte) uctoa::radix#0==(const byte) HEXADECIMAL) goto uctoa::@2
if() condition always false - eliminating [72] if((const byte) uctoa::radix#0==(const byte) OCTAL) goto uctoa::@3
if() condition always false - eliminating [76] if((const byte) uctoa::radix#0==(const byte) BINARY) goto uctoa::@4
if() condition always true - replacing block destination [125] if((const byte) ultoa::radix#0==(const byte) DECIMAL) goto ultoa::@1
if() condition always false - eliminating [129] if((const byte) ultoa::radix#0==(const byte) HEXADECIMAL) goto ultoa::@2
if() condition always false - eliminating [133] if((const byte) ultoa::radix#0==(const byte) OCTAL) goto ultoa::@3
if() condition always false - eliminating [137] if((const byte) ultoa::radix#0==(const byte) BINARY) goto ultoa::@4
if() condition always true - replacing block destination [236] if((byte) 0!=(const byte) conio_scroll_enable) goto cscroll::@3
if() condition always false - eliminating [294] if((byte) 0!=(const byte) printf_ulong::format_sign_always#0) goto printf_ulong::@1
if() condition always false - eliminating [315] if((byte) 0!=(const byte) printf_uchar::format_sign_always#0) goto printf_uchar::@1
if() condition always true - replacing block destination [449] if((number) 0!=(number) 1) goto main::@8
Successful SSA optimization Pass2ConstantIfs
Rewriting conditional comparison [192] if((byte) gotoxy::y#3<=(byte) $19) goto gotoxy::@1
Simplifying constant evaluating to zero (const nomodify byte) CIA_TIMER_CONTROL_STOP|(const nomodify byte) CIA_TIMER_CONTROL_CONTINUOUS|(const nomodify byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES in [54] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_STOP|(const nomodify byte) CIA_TIMER_CONTROL_CONTINUOUS|(const nomodify byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES
Simplifying constant evaluating to zero (const nomodify byte) CIA_TIMER_CONTROL_STOP|(const nomodify byte) CIA_TIMER_CONTROL_CONTINUOUS in [55] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_STOP|(const nomodify byte) CIA_TIMER_CONTROL_CONTINUOUS|(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero LINE_BUFFER in 
Simplifying expression containing zero CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A in [55] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (byte) 0|(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
Simplifying expression containing zero CIA_TIMER_CONTROL_START in [57] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START|(const nomodify byte) CIA_TIMER_CONTROL_CONTINUOUS|(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
Simplifying expression containing zero CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_CONTINUOUS in [58] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START|(const nomodify byte) CIA_TIMER_CONTROL_CONTINUOUS|(const nomodify byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES
Simplifying expression containing zero (byte*)&printf_buffer in [298] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte~) printf_ulong::$2
Simplifying expression containing zero (byte*)&printf_buffer in [303] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Simplifying expression containing zero (byte*)&printf_buffer in [319] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte~) printf_uchar::$2
Simplifying expression containing zero (byte*)&printf_buffer in [324] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Simplifying expression containing zero eorfill::line_column#2 in [652] (byte) eorfill::eor#0 ← *((byte*) eorfill::line_column#2 + (byte) 0)
Successful SSA optimization PassNSimplifyExpressionWithZero
Simplifying expression containing zero CIA_TIMER_CONTROL_START in [58] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START|(const nomodify byte) CIA_TIMER_CONTROL_CONTINUOUS
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (void*) memcpy::return#2 and assignment [163] (void*) memcpy::return#2 ← (void*) memcpy::destination#2
Eliminating unused variable (void*) memcpy::return#3 and assignment [165] (void*) memcpy::return#3 ← (void*) memcpy::destination#2
Eliminating unused variable (void*) memset::return#2 and assignment [167] (void*) memset::return#2 ← (void*) memset::str#7
Eliminating unused variable (void*) memset::return#3 and assignment [170] (void*) memset::return#3 ← (void*) memset::str#7
Eliminating unused variable (byte*) strupr::return#2 and assignment [247] (byte*) strupr::return#2 ← (byte*) strupr::str#0
Eliminating unused variable (void*) memset::return#4 and assignment [264] (void*) memset::return#4 ← (void*) memset::str#7
Eliminating unused variable (void*) memset::return#5 and assignment [266] (void*) memset::return#5 ← (void*) memset::str#7
Eliminating unused variable (void*) memset::return#6 and assignment [268] (void*) memset::return#6 ← (void*) memset::str#7
Eliminating unused variable (byte) textcolor::return#2 and assignment [275] (byte) textcolor::return#2 ← (byte) textcolor::return#0
Eliminating unused variable (void*) memset::return#7 and assignment [290] (void*) memset::return#7 ← (void*) memset::str#7
Eliminating unused constant (const nomodify byte) CIA_TIMER_CONTROL_STOP
Eliminating unused constant (const nomodify byte) CIA_TIMER_CONTROL_CONTINUOUS
Eliminating unused constant (const nomodify byte) CIA_TIMER_CONTROL_A_COUNT_CYCLES
Eliminating unused constant (const byte) BINARY
Eliminating unused constant (const byte) OCTAL
Eliminating unused constant (const byte) uctoa::max_digits#0
Eliminating unused constant (const byte*) uctoa::digit_values#0
Eliminating unused constant (const byte) uctoa::radix#0
Eliminating unused constant (const byte) ultoa::max_digits#0
Eliminating unused constant (const dword*) ultoa::digit_values#0
Eliminating unused constant (const byte) ultoa::radix#0
Eliminating unused constant (const byte) cputs::c#0
Eliminating unused constant (const byte) printf_number_buffer::format_sign_always#0
Eliminating unused constant (const byte) printf_number_buffer::format_radix#0
Eliminating unused constant (const byte) printf_number_buffer::format_sign_always#1
Eliminating unused constant (const byte) printf_number_buffer::format_radix#1
Eliminating unused constant (const byte*) line::canvas#0
Eliminating unused constant (const byte*) line::canvas#1
Eliminating unused constant (const byte*) line::canvas#2
Eliminating unused constant (const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN
Eliminating unused constant (const byte) conio_scroll_enable
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable (byte) textcolor::return#0 and assignment [182] (byte) textcolor::return#0 ← (byte) conio_textcolor
Eliminating unused constant (const byte) printf_ulong::format_sign_always#0
Eliminating unused constant (const byte) printf_ulong::format_radix#0
Eliminating unused constant (const byte) printf_uchar::format_sign_always#0
Eliminating unused constant (const byte) printf_uchar::format_radix#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) DECIMAL
Eliminating unused constant (const byte) HEXADECIMAL
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte*) uctoa::buffer#0 from unused block uctoa::@9
Eliminating variable (byte*) uctoa::buffer#1 from unused block uctoa::@9
Eliminating variable (byte*) uctoa::buffer#2 from unused block uctoa::@9
Eliminating variable (byte*) ultoa::buffer#0 from unused block ultoa::@9
Eliminating variable (byte*) ultoa::buffer#1 from unused block ultoa::@9
Eliminating variable (byte*) ultoa::buffer#2 from unused block ultoa::@9
Removing PHI-reference to removed block (uctoa::@1) in block uctoa::@5
Removing PHI-reference to removed block (uctoa::@1) in block uctoa::@5
Removing unused block uctoa::@1
Removing unused block uctoa::@7
Removing PHI-reference to removed block (uctoa::@3) in block uctoa::@5
Removing PHI-reference to removed block (uctoa::@3) in block uctoa::@5
Removing unused block uctoa::@3
Removing unused block uctoa::@8
Removing PHI-reference to removed block (uctoa::@4) in block uctoa::@5
Removing PHI-reference to removed block (uctoa::@4) in block uctoa::@5
Removing unused block uctoa::@4
Removing unused block uctoa::@9
Removing unused block ultoa::@6
Removing PHI-reference to removed block (ultoa::@2) in block ultoa::@5
Removing PHI-reference to removed block (ultoa::@2) in block ultoa::@5
Removing unused block ultoa::@2
Removing unused block ultoa::@7
Removing PHI-reference to removed block (ultoa::@3) in block ultoa::@5
Removing PHI-reference to removed block (ultoa::@3) in block ultoa::@5
Removing unused block ultoa::@3
Removing unused block ultoa::@8
Removing PHI-reference to removed block (ultoa::@4) in block ultoa::@5
Removing PHI-reference to removed block (ultoa::@4) in block ultoa::@5
Removing unused block ultoa::@4
Removing unused block ultoa::@9
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing unused block cscroll::@2
Removing unused block cscroll::@8
Removing PHI-reference to removed block (printf_ulong::@1) in block printf_ulong::@3
Removing unused block printf_ulong::@1
Removing PHI-reference to removed block (printf_uchar::@1) in block printf_uchar::@3
Removing unused block printf_uchar::@1
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 0 in (bool~) uctoa::$11 ← (number) 0 != (byte) uctoa::started#2
Adding number conversion cast (unumber) 0 in (bool~) ultoa::$12 ← (number) 0 != (byte) ultoa::started#2
Adding number conversion cast (unumber) $19+1 in if((byte) gotoxy::y#3<(byte) $19+(number) 1) goto gotoxy::@1
Adding number conversion cast (unumber) 1 in if((byte) gotoxy::y#3<(unumber)(byte) $19+(number) 1) goto gotoxy::@1
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$33 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#10
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$34 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#10
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$35 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$36 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$37 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast (byte) $19+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Alias candidate removed (volatile)toD0181_return#0 = toD0181_$6 toD0181_return#1 $0 canvas_show_memory 
Identical Phi Values (byte) uctoa::max_digits#7 (const byte) uctoa::max_digits#2
Identical Phi Values (byte*) uctoa::digit_values#8 (const byte*) uctoa::digit_values#2
Identical Phi Values (byte) ultoa::max_digits#7 (const byte) ultoa::max_digits#1
Identical Phi Values (dword*) ultoa::digit_values#8 (const dword*) ultoa::digit_values#1
Identical Phi Values (byte) gotoxy::y#3 (const byte) gotoxy::y#2
Identical Phi Values (byte) gotoxy::x#3 (const byte) gotoxy::x#2
Identical Phi Values (byte~) printf_ulong::$2 (const byte) printf_ulong::$0
Identical Phi Values (byte~) printf_uchar::$2 (const byte) printf_uchar::$0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) toupper::$0 [2] if((byte) toupper::ch#0>=(byte) 'a') goto toupper::@3
Simple Condition (bool~) uctoa::$11 [57] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@14
Simple Condition (bool~) ultoa::$12 [85] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@14
Simple Condition (bool~) printf_number_buffer::$1 [198] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@23
Simple Condition (bool~) printf_number_buffer::$33 [214] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@24
Simple Condition (bool~) printf_number_buffer::$34 [224] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@26
Simple Condition (bool~) toupper::$1 [441] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
Simple Condition (bool~) uctoa::$6 [442] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@14
Simple Condition (bool~) ultoa::$6 [443] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@14
Simple Condition (bool~) printf_number_buffer::$35 [445] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8
Simple Condition (bool~) printf_number_buffer::$2 [446] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@22
Simple Condition (bool~) printf_number_buffer::$36 [448] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10
Simple Condition (bool~) printf_number_buffer::$37 [450] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12
Simple Condition (bool~) printf_number_buffer::$14 [451] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@25
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [2] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@2
Negating conditional jump and destination [198] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
Negating conditional jump and destination [214] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
Negating conditional jump and destination [224] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
Negating conditional jump and destination [446] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
Negating conditional jump and destination [451] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [52] (byte~) uctoa::$4 ← (const byte) uctoa::max_digits#2 - (byte) 1
Constant right-side identified [79] (byte~) ultoa::$4 ← (const byte) ultoa::max_digits#1 - (byte) 1
Constant right-side identified [230] (word~) toD0181_$0 ← (const word) toD0181_$7 & (word) $3fff
Constant right-side identified [233] (byte~) toD0181_$3 ← > (word)(const byte*) toD0181_gfx#0
Constant right-side identified [251] (byte) main::p1_idx#0 ← (const byte) main::p0_idx#0 + (byte) $f
Constant right-side identified [252] (byte) main::p2_idx#0 ← (const byte) main::p0_idx#0 + (byte) $aa
Constant right-side identified [296] (word~) main::toD0181_$0 ← (const word) main::toD0181_$7 & (word) $3fff
Constant right-side identified [299] (byte~) main::toD0181_$3 ← > (word)(const byte*) main::toD0181_gfx#0
Constant right-side identified [303] (word~) main::toD0182_$0 ← (const word) main::toD0182_$7 & (word) $3fff
Constant right-side identified [306] (byte~) main::toD0182_$3 ← > (word)(const byte*) main::toD0182_gfx#0
Constant right-side identified [333] (word~) irq_bottom_1::toD0181_$0 ← (const word) irq_bottom_1::toD0181_$7 & (word) $3fff
Constant right-side identified [336] (byte~) irq_bottom_1::toD0181_$3 ← > (word)(const byte*) irq_bottom_1::toD0181_gfx#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) uctoa::$4 = uctoa::max_digits#2-1
Constant (const byte) ultoa::$4 = ultoa::max_digits#1-1
Constant (const word) toD0181_$0 = toD0181_$7&$3fff
Constant (const byte) toD0181_$3 = >(word)toD0181_gfx#0
Constant (const byte) main::p1_idx#0 = main::p0_idx#0+$f
Constant (const byte) main::p2_idx#0 = main::p0_idx#0+$aa
Constant (const word) main::toD0181_$0 = main::toD0181_$7&$3fff
Constant (const byte) main::toD0181_$3 = >(word)main::toD0181_gfx#0
Constant (const word) main::toD0182_$0 = main::toD0182_$7&$3fff
Constant (const byte) main::toD0182_$3 = >(word)main::toD0182_gfx#0
Constant (const word) irq_bottom_1::toD0181_$0 = irq_bottom_1::toD0181_$7&$3fff
Constant (const byte) irq_bottom_1::toD0181_$3 = >(word)irq_bottom_1::toD0181_gfx#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [111] if((const byte) gotoxy::y#2<(byte) $19+(byte) 1) goto gotoxy::@1
if() condition always true - replacing block destination [113] if((const byte) gotoxy::x#2<(byte) $28) goto gotoxy::@2
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant (const byte) uctoa::max_digits#1
Eliminating unused constant (const byte*) uctoa::digit_values#1
Eliminating unused constant (const byte) uctoa::max_digits#3
Eliminating unused constant (const byte*) uctoa::digit_values#3
Eliminating unused constant (const byte) uctoa::max_digits#4
Eliminating unused constant (const byte*) uctoa::digit_values#4
Eliminating unused constant (const byte) ultoa::max_digits#2
Eliminating unused constant (const dword*) ultoa::digit_values#2
Eliminating unused constant (const byte) ultoa::max_digits#3
Eliminating unused constant (const dword*) ultoa::digit_values#3
Eliminating unused constant (const byte) ultoa::max_digits#4
Eliminating unused constant (const dword*) ultoa::digit_values#4
Eliminating unused constant (const byte) gotoxy::x#1
Eliminating unused constant (const byte) gotoxy::y#1
Eliminating unused constant (const byte) printf_ulong::$1
Eliminating unused constant (const byte) printf_uchar::$1
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte*) RADIX_BINARY_VALUES_CHAR
Eliminating unused constant (const byte*) RADIX_OCTAL_VALUES_CHAR
Eliminating unused constant (const byte*) RADIX_DECIMAL_VALUES_CHAR
Eliminating unused constant (const dword*) RADIX_BINARY_VALUES_LONG
Eliminating unused constant (const dword*) RADIX_OCTAL_VALUES_LONG
Eliminating unused constant (const dword*) RADIX_HEXADECIMAL_VALUES_LONG
Successful SSA optimization PassNEliminateUnusedVars
Removing PHI-reference to removed block (gotoxy::@3) in block gotoxy::@1
Removing unused block gotoxy::@3
Removing PHI-reference to removed block (gotoxy::@4) in block gotoxy::@2
Removing unused block gotoxy::@4
Successful SSA optimization Pass2EliminateUnusedBlocks
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Alias candidate removed (volatile)toD0181_return#0 = toD0181_$6 toD0181_return#1 $0 canvas_show_memory 
Identical Phi Values (byte) gotoxy::y#4 (const byte) gotoxy::y#2
Identical Phi Values (byte) gotoxy::x#4 (const byte) gotoxy::x#2
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [104] (word~) gotoxy::$8 ← (word)(const byte) gotoxy::y#2
Constant right-side identified [210] (word~) toD0181_$1 ← (const word) toD0181_$0 * (byte) 4
Constant right-side identified [212] (byte~) toD0181_$4 ← (const byte) toD0181_$3 / (byte) 4
Constant right-side identified [272] (word~) main::toD0181_$1 ← (const word) main::toD0181_$0 * (byte) 4
Constant right-side identified [274] (byte~) main::toD0181_$4 ← (const byte) main::toD0181_$3 / (byte) 4
Constant right-side identified [277] (word~) main::toD0182_$1 ← (const word) main::toD0182_$0 * (byte) 4
Constant right-side identified [279] (byte~) main::toD0182_$4 ← (const byte) main::toD0182_$3 / (byte) 4
Constant right-side identified [305] (word~) irq_bottom_1::toD0181_$1 ← (const word) irq_bottom_1::toD0181_$0 * (byte) 4
Constant right-side identified [307] (byte~) irq_bottom_1::toD0181_$4 ← (const byte) irq_bottom_1::toD0181_$3 / (byte) 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) gotoxy::$8 = (word)gotoxy::y#2
Constant (const word) toD0181_$1 = toD0181_$0*4
Constant (const byte) toD0181_$4 = toD0181_$3/4
Constant (const word) main::toD0181_$1 = main::toD0181_$0*4
Constant (const byte) main::toD0181_$4 = main::toD0181_$3/4
Constant (const word) main::toD0182_$1 = main::toD0182_$0*4
Constant (const byte) main::toD0182_$4 = main::toD0182_$3/4
Constant (const word) irq_bottom_1::toD0181_$1 = irq_bottom_1::toD0181_$0*4
Constant (const byte) irq_bottom_1::toD0181_$4 = irq_bottom_1::toD0181_$3/4
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero gotoxy::$4 in [106] (word) gotoxy::offset#0 ← (word~) gotoxy::$4 + (const byte) gotoxy::x#2
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) gotoxy::y#0
Eliminating unused constant (const byte) gotoxy::x#0
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Alias candidate removed (volatile)toD0181_return#0 = toD0181_$6 toD0181_return#1 $0 canvas_show_memory 
Alias gotoxy::offset#0 = gotoxy::$4 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Alias candidate removed (volatile)toD0181_return#0 = toD0181_$6 toD0181_return#1 $0 canvas_show_memory 
Constant right-side identified [102] (word) gotoxy::offset#0 ← (const word) gotoxy::$8 * (byte) $28
Constant right-side identified [206] (byte~) toD0181_$2 ← > (const word) toD0181_$1
Constant right-side identified [207] (byte~) toD0181_$5 ← (const byte) toD0181_$4 & (byte) $f
Constant right-side identified [266] (byte~) main::toD0181_$2 ← > (const word) main::toD0181_$1
Constant right-side identified [267] (byte~) main::toD0181_$5 ← (const byte) main::toD0181_$4 & (byte) $f
Constant right-side identified [269] (byte~) main::toD0182_$2 ← > (const word) main::toD0182_$1
Constant right-side identified [270] (byte~) main::toD0182_$5 ← (const byte) main::toD0182_$4 & (byte) $f
Constant right-side identified [295] (byte~) irq_bottom_1::toD0181_$2 ← > (const word) irq_bottom_1::toD0181_$1
Constant right-side identified [296] (byte~) irq_bottom_1::toD0181_$5 ← (const byte) irq_bottom_1::toD0181_$4 & (byte) $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) gotoxy::offset#0 = gotoxy::$8*$28
Constant (const byte) toD0181_$2 = >toD0181_$1
Constant (const byte) toD0181_$5 = toD0181_$4&$f
Constant (const byte) main::toD0181_$2 = >main::toD0181_$1
Constant (const byte) main::toD0181_$5 = main::toD0181_$4&$f
Constant (const byte) main::toD0182_$2 = >main::toD0182_$1
Constant (const byte) main::toD0182_$5 = main::toD0182_$4&$f
Constant (const byte) irq_bottom_1::toD0181_$2 = >irq_bottom_1::toD0181_$1
Constant (const byte) irq_bottom_1::toD0181_$5 = irq_bottom_1::toD0181_$4&$f
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Alias candidate removed (volatile)toD0181_return#0 = toD0181_$6 toD0181_return#1 $0 canvas_show_memory 
Constant right-side identified [102] (byte*~) gotoxy::$6 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (const word) gotoxy::offset#0
Constant right-side identified [104] (byte*~) gotoxy::$7 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (const word) gotoxy::offset#0
Constant right-side identified [205] (byte~) toD0181_$6 ← (const byte) toD0181_$2 | (const byte) toD0181_$5
Constant right-side identified [263] (byte) main::toD0181_return#0 ← (const byte) main::toD0181_$2 | (const byte) main::toD0181_$5
Constant right-side identified [264] (byte) main::toD0182_return#0 ← (const byte) main::toD0182_$2 | (const byte) main::toD0182_$5
Constant right-side identified [288] (byte) irq_bottom_1::toD0181_return#0 ← (const byte) irq_bottom_1::toD0181_$2 | (const byte) irq_bottom_1::toD0181_$5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) gotoxy::$6 = CONIO_SCREEN_TEXT+gotoxy::offset#0
Constant (const byte*) gotoxy::$7 = CONIO_SCREEN_COLORS+gotoxy::offset#0
Constant (const byte) toD0181_$6 = toD0181_$2|toD0181_$5
Constant (const byte) main::toD0181_return#0 = main::toD0181_$2|main::toD0181_$5
Constant (const byte) main::toD0182_return#0 = main::toD0182_$2|main::toD0182_$5
Constant (const byte) irq_bottom_1::toD0181_return#0 = irq_bottom_1::toD0181_$2|irq_bottom_1::toD0181_$5
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) toD0181_return#0 = toD0181_$6
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) toD0181_return#1 = toD0181_return#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) $0 = toD0181_return#1
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$2 cscroll::$8 
Constant right-side identified [257] (byte~) main::$17 ← (const byte) main::toD0181_return#0 ^ (const byte) main::toD0182_return#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$17 = main::toD0181_return#0^main::toD0182_return#0
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$2 cscroll::$8 
Inlining Noop Cast [5] (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [6] (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#2 keeping memcpy::destination#2
Inlining Noop Cast [7] (byte*~) memcpy::$2 ← (byte*)(void*) memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [17] (byte*~) memset::$4 ← (byte*)(void*) memset::str#7 keeping memset::str#7
Inlining Noop Cast [19] (byte*) memset::dst#0 ← (byte*)(void*) memset::str#7 keeping memset::str#7
Inlining Noop Cast [182] (signed byte~) printf_number_buffer::$25 ← (signed byte)(byte) printf_number_buffer::format_min_length#2 keeping printf_number_buffer::format_min_length#2
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [256] (byte*) main::canvas#1 ← (byte*)(word~) main::$22 keeping main::canvas#1
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [73] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 * (const byte) SIZEOF_DWORD
Rewriting division to use shift [317] (byte) line::e1#0 ← (byte) line::dx#0 / (byte) 2
Rewriting division to use shift [318] (byte) line::e#0 ← (byte) line::dy#0 / (byte) 2
Rewriting division to use shift [319] (byte~) line::plot1_$0 ← (byte) line::x#0 / (byte) 8
Rewriting multiplication to use shift [320] (byte~) line::plot1_$2 ← (byte~) line::plot1_$0 * (const byte) SIZEOF_POINTER
Rewriting division to use shift [332] (byte~) line::plot2_$0 ← (byte) line::plot2_x#0 / (byte) 8
Rewriting multiplication to use shift [333] (byte~) line::plot2_$2 ← (byte~) line::plot2_$0 * (const byte) SIZEOF_POINTER
Rewriting division to use shift [338] (byte~) line::plot3_$0 ← (byte) line::x#12 / (byte) 8
Rewriting multiplication to use shift [339] (byte~) line::plot3_$2 ← (byte~) line::plot3_$0 * (const byte) SIZEOF_POINTER
Rewriting division to use shift [350] (byte~) line::plot4_$0 ← (byte) line::x#13 / (byte) 8
Rewriting multiplication to use shift [351] (byte~) line::plot4_$2 ← (byte~) line::plot4_$0 * (const byte) SIZEOF_POINTER
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const void*) memcpy::destination#0
Inlining constant with var siblings (const void*) memcpy::source#0
Inlining constant with var siblings (const word) memcpy::num#0
Inlining constant with var siblings (const void*) memcpy::destination#1
Inlining constant with var siblings (const void*) memcpy::source#1
Inlining constant with var siblings (const word) memcpy::num#1
Inlining constant with var siblings (const void*) memset::str#0
Inlining constant with var siblings (const byte) memset::c#0
Inlining constant with var siblings (const word) memset::num#0
Inlining constant with var siblings (const void*) memset::str#1
Inlining constant with var siblings (const word) memset::num#1
Inlining constant with var siblings (const void*) memset::str#2
Inlining constant with var siblings (const byte) memset::c#2
Inlining constant with var siblings (const word) memset::num#2
Inlining constant with var siblings (const void*) memset::str#3
Inlining constant with var siblings (const byte) memset::c#3
Inlining constant with var siblings (const word) memset::num#3
Inlining constant with var siblings (const void*) memset::str#4
Inlining constant with var siblings (const byte) memset::c#4
Inlining constant with var siblings (const word) memset::num#4
Inlining constant with var siblings (const void*) memset::str#5
Inlining constant with var siblings (const byte) memset::c#5
Inlining constant with var siblings (const word) memset::num#5
Inlining constant with var siblings (const word) strlen::len#0
Inlining constant with var siblings (const byte) uctoa::started#0
Inlining constant with var siblings (const byte) uctoa::digit#0
Inlining constant with var siblings (const byte) uctoa::started#1
Inlining constant with var siblings (const byte*) uctoa::buffer#5
Inlining constant with var siblings (const byte) uctoa_append::digit#0
Inlining constant with var siblings (const byte) ultoa::started#0
Inlining constant with var siblings (const byte) ultoa::digit#0
Inlining constant with var siblings (const byte) ultoa::started#1
Inlining constant with var siblings (const byte*) ultoa::buffer#5
Inlining constant with var siblings (const byte) ultoa_append::digit#0
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#2
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#3
Inlining constant with var siblings (const byte) printf_padding::i#0
Inlining constant with var siblings (const byte) printf_padding::pad#0
Inlining constant with var siblings (const byte) printf_padding::pad#1
Inlining constant with var siblings (const byte) printf_padding::pad#2
Inlining constant with var siblings (const byte*) printf_number_buffer::buffer_digits#0
Inlining constant with var siblings (const byte*) printf_number_buffer::buffer_digits#1
Inlining constant with var siblings (const signed byte) printf_number_buffer::padding#0
Inlining constant with var siblings (const signed byte) printf_number_buffer::padding#2
Inlining constant with var siblings (const byte) printf_number_buffer::format_min_length#0
Inlining constant with var siblings (const byte) printf_number_buffer::format_justify_left#0
Inlining constant with var siblings (const byte) printf_number_buffer::format_zero_padding#0
Inlining constant with var siblings (const byte) printf_number_buffer::format_upper_case#0
Inlining constant with var siblings (const byte) printf_number_buffer::format_min_length#1
Inlining constant with var siblings (const byte) printf_number_buffer::format_justify_left#1
Inlining constant with var siblings (const byte) printf_number_buffer::format_zero_padding#1
Inlining constant with var siblings (const byte) printf_number_buffer::format_upper_case#1
Inlining constant with var siblings (const byte*) main::screen#0
Inlining constant with var siblings (const byte*) main::cols#0
Inlining constant with var siblings (const byte) main::y#0
Inlining constant with var siblings (const byte) main::x#0
Inlining constant with var siblings (const byte) main::p0_idx#0
Inlining constant with var siblings (const byte*) main::canvas#0
Inlining constant with var siblings (const byte) main::p1_idx#0
Inlining constant with var siblings (const byte) main::p2_idx#0
Inlining constant with var siblings (const byte) eorfill::x#0
Inlining constant with var siblings (const byte) eorfill::y#0
Inlining constant with var siblings (const byte) sgn_u8::return#2
Inlining constant with var siblings (const byte) sgn_u8::return#3
Inlining constant with different constant siblings (const byte) toD0181_return#1
Constant inlined irq_bottom_1::toD0181_$7 = (word)(const nomodify byte*) CONSOLE
Constant inlined cputs::s#3 = (const byte*) main::s1
Constant inlined printf_number_buffer::format_justify_left#0 = (const byte) printf_ulong::format_justify_left#0
Constant inlined irq_bottom_1::toD0181_$4 = >(word)(const nomodify byte*) PETSCII/(byte) 4
Constant inlined printf_number_buffer::buffer_digits#0 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined irq_bottom_1::toD0181_$5 = >(word)(const nomodify byte*) PETSCII/(byte) 4&(byte) $f
Constant inlined printf_number_buffer::buffer_digits#1 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined cputs::s#2 = (const byte*) main::s
Constant inlined printf_number_buffer::format_justify_left#1 = (const byte) printf_uchar::format_justify_left#0
Constant inlined strlen::len#0 = (word) 0
Constant inlined main::p2_idx#0 = (byte) $f0+(byte) $aa
Constant inlined main::$17 = (const byte) main::toD0181_return#0^(const byte) main::toD0182_return#0
Constant inlined toD0181_return#1 = (const byte) toD0181_return#0
Constant inlined uctoa::digit#0 = (byte) 0
Constant inlined main::toD0181_$7 = (word)(const nomodify byte*) SCREEN
Constant inlined main::toD0181_$2 = >(word)(const nomodify byte*) SCREEN&(word) $3fff*(byte) 4
Constant inlined main::toD0181_$1 = (word)(const nomodify byte*) SCREEN&(word) $3fff*(byte) 4
Constant inlined main::toD0181_$0 = (word)(const nomodify byte*) SCREEN&(word) $3fff
Constant inlined memcpy::source#0 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28
Constant inlined main::toD0181_$5 = >(word)(const nomodify byte*) CANVAS1/(byte) 4&(byte) $f
Constant inlined main::toD0181_$4 = >(word)(const nomodify byte*) CANVAS1/(byte) 4
Constant inlined main::toD0181_$3 = >(word)(const nomodify byte*) CANVAS1
Constant inlined memset::c#5 = (byte) 0
Constant inlined ultoa::digit#0 = (byte) 0
Constant inlined irq_bottom_1::toD0181_gfx#0 = (const nomodify byte*) PETSCII
Constant inlined memset::c#0 = (byte) ' '
Constant inlined memset::c#2 = (byte) ' '
Constant inlined memset::c#3 = (byte) 0
Constant inlined memset::c#4 = (const nomodify byte) BLACK
Constant inlined main::screen#0 = (const nomodify byte*) SCREEN+(byte) $c
Constant inlined main::toD0181_screen#0 = (const nomodify byte*) SCREEN
Constant inlined uctoa::$4 = (const byte) uctoa::max_digits#2-(byte) 1
Constant inlined uctoa::digit_values#2 = (const byte*) RADIX_HEXADECIMAL_VALUES_CHAR
Constant inlined printf_uchar::$0 = (byte) 0
Constant inlined memcpy::destination#0 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT
Constant inlined memcpy::destination#1 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS
Constant inlined toD0181_$0 = (word)(const nomodify byte*) SCREEN&(word) $3fff
Constant inlined toD0181_$1 = (word)(const nomodify byte*) SCREEN&(word) $3fff*(byte) 4
Constant inlined toD0181_$2 = >(word)(const nomodify byte*) SCREEN&(word) $3fff*(byte) 4
Constant inlined toD0181_$3 = >(word)(const nomodify byte*) CANVAS2
Constant inlined toD0181_$4 = >(word)(const nomodify byte*) CANVAS2/(byte) 4
Constant inlined toD0181_$5 = >(word)(const nomodify byte*) CANVAS2/(byte) 4&(byte) $f
Constant inlined toD0181_$6 = >(word)(const nomodify byte*) SCREEN&(word) $3fff*(byte) 4|>(word)(const nomodify byte*) CANVAS2/(byte) 4&(byte) $f
Constant inlined textcolor::color#0 = (const nomodify byte) WHITE
Constant inlined toD0181_$7 = (word)(const nomodify byte*) SCREEN
Constant inlined printf_number_buffer::format_min_length#0 = (const byte) printf_ulong::format_min_length#0
Constant inlined printf_number_buffer::format_min_length#1 = (const byte) printf_uchar::format_min_length#0
Constant inlined printf_padding::pad#0 = (byte) ' '
Constant inlined printf_padding::i#0 = (byte) 0
Constant inlined printf_padding::pad#1 = (byte) '0'
Constant inlined printf_padding::pad#2 = (byte) ' '
Constant inlined printf_ulong::$0 = (byte) 0
Constant inlined main::x#0 = (byte) 0
Constant inlined uctoa::buffer#5 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined main::canvas#0 = (const nomodify byte*) CANVAS1
Constant inlined main::p0_idx#0 = (byte) $f0
Constant inlined ultoa_append::digit#0 = (byte) 0
Constant inlined ultoa::digit_values#1 = (const dword*) RADIX_DECIMAL_VALUES_LONG
Constant inlined eorfill::line_buffer#0 = (const nomodify byte*) LINE_BUFFER
Constant inlined irq_bottom_1::toD0181_$2 = >(word)(const nomodify byte*) CONSOLE&(word) $3fff*(byte) 4
Constant inlined irq_bottom_1::toD0181_$3 = >(word)(const nomodify byte*) PETSCII
Constant inlined irq_bottom_1::toD0181_$0 = (word)(const nomodify byte*) CONSOLE&(word) $3fff
Constant inlined irq_bottom_1::toD0181_$1 = (word)(const nomodify byte*) CONSOLE&(word) $3fff*(byte) 4
Constant inlined uctoa_append::digit#0 = (byte) 0
Constant inlined irq_bottom_1::toD0181_screen#0 = (const nomodify byte*) CONSOLE
Constant inlined toD0181_gfx#0 = (const nomodify byte*) CANVAS2
Constant inlined memset::num#3 = (word)(number) $28*(number) $19
Constant inlined memset::num#2 = (word)(number) $28*(number) $19
Constant inlined memset::num#5 = (word) $800
Constant inlined memset::num#4 = (word)(number) $28*(number) $19
Constant inlined main::toD0182_$4 = >(word)(const nomodify byte*) CANVAS2/(byte) 4
Constant inlined main::toD0182_$5 = >(word)(const nomodify byte*) CANVAS2/(byte) 4&(byte) $f
Constant inlined memset::num#1 = (byte) $28
Constant inlined main::toD0182_$7 = (word)(const nomodify byte*) SCREEN
Constant inlined memset::num#0 = (byte) $28
Constant inlined $0 = (const byte) toD0181_return#0
Constant inlined main::toD0182_$0 = (word)(const nomodify byte*) SCREEN&(word) $3fff
Constant inlined main::toD0182_$1 = (word)(const nomodify byte*) SCREEN&(word) $3fff*(byte) 4
Constant inlined main::toD0182_$2 = >(word)(const nomodify byte*) SCREEN&(word) $3fff*(byte) 4
Constant inlined main::toD0182_$3 = >(word)(const nomodify byte*) CANVAS2
Constant inlined toD0181_screen#0 = (const nomodify byte*) SCREEN
Constant inlined printf_number_buffer::padding#2 = (signed byte) 0
Constant inlined main::toD0182_gfx#0 = (const nomodify byte*) CANVAS2
Constant inlined main::cols#0 = (const nomodify byte*) COLS+(byte) $c
Constant inlined main::p1_idx#0 = (byte) $f0+(byte) $f
Constant inlined ultoa::started#1 = (byte) 1
Constant inlined main::y#0 = (byte) 0
Constant inlined eorfill::x#0 = (byte) 0
Constant inlined printf_number_buffer::padding#0 = (signed byte) 0
Constant inlined main::toD0181_gfx#0 = (const nomodify byte*) CANVAS1
Constant inlined uctoa::started#0 = (byte) 0
Constant inlined sgn_u8::return#3 = (byte) 1
Constant inlined uctoa::started#1 = (byte) 1
Constant inlined sgn_u8::return#2 = (byte) -1
Constant inlined memcpy::source#1 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28
Constant inlined ultoa::buffer#5 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_number_buffer::format_upper_case#1 = (const byte) printf_uchar::format_upper_case#0
Constant inlined ultoa::started#0 = (byte) 0
Constant inlined printf_number_buffer::format_upper_case#0 = (const byte) printf_ulong::format_upper_case#0
Constant inlined printf_number_buffer::format_zero_padding#0 = (const byte) printf_ulong::format_zero_padding#0
Constant inlined memset::str#2 = (void*)(const nomodify byte*) CONSOLE
Constant inlined memset::str#1 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28
Constant inlined printf_number_buffer::format_zero_padding#1 = (const byte) printf_uchar::format_zero_padding#0
Constant inlined memset::str#0 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28
Constant inlined memset::str#5 = (void*)(const nomodify byte*) LINE_BUFFER
Constant inlined gotoxy::$8 = (word)(const byte) gotoxy::y#2
Constant inlined memset::str#4 = (void*)(const nomodify byte*) COLS
Constant inlined memset::str#3 = (void*)(const nomodify byte*) SCREEN
Constant inlined gotoxy::$6 = (const nomodify byte*) CONIO_SCREEN_TEXT+(const word) gotoxy::offset#0
Constant inlined gotoxy::$7 = (const nomodify byte*) CONIO_SCREEN_COLORS+(const word) gotoxy::offset#0
Constant inlined ultoa::$4 = (const byte) ultoa::max_digits#1-(byte) 1
Constant inlined memcpy::num#1 = (word)(number) $19*(number) $28-(number) $28
Constant inlined memcpy::num#0 = (word)(number) $19*(number) $28-(number) $28
Constant inlined main::toD0182_screen#0 = (const nomodify byte*) SCREEN
Constant inlined eorfill::y#0 = (byte) 1
Successful SSA optimization Pass2ConstantInlining
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$2 cscroll::$8 
Identical Phi Values (word) memcpy::num#2 (word)(number) $19*(number) $28-(number) $28
Identical Phi Values (byte*) printf_number_buffer::buffer_digits#10 (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte*) strlen::str#1 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const to_nomodify byte*) cputs::s#1 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) strupr::str#0 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte) SIZEOF_DWORD
Eliminating unused constant (const byte) SIZEOF_POINTER
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings (const byte*) strlen::str#1
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#1
Constant inlined cputs::s#1 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined strlen::str#1 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Successful SSA optimization Pass2ConstantInlining
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$2 cscroll::$8 
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$2 cscroll::$8 
Added new block during phi lifting uctoa::@17(between uctoa::@16 and uctoa::@13)
Added new block during phi lifting ultoa::@17(between ultoa::@16 and ultoa::@13)
Added new block during phi lifting printf_number_buffer::@27(between printf_number_buffer::@13 and printf_number_buffer::@1)
Added new block during phi lifting printf_number_buffer::@28(between printf_number_buffer::@15 and printf_number_buffer::@13)
Added new block during phi lifting line::@17(between line::@16 and line::@1)
Added new block during phi lifting line::@18(between line::@6 and line::@5)
Added new block during phi lifting line::@19(between line::@5 and line::@6)
Added new block during phi lifting line::@20(between line::@9 and line::@8)
Added new block during phi lifting line::@21(between line::@12 and line::@9)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of toD0181
Adding NOP phi() at start of toD0181_@return
Adding NOP phi() at start of @3
Adding NOP phi() at start of @5
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@14
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of main::@16
Adding NOP phi() at start of main::@17
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@18
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0181_@return
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::toD0182
Adding NOP phi() at start of main::toD0182_@return
Adding NOP phi() at start of main::@25
Adding NOP phi() at start of main::@27
Adding NOP phi() at start of printf_ulong
Adding NOP phi() at start of printf_ulong::@2
Adding NOP phi() at start of printf_ulong::@5
Adding NOP phi() at start of printf_number_buffer::@6
Adding NOP phi() at start of printf_number_buffer::@14
Adding NOP phi() at start of printf_number_buffer::@17
Adding NOP phi() at start of printf_number_buffer::@11
Adding NOP phi() at start of printf_number_buffer::@20
Adding NOP phi() at start of printf_number_buffer::@5
Adding NOP phi() at start of printf_number_buffer::@21
Adding NOP phi() at start of printf_number_buffer::@18
Adding NOP phi() at start of printf_number_buffer::@16
Adding NOP phi() at start of cputc::@5
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cputc::@4
Adding NOP phi() at start of cputln::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4
Adding NOP phi() at start of cscroll::@5
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of memcpy::@3
Adding NOP phi() at start of strupr
Adding NOP phi() at start of strupr::@3
Adding NOP phi() at start of strlen
Adding NOP phi() at start of strlen::@3
Adding NOP phi() at start of ultoa
Adding NOP phi() at start of ultoa::@1
Adding NOP phi() at start of printf_uchar
Adding NOP phi() at start of printf_uchar::@2
Adding NOP phi() at start of printf_uchar::@5
Adding NOP phi() at start of uctoa
Adding NOP phi() at start of uctoa::@6
Adding NOP phi() at start of uctoa::@2
Adding NOP phi() at start of gotoxy
Adding NOP phi() at start of gotoxy::@1
Adding NOP phi() at start of line::@11
Adding NOP phi() at start of sgn_u8::@2
Adding NOP phi() at start of sgn_u8::@1
Adding NOP phi() at start of irq_bottom_1::toD0181
Adding NOP phi() at start of irq_bottom_1::toD0181_@return
CALL GRAPH
Calls in [] to main:12 
Calls in [main] to memset:16 memset:18 memset:20 setup_irq:26 textcolor:28 clock_start:32 memset:34 line:47 line:58 line:67 eorfill:75 clock:84 gotoxy:88 cputs:90 printf_uchar:92 cputs:94 printf_ulong:96 
Calls in [printf_ulong] to ultoa:120 printf_number_buffer:123 
Calls in [printf_number_buffer] to strlen:129 cputc:147 strupr:153 cputs:156 printf_padding:163 printf_padding:167 printf_padding:171 
Calls in [printf_padding] to cputc:181 
Calls in [cputc] to cscroll:194 cputln:198 
Calls in [cputln] to cscroll:207 
Calls in [cscroll] to memcpy:213 memcpy:215 memset:217 memset:220 
Calls in [cputs] to cputc:260 
Calls in [strupr] to toupper:268 
Calls in [ultoa] to ultoa_append:316 
Calls in [printf_uchar] to uctoa:335 printf_number_buffer:338 
Calls in [uctoa] to uctoa_append:366 
Calls in [line] to abs_u8:412 abs_u8:417 sgn_u8:422 sgn_u8:427 
Calls in [irq_bottom_2] to kbhit:531 

Created 77 initial phi equivalence classes
Coalesced [43] line::x#22 ← line::x1#0
Coalesced [44] line::y#23 ← line::y1#0
Coalesced [45] line::x2#16 ← line::x2#0
Coalesced [46] line::y2#17 ← line::y2#0
Coalesced [54] line::x#23 ← line::x1#1
Coalesced [55] line::y#24 ← line::y1#1
Coalesced [56] line::x2#17 ← line::x2#1
Coalesced [57] line::y2#18 ← line::y2#1
Coalesced [63] line::x#24 ← line::x1#2
Coalesced [64] line::y#25 ← line::y1#2
Coalesced [65] line::x2#18 ← line::x2#2
Coalesced [66] line::y2#19 ← line::y2#2
Coalesced [97] main::p0_idx#24 ← main::p0_idx#1
Coalesced [98] main::p1_idx#24 ← main::p1_idx#1
Coalesced [99] main::p2_idx#24 ← main::p2_idx#1
Not coalescing [101] main::c#4 ← main::y#2
Coalesced [107] main::y#7 ← main::y#1
Coalesced [108] main::cols#7 ← main::cols#1
Coalesced [109] main::screen#7 ← main::screen#1
Coalesced [114] main::x#4 ← main::x#1
Coalesced [115] main::c#5 ← main::c#1
Coalesced [122] printf_number_buffer::buffer_sign#14 ← printf_number_buffer::buffer_sign#0
Coalesced [135] printf_number_buffer::len#5 ← printf_number_buffer::len#1
Coalesced [146] cputc::c#6 ← cputc::c#2
Coalesced [162] printf_padding::length#8 ← printf_padding::length#2
Coalesced [166] printf_padding::length#7 ← printf_padding::length#1
Coalesced [170] printf_padding::length#9 ← printf_padding::length#0
Coalesced [173] printf_number_buffer::padding#18 ← printf_number_buffer::padding#1
Coalesced [174] printf_number_buffer::len#4 ← printf_number_buffer::len#0
Coalesced [180] cputc::c#7 ← cputc::c#1
Coalesced [183] printf_padding::i#5 ← printf_padding::i#1
Coalesced [219] memset::c#10 ← memset::c#1
Coalesced [237] memset::dst#5 ← memset::dst#1
Coalesced [249] memcpy::src#5 ← memcpy::src#1
Coalesced [250] memcpy::dst#5 ← memcpy::dst#1
Coalesced [252] cputs::s#8 ← cputs::s#5
Coalesced [259] cputc::c#5 ← cputc::c#0
Coalesced [261] cputs::s#9 ← cputs::s#0
Coalesced [273] strupr::src#5 ← strupr::src#1
Coalesced [276] toupper::return#7 ← toupper::ch#0
Coalesced [280] toupper::return#6 ← toupper::return#0
Coalesced [288] strlen::str#5 ← strlen::str#0
Coalesced [289] strlen::len#5 ← strlen::len#1
Coalesced [292] ultoa::value#17 ← ultoa::value#1
Coalesced [304] ultoa::value#18 ← ultoa::value#2
Coalesced [305] ultoa::started#6 ← ultoa::started#2
Coalesced [306] ultoa::buffer#23 ← ultoa::buffer#11
Coalesced [309] ultoa::digit#7 ← ultoa::digit#1
Coalesced (already) [310] ultoa::value#16 ← ultoa::value#6
Coalesced (already) [311] ultoa::started#5 ← ultoa::started#4
Coalesced (already) [312] ultoa::buffer#22 ← ultoa::buffer#14
Coalesced [320] ultoa::value#19 ← ultoa::value#0
Coalesced [321] ultoa::buffer#24 ← ultoa::buffer#4
Coalesced [322] ultoa_append::value#6 ← ultoa_append::value#0
Coalesced [329] ultoa_append::value#7 ← ultoa_append::value#1
Coalesced [330] ultoa_append::digit#5 ← ultoa_append::digit#1
Coalesced [337] printf_number_buffer::buffer_sign#13 ← printf_number_buffer::buffer_sign#1
Coalesced [344] uctoa::value#17 ← uctoa::value#1
Coalesced [354] uctoa::value#18 ← uctoa::value#2
Coalesced [355] uctoa::started#6 ← uctoa::started#2
Coalesced [356] uctoa::buffer#23 ← uctoa::buffer#11
Coalesced [359] uctoa::digit#7 ← uctoa::digit#1
Coalesced (already) [360] uctoa::value#16 ← uctoa::value#6
Coalesced (already) [361] uctoa::started#5 ← uctoa::started#4
Coalesced (already) [362] uctoa::buffer#22 ← uctoa::buffer#14
Coalesced [370] uctoa::value#19 ← uctoa::value#0
Coalesced [371] uctoa::buffer#24 ← uctoa::buffer#4
Coalesced [372] uctoa_append::value#6 ← uctoa_append::value#0
Coalesced [379] uctoa_append::value#7 ← uctoa_append::value#1
Coalesced [380] uctoa_append::digit#5 ← uctoa_append::digit#1
Coalesced [390] eorfill::fill_column#7 ← eorfill::canvas#0
Coalesced [395] eorfill::eor#4 ← eorfill::eor#0
Coalesced [401] eorfill::x#7 ← eorfill::x#1
Coalesced [402] eorfill::line_column#7 ← eorfill::line_column#1
Coalesced [403] eorfill::fill_column#8 ← eorfill::fill_column#1
Coalesced [407] eorfill::y#4 ← eorfill::y#1
Coalesced [408] eorfill::eor#5 ← eorfill::eor#1
Coalesced [411] abs_u8::u#5 ← abs_u8::u#0
Coalesced [416] abs_u8::u#6 ← abs_u8::u#1
Coalesced [421] sgn_u8::u#3 ← sgn_u8::u#0
Coalesced [426] sgn_u8::u#4 ← sgn_u8::u#1
Coalesced [433] line::y#27 ← line::y#1
Coalesced [434] line::y2#21 ← line::y2#3
Coalesced [443] line::y#29 ← line::y#13
Coalesced [444] line::e#9 ← line::e#0
Coalesced [445] line::x#26 ← line::x#0
Coalesced [457] line::e#11 ← line::e#2
Coalesced [458] line::x#28 ← line::plot2_x#0
Coalesced [462] line::y#28 ← line::y#15
Coalesced [463] line::e#8 ← line::e#5
Coalesced [464] line::x#25 ← line::x#16
Coalesced [465] line::e#10 ← line::e#1
Coalesced (already) [466] line::x#27 ← line::x#10
Coalesced [468] line::x#29 ← line::x#0
Coalesced [469] line::y#30 ← line::y#13
Coalesced [470] line::e1#8 ← line::e1#0
Coalesced [482] line::y#32 ← line::y#3
Coalesced [483] line::e1#10 ← line::e1#2
Coalesced [492] line::x#30 ← line::x#13
Coalesced [493] line::y#31 ← line::y#11
Coalesced [494] line::e1#9 ← line::e1#7
Coalesced (already) [495] line::y#33 ← line::y#10
Coalesced [496] line::e1#11 ← line::e1#1
Coalesced [497] line::y#26 ← line::y#0
Coalesced [498] line::y2#20 ← line::y2#10
Coalesced [509] abs_u8::return#9 ← abs_u8::u#2
Coalesced [513] abs_u8::return#8 ← abs_u8::return#2
Coalesced down to 59 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) toD0181_@return
Culled Empty Block (label) @5
Culled Empty Block (label) main::@15
Culled Empty Block (label) main::@17
Culled Empty Block (label) main::toD0181_@return
Culled Empty Block (label) main::@11
Culled Empty Block (label) main::toD0182_@return
Culled Empty Block (label) printf_ulong::@2
Culled Empty Block (label) printf_ulong::@5
Culled Empty Block (label) printf_number_buffer::@14
Culled Empty Block (label) printf_number_buffer::@17
Culled Empty Block (label) printf_number_buffer::@20
Culled Empty Block (label) printf_number_buffer::@21
Culled Empty Block (label) printf_number_buffer::@18
Culled Empty Block (label) printf_number_buffer::@16
Culled Empty Block (label) printf_number_buffer::@28
Culled Empty Block (label) cputc::@5
Culled Empty Block (label) cputc::@4
Culled Empty Block (label) cputln::@1
Culled Empty Block (label) cscroll::@1
Culled Empty Block (label) memset::@1
Culled Empty Block (label) memcpy::@3
Culled Empty Block (label) cputs::@3
Culled Empty Block (label) strupr::@3
Culled Empty Block (label) toupper::@2
Culled Empty Block (label) strlen::@3
Culled Empty Block (label) ultoa::@1
Culled Empty Block (label) ultoa::@5
Culled Empty Block (label) ultoa::@17
Culled Empty Block (label) printf_uchar::@2
Culled Empty Block (label) printf_uchar::@5
Culled Empty Block (label) uctoa::@6
Culled Empty Block (label) uctoa::@2
Culled Empty Block (label) uctoa::@5
Culled Empty Block (label) uctoa::@17
Culled Empty Block (label) gotoxy::@1
Culled Empty Block (label) line::@18
Culled Empty Block (label) line::@19
Culled Empty Block (label) line::@11
Culled Empty Block (label) line::@20
Culled Empty Block (label) line::@21
Culled Empty Block (label) line::@17
Culled Empty Block (label) sgn_u8::@2
Culled Empty Block (label) abs_u8::@2
Culled Empty Block (label) irq_bottom_1::toD0181_@return
Renumbering block @3 to @2
Renumbering block @4 to @3
Renumbering block toupper::@3 to toupper::@2
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block strupr::@4 to strupr::@3
Renumbering block uctoa::@10 to uctoa::@1
Renumbering block uctoa::@11 to uctoa::@2
Renumbering block uctoa::@12 to uctoa::@3
Renumbering block uctoa::@13 to uctoa::@4
Renumbering block uctoa::@14 to uctoa::@5
Renumbering block uctoa::@15 to uctoa::@6
Renumbering block uctoa::@16 to uctoa::@7
Renumbering block ultoa::@10 to ultoa::@1
Renumbering block ultoa::@11 to ultoa::@2
Renumbering block ultoa::@12 to ultoa::@3
Renumbering block ultoa::@13 to ultoa::@4
Renumbering block ultoa::@14 to ultoa::@5
Renumbering block ultoa::@15 to ultoa::@6
Renumbering block ultoa::@16 to ultoa::@7
Renumbering block gotoxy::@2 to gotoxy::@1
Renumbering block cscroll::@3 to cscroll::@1
Renumbering block cscroll::@4 to cscroll::@2
Renumbering block cscroll::@5 to cscroll::@3
Renumbering block cscroll::@6 to cscroll::@4
Renumbering block cscroll::@7 to cscroll::@5
Renumbering block printf_ulong::@3 to printf_ulong::@1
Renumbering block printf_ulong::@4 to printf_ulong::@2
Renumbering block printf_uchar::@3 to printf_uchar::@1
Renumbering block printf_uchar::@4 to printf_uchar::@2
Renumbering block printf_number_buffer::@15 to printf_number_buffer::@14
Renumbering block printf_number_buffer::@19 to printf_number_buffer::@15
Renumbering block printf_number_buffer::@22 to printf_number_buffer::@16
Renumbering block printf_number_buffer::@23 to printf_number_buffer::@17
Renumbering block printf_number_buffer::@24 to printf_number_buffer::@18
Renumbering block printf_number_buffer::@25 to printf_number_buffer::@19
Renumbering block printf_number_buffer::@26 to printf_number_buffer::@20
Renumbering block printf_number_buffer::@27 to printf_number_buffer::@21
Renumbering block main::@12 to main::@11
Renumbering block main::@13 to main::@12
Renumbering block main::@14 to main::@13
Renumbering block main::@16 to main::@14
Renumbering block main::@18 to main::@15
Renumbering block main::@19 to main::@16
Renumbering block main::@20 to main::@17
Renumbering block main::@21 to main::@18
Renumbering block main::@22 to main::@19
Renumbering block main::@23 to main::@20
Renumbering block main::@24 to main::@21
Renumbering block main::@25 to main::@22
Renumbering block main::@26 to main::@23
Renumbering block main::@27 to main::@24
Renumbering block main::@28 to main::@25
Renumbering block main::@29 to main::@26
Renumbering block line::@12 to line::@11
Renumbering block line::@13 to line::@12
Renumbering block line::@14 to line::@13
Renumbering block line::@15 to line::@14
Renumbering block line::@16 to line::@15
Adding NOP phi() at start of @begin
Adding NOP phi() at start of toD0181
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@14
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0182
Adding NOP phi() at start of main::@22
Adding NOP phi() at start of main::@24
Adding NOP phi() at start of printf_ulong
Adding NOP phi() at start of printf_number_buffer::@6
Adding NOP phi() at start of printf_number_buffer::@21
Adding NOP phi() at start of printf_number_buffer::@11
Adding NOP phi() at start of printf_number_buffer::@5
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@2
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of strupr
Adding NOP phi() at start of strlen
Adding NOP phi() at start of ultoa
Adding NOP phi() at start of ultoa_append
Adding NOP phi() at start of printf_uchar
Adding NOP phi() at start of uctoa
Adding NOP phi() at start of uctoa_append
Adding NOP phi() at start of gotoxy
Adding NOP phi() at start of eorfill
Adding NOP phi() at start of sgn_u8::@1
Adding NOP phi() at start of irq_bottom_1::toD0181

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  [5] (byte) conio_textcolor ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  to:toD0181
toD0181: scope:[]  from @1
  [6] phi()
  to:@3
@3: scope:[]  from toD0181
  [7] (volatile byte) canvas_show_memory ← (const byte) toD0181_return#0
  [8] (volatile byte) canvas_show_flag ← (byte) 0
  to:@2
@2: scope:[]  from @3
  [9] phi()
  [10] call main 
  to:@end
@end: scope:[]  from @2
  [11] phi()

(void()) main()
main: scope:[main]  from @2
  [12] phi()
  [13] call memset 
  to:main::@12
main::@12: scope:[main]  from main
  [14] phi()
  [15] call memset 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [16] phi()
  [17] call memset 
  to:main::@1
main::@1: scope:[main]  from main::@13 main::@6
  [18] (byte*) main::screen#5 ← phi( main::@13/(const nomodify byte*) SCREEN+(byte) $c main::@6/(byte*) main::screen#1 )
  [18] (byte*) main::cols#5 ← phi( main::@13/(const nomodify byte*) COLS+(byte) $c main::@6/(byte*) main::cols#1 )
  [18] (byte) main::y#2 ← phi( main::@13/(byte) 0 main::@6/(byte) main::y#1 )
  [19] if((byte) main::y#2<(byte) $10) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [20] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK
  [21] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (const nomodify byte) BLACK
  [22] call setup_irq 
  to:main::@14
main::@14: scope:[main]  from main::@3
  [23] phi()
  [24] call textcolor 
  to:main::@7
main::@7: scope:[main]  from main::@14 main::@26
  [25] (byte*) main::canvas#10 ← phi( main::@14/(const nomodify byte*) CANVAS1 main::@26/(byte*) main::canvas#24 )
  [25] (byte) main::p2_idx#2 ← phi( main::@14/(byte) $f0+(byte) $aa main::@26/(byte) main::p2_idx#1 )
  [25] (byte) main::p1_idx#2 ← phi( main::@14/(byte) $f0+(byte) $f main::@26/(byte) main::p1_idx#1 )
  [25] (byte) main::p0_idx#11 ← phi( main::@14/(byte) $f0 main::@26/(byte) main::p0_idx#1 )
  to:main::@8
main::@8: scope:[main]  from main::@7
  [26] phi()
  [27] call clock_start 
  to:main::@15
main::@15: scope:[main]  from main::@8
  [28] phi()
  [29] call memset 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [30] (byte) main::x0#0 ← *((const byte*) COSTAB + (byte) main::p0_idx#11)
  [31] (byte) main::y0#0 ← *((const byte*) SINTAB + (byte) main::p0_idx#11)
  [32] (byte) main::x1#0 ← *((const byte*) COSTAB + (byte) main::p1_idx#2)
  [33] (byte) main::y1#0 ← *((const byte*) SINTAB + (byte) main::p1_idx#2)
  [34] (byte) line::x1#0 ← (byte) main::x0#0
  [35] (byte) line::y1#0 ← (byte) main::y0#0
  [36] (byte) line::x2#0 ← (byte) main::x1#0
  [37] (byte) line::y2#0 ← (byte) main::y1#0
  [38] call line 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [39] (byte) main::x2#0 ← *((const byte*) COSTAB + (byte) main::p2_idx#2)
  [40] (byte) main::y2#0 ← *((const byte*) SINTAB + (byte) main::p2_idx#2)
  [41] (byte) line::x1#1 ← (byte) main::x1#0
  [42] (byte) line::y1#1 ← (byte) main::y1#0
  [43] (byte) line::x2#1 ← (byte) main::x2#0
  [44] (byte) line::y2#1 ← (byte) main::y2#0
  [45] call line 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [46] (byte) line::x1#2 ← (byte) main::x2#0
  [47] (byte) line::y1#2 ← (byte) main::y2#0
  [48] (byte) line::x2#2 ← (byte) main::x0#0
  [49] (byte) line::y2#2 ← (byte) main::y0#0
  [50] call line 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [51] (byte) main::p0_idx#1 ← ++ (byte) main::p0_idx#11
  [52] (byte) main::p1_idx#1 ← ++ (byte) main::p1_idx#2
  [53] (byte) main::p2_idx#1 ← ++ (byte) main::p2_idx#2
  [54] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) RED
  to:main::@9
main::@9: scope:[main]  from main::@19 main::@9
  [55] if((byte) 0!=(volatile byte) canvas_show_flag) goto main::@9
  to:main::@10
main::@10: scope:[main]  from main::@9
  [56] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK
  [57] (byte*) eorfill::canvas#0 ← (byte*) main::canvas#10
  [58] call eorfill 
  to:main::@20
main::@20: scope:[main]  from main::@10
  [59] (word) main::canvas#1 ← (byte*) main::canvas#10 ^ (const nomodify byte*) CANVAS1^(const nomodify byte*) CANVAS2
  to:main::toD0181
main::toD0181: scope:[main]  from main::@20
  [60] phi()
  to:main::toD0182
main::toD0182: scope:[main]  from main::toD0181
  [61] phi()
  to:main::@11
main::@11: scope:[main]  from main::toD0182
  [62] (volatile byte) canvas_show_memory ← (volatile byte) canvas_show_memory ^ (const byte) main::toD0181_return#0^(const byte) main::toD0182_return#0
  [63] (volatile byte) canvas_show_flag ← (byte) 1
  [64] call clock 
  [65] (dword) clock::return#2 ← (dword) clock::return#0
  to:main::@21
main::@21: scope:[main]  from main::@11
  [66] (dword~) main::$18 ← (dword) clock::return#2
  [67] (dword) main::cyclecount#0 ← (dword~) main::$18 - (const nomodify dword) CLOCKS_PER_INIT
  [68] call gotoxy 
  to:main::@22
main::@22: scope:[main]  from main::@21
  [69] phi()
  [70] call cputs 
  to:main::@23
main::@23: scope:[main]  from main::@22
  [71] (byte) printf_uchar::uvalue#0 ← (byte) main::p0_idx#1
  [72] call printf_uchar 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [73] phi()
  [74] call cputs 
  to:main::@25
main::@25: scope:[main]  from main::@24
  [75] (dword) printf_ulong::uvalue#0 ← (dword) main::cyclecount#0
  [76] call printf_ulong 
  to:main::@26
main::@26: scope:[main]  from main::@25
  [77] (byte*) main::canvas#24 ← (byte*)(word) main::canvas#1
  to:main::@7
main::@2: scope:[main]  from main::@1
  [78] (byte) main::c#4 ← (byte) main::y#2
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@5
  [79] (byte) main::c#2 ← phi( main::@2/(byte) main::c#4 main::@5/(byte) main::c#1 )
  [79] (byte) main::x#2 ← phi( main::@2/(byte) 0 main::@5/(byte) main::x#1 )
  [80] if((byte) main::x#2<(byte) $10) goto main::@5
  to:main::@6
main::@6: scope:[main]  from main::@4
  [81] (byte*) main::cols#1 ← (byte*) main::cols#5 + (byte) $28
  [82] (byte*) main::screen#1 ← (byte*) main::screen#5 + (byte) $28
  [83] (byte) main::y#1 ← ++ (byte) main::y#2
  to:main::@1
main::@5: scope:[main]  from main::@4
  [84] *((byte*) main::cols#5 + (byte) main::x#2) ← (const nomodify byte) WHITE
  [85] *((byte*) main::screen#5 + (byte) main::x#2) ← (byte) main::c#2
  [86] (byte) main::c#1 ← (byte) main::c#2 + (byte) $10
  [87] (byte) main::x#1 ← ++ (byte) main::x#2
  to:main::@4

(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
printf_ulong: scope:[printf_ulong]  from main::@25
  [88] phi()
  to:printf_ulong::@1
printf_ulong::@1: scope:[printf_ulong]  from printf_ulong
  [89] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [90] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#0
  [91] call ultoa 
  to:printf_ulong::@2
printf_ulong::@2: scope:[printf_ulong]  from printf_ulong::@1
  [92] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [93] call printf_number_buffer 
  to:printf_ulong::@return
printf_ulong::@return: scope:[printf_ulong]  from printf_ulong::@2
  [94] return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@2 printf_ulong::@2
  [95] (byte) printf_number_buffer::format_upper_case#10 ← phi( printf_uchar::@2/(const byte) printf_uchar::format_upper_case#0 printf_ulong::@2/(const byte) printf_ulong::format_upper_case#0 )
  [95] (byte) printf_number_buffer::buffer_sign#10 ← phi( printf_uchar::@2/(byte) printf_number_buffer::buffer_sign#1 printf_ulong::@2/(byte) printf_number_buffer::buffer_sign#0 )
  [95] (byte) printf_number_buffer::format_zero_padding#10 ← phi( printf_uchar::@2/(const byte) printf_uchar::format_zero_padding#0 printf_ulong::@2/(const byte) printf_ulong::format_zero_padding#0 )
  [95] (byte) printf_number_buffer::format_justify_left#10 ← phi( printf_uchar::@2/(const byte) printf_uchar::format_justify_left#0 printf_ulong::@2/(const byte) printf_ulong::format_justify_left#0 )
  [95] (byte) printf_number_buffer::format_min_length#2 ← phi( printf_uchar::@2/(const byte) printf_uchar::format_min_length#0 printf_ulong::@2/(const byte) printf_ulong::format_min_length#0 )
  [96] if((byte) 0==(byte) printf_number_buffer::format_min_length#2) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  [97] phi()
  [98] call strlen 
  [99] (word) strlen::return#2 ← (word) strlen::len#2
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@6
  [100] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
  [101] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  [102] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [103] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@7
  [104] (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@14/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@7/(signed byte) printf_number_buffer::len#1 )
  [105] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#2 - (signed byte) printf_number_buffer::len#2
  [106] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21
  to:printf_number_buffer::@1
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [107] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@21
  [108] (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer/(signed byte) 0 printf_number_buffer::@21/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@13/(signed byte) 0 )
  [109] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [110] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@17
  [111] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8
  to:printf_number_buffer::@2
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@16
  [112] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10
  [113] call printf_padding 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16 printf_number_buffer::@17 printf_number_buffer::@8
  [114] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [115] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#10
  [116] call cputc 
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@9
  [117] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [118] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10
  to:printf_number_buffer::@4
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@18
  [119] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10
  [120] call printf_padding 
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@18 printf_number_buffer::@3
  [121] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [122] phi()
  [123] call strupr 
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@4
  [124] phi()
  [125] call cputs 
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [126] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@15
  [127] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@20
  [128] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  [129] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10
  [130] call printf_padding 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@15 printf_number_buffer::@19 printf_number_buffer::@20
  [131] return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  [132] (byte) printf_padding::pad#5 ← phi( printf_number_buffer::@10/(byte) '0' printf_number_buffer::@12/(byte) ' ' printf_number_buffer::@8/(byte) ' ' )
  [132] (byte) printf_padding::length#4 ← phi( printf_number_buffer::@10/(byte) printf_padding::length#1 printf_number_buffer::@12/(byte) printf_padding::length#2 printf_number_buffer::@8/(byte) printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [133] (byte) printf_padding::i#2 ← phi( printf_padding/(byte) 0 printf_padding::@3/(byte) printf_padding::i#1 )
  [134] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [135] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [136] (byte) cputc::c#1 ← (byte) printf_padding::pad#5
  [137] call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [138] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2
  to:printf_padding::@1

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@9 printf_padding::@2
  [139] (byte) cputc::c#3 ← phi( cputs::@2/(byte) cputc::c#0 printf_number_buffer::@9/(byte) cputc::c#2 printf_padding::@2/(byte) cputc::c#1 )
  [140] if((byte) cputc::c#3==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [141] *((byte*) conio_cursor_text) ← (byte) cputc::c#3
  [142] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text
  [143] *((byte*) conio_cursor_color) ← (byte) conio_textcolor
  [144] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color
  [145] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [146] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [147] (byte) conio_cursor_x ← (byte) 0
  [148] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [149] call cscroll 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [150] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [151] phi()
  [152] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1
  [153] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x
  [154] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0
  [155] (byte*) conio_cursor_text ← (byte*~) cputln::$1
  [156] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0
  [157] (byte*) conio_cursor_color ← (byte*~) cputln::$2
  [158] (byte) conio_cursor_x ← (byte) 0
  [159] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [160] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [161] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputc::@3 cputln
  [162] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [163] phi()
  [164] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [165] phi()
  [166] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [167] phi()
  [168] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [169] (byte) memset::c#1 ← (byte) conio_textcolor
  [170] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [171] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28
  [172] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
  [173] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28
  [174] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
  [175] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [176] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4 main main::@12 main::@13 main::@15
  [177] (byte) memset::c#8 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(byte) memset::c#1 main/(byte) ' ' main::@12/(byte) 0 main::@13/(const nomodify byte) BLACK main::@15/(byte) 0 )
  [177] (void*) memset::str#7 ← phi( cscroll::@3/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 cscroll::@4/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 main/(void*)(const nomodify byte*) CONSOLE main::@12/(void*)(const nomodify byte*) SCREEN main::@13/(void*)(const nomodify byte*) COLS main::@15/(void*)(const nomodify byte*) LINE_BUFFER )
  [177] (word) memset::num#6 ← phi( cscroll::@3/(byte) $28 cscroll::@4/(byte) $28 main/(word)(number) $28*(number) $19 main::@12/(word)(number) $28*(number) $19 main::@13/(word)(number) $28*(number) $19 main::@15/(word) $800 )
  [178] if((word) memset::num#6<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [179] (byte*) memset::end#0 ← (byte*)(void*) memset::str#7 + (word) memset::num#6
  [180] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#7
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [181] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [182] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [183] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [184] *((byte*) memset::dst#2) ← (byte) memset::c#8
  [185] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [186] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS )
  [186] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 )
  [187] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [188] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [189] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [190] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [190] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [191] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [192] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [193] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [194] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [195] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@22 main::@24 printf_number_buffer::@5
  [196] (to_nomodify byte*) cputs::s#5 ← phi( main::@22/(const byte*) main::s main::@24/(const byte*) main::s1 printf_number_buffer::@5/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [197] (to_nomodify byte*) cputs::s#4 ← phi( cputs/(to_nomodify byte*) cputs::s#5 cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [198] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#4)
  [199] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#4
  [200] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [201] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [202] (byte) cputc::c#0 ← (byte) cputs::c#1
  [203] call cputc 
  to:cputs::@1

(byte*()) strupr((byte*) strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  [204] phi()
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@3
  [205] (byte*) strupr::src#2 ← phi( strupr/(const byte*) strupr::str#0 strupr::@3/(byte*) strupr::src#1 )
  [206] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@1
  [207] return 
  to:@return
strupr::@2: scope:[strupr]  from strupr::@1
  [208] (byte) toupper::ch#0 ← *((byte*) strupr::src#2)
  [209] call toupper 
  [210] (byte) toupper::return#3 ← (byte) toupper::return#2
  to:strupr::@3
strupr::@3: scope:[strupr]  from strupr::@2
  [211] (byte~) strupr::$0 ← (byte) toupper::return#3
  [212] *((byte*) strupr::src#2) ← (byte~) strupr::$0
  [213] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2
  to:strupr::@1

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  [214] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [215] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [216] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [217] (byte) toupper::return#2 ← phi( toupper::@1/(byte) toupper::return#0 toupper/(byte) toupper::ch#0 toupper::@2/(byte) toupper::ch#0 )
  [218] return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  [219] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [220] (word) strlen::len#2 ← phi( strlen/(word) 0 strlen::@2/(word) strlen::len#1 )
  [220] (byte*) strlen::str#2 ← phi( strlen/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS strlen::@2/(byte*) strlen::str#0 )
  [221] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [222] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [223] (word) strlen::len#1 ← ++ (word) strlen::len#2
  [224] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2
  to:strlen::@1

(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
ultoa: scope:[ultoa]  from printf_ulong::@1
  [225] phi()
  to:ultoa::@1
ultoa::@1: scope:[ultoa]  from ultoa ultoa::@4
  [226] (byte*) ultoa::buffer#11 ← phi( ultoa::@4/(byte*) ultoa::buffer#14 ultoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [226] (byte) ultoa::started#2 ← phi( ultoa::@4/(byte) ultoa::started#4 ultoa/(byte) 0 )
  [226] (dword) ultoa::value#2 ← phi( ultoa::@4/(dword) ultoa::value#6 ultoa/(dword) ultoa::value#1 )
  [226] (byte) ultoa::digit#2 ← phi( ultoa::@4/(byte) ultoa::digit#1 ultoa/(byte) 0 )
  [227] if((byte) ultoa::digit#2<(const byte) ultoa::max_digits#1-(byte) 1) goto ultoa::@2
  to:ultoa::@3
ultoa::@3: scope:[ultoa]  from ultoa::@1
  [228] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2
  [229] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11)
  [230] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11
  [231] *((byte*) ultoa::buffer#3) ← (byte) 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@3
  [232] return 
  to:@return
ultoa::@2: scope:[ultoa]  from ultoa::@1
  [233] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2
  [234] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10)
  [235] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5
  to:ultoa::@7
ultoa::@7: scope:[ultoa]  from ultoa::@2
  [236] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5
  to:ultoa::@4
ultoa::@4: scope:[ultoa]  from ultoa::@6 ultoa::@7
  [237] (byte*) ultoa::buffer#14 ← phi( ultoa::@7/(byte*) ultoa::buffer#11 ultoa::@6/(byte*) ultoa::buffer#4 )
  [237] (byte) ultoa::started#4 ← phi( ultoa::@7/(byte) ultoa::started#2 ultoa::@6/(byte) 1 )
  [237] (dword) ultoa::value#6 ← phi( ultoa::@7/(dword) ultoa::value#2 ultoa::@6/(dword) ultoa::value#0 )
  [238] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2
  to:ultoa::@1
ultoa::@5: scope:[ultoa]  from ultoa::@2 ultoa::@7
  [239] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11
  [240] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2
  [241] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
  [242] call ultoa_append 
  [243] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
  to:ultoa::@6
ultoa::@6: scope:[ultoa]  from ultoa::@5
  [244] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
  [245] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11
  to:ultoa::@4

(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@5
  [246] phi()
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  [247] (byte) ultoa_append::digit#2 ← phi( ultoa_append/(byte) 0 ultoa_append::@2/(byte) ultoa_append::digit#1 )
  [247] (dword) ultoa_append::value#2 ← phi( ultoa_append/(dword) ultoa_append::value#0 ultoa_append::@2/(dword) ultoa_append::value#1 )
  [248] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  [249] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2)
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  [250] return 
  to:@return
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  [251] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2
  [252] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0
  to:ultoa_append::@1

(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from main::@23
  [253] phi()
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [254] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [255] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#0
  [256] call uctoa 
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [257] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [258] call printf_number_buffer 
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [259] return 
  to:@return

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@1
  [260] phi()
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [261] (byte*) uctoa::buffer#11 ← phi( uctoa::@4/(byte*) uctoa::buffer#14 uctoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [261] (byte) uctoa::started#2 ← phi( uctoa::@4/(byte) uctoa::started#4 uctoa/(byte) 0 )
  [261] (byte) uctoa::value#2 ← phi( uctoa::@4/(byte) uctoa::value#6 uctoa/(byte) uctoa::value#1 )
  [261] (byte) uctoa::digit#2 ← phi( uctoa::@4/(byte) uctoa::digit#1 uctoa/(byte) 0 )
  [262] if((byte) uctoa::digit#2<(const byte) uctoa::max_digits#2-(byte) 1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [263] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2)
  [264] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11
  [265] *((byte*) uctoa::buffer#3) ← (byte) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [266] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [267] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2)
  [268] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [269] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [270] (byte*) uctoa::buffer#14 ← phi( uctoa::@7/(byte*) uctoa::buffer#11 uctoa::@6/(byte*) uctoa::buffer#4 )
  [270] (byte) uctoa::started#4 ← phi( uctoa::@7/(byte) uctoa::started#2 uctoa::@6/(byte) 1 )
  [270] (byte) uctoa::value#6 ← phi( uctoa::@7/(byte) uctoa::value#2 uctoa::@6/(byte) uctoa::value#0 )
  [271] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [272] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
  [273] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
  [274] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
  [275] call uctoa_append 
  [276] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [277] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
  [278] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11
  to:uctoa::@4

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [279] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [280] (byte) uctoa_append::digit#2 ← phi( uctoa_append/(byte) 0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  [280] (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#0 uctoa_append::@2/(byte) uctoa_append::value#1 )
  [281] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [282] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2)
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [283] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [284] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  [285] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0
  to:uctoa_append::@1

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from main::@21
  [286] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy
  [287] (byte) conio_cursor_x ← (const byte) gotoxy::x#2
  [288] (byte) conio_cursor_y ← (const byte) gotoxy::y#2
  [289] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT+(const word) gotoxy::offset#0
  [290] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS+(const word) gotoxy::offset#0
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@1
  [291] return 
  to:@return

(dword()) clock()
clock: scope:[clock]  from main::@11
  [292] (dword) clock::return#0 ← (dword) $ffffffff - *((const nomodify dword*) CIA2_TIMER_AB)
  to:clock::@return
clock::@return: scope:[clock]  from clock
  [293] return 
  to:@return

(void()) eorfill((byte*) eorfill::line_buffer , (byte*) eorfill::canvas)
eorfill: scope:[eorfill]  from main::@10
  [294] phi()
  to:eorfill::@1
eorfill::@1: scope:[eorfill]  from eorfill eorfill::@5
  [295] (byte*) eorfill::fill_column#5 ← phi( eorfill/(byte*) eorfill::canvas#0 eorfill::@5/(byte*) eorfill::fill_column#1 )
  [295] (byte*) eorfill::line_column#2 ← phi( eorfill/(const nomodify byte*) LINE_BUFFER eorfill::@5/(byte*) eorfill::line_column#1 )
  [295] (byte) eorfill::x#2 ← phi( eorfill/(byte) 0 eorfill::@5/(byte) eorfill::x#1 )
  [296] if((byte) eorfill::x#2<(byte) $10) goto eorfill::@2
  to:eorfill::@return
eorfill::@return: scope:[eorfill]  from eorfill::@1
  [297] return 
  to:@return
eorfill::@2: scope:[eorfill]  from eorfill::@1
  [298] (byte) eorfill::eor#0 ← *((byte*) eorfill::line_column#2)
  to:eorfill::@3
eorfill::@3: scope:[eorfill]  from eorfill::@2 eorfill::@4
  [299] (byte) eorfill::eor#2 ← phi( eorfill::@2/(byte) eorfill::eor#0 eorfill::@4/(byte) eorfill::eor#1 )
  [299] (byte) eorfill::y#2 ← phi( eorfill::@2/(byte) 1 eorfill::@4/(byte) eorfill::y#1 )
  [300] if((byte) eorfill::y#2<(byte)(number) $10*(number) 8) goto eorfill::@4
  to:eorfill::@5
eorfill::@5: scope:[eorfill]  from eorfill::@3
  [301] (byte*) eorfill::line_column#1 ← (byte*) eorfill::line_column#2 + (byte)(number) $10*(number) 8
  [302] (byte*) eorfill::fill_column#1 ← (byte*) eorfill::fill_column#5 + (byte)(number) $10*(number) 8
  [303] (byte) eorfill::x#1 ← ++ (byte) eorfill::x#2
  to:eorfill::@1
eorfill::@4: scope:[eorfill]  from eorfill::@3
  [304] (byte) eorfill::eor#1 ← (byte) eorfill::eor#2 ^ *((byte*) eorfill::line_column#2 + (byte) eorfill::y#2)
  [305] *((byte*) eorfill::fill_column#5 + (byte) eorfill::y#2) ← (byte) eorfill::eor#1
  [306] (byte) eorfill::y#1 ← ++ (byte) eorfill::y#2
  to:eorfill::@3

(void()) line((byte*) line::canvas , (byte) line::x1 , (byte) line::y1 , (byte) line::x2 , (byte) line::y2)
line: scope:[line]  from main::@16 main::@17 main::@18
  [307] (byte) line::y2#10 ← phi( main::@16/(byte) line::y2#0 main::@17/(byte) line::y2#1 main::@18/(byte) line::y2#2 )
  [307] (byte) line::x2#11 ← phi( main::@16/(byte) line::x2#0 main::@17/(byte) line::x2#1 main::@18/(byte) line::x2#2 )
  [307] (byte) line::y#0 ← phi( main::@16/(byte) line::y1#0 main::@17/(byte) line::y1#1 main::@18/(byte) line::y1#2 )
  [307] (byte) line::x#0 ← phi( main::@16/(byte) line::x1#0 main::@17/(byte) line::x1#1 main::@18/(byte) line::x1#2 )
  [308] (byte) abs_u8::u#0 ← (byte) line::x2#11 - (byte) line::x#0
  [309] call abs_u8 
  [310] (byte) abs_u8::return#0 ← (byte) abs_u8::return#4
  to:line::@12
line::@12: scope:[line]  from line
  [311] (byte) line::dx#0 ← (byte) abs_u8::return#0
  [312] (byte) abs_u8::u#1 ← (byte) line::y2#10 - (byte) line::y#0
  [313] call abs_u8 
  [314] (byte) abs_u8::return#1 ← (byte) abs_u8::return#4
  to:line::@13
line::@13: scope:[line]  from line::@12
  [315] (byte) line::dy#0 ← (byte) abs_u8::return#1
  [316] (byte) sgn_u8::u#0 ← (byte) line::x2#11 - (byte) line::x#0
  [317] call sgn_u8 
  [318] (byte) sgn_u8::return#0 ← (byte) sgn_u8::return#4
  to:line::@14
line::@14: scope:[line]  from line::@13
  [319] (byte) line::sx#0 ← (byte) sgn_u8::return#0
  [320] (byte) sgn_u8::u#1 ← (byte) line::y2#10 - (byte) line::y#0
  [321] call sgn_u8 
  [322] (byte) sgn_u8::return#1 ← (byte) sgn_u8::return#4
  to:line::@15
line::@15: scope:[line]  from line::@14
  [323] (byte) line::sy#0 ← (byte) sgn_u8::return#1
  [324] if((byte) line::sx#0!=(byte) $ff) goto line::@1
  to:line::@3
line::@3: scope:[line]  from line::@15
  [325] (byte) line::y#1 ← ++ (byte) line::y#0
  [326] (byte) line::y2#3 ← ++ (byte) line::y2#10
  to:line::@1
line::@1: scope:[line]  from line::@15 line::@3
  [327] (byte) line::y2#13 ← phi( line::@15/(byte) line::y2#10 line::@3/(byte) line::y2#3 )
  [327] (byte) line::y#13 ← phi( line::@15/(byte) line::y#0 line::@3/(byte) line::y#1 )
  [328] if((byte) line::dx#0>(byte) line::dy#0) goto line::@2
  to:line::@4
line::@4: scope:[line]  from line::@1
  [329] (byte) line::e#0 ← (byte) line::dy#0 >> (byte) 1
  to:line::plot1
line::plot1: scope:[line]  from line::@4
  [330] (byte~) line::plot1_$0 ← (byte) line::x#0 >> (byte) 3
  [331] (byte~) line::plot1_$2 ← (byte~) line::plot1_$0 << (byte) 1
  [332] (byte*) line::plot1_column#0 ← *((const byte**) plot_column + (byte~) line::plot1_$2)
  [333] (byte~) line::plot1_$1 ← (byte) line::x#0 & (byte) 7
  [334] *((byte*) line::plot1_column#0 + (byte) line::y#13) ← *((byte*) line::plot1_column#0 + (byte) line::y#13) | *((const byte*) plot_bit + (byte~) line::plot1_$1)
  to:line::@5
line::@5: scope:[line]  from line::@6 line::plot1
  [335] (byte) line::x#10 ← phi( line::@6/(byte) line::x#16 line::plot1/(byte) line::x#0 )
  [335] (byte) line::e#3 ← phi( line::@6/(byte) line::e#5 line::plot1/(byte) line::e#0 )
  [335] (byte) line::y#6 ← phi( line::@6/(byte) line::y#15 line::plot1/(byte) line::y#13 )
  [336] (byte) line::y#15 ← (byte) line::y#6 + (byte) line::sy#0
  [337] (byte) line::e#1 ← (byte) line::e#3 + (byte) line::dx#0
  [338] if((byte) line::dy#0>=(byte) line::e#1) goto line::@6
  to:line::@7
line::@7: scope:[line]  from line::@5
  [339] (byte) line::plot2_x#0 ← (byte) line::x#10 + (byte) line::sx#0
  [340] (byte) line::e#2 ← (byte) line::e#1 - (byte) line::dy#0
  to:line::plot2
line::plot2: scope:[line]  from line::@7
  [341] (byte~) line::plot2_$0 ← (byte) line::plot2_x#0 >> (byte) 3
  [342] (byte~) line::plot2_$2 ← (byte~) line::plot2_$0 << (byte) 1
  [343] (byte*) line::plot2_column#0 ← *((const byte**) plot_column + (byte~) line::plot2_$2)
  [344] (byte~) line::plot2_$1 ← (byte) line::plot2_x#0 & (byte) 7
  [345] *((byte*) line::plot2_column#0 + (byte) line::y#15) ← *((byte*) line::plot2_column#0 + (byte) line::y#15) | *((const byte*) plot_bit + (byte~) line::plot2_$1)
  to:line::@6
line::@6: scope:[line]  from line::@5 line::plot2
  [346] (byte) line::x#16 ← phi( line::@5/(byte) line::x#10 line::plot2/(byte) line::plot2_x#0 )
  [346] (byte) line::e#5 ← phi( line::@5/(byte) line::e#1 line::plot2/(byte) line::e#2 )
  [347] if((byte) line::y#15!=(byte) line::y2#13) goto line::@5
  to:line::@return
line::@return: scope:[line]  from line::@6 line::plot4
  [348] return 
  to:@return
line::@2: scope:[line]  from line::@1
  [349] (byte) line::e1#0 ← (byte) line::dx#0 >> (byte) 1
  to:line::@8
line::@8: scope:[line]  from line::@2 line::@9
  [350] (byte) line::e1#3 ← phi( line::@2/(byte) line::e1#0 line::@9/(byte) line::e1#7 )
  [350] (byte) line::y#10 ← phi( line::@2/(byte) line::y#13 line::@9/(byte) line::y#11 )
  [350] (byte) line::x#12 ← phi( line::@2/(byte) line::x#0 line::@9/(byte) line::x#13 )
  to:line::plot3
line::plot3: scope:[line]  from line::@8
  [351] (byte~) line::plot3_$0 ← (byte) line::x#12 >> (byte) 3
  [352] (byte~) line::plot3_$2 ← (byte~) line::plot3_$0 << (byte) 1
  [353] (byte*) line::plot3_column#0 ← *((const byte**) plot_column + (byte~) line::plot3_$2)
  [354] (byte~) line::plot3_$1 ← (byte) line::x#12 & (byte) 7
  [355] *((byte*) line::plot3_column#0 + (byte) line::y#10) ← *((byte*) line::plot3_column#0 + (byte) line::y#10) | *((const byte*) plot_bit + (byte~) line::plot3_$1)
  to:line::@11
line::@11: scope:[line]  from line::plot3
  [356] (byte) line::x#13 ← (byte) line::x#12 + (byte) line::sx#0
  [357] (byte) line::e1#1 ← (byte) line::e1#3 + (byte) line::dy#0
  [358] if((byte) line::dx#0>=(byte) line::e1#1) goto line::@9
  to:line::@10
line::@10: scope:[line]  from line::@11
  [359] (byte) line::y#3 ← (byte) line::y#10 + (byte) line::sy#0
  [360] (byte) line::e1#2 ← (byte) line::e1#1 - (byte) line::dx#0
  to:line::@9
line::@9: scope:[line]  from line::@10 line::@11
  [361] (byte) line::e1#7 ← phi( line::@10/(byte) line::e1#2 line::@11/(byte) line::e1#1 )
  [361] (byte) line::y#11 ← phi( line::@10/(byte) line::y#3 line::@11/(byte) line::y#10 )
  [362] if((byte) line::x#13!=(byte) line::x2#11) goto line::@8
  to:line::plot4
line::plot4: scope:[line]  from line::@9
  [363] (byte~) line::plot4_$0 ← (byte) line::x#13 >> (byte) 3
  [364] (byte~) line::plot4_$2 ← (byte~) line::plot4_$0 << (byte) 1
  [365] (byte*) line::plot4_column#0 ← *((const byte**) plot_column + (byte~) line::plot4_$2)
  [366] (byte~) line::plot4_$1 ← (byte) line::x#13 & (byte) 7
  [367] *((byte*) line::plot4_column#0 + (byte) line::y#11) ← *((byte*) line::plot4_column#0 + (byte) line::y#11) | *((const byte*) plot_bit + (byte~) line::plot4_$1)
  to:line::@return

(byte()) sgn_u8((byte) sgn_u8::u)
sgn_u8: scope:[sgn_u8]  from line::@13 line::@14
  [368] (byte) sgn_u8::u#2 ← phi( line::@13/(byte) sgn_u8::u#0 line::@14/(byte) sgn_u8::u#1 )
  [369] (byte~) sgn_u8::$0 ← (byte) sgn_u8::u#2 & (byte) $80
  [370] if((byte) 0!=(byte~) sgn_u8::$0) goto sgn_u8::@1
  to:sgn_u8::@return
sgn_u8::@1: scope:[sgn_u8]  from sgn_u8
  [371] phi()
  to:sgn_u8::@return
sgn_u8::@return: scope:[sgn_u8]  from sgn_u8 sgn_u8::@1
  [372] (byte) sgn_u8::return#4 ← phi( sgn_u8::@1/(byte) -1 sgn_u8/(byte) 1 )
  [373] return 
  to:@return

(byte()) abs_u8((byte) abs_u8::u)
abs_u8: scope:[abs_u8]  from line line::@12
  [374] (byte) abs_u8::u#2 ← phi( line/(byte) abs_u8::u#0 line::@12/(byte) abs_u8::u#1 )
  [375] (byte~) abs_u8::$0 ← (byte) abs_u8::u#2 & (byte) $80
  [376] if((byte) 0!=(byte~) abs_u8::$0) goto abs_u8::@1
  to:abs_u8::@return
abs_u8::@1: scope:[abs_u8]  from abs_u8
  [377] (byte) abs_u8::return#2 ← - (byte) abs_u8::u#2
  to:abs_u8::@return
abs_u8::@return: scope:[abs_u8]  from abs_u8 abs_u8::@1
  [378] (byte) abs_u8::return#4 ← phi( abs_u8::@1/(byte) abs_u8::return#2 abs_u8/(byte) abs_u8::u#2 )
  [379] return 
  to:@return

(void()) clock_start()
clock_start: scope:[clock_start]  from main::@8
  [380] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (byte) 0
  [381] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [382] *((const nomodify dword*) CIA2_TIMER_AB) ← (dword) $ffffffff
  [383] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START|(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [384] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START
  to:clock_start::@return
clock_start::@return: scope:[clock_start]  from clock_start
  [385] return 
  to:@return

(byte()) textcolor((byte) textcolor::color)
textcolor: scope:[textcolor]  from main::@14
  [386] (byte) conio_textcolor ← (const nomodify byte) WHITE
  to:textcolor::@return
textcolor::@return: scope:[textcolor]  from textcolor
  [387] return 
  to:@return

(void()) setup_irq()
setup_irq: scope:[setup_irq]  from main::@3
  asm { sei  }
  [389] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR
  [390] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (byte) $7f
  [391] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(byte) 8
  [392] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER
  [393] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1()
  asm { cli  }
  to:setup_irq::@return
setup_irq::@return: scope:[setup_irq]  from setup_irq
  [395] return 
  to:@return

interrupt(KERNEL_KEYBOARD)(void()) irq_bottom_2()
irq_bottom_2: scope:[irq_bottom_2]  from
  [396] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK
  [397] call kbhit 
  [398] (byte) kbhit::return#2 ← (byte) kbhit::return#0
  to:irq_bottom_2::@3
irq_bottom_2::@3: scope:[irq_bottom_2]  from irq_bottom_2
  [399] (byte~) irq_bottom_2::$0 ← (byte) kbhit::return#2
  [400] if((byte) 0!=(byte~) irq_bottom_2::$0) goto irq_bottom_2::@1
  to:irq_bottom_2::@2
irq_bottom_2::@2: scope:[irq_bottom_2]  from irq_bottom_2::@3
  [401] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (volatile byte) canvas_show_memory
  to:irq_bottom_2::@1
irq_bottom_2::@1: scope:[irq_bottom_2]  from irq_bottom_2::@2 irq_bottom_2::@3
  [402] (volatile byte) canvas_show_flag ← (byte) 0
  [403] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  [404] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(byte) 8
  [405] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1()
  to:irq_bottom_2::@return
irq_bottom_2::@return: scope:[irq_bottom_2]  from irq_bottom_2::@1
  [406] return 
  to:@return

(byte()) kbhit()
kbhit: scope:[kbhit]  from irq_bottom_2
  [407] *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (byte) 0
  [408] (byte) kbhit::return#0 ← ~ *((const nomodify byte*) CONIO_CIA1_PORT_B)
  to:kbhit::@return
kbhit::@return: scope:[kbhit]  from kbhit
  [409] return 
  to:@return

interrupt(KERNEL_MIN)(void()) irq_bottom_1()
irq_bottom_1: scope:[irq_bottom_1]  from
  [410] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) WHITE
  to:irq_bottom_1::toD0181
irq_bottom_1::toD0181: scope:[irq_bottom_1]  from irq_bottom_1
  [411] phi()
  to:irq_bottom_1::@1
irq_bottom_1::@1: scope:[irq_bottom_1]  from irq_bottom_1::toD0181
  [412] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (const byte) irq_bottom_1::toD0181_return#0
  [413] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER
  [414] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM
  [415] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_KEYBOARD)(void()) irq_bottom_2()
  to:irq_bottom_1::@return
irq_bottom_1::@return: scope:[irq_bottom_1]  from irq_bottom_1::@1
  [416] return 
  to:@return

null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope cputc
null depth in calling loop Loop head: cputs::@1 tails: cputs::@2 blocks: cputs::@2 cputs::@1  in scope cputc
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope cputc
null depth in calling loop Loop head: cputs::@1 tails: cputs::@2 blocks: cputs::@2 cputs::@1  in scope cputc
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope cputc
null depth in calling loop Loop head: cputs::@1 tails: cputs::@2 blocks: cputs::@2 cputs::@1  in scope cputc
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope cputc
null depth in calling loop Loop head: cputs::@1 tails: cputs::@2 blocks: cputs::@2 cputs::@1  in scope cputc
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope cputc
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope cputc
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope cputc
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope cputc

VARIABLE REGISTER WEIGHTS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(byte()) abs_u8((byte) abs_u8::u)
(byte~) abs_u8::$0 20002.0
(byte) abs_u8::return
(byte) abs_u8::return#0 2002.0
(byte) abs_u8::return#1 2002.0
(byte) abs_u8::return#2 20002.0
(byte) abs_u8::return#4 5501.0
(byte) abs_u8::u
(byte) abs_u8::u#0 2002.0
(byte) abs_u8::u#1 2002.0
(byte) abs_u8::u#2 10668.333333333332
(volatile byte) canvas_show_flag loadstore 15.577464788732396
(volatile byte) canvas_show_memory loadstore 2.452380952380952
(dword()) clock()
(dword) clock::return
(dword) clock::return#0 367.33333333333337
(dword) clock::return#2 202.0
(void()) clock_start()
(byte*) conio_cursor_color loadstore 2.027272819090909E8
(byte*) conio_cursor_text loadstore 2.0090091E8
(byte) conio_cursor_x loadstore 2.5263168515789475E7
(byte) conio_cursor_y loadstore 2.824561492105263E8
(byte) conio_textcolor loadstore 6.312500065625E7
(void()) cputc((byte) cputc::c)
(byte) cputc::c
(byte) cputc::c#0 2.0000002E7
(byte) cputc::c#1 2.0000002E7
(byte) cputc::c#2 20002.0
(byte) cputc::c#3 1.100050025E8
(void()) cputln()
(byte*~) cputln::$1 2.000000002E9
(byte*~) cputln::$2 2.000000002E9
(word) cputln::ln_offset
(word) cputln::ln_offset#0 1.000000001E9
(void()) cputs((to_nomodify byte*) cputs::s)
(byte) cputs::c
(byte) cputs::c#1 1.0000001E7
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 5000000.5
(to_nomodify byte*) cputs::s#4 1.5050002E7
(to_nomodify byte*) cputs::s#5 100001.0
(void()) cscroll()
(byte*~) cscroll::$7 2.0000000002E10
(byte*~) cscroll::$8 2.0000000002E10
(void()) eorfill((byte*) eorfill::line_buffer , (byte*) eorfill::canvas)
(byte*) eorfill::canvas
(byte*) eorfill::canvas#0 551.0
(byte) eorfill::eor
(byte) eorfill::eor#0 200002.0
(byte) eorfill::eor#1 1000001.0
(byte) eorfill::eor#2 1050001.5
(byte*) eorfill::fill_column
(byte*) eorfill::fill_column#1 100001.0
(byte*) eorfill::fill_column#5 133444.88888888888
(byte*) eorfill::line_buffer
(byte*) eorfill::line_column
(byte*) eorfill::line_column#1 66667.33333333333
(byte*) eorfill::line_column#2 162500.5
(byte) eorfill::x
(byte) eorfill::x#1 200002.0
(byte) eorfill::x#2 30000.300000000003
(byte) eorfill::y
(byte) eorfill::y#1 2000002.0
(byte) eorfill::y#2 1250001.25
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(word) gotoxy::offset
(byte) gotoxy::x
(byte) gotoxy::y
interrupt(KERNEL_MIN)(void()) irq_bottom_1()
(byte*) irq_bottom_1::toD0181_gfx
(byte) irq_bottom_1::toD0181_return
(byte*) irq_bottom_1::toD0181_screen
interrupt(KERNEL_KEYBOARD)(void()) irq_bottom_2()
(byte~) irq_bottom_2::$0 4.0
(byte()) kbhit()
(byte) kbhit::return
(byte) kbhit::return#0 4.333333333333333
(byte) kbhit::return#2 4.0
(void()) line((byte*) line::canvas , (byte) line::x1 , (byte) line::y1 , (byte) line::x2 , (byte) line::y2)
(byte*) line::canvas
(byte) line::dx
(byte) line::dx#0 5941.294117647059
(byte) line::dy
(byte) line::dy#0 6446.936170212766
(byte) line::e
(byte) line::e#0 333.6666666666667
(byte) line::e#1 133334.66666666666
(byte) line::e#2 33333.666666666664
(byte) line::e#3 100501.5
(byte) line::e#5 150001.5
(byte) line::e1
(byte) line::e1#0 2002.0
(byte) line::e1#1 133334.66666666666
(byte) line::e1#2 200002.0
(byte) line::e1#3 28714.714285714286
(byte) line::e1#7 150001.5
(byte~) line::plot1_$0 2002.0
(byte~) line::plot1_$1 2002.0
(byte~) line::plot1_$2 2002.0
(byte*) line::plot1_column
(byte*) line::plot1_column#0 1501.5
(byte) line::plot1_x
(byte) line::plot1_y
(byte~) line::plot2_$0 200002.0
(byte~) line::plot2_$1 200002.0
(byte~) line::plot2_$2 200002.0
(byte*) line::plot2_column
(byte*) line::plot2_column#0 150001.5
(byte) line::plot2_x
(byte) line::plot2_x#0 57143.42857142857
(byte) line::plot2_y
(byte~) line::plot3_$0 200002.0
(byte~) line::plot3_$1 200002.0
(byte~) line::plot3_$2 200002.0
(byte*) line::plot3_column
(byte*) line::plot3_column#0 150001.5
(byte) line::plot3_x
(byte) line::plot3_y
(byte~) line::plot4_$0 2002.0
(byte~) line::plot4_$1 2002.0
(byte~) line::plot4_$2 2002.0
(byte*) line::plot4_column
(byte*) line::plot4_column#0 1501.5
(byte) line::plot4_x
(byte) line::plot4_y
(byte) line::sx
(byte) line::sx#0 4697.767441860465
(byte) line::sy
(byte) line::sy#0 5153.923076923076
(byte) line::x
(byte) line::x#0 217.55172413793105
(byte) line::x#10 75251.0
(byte) line::x#12 66834.16666666666
(byte) line::x#13 30200.5
(byte) line::x#16 150001.5
(byte) line::x1
(byte) line::x1#0 50.5
(byte) line::x1#1 50.5
(byte) line::x1#2 50.5
(byte) line::x2
(byte) line::x2#0 101.0
(byte) line::x2#1 101.0
(byte) line::x2#11 2841.8333333333335
(byte) line::x2#2 101.0
(byte) line::y
(byte) line::y#0 239.27777777777777
(byte) line::y#1 1001.0
(byte) line::y#10 55667.33333333333
(byte) line::y#11 50334.16666666667
(byte) line::y#13 667.3333333333333
(byte) line::y#15 41667.08333333333
(byte) line::y#3 100001.0
(byte) line::y#6 201003.0
(byte) line::y1
(byte) line::y1#0 67.33333333333333
(byte) line::y1#1 67.33333333333333
(byte) line::y1#2 67.33333333333333
(byte) line::y2
(byte) line::y2#0 202.0
(byte) line::y2#1 202.0
(byte) line::y2#10 226.68421052631578
(byte) line::y2#13 4857.285714285714
(byte) line::y2#2 202.0
(byte) line::y2#3 2002.0
(void()) main()
(dword~) main::$18 202.0
(byte) main::c
(byte) main::c#1 1001.0
(byte) main::c#2 776.0
(byte) main::c#4 202.0
(byte*) main::canvas
(word) main::canvas#1 5.611111111111111
(byte*) main::canvas#10 8.911764705882353
(byte*) main::canvas#24 202.0
(byte*) main::cols
(byte*) main::cols#1 67.33333333333333
(byte*) main::cols#5 133.66666666666669
(dword) main::cyclecount
(dword) main::cyclecount#0 25.25
(byte) main::p0_idx
(byte) main::p0_idx#1 11.222222222222223
(byte) main::p0_idx#11 15.538461538461538
(byte) main::p1_idx
(byte) main::p1_idx#1 7.769230769230769
(byte) main::p1_idx#2 14.962962962962964
(byte) main::p2_idx
(byte) main::p2_idx#1 8.08
(byte) main::p2_idx#2 14.428571428571429
(byte*) main::screen
(byte*) main::screen#1 101.0
(byte*) main::screen#5 120.3
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(byte*) main::toD0181_screen
(byte*) main::toD0182_gfx
(byte) main::toD0182_return
(byte*) main::toD0182_screen
(byte) main::x
(byte) main::x#1 2002.0
(byte) main::x#2 1001.0
(byte) main::x0
(byte) main::x0#0 16.833333333333332
(byte) main::x1
(byte) main::x1#0 33.666666666666664
(byte) main::x2
(byte) main::x2#0 43.285714285714285
(byte) main::y
(byte) main::y#1 202.0
(byte) main::y#2 36.72727272727273
(byte) main::y0
(byte) main::y0#0 16.833333333333332
(byte) main::y1
(byte) main::y1#0 33.666666666666664
(byte) main::y2
(byte) main::y2#0 43.285714285714285
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(void*) memcpy::destination
(void*) memcpy::destination#2
(byte*) memcpy::dst
(byte*) memcpy::dst#1 1.00000000000001E14
(byte*) memcpy::dst#2 1.0003333333333467E14
(byte*) memcpy::dst#4 2.00000000002E11
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(void*) memcpy::source#2
(byte*) memcpy::src
(byte*) memcpy::src#1 2.00000000000002E14
(byte*) memcpy::src#2 1.0002500000000125E14
(byte*) memcpy::src#4 1.00000000001E11
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0 1.251250000000025E13
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte) memset::c#1 2.0000000002E10
(byte) memset::c#8 1.25125000000025E12
(byte*) memset::dst
(byte*) memset::dst#1 2.0000000000002E13
(byte*) memset::dst#2 1.3366666666668332E13
(byte*) memset::dst#4 2.00000000002E11
(byte*) memset::end
(byte*) memset::end#0 1.6833333333336665E12
(word) memset::num
(word) memset::num#6 1.00000000001E11
(void*) memset::return
(void*) memset::str
(void*) memset::str#7
(struct printf_buffer_number) printf_buffer loadstore = {}
(byte) printf_buffer_number::sign
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(word~) printf_number_buffer::$19 10001.0
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0 2002.0
(byte) printf_number_buffer::buffer_sign#1 2002.0
(byte) printf_number_buffer::buffer_sign#10 1600.25
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_justify_left#10 645.2258064516129
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_min_length#2 1000.1
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_upper_case#10 384.65384615384613
(byte) printf_number_buffer::format_zero_padding
(byte) printf_number_buffer::format_zero_padding#10 937.59375
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::len#0 15001.5
(signed byte) printf_number_buffer::len#1 20002.0
(signed byte) printf_number_buffer::len#2 30003.0
(signed byte) printf_number_buffer::padding
(signed byte) printf_number_buffer::padding#1 10001.0
(signed byte) printf_number_buffer::padding#10 1904.952380952381
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(byte) printf_padding::i
(byte) printf_padding::i#1 2.0000002E7
(byte) printf_padding::i#2 7500000.75
(byte) printf_padding::length
(byte) printf_padding::length#0 20002.0
(byte) printf_padding::length#1 20002.0
(byte) printf_padding::length#2 20002.0
(byte) printf_padding::length#4 1671667.3333333333
(byte) printf_padding::pad
(byte) printf_padding::pad#5 1666666.8333333333
(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
(struct printf_format_number) printf_uchar::format
(byte) printf_uchar::format_justify_left
(byte) printf_uchar::format_min_length
(byte) printf_uchar::format_radix
(byte) printf_uchar::format_sign_always
(byte) printf_uchar::format_upper_case
(byte) printf_uchar::format_zero_padding
(byte) printf_uchar::uvalue
(byte) printf_uchar::uvalue#0 367.33333333333337
(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
(struct printf_format_number) printf_ulong::format
(byte) printf_ulong::format_justify_left
(byte) printf_ulong::format_min_length
(byte) printf_ulong::format_radix
(byte) printf_ulong::format_sign_always
(byte) printf_ulong::format_upper_case
(byte) printf_ulong::format_zero_padding
(dword) printf_ulong::uvalue
(dword) printf_ulong::uvalue#0 367.33333333333337
(void()) setup_irq()
(byte()) sgn_u8((byte) sgn_u8::u)
(byte~) sgn_u8::$0 20002.0
(byte) sgn_u8::return
(byte) sgn_u8::return#0 2002.0
(byte) sgn_u8::return#1 2002.0
(byte) sgn_u8::return#4 500.5
(byte) sgn_u8::u
(byte) sgn_u8::u#0 2002.0
(byte) sgn_u8::u#1 2002.0
(byte) sgn_u8::u#2 12003.0
(word()) strlen((byte*) strlen::str)
(word) strlen::len
(word) strlen::len#1 1.0000001E7
(word) strlen::len#2 5002500.75
(word) strlen::return
(word) strlen::return#2 20002.0
(byte*) strlen::str
(byte*) strlen::str#0 2.0000002E7
(byte*) strlen::str#2 1.0000001E7
(byte*()) strupr((byte*) strupr::str)
(byte~) strupr::$0 2.0000002E7
(byte*) strupr::return
(byte*) strupr::src
(byte*) strupr::src#1 2.0000002E7
(byte*) strupr::src#2 7142857.857142856
(byte*) strupr::str
(byte()) textcolor((byte) textcolor::color)
(byte) textcolor::color
(byte) textcolor::old
(byte) textcolor::return
(byte*) toD0181_gfx
(byte) toD0181_return
(byte*) toD0181_screen
(byte()) toupper((byte) toupper::ch)
(byte) toupper::ch
(byte) toupper::ch#0 1.70000002E8
(byte) toupper::return
(byte) toupper::return#0 2.00000002E8
(byte) toupper::return#2 1.0333333466666667E8
(byte) toupper::return#3 2.0000002E7
(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
(byte*) uctoa::buffer
(byte*) uctoa::buffer#11 335000.50000000006
(byte*) uctoa::buffer#14 1500001.5
(byte*) uctoa::buffer#3 20002.0
(byte*) uctoa::buffer#4 2000002.0
(byte) uctoa::digit
(byte) uctoa::digit#1 2000002.0
(byte) uctoa::digit#2 307692.6153846154
(byte) uctoa::digit_value
(byte) uctoa::digit_value#0 600000.6000000001
(byte*) uctoa::digit_values
(byte) uctoa::max_digits
(byte) uctoa::radix
(byte) uctoa::started
(byte) uctoa::started#2 600000.6000000001
(byte) uctoa::started#4 1000001.0
(byte) uctoa::value
(byte) uctoa::value#0 1000001.0
(byte) uctoa::value#1 5501.0
(byte) uctoa::value#2 670001.0000000001
(byte) uctoa::value#6 1500001.5
(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
(byte*) uctoa_append::buffer
(byte*) uctoa_append::buffer#0 1375000.25
(byte) uctoa_append::digit
(byte) uctoa_append::digit#1 1.0000000001E10
(byte) uctoa_append::digit#2 1.00050000015E10
(byte) uctoa_append::return
(byte) uctoa_append::return#0 2000002.0
(byte) uctoa_append::sub
(byte) uctoa_append::sub#0 3.3335000005E9
(byte) uctoa_append::value
(byte) uctoa_append::value#0 3666667.333333333
(byte) uctoa_append::value#1 2.0000000002E10
(byte) uctoa_append::value#2 5.001833334166666E9
(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
(byte~) ultoa::$10 2000002.0
(byte~) ultoa::$11 20002.0
(byte*) ultoa::buffer
(byte*) ultoa::buffer#11 287143.2857142857
(byte*) ultoa::buffer#14 1500001.5
(byte*) ultoa::buffer#3 20002.0
(byte*) ultoa::buffer#4 2000002.0
(byte) ultoa::digit
(byte) ultoa::digit#1 2000002.0
(byte) ultoa::digit#2 285714.5714285714
(dword) ultoa::digit_value
(dword) ultoa::digit_value#0 600000.6000000001
(dword*) ultoa::digit_values
(byte) ultoa::max_digits
(byte) ultoa::radix
(byte) ultoa::started
(byte) ultoa::started#2 500000.5
(byte) ultoa::started#4 1000001.0
(dword) ultoa::value
(dword) ultoa::value#0 1000001.0
(dword) ultoa::value#1 5501.0
(dword) ultoa::value#2 572857.857142857
(dword) ultoa::value#6 1500001.5
(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
(byte*) ultoa_append::buffer
(byte*) ultoa_append::buffer#0 1375000.25
(byte) ultoa_append::digit
(byte) ultoa_append::digit#1 1.0000000001E10
(byte) ultoa_append::digit#2 1.00050000015E10
(dword) ultoa_append::return
(dword) ultoa_append::return#0 2000002.0
(dword) ultoa_append::sub
(dword) ultoa_append::sub#0 3.3335000005E9
(dword) ultoa_append::value
(dword) ultoa_append::value#0 3666667.333333333
(dword) ultoa_append::value#1 2.0000000002E10
(dword) ultoa_append::value#2 5.001833334166666E9

Initial phi equivalence classes
[ main::y#2 main::y#1 ]
[ main::cols#5 main::cols#1 ]
[ main::screen#5 main::screen#1 ]
[ main::p0_idx#11 main::p0_idx#1 ]
[ main::p1_idx#2 main::p1_idx#1 ]
[ main::p2_idx#2 main::p2_idx#1 ]
[ main::canvas#10 main::canvas#24 ]
[ main::x#2 main::x#1 ]
[ main::c#2 main::c#4 main::c#1 ]
[ printf_number_buffer::format_min_length#2 ]
[ printf_number_buffer::format_justify_left#10 ]
[ printf_number_buffer::format_zero_padding#10 ]
[ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
[ printf_number_buffer::format_upper_case#10 ]
[ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
[ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
[ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
[ printf_padding::pad#5 ]
[ printf_padding::i#2 printf_padding::i#1 ]
[ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ]
[ memset::num#6 ]
[ memset::str#7 ]
[ memset::c#8 memset::c#1 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ cputs::s#4 cputs::s#5 cputs::s#0 ]
[ strupr::src#2 strupr::src#1 ]
[ toupper::return#2 toupper::return#0 toupper::ch#0 ]
[ strlen::str#2 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
[ ultoa::digit#2 ultoa::digit#1 ]
[ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ]
[ ultoa::started#2 ultoa::started#4 ]
[ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ]
[ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ]
[ ultoa_append::digit#2 ultoa_append::digit#1 ]
[ uctoa::digit#2 uctoa::digit#1 ]
[ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
[ uctoa::started#2 uctoa::started#4 ]
[ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
[ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
[ uctoa_append::digit#2 uctoa_append::digit#1 ]
[ eorfill::x#2 eorfill::x#1 ]
[ eorfill::line_column#2 eorfill::line_column#1 ]
[ eorfill::fill_column#5 eorfill::canvas#0 eorfill::fill_column#1 ]
[ eorfill::y#2 eorfill::y#1 ]
[ eorfill::eor#2 eorfill::eor#0 eorfill::eor#1 ]
[ line::x2#11 line::x2#0 line::x2#1 line::x2#2 ]
[ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ]
[ line::e#3 line::e#5 line::e#0 line::e#1 line::e#2 ]
[ line::x#12 line::x#10 line::x#16 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::plot2_x#0 line::x#13 ]
[ line::y#10 line::y#6 line::y#15 line::y#13 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#11 line::y#3 ]
[ line::e1#3 line::e1#0 line::e1#7 line::e1#2 line::e1#1 ]
[ sgn_u8::u#2 sgn_u8::u#0 sgn_u8::u#1 ]
[ sgn_u8::return#4 ]
[ abs_u8::return#4 abs_u8::return#2 abs_u8::u#2 abs_u8::u#0 abs_u8::u#1 ]
Added variable conio_cursor_x to live range equivalence class [ conio_cursor_x ]
Added variable conio_cursor_y to live range equivalence class [ conio_cursor_y ]
Added variable conio_cursor_text to live range equivalence class [ conio_cursor_text ]
Added variable conio_cursor_color to live range equivalence class [ conio_cursor_color ]
Added variable conio_textcolor to live range equivalence class [ conio_textcolor ]
Added variable canvas_show_memory to live range equivalence class [ canvas_show_memory ]
Added variable canvas_show_flag to live range equivalence class [ canvas_show_flag ]
Added variable main::x0#0 to live range equivalence class [ main::x0#0 ]
Added variable main::y0#0 to live range equivalence class [ main::y0#0 ]
Added variable main::x1#0 to live range equivalence class [ main::x1#0 ]
Added variable main::y1#0 to live range equivalence class [ main::y1#0 ]
Added variable main::x2#0 to live range equivalence class [ main::x2#0 ]
Added variable main::y2#0 to live range equivalence class [ main::y2#0 ]
Added variable main::canvas#1 to live range equivalence class [ main::canvas#1 ]
Added variable clock::return#2 to live range equivalence class [ clock::return#2 ]
Added variable main::$18 to live range equivalence class [ main::$18 ]
Added variable main::cyclecount#0 to live range equivalence class [ main::cyclecount#0 ]
Added variable printf_uchar::uvalue#0 to live range equivalence class [ printf_uchar::uvalue#0 ]
Added variable printf_ulong::uvalue#0 to live range equivalence class [ printf_ulong::uvalue#0 ]
Added variable strlen::return#2 to live range equivalence class [ strlen::return#2 ]
Added variable printf_number_buffer::$19 to live range equivalence class [ printf_number_buffer::$19 ]
Added variable cputln::ln_offset#0 to live range equivalence class [ cputln::ln_offset#0 ]
Added variable cputln::$1 to live range equivalence class [ cputln::$1 ]
Added variable cputln::$2 to live range equivalence class [ cputln::$2 ]
Added variable cscroll::$7 to live range equivalence class [ cscroll::$7 ]
Added variable cscroll::$8 to live range equivalence class [ cscroll::$8 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable memcpy::src_end#0 to live range equivalence class [ memcpy::src_end#0 ]
Added variable cputs::c#1 to live range equivalence class [ cputs::c#1 ]
Added variable toupper::return#3 to live range equivalence class [ toupper::return#3 ]
Added variable strupr::$0 to live range equivalence class [ strupr::$0 ]
Added variable ultoa::$11 to live range equivalence class [ ultoa::$11 ]
Added variable ultoa::buffer#3 to live range equivalence class [ ultoa::buffer#3 ]
Added variable ultoa::$10 to live range equivalence class [ ultoa::$10 ]
Added variable ultoa::digit_value#0 to live range equivalence class [ ultoa::digit_value#0 ]
Added variable ultoa_append::buffer#0 to live range equivalence class [ ultoa_append::buffer#0 ]
Added variable ultoa_append::sub#0 to live range equivalence class [ ultoa_append::sub#0 ]
Added variable ultoa_append::return#0 to live range equivalence class [ ultoa_append::return#0 ]
Added variable uctoa::buffer#3 to live range equivalence class [ uctoa::buffer#3 ]
Added variable uctoa::digit_value#0 to live range equivalence class [ uctoa::digit_value#0 ]
Added variable uctoa_append::buffer#0 to live range equivalence class [ uctoa_append::buffer#0 ]
Added variable uctoa_append::sub#0 to live range equivalence class [ uctoa_append::sub#0 ]
Added variable uctoa_append::return#0 to live range equivalence class [ uctoa_append::return#0 ]
Added variable clock::return#0 to live range equivalence class [ clock::return#0 ]
Added variable abs_u8::return#0 to live range equivalence class [ abs_u8::return#0 ]
Added variable line::dx#0 to live range equivalence class [ line::dx#0 ]
Added variable abs_u8::return#1 to live range equivalence class [ abs_u8::return#1 ]
Added variable line::dy#0 to live range equivalence class [ line::dy#0 ]
Added variable sgn_u8::return#0 to live range equivalence class [ sgn_u8::return#0 ]
Added variable line::sx#0 to live range equivalence class [ line::sx#0 ]
Added variable sgn_u8::return#1 to live range equivalence class [ sgn_u8::return#1 ]
Added variable line::sy#0 to live range equivalence class [ line::sy#0 ]
Added variable line::plot1_$0 to live range equivalence class [ line::plot1_$0 ]
Added variable line::plot1_$2 to live range equivalence class [ line::plot1_$2 ]
Added variable line::plot1_column#0 to live range equivalence class [ line::plot1_column#0 ]
Added variable line::plot1_$1 to live range equivalence class [ line::plot1_$1 ]
Added variable line::plot2_$0 to live range equivalence class [ line::plot2_$0 ]
Added variable line::plot2_$2 to live range equivalence class [ line::plot2_$2 ]
Added variable line::plot2_column#0 to live range equivalence class [ line::plot2_column#0 ]
Added variable line::plot2_$1 to live range equivalence class [ line::plot2_$1 ]
Added variable line::plot3_$0 to live range equivalence class [ line::plot3_$0 ]
Added variable line::plot3_$2 to live range equivalence class [ line::plot3_$2 ]
Added variable line::plot3_column#0 to live range equivalence class [ line::plot3_column#0 ]
Added variable line::plot3_$1 to live range equivalence class [ line::plot3_$1 ]
Added variable line::plot4_$0 to live range equivalence class [ line::plot4_$0 ]
Added variable line::plot4_$2 to live range equivalence class [ line::plot4_$2 ]
Added variable line::plot4_column#0 to live range equivalence class [ line::plot4_column#0 ]
Added variable line::plot4_$1 to live range equivalence class [ line::plot4_$1 ]
Added variable sgn_u8::$0 to live range equivalence class [ sgn_u8::$0 ]
Added variable abs_u8::$0 to live range equivalence class [ abs_u8::$0 ]
Added variable kbhit::return#2 to live range equivalence class [ kbhit::return#2 ]
Added variable irq_bottom_2::$0 to live range equivalence class [ irq_bottom_2::$0 ]
Added variable kbhit::return#0 to live range equivalence class [ kbhit::return#0 ]
Added variable printf_buffer to live range equivalence class [ printf_buffer ]
Complete equivalence classes
[ main::y#2 main::y#1 ]
[ main::cols#5 main::cols#1 ]
[ main::screen#5 main::screen#1 ]
[ main::p0_idx#11 main::p0_idx#1 ]
[ main::p1_idx#2 main::p1_idx#1 ]
[ main::p2_idx#2 main::p2_idx#1 ]
[ main::canvas#10 main::canvas#24 ]
[ main::x#2 main::x#1 ]
[ main::c#2 main::c#4 main::c#1 ]
[ printf_number_buffer::format_min_length#2 ]
[ printf_number_buffer::format_justify_left#10 ]
[ printf_number_buffer::format_zero_padding#10 ]
[ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
[ printf_number_buffer::format_upper_case#10 ]
[ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
[ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
[ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
[ printf_padding::pad#5 ]
[ printf_padding::i#2 printf_padding::i#1 ]
[ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ]
[ memset::num#6 ]
[ memset::str#7 ]
[ memset::c#8 memset::c#1 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ cputs::s#4 cputs::s#5 cputs::s#0 ]
[ strupr::src#2 strupr::src#1 ]
[ toupper::return#2 toupper::return#0 toupper::ch#0 ]
[ strlen::str#2 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
[ ultoa::digit#2 ultoa::digit#1 ]
[ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ]
[ ultoa::started#2 ultoa::started#4 ]
[ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ]
[ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ]
[ ultoa_append::digit#2 ultoa_append::digit#1 ]
[ uctoa::digit#2 uctoa::digit#1 ]
[ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
[ uctoa::started#2 uctoa::started#4 ]
[ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
[ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
[ uctoa_append::digit#2 uctoa_append::digit#1 ]
[ eorfill::x#2 eorfill::x#1 ]
[ eorfill::line_column#2 eorfill::line_column#1 ]
[ eorfill::fill_column#5 eorfill::canvas#0 eorfill::fill_column#1 ]
[ eorfill::y#2 eorfill::y#1 ]
[ eorfill::eor#2 eorfill::eor#0 eorfill::eor#1 ]
[ line::x2#11 line::x2#0 line::x2#1 line::x2#2 ]
[ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ]
[ line::e#3 line::e#5 line::e#0 line::e#1 line::e#2 ]
[ line::x#12 line::x#10 line::x#16 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::plot2_x#0 line::x#13 ]
[ line::y#10 line::y#6 line::y#15 line::y#13 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#11 line::y#3 ]
[ line::e1#3 line::e1#0 line::e1#7 line::e1#2 line::e1#1 ]
[ sgn_u8::u#2 sgn_u8::u#0 sgn_u8::u#1 ]
[ sgn_u8::return#4 ]
[ abs_u8::return#4 abs_u8::return#2 abs_u8::u#2 abs_u8::u#0 abs_u8::u#1 ]
[ conio_cursor_x ]
[ conio_cursor_y ]
[ conio_cursor_text ]
[ conio_cursor_color ]
[ conio_textcolor ]
[ canvas_show_memory ]
[ canvas_show_flag ]
[ main::x0#0 ]
[ main::y0#0 ]
[ main::x1#0 ]
[ main::y1#0 ]
[ main::x2#0 ]
[ main::y2#0 ]
[ main::canvas#1 ]
[ clock::return#2 ]
[ main::$18 ]
[ main::cyclecount#0 ]
[ printf_uchar::uvalue#0 ]
[ printf_ulong::uvalue#0 ]
[ strlen::return#2 ]
[ printf_number_buffer::$19 ]
[ cputln::ln_offset#0 ]
[ cputln::$1 ]
[ cputln::$2 ]
[ cscroll::$7 ]
[ cscroll::$8 ]
[ memset::end#0 ]
[ memcpy::src_end#0 ]
[ cputs::c#1 ]
[ toupper::return#3 ]
[ strupr::$0 ]
[ ultoa::$11 ]
[ ultoa::buffer#3 ]
[ ultoa::$10 ]
[ ultoa::digit_value#0 ]
[ ultoa_append::buffer#0 ]
[ ultoa_append::sub#0 ]
[ ultoa_append::return#0 ]
[ uctoa::buffer#3 ]
[ uctoa::digit_value#0 ]
[ uctoa_append::buffer#0 ]
[ uctoa_append::sub#0 ]
[ uctoa_append::return#0 ]
[ clock::return#0 ]
[ abs_u8::return#0 ]
[ line::dx#0 ]
[ abs_u8::return#1 ]
[ line::dy#0 ]
[ sgn_u8::return#0 ]
[ line::sx#0 ]
[ sgn_u8::return#1 ]
[ line::sy#0 ]
[ line::plot1_$0 ]
[ line::plot1_$2 ]
[ line::plot1_column#0 ]
[ line::plot1_$1 ]
[ line::plot2_$0 ]
[ line::plot2_$2 ]
[ line::plot2_column#0 ]
[ line::plot2_$1 ]
[ line::plot3_$0 ]
[ line::plot3_$2 ]
[ line::plot3_column#0 ]
[ line::plot3_$1 ]
[ line::plot4_$0 ]
[ line::plot4_$2 ]
[ line::plot4_column#0 ]
[ line::plot4_$1 ]
[ sgn_u8::$0 ]
[ abs_u8::$0 ]
[ kbhit::return#2 ]
[ irq_bottom_2::$0 ]
[ kbhit::return#0 ]
[ printf_buffer ]
Allocated zp[1]:2 [ main::y#2 main::y#1 ]
Allocated zp[2]:3 [ main::cols#5 main::cols#1 ]
Allocated zp[2]:5 [ main::screen#5 main::screen#1 ]
Allocated zp[1]:7 [ main::p0_idx#11 main::p0_idx#1 ]
Allocated zp[1]:8 [ main::p1_idx#2 main::p1_idx#1 ]
Allocated zp[1]:9 [ main::p2_idx#2 main::p2_idx#1 ]
Allocated zp[2]:10 [ main::canvas#10 main::canvas#24 ]
Allocated zp[1]:12 [ main::x#2 main::x#1 ]
Allocated zp[1]:13 [ main::c#2 main::c#4 main::c#1 ]
Allocated zp[1]:14 [ printf_number_buffer::format_min_length#2 ]
Allocated zp[1]:15 [ printf_number_buffer::format_justify_left#10 ]
Allocated zp[1]:16 [ printf_number_buffer::format_zero_padding#10 ]
Allocated zp[1]:17 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Allocated zp[1]:18 [ printf_number_buffer::format_upper_case#10 ]
Allocated zp[1]:19 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
Allocated zp[1]:20 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Allocated zp[1]:21 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Allocated zp[1]:22 [ printf_padding::pad#5 ]
Allocated zp[1]:23 [ printf_padding::i#2 printf_padding::i#1 ]
Allocated zp[1]:24 [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ]
Allocated zp[2]:25 [ memset::num#6 ]
Allocated zp[2]:27 [ memset::str#7 ]
Allocated zp[1]:29 [ memset::c#8 memset::c#1 ]
Allocated zp[2]:30 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[2]:32 [ memcpy::source#2 ]
Allocated zp[2]:34 [ memcpy::destination#2 ]
Allocated zp[2]:36 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
Allocated zp[2]:38 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated zp[2]:40 [ cputs::s#4 cputs::s#5 cputs::s#0 ]
Allocated zp[2]:42 [ strupr::src#2 strupr::src#1 ]
Allocated zp[1]:44 [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
Allocated zp[2]:45 [ strlen::str#2 strlen::str#0 ]
Allocated zp[2]:47 [ strlen::len#2 strlen::len#1 ]
Allocated zp[1]:49 [ ultoa::digit#2 ultoa::digit#1 ]
Allocated zp[4]:50 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ]
Allocated zp[1]:54 [ ultoa::started#2 ultoa::started#4 ]
Allocated zp[2]:55 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ]
Allocated zp[4]:57 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ]
Allocated zp[1]:61 [ ultoa_append::digit#2 ultoa_append::digit#1 ]
Allocated zp[1]:62 [ uctoa::digit#2 uctoa::digit#1 ]
Allocated zp[1]:63 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
Allocated zp[1]:64 [ uctoa::started#2 uctoa::started#4 ]
Allocated zp[2]:65 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
Allocated zp[1]:67 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Allocated zp[1]:68 [ uctoa_append::digit#2 uctoa_append::digit#1 ]
Allocated zp[1]:69 [ eorfill::x#2 eorfill::x#1 ]
Allocated zp[2]:70 [ eorfill::line_column#2 eorfill::line_column#1 ]
Allocated zp[2]:72 [ eorfill::fill_column#5 eorfill::canvas#0 eorfill::fill_column#1 ]
Allocated zp[1]:74 [ eorfill::y#2 eorfill::y#1 ]
Allocated zp[1]:75 [ eorfill::eor#2 eorfill::eor#0 eorfill::eor#1 ]
Allocated zp[1]:76 [ line::x2#11 line::x2#0 line::x2#1 line::x2#2 ]
Allocated zp[1]:77 [ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ]
Allocated zp[1]:78 [ line::e#3 line::e#5 line::e#0 line::e#1 line::e#2 ]
Allocated zp[1]:79 [ line::x#12 line::x#10 line::x#16 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::plot2_x#0 line::x#13 ]
Allocated zp[1]:80 [ line::y#10 line::y#6 line::y#15 line::y#13 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#11 line::y#3 ]
Allocated zp[1]:81 [ line::e1#3 line::e1#0 line::e1#7 line::e1#2 line::e1#1 ]
Allocated zp[1]:82 [ sgn_u8::u#2 sgn_u8::u#0 sgn_u8::u#1 ]
Allocated zp[1]:83 [ sgn_u8::return#4 ]
Allocated zp[1]:84 [ abs_u8::return#4 abs_u8::return#2 abs_u8::u#2 abs_u8::u#0 abs_u8::u#1 ]
Allocated zp[1]:85 [ conio_cursor_x ]
Allocated zp[1]:86 [ conio_cursor_y ]
Allocated zp[2]:87 [ conio_cursor_text ]
Allocated zp[2]:89 [ conio_cursor_color ]
Allocated zp[1]:91 [ conio_textcolor ]
Allocated zp[1]:92 [ canvas_show_memory ]
Allocated zp[1]:93 [ canvas_show_flag ]
Allocated zp[1]:94 [ main::x0#0 ]
Allocated zp[1]:95 [ main::y0#0 ]
Allocated zp[1]:96 [ main::x1#0 ]
Allocated zp[1]:97 [ main::y1#0 ]
Allocated zp[1]:98 [ main::x2#0 ]
Allocated zp[1]:99 [ main::y2#0 ]
Allocated zp[2]:100 [ main::canvas#1 ]
Allocated zp[4]:102 [ clock::return#2 ]
Allocated zp[4]:106 [ main::$18 ]
Allocated zp[4]:110 [ main::cyclecount#0 ]
Allocated zp[1]:114 [ printf_uchar::uvalue#0 ]
Allocated zp[4]:115 [ printf_ulong::uvalue#0 ]
Allocated zp[2]:119 [ strlen::return#2 ]
Allocated zp[2]:121 [ printf_number_buffer::$19 ]
Allocated zp[2]:123 [ cputln::ln_offset#0 ]
Allocated zp[2]:125 [ cputln::$1 ]
Allocated zp[2]:127 [ cputln::$2 ]
Allocated zp[2]:129 [ cscroll::$7 ]
Allocated zp[2]:131 [ cscroll::$8 ]
Allocated zp[2]:133 [ memset::end#0 ]
Allocated zp[2]:135 [ memcpy::src_end#0 ]
Allocated zp[1]:137 [ cputs::c#1 ]
Allocated zp[1]:138 [ toupper::return#3 ]
Allocated zp[1]:139 [ strupr::$0 ]
Allocated zp[1]:140 [ ultoa::$11 ]
Allocated zp[2]:141 [ ultoa::buffer#3 ]
Allocated zp[1]:143 [ ultoa::$10 ]
Allocated zp[4]:144 [ ultoa::digit_value#0 ]
Allocated zp[2]:148 [ ultoa_append::buffer#0 ]
Allocated zp[4]:150 [ ultoa_append::sub#0 ]
Allocated zp[4]:154 [ ultoa_append::return#0 ]
Allocated zp[2]:158 [ uctoa::buffer#3 ]
Allocated zp[1]:160 [ uctoa::digit_value#0 ]
Allocated zp[2]:161 [ uctoa_append::buffer#0 ]
Allocated zp[1]:163 [ uctoa_append::sub#0 ]
Allocated zp[1]:164 [ uctoa_append::return#0 ]
Allocated zp[4]:165 [ clock::return#0 ]
Allocated zp[1]:169 [ abs_u8::return#0 ]
Allocated zp[1]:170 [ line::dx#0 ]
Allocated zp[1]:171 [ abs_u8::return#1 ]
Allocated zp[1]:172 [ line::dy#0 ]
Allocated zp[1]:173 [ sgn_u8::return#0 ]
Allocated zp[1]:174 [ line::sx#0 ]
Allocated zp[1]:175 [ sgn_u8::return#1 ]
Allocated zp[1]:176 [ line::sy#0 ]
Allocated zp[1]:177 [ line::plot1_$0 ]
Allocated zp[1]:178 [ line::plot1_$2 ]
Allocated zp[2]:179 [ line::plot1_column#0 ]
Allocated zp[1]:181 [ line::plot1_$1 ]
Allocated zp[1]:182 [ line::plot2_$0 ]
Allocated zp[1]:183 [ line::plot2_$2 ]
Allocated zp[2]:184 [ line::plot2_column#0 ]
Allocated zp[1]:186 [ line::plot2_$1 ]
Allocated zp[1]:187 [ line::plot3_$0 ]
Allocated zp[1]:188 [ line::plot3_$2 ]
Allocated zp[2]:189 [ line::plot3_column#0 ]
Allocated zp[1]:191 [ line::plot3_$1 ]
Allocated zp[1]:192 [ line::plot4_$0 ]
Allocated zp[1]:193 [ line::plot4_$2 ]
Allocated zp[2]:194 [ line::plot4_column#0 ]
Allocated zp[1]:196 [ line::plot4_$1 ]
Allocated zp[1]:197 [ sgn_u8::$0 ]
Allocated zp[1]:198 [ abs_u8::$0 ]
Allocated zp[1]:199 [ kbhit::return#2 ]
Allocated zp[1]:200 [ irq_bottom_2::$0 ]
Allocated zp[1]:201 [ kbhit::return#0 ]
Allocated mem[12] [ printf_buffer ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Filling a simple 16x16 2D polygon using EOR-filling
// - Clearing canvas
// - Trivial 2D rotation using sine tables
// - Line-drawing polygon edges (fill-ready lines)
// - Up-to-down EOR filling 
// - Double buffering
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // Timer Control - Start/stop timer (0:stop, 1: start)
  .const CIA_TIMER_CONTROL_START = 1
  // Timer B Control - Timer counts (00:system cycles, 01: CNT pulses, 10: timer A underflow, 11: time A underflow while CNT is high)
  .const CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
  .const BORDER_YPOS_BOTTOM = $fa
  // Bits for the VICII IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // The colors of the C64
  .const BLACK = 0
  .const WHITE = 1
  .const RED = 2
  // Clock cycles used to start & read the cycle clock by calling clock_start() and clock() once. Can be subtracted when calculating the number of cycles used by a routine.
  // To make precise cycle measurements interrupts and the display must be disabled so neither steals any cycles from the code.
  .const CLOCKS_PER_INIT = $12
  // The default text color
  .const CONIO_TEXTCOLOR_DEFAULT = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE = $1a
  .const OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
  .const OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS = $19
  .const toD0181_return = (>(SCREEN&$3fff)*4)|(>CANVAS2)/4&$f
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // Color Ram
  .label COLS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // CIA#2 timer A&B as one single 32-bit value
  .label CIA2_TIMER_AB = $dd04
  // The vector used when the KERNAL serves IRQ interrupts
  .label KERNEL_IRQ = $314
  // The screen width
  // The screen height
  // The screen bytes
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  // CIA#1 Port A: keyboard matrix columns and joystick #2
  .label CONIO_CIA1_PORT_A = $dc00
  // CIA#1 Port B: keyboard matrix rows and joystick #1.
  .label CONIO_CIA1_PORT_B = $dc01
  // The line buffer
  .label LINE_BUFFER = $2000
  // The two charsets used as screen buffers
  .label CANVAS1 = $3000
  .label CANVAS2 = $3800
  // The screen matrix
  .label SCREEN = $2c00
  // The screen console
  .label CONSOLE = $400
  // The default charset address
  .label PETSCII = $1000
  .label COSTAB = SINTAB+$40
  .label conio_cursor_x = $55
  .label conio_cursor_y = $56
  .label conio_cursor_text = $57
  .label conio_cursor_color = $59
  .label conio_textcolor = $5b
  .label canvas_show_memory = $5c
  .label canvas_show_flag = $5d
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor x-position
  lda #0
  sta.z conio_cursor_x
  // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor y-position
  lda #0
  sta.z conio_cursor_y
  // [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_TEXT
  sta.z conio_cursor_text
  lda #>CONIO_SCREEN_TEXT
  sta.z conio_cursor_text+1
  // [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_COLORS
  sta.z conio_cursor_color
  lda #>CONIO_SCREEN_COLORS
  sta.z conio_cursor_color+1
  // [5] (byte) conio_textcolor ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- vbuz1=vbuc1 
  // The current text color
  lda #CONIO_TEXTCOLOR_DEFAULT
  sta.z conio_textcolor
  // [6] phi from @1 to toD0181 [phi:@1->toD0181]
toD0181_from___b1:
  jmp toD0181
  // toD0181
toD0181:
  jmp __b3
  // @3
__b3:
  // [7] (volatile byte) canvas_show_memory ← (const byte) toD0181_return#0 -- vbuz1=vbuc1 
  // The current canvas being rendered to the screen - in D018 format.
  lda #toD0181_return
  sta.z canvas_show_memory
  // [8] (volatile byte) canvas_show_flag ← (byte) 0 -- vbuz1=vbuc1 
  // Flag signalling that the canvas on screen needs to be updated.
  // Set to 1 by the renderer when a new canvas is ready for showing, and to 0 by the raster when the canvas is shown on screen.
  lda #0
  sta.z canvas_show_flag
  // [9] phi from @3 to @2 [phi:@3->@2]
__b2_from___b3:
  jmp __b2
  // @2
__b2:
  // [10] call main 
  // [12] phi from @2 to main [phi:@2->main]
main_from___b2:
  jsr main
  // [11] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>CANVAS1)/4&$f
    .const toD0182_return = (>(SCREEN&$3fff)*4)|(>CANVAS2)/4&$f
    .label __18 = $6a
    .label c = $d
    .label x = $c
    .label cols = 3
    // Setup 16x16 canvas for rendering
    .label screen = 5
    .label y = 2
    .label x0 = $5e
    .label y0 = $5f
    .label x1 = $60
    .label y1 = $61
    .label x2 = $62
    .label y2 = $63
    .label p0_idx = 7
    .label p1_idx = 8
    .label p2_idx = 9
    // The current canvas being rendered to
    .label canvas = $64
    .label cyclecount = $6e
    // The current canvas being rendered to
    .label canvas_1 = $a
    // [13] call memset 
  // Clear the console
    // [177] phi from main to memset [phi:main->memset]
  memset_from_main:
    // [177] phi (byte) memset::c#8 = (byte) ' ' [phi:main->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [177] phi (void*) memset::str#7 = (void*)(const nomodify byte*) CONSOLE [phi:main->memset#1] -- pvoz1=pvoc1 
    lda #<CONSOLE
    sta.z memset.str
    lda #>CONSOLE
    sta.z memset.str+1
    // [177] phi (word) memset::num#6 = (word)(number) $28*(number) $19 [phi:main->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    // [14] phi from main to main::@12 [phi:main->main::@12]
  __b12_from_main:
    jmp __b12
    // main::@12
  __b12:
    // [15] call memset 
  // Clear the screen
    // [177] phi from main::@12 to memset [phi:main::@12->memset]
  memset_from___b12:
    // [177] phi (byte) memset::c#8 = (byte) 0 [phi:main::@12->memset#0] -- vbuz1=vbuc1 
    lda #0
    sta.z memset.c
    // [177] phi (void*) memset::str#7 = (void*)(const nomodify byte*) SCREEN [phi:main::@12->memset#1] -- pvoz1=pvoc1 
    lda #<SCREEN
    sta.z memset.str
    lda #>SCREEN
    sta.z memset.str+1
    // [177] phi (word) memset::num#6 = (word)(number) $28*(number) $19 [phi:main::@12->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    // [16] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  __b13_from___b12:
    jmp __b13
    // main::@13
  __b13:
    // [17] call memset 
    // [177] phi from main::@13 to memset [phi:main::@13->memset]
  memset_from___b13:
    // [177] phi (byte) memset::c#8 = (const nomodify byte) BLACK [phi:main::@13->memset#0] -- vbuz1=vbuc1 
    lda #BLACK
    sta.z memset.c
    // [177] phi (void*) memset::str#7 = (void*)(const nomodify byte*) COLS [phi:main::@13->memset#1] -- pvoz1=pvoc1 
    lda #<COLS
    sta.z memset.str
    lda #>COLS
    sta.z memset.str+1
    // [177] phi (word) memset::num#6 = (word)(number) $28*(number) $19 [phi:main::@13->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    // [18] phi from main::@13 to main::@1 [phi:main::@13->main::@1]
  __b1_from___b13:
    // [18] phi (byte*) main::screen#5 = (const nomodify byte*) SCREEN+(byte) $c [phi:main::@13->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$c
    sta.z screen
    lda #>SCREEN+$c
    sta.z screen+1
    // [18] phi (byte*) main::cols#5 = (const nomodify byte*) COLS+(byte) $c [phi:main::@13->main::@1#1] -- pbuz1=pbuc1 
    lda #<COLS+$c
    sta.z cols
    lda #>COLS+$c
    sta.z cols+1
    // [18] phi (byte) main::y#2 = (byte) 0 [phi:main::@13->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    jmp __b1
    // main::@1
  __b1:
    // [19] if((byte) main::y#2<(byte) $10) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z y
    cmp #$10
    bcc __b2
    jmp __b3
    // main::@3
  __b3:
    // [20] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [21] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // [22] call setup_irq 
    // Set-up the raster IRQ
    jsr setup_irq
    // [23] phi from main::@3 to main::@14 [phi:main::@3->main::@14]
  __b14_from___b3:
    jmp __b14
    // main::@14
  __b14:
    // [24] call textcolor 
    // Set text color
    jsr textcolor
    // [25] phi from main::@14 to main::@7 [phi:main::@14->main::@7]
  __b7_from___b14:
    // [25] phi (byte*) main::canvas#10 = (const nomodify byte*) CANVAS1 [phi:main::@14->main::@7#0] -- pbuz1=pbuc1 
    lda #<CANVAS1
    sta.z canvas_1
    lda #>CANVAS1
    sta.z canvas_1+1
    // [25] phi (byte) main::p2_idx#2 = (byte) $f0+(byte) $aa [phi:main::@14->main::@7#1] -- vbuz1=vbuc1 
    lda #$f0+$aa
    sta.z p2_idx
    // [25] phi (byte) main::p1_idx#2 = (byte) $f0+(byte) $f [phi:main::@14->main::@7#2] -- vbuz1=vbuc1 
    lda #$f0+$f
    sta.z p1_idx
    // [25] phi (byte) main::p0_idx#11 = (byte) $f0 [phi:main::@14->main::@7#3] -- vbuz1=vbuc1 
    lda #$f0
    sta.z p0_idx
    jmp __b7
    // main::@7
  __b7:
    // [26] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  __b8_from___b7:
    jmp __b8
    // main::@8
  __b8:
    // [27] call clock_start 
    jsr clock_start
    // [28] phi from main::@8 to main::@15 [phi:main::@8->main::@15]
  __b15_from___b8:
    jmp __b15
    // main::@15
  __b15:
    // [29] call memset 
  // Clear line buffer
    // [177] phi from main::@15 to memset [phi:main::@15->memset]
  memset_from___b15:
    // [177] phi (byte) memset::c#8 = (byte) 0 [phi:main::@15->memset#0] -- vbuz1=vbuc1 
    lda #0
    sta.z memset.c
    // [177] phi (void*) memset::str#7 = (void*)(const nomodify byte*) LINE_BUFFER [phi:main::@15->memset#1] -- pvoz1=pvoc1 
    lda #<LINE_BUFFER
    sta.z memset.str
    lda #>LINE_BUFFER
    sta.z memset.str+1
    // [177] phi (word) memset::num#6 = (word) $800 [phi:main::@15->memset#2] -- vwuz1=vwuc1 
    lda #<$800
    sta.z memset.num
    lda #>$800
    sta.z memset.num+1
    jsr memset
    jmp __b16
    // main::@16
  __b16:
    // [30] (byte) main::x0#0 ← *((const byte*) COSTAB + (byte) main::p0_idx#11) -- vbuz1=pbuc1_derefidx_vbuz2 
    // Plot in line buffer
    ldy.z p0_idx
    lda COSTAB,y
    sta.z x0
    // [31] (byte) main::y0#0 ← *((const byte*) SINTAB + (byte) main::p0_idx#11) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z p0_idx
    lda SINTAB,y
    sta.z y0
    // [32] (byte) main::x1#0 ← *((const byte*) COSTAB + (byte) main::p1_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z p1_idx
    lda COSTAB,y
    sta.z x1
    // [33] (byte) main::y1#0 ← *((const byte*) SINTAB + (byte) main::p1_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z p1_idx
    lda SINTAB,y
    sta.z y1
    // [34] (byte) line::x1#0 ← (byte) main::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z line.x1
    // [35] (byte) line::y1#0 ← (byte) main::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z line.y1
    // [36] (byte) line::x2#0 ← (byte) main::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z line.x2
    // [37] (byte) line::y2#0 ← (byte) main::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z line.y2
    // [38] call line 
    // [307] phi from main::@16 to line [phi:main::@16->line]
  line_from___b16:
    // [307] phi (byte) line::y2#10 = (byte) line::y2#0 [phi:main::@16->line#0] -- register_copy 
    // [307] phi (byte) line::x2#11 = (byte) line::x2#0 [phi:main::@16->line#1] -- register_copy 
    // [307] phi (byte) line::y#0 = (byte) line::y1#0 [phi:main::@16->line#2] -- register_copy 
    // [307] phi (byte) line::x#0 = (byte) line::x1#0 [phi:main::@16->line#3] -- register_copy 
    jsr line
    jmp __b17
    // main::@17
  __b17:
    // [39] (byte) main::x2#0 ← *((const byte*) COSTAB + (byte) main::p2_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z p2_idx
    lda COSTAB,y
    sta.z x2
    // [40] (byte) main::y2#0 ← *((const byte*) SINTAB + (byte) main::p2_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z p2_idx
    lda SINTAB,y
    sta.z y2
    // [41] (byte) line::x1#1 ← (byte) main::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z line.x1
    // [42] (byte) line::y1#1 ← (byte) main::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z line.y1
    // [43] (byte) line::x2#1 ← (byte) main::x2#0 -- vbuz1=vbuz2 
    lda.z x2
    sta.z line.x2
    // [44] (byte) line::y2#1 ← (byte) main::y2#0 -- vbuz1=vbuz2 
    lda.z y2
    sta.z line.y2
    // [45] call line 
    // [307] phi from main::@17 to line [phi:main::@17->line]
  line_from___b17:
    // [307] phi (byte) line::y2#10 = (byte) line::y2#1 [phi:main::@17->line#0] -- register_copy 
    // [307] phi (byte) line::x2#11 = (byte) line::x2#1 [phi:main::@17->line#1] -- register_copy 
    // [307] phi (byte) line::y#0 = (byte) line::y1#1 [phi:main::@17->line#2] -- register_copy 
    // [307] phi (byte) line::x#0 = (byte) line::x1#1 [phi:main::@17->line#3] -- register_copy 
    jsr line
    jmp __b18
    // main::@18
  __b18:
    // [46] (byte) line::x1#2 ← (byte) main::x2#0 -- vbuz1=vbuz2 
    lda.z x2
    sta.z line.x1
    // [47] (byte) line::y1#2 ← (byte) main::y2#0 -- vbuz1=vbuz2 
    lda.z y2
    sta.z line.y1
    // [48] (byte) line::x2#2 ← (byte) main::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z line.x2
    // [49] (byte) line::y2#2 ← (byte) main::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z line.y2
    // [50] call line 
    // [307] phi from main::@18 to line [phi:main::@18->line]
  line_from___b18:
    // [307] phi (byte) line::y2#10 = (byte) line::y2#2 [phi:main::@18->line#0] -- register_copy 
    // [307] phi (byte) line::x2#11 = (byte) line::x2#2 [phi:main::@18->line#1] -- register_copy 
    // [307] phi (byte) line::y#0 = (byte) line::y1#2 [phi:main::@18->line#2] -- register_copy 
    // [307] phi (byte) line::x#0 = (byte) line::x1#2 [phi:main::@18->line#3] -- register_copy 
    jsr line
    jmp __b19
    // main::@19
  __b19:
    // [51] (byte) main::p0_idx#1 ← ++ (byte) main::p0_idx#11 -- vbuz1=_inc_vbuz1 
    inc.z p0_idx
    // [52] (byte) main::p1_idx#1 ← ++ (byte) main::p1_idx#2 -- vbuz1=_inc_vbuz1 
    inc.z p1_idx
    // [53] (byte) main::p2_idx#1 ← ++ (byte) main::p2_idx#2 -- vbuz1=_inc_vbuz1 
    inc.z p2_idx
    // [54] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) RED -- _deref_pbuc1=vbuc2 
    // Wait until the canvas on screen has been switched before starting work on the next frame
    lda #RED
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    jmp __b9
    // main::@9
  __b9:
    // [55] if((byte) 0!=(volatile byte) canvas_show_flag) goto main::@9 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z canvas_show_flag
    bne __b9
    jmp __b10
    // main::@10
  __b10:
    // [56] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [57] (byte*) eorfill::canvas#0 ← (byte*) main::canvas#10 -- pbuz1=pbuz2 
    lda.z canvas_1
    sta.z eorfill.canvas
    lda.z canvas_1+1
    sta.z eorfill.canvas+1
    // [58] call eorfill 
  // Fill canvas
    // [294] phi from main::@10 to eorfill [phi:main::@10->eorfill]
  eorfill_from___b10:
    jsr eorfill
    jmp __b20
    // main::@20
  __b20:
    // [59] (word) main::canvas#1 ← (byte*) main::canvas#10 ^ (const nomodify byte*) CANVAS1^(const nomodify byte*) CANVAS2 -- vwuz1=pbuz2_bxor_vwuc1 
    // swap canvas being rendered to (using XOR)
    lda #<CANVAS1^CANVAS2
    eor.z canvas_1
    sta.z canvas
    lda #>CANVAS1^CANVAS2
    eor.z canvas_1+1
    sta.z canvas+1
    // [60] phi from main::@20 to main::toD0181 [phi:main::@20->main::toD0181]
  toD0181_from___b20:
    jmp toD0181
    // main::toD0181
  toD0181:
    // [61] phi from main::toD0181 to main::toD0182 [phi:main::toD0181->main::toD0182]
  toD0182_from_toD0181:
    jmp toD0182
    // main::toD0182
  toD0182:
    jmp __b11
    // main::@11
  __b11:
    // [62] (volatile byte) canvas_show_memory ← (volatile byte) canvas_show_memory ^ (const byte) main::toD0181_return#0^(const byte) main::toD0182_return#0 -- vbuz1=vbuz1_bxor_vbuc1 
    // Swap canvas to show on screen (using XOR)
    lda #toD0181_return^toD0182_return
    eor.z canvas_show_memory
    sta.z canvas_show_memory
    // [63] (volatile byte) canvas_show_flag ← (byte) 1 -- vbuz1=vbuc1 
    // Set flag used to signal when the canvas has been shown
    lda #1
    sta.z canvas_show_flag
    // [64] call clock 
    jsr clock
    // [65] (dword) clock::return#2 ← (dword) clock::return#0 -- vduz1=vduz2 
    lda.z clock.return
    sta.z clock.return_1
    lda.z clock.return+1
    sta.z clock.return_1+1
    lda.z clock.return+2
    sta.z clock.return_1+2
    lda.z clock.return+3
    sta.z clock.return_1+3
    jmp __b21
    // main::@21
  __b21:
    // [66] (dword~) main::$18 ← (dword) clock::return#2 -- vduz1=vduz2 
    lda.z clock.return_1
    sta.z __18
    lda.z clock.return_1+1
    sta.z __18+1
    lda.z clock.return_1+2
    sta.z __18+2
    lda.z clock.return_1+3
    sta.z __18+3
    // [67] (dword) main::cyclecount#0 ← (dword~) main::$18 - (const nomodify dword) CLOCKS_PER_INIT -- vduz1=vduz2_minus_vduc1 
    lda.z __18
    sec
    sbc #<CLOCKS_PER_INIT
    sta.z cyclecount
    lda.z __18+1
    sbc #>CLOCKS_PER_INIT
    sta.z cyclecount+1
    lda.z __18+2
    sbc #<CLOCKS_PER_INIT>>$10
    sta.z cyclecount+2
    lda.z __18+3
    sbc #>CLOCKS_PER_INIT>>$10
    sta.z cyclecount+3
    // [68] call gotoxy 
    // [286] phi from main::@21 to gotoxy [phi:main::@21->gotoxy]
  gotoxy_from___b21:
    jsr gotoxy
    // [69] phi from main::@21 to main::@22 [phi:main::@21->main::@22]
  __b22_from___b21:
    jmp __b22
    // main::@22
  __b22:
    // [70] call cputs 
    // [196] phi from main::@22 to cputs [phi:main::@22->cputs]
  cputs_from___b22:
    // [196] phi (to_nomodify byte*) cputs::s#5 = (const byte*) main::s [phi:main::@22->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    jmp __b23
    // main::@23
  __b23:
    // [71] (byte) printf_uchar::uvalue#0 ← (byte) main::p0_idx#1 -- vbuz1=vbuz2 
    lda.z p0_idx
    sta.z printf_uchar.uvalue
    // [72] call printf_uchar 
    // [253] phi from main::@23 to printf_uchar [phi:main::@23->printf_uchar]
  printf_uchar_from___b23:
    jsr printf_uchar
    // [73] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
  __b24_from___b23:
    jmp __b24
    // main::@24
  __b24:
    // [74] call cputs 
    // [196] phi from main::@24 to cputs [phi:main::@24->cputs]
  cputs_from___b24:
    // [196] phi (to_nomodify byte*) cputs::s#5 = (const byte*) main::s1 [phi:main::@24->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    jmp __b25
    // main::@25
  __b25:
    // [75] (dword) printf_ulong::uvalue#0 ← (dword) main::cyclecount#0 -- vduz1=vduz2 
    lda.z cyclecount
    sta.z printf_ulong.uvalue
    lda.z cyclecount+1
    sta.z printf_ulong.uvalue+1
    lda.z cyclecount+2
    sta.z printf_ulong.uvalue+2
    lda.z cyclecount+3
    sta.z printf_ulong.uvalue+3
    // [76] call printf_ulong 
    // [88] phi from main::@25 to printf_ulong [phi:main::@25->printf_ulong]
  printf_ulong_from___b25:
    jsr printf_ulong
    jmp __b26
    // main::@26
  __b26:
    // [77] (byte*) main::canvas#24 ← (byte*)(word) main::canvas#1 -- pbuz1=pbuz2 
    lda.z canvas
    sta.z canvas_1
    lda.z canvas+1
    sta.z canvas_1+1
    // [25] phi from main::@26 to main::@7 [phi:main::@26->main::@7]
  __b7_from___b26:
    // [25] phi (byte*) main::canvas#10 = (byte*) main::canvas#24 [phi:main::@26->main::@7#0] -- register_copy 
    // [25] phi (byte) main::p2_idx#2 = (byte) main::p2_idx#1 [phi:main::@26->main::@7#1] -- register_copy 
    // [25] phi (byte) main::p1_idx#2 = (byte) main::p1_idx#1 [phi:main::@26->main::@7#2] -- register_copy 
    // [25] phi (byte) main::p0_idx#11 = (byte) main::p0_idx#1 [phi:main::@26->main::@7#3] -- register_copy 
    jmp __b7
    // main::@2
  __b2:
    // [78] (byte) main::c#4 ← (byte) main::y#2 -- vbuz1=vbuz2 
    lda.z y
    sta.z c
    // [79] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  __b4_from___b2:
    // [79] phi (byte) main::c#2 = (byte) main::c#4 [phi:main::@2->main::@4#0] -- register_copy 
    // [79] phi (byte) main::x#2 = (byte) 0 [phi:main::@2->main::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    jmp __b4
    // main::@4
  __b4:
    // [80] if((byte) main::x#2<(byte) $10) goto main::@5 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x
    cmp #$10
    bcc __b5
    jmp __b6
    // main::@6
  __b6:
    // [81] (byte*) main::cols#1 ← (byte*) main::cols#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z cols
    sta.z cols
    bcc !+
    inc.z cols+1
  !:
    // [82] (byte*) main::screen#1 ← (byte*) main::screen#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z screen
    sta.z screen
    bcc !+
    inc.z screen+1
  !:
    // [83] (byte) main::y#1 ← ++ (byte) main::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [18] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  __b1_from___b6:
    // [18] phi (byte*) main::screen#5 = (byte*) main::screen#1 [phi:main::@6->main::@1#0] -- register_copy 
    // [18] phi (byte*) main::cols#5 = (byte*) main::cols#1 [phi:main::@6->main::@1#1] -- register_copy 
    // [18] phi (byte) main::y#2 = (byte) main::y#1 [phi:main::@6->main::@1#2] -- register_copy 
    jmp __b1
    // main::@5
  __b5:
    // [84] *((byte*) main::cols#5 + (byte) main::x#2) ← (const nomodify byte) WHITE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #WHITE
    ldy.z x
    sta (cols),y
    // [85] *((byte*) main::screen#5 + (byte) main::x#2) ← (byte) main::c#2 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z c
    ldy.z x
    sta (screen),y
    // [86] (byte) main::c#1 ← (byte) main::c#2 + (byte) $10 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z c
    axs #-[$10]
    stx.z c
    // [87] (byte) main::x#1 ← ++ (byte) main::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [79] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
  __b4_from___b5:
    // [79] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@5->main::@4#0] -- register_copy 
    // [79] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@5->main::@4#1] -- register_copy 
    jmp __b4
    s: .text "frame: "
    .byte 0
    s1: .text " cycles: "
    .byte 0
}
  // printf_ulong
// Print an unsigned int using a specific format
// printf_ulong(dword zp($73) uvalue)
printf_ulong: {
    .const format_min_length = 6
    .const format_justify_left = 0
    .const format_zero_padding = 0
    .const format_upper_case = 0
    .label uvalue = $73
    jmp __b1
    // printf_ulong::@1
  __b1:
    // [89] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [90] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#0 -- vduz1=vduz2 
    lda.z uvalue
    sta.z ultoa.value
    lda.z uvalue+1
    sta.z ultoa.value+1
    lda.z uvalue+2
    sta.z ultoa.value+2
    lda.z uvalue+3
    sta.z ultoa.value+3
    // [91] call ultoa 
  // Format number into buffer
    // [225] phi from printf_ulong::@1 to ultoa [phi:printf_ulong::@1->ultoa]
  ultoa_from___b1:
    jsr ultoa
    jmp __b2
    // printf_ulong::@2
  __b2:
    // [92] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [93] call printf_number_buffer 
  // Print using format
    // [95] phi from printf_ulong::@2 to printf_number_buffer [phi:printf_ulong::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [95] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_ulong::format_upper_case#0 [phi:printf_ulong::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [95] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#0 [phi:printf_ulong::@2->printf_number_buffer#1] -- register_copy 
    // [95] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_ulong::format_zero_padding#0 [phi:printf_ulong::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [95] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_ulong::format_justify_left#0 [phi:printf_ulong::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [95] phi (byte) printf_number_buffer::format_min_length#2 = (const byte) printf_ulong::format_min_length#0 [phi:printf_ulong::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #format_min_length
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_ulong::@return
  __breturn:
    // [94] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp($11) buffer_sign, byte zp($e) format_min_length, byte zp($f) format_justify_left, byte zp($10) format_zero_padding, byte zp($12) format_upper_case)
printf_number_buffer: {
    .label __19 = $79
    .label buffer_sign = $11
    .label len = $13
    .label padding = $14
    .label format_min_length = $e
    .label format_zero_padding = $10
    .label format_justify_left = $f
    .label format_upper_case = $12
    // [96] if((byte) 0==(byte) printf_number_buffer::format_min_length#2) goto printf_number_buffer::@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_min_length
    beq __b1_from_printf_number_buffer
    // [97] phi from printf_number_buffer to printf_number_buffer::@6 [phi:printf_number_buffer->printf_number_buffer::@6]
  __b6_from_printf_number_buffer:
    jmp __b6
    // printf_number_buffer::@6
  __b6:
    // [98] call strlen 
    // [219] phi from printf_number_buffer::@6 to strlen [phi:printf_number_buffer::@6->strlen]
  strlen_from___b6:
    jsr strlen
    // [99] (word) strlen::return#2 ← (word) strlen::len#2 -- vwuz1=vwuz2 
    lda.z strlen.len
    sta.z strlen.return
    lda.z strlen.len+1
    sta.z strlen.return+1
    jmp __b14
    // printf_number_buffer::@14
  __b14:
    // [100] (word~) printf_number_buffer::$19 ← (word) strlen::return#2 -- vwuz1=vwuz2 
    lda.z strlen.return
    sta.z __19
    lda.z strlen.return+1
    sta.z __19+1
    // [101] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 -- vbsz1=_sbyte_vwuz2 
    // There is a minimum length - work out the padding
    lda.z __19
    sta.z len
    // [102] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b13_from___b14
    jmp __b7
    // printf_number_buffer::@7
  __b7:
    // [103] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0 -- vbsz1=_inc_vbsz1 
    inc.z len
    // [104] phi from printf_number_buffer::@14 printf_number_buffer::@7 to printf_number_buffer::@13 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13]
  __b13_from___b14:
  __b13_from___b7:
    // [104] phi (signed byte) printf_number_buffer::len#2 = (signed byte) printf_number_buffer::len#0 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13#0] -- register_copy 
    jmp __b13
    // printf_number_buffer::@13
  __b13:
    // [105] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#2 - (signed byte) printf_number_buffer::len#2 -- vbsz1=vbsz2_minus_vbsz3 
    lda.z format_min_length
    sec
    sbc.z len
    sta.z padding
    // [106] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21 -- vbsz1_ge_0_then_la1 
    lda.z padding
    cmp #0
    bpl __b21_from___b13
    // [108] phi from printf_number_buffer printf_number_buffer::@13 to printf_number_buffer::@1 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1]
  __b1_from_printf_number_buffer:
  __b1_from___b13:
    // [108] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) 0 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    jmp __b1
    // [107] phi from printf_number_buffer::@13 to printf_number_buffer::@21 [phi:printf_number_buffer::@13->printf_number_buffer::@21]
  __b21_from___b13:
    jmp __b21
    // printf_number_buffer::@21
  __b21:
    // [108] phi from printf_number_buffer::@21 to printf_number_buffer::@1 [phi:printf_number_buffer::@21->printf_number_buffer::@1]
  __b1_from___b21:
    // [108] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) printf_number_buffer::padding#1 [phi:printf_number_buffer::@21->printf_number_buffer::@1#0] -- register_copy 
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [109] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    jmp __b17
    // printf_number_buffer::@17
  __b17:
    // [110] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __b2
    jmp __b16
    // printf_number_buffer::@16
  __b16:
    // [111] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b8
    jmp __b2
    // printf_number_buffer::@8
  __b8:
    // [112] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [113] call printf_padding 
    // [132] phi from printf_number_buffer::@8 to printf_padding [phi:printf_number_buffer::@8->printf_padding]
  printf_padding_from___b8:
    // [132] phi (byte) printf_padding::pad#5 = (byte) ' ' [phi:printf_number_buffer::@8->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [132] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#0 [phi:printf_number_buffer::@8->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [114] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b3
    jmp __b9
    // printf_number_buffer::@9
  __b9:
    // [115] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#10 -- vbuz1=vbuz2 
    lda.z buffer_sign
    sta.z cputc.c
    // [116] call cputc 
    // [139] phi from printf_number_buffer::@9 to cputc [phi:printf_number_buffer::@9->cputc]
  cputc_from___b9:
    // [139] phi (byte) cputc::c#3 = (byte) cputc::c#2 [phi:printf_number_buffer::@9->cputc#0] -- register_copy 
    jsr cputc
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [117] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    beq __b4
    jmp __b18
    // printf_number_buffer::@18
  __b18:
    // [118] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b10
    jmp __b4
    // printf_number_buffer::@10
  __b10:
    // [119] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [120] call printf_padding 
    // [132] phi from printf_number_buffer::@10 to printf_padding [phi:printf_number_buffer::@10->printf_padding]
  printf_padding_from___b10:
    // [132] phi (byte) printf_padding::pad#5 = (byte) '0' [phi:printf_number_buffer::@10->printf_padding#0] -- vbuz1=vbuc1 
    lda #'0'
    sta.z printf_padding.pad
    // [132] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#1 [phi:printf_number_buffer::@10->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b4
    // printf_number_buffer::@4
  __b4:
    // [121] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_upper_case
    beq __b5_from___b4
    // [122] phi from printf_number_buffer::@4 to printf_number_buffer::@11 [phi:printf_number_buffer::@4->printf_number_buffer::@11]
  __b11_from___b4:
    jmp __b11
    // printf_number_buffer::@11
  __b11:
    // [123] call strupr 
    // [204] phi from printf_number_buffer::@11 to strupr [phi:printf_number_buffer::@11->strupr]
  strupr_from___b11:
    jsr strupr
    // [124] phi from printf_number_buffer::@11 printf_number_buffer::@4 to printf_number_buffer::@5 [phi:printf_number_buffer::@11/printf_number_buffer::@4->printf_number_buffer::@5]
  __b5_from___b11:
  __b5_from___b4:
    jmp __b5
    // printf_number_buffer::@5
  __b5:
    // [125] call cputs 
    // [196] phi from printf_number_buffer::@5 to cputs [phi:printf_number_buffer::@5->cputs]
  cputs_from___b5:
    // [196] phi (to_nomodify byte*) cputs::s#5 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_number_buffer::@5->cputs#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s+1
    jsr cputs
    jmp __b15
    // printf_number_buffer::@15
  __b15:
    // [126] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    jmp __b20
    // printf_number_buffer::@20
  __b20:
    // [127] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __breturn
    jmp __b19
    // printf_number_buffer::@19
  __b19:
    // [128] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b12
    jmp __breturn
    // printf_number_buffer::@12
  __b12:
    // [129] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [130] call printf_padding 
    // [132] phi from printf_number_buffer::@12 to printf_padding [phi:printf_number_buffer::@12->printf_padding]
  printf_padding_from___b12:
    // [132] phi (byte) printf_padding::pad#5 = (byte) ' ' [phi:printf_number_buffer::@12->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [132] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#2 [phi:printf_number_buffer::@12->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [131] return 
    rts
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp($16) pad, byte zp($15) length)
printf_padding: {
    .label i = $17
    .label length = $15
    .label pad = $16
    // [133] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
  __b1_from_printf_padding:
    // [133] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // printf_padding::@1
  __b1:
    // [134] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    jmp __breturn
    // printf_padding::@return
  __breturn:
    // [135] return 
    rts
    // printf_padding::@2
  __b2:
    // [136] (byte) cputc::c#1 ← (byte) printf_padding::pad#5 -- vbuz1=vbuz2 
    lda.z pad
    sta.z cputc.c
    // [137] call cputc 
    // [139] phi from printf_padding::@2 to cputc [phi:printf_padding::@2->cputc]
  cputc_from___b2:
    // [139] phi (byte) cputc::c#3 = (byte) cputc::c#1 [phi:printf_padding::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b3
    // printf_padding::@3
  __b3:
    // [138] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [133] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
  __b1_from___b3:
    // [133] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte zp($18) c)
cputc: {
    .label c = $18
    // [140] if((byte) cputc::c#3==(byte) ' ') goto cputc::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    cmp.z c
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [141] *((byte*) conio_cursor_text) ← (byte) cputc::c#3 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (conio_cursor_text),y
    // [142] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // [143] *((byte*) conio_cursor_color) ← (byte) conio_textcolor -- _deref_pbuz1=vbuz2 
    lda.z conio_textcolor
    ldy #0
    sta (conio_cursor_color),y
    // [144] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // [145] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [146] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    jmp __b3
    // cputc::@3
  __b3:
    // [147] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [148] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [149] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputc::@return
  __breturn:
    // [150] return 
    rts
    // [151] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [152] call cputln 
    jsr cputln
    jmp __breturn
}
  // cputln
// Print a newline
cputln: {
    .label __1 = $7d
    .label __2 = $7f
    .label ln_offset = $7b
    // [153] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x -- vwuz1=vbuc1_minus_vbuz2 
    sec
    lda #$28
    sbc.z conio_cursor_x
    sta.z ln_offset
    lda #0
    sbc #0
    sta.z ln_offset+1
    // [154] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0 -- pbuz1=pbuz2_plus_vwuz3 
    lda.z conio_cursor_text
    clc
    adc.z ln_offset
    sta.z __1
    lda.z conio_cursor_text+1
    adc.z ln_offset+1
    sta.z __1+1
    // [155] (byte*) conio_cursor_text ← (byte*~) cputln::$1 -- pbuz1=pbuz2 
    lda.z __1
    sta.z conio_cursor_text
    lda.z __1+1
    sta.z conio_cursor_text+1
    // [156] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0 -- pbuz1=pbuz2_plus_vwuz3 
    lda.z conio_cursor_color
    clc
    adc.z ln_offset
    sta.z __2
    lda.z conio_cursor_color+1
    adc.z ln_offset+1
    sta.z __2+1
    // [157] (byte*) conio_cursor_color ← (byte*~) cputln::$2 -- pbuz1=pbuz2 
    lda.z __2
    sta.z conio_cursor_color
    lda.z __2+1
    sta.z conio_cursor_color+1
    // [158] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [159] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [160] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [161] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    .label __7 = $81
    .label __8 = $83
    // [162] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [163] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [164] call memcpy 
    // [186] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [186] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_TEXT
    sta.z memcpy.destination+1
    // [186] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [165] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [166] call memcpy 
    // [186] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [186] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_COLORS
    sta.z memcpy.destination+1
    // [186] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [167] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [168] call memset 
    // [177] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [177] phi (byte) memset::c#8 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [177] phi (void*) memset::str#7 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str+1
    // [177] phi (word) memset::num#6 = (byte) $28 [phi:cscroll::@3->memset#2] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    jmp __b4
    // cscroll::@4
  __b4:
    // [169] (byte) memset::c#1 ← (byte) conio_textcolor -- vbuz1=vbuz2 
    lda.z conio_textcolor
    sta.z memset.c
    // [170] call memset 
    // [177] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [177] phi (byte) memset::c#8 = (byte) memset::c#1 [phi:cscroll::@4->memset#0] -- register_copy 
    // [177] phi (void*) memset::str#7 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str+1
    // [177] phi (word) memset::num#6 = (byte) $28 [phi:cscroll::@4->memset#2] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [171] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 -- pbuz1=pbuz2_minus_vwuc1 
    lda.z conio_cursor_text
    sec
    sbc #<$28
    sta.z __7
    lda.z conio_cursor_text+1
    sbc #>$28
    sta.z __7+1
    // [172] (byte*) conio_cursor_text ← (byte*~) cscroll::$7 -- pbuz1=pbuz2 
    lda.z __7
    sta.z conio_cursor_text
    lda.z __7+1
    sta.z conio_cursor_text+1
    // [173] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 -- pbuz1=pbuz2_minus_vwuc1 
    lda.z conio_cursor_color
    sec
    sbc #<$28
    sta.z __8
    lda.z conio_cursor_color+1
    sbc #>$28
    sta.z __8+1
    // [174] (byte*) conio_cursor_color ← (byte*~) cscroll::$8 -- pbuz1=pbuz2 
    lda.z __8
    sta.z conio_cursor_color
    lda.z __8+1
    sta.z conio_cursor_color+1
    // [175] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [176] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($1b) str, byte zp($1d) c, word zp($19) num)
memset: {
    .label end = $85
    .label dst = $1e
    .label c = $1d
    .label num = $19
    .label str = $1b
    // [178] if((word) memset::num#6<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [179] (byte*) memset::end#0 ← (byte*)(void*) memset::str#7 + (word) memset::num#6 -- pbuz1=pbuz2_plus_vwuz3 
    lda.z str
    clc
    adc.z num
    sta.z end
    lda.z str+1
    adc.z num+1
    sta.z end+1
    // [180] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#7 -- pbuz1=pbuz2 
    lda.z str
    sta.z dst
    lda.z str+1
    sta.z dst+1
    // [181] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [181] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [182] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [183] return 
    rts
    // memset::@3
  __b3:
    // [184] *((byte*) memset::dst#2) ← (byte) memset::c#8 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // [185] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($22) destination, void* zp($20) source)
memcpy: {
    .label src_end = $87
    .label dst = $26
    .label src = $24
    .label source = $20
    .label destination = $22
    // [187] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [188] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 -- pbuz1=pbuz2 
    lda.z source
    sta.z src
    lda.z source+1
    sta.z src+1
    // [189] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 -- pbuz1=pbuz2 
    lda.z destination
    sta.z dst
    lda.z destination+1
    sta.z dst+1
    // [190] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [190] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [190] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [191] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [192] return 
    rts
    // memcpy::@2
  __b2:
    // [193] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [194] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [195] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp($28) s)
cputs: {
    .label c = $89
    .label s = $28
    // [197] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [197] phi (to_nomodify byte*) cputs::s#4 = (to_nomodify byte*) cputs::s#5 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [198] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#4) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (s),y
    sta.z c
    // [199] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#4 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [200] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z c
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [201] return 
    rts
    // cputs::@2
  __b2:
    // [202] (byte) cputc::c#0 ← (byte) cputs::c#1 -- vbuz1=vbuz2 
    lda.z c
    sta.z cputc.c
    // [203] call cputc 
    // [139] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
  cputc_from___b2:
    // [139] phi (byte) cputc::c#3 = (byte) cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1_from___b2
}
  // strupr
// Converts a string to uppercase.
strupr: {
    .label str = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    .label __0 = $8b
    .label src = $2a
    // [205] phi from strupr to strupr::@1 [phi:strupr->strupr::@1]
  __b1_from_strupr:
    // [205] phi (byte*) strupr::src#2 = (const byte*) strupr::str#0 [phi:strupr->strupr::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z src
    lda #>str
    sta.z src+1
    jmp __b1
    // strupr::@1
  __b1:
    // [206] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (src),y
    cmp #0
    bne __b2
    jmp __breturn
    // strupr::@return
  __breturn:
    // [207] return 
    rts
    // strupr::@2
  __b2:
    // [208] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta.z toupper.ch
    // [209] call toupper 
    jsr toupper
    // [210] (byte) toupper::return#3 ← (byte) toupper::return#2 -- vbuz1=vbuz2 
    lda.z toupper.return
    sta.z toupper.return_1
    jmp __b3
    // strupr::@3
  __b3:
    // [211] (byte~) strupr::$0 ← (byte) toupper::return#3 -- vbuz1=vbuz2 
    lda.z toupper.return_1
    sta.z __0
    // [212] *((byte*) strupr::src#2) ← (byte~) strupr::$0 -- _deref_pbuz1=vbuz2 
    lda.z __0
    ldy #0
    sta (src),y
    // [213] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [205] phi from strupr::@3 to strupr::@1 [phi:strupr::@3->strupr::@1]
  __b1_from___b3:
    // [205] phi (byte*) strupr::src#2 = (byte*) strupr::src#1 [phi:strupr::@3->strupr::@1#0] -- register_copy 
    jmp __b1
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte zp($2c) ch)
toupper: {
    .label return = $2c
    .label ch = $2c
    .label return_1 = $8a
    // [214] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuz1_lt_vbuc1_then_la1 
    lda.z ch
    cmp #'a'
    bcc __breturn_from_toupper
    jmp __b2
    // toupper::@2
  __b2:
    // [215] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuz1_le_vbuc1_then_la1 
    lda #'z'
    cmp.z ch
    bcs __b1
    // [217] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
  __breturn_from_toupper:
  __breturn_from___b1:
  __breturn_from___b2:
    // [217] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    jmp __breturn
    // toupper::@1
  __b1:
    // [216] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuz1=vbuz1_plus_vbuc1 
    lax.z return
    axs #-['A'-'a']
    stx.z return
    jmp __breturn_from___b1
    // toupper::@return
  __breturn:
    // [218] return 
    rts
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($2d) str)
strlen: {
    .label len = $2f
    .label str = $2d
    .label return = $77
    // [220] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
  __b1_from_strlen:
    // [220] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    lda #>0
    sta.z len+1
    // [220] phi (byte*) strlen::str#2 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:strlen->strlen::@1#1] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str+1
    jmp __b1
    // strlen::@1
  __b1:
    // [221] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // strlen::@return
  __breturn:
    // [222] return 
    rts
    // strlen::@2
  __b2:
    // [223] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // [224] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [220] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
  __b1_from___b2:
    // [220] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [220] phi (byte*) strlen::str#2 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // ultoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// ultoa(dword zp($32) value, byte* zp($8d) buffer)
ultoa: {
    .const max_digits = $a
    .label __10 = $8f
    .label __11 = $8c
    .label digit_value = $90
    .label buffer = $8d
    .label digit = $31
    .label value = $32
    .label buffer_1 = $37
    .label started = $36
    // [226] phi from ultoa to ultoa::@1 [phi:ultoa->ultoa::@1]
  __b1_from_ultoa:
    // [226] phi (byte*) ultoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:ultoa->ultoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1+1
    // [226] phi (byte) ultoa::started#2 = (byte) 0 [phi:ultoa->ultoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [226] phi (dword) ultoa::value#2 = (dword) ultoa::value#1 [phi:ultoa->ultoa::@1#2] -- register_copy 
    // [226] phi (byte) ultoa::digit#2 = (byte) 0 [phi:ultoa->ultoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // ultoa::@1
  __b1:
    // [227] if((byte) ultoa::digit#2<(const byte) ultoa::max_digits#1-(byte) 1) goto ultoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // ultoa::@3
  __b3:
    // [228] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 -- vbuz1=_byte_vduz2 
    lda.z value
    sta.z __11
    // [229] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __11
    lda DIGITS,y
    ldy #0
    sta (buffer_1),y
    // [230] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz2 
    lda.z buffer_1
    clc
    adc #1
    sta.z buffer
    lda.z buffer_1+1
    adc #0
    sta.z buffer+1
    // [231] *((byte*) ultoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa::@return
  __breturn:
    // [232] return 
    rts
    // ultoa::@2
  __b2:
    // [233] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z digit
    asl
    asl
    sta.z __10
    // [234] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) -- vduz1=pduc1_derefidx_vbuz2 
    ldy.z __10
    lda RADIX_DECIMAL_VALUES_LONG,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES_LONG+1,y
    sta.z digit_value+1
    lda RADIX_DECIMAL_VALUES_LONG+2,y
    sta.z digit_value+2
    lda RADIX_DECIMAL_VALUES_LONG+3,y
    sta.z digit_value+3
    // [235] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // ultoa::@7
  __b7:
    // [236] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z digit_value+3
    bcc !+
    bne __b5
    lda.z value+2
    cmp.z digit_value+2
    bcc !+
    bne __b5
    lda.z value+1
    cmp.z digit_value+1
    bcc !+
    bne __b5
    lda.z value
    cmp.z digit_value
    bcs __b5
  !:
    // [237] phi from ultoa::@7 to ultoa::@4 [phi:ultoa::@7->ultoa::@4]
  __b4_from___b7:
    // [237] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#11 [phi:ultoa::@7->ultoa::@4#0] -- register_copy 
    // [237] phi (byte) ultoa::started#4 = (byte) ultoa::started#2 [phi:ultoa::@7->ultoa::@4#1] -- register_copy 
    // [237] phi (dword) ultoa::value#6 = (dword) ultoa::value#2 [phi:ultoa::@7->ultoa::@4#2] -- register_copy 
    jmp __b4
    // ultoa::@4
  __b4:
    // [238] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [226] phi from ultoa::@4 to ultoa::@1 [phi:ultoa::@4->ultoa::@1]
  __b1_from___b4:
    // [226] phi (byte*) ultoa::buffer#11 = (byte*) ultoa::buffer#14 [phi:ultoa::@4->ultoa::@1#0] -- register_copy 
    // [226] phi (byte) ultoa::started#2 = (byte) ultoa::started#4 [phi:ultoa::@4->ultoa::@1#1] -- register_copy 
    // [226] phi (dword) ultoa::value#2 = (dword) ultoa::value#6 [phi:ultoa::@4->ultoa::@1#2] -- register_copy 
    // [226] phi (byte) ultoa::digit#2 = (byte) ultoa::digit#1 [phi:ultoa::@4->ultoa::@1#3] -- register_copy 
    jmp __b1
    // ultoa::@5
  __b5:
    // [239] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11 -- pbuz1=pbuz2 
    lda.z buffer_1
    sta.z ultoa_append.buffer
    lda.z buffer_1+1
    sta.z ultoa_append.buffer+1
    // [240] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2 -- vduz1=vduz2 
    lda.z value
    sta.z ultoa_append.value
    lda.z value+1
    sta.z ultoa_append.value+1
    lda.z value+2
    sta.z ultoa_append.value+2
    lda.z value+3
    sta.z ultoa_append.value+3
    // [241] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0 -- vduz1=vduz2 
    lda.z digit_value
    sta.z ultoa_append.sub
    lda.z digit_value+1
    sta.z ultoa_append.sub+1
    lda.z digit_value+2
    sta.z ultoa_append.sub+2
    lda.z digit_value+3
    sta.z ultoa_append.sub+3
    // [242] call ultoa_append 
    // [246] phi from ultoa::@5 to ultoa_append [phi:ultoa::@5->ultoa_append]
  ultoa_append_from___b5:
    jsr ultoa_append
    // [243] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2 -- vduz1=vduz2 
    lda.z ultoa_append.value
    sta.z ultoa_append.return
    lda.z ultoa_append.value+1
    sta.z ultoa_append.return+1
    lda.z ultoa_append.value+2
    sta.z ultoa_append.return+2
    lda.z ultoa_append.value+3
    sta.z ultoa_append.return+3
    jmp __b6
    // ultoa::@6
  __b6:
    // [244] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0 -- vduz1=vduz2 
    lda.z ultoa_append.return
    sta.z value
    lda.z ultoa_append.return+1
    sta.z value+1
    lda.z ultoa_append.return+2
    sta.z value+2
    lda.z ultoa_append.return+3
    sta.z value+3
    // [245] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [237] phi from ultoa::@6 to ultoa::@4 [phi:ultoa::@6->ultoa::@4]
  __b4_from___b6:
    // [237] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#4 [phi:ultoa::@6->ultoa::@4#0] -- register_copy 
    // [237] phi (byte) ultoa::started#4 = (byte) 1 [phi:ultoa::@6->ultoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [237] phi (dword) ultoa::value#6 = (dword) ultoa::value#0 [phi:ultoa::@6->ultoa::@4#2] -- register_copy 
    jmp __b4
}
  // ultoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// ultoa_append(byte* zp($94) buffer, dword zp($39) value, dword zp($96) sub)
ultoa_append: {
    .label buffer = $94
    .label value = $39
    .label sub = $96
    .label return = $9a
    .label digit = $3d
    // [247] phi from ultoa_append to ultoa_append::@1 [phi:ultoa_append->ultoa_append::@1]
  __b1_from_ultoa_append:
    // [247] phi (byte) ultoa_append::digit#2 = (byte) 0 [phi:ultoa_append->ultoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [247] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#0 [phi:ultoa_append->ultoa_append::@1#1] -- register_copy 
    jmp __b1
    // ultoa_append::@1
  __b1:
    // [248] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z sub+3
    bcc !+
    bne __b2
    lda.z value+2
    cmp.z sub+2
    bcc !+
    bne __b2
    lda.z value+1
    cmp.z sub+1
    bcc !+
    bne __b2
    lda.z value
    cmp.z sub
    bcs __b2
  !:
    jmp __b3
    // ultoa_append::@3
  __b3:
    // [249] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa_append::@return
  __breturn:
    // [250] return 
    rts
    // ultoa_append::@2
  __b2:
    // [251] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [252] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 -- vduz1=vduz1_minus_vduz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    lda.z value+2
    sbc.z sub+2
    sta.z value+2
    lda.z value+3
    sbc.z sub+3
    sta.z value+3
    // [247] phi from ultoa_append::@2 to ultoa_append::@1 [phi:ultoa_append::@2->ultoa_append::@1]
  __b1_from___b2:
    // [247] phi (byte) ultoa_append::digit#2 = (byte) ultoa_append::digit#1 [phi:ultoa_append::@2->ultoa_append::@1#0] -- register_copy 
    // [247] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#1 [phi:ultoa_append::@2->ultoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // printf_uchar
// Print an unsigned char using a specific format
// printf_uchar(byte zp($72) uvalue)
printf_uchar: {
    .const format_min_length = 2
    .const format_justify_left = 0
    .const format_zero_padding = 1
    .const format_upper_case = 0
    .label uvalue = $72
    jmp __b1
    // printf_uchar::@1
  __b1:
    // [254] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [255] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#0 -- vbuz1=vbuz2 
    lda.z uvalue
    sta.z uctoa.value
    // [256] call uctoa 
  // Format number into buffer
    // [260] phi from printf_uchar::@1 to uctoa [phi:printf_uchar::@1->uctoa]
  uctoa_from___b1:
    jsr uctoa
    jmp __b2
    // printf_uchar::@2
  __b2:
    // [257] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [258] call printf_number_buffer 
  // Print using format
    // [95] phi from printf_uchar::@2 to printf_number_buffer [phi:printf_uchar::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [95] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_uchar::format_upper_case#0 [phi:printf_uchar::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [95] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#1 [phi:printf_uchar::@2->printf_number_buffer#1] -- register_copy 
    // [95] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_uchar::format_zero_padding#0 [phi:printf_uchar::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [95] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_uchar::format_justify_left#0 [phi:printf_uchar::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [95] phi (byte) printf_number_buffer::format_min_length#2 = (const byte) printf_uchar::format_min_length#0 [phi:printf_uchar::@2->printf_number_buffer#4] -- vbuz1=vbuc1 
    lda #format_min_length
    sta.z printf_number_buffer.format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_uchar::@return
  __breturn:
    // [259] return 
    rts
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte zp($3f) value, byte* zp($9e) buffer)
uctoa: {
    .const max_digits = 2
    .label digit_value = $a0
    .label buffer = $9e
    .label digit = $3e
    .label value = $3f
    .label buffer_1 = $41
    .label started = $40
    // [261] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
  __b1_from_uctoa:
    // [261] phi (byte*) uctoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1+1
    // [261] phi (byte) uctoa::started#2 = (byte) 0 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [261] phi (byte) uctoa::value#2 = (byte) uctoa::value#1 [phi:uctoa->uctoa::@1#2] -- register_copy 
    // [261] phi (byte) uctoa::digit#2 = (byte) 0 [phi:uctoa->uctoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // uctoa::@1
  __b1:
    // [262] if((byte) uctoa::digit#2<(const byte) uctoa::max_digits#2-(byte) 1) goto uctoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // uctoa::@3
  __b3:
    // [263] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z value
    lda DIGITS,y
    ldy #0
    sta (buffer_1),y
    // [264] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz2 
    lda.z buffer_1
    clc
    adc #1
    sta.z buffer
    lda.z buffer_1+1
    adc #0
    sta.z buffer+1
    // [265] *((byte*) uctoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa::@return
  __breturn:
    // [266] return 
    rts
    // uctoa::@2
  __b2:
    // [267] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda RADIX_HEXADECIMAL_VALUES_CHAR,y
    sta.z digit_value
    // [268] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // uctoa::@7
  __b7:
    // [269] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z digit_value
    bcs __b5
    // [270] phi from uctoa::@7 to uctoa::@4 [phi:uctoa::@7->uctoa::@4]
  __b4_from___b7:
    // [270] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#11 [phi:uctoa::@7->uctoa::@4#0] -- register_copy 
    // [270] phi (byte) uctoa::started#4 = (byte) uctoa::started#2 [phi:uctoa::@7->uctoa::@4#1] -- register_copy 
    // [270] phi (byte) uctoa::value#6 = (byte) uctoa::value#2 [phi:uctoa::@7->uctoa::@4#2] -- register_copy 
    jmp __b4
    // uctoa::@4
  __b4:
    // [271] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [261] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
  __b1_from___b4:
    // [261] phi (byte*) uctoa::buffer#11 = (byte*) uctoa::buffer#14 [phi:uctoa::@4->uctoa::@1#0] -- register_copy 
    // [261] phi (byte) uctoa::started#2 = (byte) uctoa::started#4 [phi:uctoa::@4->uctoa::@1#1] -- register_copy 
    // [261] phi (byte) uctoa::value#2 = (byte) uctoa::value#6 [phi:uctoa::@4->uctoa::@1#2] -- register_copy 
    // [261] phi (byte) uctoa::digit#2 = (byte) uctoa::digit#1 [phi:uctoa::@4->uctoa::@1#3] -- register_copy 
    jmp __b1
    // uctoa::@5
  __b5:
    // [272] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11 -- pbuz1=pbuz2 
    lda.z buffer_1
    sta.z uctoa_append.buffer
    lda.z buffer_1+1
    sta.z uctoa_append.buffer+1
    // [273] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2 -- vbuz1=vbuz2 
    lda.z value
    sta.z uctoa_append.value
    // [274] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0 -- vbuz1=vbuz2 
    lda.z digit_value
    sta.z uctoa_append.sub
    // [275] call uctoa_append 
    // [279] phi from uctoa::@5 to uctoa_append [phi:uctoa::@5->uctoa_append]
  uctoa_append_from___b5:
    jsr uctoa_append
    // [276] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2 -- vbuz1=vbuz2 
    lda.z uctoa_append.value
    sta.z uctoa_append.return
    jmp __b6
    // uctoa::@6
  __b6:
    // [277] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0 -- vbuz1=vbuz2 
    lda.z uctoa_append.return
    sta.z value
    // [278] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [270] phi from uctoa::@6 to uctoa::@4 [phi:uctoa::@6->uctoa::@4]
  __b4_from___b6:
    // [270] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#4 [phi:uctoa::@6->uctoa::@4#0] -- register_copy 
    // [270] phi (byte) uctoa::started#4 = (byte) 1 [phi:uctoa::@6->uctoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [270] phi (byte) uctoa::value#6 = (byte) uctoa::value#0 [phi:uctoa::@6->uctoa::@4#2] -- register_copy 
    jmp __b4
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp($a1) buffer, byte zp($43) value, byte zp($a3) sub)
uctoa_append: {
    .label buffer = $a1
    .label value = $43
    .label sub = $a3
    .label return = $a4
    .label digit = $44
    // [280] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
  __b1_from_uctoa_append:
    // [280] phi (byte) uctoa_append::digit#2 = (byte) 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [280] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    jmp __b1
    // uctoa_append::@1
  __b1:
    // [281] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z sub
    bcs __b2
    jmp __b3
    // uctoa_append::@3
  __b3:
    // [282] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa_append::@return
  __breturn:
    // [283] return 
    rts
    // uctoa_append::@2
  __b2:
    // [284] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [285] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    // [280] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
  __b1_from___b2:
    // [280] phi (byte) uctoa_append::digit#2 = (byte) uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [280] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // gotoxy
// Set the cursor to the specified position
gotoxy: {
    .const x = 0
    .const y = $18
    .const offset = y*$28
    jmp __b1
    // gotoxy::@1
  __b1:
    // [287] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // [288] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 -- vbuz1=vbuc1 
    lda #y
    sta.z conio_cursor_y
    // [289] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT+(const word) gotoxy::offset#0 -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT+offset
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT+offset
    sta.z conio_cursor_text+1
    // [290] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS+(const word) gotoxy::offset#0 -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS+offset
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS+offset
    sta.z conio_cursor_color+1
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [291] return 
    rts
}
  // clock
// Returns the processor clock time used since the beginning of an implementation defined era (normally the beginning of the program).
// This uses CIA #2 Timer A+B on the C64, and must be initialized using clock_start()
clock: {
    .label return = $a5
    .label return_1 = $66
    // [292] (dword) clock::return#0 ← (dword) $ffffffff - *((const nomodify dword*) CIA2_TIMER_AB) -- vduz1=vduc1_minus__deref_pduc2 
    lda #<$ffffffff
    sec
    sbc CIA2_TIMER_AB
    sta.z return
    lda #>$ffffffff
    sbc CIA2_TIMER_AB+1
    sta.z return+1
    lda #<$ffffffff>>$10
    sbc CIA2_TIMER_AB+2
    sta.z return+2
    lda #>$ffffffff>>$10
    sbc CIA2_TIMER_AB+3
    sta.z return+3
    jmp __breturn
    // clock::@return
  __breturn:
    // [293] return 
    rts
}
  // eorfill
// EOR fill from the line buffer onto the canvas
// eorfill(byte* zp($48) canvas)
eorfill: {
    .label canvas = $48
    .label eor = $4b
    .label y = $4a
    .label line_column = $46
    .label fill_column = $48
    .label x = $45
    // [295] phi from eorfill to eorfill::@1 [phi:eorfill->eorfill::@1]
  __b1_from_eorfill:
    // [295] phi (byte*) eorfill::fill_column#5 = (byte*) eorfill::canvas#0 [phi:eorfill->eorfill::@1#0] -- register_copy 
    // [295] phi (byte*) eorfill::line_column#2 = (const nomodify byte*) LINE_BUFFER [phi:eorfill->eorfill::@1#1] -- pbuz1=pbuc1 
    lda #<LINE_BUFFER
    sta.z line_column
    lda #>LINE_BUFFER
    sta.z line_column+1
    // [295] phi (byte) eorfill::x#2 = (byte) 0 [phi:eorfill->eorfill::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    jmp __b1
    // eorfill::@1
  __b1:
    // [296] if((byte) eorfill::x#2<(byte) $10) goto eorfill::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x
    cmp #$10
    bcc __b2
    jmp __breturn
    // eorfill::@return
  __breturn:
    // [297] return 
    rts
    // eorfill::@2
  __b2:
    // [298] (byte) eorfill::eor#0 ← *((byte*) eorfill::line_column#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (line_column),y
    sta.z eor
    // [299] phi from eorfill::@2 to eorfill::@3 [phi:eorfill::@2->eorfill::@3]
  __b3_from___b2:
    // [299] phi (byte) eorfill::eor#2 = (byte) eorfill::eor#0 [phi:eorfill::@2->eorfill::@3#0] -- register_copy 
    // [299] phi (byte) eorfill::y#2 = (byte) 1 [phi:eorfill::@2->eorfill::@3#1] -- vbuz1=vbuc1 
    lda #1
    sta.z y
    jmp __b3
    // eorfill::@3
  __b3:
    // [300] if((byte) eorfill::y#2<(byte)(number) $10*(number) 8) goto eorfill::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z y
    cmp #$10*8
    bcc __b4
    jmp __b5
    // eorfill::@5
  __b5:
    // [301] (byte*) eorfill::line_column#1 ← (byte*) eorfill::line_column#2 + (byte)(number) $10*(number) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$10*8
    clc
    adc.z line_column
    sta.z line_column
    bcc !+
    inc.z line_column+1
  !:
    // [302] (byte*) eorfill::fill_column#1 ← (byte*) eorfill::fill_column#5 + (byte)(number) $10*(number) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$10*8
    clc
    adc.z fill_column
    sta.z fill_column
    bcc !+
    inc.z fill_column+1
  !:
    // [303] (byte) eorfill::x#1 ← ++ (byte) eorfill::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [295] phi from eorfill::@5 to eorfill::@1 [phi:eorfill::@5->eorfill::@1]
  __b1_from___b5:
    // [295] phi (byte*) eorfill::fill_column#5 = (byte*) eorfill::fill_column#1 [phi:eorfill::@5->eorfill::@1#0] -- register_copy 
    // [295] phi (byte*) eorfill::line_column#2 = (byte*) eorfill::line_column#1 [phi:eorfill::@5->eorfill::@1#1] -- register_copy 
    // [295] phi (byte) eorfill::x#2 = (byte) eorfill::x#1 [phi:eorfill::@5->eorfill::@1#2] -- register_copy 
    jmp __b1
    // eorfill::@4
  __b4:
    // [304] (byte) eorfill::eor#1 ← (byte) eorfill::eor#2 ^ *((byte*) eorfill::line_column#2 + (byte) eorfill::y#2) -- vbuz1=vbuz1_bxor_pbuz2_derefidx_vbuz3 
    lda.z eor
    ldy.z y
    eor (line_column),y
    sta.z eor
    // [305] *((byte*) eorfill::fill_column#5 + (byte) eorfill::y#2) ← (byte) eorfill::eor#1 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z eor
    ldy.z y
    sta (fill_column),y
    // [306] (byte) eorfill::y#1 ← ++ (byte) eorfill::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [299] phi from eorfill::@4 to eorfill::@3 [phi:eorfill::@4->eorfill::@3]
  __b3_from___b4:
    // [299] phi (byte) eorfill::eor#2 = (byte) eorfill::eor#1 [phi:eorfill::@4->eorfill::@3#0] -- register_copy 
    // [299] phi (byte) eorfill::y#2 = (byte) eorfill::y#1 [phi:eorfill::@4->eorfill::@3#1] -- register_copy 
    jmp __b3
}
  // line
// Draw a EOR friendly line between two points
// Uses bresenham line drawing routine
// line(byte zp($4f) x1, byte zp($50) y1, byte zp($4c) x2, byte zp($4d) y2)
line: {
    .label plot1___0 = $b1
    .label plot1___1 = $b5
    .label plot1___2 = $b2
    .label plot2___0 = $b6
    .label plot2___1 = $ba
    .label plot2___2 = $b7
    .label plot3___0 = $bb
    .label plot3___1 = $bf
    .label plot3___2 = $bc
    .label plot4___0 = $c0
    .label plot4___1 = $c4
    .label plot4___2 = $c1
    .label x1 = $4f
    .label y1 = $50
    .label x2 = $4c
    .label y2 = $4d
    .label x = $4f
    .label y = $50
    .label dx = $aa
    .label dy = $ac
    .label sx = $ae
    .label sy = $b0
    .label e1 = $51
    .label e = $4e
    .label plot1_column = $b3
    .label plot2_x = $4f
    .label plot2_column = $b8
    .label plot3_column = $bd
    .label plot4_column = $c2
    // [308] (byte) abs_u8::u#0 ← (byte) line::x2#11 - (byte) line::x#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x2
    sec
    sbc.z x
    sta.z abs_u8.u
    // [309] call abs_u8 
    // [374] phi from line to abs_u8 [phi:line->abs_u8]
  abs_u8_from_line:
    // [374] phi (byte) abs_u8::u#2 = (byte) abs_u8::u#0 [phi:line->abs_u8#0] -- register_copy 
    jsr abs_u8
    // [310] (byte) abs_u8::return#0 ← (byte) abs_u8::return#4 -- vbuz1=vbuz2 
    lda.z abs_u8.return_2
    sta.z abs_u8.return
    jmp __b12
    // line::@12
  __b12:
    // [311] (byte) line::dx#0 ← (byte) abs_u8::return#0 -- vbuz1=vbuz2 
    lda.z abs_u8.return
    sta.z dx
    // [312] (byte) abs_u8::u#1 ← (byte) line::y2#10 - (byte) line::y#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z y2
    sec
    sbc.z y
    sta.z abs_u8.u
    // [313] call abs_u8 
    // [374] phi from line::@12 to abs_u8 [phi:line::@12->abs_u8]
  abs_u8_from___b12:
    // [374] phi (byte) abs_u8::u#2 = (byte) abs_u8::u#1 [phi:line::@12->abs_u8#0] -- register_copy 
    jsr abs_u8
    // [314] (byte) abs_u8::return#1 ← (byte) abs_u8::return#4 -- vbuz1=vbuz2 
    lda.z abs_u8.return_2
    sta.z abs_u8.return_1
    jmp __b13
    // line::@13
  __b13:
    // [315] (byte) line::dy#0 ← (byte) abs_u8::return#1 -- vbuz1=vbuz2 
    lda.z abs_u8.return_1
    sta.z dy
    // [316] (byte) sgn_u8::u#0 ← (byte) line::x2#11 - (byte) line::x#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x2
    sec
    sbc.z x
    sta.z sgn_u8.u
    // [317] call sgn_u8 
    // [368] phi from line::@13 to sgn_u8 [phi:line::@13->sgn_u8]
  sgn_u8_from___b13:
    // [368] phi (byte) sgn_u8::u#2 = (byte) sgn_u8::u#0 [phi:line::@13->sgn_u8#0] -- register_copy 
    jsr sgn_u8
    // [318] (byte) sgn_u8::return#0 ← (byte) sgn_u8::return#4 -- vbuz1=vbuz2 
    lda.z sgn_u8.return_2
    sta.z sgn_u8.return
    jmp __b14
    // line::@14
  __b14:
    // [319] (byte) line::sx#0 ← (byte) sgn_u8::return#0 -- vbuz1=vbuz2 
    lda.z sgn_u8.return
    sta.z sx
    // [320] (byte) sgn_u8::u#1 ← (byte) line::y2#10 - (byte) line::y#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z y2
    sec
    sbc.z y
    sta.z sgn_u8.u
    // [321] call sgn_u8 
    // [368] phi from line::@14 to sgn_u8 [phi:line::@14->sgn_u8]
  sgn_u8_from___b14:
    // [368] phi (byte) sgn_u8::u#2 = (byte) sgn_u8::u#1 [phi:line::@14->sgn_u8#0] -- register_copy 
    jsr sgn_u8
    // [322] (byte) sgn_u8::return#1 ← (byte) sgn_u8::return#4 -- vbuz1=vbuz2 
    lda.z sgn_u8.return_2
    sta.z sgn_u8.return_1
    jmp __b15
    // line::@15
  __b15:
    // [323] (byte) line::sy#0 ← (byte) sgn_u8::return#1 -- vbuz1=vbuz2 
    lda.z sgn_u8.return_1
    sta.z sy
    // [324] if((byte) line::sx#0!=(byte) $ff) goto line::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z sx
    bne __b1_from___b15
    jmp __b3
    // line::@3
  __b3:
    // [325] (byte) line::y#1 ← ++ (byte) line::y#0 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [326] (byte) line::y2#3 ← ++ (byte) line::y2#10 -- vbuz1=_inc_vbuz1 
    inc.z y2
    // [327] phi from line::@15 line::@3 to line::@1 [phi:line::@15/line::@3->line::@1]
  __b1_from___b15:
  __b1_from___b3:
    // [327] phi (byte) line::y2#13 = (byte) line::y2#10 [phi:line::@15/line::@3->line::@1#0] -- register_copy 
    // [327] phi (byte) line::y#13 = (byte) line::y#0 [phi:line::@15/line::@3->line::@1#1] -- register_copy 
    jmp __b1
    // line::@1
  __b1:
    // [328] if((byte) line::dx#0>(byte) line::dy#0) goto line::@2 -- vbuz1_gt_vbuz2_then_la1 
    lda.z dy
    cmp.z dx
    bcc __b2
    jmp __b4
    // line::@4
  __b4:
    // [329] (byte) line::e#0 ← (byte) line::dy#0 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z dy
    lsr
    sta.z e
    jmp plot1
    // line::plot1
  plot1:
    // [330] (byte~) line::plot1_$0 ← (byte) line::x#0 >> (byte) 3 -- vbuz1=vbuz2_ror_3 
    lda.z x
    lsr
    lsr
    lsr
    sta.z plot1___0
    // [331] (byte~) line::plot1_$2 ← (byte~) line::plot1_$0 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z plot1___0
    asl
    sta.z plot1___2
    // [332] (byte*) line::plot1_column#0 ← *((const byte**) plot_column + (byte~) line::plot1_$2) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z plot1___2
    lda plot_column,y
    sta.z plot1_column
    lda plot_column+1,y
    sta.z plot1_column+1
    // [333] (byte~) line::plot1_$1 ← (byte) line::x#0 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z x
    sta.z plot1___1
    // [334] *((byte*) line::plot1_column#0 + (byte) line::y#13) ← *((byte*) line::plot1_column#0 + (byte) line::y#13) | *((const byte*) plot_bit + (byte~) line::plot1_$1) -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuz3 
    ldy.z y
    lda (plot1_column),y
    ldy.z plot1___1
    ora plot_bit,y
    ldy.z y
    sta (plot1_column),y
    // [335] phi from line::@6 line::plot1 to line::@5 [phi:line::@6/line::plot1->line::@5]
  __b5_from___b6:
  __b5_from_plot1:
    // [335] phi (byte) line::x#10 = (byte) line::x#16 [phi:line::@6/line::plot1->line::@5#0] -- register_copy 
    // [335] phi (byte) line::e#3 = (byte) line::e#5 [phi:line::@6/line::plot1->line::@5#1] -- register_copy 
    // [335] phi (byte) line::y#6 = (byte) line::y#15 [phi:line::@6/line::plot1->line::@5#2] -- register_copy 
    jmp __b5
    // line::@5
  __b5:
    // [336] (byte) line::y#15 ← (byte) line::y#6 + (byte) line::sy#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    // [337] (byte) line::e#1 ← (byte) line::e#3 + (byte) line::dx#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z dx
    sta.z e
    // [338] if((byte) line::dy#0>=(byte) line::e#1) goto line::@6 -- vbuz1_ge_vbuz2_then_la1 
    lda.z dy
    cmp.z e
    bcs __b6_from___b5
    jmp __b7
    // line::@7
  __b7:
    // [339] (byte) line::plot2_x#0 ← (byte) line::x#10 + (byte) line::sx#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z plot2_x
    clc
    adc.z sx
    sta.z plot2_x
    // [340] (byte) line::e#2 ← (byte) line::e#1 - (byte) line::dy#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z dy
    sta.z e
    jmp plot2
    // line::plot2
  plot2:
    // [341] (byte~) line::plot2_$0 ← (byte) line::plot2_x#0 >> (byte) 3 -- vbuz1=vbuz2_ror_3 
    lda.z plot2_x
    lsr
    lsr
    lsr
    sta.z plot2___0
    // [342] (byte~) line::plot2_$2 ← (byte~) line::plot2_$0 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z plot2___0
    asl
    sta.z plot2___2
    // [343] (byte*) line::plot2_column#0 ← *((const byte**) plot_column + (byte~) line::plot2_$2) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z plot2___2
    lda plot_column,y
    sta.z plot2_column
    lda plot_column+1,y
    sta.z plot2_column+1
    // [344] (byte~) line::plot2_$1 ← (byte) line::plot2_x#0 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z plot2_x
    sta.z plot2___1
    // [345] *((byte*) line::plot2_column#0 + (byte) line::y#15) ← *((byte*) line::plot2_column#0 + (byte) line::y#15) | *((const byte*) plot_bit + (byte~) line::plot2_$1) -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuz3 
    ldy.z y
    lda (plot2_column),y
    ldy.z plot2___1
    ora plot_bit,y
    ldy.z y
    sta (plot2_column),y
    // [346] phi from line::@5 line::plot2 to line::@6 [phi:line::@5/line::plot2->line::@6]
  __b6_from___b5:
  __b6_from_plot2:
    // [346] phi (byte) line::x#16 = (byte) line::x#10 [phi:line::@5/line::plot2->line::@6#0] -- register_copy 
    // [346] phi (byte) line::e#5 = (byte) line::e#1 [phi:line::@5/line::plot2->line::@6#1] -- register_copy 
    jmp __b6
    // line::@6
  __b6:
    // [347] if((byte) line::y#15!=(byte) line::y2#13) goto line::@5 -- vbuz1_neq_vbuz2_then_la1 
    lda.z y
    cmp.z y2
    bne __b5_from___b6
    jmp __breturn
    // line::@return
  __breturn:
    // [348] return 
    rts
    // line::@2
  __b2:
    // [349] (byte) line::e1#0 ← (byte) line::dx#0 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z dx
    lsr
    sta.z e1
    // [350] phi from line::@2 line::@9 to line::@8 [phi:line::@2/line::@9->line::@8]
  __b8_from___b2:
  __b8_from___b9:
    // [350] phi (byte) line::e1#3 = (byte) line::e1#0 [phi:line::@2/line::@9->line::@8#0] -- register_copy 
    // [350] phi (byte) line::y#10 = (byte) line::y#13 [phi:line::@2/line::@9->line::@8#1] -- register_copy 
    // [350] phi (byte) line::x#12 = (byte) line::x#0 [phi:line::@2/line::@9->line::@8#2] -- register_copy 
    jmp __b8
    // line::@8
  __b8:
    jmp plot3
    // line::plot3
  plot3:
    // [351] (byte~) line::plot3_$0 ← (byte) line::x#12 >> (byte) 3 -- vbuz1=vbuz2_ror_3 
    lda.z x
    lsr
    lsr
    lsr
    sta.z plot3___0
    // [352] (byte~) line::plot3_$2 ← (byte~) line::plot3_$0 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z plot3___0
    asl
    sta.z plot3___2
    // [353] (byte*) line::plot3_column#0 ← *((const byte**) plot_column + (byte~) line::plot3_$2) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z plot3___2
    lda plot_column,y
    sta.z plot3_column
    lda plot_column+1,y
    sta.z plot3_column+1
    // [354] (byte~) line::plot3_$1 ← (byte) line::x#12 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z x
    sta.z plot3___1
    // [355] *((byte*) line::plot3_column#0 + (byte) line::y#10) ← *((byte*) line::plot3_column#0 + (byte) line::y#10) | *((const byte*) plot_bit + (byte~) line::plot3_$1) -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuz3 
    ldy.z y
    lda (plot3_column),y
    ldy.z plot3___1
    ora plot_bit,y
    ldy.z y
    sta (plot3_column),y
    jmp __b11
    // line::@11
  __b11:
    // [356] (byte) line::x#13 ← (byte) line::x#12 + (byte) line::sx#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    // [357] (byte) line::e1#1 ← (byte) line::e1#3 + (byte) line::dy#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e1
    clc
    adc.z dy
    sta.z e1
    // [358] if((byte) line::dx#0>=(byte) line::e1#1) goto line::@9 -- vbuz1_ge_vbuz2_then_la1 
    lda.z dx
    cmp.z e1
    bcs __b9_from___b11
    jmp __b10
    // line::@10
  __b10:
    // [359] (byte) line::y#3 ← (byte) line::y#10 + (byte) line::sy#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    // [360] (byte) line::e1#2 ← (byte) line::e1#1 - (byte) line::dx#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e1
    sec
    sbc.z dx
    sta.z e1
    // [361] phi from line::@10 line::@11 to line::@9 [phi:line::@10/line::@11->line::@9]
  __b9_from___b10:
  __b9_from___b11:
    // [361] phi (byte) line::e1#7 = (byte) line::e1#2 [phi:line::@10/line::@11->line::@9#0] -- register_copy 
    // [361] phi (byte) line::y#11 = (byte) line::y#3 [phi:line::@10/line::@11->line::@9#1] -- register_copy 
    jmp __b9
    // line::@9
  __b9:
    // [362] if((byte) line::x#13!=(byte) line::x2#11) goto line::@8 -- vbuz1_neq_vbuz2_then_la1 
    lda.z x
    cmp.z x2
    bne __b8_from___b9
    jmp plot4
    // line::plot4
  plot4:
    // [363] (byte~) line::plot4_$0 ← (byte) line::x#13 >> (byte) 3 -- vbuz1=vbuz2_ror_3 
    lda.z x
    lsr
    lsr
    lsr
    sta.z plot4___0
    // [364] (byte~) line::plot4_$2 ← (byte~) line::plot4_$0 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z plot4___0
    asl
    sta.z plot4___2
    // [365] (byte*) line::plot4_column#0 ← *((const byte**) plot_column + (byte~) line::plot4_$2) -- pbuz1=pptc1_derefidx_vbuz2 
    ldy.z plot4___2
    lda plot_column,y
    sta.z plot4_column
    lda plot_column+1,y
    sta.z plot4_column+1
    // [366] (byte~) line::plot4_$1 ← (byte) line::x#13 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z x
    sta.z plot4___1
    // [367] *((byte*) line::plot4_column#0 + (byte) line::y#11) ← *((byte*) line::plot4_column#0 + (byte) line::y#11) | *((const byte*) plot_bit + (byte~) line::plot4_$1) -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuz3 
    ldy.z y
    lda (plot4_column),y
    ldy.z plot4___1
    ora plot_bit,y
    ldy.z y
    sta (plot4_column),y
    jmp __breturn
}
  // sgn_u8
// Get the sign of a 8-bit unsigned number treated as a signed number.
// Returns unsigned -1 if the number is negative
// sgn_u8(byte zp($52) u)
sgn_u8: {
    .label __0 = $c5
    .label u = $52
    .label return = $ad
    .label return_1 = $af
    .label return_2 = $53
    // [369] (byte~) sgn_u8::$0 ← (byte) sgn_u8::u#2 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and.z u
    sta.z __0
    // [370] if((byte) 0!=(byte~) sgn_u8::$0) goto sgn_u8::@1 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z __0
    bne __b1_from_sgn_u8
    // [372] phi from sgn_u8 to sgn_u8::@return [phi:sgn_u8->sgn_u8::@return]
  __breturn_from_sgn_u8:
    // [372] phi (byte) sgn_u8::return#4 = (byte) 1 [phi:sgn_u8->sgn_u8::@return#0] -- vbuz1=vbuc1 
    lda #1
    sta.z return_2
    jmp __breturn
    // [371] phi from sgn_u8 to sgn_u8::@1 [phi:sgn_u8->sgn_u8::@1]
  __b1_from_sgn_u8:
    jmp __b1
    // sgn_u8::@1
  __b1:
    // [372] phi from sgn_u8::@1 to sgn_u8::@return [phi:sgn_u8::@1->sgn_u8::@return]
  __breturn_from___b1:
    // [372] phi (byte) sgn_u8::return#4 = (byte) -1 [phi:sgn_u8::@1->sgn_u8::@return#0] -- vbuz1=vbuc1 
    lda #-1
    sta.z return_2
    jmp __breturn
    // sgn_u8::@return
  __breturn:
    // [373] return 
    rts
}
  // abs_u8
// Get the absolute value of a u-bit unsigned number treated as a signed number.
// abs_u8(byte zp($54) u)
abs_u8: {
    .label __0 = $c6
    .label u = $54
    .label return = $a9
    .label return_1 = $ab
    .label return_2 = $54
    // [375] (byte~) abs_u8::$0 ← (byte) abs_u8::u#2 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and.z u
    sta.z __0
    // [376] if((byte) 0!=(byte~) abs_u8::$0) goto abs_u8::@1 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z __0
    bne __b1
    // [378] phi from abs_u8 abs_u8::@1 to abs_u8::@return [phi:abs_u8/abs_u8::@1->abs_u8::@return]
  __breturn_from_abs_u8:
  __breturn_from___b1:
    // [378] phi (byte) abs_u8::return#4 = (byte) abs_u8::u#2 [phi:abs_u8/abs_u8::@1->abs_u8::@return#0] -- register_copy 
    jmp __breturn
    // abs_u8::@1
  __b1:
    // [377] (byte) abs_u8::return#2 ← - (byte) abs_u8::u#2 -- vbuz1=_neg_vbuz1 
    lda.z return_2
    eor #$ff
    clc
    adc #1
    sta.z return_2
    jmp __breturn_from___b1
    // abs_u8::@return
  __breturn:
    // [379] return 
    rts
}
  // clock_start
// Reset & start the processor clock time. The value can be read using clock().
// This uses CIA #2 Timer A+B on the C64
clock_start: {
    // [380] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Setup CIA#2 timer A to count (down) CPU cycles
    lda #0
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // [381] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [382] *((const nomodify dword*) CIA2_TIMER_AB) ← (dword) $ffffffff -- _deref_pduc1=vduc2 
    lda #<$ffffffff
    sta CIA2_TIMER_AB
    lda #>$ffffffff
    sta CIA2_TIMER_AB+1
    lda #<$ffffffff>>$10
    sta CIA2_TIMER_AB+2
    lda #>$ffffffff>>$10
    sta CIA2_TIMER_AB+3
    // [383] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START|(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [384] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    jmp __breturn
    // clock_start::@return
  __breturn:
    // [385] return 
    rts
}
  // textcolor
// Set the color for text output. The old color setting is returned.
textcolor: {
    // [386] (byte) conio_textcolor ← (const nomodify byte) WHITE -- vbuz1=vbuc1 
    lda #WHITE
    sta.z conio_textcolor
    jmp __breturn
    // textcolor::@return
  __breturn:
    // [387] return 
    rts
}
  // setup_irq
// Setup raster IRQ to change charset at different lines
setup_irq: {
    // asm { sei  }
    sei
    // [389] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // [390] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line to 8 pixels before the border
    lda #$7f
    and VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    // [391] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(byte) 8 -- _deref_pbuc1=vbuc2 
    lda #BORDER_YPOS_BOTTOM-8
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    // [392] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE
    // [393] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1() -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<irq_bottom_1
    sta KERNEL_IRQ
    lda #>irq_bottom_1
    sta KERNEL_IRQ+1
    // asm { cli  }
    cli
    jmp __breturn
    // setup_irq::@return
  __breturn:
    // [395] return 
    rts
}
  // irq_bottom_2
// Interrupt Routine 2
irq_bottom_2: {
    .label __0 = $c8
    // entry interrupt(KERNEL_KEYBOARD)
    // [396] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    // Change border color
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [397] call kbhit 
    jsr kbhit
    // [398] (byte) kbhit::return#2 ← (byte) kbhit::return#0 -- vbuz1=vbuz2 
    lda.z kbhit.return
    sta.z kbhit.return_1
    jmp __b3
    // irq_bottom_2::@3
  __b3:
    // [399] (byte~) irq_bottom_2::$0 ← (byte) kbhit::return#2 -- vbuz1=vbuz2 
    lda.z kbhit.return_1
    sta.z __0
    // [400] if((byte) 0!=(byte~) irq_bottom_2::$0) goto irq_bottom_2::@1 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z __0
    bne __b1
    jmp __b2
    // irq_bottom_2::@2
  __b2:
    // [401] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (volatile byte) canvas_show_memory -- _deref_pbuc1=vbuz1 
    lda.z canvas_show_memory
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    jmp __b1
    // irq_bottom_2::@1
  __b1:
    // [402] (volatile byte) canvas_show_flag ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z canvas_show_flag
    // [403] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS
    // [404] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(byte) 8 -- _deref_pbuc1=vbuc2 
    // Trigger IRQ 1 at 8 pixels before the border
    lda #BORDER_YPOS_BOTTOM-8
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    // [405] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1() -- _deref_pptc1=pprc2 
    lda #<irq_bottom_1
    sta KERNEL_IRQ
    lda #>irq_bottom_1
    sta KERNEL_IRQ+1
    jmp __breturn
    // irq_bottom_2::@return
  __breturn:
    // [406] return  - exit interrupt(KERNEL_KEYBOARD)
    jmp $ea31
}
  // kbhit
// Return true if there's a key waiting, return false if not
kbhit: {
    .label return = $c9
    .label return_1 = $c7
    // [407] *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta CONIO_CIA1_PORT_A
    // [408] (byte) kbhit::return#0 ← ~ *((const nomodify byte*) CONIO_CIA1_PORT_B) -- vbuz1=_bnot__deref_pbuc1 
    lda CONIO_CIA1_PORT_B
    eor #$ff
    sta.z return
    jmp __breturn
    // kbhit::@return
  __breturn:
    // [409] return 
    rts
}
  // irq_bottom_1
// Interrupt Routine 1: Just above last text line.
irq_bottom_1: {
    .const toD0181_return = (>(CONSOLE&$3fff)*4)|(>PETSCII)/4&$f
    // entry interrupt(KERNEL_MIN)
    // [410] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) WHITE -- _deref_pbuc1=vbuc2 
    // Change border color
    lda #WHITE
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [411] phi from irq_bottom_1 to irq_bottom_1::toD0181 [phi:irq_bottom_1->irq_bottom_1::toD0181]
  toD0181_from_irq_bottom_1:
    jmp toD0181
    // irq_bottom_1::toD0181
  toD0181:
    jmp __b1
    // irq_bottom_1::@1
  __b1:
    // [412] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (const byte) irq_bottom_1::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    // Show the cycle counter
    lda #toD0181_return
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    // [413] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS
    // [414] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM -- _deref_pbuc1=vbuc2 
    // Trigger IRQ 2 at bottom of text-line
    lda #BORDER_YPOS_BOTTOM
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    // [415] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_KEYBOARD)(void()) irq_bottom_2() -- _deref_pptc1=pprc2 
    lda #<irq_bottom_2
    sta KERNEL_IRQ
    lda #>irq_bottom_2
    sta KERNEL_IRQ+1
    jmp __breturn
    // irq_bottom_1::@return
  __breturn:
    // [416] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of hexadecimal digits
  RADIX_HEXADECIMAL_VALUES_CHAR: .byte $10
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_LONG: .dword $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a
  // SIN/COS tables
  .align $100
SINTAB:
.fill $200, 63 + 63*sin(i*2*PI/$100)

  // Column offsets
  plot_column: .word LINE_BUFFER, LINE_BUFFER+1*$80, LINE_BUFFER+2*$80, LINE_BUFFER+3*$80, LINE_BUFFER+4*$80, LINE_BUFFER+5*$80, LINE_BUFFER+6*$80, LINE_BUFFER+7*$80, LINE_BUFFER+8*$80, LINE_BUFFER+9*$80, LINE_BUFFER+$a*$80, LINE_BUFFER+$b*$80, LINE_BUFFER+$c*$80, LINE_BUFFER+$d*$80, LINE_BUFFER+$e*$80, LINE_BUFFER+$f*$80
  // The bits used for plotting a pixel
  plot_bit: .byte $80, $40, $20, $10, 8, 4, 2, 1
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte) conio_cursor_x ← (byte) 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] (byte) conio_cursor_y ← (byte) 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [5] (byte) conio_textcolor ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [7] (volatile byte) canvas_show_memory ← (const byte) toD0181_return#0 [ canvas_show_memory printf_buffer ] (  [ canvas_show_memory printf_buffer ] { }  ) always clobbers reg byte a 
Statement [8] (volatile byte) canvas_show_flag ← (byte) 0 [ canvas_show_memory canvas_show_flag printf_buffer ] (  [ canvas_show_memory canvas_show_flag printf_buffer ] { }  ) always clobbers reg byte a 
Statement [20] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK [ canvas_show_memory canvas_show_flag printf_buffer ] ( main:10 [ canvas_show_memory canvas_show_flag printf_buffer ] { }  ) always clobbers reg byte a 
Statement [21] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (const nomodify byte) BLACK [ canvas_show_memory canvas_show_flag printf_buffer ] ( main:10 [ canvas_show_memory canvas_show_flag printf_buffer ] { }  ) always clobbers reg byte a 
Statement [54] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) RED [ conio_textcolor canvas_show_memory canvas_show_flag main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory canvas_show_flag main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ main::p0_idx#11 main::p0_idx#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:8 [ main::p1_idx#2 main::p1_idx#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:9 [ main::p2_idx#2 main::p2_idx#1 ]
Statement [55] if((byte) 0!=(volatile byte) canvas_show_flag) goto main::@9 [ conio_textcolor canvas_show_memory canvas_show_flag main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory canvas_show_flag main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [56] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK [ conio_textcolor canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Statement [57] (byte*) eorfill::canvas#0 ← (byte*) main::canvas#10 [ conio_textcolor canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 eorfill::canvas#0 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 eorfill::canvas#0 printf_buffer ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Statement [59] (word) main::canvas#1 ← (byte*) main::canvas#10 ^ (const nomodify byte*) CANVAS1^(const nomodify byte*) CANVAS2 [ conio_textcolor canvas_show_memory main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [62] (volatile byte) canvas_show_memory ← (volatile byte) canvas_show_memory ^ (const byte) main::toD0181_return#0^(const byte) main::toD0182_return#0 [ conio_textcolor canvas_show_memory main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [63] (volatile byte) canvas_show_flag ← (byte) 1 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [65] (dword) clock::return#2 ← (dword) clock::return#0 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 clock::return#2 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 clock::return#2 printf_buffer ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [66] (dword~) main::$18 ← (dword) clock::return#2 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::$18 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::$18 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [67] (dword) main::cyclecount#0 ← (dword~) main::$18 - (const nomodify dword) CLOCKS_PER_INIT [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [75] (dword) printf_ulong::uvalue#0 ← (dword) main::cyclecount#0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_ulong::uvalue#0 printf_buffer ] ( main:10 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_ulong::uvalue#0 printf_buffer ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } }  ) always clobbers reg byte a 
Statement [77] (byte*) main::canvas#24 ← (byte*)(word) main::canvas#1 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#24 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#24 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [81] (byte*) main::cols#1 ← (byte*) main::cols#5 + (byte) $28 [ canvas_show_memory canvas_show_flag main::y#2 main::screen#5 main::cols#1 printf_buffer ] ( main:10 [ canvas_show_memory canvas_show_flag main::y#2 main::screen#5 main::cols#1 printf_buffer ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::y#2 main::y#1 ]
Statement [82] (byte*) main::screen#1 ← (byte*) main::screen#5 + (byte) $28 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#1 main::screen#1 printf_buffer ] ( main:10 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#1 main::screen#1 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [84] *((byte*) main::cols#5 + (byte) main::x#2) ← (const nomodify byte) WHITE [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#2 printf_buffer ] ( main:10 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#2 printf_buffer ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:12 [ main::x#2 main::x#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:13 [ main::c#2 main::c#4 main::c#1 ]
Statement [85] *((byte*) main::screen#5 + (byte) main::x#2) ← (byte) main::c#2 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#2 printf_buffer ] ( main:10 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#2 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [86] (byte) main::c#1 ← (byte) main::c#2 + (byte) $10 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#1 printf_buffer ] ( main:10 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#1 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [89] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_ulong::uvalue#0 printf_buffer ] ( main:10::printf_ulong:76 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_ulong::uvalue#0 printf_buffer ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [90] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::value#1 ] ( main:10::printf_ulong:76 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::value#1 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [99] (word) strlen::return#2 ← (word) strlen::len#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] ( main:10::printf_ulong:76::printf_number_buffer:93 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:10::printf_uchar:72::printf_number_buffer:258 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:14 [ printf_number_buffer::format_min_length#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:15 [ printf_number_buffer::format_justify_left#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:16 [ printf_number_buffer::format_zero_padding#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:17 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:18 [ printf_number_buffer::format_upper_case#10 ]
Statement [100] (word~) printf_number_buffer::$19 ← (word) strlen::return#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] ( main:10::printf_ulong:76::printf_number_buffer:93 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:10::printf_uchar:72::printf_number_buffer:258 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [101] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] ( main:10::printf_ulong:76::printf_number_buffer:93 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:10::printf_uchar:72::printf_number_buffer:258 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [105] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#2 - (signed byte) printf_number_buffer::len#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] ( main:10::printf_ulong:76::printf_number_buffer:93 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:10::printf_uchar:72::printf_number_buffer:258 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [141] *((byte*) conio_cursor_text) ← (byte) cputc::c#3 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:7 [ main::p0_idx#11 main::p0_idx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:8 [ main::p1_idx#2 main::p1_idx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:9 [ main::p2_idx#2 main::p2_idx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:15 [ printf_number_buffer::format_justify_left#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:16 [ printf_number_buffer::format_zero_padding#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:18 [ printf_number_buffer::format_upper_case#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:20 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:17 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:21 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:22 [ printf_padding::pad#5 ]
Removing always clobbered register reg byte y as potential for zp[1]:23 [ printf_padding::i#2 printf_padding::i#1 ]
Statement [143] *((byte*) conio_cursor_color) ← (byte) conio_textcolor [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:20 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:21 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:22 [ printf_padding::pad#5 ]
Removing always clobbered register reg byte a as potential for zp[1]:23 [ printf_padding::i#2 printf_padding::i#1 ]
Statement [146] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [147] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [153] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x [ conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [154] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0 [ conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [155] (byte*) conio_cursor_text ← (byte*~) cputln::$1 [ conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [156] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0 [ conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [157] (byte*) conio_cursor_color ← (byte*~) cputln::$2 [ conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [158] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [162] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return [ conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [171] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 [ conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [172] (byte*) conio_cursor_text ← (byte*~) cscroll::$7 [ conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [173] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 [ conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [174] (byte*) conio_cursor_color ← (byte*~) cscroll::$8 [ conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [178] if((word) memset::num#6<=(byte) 0) goto memset::@return [ memset::num#6 memset::str#7 memset::c#8 ] ( main:10::memset:13 [ canvas_show_memory canvas_show_flag printf_buffer memset::num#6 memset::str#7 memset::c#8 ] { }  main:10::memset:15 [ canvas_show_memory canvas_show_flag printf_buffer memset::num#6 memset::str#7 memset::c#8 ] { }  main:10::memset:17 [ canvas_show_memory canvas_show_flag printf_buffer memset::num#6 memset::str#7 memset::c#8 ] { }  main:10::memset:29 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer memset::num#6 memset::str#7 memset::c#8 ] { }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:29 [ memset::c#8 memset::c#1 ]
Statement [179] (byte*) memset::end#0 ← (byte*)(void*) memset::str#7 + (word) memset::num#6 [ memset::str#7 memset::c#8 memset::end#0 ] ( main:10::memset:13 [ canvas_show_memory canvas_show_flag printf_buffer memset::str#7 memset::c#8 memset::end#0 ] { }  main:10::memset:15 [ canvas_show_memory canvas_show_flag printf_buffer memset::str#7 memset::c#8 memset::end#0 ] { }  main:10::memset:17 [ canvas_show_memory canvas_show_flag printf_buffer memset::str#7 memset::c#8 memset::end#0 ] { }  main:10::memset:29 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer memset::str#7 memset::c#8 memset::end#0 ] { }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  ) always clobbers reg byte a 
Statement [180] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#7 [ memset::c#8 memset::end#0 memset::dst#4 ] ( main:10::memset:13 [ canvas_show_memory canvas_show_flag printf_buffer memset::c#8 memset::end#0 memset::dst#4 ] { }  main:10::memset:15 [ canvas_show_memory canvas_show_flag printf_buffer memset::c#8 memset::end#0 memset::dst#4 ] { }  main:10::memset:17 [ canvas_show_memory canvas_show_flag printf_buffer memset::c#8 memset::end#0 memset::dst#4 ] { }  main:10::memset:29 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer memset::c#8 memset::end#0 memset::dst#4 ] { }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  ) always clobbers reg byte a 
Statement [182] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#8 memset::end#0 memset::dst#2 ] ( main:10::memset:13 [ canvas_show_memory canvas_show_flag printf_buffer memset::c#8 memset::end#0 memset::dst#2 ] { }  main:10::memset:15 [ canvas_show_memory canvas_show_flag printf_buffer memset::c#8 memset::end#0 memset::dst#2 ] { }  main:10::memset:17 [ canvas_show_memory canvas_show_flag printf_buffer memset::c#8 memset::end#0 memset::dst#2 ] { }  main:10::memset:29 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer memset::c#8 memset::end#0 memset::dst#2 ] { }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  ) always clobbers reg byte a 
Statement [184] *((byte*) memset::dst#2) ← (byte) memset::c#8 [ memset::c#8 memset::end#0 memset::dst#2 ] ( main:10::memset:13 [ canvas_show_memory canvas_show_flag printf_buffer memset::c#8 memset::end#0 memset::dst#2 ] { }  main:10::memset:15 [ canvas_show_memory canvas_show_flag printf_buffer memset::c#8 memset::end#0 memset::dst#2 ] { }  main:10::memset:17 [ canvas_show_memory canvas_show_flag printf_buffer memset::c#8 memset::end#0 memset::dst#2 ] { }  main:10::memset:29 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer memset::c#8 memset::end#0 memset::dst#2 ] { }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:29 [ memset::c#8 memset::c#1 ]
Statement [187] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [188] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [189] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [191] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [193] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [198] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#4) [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer cputs::s#4 cputs::c#1 ] ( main:10::cputs:70 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer cputs::s#4 cputs::c#1 ] { }  main:10::cputs:74 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer cputs::s#4 cputs::c#1 ] { }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer cputs::s#4 cputs::c#1 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer cputs::s#4 cputs::c#1 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a reg byte y 
Statement [206] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 [ strupr::src#2 ] ( main:10::printf_ulong:76::printf_number_buffer:93::strupr:123 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:10::printf_uchar:72::printf_number_buffer:258::strupr:123 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a reg byte y 
Statement [208] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) [ strupr::src#2 toupper::ch#0 ] ( main:10::printf_ulong:76::printf_number_buffer:93::strupr:123 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:10::printf_uchar:72::printf_number_buffer:258::strupr:123 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [212] *((byte*) strupr::src#2) ← (byte~) strupr::$0 [ strupr::src#2 ] ( main:10::printf_ulong:76::printf_number_buffer:93::strupr:123 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:10::printf_uchar:72::printf_number_buffer:258::strupr:123 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte y 
Statement [216] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' [ toupper::return#0 ] ( main:10::printf_ulong:76::printf_number_buffer:93::strupr:123::toupper:209 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:10::printf_uchar:72::printf_number_buffer:258::strupr:123::toupper:209 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a 
Statement [221] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 [ printf_buffer strlen::len#2 strlen::str#2 ] ( main:10::printf_ulong:76::printf_number_buffer:93::strlen:98 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:10::printf_uchar:72::printf_number_buffer:258::strlen:98 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:14 [ printf_number_buffer::format_min_length#2 ]
Statement [228] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 [ printf_buffer ultoa::buffer#11 ultoa::$11 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::buffer#11 ultoa::$11 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [229] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) [ printf_buffer ultoa::buffer#11 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::buffer#11 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [230] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 [ printf_buffer ultoa::buffer#3 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::buffer#3 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [231] *((byte*) ultoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [233] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:49 [ ultoa::digit#2 ultoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:54 [ ultoa::started#2 ultoa::started#4 ]
Statement [234] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [236] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [239] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [240] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [241] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [243] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [244] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [248] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] ( main:10::printf_ulong:76::ultoa:91::ultoa_append:242 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:61 [ ultoa_append::digit#2 ultoa_append::digit#1 ]
Statement [249] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) [ ultoa_append::value#2 ] ( main:10::printf_ulong:76::ultoa:91::ultoa_append:242 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::value#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:49 [ ultoa::digit#2 ultoa::digit#1 ]
Statement [252] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] ( main:10::printf_ulong:76::ultoa:91::ultoa_append:242 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [254] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_uchar::uvalue#0 printf_buffer ] ( main:10::printf_uchar:72 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_uchar::uvalue#0 printf_buffer ] { { printf_uchar::uvalue#0 = main::p0_idx#1 uctoa::value#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:114 [ printf_uchar::uvalue#0 ]
Statement [263] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) [ printf_buffer uctoa::buffer#11 ] ( main:10::printf_uchar:72::uctoa:256 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer uctoa::buffer#11 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [264] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 [ printf_buffer uctoa::buffer#3 ] ( main:10::printf_uchar:72::uctoa:256 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer uctoa::buffer#3 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 uctoa::value#1 } }  ) always clobbers reg byte a 
Statement [265] *((byte*) uctoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:10::printf_uchar:72::uctoa:256 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ] { { printf_uchar::uvalue#0 = main::p0_idx#1 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [272] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11 [ printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] ( main:10::printf_uchar:72::uctoa:256 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:62 [ uctoa::digit#2 uctoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:63 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:160 [ uctoa::digit_value#0 ]
Statement [282] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) [ uctoa_append::value#2 ] ( main:10::printf_uchar:72::uctoa:256::uctoa_append:275 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:62 [ uctoa::digit#2 uctoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:67 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:67 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Statement [285] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 [ uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] ( main:10::printf_uchar:72::uctoa:256::uctoa_append:275 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:163 [ uctoa_append::sub#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:68 [ uctoa_append::digit#2 uctoa_append::digit#1 ]
Statement [287] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 [ conio_cursor_x ] ( main:10::gotoxy:68 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [288] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 [ conio_cursor_x conio_cursor_y ] ( main:10::gotoxy:68 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [289] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT+(const word) gotoxy::offset#0 [ conio_cursor_x conio_cursor_y conio_cursor_text ] ( main:10::gotoxy:68 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text ] { }  ) always clobbers reg byte a 
Statement [290] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS+(const word) gotoxy::offset#0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:10::gotoxy:68 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  ) always clobbers reg byte a 
Statement [292] (dword) clock::return#0 ← (dword) $ffffffff - *((const nomodify dword*) CIA2_TIMER_AB) [ clock::return#0 ] ( main:10::clock:64 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer clock::return#0 ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [298] (byte) eorfill::eor#0 ← *((byte*) eorfill::line_column#2) [ eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#5 eorfill::eor#0 ] ( main:10::eorfill:58 [ conio_textcolor canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#5 eorfill::eor#0 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:69 [ eorfill::x#2 eorfill::x#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:69 [ eorfill::x#2 eorfill::x#1 ]
Statement [301] (byte*) eorfill::line_column#1 ← (byte*) eorfill::line_column#2 + (byte)(number) $10*(number) 8 [ eorfill::x#2 eorfill::fill_column#5 eorfill::line_column#1 ] ( main:10::eorfill:58 [ conio_textcolor canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer eorfill::x#2 eorfill::fill_column#5 eorfill::line_column#1 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Statement [302] (byte*) eorfill::fill_column#1 ← (byte*) eorfill::fill_column#5 + (byte)(number) $10*(number) 8 [ eorfill::x#2 eorfill::line_column#1 eorfill::fill_column#1 ] ( main:10::eorfill:58 [ conio_textcolor canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer eorfill::x#2 eorfill::line_column#1 eorfill::fill_column#1 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Statement [304] (byte) eorfill::eor#1 ← (byte) eorfill::eor#2 ^ *((byte*) eorfill::line_column#2 + (byte) eorfill::y#2) [ eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#5 eorfill::y#2 eorfill::eor#1 ] ( main:10::eorfill:58 [ conio_textcolor canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#5 eorfill::y#2 eorfill::eor#1 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:74 [ eorfill::y#2 eorfill::y#1 ]
Statement [308] (byte) abs_u8::u#0 ← (byte) line::x2#11 - (byte) line::x#0 [ line::x#0 line::y#0 line::x2#11 line::y2#10 abs_u8::u#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 abs_u8::u#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 abs_u8::u#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 abs_u8::u#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:94 [ main::x0#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:95 [ main::y0#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:96 [ main::x1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:97 [ main::y1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:79 [ line::x#12 line::x#10 line::x#16 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::plot2_x#0 line::x#13 ]
Removing always clobbered register reg byte a as potential for zp[1]:80 [ line::y#10 line::y#6 line::y#15 line::y#13 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#11 line::y#3 ]
Removing always clobbered register reg byte a as potential for zp[1]:76 [ line::x2#11 line::x2#0 line::x2#1 line::x2#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:77 [ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ]
Removing always clobbered register reg byte a as potential for zp[1]:98 [ main::x2#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:99 [ main::y2#0 ]
Statement [312] (byte) abs_u8::u#1 ← (byte) line::y2#10 - (byte) line::y#0 [ line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 abs_u8::u#1 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 abs_u8::u#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 abs_u8::u#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 abs_u8::u#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:170 [ line::dx#0 ]
Statement [316] (byte) sgn_u8::u#0 ← (byte) line::x2#11 - (byte) line::x#0 [ line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 line::dy#0 sgn_u8::u#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 line::dy#0 sgn_u8::u#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { sgn_u8::u#0 = sgn_u8::u#2 } { sgn_u8::return#0 = sgn_u8::return#4 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 line::dy#0 sgn_u8::u#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { sgn_u8::u#0 = sgn_u8::u#2 } { sgn_u8::return#0 = sgn_u8::return#4 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 line::dy#0 sgn_u8::u#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { sgn_u8::u#0 = sgn_u8::u#2 } { sgn_u8::return#0 = sgn_u8::return#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:172 [ line::dy#0 ]
Statement [320] (byte) sgn_u8::u#1 ← (byte) line::y2#10 - (byte) line::y#0 [ line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 line::dy#0 line::sx#0 sgn_u8::u#1 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 line::dy#0 line::sx#0 sgn_u8::u#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { sgn_u8::u#1 = sgn_u8::u#2 } { sgn_u8::return#1 = sgn_u8::return#4 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 line::dy#0 line::sx#0 sgn_u8::u#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { sgn_u8::u#1 = sgn_u8::u#2 } { sgn_u8::return#1 = sgn_u8::return#4 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 line::dy#0 line::sx#0 sgn_u8::u#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { sgn_u8::u#1 = sgn_u8::u#2 } { sgn_u8::return#1 = sgn_u8::return#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:174 [ line::sx#0 ]
Statement [329] (byte) line::e#0 ← (byte) line::dy#0 >> (byte) 1 [ line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:176 [ line::sy#0 ]
Statement [330] (byte~) line::plot1_$0 ← (byte) line::x#0 >> (byte) 3 [ line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_$0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:78 [ line::e#3 line::e#5 line::e#0 line::e#1 line::e#2 ]
Statement [331] (byte~) line::plot1_$2 ← (byte~) line::plot1_$0 << (byte) 1 [ line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_$2 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [332] (byte*) line::plot1_column#0 ← *((const byte**) plot_column + (byte~) line::plot1_$2) [ line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_column#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [333] (byte~) line::plot1_$1 ← (byte) line::x#0 & (byte) 7 [ line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_column#0 line::plot1_$1 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_column#0 line::plot1_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_column#0 line::plot1_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_column#0 line::plot1_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [334] *((byte*) line::plot1_column#0 + (byte) line::y#13) ← *((byte*) line::plot1_column#0 + (byte) line::y#13) | *((const byte*) plot_bit + (byte~) line::plot1_$1) [ line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:94 [ main::x0#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:95 [ main::y0#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:96 [ main::x1#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:97 [ main::y1#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:79 [ line::x#12 line::x#10 line::x#16 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::plot2_x#0 line::x#13 ]
Removing always clobbered register reg byte y as potential for zp[1]:170 [ line::dx#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:172 [ line::dy#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:174 [ line::sx#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:176 [ line::sy#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:80 [ line::y#10 line::y#6 line::y#15 line::y#13 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#11 line::y#3 ]
Removing always clobbered register reg byte y as potential for zp[1]:77 [ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ]
Removing always clobbered register reg byte y as potential for zp[1]:78 [ line::e#3 line::e#5 line::e#0 line::e#1 line::e#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:98 [ main::x2#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:99 [ main::y2#0 ]
Statement [336] (byte) line::y#15 ← (byte) line::y#6 + (byte) line::sy#0 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::e#3 line::x#10 line::y#15 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::e#3 line::x#10 line::y#15 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::e#3 line::x#10 line::y#15 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::e#3 line::x#10 line::y#15 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [337] (byte) line::e#1 ← (byte) line::e#3 + (byte) line::dx#0 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#10 line::y#15 line::e#1 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#10 line::y#15 line::e#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#10 line::y#15 line::e#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#10 line::y#15 line::e#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [339] (byte) line::plot2_x#0 ← (byte) line::x#10 + (byte) line::sx#0 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::e#1 line::plot2_x#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::e#1 line::plot2_x#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::e#1 line::plot2_x#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::e#1 line::plot2_x#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [340] (byte) line::e#2 ← (byte) line::e#1 - (byte) line::dy#0 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [341] (byte~) line::plot2_$0 ← (byte) line::plot2_x#0 >> (byte) 3 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_$0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [342] (byte~) line::plot2_$2 ← (byte~) line::plot2_$0 << (byte) 1 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_$2 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [343] (byte*) line::plot2_column#0 ← *((const byte**) plot_column + (byte~) line::plot2_$2) [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_column#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [344] (byte~) line::plot2_$1 ← (byte) line::plot2_x#0 & (byte) 7 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_column#0 line::plot2_$1 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_column#0 line::plot2_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_column#0 line::plot2_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_column#0 line::plot2_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [345] *((byte*) line::plot2_column#0 + (byte) line::y#15) ← *((byte*) line::plot2_column#0 + (byte) line::y#15) | *((const byte*) plot_bit + (byte~) line::plot2_$1) [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a reg byte y 
Statement [349] (byte) line::e1#0 ← (byte) line::dx#0 >> (byte) 1 [ line::x#0 line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::e1#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::e1#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::e1#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::e1#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [351] (byte~) line::plot3_$0 ← (byte) line::x#12 >> (byte) 3 [ line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_$0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:81 [ line::e1#3 line::e1#0 line::e1#7 line::e1#2 line::e1#1 ]
Statement [352] (byte~) line::plot3_$2 ← (byte~) line::plot3_$0 << (byte) 1 [ line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_$2 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [353] (byte*) line::plot3_column#0 ← *((const byte**) plot_column + (byte~) line::plot3_$2) [ line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_column#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [354] (byte~) line::plot3_$1 ← (byte) line::x#12 & (byte) 7 [ line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_column#0 line::plot3_$1 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_column#0 line::plot3_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_column#0 line::plot3_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_column#0 line::plot3_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [355] *((byte*) line::plot3_column#0 + (byte) line::y#10) ← *((byte*) line::plot3_column#0 + (byte) line::y#10) | *((const byte*) plot_bit + (byte~) line::plot3_$1) [ line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:76 [ line::x2#11 line::x2#0 line::x2#1 line::x2#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:81 [ line::e1#3 line::e1#0 line::e1#7 line::e1#2 line::e1#1 ]
Statement [356] (byte) line::x#13 ← (byte) line::x#12 + (byte) line::sx#0 [ line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#10 line::e1#3 line::x#13 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#10 line::e1#3 line::x#13 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#10 line::e1#3 line::x#13 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#10 line::e1#3 line::x#13 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [357] (byte) line::e1#1 ← (byte) line::e1#3 + (byte) line::dy#0 [ line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#10 line::x#13 line::e1#1 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#10 line::x#13 line::e1#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#10 line::x#13 line::e1#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#10 line::x#13 line::e1#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [359] (byte) line::y#3 ← (byte) line::y#10 + (byte) line::sy#0 [ line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#13 line::e1#1 line::y#3 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#13 line::e1#1 line::y#3 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#13 line::e1#1 line::y#3 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#13 line::e1#1 line::y#3 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [360] (byte) line::e1#2 ← (byte) line::e1#1 - (byte) line::dx#0 [ line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#13 line::y#3 line::e1#2 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#13 line::y#3 line::e1#2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#13 line::y#3 line::e1#2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#13 line::y#3 line::e1#2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [363] (byte~) line::plot4_$0 ← (byte) line::x#13 >> (byte) 3 [ line::x#13 line::y#11 line::plot4_$0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#13 line::y#11 line::plot4_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#13 line::y#11 line::plot4_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#13 line::y#11 line::plot4_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [364] (byte~) line::plot4_$2 ← (byte~) line::plot4_$0 << (byte) 1 [ line::x#13 line::y#11 line::plot4_$2 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#13 line::y#11 line::plot4_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#13 line::y#11 line::plot4_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#13 line::y#11 line::plot4_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [365] (byte*) line::plot4_column#0 ← *((const byte**) plot_column + (byte~) line::plot4_$2) [ line::x#13 line::y#11 line::plot4_column#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#13 line::y#11 line::plot4_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#13 line::y#11 line::plot4_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#13 line::y#11 line::plot4_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [366] (byte~) line::plot4_$1 ← (byte) line::x#13 & (byte) 7 [ line::y#11 line::plot4_column#0 line::plot4_$1 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::y#11 line::plot4_column#0 line::plot4_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::y#11 line::plot4_column#0 line::plot4_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::y#11 line::plot4_column#0 line::plot4_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [367] *((byte*) line::plot4_column#0 + (byte) line::y#11) ← *((byte*) line::plot4_column#0 + (byte) line::y#11) | *((const byte*) plot_bit + (byte~) line::plot4_$1) [ ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a reg byte y 
Statement [377] (byte) abs_u8::return#2 ← - (byte) abs_u8::u#2 [ abs_u8::return#2 ] ( main:10::line:38::abs_u8:309 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 abs_u8::return#2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:10::line:45::abs_u8:309 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 abs_u8::return#2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:10::line:50::abs_u8:309 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 abs_u8::return#2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:10::line:38::abs_u8:313 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 abs_u8::return#2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  main:10::line:45::abs_u8:313 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 abs_u8::return#2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  main:10::line:50::abs_u8:313 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 abs_u8::return#2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  ) always clobbers reg byte a 
Statement [380] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (byte) 0 [ ] ( main:10::clock_start:27 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [381] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A [ ] ( main:10::clock_start:27 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [382] *((const nomodify dword*) CIA2_TIMER_AB) ← (dword) $ffffffff [ ] ( main:10::clock_start:27 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [383] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START|(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A [ ] ( main:10::clock_start:27 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [384] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START [ ] ( main:10::clock_start:27 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [386] (byte) conio_textcolor ← (const nomodify byte) WHITE [ conio_textcolor ] ( main:10::textcolor:24 [ canvas_show_memory canvas_show_flag printf_buffer conio_textcolor ] { }  ) always clobbers reg byte a 
Statement [389] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR [ ] ( main:10::setup_irq:22 [ canvas_show_memory canvas_show_flag printf_buffer ] { }  ) always clobbers reg byte a 
Statement [390] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (byte) $7f [ ] ( main:10::setup_irq:22 [ canvas_show_memory canvas_show_flag printf_buffer ] { }  ) always clobbers reg byte a 
Statement [391] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(byte) 8 [ ] ( main:10::setup_irq:22 [ canvas_show_memory canvas_show_flag printf_buffer ] { }  ) always clobbers reg byte a 
Statement [392] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER [ ] ( main:10::setup_irq:22 [ canvas_show_memory canvas_show_flag printf_buffer ] { }  ) always clobbers reg byte a 
Statement [393] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1() [ ] ( main:10::setup_irq:22 [ canvas_show_memory canvas_show_flag printf_buffer ] { }  ) always clobbers reg byte a 
Statement [396] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK [ canvas_show_memory ] (  [ canvas_show_memory ] { { kbhit::return#0 = kbhit::return#2 } }  ) always clobbers reg byte a 
Statement [401] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (volatile byte) canvas_show_memory [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [402] (volatile byte) canvas_show_flag ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [403] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [404] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(byte) 8 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [405] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1() [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [407] *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (byte) 0 [ ] ( kbhit:397 [ canvas_show_memory ] { { kbhit::return#0 = kbhit::return#2 } }  ) always clobbers reg byte a 
Statement [408] (byte) kbhit::return#0 ← ~ *((const nomodify byte*) CONIO_CIA1_PORT_B) [ kbhit::return#0 ] ( kbhit:397 [ canvas_show_memory kbhit::return#0 ] { { kbhit::return#0 = kbhit::return#2 } }  ) always clobbers reg byte a 
Statement [410] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) WHITE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [412] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (const byte) irq_bottom_1::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [413] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [414] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [415] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_KEYBOARD)(void()) irq_bottom_2() [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] (byte) conio_cursor_x ← (byte) 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] (byte) conio_cursor_y ← (byte) 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [5] (byte) conio_textcolor ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [7] (volatile byte) canvas_show_memory ← (const byte) toD0181_return#0 [ canvas_show_memory printf_buffer ] (  [ canvas_show_memory printf_buffer ] { }  ) always clobbers reg byte a 
Statement [8] (volatile byte) canvas_show_flag ← (byte) 0 [ canvas_show_memory canvas_show_flag printf_buffer ] (  [ canvas_show_memory canvas_show_flag printf_buffer ] { }  ) always clobbers reg byte a 
Statement [20] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK [ canvas_show_memory canvas_show_flag printf_buffer ] ( main:10 [ canvas_show_memory canvas_show_flag printf_buffer ] { }  ) always clobbers reg byte a 
Statement [21] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (const nomodify byte) BLACK [ canvas_show_memory canvas_show_flag printf_buffer ] ( main:10 [ canvas_show_memory canvas_show_flag printf_buffer ] { }  ) always clobbers reg byte a 
Statement [54] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) RED [ conio_textcolor canvas_show_memory canvas_show_flag main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory canvas_show_flag main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [55] if((byte) 0!=(volatile byte) canvas_show_flag) goto main::@9 [ conio_textcolor canvas_show_memory canvas_show_flag main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory canvas_show_flag main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [56] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK [ conio_textcolor canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Statement [57] (byte*) eorfill::canvas#0 ← (byte*) main::canvas#10 [ conio_textcolor canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 eorfill::canvas#0 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 eorfill::canvas#0 printf_buffer ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Statement [59] (word) main::canvas#1 ← (byte*) main::canvas#10 ^ (const nomodify byte*) CANVAS1^(const nomodify byte*) CANVAS2 [ conio_textcolor canvas_show_memory main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [62] (volatile byte) canvas_show_memory ← (volatile byte) canvas_show_memory ^ (const byte) main::toD0181_return#0^(const byte) main::toD0182_return#0 [ conio_textcolor canvas_show_memory main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [63] (volatile byte) canvas_show_flag ← (byte) 1 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [65] (dword) clock::return#2 ← (dword) clock::return#0 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 clock::return#2 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 clock::return#2 printf_buffer ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [66] (dword~) main::$18 ← (dword) clock::return#2 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::$18 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::$18 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [67] (dword) main::cyclecount#0 ← (dword~) main::$18 - (const nomodify dword) CLOCKS_PER_INIT [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [75] (dword) printf_ulong::uvalue#0 ← (dword) main::cyclecount#0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_ulong::uvalue#0 printf_buffer ] ( main:10 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_ulong::uvalue#0 printf_buffer ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } }  ) always clobbers reg byte a 
Statement [77] (byte*) main::canvas#24 ← (byte*)(word) main::canvas#1 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#24 printf_buffer ] ( main:10 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#24 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [81] (byte*) main::cols#1 ← (byte*) main::cols#5 + (byte) $28 [ canvas_show_memory canvas_show_flag main::y#2 main::screen#5 main::cols#1 printf_buffer ] ( main:10 [ canvas_show_memory canvas_show_flag main::y#2 main::screen#5 main::cols#1 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [82] (byte*) main::screen#1 ← (byte*) main::screen#5 + (byte) $28 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#1 main::screen#1 printf_buffer ] ( main:10 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#1 main::screen#1 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [84] *((byte*) main::cols#5 + (byte) main::x#2) ← (const nomodify byte) WHITE [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#2 printf_buffer ] ( main:10 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#2 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [85] *((byte*) main::screen#5 + (byte) main::x#2) ← (byte) main::c#2 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#2 printf_buffer ] ( main:10 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#2 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [86] (byte) main::c#1 ← (byte) main::c#2 + (byte) $10 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#1 printf_buffer ] ( main:10 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#1 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [89] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_ulong::uvalue#0 printf_buffer ] ( main:10::printf_ulong:76 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_ulong::uvalue#0 printf_buffer ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [90] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::value#1 ] ( main:10::printf_ulong:76 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::value#1 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [99] (word) strlen::return#2 ← (word) strlen::len#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] ( main:10::printf_ulong:76::printf_number_buffer:93 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:10::printf_uchar:72::printf_number_buffer:258 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [100] (word~) printf_number_buffer::$19 ← (word) strlen::return#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] ( main:10::printf_ulong:76::printf_number_buffer:93 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:10::printf_uchar:72::printf_number_buffer:258 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [101] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] ( main:10::printf_ulong:76::printf_number_buffer:93 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:10::printf_uchar:72::printf_number_buffer:258 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::len#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [105] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#2 - (signed byte) printf_number_buffer::len#2 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] ( main:10::printf_ulong:76::printf_number_buffer:93 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:10::printf_uchar:72::printf_number_buffer:258 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [141] *((byte*) conio_cursor_text) ← (byte) cputc::c#3 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte y 
Statement [143] *((byte*) conio_cursor_color) ← (byte) conio_textcolor [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [146] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [147] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [153] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x [ conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [154] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0 [ conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_color conio_textcolor cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [155] (byte*) conio_cursor_text ← (byte*~) cputln::$1 [ conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [156] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0 [ conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_textcolor cputln::$2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [157] (byte*) conio_cursor_color ← (byte*~) cputln::$2 [ conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [158] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [162] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return [ conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [171] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 [ conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color conio_textcolor cscroll::$7 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [172] (byte*) conio_cursor_text ← (byte*~) cscroll::$7 [ conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [173] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 [ conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_textcolor cscroll::$8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [174] (byte*) conio_cursor_color ← (byte*~) cscroll::$8 [ conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [178] if((word) memset::num#6<=(byte) 0) goto memset::@return [ memset::num#6 memset::str#7 memset::c#8 ] ( main:10::memset:13 [ canvas_show_memory canvas_show_flag printf_buffer memset::num#6 memset::str#7 memset::c#8 ] { }  main:10::memset:15 [ canvas_show_memory canvas_show_flag printf_buffer memset::num#6 memset::str#7 memset::c#8 ] { }  main:10::memset:17 [ canvas_show_memory canvas_show_flag printf_buffer memset::num#6 memset::str#7 memset::c#8 ] { }  main:10::memset:29 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer memset::num#6 memset::str#7 memset::c#8 ] { }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::num#6 memset::str#7 memset::c#8 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  ) always clobbers reg byte a 
Statement [179] (byte*) memset::end#0 ← (byte*)(void*) memset::str#7 + (word) memset::num#6 [ memset::str#7 memset::c#8 memset::end#0 ] ( main:10::memset:13 [ canvas_show_memory canvas_show_flag printf_buffer memset::str#7 memset::c#8 memset::end#0 ] { }  main:10::memset:15 [ canvas_show_memory canvas_show_flag printf_buffer memset::str#7 memset::c#8 memset::end#0 ] { }  main:10::memset:17 [ canvas_show_memory canvas_show_flag printf_buffer memset::str#7 memset::c#8 memset::end#0 ] { }  main:10::memset:29 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer memset::str#7 memset::c#8 memset::end#0 ] { }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::str#7 memset::c#8 memset::end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  ) always clobbers reg byte a 
Statement [180] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#7 [ memset::c#8 memset::end#0 memset::dst#4 ] ( main:10::memset:13 [ canvas_show_memory canvas_show_flag printf_buffer memset::c#8 memset::end#0 memset::dst#4 ] { }  main:10::memset:15 [ canvas_show_memory canvas_show_flag printf_buffer memset::c#8 memset::end#0 memset::dst#4 ] { }  main:10::memset:17 [ canvas_show_memory canvas_show_flag printf_buffer memset::c#8 memset::end#0 memset::dst#4 ] { }  main:10::memset:29 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer memset::c#8 memset::end#0 memset::dst#4 ] { }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  ) always clobbers reg byte a 
Statement [182] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#8 memset::end#0 memset::dst#2 ] ( main:10::memset:13 [ canvas_show_memory canvas_show_flag printf_buffer memset::c#8 memset::end#0 memset::dst#2 ] { }  main:10::memset:15 [ canvas_show_memory canvas_show_flag printf_buffer memset::c#8 memset::end#0 memset::dst#2 ] { }  main:10::memset:17 [ canvas_show_memory canvas_show_flag printf_buffer memset::c#8 memset::end#0 memset::dst#2 ] { }  main:10::memset:29 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer memset::c#8 memset::end#0 memset::dst#2 ] { }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  ) always clobbers reg byte a 
Statement [184] *((byte*) memset::dst#2) ← (byte) memset::c#8 [ memset::c#8 memset::end#0 memset::dst#2 ] ( main:10::memset:13 [ canvas_show_memory canvas_show_flag printf_buffer memset::c#8 memset::end#0 memset::dst#2 ] { }  main:10::memset:15 [ canvas_show_memory canvas_show_flag printf_buffer memset::c#8 memset::end#0 memset::dst#2 ] { }  main:10::memset:17 [ canvas_show_memory canvas_show_flag printf_buffer memset::c#8 memset::end#0 memset::dst#2 ] { }  main:10::memset:29 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer memset::c#8 memset::end#0 memset::dst#2 ] { }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:168 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memset:170 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memset::c#8 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#8 conio_textcolor } }  ) always clobbers reg byte a reg byte y 
Statement [187] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [188] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [189] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [191] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a 
Statement [193] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:164 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cscroll:149::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputc:116::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:113::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:120::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_ulong:76::printf_number_buffer:93::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::printf_uchar:72::printf_number_buffer:258::printf_padding:130::cputc:137::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:10::cputs:70::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::cputs:74::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125::cputc:203::cputln:152::cscroll:160::memcpy:166 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [198] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#4) [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer cputs::s#4 cputs::c#1 ] ( main:10::cputs:70 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer cputs::s#4 cputs::c#1 ] { }  main:10::cputs:74 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer cputs::s#4 cputs::c#1 ] { }  main:10::printf_ulong:76::printf_number_buffer:93::cputs:125 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer cputs::s#4 cputs::c#1 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:10::printf_uchar:72::printf_number_buffer:258::cputs:125 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer cputs::s#4 cputs::c#1 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a reg byte y 
Statement [206] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 [ strupr::src#2 ] ( main:10::printf_ulong:76::printf_number_buffer:93::strupr:123 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:10::printf_uchar:72::printf_number_buffer:258::strupr:123 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a reg byte y 
Statement [208] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) [ strupr::src#2 toupper::ch#0 ] ( main:10::printf_ulong:76::printf_number_buffer:93::strupr:123 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:10::printf_uchar:72::printf_number_buffer:258::strupr:123 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [212] *((byte*) strupr::src#2) ← (byte~) strupr::$0 [ strupr::src#2 ] ( main:10::printf_ulong:76::printf_number_buffer:93::strupr:123 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  main:10::printf_uchar:72::printf_number_buffer:258::strupr:123 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte y 
Statement [216] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' [ toupper::return#0 ] ( main:10::printf_ulong:76::printf_number_buffer:93::strupr:123::toupper:209 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:10::printf_uchar:72::printf_number_buffer:258::strupr:123::toupper:209 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a 
Statement [221] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 [ printf_buffer strlen::len#2 strlen::str#2 ] ( main:10::printf_ulong:76::printf_number_buffer:93::strlen:98 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:10::printf_uchar:72::printf_number_buffer:258::strlen:98 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Statement [228] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 [ printf_buffer ultoa::buffer#11 ultoa::$11 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::buffer#11 ultoa::$11 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [229] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) [ printf_buffer ultoa::buffer#11 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::buffer#11 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [230] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 [ printf_buffer ultoa::buffer#3 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::buffer#3 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [231] *((byte*) ultoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [233] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [234] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [236] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [239] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [240] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [241] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [243] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [244] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] ( main:10::printf_ulong:76::ultoa:91 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [248] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] ( main:10::printf_ulong:76::ultoa:91::ultoa_append:242 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [249] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) [ ultoa_append::value#2 ] ( main:10::printf_ulong:76::ultoa:91::ultoa_append:242 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::value#2 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [252] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] ( main:10::printf_ulong:76::ultoa:91::ultoa_append:242 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] { { printf_ulong::uvalue#0 = main::cyclecount#0 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [254] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_uchar::uvalue#0 printf_buffer ] ( main:10::printf_uchar:72 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_uchar::uvalue#0 printf_buffer ] { { printf_uchar::uvalue#0 = main::p0_idx#1 uctoa::value#1 } }  ) always clobbers reg byte a 
Statement [263] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) [ printf_buffer uctoa::buffer#11 ] ( main:10::printf_uchar:72::uctoa:256 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer uctoa::buffer#11 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [264] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 [ printf_buffer uctoa::buffer#3 ] ( main:10::printf_uchar:72::uctoa:256 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer uctoa::buffer#3 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 uctoa::value#1 } }  ) always clobbers reg byte a 
Statement [265] *((byte*) uctoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:10::printf_uchar:72::uctoa:256 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer ] { { printf_uchar::uvalue#0 = main::p0_idx#1 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [272] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11 [ printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] ( main:10::printf_uchar:72::uctoa:256 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [282] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) [ uctoa_append::value#2 ] ( main:10::printf_uchar:72::uctoa:256::uctoa_append:275 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [285] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 [ uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] ( main:10::printf_uchar:72::uctoa:256::uctoa_append:275 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color conio_textcolor printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { printf_uchar::uvalue#0 = main::p0_idx#1 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [287] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 [ conio_cursor_x ] ( main:10::gotoxy:68 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [288] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 [ conio_cursor_x conio_cursor_y ] ( main:10::gotoxy:68 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [289] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT+(const word) gotoxy::offset#0 [ conio_cursor_x conio_cursor_y conio_cursor_text ] ( main:10::gotoxy:68 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text ] { }  ) always clobbers reg byte a 
Statement [290] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS+(const word) gotoxy::offset#0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:10::gotoxy:68 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 main::cyclecount#0 printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  ) always clobbers reg byte a 
Statement [292] (dword) clock::return#0 ← (dword) $ffffffff - *((const nomodify dword*) CIA2_TIMER_AB) [ clock::return#0 ] ( main:10::clock:64 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 printf_buffer clock::return#0 ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [298] (byte) eorfill::eor#0 ← *((byte*) eorfill::line_column#2) [ eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#5 eorfill::eor#0 ] ( main:10::eorfill:58 [ conio_textcolor canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#5 eorfill::eor#0 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a reg byte y 
Statement [301] (byte*) eorfill::line_column#1 ← (byte*) eorfill::line_column#2 + (byte)(number) $10*(number) 8 [ eorfill::x#2 eorfill::fill_column#5 eorfill::line_column#1 ] ( main:10::eorfill:58 [ conio_textcolor canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer eorfill::x#2 eorfill::fill_column#5 eorfill::line_column#1 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Statement [302] (byte*) eorfill::fill_column#1 ← (byte*) eorfill::fill_column#5 + (byte)(number) $10*(number) 8 [ eorfill::x#2 eorfill::line_column#1 eorfill::fill_column#1 ] ( main:10::eorfill:58 [ conio_textcolor canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer eorfill::x#2 eorfill::line_column#1 eorfill::fill_column#1 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Statement [304] (byte) eorfill::eor#1 ← (byte) eorfill::eor#2 ^ *((byte*) eorfill::line_column#2 + (byte) eorfill::y#2) [ eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#5 eorfill::y#2 eorfill::eor#1 ] ( main:10::eorfill:58 [ conio_textcolor canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 printf_buffer eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#5 eorfill::y#2 eorfill::eor#1 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Statement [308] (byte) abs_u8::u#0 ← (byte) line::x2#11 - (byte) line::x#0 [ line::x#0 line::y#0 line::x2#11 line::y2#10 abs_u8::u#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 abs_u8::u#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 abs_u8::u#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 abs_u8::u#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  ) always clobbers reg byte a 
Statement [312] (byte) abs_u8::u#1 ← (byte) line::y2#10 - (byte) line::y#0 [ line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 abs_u8::u#1 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 abs_u8::u#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 abs_u8::u#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 abs_u8::u#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  ) always clobbers reg byte a 
Statement [316] (byte) sgn_u8::u#0 ← (byte) line::x2#11 - (byte) line::x#0 [ line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 line::dy#0 sgn_u8::u#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 line::dy#0 sgn_u8::u#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { sgn_u8::u#0 = sgn_u8::u#2 } { sgn_u8::return#0 = sgn_u8::return#4 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 line::dy#0 sgn_u8::u#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { sgn_u8::u#0 = sgn_u8::u#2 } { sgn_u8::return#0 = sgn_u8::return#4 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 line::dy#0 sgn_u8::u#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { sgn_u8::u#0 = sgn_u8::u#2 } { sgn_u8::return#0 = sgn_u8::return#4 } }  ) always clobbers reg byte a 
Statement [320] (byte) sgn_u8::u#1 ← (byte) line::y2#10 - (byte) line::y#0 [ line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 line::dy#0 line::sx#0 sgn_u8::u#1 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 line::dy#0 line::sx#0 sgn_u8::u#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { sgn_u8::u#1 = sgn_u8::u#2 } { sgn_u8::return#1 = sgn_u8::return#4 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 line::dy#0 line::sx#0 sgn_u8::u#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { sgn_u8::u#1 = sgn_u8::u#2 } { sgn_u8::return#1 = sgn_u8::return#4 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 line::dy#0 line::sx#0 sgn_u8::u#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { sgn_u8::u#1 = sgn_u8::u#2 } { sgn_u8::return#1 = sgn_u8::return#4 } }  ) always clobbers reg byte a 
Statement [329] (byte) line::e#0 ← (byte) line::dy#0 >> (byte) 1 [ line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [330] (byte~) line::plot1_$0 ← (byte) line::x#0 >> (byte) 3 [ line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_$0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [331] (byte~) line::plot1_$2 ← (byte~) line::plot1_$0 << (byte) 1 [ line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_$2 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [332] (byte*) line::plot1_column#0 ← *((const byte**) plot_column + (byte~) line::plot1_$2) [ line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_column#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [333] (byte~) line::plot1_$1 ← (byte) line::x#0 & (byte) 7 [ line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_column#0 line::plot1_$1 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_column#0 line::plot1_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_column#0 line::plot1_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 line::plot1_column#0 line::plot1_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [334] *((byte*) line::plot1_column#0 + (byte) line::y#13) ← *((byte*) line::plot1_column#0 + (byte) line::y#13) | *((const byte*) plot_bit + (byte~) line::plot1_$1) [ line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::y2#13 line::e#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a reg byte y 
Statement [336] (byte) line::y#15 ← (byte) line::y#6 + (byte) line::sy#0 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::e#3 line::x#10 line::y#15 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::e#3 line::x#10 line::y#15 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::e#3 line::x#10 line::y#15 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::e#3 line::x#10 line::y#15 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [337] (byte) line::e#1 ← (byte) line::e#3 + (byte) line::dx#0 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#10 line::y#15 line::e#1 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#10 line::y#15 line::e#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#10 line::y#15 line::e#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#10 line::y#15 line::e#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [339] (byte) line::plot2_x#0 ← (byte) line::x#10 + (byte) line::sx#0 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::e#1 line::plot2_x#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::e#1 line::plot2_x#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::e#1 line::plot2_x#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::e#1 line::plot2_x#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [340] (byte) line::e#2 ← (byte) line::e#1 - (byte) line::dy#0 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [341] (byte~) line::plot2_$0 ← (byte) line::plot2_x#0 >> (byte) 3 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_$0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [342] (byte~) line::plot2_$2 ← (byte~) line::plot2_$0 << (byte) 1 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_$2 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [343] (byte*) line::plot2_column#0 ← *((const byte**) plot_column + (byte~) line::plot2_$2) [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_column#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [344] (byte~) line::plot2_$1 ← (byte) line::plot2_x#0 & (byte) 7 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_column#0 line::plot2_$1 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_column#0 line::plot2_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_column#0 line::plot2_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 line::plot2_column#0 line::plot2_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [345] *((byte*) line::plot2_column#0 + (byte) line::y#15) ← *((byte*) line::plot2_column#0 + (byte) line::y#15) | *((const byte*) plot_bit + (byte~) line::plot2_$1) [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#15 line::plot2_x#0 line::e#2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a reg byte y 
Statement [349] (byte) line::e1#0 ← (byte) line::dx#0 >> (byte) 1 [ line::x#0 line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::e1#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::e1#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::e1#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::e1#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [351] (byte~) line::plot3_$0 ← (byte) line::x#12 >> (byte) 3 [ line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_$0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [352] (byte~) line::plot3_$2 ← (byte~) line::plot3_$0 << (byte) 1 [ line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_$2 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [353] (byte*) line::plot3_column#0 ← *((const byte**) plot_column + (byte~) line::plot3_$2) [ line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_column#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [354] (byte~) line::plot3_$1 ← (byte) line::x#12 & (byte) 7 [ line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_column#0 line::plot3_$1 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_column#0 line::plot3_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_column#0 line::plot3_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 line::plot3_column#0 line::plot3_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [355] *((byte*) line::plot3_column#0 + (byte) line::y#10) ← *((byte*) line::plot3_column#0 + (byte) line::y#10) | *((const byte*) plot_bit + (byte~) line::plot3_$1) [ line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#10 line::e1#3 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a reg byte y 
Statement [356] (byte) line::x#13 ← (byte) line::x#12 + (byte) line::sx#0 [ line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#10 line::e1#3 line::x#13 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#10 line::e1#3 line::x#13 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#10 line::e1#3 line::x#13 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#10 line::e1#3 line::x#13 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [357] (byte) line::e1#1 ← (byte) line::e1#3 + (byte) line::dy#0 [ line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#10 line::x#13 line::e1#1 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#10 line::x#13 line::e1#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#10 line::x#13 line::e1#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#10 line::x#13 line::e1#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [359] (byte) line::y#3 ← (byte) line::y#10 + (byte) line::sy#0 [ line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#13 line::e1#1 line::y#3 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#13 line::e1#1 line::y#3 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#13 line::e1#1 line::y#3 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#13 line::e1#1 line::y#3 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [360] (byte) line::e1#2 ← (byte) line::e1#1 - (byte) line::dx#0 [ line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#13 line::y#3 line::e1#2 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#13 line::y#3 line::e1#2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#13 line::y#3 line::e1#2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x2#11 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#13 line::y#3 line::e1#2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [363] (byte~) line::plot4_$0 ← (byte) line::x#13 >> (byte) 3 [ line::x#13 line::y#11 line::plot4_$0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#13 line::y#11 line::plot4_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#13 line::y#11 line::plot4_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#13 line::y#11 line::plot4_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [364] (byte~) line::plot4_$2 ← (byte~) line::plot4_$0 << (byte) 1 [ line::x#13 line::y#11 line::plot4_$2 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#13 line::y#11 line::plot4_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#13 line::y#11 line::plot4_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#13 line::y#11 line::plot4_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [365] (byte*) line::plot4_column#0 ← *((const byte**) plot_column + (byte~) line::plot4_$2) [ line::x#13 line::y#11 line::plot4_column#0 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#13 line::y#11 line::plot4_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#13 line::y#11 line::plot4_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#13 line::y#11 line::plot4_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [366] (byte~) line::plot4_$1 ← (byte) line::x#13 & (byte) 7 [ line::y#11 line::plot4_column#0 line::plot4_$1 ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::y#11 line::plot4_column#0 line::plot4_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::y#11 line::plot4_column#0 line::plot4_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::y#11 line::plot4_column#0 line::plot4_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [367] *((byte*) line::plot4_column#0 + (byte) line::y#11) ← *((byte*) line::plot4_column#0 + (byte) line::y#11) | *((const byte*) plot_bit + (byte~) line::plot4_$1) [ ] ( main:10::line:38 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:10::line:45 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:10::line:50 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a reg byte y 
Statement [377] (byte) abs_u8::return#2 ← - (byte) abs_u8::u#2 [ abs_u8::return#2 ] ( main:10::line:38::abs_u8:309 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 abs_u8::return#2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:10::line:45::abs_u8:309 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 abs_u8::return#2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:10::line:50::abs_u8:309 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 abs_u8::return#2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:10::line:38::abs_u8:313 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 abs_u8::return#2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#11 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  main:10::line:45::abs_u8:313 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 abs_u8::return#2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#11 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  main:10::line:50::abs_u8:313 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer line::x#0 line::y#0 line::x2#11 line::y2#10 line::dx#0 abs_u8::return#2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#11 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  ) always clobbers reg byte a 
Statement [380] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (byte) 0 [ ] ( main:10::clock_start:27 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [381] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A [ ] ( main:10::clock_start:27 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [382] *((const nomodify dword*) CIA2_TIMER_AB) ← (dword) $ffffffff [ ] ( main:10::clock_start:27 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [383] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START|(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A [ ] ( main:10::clock_start:27 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [384] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START [ ] ( main:10::clock_start:27 [ conio_textcolor canvas_show_memory canvas_show_flag main::p0_idx#11 main::p1_idx#2 main::p2_idx#2 main::canvas#10 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [386] (byte) conio_textcolor ← (const nomodify byte) WHITE [ conio_textcolor ] ( main:10::textcolor:24 [ canvas_show_memory canvas_show_flag printf_buffer conio_textcolor ] { }  ) always clobbers reg byte a 
Statement [389] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR [ ] ( main:10::setup_irq:22 [ canvas_show_memory canvas_show_flag printf_buffer ] { }  ) always clobbers reg byte a 
Statement [390] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (byte) $7f [ ] ( main:10::setup_irq:22 [ canvas_show_memory canvas_show_flag printf_buffer ] { }  ) always clobbers reg byte a 
Statement [391] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(byte) 8 [ ] ( main:10::setup_irq:22 [ canvas_show_memory canvas_show_flag printf_buffer ] { }  ) always clobbers reg byte a 
Statement [392] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER [ ] ( main:10::setup_irq:22 [ canvas_show_memory canvas_show_flag printf_buffer ] { }  ) always clobbers reg byte a 
Statement [393] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1() [ ] ( main:10::setup_irq:22 [ canvas_show_memory canvas_show_flag printf_buffer ] { }  ) always clobbers reg byte a 
Statement [396] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK [ canvas_show_memory ] (  [ canvas_show_memory ] { { kbhit::return#0 = kbhit::return#2 } }  ) always clobbers reg byte a 
Statement [401] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (volatile byte) canvas_show_memory [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [402] (volatile byte) canvas_show_flag ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [403] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [404] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(byte) 8 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [405] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1() [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [407] *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (byte) 0 [ ] ( kbhit:397 [ canvas_show_memory ] { { kbhit::return#0 = kbhit::return#2 } }  ) always clobbers reg byte a 
Statement [408] (byte) kbhit::return#0 ← ~ *((const nomodify byte*) CONIO_CIA1_PORT_B) [ kbhit::return#0 ] ( kbhit:397 [ canvas_show_memory kbhit::return#0 ] { { kbhit::return#0 = kbhit::return#2 } }  ) always clobbers reg byte a 
Statement [410] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) WHITE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [412] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (const byte) irq_bottom_1::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [413] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [414] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [415] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_KEYBOARD)(void()) irq_bottom_2() [ ] (  [ ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::y#2 main::y#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[2]:3 [ main::cols#5 main::cols#1 ] : zp[2]:3 , 
Potential registers zp[2]:5 [ main::screen#5 main::screen#1 ] : zp[2]:5 , 
Potential registers zp[1]:7 [ main::p0_idx#11 main::p0_idx#1 ] : zp[1]:7 , reg byte x , 
Potential registers zp[1]:8 [ main::p1_idx#2 main::p1_idx#1 ] : zp[1]:8 , reg byte x , 
Potential registers zp[1]:9 [ main::p2_idx#2 main::p2_idx#1 ] : zp[1]:9 , reg byte x , 
Potential registers zp[2]:10 [ main::canvas#10 main::canvas#24 ] : zp[2]:10 , 
Potential registers zp[1]:12 [ main::x#2 main::x#1 ] : zp[1]:12 , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ main::c#2 main::c#4 main::c#1 ] : zp[1]:13 , reg byte x , reg byte y , 
Potential registers zp[1]:14 [ printf_number_buffer::format_min_length#2 ] : zp[1]:14 , reg byte x , 
Potential registers zp[1]:15 [ printf_number_buffer::format_justify_left#10 ] : zp[1]:15 , reg byte x , 
Potential registers zp[1]:16 [ printf_number_buffer::format_zero_padding#10 ] : zp[1]:16 , reg byte x , 
Potential registers zp[1]:17 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] : zp[1]:17 , reg byte x , 
Potential registers zp[1]:18 [ printf_number_buffer::format_upper_case#10 ] : zp[1]:18 , reg byte x , 
Potential registers zp[1]:19 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] : zp[1]:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] : zp[1]:20 , reg byte x , 
Potential registers zp[1]:21 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] : zp[1]:21 , reg byte x , 
Potential registers zp[1]:22 [ printf_padding::pad#5 ] : zp[1]:22 , reg byte x , 
Potential registers zp[1]:23 [ printf_padding::i#2 printf_padding::i#1 ] : zp[1]:23 , reg byte x , 
Potential registers zp[1]:24 [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ] : zp[1]:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:25 [ memset::num#6 ] : zp[2]:25 , 
Potential registers zp[2]:27 [ memset::str#7 ] : zp[2]:27 , 
Potential registers zp[1]:29 [ memset::c#8 memset::c#1 ] : zp[1]:29 , reg byte x , 
Potential registers zp[2]:30 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:30 , 
Potential registers zp[2]:32 [ memcpy::source#2 ] : zp[2]:32 , 
Potential registers zp[2]:34 [ memcpy::destination#2 ] : zp[2]:34 , 
Potential registers zp[2]:36 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] : zp[2]:36 , 
Potential registers zp[2]:38 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] : zp[2]:38 , 
Potential registers zp[2]:40 [ cputs::s#4 cputs::s#5 cputs::s#0 ] : zp[2]:40 , 
Potential registers zp[2]:42 [ strupr::src#2 strupr::src#1 ] : zp[2]:42 , 
Potential registers zp[1]:44 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] : zp[1]:44 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:45 [ strlen::str#2 strlen::str#0 ] : zp[2]:45 , 
Potential registers zp[2]:47 [ strlen::len#2 strlen::len#1 ] : zp[2]:47 , 
Potential registers zp[1]:49 [ ultoa::digit#2 ultoa::digit#1 ] : zp[1]:49 , reg byte x , 
Potential registers zp[4]:50 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ] : zp[4]:50 , 
Potential registers zp[1]:54 [ ultoa::started#2 ultoa::started#4 ] : zp[1]:54 , reg byte x , reg byte y , 
Potential registers zp[2]:55 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ] : zp[2]:55 , 
Potential registers zp[4]:57 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] : zp[4]:57 , 
Potential registers zp[1]:61 [ ultoa_append::digit#2 ultoa_append::digit#1 ] : zp[1]:61 , reg byte x , reg byte y , 
Potential registers zp[1]:62 [ uctoa::digit#2 uctoa::digit#1 ] : zp[1]:62 , reg byte x , 
Potential registers zp[1]:63 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ] : zp[1]:63 , reg byte x , reg byte y , 
Potential registers zp[1]:64 [ uctoa::started#2 uctoa::started#4 ] : zp[1]:64 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:65 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] : zp[2]:65 , 
Potential registers zp[1]:67 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] : zp[1]:67 , reg byte x , 
Potential registers zp[1]:68 [ uctoa_append::digit#2 uctoa_append::digit#1 ] : zp[1]:68 , reg byte x , reg byte y , 
Potential registers zp[1]:69 [ eorfill::x#2 eorfill::x#1 ] : zp[1]:69 , reg byte x , 
Potential registers zp[2]:70 [ eorfill::line_column#2 eorfill::line_column#1 ] : zp[2]:70 , 
Potential registers zp[2]:72 [ eorfill::fill_column#5 eorfill::canvas#0 eorfill::fill_column#1 ] : zp[2]:72 , 
Potential registers zp[1]:74 [ eorfill::y#2 eorfill::y#1 ] : zp[1]:74 , reg byte x , reg byte y , 
Potential registers zp[1]:75 [ eorfill::eor#2 eorfill::eor#0 eorfill::eor#1 ] : zp[1]:75 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:76 [ line::x2#11 line::x2#0 line::x2#1 line::x2#2 ] : zp[1]:76 , reg byte x , 
Potential registers zp[1]:77 [ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ] : zp[1]:77 , reg byte x , 
Potential registers zp[1]:78 [ line::e#3 line::e#5 line::e#0 line::e#1 line::e#2 ] : zp[1]:78 , reg byte x , 
Potential registers zp[1]:79 [ line::x#12 line::x#10 line::x#16 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::plot2_x#0 line::x#13 ] : zp[1]:79 , reg byte x , 
Potential registers zp[1]:80 [ line::y#10 line::y#6 line::y#15 line::y#13 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#11 line::y#3 ] : zp[1]:80 , reg byte x , 
Potential registers zp[1]:81 [ line::e1#3 line::e1#0 line::e1#7 line::e1#2 line::e1#1 ] : zp[1]:81 , reg byte x , 
Potential registers zp[1]:82 [ sgn_u8::u#2 sgn_u8::u#0 sgn_u8::u#1 ] : zp[1]:82 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:83 [ sgn_u8::return#4 ] : zp[1]:83 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:84 [ abs_u8::return#4 abs_u8::return#2 abs_u8::u#2 abs_u8::u#0 abs_u8::u#1 ] : zp[1]:84 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:85 [ conio_cursor_x ] : zp[1]:85 , 
Potential registers zp[1]:86 [ conio_cursor_y ] : zp[1]:86 , 
Potential registers zp[2]:87 [ conio_cursor_text ] : zp[2]:87 , 
Potential registers zp[2]:89 [ conio_cursor_color ] : zp[2]:89 , 
Potential registers zp[1]:91 [ conio_textcolor ] : zp[1]:91 , 
Potential registers zp[1]:92 [ canvas_show_memory ] : zp[1]:92 , 
Potential registers zp[1]:93 [ canvas_show_flag ] : zp[1]:93 , 
Potential registers zp[1]:94 [ main::x0#0 ] : zp[1]:94 , reg byte x , 
Potential registers zp[1]:95 [ main::y0#0 ] : zp[1]:95 , reg byte x , 
Potential registers zp[1]:96 [ main::x1#0 ] : zp[1]:96 , reg byte x , 
Potential registers zp[1]:97 [ main::y1#0 ] : zp[1]:97 , reg byte x , 
Potential registers zp[1]:98 [ main::x2#0 ] : zp[1]:98 , reg byte x , 
Potential registers zp[1]:99 [ main::y2#0 ] : zp[1]:99 , reg byte x , 
Potential registers zp[2]:100 [ main::canvas#1 ] : zp[2]:100 , 
Potential registers zp[4]:102 [ clock::return#2 ] : zp[4]:102 , 
Potential registers zp[4]:106 [ main::$18 ] : zp[4]:106 , 
Potential registers zp[4]:110 [ main::cyclecount#0 ] : zp[4]:110 , 
Potential registers zp[1]:114 [ printf_uchar::uvalue#0 ] : zp[1]:114 , reg byte x , reg byte y , 
Potential registers zp[4]:115 [ printf_ulong::uvalue#0 ] : zp[4]:115 , 
Potential registers zp[2]:119 [ strlen::return#2 ] : zp[2]:119 , 
Potential registers zp[2]:121 [ printf_number_buffer::$19 ] : zp[2]:121 , 
Potential registers zp[2]:123 [ cputln::ln_offset#0 ] : zp[2]:123 , 
Potential registers zp[2]:125 [ cputln::$1 ] : zp[2]:125 , 
Potential registers zp[2]:127 [ cputln::$2 ] : zp[2]:127 , 
Potential registers zp[2]:129 [ cscroll::$7 ] : zp[2]:129 , 
Potential registers zp[2]:131 [ cscroll::$8 ] : zp[2]:131 , 
Potential registers zp[2]:133 [ memset::end#0 ] : zp[2]:133 , 
Potential registers zp[2]:135 [ memcpy::src_end#0 ] : zp[2]:135 , 
Potential registers zp[1]:137 [ cputs::c#1 ] : zp[1]:137 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:138 [ toupper::return#3 ] : zp[1]:138 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:139 [ strupr::$0 ] : zp[1]:139 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:140 [ ultoa::$11 ] : zp[1]:140 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:141 [ ultoa::buffer#3 ] : zp[2]:141 , 
Potential registers zp[1]:143 [ ultoa::$10 ] : zp[1]:143 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:144 [ ultoa::digit_value#0 ] : zp[4]:144 , 
Potential registers zp[2]:148 [ ultoa_append::buffer#0 ] : zp[2]:148 , 
Potential registers zp[4]:150 [ ultoa_append::sub#0 ] : zp[4]:150 , 
Potential registers zp[4]:154 [ ultoa_append::return#0 ] : zp[4]:154 , 
Potential registers zp[2]:158 [ uctoa::buffer#3 ] : zp[2]:158 , 
Potential registers zp[1]:160 [ uctoa::digit_value#0 ] : zp[1]:160 , reg byte x , reg byte y , 
Potential registers zp[2]:161 [ uctoa_append::buffer#0 ] : zp[2]:161 , 
Potential registers zp[1]:163 [ uctoa_append::sub#0 ] : zp[1]:163 , reg byte x , reg byte y , 
Potential registers zp[1]:164 [ uctoa_append::return#0 ] : zp[1]:164 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:165 [ clock::return#0 ] : zp[4]:165 , 
Potential registers zp[1]:169 [ abs_u8::return#0 ] : zp[1]:169 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:170 [ line::dx#0 ] : zp[1]:170 , reg byte x , 
Potential registers zp[1]:171 [ abs_u8::return#1 ] : zp[1]:171 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:172 [ line::dy#0 ] : zp[1]:172 , reg byte x , 
Potential registers zp[1]:173 [ sgn_u8::return#0 ] : zp[1]:173 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:174 [ line::sx#0 ] : zp[1]:174 , reg byte x , 
Potential registers zp[1]:175 [ sgn_u8::return#1 ] : zp[1]:175 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:176 [ line::sy#0 ] : zp[1]:176 , reg byte x , 
Potential registers zp[1]:177 [ line::plot1_$0 ] : zp[1]:177 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:178 [ line::plot1_$2 ] : zp[1]:178 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:179 [ line::plot1_column#0 ] : zp[2]:179 , 
Potential registers zp[1]:181 [ line::plot1_$1 ] : zp[1]:181 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:182 [ line::plot2_$0 ] : zp[1]:182 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:183 [ line::plot2_$2 ] : zp[1]:183 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:184 [ line::plot2_column#0 ] : zp[2]:184 , 
Potential registers zp[1]:186 [ line::plot2_$1 ] : zp[1]:186 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:187 [ line::plot3_$0 ] : zp[1]:187 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:188 [ line::plot3_$2 ] : zp[1]:188 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:189 [ line::plot3_column#0 ] : zp[2]:189 , 
Potential registers zp[1]:191 [ line::plot3_$1 ] : zp[1]:191 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:192 [ line::plot4_$0 ] : zp[1]:192 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:193 [ line::plot4_$2 ] : zp[1]:193 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:194 [ line::plot4_column#0 ] : zp[2]:194 , 
Potential registers zp[1]:196 [ line::plot4_$1 ] : zp[1]:196 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:197 [ sgn_u8::$0 ] : zp[1]:197 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:198 [ abs_u8::$0 ] : zp[1]:198 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:199 [ kbhit::return#2 ] : zp[1]:199 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:200 [ irq_bottom_2::$0 ] : zp[1]:200 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:201 [ kbhit::return#0 ] : zp[1]:201 , reg byte a , reg byte x , reg byte y , 
Potential registers mem[12] [ printf_buffer ] : mem[12] , 

REGISTER UPLIFT SCOPES
Uplift Scope [memcpy] 300,125,000,000,004.25: zp[2]:36 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] 200,233,333,333,337.7: zp[2]:38 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] 12,512,500,000,000.25: zp[2]:135 [ memcpy::src_end#0 ] 0: zp[2]:32 [ memcpy::source#2 ] 0: zp[2]:34 [ memcpy::destination#2 ] 
Uplift Scope [memset] 33,566,666,666,672.33: zp[2]:30 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 1,683,333,333,333.67: zp[2]:133 [ memset::end#0 ] 1,271,250,000,002.25: zp[1]:29 [ memset::c#8 memset::c#1 ] 100,000,000,001: zp[2]:25 [ memset::num#6 ] 0: zp[2]:27 [ memset::str#7 ] 
Uplift Scope [uctoa_append] 25,005,500,003.5: zp[1]:67 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] 20,005,000,002.5: zp[1]:68 [ uctoa_append::digit#2 uctoa_append::digit#1 ] 3,333,500,000.5: zp[1]:163 [ uctoa_append::sub#0 ] 2,000,002: zp[1]:164 [ uctoa_append::return#0 ] 1,375,000.25: zp[2]:161 [ uctoa_append::buffer#0 ] 
Uplift Scope [ultoa_append] 25,005,500,003.5: zp[4]:57 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] 20,005,000,002.5: zp[1]:61 [ ultoa_append::digit#2 ultoa_append::digit#1 ] 3,333,500,000.5: zp[4]:150 [ ultoa_append::sub#0 ] 2,000,002: zp[4]:154 [ ultoa_append::return#0 ] 1,375,000.25: zp[2]:148 [ ultoa_append::buffer#0 ] 
Uplift Scope [cscroll] 20,000,000,002: zp[2]:129 [ cscroll::$7 ] 20,000,000,002: zp[2]:131 [ cscroll::$8 ] 
Uplift Scope [cputln] 2,000,000,002: zp[2]:125 [ cputln::$1 ] 2,000,000,002: zp[2]:127 [ cputln::$2 ] 1,000,000,001: zp[2]:123 [ cputln::ln_offset#0 ] 
Uplift Scope [] 282,456,149.21: zp[1]:86 [ conio_cursor_y ] 202,727,281.91: zp[2]:89 [ conio_cursor_color ] 200,900,910: zp[2]:87 [ conio_cursor_text ] 63,125,000.66: zp[1]:91 [ conio_textcolor ] 25,263,168.52: zp[1]:85 [ conio_cursor_x ] 15.58: zp[1]:93 [ canvas_show_flag ] 2.45: zp[1]:92 [ canvas_show_memory ] 0: mem[12] [ printf_buffer ] 
Uplift Scope [toupper] 473,333,338.67: zp[1]:44 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] 20,000,002: zp[1]:138 [ toupper::return#3 ] 
Uplift Scope [cputc] 150,025,008.5: zp[1]:24 [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ] 
Uplift Scope [strupr] 27,142,859.86: zp[2]:42 [ strupr::src#2 strupr::src#1 ] 20,000,002: zp[1]:139 [ strupr::$0 ] 
Uplift Scope [strlen] 30,000,003: zp[2]:45 [ strlen::str#2 strlen::str#0 ] 15,002,501.75: zp[2]:47 [ strlen::len#2 strlen::len#1 ] 20,002: zp[2]:119 [ strlen::return#2 ] 
Uplift Scope [printf_padding] 27,500,002.75: zp[1]:23 [ printf_padding::i#2 printf_padding::i#1 ] 1,731,673.33: zp[1]:21 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] 1,666,666.83: zp[1]:22 [ printf_padding::pad#5 ] 
Uplift Scope [cputs] 20,150,003.5: zp[2]:40 [ cputs::s#4 cputs::s#5 cputs::s#0 ] 10,000,001: zp[1]:137 [ cputs::c#1 ] 
Uplift Scope [ultoa] 3,787,146.79: zp[2]:55 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ] 3,078,361.36: zp[4]:50 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ] 2,285,716.57: zp[1]:49 [ ultoa::digit#2 ultoa::digit#1 ] 2,000,002: zp[1]:143 [ ultoa::$10 ] 1,500,001.5: zp[1]:54 [ ultoa::started#2 ultoa::started#4 ] 600,000.6: zp[4]:144 [ ultoa::digit_value#0 ] 20,002: zp[1]:140 [ ultoa::$11 ] 20,002: zp[2]:141 [ ultoa::buffer#3 ] 
Uplift Scope [uctoa] 3,835,004: zp[2]:65 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] 3,175,504.5: zp[1]:63 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ] 2,307,694.62: zp[1]:62 [ uctoa::digit#2 uctoa::digit#1 ] 1,600,001.6: zp[1]:64 [ uctoa::started#2 uctoa::started#4 ] 600,000.6: zp[1]:160 [ uctoa::digit_value#0 ] 20,002: zp[2]:158 [ uctoa::buffer#3 ] 
Uplift Scope [eorfill] 3,250,003.25: zp[1]:74 [ eorfill::y#2 eorfill::y#1 ] 2,250,004.5: zp[1]:75 [ eorfill::eor#2 eorfill::eor#0 eorfill::eor#1 ] 233,996.89: zp[2]:72 [ eorfill::fill_column#5 eorfill::canvas#0 eorfill::fill_column#1 ] 230,002.3: zp[1]:69 [ eorfill::x#2 eorfill::x#1 ] 229,167.83: zp[2]:70 [ eorfill::line_column#2 eorfill::line_column#1 ] 
Uplift Scope [line] 514,054.88: zp[1]:81 [ line::e1#3 line::e1#0 line::e1#7 line::e1#2 line::e1#1 ] 450,782.19: zp[1]:80 [ line::y#10 line::y#6 line::y#15 line::y#13 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#11 line::y#3 ] 417,505: zp[1]:78 [ line::e#3 line::e#5 line::e#0 line::e#1 line::e#2 ] 379,799.65: zp[1]:79 [ line::x#12 line::x#10 line::x#16 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::plot2_x#0 line::x#13 ] 200,002: zp[1]:182 [ line::plot2_$0 ] 200,002: zp[1]:183 [ line::plot2_$2 ] 200,002: zp[1]:186 [ line::plot2_$1 ] 200,002: zp[1]:187 [ line::plot3_$0 ] 200,002: zp[1]:188 [ line::plot3_$2 ] 200,002: zp[1]:191 [ line::plot3_$1 ] 150,001.5: zp[2]:184 [ line::plot2_column#0 ] 150,001.5: zp[2]:189 [ line::plot3_column#0 ] 7,691.97: zp[1]:77 [ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ] 6,446.94: zp[1]:172 [ line::dy#0 ] 5,941.29: zp[1]:170 [ line::dx#0 ] 5,153.92: zp[1]:176 [ line::sy#0 ] 4,697.77: zp[1]:174 [ line::sx#0 ] 3,144.83: zp[1]:76 [ line::x2#11 line::x2#0 line::x2#1 line::x2#2 ] 2,002: zp[1]:177 [ line::plot1_$0 ] 2,002: zp[1]:178 [ line::plot1_$2 ] 2,002: zp[1]:181 [ line::plot1_$1 ] 2,002: zp[1]:192 [ line::plot4_$0 ] 2,002: zp[1]:193 [ line::plot4_$2 ] 2,002: zp[1]:196 [ line::plot4_$1 ] 1,501.5: zp[2]:179 [ line::plot1_column#0 ] 1,501.5: zp[2]:194 [ line::plot4_column#0 ] 
Uplift Scope [printf_number_buffer] 65,006.5: zp[1]:19 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] 11,905.95: zp[1]:20 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] 10,001: zp[2]:121 [ printf_number_buffer::$19 ] 5,604.25: zp[1]:17 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] 1,000.1: zp[1]:14 [ printf_number_buffer::format_min_length#2 ] 937.59: zp[1]:16 [ printf_number_buffer::format_zero_padding#10 ] 645.23: zp[1]:15 [ printf_number_buffer::format_justify_left#10 ] 384.65: zp[1]:18 [ printf_number_buffer::format_upper_case#10 ] 
Uplift Scope [abs_u8] 40,175.33: zp[1]:84 [ abs_u8::return#4 abs_u8::return#2 abs_u8::u#2 abs_u8::u#0 abs_u8::u#1 ] 20,002: zp[1]:198 [ abs_u8::$0 ] 2,002: zp[1]:169 [ abs_u8::return#0 ] 2,002: zp[1]:171 [ abs_u8::return#1 ] 
Uplift Scope [sgn_u8] 20,002: zp[1]:197 [ sgn_u8::$0 ] 16,007: zp[1]:82 [ sgn_u8::u#2 sgn_u8::u#0 sgn_u8::u#1 ] 2,002: zp[1]:173 [ sgn_u8::return#0 ] 2,002: zp[1]:175 [ sgn_u8::return#1 ] 500.5: zp[1]:83 [ sgn_u8::return#4 ] 
Uplift Scope [main] 3,003: zp[1]:12 [ main::x#2 main::x#1 ] 1,979: zp[1]:13 [ main::c#2 main::c#4 main::c#1 ] 238.73: zp[1]:2 [ main::y#2 main::y#1 ] 221.3: zp[2]:5 [ main::screen#5 main::screen#1 ] 210.91: zp[2]:10 [ main::canvas#10 main::canvas#24 ] 202: zp[4]:106 [ main::$18 ] 201: zp[2]:3 [ main::cols#5 main::cols#1 ] 43.29: zp[1]:98 [ main::x2#0 ] 43.29: zp[1]:99 [ main::y2#0 ] 33.67: zp[1]:96 [ main::x1#0 ] 33.67: zp[1]:97 [ main::y1#0 ] 26.76: zp[1]:7 [ main::p0_idx#11 main::p0_idx#1 ] 25.25: zp[4]:110 [ main::cyclecount#0 ] 22.73: zp[1]:8 [ main::p1_idx#2 main::p1_idx#1 ] 22.51: zp[1]:9 [ main::p2_idx#2 main::p2_idx#1 ] 16.83: zp[1]:94 [ main::x0#0 ] 16.83: zp[1]:95 [ main::y0#0 ] 5.61: zp[2]:100 [ main::canvas#1 ] 
Uplift Scope [clock] 367.33: zp[4]:165 [ clock::return#0 ] 202: zp[4]:102 [ clock::return#2 ] 
Uplift Scope [printf_ulong] 367.33: zp[4]:115 [ printf_ulong::uvalue#0 ] 
Uplift Scope [printf_uchar] 367.33: zp[1]:114 [ printf_uchar::uvalue#0 ] 
Uplift Scope [kbhit] 4.33: zp[1]:201 [ kbhit::return#0 ] 4: zp[1]:199 [ kbhit::return#2 ] 
Uplift Scope [irq_bottom_2] 4: zp[1]:200 [ irq_bottom_2::$0 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [clock_start] 
Uplift Scope [RADIX] 
Uplift Scope [gotoxy] 
Uplift Scope [textcolor] 
Uplift Scope [printf_format_number] 
Uplift Scope [printf_buffer_number] 
Uplift Scope [printf_format_string] 
Uplift Scope [setup_irq] 
Uplift Scope [irq_bottom_1] 

Uplifting [memcpy] best 376474 combination zp[2]:36 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] zp[2]:38 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] zp[2]:135 [ memcpy::src_end#0 ] zp[2]:32 [ memcpy::source#2 ] zp[2]:34 [ memcpy::destination#2 ] 
Uplifting [memset] best 376356 combination zp[2]:30 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:133 [ memset::end#0 ] reg byte x [ memset::c#8 memset::c#1 ] zp[2]:25 [ memset::num#6 ] zp[2]:27 [ memset::str#7 ] 
Uplifting [uctoa_append] best 364153 combination reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ] zp[1]:163 [ uctoa_append::sub#0 ] reg byte x [ uctoa_append::return#0 ] zp[2]:161 [ uctoa_append::buffer#0 ] 
Uplifting [ultoa_append] best 358150 combination zp[4]:57 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] reg byte x [ ultoa_append::digit#2 ultoa_append::digit#1 ] zp[4]:150 [ ultoa_append::sub#0 ] zp[4]:154 [ ultoa_append::return#0 ] zp[2]:148 [ ultoa_append::buffer#0 ] 
Uplifting [cscroll] best 358150 combination zp[2]:129 [ cscroll::$7 ] zp[2]:131 [ cscroll::$8 ] 
Uplifting [cputln] best 358150 combination zp[2]:125 [ cputln::$1 ] zp[2]:127 [ cputln::$2 ] zp[2]:123 [ cputln::ln_offset#0 ] 
Uplifting [] best 358150 combination zp[1]:86 [ conio_cursor_y ] zp[2]:89 [ conio_cursor_color ] zp[2]:87 [ conio_cursor_text ] zp[1]:91 [ conio_textcolor ] zp[1]:85 [ conio_cursor_x ] zp[1]:93 [ canvas_show_flag ] zp[1]:92 [ canvas_show_memory ] mem[12] [ printf_buffer ] 
Uplifting [toupper] best 356943 combination reg byte a [ toupper::return#2 toupper::return#0 toupper::ch#0 ] reg byte a [ toupper::return#3 ] 
Uplifting [cputc] best 356334 combination reg byte a [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ] 
Uplifting [strupr] best 355734 combination zp[2]:42 [ strupr::src#2 strupr::src#1 ] reg byte a [ strupr::$0 ] 
Uplifting [strlen] best 355734 combination zp[2]:45 [ strlen::str#2 strlen::str#0 ] zp[2]:47 [ strlen::len#2 strlen::len#1 ] zp[2]:119 [ strlen::return#2 ] 
Uplifting [printf_padding] best 355734 combination zp[1]:23 [ printf_padding::i#2 printf_padding::i#1 ] zp[1]:21 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] zp[1]:22 [ printf_padding::pad#5 ] 
Uplifting [cputs] best 354834 combination zp[2]:40 [ cputs::s#4 cputs::s#5 cputs::s#0 ] reg byte a [ cputs::c#1 ] 
Uplifting [ultoa] best 353530 combination zp[2]:55 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ] zp[4]:50 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ] zp[1]:49 [ ultoa::digit#2 ultoa::digit#1 ] reg byte a [ ultoa::$10 ] reg byte x [ ultoa::started#2 ultoa::started#4 ] zp[4]:144 [ ultoa::digit_value#0 ] reg byte a [ ultoa::$11 ] zp[2]:141 [ ultoa::buffer#3 ] 
Uplifting [uctoa] best 352624 combination zp[2]:65 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ] zp[1]:62 [ uctoa::digit#2 uctoa::digit#1 ] zp[1]:64 [ uctoa::started#2 uctoa::started#4 ] zp[1]:160 [ uctoa::digit_value#0 ] zp[2]:158 [ uctoa::buffer#3 ] 
Uplifting [eorfill] best 327424 combination reg byte y [ eorfill::y#2 eorfill::y#1 ] reg byte a [ eorfill::eor#2 eorfill::eor#0 eorfill::eor#1 ] zp[2]:72 [ eorfill::fill_column#5 eorfill::canvas#0 eorfill::fill_column#1 ] reg byte x [ eorfill::x#2 eorfill::x#1 ] zp[2]:70 [ eorfill::line_column#2 eorfill::line_column#1 ] 
Uplifting [printf_number_buffer] best 327413 combination reg byte y [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] zp[1]:20 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] zp[2]:121 [ printf_number_buffer::$19 ] zp[1]:17 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] reg byte x [ printf_number_buffer::format_min_length#2 ] zp[1]:16 [ printf_number_buffer::format_zero_padding#10 ] zp[1]:15 [ printf_number_buffer::format_justify_left#10 ] zp[1]:18 [ printf_number_buffer::format_upper_case#10 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [abs_u8] best 327376 combination reg byte a [ abs_u8::return#4 abs_u8::return#2 abs_u8::u#2 abs_u8::u#0 abs_u8::u#1 ] reg byte x [ abs_u8::$0 ] reg byte a [ abs_u8::return#0 ] reg byte a [ abs_u8::return#1 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [sgn_u8] best 327349 combination reg byte a [ sgn_u8::$0 ] reg byte a [ sgn_u8::u#2 sgn_u8::u#0 sgn_u8::u#1 ] reg byte a [ sgn_u8::return#0 ] reg byte a [ sgn_u8::return#1 ] zp[1]:83 [ sgn_u8::return#4 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [main] best 325319 combination reg byte y [ main::x#2 main::x#1 ] reg byte x [ main::c#2 main::c#4 main::c#1 ] zp[1]:2 [ main::y#2 main::y#1 ] zp[2]:5 [ main::screen#5 main::screen#1 ] zp[2]:10 [ main::canvas#10 main::canvas#24 ] zp[4]:106 [ main::$18 ] zp[2]:3 [ main::cols#5 main::cols#1 ] zp[1]:98 [ main::x2#0 ] zp[1]:99 [ main::y2#0 ] zp[1]:96 [ main::x1#0 ] zp[1]:97 [ main::y1#0 ] zp[1]:7 [ main::p0_idx#11 main::p0_idx#1 ] zp[4]:110 [ main::cyclecount#0 ] zp[1]:8 [ main::p1_idx#2 main::p1_idx#1 ] zp[1]:9 [ main::p2_idx#2 main::p2_idx#1 ] zp[1]:94 [ main::x0#0 ] zp[1]:95 [ main::y0#0 ] zp[2]:100 [ main::canvas#1 ] 
Limited combination testing to 100 combinations of 13824 possible.
Uplifting [clock] best 325319 combination zp[4]:165 [ clock::return#0 ] zp[4]:102 [ clock::return#2 ] 
Uplifting [printf_ulong] best 325319 combination zp[4]:115 [ printf_ulong::uvalue#0 ] 
Uplifting [printf_uchar] best 325286 combination reg byte x [ printf_uchar::uvalue#0 ] 
Uplifting [kbhit] best 325274 combination reg byte a [ kbhit::return#0 ] reg byte a [ kbhit::return#2 ] 
Uplifting [irq_bottom_2] best 325268 combination reg byte a [ irq_bottom_2::$0 ] 
Uplifting [MOS6526_CIA] best 325268 combination 
Uplifting [MOS6569_VICII] best 325268 combination 
Uplifting [MOS6581_SID] best 325268 combination 
Uplifting [clock_start] best 325268 combination 
Uplifting [RADIX] best 325268 combination 
Uplifting [gotoxy] best 325268 combination 
Uplifting [textcolor] best 325268 combination 
Uplifting [printf_format_number] best 325268 combination 
Uplifting [printf_buffer_number] best 325268 combination 
Uplifting [printf_format_string] best 325268 combination 
Uplifting [setup_irq] best 325268 combination 
Uplifting [irq_bottom_1] best 325268 combination 
Attempting to uplift remaining variables inzp[1]:163 [ uctoa_append::sub#0 ]
Uplifting [uctoa_append] best 325268 combination zp[1]:163 [ uctoa_append::sub#0 ] 
Attempting to uplift remaining variables inzp[1]:86 [ conio_cursor_y ]
Uplifting [] best 325268 combination zp[1]:86 [ conio_cursor_y ] 
Attempting to uplift remaining variables inzp[1]:91 [ conio_textcolor ]
Uplifting [] best 325268 combination zp[1]:91 [ conio_textcolor ] 
Attempting to uplift remaining variables inzp[1]:23 [ printf_padding::i#2 printf_padding::i#1 ]
Uplifting [printf_padding] best 325268 combination zp[1]:23 [ printf_padding::i#2 printf_padding::i#1 ] 
Attempting to uplift remaining variables inzp[1]:85 [ conio_cursor_x ]
Uplifting [] best 325268 combination zp[1]:85 [ conio_cursor_x ] 
Attempting to uplift remaining variables inzp[1]:62 [ uctoa::digit#2 uctoa::digit#1 ]
Uplifting [uctoa] best 325268 combination zp[1]:62 [ uctoa::digit#2 uctoa::digit#1 ] 
Attempting to uplift remaining variables inzp[1]:49 [ ultoa::digit#2 ultoa::digit#1 ]
Uplifting [ultoa] best 325268 combination zp[1]:49 [ ultoa::digit#2 ultoa::digit#1 ] 
Attempting to uplift remaining variables inzp[1]:21 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Uplifting [printf_padding] best 325268 combination zp[1]:21 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] 
Attempting to uplift remaining variables inzp[1]:22 [ printf_padding::pad#5 ]
Uplifting [printf_padding] best 325268 combination zp[1]:22 [ printf_padding::pad#5 ] 
Attempting to uplift remaining variables inzp[1]:64 [ uctoa::started#2 uctoa::started#4 ]
Uplifting [uctoa] best 325268 combination zp[1]:64 [ uctoa::started#2 uctoa::started#4 ] 
Attempting to uplift remaining variables inzp[1]:160 [ uctoa::digit_value#0 ]
Uplifting [uctoa] best 325268 combination zp[1]:160 [ uctoa::digit_value#0 ] 
Attempting to uplift remaining variables inzp[1]:81 [ line::e1#3 line::e1#0 line::e1#7 line::e1#2 line::e1#1 ]
Uplifting [line] best 325167 combination reg byte x [ line::e1#3 line::e1#0 line::e1#7 line::e1#2 line::e1#1 ] 
Attempting to uplift remaining variables inzp[1]:80 [ line::y#10 line::y#6 line::y#15 line::y#13 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#11 line::y#3 ]
Uplifting [line] best 325167 combination zp[1]:80 [ line::y#10 line::y#6 line::y#15 line::y#13 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#11 line::y#3 ] 
Attempting to uplift remaining variables inzp[1]:78 [ line::e#3 line::e#5 line::e#0 line::e#1 line::e#2 ]
Uplifting [line] best 325066 combination reg byte x [ line::e#3 line::e#5 line::e#0 line::e#1 line::e#2 ] 
Attempting to uplift remaining variables inzp[1]:79 [ line::x#12 line::x#10 line::x#16 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::plot2_x#0 line::x#13 ]
Uplifting [line] best 325066 combination zp[1]:79 [ line::x#12 line::x#10 line::x#16 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::plot2_x#0 line::x#13 ] 
Attempting to uplift remaining variables inzp[1]:182 [ line::plot2_$0 ]
Uplifting [line] best 324466 combination reg byte a [ line::plot2_$0 ] 
Attempting to uplift remaining variables inzp[1]:183 [ line::plot2_$2 ]
Uplifting [line] best 324066 combination reg byte a [ line::plot2_$2 ] 
Attempting to uplift remaining variables inzp[1]:186 [ line::plot2_$1 ]
Uplifting [line] best 324066 combination zp[1]:186 [ line::plot2_$1 ] 
Attempting to uplift remaining variables inzp[1]:187 [ line::plot3_$0 ]
Uplifting [line] best 323466 combination reg byte a [ line::plot3_$0 ] 
Attempting to uplift remaining variables inzp[1]:188 [ line::plot3_$2 ]
Uplifting [line] best 323066 combination reg byte a [ line::plot3_$2 ] 
Attempting to uplift remaining variables inzp[1]:191 [ line::plot3_$1 ]
Uplifting [line] best 323066 combination zp[1]:191 [ line::plot3_$1 ] 
Attempting to uplift remaining variables inzp[1]:20 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Uplifting [printf_number_buffer] best 323066 combination zp[1]:20 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] 
Attempting to uplift remaining variables inzp[1]:77 [ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ]
Uplifting [line] best 323066 combination zp[1]:77 [ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ] 
Attempting to uplift remaining variables inzp[1]:172 [ line::dy#0 ]
Uplifting [line] best 323066 combination zp[1]:172 [ line::dy#0 ] 
Attempting to uplift remaining variables inzp[1]:170 [ line::dx#0 ]
Uplifting [line] best 323066 combination zp[1]:170 [ line::dx#0 ] 
Attempting to uplift remaining variables inzp[1]:17 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Uplifting [printf_number_buffer] best 323066 combination zp[1]:17 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] 
Attempting to uplift remaining variables inzp[1]:176 [ line::sy#0 ]
Uplifting [line] best 323066 combination zp[1]:176 [ line::sy#0 ] 
Attempting to uplift remaining variables inzp[1]:174 [ line::sx#0 ]
Uplifting [line] best 323066 combination zp[1]:174 [ line::sx#0 ] 
Attempting to uplift remaining variables inzp[1]:76 [ line::x2#11 line::x2#0 line::x2#1 line::x2#2 ]
Uplifting [line] best 323066 combination zp[1]:76 [ line::x2#11 line::x2#0 line::x2#1 line::x2#2 ] 
Attempting to uplift remaining variables inzp[1]:177 [ line::plot1_$0 ]
Uplifting [line] best 323060 combination reg byte a [ line::plot1_$0 ] 
Attempting to uplift remaining variables inzp[1]:178 [ line::plot1_$2 ]
Uplifting [line] best 323056 combination reg byte a [ line::plot1_$2 ] 
Attempting to uplift remaining variables inzp[1]:181 [ line::plot1_$1 ]
Uplifting [line] best 323056 combination zp[1]:181 [ line::plot1_$1 ] 
Attempting to uplift remaining variables inzp[1]:192 [ line::plot4_$0 ]
Uplifting [line] best 323050 combination reg byte a [ line::plot4_$0 ] 
Attempting to uplift remaining variables inzp[1]:193 [ line::plot4_$2 ]
Uplifting [line] best 323046 combination reg byte a [ line::plot4_$2 ] 
Attempting to uplift remaining variables inzp[1]:196 [ line::plot4_$1 ]
Uplifting [line] best 323042 combination reg byte a [ line::plot4_$1 ] 
Attempting to uplift remaining variables inzp[1]:16 [ printf_number_buffer::format_zero_padding#10 ]
Uplifting [printf_number_buffer] best 323042 combination zp[1]:16 [ printf_number_buffer::format_zero_padding#10 ] 
Attempting to uplift remaining variables inzp[1]:15 [ printf_number_buffer::format_justify_left#10 ]
Uplifting [printf_number_buffer] best 323042 combination zp[1]:15 [ printf_number_buffer::format_justify_left#10 ] 
Attempting to uplift remaining variables inzp[1]:83 [ sgn_u8::return#4 ]
Uplifting [sgn_u8] best 323030 combination reg byte a [ sgn_u8::return#4 ] 
Attempting to uplift remaining variables inzp[1]:18 [ printf_number_buffer::format_upper_case#10 ]
Uplifting [printf_number_buffer] best 323030 combination zp[1]:18 [ printf_number_buffer::format_upper_case#10 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::y#2 main::y#1 ]
Uplifting [main] best 323030 combination zp[1]:2 [ main::y#2 main::y#1 ] 
Attempting to uplift remaining variables inzp[1]:98 [ main::x2#0 ]
Uplifting [main] best 323030 combination zp[1]:98 [ main::x2#0 ] 
Attempting to uplift remaining variables inzp[1]:99 [ main::y2#0 ]
Uplifting [main] best 323030 combination zp[1]:99 [ main::y2#0 ] 
Attempting to uplift remaining variables inzp[1]:96 [ main::x1#0 ]
Uplifting [main] best 323030 combination zp[1]:96 [ main::x1#0 ] 
Attempting to uplift remaining variables inzp[1]:97 [ main::y1#0 ]
Uplifting [main] best 323030 combination zp[1]:97 [ main::y1#0 ] 
Attempting to uplift remaining variables inzp[1]:7 [ main::p0_idx#11 main::p0_idx#1 ]
Uplifting [main] best 323030 combination zp[1]:7 [ main::p0_idx#11 main::p0_idx#1 ] 
Attempting to uplift remaining variables inzp[1]:8 [ main::p1_idx#2 main::p1_idx#1 ]
Uplifting [main] best 323030 combination zp[1]:8 [ main::p1_idx#2 main::p1_idx#1 ] 
Attempting to uplift remaining variables inzp[1]:9 [ main::p2_idx#2 main::p2_idx#1 ]
Uplifting [main] best 323030 combination zp[1]:9 [ main::p2_idx#2 main::p2_idx#1 ] 
Attempting to uplift remaining variables inzp[1]:94 [ main::x0#0 ]
Uplifting [main] best 323030 combination zp[1]:94 [ main::x0#0 ] 
Attempting to uplift remaining variables inzp[1]:95 [ main::y0#0 ]
Uplifting [main] best 323030 combination zp[1]:95 [ main::y0#0 ] 
Attempting to uplift remaining variables inzp[1]:93 [ canvas_show_flag ]
Uplifting [] best 323030 combination zp[1]:93 [ canvas_show_flag ] 
Attempting to uplift remaining variables inzp[1]:92 [ canvas_show_memory ]
Uplifting [] best 323030 combination zp[1]:92 [ canvas_show_memory ] 
Coalescing zero page register [ zp[2]:10 [ main::canvas#10 main::canvas#24 ] ] with [ zp[2]:100 [ main::canvas#1 ] ] - score: 2
Coalescing zero page register [ zp[2]:87 [ conio_cursor_text ] ] with [ zp[2]:125 [ cputln::$1 ] ] - score: 2
Coalescing zero page register [ zp[2]:87 [ conio_cursor_text cputln::$1 ] ] with [ zp[2]:129 [ cscroll::$7 ] ] - score: 2
Coalescing zero page register [ zp[2]:89 [ conio_cursor_color ] ] with [ zp[2]:127 [ cputln::$2 ] ] - score: 2
Coalescing zero page register [ zp[2]:89 [ conio_cursor_color cputln::$2 ] ] with [ zp[2]:131 [ cscroll::$8 ] ] - score: 2
Coalescing zero page register [ zp[2]:25 [ memset::num#6 ] ] with [ zp[2]:133 [ memset::end#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:27 [ memset::str#7 ] ] with [ zp[2]:30 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:32 [ memcpy::source#2 ] ] with [ zp[2]:36 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:34 [ memcpy::destination#2 ] ] with [ zp[2]:38 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:47 [ strlen::len#2 strlen::len#1 ] ] with [ zp[2]:119 [ strlen::return#2 ] ] - score: 1
Coalescing zero page register [ zp[4]:50 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ] ] with [ zp[4]:57 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] ] - score: 1
Coalescing zero page register [ zp[4]:50 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] ] with [ zp[4]:115 [ printf_ulong::uvalue#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:50 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 printf_ulong::uvalue#0 ] ] with [ zp[4]:154 [ ultoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:55 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ] ] with [ zp[2]:141 [ ultoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:55 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ] ] with [ zp[2]:148 [ ultoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:65 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] ] with [ zp[2]:158 [ uctoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:65 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 ] ] with [ zp[2]:161 [ uctoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:76 [ line::x2#11 line::x2#0 line::x2#1 line::x2#2 ] ] with [ zp[1]:96 [ main::x1#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:76 [ line::x2#11 line::x2#0 line::x2#1 line::x2#2 main::x1#0 ] ] with [ zp[1]:98 [ main::x2#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:102 [ clock::return#2 ] ] with [ zp[4]:106 [ main::$18 ] ] - score: 1
Coalescing zero page register [ zp[4]:102 [ clock::return#2 main::$18 ] ] with [ zp[4]:165 [ clock::return#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:144 [ ultoa::digit_value#0 ] ] with [ zp[4]:150 [ ultoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:160 [ uctoa::digit_value#0 ] ] with [ zp[1]:163 [ uctoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:47 [ strlen::len#2 strlen::len#1 strlen::return#2 ] ] with [ zp[2]:121 [ printf_number_buffer::$19 ] ] - score: 1
Coalescing zero page register [ zp[4]:50 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 printf_ulong::uvalue#0 ultoa_append::return#0 ] ] with [ zp[4]:110 [ main::cyclecount#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:50 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 printf_ulong::uvalue#0 ultoa_append::return#0 main::cyclecount#0 ] ] with [ zp[4]:102 [ clock::return#2 main::$18 clock::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:32 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] with [ zp[2]:25 [ memset::num#6 memset::end#0 ] ]
Coalescing zero page register [ zp[2]:34 [ memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ] with [ zp[2]:27 [ memset::str#7 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[2]:42 [ strupr::src#2 strupr::src#1 ] ] with [ zp[2]:40 [ cputs::s#4 cputs::s#5 cputs::s#0 ] ]
Coalescing zero page register [ zp[1]:49 [ ultoa::digit#2 ultoa::digit#1 ] ] with [ zp[1]:15 [ printf_number_buffer::format_justify_left#10 ] ]
Coalescing zero page register [ zp[2]:55 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 ] ] with [ zp[2]:45 [ strlen::str#2 strlen::str#0 ] ]
Coalescing zero page register [ zp[1]:62 [ uctoa::digit#2 uctoa::digit#1 ] ] with [ zp[1]:16 [ printf_number_buffer::format_zero_padding#10 ] ]
Coalescing zero page register [ zp[1]:64 [ uctoa::started#2 uctoa::started#4 ] ] with [ zp[1]:17 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] ]
Coalescing zero page register [ zp[2]:65 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 ] ] with [ zp[2]:47 [ strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 ] ]
Coalescing zero page register [ zp[1]:76 [ line::x2#11 line::x2#0 line::x2#1 line::x2#2 main::x1#0 main::x2#0 ] ] with [ zp[1]:18 [ printf_number_buffer::format_upper_case#10 ] ]
Coalescing zero page register [ zp[1]:77 [ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ] ] with [ zp[1]:20 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] ]
Coalescing zero page register [ zp[1]:79 [ line::x#12 line::x#10 line::x#16 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::plot2_x#0 line::x#13 ] ] with [ zp[1]:21 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] ]
Coalescing zero page register [ zp[1]:80 [ line::y#10 line::y#6 line::y#15 line::y#13 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#11 line::y#3 ] ] with [ zp[1]:22 [ printf_padding::pad#5 ] ]
Coalescing zero page register [ zp[1]:85 [ conio_cursor_x ] ] with [ zp[1]:2 [ main::y#2 main::y#1 ] ]
Coalescing zero page register [ zp[2]:87 [ conio_cursor_text cputln::$1 cscroll::$7 ] ] with [ zp[2]:70 [ eorfill::line_column#2 eorfill::line_column#1 ] ]
Coalescing zero page register [ zp[2]:89 [ conio_cursor_color cputln::$2 cscroll::$8 ] ] with [ zp[2]:72 [ eorfill::fill_column#5 eorfill::canvas#0 eorfill::fill_column#1 ] ]
Coalescing zero page register [ zp[1]:94 [ main::x0#0 ] ] with [ zp[1]:23 [ printf_padding::i#2 printf_padding::i#1 ] ]
Coalescing zero page register [ zp[1]:170 [ line::dx#0 ] ] with [ zp[1]:160 [ uctoa::digit_value#0 uctoa_append::sub#0 ] ]
Coalescing zero page register [ zp[2]:179 [ line::plot1_column#0 ] ] with [ zp[2]:123 [ cputln::ln_offset#0 ] ]
Coalescing zero page register [ zp[2]:184 [ line::plot2_column#0 ] ] with [ zp[2]:135 [ memcpy::src_end#0 ] ]
Coalescing zero page register [ zp[2]:55 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 strlen::str#2 strlen::str#0 ] ] with [ zp[2]:32 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::num#6 memset::end#0 ] ]
Coalescing zero page register [ zp[2]:65 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 ] ] with [ zp[2]:34 [ memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 memset::str#7 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[1]:95 [ main::y0#0 ] ] with [ zp[1]:49 [ ultoa::digit#2 ultoa::digit#1 printf_number_buffer::format_justify_left#10 ] ]
Coalescing zero page register [ zp[1]:97 [ main::y1#0 ] ] with [ zp[1]:62 [ uctoa::digit#2 uctoa::digit#1 printf_number_buffer::format_zero_padding#10 ] ]
Coalescing zero page register [ zp[1]:99 [ main::y2#0 ] ] with [ zp[1]:64 [ uctoa::started#2 uctoa::started#4 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] ]
Coalescing zero page register [ zp[2]:189 [ line::plot3_column#0 ] ] with [ zp[2]:42 [ strupr::src#2 strupr::src#1 cputs::s#4 cputs::s#5 cputs::s#0 ] ]
Coalescing zero page register [ zp[2]:179 [ line::plot1_column#0 cputln::ln_offset#0 ] ] with [ zp[2]:55 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 strlen::str#2 strlen::str#0 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::num#6 memset::end#0 ] ]
Coalescing zero page register [ zp[2]:194 [ line::plot4_column#0 ] ] with [ zp[2]:65 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 memset::str#7 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Allocated (was zp[2]:3) zp[2]:2 [ main::cols#5 main::cols#1 ]
Allocated (was zp[2]:5) zp[2]:4 [ main::screen#5 main::screen#1 ]
Allocated (was zp[1]:7) zp[1]:6 [ main::p0_idx#11 main::p0_idx#1 ]
Allocated (was zp[1]:8) zp[1]:7 [ main::p1_idx#2 main::p1_idx#1 ]
Allocated (was zp[1]:9) zp[1]:8 [ main::p2_idx#2 main::p2_idx#1 ]
Allocated (was zp[2]:10) zp[2]:9 [ main::canvas#10 main::canvas#24 main::canvas#1 ]
Allocated (was zp[4]:50) zp[4]:11 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 printf_ulong::uvalue#0 ultoa_append::return#0 main::cyclecount#0 clock::return#2 main::$18 clock::return#0 ]
Allocated (was zp[1]:76) zp[1]:15 [ line::x2#11 line::x2#0 line::x2#1 line::x2#2 main::x1#0 main::x2#0 printf_number_buffer::format_upper_case#10 ]
Allocated (was zp[1]:77) zp[1]:16 [ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Allocated (was zp[1]:79) zp[1]:17 [ line::x#12 line::x#10 line::x#16 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::plot2_x#0 line::x#13 printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Allocated (was zp[1]:80) zp[1]:18 [ line::y#10 line::y#6 line::y#15 line::y#13 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#11 line::y#3 printf_padding::pad#5 ]
Allocated (was zp[1]:85) zp[1]:19 [ conio_cursor_x main::y#2 main::y#1 ]
Allocated (was zp[1]:86) zp[1]:20 [ conio_cursor_y ]
Allocated (was zp[2]:87) zp[2]:21 [ conio_cursor_text cputln::$1 cscroll::$7 eorfill::line_column#2 eorfill::line_column#1 ]
Allocated (was zp[2]:89) zp[2]:23 [ conio_cursor_color cputln::$2 cscroll::$8 eorfill::fill_column#5 eorfill::canvas#0 eorfill::fill_column#1 ]
Allocated (was zp[1]:91) zp[1]:25 [ conio_textcolor ]
Allocated (was zp[1]:92) zp[1]:26 [ canvas_show_memory ]
Allocated (was zp[1]:93) zp[1]:27 [ canvas_show_flag ]
Allocated (was zp[1]:94) zp[1]:28 [ main::x0#0 printf_padding::i#2 printf_padding::i#1 ]
Allocated (was zp[1]:95) zp[1]:29 [ main::y0#0 ultoa::digit#2 ultoa::digit#1 printf_number_buffer::format_justify_left#10 ]
Allocated (was zp[1]:97) zp[1]:30 [ main::y1#0 uctoa::digit#2 uctoa::digit#1 printf_number_buffer::format_zero_padding#10 ]
Allocated (was zp[1]:99) zp[1]:31 [ main::y2#0 uctoa::started#2 uctoa::started#4 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Allocated (was zp[4]:144) zp[4]:32 [ ultoa::digit_value#0 ultoa_append::sub#0 ]
Allocated (was zp[1]:170) zp[1]:36 [ line::dx#0 uctoa::digit_value#0 uctoa_append::sub#0 ]
Allocated (was zp[1]:172) zp[1]:37 [ line::dy#0 ]
Allocated (was zp[1]:174) zp[1]:38 [ line::sx#0 ]
Allocated (was zp[1]:176) zp[1]:39 [ line::sy#0 ]
Allocated (was zp[2]:179) zp[2]:40 [ line::plot1_column#0 cputln::ln_offset#0 ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 strlen::str#2 strlen::str#0 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::num#6 memset::end#0 ]
Allocated (was zp[1]:181) zp[1]:42 [ line::plot1_$1 ]
Allocated (was zp[2]:184) zp[2]:43 [ line::plot2_column#0 memcpy::src_end#0 ]
Allocated (was zp[1]:186) zp[1]:45 [ line::plot2_$1 ]
Allocated (was zp[2]:189) zp[2]:46 [ line::plot3_column#0 strupr::src#2 strupr::src#1 cputs::s#4 cputs::s#5 cputs::s#0 ]
Allocated (was zp[1]:191) zp[1]:48 [ line::plot3_$1 ]
Allocated (was zp[2]:194) zp[2]:49 [ line::plot4_column#0 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 memset::str#7 memset::dst#2 memset::dst#4 memset::dst#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Filling a simple 16x16 2D polygon using EOR-filling
// - Clearing canvas
// - Trivial 2D rotation using sine tables
// - Line-drawing polygon edges (fill-ready lines)
// - Up-to-down EOR filling 
// - Double buffering
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // Timer Control - Start/stop timer (0:stop, 1: start)
  .const CIA_TIMER_CONTROL_START = 1
  // Timer B Control - Timer counts (00:system cycles, 01: CNT pulses, 10: timer A underflow, 11: time A underflow while CNT is high)
  .const CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
  .const BORDER_YPOS_BOTTOM = $fa
  // Bits for the VICII IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // The colors of the C64
  .const BLACK = 0
  .const WHITE = 1
  .const RED = 2
  // Clock cycles used to start & read the cycle clock by calling clock_start() and clock() once. Can be subtracted when calculating the number of cycles used by a routine.
  // To make precise cycle measurements interrupts and the display must be disabled so neither steals any cycles from the code.
  .const CLOCKS_PER_INIT = $12
  // The default text color
  .const CONIO_TEXTCOLOR_DEFAULT = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE = $1a
  .const OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
  .const OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS = $19
  .const toD0181_return = (>(SCREEN&$3fff)*4)|(>CANVAS2)/4&$f
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // Color Ram
  .label COLS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // CIA#2 timer A&B as one single 32-bit value
  .label CIA2_TIMER_AB = $dd04
  // The vector used when the KERNAL serves IRQ interrupts
  .label KERNEL_IRQ = $314
  // The screen width
  // The screen height
  // The screen bytes
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  // CIA#1 Port A: keyboard matrix columns and joystick #2
  .label CONIO_CIA1_PORT_A = $dc00
  // CIA#1 Port B: keyboard matrix rows and joystick #1.
  .label CONIO_CIA1_PORT_B = $dc01
  // The line buffer
  .label LINE_BUFFER = $2000
  // The two charsets used as screen buffers
  .label CANVAS1 = $3000
  .label CANVAS2 = $3800
  // The screen matrix
  .label SCREEN = $2c00
  // The screen console
  .label CONSOLE = $400
  // The default charset address
  .label PETSCII = $1000
  .label COSTAB = SINTAB+$40
  .label conio_cursor_x = $13
  .label conio_cursor_y = $14
  .label conio_cursor_text = $15
  .label conio_cursor_color = $17
  .label conio_textcolor = $19
  .label canvas_show_memory = $1a
  .label canvas_show_flag = $1b
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor x-position
  lda #0
  sta.z conio_cursor_x
  // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor y-position
  lda #0
  sta.z conio_cursor_y
  // [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_TEXT
  sta.z conio_cursor_text
  lda #>CONIO_SCREEN_TEXT
  sta.z conio_cursor_text+1
  // [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_COLORS
  sta.z conio_cursor_color
  lda #>CONIO_SCREEN_COLORS
  sta.z conio_cursor_color+1
  // [5] (byte) conio_textcolor ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- vbuz1=vbuc1 
  // The current text color
  lda #CONIO_TEXTCOLOR_DEFAULT
  sta.z conio_textcolor
  // [6] phi from @1 to toD0181 [phi:@1->toD0181]
toD0181_from___b1:
  jmp toD0181
  // toD0181
toD0181:
  jmp __b3
  // @3
__b3:
  // [7] (volatile byte) canvas_show_memory ← (const byte) toD0181_return#0 -- vbuz1=vbuc1 
  // The current canvas being rendered to the screen - in D018 format.
  lda #toD0181_return
  sta.z canvas_show_memory
  // [8] (volatile byte) canvas_show_flag ← (byte) 0 -- vbuz1=vbuc1 
  // Flag signalling that the canvas on screen needs to be updated.
  // Set to 1 by the renderer when a new canvas is ready for showing, and to 0 by the raster when the canvas is shown on screen.
  lda #0
  sta.z canvas_show_flag
  // [9] phi from @3 to @2 [phi:@3->@2]
__b2_from___b3:
  jmp __b2
  // @2
__b2:
  // [10] call main 
  // [12] phi from @2 to main [phi:@2->main]
main_from___b2:
  jsr main
  // [11] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>CANVAS1)/4&$f
    .const toD0182_return = (>(SCREEN&$3fff)*4)|(>CANVAS2)/4&$f
    .label __18 = $b
    .label cols = 2
    // Setup 16x16 canvas for rendering
    .label screen = 4
    .label y = $13
    .label x0 = $1c
    .label y0 = $1d
    .label x1 = $f
    .label y1 = $1e
    .label x2 = $f
    .label y2 = $1f
    .label p0_idx = 6
    .label p1_idx = 7
    .label p2_idx = 8
    // The current canvas being rendered to
    .label canvas = 9
    .label cyclecount = $b
    // [13] call memset 
  // Clear the console
    // [177] phi from main to memset [phi:main->memset]
  memset_from_main:
    // [177] phi (byte) memset::c#8 = (byte) ' ' [phi:main->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [177] phi (void*) memset::str#7 = (void*)(const nomodify byte*) CONSOLE [phi:main->memset#1] -- pvoz1=pvoc1 
    lda #<CONSOLE
    sta.z memset.str
    lda #>CONSOLE
    sta.z memset.str+1
    // [177] phi (word) memset::num#6 = (word)(number) $28*(number) $19 [phi:main->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    // [14] phi from main to main::@12 [phi:main->main::@12]
  __b12_from_main:
    jmp __b12
    // main::@12
  __b12:
    // [15] call memset 
  // Clear the screen
    // [177] phi from main::@12 to memset [phi:main::@12->memset]
  memset_from___b12:
    // [177] phi (byte) memset::c#8 = (byte) 0 [phi:main::@12->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [177] phi (void*) memset::str#7 = (void*)(const nomodify byte*) SCREEN [phi:main::@12->memset#1] -- pvoz1=pvoc1 
    lda #<SCREEN
    sta.z memset.str
    lda #>SCREEN
    sta.z memset.str+1
    // [177] phi (word) memset::num#6 = (word)(number) $28*(number) $19 [phi:main::@12->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    // [16] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  __b13_from___b12:
    jmp __b13
    // main::@13
  __b13:
    // [17] call memset 
    // [177] phi from main::@13 to memset [phi:main::@13->memset]
  memset_from___b13:
    // [177] phi (byte) memset::c#8 = (const nomodify byte) BLACK [phi:main::@13->memset#0] -- vbuxx=vbuc1 
    ldx #BLACK
    // [177] phi (void*) memset::str#7 = (void*)(const nomodify byte*) COLS [phi:main::@13->memset#1] -- pvoz1=pvoc1 
    lda #<COLS
    sta.z memset.str
    lda #>COLS
    sta.z memset.str+1
    // [177] phi (word) memset::num#6 = (word)(number) $28*(number) $19 [phi:main::@13->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    // [18] phi from main::@13 to main::@1 [phi:main::@13->main::@1]
  __b1_from___b13:
    // [18] phi (byte*) main::screen#5 = (const nomodify byte*) SCREEN+(byte) $c [phi:main::@13->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$c
    sta.z screen
    lda #>SCREEN+$c
    sta.z screen+1
    // [18] phi (byte*) main::cols#5 = (const nomodify byte*) COLS+(byte) $c [phi:main::@13->main::@1#1] -- pbuz1=pbuc1 
    lda #<COLS+$c
    sta.z cols
    lda #>COLS+$c
    sta.z cols+1
    // [18] phi (byte) main::y#2 = (byte) 0 [phi:main::@13->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    jmp __b1
    // main::@1
  __b1:
    // [19] if((byte) main::y#2<(byte) $10) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z y
    cmp #$10
    bcc __b2
    jmp __b3
    // main::@3
  __b3:
    // [20] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [21] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // [22] call setup_irq 
    // Set-up the raster IRQ
    jsr setup_irq
    // [23] phi from main::@3 to main::@14 [phi:main::@3->main::@14]
  __b14_from___b3:
    jmp __b14
    // main::@14
  __b14:
    // [24] call textcolor 
    // Set text color
    jsr textcolor
    // [25] phi from main::@14 to main::@7 [phi:main::@14->main::@7]
  __b7_from___b14:
    // [25] phi (byte*) main::canvas#10 = (const nomodify byte*) CANVAS1 [phi:main::@14->main::@7#0] -- pbuz1=pbuc1 
    lda #<CANVAS1
    sta.z canvas
    lda #>CANVAS1
    sta.z canvas+1
    // [25] phi (byte) main::p2_idx#2 = (byte) $f0+(byte) $aa [phi:main::@14->main::@7#1] -- vbuz1=vbuc1 
    lda #$f0+$aa
    sta.z p2_idx
    // [25] phi (byte) main::p1_idx#2 = (byte) $f0+(byte) $f [phi:main::@14->main::@7#2] -- vbuz1=vbuc1 
    lda #$f0+$f
    sta.z p1_idx
    // [25] phi (byte) main::p0_idx#11 = (byte) $f0 [phi:main::@14->main::@7#3] -- vbuz1=vbuc1 
    lda #$f0
    sta.z p0_idx
    jmp __b7
    // main::@7
  __b7:
    // [26] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  __b8_from___b7:
    jmp __b8
    // main::@8
  __b8:
    // [27] call clock_start 
    jsr clock_start
    // [28] phi from main::@8 to main::@15 [phi:main::@8->main::@15]
  __b15_from___b8:
    jmp __b15
    // main::@15
  __b15:
    // [29] call memset 
  // Clear line buffer
    // [177] phi from main::@15 to memset [phi:main::@15->memset]
  memset_from___b15:
    // [177] phi (byte) memset::c#8 = (byte) 0 [phi:main::@15->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [177] phi (void*) memset::str#7 = (void*)(const nomodify byte*) LINE_BUFFER [phi:main::@15->memset#1] -- pvoz1=pvoc1 
    lda #<LINE_BUFFER
    sta.z memset.str
    lda #>LINE_BUFFER
    sta.z memset.str+1
    // [177] phi (word) memset::num#6 = (word) $800 [phi:main::@15->memset#2] -- vwuz1=vwuc1 
    lda #<$800
    sta.z memset.num
    lda #>$800
    sta.z memset.num+1
    jsr memset
    jmp __b16
    // main::@16
  __b16:
    // [30] (byte) main::x0#0 ← *((const byte*) COSTAB + (byte) main::p0_idx#11) -- vbuz1=pbuc1_derefidx_vbuz2 
    // Plot in line buffer
    ldy.z p0_idx
    lda COSTAB,y
    sta.z x0
    // [31] (byte) main::y0#0 ← *((const byte*) SINTAB + (byte) main::p0_idx#11) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z p0_idx
    lda SINTAB,y
    sta.z y0
    // [32] (byte) main::x1#0 ← *((const byte*) COSTAB + (byte) main::p1_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z p1_idx
    lda COSTAB,y
    sta.z x1
    // [33] (byte) main::y1#0 ← *((const byte*) SINTAB + (byte) main::p1_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z p1_idx
    lda SINTAB,y
    sta.z y1
    // [34] (byte) line::x1#0 ← (byte) main::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z line.x1
    // [35] (byte) line::y1#0 ← (byte) main::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z line.y1
    // [36] (byte) line::x2#0 ← (byte) main::x1#0
    // [37] (byte) line::y2#0 ← (byte) main::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z line.y2
    // [38] call line 
    // [307] phi from main::@16 to line [phi:main::@16->line]
  line_from___b16:
    // [307] phi (byte) line::y2#10 = (byte) line::y2#0 [phi:main::@16->line#0] -- register_copy 
    // [307] phi (byte) line::x2#11 = (byte) line::x2#0 [phi:main::@16->line#1] -- register_copy 
    // [307] phi (byte) line::y#0 = (byte) line::y1#0 [phi:main::@16->line#2] -- register_copy 
    // [307] phi (byte) line::x#0 = (byte) line::x1#0 [phi:main::@16->line#3] -- register_copy 
    jsr line
    jmp __b17
    // main::@17
  __b17:
    // [39] (byte) main::x2#0 ← *((const byte*) COSTAB + (byte) main::p2_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z p2_idx
    lda COSTAB,y
    sta.z x2
    // [40] (byte) main::y2#0 ← *((const byte*) SINTAB + (byte) main::p2_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z p2_idx
    lda SINTAB,y
    sta.z y2
    // [41] (byte) line::x1#1 ← (byte) main::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z line.x1
    // [42] (byte) line::y1#1 ← (byte) main::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z line.y1
    // [43] (byte) line::x2#1 ← (byte) main::x2#0
    // [44] (byte) line::y2#1 ← (byte) main::y2#0 -- vbuz1=vbuz2 
    lda.z y2
    sta.z line.y2
    // [45] call line 
    // [307] phi from main::@17 to line [phi:main::@17->line]
  line_from___b17:
    // [307] phi (byte) line::y2#10 = (byte) line::y2#1 [phi:main::@17->line#0] -- register_copy 
    // [307] phi (byte) line::x2#11 = (byte) line::x2#1 [phi:main::@17->line#1] -- register_copy 
    // [307] phi (byte) line::y#0 = (byte) line::y1#1 [phi:main::@17->line#2] -- register_copy 
    // [307] phi (byte) line::x#0 = (byte) line::x1#1 [phi:main::@17->line#3] -- register_copy 
    jsr line
    jmp __b18
    // main::@18
  __b18:
    // [46] (byte) line::x1#2 ← (byte) main::x2#0 -- vbuz1=vbuz2 
    lda.z x2
    sta.z line.x1
    // [47] (byte) line::y1#2 ← (byte) main::y2#0 -- vbuz1=vbuz2 
    lda.z y2
    sta.z line.y1
    // [48] (byte) line::x2#2 ← (byte) main::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z line.x2
    // [49] (byte) line::y2#2 ← (byte) main::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z line.y2
    // [50] call line 
    // [307] phi from main::@18 to line [phi:main::@18->line]
  line_from___b18:
    // [307] phi (byte) line::y2#10 = (byte) line::y2#2 [phi:main::@18->line#0] -- register_copy 
    // [307] phi (byte) line::x2#11 = (byte) line::x2#2 [phi:main::@18->line#1] -- register_copy 
    // [307] phi (byte) line::y#0 = (byte) line::y1#2 [phi:main::@18->line#2] -- register_copy 
    // [307] phi (byte) line::x#0 = (byte) line::x1#2 [phi:main::@18->line#3] -- register_copy 
    jsr line
    jmp __b19
    // main::@19
  __b19:
    // [51] (byte) main::p0_idx#1 ← ++ (byte) main::p0_idx#11 -- vbuz1=_inc_vbuz1 
    inc.z p0_idx
    // [52] (byte) main::p1_idx#1 ← ++ (byte) main::p1_idx#2 -- vbuz1=_inc_vbuz1 
    inc.z p1_idx
    // [53] (byte) main::p2_idx#1 ← ++ (byte) main::p2_idx#2 -- vbuz1=_inc_vbuz1 
    inc.z p2_idx
    // [54] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) RED -- _deref_pbuc1=vbuc2 
    // Wait until the canvas on screen has been switched before starting work on the next frame
    lda #RED
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    jmp __b9
    // main::@9
  __b9:
    // [55] if((byte) 0!=(volatile byte) canvas_show_flag) goto main::@9 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z canvas_show_flag
    bne __b9
    jmp __b10
    // main::@10
  __b10:
    // [56] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [57] (byte*) eorfill::canvas#0 ← (byte*) main::canvas#10 -- pbuz1=pbuz2 
    lda.z canvas
    sta.z eorfill.canvas
    lda.z canvas+1
    sta.z eorfill.canvas+1
    // [58] call eorfill 
  // Fill canvas
    // [294] phi from main::@10 to eorfill [phi:main::@10->eorfill]
  eorfill_from___b10:
    jsr eorfill
    jmp __b20
    // main::@20
  __b20:
    // [59] (word) main::canvas#1 ← (byte*) main::canvas#10 ^ (const nomodify byte*) CANVAS1^(const nomodify byte*) CANVAS2 -- vwuz1=pbuz1_bxor_vwuc1 
    // swap canvas being rendered to (using XOR)
    lda #<CANVAS1^CANVAS2
    eor.z canvas
    sta.z canvas
    lda #>CANVAS1^CANVAS2
    eor.z canvas+1
    sta.z canvas+1
    // [60] phi from main::@20 to main::toD0181 [phi:main::@20->main::toD0181]
  toD0181_from___b20:
    jmp toD0181
    // main::toD0181
  toD0181:
    // [61] phi from main::toD0181 to main::toD0182 [phi:main::toD0181->main::toD0182]
  toD0182_from_toD0181:
    jmp toD0182
    // main::toD0182
  toD0182:
    jmp __b11
    // main::@11
  __b11:
    // [62] (volatile byte) canvas_show_memory ← (volatile byte) canvas_show_memory ^ (const byte) main::toD0181_return#0^(const byte) main::toD0182_return#0 -- vbuz1=vbuz1_bxor_vbuc1 
    // Swap canvas to show on screen (using XOR)
    lda #toD0181_return^toD0182_return
    eor.z canvas_show_memory
    sta.z canvas_show_memory
    // [63] (volatile byte) canvas_show_flag ← (byte) 1 -- vbuz1=vbuc1 
    // Set flag used to signal when the canvas has been shown
    lda #1
    sta.z canvas_show_flag
    // [64] call clock 
    jsr clock
    // [65] (dword) clock::return#2 ← (dword) clock::return#0
    jmp __b21
    // main::@21
  __b21:
    // [66] (dword~) main::$18 ← (dword) clock::return#2
    // [67] (dword) main::cyclecount#0 ← (dword~) main::$18 - (const nomodify dword) CLOCKS_PER_INIT -- vduz1=vduz1_minus_vduc1 
    lda.z cyclecount
    sec
    sbc #<CLOCKS_PER_INIT
    sta.z cyclecount
    lda.z cyclecount+1
    sbc #>CLOCKS_PER_INIT
    sta.z cyclecount+1
    lda.z cyclecount+2
    sbc #<CLOCKS_PER_INIT>>$10
    sta.z cyclecount+2
    lda.z cyclecount+3
    sbc #>CLOCKS_PER_INIT>>$10
    sta.z cyclecount+3
    // [68] call gotoxy 
    // [286] phi from main::@21 to gotoxy [phi:main::@21->gotoxy]
  gotoxy_from___b21:
    jsr gotoxy
    // [69] phi from main::@21 to main::@22 [phi:main::@21->main::@22]
  __b22_from___b21:
    jmp __b22
    // main::@22
  __b22:
    // [70] call cputs 
    // [196] phi from main::@22 to cputs [phi:main::@22->cputs]
  cputs_from___b22:
    // [196] phi (to_nomodify byte*) cputs::s#5 = (const byte*) main::s [phi:main::@22->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    jmp __b23
    // main::@23
  __b23:
    // [71] (byte) printf_uchar::uvalue#0 ← (byte) main::p0_idx#1 -- vbuxx=vbuz1 
    ldx.z p0_idx
    // [72] call printf_uchar 
    // [253] phi from main::@23 to printf_uchar [phi:main::@23->printf_uchar]
  printf_uchar_from___b23:
    jsr printf_uchar
    // [73] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
  __b24_from___b23:
    jmp __b24
    // main::@24
  __b24:
    // [74] call cputs 
    // [196] phi from main::@24 to cputs [phi:main::@24->cputs]
  cputs_from___b24:
    // [196] phi (to_nomodify byte*) cputs::s#5 = (const byte*) main::s1 [phi:main::@24->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    jmp __b25
    // main::@25
  __b25:
    // [75] (dword) printf_ulong::uvalue#0 ← (dword) main::cyclecount#0
    // [76] call printf_ulong 
    // [88] phi from main::@25 to printf_ulong [phi:main::@25->printf_ulong]
  printf_ulong_from___b25:
    jsr printf_ulong
    jmp __b26
    // main::@26
  __b26:
    // [77] (byte*) main::canvas#24 ← (byte*)(word) main::canvas#1
    // [25] phi from main::@26 to main::@7 [phi:main::@26->main::@7]
  __b7_from___b26:
    // [25] phi (byte*) main::canvas#10 = (byte*) main::canvas#24 [phi:main::@26->main::@7#0] -- register_copy 
    // [25] phi (byte) main::p2_idx#2 = (byte) main::p2_idx#1 [phi:main::@26->main::@7#1] -- register_copy 
    // [25] phi (byte) main::p1_idx#2 = (byte) main::p1_idx#1 [phi:main::@26->main::@7#2] -- register_copy 
    // [25] phi (byte) main::p0_idx#11 = (byte) main::p0_idx#1 [phi:main::@26->main::@7#3] -- register_copy 
    jmp __b7
    // main::@2
  __b2:
    // [78] (byte) main::c#4 ← (byte) main::y#2 -- vbuxx=vbuz1 
    ldx.z y
    // [79] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  __b4_from___b2:
    // [79] phi (byte) main::c#2 = (byte) main::c#4 [phi:main::@2->main::@4#0] -- register_copy 
    // [79] phi (byte) main::x#2 = (byte) 0 [phi:main::@2->main::@4#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b4
    // main::@4
  __b4:
    // [80] if((byte) main::x#2<(byte) $10) goto main::@5 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$10
    bcc __b5
    jmp __b6
    // main::@6
  __b6:
    // [81] (byte*) main::cols#1 ← (byte*) main::cols#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z cols
    sta.z cols
    bcc !+
    inc.z cols+1
  !:
    // [82] (byte*) main::screen#1 ← (byte*) main::screen#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z screen
    sta.z screen
    bcc !+
    inc.z screen+1
  !:
    // [83] (byte) main::y#1 ← ++ (byte) main::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [18] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  __b1_from___b6:
    // [18] phi (byte*) main::screen#5 = (byte*) main::screen#1 [phi:main::@6->main::@1#0] -- register_copy 
    // [18] phi (byte*) main::cols#5 = (byte*) main::cols#1 [phi:main::@6->main::@1#1] -- register_copy 
    // [18] phi (byte) main::y#2 = (byte) main::y#1 [phi:main::@6->main::@1#2] -- register_copy 
    jmp __b1
    // main::@5
  __b5:
    // [84] *((byte*) main::cols#5 + (byte) main::x#2) ← (const nomodify byte) WHITE -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #WHITE
    sta (cols),y
    // [85] *((byte*) main::screen#5 + (byte) main::x#2) ← (byte) main::c#2 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (screen),y
    // [86] (byte) main::c#1 ← (byte) main::c#2 + (byte) $10 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    axs #-[$10]
    // [87] (byte) main::x#1 ← ++ (byte) main::x#2 -- vbuyy=_inc_vbuyy 
    iny
    // [79] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
  __b4_from___b5:
    // [79] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@5->main::@4#0] -- register_copy 
    // [79] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@5->main::@4#1] -- register_copy 
    jmp __b4
    s: .text "frame: "
    .byte 0
    s1: .text " cycles: "
    .byte 0
}
  // printf_ulong
// Print an unsigned int using a specific format
// printf_ulong(dword zp($b) uvalue)
printf_ulong: {
    .const format_min_length = 6
    .const format_justify_left = 0
    .const format_zero_padding = 0
    .const format_upper_case = 0
    .label uvalue = $b
    jmp __b1
    // printf_ulong::@1
  __b1:
    // [89] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [90] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#0
    // [91] call ultoa 
  // Format number into buffer
    // [225] phi from printf_ulong::@1 to ultoa [phi:printf_ulong::@1->ultoa]
  ultoa_from___b1:
    jsr ultoa
    jmp __b2
    // printf_ulong::@2
  __b2:
    // [92] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [93] call printf_number_buffer 
  // Print using format
    // [95] phi from printf_ulong::@2 to printf_number_buffer [phi:printf_ulong::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [95] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_ulong::format_upper_case#0 [phi:printf_ulong::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [95] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#0 [phi:printf_ulong::@2->printf_number_buffer#1] -- register_copy 
    // [95] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_ulong::format_zero_padding#0 [phi:printf_ulong::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [95] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_ulong::format_justify_left#0 [phi:printf_ulong::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [95] phi (byte) printf_number_buffer::format_min_length#2 = (const byte) printf_ulong::format_min_length#0 [phi:printf_ulong::@2->printf_number_buffer#4] -- vbuxx=vbuc1 
    ldx #format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_ulong::@return
  __breturn:
    // [94] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp($1f) buffer_sign, byte register(X) format_min_length, byte zp($1d) format_justify_left, byte zp($1e) format_zero_padding, byte zp($f) format_upper_case)
printf_number_buffer: {
    .label __19 = $31
    .label buffer_sign = $1f
    .label padding = $10
    .label format_zero_padding = $1e
    .label format_justify_left = $1d
    .label format_upper_case = $f
    // [96] if((byte) 0==(byte) printf_number_buffer::format_min_length#2) goto printf_number_buffer::@1 -- vbuc1_eq_vbuxx_then_la1 
    cpx #0
    beq __b1_from_printf_number_buffer
    // [97] phi from printf_number_buffer to printf_number_buffer::@6 [phi:printf_number_buffer->printf_number_buffer::@6]
  __b6_from_printf_number_buffer:
    jmp __b6
    // printf_number_buffer::@6
  __b6:
    // [98] call strlen 
    // [219] phi from printf_number_buffer::@6 to strlen [phi:printf_number_buffer::@6->strlen]
  strlen_from___b6:
    jsr strlen
    // [99] (word) strlen::return#2 ← (word) strlen::len#2
    jmp __b14
    // printf_number_buffer::@14
  __b14:
    // [100] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
    // [101] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 -- vbsyy=_sbyte_vwuz1 
    // There is a minimum length - work out the padding
    lda.z __19
    tay
    // [102] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b13_from___b14
    jmp __b7
    // printf_number_buffer::@7
  __b7:
    // [103] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0 -- vbsyy=_inc_vbsyy 
    iny
    // [104] phi from printf_number_buffer::@14 printf_number_buffer::@7 to printf_number_buffer::@13 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13]
  __b13_from___b14:
  __b13_from___b7:
    // [104] phi (signed byte) printf_number_buffer::len#2 = (signed byte) printf_number_buffer::len#0 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13#0] -- register_copy 
    jmp __b13
    // printf_number_buffer::@13
  __b13:
    // [105] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#2 - (signed byte) printf_number_buffer::len#2 -- vbsz1=vbsxx_minus_vbsyy 
    txa
    sty.z $ff
    sec
    sbc.z $ff
    sta.z padding
    // [106] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21 -- vbsz1_ge_0_then_la1 
    lda.z padding
    cmp #0
    bpl __b21_from___b13
    // [108] phi from printf_number_buffer printf_number_buffer::@13 to printf_number_buffer::@1 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1]
  __b1_from_printf_number_buffer:
  __b1_from___b13:
    // [108] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) 0 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    jmp __b1
    // [107] phi from printf_number_buffer::@13 to printf_number_buffer::@21 [phi:printf_number_buffer::@13->printf_number_buffer::@21]
  __b21_from___b13:
    jmp __b21
    // printf_number_buffer::@21
  __b21:
    // [108] phi from printf_number_buffer::@21 to printf_number_buffer::@1 [phi:printf_number_buffer::@21->printf_number_buffer::@1]
  __b1_from___b21:
    // [108] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) printf_number_buffer::padding#1 [phi:printf_number_buffer::@21->printf_number_buffer::@1#0] -- register_copy 
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [109] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    jmp __b17
    // printf_number_buffer::@17
  __b17:
    // [110] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __b2
    jmp __b16
    // printf_number_buffer::@16
  __b16:
    // [111] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b8
    jmp __b2
    // printf_number_buffer::@8
  __b8:
    // [112] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [113] call printf_padding 
    // [132] phi from printf_number_buffer::@8 to printf_padding [phi:printf_number_buffer::@8->printf_padding]
  printf_padding_from___b8:
    // [132] phi (byte) printf_padding::pad#5 = (byte) ' ' [phi:printf_number_buffer::@8->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [132] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#0 [phi:printf_number_buffer::@8->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [114] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b3
    jmp __b9
    // printf_number_buffer::@9
  __b9:
    // [115] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#10 -- vbuaa=vbuz1 
    lda.z buffer_sign
    // [116] call cputc 
    // [139] phi from printf_number_buffer::@9 to cputc [phi:printf_number_buffer::@9->cputc]
  cputc_from___b9:
    // [139] phi (byte) cputc::c#3 = (byte) cputc::c#2 [phi:printf_number_buffer::@9->cputc#0] -- register_copy 
    jsr cputc
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [117] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    beq __b4
    jmp __b18
    // printf_number_buffer::@18
  __b18:
    // [118] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b10
    jmp __b4
    // printf_number_buffer::@10
  __b10:
    // [119] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [120] call printf_padding 
    // [132] phi from printf_number_buffer::@10 to printf_padding [phi:printf_number_buffer::@10->printf_padding]
  printf_padding_from___b10:
    // [132] phi (byte) printf_padding::pad#5 = (byte) '0' [phi:printf_number_buffer::@10->printf_padding#0] -- vbuz1=vbuc1 
    lda #'0'
    sta.z printf_padding.pad
    // [132] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#1 [phi:printf_number_buffer::@10->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b4
    // printf_number_buffer::@4
  __b4:
    // [121] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_upper_case
    beq __b5_from___b4
    // [122] phi from printf_number_buffer::@4 to printf_number_buffer::@11 [phi:printf_number_buffer::@4->printf_number_buffer::@11]
  __b11_from___b4:
    jmp __b11
    // printf_number_buffer::@11
  __b11:
    // [123] call strupr 
    // [204] phi from printf_number_buffer::@11 to strupr [phi:printf_number_buffer::@11->strupr]
  strupr_from___b11:
    jsr strupr
    // [124] phi from printf_number_buffer::@11 printf_number_buffer::@4 to printf_number_buffer::@5 [phi:printf_number_buffer::@11/printf_number_buffer::@4->printf_number_buffer::@5]
  __b5_from___b11:
  __b5_from___b4:
    jmp __b5
    // printf_number_buffer::@5
  __b5:
    // [125] call cputs 
    // [196] phi from printf_number_buffer::@5 to cputs [phi:printf_number_buffer::@5->cputs]
  cputs_from___b5:
    // [196] phi (to_nomodify byte*) cputs::s#5 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_number_buffer::@5->cputs#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s+1
    jsr cputs
    jmp __b15
    // printf_number_buffer::@15
  __b15:
    // [126] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    jmp __b20
    // printf_number_buffer::@20
  __b20:
    // [127] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    bne __breturn
    jmp __b19
    // printf_number_buffer::@19
  __b19:
    // [128] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b12
    jmp __breturn
    // printf_number_buffer::@12
  __b12:
    // [129] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [130] call printf_padding 
    // [132] phi from printf_number_buffer::@12 to printf_padding [phi:printf_number_buffer::@12->printf_padding]
  printf_padding_from___b12:
    // [132] phi (byte) printf_padding::pad#5 = (byte) ' ' [phi:printf_number_buffer::@12->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [132] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#2 [phi:printf_number_buffer::@12->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [131] return 
    rts
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp($12) pad, byte zp($11) length)
printf_padding: {
    .label i = $1c
    .label length = $11
    .label pad = $12
    // [133] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
  __b1_from_printf_padding:
    // [133] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // printf_padding::@1
  __b1:
    // [134] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    jmp __breturn
    // printf_padding::@return
  __breturn:
    // [135] return 
    rts
    // printf_padding::@2
  __b2:
    // [136] (byte) cputc::c#1 ← (byte) printf_padding::pad#5 -- vbuaa=vbuz1 
    lda.z pad
    // [137] call cputc 
    // [139] phi from printf_padding::@2 to cputc [phi:printf_padding::@2->cputc]
  cputc_from___b2:
    // [139] phi (byte) cputc::c#3 = (byte) cputc::c#1 [phi:printf_padding::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b3
    // printf_padding::@3
  __b3:
    // [138] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [133] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
  __b1_from___b3:
    // [133] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // [140] if((byte) cputc::c#3==(byte) ' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [141] *((byte*) conio_cursor_text) ← (byte) cputc::c#3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (conio_cursor_text),y
    // [142] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // [143] *((byte*) conio_cursor_color) ← (byte) conio_textcolor -- _deref_pbuz1=vbuz2 
    lda.z conio_textcolor
    ldy #0
    sta (conio_cursor_color),y
    // [144] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // [145] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [146] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    jmp __b3
    // cputc::@3
  __b3:
    // [147] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [148] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [149] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputc::@return
  __breturn:
    // [150] return 
    rts
    // [151] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [152] call cputln 
    jsr cputln
    jmp __breturn
}
  // cputln
// Print a newline
cputln: {
    .label __1 = $15
    .label __2 = $17
    .label ln_offset = $28
    // [153] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x -- vwuz1=vbuc1_minus_vbuz2 
    sec
    lda #$28
    sbc.z conio_cursor_x
    sta.z ln_offset
    lda #0
    sbc #0
    sta.z ln_offset+1
    // [154] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z __1
    clc
    adc.z ln_offset
    sta.z __1
    lda.z __1+1
    adc.z ln_offset+1
    sta.z __1+1
    // [155] (byte*) conio_cursor_text ← (byte*~) cputln::$1
    // [156] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z __2
    clc
    adc.z ln_offset
    sta.z __2
    lda.z __2+1
    adc.z ln_offset+1
    sta.z __2+1
    // [157] (byte*) conio_cursor_color ← (byte*~) cputln::$2
    // [158] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [159] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [160] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [161] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    .label __7 = $15
    .label __8 = $17
    // [162] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [163] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [164] call memcpy 
    // [186] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [186] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_TEXT
    sta.z memcpy.destination+1
    // [186] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [165] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [166] call memcpy 
    // [186] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [186] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_COLORS
    sta.z memcpy.destination+1
    // [186] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [167] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [168] call memset 
    // [177] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [177] phi (byte) memset::c#8 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [177] phi (void*) memset::str#7 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str+1
    // [177] phi (word) memset::num#6 = (byte) $28 [phi:cscroll::@3->memset#2] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    jmp __b4
    // cscroll::@4
  __b4:
    // [169] (byte) memset::c#1 ← (byte) conio_textcolor -- vbuxx=vbuz1 
    ldx.z conio_textcolor
    // [170] call memset 
    // [177] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [177] phi (byte) memset::c#8 = (byte) memset::c#1 [phi:cscroll::@4->memset#0] -- register_copy 
    // [177] phi (void*) memset::str#7 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str+1
    // [177] phi (word) memset::num#6 = (byte) $28 [phi:cscroll::@4->memset#2] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [171] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __7
    sec
    sbc #<$28
    sta.z __7
    lda.z __7+1
    sbc #>$28
    sta.z __7+1
    // [172] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
    // [173] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __8
    sec
    sbc #<$28
    sta.z __8
    lda.z __8+1
    sbc #>$28
    sta.z __8+1
    // [174] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
    // [175] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [176] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($31) str, byte register(X) c, word zp($28) num)
memset: {
    .label end = $28
    .label dst = $31
    .label num = $28
    .label str = $31
    // [178] if((word) memset::num#6<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [179] (byte*) memset::end#0 ← (byte*)(void*) memset::str#7 + (word) memset::num#6 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [180] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#7
    // [181] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [181] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [182] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [183] return 
    rts
    // memset::@3
  __b3:
    // [184] *((byte*) memset::dst#2) ← (byte) memset::c#8 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [185] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($31) destination, void* zp($28) source)
memcpy: {
    .label src_end = $2b
    .label dst = $31
    .label src = $28
    .label source = $28
    .label destination = $31
    // [187] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [188] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
    // [189] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
    // [190] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [190] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [190] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [191] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [192] return 
    rts
    // memcpy::@2
  __b2:
    // [193] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [194] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [195] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp($2e) s)
cputs: {
    .label s = $2e
    // [197] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [197] phi (to_nomodify byte*) cputs::s#4 = (to_nomodify byte*) cputs::s#5 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [198] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#4) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // [199] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#4 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [200] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [201] return 
    rts
    // cputs::@2
  __b2:
    // [202] (byte) cputc::c#0 ← (byte) cputs::c#1
    // [203] call cputc 
    // [139] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
  cputc_from___b2:
    // [139] phi (byte) cputc::c#3 = (byte) cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1_from___b2
}
  // strupr
// Converts a string to uppercase.
strupr: {
    .label str = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    .label src = $2e
    // [205] phi from strupr to strupr::@1 [phi:strupr->strupr::@1]
  __b1_from_strupr:
    // [205] phi (byte*) strupr::src#2 = (const byte*) strupr::str#0 [phi:strupr->strupr::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z src
    lda #>str
    sta.z src+1
    jmp __b1
    // strupr::@1
  __b1:
    // [206] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (src),y
    cmp #0
    bne __b2
    jmp __breturn
    // strupr::@return
  __breturn:
    // [207] return 
    rts
    // strupr::@2
  __b2:
    // [208] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (src),y
    // [209] call toupper 
    jsr toupper
    // [210] (byte) toupper::return#3 ← (byte) toupper::return#2
    jmp __b3
    // strupr::@3
  __b3:
    // [211] (byte~) strupr::$0 ← (byte) toupper::return#3
    // [212] *((byte*) strupr::src#2) ← (byte~) strupr::$0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (src),y
    // [213] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [205] phi from strupr::@3 to strupr::@1 [phi:strupr::@3->strupr::@1]
  __b1_from___b3:
    // [205] phi (byte*) strupr::src#2 = (byte*) strupr::src#1 [phi:strupr::@3->strupr::@1#0] -- register_copy 
    jmp __b1
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte register(A) ch)
toupper: {
    // [214] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuaa_lt_vbuc1_then_la1 
    cmp #'a'
    bcc __breturn_from_toupper
    jmp __b2
    // toupper::@2
  __b2:
    // [215] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuaa_le_vbuc1_then_la1 
    cmp #'z'
    bcc __b1
    beq __b1
    // [217] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
  __breturn_from_toupper:
  __breturn_from___b1:
  __breturn_from___b2:
    // [217] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    jmp __breturn
    // toupper::@1
  __b1:
    // [216] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuaa=vbuaa_plus_vbuc1 
    clc
    adc #'A'-'a'
    jmp __breturn_from___b1
    // toupper::@return
  __breturn:
    // [218] return 
    rts
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($28) str)
strlen: {
    .label len = $31
    .label str = $28
    .label return = $31
    // [220] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
  __b1_from_strlen:
    // [220] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    lda #>0
    sta.z len+1
    // [220] phi (byte*) strlen::str#2 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:strlen->strlen::@1#1] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str+1
    jmp __b1
    // strlen::@1
  __b1:
    // [221] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // strlen::@return
  __breturn:
    // [222] return 
    rts
    // strlen::@2
  __b2:
    // [223] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // [224] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [220] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
  __b1_from___b2:
    // [220] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [220] phi (byte*) strlen::str#2 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // ultoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// ultoa(dword zp($b) value, byte* zp($28) buffer)
ultoa: {
    .const max_digits = $a
    .label digit_value = $20
    .label buffer = $28
    .label digit = $1d
    .label value = $b
    // [226] phi from ultoa to ultoa::@1 [phi:ultoa->ultoa::@1]
  __b1_from_ultoa:
    // [226] phi (byte*) ultoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:ultoa->ultoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [226] phi (byte) ultoa::started#2 = (byte) 0 [phi:ultoa->ultoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [226] phi (dword) ultoa::value#2 = (dword) ultoa::value#1 [phi:ultoa->ultoa::@1#2] -- register_copy 
    // [226] phi (byte) ultoa::digit#2 = (byte) 0 [phi:ultoa->ultoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // ultoa::@1
  __b1:
    // [227] if((byte) ultoa::digit#2<(const byte) ultoa::max_digits#1-(byte) 1) goto ultoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // ultoa::@3
  __b3:
    // [228] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 -- vbuaa=_byte_vduz1 
    lda.z value
    // [229] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // [230] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [231] *((byte*) ultoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa::@return
  __breturn:
    // [232] return 
    rts
    // ultoa::@2
  __b2:
    // [233] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 -- vbuaa=vbuz1_rol_2 
    lda.z digit
    asl
    asl
    // [234] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) -- vduz1=pduc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES_LONG,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES_LONG+1,y
    sta.z digit_value+1
    lda RADIX_DECIMAL_VALUES_LONG+2,y
    sta.z digit_value+2
    lda RADIX_DECIMAL_VALUES_LONG+3,y
    sta.z digit_value+3
    // [235] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    jmp __b7
    // ultoa::@7
  __b7:
    // [236] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z digit_value+3
    bcc !+
    bne __b5
    lda.z value+2
    cmp.z digit_value+2
    bcc !+
    bne __b5
    lda.z value+1
    cmp.z digit_value+1
    bcc !+
    bne __b5
    lda.z value
    cmp.z digit_value
    bcs __b5
  !:
    // [237] phi from ultoa::@7 to ultoa::@4 [phi:ultoa::@7->ultoa::@4]
  __b4_from___b7:
    // [237] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#11 [phi:ultoa::@7->ultoa::@4#0] -- register_copy 
    // [237] phi (byte) ultoa::started#4 = (byte) ultoa::started#2 [phi:ultoa::@7->ultoa::@4#1] -- register_copy 
    // [237] phi (dword) ultoa::value#6 = (dword) ultoa::value#2 [phi:ultoa::@7->ultoa::@4#2] -- register_copy 
    jmp __b4
    // ultoa::@4
  __b4:
    // [238] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [226] phi from ultoa::@4 to ultoa::@1 [phi:ultoa::@4->ultoa::@1]
  __b1_from___b4:
    // [226] phi (byte*) ultoa::buffer#11 = (byte*) ultoa::buffer#14 [phi:ultoa::@4->ultoa::@1#0] -- register_copy 
    // [226] phi (byte) ultoa::started#2 = (byte) ultoa::started#4 [phi:ultoa::@4->ultoa::@1#1] -- register_copy 
    // [226] phi (dword) ultoa::value#2 = (dword) ultoa::value#6 [phi:ultoa::@4->ultoa::@1#2] -- register_copy 
    // [226] phi (byte) ultoa::digit#2 = (byte) ultoa::digit#1 [phi:ultoa::@4->ultoa::@1#3] -- register_copy 
    jmp __b1
    // ultoa::@5
  __b5:
    // [239] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11
    // [240] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2
    // [241] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
    // [242] call ultoa_append 
    // [246] phi from ultoa::@5 to ultoa_append [phi:ultoa::@5->ultoa_append]
  ultoa_append_from___b5:
    jsr ultoa_append
    // [243] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
    jmp __b6
    // ultoa::@6
  __b6:
    // [244] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
    // [245] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [237] phi from ultoa::@6 to ultoa::@4 [phi:ultoa::@6->ultoa::@4]
  __b4_from___b6:
    // [237] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#4 [phi:ultoa::@6->ultoa::@4#0] -- register_copy 
    // [237] phi (byte) ultoa::started#4 = (byte) 1 [phi:ultoa::@6->ultoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [237] phi (dword) ultoa::value#6 = (dword) ultoa::value#0 [phi:ultoa::@6->ultoa::@4#2] -- register_copy 
    jmp __b4
}
  // ultoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// ultoa_append(byte* zp($28) buffer, dword zp($b) value, dword zp($20) sub)
ultoa_append: {
    .label buffer = $28
    .label value = $b
    .label sub = $20
    .label return = $b
    // [247] phi from ultoa_append to ultoa_append::@1 [phi:ultoa_append->ultoa_append::@1]
  __b1_from_ultoa_append:
    // [247] phi (byte) ultoa_append::digit#2 = (byte) 0 [phi:ultoa_append->ultoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [247] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#0 [phi:ultoa_append->ultoa_append::@1#1] -- register_copy 
    jmp __b1
    // ultoa_append::@1
  __b1:
    // [248] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z sub+3
    bcc !+
    bne __b2
    lda.z value+2
    cmp.z sub+2
    bcc !+
    bne __b2
    lda.z value+1
    cmp.z sub+1
    bcc !+
    bne __b2
    lda.z value
    cmp.z sub
    bcs __b2
  !:
    jmp __b3
    // ultoa_append::@3
  __b3:
    // [249] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa_append::@return
  __breturn:
    // [250] return 
    rts
    // ultoa_append::@2
  __b2:
    // [251] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // [252] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 -- vduz1=vduz1_minus_vduz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    lda.z value+2
    sbc.z sub+2
    sta.z value+2
    lda.z value+3
    sbc.z sub+3
    sta.z value+3
    // [247] phi from ultoa_append::@2 to ultoa_append::@1 [phi:ultoa_append::@2->ultoa_append::@1]
  __b1_from___b2:
    // [247] phi (byte) ultoa_append::digit#2 = (byte) ultoa_append::digit#1 [phi:ultoa_append::@2->ultoa_append::@1#0] -- register_copy 
    // [247] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#1 [phi:ultoa_append::@2->ultoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // printf_uchar
// Print an unsigned char using a specific format
// printf_uchar(byte register(X) uvalue)
printf_uchar: {
    .const format_min_length = 2
    .const format_justify_left = 0
    .const format_zero_padding = 1
    .const format_upper_case = 0
    jmp __b1
    // printf_uchar::@1
  __b1:
    // [254] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [255] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#0
    // [256] call uctoa 
  // Format number into buffer
    // [260] phi from printf_uchar::@1 to uctoa [phi:printf_uchar::@1->uctoa]
  uctoa_from___b1:
    jsr uctoa
    jmp __b2
    // printf_uchar::@2
  __b2:
    // [257] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [258] call printf_number_buffer 
  // Print using format
    // [95] phi from printf_uchar::@2 to printf_number_buffer [phi:printf_uchar::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [95] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_uchar::format_upper_case#0 [phi:printf_uchar::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [95] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#1 [phi:printf_uchar::@2->printf_number_buffer#1] -- register_copy 
    // [95] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_uchar::format_zero_padding#0 [phi:printf_uchar::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [95] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_uchar::format_justify_left#0 [phi:printf_uchar::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [95] phi (byte) printf_number_buffer::format_min_length#2 = (const byte) printf_uchar::format_min_length#0 [phi:printf_uchar::@2->printf_number_buffer#4] -- vbuxx=vbuc1 
    ldx #format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_uchar::@return
  __breturn:
    // [259] return 
    rts
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte register(X) value, byte* zp($31) buffer)
uctoa: {
    .const max_digits = 2
    .label digit_value = $24
    .label buffer = $31
    .label digit = $1e
    .label started = $1f
    // [261] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
  __b1_from_uctoa:
    // [261] phi (byte*) uctoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [261] phi (byte) uctoa::started#2 = (byte) 0 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [261] phi (byte) uctoa::value#2 = (byte) uctoa::value#1 [phi:uctoa->uctoa::@1#2] -- register_copy 
    // [261] phi (byte) uctoa::digit#2 = (byte) 0 [phi:uctoa->uctoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // uctoa::@1
  __b1:
    // [262] if((byte) uctoa::digit#2<(const byte) uctoa::max_digits#2-(byte) 1) goto uctoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // uctoa::@3
  __b3:
    // [263] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // [264] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [265] *((byte*) uctoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa::@return
  __breturn:
    // [266] return 
    rts
    // uctoa::@2
  __b2:
    // [267] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda RADIX_HEXADECIMAL_VALUES_CHAR,y
    sta.z digit_value
    // [268] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // uctoa::@7
  __b7:
    // [269] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5 -- vbuxx_ge_vbuz1_then_la1 
    cpx.z digit_value
    bcs __b5
    // [270] phi from uctoa::@7 to uctoa::@4 [phi:uctoa::@7->uctoa::@4]
  __b4_from___b7:
    // [270] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#11 [phi:uctoa::@7->uctoa::@4#0] -- register_copy 
    // [270] phi (byte) uctoa::started#4 = (byte) uctoa::started#2 [phi:uctoa::@7->uctoa::@4#1] -- register_copy 
    // [270] phi (byte) uctoa::value#6 = (byte) uctoa::value#2 [phi:uctoa::@7->uctoa::@4#2] -- register_copy 
    jmp __b4
    // uctoa::@4
  __b4:
    // [271] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [261] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
  __b1_from___b4:
    // [261] phi (byte*) uctoa::buffer#11 = (byte*) uctoa::buffer#14 [phi:uctoa::@4->uctoa::@1#0] -- register_copy 
    // [261] phi (byte) uctoa::started#2 = (byte) uctoa::started#4 [phi:uctoa::@4->uctoa::@1#1] -- register_copy 
    // [261] phi (byte) uctoa::value#2 = (byte) uctoa::value#6 [phi:uctoa::@4->uctoa::@1#2] -- register_copy 
    // [261] phi (byte) uctoa::digit#2 = (byte) uctoa::digit#1 [phi:uctoa::@4->uctoa::@1#3] -- register_copy 
    jmp __b1
    // uctoa::@5
  __b5:
    // [272] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
    // [273] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
    // [274] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
    // [275] call uctoa_append 
    // [279] phi from uctoa::@5 to uctoa_append [phi:uctoa::@5->uctoa_append]
  uctoa_append_from___b5:
    jsr uctoa_append
    // [276] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
    jmp __b6
    // uctoa::@6
  __b6:
    // [277] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
    // [278] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [270] phi from uctoa::@6 to uctoa::@4 [phi:uctoa::@6->uctoa::@4]
  __b4_from___b6:
    // [270] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#4 [phi:uctoa::@6->uctoa::@4#0] -- register_copy 
    // [270] phi (byte) uctoa::started#4 = (byte) 1 [phi:uctoa::@6->uctoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [270] phi (byte) uctoa::value#6 = (byte) uctoa::value#0 [phi:uctoa::@6->uctoa::@4#2] -- register_copy 
    jmp __b4
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp($31) buffer, byte register(X) value, byte zp($24) sub)
uctoa_append: {
    .label buffer = $31
    .label sub = $24
    // [280] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
  __b1_from_uctoa_append:
    // [280] phi (byte) uctoa_append::digit#2 = (byte) 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [280] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    jmp __b1
    // uctoa_append::@1
  __b1:
    // [281] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2 -- vbuxx_ge_vbuz1_then_la1 
    cpx.z sub
    bcs __b2
    jmp __b3
    // uctoa_append::@3
  __b3:
    // [282] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuyy 
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa_append::@return
  __breturn:
    // [283] return 
    rts
    // uctoa_append::@2
  __b2:
    // [284] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2 -- vbuyy=_inc_vbuyy 
    iny
    // [285] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z sub
    tax
    // [280] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
  __b1_from___b2:
    // [280] phi (byte) uctoa_append::digit#2 = (byte) uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [280] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // gotoxy
// Set the cursor to the specified position
gotoxy: {
    .const x = 0
    .const y = $18
    .const offset = y*$28
    jmp __b1
    // gotoxy::@1
  __b1:
    // [287] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // [288] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 -- vbuz1=vbuc1 
    lda #y
    sta.z conio_cursor_y
    // [289] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT+(const word) gotoxy::offset#0 -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT+offset
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT+offset
    sta.z conio_cursor_text+1
    // [290] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS+(const word) gotoxy::offset#0 -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS+offset
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS+offset
    sta.z conio_cursor_color+1
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [291] return 
    rts
}
  // clock
// Returns the processor clock time used since the beginning of an implementation defined era (normally the beginning of the program).
// This uses CIA #2 Timer A+B on the C64, and must be initialized using clock_start()
clock: {
    .label return = $b
    // [292] (dword) clock::return#0 ← (dword) $ffffffff - *((const nomodify dword*) CIA2_TIMER_AB) -- vduz1=vduc1_minus__deref_pduc2 
    lda #<$ffffffff
    sec
    sbc CIA2_TIMER_AB
    sta.z return
    lda #>$ffffffff
    sbc CIA2_TIMER_AB+1
    sta.z return+1
    lda #<$ffffffff>>$10
    sbc CIA2_TIMER_AB+2
    sta.z return+2
    lda #>$ffffffff>>$10
    sbc CIA2_TIMER_AB+3
    sta.z return+3
    jmp __breturn
    // clock::@return
  __breturn:
    // [293] return 
    rts
}
  // eorfill
// EOR fill from the line buffer onto the canvas
// eorfill(byte* zp($17) canvas)
eorfill: {
    .label canvas = $17
    .label line_column = $15
    .label fill_column = $17
    // [295] phi from eorfill to eorfill::@1 [phi:eorfill->eorfill::@1]
  __b1_from_eorfill:
    // [295] phi (byte*) eorfill::fill_column#5 = (byte*) eorfill::canvas#0 [phi:eorfill->eorfill::@1#0] -- register_copy 
    // [295] phi (byte*) eorfill::line_column#2 = (const nomodify byte*) LINE_BUFFER [phi:eorfill->eorfill::@1#1] -- pbuz1=pbuc1 
    lda #<LINE_BUFFER
    sta.z line_column
    lda #>LINE_BUFFER
    sta.z line_column+1
    // [295] phi (byte) eorfill::x#2 = (byte) 0 [phi:eorfill->eorfill::@1#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // eorfill::@1
  __b1:
    // [296] if((byte) eorfill::x#2<(byte) $10) goto eorfill::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$10
    bcc __b2
    jmp __breturn
    // eorfill::@return
  __breturn:
    // [297] return 
    rts
    // eorfill::@2
  __b2:
    // [298] (byte) eorfill::eor#0 ← *((byte*) eorfill::line_column#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (line_column),y
    // [299] phi from eorfill::@2 to eorfill::@3 [phi:eorfill::@2->eorfill::@3]
  __b3_from___b2:
    // [299] phi (byte) eorfill::eor#2 = (byte) eorfill::eor#0 [phi:eorfill::@2->eorfill::@3#0] -- register_copy 
    // [299] phi (byte) eorfill::y#2 = (byte) 1 [phi:eorfill::@2->eorfill::@3#1] -- vbuyy=vbuc1 
    ldy #1
    jmp __b3
    // eorfill::@3
  __b3:
    // [300] if((byte) eorfill::y#2<(byte)(number) $10*(number) 8) goto eorfill::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$10*8
    bcc __b4
    jmp __b5
    // eorfill::@5
  __b5:
    // [301] (byte*) eorfill::line_column#1 ← (byte*) eorfill::line_column#2 + (byte)(number) $10*(number) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$10*8
    clc
    adc.z line_column
    sta.z line_column
    bcc !+
    inc.z line_column+1
  !:
    // [302] (byte*) eorfill::fill_column#1 ← (byte*) eorfill::fill_column#5 + (byte)(number) $10*(number) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$10*8
    clc
    adc.z fill_column
    sta.z fill_column
    bcc !+
    inc.z fill_column+1
  !:
    // [303] (byte) eorfill::x#1 ← ++ (byte) eorfill::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [295] phi from eorfill::@5 to eorfill::@1 [phi:eorfill::@5->eorfill::@1]
  __b1_from___b5:
    // [295] phi (byte*) eorfill::fill_column#5 = (byte*) eorfill::fill_column#1 [phi:eorfill::@5->eorfill::@1#0] -- register_copy 
    // [295] phi (byte*) eorfill::line_column#2 = (byte*) eorfill::line_column#1 [phi:eorfill::@5->eorfill::@1#1] -- register_copy 
    // [295] phi (byte) eorfill::x#2 = (byte) eorfill::x#1 [phi:eorfill::@5->eorfill::@1#2] -- register_copy 
    jmp __b1
    // eorfill::@4
  __b4:
    // [304] (byte) eorfill::eor#1 ← (byte) eorfill::eor#2 ^ *((byte*) eorfill::line_column#2 + (byte) eorfill::y#2) -- vbuaa=vbuaa_bxor_pbuz1_derefidx_vbuyy 
    eor (line_column),y
    // [305] *((byte*) eorfill::fill_column#5 + (byte) eorfill::y#2) ← (byte) eorfill::eor#1 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (fill_column),y
    // [306] (byte) eorfill::y#1 ← ++ (byte) eorfill::y#2 -- vbuyy=_inc_vbuyy 
    iny
    // [299] phi from eorfill::@4 to eorfill::@3 [phi:eorfill::@4->eorfill::@3]
  __b3_from___b4:
    // [299] phi (byte) eorfill::eor#2 = (byte) eorfill::eor#1 [phi:eorfill::@4->eorfill::@3#0] -- register_copy 
    // [299] phi (byte) eorfill::y#2 = (byte) eorfill::y#1 [phi:eorfill::@4->eorfill::@3#1] -- register_copy 
    jmp __b3
}
  // line
// Draw a EOR friendly line between two points
// Uses bresenham line drawing routine
// line(byte zp($11) x1, byte zp($12) y1, byte zp($f) x2, byte zp($10) y2)
line: {
    .label plot1___1 = $2a
    .label plot2___1 = $2d
    .label plot3___1 = $30
    .label x1 = $11
    .label y1 = $12
    .label x2 = $f
    .label y2 = $10
    .label x = $11
    .label y = $12
    .label dx = $24
    .label dy = $25
    .label sx = $26
    .label sy = $27
    .label plot1_column = $28
    .label plot2_x = $11
    .label plot2_column = $2b
    .label plot3_column = $2e
    .label plot4_column = $31
    // [308] (byte) abs_u8::u#0 ← (byte) line::x2#11 - (byte) line::x#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z x2
    sec
    sbc.z x
    // [309] call abs_u8 
    // [374] phi from line to abs_u8 [phi:line->abs_u8]
  abs_u8_from_line:
    // [374] phi (byte) abs_u8::u#2 = (byte) abs_u8::u#0 [phi:line->abs_u8#0] -- register_copy 
    jsr abs_u8
    // [310] (byte) abs_u8::return#0 ← (byte) abs_u8::return#4
    jmp __b12
    // line::@12
  __b12:
    // [311] (byte) line::dx#0 ← (byte) abs_u8::return#0 -- vbuz1=vbuaa 
    sta.z dx
    // [312] (byte) abs_u8::u#1 ← (byte) line::y2#10 - (byte) line::y#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z y2
    sec
    sbc.z y
    // [313] call abs_u8 
    // [374] phi from line::@12 to abs_u8 [phi:line::@12->abs_u8]
  abs_u8_from___b12:
    // [374] phi (byte) abs_u8::u#2 = (byte) abs_u8::u#1 [phi:line::@12->abs_u8#0] -- register_copy 
    jsr abs_u8
    // [314] (byte) abs_u8::return#1 ← (byte) abs_u8::return#4
    jmp __b13
    // line::@13
  __b13:
    // [315] (byte) line::dy#0 ← (byte) abs_u8::return#1 -- vbuz1=vbuaa 
    sta.z dy
    // [316] (byte) sgn_u8::u#0 ← (byte) line::x2#11 - (byte) line::x#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z x2
    sec
    sbc.z x
    // [317] call sgn_u8 
    // [368] phi from line::@13 to sgn_u8 [phi:line::@13->sgn_u8]
  sgn_u8_from___b13:
    // [368] phi (byte) sgn_u8::u#2 = (byte) sgn_u8::u#0 [phi:line::@13->sgn_u8#0] -- register_copy 
    jsr sgn_u8
    // [318] (byte) sgn_u8::return#0 ← (byte) sgn_u8::return#4
    jmp __b14
    // line::@14
  __b14:
    // [319] (byte) line::sx#0 ← (byte) sgn_u8::return#0 -- vbuz1=vbuaa 
    sta.z sx
    // [320] (byte) sgn_u8::u#1 ← (byte) line::y2#10 - (byte) line::y#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z y2
    sec
    sbc.z y
    // [321] call sgn_u8 
    // [368] phi from line::@14 to sgn_u8 [phi:line::@14->sgn_u8]
  sgn_u8_from___b14:
    // [368] phi (byte) sgn_u8::u#2 = (byte) sgn_u8::u#1 [phi:line::@14->sgn_u8#0] -- register_copy 
    jsr sgn_u8
    // [322] (byte) sgn_u8::return#1 ← (byte) sgn_u8::return#4
    jmp __b15
    // line::@15
  __b15:
    // [323] (byte) line::sy#0 ← (byte) sgn_u8::return#1 -- vbuz1=vbuaa 
    sta.z sy
    // [324] if((byte) line::sx#0!=(byte) $ff) goto line::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z sx
    bne __b1_from___b15
    jmp __b3
    // line::@3
  __b3:
    // [325] (byte) line::y#1 ← ++ (byte) line::y#0 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [326] (byte) line::y2#3 ← ++ (byte) line::y2#10 -- vbuz1=_inc_vbuz1 
    inc.z y2
    // [327] phi from line::@15 line::@3 to line::@1 [phi:line::@15/line::@3->line::@1]
  __b1_from___b15:
  __b1_from___b3:
    // [327] phi (byte) line::y2#13 = (byte) line::y2#10 [phi:line::@15/line::@3->line::@1#0] -- register_copy 
    // [327] phi (byte) line::y#13 = (byte) line::y#0 [phi:line::@15/line::@3->line::@1#1] -- register_copy 
    jmp __b1
    // line::@1
  __b1:
    // [328] if((byte) line::dx#0>(byte) line::dy#0) goto line::@2 -- vbuz1_gt_vbuz2_then_la1 
    lda.z dy
    cmp.z dx
    bcc __b2
    jmp __b4
    // line::@4
  __b4:
    // [329] (byte) line::e#0 ← (byte) line::dy#0 >> (byte) 1 -- vbuxx=vbuz1_ror_1 
    lda.z dy
    lsr
    tax
    jmp plot1
    // line::plot1
  plot1:
    // [330] (byte~) line::plot1_$0 ← (byte) line::x#0 >> (byte) 3 -- vbuaa=vbuz1_ror_3 
    lda.z x
    lsr
    lsr
    lsr
    // [331] (byte~) line::plot1_$2 ← (byte~) line::plot1_$0 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [332] (byte*) line::plot1_column#0 ← *((const byte**) plot_column + (byte~) line::plot1_$2) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot1_column
    lda plot_column+1,y
    sta.z plot1_column+1
    // [333] (byte~) line::plot1_$1 ← (byte) line::x#0 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z x
    sta.z plot1___1
    // [334] *((byte*) line::plot1_column#0 + (byte) line::y#13) ← *((byte*) line::plot1_column#0 + (byte) line::y#13) | *((const byte*) plot_bit + (byte~) line::plot1_$1) -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuz3 
    ldy.z y
    lda (plot1_column),y
    ldy.z plot1___1
    ora plot_bit,y
    ldy.z y
    sta (plot1_column),y
    // [335] phi from line::@6 line::plot1 to line::@5 [phi:line::@6/line::plot1->line::@5]
  __b5_from___b6:
  __b5_from_plot1:
    // [335] phi (byte) line::x#10 = (byte) line::x#16 [phi:line::@6/line::plot1->line::@5#0] -- register_copy 
    // [335] phi (byte) line::e#3 = (byte) line::e#5 [phi:line::@6/line::plot1->line::@5#1] -- register_copy 
    // [335] phi (byte) line::y#6 = (byte) line::y#15 [phi:line::@6/line::plot1->line::@5#2] -- register_copy 
    jmp __b5
    // line::@5
  __b5:
    // [336] (byte) line::y#15 ← (byte) line::y#6 + (byte) line::sy#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    // [337] (byte) line::e#1 ← (byte) line::e#3 + (byte) line::dx#0 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z dx
    tax
    // [338] if((byte) line::dy#0>=(byte) line::e#1) goto line::@6 -- vbuz1_ge_vbuxx_then_la1 
    lda.z dy
    stx.z $ff
    cmp.z $ff
    bcs __b6_from___b5
    jmp __b7
    // line::@7
  __b7:
    // [339] (byte) line::plot2_x#0 ← (byte) line::x#10 + (byte) line::sx#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z plot2_x
    clc
    adc.z sx
    sta.z plot2_x
    // [340] (byte) line::e#2 ← (byte) line::e#1 - (byte) line::dy#0 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z dy
    tax
    jmp plot2
    // line::plot2
  plot2:
    // [341] (byte~) line::plot2_$0 ← (byte) line::plot2_x#0 >> (byte) 3 -- vbuaa=vbuz1_ror_3 
    lda.z plot2_x
    lsr
    lsr
    lsr
    // [342] (byte~) line::plot2_$2 ← (byte~) line::plot2_$0 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [343] (byte*) line::plot2_column#0 ← *((const byte**) plot_column + (byte~) line::plot2_$2) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot2_column
    lda plot_column+1,y
    sta.z plot2_column+1
    // [344] (byte~) line::plot2_$1 ← (byte) line::plot2_x#0 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z plot2_x
    sta.z plot2___1
    // [345] *((byte*) line::plot2_column#0 + (byte) line::y#15) ← *((byte*) line::plot2_column#0 + (byte) line::y#15) | *((const byte*) plot_bit + (byte~) line::plot2_$1) -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuz3 
    ldy.z y
    lda (plot2_column),y
    ldy.z plot2___1
    ora plot_bit,y
    ldy.z y
    sta (plot2_column),y
    // [346] phi from line::@5 line::plot2 to line::@6 [phi:line::@5/line::plot2->line::@6]
  __b6_from___b5:
  __b6_from_plot2:
    // [346] phi (byte) line::x#16 = (byte) line::x#10 [phi:line::@5/line::plot2->line::@6#0] -- register_copy 
    // [346] phi (byte) line::e#5 = (byte) line::e#1 [phi:line::@5/line::plot2->line::@6#1] -- register_copy 
    jmp __b6
    // line::@6
  __b6:
    // [347] if((byte) line::y#15!=(byte) line::y2#13) goto line::@5 -- vbuz1_neq_vbuz2_then_la1 
    lda.z y
    cmp.z y2
    bne __b5_from___b6
    jmp __breturn
    // line::@return
  __breturn:
    // [348] return 
    rts
    // line::@2
  __b2:
    // [349] (byte) line::e1#0 ← (byte) line::dx#0 >> (byte) 1 -- vbuxx=vbuz1_ror_1 
    lda.z dx
    lsr
    tax
    // [350] phi from line::@2 line::@9 to line::@8 [phi:line::@2/line::@9->line::@8]
  __b8_from___b2:
  __b8_from___b9:
    // [350] phi (byte) line::e1#3 = (byte) line::e1#0 [phi:line::@2/line::@9->line::@8#0] -- register_copy 
    // [350] phi (byte) line::y#10 = (byte) line::y#13 [phi:line::@2/line::@9->line::@8#1] -- register_copy 
    // [350] phi (byte) line::x#12 = (byte) line::x#0 [phi:line::@2/line::@9->line::@8#2] -- register_copy 
    jmp __b8
    // line::@8
  __b8:
    jmp plot3
    // line::plot3
  plot3:
    // [351] (byte~) line::plot3_$0 ← (byte) line::x#12 >> (byte) 3 -- vbuaa=vbuz1_ror_3 
    lda.z x
    lsr
    lsr
    lsr
    // [352] (byte~) line::plot3_$2 ← (byte~) line::plot3_$0 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [353] (byte*) line::plot3_column#0 ← *((const byte**) plot_column + (byte~) line::plot3_$2) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot3_column
    lda plot_column+1,y
    sta.z plot3_column+1
    // [354] (byte~) line::plot3_$1 ← (byte) line::x#12 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z x
    sta.z plot3___1
    // [355] *((byte*) line::plot3_column#0 + (byte) line::y#10) ← *((byte*) line::plot3_column#0 + (byte) line::y#10) | *((const byte*) plot_bit + (byte~) line::plot3_$1) -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuz3 
    ldy.z y
    lda (plot3_column),y
    ldy.z plot3___1
    ora plot_bit,y
    ldy.z y
    sta (plot3_column),y
    jmp __b11
    // line::@11
  __b11:
    // [356] (byte) line::x#13 ← (byte) line::x#12 + (byte) line::sx#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    // [357] (byte) line::e1#1 ← (byte) line::e1#3 + (byte) line::dy#0 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z dy
    tax
    // [358] if((byte) line::dx#0>=(byte) line::e1#1) goto line::@9 -- vbuz1_ge_vbuxx_then_la1 
    lda.z dx
    stx.z $ff
    cmp.z $ff
    bcs __b9_from___b11
    jmp __b10
    // line::@10
  __b10:
    // [359] (byte) line::y#3 ← (byte) line::y#10 + (byte) line::sy#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    // [360] (byte) line::e1#2 ← (byte) line::e1#1 - (byte) line::dx#0 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z dx
    tax
    // [361] phi from line::@10 line::@11 to line::@9 [phi:line::@10/line::@11->line::@9]
  __b9_from___b10:
  __b9_from___b11:
    // [361] phi (byte) line::e1#7 = (byte) line::e1#2 [phi:line::@10/line::@11->line::@9#0] -- register_copy 
    // [361] phi (byte) line::y#11 = (byte) line::y#3 [phi:line::@10/line::@11->line::@9#1] -- register_copy 
    jmp __b9
    // line::@9
  __b9:
    // [362] if((byte) line::x#13!=(byte) line::x2#11) goto line::@8 -- vbuz1_neq_vbuz2_then_la1 
    lda.z x
    cmp.z x2
    bne __b8_from___b9
    jmp plot4
    // line::plot4
  plot4:
    // [363] (byte~) line::plot4_$0 ← (byte) line::x#13 >> (byte) 3 -- vbuaa=vbuz1_ror_3 
    lda.z x
    lsr
    lsr
    lsr
    // [364] (byte~) line::plot4_$2 ← (byte~) line::plot4_$0 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [365] (byte*) line::plot4_column#0 ← *((const byte**) plot_column + (byte~) line::plot4_$2) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot4_column
    lda plot_column+1,y
    sta.z plot4_column+1
    // [366] (byte~) line::plot4_$1 ← (byte) line::x#13 & (byte) 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z x
    // [367] *((byte*) line::plot4_column#0 + (byte) line::y#11) ← *((byte*) line::plot4_column#0 + (byte) line::y#11) | *((const byte*) plot_bit + (byte~) line::plot4_$1) -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuaa 
    ldy.z y
    tax
    lda (plot4_column),y
    ora plot_bit,x
    ldy.z y
    sta (plot4_column),y
    jmp __breturn
}
  // sgn_u8
// Get the sign of a 8-bit unsigned number treated as a signed number.
// Returns unsigned -1 if the number is negative
// sgn_u8(byte register(A) u)
sgn_u8: {
    // [369] (byte~) sgn_u8::$0 ← (byte) sgn_u8::u#2 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [370] if((byte) 0!=(byte~) sgn_u8::$0) goto sgn_u8::@1 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b1_from_sgn_u8
    // [372] phi from sgn_u8 to sgn_u8::@return [phi:sgn_u8->sgn_u8::@return]
  __breturn_from_sgn_u8:
    // [372] phi (byte) sgn_u8::return#4 = (byte) 1 [phi:sgn_u8->sgn_u8::@return#0] -- vbuaa=vbuc1 
    lda #1
    jmp __breturn
    // [371] phi from sgn_u8 to sgn_u8::@1 [phi:sgn_u8->sgn_u8::@1]
  __b1_from_sgn_u8:
    jmp __b1
    // sgn_u8::@1
  __b1:
    // [372] phi from sgn_u8::@1 to sgn_u8::@return [phi:sgn_u8::@1->sgn_u8::@return]
  __breturn_from___b1:
    // [372] phi (byte) sgn_u8::return#4 = (byte) -1 [phi:sgn_u8::@1->sgn_u8::@return#0] -- vbuaa=vbuc1 
    lda #-1
    jmp __breturn
    // sgn_u8::@return
  __breturn:
    // [373] return 
    rts
}
  // abs_u8
// Get the absolute value of a u-bit unsigned number treated as a signed number.
// abs_u8(byte register(A) u)
abs_u8: {
    // [375] (byte~) abs_u8::$0 ← (byte) abs_u8::u#2 & (byte) $80 -- vbuxx=vbuaa_band_vbuc1 
    ldx #$80
    axs #0
    // [376] if((byte) 0!=(byte~) abs_u8::$0) goto abs_u8::@1 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b1
    // [378] phi from abs_u8 abs_u8::@1 to abs_u8::@return [phi:abs_u8/abs_u8::@1->abs_u8::@return]
  __breturn_from_abs_u8:
  __breturn_from___b1:
    // [378] phi (byte) abs_u8::return#4 = (byte) abs_u8::u#2 [phi:abs_u8/abs_u8::@1->abs_u8::@return#0] -- register_copy 
    jmp __breturn
    // abs_u8::@1
  __b1:
    // [377] (byte) abs_u8::return#2 ← - (byte) abs_u8::u#2 -- vbuaa=_neg_vbuaa 
    eor #$ff
    clc
    adc #1
    jmp __breturn_from___b1
    // abs_u8::@return
  __breturn:
    // [379] return 
    rts
}
  // clock_start
// Reset & start the processor clock time. The value can be read using clock().
// This uses CIA #2 Timer A+B on the C64
clock_start: {
    // [380] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Setup CIA#2 timer A to count (down) CPU cycles
    lda #0
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // [381] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [382] *((const nomodify dword*) CIA2_TIMER_AB) ← (dword) $ffffffff -- _deref_pduc1=vduc2 
    lda #<$ffffffff
    sta CIA2_TIMER_AB
    lda #>$ffffffff
    sta CIA2_TIMER_AB+1
    lda #<$ffffffff>>$10
    sta CIA2_TIMER_AB+2
    lda #>$ffffffff>>$10
    sta CIA2_TIMER_AB+3
    // [383] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START|(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [384] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    jmp __breturn
    // clock_start::@return
  __breturn:
    // [385] return 
    rts
}
  // textcolor
// Set the color for text output. The old color setting is returned.
textcolor: {
    // [386] (byte) conio_textcolor ← (const nomodify byte) WHITE -- vbuz1=vbuc1 
    lda #WHITE
    sta.z conio_textcolor
    jmp __breturn
    // textcolor::@return
  __breturn:
    // [387] return 
    rts
}
  // setup_irq
// Setup raster IRQ to change charset at different lines
setup_irq: {
    // asm { sei  }
    sei
    // [389] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // [390] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line to 8 pixels before the border
    lda #$7f
    and VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    // [391] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(byte) 8 -- _deref_pbuc1=vbuc2 
    lda #BORDER_YPOS_BOTTOM-8
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    // [392] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE
    // [393] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1() -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<irq_bottom_1
    sta KERNEL_IRQ
    lda #>irq_bottom_1
    sta KERNEL_IRQ+1
    // asm { cli  }
    cli
    jmp __breturn
    // setup_irq::@return
  __breturn:
    // [395] return 
    rts
}
  // irq_bottom_2
// Interrupt Routine 2
irq_bottom_2: {
    // entry interrupt(KERNEL_KEYBOARD)
    // [396] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    // Change border color
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [397] call kbhit 
    jsr kbhit
    // [398] (byte) kbhit::return#2 ← (byte) kbhit::return#0
    jmp __b3
    // irq_bottom_2::@3
  __b3:
    // [399] (byte~) irq_bottom_2::$0 ← (byte) kbhit::return#2
    // [400] if((byte) 0!=(byte~) irq_bottom_2::$0) goto irq_bottom_2::@1 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b1
    jmp __b2
    // irq_bottom_2::@2
  __b2:
    // [401] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (volatile byte) canvas_show_memory -- _deref_pbuc1=vbuz1 
    lda.z canvas_show_memory
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    jmp __b1
    // irq_bottom_2::@1
  __b1:
    // [402] (volatile byte) canvas_show_flag ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z canvas_show_flag
    // [403] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS
    // [404] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(byte) 8 -- _deref_pbuc1=vbuc2 
    // Trigger IRQ 1 at 8 pixels before the border
    lda #BORDER_YPOS_BOTTOM-8
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    // [405] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1() -- _deref_pptc1=pprc2 
    lda #<irq_bottom_1
    sta KERNEL_IRQ
    lda #>irq_bottom_1
    sta KERNEL_IRQ+1
    jmp __breturn
    // irq_bottom_2::@return
  __breturn:
    // [406] return  - exit interrupt(KERNEL_KEYBOARD)
    jmp $ea31
}
  // kbhit
// Return true if there's a key waiting, return false if not
kbhit: {
    // [407] *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta CONIO_CIA1_PORT_A
    // [408] (byte) kbhit::return#0 ← ~ *((const nomodify byte*) CONIO_CIA1_PORT_B) -- vbuaa=_bnot__deref_pbuc1 
    lda CONIO_CIA1_PORT_B
    eor #$ff
    jmp __breturn
    // kbhit::@return
  __breturn:
    // [409] return 
    rts
}
  // irq_bottom_1
// Interrupt Routine 1: Just above last text line.
irq_bottom_1: {
    .const toD0181_return = (>(CONSOLE&$3fff)*4)|(>PETSCII)/4&$f
    // entry interrupt(KERNEL_MIN)
    // [410] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) WHITE -- _deref_pbuc1=vbuc2 
    // Change border color
    lda #WHITE
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [411] phi from irq_bottom_1 to irq_bottom_1::toD0181 [phi:irq_bottom_1->irq_bottom_1::toD0181]
  toD0181_from_irq_bottom_1:
    jmp toD0181
    // irq_bottom_1::toD0181
  toD0181:
    jmp __b1
    // irq_bottom_1::@1
  __b1:
    // [412] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (const byte) irq_bottom_1::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    // Show the cycle counter
    lda #toD0181_return
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    // [413] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS
    // [414] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM -- _deref_pbuc1=vbuc2 
    // Trigger IRQ 2 at bottom of text-line
    lda #BORDER_YPOS_BOTTOM
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    // [415] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_KEYBOARD)(void()) irq_bottom_2() -- _deref_pptc1=pprc2 
    lda #<irq_bottom_2
    sta KERNEL_IRQ
    lda #>irq_bottom_2
    sta KERNEL_IRQ+1
    jmp __breturn
    // irq_bottom_1::@return
  __breturn:
    // [416] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of hexadecimal digits
  RADIX_HEXADECIMAL_VALUES_CHAR: .byte $10
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_LONG: .dword $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a
  // SIN/COS tables
  .align $100
SINTAB:
.fill $200, 63 + 63*sin(i*2*PI/$100)

  // Column offsets
  plot_column: .word LINE_BUFFER, LINE_BUFFER+1*$80, LINE_BUFFER+2*$80, LINE_BUFFER+3*$80, LINE_BUFFER+4*$80, LINE_BUFFER+5*$80, LINE_BUFFER+6*$80, LINE_BUFFER+7*$80, LINE_BUFFER+8*$80, LINE_BUFFER+9*$80, LINE_BUFFER+$a*$80, LINE_BUFFER+$b*$80, LINE_BUFFER+$c*$80, LINE_BUFFER+$d*$80, LINE_BUFFER+$e*$80, LINE_BUFFER+$f*$80
  // The bits used for plotting a pixel
  plot_bit: .byte $80, $40, $20, $10, 8, 4, 2, 1
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp toD0181
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __bend
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b14
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b15
Removing instruction jmp __b16
Removing instruction jmp __b17
Removing instruction jmp __b18
Removing instruction jmp __b19
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b20
Removing instruction jmp toD0181
Removing instruction jmp toD0182
Removing instruction jmp __b11
Removing instruction jmp __b21
Removing instruction jmp __b22
Removing instruction jmp __b23
Removing instruction jmp __b24
Removing instruction jmp __b25
Removing instruction jmp __b26
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b6
Removing instruction jmp __b14
Removing instruction jmp __b7
Removing instruction jmp __b13
Removing instruction jmp __b21
Removing instruction jmp __b1
Removing instruction jmp __b17
Removing instruction jmp __b16
Removing instruction jmp __b2
Removing instruction jmp __b9
Removing instruction jmp __b3
Removing instruction jmp __b18
Removing instruction jmp __b4
Removing instruction jmp __b11
Removing instruction jmp __b5
Removing instruction jmp __b15
Removing instruction jmp __b20
Removing instruction jmp __b19
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp plot1
Removing instruction jmp __b5
Removing instruction jmp __b7
Removing instruction jmp plot2
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b8
Removing instruction jmp plot3
Removing instruction jmp __b11
Removing instruction jmp __b10
Removing instruction jmp __b9
Removing instruction jmp plot4
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp toD0181
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #BLACK
Removing instruction ldy.z p0_idx
Removing instruction ldy.z p1_idx
Removing instruction ldy.z p2_idx
Removing instruction lda.z padding
Removing instruction ldy #0
Removing instruction lda #>0
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Removing instruction ldy.z y
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b7 with __b8
Replacing label __b1_from_printf_number_buffer with __b1_from___b13
Replacing label __b13_from___b14 with __b13
Replacing label __b21_from___b13 with __b1
Replacing label __b5_from___b4 with __b5
Replacing label __b1_from_cputc with __b1
Replacing label __b2_from___b3 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b1_from___b2 with __b1
Replacing label __breturn_from_toupper with __breturn_from___b2
Replacing label __breturn_from___b1 with __breturn_from___b2
Replacing label __b1_from___b15 with __b1
Replacing label __b6_from___b5 with __b6
Replacing label __b5_from___b6 with __b5
Replacing label __b9_from___b11 with __b9
Replacing label __b8_from___b9 with __b8
Replacing label __b1_from_sgn_u8 with __b1
Removing instruction __b1:
Removing instruction toD0181_from___b1:
Removing instruction toD0181:
Removing instruction __b2_from___b3:
Removing instruction main_from___b2:
Removing instruction __bend_from___b2:
Removing instruction __b12_from_main:
Removing instruction __b13_from___b12:
Removing instruction memset_from___b13:
Removing instruction __b14_from___b3:
Removing instruction __b7:
Removing instruction __b8_from___b7:
Removing instruction __b15_from___b8:
Removing instruction toD0181_from___b20:
Removing instruction toD0181:
Removing instruction toD0182_from_toD0181:
Removing instruction toD0182:
Removing instruction __b22_from___b21:
Removing instruction cputs_from___b22:
Removing instruction __b24_from___b23:
Removing instruction cputs_from___b24:
Removing instruction printf_ulong_from___b25:
Removing instruction __b7_from___b26:
Removing instruction __b6_from_printf_number_buffer:
Removing instruction strlen_from___b6:
Removing instruction __b13_from___b14:
Removing instruction __b13_from___b7:
Removing instruction __b1_from_printf_number_buffer:
Removing instruction __b21_from___b13:
Removing instruction __b21:
Removing instruction __b1_from___b21:
Removing instruction __b11_from___b4:
Removing instruction strupr_from___b11:
Removing instruction __b5_from___b11:
Removing instruction __b5_from___b4:
Removing instruction cputs_from___b5:
Removing instruction __b1_from_cputc:
Removing instruction __b1_from_cscroll:
Removing instruction memcpy_from___b1:
Removing instruction __b2_from___b1:
Removing instruction memcpy_from___b2:
Removing instruction __b3_from___b2:
Removing instruction memset_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b1_from_memcpy:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_cputs:
Removing instruction __b1_from___b2:
Removing instruction cputc_from___b2:
Removing instruction __breturn_from_toupper:
Removing instruction __breturn_from___b1:
Removing instruction __b4_from___b7:
Removing instruction ultoa_append_from___b5:
Removing instruction __b4_from___b7:
Removing instruction uctoa_append_from___b5:
Removing instruction __b1_from___b15:
Removing instruction __b1_from___b3:
Removing instruction __b5_from___b6:
Removing instruction __b5_from_plot1:
Removing instruction __b6_from___b5:
Removing instruction __b6_from_plot2:
Removing instruction __b8_from___b2:
Removing instruction __b8_from___b9:
Removing instruction plot3:
Removing instruction __b9_from___b10:
Removing instruction __b9_from___b11:
Removing instruction __b1_from_sgn_u8:
Removing instruction __breturn_from___b1:
Removing instruction __breturn_from_abs_u8:
Removing instruction toD0181_from_irq_bottom_1:
Removing instruction toD0181:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b3:
Removing instruction __b2:
Removing instruction __bend:
Removing instruction memset_from_main:
Removing instruction __b12:
Removing instruction memset_from___b12:
Removing instruction __b13:
Removing instruction __b1_from___b13:
Removing instruction __b3:
Removing instruction __b14:
Removing instruction __b7_from___b14:
Removing instruction __b15:
Removing instruction memset_from___b15:
Removing instruction __b16:
Removing instruction line_from___b16:
Removing instruction __b17:
Removing instruction line_from___b17:
Removing instruction __b18:
Removing instruction line_from___b18:
Removing instruction __b19:
Removing instruction __b10:
Removing instruction eorfill_from___b10:
Removing instruction __b20:
Removing instruction __b11:
Removing instruction __b21:
Removing instruction gotoxy_from___b21:
Removing instruction __b22:
Removing instruction __b23:
Removing instruction printf_uchar_from___b23:
Removing instruction __b24:
Removing instruction __b25:
Removing instruction __b26:
Removing instruction __b4_from___b2:
Removing instruction __b6:
Removing instruction __b1_from___b6:
Removing instruction __b4_from___b5:
Removing instruction __b1:
Removing instruction ultoa_from___b1:
Removing instruction __b2:
Removing instruction printf_number_buffer_from___b2:
Removing instruction __breturn:
Removing instruction __b6:
Removing instruction __b14:
Removing instruction __b7:
Removing instruction __b17:
Removing instruction __b16:
Removing instruction printf_padding_from___b8:
Removing instruction __b9:
Removing instruction cputc_from___b9:
Removing instruction __b18:
Removing instruction printf_padding_from___b10:
Removing instruction __b11:
Removing instruction __b15:
Removing instruction __b20:
Removing instruction __b19:
Removing instruction printf_padding_from___b12:
Removing instruction __b1_from_printf_padding:
Removing instruction __breturn:
Removing instruction cputc_from___b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction memset_from___b4:
Removing instruction __b5:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_strupr:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b2:
Removing instruction __b1_from_strlen:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_ultoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1_from_ultoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1:
Removing instruction uctoa_from___b1:
Removing instruction __b2:
Removing instruction printf_number_buffer_from___b2:
Removing instruction __breturn:
Removing instruction __b1_from_uctoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1_from_uctoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_eorfill:
Removing instruction __breturn:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b3_from___b4:
Removing instruction abs_u8_from_line:
Removing instruction __b12:
Removing instruction abs_u8_from___b12:
Removing instruction __b13:
Removing instruction sgn_u8_from___b13:
Removing instruction __b14:
Removing instruction sgn_u8_from___b14:
Removing instruction __b15:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction plot1:
Removing instruction __b7:
Removing instruction plot2:
Removing instruction __b11:
Removing instruction __b10:
Removing instruction plot4:
Removing instruction __breturn_from_sgn_u8:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in bcc __breturn_from___b2
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in jmp __breturn_from___b2
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in jmp __breturn_from___b1
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b1_from___b13 to __b6
Relabelling long label __breturn_from___b2 to __b2
Relabelling long label __breturn_from___b1 to __b2
Succesful ASM optimization Pass5RelabelLongLabels
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda.z dy
Replacing instruction lda.z y with TYA
Removing instruction lda.z x
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Fixing long branch [175] bcc __b2 to bcs

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const nomodify byte) BLACK = (byte) 0
(const nomodify byte) BORDER_YPOS_BOTTOM = (byte) $fa
(const nomodify byte*) CANVAS1 = (byte*) 12288
(const nomodify byte*) CANVAS2 = (byte*) 14336
(const nomodify struct MOS6526_CIA*) CIA1 = (struct MOS6526_CIA*) 56320
(const nomodify struct MOS6526_CIA*) CIA2 = (struct MOS6526_CIA*) 56576
(const nomodify dword*) CIA2_TIMER_AB = (dword*) 56580
(const nomodify byte) CIA_INTERRUPT_CLEAR = (byte) $7f
(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = (byte) $40
(const nomodify byte) CIA_TIMER_CONTROL_START = (byte) 1
(const nomodify dword) CLOCKS_PER_INIT = (dword) $12
(const nomodify byte*) COLS = (byte*) 55296
(const nomodify byte*) CONIO_CIA1_PORT_A = (byte*) 56320
(const nomodify byte*) CONIO_CIA1_PORT_B = (byte*) 56321
(const nomodify byte*) CONIO_SCREEN_COLORS = (byte*) 55296
(const nomodify byte*) CONIO_SCREEN_TEXT = (byte*) 1024
(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT = (byte) $e
(const nomodify byte*) CONSOLE = (byte*) 1024
(const byte*) COSTAB = (const byte*) SINTAB+(byte) $40
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const nomodify byte) IRQ_RASTER = (byte) 1
(const nomodify void()**) KERNEL_IRQ = (void()**) 788
(const nomodify byte*) LINE_BUFFER = (byte*) 8192
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = (byte) $d
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = (byte) $e
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = (byte) $f
(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = (byte) $21
(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = (byte) $20
(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = (byte) $11
(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE = (byte) $1a
(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS = (byte) $19
(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY = (byte) $18
(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER = (byte) $12
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = (byte) 1
(const nomodify byte*) PETSCII = (byte*) 4096
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const dword*) RADIX_DECIMAL_VALUES_LONG[]  = { (dword) $3b9aca00, (dword) $5f5e100, (dword) $989680, (dword) $f4240, (dword) $186a0, (dword) $2710, (dword) $3e8, (dword) $64, (dword) $a }
(const byte*) RADIX_HEXADECIMAL_VALUES_CHAR[]  = { (byte) $10 }
(const nomodify byte) RED = (byte) 2
(const nomodify byte*) SCREEN = (byte*) 11264
(const byte*) SINTAB[(number) $140]  = kickasm {{ .fill $200, 63 + 63*sin(i*2*PI/$100)
 }}
(const byte) SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = (byte) $c
(const nomodify struct MOS6569_VICII*) VICII = (struct MOS6569_VICII*) 53248
(const nomodify byte) WHITE = (byte) 1
(byte()) abs_u8((byte) abs_u8::u)
(byte~) abs_u8::$0 reg byte x 20002.0
(label) abs_u8::@1
(label) abs_u8::@return
(byte) abs_u8::return
(byte) abs_u8::return#0 reg byte a 2002.0
(byte) abs_u8::return#1 reg byte a 2002.0
(byte) abs_u8::return#2 reg byte a 20002.0
(byte) abs_u8::return#4 reg byte a 5501.0
(byte) abs_u8::u
(byte) abs_u8::u#0 reg byte a 2002.0
(byte) abs_u8::u#1 reg byte a 2002.0
(byte) abs_u8::u#2 reg byte a 10668.333333333332
(volatile byte) canvas_show_flag loadstore zp[1]:27 15.577464788732396
(volatile byte) canvas_show_memory loadstore zp[1]:26 2.452380952380952
(dword()) clock()
(label) clock::@return
(dword) clock::return
(dword) clock::return#0 return zp[4]:11 367.33333333333337
(dword) clock::return#2 return zp[4]:11 202.0
(void()) clock_start()
(label) clock_start::@return
(byte*) conio_cursor_color loadstore zp[2]:23 2.027272819090909E8
(byte*) conio_cursor_text loadstore zp[2]:21 2.0090091E8
(byte) conio_cursor_x loadstore zp[1]:19 2.5263168515789475E7
(byte) conio_cursor_y loadstore zp[1]:20 2.824561492105263E8
(byte) conio_textcolor loadstore zp[1]:25 6.312500065625E7
(void()) cputc((byte) cputc::c)
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0 reg byte a 2.0000002E7
(byte) cputc::c#1 reg byte a 2.0000002E7
(byte) cputc::c#2 reg byte a 20002.0
(byte) cputc::c#3 reg byte a 1.100050025E8
(void()) cputln()
(byte*~) cputln::$1 zp[2]:21 2.000000002E9
(byte*~) cputln::$2 zp[2]:23 2.000000002E9
(label) cputln::@return
(word) cputln::ln_offset
(word) cputln::ln_offset#0 ln_offset zp[2]:40 1.000000001E9
(void()) cputs((to_nomodify byte*) cputs::s)
(label) cputs::@1
(label) cputs::@2
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#1 reg byte a 1.0000001E7
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 s zp[2]:46 5000000.5
(to_nomodify byte*) cputs::s#4 s zp[2]:46 1.5050002E7
(to_nomodify byte*) cputs::s#5 s zp[2]:46 100001.0
(void()) cscroll()
(byte*~) cscroll::$7 zp[2]:21 2.0000000002E10
(byte*~) cscroll::$8 zp[2]:23 2.0000000002E10
(label) cscroll::@1
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@return
(void()) eorfill((byte*) eorfill::line_buffer , (byte*) eorfill::canvas)
(label) eorfill::@1
(label) eorfill::@2
(label) eorfill::@3
(label) eorfill::@4
(label) eorfill::@5
(label) eorfill::@return
(byte*) eorfill::canvas
(byte*) eorfill::canvas#0 canvas zp[2]:23 551.0
(byte) eorfill::eor
(byte) eorfill::eor#0 reg byte a 200002.0
(byte) eorfill::eor#1 reg byte a 1000001.0
(byte) eorfill::eor#2 reg byte a 1050001.5
(byte*) eorfill::fill_column
(byte*) eorfill::fill_column#1 fill_column zp[2]:23 100001.0
(byte*) eorfill::fill_column#5 fill_column zp[2]:23 133444.88888888888
(byte*) eorfill::line_buffer
(byte*) eorfill::line_column
(byte*) eorfill::line_column#1 line_column zp[2]:21 66667.33333333333
(byte*) eorfill::line_column#2 line_column zp[2]:21 162500.5
(byte) eorfill::x
(byte) eorfill::x#1 reg byte x 200002.0
(byte) eorfill::x#2 reg byte x 30000.300000000003
(byte) eorfill::y
(byte) eorfill::y#1 reg byte y 2000002.0
(byte) eorfill::y#2 reg byte y 1250001.25
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(label) gotoxy::@1
(label) gotoxy::@return
(word) gotoxy::offset
(const word) gotoxy::offset#0 offset = (word)(const byte) gotoxy::y#2*(byte) $28
(byte) gotoxy::x
(const byte) gotoxy::x#2 x = (byte) 0
(byte) gotoxy::y
(const byte) gotoxy::y#2 y = (byte) $18
interrupt(KERNEL_MIN)(void()) irq_bottom_1()
(label) irq_bottom_1::@1
(label) irq_bottom_1::@return
(label) irq_bottom_1::toD0181
(byte*) irq_bottom_1::toD0181_gfx
(byte) irq_bottom_1::toD0181_return
(const byte) irq_bottom_1::toD0181_return#0 toD0181_return = >(word)(const nomodify byte*) CONSOLE&(word) $3fff*(byte) 4|>(word)(const nomodify byte*) PETSCII/(byte) 4&(byte) $f
(byte*) irq_bottom_1::toD0181_screen
interrupt(KERNEL_KEYBOARD)(void()) irq_bottom_2()
(byte~) irq_bottom_2::$0 reg byte a 4.0
(label) irq_bottom_2::@1
(label) irq_bottom_2::@2
(label) irq_bottom_2::@3
(label) irq_bottom_2::@return
(byte()) kbhit()
(label) kbhit::@return
(byte) kbhit::return
(byte) kbhit::return#0 reg byte a 4.333333333333333
(byte) kbhit::return#2 reg byte a 4.0
(void()) line((byte*) line::canvas , (byte) line::x1 , (byte) line::y1 , (byte) line::x2 , (byte) line::y2)
(label) line::@1
(label) line::@10
(label) line::@11
(label) line::@12
(label) line::@13
(label) line::@14
(label) line::@15
(label) line::@2
(label) line::@3
(label) line::@4
(label) line::@5
(label) line::@6
(label) line::@7
(label) line::@8
(label) line::@9
(label) line::@return
(byte*) line::canvas
(byte) line::dx
(byte) line::dx#0 dx zp[1]:36 5941.294117647059
(byte) line::dy
(byte) line::dy#0 dy zp[1]:37 6446.936170212766
(byte) line::e
(byte) line::e#0 reg byte x 333.6666666666667
(byte) line::e#1 reg byte x 133334.66666666666
(byte) line::e#2 reg byte x 33333.666666666664
(byte) line::e#3 reg byte x 100501.5
(byte) line::e#5 reg byte x 150001.5
(byte) line::e1
(byte) line::e1#0 reg byte x 2002.0
(byte) line::e1#1 reg byte x 133334.66666666666
(byte) line::e1#2 reg byte x 200002.0
(byte) line::e1#3 reg byte x 28714.714285714286
(byte) line::e1#7 reg byte x 150001.5
(label) line::plot1
(byte~) line::plot1_$0 reg byte a 2002.0
(byte~) line::plot1_$1 zp[1]:42 2002.0
(byte~) line::plot1_$2 reg byte a 2002.0
(byte*) line::plot1_column
(byte*) line::plot1_column#0 plot1_column zp[2]:40 1501.5
(byte) line::plot1_x
(byte) line::plot1_y
(label) line::plot2
(byte~) line::plot2_$0 reg byte a 200002.0
(byte~) line::plot2_$1 zp[1]:45 200002.0
(byte~) line::plot2_$2 reg byte a 200002.0
(byte*) line::plot2_column
(byte*) line::plot2_column#0 plot2_column zp[2]:43 150001.5
(byte) line::plot2_x
(byte) line::plot2_x#0 plot2_x zp[1]:17 57143.42857142857
(byte) line::plot2_y
(label) line::plot3
(byte~) line::plot3_$0 reg byte a 200002.0
(byte~) line::plot3_$1 zp[1]:48 200002.0
(byte~) line::plot3_$2 reg byte a 200002.0
(byte*) line::plot3_column
(byte*) line::plot3_column#0 plot3_column zp[2]:46 150001.5
(byte) line::plot3_x
(byte) line::plot3_y
(label) line::plot4
(byte~) line::plot4_$0 reg byte a 2002.0
(byte~) line::plot4_$1 reg byte a 2002.0
(byte~) line::plot4_$2 reg byte a 2002.0
(byte*) line::plot4_column
(byte*) line::plot4_column#0 plot4_column zp[2]:49 1501.5
(byte) line::plot4_x
(byte) line::plot4_y
(byte) line::sx
(byte) line::sx#0 sx zp[1]:38 4697.767441860465
(byte) line::sy
(byte) line::sy#0 sy zp[1]:39 5153.923076923076
(byte) line::x
(byte) line::x#0 x zp[1]:17 217.55172413793105
(byte) line::x#10 x zp[1]:17 75251.0
(byte) line::x#12 x zp[1]:17 66834.16666666666
(byte) line::x#13 x zp[1]:17 30200.5
(byte) line::x#16 x zp[1]:17 150001.5
(byte) line::x1
(byte) line::x1#0 x1 zp[1]:17 50.5
(byte) line::x1#1 x1 zp[1]:17 50.5
(byte) line::x1#2 x1 zp[1]:17 50.5
(byte) line::x2
(byte) line::x2#0 x2 zp[1]:15 101.0
(byte) line::x2#1 x2 zp[1]:15 101.0
(byte) line::x2#11 x2 zp[1]:15 2841.8333333333335
(byte) line::x2#2 x2 zp[1]:15 101.0
(byte) line::y
(byte) line::y#0 y zp[1]:18 239.27777777777777
(byte) line::y#1 y zp[1]:18 1001.0
(byte) line::y#10 y zp[1]:18 55667.33333333333
(byte) line::y#11 y zp[1]:18 50334.16666666667
(byte) line::y#13 y zp[1]:18 667.3333333333333
(byte) line::y#15 y zp[1]:18 41667.08333333333
(byte) line::y#3 y zp[1]:18 100001.0
(byte) line::y#6 y zp[1]:18 201003.0
(byte) line::y1
(byte) line::y1#0 y1 zp[1]:18 67.33333333333333
(byte) line::y1#1 y1 zp[1]:18 67.33333333333333
(byte) line::y1#2 y1 zp[1]:18 67.33333333333333
(byte) line::y2
(byte) line::y2#0 y2 zp[1]:16 202.0
(byte) line::y2#1 y2 zp[1]:16 202.0
(byte) line::y2#10 y2 zp[1]:16 226.68421052631578
(byte) line::y2#13 y2 zp[1]:16 4857.285714285714
(byte) line::y2#2 y2 zp[1]:16 202.0
(byte) line::y2#3 y2 zp[1]:16 2002.0
(void()) main()
(dword~) main::$18 zp[4]:11 202.0
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@18
(label) main::@19
(label) main::@2
(label) main::@20
(label) main::@21
(label) main::@22
(label) main::@23
(label) main::@24
(label) main::@25
(label) main::@26
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(byte) main::c
(byte) main::c#1 reg byte x 1001.0
(byte) main::c#2 reg byte x 776.0
(byte) main::c#4 reg byte x 202.0
(byte*) main::canvas
(word) main::canvas#1 canvas zp[2]:9 5.611111111111111
(byte*) main::canvas#10 canvas zp[2]:9 8.911764705882353
(byte*) main::canvas#24 canvas zp[2]:9 202.0
(byte*) main::cols
(byte*) main::cols#1 cols zp[2]:2 67.33333333333333
(byte*) main::cols#5 cols zp[2]:2 133.66666666666669
(dword) main::cyclecount
(dword) main::cyclecount#0 cyclecount zp[4]:11 25.25
(byte) main::p0_idx
(byte) main::p0_idx#1 p0_idx zp[1]:6 11.222222222222223
(byte) main::p0_idx#11 p0_idx zp[1]:6 15.538461538461538
(byte) main::p1_idx
(byte) main::p1_idx#1 p1_idx zp[1]:7 7.769230769230769
(byte) main::p1_idx#2 p1_idx zp[1]:7 14.962962962962964
(byte) main::p2_idx
(byte) main::p2_idx#1 p2_idx zp[1]:8 8.08
(byte) main::p2_idx#2 p2_idx zp[1]:8 14.428571428571429
(const byte*) main::s[(byte) 8]  = (byte*) "frame: "
(const byte*) main::s1[(byte) $a]  = (byte*) " cycles: "
(byte*) main::screen
(byte*) main::screen#1 screen zp[2]:4 101.0
(byte*) main::screen#5 screen zp[2]:4 120.3
(label) main::toD0181
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(const byte) main::toD0181_return#0 toD0181_return = >(word)(const nomodify byte*) SCREEN&(word) $3fff*(byte) 4|>(word)(const nomodify byte*) CANVAS1/(byte) 4&(byte) $f
(byte*) main::toD0181_screen
(label) main::toD0182
(byte*) main::toD0182_gfx
(byte) main::toD0182_return
(const byte) main::toD0182_return#0 toD0182_return = >(word)(const nomodify byte*) SCREEN&(word) $3fff*(byte) 4|>(word)(const nomodify byte*) CANVAS2/(byte) 4&(byte) $f
(byte*) main::toD0182_screen
(byte) main::x
(byte) main::x#1 reg byte y 2002.0
(byte) main::x#2 reg byte y 1001.0
(byte) main::x0
(byte) main::x0#0 x0 zp[1]:28 16.833333333333332
(byte) main::x1
(byte) main::x1#0 x1 zp[1]:15 33.666666666666664
(byte) main::x2
(byte) main::x2#0 x2 zp[1]:15 43.285714285714285
(byte) main::y
(byte) main::y#1 y zp[1]:19 202.0
(byte) main::y#2 y zp[1]:19 36.72727272727273
(byte) main::y0
(byte) main::y0#0 y0 zp[1]:29 16.833333333333332
(byte) main::y1
(byte) main::y1#0 y1 zp[1]:30 33.666666666666664
(byte) main::y2
(byte) main::y2#0 y2 zp[1]:31 43.285714285714285
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#2 destination zp[2]:49
(byte*) memcpy::dst
(byte*) memcpy::dst#1 dst zp[2]:49 1.00000000000001E14
(byte*) memcpy::dst#2 dst zp[2]:49 1.0003333333333467E14
(byte*) memcpy::dst#4 dst zp[2]:49 2.00000000002E11
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(void*) memcpy::source#2 source zp[2]:40
(byte*) memcpy::src
(byte*) memcpy::src#1 src zp[2]:40 2.00000000000002E14
(byte*) memcpy::src#2 src zp[2]:40 1.0002500000000125E14
(byte*) memcpy::src#4 src zp[2]:40 1.00000000001E11
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0 src_end zp[2]:43 1.251250000000025E13
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(byte) memset::c#1 reg byte x 2.0000000002E10
(byte) memset::c#8 reg byte x 1.25125000000025E12
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:49 2.0000000000002E13
(byte*) memset::dst#2 dst zp[2]:49 1.3366666666668332E13
(byte*) memset::dst#4 dst zp[2]:49 2.00000000002E11
(byte*) memset::end
(byte*) memset::end#0 end zp[2]:40 1.6833333333336665E12
(word) memset::num
(word) memset::num#6 num zp[2]:40 1.00000000001E11
(void*) memset::return
(void*) memset::str
(void*) memset::str#7 str zp[2]:49
(const byte*) plot_bit[(number) 8]  = { (byte) $80, (byte) $40, (byte) $20, (byte) $10, (byte) 8, (byte) 4, (byte) 2, (byte) 1 }
(const byte**) plot_column[(number) $10]  = { (const nomodify byte*) LINE_BUFFER, (const nomodify byte*) LINE_BUFFER+(byte)(number) 1*(number) $80, (const nomodify byte*) LINE_BUFFER+(word)(number) 2*(number) $80, (const nomodify byte*) LINE_BUFFER+(word)(number) 3*(number) $80, (const nomodify byte*) LINE_BUFFER+(word)(number) 4*(number) $80, (const nomodify byte*) LINE_BUFFER+(word)(number) 5*(number) $80, (const nomodify byte*) LINE_BUFFER+(word)(number) 6*(number) $80, (const nomodify byte*) LINE_BUFFER+(word)(number) 7*(number) $80, (const nomodify byte*) LINE_BUFFER+(word)(number) 8*(number) $80, (const nomodify byte*) LINE_BUFFER+(word)(number) 9*(number) $80, (const nomodify byte*) LINE_BUFFER+(word)(number) $a*(number) $80, (const nomodify byte*) LINE_BUFFER+(word)(number) $b*(number) $80, (const nomodify byte*) LINE_BUFFER+(word)(number) $c*(number) $80, (const nomodify byte*) LINE_BUFFER+(word)(number) $d*(number) $80, (const nomodify byte*) LINE_BUFFER+(word)(number) $e*(number) $80, (const nomodify byte*) LINE_BUFFER+(word)(number) $f*(number) $80 }
(struct printf_buffer_number) printf_buffer loadstore mem[12] = {}
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(word~) printf_number_buffer::$19 zp[2]:49 10001.0
(label) printf_number_buffer::@1
(label) printf_number_buffer::@10
(label) printf_number_buffer::@11
(label) printf_number_buffer::@12
(label) printf_number_buffer::@13
(label) printf_number_buffer::@14
(label) printf_number_buffer::@15
(label) printf_number_buffer::@16
(label) printf_number_buffer::@17
(label) printf_number_buffer::@18
(label) printf_number_buffer::@19
(label) printf_number_buffer::@2
(label) printf_number_buffer::@20
(label) printf_number_buffer::@21
(label) printf_number_buffer::@3
(label) printf_number_buffer::@4
(label) printf_number_buffer::@5
(label) printf_number_buffer::@6
(label) printf_number_buffer::@7
(label) printf_number_buffer::@8
(label) printf_number_buffer::@9
(label) printf_number_buffer::@return
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0 buffer_sign zp[1]:31 2002.0
(byte) printf_number_buffer::buffer_sign#1 buffer_sign zp[1]:31 2002.0
(byte) printf_number_buffer::buffer_sign#10 buffer_sign zp[1]:31 1600.25
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_justify_left#10 format_justify_left zp[1]:29 645.2258064516129
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_min_length#2 reg byte x 1000.1
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_upper_case#10 format_upper_case zp[1]:15 384.65384615384613
(byte) printf_number_buffer::format_zero_padding
(byte) printf_number_buffer::format_zero_padding#10 format_zero_padding zp[1]:30 937.59375
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::len#0 reg byte y 15001.5
(signed byte) printf_number_buffer::len#1 reg byte y 20002.0
(signed byte) printf_number_buffer::len#2 reg byte y 30003.0
(signed byte) printf_number_buffer::padding
(signed byte) printf_number_buffer::padding#1 padding zp[1]:16 10001.0
(signed byte) printf_number_buffer::padding#10 padding zp[1]:16 1904.952380952381
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(label) printf_padding::@1
(label) printf_padding::@2
(label) printf_padding::@3
(label) printf_padding::@return
(byte) printf_padding::i
(byte) printf_padding::i#1 i zp[1]:28 2.0000002E7
(byte) printf_padding::i#2 i zp[1]:28 7500000.75
(byte) printf_padding::length
(byte) printf_padding::length#0 length zp[1]:17 20002.0
(byte) printf_padding::length#1 length zp[1]:17 20002.0
(byte) printf_padding::length#2 length zp[1]:17 20002.0
(byte) printf_padding::length#4 length zp[1]:17 1671667.3333333333
(byte) printf_padding::pad
(byte) printf_padding::pad#5 pad zp[1]:18 1666666.8333333333
(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
(label) printf_uchar::@1
(label) printf_uchar::@2
(label) printf_uchar::@return
(struct printf_format_number) printf_uchar::format
(byte) printf_uchar::format_justify_left
(const byte) printf_uchar::format_justify_left#0 format_justify_left = (byte) 0
(byte) printf_uchar::format_min_length
(const byte) printf_uchar::format_min_length#0 format_min_length = (byte) 2
(byte) printf_uchar::format_radix
(byte) printf_uchar::format_sign_always
(byte) printf_uchar::format_upper_case
(const byte) printf_uchar::format_upper_case#0 format_upper_case = (byte) 0
(byte) printf_uchar::format_zero_padding
(const byte) printf_uchar::format_zero_padding#0 format_zero_padding = (byte) 1
(byte) printf_uchar::uvalue
(byte) printf_uchar::uvalue#0 reg byte x 367.33333333333337
(void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_upper_case , (byte) printf_ulong::format_radix)
(label) printf_ulong::@1
(label) printf_ulong::@2
(label) printf_ulong::@return
(struct printf_format_number) printf_ulong::format
(byte) printf_ulong::format_justify_left
(const byte) printf_ulong::format_justify_left#0 format_justify_left = (byte) 0
(byte) printf_ulong::format_min_length
(const byte) printf_ulong::format_min_length#0 format_min_length = (byte) 6
(byte) printf_ulong::format_radix
(byte) printf_ulong::format_sign_always
(byte) printf_ulong::format_upper_case
(const byte) printf_ulong::format_upper_case#0 format_upper_case = (byte) 0
(byte) printf_ulong::format_zero_padding
(const byte) printf_ulong::format_zero_padding#0 format_zero_padding = (byte) 0
(dword) printf_ulong::uvalue
(dword) printf_ulong::uvalue#0 uvalue zp[4]:11 367.33333333333337
(void()) setup_irq()
(label) setup_irq::@return
(byte()) sgn_u8((byte) sgn_u8::u)
(byte~) sgn_u8::$0 reg byte a 20002.0
(label) sgn_u8::@1
(label) sgn_u8::@return
(byte) sgn_u8::return
(byte) sgn_u8::return#0 reg byte a 2002.0
(byte) sgn_u8::return#1 reg byte a 2002.0
(byte) sgn_u8::return#4 reg byte a 500.5
(byte) sgn_u8::u
(byte) sgn_u8::u#0 reg byte a 2002.0
(byte) sgn_u8::u#1 reg byte a 2002.0
(byte) sgn_u8::u#2 reg byte a 12003.0
(word()) strlen((byte*) strlen::str)
(label) strlen::@1
(label) strlen::@2
(label) strlen::@return
(word) strlen::len
(word) strlen::len#1 len zp[2]:49 1.0000001E7
(word) strlen::len#2 len zp[2]:49 5002500.75
(word) strlen::return
(word) strlen::return#2 return zp[2]:49 20002.0
(byte*) strlen::str
(byte*) strlen::str#0 str zp[2]:40 2.0000002E7
(byte*) strlen::str#2 str zp[2]:40 1.0000001E7
(byte*()) strupr((byte*) strupr::str)
(byte~) strupr::$0 reg byte a 2.0000002E7
(label) strupr::@1
(label) strupr::@2
(label) strupr::@3
(label) strupr::@return
(byte*) strupr::return
(byte*) strupr::src
(byte*) strupr::src#1 src zp[2]:46 2.0000002E7
(byte*) strupr::src#2 src zp[2]:46 7142857.857142856
(byte*) strupr::str
(const byte*) strupr::str#0 str = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
(byte()) textcolor((byte) textcolor::color)
(label) textcolor::@return
(byte) textcolor::color
(byte) textcolor::old
(byte) textcolor::return
(label) toD0181
(byte*) toD0181_gfx
(byte) toD0181_return
(const byte) toD0181_return#0 toD0181_return = >(word)(const nomodify byte*) SCREEN&(word) $3fff*(byte) 4|>(word)(const nomodify byte*) CANVAS2/(byte) 4&(byte) $f
(byte*) toD0181_screen
(byte()) toupper((byte) toupper::ch)
(label) toupper::@1
(label) toupper::@2
(label) toupper::@return
(byte) toupper::ch
(byte) toupper::ch#0 reg byte a 1.70000002E8
(byte) toupper::return
(byte) toupper::return#0 reg byte a 2.00000002E8
(byte) toupper::return#2 reg byte a 1.0333333466666667E8
(byte) toupper::return#3 reg byte a 2.0000002E7
(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
(label) uctoa::@1
(label) uctoa::@2
(label) uctoa::@3
(label) uctoa::@4
(label) uctoa::@5
(label) uctoa::@6
(label) uctoa::@7
(label) uctoa::@return
(byte*) uctoa::buffer
(byte*) uctoa::buffer#11 buffer zp[2]:49 335000.50000000006
(byte*) uctoa::buffer#14 buffer zp[2]:49 1500001.5
(byte*) uctoa::buffer#3 buffer zp[2]:49 20002.0
(byte*) uctoa::buffer#4 buffer zp[2]:49 2000002.0
(byte) uctoa::digit
(byte) uctoa::digit#1 digit zp[1]:30 2000002.0
(byte) uctoa::digit#2 digit zp[1]:30 307692.6153846154
(byte) uctoa::digit_value
(byte) uctoa::digit_value#0 digit_value zp[1]:36 600000.6000000001
(byte*) uctoa::digit_values
(byte) uctoa::max_digits
(const byte) uctoa::max_digits#2 max_digits = (byte) 2
(byte) uctoa::radix
(byte) uctoa::started
(byte) uctoa::started#2 started zp[1]:31 600000.6000000001
(byte) uctoa::started#4 started zp[1]:31 1000001.0
(byte) uctoa::value
(byte) uctoa::value#0 reg byte x 1000001.0
(byte) uctoa::value#1 reg byte x 5501.0
(byte) uctoa::value#2 reg byte x 670001.0000000001
(byte) uctoa::value#6 reg byte x 1500001.5
(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
(label) uctoa_append::@1
(label) uctoa_append::@2
(label) uctoa_append::@3
(label) uctoa_append::@return
(byte*) uctoa_append::buffer
(byte*) uctoa_append::buffer#0 buffer zp[2]:49 1375000.25
(byte) uctoa_append::digit
(byte) uctoa_append::digit#1 reg byte y 1.0000000001E10
(byte) uctoa_append::digit#2 reg byte y 1.00050000015E10
(byte) uctoa_append::return
(byte) uctoa_append::return#0 reg byte x 2000002.0
(byte) uctoa_append::sub
(byte) uctoa_append::sub#0 sub zp[1]:36 3.3335000005E9
(byte) uctoa_append::value
(byte) uctoa_append::value#0 reg byte x 3666667.333333333
(byte) uctoa_append::value#1 reg byte x 2.0000000002E10
(byte) uctoa_append::value#2 reg byte x 5.001833334166666E9
(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
(byte~) ultoa::$10 reg byte a 2000002.0
(byte~) ultoa::$11 reg byte a 20002.0
(label) ultoa::@1
(label) ultoa::@2
(label) ultoa::@3
(label) ultoa::@4
(label) ultoa::@5
(label) ultoa::@6
(label) ultoa::@7
(label) ultoa::@return
(byte*) ultoa::buffer
(byte*) ultoa::buffer#11 buffer zp[2]:40 287143.2857142857
(byte*) ultoa::buffer#14 buffer zp[2]:40 1500001.5
(byte*) ultoa::buffer#3 buffer zp[2]:40 20002.0
(byte*) ultoa::buffer#4 buffer zp[2]:40 2000002.0
(byte) ultoa::digit
(byte) ultoa::digit#1 digit zp[1]:29 2000002.0
(byte) ultoa::digit#2 digit zp[1]:29 285714.5714285714
(dword) ultoa::digit_value
(dword) ultoa::digit_value#0 digit_value zp[4]:32 600000.6000000001
(dword*) ultoa::digit_values
(byte) ultoa::max_digits
(const byte) ultoa::max_digits#1 max_digits = (byte) $a
(byte) ultoa::radix
(byte) ultoa::started
(byte) ultoa::started#2 reg byte x 500000.5
(byte) ultoa::started#4 reg byte x 1000001.0
(dword) ultoa::value
(dword) ultoa::value#0 value zp[4]:11 1000001.0
(dword) ultoa::value#1 value zp[4]:11 5501.0
(dword) ultoa::value#2 value zp[4]:11 572857.857142857
(dword) ultoa::value#6 value zp[4]:11 1500001.5
(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
(label) ultoa_append::@1
(label) ultoa_append::@2
(label) ultoa_append::@3
(label) ultoa_append::@return
(byte*) ultoa_append::buffer
(byte*) ultoa_append::buffer#0 buffer zp[2]:40 1375000.25
(byte) ultoa_append::digit
(byte) ultoa_append::digit#1 reg byte x 1.0000000001E10
(byte) ultoa_append::digit#2 reg byte x 1.00050000015E10
(dword) ultoa_append::return
(dword) ultoa_append::return#0 return zp[4]:11 2000002.0
(dword) ultoa_append::sub
(dword) ultoa_append::sub#0 sub zp[4]:32 3.3335000005E9
(dword) ultoa_append::value
(dword) ultoa_append::value#0 value zp[4]:11 3666667.333333333
(dword) ultoa_append::value#1 value zp[4]:11 2.0000000002E10
(dword) ultoa_append::value#2 value zp[4]:11 5.001833334166666E9

zp[2]:2 [ main::cols#5 main::cols#1 ]
zp[2]:4 [ main::screen#5 main::screen#1 ]
zp[1]:6 [ main::p0_idx#11 main::p0_idx#1 ]
zp[1]:7 [ main::p1_idx#2 main::p1_idx#1 ]
zp[1]:8 [ main::p2_idx#2 main::p2_idx#1 ]
zp[2]:9 [ main::canvas#10 main::canvas#24 main::canvas#1 ]
reg byte y [ main::x#2 main::x#1 ]
reg byte x [ main::c#2 main::c#4 main::c#1 ]
reg byte x [ printf_number_buffer::format_min_length#2 ]
reg byte y [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
reg byte a [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ]
reg byte x [ memset::c#8 memset::c#1 ]
reg byte a [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
zp[4]:11 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 printf_ulong::uvalue#0 ultoa_append::return#0 main::cyclecount#0 clock::return#2 main::$18 clock::return#0 ]
reg byte x [ ultoa::started#2 ultoa::started#4 ]
reg byte x [ ultoa_append::digit#2 ultoa_append::digit#1 ]
reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ]
reg byte x [ eorfill::x#2 eorfill::x#1 ]
reg byte y [ eorfill::y#2 eorfill::y#1 ]
reg byte a [ eorfill::eor#2 eorfill::eor#0 eorfill::eor#1 ]
zp[1]:15 [ line::x2#11 line::x2#0 line::x2#1 line::x2#2 main::x1#0 main::x2#0 printf_number_buffer::format_upper_case#10 ]
zp[1]:16 [ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
reg byte x [ line::e#3 line::e#5 line::e#0 line::e#1 line::e#2 ]
zp[1]:17 [ line::x#12 line::x#10 line::x#16 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::plot2_x#0 line::x#13 printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
zp[1]:18 [ line::y#10 line::y#6 line::y#15 line::y#13 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#11 line::y#3 printf_padding::pad#5 ]
reg byte x [ line::e1#3 line::e1#0 line::e1#7 line::e1#2 line::e1#1 ]
reg byte a [ sgn_u8::u#2 sgn_u8::u#0 sgn_u8::u#1 ]
reg byte a [ sgn_u8::return#4 ]
reg byte a [ abs_u8::return#4 abs_u8::return#2 abs_u8::u#2 abs_u8::u#0 abs_u8::u#1 ]
zp[1]:19 [ conio_cursor_x main::y#2 main::y#1 ]
zp[1]:20 [ conio_cursor_y ]
zp[2]:21 [ conio_cursor_text cputln::$1 cscroll::$7 eorfill::line_column#2 eorfill::line_column#1 ]
zp[2]:23 [ conio_cursor_color cputln::$2 cscroll::$8 eorfill::fill_column#5 eorfill::canvas#0 eorfill::fill_column#1 ]
zp[1]:25 [ conio_textcolor ]
zp[1]:26 [ canvas_show_memory ]
zp[1]:27 [ canvas_show_flag ]
zp[1]:28 [ main::x0#0 printf_padding::i#2 printf_padding::i#1 ]
zp[1]:29 [ main::y0#0 ultoa::digit#2 ultoa::digit#1 printf_number_buffer::format_justify_left#10 ]
zp[1]:30 [ main::y1#0 uctoa::digit#2 uctoa::digit#1 printf_number_buffer::format_zero_padding#10 ]
zp[1]:31 [ main::y2#0 uctoa::started#2 uctoa::started#4 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
reg byte x [ printf_uchar::uvalue#0 ]
reg byte a [ cputs::c#1 ]
reg byte a [ toupper::return#3 ]
reg byte a [ strupr::$0 ]
reg byte a [ ultoa::$11 ]
reg byte a [ ultoa::$10 ]
zp[4]:32 [ ultoa::digit_value#0 ultoa_append::sub#0 ]
reg byte x [ uctoa_append::return#0 ]
reg byte a [ abs_u8::return#0 ]
zp[1]:36 [ line::dx#0 uctoa::digit_value#0 uctoa_append::sub#0 ]
reg byte a [ abs_u8::return#1 ]
zp[1]:37 [ line::dy#0 ]
reg byte a [ sgn_u8::return#0 ]
zp[1]:38 [ line::sx#0 ]
reg byte a [ sgn_u8::return#1 ]
zp[1]:39 [ line::sy#0 ]
reg byte a [ line::plot1_$0 ]
reg byte a [ line::plot1_$2 ]
zp[2]:40 [ line::plot1_column#0 cputln::ln_offset#0 ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 strlen::str#2 strlen::str#0 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::num#6 memset::end#0 ]
zp[1]:42 [ line::plot1_$1 ]
reg byte a [ line::plot2_$0 ]
reg byte a [ line::plot2_$2 ]
zp[2]:43 [ line::plot2_column#0 memcpy::src_end#0 ]
zp[1]:45 [ line::plot2_$1 ]
reg byte a [ line::plot3_$0 ]
reg byte a [ line::plot3_$2 ]
zp[2]:46 [ line::plot3_column#0 strupr::src#2 strupr::src#1 cputs::s#4 cputs::s#5 cputs::s#0 ]
zp[1]:48 [ line::plot3_$1 ]
reg byte a [ line::plot4_$0 ]
reg byte a [ line::plot4_$2 ]
zp[2]:49 [ line::plot4_column#0 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 memset::str#7 memset::dst#2 memset::dst#4 memset::dst#1 ]
reg byte a [ line::plot4_$1 ]
reg byte a [ sgn_u8::$0 ]
reg byte x [ abs_u8::$0 ]
reg byte a [ kbhit::return#2 ]
reg byte a [ irq_bottom_2::$0 ]
reg byte a [ kbhit::return#0 ]
mem[12] [ printf_buffer ]


FINAL ASSEMBLER
Score: 271154

  // File Comments
// Filling a simple 16x16 2D polygon using EOR-filling
// - Clearing canvas
// - Trivial 2D rotation using sine tables
// - Line-drawing polygon edges (fill-ready lines)
// - Up-to-down EOR filling 
// - Double buffering
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // Timer Control - Start/stop timer (0:stop, 1: start)
  .const CIA_TIMER_CONTROL_START = 1
  // Timer B Control - Timer counts (00:system cycles, 01: CNT pulses, 10: timer A underflow, 11: time A underflow while CNT is high)
  .const CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
  .const BORDER_YPOS_BOTTOM = $fa
  // Bits for the VICII IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // The colors of the C64
  .const BLACK = 0
  .const WHITE = 1
  .const RED = 2
  // Clock cycles used to start & read the cycle clock by calling clock_start() and clock() once. Can be subtracted when calculating the number of cycles used by a routine.
  // To make precise cycle measurements interrupts and the display must be disabled so neither steals any cycles from the code.
  .const CLOCKS_PER_INIT = $12
  // The default text color
  .const CONIO_TEXTCOLOR_DEFAULT = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE = $1a
  .const OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
  .const OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS = $19
  .const toD0181_return = (>(SCREEN&$3fff)*4)|(>CANVAS2)/4&$f
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // Color Ram
  .label COLS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // CIA#2 timer A&B as one single 32-bit value
  .label CIA2_TIMER_AB = $dd04
  // The vector used when the KERNAL serves IRQ interrupts
  .label KERNEL_IRQ = $314
  // The screen width
  // The screen height
  // The screen bytes
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  // CIA#1 Port A: keyboard matrix columns and joystick #2
  .label CONIO_CIA1_PORT_A = $dc00
  // CIA#1 Port B: keyboard matrix rows and joystick #1.
  .label CONIO_CIA1_PORT_B = $dc01
  // The line buffer
  .label LINE_BUFFER = $2000
  // The two charsets used as screen buffers
  .label CANVAS1 = $3000
  .label CANVAS2 = $3800
  // The screen matrix
  .label SCREEN = $2c00
  // The screen console
  .label CONSOLE = $400
  // The default charset address
  .label PETSCII = $1000
  .label COSTAB = SINTAB+$40
  .label conio_cursor_x = $13
  .label conio_cursor_y = $14
  .label conio_cursor_text = $15
  .label conio_cursor_color = $17
  .label conio_textcolor = $19
  .label canvas_show_memory = $1a
  .label canvas_show_flag = $1b
  // @begin
__bbegin:
  // @1
  // conio_cursor_x = 0
  // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor x-position
  lda #0
  sta.z conio_cursor_x
  // conio_cursor_y = 0
  // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor y-position
  sta.z conio_cursor_y
  // conio_cursor_text = CONIO_SCREEN_TEXT
  // [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_TEXT
  sta.z conio_cursor_text
  lda #>CONIO_SCREEN_TEXT
  sta.z conio_cursor_text+1
  // conio_cursor_color = CONIO_SCREEN_COLORS
  // [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_COLORS
  sta.z conio_cursor_color
  lda #>CONIO_SCREEN_COLORS
  sta.z conio_cursor_color+1
  // conio_textcolor = CONIO_TEXTCOLOR_DEFAULT
  // [5] (byte) conio_textcolor ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- vbuz1=vbuc1 
  // The current text color
  lda #CONIO_TEXTCOLOR_DEFAULT
  sta.z conio_textcolor
  // [6] phi from @1 to toD0181 [phi:@1->toD0181]
  // toD0181
  // @3
  // canvas_show_memory = toD018(SCREEN, CANVAS2)
  // [7] (volatile byte) canvas_show_memory ← (const byte) toD0181_return#0 -- vbuz1=vbuc1 
  // The current canvas being rendered to the screen - in D018 format.
  lda #toD0181_return
  sta.z canvas_show_memory
  // canvas_show_flag = 0
  // [8] (volatile byte) canvas_show_flag ← (byte) 0 -- vbuz1=vbuc1 
  // Flag signalling that the canvas on screen needs to be updated.
  // Set to 1 by the renderer when a new canvas is ready for showing, and to 0 by the raster when the canvas is shown on screen.
  lda #0
  sta.z canvas_show_flag
  // [9] phi from @3 to @2 [phi:@3->@2]
  // @2
  // [10] call main 
  // [12] phi from @2 to main [phi:@2->main]
  jsr main
  rts
  // [11] phi from @2 to @end [phi:@2->@end]
  // @end
  // main
main: {
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>CANVAS1)/4&$f
    .const toD0182_return = (>(SCREEN&$3fff)*4)|(>CANVAS2)/4&$f
    .label __18 = $b
    .label cols = 2
    // Setup 16x16 canvas for rendering
    .label screen = 4
    .label y = $13
    .label x0 = $1c
    .label y0 = $1d
    .label x1 = $f
    .label y1 = $1e
    .label x2 = $f
    .label y2 = $1f
    .label p0_idx = 6
    .label p1_idx = 7
    .label p2_idx = 8
    // The current canvas being rendered to
    .label canvas = 9
    .label cyclecount = $b
    // memset(CONSOLE, ' ', 40*25)
    // [13] call memset 
  // Clear the console
    // [177] phi from main to memset [phi:main->memset]
    // [177] phi (byte) memset::c#8 = (byte) ' ' [phi:main->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [177] phi (void*) memset::str#7 = (void*)(const nomodify byte*) CONSOLE [phi:main->memset#1] -- pvoz1=pvoc1 
    lda #<CONSOLE
    sta.z memset.str
    lda #>CONSOLE
    sta.z memset.str+1
    // [177] phi (word) memset::num#6 = (word)(number) $28*(number) $19 [phi:main->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    // [14] phi from main to main::@12 [phi:main->main::@12]
    // main::@12
    // memset(SCREEN, 0, 40*25)
    // [15] call memset 
  // Clear the screen
    // [177] phi from main::@12 to memset [phi:main::@12->memset]
    // [177] phi (byte) memset::c#8 = (byte) 0 [phi:main::@12->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [177] phi (void*) memset::str#7 = (void*)(const nomodify byte*) SCREEN [phi:main::@12->memset#1] -- pvoz1=pvoc1 
    lda #<SCREEN
    sta.z memset.str
    lda #>SCREEN
    sta.z memset.str+1
    // [177] phi (word) memset::num#6 = (word)(number) $28*(number) $19 [phi:main::@12->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    // [16] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
    // main::@13
    // memset(COLS, BLACK, 40*25)
    // [17] call memset 
    // [177] phi from main::@13 to memset [phi:main::@13->memset]
    // [177] phi (byte) memset::c#8 = (const nomodify byte) BLACK [phi:main::@13->memset#0] -- vbuxx=vbuc1 
    ldx #BLACK
    // [177] phi (void*) memset::str#7 = (void*)(const nomodify byte*) COLS [phi:main::@13->memset#1] -- pvoz1=pvoc1 
    lda #<COLS
    sta.z memset.str
    lda #>COLS
    sta.z memset.str+1
    // [177] phi (word) memset::num#6 = (word)(number) $28*(number) $19 [phi:main::@13->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    // [18] phi from main::@13 to main::@1 [phi:main::@13->main::@1]
    // [18] phi (byte*) main::screen#5 = (const nomodify byte*) SCREEN+(byte) $c [phi:main::@13->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$c
    sta.z screen
    lda #>SCREEN+$c
    sta.z screen+1
    // [18] phi (byte*) main::cols#5 = (const nomodify byte*) COLS+(byte) $c [phi:main::@13->main::@1#1] -- pbuz1=pbuc1 
    lda #<COLS+$c
    sta.z cols
    lda #>COLS+$c
    sta.z cols+1
    // [18] phi (byte) main::y#2 = (byte) 0 [phi:main::@13->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // main::@1
  __b1:
    // for(char y=0;y<16;y++)
    // [19] if((byte) main::y#2<(byte) $10) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z y
    cmp #$10
    bcs !__b2+
    jmp __b2
  !__b2:
    // main::@3
    // VICII->BORDER_COLOR = BLACK
    // [20] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // VICII->BG_COLOR = BLACK
    // [21] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // setup_irq()
    // [22] call setup_irq 
    // Set-up the raster IRQ
    jsr setup_irq
    // [23] phi from main::@3 to main::@14 [phi:main::@3->main::@14]
    // main::@14
    // textcolor(WHITE)
    // [24] call textcolor 
    // Set text color
    jsr textcolor
    // [25] phi from main::@14 to main::@7 [phi:main::@14->main::@7]
    // [25] phi (byte*) main::canvas#10 = (const nomodify byte*) CANVAS1 [phi:main::@14->main::@7#0] -- pbuz1=pbuc1 
    lda #<CANVAS1
    sta.z canvas
    lda #>CANVAS1
    sta.z canvas+1
    // [25] phi (byte) main::p2_idx#2 = (byte) $f0+(byte) $aa [phi:main::@14->main::@7#1] -- vbuz1=vbuc1 
    lda #$f0+$aa
    sta.z p2_idx
    // [25] phi (byte) main::p1_idx#2 = (byte) $f0+(byte) $f [phi:main::@14->main::@7#2] -- vbuz1=vbuc1 
    lda #$f0+$f
    sta.z p1_idx
    // [25] phi (byte) main::p0_idx#11 = (byte) $f0 [phi:main::@14->main::@7#3] -- vbuz1=vbuc1 
    lda #$f0
    sta.z p0_idx
    // main::@7
    // [26] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
    // main::@8
  __b8:
    // clock_start()
    // [27] call clock_start 
    jsr clock_start
    // [28] phi from main::@8 to main::@15 [phi:main::@8->main::@15]
    // main::@15
    // memset(LINE_BUFFER, 0, 0x0800)
    // [29] call memset 
  // Clear line buffer
    // [177] phi from main::@15 to memset [phi:main::@15->memset]
    // [177] phi (byte) memset::c#8 = (byte) 0 [phi:main::@15->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [177] phi (void*) memset::str#7 = (void*)(const nomodify byte*) LINE_BUFFER [phi:main::@15->memset#1] -- pvoz1=pvoc1 
    lda #<LINE_BUFFER
    sta.z memset.str
    lda #>LINE_BUFFER
    sta.z memset.str+1
    // [177] phi (word) memset::num#6 = (word) $800 [phi:main::@15->memset#2] -- vwuz1=vwuc1 
    lda #<$800
    sta.z memset.num
    lda #>$800
    sta.z memset.num+1
    jsr memset
    // main::@16
    // x0 = COSTAB[p0_idx]
    // [30] (byte) main::x0#0 ← *((const byte*) COSTAB + (byte) main::p0_idx#11) -- vbuz1=pbuc1_derefidx_vbuz2 
    // Plot in line buffer
    ldy.z p0_idx
    lda COSTAB,y
    sta.z x0
    // y0 = SINTAB[p0_idx]
    // [31] (byte) main::y0#0 ← *((const byte*) SINTAB + (byte) main::p0_idx#11) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda SINTAB,y
    sta.z y0
    // x1 = COSTAB[p1_idx]
    // [32] (byte) main::x1#0 ← *((const byte*) COSTAB + (byte) main::p1_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z p1_idx
    lda COSTAB,y
    sta.z x1
    // y1 = SINTAB[p1_idx]
    // [33] (byte) main::y1#0 ← *((const byte*) SINTAB + (byte) main::p1_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda SINTAB,y
    sta.z y1
    // line(LINE_BUFFER, x0, y0, x1, y1)
    // [34] (byte) line::x1#0 ← (byte) main::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z line.x1
    // [35] (byte) line::y1#0 ← (byte) main::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z line.y1
    // [36] (byte) line::x2#0 ← (byte) main::x1#0
    // [37] (byte) line::y2#0 ← (byte) main::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z line.y2
    // [38] call line 
    // [307] phi from main::@16 to line [phi:main::@16->line]
    // [307] phi (byte) line::y2#10 = (byte) line::y2#0 [phi:main::@16->line#0] -- register_copy 
    // [307] phi (byte) line::x2#11 = (byte) line::x2#0 [phi:main::@16->line#1] -- register_copy 
    // [307] phi (byte) line::y#0 = (byte) line::y1#0 [phi:main::@16->line#2] -- register_copy 
    // [307] phi (byte) line::x#0 = (byte) line::x1#0 [phi:main::@16->line#3] -- register_copy 
    jsr line
    // main::@17
    // x2 = COSTAB[p2_idx]
    // [39] (byte) main::x2#0 ← *((const byte*) COSTAB + (byte) main::p2_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z p2_idx
    lda COSTAB,y
    sta.z x2
    // y2 = SINTAB[p2_idx]
    // [40] (byte) main::y2#0 ← *((const byte*) SINTAB + (byte) main::p2_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda SINTAB,y
    sta.z y2
    // line(LINE_BUFFER, x1, y1, x2, y2)
    // [41] (byte) line::x1#1 ← (byte) main::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z line.x1
    // [42] (byte) line::y1#1 ← (byte) main::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z line.y1
    // [43] (byte) line::x2#1 ← (byte) main::x2#0
    // [44] (byte) line::y2#1 ← (byte) main::y2#0 -- vbuz1=vbuz2 
    lda.z y2
    sta.z line.y2
    // [45] call line 
    // [307] phi from main::@17 to line [phi:main::@17->line]
    // [307] phi (byte) line::y2#10 = (byte) line::y2#1 [phi:main::@17->line#0] -- register_copy 
    // [307] phi (byte) line::x2#11 = (byte) line::x2#1 [phi:main::@17->line#1] -- register_copy 
    // [307] phi (byte) line::y#0 = (byte) line::y1#1 [phi:main::@17->line#2] -- register_copy 
    // [307] phi (byte) line::x#0 = (byte) line::x1#1 [phi:main::@17->line#3] -- register_copy 
    jsr line
    // main::@18
    // line(LINE_BUFFER, x2, y2, x0, y0)
    // [46] (byte) line::x1#2 ← (byte) main::x2#0 -- vbuz1=vbuz2 
    lda.z x2
    sta.z line.x1
    // [47] (byte) line::y1#2 ← (byte) main::y2#0 -- vbuz1=vbuz2 
    lda.z y2
    sta.z line.y1
    // [48] (byte) line::x2#2 ← (byte) main::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z line.x2
    // [49] (byte) line::y2#2 ← (byte) main::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z line.y2
    // [50] call line 
    // [307] phi from main::@18 to line [phi:main::@18->line]
    // [307] phi (byte) line::y2#10 = (byte) line::y2#2 [phi:main::@18->line#0] -- register_copy 
    // [307] phi (byte) line::x2#11 = (byte) line::x2#2 [phi:main::@18->line#1] -- register_copy 
    // [307] phi (byte) line::y#0 = (byte) line::y1#2 [phi:main::@18->line#2] -- register_copy 
    // [307] phi (byte) line::x#0 = (byte) line::x1#2 [phi:main::@18->line#3] -- register_copy 
    jsr line
    // main::@19
    // p0_idx++;
    // [51] (byte) main::p0_idx#1 ← ++ (byte) main::p0_idx#11 -- vbuz1=_inc_vbuz1 
    inc.z p0_idx
    // p1_idx++;
    // [52] (byte) main::p1_idx#1 ← ++ (byte) main::p1_idx#2 -- vbuz1=_inc_vbuz1 
    inc.z p1_idx
    // p2_idx++;
    // [53] (byte) main::p2_idx#1 ← ++ (byte) main::p2_idx#2 -- vbuz1=_inc_vbuz1 
    inc.z p2_idx
    // VICII->BORDER_COLOR = RED
    // [54] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) RED -- _deref_pbuc1=vbuc2 
    // Wait until the canvas on screen has been switched before starting work on the next frame
    lda #RED
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // main::@9
  __b9:
    // while(canvas_show_flag)
    // [55] if((byte) 0!=(volatile byte) canvas_show_flag) goto main::@9 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z canvas_show_flag
    bne __b9
    // main::@10
    // VICII->BORDER_COLOR = BLACK
    // [56] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // eorfill(LINE_BUFFER, canvas)
    // [57] (byte*) eorfill::canvas#0 ← (byte*) main::canvas#10 -- pbuz1=pbuz2 
    lda.z canvas
    sta.z eorfill.canvas
    lda.z canvas+1
    sta.z eorfill.canvas+1
    // [58] call eorfill 
  // Fill canvas
    // [294] phi from main::@10 to eorfill [phi:main::@10->eorfill]
    jsr eorfill
    // main::@20
    // canvas ^= (CANVAS1^CANVAS2)
    // [59] (word) main::canvas#1 ← (byte*) main::canvas#10 ^ (const nomodify byte*) CANVAS1^(const nomodify byte*) CANVAS2 -- vwuz1=pbuz1_bxor_vwuc1 
    // swap canvas being rendered to (using XOR)
    lda #<CANVAS1^CANVAS2
    eor.z canvas
    sta.z canvas
    lda #>CANVAS1^CANVAS2
    eor.z canvas+1
    sta.z canvas+1
    // [60] phi from main::@20 to main::toD0181 [phi:main::@20->main::toD0181]
    // main::toD0181
    // [61] phi from main::toD0181 to main::toD0182 [phi:main::toD0181->main::toD0182]
    // main::toD0182
    // main::@11
    // canvas_show_memory ^= toD018(SCREEN,CANVAS1)^toD018(SCREEN,CANVAS2)
    // [62] (volatile byte) canvas_show_memory ← (volatile byte) canvas_show_memory ^ (const byte) main::toD0181_return#0^(const byte) main::toD0182_return#0 -- vbuz1=vbuz1_bxor_vbuc1 
    // Swap canvas to show on screen (using XOR)
    lda #toD0181_return^toD0182_return
    eor.z canvas_show_memory
    sta.z canvas_show_memory
    // canvas_show_flag = 1
    // [63] (volatile byte) canvas_show_flag ← (byte) 1 -- vbuz1=vbuc1 
    // Set flag used to signal when the canvas has been shown
    lda #1
    sta.z canvas_show_flag
    // clock()
    // [64] call clock 
    jsr clock
    // [65] (dword) clock::return#2 ← (dword) clock::return#0
    // main::@21
    // [66] (dword~) main::$18 ← (dword) clock::return#2
    // cyclecount = clock()-CLOCKS_PER_INIT
    // [67] (dword) main::cyclecount#0 ← (dword~) main::$18 - (const nomodify dword) CLOCKS_PER_INIT -- vduz1=vduz1_minus_vduc1 
    lda.z cyclecount
    sec
    sbc #<CLOCKS_PER_INIT
    sta.z cyclecount
    lda.z cyclecount+1
    sbc #>CLOCKS_PER_INIT
    sta.z cyclecount+1
    lda.z cyclecount+2
    sbc #<CLOCKS_PER_INIT>>$10
    sta.z cyclecount+2
    lda.z cyclecount+3
    sbc #>CLOCKS_PER_INIT>>$10
    sta.z cyclecount+3
    // gotoxy(0,24)
    // [68] call gotoxy 
    // [286] phi from main::@21 to gotoxy [phi:main::@21->gotoxy]
    jsr gotoxy
    // [69] phi from main::@21 to main::@22 [phi:main::@21->main::@22]
    // main::@22
    // printf("frame: %02x cycles: %6lu", p0_idx, cyclecount)
    // [70] call cputs 
    // [196] phi from main::@22 to cputs [phi:main::@22->cputs]
    // [196] phi (to_nomodify byte*) cputs::s#5 = (const byte*) main::s [phi:main::@22->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    // main::@23
    // printf("frame: %02x cycles: %6lu", p0_idx, cyclecount)
    // [71] (byte) printf_uchar::uvalue#0 ← (byte) main::p0_idx#1 -- vbuxx=vbuz1 
    ldx.z p0_idx
    // [72] call printf_uchar 
    // [253] phi from main::@23 to printf_uchar [phi:main::@23->printf_uchar]
    jsr printf_uchar
    // [73] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
    // main::@24
    // printf("frame: %02x cycles: %6lu", p0_idx, cyclecount)
    // [74] call cputs 
    // [196] phi from main::@24 to cputs [phi:main::@24->cputs]
    // [196] phi (to_nomodify byte*) cputs::s#5 = (const byte*) main::s1 [phi:main::@24->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    // main::@25
    // printf("frame: %02x cycles: %6lu", p0_idx, cyclecount)
    // [75] (dword) printf_ulong::uvalue#0 ← (dword) main::cyclecount#0
    // [76] call printf_ulong 
    // [88] phi from main::@25 to printf_ulong [phi:main::@25->printf_ulong]
    jsr printf_ulong
    // main::@26
    // [77] (byte*) main::canvas#24 ← (byte*)(word) main::canvas#1
    // [25] phi from main::@26 to main::@7 [phi:main::@26->main::@7]
    // [25] phi (byte*) main::canvas#10 = (byte*) main::canvas#24 [phi:main::@26->main::@7#0] -- register_copy 
    // [25] phi (byte) main::p2_idx#2 = (byte) main::p2_idx#1 [phi:main::@26->main::@7#1] -- register_copy 
    // [25] phi (byte) main::p1_idx#2 = (byte) main::p1_idx#1 [phi:main::@26->main::@7#2] -- register_copy 
    // [25] phi (byte) main::p0_idx#11 = (byte) main::p0_idx#1 [phi:main::@26->main::@7#3] -- register_copy 
    jmp __b8
    // main::@2
  __b2:
    // [78] (byte) main::c#4 ← (byte) main::y#2 -- vbuxx=vbuz1 
    ldx.z y
    // [79] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
    // [79] phi (byte) main::c#2 = (byte) main::c#4 [phi:main::@2->main::@4#0] -- register_copy 
    // [79] phi (byte) main::x#2 = (byte) 0 [phi:main::@2->main::@4#1] -- vbuyy=vbuc1 
    ldy #0
    // main::@4
  __b4:
    // for(char x=0;x<16;x++)
    // [80] if((byte) main::x#2<(byte) $10) goto main::@5 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$10
    bcc __b5
    // main::@6
    // cols += 40
    // [81] (byte*) main::cols#1 ← (byte*) main::cols#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z cols
    sta.z cols
    bcc !+
    inc.z cols+1
  !:
    // screen += 40
    // [82] (byte*) main::screen#1 ← (byte*) main::screen#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z screen
    sta.z screen
    bcc !+
    inc.z screen+1
  !:
    // for(char y=0;y<16;y++)
    // [83] (byte) main::y#1 ← ++ (byte) main::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [18] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
    // [18] phi (byte*) main::screen#5 = (byte*) main::screen#1 [phi:main::@6->main::@1#0] -- register_copy 
    // [18] phi (byte*) main::cols#5 = (byte*) main::cols#1 [phi:main::@6->main::@1#1] -- register_copy 
    // [18] phi (byte) main::y#2 = (byte) main::y#1 [phi:main::@6->main::@1#2] -- register_copy 
    jmp __b1
    // main::@5
  __b5:
    // cols[x] = WHITE
    // [84] *((byte*) main::cols#5 + (byte) main::x#2) ← (const nomodify byte) WHITE -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #WHITE
    sta (cols),y
    // screen[x] = c
    // [85] *((byte*) main::screen#5 + (byte) main::x#2) ← (byte) main::c#2 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (screen),y
    // c+=0x10
    // [86] (byte) main::c#1 ← (byte) main::c#2 + (byte) $10 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    axs #-[$10]
    // for(char x=0;x<16;x++)
    // [87] (byte) main::x#1 ← ++ (byte) main::x#2 -- vbuyy=_inc_vbuyy 
    iny
    // [79] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
    // [79] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@5->main::@4#0] -- register_copy 
    // [79] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@5->main::@4#1] -- register_copy 
    jmp __b4
    s: .text "frame: "
    .byte 0
    s1: .text " cycles: "
    .byte 0
}
  // printf_ulong
// Print an unsigned int using a specific format
// printf_ulong(dword zp($b) uvalue)
printf_ulong: {
    .const format_min_length = 6
    .const format_justify_left = 0
    .const format_zero_padding = 0
    .const format_upper_case = 0
    .label uvalue = $b
    // printf_ulong::@1
    // printf_buffer.sign = format.sign_always?'+':0
    // [89] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // ultoa(uvalue, printf_buffer.digits, format.radix)
    // [90] (dword) ultoa::value#1 ← (dword) printf_ulong::uvalue#0
    // [91] call ultoa 
  // Format number into buffer
    // [225] phi from printf_ulong::@1 to ultoa [phi:printf_ulong::@1->ultoa]
    jsr ultoa
    // printf_ulong::@2
    // printf_number_buffer(printf_buffer, format)
    // [92] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [93] call printf_number_buffer 
  // Print using format
    // [95] phi from printf_ulong::@2 to printf_number_buffer [phi:printf_ulong::@2->printf_number_buffer]
    // [95] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_ulong::format_upper_case#0 [phi:printf_ulong::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [95] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#0 [phi:printf_ulong::@2->printf_number_buffer#1] -- register_copy 
    // [95] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_ulong::format_zero_padding#0 [phi:printf_ulong::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [95] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_ulong::format_justify_left#0 [phi:printf_ulong::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [95] phi (byte) printf_number_buffer::format_min_length#2 = (const byte) printf_ulong::format_min_length#0 [phi:printf_ulong::@2->printf_number_buffer#4] -- vbuxx=vbuc1 
    ldx #format_min_length
    jsr printf_number_buffer
    // printf_ulong::@return
    // }
    // [94] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp($1f) buffer_sign, byte register(X) format_min_length, byte zp($1d) format_justify_left, byte zp($1e) format_zero_padding, byte zp($f) format_upper_case)
printf_number_buffer: {
    .label __19 = $31
    .label buffer_sign = $1f
    .label padding = $10
    .label format_zero_padding = $1e
    .label format_justify_left = $1d
    .label format_upper_case = $f
    // if(format.min_length)
    // [96] if((byte) 0==(byte) printf_number_buffer::format_min_length#2) goto printf_number_buffer::@1 -- vbuc1_eq_vbuxx_then_la1 
    cpx #0
    beq __b6
    // [97] phi from printf_number_buffer to printf_number_buffer::@6 [phi:printf_number_buffer->printf_number_buffer::@6]
    // printf_number_buffer::@6
    // strlen(buffer.digits)
    // [98] call strlen 
    // [219] phi from printf_number_buffer::@6 to strlen [phi:printf_number_buffer::@6->strlen]
    jsr strlen
    // strlen(buffer.digits)
    // [99] (word) strlen::return#2 ← (word) strlen::len#2
    // printf_number_buffer::@14
    // [100] (word~) printf_number_buffer::$19 ← (word) strlen::return#2
    // len = (signed char)strlen(buffer.digits)
    // [101] (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19 -- vbsyy=_sbyte_vwuz1 
    // There is a minimum length - work out the padding
    lda.z __19
    tay
    // if(buffer.sign)
    // [102] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b13
    // printf_number_buffer::@7
    // len++;
    // [103] (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#0 -- vbsyy=_inc_vbsyy 
    iny
    // [104] phi from printf_number_buffer::@14 printf_number_buffer::@7 to printf_number_buffer::@13 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13]
    // [104] phi (signed byte) printf_number_buffer::len#2 = (signed byte) printf_number_buffer::len#0 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13#0] -- register_copy 
    // printf_number_buffer::@13
  __b13:
    // padding = (signed char)format.min_length - len
    // [105] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(byte) printf_number_buffer::format_min_length#2 - (signed byte) printf_number_buffer::len#2 -- vbsz1=vbsxx_minus_vbsyy 
    txa
    sty.z $ff
    sec
    sbc.z $ff
    sta.z padding
    // if(padding<0)
    // [106] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@21 -- vbsz1_ge_0_then_la1 
    cmp #0
    bpl __b1
    // [108] phi from printf_number_buffer printf_number_buffer::@13 to printf_number_buffer::@1 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1]
  __b6:
    // [108] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) 0 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    // [107] phi from printf_number_buffer::@13 to printf_number_buffer::@21 [phi:printf_number_buffer::@13->printf_number_buffer::@21]
    // printf_number_buffer::@21
    // [108] phi from printf_number_buffer::@21 to printf_number_buffer::@1 [phi:printf_number_buffer::@21->printf_number_buffer::@1]
    // [108] phi (signed byte) printf_number_buffer::padding#10 = (signed byte) printf_number_buffer::padding#1 [phi:printf_number_buffer::@21->printf_number_buffer::@1#0] -- register_copy 
    // printf_number_buffer::@1
  __b1:
    // if(!format.justify_left && !format.zero_padding && padding)
    // [109] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    // printf_number_buffer::@17
    // [110] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2 -- vbuc1_neq_vbuz1_then_la1 
    cmp.z format_zero_padding
    bne __b2
    // printf_number_buffer::@16
    // [111] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8 -- vbsc1_neq_vbsz1_then_la1 
    cmp.z padding
    bne __b8
    jmp __b2
    // printf_number_buffer::@8
  __b8:
    // printf_padding(' ',(char)padding)
    // [112] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [113] call printf_padding 
    // [132] phi from printf_number_buffer::@8 to printf_padding [phi:printf_number_buffer::@8->printf_padding]
    // [132] phi (byte) printf_padding::pad#5 = (byte) ' ' [phi:printf_number_buffer::@8->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [132] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#0 [phi:printf_number_buffer::@8->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_number_buffer::@2
  __b2:
    // if(buffer.sign)
    // [114] if((byte) 0==(byte) printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b3
    // printf_number_buffer::@9
    // cputc(buffer.sign)
    // [115] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#10 -- vbuaa=vbuz1 
    lda.z buffer_sign
    // [116] call cputc 
    // [139] phi from printf_number_buffer::@9 to cputc [phi:printf_number_buffer::@9->cputc]
    // [139] phi (byte) cputc::c#3 = (byte) cputc::c#2 [phi:printf_number_buffer::@9->cputc#0] -- register_copy 
    jsr cputc
    // printf_number_buffer::@3
  __b3:
    // if(format.zero_padding && padding)
    // [117] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_zero_padding
    beq __b4
    // printf_number_buffer::@18
    // [118] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10 -- vbsc1_neq_vbsz1_then_la1 
    cmp.z padding
    bne __b10
    jmp __b4
    // printf_number_buffer::@10
  __b10:
    // printf_padding('0',(char)padding)
    // [119] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [120] call printf_padding 
    // [132] phi from printf_number_buffer::@10 to printf_padding [phi:printf_number_buffer::@10->printf_padding]
    // [132] phi (byte) printf_padding::pad#5 = (byte) '0' [phi:printf_number_buffer::@10->printf_padding#0] -- vbuz1=vbuc1 
    lda #'0'
    sta.z printf_padding.pad
    // [132] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#1 [phi:printf_number_buffer::@10->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_number_buffer::@4
  __b4:
    // if(format.upper_case)
    // [121] if((byte) 0==(byte) printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_upper_case
    beq __b5
    // [122] phi from printf_number_buffer::@4 to printf_number_buffer::@11 [phi:printf_number_buffer::@4->printf_number_buffer::@11]
    // printf_number_buffer::@11
    // strupr(buffer.digits)
    // [123] call strupr 
    // [204] phi from printf_number_buffer::@11 to strupr [phi:printf_number_buffer::@11->strupr]
    jsr strupr
    // [124] phi from printf_number_buffer::@11 printf_number_buffer::@4 to printf_number_buffer::@5 [phi:printf_number_buffer::@11/printf_number_buffer::@4->printf_number_buffer::@5]
    // printf_number_buffer::@5
  __b5:
    // cputs(buffer.digits)
    // [125] call cputs 
    // [196] phi from printf_number_buffer::@5 to cputs [phi:printf_number_buffer::@5->cputs]
    // [196] phi (to_nomodify byte*) cputs::s#5 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_number_buffer::@5->cputs#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s+1
    jsr cputs
    // printf_number_buffer::@15
    // if(format.justify_left && !format.zero_padding && padding)
    // [126] if((byte) 0==(byte) printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    // printf_number_buffer::@20
    // [127] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return -- vbuc1_neq_vbuz1_then_la1 
    cmp.z format_zero_padding
    bne __breturn
    // printf_number_buffer::@19
    // [128] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12 -- vbsc1_neq_vbsz1_then_la1 
    cmp.z padding
    bne __b12
    rts
    // printf_number_buffer::@12
  __b12:
    // printf_padding(' ',(char)padding)
    // [129] (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [130] call printf_padding 
    // [132] phi from printf_number_buffer::@12 to printf_padding [phi:printf_number_buffer::@12->printf_padding]
    // [132] phi (byte) printf_padding::pad#5 = (byte) ' ' [phi:printf_number_buffer::@12->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [132] phi (byte) printf_padding::length#4 = (byte) printf_padding::length#2 [phi:printf_number_buffer::@12->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_number_buffer::@return
  __breturn:
    // }
    // [131] return 
    rts
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp($12) pad, byte zp($11) length)
printf_padding: {
    .label i = $1c
    .label length = $11
    .label pad = $12
    // [133] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
    // [133] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // printf_padding::@1
  __b1:
    // for(char i=0;i<length; i++)
    // [134] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    // printf_padding::@return
    // }
    // [135] return 
    rts
    // printf_padding::@2
  __b2:
    // cputc(pad)
    // [136] (byte) cputc::c#1 ← (byte) printf_padding::pad#5 -- vbuaa=vbuz1 
    lda.z pad
    // [137] call cputc 
    // [139] phi from printf_padding::@2 to cputc [phi:printf_padding::@2->cputc]
    // [139] phi (byte) cputc::c#3 = (byte) cputc::c#1 [phi:printf_padding::@2->cputc#0] -- register_copy 
    jsr cputc
    // printf_padding::@3
    // for(char i=0;i<length; i++)
    // [138] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [133] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
    // [133] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // if(c=='\n')
    // [140] if((byte) cputc::c#3==(byte) ' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1
    // cputc::@2
    // *conio_cursor_text++ = c
    // [141] *((byte*) conio_cursor_text) ← (byte) cputc::c#3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (conio_cursor_text),y
    // *conio_cursor_text++ = c;
    // [142] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // *conio_cursor_color++ = conio_textcolor
    // [143] *((byte*) conio_cursor_color) ← (byte) conio_textcolor -- _deref_pbuz1=vbuz2 
    lda.z conio_textcolor
    ldy #0
    sta (conio_cursor_color),y
    // *conio_cursor_color++ = conio_textcolor;
    // [144] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // if(++conio_cursor_x==CONIO_WIDTH)
    // [145] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [146] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // cputc::@3
    // conio_cursor_x = 0
    // [147] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // ++conio_cursor_y;
    // [148] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // cscroll()
    // [149] call cscroll 
    jsr cscroll
    // cputc::@return
  __breturn:
    // }
    // [150] return 
    rts
    // [151] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
    // cputc::@1
  __b1:
    // cputln()
    // [152] call cputln 
    jsr cputln
    rts
}
  // cputln
// Print a newline
cputln: {
    .label __1 = $15
    .label __2 = $17
    .label ln_offset = $28
    // ln_offset = CONIO_WIDTH - conio_cursor_x
    // [153] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x -- vwuz1=vbuc1_minus_vbuz2 
    sec
    lda #$28
    sbc.z conio_cursor_x
    sta.z ln_offset
    lda #0
    sbc #0
    sta.z ln_offset+1
    // conio_cursor_text  + ln_offset
    // [154] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z __1
    clc
    adc.z ln_offset
    sta.z __1
    lda.z __1+1
    adc.z ln_offset+1
    sta.z __1+1
    // conio_cursor_text =  conio_cursor_text  + ln_offset
    // [155] (byte*) conio_cursor_text ← (byte*~) cputln::$1
    // conio_cursor_color + ln_offset
    // [156] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z __2
    clc
    adc.z ln_offset
    sta.z __2
    lda.z __2+1
    adc.z ln_offset+1
    sta.z __2+1
    // conio_cursor_color = conio_cursor_color + ln_offset
    // [157] (byte*) conio_cursor_color ← (byte*~) cputln::$2
    // conio_cursor_x = 0
    // [158] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y++;
    // [159] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // cscroll()
    // [160] call cscroll 
    jsr cscroll
    // cputln::@return
    // }
    // [161] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    .label __7 = $15
    .label __8 = $17
    // if(conio_cursor_y==CONIO_HEIGHT)
    // [162] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [163] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
    // cscroll::@1
    // memcpy(CONIO_SCREEN_TEXT, CONIO_SCREEN_TEXT+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [164] call memcpy 
    // [186] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
    // [186] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_TEXT
    sta.z memcpy.destination+1
    // [186] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [165] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
    // cscroll::@2
    // memcpy(CONIO_SCREEN_COLORS, CONIO_SCREEN_COLORS+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [166] call memcpy 
    // [186] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
    // [186] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_COLORS
    sta.z memcpy.destination+1
    // [186] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [167] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
    // cscroll::@3
    // memset(CONIO_SCREEN_TEXT+CONIO_BYTES-CONIO_WIDTH, ' ', CONIO_WIDTH)
    // [168] call memset 
    // [177] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
    // [177] phi (byte) memset::c#8 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [177] phi (void*) memset::str#7 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str+1
    // [177] phi (word) memset::num#6 = (byte) $28 [phi:cscroll::@3->memset#2] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    // cscroll::@4
    // memset(CONIO_SCREEN_COLORS+CONIO_BYTES-CONIO_WIDTH, conio_textcolor, CONIO_WIDTH)
    // [169] (byte) memset::c#1 ← (byte) conio_textcolor -- vbuxx=vbuz1 
    ldx.z conio_textcolor
    // [170] call memset 
    // [177] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
    // [177] phi (byte) memset::c#8 = (byte) memset::c#1 [phi:cscroll::@4->memset#0] -- register_copy 
    // [177] phi (void*) memset::str#7 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str+1
    // [177] phi (word) memset::num#6 = (byte) $28 [phi:cscroll::@4->memset#2] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    // cscroll::@5
    // conio_cursor_text-CONIO_WIDTH
    // [171] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __7
    sec
    sbc #<$28
    sta.z __7
    lda.z __7+1
    sbc #>$28
    sta.z __7+1
    // conio_cursor_text = conio_cursor_text-CONIO_WIDTH
    // [172] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
    // conio_cursor_color-CONIO_WIDTH
    // [173] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __8
    sec
    sbc #<$28
    sta.z __8
    lda.z __8+1
    sbc #>$28
    sta.z __8+1
    // conio_cursor_color = conio_cursor_color-CONIO_WIDTH
    // [174] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
    // conio_cursor_y--;
    // [175] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    // cscroll::@return
  __breturn:
    // }
    // [176] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($31) str, byte register(X) c, word zp($28) num)
memset: {
    .label end = $28
    .label dst = $31
    .label num = $28
    .label str = $31
    // if(num>0)
    // [178] if((word) memset::num#6<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    // memset::@1
    // end = (char*)str + num
    // [179] (byte*) memset::end#0 ← (byte*)(void*) memset::str#7 + (word) memset::num#6 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [180] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#7
    // [181] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [181] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [182] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
  __breturn:
    // }
    // [183] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [184] *((byte*) memset::dst#2) ← (byte) memset::c#8 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [185] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($31) destination, void* zp($28) source)
memcpy: {
    .label src_end = $2b
    .label dst = $31
    .label src = $28
    .label source = $28
    .label destination = $31
    // src_end = (char*)source+num
    // [187] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [188] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
    // [189] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
    // [190] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
    // [190] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [190] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [191] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    // memcpy::@return
    // }
    // [192] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [193] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [194] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [195] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp($2e) s)
cputs: {
    .label s = $2e
    // [197] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
    // [197] phi (to_nomodify byte*) cputs::s#4 = (to_nomodify byte*) cputs::s#5 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    // cputs::@1
  __b1:
    // c=*s++
    // [198] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#4) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // while(c=*s++)
    // [199] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#4 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [200] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    // cputs::@return
    // }
    // [201] return 
    rts
    // cputs::@2
  __b2:
    // cputc(c)
    // [202] (byte) cputc::c#0 ← (byte) cputs::c#1
    // [203] call cputc 
    // [139] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
    // [139] phi (byte) cputc::c#3 = (byte) cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1
}
  // strupr
// Converts a string to uppercase.
strupr: {
    .label str = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    .label src = $2e
    // [205] phi from strupr to strupr::@1 [phi:strupr->strupr::@1]
    // [205] phi (byte*) strupr::src#2 = (const byte*) strupr::str#0 [phi:strupr->strupr::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z src
    lda #>str
    sta.z src+1
    // strupr::@1
  __b1:
    // while(*src)
    // [206] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (src),y
    cmp #0
    bne __b2
    // strupr::@return
    // }
    // [207] return 
    rts
    // strupr::@2
  __b2:
    // toupper(*src)
    // [208] (byte) toupper::ch#0 ← *((byte*) strupr::src#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (src),y
    // [209] call toupper 
    jsr toupper
    // [210] (byte) toupper::return#3 ← (byte) toupper::return#2
    // strupr::@3
    // [211] (byte~) strupr::$0 ← (byte) toupper::return#3
    // *src = toupper(*src)
    // [212] *((byte*) strupr::src#2) ← (byte~) strupr::$0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (src),y
    // src++;
    // [213] (byte*) strupr::src#1 ← ++ (byte*) strupr::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [205] phi from strupr::@3 to strupr::@1 [phi:strupr::@3->strupr::@1]
    // [205] phi (byte*) strupr::src#2 = (byte*) strupr::src#1 [phi:strupr::@3->strupr::@1#0] -- register_copy 
    jmp __b1
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte register(A) ch)
toupper: {
    // if(ch>='a' && ch<='z')
    // [214] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@return -- vbuaa_lt_vbuc1_then_la1 
    cmp #'a'
    bcc __breturn
    // toupper::@2
    // [215] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1 -- vbuaa_le_vbuc1_then_la1 
    cmp #'z'
    bcc __b1
    beq __b1
    // [217] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
    // [217] phi (byte) toupper::return#2 = (byte) toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    rts
    // toupper::@1
  __b1:
    // return ch + ('A'-'a');
    // [216] (byte) toupper::return#0 ← (byte) toupper::ch#0 + (byte) 'A'-(byte) 'a' -- vbuaa=vbuaa_plus_vbuc1 
    clc
    adc #'A'-'a'
    // toupper::@return
  __breturn:
    // }
    // [218] return 
    rts
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($28) str)
strlen: {
    .label len = $31
    .label str = $28
    .label return = $31
    // [220] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
    // [220] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    sta.z len+1
    // [220] phi (byte*) strlen::str#2 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:strlen->strlen::@1#1] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str+1
    // strlen::@1
  __b1:
    // while(*str)
    // [221] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // strlen::@return
    // }
    // [222] return 
    rts
    // strlen::@2
  __b2:
    // len++;
    // [223] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // str++;
    // [224] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [220] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
    // [220] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [220] phi (byte*) strlen::str#2 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // ultoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// ultoa(dword zp($b) value, byte* zp($28) buffer)
ultoa: {
    .const max_digits = $a
    .label digit_value = $20
    .label buffer = $28
    .label digit = $1d
    .label value = $b
    // [226] phi from ultoa to ultoa::@1 [phi:ultoa->ultoa::@1]
    // [226] phi (byte*) ultoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:ultoa->ultoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [226] phi (byte) ultoa::started#2 = (byte) 0 [phi:ultoa->ultoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [226] phi (dword) ultoa::value#2 = (dword) ultoa::value#1 [phi:ultoa->ultoa::@1#2] -- register_copy 
    // [226] phi (byte) ultoa::digit#2 = (byte) 0 [phi:ultoa->ultoa::@1#3] -- vbuz1=vbuc1 
    txa
    sta.z digit
    // ultoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [227] if((byte) ultoa::digit#2<(const byte) ultoa::max_digits#1-(byte) 1) goto ultoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    // ultoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [228] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2 -- vbuaa=_byte_vduz1 
    lda.z value
    // [229] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [230] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [231] *((byte*) ultoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // ultoa::@return
    // }
    // [232] return 
    rts
    // ultoa::@2
  __b2:
    // digit_value = digit_values[digit]
    // [233] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2 -- vbuaa=vbuz1_rol_2 
    lda.z digit
    asl
    asl
    // [234] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10) -- vduz1=pduc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES_LONG,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES_LONG+1,y
    sta.z digit_value+1
    lda RADIX_DECIMAL_VALUES_LONG+2,y
    sta.z digit_value+2
    lda RADIX_DECIMAL_VALUES_LONG+3,y
    sta.z digit_value+3
    // if (started || value >= digit_value)
    // [235] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    // ultoa::@7
    // [236] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z digit_value+3
    bcc !+
    bne __b5
    lda.z value+2
    cmp.z digit_value+2
    bcc !+
    bne __b5
    lda.z value+1
    cmp.z digit_value+1
    bcc !+
    bne __b5
    lda.z value
    cmp.z digit_value
    bcs __b5
  !:
    // [237] phi from ultoa::@7 to ultoa::@4 [phi:ultoa::@7->ultoa::@4]
    // [237] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#11 [phi:ultoa::@7->ultoa::@4#0] -- register_copy 
    // [237] phi (byte) ultoa::started#4 = (byte) ultoa::started#2 [phi:ultoa::@7->ultoa::@4#1] -- register_copy 
    // [237] phi (dword) ultoa::value#6 = (dword) ultoa::value#2 [phi:ultoa::@7->ultoa::@4#2] -- register_copy 
    // ultoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [238] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [226] phi from ultoa::@4 to ultoa::@1 [phi:ultoa::@4->ultoa::@1]
    // [226] phi (byte*) ultoa::buffer#11 = (byte*) ultoa::buffer#14 [phi:ultoa::@4->ultoa::@1#0] -- register_copy 
    // [226] phi (byte) ultoa::started#2 = (byte) ultoa::started#4 [phi:ultoa::@4->ultoa::@1#1] -- register_copy 
    // [226] phi (dword) ultoa::value#2 = (dword) ultoa::value#6 [phi:ultoa::@4->ultoa::@1#2] -- register_copy 
    // [226] phi (byte) ultoa::digit#2 = (byte) ultoa::digit#1 [phi:ultoa::@4->ultoa::@1#3] -- register_copy 
    jmp __b1
    // ultoa::@5
  __b5:
    // ultoa_append(buffer++, value, digit_value)
    // [239] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11
    // [240] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2
    // [241] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
    // [242] call ultoa_append 
    // [246] phi from ultoa::@5 to ultoa_append [phi:ultoa::@5->ultoa_append]
    jsr ultoa_append
    // ultoa_append(buffer++, value, digit_value)
    // [243] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
    // ultoa::@6
    // value = ultoa_append(buffer++, value, digit_value)
    // [244] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
    // value = ultoa_append(buffer++, value, digit_value);
    // [245] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [237] phi from ultoa::@6 to ultoa::@4 [phi:ultoa::@6->ultoa::@4]
    // [237] phi (byte*) ultoa::buffer#14 = (byte*) ultoa::buffer#4 [phi:ultoa::@6->ultoa::@4#0] -- register_copy 
    // [237] phi (byte) ultoa::started#4 = (byte) 1 [phi:ultoa::@6->ultoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [237] phi (dword) ultoa::value#6 = (dword) ultoa::value#0 [phi:ultoa::@6->ultoa::@4#2] -- register_copy 
    jmp __b4
}
  // ultoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// ultoa_append(byte* zp($28) buffer, dword zp($b) value, dword zp($20) sub)
ultoa_append: {
    .label buffer = $28
    .label value = $b
    .label sub = $20
    .label return = $b
    // [247] phi from ultoa_append to ultoa_append::@1 [phi:ultoa_append->ultoa_append::@1]
    // [247] phi (byte) ultoa_append::digit#2 = (byte) 0 [phi:ultoa_append->ultoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [247] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#0 [phi:ultoa_append->ultoa_append::@1#1] -- register_copy 
    // ultoa_append::@1
  __b1:
    // while (value >= sub)
    // [248] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z sub+3
    bcc !+
    bne __b2
    lda.z value+2
    cmp.z sub+2
    bcc !+
    bne __b2
    lda.z value+1
    cmp.z sub+1
    bcc !+
    bne __b2
    lda.z value
    cmp.z sub
    bcs __b2
  !:
    // ultoa_append::@3
    // *buffer = DIGITS[digit]
    // [249] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // ultoa_append::@return
    // }
    // [250] return 
    rts
    // ultoa_append::@2
  __b2:
    // digit++;
    // [251] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // value -= sub
    // [252] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0 -- vduz1=vduz1_minus_vduz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    lda.z value+2
    sbc.z sub+2
    sta.z value+2
    lda.z value+3
    sbc.z sub+3
    sta.z value+3
    // [247] phi from ultoa_append::@2 to ultoa_append::@1 [phi:ultoa_append::@2->ultoa_append::@1]
    // [247] phi (byte) ultoa_append::digit#2 = (byte) ultoa_append::digit#1 [phi:ultoa_append::@2->ultoa_append::@1#0] -- register_copy 
    // [247] phi (dword) ultoa_append::value#2 = (dword) ultoa_append::value#1 [phi:ultoa_append::@2->ultoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // printf_uchar
// Print an unsigned char using a specific format
// printf_uchar(byte register(X) uvalue)
printf_uchar: {
    .const format_min_length = 2
    .const format_justify_left = 0
    .const format_zero_padding = 1
    .const format_upper_case = 0
    // printf_uchar::@1
    // printf_buffer.sign = format.sign_always?'+':0
    // [254] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // uctoa(uvalue, printf_buffer.digits, format.radix)
    // [255] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#0
    // [256] call uctoa 
  // Format number into buffer
    // [260] phi from printf_uchar::@1 to uctoa [phi:printf_uchar::@1->uctoa]
    jsr uctoa
    // printf_uchar::@2
    // printf_number_buffer(printf_buffer, format)
    // [257] (byte) printf_number_buffer::buffer_sign#1 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [258] call printf_number_buffer 
  // Print using format
    // [95] phi from printf_uchar::@2 to printf_number_buffer [phi:printf_uchar::@2->printf_number_buffer]
    // [95] phi (byte) printf_number_buffer::format_upper_case#10 = (const byte) printf_uchar::format_upper_case#0 [phi:printf_uchar::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [95] phi (byte) printf_number_buffer::buffer_sign#10 = (byte) printf_number_buffer::buffer_sign#1 [phi:printf_uchar::@2->printf_number_buffer#1] -- register_copy 
    // [95] phi (byte) printf_number_buffer::format_zero_padding#10 = (const byte) printf_uchar::format_zero_padding#0 [phi:printf_uchar::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [95] phi (byte) printf_number_buffer::format_justify_left#10 = (const byte) printf_uchar::format_justify_left#0 [phi:printf_uchar::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [95] phi (byte) printf_number_buffer::format_min_length#2 = (const byte) printf_uchar::format_min_length#0 [phi:printf_uchar::@2->printf_number_buffer#4] -- vbuxx=vbuc1 
    ldx #format_min_length
    jsr printf_number_buffer
    // printf_uchar::@return
    // }
    // [259] return 
    rts
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte register(X) value, byte* zp($31) buffer)
uctoa: {
    .const max_digits = 2
    .label digit_value = $24
    .label buffer = $31
    .label digit = $1e
    .label started = $1f
    // [261] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
    // [261] phi (byte*) uctoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [261] phi (byte) uctoa::started#2 = (byte) 0 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [261] phi (byte) uctoa::value#2 = (byte) uctoa::value#1 [phi:uctoa->uctoa::@1#2] -- register_copy 
    // [261] phi (byte) uctoa::digit#2 = (byte) 0 [phi:uctoa->uctoa::@1#3] -- vbuz1=vbuc1 
    sta.z digit
    // uctoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [262] if((byte) uctoa::digit#2<(const byte) uctoa::max_digits#2-(byte) 1) goto uctoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    // uctoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [263] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [264] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [265] *((byte*) uctoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // uctoa::@return
    // }
    // [266] return 
    rts
    // uctoa::@2
  __b2:
    // digit_value = digit_values[digit]
    // [267] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_HEXADECIMAL_VALUES_CHAR + (byte) uctoa::digit#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda RADIX_HEXADECIMAL_VALUES_CHAR,y
    sta.z digit_value
    // if (started || value >= digit_value)
    // [268] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    // uctoa::@7
    // [269] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5 -- vbuxx_ge_vbuz1_then_la1 
    cpx.z digit_value
    bcs __b5
    // [270] phi from uctoa::@7 to uctoa::@4 [phi:uctoa::@7->uctoa::@4]
    // [270] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#11 [phi:uctoa::@7->uctoa::@4#0] -- register_copy 
    // [270] phi (byte) uctoa::started#4 = (byte) uctoa::started#2 [phi:uctoa::@7->uctoa::@4#1] -- register_copy 
    // [270] phi (byte) uctoa::value#6 = (byte) uctoa::value#2 [phi:uctoa::@7->uctoa::@4#2] -- register_copy 
    // uctoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [271] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [261] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
    // [261] phi (byte*) uctoa::buffer#11 = (byte*) uctoa::buffer#14 [phi:uctoa::@4->uctoa::@1#0] -- register_copy 
    // [261] phi (byte) uctoa::started#2 = (byte) uctoa::started#4 [phi:uctoa::@4->uctoa::@1#1] -- register_copy 
    // [261] phi (byte) uctoa::value#2 = (byte) uctoa::value#6 [phi:uctoa::@4->uctoa::@1#2] -- register_copy 
    // [261] phi (byte) uctoa::digit#2 = (byte) uctoa::digit#1 [phi:uctoa::@4->uctoa::@1#3] -- register_copy 
    jmp __b1
    // uctoa::@5
  __b5:
    // uctoa_append(buffer++, value, digit_value)
    // [272] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
    // [273] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
    // [274] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
    // [275] call uctoa_append 
    // [279] phi from uctoa::@5 to uctoa_append [phi:uctoa::@5->uctoa_append]
    jsr uctoa_append
    // uctoa_append(buffer++, value, digit_value)
    // [276] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
    // uctoa::@6
    // value = uctoa_append(buffer++, value, digit_value)
    // [277] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
    // value = uctoa_append(buffer++, value, digit_value);
    // [278] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [270] phi from uctoa::@6 to uctoa::@4 [phi:uctoa::@6->uctoa::@4]
    // [270] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#4 [phi:uctoa::@6->uctoa::@4#0] -- register_copy 
    // [270] phi (byte) uctoa::started#4 = (byte) 1 [phi:uctoa::@6->uctoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [270] phi (byte) uctoa::value#6 = (byte) uctoa::value#0 [phi:uctoa::@6->uctoa::@4#2] -- register_copy 
    jmp __b4
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp($31) buffer, byte register(X) value, byte zp($24) sub)
uctoa_append: {
    .label buffer = $31
    .label sub = $24
    // [280] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
    // [280] phi (byte) uctoa_append::digit#2 = (byte) 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [280] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    // uctoa_append::@1
  __b1:
    // while (value >= sub)
    // [281] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2 -- vbuxx_ge_vbuz1_then_la1 
    cpx.z sub
    bcs __b2
    // uctoa_append::@3
    // *buffer = DIGITS[digit]
    // [282] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuyy 
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // uctoa_append::@return
    // }
    // [283] return 
    rts
    // uctoa_append::@2
  __b2:
    // digit++;
    // [284] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2 -- vbuyy=_inc_vbuyy 
    iny
    // value -= sub
    // [285] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z sub
    tax
    // [280] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
    // [280] phi (byte) uctoa_append::digit#2 = (byte) uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [280] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // gotoxy
// Set the cursor to the specified position
gotoxy: {
    .const x = 0
    .const y = $18
    .const offset = y*$28
    // gotoxy::@1
    // conio_cursor_x = x
    // [287] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // conio_cursor_y = y
    // [288] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 -- vbuz1=vbuc1 
    lda #y
    sta.z conio_cursor_y
    // conio_cursor_text = CONIO_SCREEN_TEXT + offset
    // [289] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT+(const word) gotoxy::offset#0 -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT+offset
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT+offset
    sta.z conio_cursor_text+1
    // conio_cursor_color = CONIO_SCREEN_COLORS + offset
    // [290] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS+(const word) gotoxy::offset#0 -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS+offset
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS+offset
    sta.z conio_cursor_color+1
    // gotoxy::@return
    // }
    // [291] return 
    rts
}
  // clock
// Returns the processor clock time used since the beginning of an implementation defined era (normally the beginning of the program).
// This uses CIA #2 Timer A+B on the C64, and must be initialized using clock_start()
clock: {
    .label return = $b
    // 0xffffffff - *CIA2_TIMER_AB
    // [292] (dword) clock::return#0 ← (dword) $ffffffff - *((const nomodify dword*) CIA2_TIMER_AB) -- vduz1=vduc1_minus__deref_pduc2 
    lda #<$ffffffff
    sec
    sbc CIA2_TIMER_AB
    sta.z return
    lda #>$ffffffff
    sbc CIA2_TIMER_AB+1
    sta.z return+1
    lda #<$ffffffff>>$10
    sbc CIA2_TIMER_AB+2
    sta.z return+2
    lda #>$ffffffff>>$10
    sbc CIA2_TIMER_AB+3
    sta.z return+3
    // clock::@return
    // }
    // [293] return 
    rts
}
  // eorfill
// EOR fill from the line buffer onto the canvas
// eorfill(byte* zp($17) canvas)
eorfill: {
    .label canvas = $17
    .label line_column = $15
    .label fill_column = $17
    // [295] phi from eorfill to eorfill::@1 [phi:eorfill->eorfill::@1]
    // [295] phi (byte*) eorfill::fill_column#5 = (byte*) eorfill::canvas#0 [phi:eorfill->eorfill::@1#0] -- register_copy 
    // [295] phi (byte*) eorfill::line_column#2 = (const nomodify byte*) LINE_BUFFER [phi:eorfill->eorfill::@1#1] -- pbuz1=pbuc1 
    lda #<LINE_BUFFER
    sta.z line_column
    lda #>LINE_BUFFER
    sta.z line_column+1
    // [295] phi (byte) eorfill::x#2 = (byte) 0 [phi:eorfill->eorfill::@1#2] -- vbuxx=vbuc1 
    ldx #0
    // eorfill::@1
  __b1:
    // for(char x=0;x<16;x++)
    // [296] if((byte) eorfill::x#2<(byte) $10) goto eorfill::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$10
    bcc __b2
    // eorfill::@return
    // }
    // [297] return 
    rts
    // eorfill::@2
  __b2:
    // eor = line_column[0]
    // [298] (byte) eorfill::eor#0 ← *((byte*) eorfill::line_column#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (line_column),y
    // [299] phi from eorfill::@2 to eorfill::@3 [phi:eorfill::@2->eorfill::@3]
    // [299] phi (byte) eorfill::eor#2 = (byte) eorfill::eor#0 [phi:eorfill::@2->eorfill::@3#0] -- register_copy 
    // [299] phi (byte) eorfill::y#2 = (byte) 1 [phi:eorfill::@2->eorfill::@3#1] -- vbuyy=vbuc1 
    ldy #1
    // eorfill::@3
  __b3:
    // for(char y=1;y<16*8;y++)
    // [300] if((byte) eorfill::y#2<(byte)(number) $10*(number) 8) goto eorfill::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$10*8
    bcc __b4
    // eorfill::@5
    // line_column += 16*8
    // [301] (byte*) eorfill::line_column#1 ← (byte*) eorfill::line_column#2 + (byte)(number) $10*(number) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$10*8
    clc
    adc.z line_column
    sta.z line_column
    bcc !+
    inc.z line_column+1
  !:
    // fill_column += 16*8
    // [302] (byte*) eorfill::fill_column#1 ← (byte*) eorfill::fill_column#5 + (byte)(number) $10*(number) 8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$10*8
    clc
    adc.z fill_column
    sta.z fill_column
    bcc !+
    inc.z fill_column+1
  !:
    // for(char x=0;x<16;x++)
    // [303] (byte) eorfill::x#1 ← ++ (byte) eorfill::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [295] phi from eorfill::@5 to eorfill::@1 [phi:eorfill::@5->eorfill::@1]
    // [295] phi (byte*) eorfill::fill_column#5 = (byte*) eorfill::fill_column#1 [phi:eorfill::@5->eorfill::@1#0] -- register_copy 
    // [295] phi (byte*) eorfill::line_column#2 = (byte*) eorfill::line_column#1 [phi:eorfill::@5->eorfill::@1#1] -- register_copy 
    // [295] phi (byte) eorfill::x#2 = (byte) eorfill::x#1 [phi:eorfill::@5->eorfill::@1#2] -- register_copy 
    jmp __b1
    // eorfill::@4
  __b4:
    // eor ^= line_column[y]
    // [304] (byte) eorfill::eor#1 ← (byte) eorfill::eor#2 ^ *((byte*) eorfill::line_column#2 + (byte) eorfill::y#2) -- vbuaa=vbuaa_bxor_pbuz1_derefidx_vbuyy 
    eor (line_column),y
    // fill_column[y] = eor
    // [305] *((byte*) eorfill::fill_column#5 + (byte) eorfill::y#2) ← (byte) eorfill::eor#1 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (fill_column),y
    // for(char y=1;y<16*8;y++)
    // [306] (byte) eorfill::y#1 ← ++ (byte) eorfill::y#2 -- vbuyy=_inc_vbuyy 
    iny
    // [299] phi from eorfill::@4 to eorfill::@3 [phi:eorfill::@4->eorfill::@3]
    // [299] phi (byte) eorfill::eor#2 = (byte) eorfill::eor#1 [phi:eorfill::@4->eorfill::@3#0] -- register_copy 
    // [299] phi (byte) eorfill::y#2 = (byte) eorfill::y#1 [phi:eorfill::@4->eorfill::@3#1] -- register_copy 
    jmp __b3
}
  // line
// Draw a EOR friendly line between two points
// Uses bresenham line drawing routine
// line(byte zp($11) x1, byte zp($12) y1, byte zp($f) x2, byte zp($10) y2)
line: {
    .label plot1___1 = $2a
    .label plot2___1 = $2d
    .label plot3___1 = $30
    .label x1 = $11
    .label y1 = $12
    .label x2 = $f
    .label y2 = $10
    .label x = $11
    .label y = $12
    .label dx = $24
    .label dy = $25
    .label sx = $26
    .label sy = $27
    .label plot1_column = $28
    .label plot2_x = $11
    .label plot2_column = $2b
    .label plot3_column = $2e
    .label plot4_column = $31
    // abs_u8(x2-x1)
    // [308] (byte) abs_u8::u#0 ← (byte) line::x2#11 - (byte) line::x#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z x2
    sec
    sbc.z x
    // [309] call abs_u8 
    // [374] phi from line to abs_u8 [phi:line->abs_u8]
    // [374] phi (byte) abs_u8::u#2 = (byte) abs_u8::u#0 [phi:line->abs_u8#0] -- register_copy 
    jsr abs_u8
    // abs_u8(x2-x1)
    // [310] (byte) abs_u8::return#0 ← (byte) abs_u8::return#4
    // line::@12
    // dx = abs_u8(x2-x1)
    // [311] (byte) line::dx#0 ← (byte) abs_u8::return#0 -- vbuz1=vbuaa 
    sta.z dx
    // abs_u8(y2-y1)
    // [312] (byte) abs_u8::u#1 ← (byte) line::y2#10 - (byte) line::y#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z y2
    sec
    sbc.z y
    // [313] call abs_u8 
    // [374] phi from line::@12 to abs_u8 [phi:line::@12->abs_u8]
    // [374] phi (byte) abs_u8::u#2 = (byte) abs_u8::u#1 [phi:line::@12->abs_u8#0] -- register_copy 
    jsr abs_u8
    // abs_u8(y2-y1)
    // [314] (byte) abs_u8::return#1 ← (byte) abs_u8::return#4
    // line::@13
    // dy = abs_u8(y2-y1)
    // [315] (byte) line::dy#0 ← (byte) abs_u8::return#1 -- vbuz1=vbuaa 
    sta.z dy
    // sgn_u8(x2-x1)
    // [316] (byte) sgn_u8::u#0 ← (byte) line::x2#11 - (byte) line::x#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z x2
    sec
    sbc.z x
    // [317] call sgn_u8 
    // [368] phi from line::@13 to sgn_u8 [phi:line::@13->sgn_u8]
    // [368] phi (byte) sgn_u8::u#2 = (byte) sgn_u8::u#0 [phi:line::@13->sgn_u8#0] -- register_copy 
    jsr sgn_u8
    // sgn_u8(x2-x1)
    // [318] (byte) sgn_u8::return#0 ← (byte) sgn_u8::return#4
    // line::@14
    // sx = sgn_u8(x2-x1)
    // [319] (byte) line::sx#0 ← (byte) sgn_u8::return#0 -- vbuz1=vbuaa 
    sta.z sx
    // sgn_u8(y2-y1)
    // [320] (byte) sgn_u8::u#1 ← (byte) line::y2#10 - (byte) line::y#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z y2
    sec
    sbc.z y
    // [321] call sgn_u8 
    // [368] phi from line::@14 to sgn_u8 [phi:line::@14->sgn_u8]
    // [368] phi (byte) sgn_u8::u#2 = (byte) sgn_u8::u#1 [phi:line::@14->sgn_u8#0] -- register_copy 
    jsr sgn_u8
    // sgn_u8(y2-y1)
    // [322] (byte) sgn_u8::return#1 ← (byte) sgn_u8::return#4
    // line::@15
    // sy = sgn_u8(y2-y1)
    // [323] (byte) line::sy#0 ← (byte) sgn_u8::return#1 -- vbuz1=vbuaa 
    sta.z sy
    // if(sx==0xff)
    // [324] if((byte) line::sx#0!=(byte) $ff) goto line::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z sx
    bne __b1
    // line::@3
    // y++;
    // [325] (byte) line::y#1 ← ++ (byte) line::y#0 -- vbuz1=_inc_vbuz1 
    inc.z y
    // y2++;
    // [326] (byte) line::y2#3 ← ++ (byte) line::y2#10 -- vbuz1=_inc_vbuz1 
    inc.z y2
    // [327] phi from line::@15 line::@3 to line::@1 [phi:line::@15/line::@3->line::@1]
    // [327] phi (byte) line::y2#13 = (byte) line::y2#10 [phi:line::@15/line::@3->line::@1#0] -- register_copy 
    // [327] phi (byte) line::y#13 = (byte) line::y#0 [phi:line::@15/line::@3->line::@1#1] -- register_copy 
    // line::@1
  __b1:
    // if(dx > dy)
    // [328] if((byte) line::dx#0>(byte) line::dy#0) goto line::@2 -- vbuz1_gt_vbuz2_then_la1 
    lda.z dy
    cmp.z dx
    bcc __b2
    // line::@4
    // e = dy/2
    // [329] (byte) line::e#0 ← (byte) line::dy#0 >> (byte) 1 -- vbuxx=vbuz1_ror_1 
    lsr
    tax
    // line::plot1
    // x/8
    // [330] (byte~) line::plot1_$0 ← (byte) line::x#0 >> (byte) 3 -- vbuaa=vbuz1_ror_3 
    lda.z x
    lsr
    lsr
    lsr
    // column = plot_column[x/8]
    // [331] (byte~) line::plot1_$2 ← (byte~) line::plot1_$0 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [332] (byte*) line::plot1_column#0 ← *((const byte**) plot_column + (byte~) line::plot1_$2) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot1_column
    lda plot_column+1,y
    sta.z plot1_column+1
    // x&7
    // [333] (byte~) line::plot1_$1 ← (byte) line::x#0 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z x
    sta.z plot1___1
    // column[y] |= plot_bit[x&7]
    // [334] *((byte*) line::plot1_column#0 + (byte) line::y#13) ← *((byte*) line::plot1_column#0 + (byte) line::y#13) | *((const byte*) plot_bit + (byte~) line::plot1_$1) -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuz3 
    ldy.z y
    lda (plot1_column),y
    ldy.z plot1___1
    ora plot_bit,y
    ldy.z y
    sta (plot1_column),y
    // [335] phi from line::@6 line::plot1 to line::@5 [phi:line::@6/line::plot1->line::@5]
    // [335] phi (byte) line::x#10 = (byte) line::x#16 [phi:line::@6/line::plot1->line::@5#0] -- register_copy 
    // [335] phi (byte) line::e#3 = (byte) line::e#5 [phi:line::@6/line::plot1->line::@5#1] -- register_copy 
    // [335] phi (byte) line::y#6 = (byte) line::y#15 [phi:line::@6/line::plot1->line::@5#2] -- register_copy 
    // line::@5
  __b5:
    // y += sy
    // [336] (byte) line::y#15 ← (byte) line::y#6 + (byte) line::sy#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    // e += dx
    // [337] (byte) line::e#1 ← (byte) line::e#3 + (byte) line::dx#0 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z dx
    tax
    // if(dy<e)
    // [338] if((byte) line::dy#0>=(byte) line::e#1) goto line::@6 -- vbuz1_ge_vbuxx_then_la1 
    lda.z dy
    stx.z $ff
    cmp.z $ff
    bcs __b6
    // line::@7
    // x += sx
    // [339] (byte) line::plot2_x#0 ← (byte) line::x#10 + (byte) line::sx#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z plot2_x
    clc
    adc.z sx
    sta.z plot2_x
    // e -= dy
    // [340] (byte) line::e#2 ← (byte) line::e#1 - (byte) line::dy#0 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z dy
    tax
    // line::plot2
    // x/8
    // [341] (byte~) line::plot2_$0 ← (byte) line::plot2_x#0 >> (byte) 3 -- vbuaa=vbuz1_ror_3 
    lda.z plot2_x
    lsr
    lsr
    lsr
    // column = plot_column[x/8]
    // [342] (byte~) line::plot2_$2 ← (byte~) line::plot2_$0 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [343] (byte*) line::plot2_column#0 ← *((const byte**) plot_column + (byte~) line::plot2_$2) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot2_column
    lda plot_column+1,y
    sta.z plot2_column+1
    // x&7
    // [344] (byte~) line::plot2_$1 ← (byte) line::plot2_x#0 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z plot2_x
    sta.z plot2___1
    // column[y] |= plot_bit[x&7]
    // [345] *((byte*) line::plot2_column#0 + (byte) line::y#15) ← *((byte*) line::plot2_column#0 + (byte) line::y#15) | *((const byte*) plot_bit + (byte~) line::plot2_$1) -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuz3 
    ldy.z y
    lda (plot2_column),y
    ldy.z plot2___1
    ora plot_bit,y
    ldy.z y
    sta (plot2_column),y
    // [346] phi from line::@5 line::plot2 to line::@6 [phi:line::@5/line::plot2->line::@6]
    // [346] phi (byte) line::x#16 = (byte) line::x#10 [phi:line::@5/line::plot2->line::@6#0] -- register_copy 
    // [346] phi (byte) line::e#5 = (byte) line::e#1 [phi:line::@5/line::plot2->line::@6#1] -- register_copy 
    // line::@6
  __b6:
    // while (y != y2)
    // [347] if((byte) line::y#15!=(byte) line::y2#13) goto line::@5 -- vbuz1_neq_vbuz2_then_la1 
    lda.z y
    cmp.z y2
    bne __b5
    // line::@return
    // }
    // [348] return 
    rts
    // line::@2
  __b2:
    // e = dx/2
    // [349] (byte) line::e1#0 ← (byte) line::dx#0 >> (byte) 1 -- vbuxx=vbuz1_ror_1 
    lda.z dx
    lsr
    tax
    // [350] phi from line::@2 line::@9 to line::@8 [phi:line::@2/line::@9->line::@8]
    // [350] phi (byte) line::e1#3 = (byte) line::e1#0 [phi:line::@2/line::@9->line::@8#0] -- register_copy 
    // [350] phi (byte) line::y#10 = (byte) line::y#13 [phi:line::@2/line::@9->line::@8#1] -- register_copy 
    // [350] phi (byte) line::x#12 = (byte) line::x#0 [phi:line::@2/line::@9->line::@8#2] -- register_copy 
    // line::@8
  __b8:
    // line::plot3
    // x/8
    // [351] (byte~) line::plot3_$0 ← (byte) line::x#12 >> (byte) 3 -- vbuaa=vbuz1_ror_3 
    lda.z x
    lsr
    lsr
    lsr
    // column = plot_column[x/8]
    // [352] (byte~) line::plot3_$2 ← (byte~) line::plot3_$0 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [353] (byte*) line::plot3_column#0 ← *((const byte**) plot_column + (byte~) line::plot3_$2) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot3_column
    lda plot_column+1,y
    sta.z plot3_column+1
    // x&7
    // [354] (byte~) line::plot3_$1 ← (byte) line::x#12 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z x
    sta.z plot3___1
    // column[y] |= plot_bit[x&7]
    // [355] *((byte*) line::plot3_column#0 + (byte) line::y#10) ← *((byte*) line::plot3_column#0 + (byte) line::y#10) | *((const byte*) plot_bit + (byte~) line::plot3_$1) -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuz3 
    ldy.z y
    lda (plot3_column),y
    ldy.z plot3___1
    ora plot_bit,y
    ldy.z y
    sta (plot3_column),y
    // line::@11
    // x += sx
    // [356] (byte) line::x#13 ← (byte) line::x#12 + (byte) line::sx#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    // e += dy
    // [357] (byte) line::e1#1 ← (byte) line::e1#3 + (byte) line::dy#0 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z dy
    tax
    // if(dx < e)
    // [358] if((byte) line::dx#0>=(byte) line::e1#1) goto line::@9 -- vbuz1_ge_vbuxx_then_la1 
    lda.z dx
    stx.z $ff
    cmp.z $ff
    bcs __b9
    // line::@10
    // y += sy
    // [359] (byte) line::y#3 ← (byte) line::y#10 + (byte) line::sy#0 -- vbuz1=vbuz1_plus_vbuz2 
    tya
    clc
    adc.z sy
    sta.z y
    // e -= dx
    // [360] (byte) line::e1#2 ← (byte) line::e1#1 - (byte) line::dx#0 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z dx
    tax
    // [361] phi from line::@10 line::@11 to line::@9 [phi:line::@10/line::@11->line::@9]
    // [361] phi (byte) line::e1#7 = (byte) line::e1#2 [phi:line::@10/line::@11->line::@9#0] -- register_copy 
    // [361] phi (byte) line::y#11 = (byte) line::y#3 [phi:line::@10/line::@11->line::@9#1] -- register_copy 
    // line::@9
  __b9:
    // while (x != x2)
    // [362] if((byte) line::x#13!=(byte) line::x2#11) goto line::@8 -- vbuz1_neq_vbuz2_then_la1 
    lda.z x
    cmp.z x2
    bne __b8
    // line::plot4
    // x/8
    // [363] (byte~) line::plot4_$0 ← (byte) line::x#13 >> (byte) 3 -- vbuaa=vbuz1_ror_3 
    lsr
    lsr
    lsr
    // column = plot_column[x/8]
    // [364] (byte~) line::plot4_$2 ← (byte~) line::plot4_$0 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [365] (byte*) line::plot4_column#0 ← *((const byte**) plot_column + (byte~) line::plot4_$2) -- pbuz1=pptc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot4_column
    lda plot_column+1,y
    sta.z plot4_column+1
    // x&7
    // [366] (byte~) line::plot4_$1 ← (byte) line::x#13 & (byte) 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z x
    // column[y] |= plot_bit[x&7]
    // [367] *((byte*) line::plot4_column#0 + (byte) line::y#11) ← *((byte*) line::plot4_column#0 + (byte) line::y#11) | *((const byte*) plot_bit + (byte~) line::plot4_$1) -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuaa 
    ldy.z y
    tax
    lda (plot4_column),y
    ora plot_bit,x
    sta (plot4_column),y
    rts
}
  // sgn_u8
// Get the sign of a 8-bit unsigned number treated as a signed number.
// Returns unsigned -1 if the number is negative
// sgn_u8(byte register(A) u)
sgn_u8: {
    // u & 0x80
    // [369] (byte~) sgn_u8::$0 ← (byte) sgn_u8::u#2 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if(u & 0x80)
    // [370] if((byte) 0!=(byte~) sgn_u8::$0) goto sgn_u8::@1 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b1
    // [372] phi from sgn_u8 to sgn_u8::@return [phi:sgn_u8->sgn_u8::@return]
    // [372] phi (byte) sgn_u8::return#4 = (byte) 1 [phi:sgn_u8->sgn_u8::@return#0] -- vbuaa=vbuc1 
    lda #1
    rts
    // [371] phi from sgn_u8 to sgn_u8::@1 [phi:sgn_u8->sgn_u8::@1]
    // sgn_u8::@1
  __b1:
    // [372] phi from sgn_u8::@1 to sgn_u8::@return [phi:sgn_u8::@1->sgn_u8::@return]
    // [372] phi (byte) sgn_u8::return#4 = (byte) -1 [phi:sgn_u8::@1->sgn_u8::@return#0] -- vbuaa=vbuc1 
    lda #-1
    // sgn_u8::@return
    // }
    // [373] return 
    rts
}
  // abs_u8
// Get the absolute value of a u-bit unsigned number treated as a signed number.
// abs_u8(byte register(A) u)
abs_u8: {
    // u & 0x80
    // [375] (byte~) abs_u8::$0 ← (byte) abs_u8::u#2 & (byte) $80 -- vbuxx=vbuaa_band_vbuc1 
    ldx #$80
    axs #0
    // if(u & 0x80)
    // [376] if((byte) 0!=(byte~) abs_u8::$0) goto abs_u8::@1 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b1
    // [378] phi from abs_u8 abs_u8::@1 to abs_u8::@return [phi:abs_u8/abs_u8::@1->abs_u8::@return]
    // [378] phi (byte) abs_u8::return#4 = (byte) abs_u8::u#2 [phi:abs_u8/abs_u8::@1->abs_u8::@return#0] -- register_copy 
    rts
    // abs_u8::@1
  __b1:
    // return -u;
    // [377] (byte) abs_u8::return#2 ← - (byte) abs_u8::u#2 -- vbuaa=_neg_vbuaa 
    eor #$ff
    clc
    adc #1
    // abs_u8::@return
    // }
    // [379] return 
    rts
}
  // clock_start
// Reset & start the processor clock time. The value can be read using clock().
// This uses CIA #2 Timer A+B on the C64
clock_start: {
    // CIA2->TIMER_A_CONTROL = CIA_TIMER_CONTROL_STOP | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_A_COUNT_CYCLES
    // [380] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Setup CIA#2 timer A to count (down) CPU cycles
    lda #0
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // CIA2->TIMER_B_CONTROL = CIA_TIMER_CONTROL_STOP | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    // [381] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // *CIA2_TIMER_AB = 0xffffffff
    // [382] *((const nomodify dword*) CIA2_TIMER_AB) ← (dword) $ffffffff -- _deref_pduc1=vduc2 
    lda #<$ffffffff
    sta CIA2_TIMER_AB
    lda #>$ffffffff
    sta CIA2_TIMER_AB+1
    lda #<$ffffffff>>$10
    sta CIA2_TIMER_AB+2
    lda #>$ffffffff>>$10
    sta CIA2_TIMER_AB+3
    // CIA2->TIMER_B_CONTROL = CIA_TIMER_CONTROL_START | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    // [383] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START|(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // CIA2->TIMER_A_CONTROL = CIA_TIMER_CONTROL_START | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_A_COUNT_CYCLES
    // [384] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // clock_start::@return
    // }
    // [385] return 
    rts
}
  // textcolor
// Set the color for text output. The old color setting is returned.
textcolor: {
    // conio_textcolor = color
    // [386] (byte) conio_textcolor ← (const nomodify byte) WHITE -- vbuz1=vbuc1 
    lda #WHITE
    sta.z conio_textcolor
    // textcolor::@return
    // }
    // [387] return 
    rts
}
  // setup_irq
// Setup raster IRQ to change charset at different lines
setup_irq: {
    // asm
    // asm { sei  }
    sei
    // CIA1->INTERRUPT = CIA_INTERRUPT_CLEAR
    // [389] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) ← (const nomodify byte) CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // VICII->CONTROL1 &= 0x7f
    // [390] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line to 8 pixels before the border
    lda #$7f
    and VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    // VICII->RASTER = BORDER_YPOS_BOTTOM-8
    // [391] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(byte) 8 -- _deref_pbuc1=vbuc2 
    lda #BORDER_YPOS_BOTTOM-8
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    // VICII->IRQ_ENABLE = IRQ_RASTER
    // [392] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE
    // *KERNEL_IRQ = &irq_bottom_1
    // [393] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1() -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<irq_bottom_1
    sta KERNEL_IRQ
    lda #>irq_bottom_1
    sta KERNEL_IRQ+1
    // asm
    // asm { cli  }
    cli
    // setup_irq::@return
    // }
    // [395] return 
    rts
}
  // irq_bottom_2
// Interrupt Routine 2
irq_bottom_2: {
    // entry interrupt(KERNEL_KEYBOARD)
    // VICII->BORDER_COLOR = BLACK
    // [396] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    // Change border color
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // kbhit()
    // [397] call kbhit 
    jsr kbhit
    // [398] (byte) kbhit::return#2 ← (byte) kbhit::return#0
    // irq_bottom_2::@3
    // [399] (byte~) irq_bottom_2::$0 ← (byte) kbhit::return#2
    // if(!kbhit())
    // [400] if((byte) 0!=(byte~) irq_bottom_2::$0) goto irq_bottom_2::@1 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b1
    // irq_bottom_2::@2
    // VICII->MEMORY = canvas_show_memory
    // [401] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (volatile byte) canvas_show_memory -- _deref_pbuc1=vbuz1 
    lda.z canvas_show_memory
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    // irq_bottom_2::@1
  __b1:
    // canvas_show_flag = 0
    // [402] (volatile byte) canvas_show_flag ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z canvas_show_flag
    // VICII->IRQ_STATUS = IRQ_RASTER
    // [403] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS
    // VICII->RASTER = BORDER_YPOS_BOTTOM-8
    // [404] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM-(byte) 8 -- _deref_pbuc1=vbuc2 
    // Trigger IRQ 1 at 8 pixels before the border
    lda #BORDER_YPOS_BOTTOM-8
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    // *KERNEL_IRQ = &irq_bottom_1
    // [405] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq_bottom_1() -- _deref_pptc1=pprc2 
    lda #<irq_bottom_1
    sta KERNEL_IRQ
    lda #>irq_bottom_1
    sta KERNEL_IRQ+1
    // irq_bottom_2::@return
    // }
    // [406] return  - exit interrupt(KERNEL_KEYBOARD)
    jmp $ea31
}
  // kbhit
// Return true if there's a key waiting, return false if not
kbhit: {
    // *CONIO_CIA1_PORT_A = 0
    // [407] *((const nomodify byte*) CONIO_CIA1_PORT_A) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta CONIO_CIA1_PORT_A
    // ~*CONIO_CIA1_PORT_B
    // [408] (byte) kbhit::return#0 ← ~ *((const nomodify byte*) CONIO_CIA1_PORT_B) -- vbuaa=_bnot__deref_pbuc1 
    lda CONIO_CIA1_PORT_B
    eor #$ff
    // kbhit::@return
    // }
    // [409] return 
    rts
}
  // irq_bottom_1
// Interrupt Routine 1: Just above last text line.
irq_bottom_1: {
    .const toD0181_return = (>(CONSOLE&$3fff)*4)|(>PETSCII)/4&$f
    // entry interrupt(KERNEL_MIN)
    // VICII->BORDER_COLOR = WHITE
    // [410] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) WHITE -- _deref_pbuc1=vbuc2 
    // Change border color
    lda #WHITE
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [411] phi from irq_bottom_1 to irq_bottom_1::toD0181 [phi:irq_bottom_1->irq_bottom_1::toD0181]
    // irq_bottom_1::toD0181
    // irq_bottom_1::@1
    // VICII->MEMORY = toD018(CONSOLE, PETSCII)
    // [412] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_MEMORY) ← (const byte) irq_bottom_1::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    // Show the cycle counter
    lda #toD0181_return
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    // VICII->IRQ_STATUS = IRQ_RASTER
    // [413] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) ← (const nomodify byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS
    // VICII->RASTER = BORDER_YPOS_BOTTOM
    // [414] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER) ← (const nomodify byte) BORDER_YPOS_BOTTOM -- _deref_pbuc1=vbuc2 
    // Trigger IRQ 2 at bottom of text-line
    lda #BORDER_YPOS_BOTTOM
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    // *KERNEL_IRQ = &irq_bottom_2
    // [415] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_KEYBOARD)(void()) irq_bottom_2() -- _deref_pptc1=pprc2 
    lda #<irq_bottom_2
    sta KERNEL_IRQ
    lda #>irq_bottom_2
    sta KERNEL_IRQ+1
    // irq_bottom_1::@return
    // }
    // [416] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of hexadecimal digits
  RADIX_HEXADECIMAL_VALUES_CHAR: .byte $10
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_LONG: .dword $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a
  // SIN/COS tables
  .align $100
SINTAB:
.fill $200, 63 + 63*sin(i*2*PI/$100)

  // Column offsets
  plot_column: .word LINE_BUFFER, LINE_BUFFER+1*$80, LINE_BUFFER+2*$80, LINE_BUFFER+3*$80, LINE_BUFFER+4*$80, LINE_BUFFER+5*$80, LINE_BUFFER+6*$80, LINE_BUFFER+7*$80, LINE_BUFFER+8*$80, LINE_BUFFER+9*$80, LINE_BUFFER+$a*$80, LINE_BUFFER+$b*$80, LINE_BUFFER+$c*$80, LINE_BUFFER+$d*$80, LINE_BUFFER+$e*$80, LINE_BUFFER+$f*$80
  // The bits used for plotting a pixel
  plot_bit: .byte $80, $40, $20, $10, 8, 4, 2, 1
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0

