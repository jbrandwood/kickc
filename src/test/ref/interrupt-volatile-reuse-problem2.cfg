@begin: scope:[]  from
  [0] (volatile byte) col1 ← (byte) 0
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((const nomodify void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq()
  to:main::@1
main::@1: scope:[main]  from main main::@5 main::@6
  [5] (byte) main::x#6 ← phi( main/(byte) 0 main::@6/(byte) main::x#1 main::@5/(byte) 0 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  [6] (byte) main::y#4 ← phi( main::@1/(byte) 0 main::@4/(byte) main::y#1 )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  [7] (byte) main::a#2 ← phi( main::@2/(byte) 0 main::@3/(byte) main::a#1 )
  [8] (byte~) main::$0 ← (byte) main::a#2 + (byte) main::y#4
  [9] *((const nomodify byte*) SCREEN + (byte) main::x#6) ← (byte~) main::$0
  [10] (byte) main::a#1 ← ++ (byte) main::a#2
  [11] if((byte) main::a#1!=(byte) $b) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  [12] (byte) main::y#1 ← ++ (byte) main::y#4
  [13] if((byte) main::y#1!=(byte) $b) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  [14] (byte) main::x#1 ← ++ (byte) main::x#6
  [15] if((byte) main::x#1!=(byte) $b) goto main::@6
  to:main::@1
main::@6: scope:[main]  from main::@5
  [16] phi()
  to:main::@1

interrupt(KERNEL_MIN)(void()) irq()
irq: scope:[irq]  from
  [17] *((const nomodify byte*) IRQ_STATUS) ← (byte) 1
  asm { lda$dc0d  }
  [19] *((const nomodify byte*) SCREEN+(byte) $28) ← (volatile byte) col1
  [20] (volatile byte) col1 ← ++ (volatile byte) col1
  to:irq::@return
irq::@return: scope:[irq]  from irq
  [21] return 
  to:@return
