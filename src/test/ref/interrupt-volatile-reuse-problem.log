Resolved forward reference irq to interrupt(KERNEL_MIN)(void()) irq()

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (void()**) KERNEL_IRQ#0 ← ((void()**)) (word/signed word/dword/signed dword) 788
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) 53281
  (byte*) BGCOL#0 ← ((byte*)) (word/dword/signed dword) 53280
  (byte) col1#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  to:@2
main: scope:[main]  from @2
  (byte*) main::SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte) main::qwe#0 ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) main::asd#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) main::row#0 ← (byte/signed byte/word/signed word/dword/signed dword) 12
  (byte) main::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::asd#2 ← phi( main/(byte) main::asd#0 main::@1/(byte) main::asd#1 )
  (byte) main::qwe#2 ← phi( main/(byte) main::qwe#0 main::@1/(byte) main::qwe#1 )
  (byte) main::x#2 ← phi( main/(byte) main::x#0 main::@1/(byte) main::x#1 )
  (byte*) main::SCREEN#1 ← phi( main/(byte*) main::SCREEN#0 main::@1/(byte*) main::SCREEN#1 )
  (byte) main::row#2 ← phi( main/(byte) main::row#0 main::@1/(byte) main::row#1 )
  (byte) main::row#1 ← ++ (byte) main::row#2
  *((byte*) main::SCREEN#1 + (byte) main::x#2) ← (byte) main::row#1
  (byte) main::qwe#1 ← ++ (byte) main::qwe#2
  (byte) main::asd#1 ← (byte) main::asd#2 + (byte) main::qwe#1
  (byte) main::x#1 ← (byte) main::x#2 + rangenext(0,10)
  (bool~) main::$0 ← (byte) main::x#1 != rangelast(0,10)
  if((bool~) main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) main::asd#3 ← phi( main::@1/(byte) main::asd#1 )
  (byte*) main::SCREEN#2 ← phi( main::@1/(byte*) main::SCREEN#1 )
  (byte) main::qwe#3 ← phi( main::@1/(byte) main::qwe#1 )
  *((byte*) main::SCREEN#2 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte) main::qwe#3
  *((byte*) main::SCREEN#2 + (byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) main::asd#3
  (void()*~) main::$1 ← & interrupt(KERNEL_MIN)(void()) irq()
  *((void()**) KERNEL_IRQ#0) ← (void()*~) main::$1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
irq: scope:[irq]  from
  (byte) col2#3 ← phi( @2/(byte) col2#5 )
  (byte) col1#3 ← phi( @2/(byte) col1#5 )
  asm { lda$dc0d  }
  *((byte*) BGCOL#0) ← (byte) col1#3
  (byte) col1#1 ← ++ (byte) col1#3
  *((byte*) BORDERCOL#0) ← (byte) col2#3
  (byte) col2#1 ← ++ (byte) col2#3
  to:irq::@return
irq::@return: scope:[irq]  from irq
  (byte) col2#4 ← phi( irq/(byte) col2#1 )
  (byte) col1#4 ← phi( irq/(byte) col1#1 )
  (byte) col1#2 ← (byte) col1#4
  (byte) col2#2 ← (byte) col2#4
  return 
  to:@return
@2: scope:[]  from @begin
  (byte) col2#5 ← phi( @begin/(byte) col2#0 )
  (byte) col1#5 ← phi( @begin/(byte) col1#0 )
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(void()**) KERNEL_IRQ
(void()**) KERNEL_IRQ#0
(byte) col1
(byte) col1#0
(byte) col1#1
(byte) col1#2
(byte) col1#3
(byte) col1#4
(byte) col1#5
(byte) col2
(byte) col2#0
(byte) col2#1
(byte) col2#2
(byte) col2#3
(byte) col2#4
(byte) col2#5
interrupt(KERNEL_MIN)(void()) irq()
(label) irq::@return
(void()) main()
(bool~) main::$0
(void()*~) main::$1
(label) main::@1
(label) main::@2
(label) main::@return
(byte*) main::SCREEN
(byte*) main::SCREEN#0
(byte*) main::SCREEN#1
(byte*) main::SCREEN#2
(byte) main::asd
(byte) main::asd#0
(byte) main::asd#1
(byte) main::asd#2
(byte) main::asd#3
(byte) main::qwe
(byte) main::qwe#0
(byte) main::qwe#1
(byte) main::qwe#2
(byte) main::qwe#3
(byte) main::row
(byte) main::row#0
(byte) main::row#1
(byte) main::row#2
(byte) main::x
(byte) main::x#0
(byte) main::x#1
(byte) main::x#2

Culled Empty Block (label) @3
Successful SSA optimization Pass2CullEmptyBlocks
Alias (byte) main::qwe#1 = (byte) main::qwe#3 
Alias (byte*) main::SCREEN#1 = (byte*) main::SCREEN#2 
Alias (byte) main::asd#1 = (byte) main::asd#3 
Alias (byte) col1#1 = (byte) col1#4 (byte) col1#2 
Alias (byte) col2#1 = (byte) col2#4 (byte) col2#2 
Alias (byte) col1#0 = (byte) col1#5 
Alias (byte) col2#0 = (byte) col2#5 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) main::SCREEN#1
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) main::SCREEN#1 (byte*) main::SCREEN#0
Redundant Phi (byte) col1#3 (byte) col1#0
Redundant Phi (byte) col2#3 (byte) col2#0
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) main::$0 if((byte) main::x#1!=rangelast(0,10)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const void()**) KERNEL_IRQ#0 = ((void()**))788
Constant (const byte*) BORDERCOL#0 = ((byte*))53281
Constant (const byte*) BGCOL#0 = ((byte*))53280
Constant (const byte*) main::SCREEN#0 = ((byte*))1024
Constant (const byte) main::qwe#0 = 32
Constant (const byte) main::asd#0 = 0
Constant (const byte) main::row#0 = 12
Constant (const byte) main::x#0 = 0
Constant (const void()*) main::$1 = &irq
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(main::SCREEN#0+0)
Consolidated array index constant in *(main::SCREEN#0+1)
Successful SSA optimization Pass2ConstantAdditionElimination
Resolved ranged next value main::x#1 ← ++ main::x#2 to ++
Resolved ranged comparison value if(main::x#1!=rangelast(0,10)) goto main::@1 to (byte/signed byte/word/signed word/dword/signed dword) 11
Inlining constant with var siblings (const byte) main::qwe#0
Inlining constant with var siblings (const byte) main::asd#0
Inlining constant with var siblings (const byte) main::row#0
Inlining constant with var siblings (const byte) main::x#0
Constant inlined main::qwe#0 = (byte/signed byte/word/signed word/dword/signed dword) 32
Constant inlined main::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::asd#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$1 = &interrupt(KERNEL_MIN)(void()) irq()
Constant inlined main::row#0 = (byte/signed byte/word/signed word/dword/signed dword) 12
Successful SSA optimization Pass2ConstantInlining
Simplifying constant plus zero main::SCREEN#0+0
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:3 

Created 4 initial phi equivalence classes
Coalesced [17] main::row#3 ← main::row#1
Coalesced [18] main::x#3 ← main::x#1
Coalesced [19] main::qwe#4 ← main::qwe#1
Coalesced [20] main::asd#4 ← main::asd#1
Coalesced down to 4 phi equivalence classes
Culled Empty Block (label) main::@3
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] (byte) col1#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [1] (byte) col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  to:@2
@2: scope:[]  from @begin
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @2
  [4] phi()
main: scope:[main]  from @2
  [5] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [6] (byte) main::asd#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@1/(byte) main::asd#1 )
  [6] (byte) main::qwe#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 32 main::@1/(byte) main::qwe#1 )
  [6] (byte) main::x#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@1/(byte) main::x#1 )
  [6] (byte) main::row#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 12 main::@1/(byte) main::row#1 )
  [7] (byte) main::row#1 ← ++ (byte) main::row#2
  [8] *((const byte*) main::SCREEN#0 + (byte) main::x#2) ← (byte) main::row#1
  [9] (byte) main::qwe#1 ← ++ (byte) main::qwe#2
  [10] (byte) main::asd#1 ← (byte) main::asd#2 + (byte) main::qwe#1
  [11] (byte) main::x#1 ← ++ (byte) main::x#2
  [12] if((byte) main::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 11) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [13] *((const byte*) main::SCREEN#0) ← (byte) main::qwe#1
  [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) main::asd#1
  [15] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq()
  to:main::@return
main::@return: scope:[main]  from main::@2
  [16] return 
  to:@return
irq: scope:[irq]  from
  asm { lda$dc0d  }
  [18] *((const byte*) BGCOL#0) ← (byte) col1#0
  [19] (byte) col1#1 ← ++ (byte) col1#0
  [20] *((const byte*) BORDERCOL#0) ← (byte) col2#0
  [21] (byte) col2#1 ← ++ (byte) col2#0
  to:irq::@return
irq::@return: scope:[irq]  from irq
  [22] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte*) BORDERCOL
(void()**) KERNEL_IRQ
(byte) col1
(byte) col1#0 3.0
(byte) col1#1 20.0
(byte) col2
(byte) col2#0 1.5
(byte) col2#1 20.0
interrupt(KERNEL_MIN)(void()) irq()
(void()) main()
(byte*) main::SCREEN
(byte) main::asd
(byte) main::asd#1 6.0
(byte) main::asd#2 5.5
(byte) main::qwe
(byte) main::qwe#1 8.75
(byte) main::qwe#2 7.333333333333333
(byte) main::row
(byte) main::row#1 5.5
(byte) main::row#2 22.0
(byte) main::x
(byte) main::x#1 16.5
(byte) main::x#2 6.6000000000000005

Initial phi equivalence classes
[ main::row#2 main::row#1 ]
[ main::x#2 main::x#1 ]
[ main::qwe#2 main::qwe#1 ]
[ main::asd#2 main::asd#1 ]
Added variable col1#0 to zero page equivalence class [ col1#0 ]
Added variable col2#0 to zero page equivalence class [ col2#0 ]
Added variable col1#1 to zero page equivalence class [ col1#1 ]
Added variable col2#1 to zero page equivalence class [ col2#1 ]
Complete equivalence classes
[ main::row#2 main::row#1 ]
[ main::x#2 main::x#1 ]
[ main::qwe#2 main::qwe#1 ]
[ main::asd#2 main::asd#1 ]
[ col1#0 ]
[ col2#0 ]
[ col1#1 ]
[ col2#1 ]
Allocated zp ZP_BYTE:2 [ main::row#2 main::row#1 ]
Allocated zp ZP_BYTE:3 [ main::x#2 main::x#1 ]
Allocated zp ZP_BYTE:4 [ main::qwe#2 main::qwe#1 ]
Allocated zp ZP_BYTE:5 [ main::asd#2 main::asd#1 ]
Allocated zp ZP_BYTE:6 [ col1#0 ]
Allocated zp ZP_BYTE:7 [ col2#0 ]
Allocated zp ZP_BYTE:8 [ col1#1 ]
Allocated zp ZP_BYTE:9 [ col2#1 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label KERNEL_IRQ = $314
  .label BORDERCOL = $d021
  .label BGCOL = $d020
  .label col1 = 6
  .label col2 = 7
  .label col1_1 = 8
  .label col2_1 = 9
//SEG2 @begin
bbegin:
//SEG3 [0] (byte) col1#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
  lda #0
  sta col1
//SEG4 [1] (byte) col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8 -- vbuz1=vbuc1 
  lda #8
  sta col2
//SEG5 [2] phi from @begin to @2 [phi:@begin->@2]
b2_from_bbegin:
  jmp b2
//SEG6 @2
b2:
//SEG7 [3] call main 
//SEG8 [5] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
//SEG9 [4] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
//SEG10 @end
bend:
//SEG11 main
main: {
    .label SCREEN = $400
    .label row = 2
    .label qwe = 4
    .label asd = 5
    .label x = 3
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG13 [6] phi (byte) main::asd#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta asd
  //SEG14 [6] phi (byte) main::qwe#2 = (byte/signed byte/word/signed word/dword/signed dword) 32 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #$20
    sta qwe
  //SEG15 [6] phi (byte) main::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG16 [6] phi (byte) main::row#2 = (byte/signed byte/word/signed word/dword/signed dword) 12 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #$c
    sta row
    jmp b1
  //SEG17 [6] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG18 [6] phi (byte) main::asd#2 = (byte) main::asd#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG19 [6] phi (byte) main::qwe#2 = (byte) main::qwe#1 [phi:main::@1->main::@1#1] -- register_copy 
  //SEG20 [6] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@1->main::@1#2] -- register_copy 
  //SEG21 [6] phi (byte) main::row#2 = (byte) main::row#1 [phi:main::@1->main::@1#3] -- register_copy 
    jmp b1
  //SEG22 main::@1
  b1:
  //SEG23 [7] (byte) main::row#1 ← ++ (byte) main::row#2 -- vbuz1=_inc_vbuz1 
    inc row
  //SEG24 [8] *((const byte*) main::SCREEN#0 + (byte) main::x#2) ← (byte) main::row#1 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda row
    ldy x
    sta SCREEN,y
  //SEG25 [9] (byte) main::qwe#1 ← ++ (byte) main::qwe#2 -- vbuz1=_inc_vbuz1 
    inc qwe
  //SEG26 [10] (byte) main::asd#1 ← (byte) main::asd#2 + (byte) main::qwe#1 -- vbuz1=vbuz1_plus_vbuz2 
    lda asd
    clc
    adc qwe
    sta asd
  //SEG27 [11] (byte) main::x#1 ← ++ (byte) main::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG28 [12] if((byte) main::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 11) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda x
    cmp #$b
    bne b1_from_b1
    jmp b2
  //SEG29 main::@2
  b2:
  //SEG30 [13] *((const byte*) main::SCREEN#0) ← (byte) main::qwe#1 -- _deref_pbuc1=vbuz1 
    lda qwe
    sta SCREEN
  //SEG31 [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) main::asd#1 -- _deref_pbuc1=vbuz1 
    lda asd
    sta SCREEN+1
  //SEG32 [15] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq() -- _deref_pptc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
    jmp breturn
  //SEG33 main::@return
  breturn:
  //SEG34 [16] return 
    rts
}
//SEG35 irq
irq: {
  //SEG36 entry interrupt(KERNEL_MIN)
  //SEG37 asm { lda$dc0d  }
    lda $dc0d
  //SEG38 [18] *((const byte*) BGCOL#0) ← (byte) col1#0 -- _deref_pbuc1=vbuz1 
    lda col1
    sta BGCOL
  //SEG39 [19] (byte) col1#1 ← ++ (byte) col1#0 -- vbuz1=_inc_vbuz2 
    ldy col1
    iny
    sty col1_1
  //SEG40 [20] *((const byte*) BORDERCOL#0) ← (byte) col2#0 -- _deref_pbuc1=vbuz1 
    lda col2
    sta BORDERCOL
  //SEG41 [21] (byte) col2#1 ← ++ (byte) col2#0 -- vbuz1=_inc_vbuz2 
    ldy col2
    iny
    sty col2_1
    jmp breturn
  //SEG42 irq::@return
  breturn:
  //SEG43 [22] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] (byte) col1#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( ) always clobbers reg byte a 
Statement [1] (byte) col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8 [ ] ( ) always clobbers reg byte a 
Statement [10] (byte) main::asd#1 ← (byte) main::asd#2 + (byte) main::qwe#1 [ main::x#2 main::row#1 main::qwe#1 main::asd#1 ] ( main:3 [ main::x#2 main::row#1 main::qwe#1 main::asd#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::x#2 main::x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::row#2 main::row#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ main::qwe#2 main::qwe#1 ]
Statement [15] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq() [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement asm { lda$dc0d  } always clobbers reg byte a 
Statement [18] *((const byte*) BGCOL#0) ← (byte) col1#0 [ col1#0 col2#0 ] ( ) always clobbers reg byte a 
Statement [19] (byte) col1#1 ← ++ (byte) col1#0 [ col2#0 ] ( ) always clobbers reg byte y 
Statement [20] *((const byte*) BORDERCOL#0) ← (byte) col2#0 [ col2#0 ] ( ) always clobbers reg byte a 
Statement [21] (byte) col2#1 ← ++ (byte) col2#0 [ ] ( ) always clobbers reg byte y 
Statement [0] (byte) col1#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( ) always clobbers reg byte a 
Statement [1] (byte) col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8 [ ] ( ) always clobbers reg byte a 
Statement [8] *((const byte*) main::SCREEN#0 + (byte) main::x#2) ← (byte) main::row#1 [ main::x#2 main::qwe#2 main::asd#2 main::row#1 ] ( main:3 [ main::x#2 main::qwe#2 main::asd#2 main::row#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ main::asd#2 main::asd#1 ]
Statement [10] (byte) main::asd#1 ← (byte) main::asd#2 + (byte) main::qwe#1 [ main::x#2 main::row#1 main::qwe#1 main::asd#1 ] ( main:3 [ main::x#2 main::row#1 main::qwe#1 main::asd#1 ] ) always clobbers reg byte a 
Statement [15] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq() [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement asm { lda$dc0d  } always clobbers reg byte a 
Statement [18] *((const byte*) BGCOL#0) ← (byte) col1#0 [ col1#0 col2#0 ] ( ) always clobbers reg byte a 
Statement [19] (byte) col1#1 ← ++ (byte) col1#0 [ col2#0 ] ( ) always clobbers reg byte y 
Statement [20] *((const byte*) BORDERCOL#0) ← (byte) col2#0 [ col2#0 ] ( ) always clobbers reg byte a 
Statement [21] (byte) col2#1 ← ++ (byte) col2#0 [ ] ( ) always clobbers reg byte y 
Statement [0] (byte) col1#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( ) always clobbers reg byte a 
Statement [1] (byte) col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8 [ ] ( ) always clobbers reg byte a 
Statement [8] *((const byte*) main::SCREEN#0 + (byte) main::x#2) ← (byte) main::row#1 [ main::x#2 main::qwe#2 main::asd#2 main::row#1 ] ( main:3 [ main::x#2 main::qwe#2 main::asd#2 main::row#1 ] ) always clobbers reg byte a 
Statement [10] (byte) main::asd#1 ← (byte) main::asd#2 + (byte) main::qwe#1 [ main::x#2 main::row#1 main::qwe#1 main::asd#1 ] ( main:3 [ main::x#2 main::row#1 main::qwe#1 main::asd#1 ] ) always clobbers reg byte a 
Statement [15] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq() [ ] ( main:3 [ ] ) always clobbers reg byte a 
Statement asm { lda$dc0d  } always clobbers reg byte a 
Statement [18] *((const byte*) BGCOL#0) ← (byte) col1#0 [ col1#0 col2#0 ] ( ) always clobbers reg byte a 
Statement [19] (byte) col1#1 ← ++ (byte) col1#0 [ col2#0 ] ( ) always clobbers reg byte y 
Statement [20] *((const byte*) BORDERCOL#0) ← (byte) col2#0 [ col2#0 ] ( ) always clobbers reg byte a 
Statement [21] (byte) col2#1 ← ++ (byte) col2#0 [ ] ( ) always clobbers reg byte y 
Potential registers zp ZP_BYTE:2 [ main::row#2 main::row#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::x#2 main::x#1 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ main::qwe#2 main::qwe#1 ] : zp ZP_BYTE:4 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ main::asd#2 main::asd#1 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ col1#0 ] : zp ZP_BYTE:6 , 
Potential registers zp ZP_BYTE:7 [ col2#0 ] : zp ZP_BYTE:7 , 
Potential registers zp ZP_BYTE:8 [ col1#1 ] : zp ZP_BYTE:8 , 
Potential registers zp ZP_BYTE:9 [ col2#1 ] : zp ZP_BYTE:9 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 27.5: zp ZP_BYTE:2 [ main::row#2 main::row#1 ] 23.1: zp ZP_BYTE:3 [ main::x#2 main::x#1 ] 16.08: zp ZP_BYTE:4 [ main::qwe#2 main::qwe#1 ] 11.5: zp ZP_BYTE:5 [ main::asd#2 main::asd#1 ] 
Uplift Scope [] 20: zp ZP_BYTE:8 [ col1#1 ] 20: zp ZP_BYTE:9 [ col2#1 ] 3: zp ZP_BYTE:6 [ col1#0 ] 1.5: zp ZP_BYTE:7 [ col2#0 ] 
Uplift Scope [irq] 

Uplifting [main] best 639 combination zp ZP_BYTE:2 [ main::row#2 main::row#1 ] reg byte y [ main::x#2 main::x#1 ] reg byte x [ main::qwe#2 main::qwe#1 ] zp ZP_BYTE:5 [ main::asd#2 main::asd#1 ] 
Uplifting [] best 639 combination zp ZP_BYTE:8 [ col1#1 ] zp ZP_BYTE:9 [ col2#1 ] zp ZP_BYTE:6 [ col1#0 ] zp ZP_BYTE:7 [ col2#0 ] 
Uplifting [irq] best 639 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ main::row#2 main::row#1 ]
Uplifting [main] best 639 combination zp ZP_BYTE:2 [ main::row#2 main::row#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ col1#1 ]
Uplifting [] best 639 combination zp ZP_BYTE:8 [ col1#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:9 [ col2#1 ]
Uplifting [] best 639 combination zp ZP_BYTE:9 [ col2#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ main::asd#2 main::asd#1 ]
Uplifting [main] best 639 combination zp ZP_BYTE:5 [ main::asd#2 main::asd#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ col1#0 ]
Uplifting [] best 639 combination zp ZP_BYTE:6 [ col1#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ col2#0 ]
Uplifting [] best 639 combination zp ZP_BYTE:7 [ col2#0 ] 
Coalescing zero page register with common assignment [ zp ZP_BYTE:6 [ col1#0 ] ] with [ zp ZP_BYTE:8 [ col1#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:7 [ col2#0 ] ] with [ zp ZP_BYTE:9 [ col2#1 ] ] - score: 1
Coalescing zero page register [ zp ZP_BYTE:2 [ main::row#2 main::row#1 ] ] with [ zp ZP_BYTE:6 [ col1#0 col1#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:2 [ main::row#2 main::row#1 col1#0 col1#1 ] ] with [ zp ZP_BYTE:7 [ col2#0 col2#1 ] ]
Allocated (was zp ZP_BYTE:5) zp ZP_BYTE:3 [ main::asd#2 main::asd#1 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label KERNEL_IRQ = $314
  .label BORDERCOL = $d021
  .label BGCOL = $d020
  .label col1 = 2
  .label col2 = 2
//SEG2 @begin
bbegin:
//SEG3 [0] (byte) col1#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
  lda #0
  sta col1
//SEG4 [1] (byte) col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8 -- vbuz1=vbuc1 
  lda #8
  sta col2
//SEG5 [2] phi from @begin to @2 [phi:@begin->@2]
b2_from_bbegin:
  jmp b2
//SEG6 @2
b2:
//SEG7 [3] call main 
//SEG8 [5] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
//SEG9 [4] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
//SEG10 @end
bend:
//SEG11 main
main: {
    .label SCREEN = $400
    .label row = 2
    .label asd = 3
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG13 [6] phi (byte) main::asd#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta asd
  //SEG14 [6] phi (byte) main::qwe#2 = (byte/signed byte/word/signed word/dword/signed dword) 32 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #$20
  //SEG15 [6] phi (byte) main::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#2] -- vbuyy=vbuc1 
    ldy #0
  //SEG16 [6] phi (byte) main::row#2 = (byte/signed byte/word/signed word/dword/signed dword) 12 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #$c
    sta row
    jmp b1
  //SEG17 [6] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG18 [6] phi (byte) main::asd#2 = (byte) main::asd#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG19 [6] phi (byte) main::qwe#2 = (byte) main::qwe#1 [phi:main::@1->main::@1#1] -- register_copy 
  //SEG20 [6] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@1->main::@1#2] -- register_copy 
  //SEG21 [6] phi (byte) main::row#2 = (byte) main::row#1 [phi:main::@1->main::@1#3] -- register_copy 
    jmp b1
  //SEG22 main::@1
  b1:
  //SEG23 [7] (byte) main::row#1 ← ++ (byte) main::row#2 -- vbuz1=_inc_vbuz1 
    inc row
  //SEG24 [8] *((const byte*) main::SCREEN#0 + (byte) main::x#2) ← (byte) main::row#1 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda row
    sta SCREEN,y
  //SEG25 [9] (byte) main::qwe#1 ← ++ (byte) main::qwe#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG26 [10] (byte) main::asd#1 ← (byte) main::asd#2 + (byte) main::qwe#1 -- vbuz1=vbuz1_plus_vbuxx 
    txa
    clc
    adc asd
    sta asd
  //SEG27 [11] (byte) main::x#1 ← ++ (byte) main::x#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG28 [12] if((byte) main::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 11) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$b
    bne b1_from_b1
    jmp b2
  //SEG29 main::@2
  b2:
  //SEG30 [13] *((const byte*) main::SCREEN#0) ← (byte) main::qwe#1 -- _deref_pbuc1=vbuxx 
    stx SCREEN
  //SEG31 [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) main::asd#1 -- _deref_pbuc1=vbuz1 
    lda asd
    sta SCREEN+1
  //SEG32 [15] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq() -- _deref_pptc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
    jmp breturn
  //SEG33 main::@return
  breturn:
  //SEG34 [16] return 
    rts
}
//SEG35 irq
irq: {
  //SEG36 entry interrupt(KERNEL_MIN)
  //SEG37 asm { lda$dc0d  }
    lda $dc0d
  //SEG38 [18] *((const byte*) BGCOL#0) ← (byte) col1#0 -- _deref_pbuc1=vbuz1 
    lda col1
    sta BGCOL
  //SEG39 [19] (byte) col1#1 ← ++ (byte) col1#0 -- vbuz1=_inc_vbuz1 
    inc col1
  //SEG40 [20] *((const byte*) BORDERCOL#0) ← (byte) col2#0 -- _deref_pbuc1=vbuz1 
    lda col2
    sta BORDERCOL
  //SEG41 [21] (byte) col2#1 ← ++ (byte) col2#0 -- vbuz1=_inc_vbuz1 
    inc col2
    jmp breturn
  //SEG42 irq::@return
  breturn:
  //SEG43 [22] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b2
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldy #0 with TAY
Replacing label b1_from_b1 with b1
Removing instruction b2_from_bbegin:
Removing instruction main_from_b2:
Removing instruction bend_from_b2:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bbegin:
Removing instruction b2:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b2:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda asd
Succesful ASM optimization Pass5UnnecesaryLoadElimination

FINAL SYMBOL TABLE
(label) @2
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = ((byte*))(word/dword/signed dword) 53280
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) 53281
(void()**) KERNEL_IRQ
(const void()**) KERNEL_IRQ#0 KERNEL_IRQ = ((void()**))(word/signed word/dword/signed dword) 788
(byte) col1
(byte) col1#0 col1 zp ZP_BYTE:2 3.0
(byte) col1#1 col1 zp ZP_BYTE:2 20.0
(byte) col2
(byte) col2#0 col2 zp ZP_BYTE:2 1.5
(byte) col2#1 col2 zp ZP_BYTE:2 20.0
interrupt(KERNEL_MIN)(void()) irq()
(label) irq::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(byte) main::asd
(byte) main::asd#1 asd zp ZP_BYTE:3 6.0
(byte) main::asd#2 asd zp ZP_BYTE:3 5.5
(byte) main::qwe
(byte) main::qwe#1 reg byte x 8.75
(byte) main::qwe#2 reg byte x 7.333333333333333
(byte) main::row
(byte) main::row#1 row zp ZP_BYTE:2 5.5
(byte) main::row#2 row zp ZP_BYTE:2 22.0
(byte) main::x
(byte) main::x#1 reg byte y 16.5
(byte) main::x#2 reg byte y 6.6000000000000005

zp ZP_BYTE:2 [ main::row#2 main::row#1 col1#0 col1#1 col2#0 col2#1 ]
reg byte y [ main::x#2 main::x#1 ]
reg byte x [ main::qwe#2 main::qwe#1 ]
zp ZP_BYTE:3 [ main::asd#2 main::asd#1 ]


FINAL ASSEMBLER
Score: 528

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label KERNEL_IRQ = $314
  .label BORDERCOL = $d021
  .label BGCOL = $d020
  .label col1 = 2
  .label col2 = 2
//SEG2 @begin
//SEG3 [0] (byte) col1#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- vbuz1=vbuc1 
  lda #0
  sta col1
//SEG4 [1] (byte) col2#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8 -- vbuz1=vbuc1 
  lda #8
  sta col2
//SEG5 [2] phi from @begin to @2 [phi:@begin->@2]
//SEG6 @2
//SEG7 [3] call main 
//SEG8 [5] phi from @2 to main [phi:@2->main]
  jsr main
//SEG9 [4] phi from @2 to @end [phi:@2->@end]
//SEG10 @end
//SEG11 main
main: {
    .label SCREEN = $400
    .label row = 2
    .label asd = 3
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG13 [6] phi (byte) main::asd#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta asd
  //SEG14 [6] phi (byte) main::qwe#2 = (byte/signed byte/word/signed word/dword/signed dword) 32 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #$20
  //SEG15 [6] phi (byte) main::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#2] -- vbuyy=vbuc1 
    tay
  //SEG16 [6] phi (byte) main::row#2 = (byte/signed byte/word/signed word/dword/signed dword) 12 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #$c
    sta row
  //SEG17 [6] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG18 [6] phi (byte) main::asd#2 = (byte) main::asd#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG19 [6] phi (byte) main::qwe#2 = (byte) main::qwe#1 [phi:main::@1->main::@1#1] -- register_copy 
  //SEG20 [6] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@1->main::@1#2] -- register_copy 
  //SEG21 [6] phi (byte) main::row#2 = (byte) main::row#1 [phi:main::@1->main::@1#3] -- register_copy 
  //SEG22 main::@1
  b1:
  //SEG23 [7] (byte) main::row#1 ← ++ (byte) main::row#2 -- vbuz1=_inc_vbuz1 
    inc row
  //SEG24 [8] *((const byte*) main::SCREEN#0 + (byte) main::x#2) ← (byte) main::row#1 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda row
    sta SCREEN,y
  //SEG25 [9] (byte) main::qwe#1 ← ++ (byte) main::qwe#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG26 [10] (byte) main::asd#1 ← (byte) main::asd#2 + (byte) main::qwe#1 -- vbuz1=vbuz1_plus_vbuxx 
    txa
    clc
    adc asd
    sta asd
  //SEG27 [11] (byte) main::x#1 ← ++ (byte) main::x#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG28 [12] if((byte) main::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 11) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$b
    bne b1
  //SEG29 main::@2
  //SEG30 [13] *((const byte*) main::SCREEN#0) ← (byte) main::qwe#1 -- _deref_pbuc1=vbuxx 
    stx SCREEN
  //SEG31 [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) main::asd#1 -- _deref_pbuc1=vbuz1 
    sta SCREEN+1
  //SEG32 [15] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq() -- _deref_pptc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
  //SEG33 main::@return
  //SEG34 [16] return 
    rts
}
//SEG35 irq
irq: {
  //SEG36 entry interrupt(KERNEL_MIN)
  //SEG37 asm { lda$dc0d  }
    lda $dc0d
  //SEG38 [18] *((const byte*) BGCOL#0) ← (byte) col1#0 -- _deref_pbuc1=vbuz1 
    lda col1
    sta BGCOL
  //SEG39 [19] (byte) col1#1 ← ++ (byte) col1#0 -- vbuz1=_inc_vbuz1 
    inc col1
  //SEG40 [20] *((const byte*) BORDERCOL#0) ← (byte) col2#0 -- _deref_pbuc1=vbuz1 
    lda col2
    sta BORDERCOL
  //SEG41 [21] (byte) col2#1 ← ++ (byte) col2#0 -- vbuz1=_inc_vbuz1 
    inc col2
  //SEG42 irq::@return
  //SEG43 [22] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}

