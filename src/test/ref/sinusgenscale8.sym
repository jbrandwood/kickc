__constant const unsigned int PI2_u4f12 = $6488
__constant const unsigned int PI_HALF_u4f12 = $1922
__constant const unsigned int PI_u4f12 = $3244
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
unsigned int div16u(unsigned int dividend , unsigned int divisor)
unsigned int div16u::dividend
unsigned int div16u::divisor
unsigned int div16u::return
unsigned int div16u::return#0 // return zp[2]:10 37.33333333333333
unsigned int div16u::return#2 // return zp[2]:10 22.0
unsigned int divr16u(unsigned int dividend , unsigned int divisor , unsigned int rem)
char divr16u::$1 // reg byte a 20002.0
char divr16u::$2 // reg byte a 20002.0
unsigned int divr16u::dividend
unsigned int divr16u::dividend#0 // dividend zp[2]:6 2500.25
unsigned int divr16u::dividend#2 // dividend zp[2]:6 4286.142857142857
unsigned int divr16u::divisor
char divr16u::i
char divr16u::i#1 // reg byte x 15001.5
char divr16u::i#2 // reg byte x 1538.6153846153845
unsigned int divr16u::quotient
unsigned int divr16u::quotient#1 // quotient zp[2]:10 15001.5
unsigned int divr16u::quotient#2 // quotient zp[2]:10 10001.0
unsigned int divr16u::quotient#3 // quotient zp[2]:10 2500.25
unsigned int divr16u::rem
unsigned int divr16u::rem#0 // rem zp[2]:8 7500.75
unsigned int divr16u::rem#1 // rem zp[2]:8 20002.0
unsigned int divr16u::rem#2 // rem zp[2]:8 20002.0
unsigned int divr16u::rem#4 // rem zp[2]:8 20002.0
unsigned int divr16u::rem#5 // rem zp[2]:8 10001.0
unsigned int divr16u::rem#9 // rem zp[2]:8 10001.0
unsigned int divr16u::return
unsigned int divr16u::return#0 // return zp[2]:10 6020.8
unsigned int divr16u::return#2 // return zp[2]:10 202.0
void main()
__constant char main::sintab[$14] = { fill( $14, 0) }
__constant unsigned int main::tabsize = $14
void * memset(void *str , char c , unsigned int num)
char memset::c
__constant char memset::c#0 = ' ' // c
char *memset::dst
char *memset::dst#1 // dst zp[2]:12 2002.0
char *memset::dst#2 // dst zp[2]:12 1334.6666666666667
char *memset::end
__constant char *memset::end#0 = (char *)memset::str#0+memset::num#0 // end
unsigned int memset::num
__constant unsigned int memset::num#0 = $3e8 // num
void *memset::return
void *memset::str
__constant void *memset::str#0 = (void *)print_screen#0 // str
int mul8su(signed char a , char b)
char mul8su::$4 // reg byte a 2002.0
char mul8su::$6 // reg byte a 2002.0
signed char mul8su::a
signed char mul8su::a#0 // reg byte y 220.39999999999998
char mul8su::b
__constant char mul8su::b#0 = sin8u_table::amplitude#0+1 // b
unsigned int mul8su::m
unsigned int mul8su::m#0 // m zp[2]:2 1001.0
unsigned int mul8su::m#1 // m zp[2]:2 2002.0
unsigned int mul8su::m#2 // m zp[2]:2 667.3333333333334
int mul8su::return
unsigned int mul8u(char a , char b)
char mul8u::$1 // reg byte a 2.0000002E7
char mul8u::a
char mul8u::a#0 // reg byte x 10001.0
char mul8u::a#1 // reg byte x 1.0000001E7
char mul8u::a#2 // reg byte x 2002.0
char mul8u::a#3 // reg byte x 6683334.166666666
char mul8u::a#6 // reg byte x 55501.5
char mul8u::b
char mul8u::b#0 // reg byte a 20002.0
char mul8u::b#2 // reg byte a 10001.0
unsigned int mul8u::mb
unsigned int mul8u::mb#0 // mb zp[2]:4 200002.0
unsigned int mul8u::mb#1 // mb zp[2]:4 2.0000002E7
unsigned int mul8u::mb#2 // mb zp[2]:4 4300000.571428571
unsigned int mul8u::res
unsigned int mul8u::res#1 // res zp[2]:2 2.0000002E7
unsigned int mul8u::res#2 // res zp[2]:2 4287286.428571429
unsigned int mul8u::res#6 // res zp[2]:2 1.0000001E7
unsigned int mul8u::return
unsigned int mul8u::return#0 // return zp[2]:2 20002.0
unsigned int mul8u::return#3 // return zp[2]:2 2002.0
char mulu8_sel(char v1 , char v2 , char select)
unsigned int mulu8_sel::$0 // zp[2]:2 20002.0
unsigned int mulu8_sel::$1 // zp[2]:2 20002.0
char mulu8_sel::return
char mulu8_sel::return#0 // reg byte a 2002.0
char mulu8_sel::return#1 // reg byte a 2002.0
char mulu8_sel::return#10 // reg byte a 2002.0
char mulu8_sel::return#11 // reg byte a 2002.0
char mulu8_sel::return#12 // reg byte a 2143.714285714286
char mulu8_sel::return#2 // reg byte a 2002.0
char mulu8_sel::select
char mulu8_sel::select#5 // select zp[1]:14 1666.8333333333333
char mulu8_sel::v1
char mulu8_sel::v1#0 // reg byte x 1001.0
char mulu8_sel::v1#1 // reg byte x 1001.0
char mulu8_sel::v1#2 // reg byte x 2002.0
char mulu8_sel::v1#3 // reg byte x 1001.0
char mulu8_sel::v1#4 // reg byte x 1001.0
char mulu8_sel::v1#5 // reg byte x 15006.0
char mulu8_sel::v2
char mulu8_sel::v2#0 // reg byte y 2002.0
char mulu8_sel::v2#1 // reg byte y 2002.0
char mulu8_sel::v2#3 // reg byte y 2002.0
char mulu8_sel::v2#4 // reg byte y 2002.0
char mulu8_sel::v2#5 // reg byte y 7002.5
void print_char(char ch)
char print_char::ch
char print_char::ch#0 // reg byte a 200002.0
char print_char::ch#5 // reg byte a 200002.0
char print_char::ch#6 // reg byte a 200002.0
char print_char::ch#7 // reg byte a 1300004.0
char *print_char_cursor
char *print_char_cursor#1 // print_char_cursor zp[2]:4 7330.857142857143
char *print_char_cursor#105 // print_char_cursor zp[2]:4 5557.0
char *print_char_cursor#106 // print_char_cursor zp[2]:4 40383.0
char *print_char_cursor#112 // print_char_cursor zp[2]:4 1449.0
char *print_char_cursor#119 // print_char_cursor zp[2]:4 202.0
char *print_char_cursor#18 // print_char_cursor zp[2]:4 26782.73469387755
char *print_char_cursor#67 // print_char_cursor zp[2]:4 1152004.5
void print_cls()
__constant const char print_hextab[] = "0123456789abcdef"z
char *print_line_cursor
char *print_line_cursor#0 // print_line_cursor zp[2]:8 8113.648648648648
char *print_line_cursor#13 // print_line_cursor zp[2]:8 201003.0
char *print_line_cursor#25 // print_line_cursor zp[2]:8 1102.0
void print_ln()
void print_schar(signed char b)
signed char print_schar::b
signed char print_schar::b#0 // reg byte x 2002.0
signed char print_schar::b#1 // reg byte x 517.3333333333334
signed char print_schar::b#4 // reg byte x 2002.0
char *print_screen
__constant char *print_screen#0 = (char *) 1024 // print_screen
void print_sint(int w)
int print_sint::w
int print_sint::w#0 // w zp[2]:6 2002.0
int print_sint::w#1 // w zp[2]:6 517.3333333333334
int print_sint::w#4 // w zp[2]:6 2002.0
void print_str(char *str)
char *print_str::str
char *print_str::str#0 // str zp[2]:6 200002.0
char *print_str::str#10 // str zp[2]:6 100251.25
char *print_str::str#13 // str zp[2]:6 1001.0
void print_uchar(char b)
char print_uchar::$0 // reg byte a 200002.0
char print_uchar::$2 // reg byte x 200002.0
char print_uchar::b
char print_uchar::b#0 // reg byte x 2002.0
char print_uchar::b#1 // reg byte x 20002.0
char print_uchar::b#2 // reg byte x 20002.0
char print_uchar::b#7 // reg byte x 202.0
char print_uchar::b#8 // reg byte x 55276.5
void print_uint(unsigned int w)
unsigned int print_uint::w
unsigned int print_uint::w#0 // w zp[2]:6 2002.0
unsigned int print_uint::w#1 // w zp[2]:6 22.0
unsigned int print_uint::w#2 // w zp[2]:6 202.0
unsigned int print_uint::w#3 // w zp[2]:6 7038.333333333333
signed char sin8s(unsigned int x)
unsigned int sin8s::$4 // zp[2]:6 2002.0
__constant const char sin8s::DIV_6 = $2b
char sin8s::isUpper
char sin8s::isUpper#10 // isUpper zp[1]:20 27.805555555555557
signed char sin8s::return
signed char sin8s::return#0 // reg byte a 701.0
signed char sin8s::return#2 // reg byte a 202.0
signed char sin8s::return#5 // reg byte a 2002.0
signed char sin8s::sinx
signed char sin8s::sinx#1 // reg byte a 2002.0
char sin8s::usinx
char sin8s::usinx#0 // usinx zp[1]:17 166.83333333333334
char sin8s::usinx#1 // reg byte x 2002.0
char sin8s::usinx#2 // reg byte x 2002.0
char sin8s::usinx#4 // reg byte x 1001.0
unsigned int sin8s::x
unsigned int sin8s::x#0 // x zp[2]:6 2002.0
unsigned int sin8s::x#1 // x zp[2]:6 2002.0
unsigned int sin8s::x#2 // x zp[2]:6 1552.0
unsigned int sin8s::x#4 // x zp[2]:6 2502.5
unsigned int sin8s::x#6 // x zp[2]:6 3003.0
char sin8s::x1
char sin8s::x1#0 // x1 zp[1]:16 318.5
char sin8s::x2
char sin8s::x2#0 // reg byte a 2002.0
char sin8s::x3
char sin8s::x3#0 // x3 zp[1]:15 500.5
char sin8s::x3_6
char sin8s::x3_6#0 // reg byte a 2002.0
char sin8s::x4
char sin8s::x4#0 // reg byte a 2002.0
char sin8s::x5
char sin8s::x5#0 // reg byte a 2002.0
char sin8s::x5_128
char sin8s::x5_128#0 // reg byte a 2002.0
void sin8u_table(char *sintab , unsigned int tabsize , char min , char max)
char sin8u_table::$20 // reg byte a 202.0
char sin8u_table::amplitude
__constant char sin8u_table::amplitude#0 = sin8u_table::max#0-sin8u_table::min#0 // amplitude
unsigned int sin8u_table::i
unsigned int sin8u_table::i#1 // i zp[2]:12 202.0
unsigned int sin8u_table::i#10 // i zp[2]:12 9.46875
char sin8u_table::max
__constant char sin8u_table::max#0 = $ff // max
char sin8u_table::mid
__constant char sin8u_table::mid#0 = (char)sin8u_table::sum#0/2+1 // mid
char sin8u_table::min
__constant char sin8u_table::min#0 = $a // min
char *sin8u_table::sintab
char *sin8u_table::sintab#1 // sintab zp[2]:21 9.619047619047619
char *sin8u_table::sintab#2 // sintab zp[2]:21 25.25
signed char sin8u_table::sinx
signed char sin8u_table::sinx#0 // sinx zp[1]:20 21.642857142857142
int sin8u_table::sinx_sc
int sin8u_table::sinx_sc#0 // sinx_sc zp[2]:2 20.2
char sin8u_table::sinx_tr
char sin8u_table::sinx_tr#0 // sinx_tr zp[1]:14 17.823529411764707
unsigned int sin8u_table::step
unsigned int sin8u_table::step#0 // step zp[2]:10 2.2363636363636363
__constant char sin8u_table::str[6] = "step:"
__constant char sin8u_table::str1[6] = " min:"
__constant char sin8u_table::str2[6] = " max:"
__constant char sin8u_table::str3[7] = " ampl:"
__constant char sin8u_table::str4[6] = " mid:"
__constant char sin8u_table::str5[4] = "x: "
__constant char sin8u_table::str6[7] = " sin: "
__constant char sin8u_table::str7[$a] = " scaled: "
__constant char sin8u_table::str8[9] = " trans: "
unsigned int sin8u_table::sum
__constant unsigned int sin8u_table::sum#0 = (unsigned int)sin8u_table::min#0+sin8u_table::max#0 // sum
unsigned int sin8u_table::tabsize
unsigned int sin8u_table::x
unsigned int sin8u_table::x#1 // x zp[2]:18 101.0
unsigned int sin8u_table::x#10 // x zp[2]:18 13.03225806451613

zp[2]:18 [ sin8u_table::x#10 sin8u_table::x#1 ]
zp[2]:21 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
zp[2]:12 [ memset::dst#2 memset::dst#1 sin8u_table::i#10 sin8u_table::i#1 ]
reg byte x [ print_uchar::b#8 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#7 ]
reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
reg byte a [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
zp[2]:2 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 sin8u_table::sinx_sc#0 mul8u::return#3 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#0 mulu8_sel::$0 mulu8_sel::$1 ]
reg byte x [ print_schar::b#4 print_schar::b#0 print_schar::b#1 ]
zp[2]:8 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 print_line_cursor#13 print_line_cursor#25 print_line_cursor#0 ]
zp[2]:6 [ divr16u::dividend#2 divr16u::dividend#0 sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$4 print_uint::w#3 print_uint::w#0 print_uint::w#2 print_uint::w#1 print_sint::w#4 print_sint::w#0 print_sint::w#1 print_str::str#10 print_str::str#13 print_str::str#0 ]
zp[2]:10 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#2 sin8u_table::step#0 div16u::return#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte a [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 mulu8_sel::v1#1 ]
reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 mulu8_sel::v2#1 ]
reg byte a [ mul8u::b#2 mul8u::b#0 ]
reg byte x [ mul8u::a#3 mul8u::a#6 mul8u::a#2 mul8u::a#0 mul8u::a#1 ]
zp[2]:4 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 print_char_cursor#67 print_char_cursor#106 print_char_cursor#105 print_char_cursor#1 print_char_cursor#112 print_char_cursor#18 print_char_cursor#119 ]
reg byte a [ sin8s::return#2 ]
zp[1]:20 [ sin8u_table::sinx#0 sin8s::isUpper#10 ]
reg byte y [ mul8su::a#0 ]
reg byte a [ sin8u_table::$20 ]
zp[1]:14 [ sin8u_table::sinx_tr#0 mulu8_sel::select#5 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
zp[1]:16 [ sin8s::x1#0 ]
reg byte a [ mulu8_sel::return#0 ]
reg byte a [ sin8s::x2#0 ]
reg byte a [ mulu8_sel::return#1 ]
zp[1]:15 [ sin8s::x3#0 ]
reg byte a [ mulu8_sel::return#2 ]
reg byte a [ sin8s::x3_6#0 ]
zp[1]:17 [ sin8s::usinx#0 ]
reg byte a [ mulu8_sel::return#10 ]
reg byte a [ sin8s::x4#0 ]
reg byte a [ mulu8_sel::return#11 ]
reg byte a [ sin8s::x5#0 ]
reg byte a [ sin8s::x5_128#0 ]
reg byte a [ mul8su::$4 ]
reg byte a [ mul8su::$6 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ mulu8_sel::return#12 ]
reg byte a [ mul8u::$1 ]
