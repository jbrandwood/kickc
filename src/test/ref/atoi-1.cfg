@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) printf_cursor_x ← (byte) 0
  [2] (byte) printf_cursor_y ← (byte) 0
  [3] (byte*) printf_cursor_ptr ← (byte*) 1024
  to:@2
@2: scope:[]  from @1
  [4] phi()
  [5] call main 
  to:@end
@end: scope:[]  from @2
  [6] phi()

(void()) main()
main: scope:[main]  from @2
  [7] phi()
  [8] call printf_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [9] phi()
  [10] call atoi 
  [11] (signed word) atoi::return#3 ← (signed word) atoi::return#2
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] (signed word) printf_sint::value#1 ← (signed word) atoi::return#3
  [13] call printf_sint 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [14] phi()
  [15] call printf_str 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [16] phi()
  [17] call atoi 
  [18] (signed word) atoi::return#4 ← (signed word) atoi::return#2
  to:main::@5
main::@5: scope:[main]  from main::@4
  [19] (signed word) printf_sint::value#2 ← (signed word) atoi::return#4
  [20] call printf_sint 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [21] phi()
  [22] call printf_str 
  to:main::@return
main::@return: scope:[main]  from main::@6
  [23] return 
  to:@return

(void()) printf_str((byte*) printf_str::str)
printf_str: scope:[printf_str]  from main::@3 main::@6 printf_number_buffer::@2
  [24] (byte*) printf_str::str#6 ← phi( main::@3/(const byte*) main::str1 main::@6/(const byte*) main::str1 printf_number_buffer::@2/(const byte*) printf_number_buffer::buffer_digits#0 )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@4 printf_str::@5
  [25] (byte*) printf_str::str#4 ← phi( printf_str/(byte*) printf_str::str#6 printf_str::@4/(byte*) printf_str::str#0 printf_str::@5/(byte*) printf_str::str#0 )
  to:printf_str::@2
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [26] (byte) printf_str::ch#0 ← *((byte*) printf_str::str#4)
  [27] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#4
  [28] if((byte) printf_str::ch#0!=(byte) 0) goto printf_str::@3
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@2
  [29] return 
  to:@return
printf_str::@3: scope:[printf_str]  from printf_str::@2
  [30] if((byte) printf_str::ch#0==(byte) '
') goto printf_str::@4
  to:printf_str::@5
printf_str::@5: scope:[printf_str]  from printf_str::@3
  [31] (byte) printf_char::ch#1 ← (byte) printf_str::ch#0
  [32] call printf_char 
  to:printf_str::@1
printf_str::@4: scope:[printf_str]  from printf_str::@3
  [33] phi()
  [34] call printf_ln 
  to:printf_str::@1

(void()) printf_ln()
printf_ln: scope:[printf_ln]  from printf_str::@4
  [35] (byte*~) printf_ln::$0 ← (byte*) printf_cursor_ptr - (byte) printf_cursor_x
  [36] (byte*~) printf_ln::$1 ← (byte*~) printf_ln::$0 + (byte) $28
  [37] (byte*) printf_cursor_ptr ← (byte*~) printf_ln::$1
  [38] (byte) printf_cursor_x ← (byte) 0
  [39] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  [40] call printf_scroll 
  to:printf_ln::@return
printf_ln::@return: scope:[printf_ln]  from printf_ln
  [41] return 
  to:@return

(void()) printf_scroll()
printf_scroll: scope:[printf_scroll]  from printf_char::@1 printf_ln
  [42] if((byte) printf_cursor_y!=(byte) $19) goto printf_scroll::@return
  to:printf_scroll::@1
printf_scroll::@1: scope:[printf_scroll]  from printf_scroll
  [43] phi()
  [44] call memcpy 
  to:printf_scroll::@2
printf_scroll::@2: scope:[printf_scroll]  from printf_scroll::@1
  [45] phi()
  [46] call memset 
  to:printf_scroll::@3
printf_scroll::@3: scope:[printf_scroll]  from printf_scroll::@2
  [47] (byte*~) printf_scroll::$4 ← (byte*) printf_cursor_ptr - (byte) $28
  [48] (byte*) printf_cursor_ptr ← (byte*~) printf_scroll::$4
  [49] (byte) printf_cursor_y ← -- (byte) printf_cursor_y
  to:printf_scroll::@return
printf_scroll::@return: scope:[printf_scroll]  from printf_scroll printf_scroll::@3
  [50] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from printf_cls printf_scroll::@2
  [51] (byte) memset::c#4 ← phi( printf_cls/(byte) ' ' printf_scroll::@2/(byte) ' ' )
  [51] (void*) memset::str#3 ← phi( printf_cls/(void*) 1024 printf_scroll::@2/(void*)(number) $400+(number) $28*(number) $19-(number) $28 )
  [51] (word) memset::num#2 ← phi( printf_cls/(word)(number) $28*(number) $19 printf_scroll::@2/(byte) $28 )
  [52] if((word) memset::num#2<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [53] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2
  [54] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [55] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [56] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [57] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [58] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [59] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from printf_scroll::@1
  [60] phi()
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [61] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*)(const void*) memcpy::destination#0 memcpy::@2/(byte*) memcpy::dst#1 )
  [61] (byte*) memcpy::src#2 ← phi( memcpy/(byte*)(const void*) memcpy::source#0 memcpy::@2/(byte*) memcpy::src#1 )
  [62] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [63] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [64] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [65] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [66] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) printf_char((byte) printf_char::ch)
printf_char: scope:[printf_char]  from printf_number_buffer::@3 printf_str::@5
  [67] (byte) printf_char::ch#3 ← phi( printf_number_buffer::@3/(byte) printf_char::ch#2 printf_str::@5/(byte) printf_char::ch#1 )
  [68] *((byte*) printf_cursor_ptr) ← (byte) printf_char::ch#3
  [69] (byte*) printf_cursor_ptr ← ++ (byte*) printf_cursor_ptr
  [70] (byte) printf_cursor_x ← ++ (byte) printf_cursor_x
  [71] if((byte) printf_cursor_x!=(byte) $28) goto printf_char::@return
  to:printf_char::@1
printf_char::@1: scope:[printf_char]  from printf_char
  [72] (byte) printf_cursor_x ← (byte) 0
  [73] (byte) printf_cursor_y ← ++ (byte) printf_cursor_y
  [74] call printf_scroll 
  to:printf_char::@return
printf_char::@return: scope:[printf_char]  from printf_char printf_char::@1
  [75] return 
  to:@return

(void()) printf_sint((signed word) printf_sint::value , (byte) printf_sint::format_min_length , (byte) printf_sint::format_justify_left , (byte) printf_sint::format_sign_always , (byte) printf_sint::format_zero_padding , (byte) printf_sint::format_upper_case , (byte) printf_sint::format_radix)
printf_sint: scope:[printf_sint]  from main::@2 main::@5
  [76] (signed word) printf_sint::value#3 ← phi( main::@2/(signed word) printf_sint::value#1 main::@5/(signed word) printf_sint::value#2 )
  [77] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [78] if((signed word) printf_sint::value#3<(signed byte) 0) goto printf_sint::@1
  to:printf_sint::@2
printf_sint::@1: scope:[printf_sint]  from printf_sint
  [79] (signed word) printf_sint::value#0 ← - (signed word) printf_sint::value#3
  [80] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) '-'
  to:printf_sint::@2
printf_sint::@2: scope:[printf_sint]  from printf_sint printf_sint::@1
  [81] (signed word) printf_sint::value#5 ← phi( printf_sint::@1/(signed word) printf_sint::value#0 printf_sint/(signed word) printf_sint::value#3 )
  [82] (word) utoa::value#1 ← (word)(signed word) printf_sint::value#5
  [83] call utoa 
  to:printf_sint::@3
printf_sint::@3: scope:[printf_sint]  from printf_sint::@2
  [84] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [85] call printf_number_buffer 
  to:printf_sint::@return
printf_sint::@return: scope:[printf_sint]  from printf_sint::@3
  [86] return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_sint::@3
  [87] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [88] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [89] (byte) printf_char::ch#2 ← (byte) printf_number_buffer::buffer_sign#0
  [90] call printf_char 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [91] phi()
  [92] call printf_str 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [93] return 
  to:@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_sint::@2
  [94] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [95] (byte*) utoa::buffer#11 ← phi( utoa::@4/(byte*) utoa::buffer#14 utoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [95] (byte) utoa::started#2 ← phi( utoa::@4/(byte) utoa::started#4 utoa/(byte) 0 )
  [95] (word) utoa::value#2 ← phi( utoa::@4/(word) utoa::value#6 utoa/(word) utoa::value#1 )
  [95] (byte) utoa::digit#2 ← phi( utoa::@4/(byte) utoa::digit#1 utoa/(byte) 0 )
  [96] if((byte) utoa::digit#2<(byte) 5-(byte) 1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [97] (byte~) utoa::$11 ← (byte)(word) utoa::value#2
  [98] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [99] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  [100] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [101] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [102] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [103] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10)
  [104] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [105] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [106] (byte*) utoa::buffer#14 ← phi( utoa::@7/(byte*) utoa::buffer#11 utoa::@6/(byte*) utoa::buffer#4 )
  [106] (byte) utoa::started#4 ← phi( utoa::@7/(byte) utoa::started#2 utoa::@6/(byte) 1 )
  [106] (word) utoa::value#6 ← phi( utoa::@7/(word) utoa::value#2 utoa::@6/(word) utoa::value#0 )
  [107] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [108] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [109] (word) utoa_append::value#0 ← (word) utoa::value#2
  [110] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [111] call utoa_append 
  [112] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [113] (word) utoa::value#0 ← (word) utoa_append::return#0
  [114] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11
  to:utoa::@4

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [115] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [116] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [116] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [117] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [118] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [119] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [120] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [121] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1

(signed word()) atoi((to_nomodify byte*) atoi::str)
atoi: scope:[atoi]  from main::@1 main::@4
  [122] (to_nomodify byte*) atoi::str#2 ← phi( main::@1/(const byte*) main::str main::@4/(const byte*) main::str2 )
  [123] if(*((to_nomodify byte*) atoi::str#2)!=(byte) '-') goto atoi::@3
  to:atoi::@2
atoi::@2: scope:[atoi]  from atoi
  [124] phi()
  to:atoi::@3
atoi::@3: scope:[atoi]  from atoi atoi::@2 atoi::@4
  [125] (byte) atoi::negative#2 ← phi( atoi/(byte) 0 atoi::@2/(byte) 1 atoi::@4/(byte) atoi::negative#2 )
  [125] (signed word) atoi::res#2 ← phi( atoi/(signed word) 0 atoi::@2/(signed word) 0 atoi::@4/(signed word) atoi::res#1 )
  [125] (byte) atoi::i#4 ← phi( atoi/(byte) 0 atoi::@2/(byte) 1 atoi::@4/(byte) atoi::i#2 )
  [126] if((byte) 0!=*((to_nomodify byte*) atoi::str#2 + (byte) atoi::i#4)) goto atoi::@4
  to:atoi::@5
atoi::@5: scope:[atoi]  from atoi::@3
  [127] if((byte) 0!=(byte) atoi::negative#2) goto atoi::@1
  to:atoi::@return
atoi::@1: scope:[atoi]  from atoi::@5
  [128] (signed word) atoi::return#0 ← - (signed word) atoi::res#2
  to:atoi::@return
atoi::@return: scope:[atoi]  from atoi::@1 atoi::@5
  [129] (signed word) atoi::return#2 ← phi( atoi::@1/(signed word) atoi::return#0 atoi::@5/(signed word) atoi::res#2 )
  [130] return 
  to:@return
atoi::@4: scope:[atoi]  from atoi::@3
  [131] (signed word~) atoi::$8 ← (signed word) atoi::res#2 << (byte) 2
  [132] (signed word~) atoi::$9 ← (signed word~) atoi::$8 + (signed word) atoi::res#2
  [133] (signed word~) atoi::$3 ← (signed word~) atoi::$9 << (byte) 1
  [134] (signed word~) atoi::$4 ← (signed word~) atoi::$3 + *((to_nomodify byte*) atoi::str#2 + (byte) atoi::i#4)
  [135] (signed word) atoi::res#1 ← (signed word~) atoi::$4 - (byte) '0'
  [136] (byte) atoi::i#2 ← ++ (byte) atoi::i#4
  to:atoi::@3

(void()) printf_cls()
printf_cls: scope:[printf_cls]  from main
  [137] phi()
  [138] call memset 
  to:printf_cls::@1
printf_cls::@1: scope:[printf_cls]  from printf_cls
  [139] (byte*) printf_cursor_ptr ← (byte*) 1024
  [140] (byte) printf_cursor_x ← (byte) 0
  [141] (byte) printf_cursor_y ← (byte) 0
  to:printf_cls::@return
printf_cls::@return: scope:[printf_cls]  from printf_cls::@1
  [142] return 
  to:@return
