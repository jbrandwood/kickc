Inlined call call __init 

CONTROL FLOW GRAPH SSA

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@4
  (byte*) print_char_cursor#43 ← phi( main::@4/(byte*) print_char_cursor#16 )
  (byte*) print_line_cursor#14 ← phi( main::@4/(byte*) print_line_cursor#15 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#22 ← phi( print_ln/(byte*) print_char_cursor#43 print_ln::@1/(byte*) print_char_cursor#22 )
  (byte*) print_line_cursor#7 ← phi( print_ln/(byte*) print_line_cursor#14 print_ln::@1/(byte*) print_line_cursor#0 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#7 + (number) $28
  (byte*) print_line_cursor#0 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#0 < (byte*) print_char_cursor#22
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#8 ← phi( print_ln::@1/(byte*) print_line_cursor#0 )
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#8
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#23 ← phi( print_ln::@2/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#9 ← phi( print_ln::@2/(byte*) print_line_cursor#8 )
  (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9
  (byte*) print_char_cursor#1 ← (byte*) print_char_cursor#23
  return 
  to:@return

(void()) print_sint((signed word) print_sint::w)
print_sint: scope:[print_sint]  from main::@1
  (byte*) print_char_cursor#51 ← phi( main::@1/(byte*) print_char_cursor#49 )
  (signed word) print_sint::w#2 ← phi( main::@1/(signed word) print_sint::w#1 )
  (bool~) print_sint::$0 ← (signed word) print_sint::w#2 < (number) 0
  if((bool~) print_sint::$0) goto print_sint::@1
  to:print_sint::@3
print_sint::@1: scope:[print_sint]  from print_sint
  (signed word) print_sint::w#5 ← phi( print_sint/(signed word) print_sint::w#2 )
  (byte*) print_char_cursor#44 ← phi( print_sint/(byte*) print_char_cursor#51 )
  (byte) print_char::ch#0 ← (byte) '-'
  call print_char 
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  (signed word) print_sint::w#3 ← phi( print_sint::@1/(signed word) print_sint::w#5 )
  (byte*) print_char_cursor#24 ← phi( print_sint::@1/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#24
  (signed word~) print_sint::$4 ← - (signed word) print_sint::w#3
  (signed word) print_sint::w#0 ← (signed word~) print_sint::$4
  to:print_sint::@2
print_sint::@3: scope:[print_sint]  from print_sint
  (signed word) print_sint::w#7 ← phi( print_sint/(signed word) print_sint::w#2 )
  (byte*) print_char_cursor#45 ← phi( print_sint/(byte*) print_char_cursor#51 )
  (byte) print_char::ch#1 ← (byte) ' '
  call print_char 
  to:print_sint::@5
print_sint::@5: scope:[print_sint]  from print_sint::@3
  (signed word) print_sint::w#6 ← phi( print_sint::@3/(signed word) print_sint::w#7 )
  (byte*) print_char_cursor#25 ← phi( print_sint::@3/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#25
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@4 print_sint::@5
  (byte*) print_char_cursor#46 ← phi( print_sint::@4/(byte*) print_char_cursor#2 print_sint::@5/(byte*) print_char_cursor#3 )
  (signed word) print_sint::w#4 ← phi( print_sint::@4/(signed word) print_sint::w#0 print_sint::@5/(signed word) print_sint::w#6 )
  (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4
  call print_uint 
  to:print_sint::@6
print_sint::@6: scope:[print_sint]  from print_sint::@2
  (byte*) print_char_cursor#26 ← phi( print_sint::@2/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#26
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@6
  (byte*) print_char_cursor#27 ← phi( print_sint::@6/(byte*) print_char_cursor#4 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#27
  return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from main::@3 print_sint::@2
  (byte*) print_char_cursor#47 ← phi( main::@3/(byte*) print_char_cursor#15 print_sint::@2/(byte*) print_char_cursor#46 )
  (word) print_uint::w#2 ← phi( main::@3/(word) print_uint::w#1 print_sint::@2/(word) print_uint::w#0 )
  (byte~) print_uint::$0 ← > (word) print_uint::w#2
  (byte) print_uchar::b#0 ← (byte~) print_uint::$0
  call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  (word) print_uint::w#3 ← phi( print_uint/(word) print_uint::w#2 )
  (byte*) print_char_cursor#28 ← phi( print_uint/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#28
  (byte~) print_uint::$2 ← < (word) print_uint::w#3
  (byte) print_uchar::b#1 ← (byte~) print_uint::$2
  call print_uchar 
  to:print_uint::@2
print_uint::@2: scope:[print_uint]  from print_uint::@1
  (byte*) print_char_cursor#29 ← phi( print_uint::@1/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#29
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@2
  (byte*) print_char_cursor#30 ← phi( print_uint::@2/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#30
  return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  (byte*) print_char_cursor#48 ← phi( print_uint/(byte*) print_char_cursor#47 print_uint::@1/(byte*) print_char_cursor#6 )
  (byte) print_uchar::b#2 ← phi( print_uint/(byte) print_uchar::b#0 print_uint::@1/(byte) print_uchar::b#1 )
  (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (number) 4
  (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  (byte) print_uchar::b#3 ← phi( print_uchar/(byte) print_uchar::b#2 )
  (byte*) print_char_cursor#31 ← phi( print_uchar/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#31
  (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (number) $f
  (byte) print_char::ch#3 ← *((const to_nomodify byte*) print_hextab + (number~) print_uchar::$2)
  call print_char 
  to:print_uchar::@2
print_uchar::@2: scope:[print_uchar]  from print_uchar::@1
  (byte*) print_char_cursor#32 ← phi( print_uchar::@1/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#32
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@2
  (byte*) print_char_cursor#33 ← phi( print_uchar::@2/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#33
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from main::@2 print_sint::@1 print_sint::@3 print_uchar print_uchar::@1
  (byte*) print_char_cursor#34 ← phi( main::@2/(byte*) print_char_cursor#14 print_sint::@1/(byte*) print_char_cursor#44 print_sint::@3/(byte*) print_char_cursor#45 print_uchar/(byte*) print_char_cursor#48 print_uchar::@1/(byte*) print_char_cursor#9 )
  (byte) print_char::ch#5 ← phi( main::@2/(byte) print_char::ch#4 print_sint::@1/(byte) print_char::ch#0 print_sint::@3/(byte) print_char::ch#1 print_uchar/(byte) print_char::ch#2 print_uchar::@1/(byte) print_char::ch#3 )
  *((byte*) print_char_cursor#34) ← (byte) print_char::ch#5
  (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#34
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#35 ← phi( print_char/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#35
  return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  (byte*) print_line_cursor#20 ← phi( __start::@1/(byte*) print_line_cursor#16 )
  (byte*) print_char_cursor#52 ← phi( __start::@1/(byte*) print_char_cursor#50 )
  (signed word) main::a#0 ← (signed word) -$3ff
  (word) main::b#0 ← (word) $1024
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::i#6 ← phi( main/(byte) main::i#0 main::@5/(byte) main::i#1 )
  (byte*) print_line_cursor#19 ← phi( main/(byte*) print_line_cursor#20 main::@5/(byte*) print_line_cursor#2 )
  (byte*) print_char_cursor#49 ← phi( main/(byte*) print_char_cursor#52 main::@5/(byte*) print_char_cursor#17 )
  (word) main::b#2 ← phi( main/(word) main::b#0 main::@5/(word) main::b#4 )
  (signed word) main::a#2 ← phi( main/(signed word) main::a#0 main::@5/(signed word) main::a#3 )
  (signed word) main::a#1 ← (signed word) main::a#2 + (number) -7
  (word) main::b#1 ← (word) main::b#2 + (number) $141
  (signed word) print_sint::w#1 ← (signed word) main::a#1
  call print_sint 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (signed word) main::a#6 ← phi( main::@1/(signed word) main::a#1 )
  (byte) main::i#5 ← phi( main::@1/(byte) main::i#6 )
  (byte*) print_line_cursor#18 ← phi( main::@1/(byte*) print_line_cursor#19 )
  (word) main::b#5 ← phi( main::@1/(word) main::b#1 )
  (byte*) print_char_cursor#36 ← phi( main::@1/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#36
  (byte) print_char::ch#4 ← (byte) ' '
  call print_char 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (signed word) main::a#5 ← phi( main::@2/(signed word) main::a#6 )
  (byte) main::i#4 ← phi( main::@2/(byte) main::i#5 )
  (byte*) print_line_cursor#17 ← phi( main::@2/(byte*) print_line_cursor#18 )
  (word) main::b#3 ← phi( main::@2/(word) main::b#5 )
  (byte*) print_char_cursor#37 ← phi( main::@2/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#37
  (word) print_uint::w#1 ← (word) main::b#3
  call print_uint 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (word) main::b#6 ← phi( main::@3/(word) main::b#3 )
  (signed word) main::a#4 ← phi( main::@3/(signed word) main::a#5 )
  (byte) main::i#3 ← phi( main::@3/(byte) main::i#4 )
  (byte*) print_line_cursor#15 ← phi( main::@3/(byte*) print_line_cursor#17 )
  (byte*) print_char_cursor#38 ← phi( main::@3/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#38
  call print_ln 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (word) main::b#4 ← phi( main::@4/(word) main::b#6 )
  (signed word) main::a#3 ← phi( main::@4/(signed word) main::a#4 )
  (byte) main::i#2 ← phi( main::@4/(byte) main::i#3 )
  (byte*) print_char_cursor#39 ← phi( main::@4/(byte*) print_char_cursor#1 )
  (byte*) print_line_cursor#10 ← phi( main::@4/(byte*) print_line_cursor#1 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#10
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#39
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,5)
  (bool~) main::$4 ← (byte) main::i#1 != rangelast(0,5)
  if((bool~) main::$4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  (byte*) print_line_cursor#11 ← phi( main::@5/(byte*) print_line_cursor#2 )
  (byte*) print_char_cursor#40 ← phi( main::@5/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#40
  (byte*) print_line_cursor#3 ← (byte*) print_line_cursor#11
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  (byte*) print_screen#0 ← (byte*)(number) $400
  (byte*) print_line_cursor#4 ← (byte*) print_screen#0
  (byte*) print_char_cursor#19 ← (byte*) print_line_cursor#4
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  (byte*) print_screen#4 ← phi( __start::__init1/(byte*) print_screen#0 )
  (byte*) print_line_cursor#16 ← phi( __start::__init1/(byte*) print_line_cursor#4 )
  (byte*) print_char_cursor#50 ← phi( __start::__init1/(byte*) print_char_cursor#19 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  (byte*) print_screen#3 ← phi( __start::@1/(byte*) print_screen#4 )
  (byte*) print_line_cursor#12 ← phi( __start::@1/(byte*) print_line_cursor#3 )
  (byte*) print_char_cursor#41 ← phi( __start::@1/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#41
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#12
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  (byte*) print_char_cursor#42 ← phi( __start::@2/(byte*) print_char_cursor#20 )
  (byte*) print_line_cursor#13 ← phi( __start::@2/(byte*) print_line_cursor#5 )
  (byte*) print_screen#2 ← phi( __start::@2/(byte*) print_screen#3 )
  (byte*) print_screen#1 ← (byte*) print_screen#2
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#13
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#42
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(void()) main()
(bool~) main::$4
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(signed word) main::a
(signed word) main::a#0
(signed word) main::a#1
(signed word) main::a#2
(signed word) main::a#3
(signed word) main::a#4
(signed word) main::a#5
(signed word) main::a#6
(word) main::b
(word) main::b#0
(word) main::b#1
(word) main::b#2
(word) main::b#3
(word) main::b#4
(word) main::b#5
(word) main::b#6
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte) print_char::ch#5
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#3
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(void()) print_sint((signed word) print_sint::w)
(bool~) print_sint::$0
(signed word~) print_sint::$4
(label) print_sint::@1
(label) print_sint::@2
(label) print_sint::@3
(label) print_sint::@4
(label) print_sint::@5
(label) print_sint::@6
(label) print_sint::@return
(signed word) print_sint::w
(signed word) print_sint::w#0
(signed word) print_sint::w#1
(signed word) print_sint::w#2
(signed word) print_sint::w#3
(signed word) print_sint::w#4
(signed word) print_sint::w#5
(signed word) print_sint::w#6
(signed word) print_sint::w#7
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0
(number~) print_uchar::$2
(label) print_uchar::@1
(label) print_uchar::@2
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0
(byte) print_uchar::b#1
(byte) print_uchar::b#2
(byte) print_uchar::b#3
(void()) print_uint((word) print_uint::w)
(byte~) print_uint::$0
(byte~) print_uint::$2
(label) print_uint::@1
(label) print_uint::@2
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0
(word) print_uint::w#1
(word) print_uint::w#2
(word) print_uint::w#3

Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#7 + (number) $28
Adding number conversion cast (snumber) 0 in (bool~) print_sint::$0 ← (signed word) print_sint::w#2 < (number) 0
Adding number conversion cast (unumber) 4 in (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (number) $f
Adding number conversion cast (unumber) print_uchar::$2 in (number~) print_uchar::$2 ← (byte) print_uchar::b#3 & (unumber)(number) $f
Adding number conversion cast (snumber) -7 in (signed word) main::a#1 ← (signed word) main::a#2 + (number) -7
Adding number conversion cast (unumber) $141 in (word) main::b#1 ← (word) main::b#2 + (number) $141
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast -7
Simplifying constant integer cast $141
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized signed number type (signed byte) -7
Finalized unsigned number type (word) $141
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_uchar::$2 ← (byte) print_uchar::b#3 & (byte) $f
Alias print_line_cursor#0 = print_ln::$0 print_line_cursor#8 print_char_cursor#0 print_line_cursor#9 print_char_cursor#23 print_line_cursor#1 print_char_cursor#1 
Alias print_char_cursor#44 = print_char_cursor#51 print_char_cursor#45 
Alias print_sint::w#2 = print_sint::w#5 print_sint::w#3 print_sint::w#7 print_sint::w#6 
Alias print_char_cursor#2 = print_char_cursor#24 
Alias print_sint::w#0 = print_sint::$4 
Alias print_char_cursor#25 = print_char_cursor#3 
Alias print_char_cursor#26 = print_char_cursor#4 print_char_cursor#27 print_char_cursor#5 
Alias print_uchar::b#0 = print_uint::$0 
Alias print_uint::w#2 = print_uint::w#3 
Alias print_char_cursor#28 = print_char_cursor#6 
Alias print_uchar::b#1 = print_uint::$2 
Alias print_char_cursor#29 = print_char_cursor#7 print_char_cursor#30 print_char_cursor#8 
Alias print_uchar::b#2 = print_uchar::b#3 
Alias print_char_cursor#31 = print_char_cursor#9 
Alias print_char_cursor#10 = print_char_cursor#32 print_char_cursor#33 print_char_cursor#11 
Alias print_char_cursor#12 = print_char_cursor#35 print_char_cursor#13 
Alias main::b#1 = main::b#5 main::b#3 main::b#6 main::b#4 
Alias print_line_cursor#15 = print_line_cursor#18 print_line_cursor#19 print_line_cursor#17 
Alias main::i#2 = main::i#5 main::i#6 main::i#4 main::i#3 
Alias main::a#1 = main::a#6 main::a#5 main::a#4 main::a#3 
Alias print_char_cursor#14 = print_char_cursor#36 
Alias print_char_cursor#15 = print_char_cursor#37 
Alias print_char_cursor#16 = print_char_cursor#38 
Alias print_line_cursor#10 = print_line_cursor#2 print_line_cursor#11 print_line_cursor#3 
Alias print_char_cursor#17 = print_char_cursor#39 print_char_cursor#40 print_char_cursor#18 
Alias print_screen#0 = print_line_cursor#4 print_char_cursor#19 print_char_cursor#50 print_line_cursor#16 print_screen#4 print_screen#3 print_screen#2 print_screen#1 
Alias print_char_cursor#20 = print_char_cursor#41 print_char_cursor#42 print_char_cursor#21 
Alias print_line_cursor#12 = print_line_cursor#5 print_line_cursor#13 print_line_cursor#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) print_line_cursor#14 (byte*) print_line_cursor#15
Identical Phi Values (byte*) print_char_cursor#43 (byte*) print_char_cursor#16
Identical Phi Values (byte*) print_char_cursor#22 (byte*) print_char_cursor#43
Identical Phi Values (signed word) print_sint::w#2 (signed word) print_sint::w#1
Identical Phi Values (byte*) print_char_cursor#44 (byte*) print_char_cursor#49
Identical Phi Values (byte*) print_char_cursor#2 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#29
Identical Phi Values (byte*) print_char_cursor#28 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#29 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#31 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#52 (byte*) print_screen#0
Identical Phi Values (byte*) print_line_cursor#20 (byte*) print_screen#0
Identical Phi Values (byte*) print_char_cursor#14 (byte*) print_char_cursor#26
Identical Phi Values (byte*) print_char_cursor#15 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#29
Identical Phi Values (byte*) print_line_cursor#10 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#20 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_line_cursor#10
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) print_char_cursor#46 (byte*) print_char_cursor#12
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) print_char_cursor#47 (byte*) print_char_cursor#12
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) print_char_cursor#48 (byte*) print_char_cursor#12
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) print_ln::$1 [4] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#12) goto print_ln::@1
Simple Condition (bool~) print_sint::$0 [8] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1
Simple Condition (bool~) main::$4 [63] if((byte) main::i#1!=rangelast(0,5)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) print_char::ch#0 = '-'
Constant (const byte) print_char::ch#1 = ' '
Constant (const signed word) main::a#0 = -$3ff
Constant (const word) main::b#0 = $1024
Constant (const byte) main::i#0 = 0
Constant (const byte) print_char::ch#4 = ' '
Constant (const byte*) print_screen#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [61] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [63] if(main::i#1!=rangelast(0,5)) goto main::@1 to (number) 6
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 6 in [40] if((byte) main::i#1!=(number) 6) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 6
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 6
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte) print_char::ch#4
Inlining constant with var siblings (const signed word) main::a#0
Inlining constant with var siblings (const word) main::b#0
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::a#0 = (signed word) -$3ff
Constant inlined print_char::ch#4 = (byte) ' '
Constant inlined main::b#0 = (word) $1024
Constant inlined print_char::ch#1 = (byte) ' '
Constant inlined print_char::ch#0 = (byte) '-'
Constant inlined main::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting main::@6(between main::@5 and main::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_uint::@2
Adding NOP phi() at start of print_uchar::@2
Adding NOP phi() at start of print_sint::@6
CALL GRAPH
Calls in [main] to print_sint:5 print_char:7 print_uint:10 print_ln:12 
Calls in [print_uint] to print_uchar:31 print_uchar:34 
Calls in [print_uchar] to print_char:42 print_char:47 
Calls in [print_sint] to print_char:56 print_uint:61 print_char:65 

Created 11 initial phi equivalence classes
Coalesced [6] print_char_cursor#53 ← print_char_cursor#12
Coalesced [9] print_uint::w#4 ← print_uint::w#1
Coalesced [16] main::a#7 ← main::a#1
Coalesced [17] main::b#7 ← main::b#1
Not coalescing [18] print_char_cursor#58 ← print_line_cursor#0
Coalesced [19] print_line_cursor#23 ← print_line_cursor#0
Coalesced [20] main::i#7 ← main::i#1
Coalesced [21] print_line_cursor#21 ← print_line_cursor#15
Coalesced (already) [27] print_line_cursor#22 ← print_line_cursor#0
Coalesced [30] print_uchar::b#4 ← print_uchar::b#0
Coalesced [33] print_uchar::b#5 ← print_uchar::b#1
Coalesced [40] print_char::ch#6 ← print_char::ch#2
Coalesced (already) [41] print_char_cursor#56 ← print_char_cursor#12
Coalesced [45] print_char::ch#7 ← print_char::ch#3
Coalesced (already) [46] print_char_cursor#57 ← print_char_cursor#12
Coalesced [55] print_char_cursor#55 ← print_char_cursor#49
Coalesced [57] print_sint::w#9 ← print_sint::w#1
Coalesced [60] print_uint::w#5 ← print_uint::w#0
Coalesced (already) [64] print_char_cursor#54 ← print_char_cursor#49
Coalesced [67] print_sint::w#8 ← print_sint::w#0
Coalesced down to 9 phi equivalence classes
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_uint::@2
Culled Empty Block (label) print_uchar::@2
Culled Empty Block (label) print_sint::@5
Culled Empty Block (label) print_sint::@6
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of print_sint::@3
Adding NOP phi() at start of print_sint::@1

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@6
  [1] (byte) main::i#2 ← phi( main/(byte) 0 main::@6/(byte) main::i#1 )
  [1] (byte*) print_line_cursor#15 ← phi( main/(const byte*) print_screen#0 main::@6/(byte*) print_line_cursor#0 )
  [1] (byte*) print_char_cursor#49 ← phi( main/(const byte*) print_screen#0 main::@6/(byte*) print_char_cursor#58 )
  [1] (word) main::b#2 ← phi( main/(word) $1024 main::@6/(word) main::b#1 )
  [1] (signed word) main::a#2 ← phi( main/(signed word) -$3ff main::@6/(signed word) main::a#1 )
  [2] (signed word) main::a#1 ← (signed word) main::a#2 + (signed byte) -7
  [3] (word) main::b#1 ← (word) main::b#2 + (word) $141
  [4] (signed word) print_sint::w#1 ← (signed word) main::a#1
  [5] call print_sint 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] phi()
  [7] call print_char 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [8] (word) print_uint::w#1 ← (word) main::b#1
  [9] call print_uint 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [10] phi()
  [11] call print_ln 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [12] (byte) main::i#1 ← ++ (byte) main::i#2
  [13] if((byte) main::i#1!=(byte) 6) goto main::@6
  to:main::@return
main::@return: scope:[main]  from main::@5
  [14] return 
  to:@return
main::@6: scope:[main]  from main::@5
  [15] (byte*) print_char_cursor#58 ← (byte*) print_line_cursor#0
  to:main::@1

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@4
  [16] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [17] (byte*) print_line_cursor#7 ← phi( print_ln/(byte*) print_line_cursor#15 print_ln::@1/(byte*) print_line_cursor#0 )
  [18] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#7 + (byte) $28
  [19] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#12) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [20] return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from main::@3 print_sint::@2
  [21] (word) print_uint::w#2 ← phi( main::@3/(word) print_uint::w#1 print_sint::@2/(word) print_uint::w#0 )
  [22] (byte) print_uchar::b#0 ← > (word) print_uint::w#2
  [23] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [24] (byte) print_uchar::b#1 ← < (word) print_uint::w#2
  [25] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [26] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  [27] (byte) print_uchar::b#2 ← phi( print_uint/(byte) print_uchar::b#0 print_uint::@1/(byte) print_uchar::b#1 )
  [28] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4
  [29] (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [30] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [31] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f
  [32] (byte) print_char::ch#3 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [33] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [34] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from main::@2 print_sint::@1 print_sint::@3 print_uchar print_uchar::@1
  [35] (byte*) print_char_cursor#34 ← phi( main::@2/(byte*) print_char_cursor#12 print_sint::@1/(byte*) print_char_cursor#49 print_sint::@3/(byte*) print_char_cursor#49 print_uchar/(byte*) print_char_cursor#12 print_uchar::@1/(byte*) print_char_cursor#12 )
  [35] (byte) print_char::ch#5 ← phi( main::@2/(byte) ' ' print_sint::@1/(byte) '-' print_sint::@3/(byte) ' ' print_uchar/(byte) print_char::ch#2 print_uchar::@1/(byte) print_char::ch#3 )
  [36] *((byte*) print_char_cursor#34) ← (byte) print_char::ch#5
  [37] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#34
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [38] return 
  to:@return

(void()) print_sint((signed word) print_sint::w)
print_sint: scope:[print_sint]  from main::@1
  [39] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1
  to:print_sint::@3
print_sint::@3: scope:[print_sint]  from print_sint
  [40] phi()
  [41] call print_char 
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@3 print_sint::@4
  [42] (signed word) print_sint::w#4 ← phi( print_sint::@4/(signed word) print_sint::w#0 print_sint::@3/(signed word) print_sint::w#1 )
  [43] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4
  [44] call print_uint 
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@2
  [45] return 
  to:@return
print_sint::@1: scope:[print_sint]  from print_sint
  [46] phi()
  [47] call print_char 
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  [48] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1
  to:print_sint::@2


VARIABLE REGISTER WEIGHTS
(void()) main()
(signed word) main::a
(signed word) main::a#1 2.5384615384615383
(signed word) main::a#2 22.0
(word) main::b
(word) main::b#1 2.75
(word) main::b#2 11.0
(byte) main::i
(byte) main::i#1 11.0
(byte) main::i#2 2.0
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#2 20002.0
(byte) print_char::ch#3 20002.0
(byte) print_char::ch#5 120003.0
(byte*) print_char_cursor
(byte*) print_char_cursor#12 3939.848484848485
(byte*) print_char_cursor#34 110108.5
(byte*) print_char_cursor#49 30.42857142857143
(byte*) print_char_cursor#58 22.0
(byte*) print_line_cursor
(byte*) print_line_cursor#0 4289.285714285714
(byte*) print_line_cursor#15 10.181818181818182
(byte*) print_line_cursor#7 20103.0
(void()) print_ln()
(byte*) print_screen
(void()) print_sint((signed word) print_sint::w)
(signed word) print_sint::w
(signed word) print_sint::w#0 202.0
(signed word) print_sint::w#1 52.33333333333333
(signed word) print_sint::w#4 202.0
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 20002.0
(byte~) print_uchar::$2 20002.0
(byte) print_uchar::b
(byte) print_uchar::b#0 2002.0
(byte) print_uchar::b#1 2002.0
(byte) print_uchar::b#2 5501.0
(void()) print_uint((word) print_uint::w)
(word) print_uint::w
(word) print_uint::w#0 202.0
(word) print_uint::w#1 22.0
(word) print_uint::w#2 704.6666666666667

Initial phi equivalence classes
[ main::a#2 main::a#1 ]
[ main::b#2 main::b#1 ]
[ main::i#2 main::i#1 ]
[ print_line_cursor#7 print_line_cursor#15 print_line_cursor#0 ]
[ print_uint::w#2 print_uint::w#1 print_uint::w#0 ]
[ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
[ print_char::ch#5 print_char::ch#2 print_char::ch#3 ]
[ print_char_cursor#34 print_char_cursor#12 print_char_cursor#49 print_char_cursor#58 ]
[ print_sint::w#4 print_sint::w#0 print_sint::w#1 ]
Added variable print_uchar::$0 to live range equivalence class [ print_uchar::$0 ]
Added variable print_uchar::$2 to live range equivalence class [ print_uchar::$2 ]
Complete equivalence classes
[ main::a#2 main::a#1 ]
[ main::b#2 main::b#1 ]
[ main::i#2 main::i#1 ]
[ print_line_cursor#7 print_line_cursor#15 print_line_cursor#0 ]
[ print_uint::w#2 print_uint::w#1 print_uint::w#0 ]
[ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
[ print_char::ch#5 print_char::ch#2 print_char::ch#3 ]
[ print_char_cursor#34 print_char_cursor#12 print_char_cursor#49 print_char_cursor#58 ]
[ print_sint::w#4 print_sint::w#0 print_sint::w#1 ]
[ print_uchar::$0 ]
[ print_uchar::$2 ]
Allocated zp[2]:2 [ main::a#2 main::a#1 ]
Allocated zp[2]:4 [ main::b#2 main::b#1 ]
Allocated zp[1]:6 [ main::i#2 main::i#1 ]
Allocated zp[2]:7 [ print_line_cursor#7 print_line_cursor#15 print_line_cursor#0 ]
Allocated zp[2]:9 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 ]
Allocated zp[1]:11 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Allocated zp[1]:12 [ print_char::ch#5 print_char::ch#2 print_char::ch#3 ]
Allocated zp[2]:13 [ print_char_cursor#34 print_char_cursor#12 print_char_cursor#49 print_char_cursor#58 ]
Allocated zp[2]:15 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ]
Allocated zp[1]:17 [ print_uchar::$0 ]
Allocated zp[1]:18 [ print_uchar::$2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests the special "signed" / "unsigned" without a simple type name
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_screen = $400
  .label print_line_cursor = 7
  .label print_char_cursor = $d
  // main
main: {
    .label a = 2
    .label b = 4
    .label i = 6
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [1] phi (byte*) print_line_cursor#15 = (const byte*) print_screen#0 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [1] phi (byte*) print_char_cursor#49 = (const byte*) print_screen#0 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [1] phi (word) main::b#2 = (word) $1024 [phi:main->main::@1#3] -- vwuz1=vwuc1 
    lda #<$1024
    sta.z b
    lda #>$1024
    sta.z b+1
    // [1] phi (signed word) main::a#2 = (signed word) -$3ff [phi:main->main::@1#4] -- vwsz1=vwsc1 
    lda #<-$3ff
    sta.z a
    lda #>-$3ff
    sta.z a+1
    jmp __b1
    // main::@1
  __b1:
    // [2] (signed word) main::a#1 ← (signed word) main::a#2 + (signed byte) -7 -- vwsz1=vwsz1_plus_vbsc1 
    lda.z a
    clc
    adc #<-7
    sta.z a
    lda.z a+1
    adc #>-7
    sta.z a+1
    // [3] (word) main::b#1 ← (word) main::b#2 + (word) $141 -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda.z b
    adc #<$141
    sta.z b
    lda.z b+1
    adc #>$141
    sta.z b+1
    // [4] (signed word) print_sint::w#1 ← (signed word) main::a#1 -- vwsz1=vwsz2 
    lda.z a
    sta.z print_sint.w
    lda.z a+1
    sta.z print_sint.w+1
    // [5] call print_sint 
    jsr print_sint
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [7] call print_char 
    // [35] phi from main::@2 to print_char [phi:main::@2->print_char]
  print_char_from___b2:
    // [35] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#12 [phi:main::@2->print_char#0] -- register_copy 
    // [35] phi (byte) print_char::ch#5 = (byte) ' ' [phi:main::@2->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    jmp __b3
    // main::@3
  __b3:
    // [8] (word) print_uint::w#1 ← (word) main::b#1 -- vwuz1=vwuz2 
    lda.z b
    sta.z print_uint.w
    lda.z b+1
    sta.z print_uint.w+1
    // [9] call print_uint 
    // [21] phi from main::@3 to print_uint [phi:main::@3->print_uint]
  print_uint_from___b3:
    // [21] phi (word) print_uint::w#2 = (word) print_uint::w#1 [phi:main::@3->print_uint#0] -- register_copy 
    jsr print_uint
    // [10] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [11] call print_ln 
    // [16] phi from main::@4 to print_ln [phi:main::@4->print_ln]
  print_ln_from___b4:
    jsr print_ln
    jmp __b5
    // main::@5
  __b5:
    // [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [13] if((byte) main::i#1!=(byte) 6) goto main::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b6
    jmp __breturn
    // main::@return
  __breturn:
    // [14] return 
    rts
    // main::@6
  __b6:
    // [15] (byte*) print_char_cursor#58 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [1] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  __b1_from___b6:
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
    // [1] phi (byte*) print_line_cursor#15 = (byte*) print_line_cursor#0 [phi:main::@6->main::@1#1] -- register_copy 
    // [1] phi (byte*) print_char_cursor#49 = (byte*) print_char_cursor#58 [phi:main::@6->main::@1#2] -- register_copy 
    // [1] phi (word) main::b#2 = (word) main::b#1 [phi:main::@6->main::@1#3] -- register_copy 
    // [1] phi (signed word) main::a#2 = (signed word) main::a#1 [phi:main::@6->main::@1#4] -- register_copy 
    jmp __b1
}
  // print_ln
// Print a newline
print_ln: {
    // [17] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [17] phi (byte*) print_line_cursor#7 = (byte*) print_line_cursor#15 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [18] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#7 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [19] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#12) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [20] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp(9) w)
print_uint: {
    .label w = 9
    // [22] (byte) print_uchar::b#0 ← > (word) print_uint::w#2 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_uchar.b
    // [23] call print_uchar 
    // [27] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
  print_uchar_from_print_uint:
    // [27] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:print_uint->print_uchar#0] -- register_copy 
    jsr print_uchar
    jmp __b1
    // print_uint::@1
  __b1:
    // [24] (byte) print_uchar::b#1 ← < (word) print_uint::w#2 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_uchar.b
    // [25] call print_uchar 
    // [27] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
  print_uchar_from___b1:
    // [27] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [26] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte zp($b) b)
print_uchar: {
    .label __0 = $11
    .label __2 = $12
    .label b = $b
    // [28] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [29] (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda print_hextab,y
    sta.z print_char.ch
    // [30] call print_char 
  // Table of hexadecimal digits
    // [35] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [35] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#12 [phi:print_uchar->print_char#0] -- register_copy 
    // [35] phi (byte) print_char::ch#5 = (byte) print_char::ch#2 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [31] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z __2
    // [32] (byte) print_char::ch#3 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __2
    lda print_hextab,y
    sta.z print_char.ch
    // [33] call print_char 
    // [35] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [35] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#12 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [35] phi (byte) print_char::ch#5 = (byte) print_char::ch#3 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [34] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte zp($c) ch)
print_char: {
    .label ch = $c
    // [36] *((byte*) print_char_cursor#34) ← (byte) print_char::ch#5 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [37] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#34 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [38] return 
    rts
}
  // print_sint
// Print a signed int as HEX
// print_sint(signed word zp($f) w)
print_sint: {
    .label w = $f
    // [39] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sint
    // [40] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
  __b3_from_print_sint:
    jmp __b3
    // print_sint::@3
  __b3:
    // [41] call print_char 
    // [35] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
  print_char_from___b3:
    // [35] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#49 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [35] phi (byte) print_char::ch#5 = (byte) ' ' [phi:print_sint::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    // [42] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [42] phi (signed word) print_sint::w#4 = (signed word) print_sint::w#1 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    jmp __b2
    // print_sint::@2
  __b2:
    // [43] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4 -- vwuz1=vwuz2 
    lda.z w
    sta.z print_uint.w
    lda.z w+1
    sta.z print_uint.w+1
    // [44] call print_uint 
    // [21] phi from print_sint::@2 to print_uint [phi:print_sint::@2->print_uint]
  print_uint_from___b2:
    // [21] phi (word) print_uint::w#2 = (word) print_uint::w#0 [phi:print_sint::@2->print_uint#0] -- register_copy 
    jsr print_uint
    jmp __breturn
    // print_sint::@return
  __breturn:
    // [45] return 
    rts
    // [46] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
  __b1_from_print_sint:
    jmp __b1
    // print_sint::@1
  __b1:
    // [47] call print_char 
    // [35] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
  print_char_from___b1:
    // [35] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#49 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [35] phi (byte) print_char::ch#5 = (byte) '-' [phi:print_sint::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta.z print_char.ch
    jsr print_char
    jmp __b4
    // print_sint::@4
  __b4:
    // [48] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // File Data
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] (signed word) main::a#1 ← (signed word) main::a#2 + (signed byte) -7 [ main::b#2 print_char_cursor#49 print_line_cursor#15 main::i#2 main::a#1 ] (  [ main::b#2 print_char_cursor#49 print_line_cursor#15 main::i#2 main::a#1 ] { { print_sint::w#1 = main::a#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ main::i#2 main::i#1 ]
Statement [3] (word) main::b#1 ← (word) main::b#2 + (word) $141 [ print_char_cursor#49 print_line_cursor#15 main::i#2 main::a#1 main::b#1 ] (  [ print_char_cursor#49 print_line_cursor#15 main::i#2 main::a#1 main::b#1 ] { { print_sint::w#1 = main::a#1 } }  ) always clobbers reg byte a 
Statement [4] (signed word) print_sint::w#1 ← (signed word) main::a#1 [ print_char_cursor#49 print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_sint::w#1 ] (  [ print_char_cursor#49 print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_sint::w#1 ] { { print_sint::w#1 = main::a#1 } }  ) always clobbers reg byte a 
Statement [8] (word) print_uint::w#1 ← (word) main::b#1 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#1 print_char_cursor#12 ] (  [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#1 print_char_cursor#12 ] { { print_uint::w#1 = print_uint::w#2 main::b#1 } }  ) always clobbers reg byte a 
Statement [15] (byte*) print_char_cursor#58 ← (byte*) print_line_cursor#0 [ main::a#1 main::b#1 print_char_cursor#58 print_line_cursor#0 main::i#1 ] (  [ main::a#1 main::b#1 print_char_cursor#58 print_line_cursor#0 main::i#1 ] { }  ) always clobbers reg byte a 
Statement [18] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#7 + (byte) $28 [ print_line_cursor#0 print_char_cursor#12 ] ( print_ln:11 [ main::i#2 main::a#1 main::b#1 print_line_cursor#0 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [19] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#12) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#12 ] ( print_ln:11 [ main::i#2 main::a#1 main::b#1 print_line_cursor#0 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [28] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 [ print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] ( print_uint:9::print_uchar:23 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#2 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#2 main::b#1 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_sint:5::print_uint:44::print_uchar:23 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#2 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_sint::w#1 = main::a#1 } { print_uint::w#0 = print_uint::w#2 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_uint:9::print_uchar:25 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#2 main::b#1 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_sint:5::print_uint:44::print_uchar:25 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_sint::w#1 = main::a#1 } { print_uint::w#0 = print_uint::w#2 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:11 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Statement [31] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f [ print_char_cursor#12 print_uchar::$2 ] ( print_uint:9::print_uchar:23 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#2 print_char_cursor#12 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#2 main::b#1 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_sint:5::print_uint:44::print_uchar:23 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#2 print_char_cursor#12 print_uchar::$2 ] { { print_sint::w#1 = main::a#1 } { print_uint::w#0 = print_uint::w#2 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_uint:9::print_uchar:25 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#2 main::b#1 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_sint:5::print_uint:44::print_uchar:25 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_uchar::$2 ] { { print_sint::w#1 = main::a#1 } { print_uint::w#0 = print_uint::w#2 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  ) always clobbers reg byte a 
Statement [36] *((byte*) print_char_cursor#34) ← (byte) print_char::ch#5 [ print_char_cursor#34 ] ( print_char:7 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#34 ] { { print_char_cursor#12 = print_char_cursor#34 } }  print_uint:9::print_uchar:23::print_char:30 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#2 print_uchar::b#2 print_char_cursor#34 ] { { print_uint::w#1 = print_uint::w#2 main::b#1 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_sint:5::print_uint:44::print_uchar:23::print_char:30 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#2 print_uchar::b#2 print_char_cursor#34 ] { { print_sint::w#1 = main::a#1 } { print_uint::w#0 = print_uint::w#2 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_uint:9::print_uchar:25::print_char:30 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uchar::b#2 print_char_cursor#34 ] { { print_uint::w#1 = print_uint::w#2 main::b#1 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_sint:5::print_uint:44::print_uchar:25::print_char:30 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uchar::b#2 print_char_cursor#34 ] { { print_sint::w#1 = main::a#1 } { print_uint::w#0 = print_uint::w#2 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_uint:9::print_uchar:23::print_char:33 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#2 print_char_cursor#34 ] { { print_uint::w#1 = print_uint::w#2 main::b#1 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_sint:5::print_uint:44::print_uchar:23::print_char:33 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#2 print_char_cursor#34 ] { { print_sint::w#1 = main::a#1 } { print_uint::w#0 = print_uint::w#2 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_uint:9::print_uchar:25::print_char:33 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#34 ] { { print_uint::w#1 = print_uint::w#2 main::b#1 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_sint:5::print_uint:44::print_uchar:25::print_char:33 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#34 ] { { print_sint::w#1 = main::a#1 } { print_uint::w#0 = print_uint::w#2 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_sint:5::print_char:41 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_sint::w#1 print_char_cursor#34 ] { { print_sint::w#1 = main::a#1 } { print_char_cursor#34 = print_char_cursor#49 } }  print_sint:5::print_char:47 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_sint::w#1 print_char_cursor#34 ] { { print_sint::w#1 = main::a#1 } { print_char_cursor#34 = print_char_cursor#49 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:6 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:11 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Statement [39] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1 [ print_char_cursor#49 print_sint::w#1 ] ( print_sint:5 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#49 print_sint::w#1 ] { { print_sint::w#1 = main::a#1 } }  ) always clobbers reg byte a 
Statement [43] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4 [ print_char_cursor#12 print_uint::w#0 ] ( print_sint:5 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_uint::w#0 ] { { print_sint::w#1 = main::a#1 } { print_uint::w#0 = print_uint::w#2 } }  ) always clobbers reg byte a 
Statement [48] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1 [ print_char_cursor#12 print_sint::w#0 ] ( print_sint:5 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_sint::w#0 ] { { print_sint::w#1 = main::a#1 } }  ) always clobbers reg byte a 
Statement [2] (signed word) main::a#1 ← (signed word) main::a#2 + (signed byte) -7 [ main::b#2 print_char_cursor#49 print_line_cursor#15 main::i#2 main::a#1 ] (  [ main::b#2 print_char_cursor#49 print_line_cursor#15 main::i#2 main::a#1 ] { { print_sint::w#1 = main::a#1 } }  ) always clobbers reg byte a 
Statement [3] (word) main::b#1 ← (word) main::b#2 + (word) $141 [ print_char_cursor#49 print_line_cursor#15 main::i#2 main::a#1 main::b#1 ] (  [ print_char_cursor#49 print_line_cursor#15 main::i#2 main::a#1 main::b#1 ] { { print_sint::w#1 = main::a#1 } }  ) always clobbers reg byte a 
Statement [4] (signed word) print_sint::w#1 ← (signed word) main::a#1 [ print_char_cursor#49 print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_sint::w#1 ] (  [ print_char_cursor#49 print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_sint::w#1 ] { { print_sint::w#1 = main::a#1 } }  ) always clobbers reg byte a 
Statement [8] (word) print_uint::w#1 ← (word) main::b#1 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#1 print_char_cursor#12 ] (  [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#1 print_char_cursor#12 ] { { print_uint::w#1 = print_uint::w#2 main::b#1 } }  ) always clobbers reg byte a 
Statement [15] (byte*) print_char_cursor#58 ← (byte*) print_line_cursor#0 [ main::a#1 main::b#1 print_char_cursor#58 print_line_cursor#0 main::i#1 ] (  [ main::a#1 main::b#1 print_char_cursor#58 print_line_cursor#0 main::i#1 ] { }  ) always clobbers reg byte a 
Statement [18] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#7 + (byte) $28 [ print_line_cursor#0 print_char_cursor#12 ] ( print_ln:11 [ main::i#2 main::a#1 main::b#1 print_line_cursor#0 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [19] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#12) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#12 ] ( print_ln:11 [ main::i#2 main::a#1 main::b#1 print_line_cursor#0 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [28] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 [ print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] ( print_uint:9::print_uchar:23 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#2 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#2 main::b#1 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_sint:5::print_uint:44::print_uchar:23 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#2 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_sint::w#1 = main::a#1 } { print_uint::w#0 = print_uint::w#2 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_uint:9::print_uchar:25 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_uint::w#1 = print_uint::w#2 main::b#1 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_sint:5::print_uint:44::print_uchar:25 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_sint::w#1 = main::a#1 } { print_uint::w#0 = print_uint::w#2 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  ) always clobbers reg byte a 
Statement [31] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f [ print_char_cursor#12 print_uchar::$2 ] ( print_uint:9::print_uchar:23 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#2 print_char_cursor#12 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#2 main::b#1 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_sint:5::print_uint:44::print_uchar:23 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#2 print_char_cursor#12 print_uchar::$2 ] { { print_sint::w#1 = main::a#1 } { print_uint::w#0 = print_uint::w#2 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_uint:9::print_uchar:25 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_uchar::$2 ] { { print_uint::w#1 = print_uint::w#2 main::b#1 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_sint:5::print_uint:44::print_uchar:25 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_uchar::$2 ] { { print_sint::w#1 = main::a#1 } { print_uint::w#0 = print_uint::w#2 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  ) always clobbers reg byte a 
Statement [36] *((byte*) print_char_cursor#34) ← (byte) print_char::ch#5 [ print_char_cursor#34 ] ( print_char:7 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#34 ] { { print_char_cursor#12 = print_char_cursor#34 } }  print_uint:9::print_uchar:23::print_char:30 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#2 print_uchar::b#2 print_char_cursor#34 ] { { print_uint::w#1 = print_uint::w#2 main::b#1 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_sint:5::print_uint:44::print_uchar:23::print_char:30 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#2 print_uchar::b#2 print_char_cursor#34 ] { { print_sint::w#1 = main::a#1 } { print_uint::w#0 = print_uint::w#2 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_uint:9::print_uchar:25::print_char:30 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uchar::b#2 print_char_cursor#34 ] { { print_uint::w#1 = print_uint::w#2 main::b#1 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_sint:5::print_uint:44::print_uchar:25::print_char:30 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uchar::b#2 print_char_cursor#34 ] { { print_sint::w#1 = main::a#1 } { print_uint::w#0 = print_uint::w#2 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_uint:9::print_uchar:23::print_char:33 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#2 print_char_cursor#34 ] { { print_uint::w#1 = print_uint::w#2 main::b#1 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_sint:5::print_uint:44::print_uchar:23::print_char:33 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_uint::w#2 print_char_cursor#34 ] { { print_sint::w#1 = main::a#1 } { print_uint::w#0 = print_uint::w#2 } { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_uint:9::print_uchar:25::print_char:33 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#34 ] { { print_uint::w#1 = print_uint::w#2 main::b#1 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_sint:5::print_uint:44::print_uchar:25::print_char:33 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#34 ] { { print_sint::w#1 = main::a#1 } { print_uint::w#0 = print_uint::w#2 } { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#5 } { print_char_cursor#12 = print_char_cursor#34 } }  print_sint:5::print_char:41 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_sint::w#1 print_char_cursor#34 ] { { print_sint::w#1 = main::a#1 } { print_char_cursor#34 = print_char_cursor#49 } }  print_sint:5::print_char:47 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_sint::w#1 print_char_cursor#34 ] { { print_sint::w#1 = main::a#1 } { print_char_cursor#34 = print_char_cursor#49 } }  ) always clobbers reg byte y 
Statement [39] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1 [ print_char_cursor#49 print_sint::w#1 ] ( print_sint:5 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#49 print_sint::w#1 ] { { print_sint::w#1 = main::a#1 } }  ) always clobbers reg byte a 
Statement [43] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4 [ print_char_cursor#12 print_uint::w#0 ] ( print_sint:5 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_uint::w#0 ] { { print_sint::w#1 = main::a#1 } { print_uint::w#0 = print_uint::w#2 } }  ) always clobbers reg byte a 
Statement [48] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1 [ print_char_cursor#12 print_sint::w#0 ] ( print_sint:5 [ print_line_cursor#15 main::i#2 main::a#1 main::b#1 print_char_cursor#12 print_sint::w#0 ] { { print_sint::w#1 = main::a#1 } }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::a#2 main::a#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ main::b#2 main::b#1 ] : zp[2]:4 , 
Potential registers zp[1]:6 [ main::i#2 main::i#1 ] : zp[1]:6 , reg byte x , 
Potential registers zp[2]:7 [ print_line_cursor#7 print_line_cursor#15 print_line_cursor#0 ] : zp[2]:7 , 
Potential registers zp[2]:9 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 ] : zp[2]:9 , 
Potential registers zp[1]:11 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] : zp[1]:11 , reg byte x , 
Potential registers zp[1]:12 [ print_char::ch#5 print_char::ch#2 print_char::ch#3 ] : zp[1]:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:13 [ print_char_cursor#34 print_char_cursor#12 print_char_cursor#49 print_char_cursor#58 ] : zp[2]:13 , 
Potential registers zp[2]:15 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] : zp[2]:15 , 
Potential registers zp[1]:17 [ print_uchar::$0 ] : zp[1]:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:18 [ print_uchar::$2 ] : zp[1]:18 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print_char] 160,007: zp[1]:12 [ print_char::ch#5 print_char::ch#2 print_char::ch#3 ] 
Uplift Scope [] 114,100.78: zp[2]:13 [ print_char_cursor#34 print_char_cursor#12 print_char_cursor#49 print_char_cursor#58 ] 24,402.47: zp[2]:7 [ print_line_cursor#7 print_line_cursor#15 print_line_cursor#0 ] 
Uplift Scope [print_uchar] 20,002: zp[1]:17 [ print_uchar::$0 ] 20,002: zp[1]:18 [ print_uchar::$2 ] 9,505: zp[1]:11 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] 
Uplift Scope [print_uint] 928.67: zp[2]:9 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 ] 
Uplift Scope [print_sint] 456.33: zp[2]:15 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] 
Uplift Scope [main] 24.54: zp[2]:2 [ main::a#2 main::a#1 ] 13.75: zp[2]:4 [ main::b#2 main::b#1 ] 13: zp[1]:6 [ main::i#2 main::i#1 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 

Uplifting [print_char] best 6049 combination reg byte a [ print_char::ch#5 print_char::ch#2 print_char::ch#3 ] 
Uplifting [] best 6049 combination zp[2]:13 [ print_char_cursor#34 print_char_cursor#12 print_char_cursor#49 print_char_cursor#58 ] zp[2]:7 [ print_line_cursor#7 print_line_cursor#15 print_line_cursor#0 ] 
Uplifting [print_uchar] best 6031 combination reg byte a [ print_uchar::$0 ] reg byte x [ print_uchar::$2 ] reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] 
Uplifting [print_uint] best 6031 combination zp[2]:9 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 ] 
Uplifting [print_sint] best 6031 combination zp[2]:15 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] 
Uplifting [main] best 6031 combination zp[2]:2 [ main::a#2 main::a#1 ] zp[2]:4 [ main::b#2 main::b#1 ] zp[1]:6 [ main::i#2 main::i#1 ] 
Uplifting [RADIX] best 6031 combination 
Uplifting [print_ln] best 6031 combination 
Attempting to uplift remaining variables inzp[1]:6 [ main::i#2 main::i#1 ]
Uplifting [main] best 6031 combination zp[1]:6 [ main::i#2 main::i#1 ] 
Coalescing zero page register [ zp[2]:9 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 ] ] with [ zp[2]:15 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] ] - score: 1
Allocated (was zp[2]:13) zp[2]:11 [ print_char_cursor#34 print_char_cursor#12 print_char_cursor#49 print_char_cursor#58 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests the special "signed" / "unsigned" without a simple type name
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_screen = $400
  .label print_line_cursor = 7
  .label print_char_cursor = $b
  // main
main: {
    .label a = 2
    .label b = 4
    .label i = 6
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [1] phi (byte*) print_line_cursor#15 = (const byte*) print_screen#0 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [1] phi (byte*) print_char_cursor#49 = (const byte*) print_screen#0 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [1] phi (word) main::b#2 = (word) $1024 [phi:main->main::@1#3] -- vwuz1=vwuc1 
    lda #<$1024
    sta.z b
    lda #>$1024
    sta.z b+1
    // [1] phi (signed word) main::a#2 = (signed word) -$3ff [phi:main->main::@1#4] -- vwsz1=vwsc1 
    lda #<-$3ff
    sta.z a
    lda #>-$3ff
    sta.z a+1
    jmp __b1
    // main::@1
  __b1:
    // [2] (signed word) main::a#1 ← (signed word) main::a#2 + (signed byte) -7 -- vwsz1=vwsz1_plus_vbsc1 
    lda.z a
    clc
    adc #<-7
    sta.z a
    lda.z a+1
    adc #>-7
    sta.z a+1
    // [3] (word) main::b#1 ← (word) main::b#2 + (word) $141 -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda.z b
    adc #<$141
    sta.z b
    lda.z b+1
    adc #>$141
    sta.z b+1
    // [4] (signed word) print_sint::w#1 ← (signed word) main::a#1 -- vwsz1=vwsz2 
    lda.z a
    sta.z print_sint.w
    lda.z a+1
    sta.z print_sint.w+1
    // [5] call print_sint 
    jsr print_sint
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [7] call print_char 
    // [35] phi from main::@2 to print_char [phi:main::@2->print_char]
  print_char_from___b2:
    // [35] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#12 [phi:main::@2->print_char#0] -- register_copy 
    // [35] phi (byte) print_char::ch#5 = (byte) ' ' [phi:main::@2->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp __b3
    // main::@3
  __b3:
    // [8] (word) print_uint::w#1 ← (word) main::b#1 -- vwuz1=vwuz2 
    lda.z b
    sta.z print_uint.w
    lda.z b+1
    sta.z print_uint.w+1
    // [9] call print_uint 
    // [21] phi from main::@3 to print_uint [phi:main::@3->print_uint]
  print_uint_from___b3:
    // [21] phi (word) print_uint::w#2 = (word) print_uint::w#1 [phi:main::@3->print_uint#0] -- register_copy 
    jsr print_uint
    // [10] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [11] call print_ln 
    // [16] phi from main::@4 to print_ln [phi:main::@4->print_ln]
  print_ln_from___b4:
    jsr print_ln
    jmp __b5
    // main::@5
  __b5:
    // [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [13] if((byte) main::i#1!=(byte) 6) goto main::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b6
    jmp __breturn
    // main::@return
  __breturn:
    // [14] return 
    rts
    // main::@6
  __b6:
    // [15] (byte*) print_char_cursor#58 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [1] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  __b1_from___b6:
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
    // [1] phi (byte*) print_line_cursor#15 = (byte*) print_line_cursor#0 [phi:main::@6->main::@1#1] -- register_copy 
    // [1] phi (byte*) print_char_cursor#49 = (byte*) print_char_cursor#58 [phi:main::@6->main::@1#2] -- register_copy 
    // [1] phi (word) main::b#2 = (word) main::b#1 [phi:main::@6->main::@1#3] -- register_copy 
    // [1] phi (signed word) main::a#2 = (signed word) main::a#1 [phi:main::@6->main::@1#4] -- register_copy 
    jmp __b1
}
  // print_ln
// Print a newline
print_ln: {
    // [17] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [17] phi (byte*) print_line_cursor#7 = (byte*) print_line_cursor#15 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [18] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#7 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [19] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#12) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [20] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp(9) w)
print_uint: {
    .label w = 9
    // [22] (byte) print_uchar::b#0 ← > (word) print_uint::w#2 -- vbuxx=_hi_vwuz1 
    ldx.z w+1
    // [23] call print_uchar 
    // [27] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
  print_uchar_from_print_uint:
    // [27] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:print_uint->print_uchar#0] -- register_copy 
    jsr print_uchar
    jmp __b1
    // print_uint::@1
  __b1:
    // [24] (byte) print_uchar::b#1 ← < (word) print_uint::w#2 -- vbuxx=_lo_vwuz1 
    ldx.z w
    // [25] call print_uchar 
    // [27] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
  print_uchar_from___b1:
    // [27] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [26] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // [28] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [29] (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [30] call print_char 
  // Table of hexadecimal digits
    // [35] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [35] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#12 [phi:print_uchar->print_char#0] -- register_copy 
    // [35] phi (byte) print_char::ch#5 = (byte) print_char::ch#2 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [31] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [32] (byte) print_char::ch#3 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [33] call print_char 
    // [35] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [35] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#12 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [35] phi (byte) print_char::ch#5 = (byte) print_char::ch#3 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [34] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [36] *((byte*) print_char_cursor#34) ← (byte) print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [37] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#34 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [38] return 
    rts
}
  // print_sint
// Print a signed int as HEX
// print_sint(signed word zp(9) w)
print_sint: {
    .label w = 9
    // [39] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sint
    // [40] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
  __b3_from_print_sint:
    jmp __b3
    // print_sint::@3
  __b3:
    // [41] call print_char 
    // [35] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
  print_char_from___b3:
    // [35] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#49 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [35] phi (byte) print_char::ch#5 = (byte) ' ' [phi:print_sint::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [42] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [42] phi (signed word) print_sint::w#4 = (signed word) print_sint::w#1 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    jmp __b2
    // print_sint::@2
  __b2:
    // [43] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4
    // [44] call print_uint 
    // [21] phi from print_sint::@2 to print_uint [phi:print_sint::@2->print_uint]
  print_uint_from___b2:
    // [21] phi (word) print_uint::w#2 = (word) print_uint::w#0 [phi:print_sint::@2->print_uint#0] -- register_copy 
    jsr print_uint
    jmp __breturn
    // print_sint::@return
  __breturn:
    // [45] return 
    rts
    // [46] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
  __b1_from_print_sint:
    jmp __b1
    // print_sint::@1
  __b1:
    // [47] call print_char 
    // [35] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
  print_char_from___b1:
    // [35] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#49 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [35] phi (byte) print_char::ch#5 = (byte) '-' [phi:print_sint::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_sint::@4
  __b4:
    // [48] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // File Data
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from_print_sint with __b1
Replacing label __b2_from___b4 with __b2
Removing instruction __b2_from___b1:
Removing instruction print_char_from___b2:
Removing instruction __b4_from___b3:
Removing instruction print_ln_from___b4:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Removing instruction __b3_from_print_sint:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction print_uint_from___b2:
Removing instruction __b1_from_print_sint:
Removing instruction print_char_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction print_uint_from___b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b1_from___b6:
Removing instruction __breturn:
Removing instruction print_uchar_from_print_uint:
Removing instruction __b1:
Removing instruction print_uchar_from___b1:
Removing instruction __breturn:
Removing instruction print_char_from_print_uchar:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(signed word) main::a
(signed word) main::a#1 a zp[2]:2 2.5384615384615383
(signed word) main::a#2 a zp[2]:2 22.0
(word) main::b
(word) main::b#1 b zp[2]:4 2.75
(word) main::b#2 b zp[2]:4 11.0
(byte) main::i
(byte) main::i#1 i zp[1]:6 11.0
(byte) main::i#2 i zp[1]:6 2.0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#2 reg byte a 20002.0
(byte) print_char::ch#3 reg byte a 20002.0
(byte) print_char::ch#5 reg byte a 120003.0
(byte*) print_char_cursor
(byte*) print_char_cursor#12 print_char_cursor zp[2]:11 3939.848484848485
(byte*) print_char_cursor#34 print_char_cursor zp[2]:11 110108.5
(byte*) print_char_cursor#49 print_char_cursor zp[2]:11 30.42857142857143
(byte*) print_char_cursor#58 print_char_cursor zp[2]:11 22.0
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0 print_line_cursor zp[2]:7 4289.285714285714
(byte*) print_line_cursor#15 print_line_cursor zp[2]:7 10.181818181818182
(byte*) print_line_cursor#7 print_line_cursor zp[2]:7 20103.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(const byte*) print_screen#0 print_screen = (byte*) 1024
(void()) print_sint((signed word) print_sint::w)
(label) print_sint::@1
(label) print_sint::@2
(label) print_sint::@3
(label) print_sint::@4
(label) print_sint::@return
(signed word) print_sint::w
(signed word) print_sint::w#0 w zp[2]:9 202.0
(signed word) print_sint::w#1 w zp[2]:9 52.33333333333333
(signed word) print_sint::w#4 w zp[2]:9 202.0
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 reg byte a 20002.0
(byte~) print_uchar::$2 reg byte x 20002.0
(label) print_uchar::@1
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0 reg byte x 2002.0
(byte) print_uchar::b#1 reg byte x 2002.0
(byte) print_uchar::b#2 reg byte x 5501.0
(void()) print_uint((word) print_uint::w)
(label) print_uint::@1
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0 w zp[2]:9 202.0
(word) print_uint::w#1 w zp[2]:9 22.0
(word) print_uint::w#2 w zp[2]:9 704.6666666666667

zp[2]:2 [ main::a#2 main::a#1 ]
zp[2]:4 [ main::b#2 main::b#1 ]
zp[1]:6 [ main::i#2 main::i#1 ]
zp[2]:7 [ print_line_cursor#7 print_line_cursor#15 print_line_cursor#0 ]
zp[2]:9 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 print_sint::w#4 print_sint::w#0 print_sint::w#1 ]
reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
reg byte a [ print_char::ch#5 print_char::ch#2 print_char::ch#3 ]
zp[2]:11 [ print_char_cursor#34 print_char_cursor#12 print_char_cursor#49 print_char_cursor#58 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]


FINAL ASSEMBLER
Score: 5263

  // File Comments
// Tests the special "signed" / "unsigned" without a simple type name
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_screen = $400
  .label print_line_cursor = 7
  .label print_char_cursor = $b
  // main
main: {
    .label a = 2
    .label b = 4
    .label i = 6
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [1] phi (byte*) print_line_cursor#15 = (const byte*) print_screen#0 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [1] phi (byte*) print_char_cursor#49 = (const byte*) print_screen#0 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [1] phi (word) main::b#2 = (word) $1024 [phi:main->main::@1#3] -- vwuz1=vwuc1 
    lda #<$1024
    sta.z b
    lda #>$1024
    sta.z b+1
    // [1] phi (signed word) main::a#2 = (signed word) -$3ff [phi:main->main::@1#4] -- vwsz1=vwsc1 
    lda #<-$3ff
    sta.z a
    lda #>-$3ff
    sta.z a+1
    // main::@1
  __b1:
    // a += -7
    // [2] (signed word) main::a#1 ← (signed word) main::a#2 + (signed byte) -7 -- vwsz1=vwsz1_plus_vbsc1 
    lda.z a
    clc
    adc #<-7
    sta.z a
    lda.z a+1
    adc #>-7
    sta.z a+1
    // b += 321
    // [3] (word) main::b#1 ← (word) main::b#2 + (word) $141 -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda.z b
    adc #<$141
    sta.z b
    lda.z b+1
    adc #>$141
    sta.z b+1
    // print_sint(a)
    // [4] (signed word) print_sint::w#1 ← (signed word) main::a#1 -- vwsz1=vwsz2 
    lda.z a
    sta.z print_sint.w
    lda.z a+1
    sta.z print_sint.w+1
    // [5] call print_sint 
    jsr print_sint
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // print_char(' ')
    // [7] call print_char 
    // [35] phi from main::@2 to print_char [phi:main::@2->print_char]
    // [35] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#12 [phi:main::@2->print_char#0] -- register_copy 
    // [35] phi (byte) print_char::ch#5 = (byte) ' ' [phi:main::@2->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // main::@3
    // print_uint(b)
    // [8] (word) print_uint::w#1 ← (word) main::b#1 -- vwuz1=vwuz2 
    lda.z b
    sta.z print_uint.w
    lda.z b+1
    sta.z print_uint.w+1
    // [9] call print_uint 
    // [21] phi from main::@3 to print_uint [phi:main::@3->print_uint]
    // [21] phi (word) print_uint::w#2 = (word) print_uint::w#1 [phi:main::@3->print_uint#0] -- register_copy 
    jsr print_uint
    // [10] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // main::@4
    // print_ln()
    // [11] call print_ln 
    // [16] phi from main::@4 to print_ln [phi:main::@4->print_ln]
    jsr print_ln
    // main::@5
    // for( byte i : 0..5 )
    // [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [13] if((byte) main::i#1!=(byte) 6) goto main::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z i
    bne __b6
    // main::@return
    // }
    // [14] return 
    rts
    // main::@6
  __b6:
    // [15] (byte*) print_char_cursor#58 ← (byte*) print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [1] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
    // [1] phi (byte*) print_line_cursor#15 = (byte*) print_line_cursor#0 [phi:main::@6->main::@1#1] -- register_copy 
    // [1] phi (byte*) print_char_cursor#49 = (byte*) print_char_cursor#58 [phi:main::@6->main::@1#2] -- register_copy 
    // [1] phi (word) main::b#2 = (word) main::b#1 [phi:main::@6->main::@1#3] -- register_copy 
    // [1] phi (signed word) main::a#2 = (signed word) main::a#1 [phi:main::@6->main::@1#4] -- register_copy 
    jmp __b1
}
  // print_ln
// Print a newline
print_ln: {
    // [17] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [17] phi (byte*) print_line_cursor#7 = (byte*) print_line_cursor#15 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [18] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#7 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [19] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#12) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [20] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp(9) w)
print_uint: {
    .label w = 9
    // print_uchar(>w)
    // [22] (byte) print_uchar::b#0 ← > (word) print_uint::w#2 -- vbuxx=_hi_vwuz1 
    ldx.z w+1
    // [23] call print_uchar 
    // [27] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
    // [27] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#0 [phi:print_uint->print_uchar#0] -- register_copy 
    jsr print_uchar
    // print_uint::@1
    // print_uchar(<w)
    // [24] (byte) print_uchar::b#1 ← < (word) print_uint::w#2 -- vbuxx=_lo_vwuz1 
    ldx.z w
    // [25] call print_uchar 
    // [27] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
    // [27] phi (byte) print_uchar::b#2 = (byte) print_uchar::b#1 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    jsr print_uchar
    // print_uint::@return
    // }
    // [26] return 
    rts
}
  // print_uchar
// Print a char as HEX
// print_uchar(byte register(X) b)
print_uchar: {
    // b>>4
    // [28] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [29] (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [30] call print_char 
  // Table of hexadecimal digits
    // [35] phi from print_uchar to print_char [phi:print_uchar->print_char]
    // [35] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#12 [phi:print_uchar->print_char#0] -- register_copy 
    // [35] phi (byte) print_char::ch#5 = (byte) print_char::ch#2 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@1
    // b&$f
    // [31] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&$f])
    // [32] (byte) print_char::ch#3 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [33] call print_char 
    // [35] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
    // [35] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#12 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [35] phi (byte) print_char::ch#5 = (byte) print_char::ch#3 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@return
    // }
    // [34] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [36] *((byte*) print_char_cursor#34) ← (byte) print_char::ch#5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [37] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#34 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [38] return 
    rts
}
  // print_sint
// Print a signed int as HEX
// print_sint(signed word zp(9) w)
print_sint: {
    .label w = 9
    // if(w<0)
    // [39] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1
    // [40] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
    // print_sint::@3
    // print_char(' ')
    // [41] call print_char 
    // [35] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
    // [35] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#49 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [35] phi (byte) print_char::ch#5 = (byte) ' ' [phi:print_sint::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [42] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
    // [42] phi (signed word) print_sint::w#4 = (signed word) print_sint::w#1 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    // print_sint::@2
  __b2:
    // print_uint((unsigned int)w)
    // [43] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4
    // [44] call print_uint 
    // [21] phi from print_sint::@2 to print_uint [phi:print_sint::@2->print_uint]
    // [21] phi (word) print_uint::w#2 = (word) print_uint::w#0 [phi:print_sint::@2->print_uint#0] -- register_copy 
    jsr print_uint
    // print_sint::@return
    // }
    // [45] return 
    rts
    // [46] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
    // print_sint::@1
  __b1:
    // print_char('-')
    // [47] call print_char 
    // [35] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
    // [35] phi (byte*) print_char_cursor#34 = (byte*) print_char_cursor#49 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [35] phi (byte) print_char::ch#5 = (byte) '-' [phi:print_sint::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_sint::@4
    // w = -w
    // [48] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2
}
  // File Data
  print_hextab: .text "0123456789abcdef"

