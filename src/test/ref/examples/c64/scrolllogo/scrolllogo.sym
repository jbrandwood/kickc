constant const byte BLACK = 0
constant byte* const COLS = (byte*) 55296
constant byte* const D016 = (byte*) 53270
constant byte* const D018 = (byte*) 53272
constant const byte DARK_GREY = $b
constant byte* LOGO[6*$28*8]  = kickasm {{ .var logoPic = LoadPicture("logo.png", List().add($444444, $808080, $000000, $ffffff))
    .for (var y=0; y<6	; y++)
        .for (var x=0;x<40; x++)
            .for(var cp=0; cp<8; cp++)
                .byte logoPic.getMulticolorByte(x,cp+y*8)
 }}
constant byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
constant byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1 = $22
constant byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2 = $23
constant byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
constant byte OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
constant const dword PI2_u4f28 = $6487ed51
constant const dword PI_HALF_u4f28 = $1921fb54
constant const dword PI_u4f28 = $3243f6a9
constant byte* SCREEN = (byte*) 1024
constant byte SIZEOF_SIGNED_WORD = 2
constant struct MOS6569_VICII* const VICII = (struct MOS6569_VICII*) 53248
constant const byte VICII_MCM = $10
constant const byte WHITE = 1
constant const word XSIN_SIZE = $200
dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
dword div32u16u::dividend
word div32u16u::divisor
dword div32u16u::quotient
word div32u16u::quotient_hi
word div32u16u::quotient_hi#0 quotient_hi zp[2]:32 40.4
word div32u16u::quotient_lo
word div32u16u::quotient_lo#0 quotient_lo zp[2]:20 202.0
dword div32u16u::return
dword div32u16u::return#0 return zp[4]:22 37.33333333333333
dword div32u16u::return#2 return zp[4]:22 22.0
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 reg byte a 20002.0
byte~ divr16u::$2 reg byte a 20002.0
word divr16u::dividend
word divr16u::dividend#0 dividend zp[2]:18 2500.25
word divr16u::dividend#3 dividend zp[2]:18 4429.142857142857
word divr16u::dividend#5 dividend zp[2]:18 1001.0
word divr16u::divisor
byte divr16u::i
byte divr16u::i#1 reg byte x 15001.5
byte divr16u::i#2 reg byte x 1538.6153846153845
word divr16u::quotient
word divr16u::quotient#1 quotient zp[2]:20 15001.5
word divr16u::quotient#2 quotient zp[2]:20 10001.0
word divr16u::quotient#3 quotient zp[2]:20 2500.25
word divr16u::rem
word divr16u::rem#0 rem zp[2]:26 7500.75
word divr16u::rem#1 rem zp[2]:26 20002.0
word divr16u::rem#10 rem zp[2]:26 1102.0
word divr16u::rem#11 rem zp[2]:26 10334.666666666666
word divr16u::rem#2 rem zp[2]:26 20002.0
word divr16u::rem#4 rem zp[2]:26 202.0
word divr16u::rem#5 rem zp[2]:26 21003.0
word divr16u::rem#6 rem zp[2]:26 10001.0
word divr16u::return
word divr16u::return#0 return zp[2]:20 4315.0
word divr16u::return#2 return zp[2]:20 202.0
word divr16u::return#3 return zp[2]:20 202.0
void loop()
signed word*~ loop::$2 zp[2]:26 202.0
word~ loop::$7 zp[2]:26 202.0
signed word loop::xpos
signed word loop::xpos#0 xpos zp[2]:26 202.0
void main()
byte main::ch
byte main::ch#1 reg byte x 16.5
byte main::ch#2 reg byte x 22.0
byte* main::toD0181_gfx
byte main::toD0181_return
constant byte main::toD0181_return#0 toD0181_return = >(word)SCREEN&$3fff*4|>(word)LOGO/4&$f
byte* main::toD0181_screen
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#4 reg byte x 14.428571428571429
byte* memset::dst
byte* memset::dst#1 dst zp[2]:36 202.0
byte* memset::dst#2 dst zp[2]:36 138.33333333333331
byte* memset::dst#4 dst zp[2]:36 22.0
byte* memset::end
byte* memset::end#0 end zp[2]:34 18.666666666666664
word memset::num
void* memset::return
void* memset::str
void* memset::str#3 str zp[2]:36
signed dword mul16s(signed word mul16s::a , signed word mul16s::b)
word~ mul16s::$11 zp[2]:34 2002.0
word~ mul16s::$6 zp[2]:34 2002.0
signed word mul16s::a
signed word mul16s::a#0 a zp[2]:26 220.39999999999998
signed word mul16s::b
dword mul16s::m
dword mul16s::m#0 m zp[4]:12 1001.0
dword mul16s::m#1 m zp[4]:12 2002.0
dword mul16s::m#4 m zp[4]:12 2002.0
signed dword mul16s::return
signed dword mul16s::return#0 return zp[4]:12 367.33333333333337
signed dword mul16s::return#2 return zp[4]:12 202.0
dword mul16u(word mul16u::a , word mul16u::b)
byte~ mul16u::$1 reg byte a 2.0000002E7
word mul16u::a
word mul16u::a#0 a zp[2]:34 1.0000001E7
word mul16u::a#1 a zp[2]:34 2002.0
word mul16u::a#2 a zp[2]:34 10001.0
word mul16u::a#3 a zp[2]:34 6683334.166666666
word mul16u::a#6 a zp[2]:34 55501.5
word mul16u::b
word mul16u::b#1 b zp[2]:20 20002.0
word mul16u::b#2 b zp[2]:20 10001.0
dword mul16u::mb
dword mul16u::mb#0 mb zp[4]:28 200002.0
dword mul16u::mb#1 mb zp[4]:28 2.0000002E7
dword mul16u::mb#2 mb zp[4]:28 4300000.571428571
dword mul16u::res
dword mul16u::res#1 res zp[4]:12 2.0000002E7
dword mul16u::res#2 res zp[4]:12 4287286.428571429
dword mul16u::res#6 res zp[4]:12 1.0000001E7
dword mul16u::return
dword mul16u::return#2 return zp[4]:12 2002.0
dword mul16u::return#3 return zp[4]:12 20002.0
word mulu16_sel(word mulu16_sel::v1 , word mulu16_sel::v2 , byte mulu16_sel::select)
dword~ mulu16_sel::$0 zp[4]:12 20002.0
dword~ mulu16_sel::$1 zp[4]:12 20002.0
word mulu16_sel::return
word mulu16_sel::return#0 return zp[2]:34 2002.0
word mulu16_sel::return#1 return_1 zp[2]:18 2002.0
word mulu16_sel::return#10 return_1 zp[2]:18 2002.0
word mulu16_sel::return#11 return zp[2]:34 2002.0
word mulu16_sel::return#12 return zp[2]:34 2143.714285714286
word mulu16_sel::return#2 return zp[2]:34 2002.0
byte mulu16_sel::select
byte mulu16_sel::select#5 reg byte x 1666.8333333333333
word mulu16_sel::v1
word mulu16_sel::v1#0 v1 zp[2]:18 1001.0
word mulu16_sel::v1#1 v1 zp[2]:18 1001.0
word mulu16_sel::v1#2 v1 zp[2]:18 2002.0
word mulu16_sel::v1#3 v1 zp[2]:18 1001.0
word mulu16_sel::v1#4 v1 zp[2]:18 1001.0
word mulu16_sel::v1#5 v1 zp[2]:18 15006.0
word mulu16_sel::v2
word mulu16_sel::v2#0 v2 zp[2]:20 2002.0
word mulu16_sel::v2#1 v2 zp[2]:20 2002.0
word mulu16_sel::v2#3 v2 zp[2]:20 2002.0
word mulu16_sel::v2#4 v2 zp[2]:20 2002.0
word mulu16_sel::v2#5 v2 zp[2]:20 7002.5
word rem16u
word rem16u#0 rem16u zp[2]:26 220.39999999999998
void render_logo(signed word render_logo::xpos)
byte~ render_logo::$0 reg byte a 2002.0
byte~ render_logo::$1 reg byte a 2002.0
signed word~ render_logo::$2 zp[2]:36 1001.0
byte~ render_logo::$25 reg byte a 2002.0
byte~ render_logo::$30 reg byte a 200002.0
byte~ render_logo::$33 reg byte a 200002.0
byte~ render_logo::$36 reg byte a 200002.0
byte~ render_logo::$39 reg byte a 200002.0
byte~ render_logo::$42 reg byte a 200002.0
byte~ render_logo::$70 reg byte a 200002.0
byte~ render_logo::$73 reg byte a 200002.0
byte~ render_logo::$76 reg byte a 200002.0
byte~ render_logo::$79 reg byte a 200002.0
byte~ render_logo::$82 reg byte a 200002.0
byte render_logo::line
byte render_logo::logo_idx
signed byte render_logo::logo_idx#1 reg byte a 1001.0
byte render_logo::logo_idx#10 logo_idx zp[1]:16 57143.42857142857
byte render_logo::logo_idx#11 logo_idx_1 zp[1]:17 64357.857142857145
byte render_logo::logo_idx#14 logo_idx_1 zp[1]:17 2002.0
byte render_logo::logo_idx#3 logo_idx zp[1]:16 200002.0
byte render_logo::logo_idx#4 logo_idx_1 zp[1]:17 200002.0
byte render_logo::logo_start
byte render_logo::screen_idx
byte render_logo::screen_idx#10 reg byte y 76923.84615384616
byte render_logo::screen_idx#15 reg byte y 125001.25
byte render_logo::screen_idx#18 reg byte y 125001.25
byte render_logo::screen_idx#21 reg byte y 69231.46153846155
byte render_logo::screen_idx#3 reg byte y 200002.0
byte render_logo::screen_idx#4 reg byte y 100001.0
byte render_logo::screen_idx#5 reg byte y 100001.0
byte render_logo::screen_idx#6 reg byte y 200002.0
signed byte render_logo::x_char
signed byte render_logo::x_char#0 x_char zp[1]:38 182.0
signed word render_logo::xpos
signed word render_logo::xpos#0 xpos zp[2]:26 300.42857142857144
signed word sin16s(dword sin16s::x)
dword~ sin16s::$4 zp[4]:28 2002.0
byte sin16s::isUpper
byte sin16s::isUpper#2 reg byte y 30.333333333333332
signed word sin16s::return
signed word sin16s::return#0 return zp[2]:26 202.0
signed word sin16s::return#1 return zp[2]:26 701.0
signed word sin16s::return#5 return zp[2]:26 2002.0
signed word sin16s::sinx
signed word sin16s::sinx#1 sinx zp[2]:26 2002.0
word sin16s::usinx
word sin16s::usinx#0 usinx zp[2]:26 166.83333333333334
word sin16s::usinx#1 usinx zp[2]:26 500.5
dword sin16s::x
dword sin16s::x#0 x zp[4]:8 1552.0
dword sin16s::x#1 x zp[4]:8 2002.0
dword sin16s::x#2 x zp[4]:8 2002.0
dword sin16s::x#4 x zp[4]:8 2502.5
dword sin16s::x#6 x zp[4]:8 3003.0
word sin16s::x1
word sin16s::x1#0 x1 zp[2]:32 318.5
word sin16s::x2
word sin16s::x2#0 x2 zp[2]:18 2002.0
word sin16s::x3
word sin16s::x3#0 x3 zp[2]:18 500.5
word sin16s::x3_6
word sin16s::x3_6#0 x3_6 zp[2]:34 2002.0
word sin16s::x4
word sin16s::x4#0 x4 zp[2]:18 2002.0
word sin16s::x5
word sin16s::x5#0 x5 zp[2]:34 2002.0
word sin16s::x5_128
word sin16s::x5_128#0 x5_128 zp[2]:34 2002.0
void sin16s_gen2(signed word* sin16s_gen2::sintab , word sin16s_gen2::wavelength , signed word sin16s_gen2::min , signed word sin16s_gen2::max)
signed dword~ sin16s_gen2::$6 zp[4]:12 202.0
word~ sin16s_gen2::$8 zp[2]:26 101.0
signed word sin16s_gen2::ampl
constant signed word sin16s_gen2::ampl#0 ampl = sin16s_gen2::max#0-sin16s_gen2::min#0
word sin16s_gen2::i
word sin16s_gen2::i#1 i zp[2]:36 202.0
word sin16s_gen2::i#2 i zp[2]:36 23.307692307692307
signed word sin16s_gen2::max
constant signed word sin16s_gen2::max#0 max = $140
signed word sin16s_gen2::min
constant signed word sin16s_gen2::min#0 min = -$140
signed word sin16s_gen2::offs
signed word* sin16s_gen2::sintab
signed word* sin16s_gen2::sintab#0 sintab zp[2]:6 67.33333333333333
signed word* sin16s_gen2::sintab#2 sintab zp[2]:6 27.545454545454547
dword sin16s_gen2::step
dword sin16s_gen2::step#0 step zp[4]:22 7.466666666666667
word sin16s_gen2::wavelength
dword sin16s_gen2::x
dword sin16s_gen2::x#1 x zp[4]:2 101.0
dword sin16s_gen2::x#2 x zp[4]:2 25.25
constant signed word* xsin[XSIN_SIZE]  = { fill( XSIN_SIZE, 0) }
word xsin_idx
word xsin_idx#12 xsin_idx zp[2]:6 37.875
word xsin_idx#2 xsin_idx zp[2]:6 101.0
word xsin_idx#21 xsin_idx zp[2]:6 101.0

reg byte x [ main::ch#2 main::ch#1 ]
reg byte x [ memset::c#4 ]
zp[4]:2 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
zp[2]:6 [ xsin_idx#12 xsin_idx#21 xsin_idx#2 sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
reg byte y [ sin16s::isUpper#2 ]
zp[4]:8 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
zp[4]:12 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#2 mul16s::return#0 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#3 mul16s::return#2 sin16s_gen2::$6 mulu16_sel::$0 mulu16_sel::$1 ]
reg byte y [ render_logo::screen_idx#10 render_logo::screen_idx#4 render_logo::screen_idx#18 render_logo::screen_idx#3 ]
zp[1]:16 [ render_logo::logo_idx#10 render_logo::logo_idx#3 ]
zp[1]:17 [ render_logo::logo_idx#11 render_logo::logo_idx#14 render_logo::logo_idx#4 ]
reg byte y [ render_logo::screen_idx#15 render_logo::screen_idx#21 render_logo::screen_idx#5 render_logo::screen_idx#6 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[2]:18 [ mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
zp[2]:20 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 mul16u::b#2 mul16u::b#1 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ]
reg byte x [ mulu16_sel::select#5 ]
zp[4]:22 [ div32u16u::return#2 sin16s_gen2::step#0 div32u16u::return#0 ]
zp[2]:26 [ loop::$7 loop::$2 loop::xpos#0 render_logo::xpos#0 sin16s_gen2::$8 divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 mul16s::a#0 sin16s::usinx#0 ]
zp[4]:28 [ sin16s::$4 mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
zp[2]:32 [ sin16s::x1#0 div32u16u::quotient_hi#0 ]
zp[2]:34 [ mul16s::$6 mul16s::$11 mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 memset::end#0 mul16u::a#3 mul16u::a#6 mul16u::a#1 mul16u::a#2 mul16u::a#0 ]
reg byte a [ render_logo::$25 ]
reg byte a [ render_logo::$0 ]
reg byte a [ render_logo::$1 ]
zp[2]:36 [ render_logo::$2 sin16s_gen2::i#2 sin16s_gen2::i#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
zp[1]:38 [ render_logo::x_char#0 ]
reg byte a [ render_logo::$30 ]
reg byte a [ render_logo::$33 ]
reg byte a [ render_logo::$36 ]
reg byte a [ render_logo::$39 ]
reg byte a [ render_logo::$42 ]
reg byte a [ render_logo::logo_idx#1 ]
reg byte a [ render_logo::$70 ]
reg byte a [ render_logo::$73 ]
reg byte a [ render_logo::$76 ]
reg byte a [ render_logo::$79 ]
reg byte a [ render_logo::$82 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ mul16u::$1 ]
