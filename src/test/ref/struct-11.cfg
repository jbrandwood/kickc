@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_person 
  to:main::@1
main::@1: scope:[main]  from main
  [6] (byte*~) print_char_cursor#49 ← (byte*) print_line_cursor#1
  [7] call print_person 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return 
  to:@return
print_person: scope:[print_person]  from main main::@1
  [9] (byte*) print_line_cursor#20 ← phi( main/(byte*) 1024 main::@1/(byte*) print_line_cursor#1 )
  [9] (byte[2]) print_person::person_initials#2 ← phi( main/(const byte[2]) jesper_initials#0 main::@1/(const byte[2]) henry_initials#0 )
  [9] (byte*) print_char_cursor#39 ← phi( main/(byte*) 1024 main::@1/(byte*~) print_char_cursor#49 )
  [9] (dword) print_person::person_id#2 ← phi( main/(const dword) jesper_id#0 main::@1/(const dword) henry_id#0 )
  [10] (dword) print_dword_decimal::w#0 ← (dword) print_person::person_id#2
  [11] call print_dword_decimal 
  to:print_person::@1
print_person::@1: scope:[print_person]  from print_person
  [12] phi()
  [13] call print_char 
  to:print_person::@2
print_person::@2: scope:[print_person]  from print_person::@1
  [14] (byte*) print_str::str#2 ← (byte[2]) print_person::person_initials#2
  [15] call print_str 
  to:print_person::@3
print_person::@3: scope:[print_person]  from print_person::@2
  [16] phi()
  [17] call print_ln 
  to:print_person::@return
print_person::@return: scope:[print_person]  from print_person::@3
  [18] return 
  to:@return
print_ln: scope:[print_ln]  from print_person::@3
  [19] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [20] (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#20 print_ln::@1/(byte*) print_line_cursor#1 )
  [21] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28
  [22] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#18) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [23] return 
  to:@return
print_str: scope:[print_str]  from print_dword_decimal::@1 print_person::@2
  [24] (byte*) print_char_cursor#41 ← phi( print_dword_decimal::@1/(byte*) print_char_cursor#39 print_person::@2/(byte*) print_char_cursor#25 )
  [24] (byte*) print_str::str#5 ← phi( print_dword_decimal::@1/(const byte[$b]) decimal_digits_long#0 print_person::@2/(byte*) print_str::str#2 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [25] (byte*) print_char_cursor#18 ← phi( print_str/(byte*) print_char_cursor#41 print_str::@2/(byte*) print_char_cursor#1 )
  [25] (byte*) print_str::str#3 ← phi( print_str/(byte*) print_str::str#5 print_str::@2/(byte*) print_str::str#0 )
  [26] if((byte) 0!=*((byte*) print_str::str#3)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [27] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [28] *((byte*) print_char_cursor#18) ← *((byte*) print_str::str#3)
  [29] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#18
  [30] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3
  to:print_str::@1
print_char: scope:[print_char]  from print_person::@1
  [31] *((byte*) print_char_cursor#18) ← (const byte) print_char::ch#0
  [32] (byte*) print_char_cursor#25 ← ++ (byte*) print_char_cursor#18
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [33] return 
  to:@return
print_dword_decimal: scope:[print_dword_decimal]  from print_person
  [34] (dword) ultoa::value#1 ← (dword) print_dword_decimal::w#0
  [35] call ultoa 
  to:print_dword_decimal::@1
print_dword_decimal::@1: scope:[print_dword_decimal]  from print_dword_decimal
  [36] phi()
  [37] call print_str 
  to:print_dword_decimal::@return
print_dword_decimal::@return: scope:[print_dword_decimal]  from print_dword_decimal::@1
  [38] return 
  to:@return
ultoa: scope:[ultoa]  from print_dword_decimal
  [39] phi()
  to:ultoa::@19_1
ultoa::@19_1: scope:[ultoa]  from ultoa
  [40] (dword) ultoa::digit_value#4 ← *((const dword[]) RADIX_DECIMAL_VALUES_LONG#0)
  to:ultoa::@7
ultoa::@7: scope:[ultoa]  from ultoa::@19_1 ultoa::@2
  [41] (dword) ultoa::digit_value#3 ← phi( ultoa::@2/(dword) ultoa::digit_value#0 ultoa::@19_1/(dword) ultoa::digit_value#4 )
  [41] (byte*) ultoa::buffer#28 ← phi( ultoa::@2/(byte*) ultoa::buffer#11 ultoa::@19_1/(const byte[$b]) decimal_digits_long#0 )
  [41] (byte) ultoa::started#8 ← phi( ultoa::@2/(byte) ultoa::started#2 ultoa::@19_1/(byte) 0 )
  [41] (dword) ultoa::value#21 ← phi( ultoa::@2/(dword) ultoa::value#16 ultoa::@19_1/(dword) ultoa::value#1 )
  [41] (byte) ultoa::digit#15 ← phi( ultoa::@2/(byte) ultoa::digit#1 ultoa::@19_1/(byte) 0 )
  [42] if((dword) ultoa::value#21>=(dword) ultoa::digit_value#3) goto ultoa::@5
  to:ultoa::@4
ultoa::@4: scope:[ultoa]  from ultoa::@6 ultoa::@7
  [43] (byte) ultoa::digit#13 ← phi( ultoa::@6/(byte) ultoa::digit#14 ultoa::@7/(byte) ultoa::digit#15 )
  [43] (byte*) ultoa::buffer#11 ← phi( ultoa::@7/(byte*) ultoa::buffer#28 ultoa::@6/(byte*) ultoa::buffer#4 )
  [43] (byte) ultoa::started#2 ← phi( ultoa::@7/(byte) ultoa::started#8 ultoa::@6/(byte) 1 )
  [43] (dword) ultoa::value#16 ← phi( ultoa::@7/(dword) ultoa::value#21 ultoa::@6/(dword) ultoa::value#0 )
  [44] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#13
  to:ultoa::@1
ultoa::@1: scope:[ultoa]  from ultoa::@4
  [45] if((byte) ultoa::digit#1<(const byte) ultoa::max_digits#1-(byte) 1) goto ultoa::@2
  to:ultoa::@3
ultoa::@3: scope:[ultoa]  from ultoa::@1
  [46] (byte~) ultoa::$4 ← (byte)(dword) ultoa::value#16
  [47] *((byte*) ultoa::buffer#11) ← *((const byte[]) DIGITS#0 + (byte~) ultoa::$4)
  [48] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11
  [49] *((byte*) ultoa::buffer#3) ← (byte) 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@3
  [50] return 
  to:@return
ultoa::@2: scope:[ultoa]  from ultoa::@1
  [51] (byte~) ultoa::$11 ← (byte) ultoa::digit#1 << (byte) 2
  [52] (dword) ultoa::digit_value#0 ← *((const dword[]) RADIX_DECIMAL_VALUES_LONG#0 + (byte~) ultoa::$11)
  [53] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5
  to:ultoa::@7
ultoa::@5: scope:[ultoa]  from ultoa::@2 ultoa::@7
  [54] (dword) ultoa::digit_value#2 ← phi( ultoa::@2/(dword) ultoa::digit_value#0 ultoa::@7/(dword) ultoa::digit_value#3 )
  [54] (byte*) ultoa::buffer#29 ← phi( ultoa::@2/(byte*) ultoa::buffer#11 ultoa::@7/(byte*) ultoa::buffer#28 )
  [54] (dword) ultoa::value#22 ← phi( ultoa::@2/(dword) ultoa::value#16 ultoa::@7/(dword) ultoa::value#21 )
  [54] (byte) ultoa::digit#14 ← phi( ultoa::@2/(byte) ultoa::digit#1 ultoa::@7/(byte) ultoa::digit#15 )
  [55] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#29
  [56] (dword) ultoa_append::value#0 ← (dword) ultoa::value#22
  [57] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#2
  [58] call ultoa_append 
  [59] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
  to:ultoa::@6
ultoa::@6: scope:[ultoa]  from ultoa::@5
  [60] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
  [61] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#29
  to:ultoa::@4
ultoa_append: scope:[ultoa_append]  from ultoa::@5
  [62] phi()
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  [63] (byte) ultoa_append::digit#2 ← phi( ultoa_append/(byte) 0 ultoa_append::@2/(byte) ultoa_append::digit#1 )
  [63] (dword) ultoa_append::value#2 ← phi( ultoa_append/(dword) ultoa_append::value#0 ultoa_append::@2/(dword) ultoa_append::value#1 )
  [64] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  [65] *((byte*) ultoa_append::buffer#0) ← *((const byte[]) DIGITS#0 + (byte) ultoa_append::digit#2)
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  [66] return 
  to:@return
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  [67] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2
  [68] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0
  to:ultoa_append::@1
