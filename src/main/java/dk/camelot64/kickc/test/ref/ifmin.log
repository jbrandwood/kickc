// Minimal if() test
byte* SCREEN = $0400;

void main() {
  byte i=0;
  do {
    if(i<50) {
      *SCREEN = i;
    }
  } while(++i<100);
}
Adding pre/post-modifier (byte) main::i ← ++ (byte) main::i
PROGRAM
  (byte*) SCREEN ← (word/signed word) 1024
proc (void()) main()
  (byte) main::i ← (byte/signed byte/word/signed word) 0
main::@1:
  (boolean~) main::$0 ← (byte) main::i < (byte/signed byte/word/signed word) 50
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  *((byte*) SCREEN) ← (byte) main::i
main::@2:
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$2 ← (byte) main::i < (byte/signed byte/word/signed word) 100
  if((boolean~) main::$2) goto main::@1
main::@return:
  return 
endproc // main()
  call main 

SYMBOLS
(byte*) SCREEN
(void()) main()
(boolean~) main::$0
(boolean~) main::$1
(boolean~) main::$2
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i

Promoting word/signed word to byte* in SCREEN ← ((byte*)) 1024
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word) 1024
  to:@1
main: scope:[main]  from
  (byte) main::i ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$0 ← (byte) main::i < (byte/signed byte/word/signed word) 50
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$2 ← (byte) main::i < (byte/signed byte/word/signed word) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@4
main::@3: scope:[main]  from main::@1
  *((byte*) SCREEN) ← (byte) main::i
  to:main::@2
main::@4: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

Removing empty block main::@4
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word) 1024
  to:@1
main: scope:[main]  from
  (byte) main::i ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$0 ← (byte) main::i < (byte/signed byte/word/signed word) 50
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$2 ← (byte) main::i < (byte/signed byte/word/signed word) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  *((byte*) SCREEN) ← (byte) main::i
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word) 1024
  to:@1
main: scope:[main]  from @1
  (byte) main::i ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$0 ← (byte) main::i < (byte/signed byte/word/signed word) 50
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$2 ← (byte) main::i < (byte/signed byte/word/signed word) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  *((byte*) SCREEN) ← (byte) main::i
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#3 ← phi( @1/(byte*) SCREEN#5 )
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#3 main::@2/(byte*) SCREEN#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte/signed byte/word/signed word) 50
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte*) SCREEN#4 ← phi( main::@1/(byte*) SCREEN#2 main::@3/(byte*) SCREEN#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$2 ← (byte) main::i#1 < (byte/signed byte/word/signed word) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  *((byte*) SCREEN#1) ← (byte) main::i#4
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#5 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#3 ← phi( @1/(byte*) SCREEN#5 )
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#3 main::@2/(byte*) SCREEN#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte/signed byte/word/signed word) 50
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte*) SCREEN#4 ← phi( main::@1/(byte*) SCREEN#2 main::@3/(byte*) SCREEN#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$2 ← (byte) main::i#1 < (byte/signed byte/word/signed word) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  *((byte*) SCREEN#1) ← (byte) main::i#4
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#5 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

INITIAL SSA SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte*) SCREEN#5
(void()) main()
(boolean~) main::$0
(boolean~) main::$1
(boolean~) main::$2
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4

Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#3 ← phi( @1/(byte*) SCREEN#5 )
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#3 main::@2/(byte*) SCREEN#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 < (byte/signed byte/word/signed word) 50
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte*) SCREEN#4 ← phi( main::@1/(byte*) SCREEN#2 main::@3/(byte*) SCREEN#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$2 ← (byte) main::i#1 < (byte/signed byte/word/signed word) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  *((byte*) SCREEN#1) ← (byte) main::i#4
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#5 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Inversing boolean not (boolean~) main::$1 ← (byte) main::i#2 >= (byte/signed byte/word/signed word) 50 from (boolean~) main::$0 ← (byte) main::i#2 < (byte/signed byte/word/signed word) 50
Succesful SSA optimization Pass2UnaryNotSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#3 ← phi( @1/(byte*) SCREEN#5 )
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#3 main::@2/(byte*) SCREEN#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$1 ← (byte) main::i#2 >= (byte/signed byte/word/signed word) 50
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte*) SCREEN#4 ← phi( main::@1/(byte*) SCREEN#2 main::@3/(byte*) SCREEN#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$2 ← (byte) main::i#1 < (byte/signed byte/word/signed word) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  *((byte*) SCREEN#1) ← (byte) main::i#4
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#5 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Not aliassing across scopes: SCREEN#3 SCREEN#5
Alias (byte) main::i#2 = (byte) main::i#4 
Alias (byte*) SCREEN#1 = (byte*) SCREEN#2 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#5 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#3 ← phi( @1/(byte*) SCREEN#0 )
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#3 main::@2/(byte*) SCREEN#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$1 ← (byte) main::i#2 >= (byte/signed byte/word/signed word) 50
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte*) SCREEN#4 ← phi( main::@1/(byte*) SCREEN#1 main::@3/(byte*) SCREEN#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#2 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$2 ← (byte) main::i#1 < (byte/signed byte/word/signed word) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  *((byte*) SCREEN#1) ← (byte) main::i#2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Not aliassing across scopes: SCREEN#3 SCREEN#0
Alias (byte) main::i#2 = (byte) main::i#3 
Alias (byte*) SCREEN#1 = (byte*) SCREEN#4 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#3 ← phi( @1/(byte*) SCREEN#0 )
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#3 main::@2/(byte*) SCREEN#1 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$1 ← (byte) main::i#2 >= (byte/signed byte/word/signed word) 50
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$2 ← (byte) main::i#1 < (byte/signed byte/word/signed word) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  *((byte*) SCREEN#1) ← (byte) main::i#2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Not aliassing across scopes: SCREEN#3 SCREEN#0
Self Phi Eliminated (byte*) SCREEN#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#3 ← phi( @1/(byte*) SCREEN#0 )
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#3 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$1 ← (byte) main::i#2 >= (byte/signed byte/word/signed word) 50
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$2 ← (byte) main::i#1 < (byte/signed byte/word/signed word) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  *((byte*) SCREEN#1) ← (byte) main::i#2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Redundant Phi (byte*) SCREEN#3 (byte*) SCREEN#0
Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#3
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  to:@1
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$1 ← (byte) main::i#2 >= (byte/signed byte/word/signed word) 50
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$2 ← (byte) main::i#1 < (byte/signed byte/word/signed word) 100
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  *((byte*) SCREEN#0) ← (byte) main::i#2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Simple Condition (boolean~) main::$1 if((byte) main::i#2>=(byte/signed byte/word/signed word) 50) goto main::@2
Simple Condition (boolean~) main::$2 if((byte) main::i#1<(byte/signed byte/word/signed word) 100) goto main::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  to:@1
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  if((byte) main::i#2>=(byte/signed byte/word/signed word) 50) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1<(byte/signed byte/word/signed word) 100) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  *((byte*) SCREEN#0) ← (byte) main::i#2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Constant (const byte*) SCREEN#0 = ((byte*))1024
Constant (const byte) main::i#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@2/(byte) main::i#1 )
  if((byte) main::i#2>=(byte/signed byte/word/signed word) 50) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1<(byte/signed byte/word/signed word) 100) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  *((const byte*) SCREEN#0) ← (byte) main::i#2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte/signed byte/word/signed word) 0
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@2/(byte) main::i#1 )
  if((byte) main::i#2>=(byte/signed byte/word/signed word) 50) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1<(byte/signed byte/word/signed word) 100) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  *((const byte*) SCREEN#0) ← (byte) main::i#2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 = ((byte*))(word/signed word) 1024
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#1
(byte) main::i#2

Block Sequence Planned @begin @1 @end main main::@1 main::@3 main::@2 main::@return 
Added new block during phi lifting main::@5(between main::@2 and main::@1)
Block Sequence Planned @begin @1 @end main main::@1 main::@3 main::@2 main::@return main::@5 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@5/(byte~) main::i#5 )
  if((byte) main::i#2>=(byte/signed byte/word/signed word) 50) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  *((const byte*) SCREEN#0) ← (byte) main::i#2
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1<(byte/signed byte/word/signed word) 100) goto main::@5
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
main::@5: scope:[main]  from main::@2
  (byte~) main::i#5 ← (byte) main::i#1
  to:main::@1

Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  [0] phi() [ ]
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ]
  [2] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ]
main: scope:[main]  from @1
  [4] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@5/(byte~) main::i#5 ) [ main::i#2 ]
  [6] if((byte) main::i#2>=(byte/signed byte/word/signed word) 50) goto main::@2 [ main::i#2 ]
  to:main::@3
main::@3: scope:[main]  from main::@1
  [7] *((const byte*) SCREEN#0) ← (byte) main::i#2 [ main::i#2 ]
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  [9] if((byte) main::i#1<(byte/signed byte/word/signed word) 100) goto main::@5 [ main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return  [ ]
  to:@return
main::@5: scope:[main]  from main::@2
  [11] (byte~) main::i#5 ← (byte) main::i#1 [ main::i#5 ]
  to:main::@1

Created 1 initial phi equivalence classes
Coalesced [11] main::i#5 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) main::@5
Block Sequence Planned @begin @1 @end main main::@1 main::@3 main::@2 main::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - BEFORE EFFECTIVE LIVE RANGES
@begin: scope:[]  from
  [0] phi() [ ]
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ]
  [2] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ]
main: scope:[main]  from @1
  [4] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@2/(byte) main::i#1 ) [ main::i#2 ]
  [6] if((byte) main::i#2>=(byte/signed byte/word/signed word) 50) goto main::@2 [ main::i#2 ]
  to:main::@3
main::@3: scope:[main]  from main::@1
  [7] *((const byte*) SCREEN#0) ← (byte) main::i#2 [ main::i#2 ]
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  [9] if((byte) main::i#1<(byte/signed byte/word/signed word) 100) goto main::@1 [ main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return  [ ]
  to:@return

CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ] ( )
main: scope:[main]  from @1
  [4] phi() [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@2/(byte) main::i#1 ) [ main::i#2 ] ( main:2 [ main::i#2 ] )
  [6] if((byte) main::i#2>=(byte/signed byte/word/signed word) 50) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] )
  to:main::@3
main::@3: scope:[main]  from main::@1
  [7] *((const byte*) SCREEN#0) ← (byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] )
  [9] if((byte) main::i#1<(byte/signed byte/word/signed word) 100) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] )
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return  [ ] ( main:2 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @begin @end 
main dominated by  @1 @begin main 
main::@1 dominated by  @1 @begin main::@1 main 
main::@3 dominated by  @1 @begin main::@1 main main::@3 
main::@2 dominated by  @1 @begin main::@1 main::@2 main 
main::@return dominated by  main::@return @1 @begin main::@1 main::@2 main 

Found back edge: Loop head: main::@1 tails: main::@2 blocks: null
Populated: Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 
NATURAL LOOPS
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 14.666666666666666

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label i = 2
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #0
    sta i
    jmp b1
  //SEG12 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG13 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [6] if((byte) main::i#2>=(byte/signed byte/word/signed word) 50) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- zpby1_ge_coby1_then_la1 
    lda i
    cmp #$32
    bcs b2
    jmp b3
  //SEG16 main::@3
  b3:
  //SEG17 [7] *((const byte*) SCREEN#0) ← (byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- _deref_cowo1=zpby1 
    lda i
    sta SCREEN
    jmp b2
  //SEG18 main::@2
  b2:
  //SEG19 [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- zpby1=_inc_zpby1 
    inc i
  //SEG20 [9] if((byte) main::i#1<(byte/signed byte/word/signed word) 100) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- zpby1_lt_coby1_then_la1 
    lda i
    cmp #$64
    bcc b1_from_b2
    jmp breturn
  //SEG21 main::@return
  breturn:
  //SEG22 [10] return  [ ] ( main:2 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 31.17: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 338 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 338 combination 
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuxx=coby1 
    ldx #0
    jmp b1
  //SEG12 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG13 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG14 main::@1
  b1:
  //SEG15 [6] if((byte) main::i#2>=(byte/signed byte/word/signed word) 50) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- vbuxx_ge_coby1_then_la1 
    cpx #$32
    bcs b2
  //SEG16 main::@3
  b3:
  //SEG17 [7] *((const byte*) SCREEN#0) ← (byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- _deref_cowo1=vbuxx 
    stx SCREEN
  //SEG18 main::@2
  b2:
  //SEG19 [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG20 [9] if((byte) main::i#1<(byte/signed byte/word/signed word) 100) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx_lt_coby1_then_la1 
    cpx #$64
    bcc b1_from_b2
  //SEG21 main::@return
  breturn:
  //SEG22 [10] return  [ ] ( main:2 [ ] )
    rts
}

Replacing label b1_from_b2 with b1
Removing instruction bbegin:
Removing instruction b1_from_bbegin:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuxx=coby1 
    ldx #0
    jmp b1
  //SEG12 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG13 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG14 main::@1
  b1:
  //SEG15 [6] if((byte) main::i#2>=(byte/signed byte/word/signed word) 50) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- vbuxx_ge_coby1_then_la1 
    cpx #$32
    bcs b2
  //SEG16 main::@3
  b3:
  //SEG17 [7] *((const byte*) SCREEN#0) ← (byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- _deref_cowo1=vbuxx 
    stx SCREEN
  //SEG18 main::@2
  b2:
  //SEG19 [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG20 [9] if((byte) main::i#1<(byte/signed byte/word/signed word) 100) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx_lt_coby1_then_la1 
    cpx #$64
    bcc b1
  //SEG21 main::@return
  breturn:
  //SEG22 [10] return  [ ] ( main:2 [ ] )
    rts
}

Removing instruction b1:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b3:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuxx=coby1 
    ldx #0
    jmp b1
  //SEG12 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG13 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG14 main::@1
  b1:
  //SEG15 [6] if((byte) main::i#2>=(byte/signed byte/word/signed word) 50) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- vbuxx_ge_coby1_then_la1 
    cpx #$32
    bcs b2
  //SEG16 main::@3
  //SEG17 [7] *((const byte*) SCREEN#0) ← (byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- _deref_cowo1=vbuxx 
    stx SCREEN
  //SEG18 main::@2
  b2:
  //SEG19 [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG20 [9] if((byte) main::i#1<(byte/signed byte/word/signed word) 100) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx_lt_coby1_then_la1 
    cpx #$64
    bcc b1
  //SEG21 main::@return
  //SEG22 [10] return  [ ] ( main:2 [ ] )
    rts
}

Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuxx=coby1 
    ldx #0
  //SEG12 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG13 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG14 main::@1
  b1:
  //SEG15 [6] if((byte) main::i#2>=(byte/signed byte/word/signed word) 50) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- vbuxx_ge_coby1_then_la1 
    cpx #$32
    bcs b2
  //SEG16 main::@3
  //SEG17 [7] *((const byte*) SCREEN#0) ← (byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- _deref_cowo1=vbuxx 
    stx SCREEN
  //SEG18 main::@2
  b2:
  //SEG19 [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG20 [9] if((byte) main::i#1<(byte/signed byte/word/signed word) 100) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx_lt_coby1_then_la1 
    cpx #$64
    bcc b1
  //SEG21 main::@return
  //SEG22 [10] return  [ ] ( main:2 [ ] )
    rts
}

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word) 1024
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 14.666666666666666

reg byte x [ main::i#2 main::i#1 ]

FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuxx=coby1 
    ldx #0
  //SEG12 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG13 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG14 main::@1
  b1:
  //SEG15 [6] if((byte) main::i#2>=(byte/signed byte/word/signed word) 50) goto main::@2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- vbuxx_ge_coby1_then_la1 
    cpx #$32
    bcs b2
  //SEG16 main::@3
  //SEG17 [7] *((const byte*) SCREEN#0) ← (byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- _deref_cowo1=vbuxx 
    stx SCREEN
  //SEG18 main::@2
  b2:
  //SEG19 [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG20 [9] if((byte) main::i#1<(byte/signed byte/word/signed word) 100) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx_lt_coby1_then_la1 
    cpx #$64
    bcc b1
  //SEG21 main::@return
  //SEG22 [10] return  [ ] ( main:2 [ ] )
    rts
}

