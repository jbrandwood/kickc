
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (word) main::w#0 ← (word){ (const byte) main::b, (byte) 0 }
  (word~) main::$3 ← (word){ (number) 1, (number) 1 }
  (word~) main::$0 ← (word~) main::$3 + (word) main::w#0
  (word~) main::$4 ← (word){ (number) 0, (number) 0 }
  (word~) main::$1 ← (word~) main::$0 + (word~) main::$4
  (word) main::w2#0 ← (word~) main::$1
  (byte*) main::sc#0 ← ((byte*)) (word) main::w2#0
  *((byte*) main::sc#0) ← *((const byte*) main::bs + (number) 1)
  (bool~) main::$2 ← *((const byte*) main::pos) == (byte) 'm'
  if((bool~) main::$2) goto main::@1
  to:main::@2
main::@1: scope:[main]  from main
  *((const byte*) main::BG_COLOR) ← (number) 5
  to:main::@return
main::@2: scope:[main]  from main
  *((const byte*) main::BG_COLOR) ← (number) 2
  to:main::@return
main::@return: scope:[main]  from main::@1 main::@2
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(word~) main::$0
(word~) main::$1
(bool~) main::$2
(word~) main::$3
(word~) main::$4
(label) main::@1
(label) main::@2
(label) main::@return
(const byte*) main::BG_COLOR = (byte*)(number) $d021
(const byte) main::b = (byte) 4
(const byte*) main::bs[]  = { (byte) 'c', (byte) 'm' }
(const byte*) main::pos = (byte*)(number) $501
(byte*) main::sc
(byte*) main::sc#0
(word) main::w
(word) main::w#0
(word) main::w2
(word) main::w2#0

Fixing inline constructor with main::$5 ← (byte)main::b w= (byte)0
Fixing inline constructor with main::$6 ← (byte)1 w= (byte)1
Fixing inline constructor with main::$7 ← (byte)0 w= (byte)0
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) 1 in *((byte*) main::sc#0) ← *((const byte*) main::bs + (number) 1)
Adding number conversion cast (unumber) 5 in *((const byte*) main::BG_COLOR) ← (number) 5
Adding number conversion cast (unumber) 2 in *((const byte*) main::BG_COLOR) ← (number) 2
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) main::sc#0 ← (byte*)(word) main::w2#0
Inlining cast *((const byte*) main::BG_COLOR) ← (unumber)(number) 5
Inlining cast *((const byte*) main::BG_COLOR) ← (unumber)(number) 2
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1281
Simplifying constant pointer cast (byte*) 53281
Simplifying constant integer cast (const byte) main::b
Simplifying constant integer cast (byte) 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 5
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::w#0 = main::$5 
Alias main::$3 = main::$6 
Alias main::$4 = main::$7 
Alias main::w2#0 = main::$1 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$2 [8] if(*((const byte*) main::pos)==(byte) 'm') goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [0] (word) main::w#0 ← (const byte) main::b w= (byte) 0
Constant right-side identified [1] (word~) main::$3 ← (byte) 1 w= (byte) 1
Constant right-side identified [3] (word~) main::$4 ← (byte) 0 w= (byte) 0
Successful SSA optimization Pass2ConstantRValueConsolidation
Simplifying constant evaluating to zero (byte) 0*(number) $100+(byte) 0 in [3] (word~) main::$4 ← (byte) 0*(number) $100+(byte) 0
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::b*$100 in [0] (word) main::w#0 ← (const byte) main::b*(number) $100+(byte) 0
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) main::b*$100 in [0] (word) main::w#0 ← (const byte) main::b*(number) $100
Adding number conversion cast (unumber) $100 in [0] (word) main::w#0 ← ((unumber)) (const byte) main::b*(number) $100
Adding number conversion cast (unumber) 1*$100+1 in [1] (word~) main::$3 ← (byte) 1*(number) $100+(byte) 1
Adding number conversion cast (unumber) 1*$100 in [1] (word~) main::$3 ← ((unumber)) (byte) 1*(number) $100+(byte) 1
Adding number conversion cast (unumber) $100 in [1] (word~) main::$3 ← ((unumber)) (unumber)(byte) 1*(number) $100+(byte) 1
Adding number conversion cast (unumber) 0 in [3] (word~) main::$4 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast [0] (word) main::w#0 ← (unumber)(const byte) main::b*(unumber)(number) $100
Inlining cast [1] (word~) main::$3 ← (unumber)(unumber)(byte) 1*(unumber)(number) $100+(byte) 1
Inlining cast [3] (word~) main::$4 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast (const byte) main::b*(unumber)(number) $100
Simplifying constant integer cast $100
Simplifying constant integer cast (unumber)(byte) 1*(unumber)(number) $100+(byte) 1
Simplifying constant integer cast (byte) 1*(unumber)(number) $100
Simplifying constant integer cast $100
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant (const word) main::w#0 = main::b*$100
Constant (const word) main::$3 = 1*$100+1
Constant (const word) main::$4 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::$0 in [4] (word) main::w2#0 ← (word~) main::$0 + (const word) main::$4
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const word) main::$4
Successful SSA optimization PassNEliminateUnusedVars
Alias main::w2#0 = main::$0 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [0] (word) main::w2#0 ← (const word) main::$3 + (const word) main::w#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) main::w2#0 = main::$3+main::w#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) main::sc#0 = (byte*)main::w2#0
Successful SSA optimization Pass2ConstantIdentification
Constant inlined main::$3 = (byte) 1*(word) $100+(byte) 1
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::bs+1)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const byte*) main::sc#0) ← *((const byte*) main::bs+(byte) 1)
  [1] if(*((const byte*) main::pos)==(byte) 'm') goto main::@1
  to:main::@2
main::@2: scope:[main]  from main
  [2] *((const byte*) main::BG_COLOR) ← (byte) 2
  to:main::@return
main::@return: scope:[main]  from main::@1 main::@2
  [3] return 
  to:@return
main::@1: scope:[main]  from main
  [4] *((const byte*) main::BG_COLOR) ← (byte) 5
  to:main::@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte*) main::sc
(word) main::w
(word) main::w2

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    // constant byte array
    .const b = 4
    .const w = b*$100
    .const w2 = 1*$100+1+w
    // Test the result
    .label pos = $501
    .label BG_COLOR = $d021
    // constant inline words inside expression
    .label sc = w2
    // [0] *((const byte*) main::sc#0) ← *((const byte*) main::bs+(byte) 1) -- _deref_pbuc1=_deref_pbuc2 
    // implicit cast to (byte*)
    lda bs+1
    sta sc
    // [1] if(*((const byte*) main::pos)==(byte) 'm') goto main::@1 -- _deref_pbuc1_eq_vbuc2_then_la1 
    lda #'m'
    cmp pos
    beq __b1
    jmp __b2
    // main::@2
  __b2:
    // [2] *((const byte*) main::BG_COLOR) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BG_COLOR
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@1
  __b1:
    // [4] *((const byte*) main::BG_COLOR) ← (byte) 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta BG_COLOR
    jmp __breturn
    bs: .byte 'c', 'm'
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const byte*) main::sc#0) ← *((const byte*) main::bs+(byte) 1) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] if(*((const byte*) main::pos)==(byte) 'm') goto main::@1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((const byte*) main::BG_COLOR) ← (byte) 2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *((const byte*) main::BG_COLOR) ← (byte) 5 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 43 combination 
Uplifting [] best 43 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    // constant byte array
    .const b = 4
    .const w = b*$100
    .const w2 = 1*$100+1+w
    // Test the result
    .label pos = $501
    .label BG_COLOR = $d021
    // constant inline words inside expression
    .label sc = w2
    // [0] *((const byte*) main::sc#0) ← *((const byte*) main::bs+(byte) 1) -- _deref_pbuc1=_deref_pbuc2 
    // implicit cast to (byte*)
    lda bs+1
    sta sc
    // [1] if(*((const byte*) main::pos)==(byte) 'm') goto main::@1 -- _deref_pbuc1_eq_vbuc2_then_la1 
    lda #'m'
    cmp pos
    beq __b1
    jmp __b2
    // main::@2
  __b2:
    // [2] *((const byte*) main::BG_COLOR) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BG_COLOR
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@1
  __b1:
    // [4] *((const byte*) main::BG_COLOR) ← (byte) 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta BG_COLOR
    jmp __breturn
    bs: .byte 'c', 'm'
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(const byte*) main::BG_COLOR = (byte*) 53281
(const byte) main::b = (byte) 4
(const byte*) main::bs[]  = { (byte) 'c', (byte) 'm' }
(const byte*) main::pos = (byte*) 1281
(byte*) main::sc
(const byte*) main::sc#0 sc = (byte*)(const word) main::w2#0
(word) main::w
(const word) main::w#0 w = (const byte) main::b*(word) $100
(word) main::w2
(const word) main::w2#0 w2 = (byte) 1*(word) $100+(byte) 1+(const word) main::w#0



FINAL ASSEMBLER
Score: 40

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    // constant byte array
    .const b = 4
    .const w = b*$100
    .const w2 = 1*$100+1+w
    // Test the result
    .label pos = $501
    .label BG_COLOR = $d021
    // constant inline words inside expression
    .label sc = w2
    // *sc = bs[1]
    // [0] *((const byte*) main::sc#0) ← *((const byte*) main::bs+(byte) 1) -- _deref_pbuc1=_deref_pbuc2 
    // implicit cast to (byte*)
    lda bs+1
    sta sc
    // if(*pos=='m')
    // [1] if(*((const byte*) main::pos)==(byte) 'm') goto main::@1 -- _deref_pbuc1_eq_vbuc2_then_la1 
    lda #'m'
    cmp pos
    beq __b1
    // main::@2
    // *BG_COLOR = 2
    // [2] *((const byte*) main::BG_COLOR) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta BG_COLOR
    // main::@return
    // }
    // [3] return 
    rts
    // main::@1
  __b1:
    // *BG_COLOR = 5
    // [4] *((const byte*) main::BG_COLOR) ← (byte) 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta BG_COLOR
    rts
    bs: .byte 'c', 'm'
}
  // File Data

