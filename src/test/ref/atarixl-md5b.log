Inlined call call print32(print::i)
Inlined call call print32(print::a)
Inlined call call print32(print::b)
Inlined call call print32(print::c)
Inlined call call println
Inlined call call __init

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::s#0 = (char *)$400
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::s#2 = phi( main/main::s#0, main::@2/main::s#1 )
  main::$1 = main::s#2 < $800
  if(main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  main::s#3 = phi( main::@1/main::s#2 )
  *main::s#3 = ' '
  main::s#1 = ++ main::s#3
  to:main::@1
main::@3: scope:[main]  from main::@1
  call md5
  to:main::@5
main::@5: scope:[main]  from main::@3
  to:main::@4
main::@4: scope:[main]  from main::@4 main::@5
  to:main::@4
main::@return: scope:[main]  from
  return 
  to:@return

void print(char i , char a , char b , char c)
print: scope:[print]  from md5::@2 md5::@3
  print::c#8 = phi( md5::@2/print::c#0, md5::@3/print::c#1 )
  print::b#6 = phi( md5::@2/print::b#0, md5::@3/print::b#1 )
  print::a#4 = phi( md5::@2/print::a#0, md5::@3/print::a#1 )
  print::i#2 = phi( md5::@2/print::i#0, md5::@3/print::i#1 )
  print::print321_l#0 = print::i#2
  to:print::print321
print::print321: scope:[print]  from print
  print::c#7 = phi( print/print::c#8 )
  print::b#5 = phi( print/print::b#6 )
  print::a#3 = phi( print/print::a#4 )
  print::print321_l#1 = phi( print/print::print321_l#0 )
  print::print321_$0 = print::print321_l#1 / $10
  line[idx] = HEX[print::print321_$0]
  idx = ++ idx
  print::print321_$1 = print::print321_l#1 & $f
  line[idx] = HEX[print::print321_$1]
  idx = ++ idx
  line[idx] = ' '
  idx = ++ idx
  to:print::@1
print::@1: scope:[print]  from print::print321
  print::c#6 = phi( print::print321/print::c#7 )
  print::b#4 = phi( print::print321/print::b#5 )
  print::a#2 = phi( print::print321/print::a#3 )
  print::print322_l#0 = print::a#2
  to:print::print322
print::print322: scope:[print]  from print::@1
  print::c#5 = phi( print::@1/print::c#6 )
  print::b#3 = phi( print::@1/print::b#4 )
  print::print322_l#1 = phi( print::@1/print::print322_l#0 )
  print::print322_$0 = print::print322_l#1 / $10
  line[idx] = HEX[print::print322_$0]
  idx = ++ idx
  print::print322_$1 = print::print322_l#1 & $f
  line[idx] = HEX[print::print322_$1]
  idx = ++ idx
  line[idx] = ' '
  idx = ++ idx
  to:print::@2
print::@2: scope:[print]  from print::print322
  print::c#4 = phi( print::print322/print::c#5 )
  print::b#2 = phi( print::print322/print::b#3 )
  print::print323_l#0 = print::b#2
  to:print::print323
print::print323: scope:[print]  from print::@2
  print::c#3 = phi( print::@2/print::c#4 )
  print::print323_l#1 = phi( print::@2/print::print323_l#0 )
  print::print323_$0 = print::print323_l#1 / $10
  line[idx] = HEX[print::print323_$0]
  idx = ++ idx
  print::print323_$1 = print::print323_l#1 & $f
  line[idx] = HEX[print::print323_$1]
  idx = ++ idx
  line[idx] = ' '
  idx = ++ idx
  to:print::@3
print::@3: scope:[print]  from print::print323
  print::c#2 = phi( print::print323/print::c#3 )
  print::print324_l#0 = print::c#2
  to:print::print324
print::print324: scope:[print]  from print::@3
  print::print324_l#1 = phi( print::@3/print::print324_l#0 )
  print::print324_$0 = print::print324_l#1 / $10
  line[idx] = HEX[print::print324_$0]
  idx = ++ idx
  print::print324_$1 = print::print324_l#1 & $f
  line[idx] = HEX[print::print324_$1]
  idx = ++ idx
  line[idx] = ' '
  idx = ++ idx
  to:print::println1
print::println1: scope:[print]  from print::print324
  line = line + $28
  idx = 0
  to:print::@return
print::@return: scope:[print]  from print::println1
  return 
  to:@return

void md5()
md5: scope:[md5]  from main::@3
  md5::a#0 = $67
  md5::b#0 = $ef
  md5::c#0 = $98
  md5::i#0 = 0
  to:md5::@1
md5::@1: scope:[md5]  from md5 md5::@6
  md5::c#4 = phi( md5/md5::c#0, md5::@6/md5::c#7 )
  md5::b#4 = phi( md5/md5::b#0, md5::@6/md5::b#7 )
  md5::a#5 = phi( md5/md5::a#0, md5::@6/md5::a#7 )
  md5::i#2 = phi( md5/md5::i#0, md5::@6/md5::i#1 )
  md5::$0 = md5::i#2 < 4
  if(md5::$0) goto md5::@2
  to:md5::@return
md5::@2: scope:[md5]  from md5::@1
  md5::c#2 = phi( md5::@1/md5::c#4 )
  md5::b#2 = phi( md5::@1/md5::b#4 )
  md5::a#3 = phi( md5::@1/md5::a#5 )
  md5::i#3 = phi( md5::@1/md5::i#2 )
  print::i#0 = md5::i#3
  print::a#0 = md5::a#3
  print::b#0 = md5::b#2
  print::c#0 = md5::c#2
  call print
  to:md5::@5
md5::@5: scope:[md5]  from md5::@2
  md5::a#6 = phi( md5::@2/md5::a#3 )
  md5::b#6 = phi( md5::@2/md5::b#2 )
  md5::c#6 = phi( md5::@2/md5::c#2 )
  md5::i#4 = phi( md5::@2/md5::i#3 )
  md5::$2 = md5::i#4 & 1
  md5::$6 = 0 != md5::$2
  md5::$3 = ! md5::$6
  if(md5::$3) goto md5::@3
  to:md5::@4
md5::@3: scope:[md5]  from md5::@4 md5::@5
  md5::i#5 = phi( md5::@4/md5::i#7, md5::@5/md5::i#4 )
  md5::b#3 = phi( md5::@4/md5::b#5, md5::@5/md5::b#6 )
  md5::c#3 = phi( md5::@4/md5::c#5, md5::@5/md5::c#6 )
  md5::temp#0 = md5::c#3
  md5::c#1 = md5::b#3
  md5::$4 = md5::b#3 + 1
  md5::b#1 = md5::$4
  md5::a#1 = md5::temp#0
  print::i#1 = md5::i#5
  print::a#1 = md5::a#1
  print::b#1 = md5::b#1
  print::c#1 = md5::c#1
  call print
  to:md5::@6
md5::@6: scope:[md5]  from md5::@3
  md5::c#7 = phi( md5::@3/md5::c#1 )
  md5::b#7 = phi( md5::@3/md5::b#1 )
  md5::a#7 = phi( md5::@3/md5::a#1 )
  md5::i#6 = phi( md5::@3/md5::i#5 )
  md5::i#1 = ++ md5::i#6
  to:md5::@1
md5::@4: scope:[md5]  from md5::@5
  md5::i#7 = phi( md5::@5/md5::i#4 )
  md5::b#5 = phi( md5::@5/md5::b#6 )
  md5::c#5 = phi( md5::@5/md5::c#6 )
  md5::a#4 = phi( md5::@5/md5::a#6 )
  md5::a#2 = ++ md5::a#4
  to:md5::@3
md5::@return: scope:[md5]  from md5::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  line = (char *)$400
  idx = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
__constant char HEX[] = "0123456789abcdef"
void __start()
__loadstore char idx
__loadstore char *line
void main()
bool main::$1
char *main::s
char *main::s#0
char *main::s#1
char *main::s#2
char *main::s#3
void md5()
bool md5::$0
number md5::$2
bool md5::$3
number md5::$4
bool md5::$6
char md5::a
char md5::a#0
char md5::a#1
char md5::a#2
char md5::a#3
char md5::a#4
char md5::a#5
char md5::a#6
char md5::a#7
char md5::b
char md5::b#0
char md5::b#1
char md5::b#2
char md5::b#3
char md5::b#4
char md5::b#5
char md5::b#6
char md5::b#7
char md5::c
char md5::c#0
char md5::c#1
char md5::c#2
char md5::c#3
char md5::c#4
char md5::c#5
char md5::c#6
char md5::c#7
char md5::i
char md5::i#0
char md5::i#1
char md5::i#2
char md5::i#3
char md5::i#4
char md5::i#5
char md5::i#6
char md5::i#7
char md5::temp
char md5::temp#0
void print(char i , char a , char b , char c)
char print::a
char print::a#0
char print::a#1
char print::a#2
char print::a#3
char print::a#4
char print::b
char print::b#0
char print::b#1
char print::b#2
char print::b#3
char print::b#4
char print::b#5
char print::b#6
char print::c
char print::c#0
char print::c#1
char print::c#2
char print::c#3
char print::c#4
char print::c#5
char print::c#6
char print::c#7
char print::c#8
char print::i
char print::i#0
char print::i#1
char print::i#2
number print::print321_$0
number print::print321_$1
char print::print321_l
char print::print321_l#0
char print::print321_l#1
number print::print322_$0
number print::print322_$1
char print::print322_l
char print::print322_l#0
char print::print322_l#1
number print::print323_$0
number print::print323_$1
char print::print323_l
char print::print323_l#0
char print::print323_l#1
number print::print324_$0
number print::print324_$1
char print::print324_l
char print::print324_l#0
char print::print324_l#1

Adding number conversion cast (unumber) $800 in main::$1 = main::s#2 < $800
Adding number conversion cast (unumber) $10 in print::print321_$0 = print::print321_l#1 / $10
Adding number conversion cast (unumber) print::print321_$0 in print::print321_$0 = print::print321_l#1 / (unumber)$10
Adding number conversion cast (unumber) $f in print::print321_$1 = print::print321_l#1 & $f
Adding number conversion cast (unumber) print::print321_$1 in print::print321_$1 = print::print321_l#1 & (unumber)$f
Adding number conversion cast (unumber) $10 in print::print322_$0 = print::print322_l#1 / $10
Adding number conversion cast (unumber) print::print322_$0 in print::print322_$0 = print::print322_l#1 / (unumber)$10
Adding number conversion cast (unumber) $f in print::print322_$1 = print::print322_l#1 & $f
Adding number conversion cast (unumber) print::print322_$1 in print::print322_$1 = print::print322_l#1 & (unumber)$f
Adding number conversion cast (unumber) $10 in print::print323_$0 = print::print323_l#1 / $10
Adding number conversion cast (unumber) print::print323_$0 in print::print323_$0 = print::print323_l#1 / (unumber)$10
Adding number conversion cast (unumber) $f in print::print323_$1 = print::print323_l#1 & $f
Adding number conversion cast (unumber) print::print323_$1 in print::print323_$1 = print::print323_l#1 & (unumber)$f
Adding number conversion cast (unumber) $10 in print::print324_$0 = print::print324_l#1 / $10
Adding number conversion cast (unumber) print::print324_$0 in print::print324_$0 = print::print324_l#1 / (unumber)$10
Adding number conversion cast (unumber) $f in print::print324_$1 = print::print324_l#1 & $f
Adding number conversion cast (unumber) print::print324_$1 in print::print324_$1 = print::print324_l#1 & (unumber)$f
Adding number conversion cast (unumber) $28 in line = line + $28
Adding number conversion cast (unumber) 0 in idx = 0
Adding number conversion cast (unumber) 4 in md5::$0 = md5::i#2 < 4
Adding number conversion cast (unumber) 1 in md5::$2 = md5::i#4 & 1
Adding number conversion cast (unumber) md5::$2 in md5::$2 = md5::i#4 & (unumber)1
Adding number conversion cast (unumber) 0 in md5::$6 = 0 != md5::$2
Adding number conversion cast (unumber) 1 in md5::$4 = md5::b#3 + 1
Adding number conversion cast (unumber) md5::$4 in md5::$4 = md5::b#3 + (unumber)1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast idx = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast $800
Simplifying constant integer cast $10
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast $f
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant pointer cast (char *) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (unsigned int) $800
Finalized unsigned number type (char) $10
Finalized unsigned number type (char) $f
Finalized unsigned number type (char) $10
Finalized unsigned number type (char) $f
Finalized unsigned number type (char) $10
Finalized unsigned number type (char) $f
Finalized unsigned number type (char) $10
Finalized unsigned number type (char) $f
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in print::print321_$0 = print::print321_l#1 / $10
Inferred type updated to char in print::print321_$1 = print::print321_l#1 & $f
Inferred type updated to char in print::print322_$0 = print::print322_l#1 / $10
Inferred type updated to char in print::print322_$1 = print::print322_l#1 & $f
Inferred type updated to char in print::print323_$0 = print::print323_l#1 / $10
Inferred type updated to char in print::print323_$1 = print::print323_l#1 & $f
Inferred type updated to char in print::print324_$0 = print::print324_l#1 / $10
Inferred type updated to char in print::print324_$1 = print::print324_l#1 & $f
Inferred type updated to char in md5::$2 = md5::i#4 & 1
Inferred type updated to char in md5::$4 = md5::b#3 + 1
Inversing boolean not [72] md5::$3 = 0 == md5::$2 from [71] md5::$6 = 0 != md5::$2
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::s#2 = main::s#3 
Alias print::print321_l#0 = print::i#2 print::print321_l#1 
Alias print::a#2 = print::a#3 print::a#4 print::print322_l#0 print::print322_l#1 
Alias print::b#2 = print::b#5 print::b#6 print::b#4 print::b#3 print::print323_l#0 print::print323_l#1 
Alias print::c#2 = print::c#7 print::c#8 print::c#6 print::c#5 print::c#4 print::c#3 print::print324_l#0 print::print324_l#1 
Alias md5::i#2 = md5::i#3 md5::i#4 md5::i#7 
Alias md5::a#3 = md5::a#5 md5::a#6 md5::a#4 
Alias md5::b#2 = md5::b#4 md5::b#6 md5::b#5 
Alias md5::c#2 = md5::c#4 md5::c#6 md5::c#5 
Alias md5::a#1 = md5::temp#0 md5::c#3 md5::a#7 
Alias md5::c#1 = md5::b#3 md5::c#7 
Alias md5::b#1 = md5::$4 md5::b#7 
Alias md5::i#5 = md5::i#6 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (phi-usage) md5::c#1 = md5::b#2 
Alias md5::a#1 = md5::c#2 
Alias md5::i#2 = md5::i#5 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (phi-usage) md5::c#1 = md5::b#2 
Identical Phi Values md5::c#1 md5::b#2
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$1 [3] if(main::s#2<$800) goto main::@2
Simple Condition md5::$0 [50] if(md5::i#2<4) goto md5::@2
Simple Condition md5::$3 [58] if(0==md5::$2) goto md5::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::s#0 = (char *) 1024
Constant md5::a#0 = $67
Constant md5::b#0 = $ef
Constant md5::c#0 = $98
Constant md5::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Eliminating unused variable md5::a#2 and assignment [57] md5::a#2 = ++ md5::a#3
Successful SSA optimization PassNEliminateUnusedVars
Rewriting division to use shift [6] print::print321_$0 = print::print321_l#0 / $10
Rewriting division to use shift [14] print::print322_$0 = print::a#2 / $10
Rewriting division to use shift [22] print::print323_$0 = print::b#2 / $10
Rewriting division to use shift [30] print::print324_$0 = print::c#2 / $10
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings main::s#0
Inlining constant with var siblings md5::a#0
Inlining constant with var siblings md5::b#0
Inlining constant with var siblings md5::i#0
Constant inlined main::s#0 = (char *) 1024
Constant inlined md5::b#0 = $ef
Constant inlined md5::i#0 = 0
Constant inlined md5::a#0 = $67
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of md5
Adding NOP phi() at start of md5::@4
Adding NOP phi() at start of print::@1
Adding NOP phi() at start of print::@2
Adding NOP phi() at start of print::@3
CALL GRAPH
Calls in [__start] to main:4 
Calls in [main] to md5:11 
Calls in [md5] to print:29 print:42 

Created 9 initial phi equivalence classes
Coalesced [16] main::s#4 = main::s#1
Coalesced [25] print::print321_l#2 = print::i#0
Coalesced [26] print::a#5 = print::a#0
Coalesced [27] print::b#7 = print::b#0
Coalesced [28] print::c#9 = print::c#0
Coalesced [38] print::print321_l#3 = print::i#1
Coalesced [39] print::a#6 = print::a#1
Coalesced [40] print::b#8 = print::b#1
Coalesced [41] print::c#10 = print::c#1
Coalesced [44] md5::i#8 = md5::i#1
Not coalescing [45] md5::a#8 = md5::a#1
Not coalescing [46] md5::b#8 = md5::b#1
Not coalescing [47] md5::a#9 = md5::b#2
Coalesced down to 10 phi equivalence classes
Culled Empty Block label __start::@2
Culled Empty Block label main::@5
Culled Empty Block label print::@1
Culled Empty Block label print::@2
Culled Empty Block label print::@3
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of md5
Adding NOP phi() at start of md5::@4

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] line = (char *) 1024
  [2] idx = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [3] phi()
  [4] call main
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [5] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [6] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [7] main::s#2 = phi( main/(char *) 1024, main::@2/main::s#1 )
  [8] if(main::s#2<$800) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [9] phi()
  [10] call md5
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  [11] phi()
  to:main::@4
main::@2: scope:[main]  from main::@1
  [12] *main::s#2 = ' '
  [13] main::s#1 = ++ main::s#2
  to:main::@1

void md5()
md5: scope:[md5]  from main::@3
  [14] phi()
  to:md5::@1
md5::@1: scope:[md5]  from md5 md5::@6
  [15] md5::a#1 = phi( md5/md5::c#0, md5::@6/md5::a#9 )
  [15] md5::b#2 = phi( md5/$ef, md5::@6/md5::b#8 )
  [15] md5::a#3 = phi( md5/$67, md5::@6/md5::a#8 )
  [15] md5::i#2 = phi( md5/0, md5::@6/md5::i#1 )
  [16] if(md5::i#2<4) goto md5::@2
  to:md5::@return
md5::@return: scope:[md5]  from md5::@1
  [17] return 
  to:@return
md5::@2: scope:[md5]  from md5::@1
  [18] print::i#0 = md5::i#2
  [19] print::a#0 = md5::a#3
  [20] print::b#0 = md5::b#2
  [21] print::c#0 = md5::a#1
  [22] call print
  to:md5::@5
md5::@5: scope:[md5]  from md5::@2
  [23] md5::$2 = md5::i#2 & 1
  [24] if(0==md5::$2) goto md5::@3
  to:md5::@4
md5::@4: scope:[md5]  from md5::@5
  [25] phi()
  to:md5::@3
md5::@3: scope:[md5]  from md5::@4 md5::@5
  [26] md5::b#1 = md5::b#2 + 1
  [27] print::i#1 = md5::i#2
  [28] print::a#1 = md5::a#1
  [29] print::b#1 = md5::b#1
  [30] print::c#1 = md5::b#2
  [31] call print
  to:md5::@6
md5::@6: scope:[md5]  from md5::@3
  [32] md5::i#1 = ++ md5::i#2
  [33] md5::a#8 = md5::a#1
  [34] md5::b#8 = md5::b#1
  [35] md5::a#9 = md5::b#2
  to:md5::@1

void print(char i , char a , char b , char c)
print: scope:[print]  from md5::@2 md5::@3
  [36] print::c#2 = phi( md5::@2/print::c#0, md5::@3/print::c#1 )
  [36] print::b#2 = phi( md5::@2/print::b#0, md5::@3/print::b#1 )
  [36] print::a#2 = phi( md5::@2/print::a#0, md5::@3/print::a#1 )
  [36] print::print321_l#0 = phi( md5::@2/print::i#0, md5::@3/print::i#1 )
  to:print::print321
print::print321: scope:[print]  from print
  [37] print::print321_$0 = print::print321_l#0 >> 4
  [38] line[idx] = HEX[print::print321_$0]
  [39] idx = ++ idx
  [40] print::print321_$1 = print::print321_l#0 & $f
  [41] line[idx] = HEX[print::print321_$1]
  [42] idx = ++ idx
  [43] line[idx] = ' '
  [44] idx = ++ idx
  to:print::print322
print::print322: scope:[print]  from print::print321
  [45] print::print322_$0 = print::a#2 >> 4
  [46] line[idx] = HEX[print::print322_$0]
  [47] idx = ++ idx
  [48] print::print322_$1 = print::a#2 & $f
  [49] line[idx] = HEX[print::print322_$1]
  [50] idx = ++ idx
  [51] line[idx] = ' '
  [52] idx = ++ idx
  to:print::print323
print::print323: scope:[print]  from print::print322
  [53] print::print323_$0 = print::b#2 >> 4
  [54] line[idx] = HEX[print::print323_$0]
  [55] idx = ++ idx
  [56] print::print323_$1 = print::b#2 & $f
  [57] line[idx] = HEX[print::print323_$1]
  [58] idx = ++ idx
  [59] line[idx] = ' '
  [60] idx = ++ idx
  to:print::print324
print::print324: scope:[print]  from print::print323
  [61] print::print324_$0 = print::c#2 >> 4
  [62] line[idx] = HEX[print::print324_$0]
  [63] idx = ++ idx
  [64] print::print324_$1 = print::c#2 & $f
  [65] line[idx] = HEX[print::print324_$1]
  [66] idx = ++ idx
  [67] line[idx] = ' '
  [68] idx = ++ idx
  to:print::println1
print::println1: scope:[print]  from print::print324
  [69] line = line + $28
  [70] idx = 0
  to:print::@return
print::@return: scope:[print]  from print::println1
  [71] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void __start()
__loadstore char idx // 5873.634920634922
__loadstore char *line // 2121.4545454545455
void main()
char *main::s
char *main::s#1 // 202.0
char *main::s#2 // 134.66666666666666
void md5()
char md5::$2 // 2002.0
char md5::a
char md5::a#1 // 235.52941176470588
char md5::a#3 // 667.3333333333334
char md5::a#8 // 667.3333333333334
char md5::a#9 // 2002.0
char md5::b
char md5::b#1 // 375.375
char md5::b#2 // 263.42105263157896
char md5::b#8 // 1001.0
char md5::c
char md5::i
char md5::i#1 // 500.5
char md5::i#2 // 375.375
char md5::temp
void print(char i , char a , char b , char c)
char print::a
char print::a#0 // 667.3333333333334
char print::a#1 // 667.3333333333334
char print::a#2 // 1833.6666666666665
char print::b
char print::b#0 // 1001.0
char print::b#1 // 1001.0
char print::b#2 // 1100.2
char print::c
char print::c#0 // 2002.0
char print::c#1 // 2002.0
char print::c#2 // 785.8571428571429
char print::i
char print::i#0 // 500.5
char print::i#1 // 500.5
char print::print321_$0 // 20002.0
char print::print321_$1 // 20002.0
char print::print321_l
char print::print321_l#0 // 5501.0
char print::print322_$0 // 20002.0
char print::print322_$1 // 20002.0
char print::print322_l
char print::print323_$0 // 20002.0
char print::print323_$1 // 20002.0
char print::print323_l
char print::print324_$0 // 20002.0
char print::print324_$1 // 20002.0
char print::print324_l

Initial phi equivalence classes
[ main::s#2 main::s#1 ]
[ md5::i#2 md5::i#1 ]
[ md5::a#3 md5::a#8 ]
[ md5::b#2 md5::b#8 ]
[ md5::a#1 md5::a#9 ]
[ print::print321_l#0 print::i#0 print::i#1 ]
[ print::a#2 print::a#0 print::a#1 ]
[ print::b#2 print::b#0 print::b#1 ]
[ print::c#2 print::c#0 print::c#1 ]
Added variable line to live range equivalence class [ line ]
Added variable idx to live range equivalence class [ idx ]
Added variable md5::$2 to live range equivalence class [ md5::$2 ]
Added variable md5::b#1 to live range equivalence class [ md5::b#1 ]
Added variable print::print321_$0 to live range equivalence class [ print::print321_$0 ]
Added variable print::print321_$1 to live range equivalence class [ print::print321_$1 ]
Added variable print::print322_$0 to live range equivalence class [ print::print322_$0 ]
Added variable print::print322_$1 to live range equivalence class [ print::print322_$1 ]
Added variable print::print323_$0 to live range equivalence class [ print::print323_$0 ]
Added variable print::print323_$1 to live range equivalence class [ print::print323_$1 ]
Added variable print::print324_$0 to live range equivalence class [ print::print324_$0 ]
Added variable print::print324_$1 to live range equivalence class [ print::print324_$1 ]
Complete equivalence classes
[ main::s#2 main::s#1 ]
[ md5::i#2 md5::i#1 ]
[ md5::a#3 md5::a#8 ]
[ md5::b#2 md5::b#8 ]
[ md5::a#1 md5::a#9 ]
[ print::print321_l#0 print::i#0 print::i#1 ]
[ print::a#2 print::a#0 print::a#1 ]
[ print::b#2 print::b#0 print::b#1 ]
[ print::c#2 print::c#0 print::c#1 ]
[ line ]
[ idx ]
[ md5::$2 ]
[ md5::b#1 ]
[ print::print321_$0 ]
[ print::print321_$1 ]
[ print::print322_$0 ]
[ print::print322_$1 ]
[ print::print323_$0 ]
[ print::print323_$1 ]
[ print::print324_$0 ]
[ print::print324_$1 ]
Allocated zp[1]:2 [ print::print321_$0 ]
Allocated zp[1]:3 [ print::print321_$1 ]
Allocated zp[1]:4 [ print::print322_$0 ]
Allocated zp[1]:5 [ print::print322_$1 ]
Allocated zp[1]:6 [ print::print323_$0 ]
Allocated zp[1]:7 [ print::print323_$1 ]
Allocated zp[1]:8 [ print::print324_$0 ]
Allocated zp[1]:9 [ print::print324_$1 ]
Allocated zp[1]:10 [ print::print321_l#0 print::i#0 print::i#1 ]
Allocated zp[1]:11 [ idx ]
Allocated zp[1]:12 [ print::c#2 print::c#0 print::c#1 ]
Allocated zp[1]:13 [ print::a#2 print::a#0 print::a#1 ]
Allocated zp[1]:14 [ print::b#2 print::b#0 print::b#1 ]
Allocated zp[1]:15 [ md5::a#1 md5::a#9 ]
Allocated zp[2]:16 [ line ]
Allocated zp[1]:18 [ md5::$2 ]
Allocated zp[1]:19 [ md5::a#3 md5::a#8 ]
Allocated zp[1]:20 [ md5::b#2 md5::b#8 ]
Allocated zp[1]:21 [ md5::i#2 md5::i#1 ]
Allocated zp[1]:22 [ md5::b#1 ]
Allocated zp[2]:23 [ main::s#2 main::s#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] line = (char *) 1024 [ line ] (  [ line ] { }  ) always clobbers reg byte a 
Statement [2] idx = 0 [ line idx ] (  [ line idx ] { }  ) always clobbers reg byte a 
Statement [8] if(main::s#2<$800) goto main::@2 [ line idx main::s#2 ] ( main:4 [ line idx main::s#2 ] { }  ) always clobbers reg byte a 
Statement [12] *main::s#2 = ' ' [ line idx main::s#2 ] ( main:4 [ line idx main::s#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [37] print::print321_$0 = print::print321_l#0 >> 4 [ line idx print::print321_l#0 print::a#2 print::b#2 print::c#2 print::print321_$0 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::print321_l#0 print::a#2 print::b#2 print::c#2 print::print321_$0 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::print321_l#0 print::a#2 print::b#2 print::c#2 print::print321_$0 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:21 [ md5::i#2 md5::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:20 [ md5::b#2 md5::b#8 ]
Removing always clobbered register reg byte a as potential for zp[1]:15 [ md5::a#1 md5::a#9 ]
Removing always clobbered register reg byte a as potential for zp[1]:10 [ print::print321_l#0 print::i#0 print::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:13 [ print::a#2 print::a#0 print::a#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:14 [ print::b#2 print::b#0 print::b#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:12 [ print::c#2 print::c#0 print::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:22 [ md5::b#1 ]
Statement [38] line[idx] = HEX[print::print321_$0] [ line idx print::print321_l#0 print::a#2 print::b#2 print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::print321_l#0 print::a#2 print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::print321_l#0 print::a#2 print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:21 [ md5::i#2 md5::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:20 [ md5::b#2 md5::b#8 ]
Removing always clobbered register reg byte y as potential for zp[1]:15 [ md5::a#1 md5::a#9 ]
Removing always clobbered register reg byte y as potential for zp[1]:10 [ print::print321_l#0 print::i#0 print::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:13 [ print::a#2 print::a#0 print::a#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:14 [ print::b#2 print::b#0 print::b#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:12 [ print::c#2 print::c#0 print::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:22 [ md5::b#1 ]
Statement [40] print::print321_$1 = print::print321_l#0 & $f [ line idx print::a#2 print::b#2 print::c#2 print::print321_$1 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::a#2 print::b#2 print::c#2 print::print321_$1 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::a#2 print::b#2 print::c#2 print::print321_$1 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Statement [41] line[idx] = HEX[print::print321_$1] [ line idx print::a#2 print::b#2 print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::a#2 print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::a#2 print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [43] line[idx] = ' ' [ line idx print::a#2 print::b#2 print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::a#2 print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::a#2 print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [45] print::print322_$0 = print::a#2 >> 4 [ line idx print::a#2 print::b#2 print::c#2 print::print322_$0 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::a#2 print::b#2 print::c#2 print::print322_$0 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::a#2 print::b#2 print::c#2 print::print322_$0 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Statement [46] line[idx] = HEX[print::print322_$0] [ line idx print::a#2 print::b#2 print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::a#2 print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::a#2 print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [48] print::print322_$1 = print::a#2 & $f [ line idx print::b#2 print::c#2 print::print322_$1 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::b#2 print::c#2 print::print322_$1 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::b#2 print::c#2 print::print322_$1 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Statement [49] line[idx] = HEX[print::print322_$1] [ line idx print::b#2 print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [51] line[idx] = ' ' [ line idx print::b#2 print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [53] print::print323_$0 = print::b#2 >> 4 [ line idx print::b#2 print::c#2 print::print323_$0 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::b#2 print::c#2 print::print323_$0 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::b#2 print::c#2 print::print323_$0 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Statement [54] line[idx] = HEX[print::print323_$0] [ line idx print::b#2 print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [56] print::print323_$1 = print::b#2 & $f [ line idx print::c#2 print::print323_$1 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::c#2 print::print323_$1 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::c#2 print::print323_$1 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Statement [57] line[idx] = HEX[print::print323_$1] [ line idx print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [59] line[idx] = ' ' [ line idx print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [61] print::print324_$0 = print::c#2 >> 4 [ line idx print::c#2 print::print324_$0 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::c#2 print::print324_$0 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::c#2 print::print324_$0 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Statement [62] line[idx] = HEX[print::print324_$0] [ line idx print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [64] print::print324_$1 = print::c#2 & $f [ line idx print::print324_$1 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::print324_$1 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::print324_$1 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Statement [65] line[idx] = HEX[print::print324_$1] [ line idx ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [67] line[idx] = ' ' [ line idx ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [69] line = line + $28 [ line ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Statement [70] idx = 0 [ line idx ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Statement [1] line = (char *) 1024 [ line ] (  [ line ] { }  ) always clobbers reg byte a 
Statement [2] idx = 0 [ line idx ] (  [ line idx ] { }  ) always clobbers reg byte a 
Statement [8] if(main::s#2<$800) goto main::@2 [ line idx main::s#2 ] ( main:4 [ line idx main::s#2 ] { }  ) always clobbers reg byte a 
Statement [12] *main::s#2 = ' ' [ line idx main::s#2 ] ( main:4 [ line idx main::s#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [23] md5::$2 = md5::i#2 & 1 [ line idx md5::i#2 md5::b#2 md5::a#1 md5::$2 ] ( main:4::md5:10 [ line idx md5::i#2 md5::b#2 md5::a#1 md5::$2 ] { }  ) always clobbers reg byte a 
Statement [37] print::print321_$0 = print::print321_l#0 >> 4 [ line idx print::print321_l#0 print::a#2 print::b#2 print::c#2 print::print321_$0 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::print321_l#0 print::a#2 print::b#2 print::c#2 print::print321_$0 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::print321_l#0 print::a#2 print::b#2 print::c#2 print::print321_$0 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Statement [38] line[idx] = HEX[print::print321_$0] [ line idx print::print321_l#0 print::a#2 print::b#2 print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::print321_l#0 print::a#2 print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::print321_l#0 print::a#2 print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [40] print::print321_$1 = print::print321_l#0 & $f [ line idx print::a#2 print::b#2 print::c#2 print::print321_$1 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::a#2 print::b#2 print::c#2 print::print321_$1 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::a#2 print::b#2 print::c#2 print::print321_$1 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Statement [41] line[idx] = HEX[print::print321_$1] [ line idx print::a#2 print::b#2 print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::a#2 print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::a#2 print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [43] line[idx] = ' ' [ line idx print::a#2 print::b#2 print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::a#2 print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::a#2 print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [45] print::print322_$0 = print::a#2 >> 4 [ line idx print::a#2 print::b#2 print::c#2 print::print322_$0 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::a#2 print::b#2 print::c#2 print::print322_$0 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::a#2 print::b#2 print::c#2 print::print322_$0 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Statement [46] line[idx] = HEX[print::print322_$0] [ line idx print::a#2 print::b#2 print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::a#2 print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::a#2 print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [48] print::print322_$1 = print::a#2 & $f [ line idx print::b#2 print::c#2 print::print322_$1 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::b#2 print::c#2 print::print322_$1 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::b#2 print::c#2 print::print322_$1 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Statement [49] line[idx] = HEX[print::print322_$1] [ line idx print::b#2 print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [51] line[idx] = ' ' [ line idx print::b#2 print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [53] print::print323_$0 = print::b#2 >> 4 [ line idx print::b#2 print::c#2 print::print323_$0 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::b#2 print::c#2 print::print323_$0 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::b#2 print::c#2 print::print323_$0 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Statement [54] line[idx] = HEX[print::print323_$0] [ line idx print::b#2 print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::b#2 print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [56] print::print323_$1 = print::b#2 & $f [ line idx print::c#2 print::print323_$1 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::c#2 print::print323_$1 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::c#2 print::print323_$1 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Statement [57] line[idx] = HEX[print::print323_$1] [ line idx print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [59] line[idx] = ' ' [ line idx print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [61] print::print324_$0 = print::c#2 >> 4 [ line idx print::c#2 print::print324_$0 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::c#2 print::print324_$0 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::c#2 print::print324_$0 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Statement [62] line[idx] = HEX[print::print324_$0] [ line idx print::c#2 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::c#2 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::c#2 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [64] print::print324_$1 = print::c#2 & $f [ line idx print::print324_$1 ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx print::print324_$1 ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx print::print324_$1 ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Statement [65] line[idx] = HEX[print::print324_$1] [ line idx ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [67] line[idx] = ' ' [ line idx ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a reg byte y 
Statement [69] line = line + $28 [ line ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Statement [70] idx = 0 [ line idx ] ( main:4::md5:10::print:22 [ md5::i#2 md5::b#2 md5::a#1 line idx ] { { print::print321_l#0 = print::i#0 md5::i#2 } { print::a#0 = print::a#2 md5::a#3 } { print::b#0 = print::b#2 md5::b#2 } { print::c#0 = print::c#2 md5::a#1 } }  main:4::md5:10::print:31 [ md5::i#2 md5::b#2 md5::a#1 md5::b#1 line idx ] { { print::print321_l#0 = print::i#1 md5::i#2 } { print::a#1 = print::a#2 md5::a#1 } { print::b#1 = print::b#2 md5::b#1 } { print::c#1 = print::c#2 md5::b#2 } }  ) always clobbers reg byte a 
Potential registers zp[2]:23 [ main::s#2 main::s#1 ] : zp[2]:23 , 
Potential registers zp[1]:21 [ md5::i#2 md5::i#1 ] : zp[1]:21 , reg byte x , 
Potential registers zp[1]:19 [ md5::a#3 md5::a#8 ] : zp[1]:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ md5::b#2 md5::b#8 ] : zp[1]:20 , reg byte x , 
Potential registers zp[1]:15 [ md5::a#1 md5::a#9 ] : zp[1]:15 , reg byte x , 
Potential registers zp[1]:10 [ print::print321_l#0 print::i#0 print::i#1 ] : zp[1]:10 , reg byte x , 
Potential registers zp[1]:13 [ print::a#2 print::a#0 print::a#1 ] : zp[1]:13 , reg byte x , 
Potential registers zp[1]:14 [ print::b#2 print::b#0 print::b#1 ] : zp[1]:14 , reg byte x , 
Potential registers zp[1]:12 [ print::c#2 print::c#0 print::c#1 ] : zp[1]:12 , reg byte x , 
Potential registers zp[2]:16 [ line ] : zp[2]:16 , 
Potential registers zp[1]:11 [ idx ] : zp[1]:11 , 
Potential registers zp[1]:18 [ md5::$2 ] : zp[1]:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:22 [ md5::b#1 ] : zp[1]:22 , reg byte x , 
Potential registers zp[1]:2 [ print::print321_$0 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ print::print321_$1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ print::print322_$0 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ print::print322_$1 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ print::print323_$0 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ print::print323_$1 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ print::print324_$0 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ print::print324_$1 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print] 20,002: zp[1]:2 [ print::print321_$0 ] 20,002: zp[1]:3 [ print::print321_$1 ] 20,002: zp[1]:4 [ print::print322_$0 ] 20,002: zp[1]:5 [ print::print322_$1 ] 20,002: zp[1]:6 [ print::print323_$0 ] 20,002: zp[1]:7 [ print::print323_$1 ] 20,002: zp[1]:8 [ print::print324_$0 ] 20,002: zp[1]:9 [ print::print324_$1 ] 6,502: zp[1]:10 [ print::print321_l#0 print::i#0 print::i#1 ] 4,789.86: zp[1]:12 [ print::c#2 print::c#0 print::c#1 ] 3,168.33: zp[1]:13 [ print::a#2 print::a#0 print::a#1 ] 3,102.2: zp[1]:14 [ print::b#2 print::b#0 print::b#1 ] 
Uplift Scope [md5] 2,237.53: zp[1]:15 [ md5::a#1 md5::a#9 ] 2,002: zp[1]:18 [ md5::$2 ] 1,334.67: zp[1]:19 [ md5::a#3 md5::a#8 ] 1,264.42: zp[1]:20 [ md5::b#2 md5::b#8 ] 875.88: zp[1]:21 [ md5::i#2 md5::i#1 ] 375.38: zp[1]:22 [ md5::b#1 ] 
Uplift Scope [] 5,873.63: zp[1]:11 [ idx ] 2,121.45: zp[2]:16 [ line ] 
Uplift Scope [main] 336.67: zp[2]:23 [ main::s#2 main::s#1 ] 
Uplift Scope [__start] 

Uplifting [print] best 2443 combination reg byte a [ print::print321_$0 ] reg byte a [ print::print321_$1 ] reg byte a [ print::print322_$0 ] reg byte a [ print::print322_$1 ] zp[1]:6 [ print::print323_$0 ] zp[1]:7 [ print::print323_$1 ] zp[1]:8 [ print::print324_$0 ] zp[1]:9 [ print::print324_$1 ] zp[1]:10 [ print::print321_l#0 print::i#0 print::i#1 ] zp[1]:12 [ print::c#2 print::c#0 print::c#1 ] zp[1]:13 [ print::a#2 print::a#0 print::a#1 ] zp[1]:14 [ print::b#2 print::b#0 print::b#1 ] 
Limited combination testing to 100 combinations of 1048576 possible.
Uplifting [md5] best 2153 combination zp[1]:15 [ md5::a#1 md5::a#9 ] reg byte a [ md5::$2 ] reg byte y [ md5::a#3 md5::a#8 ] zp[1]:20 [ md5::b#2 md5::b#8 ] reg byte x [ md5::i#2 md5::i#1 ] zp[1]:22 [ md5::b#1 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [] best 2153 combination zp[1]:11 [ idx ] zp[2]:16 [ line ] 
Uplifting [main] best 2153 combination zp[2]:23 [ main::s#2 main::s#1 ] 
Uplifting [__start] best 2153 combination 
Attempting to uplift remaining variables inzp[1]:6 [ print::print323_$0 ]
Uplifting [print] best 2149 combination reg byte a [ print::print323_$0 ] 
Attempting to uplift remaining variables inzp[1]:7 [ print::print323_$1 ]
Uplifting [print] best 2145 combination reg byte a [ print::print323_$1 ] 
Attempting to uplift remaining variables inzp[1]:8 [ print::print324_$0 ]
Uplifting [print] best 2141 combination reg byte a [ print::print324_$0 ] 
Attempting to uplift remaining variables inzp[1]:9 [ print::print324_$1 ]
Uplifting [print] best 2137 combination reg byte a [ print::print324_$1 ] 
Attempting to uplift remaining variables inzp[1]:10 [ print::print321_l#0 print::i#0 print::i#1 ]
Uplifting [print] best 2075 combination reg byte x [ print::print321_l#0 print::i#0 print::i#1 ] 
Attempting to uplift remaining variables inzp[1]:11 [ idx ]
Uplifting [] best 2075 combination zp[1]:11 [ idx ] 
Attempting to uplift remaining variables inzp[1]:12 [ print::c#2 print::c#0 print::c#1 ]
Uplifting [print] best 2075 combination zp[1]:12 [ print::c#2 print::c#0 print::c#1 ] 
Attempting to uplift remaining variables inzp[1]:13 [ print::a#2 print::a#0 print::a#1 ]
Uplifting [print] best 2075 combination zp[1]:13 [ print::a#2 print::a#0 print::a#1 ] 
Attempting to uplift remaining variables inzp[1]:14 [ print::b#2 print::b#0 print::b#1 ]
Uplifting [print] best 2075 combination zp[1]:14 [ print::b#2 print::b#0 print::b#1 ] 
Attempting to uplift remaining variables inzp[1]:15 [ md5::a#1 md5::a#9 ]
Uplifting [md5] best 2075 combination zp[1]:15 [ md5::a#1 md5::a#9 ] 
Attempting to uplift remaining variables inzp[1]:20 [ md5::b#2 md5::b#8 ]
Uplifting [md5] best 2075 combination zp[1]:20 [ md5::b#2 md5::b#8 ] 
Attempting to uplift remaining variables inzp[1]:22 [ md5::b#1 ]
Uplifting [md5] best 2075 combination zp[1]:22 [ md5::b#1 ] 
Coalescing zero page register [ zp[1]:14 [ print::b#2 print::b#0 print::b#1 ] ] with [ zp[1]:22 [ md5::b#1 ] ] - score: 1
Allocated (was zp[1]:11) zp[1]:2 [ idx ]
Allocated (was zp[1]:12) zp[1]:3 [ print::c#2 print::c#0 print::c#1 ]
Allocated (was zp[1]:14) zp[1]:4 [ print::b#2 print::b#0 print::b#1 md5::b#1 ]
Allocated (was zp[1]:13) zp[1]:5 [ print::a#2 print::a#0 print::a#1 ]
Allocated (was zp[1]:15) zp[1]:6 [ md5::a#1 md5::a#9 ]
Allocated (was zp[2]:16) zp[2]:7 [ line ]
Allocated (was zp[1]:20) zp[1]:9 [ md5::b#2 md5::b#8 ]
Allocated (was zp[2]:23) zp[2]:10 [ main::s#2 main::s#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// 8 bit converted md5 calculator
  // Upstart
  // Commodore 64 PRG executable file
.file [name="atarixl-md5b.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .label line = 7
  .label idx = 2
.segment Code
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] line = (char *) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z line
    lda #>$400
    sta.z line+1
    // [2] idx = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [3] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [4] call main
    // [6] phi from __start::@1 to main [phi:__start::@1->main] -- call_phi_near 
  main_from___b1:
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [5] return 
    rts
}
  // main
main: {
    .label s = $a
    // [7] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [7] phi main::s#2 = (char *) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z s
    lda #>$400
    sta.z s+1
    jmp __b1
    // main::@1
  __b1:
    // [8] if(main::s#2<$800) goto main::@2 -- pbuz1_lt_vwuc1_then_la1 
    lda.z s+1
    cmp #>$800
    bcc __b2
    bne !+
    lda.z s
    cmp #<$800
    bcc __b2
  !:
    // [9] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    jmp __b3
    // main::@3
  __b3:
    // [10] call md5
    // [14] phi from main::@3 to md5 [phi:main::@3->md5] -- call_phi_near 
  md5_from___b3:
    jsr md5
    // [11] phi from main::@3 main::@4 to main::@4 [phi:main::@3/main::@4->main::@4]
  __b4_from___b3:
  __b4_from___b4:
    jmp __b4
    // main::@4
  __b4:
    jmp __b4_from___b4
    // main::@2
  __b2:
    // [12] *main::s#2 = ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (s),y
    // [13] main::s#1 = ++ main::s#2 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [7] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [7] phi main::s#2 = main::s#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // md5
md5: {
    .const c = $98
    .label b = 4
    .label a = 6
    .label b_1 = 9
    // [15] phi from md5 to md5::@1 [phi:md5->md5::@1]
  __b1_from_md5:
    // [15] phi md5::a#1 = md5::c#0 [phi:md5->md5::@1#0] -- vbuz1=vbuc1 
    lda #c
    sta.z a
    // [15] phi md5::b#2 = $ef [phi:md5->md5::@1#1] -- vbuz1=vbuc1 
    lda #$ef
    sta.z b_1
    // [15] phi md5::a#3 = $67 [phi:md5->md5::@1#2] -- vbuyy=vbuc1 
    ldy #$67
    // [15] phi md5::i#2 = 0 [phi:md5->md5::@1#3] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // md5::@1
  __b1:
    // [16] if(md5::i#2<4) goto md5::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #4
    bcc __b2
    jmp __breturn
    // md5::@return
  __breturn:
    // [17] return 
    rts
    // md5::@2
  __b2:
    // [18] print::i#0 = md5::i#2
    // [19] print::a#0 = md5::a#3 -- vbuz1=vbuyy 
    sty.z print.a
    // [20] print::b#0 = md5::b#2 -- vbuz1=vbuz2 
    lda.z b_1
    sta.z print.b
    // [21] print::c#0 = md5::a#1 -- vbuz1=vbuz2 
    lda.z a
    sta.z print.c
    // [22] call print
    // [36] phi from md5::@2 to print [phi:md5::@2->print]
  print_from___b2:
    // [36] phi print::c#2 = print::c#0 [phi:md5::@2->print#0] -- register_copy 
    // [36] phi print::b#2 = print::b#0 [phi:md5::@2->print#1] -- register_copy 
    // [36] phi print::a#2 = print::a#0 [phi:md5::@2->print#2] -- register_copy 
    // [36] phi print::print321_l#0 = print::i#0 [phi:md5::@2->print#3] -- call_phi_near 
    jsr print
    jmp __b5
    // md5::@5
  __b5:
    // [23] md5::$2 = md5::i#2 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [24] if(0==md5::$2) goto md5::@3 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq __b3
    // [25] phi from md5::@5 to md5::@4 [phi:md5::@5->md5::@4]
  __b4_from___b5:
    jmp __b4
    // md5::@4
  __b4:
    jmp __b3
    // md5::@3
  __b3:
    // [26] md5::b#1 = md5::b#2 + 1 -- vbuz1=vbuz2_plus_1 
    ldy.z b_1
    iny
    sty.z b
    // [27] print::i#1 = md5::i#2
    // [28] print::a#1 = md5::a#1 -- vbuz1=vbuz2 
    lda.z a
    sta.z print.a
    // [29] print::b#1 = md5::b#1
    // [30] print::c#1 = md5::b#2 -- vbuz1=vbuz2 
    lda.z b_1
    sta.z print.c
    // [31] call print
    // [36] phi from md5::@3 to print [phi:md5::@3->print]
  print_from___b3:
    // [36] phi print::c#2 = print::c#1 [phi:md5::@3->print#0] -- register_copy 
    // [36] phi print::b#2 = print::b#1 [phi:md5::@3->print#1] -- register_copy 
    // [36] phi print::a#2 = print::a#1 [phi:md5::@3->print#2] -- register_copy 
    // [36] phi print::print321_l#0 = print::i#1 [phi:md5::@3->print#3] -- call_phi_near 
    jsr print
    jmp __b6
    // md5::@6
  __b6:
    // [32] md5::i#1 = ++ md5::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [33] md5::a#8 = md5::a#1 -- vbuyy=vbuz1 
    ldy.z a
    // [34] md5::b#8 = md5::b#1 -- vbuz1=vbuz2 
    lda.z b
    sta.z b_1
    // [35] md5::a#9 = md5::b#2 -- vbuz1=vbuz2 
    lda.z b_1
    sta.z a
    // [15] phi from md5::@6 to md5::@1 [phi:md5::@6->md5::@1]
  __b1_from___b6:
    // [15] phi md5::a#1 = md5::a#9 [phi:md5::@6->md5::@1#0] -- register_copy 
    // [15] phi md5::b#2 = md5::b#8 [phi:md5::@6->md5::@1#1] -- register_copy 
    // [15] phi md5::a#3 = md5::a#8 [phi:md5::@6->md5::@1#2] -- register_copy 
    // [15] phi md5::i#2 = md5::i#1 [phi:md5::@6->md5::@1#3] -- register_copy 
    jmp __b1
}
  // print
// void print(__register(X) char i, __zp(5) char a, __zp(4) char b, __zp(3) char c)
print: {
    .label a = 5
    .label b = 4
    .label c = 3
    jmp print321
    // print::print321
  print321:
    // [37] print::print321_$0 = print::print321_l#0 >> 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [38] line[idx] = HEX[print::print321_$0] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    ldy.z idx
    sta (line),y
    // [39] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [40] print::print321_$1 = print::print321_l#0 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [41] line[idx] = HEX[print::print321_$1] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    ldy.z idx
    sta (line),y
    // [42] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [43] line[idx] = ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #' '
    ldy.z idx
    sta (line),y
    // [44] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    jmp print322
    // print::print322
  print322:
    // [45] print::print322_$0 = print::a#2 >> 4 -- vbuaa=vbuz1_ror_4 
    lda.z a
    lsr
    lsr
    lsr
    lsr
    // [46] line[idx] = HEX[print::print322_$0] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    ldy.z idx
    sta (line),y
    // [47] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [48] print::print322_$1 = print::a#2 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z a
    // [49] line[idx] = HEX[print::print322_$1] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    ldy.z idx
    sta (line),y
    // [50] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [51] line[idx] = ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #' '
    ldy.z idx
    sta (line),y
    // [52] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    jmp print323
    // print::print323
  print323:
    // [53] print::print323_$0 = print::b#2 >> 4 -- vbuaa=vbuz1_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    // [54] line[idx] = HEX[print::print323_$0] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    ldy.z idx
    sta (line),y
    // [55] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [56] print::print323_$1 = print::b#2 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z b
    // [57] line[idx] = HEX[print::print323_$1] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    ldy.z idx
    sta (line),y
    // [58] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [59] line[idx] = ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #' '
    ldy.z idx
    sta (line),y
    // [60] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    jmp print324
    // print::print324
  print324:
    // [61] print::print324_$0 = print::c#2 >> 4 -- vbuaa=vbuz1_ror_4 
    lda.z c
    lsr
    lsr
    lsr
    lsr
    // [62] line[idx] = HEX[print::print324_$0] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    ldy.z idx
    sta (line),y
    // [63] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [64] print::print324_$1 = print::c#2 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z c
    // [65] line[idx] = HEX[print::print324_$1] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    ldy.z idx
    sta (line),y
    // [66] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [67] line[idx] = ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #' '
    ldy.z idx
    sta (line),y
    // [68] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    jmp println1
    // print::println1
  println1:
    // [69] line = line + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // [70] idx = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    jmp __breturn
    // print::@return
  __breturn:
    // [71] return 
    rts
}
  // File Data
.segment Data
  HEX: .text "0123456789abcdef"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp print321
Removing instruction jmp print322
Removing instruction jmp print323
Removing instruction jmp print324
Removing instruction jmp println1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda.z b_1
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b4_from___b4 with __b4
Removing instruction __b1_from___init1:
Removing instruction main_from___b1:
Removing instruction __b3_from___b1:
Removing instruction md5_from___b3:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b4:
Removing instruction __b4_from___b5:
Removing instruction __b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_md5:
Removing instruction __breturn:
Removing instruction print_from___b2:
Removing instruction __b5:
Removing instruction print_from___b3:
Removing instruction __b6:
Removing instruction __b1_from___b6:
Removing instruction print321:
Removing instruction print322:
Removing instruction print323:
Removing instruction print324:
Removing instruction println1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction beq __b3
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b3:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char HEX[] = "0123456789abcdef"
void __start()
__loadstore char idx // zp[1]:2 5873.634920634922
__loadstore char *line // zp[2]:7 2121.4545454545455
void main()
char *main::s
char *main::s#1 // s zp[2]:10 202.0
char *main::s#2 // s zp[2]:10 134.66666666666666
void md5()
char md5::$2 // reg byte a 2002.0
char md5::a
char md5::a#1 // a zp[1]:6 235.52941176470588
char md5::a#3 // reg byte y 667.3333333333334
char md5::a#8 // reg byte y 667.3333333333334
char md5::a#9 // a zp[1]:6 2002.0
char md5::b
char md5::b#1 // b zp[1]:4 375.375
char md5::b#2 // b_1 zp[1]:9 263.42105263157896
char md5::b#8 // b_1 zp[1]:9 1001.0
char md5::c
__constant char md5::c#0 = $98 // c
char md5::i
char md5::i#1 // reg byte x 500.5
char md5::i#2 // reg byte x 375.375
char md5::temp
void print(char i , char a , char b , char c)
char print::a
char print::a#0 // a zp[1]:5 667.3333333333334
char print::a#1 // a zp[1]:5 667.3333333333334
char print::a#2 // a zp[1]:5 1833.6666666666665
char print::b
char print::b#0 // b zp[1]:4 1001.0
char print::b#1 // b zp[1]:4 1001.0
char print::b#2 // b zp[1]:4 1100.2
char print::c
char print::c#0 // c zp[1]:3 2002.0
char print::c#1 // c zp[1]:3 2002.0
char print::c#2 // c zp[1]:3 785.8571428571429
char print::i
char print::i#0 // reg byte x 500.5
char print::i#1 // reg byte x 500.5
char print::print321_$0 // reg byte a 20002.0
char print::print321_$1 // reg byte a 20002.0
char print::print321_l
char print::print321_l#0 // reg byte x 5501.0
char print::print322_$0 // reg byte a 20002.0
char print::print322_$1 // reg byte a 20002.0
char print::print322_l
char print::print323_$0 // reg byte a 20002.0
char print::print323_$1 // reg byte a 20002.0
char print::print323_l
char print::print324_$0 // reg byte a 20002.0
char print::print324_$1 // reg byte a 20002.0
char print::print324_l

zp[2]:10 [ main::s#2 main::s#1 ]
reg byte x [ md5::i#2 md5::i#1 ]
reg byte y [ md5::a#3 md5::a#8 ]
zp[1]:9 [ md5::b#2 md5::b#8 ]
zp[1]:6 [ md5::a#1 md5::a#9 ]
reg byte x [ print::print321_l#0 print::i#0 print::i#1 ]
zp[1]:5 [ print::a#2 print::a#0 print::a#1 ]
zp[1]:4 [ print::b#2 print::b#0 print::b#1 md5::b#1 ]
zp[1]:3 [ print::c#2 print::c#0 print::c#1 ]
zp[2]:7 [ line ]
zp[1]:2 [ idx ]
reg byte a [ md5::$2 ]
reg byte a [ print::print321_$0 ]
reg byte a [ print::print321_$1 ]
reg byte a [ print::print322_$0 ]
reg byte a [ print::print322_$1 ]
reg byte a [ print::print323_$0 ]
reg byte a [ print::print323_$1 ]
reg byte a [ print::print324_$0 ]
reg byte a [ print::print324_$1 ]


FINAL ASSEMBLER
Score: 1690

  // File Comments
// 8 bit converted md5 calculator
  // Upstart
  // Commodore 64 PRG executable file
.file [name="atarixl-md5b.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .label line = 7
  .label idx = 2
.segment Code
  // __start
__start: {
    // __start::__init1
    // __ma char * line = (char*)0x0400
    // [1] line = (char *) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z line
    lda #>$400
    sta.z line+1
    // __ma char idx = 0
    // [2] idx = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [3] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [4] call main
    // [6] phi from __start::@1 to main [phi:__start::@1->main] -- call_phi_near 
    jsr main
    // __start::@return
    // [5] return 
    rts
}
  // main
main: {
    .label s = $a
    // [7] phi from main to main::@1 [phi:main->main::@1]
    // [7] phi main::s#2 = (char *) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z s
    lda #>$400
    sta.z s+1
    // main::@1
  __b1:
    // for(char* s=(char*)0x0400;s<0x0800;s++)
    // [8] if(main::s#2<$800) goto main::@2 -- pbuz1_lt_vwuc1_then_la1 
    lda.z s+1
    cmp #>$800
    bcc __b2
    bne !+
    lda.z s
    cmp #<$800
    bcc __b2
  !:
    // [9] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // main::@3
    // md5()
    // [10] call md5
    // [14] phi from main::@3 to md5 [phi:main::@3->md5] -- call_phi_near 
    jsr md5
    // [11] phi from main::@3 main::@4 to main::@4 [phi:main::@3/main::@4->main::@4]
    // main::@4
  __b4:
    jmp __b4
    // main::@2
  __b2:
    // *s=' '
    // [12] *main::s#2 = ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (s),y
    // for(char* s=(char*)0x0400;s<0x0800;s++)
    // [13] main::s#1 = ++ main::s#2 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [7] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [7] phi main::s#2 = main::s#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // md5
md5: {
    .const c = $98
    .label b = 4
    .label a = 6
    .label b_1 = 9
    // [15] phi from md5 to md5::@1 [phi:md5->md5::@1]
    // [15] phi md5::a#1 = md5::c#0 [phi:md5->md5::@1#0] -- vbuz1=vbuc1 
    lda #c
    sta.z a
    // [15] phi md5::b#2 = $ef [phi:md5->md5::@1#1] -- vbuz1=vbuc1 
    lda #$ef
    sta.z b_1
    // [15] phi md5::a#3 = $67 [phi:md5->md5::@1#2] -- vbuyy=vbuc1 
    ldy #$67
    // [15] phi md5::i#2 = 0 [phi:md5->md5::@1#3] -- vbuxx=vbuc1 
    ldx #0
    // md5::@1
  __b1:
    // for(char i = 0; i<4; i++)
    // [16] if(md5::i#2<4) goto md5::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #4
    bcc __b2
    // md5::@return
    // }
    // [17] return 
    rts
    // md5::@2
  __b2:
    // print(i, a, b, c)
    // [18] print::i#0 = md5::i#2
    // [19] print::a#0 = md5::a#3 -- vbuz1=vbuyy 
    sty.z print.a
    // [20] print::b#0 = md5::b#2 -- vbuz1=vbuz2 
    lda.z b_1
    sta.z print.b
    // [21] print::c#0 = md5::a#1 -- vbuz1=vbuz2 
    lda.z a
    sta.z print.c
    // [22] call print
    // [36] phi from md5::@2 to print [phi:md5::@2->print]
    // [36] phi print::c#2 = print::c#0 [phi:md5::@2->print#0] -- register_copy 
    // [36] phi print::b#2 = print::b#0 [phi:md5::@2->print#1] -- register_copy 
    // [36] phi print::a#2 = print::a#0 [phi:md5::@2->print#2] -- register_copy 
    // [36] phi print::print321_l#0 = print::i#0 [phi:md5::@2->print#3] -- call_phi_near 
    jsr print
    // md5::@5
    // i&1
    // [23] md5::$2 = md5::i#2 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if(i&1)
    // [24] if(0==md5::$2) goto md5::@3 -- 0_eq_vbuaa_then_la1 
    cmp #0
    // [25] phi from md5::@5 to md5::@4 [phi:md5::@5->md5::@4]
    // md5::@4
    // md5::@3
    // b = b + 1
    // [26] md5::b#1 = md5::b#2 + 1 -- vbuz1=vbuz2_plus_1 
    ldy.z b_1
    iny
    sty.z b
    // print(i, a, b, c)
    // [27] print::i#1 = md5::i#2
    // [28] print::a#1 = md5::a#1 -- vbuz1=vbuz2 
    lda.z a
    sta.z print.a
    // [29] print::b#1 = md5::b#1
    // [30] print::c#1 = md5::b#2 -- vbuz1=vbuz2 
    lda.z b_1
    sta.z print.c
    // [31] call print
    // [36] phi from md5::@3 to print [phi:md5::@3->print]
    // [36] phi print::c#2 = print::c#1 [phi:md5::@3->print#0] -- register_copy 
    // [36] phi print::b#2 = print::b#1 [phi:md5::@3->print#1] -- register_copy 
    // [36] phi print::a#2 = print::a#1 [phi:md5::@3->print#2] -- register_copy 
    // [36] phi print::print321_l#0 = print::i#1 [phi:md5::@3->print#3] -- call_phi_near 
    jsr print
    // md5::@6
    // for(char i = 0; i<4; i++)
    // [32] md5::i#1 = ++ md5::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [33] md5::a#8 = md5::a#1 -- vbuyy=vbuz1 
    ldy.z a
    // [34] md5::b#8 = md5::b#1 -- vbuz1=vbuz2 
    lda.z b
    sta.z b_1
    // [35] md5::a#9 = md5::b#2 -- vbuz1=vbuz2 
    sta.z a
    // [15] phi from md5::@6 to md5::@1 [phi:md5::@6->md5::@1]
    // [15] phi md5::a#1 = md5::a#9 [phi:md5::@6->md5::@1#0] -- register_copy 
    // [15] phi md5::b#2 = md5::b#8 [phi:md5::@6->md5::@1#1] -- register_copy 
    // [15] phi md5::a#3 = md5::a#8 [phi:md5::@6->md5::@1#2] -- register_copy 
    // [15] phi md5::i#2 = md5::i#1 [phi:md5::@6->md5::@1#3] -- register_copy 
    jmp __b1
}
  // print
// void print(__register(X) char i, __zp(5) char a, __zp(4) char b, __zp(3) char c)
print: {
    .label a = 5
    .label b = 4
    .label c = 3
    // print::print321
    // l/0x10
    // [37] print::print321_$0 = print::print321_l#0 >> 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // line[idx++] = HEX[l/0x10]
    // [38] line[idx] = HEX[print::print321_$0] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    ldy.z idx
    sta (line),y
    // line[idx++] = HEX[l/0x10];
    // [39] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // l&0x0f
    // [40] print::print321_$1 = print::print321_l#0 & $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // line[idx++] = HEX[l&0x0f]
    // [41] line[idx] = HEX[print::print321_$1] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    ldy.z idx
    sta (line),y
    // line[idx++] = HEX[l&0x0f];
    // [42] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // line[idx++] = ' '
    // [43] line[idx] = ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #' '
    ldy.z idx
    sta (line),y
    // line[idx++] = ' ';
    // [44] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // print::print322
    // l/0x10
    // [45] print::print322_$0 = print::a#2 >> 4 -- vbuaa=vbuz1_ror_4 
    lda.z a
    lsr
    lsr
    lsr
    lsr
    // line[idx++] = HEX[l/0x10]
    // [46] line[idx] = HEX[print::print322_$0] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    ldy.z idx
    sta (line),y
    // line[idx++] = HEX[l/0x10];
    // [47] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // l&0x0f
    // [48] print::print322_$1 = print::a#2 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z a
    // line[idx++] = HEX[l&0x0f]
    // [49] line[idx] = HEX[print::print322_$1] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    ldy.z idx
    sta (line),y
    // line[idx++] = HEX[l&0x0f];
    // [50] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // line[idx++] = ' '
    // [51] line[idx] = ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #' '
    ldy.z idx
    sta (line),y
    // line[idx++] = ' ';
    // [52] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // print::print323
    // l/0x10
    // [53] print::print323_$0 = print::b#2 >> 4 -- vbuaa=vbuz1_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    // line[idx++] = HEX[l/0x10]
    // [54] line[idx] = HEX[print::print323_$0] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    ldy.z idx
    sta (line),y
    // line[idx++] = HEX[l/0x10];
    // [55] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // l&0x0f
    // [56] print::print323_$1 = print::b#2 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z b
    // line[idx++] = HEX[l&0x0f]
    // [57] line[idx] = HEX[print::print323_$1] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    ldy.z idx
    sta (line),y
    // line[idx++] = HEX[l&0x0f];
    // [58] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // line[idx++] = ' '
    // [59] line[idx] = ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #' '
    ldy.z idx
    sta (line),y
    // line[idx++] = ' ';
    // [60] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // print::print324
    // l/0x10
    // [61] print::print324_$0 = print::c#2 >> 4 -- vbuaa=vbuz1_ror_4 
    lda.z c
    lsr
    lsr
    lsr
    lsr
    // line[idx++] = HEX[l/0x10]
    // [62] line[idx] = HEX[print::print324_$0] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    ldy.z idx
    sta (line),y
    // line[idx++] = HEX[l/0x10];
    // [63] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // l&0x0f
    // [64] print::print324_$1 = print::c#2 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z c
    // line[idx++] = HEX[l&0x0f]
    // [65] line[idx] = HEX[print::print324_$1] -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    ldy.z idx
    sta (line),y
    // line[idx++] = HEX[l&0x0f];
    // [66] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // line[idx++] = ' '
    // [67] line[idx] = ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #' '
    ldy.z idx
    sta (line),y
    // line[idx++] = ' ';
    // [68] idx = ++ idx -- vbuz1=_inc_vbuz1 
    inc.z idx
    // print::println1
    // line += 40
    // [69] line = line + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // idx=0
    // [70] idx = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // print::@return
    // }
    // [71] return 
    rts
}
  // File Data
.segment Data
  HEX: .text "0123456789abcdef"
  .byte 0

