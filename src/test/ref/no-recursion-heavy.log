Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6
Culled Empty Block (label) @1
Culled Empty Block (label) f0::@10
Culled Empty Block (label) @2
Culled Empty Block (label) fa::@10
Culled Empty Block (label) @3
Culled Empty Block (label) fb::@10
Culled Empty Block (label) @4
Culled Empty Block (label) fc::@10

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) ba#0 ← (byte) 0
  (byte) bb#0 ← (byte) 0
  (byte) bc#0 ← (byte) 0
  (byte) bd#0 ← (byte) 0
  to:@5

(void()) main()
main: scope:[main]  from @5
  (byte) ba#29 ← phi( @5/(byte) ba#28 )
  (byte) bd#127 ← phi( @5/(byte) bd#126 )
  (byte) bc#94 ← phi( @5/(byte) bc#93 )
  (byte) bb#61 ← phi( @5/(byte) bb#60 )
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte) ba#18 ← phi( main/(byte) ba#29 main::@7/(byte) ba#1 )
  (byte) bd#83 ← phi( main/(byte) bd#127 main::@7/(byte) bd#1 )
  (byte) bc#61 ← phi( main/(byte) bc#94 main::@7/(byte) bc#1 )
  (byte) bb#39 ← phi( main/(byte) bb#61 main::@7/(byte) bb#1 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) ba#17 ← phi( main::@1/(byte) ba#18 )
  (byte) bd#82 ← phi( main::@1/(byte) bd#83 )
  (byte) bc#60 ← phi( main::@1/(byte) bc#61 )
  (byte) bb#38 ← phi( main::@1/(byte) bb#39 )
  call f0 
  to:main::@7
main::@7: scope:[main]  from main::@2
  (byte) ba#4 ← phi( main::@2/(byte) ba#17 )
  (byte) bd#37 ← phi( main::@2/(byte) bd#13 )
  (byte) bc#26 ← phi( main::@2/(byte) bc#13 )
  (byte) bb#15 ← phi( main::@2/(byte) bb#13 )
  (byte) bb#1 ← (byte) bb#15
  (byte) bc#1 ← (byte) bc#26
  (byte) bd#1 ← (byte) bd#37
  (byte) ba#1 ← ++ (byte) ba#4
  to:main::@1
main::@return: scope:[main]  from main::@1
  (byte) ba#5 ← phi( main::@1/(byte) ba#18 )
  (byte) bd#38 ← phi( main::@1/(byte) bd#83 )
  (byte) bc#27 ← phi( main::@1/(byte) bc#61 )
  (byte) bb#16 ← phi( main::@1/(byte) bb#39 )
  (byte) bb#2 ← (byte) bb#16
  (byte) bc#2 ← (byte) bc#27
  (byte) bd#2 ← (byte) bd#38
  (byte) ba#2 ← (byte) ba#5
  return 
  to:@return

(void()) f0()
f0: scope:[f0]  from main::@2
  (byte) bd#128 ← phi( main::@2/(byte) bd#82 )
  (byte) bc#95 ← phi( main::@2/(byte) bc#60 )
  (byte) bb#40 ← phi( main::@2/(byte) bb#38 )
  (byte) ba#6 ← phi( main::@2/(byte) ba#17 )
  (bool~) f0::$0 ← (byte) ba#6 == (number) 0
  (bool~) f0::$1 ← ! (bool~) f0::$0
  if((bool~) f0::$1) goto f0::@1
  to:f0::@11
f0::@1: scope:[f0]  from f0 f0::@21
  (byte) bd#129 ← phi( f0/(byte) bd#128 f0::@21/(byte) bd#3 )
  (byte) bc#96 ← phi( f0/(byte) bc#95 f0::@21/(byte) bc#3 )
  (byte) bb#41 ← phi( f0/(byte) bb#40 f0::@21/(byte) bb#62 )
  (byte) ba#7 ← phi( f0/(byte) ba#6 f0::@21/(byte) ba#19 )
  (bool~) f0::$2 ← (byte) ba#7 == (number) 1
  (bool~) f0::$3 ← ! (bool~) f0::$2
  if((bool~) f0::$3) goto f0::@2
  to:f0::@12
f0::@11: scope:[f0]  from f0
  (byte) ba#30 ← phi( f0/(byte) ba#6 )
  (byte) bd#84 ← phi( f0/(byte) bd#128 )
  (byte) bc#62 ← phi( f0/(byte) bc#95 )
  (byte) bb#17 ← phi( f0/(byte) bb#40 )
  (byte) bb#3 ← ++ (byte) bb#17
  call fa 
  to:f0::@21
f0::@21: scope:[f0]  from f0::@11
  (byte) bb#62 ← phi( f0::@11/(byte) bb#3 )
  (byte) ba#19 ← phi( f0::@11/(byte) ba#30 )
  (byte) bd#39 ← phi( f0::@11/(byte) bd#24 )
  (byte) bc#28 ← phi( f0::@11/(byte) bc#24 )
  (byte) bc#3 ← (byte) bc#28
  (byte) bd#3 ← (byte) bd#39
  to:f0::@1
f0::@2: scope:[f0]  from f0::@1 f0::@22
  (byte) bd#130 ← phi( f0::@1/(byte) bd#129 f0::@22/(byte) bd#4 )
  (byte) bc#97 ← phi( f0::@1/(byte) bc#96 f0::@22/(byte) bc#4 )
  (byte) bb#42 ← phi( f0::@1/(byte) bb#41 f0::@22/(byte) bb#63 )
  (byte) ba#8 ← phi( f0::@1/(byte) ba#7 f0::@22/(byte) ba#20 )
  (bool~) f0::$4 ← (byte) ba#8 == (number) 2
  (bool~) f0::$5 ← ! (bool~) f0::$4
  if((bool~) f0::$5) goto f0::@3
  to:f0::@13
f0::@12: scope:[f0]  from f0::@1
  (byte) ba#31 ← phi( f0::@1/(byte) ba#7 )
  (byte) bd#85 ← phi( f0::@1/(byte) bd#129 )
  (byte) bc#63 ← phi( f0::@1/(byte) bc#96 )
  (byte) bb#18 ← phi( f0::@1/(byte) bb#41 )
  (byte) bb#4 ← ++ (byte) bb#18
  call fa 
  to:f0::@22
f0::@22: scope:[f0]  from f0::@12
  (byte) bb#63 ← phi( f0::@12/(byte) bb#4 )
  (byte) ba#20 ← phi( f0::@12/(byte) ba#31 )
  (byte) bd#40 ← phi( f0::@12/(byte) bd#24 )
  (byte) bc#29 ← phi( f0::@12/(byte) bc#24 )
  (byte) bc#4 ← (byte) bc#29
  (byte) bd#4 ← (byte) bd#40
  to:f0::@2
f0::@3: scope:[f0]  from f0::@2 f0::@23
  (byte) bd#131 ← phi( f0::@2/(byte) bd#130 f0::@23/(byte) bd#5 )
  (byte) bc#98 ← phi( f0::@2/(byte) bc#97 f0::@23/(byte) bc#5 )
  (byte) bb#43 ← phi( f0::@2/(byte) bb#42 f0::@23/(byte) bb#64 )
  (byte) ba#9 ← phi( f0::@2/(byte) ba#8 f0::@23/(byte) ba#21 )
  (bool~) f0::$6 ← (byte) ba#9 == (number) 3
  (bool~) f0::$7 ← ! (bool~) f0::$6
  if((bool~) f0::$7) goto f0::@4
  to:f0::@14
f0::@13: scope:[f0]  from f0::@2
  (byte) ba#32 ← phi( f0::@2/(byte) ba#8 )
  (byte) bd#86 ← phi( f0::@2/(byte) bd#130 )
  (byte) bc#64 ← phi( f0::@2/(byte) bc#97 )
  (byte) bb#19 ← phi( f0::@2/(byte) bb#42 )
  (byte) bb#5 ← ++ (byte) bb#19
  call fa 
  to:f0::@23
f0::@23: scope:[f0]  from f0::@13
  (byte) bb#64 ← phi( f0::@13/(byte) bb#5 )
  (byte) ba#21 ← phi( f0::@13/(byte) ba#32 )
  (byte) bd#41 ← phi( f0::@13/(byte) bd#24 )
  (byte) bc#30 ← phi( f0::@13/(byte) bc#24 )
  (byte) bc#5 ← (byte) bc#30
  (byte) bd#5 ← (byte) bd#41
  to:f0::@3
f0::@4: scope:[f0]  from f0::@24 f0::@3
  (byte) bd#132 ← phi( f0::@24/(byte) bd#6 f0::@3/(byte) bd#131 )
  (byte) bc#99 ← phi( f0::@24/(byte) bc#6 f0::@3/(byte) bc#98 )
  (byte) bb#44 ← phi( f0::@24/(byte) bb#65 f0::@3/(byte) bb#43 )
  (byte) ba#10 ← phi( f0::@24/(byte) ba#22 f0::@3/(byte) ba#9 )
  (bool~) f0::$8 ← (byte) ba#10 == (number) 4
  (bool~) f0::$9 ← ! (bool~) f0::$8
  if((bool~) f0::$9) goto f0::@5
  to:f0::@15
f0::@14: scope:[f0]  from f0::@3
  (byte) ba#33 ← phi( f0::@3/(byte) ba#9 )
  (byte) bd#87 ← phi( f0::@3/(byte) bd#131 )
  (byte) bc#65 ← phi( f0::@3/(byte) bc#98 )
  (byte) bb#20 ← phi( f0::@3/(byte) bb#43 )
  (byte) bb#6 ← ++ (byte) bb#20
  call fa 
  to:f0::@24
f0::@24: scope:[f0]  from f0::@14
  (byte) bb#65 ← phi( f0::@14/(byte) bb#6 )
  (byte) ba#22 ← phi( f0::@14/(byte) ba#33 )
  (byte) bd#42 ← phi( f0::@14/(byte) bd#24 )
  (byte) bc#31 ← phi( f0::@14/(byte) bc#24 )
  (byte) bc#6 ← (byte) bc#31
  (byte) bd#6 ← (byte) bd#42
  to:f0::@4
f0::@5: scope:[f0]  from f0::@25 f0::@4
  (byte) bd#133 ← phi( f0::@25/(byte) bd#7 f0::@4/(byte) bd#132 )
  (byte) bc#100 ← phi( f0::@25/(byte) bc#7 f0::@4/(byte) bc#99 )
  (byte) bb#45 ← phi( f0::@25/(byte) bb#66 f0::@4/(byte) bb#44 )
  (byte) ba#11 ← phi( f0::@25/(byte) ba#23 f0::@4/(byte) ba#10 )
  (bool~) f0::$10 ← (byte) ba#11 == (number) 5
  (bool~) f0::$11 ← ! (bool~) f0::$10
  if((bool~) f0::$11) goto f0::@6
  to:f0::@16
f0::@15: scope:[f0]  from f0::@4
  (byte) ba#34 ← phi( f0::@4/(byte) ba#10 )
  (byte) bd#88 ← phi( f0::@4/(byte) bd#132 )
  (byte) bc#66 ← phi( f0::@4/(byte) bc#99 )
  (byte) bb#21 ← phi( f0::@4/(byte) bb#44 )
  (byte) bb#7 ← ++ (byte) bb#21
  call fa 
  to:f0::@25
f0::@25: scope:[f0]  from f0::@15
  (byte) bb#66 ← phi( f0::@15/(byte) bb#7 )
  (byte) ba#23 ← phi( f0::@15/(byte) ba#34 )
  (byte) bd#43 ← phi( f0::@15/(byte) bd#24 )
  (byte) bc#32 ← phi( f0::@15/(byte) bc#24 )
  (byte) bc#7 ← (byte) bc#32
  (byte) bd#7 ← (byte) bd#43
  to:f0::@5
f0::@6: scope:[f0]  from f0::@26 f0::@5
  (byte) bd#134 ← phi( f0::@26/(byte) bd#8 f0::@5/(byte) bd#133 )
  (byte) bc#101 ← phi( f0::@26/(byte) bc#8 f0::@5/(byte) bc#100 )
  (byte) bb#46 ← phi( f0::@26/(byte) bb#67 f0::@5/(byte) bb#45 )
  (byte) ba#12 ← phi( f0::@26/(byte) ba#24 f0::@5/(byte) ba#11 )
  (bool~) f0::$12 ← (byte) ba#12 == (number) 6
  (bool~) f0::$13 ← ! (bool~) f0::$12
  if((bool~) f0::$13) goto f0::@7
  to:f0::@17
f0::@16: scope:[f0]  from f0::@5
  (byte) ba#35 ← phi( f0::@5/(byte) ba#11 )
  (byte) bd#89 ← phi( f0::@5/(byte) bd#133 )
  (byte) bc#67 ← phi( f0::@5/(byte) bc#100 )
  (byte) bb#22 ← phi( f0::@5/(byte) bb#45 )
  (byte) bb#8 ← ++ (byte) bb#22
  call fa 
  to:f0::@26
f0::@26: scope:[f0]  from f0::@16
  (byte) bb#67 ← phi( f0::@16/(byte) bb#8 )
  (byte) ba#24 ← phi( f0::@16/(byte) ba#35 )
  (byte) bd#44 ← phi( f0::@16/(byte) bd#24 )
  (byte) bc#33 ← phi( f0::@16/(byte) bc#24 )
  (byte) bc#8 ← (byte) bc#33
  (byte) bd#8 ← (byte) bd#44
  to:f0::@6
f0::@7: scope:[f0]  from f0::@27 f0::@6
  (byte) bd#135 ← phi( f0::@27/(byte) bd#9 f0::@6/(byte) bd#134 )
  (byte) bc#102 ← phi( f0::@27/(byte) bc#9 f0::@6/(byte) bc#101 )
  (byte) bb#47 ← phi( f0::@27/(byte) bb#68 f0::@6/(byte) bb#46 )
  (byte) ba#13 ← phi( f0::@27/(byte) ba#25 f0::@6/(byte) ba#12 )
  (bool~) f0::$14 ← (byte) ba#13 == (number) 7
  (bool~) f0::$15 ← ! (bool~) f0::$14
  if((bool~) f0::$15) goto f0::@8
  to:f0::@18
f0::@17: scope:[f0]  from f0::@6
  (byte) ba#36 ← phi( f0::@6/(byte) ba#12 )
  (byte) bd#90 ← phi( f0::@6/(byte) bd#134 )
  (byte) bc#68 ← phi( f0::@6/(byte) bc#101 )
  (byte) bb#23 ← phi( f0::@6/(byte) bb#46 )
  (byte) bb#9 ← ++ (byte) bb#23
  call fa 
  to:f0::@27
f0::@27: scope:[f0]  from f0::@17
  (byte) bb#68 ← phi( f0::@17/(byte) bb#9 )
  (byte) ba#25 ← phi( f0::@17/(byte) ba#36 )
  (byte) bd#45 ← phi( f0::@17/(byte) bd#24 )
  (byte) bc#34 ← phi( f0::@17/(byte) bc#24 )
  (byte) bc#9 ← (byte) bc#34
  (byte) bd#9 ← (byte) bd#45
  to:f0::@7
f0::@8: scope:[f0]  from f0::@28 f0::@7
  (byte) bd#136 ← phi( f0::@28/(byte) bd#10 f0::@7/(byte) bd#135 )
  (byte) bc#103 ← phi( f0::@28/(byte) bc#10 f0::@7/(byte) bc#102 )
  (byte) bb#48 ← phi( f0::@28/(byte) bb#69 f0::@7/(byte) bb#47 )
  (byte) ba#14 ← phi( f0::@28/(byte) ba#26 f0::@7/(byte) ba#13 )
  (bool~) f0::$16 ← (byte) ba#14 == (number) 8
  (bool~) f0::$17 ← ! (bool~) f0::$16
  if((bool~) f0::$17) goto f0::@9
  to:f0::@19
f0::@18: scope:[f0]  from f0::@7
  (byte) ba#37 ← phi( f0::@7/(byte) ba#13 )
  (byte) bd#91 ← phi( f0::@7/(byte) bd#135 )
  (byte) bc#69 ← phi( f0::@7/(byte) bc#102 )
  (byte) bb#24 ← phi( f0::@7/(byte) bb#47 )
  (byte) bb#10 ← ++ (byte) bb#24
  call fa 
  to:f0::@28
f0::@28: scope:[f0]  from f0::@18
  (byte) bb#69 ← phi( f0::@18/(byte) bb#10 )
  (byte) ba#26 ← phi( f0::@18/(byte) ba#37 )
  (byte) bd#46 ← phi( f0::@18/(byte) bd#24 )
  (byte) bc#35 ← phi( f0::@18/(byte) bc#24 )
  (byte) bc#10 ← (byte) bc#35
  (byte) bd#10 ← (byte) bd#46
  to:f0::@8
f0::@9: scope:[f0]  from f0::@29 f0::@8
  (byte) bd#94 ← phi( f0::@29/(byte) bd#11 f0::@8/(byte) bd#136 )
  (byte) bc#72 ← phi( f0::@29/(byte) bc#11 f0::@8/(byte) bc#103 )
  (byte) bb#50 ← phi( f0::@29/(byte) bb#70 f0::@8/(byte) bb#48 )
  (byte) ba#15 ← phi( f0::@29/(byte) ba#27 f0::@8/(byte) ba#14 )
  (bool~) f0::$18 ← (byte) ba#15 == (number) 9
  (bool~) f0::$19 ← ! (bool~) f0::$18
  if((bool~) f0::$19) goto f0::@return
  to:f0::@20
f0::@19: scope:[f0]  from f0::@8
  (byte) ba#38 ← phi( f0::@8/(byte) ba#14 )
  (byte) bd#92 ← phi( f0::@8/(byte) bd#136 )
  (byte) bc#70 ← phi( f0::@8/(byte) bc#103 )
  (byte) bb#25 ← phi( f0::@8/(byte) bb#48 )
  (byte) bb#11 ← ++ (byte) bb#25
  call fa 
  to:f0::@29
f0::@29: scope:[f0]  from f0::@19
  (byte) bb#70 ← phi( f0::@19/(byte) bb#11 )
  (byte) ba#27 ← phi( f0::@19/(byte) ba#38 )
  (byte) bd#47 ← phi( f0::@19/(byte) bd#24 )
  (byte) bc#36 ← phi( f0::@19/(byte) bc#24 )
  (byte) bc#11 ← (byte) bc#36
  (byte) bd#11 ← (byte) bd#47
  to:f0::@9
f0::@20: scope:[f0]  from f0::@9
  (byte) bd#93 ← phi( f0::@9/(byte) bd#94 )
  (byte) bc#71 ← phi( f0::@9/(byte) bc#72 )
  (byte) bb#12 ← (number) 0
  call fa 
  to:f0::@30
f0::@30: scope:[f0]  from f0::@20
  (byte) bb#49 ← phi( f0::@20/(byte) bb#12 )
  (byte) bd#48 ← phi( f0::@20/(byte) bd#24 )
  (byte) bc#37 ← phi( f0::@20/(byte) bc#24 )
  (byte) bc#12 ← (byte) bc#37
  (byte) bd#12 ← (byte) bd#48
  to:f0::@return
f0::@return: scope:[f0]  from f0::@30 f0::@9
  (byte) bd#49 ← phi( f0::@30/(byte) bd#12 f0::@9/(byte) bd#94 )
  (byte) bc#38 ← phi( f0::@30/(byte) bc#12 f0::@9/(byte) bc#72 )
  (byte) bb#26 ← phi( f0::@30/(byte) bb#49 f0::@9/(byte) bb#50 )
  (byte) bb#13 ← (byte) bb#26
  (byte) bc#13 ← (byte) bc#38
  (byte) bd#13 ← (byte) bd#49
  return 
  to:@return

(void()) fa()
fa: scope:[fa]  from f0::@11 f0::@12 f0::@13 f0::@14 f0::@15 f0::@16 f0::@17 f0::@18 f0::@19 f0::@20
  (byte) bd#137 ← phi( f0::@11/(byte) bd#84 f0::@12/(byte) bd#85 f0::@13/(byte) bd#86 f0::@14/(byte) bd#87 f0::@15/(byte) bd#88 f0::@16/(byte) bd#89 f0::@17/(byte) bd#90 f0::@18/(byte) bd#91 f0::@19/(byte) bd#92 f0::@20/(byte) bd#93 )
  (byte) bc#73 ← phi( f0::@11/(byte) bc#62 f0::@12/(byte) bc#63 f0::@13/(byte) bc#64 f0::@14/(byte) bc#65 f0::@15/(byte) bc#66 f0::@16/(byte) bc#67 f0::@17/(byte) bc#68 f0::@18/(byte) bc#69 f0::@19/(byte) bc#70 f0::@20/(byte) bc#71 )
  (byte) bb#27 ← phi( f0::@11/(byte) bb#3 f0::@12/(byte) bb#4 f0::@13/(byte) bb#5 f0::@14/(byte) bb#6 f0::@15/(byte) bb#7 f0::@16/(byte) bb#8 f0::@17/(byte) bb#9 f0::@18/(byte) bb#10 f0::@19/(byte) bb#11 f0::@20/(byte) bb#12 )
  (bool~) fa::$0 ← (byte) bb#27 == (number) 0
  (bool~) fa::$1 ← ! (bool~) fa::$0
  if((bool~) fa::$1) goto fa::@1
  to:fa::@11
fa::@1: scope:[fa]  from fa fa::@21
  (byte) bd#138 ← phi( fa/(byte) bd#137 fa::@21/(byte) bd#14 )
  (byte) bc#74 ← phi( fa/(byte) bc#73 fa::@21/(byte) bc#104 )
  (byte) bb#28 ← phi( fa/(byte) bb#27 fa::@21/(byte) bb#51 )
  (bool~) fa::$2 ← (byte) bb#28 == (number) 1
  (bool~) fa::$3 ← ! (bool~) fa::$2
  if((bool~) fa::$3) goto fa::@2
  to:fa::@12
fa::@11: scope:[fa]  from fa
  (byte) bb#71 ← phi( fa/(byte) bb#27 )
  (byte) bd#95 ← phi( fa/(byte) bd#137 )
  (byte) bc#39 ← phi( fa/(byte) bc#73 )
  (byte) bc#14 ← ++ (byte) bc#39
  call fb 
  to:fa::@21
fa::@21: scope:[fa]  from fa::@11
  (byte) bc#104 ← phi( fa::@11/(byte) bc#14 )
  (byte) bb#51 ← phi( fa::@11/(byte) bb#71 )
  (byte) bd#50 ← phi( fa::@11/(byte) bd#35 )
  (byte) bd#14 ← (byte) bd#50
  to:fa::@1
fa::@2: scope:[fa]  from fa::@1 fa::@22
  (byte) bd#139 ← phi( fa::@1/(byte) bd#138 fa::@22/(byte) bd#15 )
  (byte) bc#75 ← phi( fa::@1/(byte) bc#74 fa::@22/(byte) bc#105 )
  (byte) bb#29 ← phi( fa::@1/(byte) bb#28 fa::@22/(byte) bb#52 )
  (bool~) fa::$4 ← (byte) bb#29 == (number) 2
  (bool~) fa::$5 ← ! (bool~) fa::$4
  if((bool~) fa::$5) goto fa::@3
  to:fa::@13
fa::@12: scope:[fa]  from fa::@1
  (byte) bb#72 ← phi( fa::@1/(byte) bb#28 )
  (byte) bd#96 ← phi( fa::@1/(byte) bd#138 )
  (byte) bc#40 ← phi( fa::@1/(byte) bc#74 )
  (byte) bc#15 ← ++ (byte) bc#40
  call fb 
  to:fa::@22
fa::@22: scope:[fa]  from fa::@12
  (byte) bc#105 ← phi( fa::@12/(byte) bc#15 )
  (byte) bb#52 ← phi( fa::@12/(byte) bb#72 )
  (byte) bd#51 ← phi( fa::@12/(byte) bd#35 )
  (byte) bd#15 ← (byte) bd#51
  to:fa::@2
fa::@3: scope:[fa]  from fa::@2 fa::@23
  (byte) bd#140 ← phi( fa::@2/(byte) bd#139 fa::@23/(byte) bd#16 )
  (byte) bc#76 ← phi( fa::@2/(byte) bc#75 fa::@23/(byte) bc#106 )
  (byte) bb#30 ← phi( fa::@2/(byte) bb#29 fa::@23/(byte) bb#53 )
  (bool~) fa::$6 ← (byte) bb#30 == (number) 3
  (bool~) fa::$7 ← ! (bool~) fa::$6
  if((bool~) fa::$7) goto fa::@4
  to:fa::@14
fa::@13: scope:[fa]  from fa::@2
  (byte) bb#73 ← phi( fa::@2/(byte) bb#29 )
  (byte) bd#97 ← phi( fa::@2/(byte) bd#139 )
  (byte) bc#41 ← phi( fa::@2/(byte) bc#75 )
  (byte) bc#16 ← ++ (byte) bc#41
  call fb 
  to:fa::@23
fa::@23: scope:[fa]  from fa::@13
  (byte) bc#106 ← phi( fa::@13/(byte) bc#16 )
  (byte) bb#53 ← phi( fa::@13/(byte) bb#73 )
  (byte) bd#52 ← phi( fa::@13/(byte) bd#35 )
  (byte) bd#16 ← (byte) bd#52
  to:fa::@3
fa::@4: scope:[fa]  from fa::@24 fa::@3
  (byte) bd#141 ← phi( fa::@24/(byte) bd#17 fa::@3/(byte) bd#140 )
  (byte) bc#77 ← phi( fa::@24/(byte) bc#107 fa::@3/(byte) bc#76 )
  (byte) bb#31 ← phi( fa::@24/(byte) bb#54 fa::@3/(byte) bb#30 )
  (bool~) fa::$8 ← (byte) bb#31 == (number) 4
  (bool~) fa::$9 ← ! (bool~) fa::$8
  if((bool~) fa::$9) goto fa::@5
  to:fa::@15
fa::@14: scope:[fa]  from fa::@3
  (byte) bb#74 ← phi( fa::@3/(byte) bb#30 )
  (byte) bd#98 ← phi( fa::@3/(byte) bd#140 )
  (byte) bc#42 ← phi( fa::@3/(byte) bc#76 )
  (byte) bc#17 ← ++ (byte) bc#42
  call fb 
  to:fa::@24
fa::@24: scope:[fa]  from fa::@14
  (byte) bc#107 ← phi( fa::@14/(byte) bc#17 )
  (byte) bb#54 ← phi( fa::@14/(byte) bb#74 )
  (byte) bd#53 ← phi( fa::@14/(byte) bd#35 )
  (byte) bd#17 ← (byte) bd#53
  to:fa::@4
fa::@5: scope:[fa]  from fa::@25 fa::@4
  (byte) bd#142 ← phi( fa::@25/(byte) bd#18 fa::@4/(byte) bd#141 )
  (byte) bc#78 ← phi( fa::@25/(byte) bc#108 fa::@4/(byte) bc#77 )
  (byte) bb#32 ← phi( fa::@25/(byte) bb#55 fa::@4/(byte) bb#31 )
  (bool~) fa::$10 ← (byte) bb#32 == (number) 5
  (bool~) fa::$11 ← ! (bool~) fa::$10
  if((bool~) fa::$11) goto fa::@6
  to:fa::@16
fa::@15: scope:[fa]  from fa::@4
  (byte) bb#75 ← phi( fa::@4/(byte) bb#31 )
  (byte) bd#99 ← phi( fa::@4/(byte) bd#141 )
  (byte) bc#43 ← phi( fa::@4/(byte) bc#77 )
  (byte) bc#18 ← ++ (byte) bc#43
  call fb 
  to:fa::@25
fa::@25: scope:[fa]  from fa::@15
  (byte) bc#108 ← phi( fa::@15/(byte) bc#18 )
  (byte) bb#55 ← phi( fa::@15/(byte) bb#75 )
  (byte) bd#54 ← phi( fa::@15/(byte) bd#35 )
  (byte) bd#18 ← (byte) bd#54
  to:fa::@5
fa::@6: scope:[fa]  from fa::@26 fa::@5
  (byte) bd#143 ← phi( fa::@26/(byte) bd#19 fa::@5/(byte) bd#142 )
  (byte) bc#79 ← phi( fa::@26/(byte) bc#109 fa::@5/(byte) bc#78 )
  (byte) bb#33 ← phi( fa::@26/(byte) bb#56 fa::@5/(byte) bb#32 )
  (bool~) fa::$12 ← (byte) bb#33 == (number) 6
  (bool~) fa::$13 ← ! (bool~) fa::$12
  if((bool~) fa::$13) goto fa::@7
  to:fa::@17
fa::@16: scope:[fa]  from fa::@5
  (byte) bb#76 ← phi( fa::@5/(byte) bb#32 )
  (byte) bd#100 ← phi( fa::@5/(byte) bd#142 )
  (byte) bc#44 ← phi( fa::@5/(byte) bc#78 )
  (byte) bc#19 ← ++ (byte) bc#44
  call fb 
  to:fa::@26
fa::@26: scope:[fa]  from fa::@16
  (byte) bc#109 ← phi( fa::@16/(byte) bc#19 )
  (byte) bb#56 ← phi( fa::@16/(byte) bb#76 )
  (byte) bd#55 ← phi( fa::@16/(byte) bd#35 )
  (byte) bd#19 ← (byte) bd#55
  to:fa::@6
fa::@7: scope:[fa]  from fa::@27 fa::@6
  (byte) bd#144 ← phi( fa::@27/(byte) bd#20 fa::@6/(byte) bd#143 )
  (byte) bc#80 ← phi( fa::@27/(byte) bc#110 fa::@6/(byte) bc#79 )
  (byte) bb#34 ← phi( fa::@27/(byte) bb#57 fa::@6/(byte) bb#33 )
  (bool~) fa::$14 ← (byte) bb#34 == (number) 7
  (bool~) fa::$15 ← ! (bool~) fa::$14
  if((bool~) fa::$15) goto fa::@8
  to:fa::@18
fa::@17: scope:[fa]  from fa::@6
  (byte) bb#77 ← phi( fa::@6/(byte) bb#33 )
  (byte) bd#101 ← phi( fa::@6/(byte) bd#143 )
  (byte) bc#45 ← phi( fa::@6/(byte) bc#79 )
  (byte) bc#20 ← ++ (byte) bc#45
  call fb 
  to:fa::@27
fa::@27: scope:[fa]  from fa::@17
  (byte) bc#110 ← phi( fa::@17/(byte) bc#20 )
  (byte) bb#57 ← phi( fa::@17/(byte) bb#77 )
  (byte) bd#56 ← phi( fa::@17/(byte) bd#35 )
  (byte) bd#20 ← (byte) bd#56
  to:fa::@7
fa::@8: scope:[fa]  from fa::@28 fa::@7
  (byte) bd#145 ← phi( fa::@28/(byte) bd#21 fa::@7/(byte) bd#144 )
  (byte) bc#81 ← phi( fa::@28/(byte) bc#111 fa::@7/(byte) bc#80 )
  (byte) bb#35 ← phi( fa::@28/(byte) bb#58 fa::@7/(byte) bb#34 )
  (bool~) fa::$16 ← (byte) bb#35 == (number) 8
  (bool~) fa::$17 ← ! (bool~) fa::$16
  if((bool~) fa::$17) goto fa::@9
  to:fa::@19
fa::@18: scope:[fa]  from fa::@7
  (byte) bb#78 ← phi( fa::@7/(byte) bb#34 )
  (byte) bd#102 ← phi( fa::@7/(byte) bd#144 )
  (byte) bc#46 ← phi( fa::@7/(byte) bc#80 )
  (byte) bc#21 ← ++ (byte) bc#46
  call fb 
  to:fa::@28
fa::@28: scope:[fa]  from fa::@18
  (byte) bc#111 ← phi( fa::@18/(byte) bc#21 )
  (byte) bb#58 ← phi( fa::@18/(byte) bb#78 )
  (byte) bd#57 ← phi( fa::@18/(byte) bd#35 )
  (byte) bd#21 ← (byte) bd#57
  to:fa::@8
fa::@9: scope:[fa]  from fa::@29 fa::@8
  (byte) bd#105 ← phi( fa::@29/(byte) bd#22 fa::@8/(byte) bd#145 )
  (byte) bc#83 ← phi( fa::@29/(byte) bc#112 fa::@8/(byte) bc#81 )
  (byte) bb#36 ← phi( fa::@29/(byte) bb#59 fa::@8/(byte) bb#35 )
  (bool~) fa::$18 ← (byte) bb#36 == (number) 9
  (bool~) fa::$19 ← ! (bool~) fa::$18
  if((bool~) fa::$19) goto fa::@return
  to:fa::@20
fa::@19: scope:[fa]  from fa::@8
  (byte) bb#79 ← phi( fa::@8/(byte) bb#35 )
  (byte) bd#103 ← phi( fa::@8/(byte) bd#145 )
  (byte) bc#47 ← phi( fa::@8/(byte) bc#81 )
  (byte) bc#22 ← ++ (byte) bc#47
  call fb 
  to:fa::@29
fa::@29: scope:[fa]  from fa::@19
  (byte) bc#112 ← phi( fa::@19/(byte) bc#22 )
  (byte) bb#59 ← phi( fa::@19/(byte) bb#79 )
  (byte) bd#58 ← phi( fa::@19/(byte) bd#35 )
  (byte) bd#22 ← (byte) bd#58
  to:fa::@9
fa::@20: scope:[fa]  from fa::@9
  (byte) bd#104 ← phi( fa::@9/(byte) bd#105 )
  (byte) bc#23 ← (number) 0
  call fb 
  to:fa::@30
fa::@30: scope:[fa]  from fa::@20
  (byte) bc#82 ← phi( fa::@20/(byte) bc#23 )
  (byte) bd#59 ← phi( fa::@20/(byte) bd#35 )
  (byte) bd#23 ← (byte) bd#59
  to:fa::@return
fa::@return: scope:[fa]  from fa::@30 fa::@9
  (byte) bd#60 ← phi( fa::@30/(byte) bd#23 fa::@9/(byte) bd#105 )
  (byte) bc#48 ← phi( fa::@30/(byte) bc#82 fa::@9/(byte) bc#83 )
  (byte) bc#24 ← (byte) bc#48
  (byte) bd#24 ← (byte) bd#60
  return 
  to:@return

(void()) fb()
fb: scope:[fb]  from fa::@11 fa::@12 fa::@13 fa::@14 fa::@15 fa::@16 fa::@17 fa::@18 fa::@19 fa::@20
  (byte) bd#106 ← phi( fa::@11/(byte) bd#95 fa::@12/(byte) bd#96 fa::@13/(byte) bd#97 fa::@14/(byte) bd#98 fa::@15/(byte) bd#99 fa::@16/(byte) bd#100 fa::@17/(byte) bd#101 fa::@18/(byte) bd#102 fa::@19/(byte) bd#103 fa::@20/(byte) bd#104 )
  (byte) bc#49 ← phi( fa::@11/(byte) bc#14 fa::@12/(byte) bc#15 fa::@13/(byte) bc#16 fa::@14/(byte) bc#17 fa::@15/(byte) bc#18 fa::@16/(byte) bc#19 fa::@17/(byte) bc#20 fa::@18/(byte) bc#21 fa::@19/(byte) bc#22 fa::@20/(byte) bc#23 )
  (bool~) fb::$0 ← (byte) bc#49 == (number) 0
  (bool~) fb::$1 ← ! (bool~) fb::$0
  if((bool~) fb::$1) goto fb::@1
  to:fb::@11
fb::@1: scope:[fb]  from fb fb::@21
  (byte) bd#107 ← phi( fb/(byte) bd#106 fb::@21/(byte) bd#146 )
  (byte) bc#50 ← phi( fb/(byte) bc#49 fb::@21/(byte) bc#84 )
  (bool~) fb::$2 ← (byte) bc#50 == (number) 1
  (bool~) fb::$3 ← ! (bool~) fb::$2
  if((bool~) fb::$3) goto fb::@2
  to:fb::@12
fb::@11: scope:[fb]  from fb
  (byte) bc#113 ← phi( fb/(byte) bc#49 )
  (byte) bd#61 ← phi( fb/(byte) bd#106 )
  (byte) bd#25 ← ++ (byte) bd#61
  call fc 
  to:fb::@21
fb::@21: scope:[fb]  from fb::@11
  (byte) bd#146 ← phi( fb::@11/(byte) bd#25 )
  (byte) bc#84 ← phi( fb::@11/(byte) bc#113 )
  to:fb::@1
fb::@2: scope:[fb]  from fb::@1 fb::@22
  (byte) bd#108 ← phi( fb::@1/(byte) bd#107 fb::@22/(byte) bd#147 )
  (byte) bc#51 ← phi( fb::@1/(byte) bc#50 fb::@22/(byte) bc#85 )
  (bool~) fb::$4 ← (byte) bc#51 == (number) 2
  (bool~) fb::$5 ← ! (bool~) fb::$4
  if((bool~) fb::$5) goto fb::@3
  to:fb::@13
fb::@12: scope:[fb]  from fb::@1
  (byte) bc#114 ← phi( fb::@1/(byte) bc#50 )
  (byte) bd#62 ← phi( fb::@1/(byte) bd#107 )
  (byte) bd#26 ← ++ (byte) bd#62
  call fc 
  to:fb::@22
fb::@22: scope:[fb]  from fb::@12
  (byte) bd#147 ← phi( fb::@12/(byte) bd#26 )
  (byte) bc#85 ← phi( fb::@12/(byte) bc#114 )
  to:fb::@2
fb::@3: scope:[fb]  from fb::@2 fb::@23
  (byte) bd#109 ← phi( fb::@2/(byte) bd#108 fb::@23/(byte) bd#148 )
  (byte) bc#52 ← phi( fb::@2/(byte) bc#51 fb::@23/(byte) bc#86 )
  (bool~) fb::$6 ← (byte) bc#52 == (number) 3
  (bool~) fb::$7 ← ! (bool~) fb::$6
  if((bool~) fb::$7) goto fb::@4
  to:fb::@14
fb::@13: scope:[fb]  from fb::@2
  (byte) bc#115 ← phi( fb::@2/(byte) bc#51 )
  (byte) bd#63 ← phi( fb::@2/(byte) bd#108 )
  (byte) bd#27 ← ++ (byte) bd#63
  call fc 
  to:fb::@23
fb::@23: scope:[fb]  from fb::@13
  (byte) bd#148 ← phi( fb::@13/(byte) bd#27 )
  (byte) bc#86 ← phi( fb::@13/(byte) bc#115 )
  to:fb::@3
fb::@4: scope:[fb]  from fb::@24 fb::@3
  (byte) bd#110 ← phi( fb::@24/(byte) bd#149 fb::@3/(byte) bd#109 )
  (byte) bc#53 ← phi( fb::@24/(byte) bc#87 fb::@3/(byte) bc#52 )
  (bool~) fb::$8 ← (byte) bc#53 == (number) 4
  (bool~) fb::$9 ← ! (bool~) fb::$8
  if((bool~) fb::$9) goto fb::@5
  to:fb::@15
fb::@14: scope:[fb]  from fb::@3
  (byte) bc#116 ← phi( fb::@3/(byte) bc#52 )
  (byte) bd#64 ← phi( fb::@3/(byte) bd#109 )
  (byte) bd#28 ← ++ (byte) bd#64
  call fc 
  to:fb::@24
fb::@24: scope:[fb]  from fb::@14
  (byte) bd#149 ← phi( fb::@14/(byte) bd#28 )
  (byte) bc#87 ← phi( fb::@14/(byte) bc#116 )
  to:fb::@4
fb::@5: scope:[fb]  from fb::@25 fb::@4
  (byte) bd#111 ← phi( fb::@25/(byte) bd#150 fb::@4/(byte) bd#110 )
  (byte) bc#54 ← phi( fb::@25/(byte) bc#88 fb::@4/(byte) bc#53 )
  (bool~) fb::$10 ← (byte) bc#54 == (number) 5
  (bool~) fb::$11 ← ! (bool~) fb::$10
  if((bool~) fb::$11) goto fb::@6
  to:fb::@16
fb::@15: scope:[fb]  from fb::@4
  (byte) bc#117 ← phi( fb::@4/(byte) bc#53 )
  (byte) bd#65 ← phi( fb::@4/(byte) bd#110 )
  (byte) bd#29 ← ++ (byte) bd#65
  call fc 
  to:fb::@25
fb::@25: scope:[fb]  from fb::@15
  (byte) bd#150 ← phi( fb::@15/(byte) bd#29 )
  (byte) bc#88 ← phi( fb::@15/(byte) bc#117 )
  to:fb::@5
fb::@6: scope:[fb]  from fb::@26 fb::@5
  (byte) bd#112 ← phi( fb::@26/(byte) bd#151 fb::@5/(byte) bd#111 )
  (byte) bc#55 ← phi( fb::@26/(byte) bc#89 fb::@5/(byte) bc#54 )
  (bool~) fb::$12 ← (byte) bc#55 == (number) 6
  (bool~) fb::$13 ← ! (bool~) fb::$12
  if((bool~) fb::$13) goto fb::@7
  to:fb::@17
fb::@16: scope:[fb]  from fb::@5
  (byte) bc#118 ← phi( fb::@5/(byte) bc#54 )
  (byte) bd#66 ← phi( fb::@5/(byte) bd#111 )
  (byte) bd#30 ← ++ (byte) bd#66
  call fc 
  to:fb::@26
fb::@26: scope:[fb]  from fb::@16
  (byte) bd#151 ← phi( fb::@16/(byte) bd#30 )
  (byte) bc#89 ← phi( fb::@16/(byte) bc#118 )
  to:fb::@6
fb::@7: scope:[fb]  from fb::@27 fb::@6
  (byte) bd#113 ← phi( fb::@27/(byte) bd#152 fb::@6/(byte) bd#112 )
  (byte) bc#56 ← phi( fb::@27/(byte) bc#90 fb::@6/(byte) bc#55 )
  (bool~) fb::$14 ← (byte) bc#56 == (number) 7
  (bool~) fb::$15 ← ! (bool~) fb::$14
  if((bool~) fb::$15) goto fb::@8
  to:fb::@18
fb::@17: scope:[fb]  from fb::@6
  (byte) bc#119 ← phi( fb::@6/(byte) bc#55 )
  (byte) bd#67 ← phi( fb::@6/(byte) bd#112 )
  (byte) bd#31 ← ++ (byte) bd#67
  call fc 
  to:fb::@27
fb::@27: scope:[fb]  from fb::@17
  (byte) bd#152 ← phi( fb::@17/(byte) bd#31 )
  (byte) bc#90 ← phi( fb::@17/(byte) bc#119 )
  to:fb::@7
fb::@8: scope:[fb]  from fb::@28 fb::@7
  (byte) bd#114 ← phi( fb::@28/(byte) bd#153 fb::@7/(byte) bd#113 )
  (byte) bc#57 ← phi( fb::@28/(byte) bc#91 fb::@7/(byte) bc#56 )
  (bool~) fb::$16 ← (byte) bc#57 == (number) 8
  (bool~) fb::$17 ← ! (bool~) fb::$16
  if((bool~) fb::$17) goto fb::@9
  to:fb::@19
fb::@18: scope:[fb]  from fb::@7
  (byte) bc#120 ← phi( fb::@7/(byte) bc#56 )
  (byte) bd#68 ← phi( fb::@7/(byte) bd#113 )
  (byte) bd#32 ← ++ (byte) bd#68
  call fc 
  to:fb::@28
fb::@28: scope:[fb]  from fb::@18
  (byte) bd#153 ← phi( fb::@18/(byte) bd#32 )
  (byte) bc#91 ← phi( fb::@18/(byte) bc#120 )
  to:fb::@8
fb::@9: scope:[fb]  from fb::@29 fb::@8
  (byte) bd#116 ← phi( fb::@29/(byte) bd#154 fb::@8/(byte) bd#114 )
  (byte) bc#58 ← phi( fb::@29/(byte) bc#92 fb::@8/(byte) bc#57 )
  (bool~) fb::$18 ← (byte) bc#58 == (number) 9
  (bool~) fb::$19 ← ! (bool~) fb::$18
  if((bool~) fb::$19) goto fb::@return
  to:fb::@20
fb::@19: scope:[fb]  from fb::@8
  (byte) bc#121 ← phi( fb::@8/(byte) bc#57 )
  (byte) bd#69 ← phi( fb::@8/(byte) bd#114 )
  (byte) bd#33 ← ++ (byte) bd#69
  call fc 
  to:fb::@29
fb::@29: scope:[fb]  from fb::@19
  (byte) bd#154 ← phi( fb::@19/(byte) bd#33 )
  (byte) bc#92 ← phi( fb::@19/(byte) bc#121 )
  to:fb::@9
fb::@20: scope:[fb]  from fb::@9
  (byte) bd#34 ← (number) 0
  call fc 
  to:fb::@30
fb::@30: scope:[fb]  from fb::@20
  (byte) bd#115 ← phi( fb::@20/(byte) bd#34 )
  to:fb::@return
fb::@return: scope:[fb]  from fb::@30 fb::@9
  (byte) bd#70 ← phi( fb::@30/(byte) bd#115 fb::@9/(byte) bd#116 )
  (byte) bd#35 ← (byte) bd#70
  return 
  to:@return

(void()) fc()
fc: scope:[fc]  from fb::@11 fb::@12 fb::@13 fb::@14 fb::@15 fb::@16 fb::@17 fb::@18 fb::@19 fb::@20
  (byte) bd#71 ← phi( fb::@11/(byte) bd#25 fb::@12/(byte) bd#26 fb::@13/(byte) bd#27 fb::@14/(byte) bd#28 fb::@15/(byte) bd#29 fb::@16/(byte) bd#30 fb::@17/(byte) bd#31 fb::@18/(byte) bd#32 fb::@19/(byte) bd#33 fb::@20/(byte) bd#34 )
  (bool~) fc::$0 ← (byte) bd#71 == (number) 0
  (bool~) fc::$1 ← ! (bool~) fc::$0
  if((bool~) fc::$1) goto fc::@1
  to:fc::@11
fc::@1: scope:[fc]  from fc fc::@11
  (byte) bd#72 ← phi( fc/(byte) bd#71 fc::@11/(byte) bd#117 )
  (bool~) fc::$2 ← (byte) bd#72 == (number) 1
  (bool~) fc::$3 ← ! (bool~) fc::$2
  if((bool~) fc::$3) goto fc::@2
  to:fc::@12
fc::@11: scope:[fc]  from fc
  (byte) bd#117 ← phi( fc/(byte) bd#71 )
  to:fc::@1
fc::@2: scope:[fc]  from fc::@1 fc::@12
  (byte) bd#73 ← phi( fc::@1/(byte) bd#72 fc::@12/(byte) bd#118 )
  (bool~) fc::$4 ← (byte) bd#73 == (number) 2
  (bool~) fc::$5 ← ! (bool~) fc::$4
  if((bool~) fc::$5) goto fc::@3
  to:fc::@13
fc::@12: scope:[fc]  from fc::@1
  (byte) bd#118 ← phi( fc::@1/(byte) bd#72 )
  to:fc::@2
fc::@3: scope:[fc]  from fc::@13 fc::@2
  (byte) bd#74 ← phi( fc::@13/(byte) bd#119 fc::@2/(byte) bd#73 )
  (bool~) fc::$6 ← (byte) bd#74 == (number) 3
  (bool~) fc::$7 ← ! (bool~) fc::$6
  if((bool~) fc::$7) goto fc::@4
  to:fc::@14
fc::@13: scope:[fc]  from fc::@2
  (byte) bd#119 ← phi( fc::@2/(byte) bd#73 )
  to:fc::@3
fc::@4: scope:[fc]  from fc::@14 fc::@3
  (byte) bd#75 ← phi( fc::@14/(byte) bd#120 fc::@3/(byte) bd#74 )
  (bool~) fc::$8 ← (byte) bd#75 == (number) 4
  (bool~) fc::$9 ← ! (bool~) fc::$8
  if((bool~) fc::$9) goto fc::@5
  to:fc::@15
fc::@14: scope:[fc]  from fc::@3
  (byte) bd#120 ← phi( fc::@3/(byte) bd#74 )
  to:fc::@4
fc::@5: scope:[fc]  from fc::@15 fc::@4
  (byte) bd#76 ← phi( fc::@15/(byte) bd#121 fc::@4/(byte) bd#75 )
  (bool~) fc::$10 ← (byte) bd#76 == (number) 5
  (bool~) fc::$11 ← ! (bool~) fc::$10
  if((bool~) fc::$11) goto fc::@6
  to:fc::@16
fc::@15: scope:[fc]  from fc::@4
  (byte) bd#121 ← phi( fc::@4/(byte) bd#75 )
  to:fc::@5
fc::@6: scope:[fc]  from fc::@16 fc::@5
  (byte) bd#77 ← phi( fc::@16/(byte) bd#122 fc::@5/(byte) bd#76 )
  (bool~) fc::$12 ← (byte) bd#77 == (number) 6
  (bool~) fc::$13 ← ! (bool~) fc::$12
  if((bool~) fc::$13) goto fc::@7
  to:fc::@17
fc::@16: scope:[fc]  from fc::@5
  (byte) bd#122 ← phi( fc::@5/(byte) bd#76 )
  to:fc::@6
fc::@7: scope:[fc]  from fc::@17 fc::@6
  (byte) bd#78 ← phi( fc::@17/(byte) bd#123 fc::@6/(byte) bd#77 )
  (bool~) fc::$14 ← (byte) bd#78 == (number) 7
  (bool~) fc::$15 ← ! (bool~) fc::$14
  if((bool~) fc::$15) goto fc::@8
  to:fc::@18
fc::@17: scope:[fc]  from fc::@6
  (byte) bd#123 ← phi( fc::@6/(byte) bd#77 )
  to:fc::@7
fc::@8: scope:[fc]  from fc::@18 fc::@7
  (byte) bd#79 ← phi( fc::@18/(byte) bd#124 fc::@7/(byte) bd#78 )
  (bool~) fc::$16 ← (byte) bd#79 == (number) 8
  (bool~) fc::$17 ← ! (bool~) fc::$16
  if((bool~) fc::$17) goto fc::@9
  to:fc::@19
fc::@18: scope:[fc]  from fc::@7
  (byte) bd#124 ← phi( fc::@7/(byte) bd#78 )
  to:fc::@8
fc::@9: scope:[fc]  from fc::@19 fc::@8
  (byte) bd#80 ← phi( fc::@19/(byte) bd#125 fc::@8/(byte) bd#79 )
  (bool~) fc::$18 ← (byte) bd#80 == (number) 9
  (bool~) fc::$19 ← ! (bool~) fc::$18
  if((bool~) fc::$19) goto fc::@return
  to:fc::@20
fc::@19: scope:[fc]  from fc::@8
  (byte) bd#125 ← phi( fc::@8/(byte) bd#79 )
  to:fc::@9
fc::@20: scope:[fc]  from fc::@9
  to:fc::@return
fc::@return: scope:[fc]  from fc::@20 fc::@9
  return 
  to:@return
@5: scope:[]  from @begin
  (byte) ba#28 ← phi( @begin/(byte) ba#0 )
  (byte) bd#126 ← phi( @begin/(byte) bd#0 )
  (byte) bc#93 ← phi( @begin/(byte) bc#0 )
  (byte) bb#60 ← phi( @begin/(byte) bb#0 )
  call main 
  to:@6
@6: scope:[]  from @5
  (byte) ba#16 ← phi( @5/(byte) ba#2 )
  (byte) bd#81 ← phi( @5/(byte) bd#2 )
  (byte) bc#59 ← phi( @5/(byte) bc#2 )
  (byte) bb#37 ← phi( @5/(byte) bb#2 )
  (byte) bb#14 ← (byte) bb#37
  (byte) bc#25 ← (byte) bc#59
  (byte) bd#36 ← (byte) bd#81
  (byte) ba#3 ← (byte) ba#16
  to:@end
@end: scope:[]  from @6

SYMBOL TABLE SSA
(label) @5
(label) @6
(label) @begin
(label) @end
(byte) ba
(byte) ba#0
(byte) ba#1
(byte) ba#10
(byte) ba#11
(byte) ba#12
(byte) ba#13
(byte) ba#14
(byte) ba#15
(byte) ba#16
(byte) ba#17
(byte) ba#18
(byte) ba#19
(byte) ba#2
(byte) ba#20
(byte) ba#21
(byte) ba#22
(byte) ba#23
(byte) ba#24
(byte) ba#25
(byte) ba#26
(byte) ba#27
(byte) ba#28
(byte) ba#29
(byte) ba#3
(byte) ba#30
(byte) ba#31
(byte) ba#32
(byte) ba#33
(byte) ba#34
(byte) ba#35
(byte) ba#36
(byte) ba#37
(byte) ba#38
(byte) ba#4
(byte) ba#5
(byte) ba#6
(byte) ba#7
(byte) ba#8
(byte) ba#9
(byte) bb
(byte) bb#0
(byte) bb#1
(byte) bb#10
(byte) bb#11
(byte) bb#12
(byte) bb#13
(byte) bb#14
(byte) bb#15
(byte) bb#16
(byte) bb#17
(byte) bb#18
(byte) bb#19
(byte) bb#2
(byte) bb#20
(byte) bb#21
(byte) bb#22
(byte) bb#23
(byte) bb#24
(byte) bb#25
(byte) bb#26
(byte) bb#27
(byte) bb#28
(byte) bb#29
(byte) bb#3
(byte) bb#30
(byte) bb#31
(byte) bb#32
(byte) bb#33
(byte) bb#34
(byte) bb#35
(byte) bb#36
(byte) bb#37
(byte) bb#38
(byte) bb#39
(byte) bb#4
(byte) bb#40
(byte) bb#41
(byte) bb#42
(byte) bb#43
(byte) bb#44
(byte) bb#45
(byte) bb#46
(byte) bb#47
(byte) bb#48
(byte) bb#49
(byte) bb#5
(byte) bb#50
(byte) bb#51
(byte) bb#52
(byte) bb#53
(byte) bb#54
(byte) bb#55
(byte) bb#56
(byte) bb#57
(byte) bb#58
(byte) bb#59
(byte) bb#6
(byte) bb#60
(byte) bb#61
(byte) bb#62
(byte) bb#63
(byte) bb#64
(byte) bb#65
(byte) bb#66
(byte) bb#67
(byte) bb#68
(byte) bb#69
(byte) bb#7
(byte) bb#70
(byte) bb#71
(byte) bb#72
(byte) bb#73
(byte) bb#74
(byte) bb#75
(byte) bb#76
(byte) bb#77
(byte) bb#78
(byte) bb#79
(byte) bb#8
(byte) bb#9
(byte) bc
(byte) bc#0
(byte) bc#1
(byte) bc#10
(byte) bc#100
(byte) bc#101
(byte) bc#102
(byte) bc#103
(byte) bc#104
(byte) bc#105
(byte) bc#106
(byte) bc#107
(byte) bc#108
(byte) bc#109
(byte) bc#11
(byte) bc#110
(byte) bc#111
(byte) bc#112
(byte) bc#113
(byte) bc#114
(byte) bc#115
(byte) bc#116
(byte) bc#117
(byte) bc#118
(byte) bc#119
(byte) bc#12
(byte) bc#120
(byte) bc#121
(byte) bc#13
(byte) bc#14
(byte) bc#15
(byte) bc#16
(byte) bc#17
(byte) bc#18
(byte) bc#19
(byte) bc#2
(byte) bc#20
(byte) bc#21
(byte) bc#22
(byte) bc#23
(byte) bc#24
(byte) bc#25
(byte) bc#26
(byte) bc#27
(byte) bc#28
(byte) bc#29
(byte) bc#3
(byte) bc#30
(byte) bc#31
(byte) bc#32
(byte) bc#33
(byte) bc#34
(byte) bc#35
(byte) bc#36
(byte) bc#37
(byte) bc#38
(byte) bc#39
(byte) bc#4
(byte) bc#40
(byte) bc#41
(byte) bc#42
(byte) bc#43
(byte) bc#44
(byte) bc#45
(byte) bc#46
(byte) bc#47
(byte) bc#48
(byte) bc#49
(byte) bc#5
(byte) bc#50
(byte) bc#51
(byte) bc#52
(byte) bc#53
(byte) bc#54
(byte) bc#55
(byte) bc#56
(byte) bc#57
(byte) bc#58
(byte) bc#59
(byte) bc#6
(byte) bc#60
(byte) bc#61
(byte) bc#62
(byte) bc#63
(byte) bc#64
(byte) bc#65
(byte) bc#66
(byte) bc#67
(byte) bc#68
(byte) bc#69
(byte) bc#7
(byte) bc#70
(byte) bc#71
(byte) bc#72
(byte) bc#73
(byte) bc#74
(byte) bc#75
(byte) bc#76
(byte) bc#77
(byte) bc#78
(byte) bc#79
(byte) bc#8
(byte) bc#80
(byte) bc#81
(byte) bc#82
(byte) bc#83
(byte) bc#84
(byte) bc#85
(byte) bc#86
(byte) bc#87
(byte) bc#88
(byte) bc#89
(byte) bc#9
(byte) bc#90
(byte) bc#91
(byte) bc#92
(byte) bc#93
(byte) bc#94
(byte) bc#95
(byte) bc#96
(byte) bc#97
(byte) bc#98
(byte) bc#99
(byte) bd
(byte) bd#0
(byte) bd#1
(byte) bd#10
(byte) bd#100
(byte) bd#101
(byte) bd#102
(byte) bd#103
(byte) bd#104
(byte) bd#105
(byte) bd#106
(byte) bd#107
(byte) bd#108
(byte) bd#109
(byte) bd#11
(byte) bd#110
(byte) bd#111
(byte) bd#112
(byte) bd#113
(byte) bd#114
(byte) bd#115
(byte) bd#116
(byte) bd#117
(byte) bd#118
(byte) bd#119
(byte) bd#12
(byte) bd#120
(byte) bd#121
(byte) bd#122
(byte) bd#123
(byte) bd#124
(byte) bd#125
(byte) bd#126
(byte) bd#127
(byte) bd#128
(byte) bd#129
(byte) bd#13
(byte) bd#130
(byte) bd#131
(byte) bd#132
(byte) bd#133
(byte) bd#134
(byte) bd#135
(byte) bd#136
(byte) bd#137
(byte) bd#138
(byte) bd#139
(byte) bd#14
(byte) bd#140
(byte) bd#141
(byte) bd#142
(byte) bd#143
(byte) bd#144
(byte) bd#145
(byte) bd#146
(byte) bd#147
(byte) bd#148
(byte) bd#149
(byte) bd#15
(byte) bd#150
(byte) bd#151
(byte) bd#152
(byte) bd#153
(byte) bd#154
(byte) bd#16
(byte) bd#17
(byte) bd#18
(byte) bd#19
(byte) bd#2
(byte) bd#20
(byte) bd#21
(byte) bd#22
(byte) bd#23
(byte) bd#24
(byte) bd#25
(byte) bd#26
(byte) bd#27
(byte) bd#28
(byte) bd#29
(byte) bd#3
(byte) bd#30
(byte) bd#31
(byte) bd#32
(byte) bd#33
(byte) bd#34
(byte) bd#35
(byte) bd#36
(byte) bd#37
(byte) bd#38
(byte) bd#39
(byte) bd#4
(byte) bd#40
(byte) bd#41
(byte) bd#42
(byte) bd#43
(byte) bd#44
(byte) bd#45
(byte) bd#46
(byte) bd#47
(byte) bd#48
(byte) bd#49
(byte) bd#5
(byte) bd#50
(byte) bd#51
(byte) bd#52
(byte) bd#53
(byte) bd#54
(byte) bd#55
(byte) bd#56
(byte) bd#57
(byte) bd#58
(byte) bd#59
(byte) bd#6
(byte) bd#60
(byte) bd#61
(byte) bd#62
(byte) bd#63
(byte) bd#64
(byte) bd#65
(byte) bd#66
(byte) bd#67
(byte) bd#68
(byte) bd#69
(byte) bd#7
(byte) bd#70
(byte) bd#71
(byte) bd#72
(byte) bd#73
(byte) bd#74
(byte) bd#75
(byte) bd#76
(byte) bd#77
(byte) bd#78
(byte) bd#79
(byte) bd#8
(byte) bd#80
(byte) bd#81
(byte) bd#82
(byte) bd#83
(byte) bd#84
(byte) bd#85
(byte) bd#86
(byte) bd#87
(byte) bd#88
(byte) bd#89
(byte) bd#9
(byte) bd#90
(byte) bd#91
(byte) bd#92
(byte) bd#93
(byte) bd#94
(byte) bd#95
(byte) bd#96
(byte) bd#97
(byte) bd#98
(byte) bd#99
(void()) f0()
(bool~) f0::$0
(bool~) f0::$1
(bool~) f0::$10
(bool~) f0::$11
(bool~) f0::$12
(bool~) f0::$13
(bool~) f0::$14
(bool~) f0::$15
(bool~) f0::$16
(bool~) f0::$17
(bool~) f0::$18
(bool~) f0::$19
(bool~) f0::$2
(bool~) f0::$3
(bool~) f0::$4
(bool~) f0::$5
(bool~) f0::$6
(bool~) f0::$7
(bool~) f0::$8
(bool~) f0::$9
(label) f0::@1
(label) f0::@11
(label) f0::@12
(label) f0::@13
(label) f0::@14
(label) f0::@15
(label) f0::@16
(label) f0::@17
(label) f0::@18
(label) f0::@19
(label) f0::@2
(label) f0::@20
(label) f0::@21
(label) f0::@22
(label) f0::@23
(label) f0::@24
(label) f0::@25
(label) f0::@26
(label) f0::@27
(label) f0::@28
(label) f0::@29
(label) f0::@3
(label) f0::@30
(label) f0::@4
(label) f0::@5
(label) f0::@6
(label) f0::@7
(label) f0::@8
(label) f0::@9
(label) f0::@return
(void()) fa()
(bool~) fa::$0
(bool~) fa::$1
(bool~) fa::$10
(bool~) fa::$11
(bool~) fa::$12
(bool~) fa::$13
(bool~) fa::$14
(bool~) fa::$15
(bool~) fa::$16
(bool~) fa::$17
(bool~) fa::$18
(bool~) fa::$19
(bool~) fa::$2
(bool~) fa::$3
(bool~) fa::$4
(bool~) fa::$5
(bool~) fa::$6
(bool~) fa::$7
(bool~) fa::$8
(bool~) fa::$9
(label) fa::@1
(label) fa::@11
(label) fa::@12
(label) fa::@13
(label) fa::@14
(label) fa::@15
(label) fa::@16
(label) fa::@17
(label) fa::@18
(label) fa::@19
(label) fa::@2
(label) fa::@20
(label) fa::@21
(label) fa::@22
(label) fa::@23
(label) fa::@24
(label) fa::@25
(label) fa::@26
(label) fa::@27
(label) fa::@28
(label) fa::@29
(label) fa::@3
(label) fa::@30
(label) fa::@4
(label) fa::@5
(label) fa::@6
(label) fa::@7
(label) fa::@8
(label) fa::@9
(label) fa::@return
(void()) fb()
(bool~) fb::$0
(bool~) fb::$1
(bool~) fb::$10
(bool~) fb::$11
(bool~) fb::$12
(bool~) fb::$13
(bool~) fb::$14
(bool~) fb::$15
(bool~) fb::$16
(bool~) fb::$17
(bool~) fb::$18
(bool~) fb::$19
(bool~) fb::$2
(bool~) fb::$3
(bool~) fb::$4
(bool~) fb::$5
(bool~) fb::$6
(bool~) fb::$7
(bool~) fb::$8
(bool~) fb::$9
(label) fb::@1
(label) fb::@11
(label) fb::@12
(label) fb::@13
(label) fb::@14
(label) fb::@15
(label) fb::@16
(label) fb::@17
(label) fb::@18
(label) fb::@19
(label) fb::@2
(label) fb::@20
(label) fb::@21
(label) fb::@22
(label) fb::@23
(label) fb::@24
(label) fb::@25
(label) fb::@26
(label) fb::@27
(label) fb::@28
(label) fb::@29
(label) fb::@3
(label) fb::@30
(label) fb::@4
(label) fb::@5
(label) fb::@6
(label) fb::@7
(label) fb::@8
(label) fb::@9
(label) fb::@return
(void()) fc()
(bool~) fc::$0
(bool~) fc::$1
(bool~) fc::$10
(bool~) fc::$11
(bool~) fc::$12
(bool~) fc::$13
(bool~) fc::$14
(bool~) fc::$15
(bool~) fc::$16
(bool~) fc::$17
(bool~) fc::$18
(bool~) fc::$19
(bool~) fc::$2
(bool~) fc::$3
(bool~) fc::$4
(bool~) fc::$5
(bool~) fc::$6
(bool~) fc::$7
(bool~) fc::$8
(bool~) fc::$9
(label) fc::@1
(label) fc::@11
(label) fc::@12
(label) fc::@13
(label) fc::@14
(label) fc::@15
(label) fc::@16
(label) fc::@17
(label) fc::@18
(label) fc::@19
(label) fc::@2
(label) fc::@20
(label) fc::@3
(label) fc::@4
(label) fc::@5
(label) fc::@6
(label) fc::@7
(label) fc::@8
(label) fc::@9
(label) fc::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@7
(label) main::@return

Adding number conversion cast (unumber) 0 in (bool~) f0::$0 ← (byte) ba#6 == (number) 0
Adding number conversion cast (unumber) 1 in (bool~) f0::$2 ← (byte) ba#7 == (number) 1
Adding number conversion cast (unumber) 2 in (bool~) f0::$4 ← (byte) ba#8 == (number) 2
Adding number conversion cast (unumber) 3 in (bool~) f0::$6 ← (byte) ba#9 == (number) 3
Adding number conversion cast (unumber) 4 in (bool~) f0::$8 ← (byte) ba#10 == (number) 4
Adding number conversion cast (unumber) 5 in (bool~) f0::$10 ← (byte) ba#11 == (number) 5
Adding number conversion cast (unumber) 6 in (bool~) f0::$12 ← (byte) ba#12 == (number) 6
Adding number conversion cast (unumber) 7 in (bool~) f0::$14 ← (byte) ba#13 == (number) 7
Adding number conversion cast (unumber) 8 in (bool~) f0::$16 ← (byte) ba#14 == (number) 8
Adding number conversion cast (unumber) 9 in (bool~) f0::$18 ← (byte) ba#15 == (number) 9
Adding number conversion cast (unumber) 0 in (byte) bb#12 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) fa::$0 ← (byte) bb#27 == (number) 0
Adding number conversion cast (unumber) 1 in (bool~) fa::$2 ← (byte) bb#28 == (number) 1
Adding number conversion cast (unumber) 2 in (bool~) fa::$4 ← (byte) bb#29 == (number) 2
Adding number conversion cast (unumber) 3 in (bool~) fa::$6 ← (byte) bb#30 == (number) 3
Adding number conversion cast (unumber) 4 in (bool~) fa::$8 ← (byte) bb#31 == (number) 4
Adding number conversion cast (unumber) 5 in (bool~) fa::$10 ← (byte) bb#32 == (number) 5
Adding number conversion cast (unumber) 6 in (bool~) fa::$12 ← (byte) bb#33 == (number) 6
Adding number conversion cast (unumber) 7 in (bool~) fa::$14 ← (byte) bb#34 == (number) 7
Adding number conversion cast (unumber) 8 in (bool~) fa::$16 ← (byte) bb#35 == (number) 8
Adding number conversion cast (unumber) 9 in (bool~) fa::$18 ← (byte) bb#36 == (number) 9
Adding number conversion cast (unumber) 0 in (byte) bc#23 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) fb::$0 ← (byte) bc#49 == (number) 0
Adding number conversion cast (unumber) 1 in (bool~) fb::$2 ← (byte) bc#50 == (number) 1
Adding number conversion cast (unumber) 2 in (bool~) fb::$4 ← (byte) bc#51 == (number) 2
Adding number conversion cast (unumber) 3 in (bool~) fb::$6 ← (byte) bc#52 == (number) 3
Adding number conversion cast (unumber) 4 in (bool~) fb::$8 ← (byte) bc#53 == (number) 4
Adding number conversion cast (unumber) 5 in (bool~) fb::$10 ← (byte) bc#54 == (number) 5
Adding number conversion cast (unumber) 6 in (bool~) fb::$12 ← (byte) bc#55 == (number) 6
Adding number conversion cast (unumber) 7 in (bool~) fb::$14 ← (byte) bc#56 == (number) 7
Adding number conversion cast (unumber) 8 in (bool~) fb::$16 ← (byte) bc#57 == (number) 8
Adding number conversion cast (unumber) 9 in (bool~) fb::$18 ← (byte) bc#58 == (number) 9
Adding number conversion cast (unumber) 0 in (byte) bd#34 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) fc::$0 ← (byte) bd#71 == (number) 0
Adding number conversion cast (unumber) 1 in (bool~) fc::$2 ← (byte) bd#72 == (number) 1
Adding number conversion cast (unumber) 2 in (bool~) fc::$4 ← (byte) bd#73 == (number) 2
Adding number conversion cast (unumber) 3 in (bool~) fc::$6 ← (byte) bd#74 == (number) 3
Adding number conversion cast (unumber) 4 in (bool~) fc::$8 ← (byte) bd#75 == (number) 4
Adding number conversion cast (unumber) 5 in (bool~) fc::$10 ← (byte) bd#76 == (number) 5
Adding number conversion cast (unumber) 6 in (bool~) fc::$12 ← (byte) bd#77 == (number) 6
Adding number conversion cast (unumber) 7 in (bool~) fc::$14 ← (byte) bd#78 == (number) 7
Adding number conversion cast (unumber) 8 in (bool~) fc::$16 ← (byte) bd#79 == (number) 8
Adding number conversion cast (unumber) 9 in (bool~) fc::$18 ← (byte) bd#80 == (number) 9
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) bb#12 ← (unumber)(number) 0
Inlining cast (byte) bc#23 ← (unumber)(number) 0
Inlining cast (byte) bd#34 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 9
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 9
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 9
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 9
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 9
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [22] (bool~) f0::$1 ← (byte) ba#6 != (byte) 0 from [21] (bool~) f0::$0 ← (byte) ba#6 == (byte) 0
Inversing boolean not [26] (bool~) f0::$3 ← (byte) ba#7 != (byte) 1 from [25] (bool~) f0::$2 ← (byte) ba#7 == (byte) 1
Inversing boolean not [36] (bool~) f0::$5 ← (byte) ba#8 != (byte) 2 from [35] (bool~) f0::$4 ← (byte) ba#8 == (byte) 2
Inversing boolean not [46] (bool~) f0::$7 ← (byte) ba#9 != (byte) 3 from [45] (bool~) f0::$6 ← (byte) ba#9 == (byte) 3
Inversing boolean not [56] (bool~) f0::$9 ← (byte) ba#10 != (byte) 4 from [55] (bool~) f0::$8 ← (byte) ba#10 == (byte) 4
Inversing boolean not [66] (bool~) f0::$11 ← (byte) ba#11 != (byte) 5 from [65] (bool~) f0::$10 ← (byte) ba#11 == (byte) 5
Inversing boolean not [76] (bool~) f0::$13 ← (byte) ba#12 != (byte) 6 from [75] (bool~) f0::$12 ← (byte) ba#12 == (byte) 6
Inversing boolean not [86] (bool~) f0::$15 ← (byte) ba#13 != (byte) 7 from [85] (bool~) f0::$14 ← (byte) ba#13 == (byte) 7
Inversing boolean not [96] (bool~) f0::$17 ← (byte) ba#14 != (byte) 8 from [95] (bool~) f0::$16 ← (byte) ba#14 == (byte) 8
Inversing boolean not [106] (bool~) f0::$19 ← (byte) ba#15 != (byte) 9 from [105] (bool~) f0::$18 ← (byte) ba#15 == (byte) 9
Inversing boolean not [127] (bool~) fa::$1 ← (byte) bb#27 != (byte) 0 from [126] (bool~) fa::$0 ← (byte) bb#27 == (byte) 0
Inversing boolean not [131] (bool~) fa::$3 ← (byte) bb#28 != (byte) 1 from [130] (bool~) fa::$2 ← (byte) bb#28 == (byte) 1
Inversing boolean not [140] (bool~) fa::$5 ← (byte) bb#29 != (byte) 2 from [139] (bool~) fa::$4 ← (byte) bb#29 == (byte) 2
Inversing boolean not [149] (bool~) fa::$7 ← (byte) bb#30 != (byte) 3 from [148] (bool~) fa::$6 ← (byte) bb#30 == (byte) 3
Inversing boolean not [158] (bool~) fa::$9 ← (byte) bb#31 != (byte) 4 from [157] (bool~) fa::$8 ← (byte) bb#31 == (byte) 4
Inversing boolean not [167] (bool~) fa::$11 ← (byte) bb#32 != (byte) 5 from [166] (bool~) fa::$10 ← (byte) bb#32 == (byte) 5
Inversing boolean not [176] (bool~) fa::$13 ← (byte) bb#33 != (byte) 6 from [175] (bool~) fa::$12 ← (byte) bb#33 == (byte) 6
Inversing boolean not [185] (bool~) fa::$15 ← (byte) bb#34 != (byte) 7 from [184] (bool~) fa::$14 ← (byte) bb#34 == (byte) 7
Inversing boolean not [194] (bool~) fa::$17 ← (byte) bb#35 != (byte) 8 from [193] (bool~) fa::$16 ← (byte) bb#35 == (byte) 8
Inversing boolean not [203] (bool~) fa::$19 ← (byte) bb#36 != (byte) 9 from [202] (bool~) fa::$18 ← (byte) bb#36 == (byte) 9
Inversing boolean not [221] (bool~) fb::$1 ← (byte) bc#49 != (byte) 0 from [220] (bool~) fb::$0 ← (byte) bc#49 == (byte) 0
Inversing boolean not [225] (bool~) fb::$3 ← (byte) bc#50 != (byte) 1 from [224] (bool~) fb::$2 ← (byte) bc#50 == (byte) 1
Inversing boolean not [233] (bool~) fb::$5 ← (byte) bc#51 != (byte) 2 from [232] (bool~) fb::$4 ← (byte) bc#51 == (byte) 2
Inversing boolean not [241] (bool~) fb::$7 ← (byte) bc#52 != (byte) 3 from [240] (bool~) fb::$6 ← (byte) bc#52 == (byte) 3
Inversing boolean not [249] (bool~) fb::$9 ← (byte) bc#53 != (byte) 4 from [248] (bool~) fb::$8 ← (byte) bc#53 == (byte) 4
Inversing boolean not [257] (bool~) fb::$11 ← (byte) bc#54 != (byte) 5 from [256] (bool~) fb::$10 ← (byte) bc#54 == (byte) 5
Inversing boolean not [265] (bool~) fb::$13 ← (byte) bc#55 != (byte) 6 from [264] (bool~) fb::$12 ← (byte) bc#55 == (byte) 6
Inversing boolean not [273] (bool~) fb::$15 ← (byte) bc#56 != (byte) 7 from [272] (bool~) fb::$14 ← (byte) bc#56 == (byte) 7
Inversing boolean not [281] (bool~) fb::$17 ← (byte) bc#57 != (byte) 8 from [280] (bool~) fb::$16 ← (byte) bc#57 == (byte) 8
Inversing boolean not [289] (bool~) fb::$19 ← (byte) bc#58 != (byte) 9 from [288] (bool~) fb::$18 ← (byte) bc#58 == (byte) 9
Inversing boolean not [303] (bool~) fc::$1 ← (byte) bd#71 != (byte) 0 from [302] (bool~) fc::$0 ← (byte) bd#71 == (byte) 0
Inversing boolean not [307] (bool~) fc::$3 ← (byte) bd#72 != (byte) 1 from [306] (bool~) fc::$2 ← (byte) bd#72 == (byte) 1
Inversing boolean not [312] (bool~) fc::$5 ← (byte) bd#73 != (byte) 2 from [311] (bool~) fc::$4 ← (byte) bd#73 == (byte) 2
Inversing boolean not [317] (bool~) fc::$7 ← (byte) bd#74 != (byte) 3 from [316] (bool~) fc::$6 ← (byte) bd#74 == (byte) 3
Inversing boolean not [322] (bool~) fc::$9 ← (byte) bd#75 != (byte) 4 from [321] (bool~) fc::$8 ← (byte) bd#75 == (byte) 4
Inversing boolean not [327] (bool~) fc::$11 ← (byte) bd#76 != (byte) 5 from [326] (bool~) fc::$10 ← (byte) bd#76 == (byte) 5
Inversing boolean not [332] (bool~) fc::$13 ← (byte) bd#77 != (byte) 6 from [331] (bool~) fc::$12 ← (byte) bd#77 == (byte) 6
Inversing boolean not [337] (bool~) fc::$15 ← (byte) bd#78 != (byte) 7 from [336] (bool~) fc::$14 ← (byte) bd#78 == (byte) 7
Inversing boolean not [342] (bool~) fc::$17 ← (byte) bd#79 != (byte) 8 from [341] (bool~) fc::$16 ← (byte) bd#79 == (byte) 8
Inversing boolean not [347] (bool~) fc::$19 ← (byte) bd#80 != (byte) 9 from [346] (bool~) fc::$18 ← (byte) bd#80 == (byte) 9
Successful SSA optimization Pass2UnaryNotSimplification
Alias bb#16 = bb#38 bb#39 bb#2 
Alias bc#2 = bc#60 bc#61 bc#27 
Alias bd#2 = bd#82 bd#83 bd#38 
Alias ba#17 = ba#18 ba#4 ba#5 ba#2 
Alias bb#1 = bb#15 
Alias bc#1 = bc#26 
Alias bd#1 = bd#37 
Alias bb#17 = bb#40 
Alias bc#62 = bc#95 
Alias bd#128 = bd#84 
Alias ba#19 = ba#30 ba#6 
Alias bb#3 = bb#62 
Alias bc#28 = bc#3 
Alias bd#3 = bd#39 
Alias bb#18 = bb#41 
Alias bc#63 = bc#96 
Alias bd#129 = bd#85 
Alias ba#20 = ba#31 ba#7 
Alias bb#4 = bb#63 
Alias bc#29 = bc#4 
Alias bd#4 = bd#40 
Alias bb#19 = bb#42 
Alias bc#64 = bc#97 
Alias bd#130 = bd#86 
Alias ba#21 = ba#32 ba#8 
Alias bb#5 = bb#64 
Alias bc#30 = bc#5 
Alias bd#41 = bd#5 
Alias bb#20 = bb#43 
Alias bc#65 = bc#98 
Alias bd#131 = bd#87 
Alias ba#22 = ba#33 ba#9 
Alias bb#6 = bb#65 
Alias bc#31 = bc#6 
Alias bd#42 = bd#6 
Alias bb#21 = bb#44 
Alias bc#66 = bc#99 
Alias bd#132 = bd#88 
Alias ba#10 = ba#34 ba#23 
Alias bb#66 = bb#7 
Alias bc#32 = bc#7 
Alias bd#43 = bd#7 
Alias bb#22 = bb#45 
Alias bc#100 = bc#67 
Alias bd#133 = bd#89 
Alias ba#11 = ba#35 ba#24 
Alias bb#67 = bb#8 
Alias bc#33 = bc#8 
Alias bd#44 = bd#8 
Alias bb#23 = bb#46 
Alias bc#101 = bc#68 
Alias bd#134 = bd#90 
Alias ba#12 = ba#36 ba#25 
Alias bb#68 = bb#9 
Alias bc#34 = bc#9 
Alias bd#45 = bd#9 
Alias bb#24 = bb#47 
Alias bc#102 = bc#69 
Alias bd#135 = bd#91 
Alias ba#13 = ba#37 ba#26 
Alias bb#10 = bb#69 
Alias bc#10 = bc#35 
Alias bd#10 = bd#46 
Alias bb#25 = bb#48 
Alias bc#103 = bc#70 
Alias bd#136 = bd#92 
Alias ba#14 = ba#38 ba#27 
Alias bb#11 = bb#70 
Alias bc#11 = bc#36 
Alias bd#11 = bd#47 
Alias bc#71 = bc#72 
Alias bd#93 = bd#94 
Alias bb#12 = bb#49 
Alias bc#12 = bc#37 
Alias bd#12 = bd#48 
Alias bb#13 = bb#26 
Alias bc#13 = bc#38 
Alias bd#13 = bd#49 
Alias bc#39 = bc#73 
Alias bd#137 = bd#95 
Alias bb#27 = bb#71 bb#51 
Alias bc#104 = bc#14 
Alias bd#14 = bd#50 
Alias bc#40 = bc#74 
Alias bd#138 = bd#96 
Alias bb#28 = bb#72 bb#52 
Alias bc#105 = bc#15 
Alias bd#15 = bd#51 
Alias bc#41 = bc#75 
Alias bd#139 = bd#97 
Alias bb#29 = bb#73 bb#53 
Alias bc#106 = bc#16 
Alias bd#16 = bd#52 
Alias bc#42 = bc#76 
Alias bd#140 = bd#98 
Alias bb#30 = bb#74 bb#54 
Alias bc#107 = bc#17 
Alias bd#17 = bd#53 
Alias bc#43 = bc#77 
Alias bd#141 = bd#99 
Alias bb#31 = bb#75 bb#55 
Alias bc#108 = bc#18 
Alias bd#18 = bd#54 
Alias bc#44 = bc#78 
Alias bd#100 = bd#142 
Alias bb#32 = bb#76 bb#56 
Alias bc#109 = bc#19 
Alias bd#19 = bd#55 
Alias bc#45 = bc#79 
Alias bd#101 = bd#143 
Alias bb#33 = bb#77 bb#57 
Alias bc#110 = bc#20 
Alias bd#20 = bd#56 
Alias bc#46 = bc#80 
Alias bd#102 = bd#144 
Alias bb#34 = bb#78 bb#58 
Alias bc#111 = bc#21 
Alias bd#21 = bd#57 
Alias bc#47 = bc#81 
Alias bd#103 = bd#145 
Alias bb#35 = bb#79 bb#59 
Alias bc#112 = bc#22 
Alias bd#22 = bd#58 
Alias bd#104 = bd#105 
Alias bc#23 = bc#82 
Alias bd#23 = bd#59 
Alias bc#24 = bc#48 
Alias bd#24 = bd#60 
Alias bd#106 = bd#61 
Alias bc#113 = bc#49 bc#84 
Alias bd#146 = bd#25 
Alias bd#107 = bd#62 
Alias bc#114 = bc#50 bc#85 
Alias bd#147 = bd#26 
Alias bd#108 = bd#63 
Alias bc#115 = bc#51 bc#86 
Alias bd#148 = bd#27 
Alias bd#109 = bd#64 
Alias bc#116 = bc#52 bc#87 
Alias bd#149 = bd#28 
Alias bd#110 = bd#65 
Alias bc#117 = bc#53 bc#88 
Alias bd#150 = bd#29 
Alias bd#111 = bd#66 
Alias bc#118 = bc#54 bc#89 
Alias bd#151 = bd#30 
Alias bd#112 = bd#67 
Alias bc#119 = bc#55 bc#90 
Alias bd#152 = bd#31 
Alias bd#113 = bd#68 
Alias bc#120 = bc#56 bc#91 
Alias bd#153 = bd#32 
Alias bd#114 = bd#69 
Alias bc#121 = bc#57 bc#92 
Alias bd#154 = bd#33 
Alias bd#115 = bd#34 
Alias bd#35 = bd#70 
Alias bd#117 = bd#71 
Alias bd#118 = bd#72 
Alias bd#119 = bd#73 
Alias bd#120 = bd#74 
Alias bd#121 = bd#75 
Alias bd#122 = bd#76 
Alias bd#123 = bd#77 
Alias bd#124 = bd#78 
Alias bd#125 = bd#79 
Alias bb#0 = bb#60 
Alias bc#0 = bc#93 
Alias bd#0 = bd#126 
Alias ba#0 = ba#28 
Alias bb#14 = bb#37 
Alias bc#25 = bc#59 
Alias bd#36 = bd#81 
Alias ba#16 = ba#3 
Successful SSA optimization Pass2AliasElimination
Alias ba#10 = ba#20 ba#19 ba#21 ba#22 ba#11 ba#12 ba#13 ba#14 ba#15 
Alias bb#27 = bb#28 bb#29 bb#30 bb#31 bb#32 bb#33 bb#34 bb#35 bb#36 
Alias bc#113 = bc#114 bc#115 bc#116 bc#117 bc#118 bc#119 bc#120 bc#121 bc#58 
Alias bd#117 = bd#118 bd#119 bd#120 bd#121 bd#122 bd#123 bd#124 bd#125 bd#80 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) bb#61 (byte) bb#0
Identical Phi Values (byte) bc#94 (byte) bc#0
Identical Phi Values (byte) bd#127 (byte) bd#0
Identical Phi Values (byte) ba#29 (byte) ba#0
Identical Phi Values (byte) bb#1 (byte) bb#13
Identical Phi Values (byte) bc#1 (byte) bc#13
Identical Phi Values (byte) bd#1 (byte) bd#13
Identical Phi Values (byte) ba#10 (byte) ba#17
Identical Phi Values (byte) bb#17 (byte) bb#16
Identical Phi Values (byte) bc#62 (byte) bc#2
Identical Phi Values (byte) bd#128 (byte) bd#2
Identical Phi Values (byte) bc#28 (byte) bc#24
Identical Phi Values (byte) bd#3 (byte) bd#24
Identical Phi Values (byte) bc#29 (byte) bc#24
Identical Phi Values (byte) bd#4 (byte) bd#24
Identical Phi Values (byte) bc#30 (byte) bc#24
Identical Phi Values (byte) bd#41 (byte) bd#24
Identical Phi Values (byte) bc#31 (byte) bc#24
Identical Phi Values (byte) bd#42 (byte) bd#24
Identical Phi Values (byte) bc#32 (byte) bc#24
Identical Phi Values (byte) bd#43 (byte) bd#24
Identical Phi Values (byte) bc#33 (byte) bc#24
Identical Phi Values (byte) bd#44 (byte) bd#24
Identical Phi Values (byte) bc#34 (byte) bc#24
Identical Phi Values (byte) bd#45 (byte) bd#24
Identical Phi Values (byte) bc#10 (byte) bc#24
Identical Phi Values (byte) bd#10 (byte) bd#24
Identical Phi Values (byte) bc#11 (byte) bc#24
Identical Phi Values (byte) bd#11 (byte) bd#24
Identical Phi Values (byte) bc#12 (byte) bc#24
Identical Phi Values (byte) bd#12 (byte) bd#24
Identical Phi Values (byte) bd#14 (byte) bd#35
Identical Phi Values (byte) bd#15 (byte) bd#35
Identical Phi Values (byte) bd#16 (byte) bd#35
Identical Phi Values (byte) bd#17 (byte) bd#35
Identical Phi Values (byte) bd#18 (byte) bd#35
Identical Phi Values (byte) bd#19 (byte) bd#35
Identical Phi Values (byte) bd#20 (byte) bd#35
Identical Phi Values (byte) bd#21 (byte) bd#35
Identical Phi Values (byte) bd#22 (byte) bd#35
Identical Phi Values (byte) bd#23 (byte) bd#35
Identical Phi Values (byte) bb#14 (byte) bb#16
Identical Phi Values (byte) bc#25 (byte) bc#2
Identical Phi Values (byte) bd#36 (byte) bd#2
Identical Phi Values (byte) ba#16 (byte) ba#17
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) f0::$1 [13] if((byte) ba#17!=(byte) 0) goto f0::@1
Simple Condition (bool~) f0::$3 [16] if((byte) ba#17!=(byte) 1) goto f0::@2
Simple Condition (bool~) f0::$5 [22] if((byte) ba#17!=(byte) 2) goto f0::@3
Simple Condition (bool~) f0::$7 [28] if((byte) ba#17!=(byte) 3) goto f0::@4
Simple Condition (bool~) f0::$9 [34] if((byte) ba#17!=(byte) 4) goto f0::@5
Simple Condition (bool~) f0::$11 [40] if((byte) ba#17!=(byte) 5) goto f0::@6
Simple Condition (bool~) f0::$13 [46] if((byte) ba#17!=(byte) 6) goto f0::@7
Simple Condition (bool~) f0::$15 [52] if((byte) ba#17!=(byte) 7) goto f0::@8
Simple Condition (bool~) f0::$17 [58] if((byte) ba#17!=(byte) 8) goto f0::@9
Simple Condition (bool~) f0::$19 [64] if((byte) ba#17!=(byte) 9) goto f0::@return
Simple Condition (bool~) fa::$1 [75] if((byte) bb#27!=(byte) 0) goto fa::@1
Simple Condition (bool~) fa::$3 [78] if((byte) bb#27!=(byte) 1) goto fa::@2
Simple Condition (bool~) fa::$5 [84] if((byte) bb#27!=(byte) 2) goto fa::@3
Simple Condition (bool~) fa::$7 [90] if((byte) bb#27!=(byte) 3) goto fa::@4
Simple Condition (bool~) fa::$9 [96] if((byte) bb#27!=(byte) 4) goto fa::@5
Simple Condition (bool~) fa::$11 [102] if((byte) bb#27!=(byte) 5) goto fa::@6
Simple Condition (bool~) fa::$13 [108] if((byte) bb#27!=(byte) 6) goto fa::@7
Simple Condition (bool~) fa::$15 [114] if((byte) bb#27!=(byte) 7) goto fa::@8
Simple Condition (bool~) fa::$17 [120] if((byte) bb#27!=(byte) 8) goto fa::@9
Simple Condition (bool~) fa::$19 [126] if((byte) bb#27!=(byte) 9) goto fa::@return
Simple Condition (bool~) fb::$1 [137] if((byte) bc#113!=(byte) 0) goto fb::@1
Simple Condition (bool~) fb::$3 [140] if((byte) bc#113!=(byte) 1) goto fb::@2
Simple Condition (bool~) fb::$5 [145] if((byte) bc#113!=(byte) 2) goto fb::@3
Simple Condition (bool~) fb::$7 [150] if((byte) bc#113!=(byte) 3) goto fb::@4
Simple Condition (bool~) fb::$9 [155] if((byte) bc#113!=(byte) 4) goto fb::@5
Simple Condition (bool~) fb::$11 [160] if((byte) bc#113!=(byte) 5) goto fb::@6
Simple Condition (bool~) fb::$13 [165] if((byte) bc#113!=(byte) 6) goto fb::@7
Simple Condition (bool~) fb::$15 [170] if((byte) bc#113!=(byte) 7) goto fb::@8
Simple Condition (bool~) fb::$17 [175] if((byte) bc#113!=(byte) 8) goto fb::@9
Simple Condition (bool~) fb::$19 [180] if((byte) bc#113!=(byte) 9) goto fb::@return
Simple Condition (bool~) fc::$1 [189] if((byte) bd#117!=(byte) 0) goto fc::@1
Simple Condition (bool~) fc::$3 [191] if((byte) bd#117!=(byte) 1) goto fc::@2
Simple Condition (bool~) fc::$5 [193] if((byte) bd#117!=(byte) 2) goto fc::@3
Simple Condition (bool~) fc::$7 [195] if((byte) bd#117!=(byte) 3) goto fc::@4
Simple Condition (bool~) fc::$9 [197] if((byte) bd#117!=(byte) 4) goto fc::@5
Simple Condition (bool~) fc::$11 [199] if((byte) bd#117!=(byte) 5) goto fc::@6
Simple Condition (bool~) fc::$13 [201] if((byte) bd#117!=(byte) 6) goto fc::@7
Simple Condition (bool~) fc::$15 [203] if((byte) bd#117!=(byte) 7) goto fc::@8
Simple Condition (bool~) fc::$17 [205] if((byte) bd#117!=(byte) 8) goto fc::@9
Simple Condition (bool~) fc::$19 [207] if((byte) bd#117!=(byte) 9) goto fc::@return
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) ba#0 = 0
Constant (const byte) bb#0 = 0
Constant (const byte) bc#0 = 0
Constant (const byte) bd#0 = 0
Constant (const byte) bb#12 = 0
Constant (const byte) bc#23 = 0
Constant (const byte) bd#115 = 0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [6] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Inlining constant with var siblings (const byte) ba#0
Inlining constant with var siblings (const byte) bb#0
Inlining constant with var siblings (const byte) bc#0
Inlining constant with var siblings (const byte) bd#0
Inlining constant with var siblings (const byte) bb#12
Inlining constant with var siblings (const byte) bc#23
Inlining constant with var siblings (const byte) bd#115
Constant inlined bc#0 = (byte) 0
Constant inlined ba#0 = (byte) 0
Constant inlined bd#0 = (byte) 0
Constant inlined bc#23 = (byte) 0
Constant inlined bb#0 = (byte) 0
Constant inlined bb#12 = (byte) 0
Constant inlined bd#115 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting f0::@31(between f0 and f0::@1)
Added new block during phi lifting f0::@32(between f0::@1 and f0::@2)
Added new block during phi lifting f0::@33(between f0::@2 and f0::@3)
Added new block during phi lifting f0::@34(between f0::@3 and f0::@4)
Added new block during phi lifting f0::@35(between f0::@4 and f0::@5)
Added new block during phi lifting f0::@36(between f0::@5 and f0::@6)
Added new block during phi lifting f0::@37(between f0::@6 and f0::@7)
Added new block during phi lifting f0::@38(between f0::@7 and f0::@8)
Added new block during phi lifting f0::@39(between f0::@8 and f0::@9)
Added new block during phi lifting f0::@40(between f0::@9 and f0::@return)
Added new block during phi lifting fa::@31(between fa and fa::@1)
Added new block during phi lifting fa::@32(between fa::@1 and fa::@2)
Added new block during phi lifting fa::@33(between fa::@2 and fa::@3)
Added new block during phi lifting fa::@34(between fa::@3 and fa::@4)
Added new block during phi lifting fa::@35(between fa::@4 and fa::@5)
Added new block during phi lifting fa::@36(between fa::@5 and fa::@6)
Added new block during phi lifting fa::@37(between fa::@6 and fa::@7)
Added new block during phi lifting fa::@38(between fa::@7 and fa::@8)
Added new block during phi lifting fa::@39(between fa::@8 and fa::@9)
Added new block during phi lifting fa::@40(between fa::@9 and fa::@return)
Added new block during phi lifting fb::@31(between fb and fb::@1)
Added new block during phi lifting fb::@32(between fb::@1 and fb::@2)
Added new block during phi lifting fb::@33(between fb::@2 and fb::@3)
Added new block during phi lifting fb::@34(between fb::@3 and fb::@4)
Added new block during phi lifting fb::@35(between fb::@4 and fb::@5)
Added new block during phi lifting fb::@36(between fb::@5 and fb::@6)
Added new block during phi lifting fb::@37(between fb::@6 and fb::@7)
Added new block during phi lifting fb::@38(between fb::@7 and fb::@8)
Added new block during phi lifting fb::@39(between fb::@8 and fb::@9)
Added new block during phi lifting fb::@40(between fb::@9 and fb::@return)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @5
Adding NOP phi() at start of @6
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of fb::@20
Adding NOP phi() at start of fb::@30
Adding NOP phi() at start of fc::@11
Adding NOP phi() at start of fc::@12
Adding NOP phi() at start of fc::@13
Adding NOP phi() at start of fc::@14
Adding NOP phi() at start of fc::@15
Adding NOP phi() at start of fc::@16
Adding NOP phi() at start of fc::@17
Adding NOP phi() at start of fc::@18
Adding NOP phi() at start of fc::@19
Adding NOP phi() at start of fc::@20
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to f0:8 
Calls in [f0] to fa:19 fa:29 fa:39 fa:49 fa:59 fa:69 fa:79 fa:89 fa:99 fa:107 
Calls in [fa] to fb:147 fb:155 fb:163 fb:171 fb:179 fb:187 fb:195 fb:203 fb:211 fb:217 
Calls in [fb] to fc:245 fc:251 fc:257 fc:263 fc:269 fc:275 fc:281 fc:287 fc:293 fc:298 

Created 70 initial phi equivalence classes
Coalesced [10] bb#80 ← bb#13
Coalesced [11] bc#122 ← bc#13
Coalesced [12] bd#155 ← bd#13
Coalesced [13] ba#39 ← ba#1
Not coalescing [16] bb#100 ← bb#3
Coalesced [17] bc#143 ← bc#2
Coalesced [18] bd#176 ← bd#2
Coalesced [20] bb#82 ← bb#3
Coalesced [21] bc#124 ← bc#24
Coalesced [22] bd#157 ← bd#24
Not coalescing [26] bb#101 ← bb#4
Coalesced [27] bc#144 ← bc#63
Coalesced [28] bd#177 ← bd#129
Coalesced [30] bb#84 ← bb#4
Coalesced [31] bc#126 ← bc#24
Coalesced [32] bd#159 ← bd#24
Not coalescing [36] bb#102 ← bb#5
Coalesced (already) [37] bc#145 ← bc#64
Coalesced (already) [38] bd#178 ← bd#130
Coalesced [40] bb#86 ← bb#5
Coalesced [41] bc#128 ← bc#24
Coalesced [42] bd#161 ← bd#24
Not coalescing [46] bb#103 ← bb#6
Coalesced (already) [47] bc#146 ← bc#65
Coalesced (already) [48] bd#179 ← bd#131
Coalesced [50] bb#87 ← bb#6
Coalesced [51] bc#129 ← bc#24
Coalesced [52] bd#162 ← bd#24
Not coalescing [56] bb#104 ← bb#66
Coalesced (already) [57] bc#147 ← bc#66
Coalesced (already) [58] bd#180 ← bd#132
Coalesced [60] bb#89 ← bb#66
Coalesced [61] bc#131 ← bc#24
Coalesced [62] bd#164 ← bd#24
Not coalescing [66] bb#105 ← bb#67
Coalesced (already) [67] bc#148 ← bc#100
Coalesced (already) [68] bd#181 ← bd#133
Coalesced [70] bb#91 ← bb#67
Coalesced [71] bc#133 ← bc#24
Coalesced [72] bd#166 ← bd#24
Not coalescing [76] bb#106 ← bb#68
Coalesced (already) [77] bc#149 ← bc#101
Coalesced (already) [78] bd#182 ← bd#134
Coalesced [80] bb#93 ← bb#68
Coalesced [81] bc#135 ← bc#24
Coalesced [82] bd#168 ← bd#24
Not coalescing [86] bb#107 ← bb#10
Coalesced (already) [87] bc#150 ← bc#102
Coalesced (already) [88] bd#183 ← bd#135
Coalesced [90] bb#95 ← bb#10
Coalesced [91] bc#137 ← bc#24
Coalesced [92] bd#170 ← bd#24
Not coalescing [96] bb#108 ← bb#11
Coalesced (already) [97] bc#151 ← bc#103
Coalesced (already) [98] bd#184 ← bd#136
Coalesced [100] bb#97 ← bb#11
Coalesced [101] bc#139 ← bc#24
Coalesced [102] bd#172 ← bd#24
Coalesced (already) [105] bc#152 ← bc#71
Coalesced (already) [106] bd#185 ← bd#93
Coalesced (already) [108] bc#141 ← bc#24
Coalesced (already) [109] bd#174 ← bd#24
Coalesced [112] bb#99 ← bb#50
Coalesced (already) [113] bc#142 ← bc#71
Coalesced (already) [114] bd#175 ← bd#93
Coalesced [115] bb#98 ← bb#25
Coalesced (already) [116] bc#140 ← bc#103
Coalesced (already) [117] bd#173 ← bd#136
Coalesced [118] bb#96 ← bb#24
Coalesced (already) [119] bc#138 ← bc#102
Coalesced (already) [120] bd#171 ← bd#135
Coalesced [121] bb#94 ← bb#23
Coalesced (already) [122] bc#136 ← bc#101
Coalesced (already) [123] bd#169 ← bd#134
Coalesced [124] bb#92 ← bb#22
Coalesced (already) [125] bc#134 ← bc#100
Coalesced (already) [126] bd#167 ← bd#133
Coalesced [127] bb#90 ← bb#21
Coalesced (already) [128] bc#132 ← bc#66
Coalesced (already) [129] bd#165 ← bd#132
Coalesced [130] bb#88 ← bb#20
Coalesced (already) [131] bc#130 ← bc#65
Coalesced (already) [132] bd#163 ← bd#131
Coalesced [133] bb#85 ← bb#19
Coalesced (already) [134] bc#127 ← bc#64
Coalesced (already) [135] bd#160 ← bd#130
Coalesced [136] bb#83 ← bb#18
Coalesced (already) [137] bc#125 ← bc#63
Coalesced (already) [138] bd#158 ← bd#129
Coalesced (already) [139] bb#81 ← bb#16
Coalesced (already) [140] bc#123 ← bc#2
Coalesced (already) [141] bd#156 ← bd#2
Not coalescing [145] bc#172 ← bc#104
Coalesced [146] bd#206 ← bd#137
Coalesced [148] bc#154 ← bc#104
Coalesced [149] bd#187 ← bd#35
Not coalescing [153] bc#173 ← bc#105
Coalesced [154] bd#207 ← bd#138
Coalesced [156] bc#156 ← bc#105
Coalesced [157] bd#189 ← bd#35
Not coalescing [161] bc#174 ← bc#106
Coalesced (already) [162] bd#208 ← bd#139
Coalesced [164] bc#158 ← bc#106
Coalesced [165] bd#191 ← bd#35
Not coalescing [169] bc#175 ← bc#107
Coalesced (already) [170] bd#209 ← bd#140
Coalesced [172] bc#159 ← bc#107
Coalesced [173] bd#192 ← bd#35
Not coalescing [177] bc#176 ← bc#108
Coalesced (already) [178] bd#210 ← bd#141
Coalesced [180] bc#161 ← bc#108
Coalesced [181] bd#194 ← bd#35
Not coalescing [185] bc#177 ← bc#109
Coalesced (already) [186] bd#211 ← bd#100
Coalesced [188] bc#163 ← bc#109
Coalesced [189] bd#196 ← bd#35
Not coalescing [193] bc#178 ← bc#110
Coalesced (already) [194] bd#212 ← bd#101
Coalesced [196] bc#165 ← bc#110
Coalesced [197] bd#198 ← bd#35
Not coalescing [201] bc#179 ← bc#111
Coalesced (already) [202] bd#213 ← bd#102
Coalesced [204] bc#167 ← bc#111
Coalesced [205] bd#200 ← bd#35
Not coalescing [209] bc#180 ← bc#112
Coalesced (already) [210] bd#214 ← bd#103
Coalesced [212] bc#169 ← bc#112
Coalesced [213] bd#202 ← bd#35
Coalesced (already) [216] bd#215 ← bd#104
Coalesced (already) [218] bd#204 ← bd#35
Coalesced [221] bc#171 ← bc#83
Coalesced (already) [222] bd#205 ← bd#104
Coalesced [223] bc#170 ← bc#47
Coalesced (already) [224] bd#203 ← bd#103
Coalesced [225] bc#168 ← bc#46
Coalesced (already) [226] bd#201 ← bd#102
Coalesced [227] bc#166 ← bc#45
Coalesced (already) [228] bd#199 ← bd#101
Coalesced [229] bc#164 ← bc#44
Coalesced (already) [230] bd#197 ← bd#100
Coalesced [231] bc#162 ← bc#43
Coalesced (already) [232] bd#195 ← bd#141
Coalesced [233] bc#160 ← bc#42
Coalesced (already) [234] bd#193 ← bd#140
Coalesced [235] bc#157 ← bc#41
Coalesced (already) [236] bd#190 ← bd#139
Coalesced [237] bc#155 ← bc#40
Coalesced (already) [238] bd#188 ← bd#138
Coalesced (already) [239] bc#153 ← bc#39
Coalesced (already) [240] bd#186 ← bd#137
Not coalescing [244] bd#235 ← bd#146
Coalesced [246] bd#217 ← bd#146
Not coalescing [250] bd#236 ← bd#147
Coalesced [252] bd#219 ← bd#147
Not coalescing [256] bd#237 ← bd#148
Coalesced [258] bd#221 ← bd#148
Not coalescing [262] bd#238 ← bd#149
Coalesced [264] bd#222 ← bd#149
Not coalescing [268] bd#239 ← bd#150
Coalesced [270] bd#224 ← bd#150
Not coalescing [274] bd#240 ← bd#151
Coalesced [276] bd#226 ← bd#151
Not coalescing [280] bd#241 ← bd#152
Coalesced [282] bd#228 ← bd#152
Not coalescing [286] bd#242 ← bd#153
Coalesced [288] bd#230 ← bd#153
Not coalescing [292] bd#243 ← bd#154
Coalesced [294] bd#232 ← bd#154
Coalesced [302] bd#234 ← bd#116
Coalesced [303] bd#233 ← bd#114
Coalesced [304] bd#231 ← bd#113
Coalesced [305] bd#229 ← bd#112
Coalesced [306] bd#227 ← bd#111
Coalesced [307] bd#225 ← bd#110
Coalesced [308] bd#223 ← bd#109
Coalesced [309] bd#220 ← bd#108
Coalesced [310] bd#218 ← bd#107
Coalesced (already) [311] bd#216 ← bd#106
Coalesced down to 7 phi equivalence classes
Culled Empty Block (label) @6
Culled Empty Block (label) f0::@21
Culled Empty Block (label) f0::@22
Culled Empty Block (label) f0::@23
Culled Empty Block (label) f0::@24
Culled Empty Block (label) f0::@25
Culled Empty Block (label) f0::@26
Culled Empty Block (label) f0::@27
Culled Empty Block (label) f0::@28
Culled Empty Block (label) f0::@29
Culled Empty Block (label) f0::@30
Culled Empty Block (label) f0::@40
Culled Empty Block (label) f0::@39
Culled Empty Block (label) f0::@38
Culled Empty Block (label) f0::@37
Culled Empty Block (label) f0::@36
Culled Empty Block (label) f0::@35
Culled Empty Block (label) f0::@34
Culled Empty Block (label) f0::@33
Culled Empty Block (label) f0::@32
Culled Empty Block (label) f0::@31
Culled Empty Block (label) fa::@21
Culled Empty Block (label) fa::@22
Culled Empty Block (label) fa::@23
Culled Empty Block (label) fa::@24
Culled Empty Block (label) fa::@25
Culled Empty Block (label) fa::@26
Culled Empty Block (label) fa::@27
Culled Empty Block (label) fa::@28
Culled Empty Block (label) fa::@29
Culled Empty Block (label) fa::@30
Culled Empty Block (label) fa::@40
Culled Empty Block (label) fa::@39
Culled Empty Block (label) fa::@38
Culled Empty Block (label) fa::@37
Culled Empty Block (label) fa::@36
Culled Empty Block (label) fa::@35
Culled Empty Block (label) fa::@34
Culled Empty Block (label) fa::@33
Culled Empty Block (label) fa::@32
Culled Empty Block (label) fa::@31
Culled Empty Block (label) fb::@21
Culled Empty Block (label) fb::@22
Culled Empty Block (label) fb::@23
Culled Empty Block (label) fb::@24
Culled Empty Block (label) fb::@25
Culled Empty Block (label) fb::@26
Culled Empty Block (label) fb::@27
Culled Empty Block (label) fb::@28
Culled Empty Block (label) fb::@29
Culled Empty Block (label) fb::@30
Culled Empty Block (label) fb::@40
Culled Empty Block (label) fb::@39
Culled Empty Block (label) fb::@38
Culled Empty Block (label) fb::@37
Culled Empty Block (label) fb::@36
Culled Empty Block (label) fb::@35
Culled Empty Block (label) fb::@34
Culled Empty Block (label) fb::@33
Culled Empty Block (label) fb::@32
Culled Empty Block (label) fb::@31
Renumbering block @5 to @1
Renumbering block main::@7 to main::@3
Renumbering block f0::@11 to f0::@10
Renumbering block f0::@12 to f0::@11
Renumbering block f0::@13 to f0::@12
Renumbering block f0::@14 to f0::@13
Renumbering block f0::@15 to f0::@14
Renumbering block f0::@16 to f0::@15
Renumbering block f0::@17 to f0::@16
Renumbering block f0::@18 to f0::@17
Renumbering block f0::@19 to f0::@18
Renumbering block f0::@20 to f0::@19
Renumbering block fa::@11 to fa::@10
Renumbering block fa::@12 to fa::@11
Renumbering block fa::@13 to fa::@12
Renumbering block fa::@14 to fa::@13
Renumbering block fa::@15 to fa::@14
Renumbering block fa::@16 to fa::@15
Renumbering block fa::@17 to fa::@16
Renumbering block fa::@18 to fa::@17
Renumbering block fa::@19 to fa::@18
Renumbering block fa::@20 to fa::@19
Renumbering block fb::@11 to fb::@10
Renumbering block fb::@12 to fb::@11
Renumbering block fb::@13 to fb::@12
Renumbering block fb::@14 to fb::@13
Renumbering block fb::@15 to fb::@14
Renumbering block fb::@16 to fb::@15
Renumbering block fb::@17 to fb::@16
Renumbering block fb::@18 to fb::@17
Renumbering block fb::@19 to fb::@18
Renumbering block fb::@20 to fb::@19
Renumbering block fc::@11 to fc::@10
Renumbering block fc::@12 to fc::@11
Renumbering block fc::@13 to fc::@12
Renumbering block fc::@14 to fc::@13
Renumbering block fc::@15 to fc::@14
Renumbering block fc::@16 to fc::@15
Renumbering block fc::@17 to fc::@16
Renumbering block fc::@18 to fc::@17
Renumbering block fc::@19 to fc::@18
Renumbering block fc::@20 to fc::@19
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of f0::@19
Adding NOP phi() at start of fa::@19
Adding NOP phi() at start of fb::@19
Adding NOP phi() at start of fc::@10
Adding NOP phi() at start of fc::@11
Adding NOP phi() at start of fc::@12
Adding NOP phi() at start of fc::@13
Adding NOP phi() at start of fc::@14
Adding NOP phi() at start of fc::@15
Adding NOP phi() at start of fc::@16
Adding NOP phi() at start of fc::@17
Adding NOP phi() at start of fc::@18
Adding NOP phi() at start of fc::@19

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [5] (byte) ba#17 ← phi( main/(byte) 0 main::@3/(byte) ba#1 )
  [5] (byte) bd#2 ← phi( main/(byte) 0 main::@3/(byte) bd#13 )
  [5] (byte) bc#2 ← phi( main/(byte) 0 main::@3/(byte) bc#13 )
  [5] (byte) bb#16 ← phi( main/(byte) 0 main::@3/(byte) bb#13 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] phi()
  [7] call f0 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [8] (byte) ba#1 ← ++ (byte) ba#17
  to:main::@1

(void()) f0()
f0: scope:[f0]  from main::@2
  [9] if((byte) ba#17!=(byte) 0) goto f0::@1
  to:f0::@10
f0::@10: scope:[f0]  from f0
  [10] (byte) bb#3 ← ++ (byte) bb#16
  [11] (byte) bb#100 ← (byte) bb#3
  [12] call fa 
  to:f0::@1
f0::@1: scope:[f0]  from f0 f0::@10
  [13] (byte) bd#129 ← phi( f0/(byte) bd#2 f0::@10/(byte) bd#24 )
  [13] (byte) bc#63 ← phi( f0/(byte) bc#2 f0::@10/(byte) bc#24 )
  [13] (byte) bb#18 ← phi( f0/(byte) bb#16 f0::@10/(byte) bb#3 )
  [14] if((byte) ba#17!=(byte) 1) goto f0::@2
  to:f0::@11
f0::@11: scope:[f0]  from f0::@1
  [15] (byte) bb#4 ← ++ (byte) bb#18
  [16] (byte) bb#101 ← (byte) bb#4
  [17] call fa 
  to:f0::@2
f0::@2: scope:[f0]  from f0::@1 f0::@11
  [18] (byte) bd#130 ← phi( f0::@1/(byte) bd#129 f0::@11/(byte) bd#24 )
  [18] (byte) bc#64 ← phi( f0::@1/(byte) bc#63 f0::@11/(byte) bc#24 )
  [18] (byte) bb#19 ← phi( f0::@1/(byte) bb#18 f0::@11/(byte) bb#4 )
  [19] if((byte) ba#17!=(byte) 2) goto f0::@3
  to:f0::@12
f0::@12: scope:[f0]  from f0::@2
  [20] (byte) bb#5 ← ++ (byte) bb#19
  [21] (byte) bb#102 ← (byte) bb#5
  [22] call fa 
  to:f0::@3
f0::@3: scope:[f0]  from f0::@12 f0::@2
  [23] (byte) bd#131 ← phi( f0::@2/(byte) bd#130 f0::@12/(byte) bd#24 )
  [23] (byte) bc#65 ← phi( f0::@2/(byte) bc#64 f0::@12/(byte) bc#24 )
  [23] (byte) bb#20 ← phi( f0::@2/(byte) bb#19 f0::@12/(byte) bb#5 )
  [24] if((byte) ba#17!=(byte) 3) goto f0::@4
  to:f0::@13
f0::@13: scope:[f0]  from f0::@3
  [25] (byte) bb#6 ← ++ (byte) bb#20
  [26] (byte) bb#103 ← (byte) bb#6
  [27] call fa 
  to:f0::@4
f0::@4: scope:[f0]  from f0::@13 f0::@3
  [28] (byte) bd#132 ← phi( f0::@13/(byte) bd#24 f0::@3/(byte) bd#131 )
  [28] (byte) bc#66 ← phi( f0::@13/(byte) bc#24 f0::@3/(byte) bc#65 )
  [28] (byte) bb#21 ← phi( f0::@13/(byte) bb#6 f0::@3/(byte) bb#20 )
  [29] if((byte) ba#17!=(byte) 4) goto f0::@5
  to:f0::@14
f0::@14: scope:[f0]  from f0::@4
  [30] (byte) bb#66 ← ++ (byte) bb#21
  [31] (byte) bb#104 ← (byte) bb#66
  [32] call fa 
  to:f0::@5
f0::@5: scope:[f0]  from f0::@14 f0::@4
  [33] (byte) bd#133 ← phi( f0::@14/(byte) bd#24 f0::@4/(byte) bd#132 )
  [33] (byte) bc#100 ← phi( f0::@14/(byte) bc#24 f0::@4/(byte) bc#66 )
  [33] (byte) bb#22 ← phi( f0::@14/(byte) bb#66 f0::@4/(byte) bb#21 )
  [34] if((byte) ba#17!=(byte) 5) goto f0::@6
  to:f0::@15
f0::@15: scope:[f0]  from f0::@5
  [35] (byte) bb#67 ← ++ (byte) bb#22
  [36] (byte) bb#105 ← (byte) bb#67
  [37] call fa 
  to:f0::@6
f0::@6: scope:[f0]  from f0::@15 f0::@5
  [38] (byte) bd#134 ← phi( f0::@15/(byte) bd#24 f0::@5/(byte) bd#133 )
  [38] (byte) bc#101 ← phi( f0::@15/(byte) bc#24 f0::@5/(byte) bc#100 )
  [38] (byte) bb#23 ← phi( f0::@15/(byte) bb#67 f0::@5/(byte) bb#22 )
  [39] if((byte) ba#17!=(byte) 6) goto f0::@7
  to:f0::@16
f0::@16: scope:[f0]  from f0::@6
  [40] (byte) bb#68 ← ++ (byte) bb#23
  [41] (byte) bb#106 ← (byte) bb#68
  [42] call fa 
  to:f0::@7
f0::@7: scope:[f0]  from f0::@16 f0::@6
  [43] (byte) bd#135 ← phi( f0::@16/(byte) bd#24 f0::@6/(byte) bd#134 )
  [43] (byte) bc#102 ← phi( f0::@16/(byte) bc#24 f0::@6/(byte) bc#101 )
  [43] (byte) bb#24 ← phi( f0::@16/(byte) bb#68 f0::@6/(byte) bb#23 )
  [44] if((byte) ba#17!=(byte) 7) goto f0::@8
  to:f0::@17
f0::@17: scope:[f0]  from f0::@7
  [45] (byte) bb#10 ← ++ (byte) bb#24
  [46] (byte) bb#107 ← (byte) bb#10
  [47] call fa 
  to:f0::@8
f0::@8: scope:[f0]  from f0::@17 f0::@7
  [48] (byte) bd#136 ← phi( f0::@17/(byte) bd#24 f0::@7/(byte) bd#135 )
  [48] (byte) bc#103 ← phi( f0::@17/(byte) bc#24 f0::@7/(byte) bc#102 )
  [48] (byte) bb#25 ← phi( f0::@17/(byte) bb#10 f0::@7/(byte) bb#24 )
  [49] if((byte) ba#17!=(byte) 8) goto f0::@9
  to:f0::@18
f0::@18: scope:[f0]  from f0::@8
  [50] (byte) bb#11 ← ++ (byte) bb#25
  [51] (byte) bb#108 ← (byte) bb#11
  [52] call fa 
  to:f0::@9
f0::@9: scope:[f0]  from f0::@18 f0::@8
  [53] (byte) bd#93 ← phi( f0::@18/(byte) bd#24 f0::@8/(byte) bd#136 )
  [53] (byte) bc#71 ← phi( f0::@18/(byte) bc#24 f0::@8/(byte) bc#103 )
  [53] (byte) bb#50 ← phi( f0::@18/(byte) bb#11 f0::@8/(byte) bb#25 )
  [54] if((byte) ba#17!=(byte) 9) goto f0::@return
  to:f0::@19
f0::@19: scope:[f0]  from f0::@9
  [55] phi()
  [56] call fa 
  to:f0::@return
f0::@return: scope:[f0]  from f0::@19 f0::@9
  [57] (byte) bd#13 ← phi( f0::@19/(byte) bd#24 f0::@9/(byte) bd#93 )
  [57] (byte) bc#13 ← phi( f0::@19/(byte) bc#24 f0::@9/(byte) bc#71 )
  [57] (byte) bb#13 ← phi( f0::@19/(byte) 0 f0::@9/(byte) bb#50 )
  [58] return 
  to:@return

(void()) fa()
fa: scope:[fa]  from f0::@10 f0::@11 f0::@12 f0::@13 f0::@14 f0::@15 f0::@16 f0::@17 f0::@18 f0::@19
  [59] (byte) bd#137 ← phi( f0::@10/(byte) bd#2 f0::@11/(byte) bd#129 f0::@12/(byte) bd#130 f0::@13/(byte) bd#131 f0::@14/(byte) bd#132 f0::@15/(byte) bd#133 f0::@16/(byte) bd#134 f0::@17/(byte) bd#135 f0::@18/(byte) bd#136 f0::@19/(byte) bd#93 )
  [59] (byte) bc#39 ← phi( f0::@10/(byte) bc#2 f0::@11/(byte) bc#63 f0::@12/(byte) bc#64 f0::@13/(byte) bc#65 f0::@14/(byte) bc#66 f0::@15/(byte) bc#100 f0::@16/(byte) bc#101 f0::@17/(byte) bc#102 f0::@18/(byte) bc#103 f0::@19/(byte) bc#71 )
  [59] (byte) bb#27 ← phi( f0::@10/(byte) bb#100 f0::@11/(byte) bb#101 f0::@12/(byte) bb#102 f0::@13/(byte) bb#103 f0::@14/(byte) bb#104 f0::@15/(byte) bb#105 f0::@16/(byte) bb#106 f0::@17/(byte) bb#107 f0::@18/(byte) bb#108 f0::@19/(byte) 0 )
  [60] if((byte) bb#27!=(byte) 0) goto fa::@1
  to:fa::@10
fa::@10: scope:[fa]  from fa
  [61] (byte) bc#104 ← ++ (byte) bc#39
  [62] (byte) bc#172 ← (byte) bc#104
  [63] call fb 
  to:fa::@1
fa::@1: scope:[fa]  from fa fa::@10
  [64] (byte) bd#138 ← phi( fa/(byte) bd#137 fa::@10/(byte) bd#35 )
  [64] (byte) bc#40 ← phi( fa/(byte) bc#39 fa::@10/(byte) bc#104 )
  [65] if((byte) bb#27!=(byte) 1) goto fa::@2
  to:fa::@11
fa::@11: scope:[fa]  from fa::@1
  [66] (byte) bc#105 ← ++ (byte) bc#40
  [67] (byte) bc#173 ← (byte) bc#105
  [68] call fb 
  to:fa::@2
fa::@2: scope:[fa]  from fa::@1 fa::@11
  [69] (byte) bd#139 ← phi( fa::@1/(byte) bd#138 fa::@11/(byte) bd#35 )
  [69] (byte) bc#41 ← phi( fa::@1/(byte) bc#40 fa::@11/(byte) bc#105 )
  [70] if((byte) bb#27!=(byte) 2) goto fa::@3
  to:fa::@12
fa::@12: scope:[fa]  from fa::@2
  [71] (byte) bc#106 ← ++ (byte) bc#41
  [72] (byte) bc#174 ← (byte) bc#106
  [73] call fb 
  to:fa::@3
fa::@3: scope:[fa]  from fa::@12 fa::@2
  [74] (byte) bd#140 ← phi( fa::@2/(byte) bd#139 fa::@12/(byte) bd#35 )
  [74] (byte) bc#42 ← phi( fa::@2/(byte) bc#41 fa::@12/(byte) bc#106 )
  [75] if((byte) bb#27!=(byte) 3) goto fa::@4
  to:fa::@13
fa::@13: scope:[fa]  from fa::@3
  [76] (byte) bc#107 ← ++ (byte) bc#42
  [77] (byte) bc#175 ← (byte) bc#107
  [78] call fb 
  to:fa::@4
fa::@4: scope:[fa]  from fa::@13 fa::@3
  [79] (byte) bd#141 ← phi( fa::@13/(byte) bd#35 fa::@3/(byte) bd#140 )
  [79] (byte) bc#43 ← phi( fa::@13/(byte) bc#107 fa::@3/(byte) bc#42 )
  [80] if((byte) bb#27!=(byte) 4) goto fa::@5
  to:fa::@14
fa::@14: scope:[fa]  from fa::@4
  [81] (byte) bc#108 ← ++ (byte) bc#43
  [82] (byte) bc#176 ← (byte) bc#108
  [83] call fb 
  to:fa::@5
fa::@5: scope:[fa]  from fa::@14 fa::@4
  [84] (byte) bd#100 ← phi( fa::@14/(byte) bd#35 fa::@4/(byte) bd#141 )
  [84] (byte) bc#44 ← phi( fa::@14/(byte) bc#108 fa::@4/(byte) bc#43 )
  [85] if((byte) bb#27!=(byte) 5) goto fa::@6
  to:fa::@15
fa::@15: scope:[fa]  from fa::@5
  [86] (byte) bc#109 ← ++ (byte) bc#44
  [87] (byte) bc#177 ← (byte) bc#109
  [88] call fb 
  to:fa::@6
fa::@6: scope:[fa]  from fa::@15 fa::@5
  [89] (byte) bd#101 ← phi( fa::@15/(byte) bd#35 fa::@5/(byte) bd#100 )
  [89] (byte) bc#45 ← phi( fa::@15/(byte) bc#109 fa::@5/(byte) bc#44 )
  [90] if((byte) bb#27!=(byte) 6) goto fa::@7
  to:fa::@16
fa::@16: scope:[fa]  from fa::@6
  [91] (byte) bc#110 ← ++ (byte) bc#45
  [92] (byte) bc#178 ← (byte) bc#110
  [93] call fb 
  to:fa::@7
fa::@7: scope:[fa]  from fa::@16 fa::@6
  [94] (byte) bd#102 ← phi( fa::@16/(byte) bd#35 fa::@6/(byte) bd#101 )
  [94] (byte) bc#46 ← phi( fa::@16/(byte) bc#110 fa::@6/(byte) bc#45 )
  [95] if((byte) bb#27!=(byte) 7) goto fa::@8
  to:fa::@17
fa::@17: scope:[fa]  from fa::@7
  [96] (byte) bc#111 ← ++ (byte) bc#46
  [97] (byte) bc#179 ← (byte) bc#111
  [98] call fb 
  to:fa::@8
fa::@8: scope:[fa]  from fa::@17 fa::@7
  [99] (byte) bd#103 ← phi( fa::@17/(byte) bd#35 fa::@7/(byte) bd#102 )
  [99] (byte) bc#47 ← phi( fa::@17/(byte) bc#111 fa::@7/(byte) bc#46 )
  [100] if((byte) bb#27!=(byte) 8) goto fa::@9
  to:fa::@18
fa::@18: scope:[fa]  from fa::@8
  [101] (byte) bc#112 ← ++ (byte) bc#47
  [102] (byte) bc#180 ← (byte) bc#112
  [103] call fb 
  to:fa::@9
fa::@9: scope:[fa]  from fa::@18 fa::@8
  [104] (byte) bd#104 ← phi( fa::@18/(byte) bd#35 fa::@8/(byte) bd#103 )
  [104] (byte) bc#83 ← phi( fa::@18/(byte) bc#112 fa::@8/(byte) bc#47 )
  [105] if((byte) bb#27!=(byte) 9) goto fa::@return
  to:fa::@19
fa::@19: scope:[fa]  from fa::@9
  [106] phi()
  [107] call fb 
  to:fa::@return
fa::@return: scope:[fa]  from fa::@19 fa::@9
  [108] (byte) bd#24 ← phi( fa::@19/(byte) bd#35 fa::@9/(byte) bd#104 )
  [108] (byte) bc#24 ← phi( fa::@19/(byte) 0 fa::@9/(byte) bc#83 )
  [109] return 
  to:@return

(void()) fb()
fb: scope:[fb]  from fa::@10 fa::@11 fa::@12 fa::@13 fa::@14 fa::@15 fa::@16 fa::@17 fa::@18 fa::@19
  [110] (byte) bd#106 ← phi( fa::@10/(byte) bd#137 fa::@11/(byte) bd#138 fa::@12/(byte) bd#139 fa::@13/(byte) bd#140 fa::@14/(byte) bd#141 fa::@15/(byte) bd#100 fa::@16/(byte) bd#101 fa::@17/(byte) bd#102 fa::@18/(byte) bd#103 fa::@19/(byte) bd#104 )
  [110] (byte) bc#113 ← phi( fa::@10/(byte) bc#172 fa::@11/(byte) bc#173 fa::@12/(byte) bc#174 fa::@13/(byte) bc#175 fa::@14/(byte) bc#176 fa::@15/(byte) bc#177 fa::@16/(byte) bc#178 fa::@17/(byte) bc#179 fa::@18/(byte) bc#180 fa::@19/(byte) 0 )
  [111] if((byte) bc#113!=(byte) 0) goto fb::@1
  to:fb::@10
fb::@10: scope:[fb]  from fb
  [112] (byte) bd#146 ← ++ (byte) bd#106
  [113] (byte) bd#235 ← (byte) bd#146
  [114] call fc 
  to:fb::@1
fb::@1: scope:[fb]  from fb fb::@10
  [115] (byte) bd#107 ← phi( fb/(byte) bd#106 fb::@10/(byte) bd#146 )
  [116] if((byte) bc#113!=(byte) 1) goto fb::@2
  to:fb::@11
fb::@11: scope:[fb]  from fb::@1
  [117] (byte) bd#147 ← ++ (byte) bd#107
  [118] (byte) bd#236 ← (byte) bd#147
  [119] call fc 
  to:fb::@2
fb::@2: scope:[fb]  from fb::@1 fb::@11
  [120] (byte) bd#108 ← phi( fb::@1/(byte) bd#107 fb::@11/(byte) bd#147 )
  [121] if((byte) bc#113!=(byte) 2) goto fb::@3
  to:fb::@12
fb::@12: scope:[fb]  from fb::@2
  [122] (byte) bd#148 ← ++ (byte) bd#108
  [123] (byte) bd#237 ← (byte) bd#148
  [124] call fc 
  to:fb::@3
fb::@3: scope:[fb]  from fb::@12 fb::@2
  [125] (byte) bd#109 ← phi( fb::@2/(byte) bd#108 fb::@12/(byte) bd#148 )
  [126] if((byte) bc#113!=(byte) 3) goto fb::@4
  to:fb::@13
fb::@13: scope:[fb]  from fb::@3
  [127] (byte) bd#149 ← ++ (byte) bd#109
  [128] (byte) bd#238 ← (byte) bd#149
  [129] call fc 
  to:fb::@4
fb::@4: scope:[fb]  from fb::@13 fb::@3
  [130] (byte) bd#110 ← phi( fb::@13/(byte) bd#149 fb::@3/(byte) bd#109 )
  [131] if((byte) bc#113!=(byte) 4) goto fb::@5
  to:fb::@14
fb::@14: scope:[fb]  from fb::@4
  [132] (byte) bd#150 ← ++ (byte) bd#110
  [133] (byte) bd#239 ← (byte) bd#150
  [134] call fc 
  to:fb::@5
fb::@5: scope:[fb]  from fb::@14 fb::@4
  [135] (byte) bd#111 ← phi( fb::@14/(byte) bd#150 fb::@4/(byte) bd#110 )
  [136] if((byte) bc#113!=(byte) 5) goto fb::@6
  to:fb::@15
fb::@15: scope:[fb]  from fb::@5
  [137] (byte) bd#151 ← ++ (byte) bd#111
  [138] (byte) bd#240 ← (byte) bd#151
  [139] call fc 
  to:fb::@6
fb::@6: scope:[fb]  from fb::@15 fb::@5
  [140] (byte) bd#112 ← phi( fb::@15/(byte) bd#151 fb::@5/(byte) bd#111 )
  [141] if((byte) bc#113!=(byte) 6) goto fb::@7
  to:fb::@16
fb::@16: scope:[fb]  from fb::@6
  [142] (byte) bd#152 ← ++ (byte) bd#112
  [143] (byte) bd#241 ← (byte) bd#152
  [144] call fc 
  to:fb::@7
fb::@7: scope:[fb]  from fb::@16 fb::@6
  [145] (byte) bd#113 ← phi( fb::@16/(byte) bd#152 fb::@6/(byte) bd#112 )
  [146] if((byte) bc#113!=(byte) 7) goto fb::@8
  to:fb::@17
fb::@17: scope:[fb]  from fb::@7
  [147] (byte) bd#153 ← ++ (byte) bd#113
  [148] (byte) bd#242 ← (byte) bd#153
  [149] call fc 
  to:fb::@8
fb::@8: scope:[fb]  from fb::@17 fb::@7
  [150] (byte) bd#114 ← phi( fb::@17/(byte) bd#153 fb::@7/(byte) bd#113 )
  [151] if((byte) bc#113!=(byte) 8) goto fb::@9
  to:fb::@18
fb::@18: scope:[fb]  from fb::@8
  [152] (byte) bd#154 ← ++ (byte) bd#114
  [153] (byte) bd#243 ← (byte) bd#154
  [154] call fc 
  to:fb::@9
fb::@9: scope:[fb]  from fb::@18 fb::@8
  [155] (byte) bd#116 ← phi( fb::@18/(byte) bd#154 fb::@8/(byte) bd#114 )
  [156] if((byte) bc#113!=(byte) 9) goto fb::@return
  to:fb::@19
fb::@19: scope:[fb]  from fb::@9
  [157] phi()
  [158] call fc 
  to:fb::@return
fb::@return: scope:[fb]  from fb::@19 fb::@9
  [159] (byte) bd#35 ← phi( fb::@19/(byte) 0 fb::@9/(byte) bd#116 )
  [160] return 
  to:@return

(void()) fc()
fc: scope:[fc]  from fb::@10 fb::@11 fb::@12 fb::@13 fb::@14 fb::@15 fb::@16 fb::@17 fb::@18 fb::@19
  [161] (byte) bd#117 ← phi( fb::@10/(byte) bd#235 fb::@11/(byte) bd#236 fb::@12/(byte) bd#237 fb::@13/(byte) bd#238 fb::@14/(byte) bd#239 fb::@15/(byte) bd#240 fb::@16/(byte) bd#241 fb::@17/(byte) bd#242 fb::@18/(byte) bd#243 fb::@19/(byte) 0 )
  [162] if((byte) bd#117!=(byte) 0) goto fc::@1
  to:fc::@10
fc::@10: scope:[fc]  from fc
  [163] phi()
  to:fc::@1
fc::@1: scope:[fc]  from fc fc::@10
  [164] if((byte) bd#117!=(byte) 1) goto fc::@2
  to:fc::@11
fc::@11: scope:[fc]  from fc::@1
  [165] phi()
  to:fc::@2
fc::@2: scope:[fc]  from fc::@1 fc::@11
  [166] if((byte) bd#117!=(byte) 2) goto fc::@3
  to:fc::@12
fc::@12: scope:[fc]  from fc::@2
  [167] phi()
  to:fc::@3
fc::@3: scope:[fc]  from fc::@12 fc::@2
  [168] if((byte) bd#117!=(byte) 3) goto fc::@4
  to:fc::@13
fc::@13: scope:[fc]  from fc::@3
  [169] phi()
  to:fc::@4
fc::@4: scope:[fc]  from fc::@13 fc::@3
  [170] if((byte) bd#117!=(byte) 4) goto fc::@5
  to:fc::@14
fc::@14: scope:[fc]  from fc::@4
  [171] phi()
  to:fc::@5
fc::@5: scope:[fc]  from fc::@14 fc::@4
  [172] if((byte) bd#117!=(byte) 5) goto fc::@6
  to:fc::@15
fc::@15: scope:[fc]  from fc::@5
  [173] phi()
  to:fc::@6
fc::@6: scope:[fc]  from fc::@15 fc::@5
  [174] if((byte) bd#117!=(byte) 6) goto fc::@7
  to:fc::@16
fc::@16: scope:[fc]  from fc::@6
  [175] phi()
  to:fc::@7
fc::@7: scope:[fc]  from fc::@16 fc::@6
  [176] if((byte) bd#117!=(byte) 7) goto fc::@8
  to:fc::@17
fc::@17: scope:[fc]  from fc::@7
  [177] phi()
  to:fc::@8
fc::@8: scope:[fc]  from fc::@17 fc::@7
  [178] if((byte) bd#117!=(byte) 8) goto fc::@9
  to:fc::@18
fc::@18: scope:[fc]  from fc::@8
  [179] phi()
  to:fc::@9
fc::@9: scope:[fc]  from fc::@18 fc::@8
  [180] if((byte) bd#117!=(byte) 9) goto fc::@return
  to:fc::@19
fc::@19: scope:[fc]  from fc::@9
  [181] phi()
  to:fc::@return
fc::@return: scope:[fc]  from fc::@19 fc::@9
  [182] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) ba
(byte) ba#1 202.0
(byte) ba#17 192.67924528301884
(byte) bb
(byte) bb#10 1001.0
(byte) bb#100 2002.0
(byte) bb#101 2002.0
(byte) bb#102 2002.0
(byte) bb#103 2002.0
(byte) bb#104 2002.0
(byte) bb#105 2002.0
(byte) bb#106 2002.0
(byte) bb#107 2002.0
(byte) bb#108 2002.0
(byte) bb#11 1001.0
(byte) bb#13 275.5
(byte) bb#16 701.0
(byte) bb#18 2002.0
(byte) bb#19 2002.0
(byte) bb#20 2002.0
(byte) bb#21 2002.0
(byte) bb#22 2002.0
(byte) bb#23 2002.0
(byte) bb#24 2002.0
(byte) bb#25 2002.0
(byte) bb#27 2369.978260869566
(byte) bb#3 1001.0
(byte) bb#4 1001.0
(byte) bb#5 1001.0
(byte) bb#50 1501.5
(byte) bb#6 1001.0
(byte) bb#66 1001.0
(byte) bb#67 1001.0
(byte) bb#68 1001.0
(byte) bc
(byte) bc#100 1001.0
(byte) bc#101 1001.0
(byte) bc#102 1001.0
(byte) bc#103 1001.0
(byte) bc#104 10001.0
(byte) bc#105 10001.0
(byte) bc#106 10001.0
(byte) bc#107 10001.0
(byte) bc#108 10001.0
(byte) bc#109 10001.0
(byte) bc#110 10001.0
(byte) bc#111 10001.0
(byte) bc#112 10001.0
(byte) bc#113 23696.065217391308
(byte) bc#13 525.75
(byte) bc#172 20002.0
(byte) bc#173 20002.0
(byte) bc#174 20002.0
(byte) bc#175 20002.0
(byte) bc#176 20002.0
(byte) bc#177 20002.0
(byte) bc#178 20002.0
(byte) bc#179 20002.0
(byte) bc#180 20002.0
(byte) bc#2 420.59999999999997
(byte) bc#24 1667.5833333333333
(byte) bc#39 15006.0
(byte) bc#40 20002.0
(byte) bc#41 20002.0
(byte) bc#42 20002.0
(byte) bc#43 20002.0
(byte) bc#44 20002.0
(byte) bc#45 20002.0
(byte) bc#46 20002.0
(byte) bc#47 20002.0
(byte) bc#63 1001.0
(byte) bc#64 1001.0
(byte) bc#65 1001.0
(byte) bc#66 1001.0
(byte) bc#71 1334.6666666666667
(byte) bc#83 15001.5
(byte) bd
(byte) bd#100 10001.0
(byte) bd#101 10001.0
(byte) bd#102 10001.0
(byte) bd#103 10001.0
(byte) bd#104 13334.666666666666
(byte) bd#106 150006.0
(byte) bd#107 200002.0
(byte) bd#108 200002.0
(byte) bd#109 200002.0
(byte) bd#110 200002.0
(byte) bd#111 200002.0
(byte) bd#112 200002.0
(byte) bd#113 200002.0
(byte) bd#114 200002.0
(byte) bd#116 150001.5
(byte) bd#117 573685.2105263157
(byte) bd#129 1001.0
(byte) bd#13 525.75
(byte) bd#130 1001.0
(byte) bd#131 1001.0
(byte) bd#132 1001.0
(byte) bd#133 1001.0
(byte) bd#134 1001.0
(byte) bd#135 1001.0
(byte) bd#136 1001.0
(byte) bd#137 7503.0
(byte) bd#138 10001.0
(byte) bd#139 10001.0
(byte) bd#140 10001.0
(byte) bd#141 10001.0
(byte) bd#146 100001.0
(byte) bd#147 100001.0
(byte) bd#148 100001.0
(byte) bd#149 100001.0
(byte) bd#150 100001.0
(byte) bd#151 100001.0
(byte) bd#152 100001.0
(byte) bd#153 100001.0
(byte) bd#154 100001.0
(byte) bd#2 420.59999999999997
(byte) bd#235 200002.0
(byte) bd#236 200002.0
(byte) bd#237 200002.0
(byte) bd#238 200002.0
(byte) bd#239 200002.0
(byte) bd#24 2501.0
(byte) bd#240 200002.0
(byte) bd#241 200002.0
(byte) bd#242 200002.0
(byte) bd#243 200002.0
(byte) bd#35 16667.583333333336
(byte) bd#93 1334.6666666666667
(void()) f0()
(void()) fa()
(void()) fb()
(void()) fc()
(void()) main()

Initial phi equivalence classes
[ ba#17 ba#1 ]
[ bb#50 bb#11 bb#25 bb#10 bb#24 bb#68 bb#23 bb#67 bb#22 bb#66 bb#21 bb#6 bb#20 bb#19 bb#18 bb#16 bb#13 bb#3 bb#4 bb#5 ]
[ bb#27 bb#100 bb#101 bb#102 bb#103 bb#104 bb#105 bb#106 bb#107 bb#108 ]
[ bc#83 bc#112 bc#47 bc#111 bc#46 bc#110 bc#45 bc#109 bc#44 bc#108 bc#43 bc#107 bc#42 bc#41 bc#40 bc#39 bc#71 bc#103 bc#102 bc#101 bc#100 bc#66 bc#65 bc#64 bc#63 bc#2 bc#13 bc#24 bc#104 bc#105 bc#106 ]
[ bc#113 bc#172 bc#173 bc#174 bc#175 bc#176 bc#177 bc#178 bc#179 bc#180 ]
[ bd#116 bd#154 bd#114 bd#153 bd#113 bd#152 bd#112 bd#151 bd#111 bd#150 bd#110 bd#149 bd#109 bd#108 bd#107 bd#106 bd#104 bd#103 bd#102 bd#101 bd#100 bd#141 bd#140 bd#139 bd#138 bd#137 bd#93 bd#136 bd#135 bd#134 bd#133 bd#132 bd#131 bd#130 bd#129 bd#2 bd#13 bd#24 bd#35 bd#146 bd#147 bd#148 ]
[ bd#117 bd#235 bd#236 bd#237 bd#238 bd#239 bd#240 bd#241 bd#242 bd#243 ]
Complete equivalence classes
[ ba#17 ba#1 ]
[ bb#50 bb#11 bb#25 bb#10 bb#24 bb#68 bb#23 bb#67 bb#22 bb#66 bb#21 bb#6 bb#20 bb#19 bb#18 bb#16 bb#13 bb#3 bb#4 bb#5 ]
[ bb#27 bb#100 bb#101 bb#102 bb#103 bb#104 bb#105 bb#106 bb#107 bb#108 ]
[ bc#83 bc#112 bc#47 bc#111 bc#46 bc#110 bc#45 bc#109 bc#44 bc#108 bc#43 bc#107 bc#42 bc#41 bc#40 bc#39 bc#71 bc#103 bc#102 bc#101 bc#100 bc#66 bc#65 bc#64 bc#63 bc#2 bc#13 bc#24 bc#104 bc#105 bc#106 ]
[ bc#113 bc#172 bc#173 bc#174 bc#175 bc#176 bc#177 bc#178 bc#179 bc#180 ]
[ bd#116 bd#154 bd#114 bd#153 bd#113 bd#152 bd#112 bd#151 bd#111 bd#150 bd#110 bd#149 bd#109 bd#108 bd#107 bd#106 bd#104 bd#103 bd#102 bd#101 bd#100 bd#141 bd#140 bd#139 bd#138 bd#137 bd#93 bd#136 bd#135 bd#134 bd#133 bd#132 bd#131 bd#130 bd#129 bd#2 bd#13 bd#24 bd#35 bd#146 bd#147 bd#148 ]
[ bd#117 bd#235 bd#236 bd#237 bd#238 bd#239 bd#240 bd#241 bd#242 bd#243 ]
Allocated zp[1]:2 [ ba#17 ba#1 ]
Allocated zp[1]:3 [ bb#50 bb#11 bb#25 bb#10 bb#24 bb#68 bb#23 bb#67 bb#22 bb#66 bb#21 bb#6 bb#20 bb#19 bb#18 bb#16 bb#13 bb#3 bb#4 bb#5 ]
Allocated zp[1]:4 [ bb#27 bb#100 bb#101 bb#102 bb#103 bb#104 bb#105 bb#106 bb#107 bb#108 ]
Allocated zp[1]:5 [ bc#83 bc#112 bc#47 bc#111 bc#46 bc#110 bc#45 bc#109 bc#44 bc#108 bc#43 bc#107 bc#42 bc#41 bc#40 bc#39 bc#71 bc#103 bc#102 bc#101 bc#100 bc#66 bc#65 bc#64 bc#63 bc#2 bc#13 bc#24 bc#104 bc#105 bc#106 ]
Allocated zp[1]:6 [ bc#113 bc#172 bc#173 bc#174 bc#175 bc#176 bc#177 bc#178 bc#179 bc#180 ]
Allocated zp[1]:7 [ bd#116 bd#154 bd#114 bd#153 bd#113 bd#152 bd#112 bd#151 bd#111 bd#150 bd#110 bd#149 bd#109 bd#108 bd#107 bd#106 bd#104 bd#103 bd#102 bd#101 bd#100 bd#141 bd#140 bd#139 bd#138 bd#137 bd#93 bd#136 bd#135 bd#134 bd#133 bd#132 bd#131 bd#130 bd#129 bd#2 bd#13 bd#24 bd#35 bd#146 bd#147 bd#148 ]
Allocated zp[1]:8 [ bd#117 bd#235 bd#236 bd#237 bd#238 bd#239 bd#240 bd#241 bd#242 bd#243 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label ba = 2
  .label bc = 5
  .label bd = 7
  .label bb = 3
  .label bb_1 = 4
  .label bd_1 = 8
  .label bc_1 = 6
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) ba#17 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ba
    // [5] phi (byte) bd#2 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z bd
    // [5] phi (byte) bc#2 = (byte) 0 [phi:main->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z bc
    // [5] phi (byte) bb#16 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z bb
    jmp __b1
    // main::@1
  __b1:
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [7] call f0 
    jsr f0
    jmp __b3
    // main::@3
  __b3:
    // [8] (byte) ba#1 ← ++ (byte) ba#17 -- vbuz1=_inc_vbuz1 
    inc.z ba
    // [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [5] phi (byte) ba#17 = (byte) ba#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [5] phi (byte) bd#2 = (byte) bd#13 [phi:main::@3->main::@1#1] -- register_copy 
    // [5] phi (byte) bc#2 = (byte) bc#13 [phi:main::@3->main::@1#2] -- register_copy 
    // [5] phi (byte) bb#16 = (byte) bb#13 [phi:main::@3->main::@1#3] -- register_copy 
    jmp __b1
}
  // f0
f0: {
    // [9] if((byte) ba#17!=(byte) 0) goto f0::@1 -- vbuz1_neq_0_then_la1 
    lda.z ba
    cmp #0
    bne __b1_from_f0
    jmp __b10
    // f0::@10
  __b10:
    // [10] (byte) bb#3 ← ++ (byte) bb#16 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [11] (byte) bb#100 ← (byte) bb#3 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // [12] call fa 
    // [59] phi from f0::@10 to fa [phi:f0::@10->fa]
  fa_from___b10:
    // [59] phi (byte) bd#137 = (byte) bd#2 [phi:f0::@10->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#2 [phi:f0::@10->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#100 [phi:f0::@10->fa#2] -- register_copy 
    jsr fa
    // [13] phi from f0 f0::@10 to f0::@1 [phi:f0/f0::@10->f0::@1]
  __b1_from_f0:
  __b1_from___b10:
    // [13] phi (byte) bd#129 = (byte) bd#2 [phi:f0/f0::@10->f0::@1#0] -- register_copy 
    // [13] phi (byte) bc#63 = (byte) bc#2 [phi:f0/f0::@10->f0::@1#1] -- register_copy 
    // [13] phi (byte) bb#18 = (byte) bb#16 [phi:f0/f0::@10->f0::@1#2] -- register_copy 
    jmp __b1
    // f0::@1
  __b1:
    // [14] if((byte) ba#17!=(byte) 1) goto f0::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp.z ba
    bne __b2_from___b1
    jmp __b11
    // f0::@11
  __b11:
    // [15] (byte) bb#4 ← ++ (byte) bb#18 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [16] (byte) bb#101 ← (byte) bb#4 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // [17] call fa 
    // [59] phi from f0::@11 to fa [phi:f0::@11->fa]
  fa_from___b11:
    // [59] phi (byte) bd#137 = (byte) bd#129 [phi:f0::@11->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#63 [phi:f0::@11->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#101 [phi:f0::@11->fa#2] -- register_copy 
    jsr fa
    // [18] phi from f0::@1 f0::@11 to f0::@2 [phi:f0::@1/f0::@11->f0::@2]
  __b2_from___b1:
  __b2_from___b11:
    // [18] phi (byte) bd#130 = (byte) bd#129 [phi:f0::@1/f0::@11->f0::@2#0] -- register_copy 
    // [18] phi (byte) bc#64 = (byte) bc#63 [phi:f0::@1/f0::@11->f0::@2#1] -- register_copy 
    // [18] phi (byte) bb#19 = (byte) bb#18 [phi:f0::@1/f0::@11->f0::@2#2] -- register_copy 
    jmp __b2
    // f0::@2
  __b2:
    // [19] if((byte) ba#17!=(byte) 2) goto f0::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z ba
    bne __b3_from___b2
    jmp __b12
    // f0::@12
  __b12:
    // [20] (byte) bb#5 ← ++ (byte) bb#19 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [21] (byte) bb#102 ← (byte) bb#5 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // [22] call fa 
    // [59] phi from f0::@12 to fa [phi:f0::@12->fa]
  fa_from___b12:
    // [59] phi (byte) bd#137 = (byte) bd#130 [phi:f0::@12->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#64 [phi:f0::@12->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#102 [phi:f0::@12->fa#2] -- register_copy 
    jsr fa
    // [23] phi from f0::@12 f0::@2 to f0::@3 [phi:f0::@12/f0::@2->f0::@3]
  __b3_from___b12:
  __b3_from___b2:
    // [23] phi (byte) bd#131 = (byte) bd#24 [phi:f0::@12/f0::@2->f0::@3#0] -- register_copy 
    // [23] phi (byte) bc#65 = (byte) bc#24 [phi:f0::@12/f0::@2->f0::@3#1] -- register_copy 
    // [23] phi (byte) bb#20 = (byte) bb#5 [phi:f0::@12/f0::@2->f0::@3#2] -- register_copy 
    jmp __b3
    // f0::@3
  __b3:
    // [24] if((byte) ba#17!=(byte) 3) goto f0::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z ba
    bne __b4_from___b3
    jmp __b13
    // f0::@13
  __b13:
    // [25] (byte) bb#6 ← ++ (byte) bb#20 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [26] (byte) bb#103 ← (byte) bb#6 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // [27] call fa 
    // [59] phi from f0::@13 to fa [phi:f0::@13->fa]
  fa_from___b13:
    // [59] phi (byte) bd#137 = (byte) bd#131 [phi:f0::@13->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#65 [phi:f0::@13->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#103 [phi:f0::@13->fa#2] -- register_copy 
    jsr fa
    // [28] phi from f0::@13 f0::@3 to f0::@4 [phi:f0::@13/f0::@3->f0::@4]
  __b4_from___b13:
  __b4_from___b3:
    // [28] phi (byte) bd#132 = (byte) bd#24 [phi:f0::@13/f0::@3->f0::@4#0] -- register_copy 
    // [28] phi (byte) bc#66 = (byte) bc#24 [phi:f0::@13/f0::@3->f0::@4#1] -- register_copy 
    // [28] phi (byte) bb#21 = (byte) bb#6 [phi:f0::@13/f0::@3->f0::@4#2] -- register_copy 
    jmp __b4
    // f0::@4
  __b4:
    // [29] if((byte) ba#17!=(byte) 4) goto f0::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z ba
    bne __b5_from___b4
    jmp __b14
    // f0::@14
  __b14:
    // [30] (byte) bb#66 ← ++ (byte) bb#21 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [31] (byte) bb#104 ← (byte) bb#66 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // [32] call fa 
    // [59] phi from f0::@14 to fa [phi:f0::@14->fa]
  fa_from___b14:
    // [59] phi (byte) bd#137 = (byte) bd#132 [phi:f0::@14->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#66 [phi:f0::@14->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#104 [phi:f0::@14->fa#2] -- register_copy 
    jsr fa
    // [33] phi from f0::@14 f0::@4 to f0::@5 [phi:f0::@14/f0::@4->f0::@5]
  __b5_from___b14:
  __b5_from___b4:
    // [33] phi (byte) bd#133 = (byte) bd#24 [phi:f0::@14/f0::@4->f0::@5#0] -- register_copy 
    // [33] phi (byte) bc#100 = (byte) bc#24 [phi:f0::@14/f0::@4->f0::@5#1] -- register_copy 
    // [33] phi (byte) bb#22 = (byte) bb#66 [phi:f0::@14/f0::@4->f0::@5#2] -- register_copy 
    jmp __b5
    // f0::@5
  __b5:
    // [34] if((byte) ba#17!=(byte) 5) goto f0::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp.z ba
    bne __b6_from___b5
    jmp __b15
    // f0::@15
  __b15:
    // [35] (byte) bb#67 ← ++ (byte) bb#22 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [36] (byte) bb#105 ← (byte) bb#67 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // [37] call fa 
    // [59] phi from f0::@15 to fa [phi:f0::@15->fa]
  fa_from___b15:
    // [59] phi (byte) bd#137 = (byte) bd#133 [phi:f0::@15->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#100 [phi:f0::@15->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#105 [phi:f0::@15->fa#2] -- register_copy 
    jsr fa
    // [38] phi from f0::@15 f0::@5 to f0::@6 [phi:f0::@15/f0::@5->f0::@6]
  __b6_from___b15:
  __b6_from___b5:
    // [38] phi (byte) bd#134 = (byte) bd#24 [phi:f0::@15/f0::@5->f0::@6#0] -- register_copy 
    // [38] phi (byte) bc#101 = (byte) bc#24 [phi:f0::@15/f0::@5->f0::@6#1] -- register_copy 
    // [38] phi (byte) bb#23 = (byte) bb#67 [phi:f0::@15/f0::@5->f0::@6#2] -- register_copy 
    jmp __b6
    // f0::@6
  __b6:
    // [39] if((byte) ba#17!=(byte) 6) goto f0::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z ba
    bne __b7_from___b6
    jmp __b16
    // f0::@16
  __b16:
    // [40] (byte) bb#68 ← ++ (byte) bb#23 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [41] (byte) bb#106 ← (byte) bb#68 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // [42] call fa 
    // [59] phi from f0::@16 to fa [phi:f0::@16->fa]
  fa_from___b16:
    // [59] phi (byte) bd#137 = (byte) bd#134 [phi:f0::@16->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#101 [phi:f0::@16->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#106 [phi:f0::@16->fa#2] -- register_copy 
    jsr fa
    // [43] phi from f0::@16 f0::@6 to f0::@7 [phi:f0::@16/f0::@6->f0::@7]
  __b7_from___b16:
  __b7_from___b6:
    // [43] phi (byte) bd#135 = (byte) bd#24 [phi:f0::@16/f0::@6->f0::@7#0] -- register_copy 
    // [43] phi (byte) bc#102 = (byte) bc#24 [phi:f0::@16/f0::@6->f0::@7#1] -- register_copy 
    // [43] phi (byte) bb#24 = (byte) bb#68 [phi:f0::@16/f0::@6->f0::@7#2] -- register_copy 
    jmp __b7
    // f0::@7
  __b7:
    // [44] if((byte) ba#17!=(byte) 7) goto f0::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z ba
    bne __b8_from___b7
    jmp __b17
    // f0::@17
  __b17:
    // [45] (byte) bb#10 ← ++ (byte) bb#24 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [46] (byte) bb#107 ← (byte) bb#10 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // [47] call fa 
    // [59] phi from f0::@17 to fa [phi:f0::@17->fa]
  fa_from___b17:
    // [59] phi (byte) bd#137 = (byte) bd#135 [phi:f0::@17->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#102 [phi:f0::@17->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#107 [phi:f0::@17->fa#2] -- register_copy 
    jsr fa
    // [48] phi from f0::@17 f0::@7 to f0::@8 [phi:f0::@17/f0::@7->f0::@8]
  __b8_from___b17:
  __b8_from___b7:
    // [48] phi (byte) bd#136 = (byte) bd#24 [phi:f0::@17/f0::@7->f0::@8#0] -- register_copy 
    // [48] phi (byte) bc#103 = (byte) bc#24 [phi:f0::@17/f0::@7->f0::@8#1] -- register_copy 
    // [48] phi (byte) bb#25 = (byte) bb#10 [phi:f0::@17/f0::@7->f0::@8#2] -- register_copy 
    jmp __b8
    // f0::@8
  __b8:
    // [49] if((byte) ba#17!=(byte) 8) goto f0::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z ba
    bne __b9_from___b8
    jmp __b18
    // f0::@18
  __b18:
    // [50] (byte) bb#11 ← ++ (byte) bb#25 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [51] (byte) bb#108 ← (byte) bb#11 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // [52] call fa 
    // [59] phi from f0::@18 to fa [phi:f0::@18->fa]
  fa_from___b18:
    // [59] phi (byte) bd#137 = (byte) bd#136 [phi:f0::@18->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#103 [phi:f0::@18->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#108 [phi:f0::@18->fa#2] -- register_copy 
    jsr fa
    // [53] phi from f0::@18 f0::@8 to f0::@9 [phi:f0::@18/f0::@8->f0::@9]
  __b9_from___b18:
  __b9_from___b8:
    // [53] phi (byte) bd#93 = (byte) bd#24 [phi:f0::@18/f0::@8->f0::@9#0] -- register_copy 
    // [53] phi (byte) bc#71 = (byte) bc#24 [phi:f0::@18/f0::@8->f0::@9#1] -- register_copy 
    // [53] phi (byte) bb#50 = (byte) bb#11 [phi:f0::@18/f0::@8->f0::@9#2] -- register_copy 
    jmp __b9
    // f0::@9
  __b9:
    // [54] if((byte) ba#17!=(byte) 9) goto f0::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp.z ba
    bne __breturn_from___b9
    // [55] phi from f0::@9 to f0::@19 [phi:f0::@9->f0::@19]
  __b19_from___b9:
    jmp __b19
    // f0::@19
  __b19:
    // [56] call fa 
    // [59] phi from f0::@19 to fa [phi:f0::@19->fa]
  fa_from___b19:
    // [59] phi (byte) bd#137 = (byte) bd#93 [phi:f0::@19->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#71 [phi:f0::@19->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) 0 [phi:f0::@19->fa#2] -- vbuz1=vbuc1 
    lda #0
    sta.z bb_1
    jsr fa
    // [57] phi from f0::@19 to f0::@return [phi:f0::@19->f0::@return]
  __breturn_from___b19:
    // [57] phi (byte) bd#13 = (byte) bd#24 [phi:f0::@19->f0::@return#0] -- register_copy 
    // [57] phi (byte) bc#13 = (byte) bc#24 [phi:f0::@19->f0::@return#1] -- register_copy 
    // [57] phi (byte) bb#13 = (byte) 0 [phi:f0::@19->f0::@return#2] -- vbuz1=vbuc1 
    lda #0
    sta.z bb
    jmp __breturn
    // [57] phi from f0::@9 to f0::@return [phi:f0::@9->f0::@return]
  __breturn_from___b9:
    // [57] phi (byte) bd#13 = (byte) bd#93 [phi:f0::@9->f0::@return#0] -- register_copy 
    // [57] phi (byte) bc#13 = (byte) bc#71 [phi:f0::@9->f0::@return#1] -- register_copy 
    // [57] phi (byte) bb#13 = (byte) bb#50 [phi:f0::@9->f0::@return#2] -- register_copy 
    jmp __breturn
    // f0::@return
  __breturn:
    // [58] return 
    rts
}
  // fa
fa: {
    // [60] if((byte) bb#27!=(byte) 0) goto fa::@1 -- vbuz1_neq_0_then_la1 
    lda.z bb_1
    cmp #0
    bne __b1_from_fa
    jmp __b10
    // fa::@10
  __b10:
    // [61] (byte) bc#104 ← ++ (byte) bc#39 -- vbuz1=_inc_vbuz1 
    inc.z bc
    // [62] (byte) bc#172 ← (byte) bc#104 -- vbuz1=vbuz2 
    lda.z bc
    sta.z bc_1
    // [63] call fb 
    // [110] phi from fa::@10 to fb [phi:fa::@10->fb]
  fb_from___b10:
    // [110] phi (byte) bd#106 = (byte) bd#137 [phi:fa::@10->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#172 [phi:fa::@10->fb#1] -- register_copy 
    jsr fb
    // [64] phi from fa fa::@10 to fa::@1 [phi:fa/fa::@10->fa::@1]
  __b1_from_fa:
  __b1_from___b10:
    // [64] phi (byte) bd#138 = (byte) bd#137 [phi:fa/fa::@10->fa::@1#0] -- register_copy 
    // [64] phi (byte) bc#40 = (byte) bc#39 [phi:fa/fa::@10->fa::@1#1] -- register_copy 
    jmp __b1
    // fa::@1
  __b1:
    // [65] if((byte) bb#27!=(byte) 1) goto fa::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp.z bb_1
    bne __b2_from___b1
    jmp __b11
    // fa::@11
  __b11:
    // [66] (byte) bc#105 ← ++ (byte) bc#40 -- vbuz1=_inc_vbuz1 
    inc.z bc
    // [67] (byte) bc#173 ← (byte) bc#105 -- vbuz1=vbuz2 
    lda.z bc
    sta.z bc_1
    // [68] call fb 
    // [110] phi from fa::@11 to fb [phi:fa::@11->fb]
  fb_from___b11:
    // [110] phi (byte) bd#106 = (byte) bd#138 [phi:fa::@11->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#173 [phi:fa::@11->fb#1] -- register_copy 
    jsr fb
    // [69] phi from fa::@1 fa::@11 to fa::@2 [phi:fa::@1/fa::@11->fa::@2]
  __b2_from___b1:
  __b2_from___b11:
    // [69] phi (byte) bd#139 = (byte) bd#138 [phi:fa::@1/fa::@11->fa::@2#0] -- register_copy 
    // [69] phi (byte) bc#41 = (byte) bc#40 [phi:fa::@1/fa::@11->fa::@2#1] -- register_copy 
    jmp __b2
    // fa::@2
  __b2:
    // [70] if((byte) bb#27!=(byte) 2) goto fa::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z bb_1
    bne __b3_from___b2
    jmp __b12
    // fa::@12
  __b12:
    // [71] (byte) bc#106 ← ++ (byte) bc#41 -- vbuz1=_inc_vbuz1 
    inc.z bc
    // [72] (byte) bc#174 ← (byte) bc#106 -- vbuz1=vbuz2 
    lda.z bc
    sta.z bc_1
    // [73] call fb 
    // [110] phi from fa::@12 to fb [phi:fa::@12->fb]
  fb_from___b12:
    // [110] phi (byte) bd#106 = (byte) bd#139 [phi:fa::@12->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#174 [phi:fa::@12->fb#1] -- register_copy 
    jsr fb
    // [74] phi from fa::@12 fa::@2 to fa::@3 [phi:fa::@12/fa::@2->fa::@3]
  __b3_from___b12:
  __b3_from___b2:
    // [74] phi (byte) bd#140 = (byte) bd#35 [phi:fa::@12/fa::@2->fa::@3#0] -- register_copy 
    // [74] phi (byte) bc#42 = (byte) bc#106 [phi:fa::@12/fa::@2->fa::@3#1] -- register_copy 
    jmp __b3
    // fa::@3
  __b3:
    // [75] if((byte) bb#27!=(byte) 3) goto fa::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z bb_1
    bne __b4_from___b3
    jmp __b13
    // fa::@13
  __b13:
    // [76] (byte) bc#107 ← ++ (byte) bc#42 -- vbuz1=_inc_vbuz1 
    inc.z bc
    // [77] (byte) bc#175 ← (byte) bc#107 -- vbuz1=vbuz2 
    lda.z bc
    sta.z bc_1
    // [78] call fb 
    // [110] phi from fa::@13 to fb [phi:fa::@13->fb]
  fb_from___b13:
    // [110] phi (byte) bd#106 = (byte) bd#140 [phi:fa::@13->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#175 [phi:fa::@13->fb#1] -- register_copy 
    jsr fb
    // [79] phi from fa::@13 fa::@3 to fa::@4 [phi:fa::@13/fa::@3->fa::@4]
  __b4_from___b13:
  __b4_from___b3:
    // [79] phi (byte) bd#141 = (byte) bd#35 [phi:fa::@13/fa::@3->fa::@4#0] -- register_copy 
    // [79] phi (byte) bc#43 = (byte) bc#107 [phi:fa::@13/fa::@3->fa::@4#1] -- register_copy 
    jmp __b4
    // fa::@4
  __b4:
    // [80] if((byte) bb#27!=(byte) 4) goto fa::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z bb_1
    bne __b5_from___b4
    jmp __b14
    // fa::@14
  __b14:
    // [81] (byte) bc#108 ← ++ (byte) bc#43 -- vbuz1=_inc_vbuz1 
    inc.z bc
    // [82] (byte) bc#176 ← (byte) bc#108 -- vbuz1=vbuz2 
    lda.z bc
    sta.z bc_1
    // [83] call fb 
    // [110] phi from fa::@14 to fb [phi:fa::@14->fb]
  fb_from___b14:
    // [110] phi (byte) bd#106 = (byte) bd#141 [phi:fa::@14->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#176 [phi:fa::@14->fb#1] -- register_copy 
    jsr fb
    // [84] phi from fa::@14 fa::@4 to fa::@5 [phi:fa::@14/fa::@4->fa::@5]
  __b5_from___b14:
  __b5_from___b4:
    // [84] phi (byte) bd#100 = (byte) bd#35 [phi:fa::@14/fa::@4->fa::@5#0] -- register_copy 
    // [84] phi (byte) bc#44 = (byte) bc#108 [phi:fa::@14/fa::@4->fa::@5#1] -- register_copy 
    jmp __b5
    // fa::@5
  __b5:
    // [85] if((byte) bb#27!=(byte) 5) goto fa::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp.z bb_1
    bne __b6_from___b5
    jmp __b15
    // fa::@15
  __b15:
    // [86] (byte) bc#109 ← ++ (byte) bc#44 -- vbuz1=_inc_vbuz1 
    inc.z bc
    // [87] (byte) bc#177 ← (byte) bc#109 -- vbuz1=vbuz2 
    lda.z bc
    sta.z bc_1
    // [88] call fb 
    // [110] phi from fa::@15 to fb [phi:fa::@15->fb]
  fb_from___b15:
    // [110] phi (byte) bd#106 = (byte) bd#100 [phi:fa::@15->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#177 [phi:fa::@15->fb#1] -- register_copy 
    jsr fb
    // [89] phi from fa::@15 fa::@5 to fa::@6 [phi:fa::@15/fa::@5->fa::@6]
  __b6_from___b15:
  __b6_from___b5:
    // [89] phi (byte) bd#101 = (byte) bd#35 [phi:fa::@15/fa::@5->fa::@6#0] -- register_copy 
    // [89] phi (byte) bc#45 = (byte) bc#109 [phi:fa::@15/fa::@5->fa::@6#1] -- register_copy 
    jmp __b6
    // fa::@6
  __b6:
    // [90] if((byte) bb#27!=(byte) 6) goto fa::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z bb_1
    bne __b7_from___b6
    jmp __b16
    // fa::@16
  __b16:
    // [91] (byte) bc#110 ← ++ (byte) bc#45 -- vbuz1=_inc_vbuz1 
    inc.z bc
    // [92] (byte) bc#178 ← (byte) bc#110 -- vbuz1=vbuz2 
    lda.z bc
    sta.z bc_1
    // [93] call fb 
    // [110] phi from fa::@16 to fb [phi:fa::@16->fb]
  fb_from___b16:
    // [110] phi (byte) bd#106 = (byte) bd#101 [phi:fa::@16->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#178 [phi:fa::@16->fb#1] -- register_copy 
    jsr fb
    // [94] phi from fa::@16 fa::@6 to fa::@7 [phi:fa::@16/fa::@6->fa::@7]
  __b7_from___b16:
  __b7_from___b6:
    // [94] phi (byte) bd#102 = (byte) bd#35 [phi:fa::@16/fa::@6->fa::@7#0] -- register_copy 
    // [94] phi (byte) bc#46 = (byte) bc#110 [phi:fa::@16/fa::@6->fa::@7#1] -- register_copy 
    jmp __b7
    // fa::@7
  __b7:
    // [95] if((byte) bb#27!=(byte) 7) goto fa::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z bb_1
    bne __b8_from___b7
    jmp __b17
    // fa::@17
  __b17:
    // [96] (byte) bc#111 ← ++ (byte) bc#46 -- vbuz1=_inc_vbuz1 
    inc.z bc
    // [97] (byte) bc#179 ← (byte) bc#111 -- vbuz1=vbuz2 
    lda.z bc
    sta.z bc_1
    // [98] call fb 
    // [110] phi from fa::@17 to fb [phi:fa::@17->fb]
  fb_from___b17:
    // [110] phi (byte) bd#106 = (byte) bd#102 [phi:fa::@17->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#179 [phi:fa::@17->fb#1] -- register_copy 
    jsr fb
    // [99] phi from fa::@17 fa::@7 to fa::@8 [phi:fa::@17/fa::@7->fa::@8]
  __b8_from___b17:
  __b8_from___b7:
    // [99] phi (byte) bd#103 = (byte) bd#35 [phi:fa::@17/fa::@7->fa::@8#0] -- register_copy 
    // [99] phi (byte) bc#47 = (byte) bc#111 [phi:fa::@17/fa::@7->fa::@8#1] -- register_copy 
    jmp __b8
    // fa::@8
  __b8:
    // [100] if((byte) bb#27!=(byte) 8) goto fa::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z bb_1
    bne __b9_from___b8
    jmp __b18
    // fa::@18
  __b18:
    // [101] (byte) bc#112 ← ++ (byte) bc#47 -- vbuz1=_inc_vbuz1 
    inc.z bc
    // [102] (byte) bc#180 ← (byte) bc#112 -- vbuz1=vbuz2 
    lda.z bc
    sta.z bc_1
    // [103] call fb 
    // [110] phi from fa::@18 to fb [phi:fa::@18->fb]
  fb_from___b18:
    // [110] phi (byte) bd#106 = (byte) bd#103 [phi:fa::@18->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#180 [phi:fa::@18->fb#1] -- register_copy 
    jsr fb
    // [104] phi from fa::@18 fa::@8 to fa::@9 [phi:fa::@18/fa::@8->fa::@9]
  __b9_from___b18:
  __b9_from___b8:
    // [104] phi (byte) bd#104 = (byte) bd#35 [phi:fa::@18/fa::@8->fa::@9#0] -- register_copy 
    // [104] phi (byte) bc#83 = (byte) bc#112 [phi:fa::@18/fa::@8->fa::@9#1] -- register_copy 
    jmp __b9
    // fa::@9
  __b9:
    // [105] if((byte) bb#27!=(byte) 9) goto fa::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp.z bb_1
    bne __breturn_from___b9
    // [106] phi from fa::@9 to fa::@19 [phi:fa::@9->fa::@19]
  __b19_from___b9:
    jmp __b19
    // fa::@19
  __b19:
    // [107] call fb 
    // [110] phi from fa::@19 to fb [phi:fa::@19->fb]
  fb_from___b19:
    // [110] phi (byte) bd#106 = (byte) bd#104 [phi:fa::@19->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) 0 [phi:fa::@19->fb#1] -- vbuz1=vbuc1 
    lda #0
    sta.z bc_1
    jsr fb
    // [108] phi from fa::@19 to fa::@return [phi:fa::@19->fa::@return]
  __breturn_from___b19:
    // [108] phi (byte) bd#24 = (byte) bd#35 [phi:fa::@19->fa::@return#0] -- register_copy 
    // [108] phi (byte) bc#24 = (byte) 0 [phi:fa::@19->fa::@return#1] -- vbuz1=vbuc1 
    lda #0
    sta.z bc
    jmp __breturn
    // [108] phi from fa::@9 to fa::@return [phi:fa::@9->fa::@return]
  __breturn_from___b9:
    // [108] phi (byte) bd#24 = (byte) bd#104 [phi:fa::@9->fa::@return#0] -- register_copy 
    // [108] phi (byte) bc#24 = (byte) bc#83 [phi:fa::@9->fa::@return#1] -- register_copy 
    jmp __breturn
    // fa::@return
  __breturn:
    // [109] return 
    rts
}
  // fb
fb: {
    // [111] if((byte) bc#113!=(byte) 0) goto fb::@1 -- vbuz1_neq_0_then_la1 
    lda.z bc_1
    cmp #0
    bne __b1_from_fb
    jmp __b10
    // fb::@10
  __b10:
    // [112] (byte) bd#146 ← ++ (byte) bd#106 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [113] (byte) bd#235 ← (byte) bd#146 -- vbuz1=vbuz2 
    lda.z bd
    sta.z bd_1
    // [114] call fc 
    // [161] phi from fb::@10 to fc [phi:fb::@10->fc]
  fc_from___b10:
    // [161] phi (byte) bd#117 = (byte) bd#235 [phi:fb::@10->fc#0] -- register_copy 
    jsr fc
    // [115] phi from fb fb::@10 to fb::@1 [phi:fb/fb::@10->fb::@1]
  __b1_from_fb:
  __b1_from___b10:
    // [115] phi (byte) bd#107 = (byte) bd#106 [phi:fb/fb::@10->fb::@1#0] -- register_copy 
    jmp __b1
    // fb::@1
  __b1:
    // [116] if((byte) bc#113!=(byte) 1) goto fb::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp.z bc_1
    bne __b2_from___b1
    jmp __b11
    // fb::@11
  __b11:
    // [117] (byte) bd#147 ← ++ (byte) bd#107 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [118] (byte) bd#236 ← (byte) bd#147 -- vbuz1=vbuz2 
    lda.z bd
    sta.z bd_1
    // [119] call fc 
    // [161] phi from fb::@11 to fc [phi:fb::@11->fc]
  fc_from___b11:
    // [161] phi (byte) bd#117 = (byte) bd#236 [phi:fb::@11->fc#0] -- register_copy 
    jsr fc
    // [120] phi from fb::@1 fb::@11 to fb::@2 [phi:fb::@1/fb::@11->fb::@2]
  __b2_from___b1:
  __b2_from___b11:
    // [120] phi (byte) bd#108 = (byte) bd#107 [phi:fb::@1/fb::@11->fb::@2#0] -- register_copy 
    jmp __b2
    // fb::@2
  __b2:
    // [121] if((byte) bc#113!=(byte) 2) goto fb::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z bc_1
    bne __b3_from___b2
    jmp __b12
    // fb::@12
  __b12:
    // [122] (byte) bd#148 ← ++ (byte) bd#108 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [123] (byte) bd#237 ← (byte) bd#148 -- vbuz1=vbuz2 
    lda.z bd
    sta.z bd_1
    // [124] call fc 
    // [161] phi from fb::@12 to fc [phi:fb::@12->fc]
  fc_from___b12:
    // [161] phi (byte) bd#117 = (byte) bd#237 [phi:fb::@12->fc#0] -- register_copy 
    jsr fc
    // [125] phi from fb::@12 fb::@2 to fb::@3 [phi:fb::@12/fb::@2->fb::@3]
  __b3_from___b12:
  __b3_from___b2:
    // [125] phi (byte) bd#109 = (byte) bd#148 [phi:fb::@12/fb::@2->fb::@3#0] -- register_copy 
    jmp __b3
    // fb::@3
  __b3:
    // [126] if((byte) bc#113!=(byte) 3) goto fb::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z bc_1
    bne __b4_from___b3
    jmp __b13
    // fb::@13
  __b13:
    // [127] (byte) bd#149 ← ++ (byte) bd#109 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [128] (byte) bd#238 ← (byte) bd#149 -- vbuz1=vbuz2 
    lda.z bd
    sta.z bd_1
    // [129] call fc 
    // [161] phi from fb::@13 to fc [phi:fb::@13->fc]
  fc_from___b13:
    // [161] phi (byte) bd#117 = (byte) bd#238 [phi:fb::@13->fc#0] -- register_copy 
    jsr fc
    // [130] phi from fb::@13 fb::@3 to fb::@4 [phi:fb::@13/fb::@3->fb::@4]
  __b4_from___b13:
  __b4_from___b3:
    // [130] phi (byte) bd#110 = (byte) bd#149 [phi:fb::@13/fb::@3->fb::@4#0] -- register_copy 
    jmp __b4
    // fb::@4
  __b4:
    // [131] if((byte) bc#113!=(byte) 4) goto fb::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z bc_1
    bne __b5_from___b4
    jmp __b14
    // fb::@14
  __b14:
    // [132] (byte) bd#150 ← ++ (byte) bd#110 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [133] (byte) bd#239 ← (byte) bd#150 -- vbuz1=vbuz2 
    lda.z bd
    sta.z bd_1
    // [134] call fc 
    // [161] phi from fb::@14 to fc [phi:fb::@14->fc]
  fc_from___b14:
    // [161] phi (byte) bd#117 = (byte) bd#239 [phi:fb::@14->fc#0] -- register_copy 
    jsr fc
    // [135] phi from fb::@14 fb::@4 to fb::@5 [phi:fb::@14/fb::@4->fb::@5]
  __b5_from___b14:
  __b5_from___b4:
    // [135] phi (byte) bd#111 = (byte) bd#150 [phi:fb::@14/fb::@4->fb::@5#0] -- register_copy 
    jmp __b5
    // fb::@5
  __b5:
    // [136] if((byte) bc#113!=(byte) 5) goto fb::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp.z bc_1
    bne __b6_from___b5
    jmp __b15
    // fb::@15
  __b15:
    // [137] (byte) bd#151 ← ++ (byte) bd#111 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [138] (byte) bd#240 ← (byte) bd#151 -- vbuz1=vbuz2 
    lda.z bd
    sta.z bd_1
    // [139] call fc 
    // [161] phi from fb::@15 to fc [phi:fb::@15->fc]
  fc_from___b15:
    // [161] phi (byte) bd#117 = (byte) bd#240 [phi:fb::@15->fc#0] -- register_copy 
    jsr fc
    // [140] phi from fb::@15 fb::@5 to fb::@6 [phi:fb::@15/fb::@5->fb::@6]
  __b6_from___b15:
  __b6_from___b5:
    // [140] phi (byte) bd#112 = (byte) bd#151 [phi:fb::@15/fb::@5->fb::@6#0] -- register_copy 
    jmp __b6
    // fb::@6
  __b6:
    // [141] if((byte) bc#113!=(byte) 6) goto fb::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z bc_1
    bne __b7_from___b6
    jmp __b16
    // fb::@16
  __b16:
    // [142] (byte) bd#152 ← ++ (byte) bd#112 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [143] (byte) bd#241 ← (byte) bd#152 -- vbuz1=vbuz2 
    lda.z bd
    sta.z bd_1
    // [144] call fc 
    // [161] phi from fb::@16 to fc [phi:fb::@16->fc]
  fc_from___b16:
    // [161] phi (byte) bd#117 = (byte) bd#241 [phi:fb::@16->fc#0] -- register_copy 
    jsr fc
    // [145] phi from fb::@16 fb::@6 to fb::@7 [phi:fb::@16/fb::@6->fb::@7]
  __b7_from___b16:
  __b7_from___b6:
    // [145] phi (byte) bd#113 = (byte) bd#152 [phi:fb::@16/fb::@6->fb::@7#0] -- register_copy 
    jmp __b7
    // fb::@7
  __b7:
    // [146] if((byte) bc#113!=(byte) 7) goto fb::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z bc_1
    bne __b8_from___b7
    jmp __b17
    // fb::@17
  __b17:
    // [147] (byte) bd#153 ← ++ (byte) bd#113 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [148] (byte) bd#242 ← (byte) bd#153 -- vbuz1=vbuz2 
    lda.z bd
    sta.z bd_1
    // [149] call fc 
    // [161] phi from fb::@17 to fc [phi:fb::@17->fc]
  fc_from___b17:
    // [161] phi (byte) bd#117 = (byte) bd#242 [phi:fb::@17->fc#0] -- register_copy 
    jsr fc
    // [150] phi from fb::@17 fb::@7 to fb::@8 [phi:fb::@17/fb::@7->fb::@8]
  __b8_from___b17:
  __b8_from___b7:
    // [150] phi (byte) bd#114 = (byte) bd#153 [phi:fb::@17/fb::@7->fb::@8#0] -- register_copy 
    jmp __b8
    // fb::@8
  __b8:
    // [151] if((byte) bc#113!=(byte) 8) goto fb::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z bc_1
    bne __b9_from___b8
    jmp __b18
    // fb::@18
  __b18:
    // [152] (byte) bd#154 ← ++ (byte) bd#114 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [153] (byte) bd#243 ← (byte) bd#154 -- vbuz1=vbuz2 
    lda.z bd
    sta.z bd_1
    // [154] call fc 
    // [161] phi from fb::@18 to fc [phi:fb::@18->fc]
  fc_from___b18:
    // [161] phi (byte) bd#117 = (byte) bd#243 [phi:fb::@18->fc#0] -- register_copy 
    jsr fc
    // [155] phi from fb::@18 fb::@8 to fb::@9 [phi:fb::@18/fb::@8->fb::@9]
  __b9_from___b18:
  __b9_from___b8:
    // [155] phi (byte) bd#116 = (byte) bd#154 [phi:fb::@18/fb::@8->fb::@9#0] -- register_copy 
    jmp __b9
    // fb::@9
  __b9:
    // [156] if((byte) bc#113!=(byte) 9) goto fb::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp.z bc_1
    bne __breturn_from___b9
    // [157] phi from fb::@9 to fb::@19 [phi:fb::@9->fb::@19]
  __b19_from___b9:
    jmp __b19
    // fb::@19
  __b19:
    // [158] call fc 
    // [161] phi from fb::@19 to fc [phi:fb::@19->fc]
  fc_from___b19:
    // [161] phi (byte) bd#117 = (byte) 0 [phi:fb::@19->fc#0] -- vbuz1=vbuc1 
    lda #0
    sta.z bd_1
    jsr fc
    // [159] phi from fb::@19 to fb::@return [phi:fb::@19->fb::@return]
  __breturn_from___b19:
    // [159] phi (byte) bd#35 = (byte) 0 [phi:fb::@19->fb::@return#0] -- vbuz1=vbuc1 
    lda #0
    sta.z bd
    jmp __breturn
    // [159] phi from fb::@9 to fb::@return [phi:fb::@9->fb::@return]
  __breturn_from___b9:
    // [159] phi (byte) bd#35 = (byte) bd#116 [phi:fb::@9->fb::@return#0] -- register_copy 
    jmp __breturn
    // fb::@return
  __breturn:
    // [160] return 
    rts
}
  // fc
fc: {
    // [162] if((byte) bd#117!=(byte) 0) goto fc::@1 -- vbuz1_neq_0_then_la1 
    lda.z bd_1
    cmp #0
    bne __b1
    // [163] phi from fc to fc::@10 [phi:fc->fc::@10]
  __b10_from_fc:
    jmp __b10
    // fc::@10
  __b10:
    jmp __b1
    // fc::@1
  __b1:
    // [164] if((byte) bd#117!=(byte) 1) goto fc::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp.z bd_1
    bne __b2
    // [165] phi from fc::@1 to fc::@11 [phi:fc::@1->fc::@11]
  __b11_from___b1:
    jmp __b11
    // fc::@11
  __b11:
    jmp __b2
    // fc::@2
  __b2:
    // [166] if((byte) bd#117!=(byte) 2) goto fc::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z bd_1
    bne __b3
    // [167] phi from fc::@2 to fc::@12 [phi:fc::@2->fc::@12]
  __b12_from___b2:
    jmp __b12
    // fc::@12
  __b12:
    jmp __b3
    // fc::@3
  __b3:
    // [168] if((byte) bd#117!=(byte) 3) goto fc::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z bd_1
    bne __b4
    // [169] phi from fc::@3 to fc::@13 [phi:fc::@3->fc::@13]
  __b13_from___b3:
    jmp __b13
    // fc::@13
  __b13:
    jmp __b4
    // fc::@4
  __b4:
    // [170] if((byte) bd#117!=(byte) 4) goto fc::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z bd_1
    bne __b5
    // [171] phi from fc::@4 to fc::@14 [phi:fc::@4->fc::@14]
  __b14_from___b4:
    jmp __b14
    // fc::@14
  __b14:
    jmp __b5
    // fc::@5
  __b5:
    // [172] if((byte) bd#117!=(byte) 5) goto fc::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp.z bd_1
    bne __b6
    // [173] phi from fc::@5 to fc::@15 [phi:fc::@5->fc::@15]
  __b15_from___b5:
    jmp __b15
    // fc::@15
  __b15:
    jmp __b6
    // fc::@6
  __b6:
    // [174] if((byte) bd#117!=(byte) 6) goto fc::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z bd_1
    bne __b7
    // [175] phi from fc::@6 to fc::@16 [phi:fc::@6->fc::@16]
  __b16_from___b6:
    jmp __b16
    // fc::@16
  __b16:
    jmp __b7
    // fc::@7
  __b7:
    // [176] if((byte) bd#117!=(byte) 7) goto fc::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z bd_1
    bne __b8
    // [177] phi from fc::@7 to fc::@17 [phi:fc::@7->fc::@17]
  __b17_from___b7:
    jmp __b17
    // fc::@17
  __b17:
    jmp __b8
    // fc::@8
  __b8:
    // [178] if((byte) bd#117!=(byte) 8) goto fc::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z bd_1
    bne __b9
    // [179] phi from fc::@8 to fc::@18 [phi:fc::@8->fc::@18]
  __b18_from___b8:
    jmp __b18
    // fc::@18
  __b18:
    jmp __b9
    // fc::@9
  __b9:
    // [180] if((byte) bd#117!=(byte) 9) goto fc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp.z bd_1
    bne __breturn
    // [181] phi from fc::@9 to fc::@19 [phi:fc::@9->fc::@19]
  __b19_from___b9:
    jmp __b19
    // fc::@19
  __b19:
    jmp __breturn
    // fc::@return
  __breturn:
    // [182] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ ba#17 ba#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ bb#50 bb#11 bb#25 bb#10 bb#24 bb#68 bb#23 bb#67 bb#22 bb#66 bb#21 bb#6 bb#20 bb#19 bb#18 bb#16 bb#13 bb#3 bb#4 bb#5 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ bb#27 bb#100 bb#101 bb#102 bb#103 bb#104 bb#105 bb#106 bb#107 bb#108 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ bc#83 bc#112 bc#47 bc#111 bc#46 bc#110 bc#45 bc#109 bc#44 bc#108 bc#43 bc#107 bc#42 bc#41 bc#40 bc#39 bc#71 bc#103 bc#102 bc#101 bc#100 bc#66 bc#65 bc#64 bc#63 bc#2 bc#13 bc#24 bc#104 bc#105 bc#106 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ bc#113 bc#172 bc#173 bc#174 bc#175 bc#176 bc#177 bc#178 bc#179 bc#180 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ bd#116 bd#154 bd#114 bd#153 bd#113 bd#152 bd#112 bd#151 bd#111 bd#150 bd#110 bd#149 bd#109 bd#108 bd#107 bd#106 bd#104 bd#103 bd#102 bd#101 bd#100 bd#141 bd#140 bd#139 bd#138 bd#137 bd#93 bd#136 bd#135 bd#134 bd#133 bd#132 bd#131 bd#130 bd#129 bd#2 bd#13 bd#24 bd#35 bd#146 bd#147 bd#148 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ bd#117 bd#235 bd#236 bd#237 bd#238 bd#239 bd#240 bd#241 bd#242 bd#243 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 2,930,335.77: zp[1]:7 [ bd#116 bd#154 bd#114 bd#153 bd#113 bd#152 bd#112 bd#151 bd#111 bd#150 bd#110 bd#149 bd#109 bd#108 bd#107 bd#106 bd#104 bd#103 bd#102 bd#101 bd#100 bd#141 bd#140 bd#139 bd#138 bd#137 bd#93 bd#136 bd#135 bd#134 bd#133 bd#132 bd#131 bd#130 bd#129 bd#2 bd#13 bd#24 bd#35 bd#146 bd#147 bd#148 ] 2,373,703.21: zp[1]:8 [ bd#117 bd#235 bd#236 bd#237 bd#238 bd#239 bd#240 bd#241 bd#242 bd#243 ] 291,989.1: zp[1]:5 [ bc#83 bc#112 bc#47 bc#111 bc#46 bc#110 bc#45 bc#109 bc#44 bc#108 bc#43 bc#107 bc#42 bc#41 bc#40 bc#39 bc#71 bc#103 bc#102 bc#101 bc#100 bc#66 bc#65 bc#64 bc#63 bc#2 bc#13 bc#24 bc#104 bc#105 bc#106 ] 203,714.07: zp[1]:6 [ bc#113 bc#172 bc#173 bc#174 bc#175 bc#176 bc#177 bc#178 bc#179 bc#180 ] 27,503: zp[1]:3 [ bb#50 bb#11 bb#25 bb#10 bb#24 bb#68 bb#23 bb#67 bb#22 bb#66 bb#21 bb#6 bb#20 bb#19 bb#18 bb#16 bb#13 bb#3 bb#4 bb#5 ] 20,387.98: zp[1]:4 [ bb#27 bb#100 bb#101 bb#102 bb#103 bb#104 bb#105 bb#106 bb#107 bb#108 ] 394.68: zp[1]:2 [ ba#17 ba#1 ] 
Uplift Scope [main] 
Uplift Scope [f0] 
Uplift Scope [fa] 
Uplift Scope [fb] 
Uplift Scope [fc] 

Uplifting [] best 1625 combination zp[1]:7 [ bd#116 bd#154 bd#114 bd#153 bd#113 bd#152 bd#112 bd#151 bd#111 bd#150 bd#110 bd#149 bd#109 bd#108 bd#107 bd#106 bd#104 bd#103 bd#102 bd#101 bd#100 bd#141 bd#140 bd#139 bd#138 bd#137 bd#93 bd#136 bd#135 bd#134 bd#133 bd#132 bd#131 bd#130 bd#129 bd#2 bd#13 bd#24 bd#35 bd#146 bd#147 bd#148 ] reg byte a [ bd#117 bd#235 bd#236 bd#237 bd#238 bd#239 bd#240 bd#241 bd#242 bd#243 ] reg byte x [ bc#83 bc#112 bc#47 bc#111 bc#46 bc#110 bc#45 bc#109 bc#44 bc#108 bc#43 bc#107 bc#42 bc#41 bc#40 bc#39 bc#71 bc#103 bc#102 bc#101 bc#100 bc#66 bc#65 bc#64 bc#63 bc#2 bc#13 bc#24 bc#104 bc#105 bc#106 ] zp[1]:6 [ bc#113 bc#172 bc#173 bc#174 bc#175 bc#176 bc#177 bc#178 bc#179 bc#180 ] zp[1]:3 [ bb#50 bb#11 bb#25 bb#10 bb#24 bb#68 bb#23 bb#67 bb#22 bb#66 bb#21 bb#6 bb#20 bb#19 bb#18 bb#16 bb#13 bb#3 bb#4 bb#5 ] zp[1]:4 [ bb#27 bb#100 bb#101 bb#102 bb#103 bb#104 bb#105 bb#106 bb#107 bb#108 ] zp[1]:2 [ ba#17 ba#1 ] 
Limited combination testing to 100 combinations of 16384 possible.
Uplifting [main] best 1625 combination 
Uplifting [f0] best 1625 combination 
Uplifting [fa] best 1625 combination 
Uplifting [fb] best 1625 combination 
Uplifting [fc] best 1625 combination 
Attempting to uplift remaining variables inzp[1]:7 [ bd#116 bd#154 bd#114 bd#153 bd#113 bd#152 bd#112 bd#151 bd#111 bd#150 bd#110 bd#149 bd#109 bd#108 bd#107 bd#106 bd#104 bd#103 bd#102 bd#101 bd#100 bd#141 bd#140 bd#139 bd#138 bd#137 bd#93 bd#136 bd#135 bd#134 bd#133 bd#132 bd#131 bd#130 bd#129 bd#2 bd#13 bd#24 bd#35 bd#146 bd#147 bd#148 ]
Uplifting [] best 1625 combination zp[1]:7 [ bd#116 bd#154 bd#114 bd#153 bd#113 bd#152 bd#112 bd#151 bd#111 bd#150 bd#110 bd#149 bd#109 bd#108 bd#107 bd#106 bd#104 bd#103 bd#102 bd#101 bd#100 bd#141 bd#140 bd#139 bd#138 bd#137 bd#93 bd#136 bd#135 bd#134 bd#133 bd#132 bd#131 bd#130 bd#129 bd#2 bd#13 bd#24 bd#35 bd#146 bd#147 bd#148 ] 
Attempting to uplift remaining variables inzp[1]:6 [ bc#113 bc#172 bc#173 bc#174 bc#175 bc#176 bc#177 bc#178 bc#179 bc#180 ]
Uplifting [] best 1601 combination reg byte y [ bc#113 bc#172 bc#173 bc#174 bc#175 bc#176 bc#177 bc#178 bc#179 bc#180 ] 
Attempting to uplift remaining variables inzp[1]:3 [ bb#50 bb#11 bb#25 bb#10 bb#24 bb#68 bb#23 bb#67 bb#22 bb#66 bb#21 bb#6 bb#20 bb#19 bb#18 bb#16 bb#13 bb#3 bb#4 bb#5 ]
Uplifting [] best 1601 combination zp[1]:3 [ bb#50 bb#11 bb#25 bb#10 bb#24 bb#68 bb#23 bb#67 bb#22 bb#66 bb#21 bb#6 bb#20 bb#19 bb#18 bb#16 bb#13 bb#3 bb#4 bb#5 ] 
Attempting to uplift remaining variables inzp[1]:4 [ bb#27 bb#100 bb#101 bb#102 bb#103 bb#104 bb#105 bb#106 bb#107 bb#108 ]
Uplifting [] best 1601 combination zp[1]:4 [ bb#27 bb#100 bb#101 bb#102 bb#103 bb#104 bb#105 bb#106 bb#107 bb#108 ] 
Attempting to uplift remaining variables inzp[1]:2 [ ba#17 ba#1 ]
Uplifting [] best 1601 combination zp[1]:2 [ ba#17 ba#1 ] 
Allocated (was zp[1]:7) zp[1]:5 [ bd#116 bd#154 bd#114 bd#153 bd#113 bd#152 bd#112 bd#151 bd#111 bd#150 bd#110 bd#149 bd#109 bd#108 bd#107 bd#106 bd#104 bd#103 bd#102 bd#101 bd#100 bd#141 bd#140 bd#139 bd#138 bd#137 bd#93 bd#136 bd#135 bd#134 bd#133 bd#132 bd#131 bd#130 bd#129 bd#2 bd#13 bd#24 bd#35 bd#146 bd#147 bd#148 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label ba = 2
  .label bd = 5
  .label bb = 3
  .label bb_1 = 4
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) ba#17 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ba
    // [5] phi (byte) bd#2 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z bd
    // [5] phi (byte) bc#2 = (byte) 0 [phi:main->main::@1#2] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (byte) bb#16 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z bb
    jmp __b1
    // main::@1
  __b1:
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [7] call f0 
    jsr f0
    jmp __b3
    // main::@3
  __b3:
    // [8] (byte) ba#1 ← ++ (byte) ba#17 -- vbuz1=_inc_vbuz1 
    inc.z ba
    // [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [5] phi (byte) ba#17 = (byte) ba#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [5] phi (byte) bd#2 = (byte) bd#13 [phi:main::@3->main::@1#1] -- register_copy 
    // [5] phi (byte) bc#2 = (byte) bc#13 [phi:main::@3->main::@1#2] -- register_copy 
    // [5] phi (byte) bb#16 = (byte) bb#13 [phi:main::@3->main::@1#3] -- register_copy 
    jmp __b1
}
  // f0
f0: {
    // [9] if((byte) ba#17!=(byte) 0) goto f0::@1 -- vbuz1_neq_0_then_la1 
    lda.z ba
    cmp #0
    bne __b1_from_f0
    jmp __b10
    // f0::@10
  __b10:
    // [10] (byte) bb#3 ← ++ (byte) bb#16 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [11] (byte) bb#100 ← (byte) bb#3 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // [12] call fa 
    // [59] phi from f0::@10 to fa [phi:f0::@10->fa]
  fa_from___b10:
    // [59] phi (byte) bd#137 = (byte) bd#2 [phi:f0::@10->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#2 [phi:f0::@10->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#100 [phi:f0::@10->fa#2] -- register_copy 
    jsr fa
    // [13] phi from f0 f0::@10 to f0::@1 [phi:f0/f0::@10->f0::@1]
  __b1_from_f0:
  __b1_from___b10:
    // [13] phi (byte) bd#129 = (byte) bd#2 [phi:f0/f0::@10->f0::@1#0] -- register_copy 
    // [13] phi (byte) bc#63 = (byte) bc#2 [phi:f0/f0::@10->f0::@1#1] -- register_copy 
    // [13] phi (byte) bb#18 = (byte) bb#16 [phi:f0/f0::@10->f0::@1#2] -- register_copy 
    jmp __b1
    // f0::@1
  __b1:
    // [14] if((byte) ba#17!=(byte) 1) goto f0::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp.z ba
    bne __b2_from___b1
    jmp __b11
    // f0::@11
  __b11:
    // [15] (byte) bb#4 ← ++ (byte) bb#18 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [16] (byte) bb#101 ← (byte) bb#4 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // [17] call fa 
    // [59] phi from f0::@11 to fa [phi:f0::@11->fa]
  fa_from___b11:
    // [59] phi (byte) bd#137 = (byte) bd#129 [phi:f0::@11->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#63 [phi:f0::@11->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#101 [phi:f0::@11->fa#2] -- register_copy 
    jsr fa
    // [18] phi from f0::@1 f0::@11 to f0::@2 [phi:f0::@1/f0::@11->f0::@2]
  __b2_from___b1:
  __b2_from___b11:
    // [18] phi (byte) bd#130 = (byte) bd#129 [phi:f0::@1/f0::@11->f0::@2#0] -- register_copy 
    // [18] phi (byte) bc#64 = (byte) bc#63 [phi:f0::@1/f0::@11->f0::@2#1] -- register_copy 
    // [18] phi (byte) bb#19 = (byte) bb#18 [phi:f0::@1/f0::@11->f0::@2#2] -- register_copy 
    jmp __b2
    // f0::@2
  __b2:
    // [19] if((byte) ba#17!=(byte) 2) goto f0::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z ba
    bne __b3_from___b2
    jmp __b12
    // f0::@12
  __b12:
    // [20] (byte) bb#5 ← ++ (byte) bb#19 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [21] (byte) bb#102 ← (byte) bb#5 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // [22] call fa 
    // [59] phi from f0::@12 to fa [phi:f0::@12->fa]
  fa_from___b12:
    // [59] phi (byte) bd#137 = (byte) bd#130 [phi:f0::@12->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#64 [phi:f0::@12->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#102 [phi:f0::@12->fa#2] -- register_copy 
    jsr fa
    // [23] phi from f0::@12 f0::@2 to f0::@3 [phi:f0::@12/f0::@2->f0::@3]
  __b3_from___b12:
  __b3_from___b2:
    // [23] phi (byte) bd#131 = (byte) bd#24 [phi:f0::@12/f0::@2->f0::@3#0] -- register_copy 
    // [23] phi (byte) bc#65 = (byte) bc#24 [phi:f0::@12/f0::@2->f0::@3#1] -- register_copy 
    // [23] phi (byte) bb#20 = (byte) bb#5 [phi:f0::@12/f0::@2->f0::@3#2] -- register_copy 
    jmp __b3
    // f0::@3
  __b3:
    // [24] if((byte) ba#17!=(byte) 3) goto f0::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z ba
    bne __b4_from___b3
    jmp __b13
    // f0::@13
  __b13:
    // [25] (byte) bb#6 ← ++ (byte) bb#20 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [26] (byte) bb#103 ← (byte) bb#6 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // [27] call fa 
    // [59] phi from f0::@13 to fa [phi:f0::@13->fa]
  fa_from___b13:
    // [59] phi (byte) bd#137 = (byte) bd#131 [phi:f0::@13->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#65 [phi:f0::@13->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#103 [phi:f0::@13->fa#2] -- register_copy 
    jsr fa
    // [28] phi from f0::@13 f0::@3 to f0::@4 [phi:f0::@13/f0::@3->f0::@4]
  __b4_from___b13:
  __b4_from___b3:
    // [28] phi (byte) bd#132 = (byte) bd#24 [phi:f0::@13/f0::@3->f0::@4#0] -- register_copy 
    // [28] phi (byte) bc#66 = (byte) bc#24 [phi:f0::@13/f0::@3->f0::@4#1] -- register_copy 
    // [28] phi (byte) bb#21 = (byte) bb#6 [phi:f0::@13/f0::@3->f0::@4#2] -- register_copy 
    jmp __b4
    // f0::@4
  __b4:
    // [29] if((byte) ba#17!=(byte) 4) goto f0::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z ba
    bne __b5_from___b4
    jmp __b14
    // f0::@14
  __b14:
    // [30] (byte) bb#66 ← ++ (byte) bb#21 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [31] (byte) bb#104 ← (byte) bb#66 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // [32] call fa 
    // [59] phi from f0::@14 to fa [phi:f0::@14->fa]
  fa_from___b14:
    // [59] phi (byte) bd#137 = (byte) bd#132 [phi:f0::@14->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#66 [phi:f0::@14->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#104 [phi:f0::@14->fa#2] -- register_copy 
    jsr fa
    // [33] phi from f0::@14 f0::@4 to f0::@5 [phi:f0::@14/f0::@4->f0::@5]
  __b5_from___b14:
  __b5_from___b4:
    // [33] phi (byte) bd#133 = (byte) bd#24 [phi:f0::@14/f0::@4->f0::@5#0] -- register_copy 
    // [33] phi (byte) bc#100 = (byte) bc#24 [phi:f0::@14/f0::@4->f0::@5#1] -- register_copy 
    // [33] phi (byte) bb#22 = (byte) bb#66 [phi:f0::@14/f0::@4->f0::@5#2] -- register_copy 
    jmp __b5
    // f0::@5
  __b5:
    // [34] if((byte) ba#17!=(byte) 5) goto f0::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp.z ba
    bne __b6_from___b5
    jmp __b15
    // f0::@15
  __b15:
    // [35] (byte) bb#67 ← ++ (byte) bb#22 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [36] (byte) bb#105 ← (byte) bb#67 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // [37] call fa 
    // [59] phi from f0::@15 to fa [phi:f0::@15->fa]
  fa_from___b15:
    // [59] phi (byte) bd#137 = (byte) bd#133 [phi:f0::@15->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#100 [phi:f0::@15->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#105 [phi:f0::@15->fa#2] -- register_copy 
    jsr fa
    // [38] phi from f0::@15 f0::@5 to f0::@6 [phi:f0::@15/f0::@5->f0::@6]
  __b6_from___b15:
  __b6_from___b5:
    // [38] phi (byte) bd#134 = (byte) bd#24 [phi:f0::@15/f0::@5->f0::@6#0] -- register_copy 
    // [38] phi (byte) bc#101 = (byte) bc#24 [phi:f0::@15/f0::@5->f0::@6#1] -- register_copy 
    // [38] phi (byte) bb#23 = (byte) bb#67 [phi:f0::@15/f0::@5->f0::@6#2] -- register_copy 
    jmp __b6
    // f0::@6
  __b6:
    // [39] if((byte) ba#17!=(byte) 6) goto f0::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z ba
    bne __b7_from___b6
    jmp __b16
    // f0::@16
  __b16:
    // [40] (byte) bb#68 ← ++ (byte) bb#23 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [41] (byte) bb#106 ← (byte) bb#68 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // [42] call fa 
    // [59] phi from f0::@16 to fa [phi:f0::@16->fa]
  fa_from___b16:
    // [59] phi (byte) bd#137 = (byte) bd#134 [phi:f0::@16->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#101 [phi:f0::@16->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#106 [phi:f0::@16->fa#2] -- register_copy 
    jsr fa
    // [43] phi from f0::@16 f0::@6 to f0::@7 [phi:f0::@16/f0::@6->f0::@7]
  __b7_from___b16:
  __b7_from___b6:
    // [43] phi (byte) bd#135 = (byte) bd#24 [phi:f0::@16/f0::@6->f0::@7#0] -- register_copy 
    // [43] phi (byte) bc#102 = (byte) bc#24 [phi:f0::@16/f0::@6->f0::@7#1] -- register_copy 
    // [43] phi (byte) bb#24 = (byte) bb#68 [phi:f0::@16/f0::@6->f0::@7#2] -- register_copy 
    jmp __b7
    // f0::@7
  __b7:
    // [44] if((byte) ba#17!=(byte) 7) goto f0::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z ba
    bne __b8_from___b7
    jmp __b17
    // f0::@17
  __b17:
    // [45] (byte) bb#10 ← ++ (byte) bb#24 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [46] (byte) bb#107 ← (byte) bb#10 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // [47] call fa 
    // [59] phi from f0::@17 to fa [phi:f0::@17->fa]
  fa_from___b17:
    // [59] phi (byte) bd#137 = (byte) bd#135 [phi:f0::@17->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#102 [phi:f0::@17->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#107 [phi:f0::@17->fa#2] -- register_copy 
    jsr fa
    // [48] phi from f0::@17 f0::@7 to f0::@8 [phi:f0::@17/f0::@7->f0::@8]
  __b8_from___b17:
  __b8_from___b7:
    // [48] phi (byte) bd#136 = (byte) bd#24 [phi:f0::@17/f0::@7->f0::@8#0] -- register_copy 
    // [48] phi (byte) bc#103 = (byte) bc#24 [phi:f0::@17/f0::@7->f0::@8#1] -- register_copy 
    // [48] phi (byte) bb#25 = (byte) bb#10 [phi:f0::@17/f0::@7->f0::@8#2] -- register_copy 
    jmp __b8
    // f0::@8
  __b8:
    // [49] if((byte) ba#17!=(byte) 8) goto f0::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z ba
    bne __b9_from___b8
    jmp __b18
    // f0::@18
  __b18:
    // [50] (byte) bb#11 ← ++ (byte) bb#25 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [51] (byte) bb#108 ← (byte) bb#11 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // [52] call fa 
    // [59] phi from f0::@18 to fa [phi:f0::@18->fa]
  fa_from___b18:
    // [59] phi (byte) bd#137 = (byte) bd#136 [phi:f0::@18->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#103 [phi:f0::@18->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#108 [phi:f0::@18->fa#2] -- register_copy 
    jsr fa
    // [53] phi from f0::@18 f0::@8 to f0::@9 [phi:f0::@18/f0::@8->f0::@9]
  __b9_from___b18:
  __b9_from___b8:
    // [53] phi (byte) bd#93 = (byte) bd#24 [phi:f0::@18/f0::@8->f0::@9#0] -- register_copy 
    // [53] phi (byte) bc#71 = (byte) bc#24 [phi:f0::@18/f0::@8->f0::@9#1] -- register_copy 
    // [53] phi (byte) bb#50 = (byte) bb#11 [phi:f0::@18/f0::@8->f0::@9#2] -- register_copy 
    jmp __b9
    // f0::@9
  __b9:
    // [54] if((byte) ba#17!=(byte) 9) goto f0::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp.z ba
    bne __breturn_from___b9
    // [55] phi from f0::@9 to f0::@19 [phi:f0::@9->f0::@19]
  __b19_from___b9:
    jmp __b19
    // f0::@19
  __b19:
    // [56] call fa 
    // [59] phi from f0::@19 to fa [phi:f0::@19->fa]
  fa_from___b19:
    // [59] phi (byte) bd#137 = (byte) bd#93 [phi:f0::@19->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#71 [phi:f0::@19->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) 0 [phi:f0::@19->fa#2] -- vbuz1=vbuc1 
    lda #0
    sta.z bb_1
    jsr fa
    // [57] phi from f0::@19 to f0::@return [phi:f0::@19->f0::@return]
  __breturn_from___b19:
    // [57] phi (byte) bd#13 = (byte) bd#24 [phi:f0::@19->f0::@return#0] -- register_copy 
    // [57] phi (byte) bc#13 = (byte) bc#24 [phi:f0::@19->f0::@return#1] -- register_copy 
    // [57] phi (byte) bb#13 = (byte) 0 [phi:f0::@19->f0::@return#2] -- vbuz1=vbuc1 
    lda #0
    sta.z bb
    jmp __breturn
    // [57] phi from f0::@9 to f0::@return [phi:f0::@9->f0::@return]
  __breturn_from___b9:
    // [57] phi (byte) bd#13 = (byte) bd#93 [phi:f0::@9->f0::@return#0] -- register_copy 
    // [57] phi (byte) bc#13 = (byte) bc#71 [phi:f0::@9->f0::@return#1] -- register_copy 
    // [57] phi (byte) bb#13 = (byte) bb#50 [phi:f0::@9->f0::@return#2] -- register_copy 
    jmp __breturn
    // f0::@return
  __breturn:
    // [58] return 
    rts
}
  // fa
fa: {
    // [60] if((byte) bb#27!=(byte) 0) goto fa::@1 -- vbuz1_neq_0_then_la1 
    lda.z bb_1
    cmp #0
    bne __b1_from_fa
    jmp __b10
    // fa::@10
  __b10:
    // [61] (byte) bc#104 ← ++ (byte) bc#39 -- vbuxx=_inc_vbuxx 
    inx
    // [62] (byte) bc#172 ← (byte) bc#104 -- vbuyy=vbuxx 
    txa
    tay
    // [63] call fb 
    // [110] phi from fa::@10 to fb [phi:fa::@10->fb]
  fb_from___b10:
    // [110] phi (byte) bd#106 = (byte) bd#137 [phi:fa::@10->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#172 [phi:fa::@10->fb#1] -- register_copy 
    jsr fb
    // [64] phi from fa fa::@10 to fa::@1 [phi:fa/fa::@10->fa::@1]
  __b1_from_fa:
  __b1_from___b10:
    // [64] phi (byte) bd#138 = (byte) bd#137 [phi:fa/fa::@10->fa::@1#0] -- register_copy 
    // [64] phi (byte) bc#40 = (byte) bc#39 [phi:fa/fa::@10->fa::@1#1] -- register_copy 
    jmp __b1
    // fa::@1
  __b1:
    // [65] if((byte) bb#27!=(byte) 1) goto fa::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp.z bb_1
    bne __b2_from___b1
    jmp __b11
    // fa::@11
  __b11:
    // [66] (byte) bc#105 ← ++ (byte) bc#40 -- vbuxx=_inc_vbuxx 
    inx
    // [67] (byte) bc#173 ← (byte) bc#105 -- vbuyy=vbuxx 
    txa
    tay
    // [68] call fb 
    // [110] phi from fa::@11 to fb [phi:fa::@11->fb]
  fb_from___b11:
    // [110] phi (byte) bd#106 = (byte) bd#138 [phi:fa::@11->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#173 [phi:fa::@11->fb#1] -- register_copy 
    jsr fb
    // [69] phi from fa::@1 fa::@11 to fa::@2 [phi:fa::@1/fa::@11->fa::@2]
  __b2_from___b1:
  __b2_from___b11:
    // [69] phi (byte) bd#139 = (byte) bd#138 [phi:fa::@1/fa::@11->fa::@2#0] -- register_copy 
    // [69] phi (byte) bc#41 = (byte) bc#40 [phi:fa::@1/fa::@11->fa::@2#1] -- register_copy 
    jmp __b2
    // fa::@2
  __b2:
    // [70] if((byte) bb#27!=(byte) 2) goto fa::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z bb_1
    bne __b3_from___b2
    jmp __b12
    // fa::@12
  __b12:
    // [71] (byte) bc#106 ← ++ (byte) bc#41 -- vbuxx=_inc_vbuxx 
    inx
    // [72] (byte) bc#174 ← (byte) bc#106 -- vbuyy=vbuxx 
    txa
    tay
    // [73] call fb 
    // [110] phi from fa::@12 to fb [phi:fa::@12->fb]
  fb_from___b12:
    // [110] phi (byte) bd#106 = (byte) bd#139 [phi:fa::@12->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#174 [phi:fa::@12->fb#1] -- register_copy 
    jsr fb
    // [74] phi from fa::@12 fa::@2 to fa::@3 [phi:fa::@12/fa::@2->fa::@3]
  __b3_from___b12:
  __b3_from___b2:
    // [74] phi (byte) bd#140 = (byte) bd#35 [phi:fa::@12/fa::@2->fa::@3#0] -- register_copy 
    // [74] phi (byte) bc#42 = (byte) bc#106 [phi:fa::@12/fa::@2->fa::@3#1] -- register_copy 
    jmp __b3
    // fa::@3
  __b3:
    // [75] if((byte) bb#27!=(byte) 3) goto fa::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z bb_1
    bne __b4_from___b3
    jmp __b13
    // fa::@13
  __b13:
    // [76] (byte) bc#107 ← ++ (byte) bc#42 -- vbuxx=_inc_vbuxx 
    inx
    // [77] (byte) bc#175 ← (byte) bc#107 -- vbuyy=vbuxx 
    txa
    tay
    // [78] call fb 
    // [110] phi from fa::@13 to fb [phi:fa::@13->fb]
  fb_from___b13:
    // [110] phi (byte) bd#106 = (byte) bd#140 [phi:fa::@13->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#175 [phi:fa::@13->fb#1] -- register_copy 
    jsr fb
    // [79] phi from fa::@13 fa::@3 to fa::@4 [phi:fa::@13/fa::@3->fa::@4]
  __b4_from___b13:
  __b4_from___b3:
    // [79] phi (byte) bd#141 = (byte) bd#35 [phi:fa::@13/fa::@3->fa::@4#0] -- register_copy 
    // [79] phi (byte) bc#43 = (byte) bc#107 [phi:fa::@13/fa::@3->fa::@4#1] -- register_copy 
    jmp __b4
    // fa::@4
  __b4:
    // [80] if((byte) bb#27!=(byte) 4) goto fa::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z bb_1
    bne __b5_from___b4
    jmp __b14
    // fa::@14
  __b14:
    // [81] (byte) bc#108 ← ++ (byte) bc#43 -- vbuxx=_inc_vbuxx 
    inx
    // [82] (byte) bc#176 ← (byte) bc#108 -- vbuyy=vbuxx 
    txa
    tay
    // [83] call fb 
    // [110] phi from fa::@14 to fb [phi:fa::@14->fb]
  fb_from___b14:
    // [110] phi (byte) bd#106 = (byte) bd#141 [phi:fa::@14->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#176 [phi:fa::@14->fb#1] -- register_copy 
    jsr fb
    // [84] phi from fa::@14 fa::@4 to fa::@5 [phi:fa::@14/fa::@4->fa::@5]
  __b5_from___b14:
  __b5_from___b4:
    // [84] phi (byte) bd#100 = (byte) bd#35 [phi:fa::@14/fa::@4->fa::@5#0] -- register_copy 
    // [84] phi (byte) bc#44 = (byte) bc#108 [phi:fa::@14/fa::@4->fa::@5#1] -- register_copy 
    jmp __b5
    // fa::@5
  __b5:
    // [85] if((byte) bb#27!=(byte) 5) goto fa::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp.z bb_1
    bne __b6_from___b5
    jmp __b15
    // fa::@15
  __b15:
    // [86] (byte) bc#109 ← ++ (byte) bc#44 -- vbuxx=_inc_vbuxx 
    inx
    // [87] (byte) bc#177 ← (byte) bc#109 -- vbuyy=vbuxx 
    txa
    tay
    // [88] call fb 
    // [110] phi from fa::@15 to fb [phi:fa::@15->fb]
  fb_from___b15:
    // [110] phi (byte) bd#106 = (byte) bd#100 [phi:fa::@15->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#177 [phi:fa::@15->fb#1] -- register_copy 
    jsr fb
    // [89] phi from fa::@15 fa::@5 to fa::@6 [phi:fa::@15/fa::@5->fa::@6]
  __b6_from___b15:
  __b6_from___b5:
    // [89] phi (byte) bd#101 = (byte) bd#35 [phi:fa::@15/fa::@5->fa::@6#0] -- register_copy 
    // [89] phi (byte) bc#45 = (byte) bc#109 [phi:fa::@15/fa::@5->fa::@6#1] -- register_copy 
    jmp __b6
    // fa::@6
  __b6:
    // [90] if((byte) bb#27!=(byte) 6) goto fa::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z bb_1
    bne __b7_from___b6
    jmp __b16
    // fa::@16
  __b16:
    // [91] (byte) bc#110 ← ++ (byte) bc#45 -- vbuxx=_inc_vbuxx 
    inx
    // [92] (byte) bc#178 ← (byte) bc#110 -- vbuyy=vbuxx 
    txa
    tay
    // [93] call fb 
    // [110] phi from fa::@16 to fb [phi:fa::@16->fb]
  fb_from___b16:
    // [110] phi (byte) bd#106 = (byte) bd#101 [phi:fa::@16->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#178 [phi:fa::@16->fb#1] -- register_copy 
    jsr fb
    // [94] phi from fa::@16 fa::@6 to fa::@7 [phi:fa::@16/fa::@6->fa::@7]
  __b7_from___b16:
  __b7_from___b6:
    // [94] phi (byte) bd#102 = (byte) bd#35 [phi:fa::@16/fa::@6->fa::@7#0] -- register_copy 
    // [94] phi (byte) bc#46 = (byte) bc#110 [phi:fa::@16/fa::@6->fa::@7#1] -- register_copy 
    jmp __b7
    // fa::@7
  __b7:
    // [95] if((byte) bb#27!=(byte) 7) goto fa::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z bb_1
    bne __b8_from___b7
    jmp __b17
    // fa::@17
  __b17:
    // [96] (byte) bc#111 ← ++ (byte) bc#46 -- vbuxx=_inc_vbuxx 
    inx
    // [97] (byte) bc#179 ← (byte) bc#111 -- vbuyy=vbuxx 
    txa
    tay
    // [98] call fb 
    // [110] phi from fa::@17 to fb [phi:fa::@17->fb]
  fb_from___b17:
    // [110] phi (byte) bd#106 = (byte) bd#102 [phi:fa::@17->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#179 [phi:fa::@17->fb#1] -- register_copy 
    jsr fb
    // [99] phi from fa::@17 fa::@7 to fa::@8 [phi:fa::@17/fa::@7->fa::@8]
  __b8_from___b17:
  __b8_from___b7:
    // [99] phi (byte) bd#103 = (byte) bd#35 [phi:fa::@17/fa::@7->fa::@8#0] -- register_copy 
    // [99] phi (byte) bc#47 = (byte) bc#111 [phi:fa::@17/fa::@7->fa::@8#1] -- register_copy 
    jmp __b8
    // fa::@8
  __b8:
    // [100] if((byte) bb#27!=(byte) 8) goto fa::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z bb_1
    bne __b9_from___b8
    jmp __b18
    // fa::@18
  __b18:
    // [101] (byte) bc#112 ← ++ (byte) bc#47 -- vbuxx=_inc_vbuxx 
    inx
    // [102] (byte) bc#180 ← (byte) bc#112 -- vbuyy=vbuxx 
    txa
    tay
    // [103] call fb 
    // [110] phi from fa::@18 to fb [phi:fa::@18->fb]
  fb_from___b18:
    // [110] phi (byte) bd#106 = (byte) bd#103 [phi:fa::@18->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#180 [phi:fa::@18->fb#1] -- register_copy 
    jsr fb
    // [104] phi from fa::@18 fa::@8 to fa::@9 [phi:fa::@18/fa::@8->fa::@9]
  __b9_from___b18:
  __b9_from___b8:
    // [104] phi (byte) bd#104 = (byte) bd#35 [phi:fa::@18/fa::@8->fa::@9#0] -- register_copy 
    // [104] phi (byte) bc#83 = (byte) bc#112 [phi:fa::@18/fa::@8->fa::@9#1] -- register_copy 
    jmp __b9
    // fa::@9
  __b9:
    // [105] if((byte) bb#27!=(byte) 9) goto fa::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp.z bb_1
    bne __breturn_from___b9
    // [106] phi from fa::@9 to fa::@19 [phi:fa::@9->fa::@19]
  __b19_from___b9:
    jmp __b19
    // fa::@19
  __b19:
    // [107] call fb 
    // [110] phi from fa::@19 to fb [phi:fa::@19->fb]
  fb_from___b19:
    // [110] phi (byte) bd#106 = (byte) bd#104 [phi:fa::@19->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) 0 [phi:fa::@19->fb#1] -- vbuyy=vbuc1 
    ldy #0
    jsr fb
    // [108] phi from fa::@19 to fa::@return [phi:fa::@19->fa::@return]
  __breturn_from___b19:
    // [108] phi (byte) bd#24 = (byte) bd#35 [phi:fa::@19->fa::@return#0] -- register_copy 
    // [108] phi (byte) bc#24 = (byte) 0 [phi:fa::@19->fa::@return#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __breturn
    // [108] phi from fa::@9 to fa::@return [phi:fa::@9->fa::@return]
  __breturn_from___b9:
    // [108] phi (byte) bd#24 = (byte) bd#104 [phi:fa::@9->fa::@return#0] -- register_copy 
    // [108] phi (byte) bc#24 = (byte) bc#83 [phi:fa::@9->fa::@return#1] -- register_copy 
    jmp __breturn
    // fa::@return
  __breturn:
    // [109] return 
    rts
}
  // fb
fb: {
    // [111] if((byte) bc#113!=(byte) 0) goto fb::@1 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b1_from_fb
    jmp __b10
    // fb::@10
  __b10:
    // [112] (byte) bd#146 ← ++ (byte) bd#106 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [113] (byte) bd#235 ← (byte) bd#146 -- vbuaa=vbuz1 
    lda.z bd
    // [114] call fc 
    // [161] phi from fb::@10 to fc [phi:fb::@10->fc]
  fc_from___b10:
    // [161] phi (byte) bd#117 = (byte) bd#235 [phi:fb::@10->fc#0] -- register_copy 
    jsr fc
    // [115] phi from fb fb::@10 to fb::@1 [phi:fb/fb::@10->fb::@1]
  __b1_from_fb:
  __b1_from___b10:
    // [115] phi (byte) bd#107 = (byte) bd#106 [phi:fb/fb::@10->fb::@1#0] -- register_copy 
    jmp __b1
    // fb::@1
  __b1:
    // [116] if((byte) bc#113!=(byte) 1) goto fb::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #1
    bne __b2_from___b1
    jmp __b11
    // fb::@11
  __b11:
    // [117] (byte) bd#147 ← ++ (byte) bd#107 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [118] (byte) bd#236 ← (byte) bd#147 -- vbuaa=vbuz1 
    lda.z bd
    // [119] call fc 
    // [161] phi from fb::@11 to fc [phi:fb::@11->fc]
  fc_from___b11:
    // [161] phi (byte) bd#117 = (byte) bd#236 [phi:fb::@11->fc#0] -- register_copy 
    jsr fc
    // [120] phi from fb::@1 fb::@11 to fb::@2 [phi:fb::@1/fb::@11->fb::@2]
  __b2_from___b1:
  __b2_from___b11:
    // [120] phi (byte) bd#108 = (byte) bd#107 [phi:fb::@1/fb::@11->fb::@2#0] -- register_copy 
    jmp __b2
    // fb::@2
  __b2:
    // [121] if((byte) bc#113!=(byte) 2) goto fb::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #2
    bne __b3_from___b2
    jmp __b12
    // fb::@12
  __b12:
    // [122] (byte) bd#148 ← ++ (byte) bd#108 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [123] (byte) bd#237 ← (byte) bd#148 -- vbuaa=vbuz1 
    lda.z bd
    // [124] call fc 
    // [161] phi from fb::@12 to fc [phi:fb::@12->fc]
  fc_from___b12:
    // [161] phi (byte) bd#117 = (byte) bd#237 [phi:fb::@12->fc#0] -- register_copy 
    jsr fc
    // [125] phi from fb::@12 fb::@2 to fb::@3 [phi:fb::@12/fb::@2->fb::@3]
  __b3_from___b12:
  __b3_from___b2:
    // [125] phi (byte) bd#109 = (byte) bd#148 [phi:fb::@12/fb::@2->fb::@3#0] -- register_copy 
    jmp __b3
    // fb::@3
  __b3:
    // [126] if((byte) bc#113!=(byte) 3) goto fb::@4 -- vbuyy_neq_vbuc1_then_la1 
    cpy #3
    bne __b4_from___b3
    jmp __b13
    // fb::@13
  __b13:
    // [127] (byte) bd#149 ← ++ (byte) bd#109 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [128] (byte) bd#238 ← (byte) bd#149 -- vbuaa=vbuz1 
    lda.z bd
    // [129] call fc 
    // [161] phi from fb::@13 to fc [phi:fb::@13->fc]
  fc_from___b13:
    // [161] phi (byte) bd#117 = (byte) bd#238 [phi:fb::@13->fc#0] -- register_copy 
    jsr fc
    // [130] phi from fb::@13 fb::@3 to fb::@4 [phi:fb::@13/fb::@3->fb::@4]
  __b4_from___b13:
  __b4_from___b3:
    // [130] phi (byte) bd#110 = (byte) bd#149 [phi:fb::@13/fb::@3->fb::@4#0] -- register_copy 
    jmp __b4
    // fb::@4
  __b4:
    // [131] if((byte) bc#113!=(byte) 4) goto fb::@5 -- vbuyy_neq_vbuc1_then_la1 
    cpy #4
    bne __b5_from___b4
    jmp __b14
    // fb::@14
  __b14:
    // [132] (byte) bd#150 ← ++ (byte) bd#110 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [133] (byte) bd#239 ← (byte) bd#150 -- vbuaa=vbuz1 
    lda.z bd
    // [134] call fc 
    // [161] phi from fb::@14 to fc [phi:fb::@14->fc]
  fc_from___b14:
    // [161] phi (byte) bd#117 = (byte) bd#239 [phi:fb::@14->fc#0] -- register_copy 
    jsr fc
    // [135] phi from fb::@14 fb::@4 to fb::@5 [phi:fb::@14/fb::@4->fb::@5]
  __b5_from___b14:
  __b5_from___b4:
    // [135] phi (byte) bd#111 = (byte) bd#150 [phi:fb::@14/fb::@4->fb::@5#0] -- register_copy 
    jmp __b5
    // fb::@5
  __b5:
    // [136] if((byte) bc#113!=(byte) 5) goto fb::@6 -- vbuyy_neq_vbuc1_then_la1 
    cpy #5
    bne __b6_from___b5
    jmp __b15
    // fb::@15
  __b15:
    // [137] (byte) bd#151 ← ++ (byte) bd#111 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [138] (byte) bd#240 ← (byte) bd#151 -- vbuaa=vbuz1 
    lda.z bd
    // [139] call fc 
    // [161] phi from fb::@15 to fc [phi:fb::@15->fc]
  fc_from___b15:
    // [161] phi (byte) bd#117 = (byte) bd#240 [phi:fb::@15->fc#0] -- register_copy 
    jsr fc
    // [140] phi from fb::@15 fb::@5 to fb::@6 [phi:fb::@15/fb::@5->fb::@6]
  __b6_from___b15:
  __b6_from___b5:
    // [140] phi (byte) bd#112 = (byte) bd#151 [phi:fb::@15/fb::@5->fb::@6#0] -- register_copy 
    jmp __b6
    // fb::@6
  __b6:
    // [141] if((byte) bc#113!=(byte) 6) goto fb::@7 -- vbuyy_neq_vbuc1_then_la1 
    cpy #6
    bne __b7_from___b6
    jmp __b16
    // fb::@16
  __b16:
    // [142] (byte) bd#152 ← ++ (byte) bd#112 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [143] (byte) bd#241 ← (byte) bd#152 -- vbuaa=vbuz1 
    lda.z bd
    // [144] call fc 
    // [161] phi from fb::@16 to fc [phi:fb::@16->fc]
  fc_from___b16:
    // [161] phi (byte) bd#117 = (byte) bd#241 [phi:fb::@16->fc#0] -- register_copy 
    jsr fc
    // [145] phi from fb::@16 fb::@6 to fb::@7 [phi:fb::@16/fb::@6->fb::@7]
  __b7_from___b16:
  __b7_from___b6:
    // [145] phi (byte) bd#113 = (byte) bd#152 [phi:fb::@16/fb::@6->fb::@7#0] -- register_copy 
    jmp __b7
    // fb::@7
  __b7:
    // [146] if((byte) bc#113!=(byte) 7) goto fb::@8 -- vbuyy_neq_vbuc1_then_la1 
    cpy #7
    bne __b8_from___b7
    jmp __b17
    // fb::@17
  __b17:
    // [147] (byte) bd#153 ← ++ (byte) bd#113 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [148] (byte) bd#242 ← (byte) bd#153 -- vbuaa=vbuz1 
    lda.z bd
    // [149] call fc 
    // [161] phi from fb::@17 to fc [phi:fb::@17->fc]
  fc_from___b17:
    // [161] phi (byte) bd#117 = (byte) bd#242 [phi:fb::@17->fc#0] -- register_copy 
    jsr fc
    // [150] phi from fb::@17 fb::@7 to fb::@8 [phi:fb::@17/fb::@7->fb::@8]
  __b8_from___b17:
  __b8_from___b7:
    // [150] phi (byte) bd#114 = (byte) bd#153 [phi:fb::@17/fb::@7->fb::@8#0] -- register_copy 
    jmp __b8
    // fb::@8
  __b8:
    // [151] if((byte) bc#113!=(byte) 8) goto fb::@9 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b9_from___b8
    jmp __b18
    // fb::@18
  __b18:
    // [152] (byte) bd#154 ← ++ (byte) bd#114 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [153] (byte) bd#243 ← (byte) bd#154 -- vbuaa=vbuz1 
    lda.z bd
    // [154] call fc 
    // [161] phi from fb::@18 to fc [phi:fb::@18->fc]
  fc_from___b18:
    // [161] phi (byte) bd#117 = (byte) bd#243 [phi:fb::@18->fc#0] -- register_copy 
    jsr fc
    // [155] phi from fb::@18 fb::@8 to fb::@9 [phi:fb::@18/fb::@8->fb::@9]
  __b9_from___b18:
  __b9_from___b8:
    // [155] phi (byte) bd#116 = (byte) bd#154 [phi:fb::@18/fb::@8->fb::@9#0] -- register_copy 
    jmp __b9
    // fb::@9
  __b9:
    // [156] if((byte) bc#113!=(byte) 9) goto fb::@return -- vbuyy_neq_vbuc1_then_la1 
    cpy #9
    bne __breturn_from___b9
    // [157] phi from fb::@9 to fb::@19 [phi:fb::@9->fb::@19]
  __b19_from___b9:
    jmp __b19
    // fb::@19
  __b19:
    // [158] call fc 
    // [161] phi from fb::@19 to fc [phi:fb::@19->fc]
  fc_from___b19:
    // [161] phi (byte) bd#117 = (byte) 0 [phi:fb::@19->fc#0] -- vbuaa=vbuc1 
    lda #0
    jsr fc
    // [159] phi from fb::@19 to fb::@return [phi:fb::@19->fb::@return]
  __breturn_from___b19:
    // [159] phi (byte) bd#35 = (byte) 0 [phi:fb::@19->fb::@return#0] -- vbuz1=vbuc1 
    lda #0
    sta.z bd
    jmp __breturn
    // [159] phi from fb::@9 to fb::@return [phi:fb::@9->fb::@return]
  __breturn_from___b9:
    // [159] phi (byte) bd#35 = (byte) bd#116 [phi:fb::@9->fb::@return#0] -- register_copy 
    jmp __breturn
    // fb::@return
  __breturn:
    // [160] return 
    rts
}
  // fc
fc: {
    // [162] if((byte) bd#117!=(byte) 0) goto fc::@1 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b1
    // [163] phi from fc to fc::@10 [phi:fc->fc::@10]
  __b10_from_fc:
    jmp __b10
    // fc::@10
  __b10:
    jmp __b1
    // fc::@1
  __b1:
    // [164] if((byte) bd#117!=(byte) 1) goto fc::@2 -- vbuaa_neq_vbuc1_then_la1 
    cmp #1
    bne __b2
    // [165] phi from fc::@1 to fc::@11 [phi:fc::@1->fc::@11]
  __b11_from___b1:
    jmp __b11
    // fc::@11
  __b11:
    jmp __b2
    // fc::@2
  __b2:
    // [166] if((byte) bd#117!=(byte) 2) goto fc::@3 -- vbuaa_neq_vbuc1_then_la1 
    cmp #2
    bne __b3
    // [167] phi from fc::@2 to fc::@12 [phi:fc::@2->fc::@12]
  __b12_from___b2:
    jmp __b12
    // fc::@12
  __b12:
    jmp __b3
    // fc::@3
  __b3:
    // [168] if((byte) bd#117!=(byte) 3) goto fc::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #3
    bne __b4
    // [169] phi from fc::@3 to fc::@13 [phi:fc::@3->fc::@13]
  __b13_from___b3:
    jmp __b13
    // fc::@13
  __b13:
    jmp __b4
    // fc::@4
  __b4:
    // [170] if((byte) bd#117!=(byte) 4) goto fc::@5 -- vbuaa_neq_vbuc1_then_la1 
    cmp #4
    bne __b5
    // [171] phi from fc::@4 to fc::@14 [phi:fc::@4->fc::@14]
  __b14_from___b4:
    jmp __b14
    // fc::@14
  __b14:
    jmp __b5
    // fc::@5
  __b5:
    // [172] if((byte) bd#117!=(byte) 5) goto fc::@6 -- vbuaa_neq_vbuc1_then_la1 
    cmp #5
    bne __b6
    // [173] phi from fc::@5 to fc::@15 [phi:fc::@5->fc::@15]
  __b15_from___b5:
    jmp __b15
    // fc::@15
  __b15:
    jmp __b6
    // fc::@6
  __b6:
    // [174] if((byte) bd#117!=(byte) 6) goto fc::@7 -- vbuaa_neq_vbuc1_then_la1 
    cmp #6
    bne __b7
    // [175] phi from fc::@6 to fc::@16 [phi:fc::@6->fc::@16]
  __b16_from___b6:
    jmp __b16
    // fc::@16
  __b16:
    jmp __b7
    // fc::@7
  __b7:
    // [176] if((byte) bd#117!=(byte) 7) goto fc::@8 -- vbuaa_neq_vbuc1_then_la1 
    cmp #7
    bne __b8
    // [177] phi from fc::@7 to fc::@17 [phi:fc::@7->fc::@17]
  __b17_from___b7:
    jmp __b17
    // fc::@17
  __b17:
    jmp __b8
    // fc::@8
  __b8:
    // [178] if((byte) bd#117!=(byte) 8) goto fc::@9 -- vbuaa_neq_vbuc1_then_la1 
    cmp #8
    bne __b9
    // [179] phi from fc::@8 to fc::@18 [phi:fc::@8->fc::@18]
  __b18_from___b8:
    jmp __b18
    // fc::@18
  __b18:
    jmp __b9
    // fc::@9
  __b9:
    // [180] if((byte) bd#117!=(byte) 9) goto fc::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #9
    bne __breturn
    // [181] phi from fc::@9 to fc::@19 [phi:fc::@9->fc::@19]
  __b19_from___b9:
    jmp __b19
    // fc::@19
  __b19:
    jmp __breturn
    // fc::@return
  __breturn:
    // [182] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b10
Removing instruction jmp __b1
Removing instruction jmp __b11
Removing instruction jmp __b2
Removing instruction jmp __b12
Removing instruction jmp __b3
Removing instruction jmp __b13
Removing instruction jmp __b4
Removing instruction jmp __b14
Removing instruction jmp __b5
Removing instruction jmp __b15
Removing instruction jmp __b6
Removing instruction jmp __b16
Removing instruction jmp __b7
Removing instruction jmp __b17
Removing instruction jmp __b8
Removing instruction jmp __b18
Removing instruction jmp __b9
Removing instruction jmp __b19
Removing instruction jmp __breturn
Removing instruction jmp __b10
Removing instruction jmp __b1
Removing instruction jmp __b11
Removing instruction jmp __b2
Removing instruction jmp __b12
Removing instruction jmp __b3
Removing instruction jmp __b13
Removing instruction jmp __b4
Removing instruction jmp __b14
Removing instruction jmp __b5
Removing instruction jmp __b15
Removing instruction jmp __b6
Removing instruction jmp __b16
Removing instruction jmp __b7
Removing instruction jmp __b17
Removing instruction jmp __b8
Removing instruction jmp __b18
Removing instruction jmp __b9
Removing instruction jmp __b19
Removing instruction jmp __breturn
Removing instruction jmp __b10
Removing instruction jmp __b1
Removing instruction jmp __b11
Removing instruction jmp __b2
Removing instruction jmp __b12
Removing instruction jmp __b3
Removing instruction jmp __b13
Removing instruction jmp __b4
Removing instruction jmp __b14
Removing instruction jmp __b5
Removing instruction jmp __b15
Removing instruction jmp __b6
Removing instruction jmp __b16
Removing instruction jmp __b7
Removing instruction jmp __b17
Removing instruction jmp __b8
Removing instruction jmp __b18
Removing instruction jmp __b9
Removing instruction jmp __b19
Removing instruction jmp __breturn
Removing instruction jmp __b10
Removing instruction jmp __b1
Removing instruction jmp __b11
Removing instruction jmp __b2
Removing instruction jmp __b12
Removing instruction jmp __b3
Removing instruction jmp __b13
Removing instruction jmp __b4
Removing instruction jmp __b14
Removing instruction jmp __b5
Removing instruction jmp __b15
Removing instruction jmp __b6
Removing instruction jmp __b16
Removing instruction jmp __b7
Removing instruction jmp __b17
Removing instruction jmp __b8
Removing instruction jmp __b18
Removing instruction jmp __b9
Removing instruction jmp __b19
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Replacing instruction ldx #0 with TAX
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1 with __b2
Replacing label __b1_from_f0 with __b1
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b4_from___b3 with __b4
Replacing label __b5_from___b4 with __b5
Replacing label __b6_from___b5 with __b6
Replacing label __b7_from___b6 with __b7
Replacing label __b8_from___b7 with __b8
Replacing label __b9_from___b8 with __b9
Replacing label __breturn_from___b9 with __breturn
Replacing label __b1_from_fa with __b1
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b4_from___b3 with __b4
Replacing label __b5_from___b4 with __b5
Replacing label __b6_from___b5 with __b6
Replacing label __b7_from___b6 with __b7
Replacing label __b8_from___b7 with __b8
Replacing label __b9_from___b8 with __b9
Replacing label __breturn_from___b9 with __breturn
Replacing label __b1_from_fb with __b1
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b4_from___b3 with __b4
Replacing label __b5_from___b4 with __b5
Replacing label __b6_from___b5 with __b6
Replacing label __b7_from___b6 with __b7
Replacing label __b8_from___b7 with __b8
Replacing label __b9_from___b8 with __b9
Replacing label __breturn_from___b9 with __breturn
Replacing label __breturn with __b19
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1:
Removing instruction __b2_from___b1:
Removing instruction __b1_from_f0:
Removing instruction __b1_from___b10:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b11:
Removing instruction __b3_from___b12:
Removing instruction __b3_from___b2:
Removing instruction __b4_from___b13:
Removing instruction __b4_from___b3:
Removing instruction __b5_from___b14:
Removing instruction __b5_from___b4:
Removing instruction __b6_from___b15:
Removing instruction __b6_from___b5:
Removing instruction __b7_from___b16:
Removing instruction __b7_from___b6:
Removing instruction __b8_from___b17:
Removing instruction __b8_from___b7:
Removing instruction __b9_from___b18:
Removing instruction __b9_from___b8:
Removing instruction __b19_from___b9:
Removing instruction fa_from___b19:
Removing instruction __breturn_from___b9:
Removing instruction __b1_from_fa:
Removing instruction __b1_from___b10:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b11:
Removing instruction __b3_from___b12:
Removing instruction __b3_from___b2:
Removing instruction __b4_from___b13:
Removing instruction __b4_from___b3:
Removing instruction __b5_from___b14:
Removing instruction __b5_from___b4:
Removing instruction __b6_from___b15:
Removing instruction __b6_from___b5:
Removing instruction __b7_from___b16:
Removing instruction __b7_from___b6:
Removing instruction __b8_from___b17:
Removing instruction __b8_from___b7:
Removing instruction __b9_from___b18:
Removing instruction __b9_from___b8:
Removing instruction __b19_from___b9:
Removing instruction fb_from___b19:
Removing instruction __breturn_from___b9:
Removing instruction __b1_from_fb:
Removing instruction __b1_from___b10:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b11:
Removing instruction __b3_from___b12:
Removing instruction __b3_from___b2:
Removing instruction __b4_from___b13:
Removing instruction __b4_from___b3:
Removing instruction __b5_from___b14:
Removing instruction __b5_from___b4:
Removing instruction __b6_from___b15:
Removing instruction __b6_from___b5:
Removing instruction __b7_from___b16:
Removing instruction __b7_from___b6:
Removing instruction __b8_from___b17:
Removing instruction __b8_from___b7:
Removing instruction __b9_from___b18:
Removing instruction __b9_from___b8:
Removing instruction __b19_from___b9:
Removing instruction fc_from___b19:
Removing instruction __breturn_from___b9:
Removing instruction __b10_from_fc:
Removing instruction __b10:
Removing instruction __b11_from___b1:
Removing instruction __b11:
Removing instruction __b12_from___b2:
Removing instruction __b12:
Removing instruction __b13_from___b3:
Removing instruction __b13:
Removing instruction __b14_from___b4:
Removing instruction __b14:
Removing instruction __b15_from___b5:
Removing instruction __b15:
Removing instruction __b16_from___b6:
Removing instruction __b16:
Removing instruction __b17_from___b7:
Removing instruction __b17:
Removing instruction __b18_from___b8:
Removing instruction __b18:
Removing instruction __b19_from___b9:
Removing instruction __breturn:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b10:
Removing instruction fa_from___b10:
Removing instruction __b11:
Removing instruction fa_from___b11:
Removing instruction __b12:
Removing instruction fa_from___b12:
Removing instruction __b13:
Removing instruction fa_from___b13:
Removing instruction __b14:
Removing instruction fa_from___b14:
Removing instruction __b15:
Removing instruction fa_from___b15:
Removing instruction __b16:
Removing instruction fa_from___b16:
Removing instruction __b17:
Removing instruction fa_from___b17:
Removing instruction __b18:
Removing instruction fa_from___b18:
Removing instruction __b19:
Removing instruction __breturn_from___b19:
Removing instruction __b10:
Removing instruction fb_from___b10:
Removing instruction __b11:
Removing instruction fb_from___b11:
Removing instruction __b12:
Removing instruction fb_from___b12:
Removing instruction __b13:
Removing instruction fb_from___b13:
Removing instruction __b14:
Removing instruction fb_from___b14:
Removing instruction __b15:
Removing instruction fb_from___b15:
Removing instruction __b16:
Removing instruction fb_from___b16:
Removing instruction __b17:
Removing instruction fb_from___b17:
Removing instruction __b18:
Removing instruction fb_from___b18:
Removing instruction __b19:
Removing instruction __breturn_from___b19:
Removing instruction __b10:
Removing instruction fc_from___b10:
Removing instruction __b11:
Removing instruction fc_from___b11:
Removing instruction __b12:
Removing instruction fc_from___b12:
Removing instruction __b13:
Removing instruction fc_from___b13:
Removing instruction __b14:
Removing instruction fc_from___b14:
Removing instruction __b15:
Removing instruction fc_from___b15:
Removing instruction __b16:
Removing instruction fc_from___b16:
Removing instruction __b17:
Removing instruction fc_from___b17:
Removing instruction __b18:
Removing instruction fc_from___b18:
Removing instruction __b19:
Removing instruction __breturn_from___b19:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction bne __b1
Removing instruction bne __b2
Removing instruction bne __b3
Removing instruction bne __b4
Removing instruction bne __b5
Removing instruction bne __b6
Removing instruction bne __b7
Removing instruction bne __b8
Removing instruction bne __b9
Removing instruction bne __b19
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __bbegin:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b19:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte) ba
(byte) ba#1 ba zp[1]:2 202.0
(byte) ba#17 ba zp[1]:2 192.67924528301884
(byte) bb
(byte) bb#10 bb zp[1]:3 1001.0
(byte) bb#100 bb_1 zp[1]:4 2002.0
(byte) bb#101 bb_1 zp[1]:4 2002.0
(byte) bb#102 bb_1 zp[1]:4 2002.0
(byte) bb#103 bb_1 zp[1]:4 2002.0
(byte) bb#104 bb_1 zp[1]:4 2002.0
(byte) bb#105 bb_1 zp[1]:4 2002.0
(byte) bb#106 bb_1 zp[1]:4 2002.0
(byte) bb#107 bb_1 zp[1]:4 2002.0
(byte) bb#108 bb_1 zp[1]:4 2002.0
(byte) bb#11 bb zp[1]:3 1001.0
(byte) bb#13 bb zp[1]:3 275.5
(byte) bb#16 bb zp[1]:3 701.0
(byte) bb#18 bb zp[1]:3 2002.0
(byte) bb#19 bb zp[1]:3 2002.0
(byte) bb#20 bb zp[1]:3 2002.0
(byte) bb#21 bb zp[1]:3 2002.0
(byte) bb#22 bb zp[1]:3 2002.0
(byte) bb#23 bb zp[1]:3 2002.0
(byte) bb#24 bb zp[1]:3 2002.0
(byte) bb#25 bb zp[1]:3 2002.0
(byte) bb#27 bb_1 zp[1]:4 2369.978260869566
(byte) bb#3 bb zp[1]:3 1001.0
(byte) bb#4 bb zp[1]:3 1001.0
(byte) bb#5 bb zp[1]:3 1001.0
(byte) bb#50 bb zp[1]:3 1501.5
(byte) bb#6 bb zp[1]:3 1001.0
(byte) bb#66 bb zp[1]:3 1001.0
(byte) bb#67 bb zp[1]:3 1001.0
(byte) bb#68 bb zp[1]:3 1001.0
(byte) bc
(byte) bc#100 reg byte x 1001.0
(byte) bc#101 reg byte x 1001.0
(byte) bc#102 reg byte x 1001.0
(byte) bc#103 reg byte x 1001.0
(byte) bc#104 reg byte x 10001.0
(byte) bc#105 reg byte x 10001.0
(byte) bc#106 reg byte x 10001.0
(byte) bc#107 reg byte x 10001.0
(byte) bc#108 reg byte x 10001.0
(byte) bc#109 reg byte x 10001.0
(byte) bc#110 reg byte x 10001.0
(byte) bc#111 reg byte x 10001.0
(byte) bc#112 reg byte x 10001.0
(byte) bc#113 reg byte y 23696.065217391308
(byte) bc#13 reg byte x 525.75
(byte) bc#172 reg byte y 20002.0
(byte) bc#173 reg byte y 20002.0
(byte) bc#174 reg byte y 20002.0
(byte) bc#175 reg byte y 20002.0
(byte) bc#176 reg byte y 20002.0
(byte) bc#177 reg byte y 20002.0
(byte) bc#178 reg byte y 20002.0
(byte) bc#179 reg byte y 20002.0
(byte) bc#180 reg byte y 20002.0
(byte) bc#2 reg byte x 420.59999999999997
(byte) bc#24 reg byte x 1667.5833333333333
(byte) bc#39 reg byte x 15006.0
(byte) bc#40 reg byte x 20002.0
(byte) bc#41 reg byte x 20002.0
(byte) bc#42 reg byte x 20002.0
(byte) bc#43 reg byte x 20002.0
(byte) bc#44 reg byte x 20002.0
(byte) bc#45 reg byte x 20002.0
(byte) bc#46 reg byte x 20002.0
(byte) bc#47 reg byte x 20002.0
(byte) bc#63 reg byte x 1001.0
(byte) bc#64 reg byte x 1001.0
(byte) bc#65 reg byte x 1001.0
(byte) bc#66 reg byte x 1001.0
(byte) bc#71 reg byte x 1334.6666666666667
(byte) bc#83 reg byte x 15001.5
(byte) bd
(byte) bd#100 bd zp[1]:5 10001.0
(byte) bd#101 bd zp[1]:5 10001.0
(byte) bd#102 bd zp[1]:5 10001.0
(byte) bd#103 bd zp[1]:5 10001.0
(byte) bd#104 bd zp[1]:5 13334.666666666666
(byte) bd#106 bd zp[1]:5 150006.0
(byte) bd#107 bd zp[1]:5 200002.0
(byte) bd#108 bd zp[1]:5 200002.0
(byte) bd#109 bd zp[1]:5 200002.0
(byte) bd#110 bd zp[1]:5 200002.0
(byte) bd#111 bd zp[1]:5 200002.0
(byte) bd#112 bd zp[1]:5 200002.0
(byte) bd#113 bd zp[1]:5 200002.0
(byte) bd#114 bd zp[1]:5 200002.0
(byte) bd#116 bd zp[1]:5 150001.5
(byte) bd#117 reg byte a 573685.2105263157
(byte) bd#129 bd zp[1]:5 1001.0
(byte) bd#13 bd zp[1]:5 525.75
(byte) bd#130 bd zp[1]:5 1001.0
(byte) bd#131 bd zp[1]:5 1001.0
(byte) bd#132 bd zp[1]:5 1001.0
(byte) bd#133 bd zp[1]:5 1001.0
(byte) bd#134 bd zp[1]:5 1001.0
(byte) bd#135 bd zp[1]:5 1001.0
(byte) bd#136 bd zp[1]:5 1001.0
(byte) bd#137 bd zp[1]:5 7503.0
(byte) bd#138 bd zp[1]:5 10001.0
(byte) bd#139 bd zp[1]:5 10001.0
(byte) bd#140 bd zp[1]:5 10001.0
(byte) bd#141 bd zp[1]:5 10001.0
(byte) bd#146 bd zp[1]:5 100001.0
(byte) bd#147 bd zp[1]:5 100001.0
(byte) bd#148 bd zp[1]:5 100001.0
(byte) bd#149 bd zp[1]:5 100001.0
(byte) bd#150 bd zp[1]:5 100001.0
(byte) bd#151 bd zp[1]:5 100001.0
(byte) bd#152 bd zp[1]:5 100001.0
(byte) bd#153 bd zp[1]:5 100001.0
(byte) bd#154 bd zp[1]:5 100001.0
(byte) bd#2 bd zp[1]:5 420.59999999999997
(byte) bd#235 reg byte a 200002.0
(byte) bd#236 reg byte a 200002.0
(byte) bd#237 reg byte a 200002.0
(byte) bd#238 reg byte a 200002.0
(byte) bd#239 reg byte a 200002.0
(byte) bd#24 bd zp[1]:5 2501.0
(byte) bd#240 reg byte a 200002.0
(byte) bd#241 reg byte a 200002.0
(byte) bd#242 reg byte a 200002.0
(byte) bd#243 reg byte a 200002.0
(byte) bd#35 bd zp[1]:5 16667.583333333336
(byte) bd#93 bd zp[1]:5 1334.6666666666667
(void()) f0()
(label) f0::@1
(label) f0::@10
(label) f0::@11
(label) f0::@12
(label) f0::@13
(label) f0::@14
(label) f0::@15
(label) f0::@16
(label) f0::@17
(label) f0::@18
(label) f0::@19
(label) f0::@2
(label) f0::@3
(label) f0::@4
(label) f0::@5
(label) f0::@6
(label) f0::@7
(label) f0::@8
(label) f0::@9
(label) f0::@return
(void()) fa()
(label) fa::@1
(label) fa::@10
(label) fa::@11
(label) fa::@12
(label) fa::@13
(label) fa::@14
(label) fa::@15
(label) fa::@16
(label) fa::@17
(label) fa::@18
(label) fa::@19
(label) fa::@2
(label) fa::@3
(label) fa::@4
(label) fa::@5
(label) fa::@6
(label) fa::@7
(label) fa::@8
(label) fa::@9
(label) fa::@return
(void()) fb()
(label) fb::@1
(label) fb::@10
(label) fb::@11
(label) fb::@12
(label) fb::@13
(label) fb::@14
(label) fb::@15
(label) fb::@16
(label) fb::@17
(label) fb::@18
(label) fb::@19
(label) fb::@2
(label) fb::@3
(label) fb::@4
(label) fb::@5
(label) fb::@6
(label) fb::@7
(label) fb::@8
(label) fb::@9
(label) fb::@return
(void()) fc()
(label) fc::@1
(label) fc::@10
(label) fc::@11
(label) fc::@12
(label) fc::@13
(label) fc::@14
(label) fc::@15
(label) fc::@16
(label) fc::@17
(label) fc::@18
(label) fc::@19
(label) fc::@2
(label) fc::@3
(label) fc::@4
(label) fc::@5
(label) fc::@6
(label) fc::@7
(label) fc::@8
(label) fc::@9
(label) fc::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3

zp[1]:2 [ ba#17 ba#1 ]
zp[1]:3 [ bb#50 bb#11 bb#25 bb#10 bb#24 bb#68 bb#23 bb#67 bb#22 bb#66 bb#21 bb#6 bb#20 bb#19 bb#18 bb#16 bb#13 bb#3 bb#4 bb#5 ]
zp[1]:4 [ bb#27 bb#100 bb#101 bb#102 bb#103 bb#104 bb#105 bb#106 bb#107 bb#108 ]
reg byte x [ bc#83 bc#112 bc#47 bc#111 bc#46 bc#110 bc#45 bc#109 bc#44 bc#108 bc#43 bc#107 bc#42 bc#41 bc#40 bc#39 bc#71 bc#103 bc#102 bc#101 bc#100 bc#66 bc#65 bc#64 bc#63 bc#2 bc#13 bc#24 bc#104 bc#105 bc#106 ]
reg byte y [ bc#113 bc#172 bc#173 bc#174 bc#175 bc#176 bc#177 bc#178 bc#179 bc#180 ]
zp[1]:5 [ bd#116 bd#154 bd#114 bd#153 bd#113 bd#152 bd#112 bd#151 bd#111 bd#150 bd#110 bd#149 bd#109 bd#108 bd#107 bd#106 bd#104 bd#103 bd#102 bd#101 bd#100 bd#141 bd#140 bd#139 bd#138 bd#137 bd#93 bd#136 bd#135 bd#134 bd#133 bd#132 bd#131 bd#130 bd#129 bd#2 bd#13 bd#24 bd#35 bd#146 bd#147 bd#148 ]
reg byte a [ bd#117 bd#235 bd#236 bd#237 bd#238 bd#239 bd#240 bd#241 bd#242 bd#243 ]


FINAL ASSEMBLER
Score: 938

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label ba = 2
  .label bd = 5
  .label bb = 3
  .label bb_1 = 4
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) ba#17 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ba
    // [5] phi (byte) bd#2 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    sta.z bd
    // [5] phi (byte) bc#2 = (byte) 0 [phi:main->main::@1#2] -- vbuxx=vbuc1 
    tax
    // [5] phi (byte) bb#16 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    sta.z bb
    // main::@1
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
  __b2:
    // f0()
    // [7] call f0 
    jsr f0
    // main::@3
    // ba++;
    // [8] (byte) ba#1 ← ++ (byte) ba#17 -- vbuz1=_inc_vbuz1 
    inc.z ba
    // [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [5] phi (byte) ba#17 = (byte) ba#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [5] phi (byte) bd#2 = (byte) bd#13 [phi:main::@3->main::@1#1] -- register_copy 
    // [5] phi (byte) bc#2 = (byte) bc#13 [phi:main::@3->main::@1#2] -- register_copy 
    // [5] phi (byte) bb#16 = (byte) bb#13 [phi:main::@3->main::@1#3] -- register_copy 
    jmp __b2
}
  // f0
f0: {
    // if(ba==0)
    // [9] if((byte) ba#17!=(byte) 0) goto f0::@1 -- vbuz1_neq_0_then_la1 
    lda.z ba
    cmp #0
    bne __b1
    // f0::@10
    // bb++;
    // [10] (byte) bb#3 ← ++ (byte) bb#16 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [11] (byte) bb#100 ← (byte) bb#3 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // fa()
    // [12] call fa 
    // [59] phi from f0::@10 to fa [phi:f0::@10->fa]
    // [59] phi (byte) bd#137 = (byte) bd#2 [phi:f0::@10->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#2 [phi:f0::@10->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#100 [phi:f0::@10->fa#2] -- register_copy 
    jsr fa
    // [13] phi from f0 f0::@10 to f0::@1 [phi:f0/f0::@10->f0::@1]
    // [13] phi (byte) bd#129 = (byte) bd#2 [phi:f0/f0::@10->f0::@1#0] -- register_copy 
    // [13] phi (byte) bc#63 = (byte) bc#2 [phi:f0/f0::@10->f0::@1#1] -- register_copy 
    // [13] phi (byte) bb#18 = (byte) bb#16 [phi:f0/f0::@10->f0::@1#2] -- register_copy 
    // f0::@1
  __b1:
    // if(ba==1)
    // [14] if((byte) ba#17!=(byte) 1) goto f0::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp.z ba
    bne __b2
    // f0::@11
    // bb++;
    // [15] (byte) bb#4 ← ++ (byte) bb#18 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [16] (byte) bb#101 ← (byte) bb#4 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // fa()
    // [17] call fa 
    // [59] phi from f0::@11 to fa [phi:f0::@11->fa]
    // [59] phi (byte) bd#137 = (byte) bd#129 [phi:f0::@11->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#63 [phi:f0::@11->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#101 [phi:f0::@11->fa#2] -- register_copy 
    jsr fa
    // [18] phi from f0::@1 f0::@11 to f0::@2 [phi:f0::@1/f0::@11->f0::@2]
    // [18] phi (byte) bd#130 = (byte) bd#129 [phi:f0::@1/f0::@11->f0::@2#0] -- register_copy 
    // [18] phi (byte) bc#64 = (byte) bc#63 [phi:f0::@1/f0::@11->f0::@2#1] -- register_copy 
    // [18] phi (byte) bb#19 = (byte) bb#18 [phi:f0::@1/f0::@11->f0::@2#2] -- register_copy 
    // f0::@2
  __b2:
    // if(ba==2)
    // [19] if((byte) ba#17!=(byte) 2) goto f0::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z ba
    bne __b3
    // f0::@12
    // bb++;
    // [20] (byte) bb#5 ← ++ (byte) bb#19 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [21] (byte) bb#102 ← (byte) bb#5 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // fa()
    // [22] call fa 
    // [59] phi from f0::@12 to fa [phi:f0::@12->fa]
    // [59] phi (byte) bd#137 = (byte) bd#130 [phi:f0::@12->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#64 [phi:f0::@12->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#102 [phi:f0::@12->fa#2] -- register_copy 
    jsr fa
    // [23] phi from f0::@12 f0::@2 to f0::@3 [phi:f0::@12/f0::@2->f0::@3]
    // [23] phi (byte) bd#131 = (byte) bd#24 [phi:f0::@12/f0::@2->f0::@3#0] -- register_copy 
    // [23] phi (byte) bc#65 = (byte) bc#24 [phi:f0::@12/f0::@2->f0::@3#1] -- register_copy 
    // [23] phi (byte) bb#20 = (byte) bb#5 [phi:f0::@12/f0::@2->f0::@3#2] -- register_copy 
    // f0::@3
  __b3:
    // if(ba==3)
    // [24] if((byte) ba#17!=(byte) 3) goto f0::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z ba
    bne __b4
    // f0::@13
    // bb++;
    // [25] (byte) bb#6 ← ++ (byte) bb#20 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [26] (byte) bb#103 ← (byte) bb#6 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // fa()
    // [27] call fa 
    // [59] phi from f0::@13 to fa [phi:f0::@13->fa]
    // [59] phi (byte) bd#137 = (byte) bd#131 [phi:f0::@13->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#65 [phi:f0::@13->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#103 [phi:f0::@13->fa#2] -- register_copy 
    jsr fa
    // [28] phi from f0::@13 f0::@3 to f0::@4 [phi:f0::@13/f0::@3->f0::@4]
    // [28] phi (byte) bd#132 = (byte) bd#24 [phi:f0::@13/f0::@3->f0::@4#0] -- register_copy 
    // [28] phi (byte) bc#66 = (byte) bc#24 [phi:f0::@13/f0::@3->f0::@4#1] -- register_copy 
    // [28] phi (byte) bb#21 = (byte) bb#6 [phi:f0::@13/f0::@3->f0::@4#2] -- register_copy 
    // f0::@4
  __b4:
    // if(ba==4)
    // [29] if((byte) ba#17!=(byte) 4) goto f0::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z ba
    bne __b5
    // f0::@14
    // bb++;
    // [30] (byte) bb#66 ← ++ (byte) bb#21 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [31] (byte) bb#104 ← (byte) bb#66 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // fa()
    // [32] call fa 
    // [59] phi from f0::@14 to fa [phi:f0::@14->fa]
    // [59] phi (byte) bd#137 = (byte) bd#132 [phi:f0::@14->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#66 [phi:f0::@14->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#104 [phi:f0::@14->fa#2] -- register_copy 
    jsr fa
    // [33] phi from f0::@14 f0::@4 to f0::@5 [phi:f0::@14/f0::@4->f0::@5]
    // [33] phi (byte) bd#133 = (byte) bd#24 [phi:f0::@14/f0::@4->f0::@5#0] -- register_copy 
    // [33] phi (byte) bc#100 = (byte) bc#24 [phi:f0::@14/f0::@4->f0::@5#1] -- register_copy 
    // [33] phi (byte) bb#22 = (byte) bb#66 [phi:f0::@14/f0::@4->f0::@5#2] -- register_copy 
    // f0::@5
  __b5:
    // if(ba==5)
    // [34] if((byte) ba#17!=(byte) 5) goto f0::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp.z ba
    bne __b6
    // f0::@15
    // bb++;
    // [35] (byte) bb#67 ← ++ (byte) bb#22 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [36] (byte) bb#105 ← (byte) bb#67 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // fa()
    // [37] call fa 
    // [59] phi from f0::@15 to fa [phi:f0::@15->fa]
    // [59] phi (byte) bd#137 = (byte) bd#133 [phi:f0::@15->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#100 [phi:f0::@15->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#105 [phi:f0::@15->fa#2] -- register_copy 
    jsr fa
    // [38] phi from f0::@15 f0::@5 to f0::@6 [phi:f0::@15/f0::@5->f0::@6]
    // [38] phi (byte) bd#134 = (byte) bd#24 [phi:f0::@15/f0::@5->f0::@6#0] -- register_copy 
    // [38] phi (byte) bc#101 = (byte) bc#24 [phi:f0::@15/f0::@5->f0::@6#1] -- register_copy 
    // [38] phi (byte) bb#23 = (byte) bb#67 [phi:f0::@15/f0::@5->f0::@6#2] -- register_copy 
    // f0::@6
  __b6:
    // if(ba==6)
    // [39] if((byte) ba#17!=(byte) 6) goto f0::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z ba
    bne __b7
    // f0::@16
    // bb++;
    // [40] (byte) bb#68 ← ++ (byte) bb#23 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [41] (byte) bb#106 ← (byte) bb#68 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // fa()
    // [42] call fa 
    // [59] phi from f0::@16 to fa [phi:f0::@16->fa]
    // [59] phi (byte) bd#137 = (byte) bd#134 [phi:f0::@16->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#101 [phi:f0::@16->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#106 [phi:f0::@16->fa#2] -- register_copy 
    jsr fa
    // [43] phi from f0::@16 f0::@6 to f0::@7 [phi:f0::@16/f0::@6->f0::@7]
    // [43] phi (byte) bd#135 = (byte) bd#24 [phi:f0::@16/f0::@6->f0::@7#0] -- register_copy 
    // [43] phi (byte) bc#102 = (byte) bc#24 [phi:f0::@16/f0::@6->f0::@7#1] -- register_copy 
    // [43] phi (byte) bb#24 = (byte) bb#68 [phi:f0::@16/f0::@6->f0::@7#2] -- register_copy 
    // f0::@7
  __b7:
    // if(ba==7)
    // [44] if((byte) ba#17!=(byte) 7) goto f0::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z ba
    bne __b8
    // f0::@17
    // bb++;
    // [45] (byte) bb#10 ← ++ (byte) bb#24 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [46] (byte) bb#107 ← (byte) bb#10 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // fa()
    // [47] call fa 
    // [59] phi from f0::@17 to fa [phi:f0::@17->fa]
    // [59] phi (byte) bd#137 = (byte) bd#135 [phi:f0::@17->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#102 [phi:f0::@17->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#107 [phi:f0::@17->fa#2] -- register_copy 
    jsr fa
    // [48] phi from f0::@17 f0::@7 to f0::@8 [phi:f0::@17/f0::@7->f0::@8]
    // [48] phi (byte) bd#136 = (byte) bd#24 [phi:f0::@17/f0::@7->f0::@8#0] -- register_copy 
    // [48] phi (byte) bc#103 = (byte) bc#24 [phi:f0::@17/f0::@7->f0::@8#1] -- register_copy 
    // [48] phi (byte) bb#25 = (byte) bb#10 [phi:f0::@17/f0::@7->f0::@8#2] -- register_copy 
    // f0::@8
  __b8:
    // if(ba==8)
    // [49] if((byte) ba#17!=(byte) 8) goto f0::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z ba
    bne __b9
    // f0::@18
    // bb++;
    // [50] (byte) bb#11 ← ++ (byte) bb#25 -- vbuz1=_inc_vbuz1 
    inc.z bb
    // [51] (byte) bb#108 ← (byte) bb#11 -- vbuz1=vbuz2 
    lda.z bb
    sta.z bb_1
    // fa()
    // [52] call fa 
    // [59] phi from f0::@18 to fa [phi:f0::@18->fa]
    // [59] phi (byte) bd#137 = (byte) bd#136 [phi:f0::@18->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#103 [phi:f0::@18->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) bb#108 [phi:f0::@18->fa#2] -- register_copy 
    jsr fa
    // [53] phi from f0::@18 f0::@8 to f0::@9 [phi:f0::@18/f0::@8->f0::@9]
    // [53] phi (byte) bd#93 = (byte) bd#24 [phi:f0::@18/f0::@8->f0::@9#0] -- register_copy 
    // [53] phi (byte) bc#71 = (byte) bc#24 [phi:f0::@18/f0::@8->f0::@9#1] -- register_copy 
    // [53] phi (byte) bb#50 = (byte) bb#11 [phi:f0::@18/f0::@8->f0::@9#2] -- register_copy 
    // f0::@9
  __b9:
    // if(ba==9)
    // [54] if((byte) ba#17!=(byte) 9) goto f0::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp.z ba
    bne __breturn
    // [55] phi from f0::@9 to f0::@19 [phi:f0::@9->f0::@19]
    // f0::@19
    // fa()
    // [56] call fa 
    // [59] phi from f0::@19 to fa [phi:f0::@19->fa]
    // [59] phi (byte) bd#137 = (byte) bd#93 [phi:f0::@19->fa#0] -- register_copy 
    // [59] phi (byte) bc#39 = (byte) bc#71 [phi:f0::@19->fa#1] -- register_copy 
    // [59] phi (byte) bb#27 = (byte) 0 [phi:f0::@19->fa#2] -- vbuz1=vbuc1 
    lda #0
    sta.z bb_1
    jsr fa
    // [57] phi from f0::@19 to f0::@return [phi:f0::@19->f0::@return]
    // [57] phi (byte) bd#13 = (byte) bd#24 [phi:f0::@19->f0::@return#0] -- register_copy 
    // [57] phi (byte) bc#13 = (byte) bc#24 [phi:f0::@19->f0::@return#1] -- register_copy 
    // [57] phi (byte) bb#13 = (byte) 0 [phi:f0::@19->f0::@return#2] -- vbuz1=vbuc1 
    lda #0
    sta.z bb
    rts
    // [57] phi from f0::@9 to f0::@return [phi:f0::@9->f0::@return]
    // [57] phi (byte) bd#13 = (byte) bd#93 [phi:f0::@9->f0::@return#0] -- register_copy 
    // [57] phi (byte) bc#13 = (byte) bc#71 [phi:f0::@9->f0::@return#1] -- register_copy 
    // [57] phi (byte) bb#13 = (byte) bb#50 [phi:f0::@9->f0::@return#2] -- register_copy 
    // f0::@return
  __breturn:
    // }
    // [58] return 
    rts
}
  // fa
fa: {
    // if(bb==0)
    // [60] if((byte) bb#27!=(byte) 0) goto fa::@1 -- vbuz1_neq_0_then_la1 
    lda.z bb_1
    cmp #0
    bne __b1
    // fa::@10
    // bc++;
    // [61] (byte) bc#104 ← ++ (byte) bc#39 -- vbuxx=_inc_vbuxx 
    inx
    // [62] (byte) bc#172 ← (byte) bc#104 -- vbuyy=vbuxx 
    txa
    tay
    // fb()
    // [63] call fb 
    // [110] phi from fa::@10 to fb [phi:fa::@10->fb]
    // [110] phi (byte) bd#106 = (byte) bd#137 [phi:fa::@10->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#172 [phi:fa::@10->fb#1] -- register_copy 
    jsr fb
    // [64] phi from fa fa::@10 to fa::@1 [phi:fa/fa::@10->fa::@1]
    // [64] phi (byte) bd#138 = (byte) bd#137 [phi:fa/fa::@10->fa::@1#0] -- register_copy 
    // [64] phi (byte) bc#40 = (byte) bc#39 [phi:fa/fa::@10->fa::@1#1] -- register_copy 
    // fa::@1
  __b1:
    // if(bb==1)
    // [65] if((byte) bb#27!=(byte) 1) goto fa::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp.z bb_1
    bne __b2
    // fa::@11
    // bc++;
    // [66] (byte) bc#105 ← ++ (byte) bc#40 -- vbuxx=_inc_vbuxx 
    inx
    // [67] (byte) bc#173 ← (byte) bc#105 -- vbuyy=vbuxx 
    txa
    tay
    // fb()
    // [68] call fb 
    // [110] phi from fa::@11 to fb [phi:fa::@11->fb]
    // [110] phi (byte) bd#106 = (byte) bd#138 [phi:fa::@11->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#173 [phi:fa::@11->fb#1] -- register_copy 
    jsr fb
    // [69] phi from fa::@1 fa::@11 to fa::@2 [phi:fa::@1/fa::@11->fa::@2]
    // [69] phi (byte) bd#139 = (byte) bd#138 [phi:fa::@1/fa::@11->fa::@2#0] -- register_copy 
    // [69] phi (byte) bc#41 = (byte) bc#40 [phi:fa::@1/fa::@11->fa::@2#1] -- register_copy 
    // fa::@2
  __b2:
    // if(bb==2)
    // [70] if((byte) bb#27!=(byte) 2) goto fa::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z bb_1
    bne __b3
    // fa::@12
    // bc++;
    // [71] (byte) bc#106 ← ++ (byte) bc#41 -- vbuxx=_inc_vbuxx 
    inx
    // [72] (byte) bc#174 ← (byte) bc#106 -- vbuyy=vbuxx 
    txa
    tay
    // fb()
    // [73] call fb 
    // [110] phi from fa::@12 to fb [phi:fa::@12->fb]
    // [110] phi (byte) bd#106 = (byte) bd#139 [phi:fa::@12->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#174 [phi:fa::@12->fb#1] -- register_copy 
    jsr fb
    // [74] phi from fa::@12 fa::@2 to fa::@3 [phi:fa::@12/fa::@2->fa::@3]
    // [74] phi (byte) bd#140 = (byte) bd#35 [phi:fa::@12/fa::@2->fa::@3#0] -- register_copy 
    // [74] phi (byte) bc#42 = (byte) bc#106 [phi:fa::@12/fa::@2->fa::@3#1] -- register_copy 
    // fa::@3
  __b3:
    // if(bb==3)
    // [75] if((byte) bb#27!=(byte) 3) goto fa::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z bb_1
    bne __b4
    // fa::@13
    // bc++;
    // [76] (byte) bc#107 ← ++ (byte) bc#42 -- vbuxx=_inc_vbuxx 
    inx
    // [77] (byte) bc#175 ← (byte) bc#107 -- vbuyy=vbuxx 
    txa
    tay
    // fb()
    // [78] call fb 
    // [110] phi from fa::@13 to fb [phi:fa::@13->fb]
    // [110] phi (byte) bd#106 = (byte) bd#140 [phi:fa::@13->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#175 [phi:fa::@13->fb#1] -- register_copy 
    jsr fb
    // [79] phi from fa::@13 fa::@3 to fa::@4 [phi:fa::@13/fa::@3->fa::@4]
    // [79] phi (byte) bd#141 = (byte) bd#35 [phi:fa::@13/fa::@3->fa::@4#0] -- register_copy 
    // [79] phi (byte) bc#43 = (byte) bc#107 [phi:fa::@13/fa::@3->fa::@4#1] -- register_copy 
    // fa::@4
  __b4:
    // if(bb==4)
    // [80] if((byte) bb#27!=(byte) 4) goto fa::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z bb_1
    bne __b5
    // fa::@14
    // bc++;
    // [81] (byte) bc#108 ← ++ (byte) bc#43 -- vbuxx=_inc_vbuxx 
    inx
    // [82] (byte) bc#176 ← (byte) bc#108 -- vbuyy=vbuxx 
    txa
    tay
    // fb()
    // [83] call fb 
    // [110] phi from fa::@14 to fb [phi:fa::@14->fb]
    // [110] phi (byte) bd#106 = (byte) bd#141 [phi:fa::@14->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#176 [phi:fa::@14->fb#1] -- register_copy 
    jsr fb
    // [84] phi from fa::@14 fa::@4 to fa::@5 [phi:fa::@14/fa::@4->fa::@5]
    // [84] phi (byte) bd#100 = (byte) bd#35 [phi:fa::@14/fa::@4->fa::@5#0] -- register_copy 
    // [84] phi (byte) bc#44 = (byte) bc#108 [phi:fa::@14/fa::@4->fa::@5#1] -- register_copy 
    // fa::@5
  __b5:
    // if(bb==5)
    // [85] if((byte) bb#27!=(byte) 5) goto fa::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp.z bb_1
    bne __b6
    // fa::@15
    // bc++;
    // [86] (byte) bc#109 ← ++ (byte) bc#44 -- vbuxx=_inc_vbuxx 
    inx
    // [87] (byte) bc#177 ← (byte) bc#109 -- vbuyy=vbuxx 
    txa
    tay
    // fb()
    // [88] call fb 
    // [110] phi from fa::@15 to fb [phi:fa::@15->fb]
    // [110] phi (byte) bd#106 = (byte) bd#100 [phi:fa::@15->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#177 [phi:fa::@15->fb#1] -- register_copy 
    jsr fb
    // [89] phi from fa::@15 fa::@5 to fa::@6 [phi:fa::@15/fa::@5->fa::@6]
    // [89] phi (byte) bd#101 = (byte) bd#35 [phi:fa::@15/fa::@5->fa::@6#0] -- register_copy 
    // [89] phi (byte) bc#45 = (byte) bc#109 [phi:fa::@15/fa::@5->fa::@6#1] -- register_copy 
    // fa::@6
  __b6:
    // if(bb==6)
    // [90] if((byte) bb#27!=(byte) 6) goto fa::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z bb_1
    bne __b7
    // fa::@16
    // bc++;
    // [91] (byte) bc#110 ← ++ (byte) bc#45 -- vbuxx=_inc_vbuxx 
    inx
    // [92] (byte) bc#178 ← (byte) bc#110 -- vbuyy=vbuxx 
    txa
    tay
    // fb()
    // [93] call fb 
    // [110] phi from fa::@16 to fb [phi:fa::@16->fb]
    // [110] phi (byte) bd#106 = (byte) bd#101 [phi:fa::@16->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#178 [phi:fa::@16->fb#1] -- register_copy 
    jsr fb
    // [94] phi from fa::@16 fa::@6 to fa::@7 [phi:fa::@16/fa::@6->fa::@7]
    // [94] phi (byte) bd#102 = (byte) bd#35 [phi:fa::@16/fa::@6->fa::@7#0] -- register_copy 
    // [94] phi (byte) bc#46 = (byte) bc#110 [phi:fa::@16/fa::@6->fa::@7#1] -- register_copy 
    // fa::@7
  __b7:
    // if(bb==7)
    // [95] if((byte) bb#27!=(byte) 7) goto fa::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z bb_1
    bne __b8
    // fa::@17
    // bc++;
    // [96] (byte) bc#111 ← ++ (byte) bc#46 -- vbuxx=_inc_vbuxx 
    inx
    // [97] (byte) bc#179 ← (byte) bc#111 -- vbuyy=vbuxx 
    txa
    tay
    // fb()
    // [98] call fb 
    // [110] phi from fa::@17 to fb [phi:fa::@17->fb]
    // [110] phi (byte) bd#106 = (byte) bd#102 [phi:fa::@17->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#179 [phi:fa::@17->fb#1] -- register_copy 
    jsr fb
    // [99] phi from fa::@17 fa::@7 to fa::@8 [phi:fa::@17/fa::@7->fa::@8]
    // [99] phi (byte) bd#103 = (byte) bd#35 [phi:fa::@17/fa::@7->fa::@8#0] -- register_copy 
    // [99] phi (byte) bc#47 = (byte) bc#111 [phi:fa::@17/fa::@7->fa::@8#1] -- register_copy 
    // fa::@8
  __b8:
    // if(bb==8)
    // [100] if((byte) bb#27!=(byte) 8) goto fa::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z bb_1
    bne __b9
    // fa::@18
    // bc++;
    // [101] (byte) bc#112 ← ++ (byte) bc#47 -- vbuxx=_inc_vbuxx 
    inx
    // [102] (byte) bc#180 ← (byte) bc#112 -- vbuyy=vbuxx 
    txa
    tay
    // fb()
    // [103] call fb 
    // [110] phi from fa::@18 to fb [phi:fa::@18->fb]
    // [110] phi (byte) bd#106 = (byte) bd#103 [phi:fa::@18->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) bc#180 [phi:fa::@18->fb#1] -- register_copy 
    jsr fb
    // [104] phi from fa::@18 fa::@8 to fa::@9 [phi:fa::@18/fa::@8->fa::@9]
    // [104] phi (byte) bd#104 = (byte) bd#35 [phi:fa::@18/fa::@8->fa::@9#0] -- register_copy 
    // [104] phi (byte) bc#83 = (byte) bc#112 [phi:fa::@18/fa::@8->fa::@9#1] -- register_copy 
    // fa::@9
  __b9:
    // if(bb==9)
    // [105] if((byte) bb#27!=(byte) 9) goto fa::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp.z bb_1
    bne __breturn
    // [106] phi from fa::@9 to fa::@19 [phi:fa::@9->fa::@19]
    // fa::@19
    // fb()
    // [107] call fb 
    // [110] phi from fa::@19 to fb [phi:fa::@19->fb]
    // [110] phi (byte) bd#106 = (byte) bd#104 [phi:fa::@19->fb#0] -- register_copy 
    // [110] phi (byte) bc#113 = (byte) 0 [phi:fa::@19->fb#1] -- vbuyy=vbuc1 
    ldy #0
    jsr fb
    // [108] phi from fa::@19 to fa::@return [phi:fa::@19->fa::@return]
    // [108] phi (byte) bd#24 = (byte) bd#35 [phi:fa::@19->fa::@return#0] -- register_copy 
    // [108] phi (byte) bc#24 = (byte) 0 [phi:fa::@19->fa::@return#1] -- vbuxx=vbuc1 
    ldx #0
    rts
    // [108] phi from fa::@9 to fa::@return [phi:fa::@9->fa::@return]
    // [108] phi (byte) bd#24 = (byte) bd#104 [phi:fa::@9->fa::@return#0] -- register_copy 
    // [108] phi (byte) bc#24 = (byte) bc#83 [phi:fa::@9->fa::@return#1] -- register_copy 
    // fa::@return
  __breturn:
    // }
    // [109] return 
    rts
}
  // fb
fb: {
    // if(bc==0)
    // [111] if((byte) bc#113!=(byte) 0) goto fb::@1 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b1
    // fb::@10
    // bd++;
    // [112] (byte) bd#146 ← ++ (byte) bd#106 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [113] (byte) bd#235 ← (byte) bd#146 -- vbuaa=vbuz1 
    lda.z bd
    // fc()
    // [114] call fc 
    // [161] phi from fb::@10 to fc [phi:fb::@10->fc]
    // [161] phi (byte) bd#117 = (byte) bd#235 [phi:fb::@10->fc#0] -- register_copy 
    jsr fc
    // [115] phi from fb fb::@10 to fb::@1 [phi:fb/fb::@10->fb::@1]
    // [115] phi (byte) bd#107 = (byte) bd#106 [phi:fb/fb::@10->fb::@1#0] -- register_copy 
    // fb::@1
  __b1:
    // if(bc==1)
    // [116] if((byte) bc#113!=(byte) 1) goto fb::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #1
    bne __b2
    // fb::@11
    // bd++;
    // [117] (byte) bd#147 ← ++ (byte) bd#107 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [118] (byte) bd#236 ← (byte) bd#147 -- vbuaa=vbuz1 
    lda.z bd
    // fc()
    // [119] call fc 
    // [161] phi from fb::@11 to fc [phi:fb::@11->fc]
    // [161] phi (byte) bd#117 = (byte) bd#236 [phi:fb::@11->fc#0] -- register_copy 
    jsr fc
    // [120] phi from fb::@1 fb::@11 to fb::@2 [phi:fb::@1/fb::@11->fb::@2]
    // [120] phi (byte) bd#108 = (byte) bd#107 [phi:fb::@1/fb::@11->fb::@2#0] -- register_copy 
    // fb::@2
  __b2:
    // if(bc==2)
    // [121] if((byte) bc#113!=(byte) 2) goto fb::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #2
    bne __b3
    // fb::@12
    // bd++;
    // [122] (byte) bd#148 ← ++ (byte) bd#108 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [123] (byte) bd#237 ← (byte) bd#148 -- vbuaa=vbuz1 
    lda.z bd
    // fc()
    // [124] call fc 
    // [161] phi from fb::@12 to fc [phi:fb::@12->fc]
    // [161] phi (byte) bd#117 = (byte) bd#237 [phi:fb::@12->fc#0] -- register_copy 
    jsr fc
    // [125] phi from fb::@12 fb::@2 to fb::@3 [phi:fb::@12/fb::@2->fb::@3]
    // [125] phi (byte) bd#109 = (byte) bd#148 [phi:fb::@12/fb::@2->fb::@3#0] -- register_copy 
    // fb::@3
  __b3:
    // if(bc==3)
    // [126] if((byte) bc#113!=(byte) 3) goto fb::@4 -- vbuyy_neq_vbuc1_then_la1 
    cpy #3
    bne __b4
    // fb::@13
    // bd++;
    // [127] (byte) bd#149 ← ++ (byte) bd#109 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [128] (byte) bd#238 ← (byte) bd#149 -- vbuaa=vbuz1 
    lda.z bd
    // fc()
    // [129] call fc 
    // [161] phi from fb::@13 to fc [phi:fb::@13->fc]
    // [161] phi (byte) bd#117 = (byte) bd#238 [phi:fb::@13->fc#0] -- register_copy 
    jsr fc
    // [130] phi from fb::@13 fb::@3 to fb::@4 [phi:fb::@13/fb::@3->fb::@4]
    // [130] phi (byte) bd#110 = (byte) bd#149 [phi:fb::@13/fb::@3->fb::@4#0] -- register_copy 
    // fb::@4
  __b4:
    // if(bc==4)
    // [131] if((byte) bc#113!=(byte) 4) goto fb::@5 -- vbuyy_neq_vbuc1_then_la1 
    cpy #4
    bne __b5
    // fb::@14
    // bd++;
    // [132] (byte) bd#150 ← ++ (byte) bd#110 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [133] (byte) bd#239 ← (byte) bd#150 -- vbuaa=vbuz1 
    lda.z bd
    // fc()
    // [134] call fc 
    // [161] phi from fb::@14 to fc [phi:fb::@14->fc]
    // [161] phi (byte) bd#117 = (byte) bd#239 [phi:fb::@14->fc#0] -- register_copy 
    jsr fc
    // [135] phi from fb::@14 fb::@4 to fb::@5 [phi:fb::@14/fb::@4->fb::@5]
    // [135] phi (byte) bd#111 = (byte) bd#150 [phi:fb::@14/fb::@4->fb::@5#0] -- register_copy 
    // fb::@5
  __b5:
    // if(bc==5)
    // [136] if((byte) bc#113!=(byte) 5) goto fb::@6 -- vbuyy_neq_vbuc1_then_la1 
    cpy #5
    bne __b6
    // fb::@15
    // bd++;
    // [137] (byte) bd#151 ← ++ (byte) bd#111 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [138] (byte) bd#240 ← (byte) bd#151 -- vbuaa=vbuz1 
    lda.z bd
    // fc()
    // [139] call fc 
    // [161] phi from fb::@15 to fc [phi:fb::@15->fc]
    // [161] phi (byte) bd#117 = (byte) bd#240 [phi:fb::@15->fc#0] -- register_copy 
    jsr fc
    // [140] phi from fb::@15 fb::@5 to fb::@6 [phi:fb::@15/fb::@5->fb::@6]
    // [140] phi (byte) bd#112 = (byte) bd#151 [phi:fb::@15/fb::@5->fb::@6#0] -- register_copy 
    // fb::@6
  __b6:
    // if(bc==6)
    // [141] if((byte) bc#113!=(byte) 6) goto fb::@7 -- vbuyy_neq_vbuc1_then_la1 
    cpy #6
    bne __b7
    // fb::@16
    // bd++;
    // [142] (byte) bd#152 ← ++ (byte) bd#112 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [143] (byte) bd#241 ← (byte) bd#152 -- vbuaa=vbuz1 
    lda.z bd
    // fc()
    // [144] call fc 
    // [161] phi from fb::@16 to fc [phi:fb::@16->fc]
    // [161] phi (byte) bd#117 = (byte) bd#241 [phi:fb::@16->fc#0] -- register_copy 
    jsr fc
    // [145] phi from fb::@16 fb::@6 to fb::@7 [phi:fb::@16/fb::@6->fb::@7]
    // [145] phi (byte) bd#113 = (byte) bd#152 [phi:fb::@16/fb::@6->fb::@7#0] -- register_copy 
    // fb::@7
  __b7:
    // if(bc==7)
    // [146] if((byte) bc#113!=(byte) 7) goto fb::@8 -- vbuyy_neq_vbuc1_then_la1 
    cpy #7
    bne __b8
    // fb::@17
    // bd++;
    // [147] (byte) bd#153 ← ++ (byte) bd#113 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [148] (byte) bd#242 ← (byte) bd#153 -- vbuaa=vbuz1 
    lda.z bd
    // fc()
    // [149] call fc 
    // [161] phi from fb::@17 to fc [phi:fb::@17->fc]
    // [161] phi (byte) bd#117 = (byte) bd#242 [phi:fb::@17->fc#0] -- register_copy 
    jsr fc
    // [150] phi from fb::@17 fb::@7 to fb::@8 [phi:fb::@17/fb::@7->fb::@8]
    // [150] phi (byte) bd#114 = (byte) bd#153 [phi:fb::@17/fb::@7->fb::@8#0] -- register_copy 
    // fb::@8
  __b8:
    // if(bc==8)
    // [151] if((byte) bc#113!=(byte) 8) goto fb::@9 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b9
    // fb::@18
    // bd++;
    // [152] (byte) bd#154 ← ++ (byte) bd#114 -- vbuz1=_inc_vbuz1 
    inc.z bd
    // [153] (byte) bd#243 ← (byte) bd#154 -- vbuaa=vbuz1 
    lda.z bd
    // fc()
    // [154] call fc 
    // [161] phi from fb::@18 to fc [phi:fb::@18->fc]
    // [161] phi (byte) bd#117 = (byte) bd#243 [phi:fb::@18->fc#0] -- register_copy 
    jsr fc
    // [155] phi from fb::@18 fb::@8 to fb::@9 [phi:fb::@18/fb::@8->fb::@9]
    // [155] phi (byte) bd#116 = (byte) bd#154 [phi:fb::@18/fb::@8->fb::@9#0] -- register_copy 
    // fb::@9
  __b9:
    // if(bc==9)
    // [156] if((byte) bc#113!=(byte) 9) goto fb::@return -- vbuyy_neq_vbuc1_then_la1 
    cpy #9
    bne __breturn
    // [157] phi from fb::@9 to fb::@19 [phi:fb::@9->fb::@19]
    // fb::@19
    // fc()
    // [158] call fc 
    // [161] phi from fb::@19 to fc [phi:fb::@19->fc]
    // [161] phi (byte) bd#117 = (byte) 0 [phi:fb::@19->fc#0] -- vbuaa=vbuc1 
    lda #0
    jsr fc
    // [159] phi from fb::@19 to fb::@return [phi:fb::@19->fb::@return]
    // [159] phi (byte) bd#35 = (byte) 0 [phi:fb::@19->fb::@return#0] -- vbuz1=vbuc1 
    lda #0
    sta.z bd
    rts
    // [159] phi from fb::@9 to fb::@return [phi:fb::@9->fb::@return]
    // [159] phi (byte) bd#35 = (byte) bd#116 [phi:fb::@9->fb::@return#0] -- register_copy 
    // fb::@return
  __breturn:
    // }
    // [160] return 
    rts
}
  // fc
fc: {
    // if(bd==0)
    // [162] if((byte) bd#117!=(byte) 0) goto fc::@1 -- vbuaa_neq_0_then_la1 
    cmp #0
    // [163] phi from fc to fc::@10 [phi:fc->fc::@10]
    // fc::@10
    // fc::@1
    // if(bd==1)
    // [164] if((byte) bd#117!=(byte) 1) goto fc::@2 -- vbuaa_neq_vbuc1_then_la1 
    cmp #1
    // [165] phi from fc::@1 to fc::@11 [phi:fc::@1->fc::@11]
    // fc::@11
    // fc::@2
    // if(bd==2)
    // [166] if((byte) bd#117!=(byte) 2) goto fc::@3 -- vbuaa_neq_vbuc1_then_la1 
    cmp #2
    // [167] phi from fc::@2 to fc::@12 [phi:fc::@2->fc::@12]
    // fc::@12
    // fc::@3
    // if(bd==3)
    // [168] if((byte) bd#117!=(byte) 3) goto fc::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #3
    // [169] phi from fc::@3 to fc::@13 [phi:fc::@3->fc::@13]
    // fc::@13
    // fc::@4
    // if(bd==4)
    // [170] if((byte) bd#117!=(byte) 4) goto fc::@5 -- vbuaa_neq_vbuc1_then_la1 
    cmp #4
    // [171] phi from fc::@4 to fc::@14 [phi:fc::@4->fc::@14]
    // fc::@14
    // fc::@5
    // if(bd==5)
    // [172] if((byte) bd#117!=(byte) 5) goto fc::@6 -- vbuaa_neq_vbuc1_then_la1 
    cmp #5
    // [173] phi from fc::@5 to fc::@15 [phi:fc::@5->fc::@15]
    // fc::@15
    // fc::@6
    // if(bd==6)
    // [174] if((byte) bd#117!=(byte) 6) goto fc::@7 -- vbuaa_neq_vbuc1_then_la1 
    cmp #6
    // [175] phi from fc::@6 to fc::@16 [phi:fc::@6->fc::@16]
    // fc::@16
    // fc::@7
    // if(bd==7)
    // [176] if((byte) bd#117!=(byte) 7) goto fc::@8 -- vbuaa_neq_vbuc1_then_la1 
    cmp #7
    // [177] phi from fc::@7 to fc::@17 [phi:fc::@7->fc::@17]
    // fc::@17
    // fc::@8
    // if(bd==8)
    // [178] if((byte) bd#117!=(byte) 8) goto fc::@9 -- vbuaa_neq_vbuc1_then_la1 
    cmp #8
    // [179] phi from fc::@8 to fc::@18 [phi:fc::@8->fc::@18]
    // fc::@18
    // fc::@9
    // if(bd==9)
    // [180] if((byte) bd#117!=(byte) 9) goto fc::@return -- vbuaa_neq_vbuc1_then_la1 
    cmp #9
    // [181] phi from fc::@9 to fc::@19 [phi:fc::@9->fc::@19]
    // fc::@19
    // fc::@return
    // }
    // [182] return 
    rts
}
  // File Data

