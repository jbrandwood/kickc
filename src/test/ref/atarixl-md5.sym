__constant unsigned int *COLCRS = (unsigned int *) 85
__constant char * const CRSINH = (char *) 752
__constant char DIGITS[] = "0123456789abcdef"atz
__constant char *HEAP_TOP = (char *) 40960
__constant char OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
__constant char ** const OLDADR = (char **) 94
__constant char * const OLDCHR = (char *) 93
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant char RADIX_HEXADECIMAL_VALUES_CHAR[] = { $10 }
__constant char *ROWCRS = (char *) 84
__constant char ** const SAVMSC = (char **) 88
__constant char SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
__constant unsigned int STACK_BASE = $103
void * calloc(unsigned int nitems , unsigned int size)
void *calloc::mem
unsigned int calloc::nitems
unsigned int calloc::nitems#0 // nitems zp[2]:193 53.25
void *calloc::return
void *calloc::return#0 // return zp[2]:200 35.5
void *calloc::return#2 // return zp[2]:200 22.0
unsigned int calloc::size
__stackcall void cputc(volatile char c)
__constant char cputc::OFFSET_STACK_C = 0
__loadstore volatile char cputc::c // zp[1]:137 1.3333333333466667E11
char cputc::convertToScreenCode1_return
char cputc::convertToScreenCode1_return#0 // reg byte x 1.833333333336667E11
char *cputc::convertToScreenCode1_v
__constant char *cputc::convertToScreenCode1_v#0 = &cputc::c // convertToScreenCode1_v
void cputln()
void cputs(const char *s)
char cputs::c
char cputs::c#1 // reg byte a 1.0000001E7
const char *cputs::s
const char *cputs::s#0 // s zp[2]:143 4000000.4
const char *cputs::s#2 // s zp[2]:143 1.50000015E7
char * cursorLocation()
unsigned int cursorLocation::$0 // zp[2]:132 2.00000000000002E14
char *cursorLocation::$1 // zp[2]:132 2.00000000000002E14
unsigned int cursorLocation::$3 // zp[2]:132 1.500000000000015E14
unsigned int cursorLocation::$4 // zp[2]:134 2.00000000000002E14
unsigned int cursorLocation::$5 // zp[2]:132 2.00000000000002E14
char *cursorLocation::return
char *cursorLocation::return#0 // return zp[2]:132 2.000000000002E12
char *cursorLocation::return#1 // return zp[2]:132 2.775000000000075E13
char *cursorLocation::return#3 // return zp[2]:132 2.0000000000002E13
unsigned long h0
unsigned long h0#10 // h0 zp[4]:224 2.2116788321167884
unsigned long h0#3 // h0 zp[4]:224 40.4
unsigned long h1
unsigned long h1#10 // h1 zp[4]:220 2.1956521739130435
unsigned long h1#3 // h1 zp[4]:220 50.5
unsigned long h2
unsigned long h2#10 // h2 zp[4]:216 2.179856115107914
unsigned long h2#3 // h2 zp[4]:216 67.33333333333333
unsigned long h3
unsigned long h3#10 // h3 zp[4]:210 2.164285714285714
unsigned long h3#3 // h3 zp[4]:210 101.0
char *heap_head
unsigned long leftRotate(volatile unsigned long a , char r)
char leftRotate::$5 // reg byte x 10001.0
char leftRotate::$9 // reg byte x 10001.0
__loadstore volatile unsigned long leftRotate::a // zp[4]:151 10010.0
char *leftRotate::p
__constant char *leftRotate::p#1 = (char *)&leftRotate::a // p
char leftRotate::r
char leftRotate::r#0 // r zp[1]:146 7100.800000000001
unsigned long *leftRotate::result
__constant unsigned long *leftRotate::result#0 = (unsigned long *)leftRotate::p#1 // result
unsigned long leftRotate::return
unsigned long leftRotate::return#0 // return zp[4]:161 3667.333333333333
unsigned long leftRotate::return#2 // return zp[4]:161 2002.0
void main()
__constant char *main::message = "The quick brown fox jumps over the lazy dog"at
__constant char main::s[$11] = "Calculating MD5
"at
void * malloc(unsigned int size)
char *malloc::mem
char *malloc::mem#0 // mem zp[2]:200 333.6666666666667
void *malloc::return
unsigned int malloc::size
unsigned int malloc::size#0 // size zp[2]:193 1102.0
void md5(char *initial_msg , unsigned int initial_len)
unsigned int md5::$0 // zp[2]:214 22.0
unsigned int md5::$1 // zp[2]:214 22.0
unsigned int md5::$2 // zp[2]:214 22.0
char md5::$24 // reg byte a 2002.0
char md5::$25 // reg byte a 1251.25
unsigned long md5::$26 // zp[4]:156 667.3333333333334
unsigned long md5::$27 // zp[4]:181 2002.0
unsigned long md5::$28 // zp[4]:181 2002.0
unsigned int md5::$3 // zp[2]:214 22.0
unsigned long md5::$30 // zp[4]:156 667.3333333333334
unsigned long md5::$31 // zp[4]:177 2002.0
unsigned long md5::$32 // zp[4]:177 2002.0
unsigned int md5::$34 // zp[2]:167 2002.0
unsigned long md5::$37 // zp[4]:156 2002.0
unsigned int md5::$39 // zp[2]:165 2002.0
unsigned long md5::$42 // zp[4]:156 2002.0
unsigned long md5::$43 // zp[4]:156 2002.0
unsigned long md5::$65 // zp[4]:169 2002.0
unsigned long md5::$66 // zp[4]:169 2002.0
unsigned long md5::$67 // zp[4]:169 2002.0
char md5::$71 // zp[1]:209 108.21621621621621
char md5::$72 // zp[1]:204 166.83333333333334
char *md5::$74 // zp[2]:228 22.0
unsigned long md5::a
unsigned long md5::a#0 // a zp[4]:169 50.5
unsigned long md5::a#11 // a zp[4]:169 36.258620689655174
unsigned long md5::a#48 // a zp[4]:169 500.5
unsigned long md5::b
unsigned long md5::b#0 // b zp[4]:195 67.33333333333333
unsigned long md5::b#1 // b_1 zp[4]:161 667.3333333333334
unsigned long md5::b#10 // b zp[4]:195 71.40310077519379
unsigned long md5::b#49 // b zp[4]:195 667.3333333333334
__loadstore volatile unsigned long md5::bits_len // zp[4]:205 110.0
unsigned long md5::c
unsigned long md5::c#0 // c zp[4]:189 101.0
unsigned long md5::c#10 // c zp[4]:189 55.03053435114503
unsigned long md5::c#49 // c zp[4]:189 1001.0
unsigned long md5::d
unsigned long md5::d#0 // d zp[4]:185 202.0
unsigned long md5::f
unsigned long md5::f#1 // f zp[4]:156 1001.0
unsigned long md5::f#10 // f zp[4]:156 149.08510638297872
unsigned long md5::f#12 // f zp[4]:156 222.44444444444446
unsigned long md5::f#13 // f zp[4]:156 222.44444444444446
unsigned long md5::f#14 // f zp[4]:156 250.25
char md5::g
char md5::g#10 // g zp[1]:160 500.50000000000006
char md5::g#2 // g zp[1]:160 2002.0
char md5::g#3 // g zp[1]:160 2002.0
char md5::g#31 // g zp[1]:160 2002.0
char md5::g#4 // g zp[1]:160 2002.0
char md5::i
char md5::i#1 // i zp[1]:199 400.4
char md5::i#10 // i zp[1]:199 96.09599999999996
unsigned int md5::initial_len
unsigned int md5::initial_len#0 // initial_len zp[2]:232 3.0666666666666664
char *md5::initial_msg
__constant unsigned long md5::k[] = { $d76aa478, $e8c7b756, $242070db, $c1bdceee, $f57c0faf, $4787c62a, $a8304613, $fd469501, $698098d8, $8b44f7af, $ffff5bb1, $895cd7be, $6b901122, $fd987193, $a679438e, $49b40821, $f61e2562, $c040b340, $265e5a51, $e9b6c7aa, $d62f105d, $2441453, $d8a1e681, $e7d3fbc8, $21e1cde6, $c33707d6, $f4d50d87, $455a14ed, $a9e3e905, $fcefa3f8, $676f02d9, $8d2a4c8a, $fffa3942, $8771f681, $6d9d6122, $fde5380c, $a4beea44, $4bdecfa9, $f6bb4b60, $bebfbc70, $289b7ec6, $eaa127fa, $d4ef3085, $4881d05, $d9d4d039, $e6db99e5, $1fa27cf8, $c4ac5665, $f4292244, $432aff97, $ab9423a7, $fc93a039, $655b59c3, $8f0ccc92, $ffeff47d, $85845dd1, $6fa87e4f, $fe2ce6e0, $a3014314, $4e0811a1, $f7537e82, $bd3af235, $2ad7d2bb, $eb86d391 }
unsigned long md5::lr
unsigned long md5::lr#0 // lr zp[4]:161 2002.0
char *md5::msg
void *md5::msg#1 // msg zp[2]:200 0.07236842105263158
unsigned int md5::new_len
unsigned int md5::new_len#0 // new_len zp[2]:214 0.858974358974359
int md5::offset
int md5::offset#1 // offset zp[2]:202 202.0
int md5::offset#2 // offset zp[2]:202 2.8652482269503547
__constant char md5::r[] = { 7, $c, $11, $16, 7, $c, $11, $16, 7, $c, $11, $16, 7, $c, $11, $16, 5, 9, $e, $14, 5, 9, $e, $14, 5, 9, $e, $14, 5, 9, $e, $14, 4, $b, $10, $17, 4, $b, $10, $17, 4, $b, $10, $17, 4, $b, $10, $17, 6, $a, $f, $15, 6, $a, $f, $15, 6, $a, $f, $15, 6, $a, $f, $15 }
__constant char md5::s[3] = ": "at
__constant char md5::s1[4] = "f: "at
__constant char md5::s2[3] = "g:"at
__constant char md5::s3[7] = " w[g]:"at
__constant char md5::s4[3] = "L "at
__constant char md5::s5[4] = "r: "at
__constant char md5::s6[2] = "
"at
unsigned long md5::temp
unsigned long md5::temp#0 // temp zp[4]:185 63.64341085271317
unsigned long md5::temp#12 // temp zp[4]:185 2002.0
unsigned long *md5::w
char *md5::w#0 // w zp[2]:234 0.7481481481481481
void * memcpy(void *destination , void *source , unsigned int num)
void *memcpy::destination
void *memcpy::destination#0 // destination zp[2]:132 1.000000000001E12
void *memcpy::destination#1 // destination zp[2]:132 11.0
char *memcpy::destination#2 // destination_1 zp[2]:230 11.0
void *memcpy::destination#3 // destination zp[2]:132 3.33333333341E11
void *memcpy::destination#8 // destination zp[2]:132 22.0
char *memcpy::dst
char *memcpy::dst#1 // dst zp[2]:132 1.0E16
char *memcpy::dst#2 // dst zp[2]:132 1.0003333333333334E16
char *memcpy::dst#4 // dst zp[2]:132 2.0000000000002E13
unsigned int memcpy::num
unsigned int memcpy::num#1 // num zp[2]:134 22.0
unsigned int memcpy::num#3 // num zp[2]:134 1.0000000000012E13
void *memcpy::return
void *memcpy::source
char *memcpy::source#0 // source zp[2]:130 5.000000000005E11
void *memcpy::source#3 // source zp[2]:130 5.000000000005E11
void *memcpy::source#4 // source zp[2]:130 2.000000000002E12
char *memcpy::src
char *memcpy::src#1 // src zp[2]:130 2.0E16
char *memcpy::src#2 // src zp[2]:130 1.00025E16
char *memcpy::src#4 // src zp[2]:130 1.0000000000001E13
char *memcpy::src_end
char *memcpy::src_end#0 // src_end zp[2]:134 1.25125E15
void * memset(void *str , char c , unsigned int num)
char memset::c
char *memset::dst
char *memset::dst#1 // dst zp[2]:128 2.0E17
char *memset::dst#2 // dst zp[2]:128 1.33336666666666656E17
char *memset::dst#4 // dst zp[2]:128 2.0000000000002E13
char *memset::end
char *memset::end#0 // end zp[2]:130 1.6668333333333332E16
unsigned int memset::num
unsigned int memset::num#0 // num zp[2]:130 101.0
unsigned int memset::num#2 // num zp[2]:130 1.00000000000515E13
void *memset::return
void *memset::str
void *memset::str#0 // str zp[2]:128 202.0
char *memset::str#1 // str zp[2]:128 1.000000000001E12
void *memset::str#3 // str zp[2]:128 3.333333333673334E11
void *memset::str#8 // str zp[2]:128 2.000000000002E12
char mod16(unsigned int a)
unsigned int mod16::a
unsigned int mod16::a#0 // a zp[2]:139 2002.0
unsigned int mod16::a#1 // a zp[2]:139 2002.0
unsigned int mod16::a#2 // a zp[2]:139 2002.0
unsigned int mod16::a#3 // a zp[2]:139 13004.0
char mod16::return
char mod16::return#0 // reg byte a 2600.8
char mod16::return#2 // reg byte a 2002.0
char mod16::return#3 // reg byte a 2002.0
char mod16::return#4 // reg byte a 2002.0
unsigned int mod16::t
unsigned int mod16::t#0 // t zp[2]:139 20002.0
void move16Left(char *p)
char *move16Left::p
char move16Left::s
char move16Left::s#0 // reg byte y 50000.5
char move16Left::t
char move16Left::t#0 // reg byte x 50000.5
void move8Left(char *p)
char *move8Left::p
char move8Left::t
char move8Left::t#0 // reg byte x 50000.5
unsigned int mul3(char a)
unsigned int mul3::$1 // zp[2]:143 15001.5
unsigned int mul3::$2 // zp[2]:139 20002.0
char mul3::a
char mul3::a#0 // reg byte a 1001.0
unsigned int mul3::return
unsigned int mul3::return#0 // return zp[2]:165 3667.333333333333
unsigned int mul3::return#2 // return zp[2]:165 2002.0
unsigned int mul5(char a)
unsigned int mul5::$1 // zp[2]:139 15001.5
unsigned int mul5::$2 // zp[2]:143 20002.0
char mul5::a
char mul5::a#0 // reg byte a 1001.0
unsigned int mul5::return
unsigned int mul5::return#0 // return zp[2]:167 3667.333333333333
unsigned int mul5::return#2 // return zp[2]:167 2002.0
unsigned int mul7(char a)
unsigned int mul7::$1 // zp[2]:143 10001.0
unsigned int mul7::$2 // zp[2]:139 20002.0
unsigned int mul7::$3 // zp[2]:139 20002.0
unsigned int mul7::$4 // zp[2]:139 20002.0
char mul7::a
char mul7::a#0 // reg byte a 1001.0
unsigned int mul7::return
unsigned int mul7::return#0 // return zp[2]:173 3667.333333333333
unsigned int mul7::return#2 // return zp[2]:173 2002.0
void newline()
char *newline::start
char *newline::start#0 // start zp[2]:128 6.000000000006001E11
void print32(volatile unsigned long l)
char *print32::dp
__constant char *print32::dp#1 = (char *)&print32::l // dp
__loadstore volatile unsigned long print32::l // zp[4]:147 100100.0
__loadstore struct printf_buffer_number printf_buffer = {} // mem[12]
void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
unsigned int printf_number_buffer::$19 // zp[2]:143 1000001.0
struct printf_buffer_number printf_number_buffer::buffer
char *printf_number_buffer::buffer_digits
__constant char *printf_number_buffer::buffer_digits#0 = (char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS // buffer_digits
char printf_number_buffer::buffer_sign
char printf_number_buffer::buffer_sign#0 // buffer_sign zp[1]:145 155000.2
struct printf_format_number printf_number_buffer::format
char printf_number_buffer::format_justify_left
char printf_number_buffer::format_min_length
__constant char printf_number_buffer::format_min_length#0 = 2 // format_min_length
char printf_number_buffer::format_radix
char printf_number_buffer::format_sign_always
char printf_number_buffer::format_upper_case
char printf_number_buffer::format_zero_padding
char printf_number_buffer::format_zero_padding#0 // format_zero_padding zp[1]:146 95454.68181818182
signed char printf_number_buffer::len
signed char printf_number_buffer::len#0 // reg byte x 1500001.5
signed char printf_number_buffer::len#1 // reg byte x 2000002.0
signed char printf_number_buffer::len#2 // reg byte x 3000003.0
signed char printf_number_buffer::padding
signed char printf_number_buffer::padding#1 // padding zp[1]:142 1000001.0
signed char printf_number_buffer::padding#10 // padding zp[1]:142 272727.54545454547
void (*printf_number_buffer::putc)(char)
__constant void (*printf_number_buffer::putc#0)(char) = &cputc // putc
void printf_padding(void (*putc)(char) , char pad , char length)
char printf_padding::i
char printf_padding::i#1 // i zp[1]:138 2.0000000002E10
char printf_padding::i#2 // i zp[1]:138 6.0000000006E9
char printf_padding::length
char printf_padding::length#0 // length zp[1]:141 2000002.0
char printf_padding::length#1 // length zp[1]:141 2000002.0
char printf_padding::length#4 // length zp[1]:141 1.4288571432857141E9
char printf_padding::pad
char printf_padding::pad#5 // pad zp[1]:136 1.4285714287142856E9
void (*printf_padding::putc)(char)
void printf_str(void (*putc)(char) , const char *s)
char printf_str::c
char printf_str::c#1 // reg byte a 1.00000001E8
void (*printf_str::putc)(char)
void (*printf_str::putc#10)(char) // putc zp[2]:236
const char *printf_str::s
const char *printf_str::s#0 // s zp[2]:139 1.00000001E8
const char *printf_str::s#10 // s zp[2]:139 1.0000001E7
const char *printf_str::s#9 // s zp[2]:139 1.55000002E8
void printf_uchar(void (*putc)(char) , char uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_uchar::format
char printf_uchar::format_justify_left
char printf_uchar::format_min_length
char printf_uchar::format_radix
char printf_uchar::format_sign_always
char printf_uchar::format_upper_case
char printf_uchar::format_zero_padding
char printf_uchar::format_zero_padding#10 // format_zero_padding zp[1]:146 20000.2
void (*printf_uchar::putc)(char)
char printf_uchar::uvalue
char printf_uchar::uvalue#0 // reg byte x 20002.0
char printf_uchar::uvalue#1 // reg byte x 20002.0
char printf_uchar::uvalue#10 // reg byte x 71504.0
char printf_uchar::uvalue#2 // reg byte x 20002.0
char printf_uchar::uvalue#3 // reg byte x 20002.0
char printf_uchar::uvalue#4 // reg byte x 2002.0
char printf_uchar::uvalue#5 // reg byte x 2002.0
char printf_uchar::uvalue#6 // reg byte x 2002.0
void putchar(char code)
char putchar::code
char *putchar::loc
char *putchar::loc#0 // loc zp[2]:132 1.000000000001E12
char putchar::newChar
char putchar::newChar#0 // reg byte a 1.5000000000015E12
__constant char rawmap[$100] = kickasm {{ .var ht = Hashtable().put(0,64, 1,0, 2,32, 3,96) // the table for converting bit 6,7 into ora value
	.for(var i=0; i<256; i++) {
		.var idx = (i & $60) / 32
		.var mask = i & $9f
		.byte mask | ht.get(idx)
	}
 }}
void rotateLeft(char * volatile const p , volatile char r)
__loadstore char * volatile const rotateLeft::p // zp[2]:175 5000.5
__loadstore volatile char rotateLeft::r // zp[1]:155 10001.0
void setcursor()
char setcursor::c
char setcursor::c#0 // reg byte x 7.50000000000075E12
char setcursor::c#1 // reg byte a 2.0000000000002E13
char *setcursor::loc
char *setcursor::loc#0 // loc zp[2]:132 1.0000000000001E13
unsigned int strlen(char *str)
unsigned int strlen::len
unsigned int strlen::len#1 // len zp[2]:143 1.00000001E8
unsigned int strlen::len#2 // len zp[2]:143 4.0200001E7
unsigned int strlen::return
unsigned int strlen::return#2 // return zp[2]:143 2000002.0
unsigned int strlen::return#3 // return_1 zp[2]:232 4.0
char *strlen::str
char *strlen::str#0 // str zp[2]:139 2.00000002E8
char *strlen::str#3 // str zp[2]:139 1.0333333466666667E8
char *strlen::str#5 // str zp[2]:139 1.0000001E7
void uctoa(char value , char *buffer , char radix)
char *uctoa::buffer
char *uctoa::buffer#11 // buffer zp[2]:139 3.3350000050000006E8
char *uctoa::buffer#14 // buffer zp[2]:139 1.5000000015E9
char *uctoa::buffer#3 // buffer zp[2]:139 2000002.0
char *uctoa::buffer#4 // buffer zp[2]:139 2.000000002E9
char uctoa::digit
char uctoa::digit#1 // digit zp[1]:142 2.000000002E9
char uctoa::digit#2 // digit zp[1]:142 3.07692308E8
char uctoa::digit_value
char uctoa::digit_value#0 // digit_value zp[1]:136 6.000000005999999E8
char *uctoa::digit_values
char uctoa::max_digits
char uctoa::radix
char uctoa::started
char uctoa::started#2 // started zp[1]:141 6.000000005999999E8
char uctoa::started#4 // started zp[1]:141 1.000000001E9
char uctoa::value
char uctoa::value#0 // reg byte x 1.000000001E9
char uctoa::value#1 // reg byte x 550001.0
char uctoa::value#2 // reg byte x 6.670000010000001E8
char uctoa::value#6 // reg byte x 1.5000000015E9
char uctoa_append(char *buffer , char value , char sub)
char *uctoa_append::buffer
char *uctoa_append::buffer#0 // buffer zp[2]:139 1.37500000025E9
char uctoa_append::digit
char uctoa_append::digit#1 // reg byte y 1.00000000000001E14
char uctoa_append::digit#2 // reg byte y 1.000050000000015E14
char uctoa_append::return
char uctoa_append::return#0 // reg byte x 2.000000002E9
char uctoa_append::sub
char uctoa_append::sub#0 // sub zp[1]:136 3.33335000000005E13
char uctoa_append::value
char uctoa_append::value#0 // reg byte x 3.666666667333333E9
char uctoa_append::value#1 // reg byte x 2.00000000000002E14
char uctoa_append::value#2 // reg byte x 5.000183333333417E13

zp[2]:236 [ printf_str::putc#10 ]
zp[2]:202 [ md5::offset#2 md5::offset#1 ]
zp[4]:224 [ h0#10 h0#3 ]
zp[4]:220 [ h1#10 h1#3 ]
zp[4]:216 [ h2#10 h2#3 ]
zp[4]:210 [ h3#10 h3#3 ]
zp[1]:199 [ md5::i#10 md5::i#1 ]
zp[4]:169 [ md5::a#11 md5::a#48 md5::a#0 md5::$65 md5::$66 md5::$67 ]
zp[4]:195 [ md5::b#10 md5::b#49 md5::b#0 ]
zp[4]:189 [ md5::c#10 md5::c#49 md5::c#0 ]
zp[4]:185 [ md5::temp#0 md5::temp#12 md5::d#0 ]
zp[4]:156 [ md5::f#10 md5::f#12 md5::f#13 md5::f#14 md5::f#1 md5::$43 md5::$37 md5::$30 md5::$26 md5::$42 ]
zp[1]:160 [ md5::g#10 md5::g#2 md5::g#3 md5::g#4 md5::g#31 ]
reg byte x [ printf_uchar::uvalue#10 printf_uchar::uvalue#5 printf_uchar::uvalue#4 printf_uchar::uvalue#6 printf_uchar::uvalue#0 printf_uchar::uvalue#1 printf_uchar::uvalue#2 printf_uchar::uvalue#3 ]
zp[2]:130 [ memset::num#2 memset::num#0 memset::end#0 memcpy::source#3 memcpy::source#4 memcpy::src#2 memcpy::src#4 memcpy::src#1 memcpy::source#0 ]
zp[2]:128 [ memset::str#3 memset::str#0 memset::str#8 memset::dst#2 memset::dst#4 memset::dst#1 memset::str#1 newline::start#0 ]
reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
reg byte x [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
zp[1]:142 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 uctoa::digit#2 uctoa::digit#1 ]
reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ]
zp[1]:141 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#0 uctoa::started#2 uctoa::started#4 ]
zp[1]:138 [ printf_padding::i#2 printf_padding::i#1 ]
zp[2]:232 [ strlen::return#3 md5::initial_len#0 ]
zp[1]:137 [ cputc::c ]
reg byte x [ cputc::convertToScreenCode1_return#0 ]
reg byte a [ printf_str::c#1 ]
zp[2]:214 [ md5::$0 md5::$1 md5::$2 md5::$3 md5::new_len#0 ]
zp[2]:193 [ calloc::nitems#0 malloc::size#0 ]
zp[2]:200 [ calloc::return#2 md5::msg#1 calloc::return#0 malloc::mem#0 ]
zp[2]:228 [ md5::$74 ]
zp[4]:205 [ md5::bits_len ]
zp[2]:230 [ memcpy::destination#2 ]
zp[2]:234 [ md5::w#0 ]
zp[4]:147 [ print32::l ]
reg byte a [ md5::$24 ]
reg byte a [ md5::$25 ]
zp[1]:209 [ md5::$71 ]
zp[1]:204 [ md5::$72 ]
zp[4]:151 [ leftRotate::a ]
zp[1]:146 [ leftRotate::r#0 printf_uchar::format_zero_padding#10 printf_number_buffer::format_zero_padding#0 ]
zp[4]:161 [ leftRotate::return#2 md5::lr#0 leftRotate::return#0 md5::b#1 ]
reg byte a [ mul7::a#0 ]
zp[2]:173 [ mul7::return#2 mul7::return#0 ]
reg byte a [ mod16::return#4 ]
reg byte a [ mul3::a#0 ]
zp[2]:165 [ mul3::return#2 md5::$39 mul3::return#0 ]
reg byte a [ mod16::return#3 ]
zp[4]:177 [ md5::$31 md5::$32 ]
reg byte a [ mul5::a#0 ]
zp[2]:167 [ mul5::return#2 md5::$34 mul5::return#0 ]
reg byte a [ mod16::return#2 ]
zp[4]:181 [ md5::$27 md5::$28 ]
zp[2]:132 [ cursorLocation::return#0 putchar::loc#0 cursorLocation::return#1 cursorLocation::return#3 setcursor::loc#0 cursorLocation::$0 cursorLocation::$1 cursorLocation::$3 cursorLocation::$5 memcpy::destination#3 memcpy::destination#1 memcpy::destination#8 memcpy::destination#0 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
reg byte a [ putchar::newChar#0 ]
reg byte x [ setcursor::c#0 ]
reg byte a [ setcursor::c#1 ]
zp[1]:145 [ printf_number_buffer::buffer_sign#0 ]
reg byte a [ cputs::c#1 ]
reg byte x [ leftRotate::$5 ]
zp[2]:175 [ rotateLeft::p ]
zp[1]:155 [ rotateLeft::r ]
reg byte x [ leftRotate::$9 ]
reg byte a [ mod16::return#0 ]
zp[2]:139 [ mul5::$1 mul3::$2 mul7::$2 mul7::$3 mul7::$4 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 mod16::a#3 mod16::a#0 mod16::a#1 mod16::a#2 mod16::t#0 strlen::str#3 strlen::str#5 strlen::str#0 printf_str::s#9 printf_str::s#10 printf_str::s#0 ]
zp[2]:143 [ mul5::$2 mul3::$1 mul7::$1 cputs::s#2 cputs::s#0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 ]
zp[2]:134 [ cursorLocation::$4 memcpy::num#3 memcpy::num#1 memcpy::src_end#0 ]
zp[1]:136 [ uctoa::digit_value#0 uctoa_append::sub#0 printf_padding::pad#5 ]
reg byte x [ uctoa_append::return#0 ]
reg byte y [ move16Left::s#0 ]
reg byte x [ move16Left::t#0 ]
reg byte x [ move8Left::t#0 ]
mem[12] [ printf_buffer ]
