
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call testChar 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call testShort 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [6] phi()
  [7] call testInt 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [8] phi()
  [9] call testLong 
  to:main::@return
main::@return: scope:[main]  from main::@4
  [10] return 
  to:@return

(void()) testLong()
testLong: scope:[testLong]  from main::@4
  [11] (byte*) print_char_cursor#164 ← (byte*) print_line_cursor#0
  [12] call print_str 
  to:testLong::@1
testLong::@1: scope:[testLong]  from testLong
  [13] phi()
  [14] call print_ulong 
  to:testLong::@2
testLong::@2: scope:[testLong]  from testLong::@1
  [15] phi()
  [16] call print_char 
  to:testLong::@3
testLong::@3: scope:[testLong]  from testLong::@2
  [17] phi()
  [18] call print_slong 
  to:testLong::@4
testLong::@4: scope:[testLong]  from testLong::@3
  [19] phi()
  [20] call print_char 
  to:testLong::@5
testLong::@5: scope:[testLong]  from testLong::@4
  [21] phi()
  [22] call print_slong 
  to:testLong::@6
testLong::@6: scope:[testLong]  from testLong::@5
  [23] phi()
  [24] call print_ln 
  to:testLong::@return
testLong::@return: scope:[testLong]  from testLong::@6
  [25] return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from testChar::@6 testInt::@6 testLong::@6 testShort::@6
  [26] (byte*) print_line_cursor#41 ← phi( testChar::@6/(const byte*) print_screen#0 testInt::@6/(byte*) print_line_cursor#0 testLong::@6/(byte*) print_line_cursor#0 testShort::@6/(byte*) print_line_cursor#0 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [27] (byte*) print_line_cursor#21 ← phi( print_ln/(byte*) print_line_cursor#41 print_ln::@1/(byte*) print_line_cursor#0 )
  [28] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#21 + (byte) $28
  [29] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#25) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [30] return 
  to:@return

(void()) print_slong((signed dword) print_slong::dw)
print_slong: scope:[print_slong]  from testLong::@3 testLong::@5
  [31] (signed dword) print_slong::dw#3 ← phi( testLong::@3/(const signed dword) testLong::n testLong::@5/(const signed dword) testLong::s )
  [32] if((signed dword) print_slong::dw#3<(signed byte) 0) goto print_slong::@1
  to:print_slong::@3
print_slong::@3: scope:[print_slong]  from print_slong
  [33] phi()
  [34] call print_char 
  to:print_slong::@2
print_slong::@2: scope:[print_slong]  from print_slong::@3 print_slong::@4
  [35] (signed dword) print_slong::dw#5 ← phi( print_slong::@4/(signed dword) print_slong::dw#0 print_slong::@3/(signed dword) print_slong::dw#3 )
  [36] (dword) print_ulong::dw#0 ← (dword)(signed dword) print_slong::dw#5
  [37] call print_ulong 
  to:print_slong::@return
print_slong::@return: scope:[print_slong]  from print_slong::@2
  [38] return 
  to:@return
print_slong::@1: scope:[print_slong]  from print_slong
  [39] phi()
  [40] call print_char 
  to:print_slong::@4
print_slong::@4: scope:[print_slong]  from print_slong::@1
  [41] (signed dword) print_slong::dw#0 ← - (signed dword) print_slong::dw#3
  to:print_slong::@2

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_sint::@1 print_sint::@3 print_slong::@1 print_slong::@3 print_str::@2 print_uchar print_uchar::@1 testChar::@2 testChar::@4 testInt::@2 testInt::@4 testLong::@2 testLong::@4 testShort::@2 testShort::@4
  [42] (byte*) print_char_cursor#95 ← phi( print_schar::@1/(byte*) print_char_cursor#25 print_sint::@1/(byte*) print_char_cursor#25 print_sint::@3/(byte*) print_char_cursor#25 print_slong::@1/(byte*) print_char_cursor#25 print_slong::@3/(byte*) print_char_cursor#25 print_str::@2/(byte*) print_char_cursor#1 print_uchar/(byte*) print_char_cursor#152 print_uchar::@1/(byte*) print_char_cursor#25 testChar::@2/(byte*) print_char_cursor#25 testChar::@4/(byte*) print_char_cursor#25 testInt::@2/(byte*) print_char_cursor#25 testInt::@4/(byte*) print_char_cursor#25 testLong::@2/(byte*) print_char_cursor#25 testLong::@4/(byte*) print_char_cursor#25 testShort::@2/(byte*) print_char_cursor#25 testShort::@4/(byte*) print_char_cursor#25 )
  [42] (byte) print_char::ch#17 ← phi( print_schar::@1/(byte) '-' print_sint::@1/(byte) '-' print_sint::@3/(byte) ' ' print_slong::@1/(byte) '-' print_slong::@3/(byte) ' ' print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#7 print_uchar::@1/(byte) print_char::ch#8 testChar::@2/(byte) ' ' testChar::@4/(byte) ' ' testInt::@2/(byte) ' ' testInt::@4/(byte) ' ' testLong::@2/(byte) ' ' testLong::@4/(byte) ' ' testShort::@2/(byte) ' ' testShort::@4/(byte) ' ' )
  [43] *((byte*) print_char_cursor#95) ← (byte) print_char::ch#17
  [44] (byte*) print_char_cursor#25 ← ++ (byte*) print_char_cursor#95
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [45] return 
  to:@return

(void()) print_ulong((dword) print_ulong::dw)
print_ulong: scope:[print_ulong]  from print_slong::@2 testLong::@1
  [46] (byte*) print_char_cursor#148 ← phi( print_slong::@2/(byte*) print_char_cursor#25 testLong::@1/(byte*) print_char_cursor#1 )
  [46] (dword) print_ulong::dw#2 ← phi( print_slong::@2/(dword) print_ulong::dw#0 testLong::@1/(const dword) testLong::u )
  [47] (word) print_uint::w#1 ← > (dword) print_ulong::dw#2
  [48] call print_uint 
  to:print_ulong::@1
print_ulong::@1: scope:[print_ulong]  from print_ulong
  [49] (word) print_uint::w#2 ← < (dword) print_ulong::dw#2
  [50] call print_uint 
  to:print_ulong::@return
print_ulong::@return: scope:[print_ulong]  from print_ulong::@1
  [51] return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from print_sint::@2 print_ulong print_ulong::@1 testInt::@1 testShort::@1
  [52] (byte*) print_char_cursor#147 ← phi( print_sint::@2/(byte*) print_char_cursor#25 print_ulong/(byte*) print_char_cursor#148 print_ulong::@1/(byte*) print_char_cursor#25 testInt::@1/(byte*) print_char_cursor#1 testShort::@1/(byte*) print_char_cursor#1 )
  [52] (word) print_uint::w#5 ← phi( print_sint::@2/(word) print_uint::w#0 print_ulong/(word) print_uint::w#1 print_ulong::@1/(word) print_uint::w#2 testInt::@1/(const word) testInt::u testShort::@1/(const word) testShort::u )
  [53] (byte) print_uchar::b#1 ← > (word) print_uint::w#5
  [54] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [55] (byte) print_uchar::b#2 ← < (word) print_uint::w#5
  [56] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [57] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_schar::@2 print_uint print_uint::@1 testChar::@1 testChar::@3
  [58] (byte*) print_char_cursor#152 ← phi( print_schar::@2/(byte*) print_char_cursor#25 print_uint/(byte*) print_char_cursor#147 print_uint::@1/(byte*) print_char_cursor#25 testChar::@1/(byte*) print_char_cursor#1 testChar::@3/(byte*) print_char_cursor#25 )
  [58] (byte) print_uchar::b#5 ← phi( print_schar::@2/(byte)(const signed byte) print_schar::b#0 print_uint/(byte) print_uchar::b#1 print_uint::@1/(byte) print_uchar::b#2 testChar::@1/(const byte) testChar::u testChar::@3/(const byte) testChar::n )
  [59] (byte~) print_uchar::$0 ← (byte) print_uchar::b#5 >> (byte) 4
  [60] (byte) print_char::ch#7 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [61] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [62] (byte~) print_uchar::$2 ← (byte) print_uchar::b#5 & (byte) $f
  [63] (byte) print_char::ch#8 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [64] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [65] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from testChar testInt testLong testShort
  [66] (byte*) print_char_cursor#159 ← phi( testChar/(const byte*) print_screen#0 testInt/(byte*) print_char_cursor#163 testLong/(byte*) print_char_cursor#164 testShort/(byte*) print_char_cursor#165 )
  [66] (byte*) print_str::str#8 ← phi( testChar/(const byte*) testChar::str testInt/(const byte*) testInt::str testLong/(const byte*) testLong::str testShort/(const byte*) testShort::str )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [67] (byte*) print_char_cursor#1 ← phi( print_str/(byte*) print_char_cursor#159 print_str::@3/(byte*) print_char_cursor#25 )
  [67] (byte*) print_str::str#5 ← phi( print_str/(byte*) print_str::str#8 print_str::@3/(byte*) print_str::str#0 )
  [68] if((byte) 0!=*((byte*) print_str::str#5)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [69] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [70] (byte) print_char::ch#0 ← *((byte*) print_str::str#5)
  [71] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [72] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#5
  to:print_str::@1

(void()) testInt()
testInt: scope:[testInt]  from main::@3
  [73] (byte*) print_char_cursor#163 ← (byte*) print_line_cursor#0
  [74] call print_str 
  to:testInt::@1
testInt::@1: scope:[testInt]  from testInt
  [75] phi()
  [76] call print_uint 
  to:testInt::@2
testInt::@2: scope:[testInt]  from testInt::@1
  [77] phi()
  [78] call print_char 
  to:testInt::@3
testInt::@3: scope:[testInt]  from testInt::@2
  [79] phi()
  [80] call print_sint 
  to:testInt::@4
testInt::@4: scope:[testInt]  from testInt::@3
  [81] phi()
  [82] call print_char 
  to:testInt::@5
testInt::@5: scope:[testInt]  from testInt::@4
  [83] phi()
  [84] call print_sint 
  to:testInt::@6
testInt::@6: scope:[testInt]  from testInt::@5
  [85] phi()
  [86] call print_ln 
  to:testInt::@return
testInt::@return: scope:[testInt]  from testInt::@6
  [87] return 
  to:@return

(void()) print_sint((signed word) print_sint::w)
print_sint: scope:[print_sint]  from testInt::@3 testInt::@5 testShort::@3 testShort::@5
  [88] (signed word) print_sint::w#10 ← phi( testInt::@3/(const signed word) testInt::n testInt::@5/(const signed word) testInt::s testShort::@3/(const signed word) testShort::n testShort::@5/(const signed word) testShort::s )
  [89] if((signed word) print_sint::w#10<(signed byte) 0) goto print_sint::@1
  to:print_sint::@3
print_sint::@3: scope:[print_sint]  from print_sint
  [90] phi()
  [91] call print_char 
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@3 print_sint::@4
  [92] (signed word) print_sint::w#7 ← phi( print_sint::@4/(signed word) print_sint::w#0 print_sint::@3/(signed word) print_sint::w#10 )
  [93] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#7
  [94] call print_uint 
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@2
  [95] return 
  to:@return
print_sint::@1: scope:[print_sint]  from print_sint
  [96] phi()
  [97] call print_char 
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  [98] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#10
  to:print_sint::@2

(void()) testShort()
testShort: scope:[testShort]  from main::@2
  [99] (byte*) print_char_cursor#165 ← (byte*) print_line_cursor#0
  [100] call print_str 
  to:testShort::@1
testShort::@1: scope:[testShort]  from testShort
  [101] phi()
  [102] call print_uint 
  to:testShort::@2
testShort::@2: scope:[testShort]  from testShort::@1
  [103] phi()
  [104] call print_char 
  to:testShort::@3
testShort::@3: scope:[testShort]  from testShort::@2
  [105] phi()
  [106] call print_sint 
  to:testShort::@4
testShort::@4: scope:[testShort]  from testShort::@3
  [107] phi()
  [108] call print_char 
  to:testShort::@5
testShort::@5: scope:[testShort]  from testShort::@4
  [109] phi()
  [110] call print_sint 
  to:testShort::@6
testShort::@6: scope:[testShort]  from testShort::@5
  [111] phi()
  [112] call print_ln 
  to:testShort::@return
testShort::@return: scope:[testShort]  from testShort::@6
  [113] return 
  to:@return

(void()) testChar()
testChar: scope:[testChar]  from main::@1
  [114] phi()
  [115] call print_str 
  to:testChar::@1
testChar::@1: scope:[testChar]  from testChar
  [116] phi()
  [117] call print_uchar 
  to:testChar::@2
testChar::@2: scope:[testChar]  from testChar::@1
  [118] phi()
  [119] call print_char 
  to:testChar::@3
testChar::@3: scope:[testChar]  from testChar::@2
  [120] phi()
  [121] call print_uchar 
  to:testChar::@4
testChar::@4: scope:[testChar]  from testChar::@3
  [122] phi()
  [123] call print_char 
  to:testChar::@5
testChar::@5: scope:[testChar]  from testChar::@4
  [124] phi()
  [125] call print_schar 
  to:testChar::@6
testChar::@6: scope:[testChar]  from testChar::@5
  [126] phi()
  [127] call print_ln 
  to:testChar::@return
testChar::@return: scope:[testChar]  from testChar::@6
  [128] return 
  to:@return

(void()) print_schar((signed byte) print_schar::b)
print_schar: scope:[print_schar]  from testChar::@5
  [129] phi()
  to:print_schar::@1
print_schar::@1: scope:[print_schar]  from print_schar
  [130] phi()
  [131] call print_char 
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@1
  [132] phi()
  [133] call print_uchar 
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@2
  [134] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [135] phi()
  [136] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [137] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [138] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [139] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [140] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [141] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [142] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [143] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1
