PARSING src/test/java/dk/camelot64/kickc/test/kc/c64dtv-8bppchunkystretch.kc
// C64DTV 8bpp charmode stretcher
import "c64dtv.kc"

// Plane with all pixels
const byte* CHUNKY = $8000;

void main() {
    asm { sei }  // Disable normal interrupt (prevent keyboard reading glitches and allows to hide basic/kernal)
    // Disable kernal & basic
    *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK;
    *PROCPORT = PROCPORT_RAM_IO;
    gfx_init_chunky();
    // Enable DTV extended modes
    *DTV_FEATURE = DTV_FEATURE_ENABLE;
    // 8BPP Pixel Cell Mode
    *DTV_CONTROL = DTV_HIGHCOLOR | DTV_LINEAR | DTV_COLORRAM_OFF | DTV_CHUNKY | DTV_BADLINE_OFF;
    *VIC_CONTROL = VIC_DEN | VIC_ECM | VIC_RSEL | 3;
    *VIC_CONTROL2 = VIC_MCM | VIC_CSEL;
    // Plane B: CHUNKY
    *DTV_PLANEB_START_LO = < CHUNKY;
    *DTV_PLANEB_START_MI = > CHUNKY;
    *DTV_PLANEB_START_HI = 0;
    *DTV_PLANEB_STEP = 8;
    *DTV_PLANEB_MODULO_LO = 0;
    *DTV_PLANEB_MODULO_HI = 0;
    // VIC Graphics Bank
    *CIA2_PORT_A_DDR = %00000011; // Set VIC Bank bits to output - all others to input
    *CIA2_PORT_A = %00000011 ^ (byte)((word)CHUNKY/$4000); // Set VIC Bank
    // VIC memory
    *VIC_MEMORY = (byte)((((word)CHUNKY)&$3fff)>>6)  |   ((>(((word)CHUNKY)&$3fff))>>2);

    // DTV Palette - Grey Tones
    for(byte j : 0..$f) {
        DTV_PALETTE[j] = j;
    }
    while(true) {
        // Stabilize Raster
        asm {
            ldx #$ff
        rff:
            cpx RASTER
            bne rff
        stabilize:
            nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop
            cpx RASTER
            beq eat+0
        eat:
            inx
            cpx #$08
            bne stabilize
        }

        *VIC_CONTROL = VIC_DEN | VIC_ECM | VIC_RSEL | 3;
        *BORDERCOL = 0;
        byte rst = $42;
        while(*RASTER!=rst) {}
        asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop }
        do {
            rst = *RASTER;
            *VIC_CONTROL = VIC_DEN | VIC_ECM | VIC_RSEL | (rst&7);
            *BORDERCOL = rst<<4;
            asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop }
        } while (rst!=$f2);
    }
}

// Initialize Plane with 8bpp chunky
void gfx_init_chunky() {
    // 320x200 8bpp pixels for Plane
    byte gfxbCpuBank = (byte)(CHUNKY/$4000);
    dtvSetCpuBankSegment1(gfxbCpuBank++);
    byte* gfxb = $4000;
    for(byte y : 0..50) {
        for (word x : 0..319) {
            // If we have crossed to $8000 increase the CPU BANK segment and reset to $4000
            if(gfxb==$8000) {
                dtvSetCpuBankSegment1(gfxbCpuBank++);
                gfxb = $4000;
            }
            byte c = (byte)(x+y);
            *gfxb++ = c;
        }
    }
    // Reset CPU BANK segment to $4000
    dtvSetCpuBankSegment1((byte)($4000/$4000));
}

Importing c64dtv.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/c64dtv.kc
// C64 DTV version 2 Registers and Constants
//
// Sources
// (J) https://www.c64-wiki.com/wiki/C64DTV_Programming_Guide
// (H) http://dtvhacking.cbm8bit.com/dtv_wiki/images/d/d9/Dtv_registers_full.txt

import "c64.kc"

// Feature enables or disables the extra C64 DTV features
const byte* DTV_FEATURE = $d03f;
const byte DTV_FEATURE_ENABLE = 1;
const byte DTV_FEATURE_DISABLE_TIL_RESET = 2;

// Controls the graphics modes of the C64 DTV
const byte* DTV_CONTROL = $d03c;
const byte DTV_LINEAR = $01;
const byte DTV_BORDER_OFF = $02;
const byte DTV_HIGHCOLOR = $04;
const byte DTV_OVERSCAN = $08;
const byte DTV_COLORRAM_OFF = $10;
const byte DTV_BADLINE_OFF = $20;
const byte DTV_CHUNKY = $40;

// Defines colors for the 16 first colors ($00-$0f)
const byte* DTV_PALETTE = $d200;

// Default vallues for the palette
byte[16] DTV_PALETTE_DEFAULT = { $00, $0f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, $05, $07, $df, $9a, $0a };

// Linear Graphics Plane A Counter Control
const byte* DTV_PLANEA_START_LO = $d03a;
const byte* DTV_PLANEA_START_MI = $d03b;
const byte* DTV_PLANEA_START_HI = $d045;
const byte* DTV_PLANEA_STEP = $d046;
const byte* DTV_PLANEA_MODULO_LO = $d038;
const byte* DTV_PLANEA_MODULO_HI = $d039;

// Linear Graphics Plane B Counter Control
const byte* DTV_PLANEB_START_LO = $d049;
const byte* DTV_PLANEB_START_MI = $d04a;
const byte* DTV_PLANEB_START_HI = $d04b;
const byte* DTV_PLANEB_STEP = $d04c;
const byte* DTV_PLANEB_MODULO_LO = $d047;
const byte* DTV_PLANEB_MODULO_HI = $d048;

// Select memory bank where sprite data is fetched from (bits 5:0) - source only (J)
// Memory address of Sprite RAM is SpriteBank*$10000
const byte* DTV_SPRITE_BANK = $d04d;

// Select memory bank where color data is fetched from (bits 11:0)
// Memory address of Color RAM is ColorBank*$400
const byte* DTV_COLOR_BANK_LO = $d036;
const byte* DTV_COLOR_BANK_HI = $d037;

const dword DTV_COLOR_BANK_DEFAULT = $1d800;

// Selects memory bank for normal VIC color mode and lower data for high color modes. (bits 5:0)
// Memory address of VIC Graphics is GraphicsBank*$10000
const byte* DTV_GRAPHICS_VIC_BANK = $d03d;
// Selects memory bank for upper data for high color modes. (bits 5:0) - source only (H)
const byte* DTV_GRAPHICS_HICOL_BANK = $d03e;

// Set the memory pointed to by CPU BANK 1 SEGMENT ($4000-$7fff)
// This sets which actual memory is addressed when the CPU reads/writes to $4000-$7fff
// The actual memory addressed will be $4000*cpuSegmentIdx
void dtvSetCpuBankSegment1(byte cpuBankIdx) {
    // Move CPU BANK 1 SEGMENT ($4000-$7fff)
    byte* cpuBank = $ff;
    *cpuBank = cpuBankIdx;
    asm {
        // SAC $dd - A register points to 13 BANK 1 segment
        .byte $32, $dd
        // LDA $ff - Set CPU BANK 1 SEGMENT ($4000-$7fff) to ($ff)*$4000
        lda $ff
        // SAC $00 - A register points to 0 ACCUMULATOR
        .byte $32, $00
    }
}

// Blitter Source A Start
const byte* DTV_BLITTER_SRCA_LO = $d320;
const byte* DTV_BLITTER_SRCA_MI = $d321;
const byte* DTV_BLITTER_SRCA_HI = $d322;
// Blitter Source A Modulo
const byte* DTV_BLITTER_SRCA_MOD_LO = $d323;
const byte* DTV_BLITTER_SRCA_MOD_HI = $d324;
// Blitter Source A Line Length
const byte* DTV_BLITTER_SRCA_LIN_LO = $d325;
const byte* DTV_BLITTER_SRCA_LIN_HI = $d326;
// Blitter Source A Step ([7:4] integral part, [3:0] fractional part)
const byte* DTV_BLITTER_SRCA_STEP = $d327;
// Blitter Source B Start
const byte* DTV_BLITTER_SRCB_LO = $d328;
const byte* DTV_BLITTER_SRCB_MI = $d329;
const byte* DTV_BLITTER_SRCB_HI = $d32a;
// Blitter Source B Modulo
const byte* DTV_BLITTER_SRCB_MOD_LO = $d32b;
const byte* DTV_BLITTER_SRCB_MOD_HI = $d32c;
// Blitter Source B Line Length
const byte* DTV_BLITTER_SRCB_LIN_LO = $d32d;
const byte* DTV_BLITTER_SRCB_LIN_HI = $d32e;
// Blitter Source B Step ([7:4] integral part, [3:0] fractional part)
const byte* DTV_BLITTER_SRCB_STEP = $d32f;
// Blitter Destination Start
const byte* DTV_BLITTER_DEST_LO = $d330;
const byte* DTV_BLITTER_DEST_MI = $d331;
const byte* DTV_BLITTER_DEST_HI = $d332;
// Blitter Source B Modulo
const byte* DTV_BLITTER_DEST_MOD_LO = $d333;
const byte* DTV_BLITTER_DEST_MOD_HI = $d334;
// Blitter Source B Line Length
const byte* DTV_BLITTER_DEST_LIN_LO = $d335;
const byte* DTV_BLITTER_DEST_LIN_HI = $d336;
// Blitter Source B Step ([7:4] integral part, [3:0] fractional part)
const byte* DTV_BLITTER_DEST_STEP = $d337;
// Blitter Blit Length
const byte* DTV_BLITTER_LEN_LO = $d338;
const byte* DTV_BLITTER_LEN_HI = $d339;
// Blitter Control
const byte* DTV_BLITTER_CONTROL = $d33a;
// Bit[0] Force Start Strobe when set
const byte  DTV_BLIT_FORCE_START    = %00000001;
// Bit[1] Source A Direction Positive when set
const byte  DTV_BLIT_SRCA_FWD       = %00000010;
// Bit[2] Source B Direction Positive when set
const byte  DTV_BLIT_SRCB_FWD       = %00000100;
// Bit[3] Destination Direction Positive when set
const byte  DTV_BLIT_DEST_FWD       = %00001000;
// Bit[4] VIC IRQ Start when set
const byte  DTV_BLIT_VIC_IRQ        = %00010000;
// Bit[5] CIA IRQ Start when set($DCXX CIA)
const byte  DTV_BLIT_CIA_IRQ        = %00100000;
// Bit[6] V Blank Start when set
const byte  DTV_BLIT_VBLANK         = %01000000;
// Bit[7] Blitter IRQ Enable when set
const byte  DTV_BLIT_IRQ_EN         = %10000000;
// Blitter Transparency
const byte* DTV_BLITTER_TRANSPARANCY = $d33b;
// Bit[0]   Disable Channel B.
// (data into b port of ALU is forced to %00000000. ALU functions as normal)
const byte  DTV_BLIT_DISABLE_B          = %00000001;
// Bit[1]   Write Transparent Data when set
//(Data will be written if source a data *IS* %00000000.  This can be used with channel b and ALU set to OR to write Data masked by source A.) Cycles will be saved if No writes.
const byte  DTV_BLIT_WRITE_TRANSPARENT     = %00000010;
// Bit[2]   Write Non Transparent
// when set (Data will be written if SourceA fetched data is *NOT* %00000000.  This may be used combined with channel b data and/or ALU) Cycles will be Saved if no write. Bit[2]==Bit[1]==0: write in any case
const byte  DTV_BLIT_WRITE_NONTRANSPARENT  = %00000100;
// No transparancy
// Bit[2]==Bit[1]==0: write in any case
const byte  DTV_BLIT_TRANSPARANCY_NONE     = %00000000;
// Controls the ALU operation
byte* DTV_BLITTER_ALU = $d33e;
// Bit[2:0] Source A right Shift: 000 SourceA Data,  001 LastA[0],SourceA[7:1], ...,  111 LastA[6:0],SourceA[7]
const byte DTV_BLIT_SHIFT0  = %00000000;
const byte DTV_BLIT_SHIFT1  = %00000001;
const byte DTV_BLIT_SHIFT2  = %00000010;
const byte DTV_BLIT_SHIFT3  = %00000011;
const byte DTV_BLIT_SHIFT4  = %00000100;
const byte DTV_BLIT_SHIFT5  = %00000101;
const byte DTV_BLIT_SHIFT6  = %00000110;
const byte DTV_BLIT_SHIFT7  = %00000111;
// Bit[5:3] Minterms/ALU
const byte DTV_BLIT_AND     = %00000000;
const byte DTV_BLIT_NAND    = %00001000;
const byte DTV_BLIT_NOR     = %00010000;
const byte DTV_BLIT_OR      = %00011000;
const byte DTV_BLIT_XOR     = %00100000;
const byte DTV_BLIT_XNOR    = %00101000;
const byte DTV_BLIT_ADD     = %00110000;
const byte DTV_BLIT_SUB     = %00111000;
// Blitter Control 2
const byte* DTV_BLITTER_CONTROL2 = $d33f;
// Bit[0] Clear Blitter IRQ
const byte  DTV_BLIT_CLEAR_IRQ      = %00000001;
// Bit[1] Source A Continue
const byte  DTV_BLIT_SRCA_CONT      = %00000010;
// Bit[2] Source B Continue
const byte  DTV_BLIT_SRCB_CONT      = %00000100;
// Bit[3] Destination Continue
const byte  DTV_BLIT_DEST_CONT      = %00001000;
// Bit[0] Busy when set (When reading)
const byte  DTV_BLIT_STATUS_BUSY    = %00000001;
// Bit[1] IRQ when set (When reading)
const byte  DTV_BLIT_STATUS_IRQ     = %00000010;

Importing c64.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/c64.kc
// Commodore 64 Registers and Constants

// Processor port data direction register
const byte* PROCPORT_DDR = $00;
// Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
const byte PROCPORT_DDR_MEMORY_MASK = %00000111;

// Processor Port Register controlling RAM/ROM configuration and the datasette
const byte* PROCPORT = $01;
// RAM in all three areas $A000, $D000, $E000
const byte PROCPORT_RAM_ALL         = %00110000;
// RAM in $A000, $E000 I/O in $D000
const byte PROCPORT_RAM_IO          = %00110101;
// RAM in $A000, $E000 CHAR ROM in $D000
const byte PROCPORT_RAM_CHARROM     = %00110001;
// RAM in $A000, I/O in $D000, KERNEL in $E000
const byte PROCPORT_KERNEL_IO       = %00110110;
// BASIC in $A000, I/O in $D000, KERNEL in $E000
const byte PROCPORT_BASIC_KERNEL_IO = %00110111;

const byte* CHARGEN = $d000;

const byte* SPRITES_XPOS = $d000;
const byte* SPRITES_YPOS = $d001;
const byte* SPRITES_XMSB = $d010;
const byte* RASTER = $d012;
const byte* SPRITES_ENABLE = $d015;
const byte* SPRITES_EXPAND_Y = $d017;
const byte* SPRITES_PRIORITY = $d01b;
const byte* SPRITES_MC = $d01c;
const byte* SPRITES_EXPAND_X = $d01d;
const byte* BORDERCOL = $d020;
const byte* BGCOL = $d021;
const byte* BGCOL1 = $d021;
const byte* BGCOL2 = $d022;
const byte* BGCOL3 = $d023;
const byte* BGCOL4 = $d024;
const byte* SPRITES_MC1 = $d025;
const byte* SPRITES_MC2 = $d026;
const byte* SPRITES_COLS = $d027;

const byte* VIC_CONTROL = $d011;
const byte* D011 = $d011;
const byte VIC_RST8 = %10000000;
const byte VIC_ECM =  %01000000;
const byte VIC_BMM =  %00100000;
const byte VIC_DEN =  %00010000;
const byte VIC_RSEL = %00001000;

const byte* VIC_CONTROL2 = $d016;
const byte* D016 = $d016;
const byte VIC_MCM =  %00010000;
const byte VIC_CSEL = %00001000;

const byte* D018 = $d018;
const byte* VIC_MEMORY = $d018;

const byte* IRQ_STATUS = $d019;
const byte* IRQ_ENABLE = $d01a;
const byte IRQ_RASTER = %00000001;
const byte IRQ_COLLISION_BG = %00000010;
const byte IRQ_COLLISION_SPRITE = %00000100;
const byte IRQ_LIGHTPEN = %00001000;

const byte* COLS = $d800;

// CIA#1 Port A: keyboard matrix columns and joystick #2
const byte* CIA1_PORT_A = $dc00;
// CIA#1 Port B: keyboard matrix rows and joystick #1.
const byte* CIA1_PORT_B = $dc01;
// CIA #1 Port A data direction register.
const byte* CIA1_PORT_A_DDR = $dc02;
// CIA #1 Port B data direction register.
const byte* CIA1_PORT_B_DDR = $dc03;
// CIA#1 Interrupt Status & Control Register
const byte* CIA1_INTERRUPT = $dc0d;
// Value that disables all CIA interrupts when stored to the CIA Interrupt registers
const byte CIA_INTERRUPT_CLEAR = $7f;

// CIA#2 Port A: Serial bus, RS-232, VIC memory bank
const byte* CIA2_PORT_A = $dd00;
// CIA#2 Port B: RS-232
const byte* CIA2_PORT_B = $dd01;
// CIA #2 Port A data direction register.
const byte* CIA2_PORT_A_DDR = $dd02;
// CIA #2 Port B data direction register.
const byte* CIA2_PORT_B_DDR = $dd03;
// CIA#2 Interrupt Status & Control Register
const byte* CIA2_INTERRUPT = $dd0d;

// The vector used when the KERNAL serves IRQ interrupts
const void()** KERNEL_IRQ = $0314;

// The vector used when the HARDWARE serves IRQ interrupts
const void()** HARDWARE_IRQ = $fffe;

const byte BLACK = $0;
const byte WHITE = $1;
const byte RED = $2;
const byte CYAN = $3;
const byte PURPLE = $4;
const byte GREEN = $5;
const byte BLUE = $6;
const byte YELLOW = $7;
const byte ORANGE = $8;
const byte BROWN = $9;
const byte PINK = $a;
const byte DARK_GREY= $b;
const byte GREY = $c;
const byte LIGHT_GREEN = $d;
const byte LIGHT_BLUE = $e;
const byte LIGHT_GREY = $f;

// Get the value to store into D018 to display a specific screen and charset/bitmap
// Optimized for ASM from (byte)((((word)screen&$3fff)/$40)|(((word)charset&$3fff)/$400));
inline byte toD018(byte* screen, byte* gfx) {
    return (>((((word)screen&$3fff)<<2)))|(((>((word)gfx))>>2)&$f);
}

// Get the value to store into DD00 (CIA 2 port A) to choose a specific VIC bank
// Optimized for ASM from %00000011 ^ (byte)((word)gfx/$4000)
inline byte toDd00(byte* gfx) {
    return %00000011 ^ (>((word)gfx))>>6;
}

// Select a specific VIC graphics bank by setting the CIA 2 port A ($dd00) as needed
inline void vicSelectGfxBank(byte* gfx) {
    *CIA2_PORT_A_DDR = %00000011;
    *CIA2_PORT_A = toDd00(gfx);
}

Adding pre/post-modifier (byte) gfx_init_chunky::gfxbCpuBank ← ++ (byte) gfx_init_chunky::gfxbCpuBank
Adding pre/post-modifier (byte) gfx_init_chunky::gfxbCpuBank ← ++ (byte) gfx_init_chunky::gfxbCpuBank
Adding pre/post-modifier (byte*) gfx_init_chunky::gfxb ← ++ (byte*) gfx_init_chunky::gfxb
SYMBOLS
(label) @1
(label) @2
(label) @3
(label) @4
(label) @5
(label) @6
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL1
(byte*) BGCOL2
(byte*) BGCOL3
(byte*) BGCOL4
(byte) BLACK
(byte) BLUE
(byte*) BORDERCOL
(byte) BROWN
(byte*) CHARGEN
(byte*) CHUNKY
(byte*) CIA1_INTERRUPT
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_INTERRUPT
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte) CIA_INTERRUPT_CLEAR
(byte*) COLS
(byte) CYAN
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DARK_GREY
(byte) DTV_BADLINE_OFF
(byte*) DTV_BLITTER_ALU
(byte*) DTV_BLITTER_CONTROL
(byte*) DTV_BLITTER_CONTROL2
(byte*) DTV_BLITTER_DEST_HI
(byte*) DTV_BLITTER_DEST_LIN_HI
(byte*) DTV_BLITTER_DEST_LIN_LO
(byte*) DTV_BLITTER_DEST_LO
(byte*) DTV_BLITTER_DEST_MI
(byte*) DTV_BLITTER_DEST_MOD_HI
(byte*) DTV_BLITTER_DEST_MOD_LO
(byte*) DTV_BLITTER_DEST_STEP
(byte*) DTV_BLITTER_LEN_HI
(byte*) DTV_BLITTER_LEN_LO
(byte*) DTV_BLITTER_SRCA_HI
(byte*) DTV_BLITTER_SRCA_LIN_HI
(byte*) DTV_BLITTER_SRCA_LIN_LO
(byte*) DTV_BLITTER_SRCA_LO
(byte*) DTV_BLITTER_SRCA_MI
(byte*) DTV_BLITTER_SRCA_MOD_HI
(byte*) DTV_BLITTER_SRCA_MOD_LO
(byte*) DTV_BLITTER_SRCA_STEP
(byte*) DTV_BLITTER_SRCB_HI
(byte*) DTV_BLITTER_SRCB_LIN_HI
(byte*) DTV_BLITTER_SRCB_LIN_LO
(byte*) DTV_BLITTER_SRCB_LO
(byte*) DTV_BLITTER_SRCB_MI
(byte*) DTV_BLITTER_SRCB_MOD_HI
(byte*) DTV_BLITTER_SRCB_MOD_LO
(byte*) DTV_BLITTER_SRCB_STEP
(byte*) DTV_BLITTER_TRANSPARANCY
(byte) DTV_BLIT_ADD
(byte) DTV_BLIT_AND
(byte) DTV_BLIT_CIA_IRQ
(byte) DTV_BLIT_CLEAR_IRQ
(byte) DTV_BLIT_DEST_CONT
(byte) DTV_BLIT_DEST_FWD
(byte) DTV_BLIT_DISABLE_B
(byte) DTV_BLIT_FORCE_START
(byte) DTV_BLIT_IRQ_EN
(byte) DTV_BLIT_NAND
(byte) DTV_BLIT_NOR
(byte) DTV_BLIT_OR
(byte) DTV_BLIT_SHIFT0
(byte) DTV_BLIT_SHIFT1
(byte) DTV_BLIT_SHIFT2
(byte) DTV_BLIT_SHIFT3
(byte) DTV_BLIT_SHIFT4
(byte) DTV_BLIT_SHIFT5
(byte) DTV_BLIT_SHIFT6
(byte) DTV_BLIT_SHIFT7
(byte) DTV_BLIT_SRCA_CONT
(byte) DTV_BLIT_SRCA_FWD
(byte) DTV_BLIT_SRCB_CONT
(byte) DTV_BLIT_SRCB_FWD
(byte) DTV_BLIT_STATUS_BUSY
(byte) DTV_BLIT_STATUS_IRQ
(byte) DTV_BLIT_SUB
(byte) DTV_BLIT_TRANSPARANCY_NONE
(byte) DTV_BLIT_VBLANK
(byte) DTV_BLIT_VIC_IRQ
(byte) DTV_BLIT_WRITE_NONTRANSPARENT
(byte) DTV_BLIT_WRITE_TRANSPARENT
(byte) DTV_BLIT_XNOR
(byte) DTV_BLIT_XOR
(byte) DTV_BORDER_OFF
(byte) DTV_CHUNKY
(byte) DTV_COLORRAM_OFF
(dword) DTV_COLOR_BANK_DEFAULT
(byte*) DTV_COLOR_BANK_HI
(byte*) DTV_COLOR_BANK_LO
(byte*) DTV_CONTROL
(byte*) DTV_FEATURE
(byte) DTV_FEATURE_DISABLE_TIL_RESET
(byte) DTV_FEATURE_ENABLE
(byte*) DTV_GRAPHICS_HICOL_BANK
(byte*) DTV_GRAPHICS_VIC_BANK
(byte) DTV_HIGHCOLOR
(byte) DTV_LINEAR
(byte) DTV_OVERSCAN
(byte*) DTV_PALETTE
(byte[16]) DTV_PALETTE_DEFAULT
(byte*) DTV_PLANEA_MODULO_HI
(byte*) DTV_PLANEA_MODULO_LO
(byte*) DTV_PLANEA_START_HI
(byte*) DTV_PLANEA_START_LO
(byte*) DTV_PLANEA_START_MI
(byte*) DTV_PLANEA_STEP
(byte*) DTV_PLANEB_MODULO_HI
(byte*) DTV_PLANEB_MODULO_LO
(byte*) DTV_PLANEB_START_HI
(byte*) DTV_PLANEB_START_LO
(byte*) DTV_PLANEB_START_MI
(byte*) DTV_PLANEB_STEP
(byte*) DTV_SPRITE_BANK
(byte) GREEN
(byte) GREY
(void()**) HARDWARE_IRQ
(byte) IRQ_COLLISION_BG
(byte) IRQ_COLLISION_SPRITE
(byte*) IRQ_ENABLE
(byte) IRQ_LIGHTPEN
(byte) IRQ_RASTER
(byte*) IRQ_STATUS
(void()**) KERNEL_IRQ
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte) LIGHT_GREY
(byte) ORANGE
(byte) PINK
(byte*) PROCPORT
(byte) PROCPORT_BASIC_KERNEL_IO
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(byte) PURPLE
(byte*) RASTER
(byte) RED
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_MC
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(byte) VIC_BMM
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(byte) VIC_RST8
(byte) WHITE
(byte) YELLOW
(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
(label) dtvSetCpuBankSegment1::@return
(byte*) dtvSetCpuBankSegment1::cpuBank
(byte) dtvSetCpuBankSegment1::cpuBankIdx
(void()) gfx_init_chunky()
(byte*~) gfx_init_chunky::$0
(byte~) gfx_init_chunky::$1
(byte/signed byte/word/signed word/dword/signed dword~) gfx_init_chunky::$10
(byte~) gfx_init_chunky::$11
(void~) gfx_init_chunky::$12
(void~) gfx_init_chunky::$2
(bool~) gfx_init_chunky::$3
(bool~) gfx_init_chunky::$4
(void~) gfx_init_chunky::$5
(word~) gfx_init_chunky::$6
(byte~) gfx_init_chunky::$7
(bool~) gfx_init_chunky::$8
(bool~) gfx_init_chunky::$9
(label) gfx_init_chunky::@1
(label) gfx_init_chunky::@2
(label) gfx_init_chunky::@3
(label) gfx_init_chunky::@4
(label) gfx_init_chunky::@5
(label) gfx_init_chunky::@6
(label) gfx_init_chunky::@return
(byte) gfx_init_chunky::c
(byte*) gfx_init_chunky::gfxb
(byte) gfx_init_chunky::gfxbCpuBank
(word) gfx_init_chunky::x
(byte) gfx_init_chunky::y
(void()) main()
(void~) main::$0
(byte~) main::$1
(byte~) main::$10
(word~) main::$11
(word/signed dword/dword~) main::$12
(byte~) main::$13
(byte/word/dword~) main::$14
(word~) main::$15
(word~) main::$16
(word~) main::$17
(byte~) main::$18
(word~) main::$19
(byte~) main::$2
(word~) main::$20
(byte~) main::$21
(byte~) main::$22
(byte~) main::$23
(bool~) main::$24
(byte~) main::$25
(byte~) main::$26
(byte/word/dword~) main::$27
(bool~) main::$28
(byte~) main::$29
(byte~) main::$3
(byte~) main::$30
(byte~) main::$31
(byte~) main::$32
(byte~) main::$33
(bool~) main::$34
(byte~) main::$4
(byte~) main::$5
(byte~) main::$6
(byte/word/dword~) main::$7
(byte~) main::$8
(byte~) main::$9
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::j
(byte) main::rst
inline (byte()) toD018((byte*) toD018::screen , (byte*) toD018::gfx)
(word~) toD018::$0
(word~) toD018::$1
(word~) toD018::$2
(byte~) toD018::$3
(word~) toD018::$4
(byte~) toD018::$5
(byte~) toD018::$6
(byte~) toD018::$7
(byte~) toD018::$8
(label) toD018::@1
(label) toD018::@return
(byte*) toD018::gfx
(byte) toD018::return
(byte*) toD018::screen
inline (byte()) toDd00((byte*) toDd00::gfx)
(word~) toDd00::$0
(byte~) toDd00::$1
(byte~) toDd00::$2
(byte/word/dword~) toDd00::$3
(label) toDd00::@1
(label) toDd00::@return
(byte*) toDd00::gfx
(byte) toDd00::return
inline (void()) vicSelectGfxBank((byte*) vicSelectGfxBank::gfx)
(byte~) vicSelectGfxBank::$0
(label) vicSelectGfxBank::@return
(byte*) vicSelectGfxBank::gfx

Promoting byte/signed byte/word/signed word/dword/signed dword to byte* in PROCPORT_DDR ← ((byte*)) 0
Promoting byte/signed byte/word/signed word/dword/signed dword to byte* in PROCPORT ← ((byte*)) 1
Promoting word/dword/signed dword to byte* in CHARGEN ← ((byte*)) 53248
Promoting word/dword/signed dword to byte* in SPRITES_XPOS ← ((byte*)) 53248
Promoting word/dword/signed dword to byte* in SPRITES_YPOS ← ((byte*)) 53249
Promoting word/dword/signed dword to byte* in SPRITES_XMSB ← ((byte*)) 53264
Promoting word/dword/signed dword to byte* in RASTER ← ((byte*)) 53266
Promoting word/dword/signed dword to byte* in SPRITES_ENABLE ← ((byte*)) 53269
Promoting word/dword/signed dword to byte* in SPRITES_EXPAND_Y ← ((byte*)) 53271
Promoting word/dword/signed dword to byte* in SPRITES_PRIORITY ← ((byte*)) 53275
Promoting word/dword/signed dword to byte* in SPRITES_MC ← ((byte*)) 53276
Promoting word/dword/signed dword to byte* in SPRITES_EXPAND_X ← ((byte*)) 53277
Promoting word/dword/signed dword to byte* in BORDERCOL ← ((byte*)) 53280
Promoting word/dword/signed dword to byte* in BGCOL ← ((byte*)) 53281
Promoting word/dword/signed dword to byte* in BGCOL1 ← ((byte*)) 53281
Promoting word/dword/signed dword to byte* in BGCOL2 ← ((byte*)) 53282
Promoting word/dword/signed dword to byte* in BGCOL3 ← ((byte*)) 53283
Promoting word/dword/signed dword to byte* in BGCOL4 ← ((byte*)) 53284
Promoting word/dword/signed dword to byte* in SPRITES_MC1 ← ((byte*)) 53285
Promoting word/dword/signed dword to byte* in SPRITES_MC2 ← ((byte*)) 53286
Promoting word/dword/signed dword to byte* in SPRITES_COLS ← ((byte*)) 53287
Promoting word/dword/signed dword to byte* in VIC_CONTROL ← ((byte*)) 53265
Promoting word/dword/signed dword to byte* in D011 ← ((byte*)) 53265
Promoting word/dword/signed dword to byte* in VIC_CONTROL2 ← ((byte*)) 53270
Promoting word/dword/signed dword to byte* in D016 ← ((byte*)) 53270
Promoting word/dword/signed dword to byte* in D018 ← ((byte*)) 53272
Promoting word/dword/signed dword to byte* in VIC_MEMORY ← ((byte*)) 53272
Promoting word/dword/signed dword to byte* in IRQ_STATUS ← ((byte*)) 53273
Promoting word/dword/signed dword to byte* in IRQ_ENABLE ← ((byte*)) 53274
Promoting word/dword/signed dword to byte* in COLS ← ((byte*)) 55296
Promoting word/dword/signed dword to byte* in CIA1_PORT_A ← ((byte*)) 56320
Promoting word/dword/signed dword to byte* in CIA1_PORT_B ← ((byte*)) 56321
Promoting word/dword/signed dword to byte* in CIA1_PORT_A_DDR ← ((byte*)) 56322
Promoting word/dword/signed dword to byte* in CIA1_PORT_B_DDR ← ((byte*)) 56323
Promoting word/dword/signed dword to byte* in CIA1_INTERRUPT ← ((byte*)) 56333
Promoting word/dword/signed dword to byte* in CIA2_PORT_A ← ((byte*)) 56576
Promoting word/dword/signed dword to byte* in CIA2_PORT_B ← ((byte*)) 56577
Promoting word/dword/signed dword to byte* in CIA2_PORT_A_DDR ← ((byte*)) 56578
Promoting word/dword/signed dword to byte* in CIA2_PORT_B_DDR ← ((byte*)) 56579
Promoting word/dword/signed dword to byte* in CIA2_INTERRUPT ← ((byte*)) 56589
Promoting word/signed word/dword/signed dword to void()** in KERNEL_IRQ ← ((void()**)) 788
Promoting word/dword/signed dword to void()** in HARDWARE_IRQ ← ((void()**)) 65534
Promoting word/dword/signed dword to byte* in DTV_FEATURE ← ((byte*)) 53311
Promoting word/dword/signed dword to byte* in DTV_CONTROL ← ((byte*)) 53308
Promoting word/dword/signed dword to byte* in DTV_PALETTE ← ((byte*)) 53760
Promoting word/dword/signed dword to byte* in DTV_PLANEA_START_LO ← ((byte*)) 53306
Promoting word/dword/signed dword to byte* in DTV_PLANEA_START_MI ← ((byte*)) 53307
Promoting word/dword/signed dword to byte* in DTV_PLANEA_START_HI ← ((byte*)) 53317
Promoting word/dword/signed dword to byte* in DTV_PLANEA_STEP ← ((byte*)) 53318
Promoting word/dword/signed dword to byte* in DTV_PLANEA_MODULO_LO ← ((byte*)) 53304
Promoting word/dword/signed dword to byte* in DTV_PLANEA_MODULO_HI ← ((byte*)) 53305
Promoting word/dword/signed dword to byte* in DTV_PLANEB_START_LO ← ((byte*)) 53321
Promoting word/dword/signed dword to byte* in DTV_PLANEB_START_MI ← ((byte*)) 53322
Promoting word/dword/signed dword to byte* in DTV_PLANEB_START_HI ← ((byte*)) 53323
Promoting word/dword/signed dword to byte* in DTV_PLANEB_STEP ← ((byte*)) 53324
Promoting word/dword/signed dword to byte* in DTV_PLANEB_MODULO_LO ← ((byte*)) 53319
Promoting word/dword/signed dword to byte* in DTV_PLANEB_MODULO_HI ← ((byte*)) 53320
Promoting word/dword/signed dword to byte* in DTV_SPRITE_BANK ← ((byte*)) 53325
Promoting word/dword/signed dword to byte* in DTV_COLOR_BANK_LO ← ((byte*)) 53302
Promoting word/dword/signed dword to byte* in DTV_COLOR_BANK_HI ← ((byte*)) 53303
Promoting word/dword/signed dword to byte* in DTV_GRAPHICS_VIC_BANK ← ((byte*)) 53309
Promoting word/dword/signed dword to byte* in DTV_GRAPHICS_HICOL_BANK ← ((byte*)) 53310
Promoting byte/word/signed word/dword/signed dword to byte* in dtvSetCpuBankSegment1::cpuBank ← ((byte*)) 255
Promoting word/dword/signed dword to byte* in DTV_BLITTER_SRCA_LO ← ((byte*)) 54048
Promoting word/dword/signed dword to byte* in DTV_BLITTER_SRCA_MI ← ((byte*)) 54049
Promoting word/dword/signed dword to byte* in DTV_BLITTER_SRCA_HI ← ((byte*)) 54050
Promoting word/dword/signed dword to byte* in DTV_BLITTER_SRCA_MOD_LO ← ((byte*)) 54051
Promoting word/dword/signed dword to byte* in DTV_BLITTER_SRCA_MOD_HI ← ((byte*)) 54052
Promoting word/dword/signed dword to byte* in DTV_BLITTER_SRCA_LIN_LO ← ((byte*)) 54053
Promoting word/dword/signed dword to byte* in DTV_BLITTER_SRCA_LIN_HI ← ((byte*)) 54054
Promoting word/dword/signed dword to byte* in DTV_BLITTER_SRCA_STEP ← ((byte*)) 54055
Promoting word/dword/signed dword to byte* in DTV_BLITTER_SRCB_LO ← ((byte*)) 54056
Promoting word/dword/signed dword to byte* in DTV_BLITTER_SRCB_MI ← ((byte*)) 54057
Promoting word/dword/signed dword to byte* in DTV_BLITTER_SRCB_HI ← ((byte*)) 54058
Promoting word/dword/signed dword to byte* in DTV_BLITTER_SRCB_MOD_LO ← ((byte*)) 54059
Promoting word/dword/signed dword to byte* in DTV_BLITTER_SRCB_MOD_HI ← ((byte*)) 54060
Promoting word/dword/signed dword to byte* in DTV_BLITTER_SRCB_LIN_LO ← ((byte*)) 54061
Promoting word/dword/signed dword to byte* in DTV_BLITTER_SRCB_LIN_HI ← ((byte*)) 54062
Promoting word/dword/signed dword to byte* in DTV_BLITTER_SRCB_STEP ← ((byte*)) 54063
Promoting word/dword/signed dword to byte* in DTV_BLITTER_DEST_LO ← ((byte*)) 54064
Promoting word/dword/signed dword to byte* in DTV_BLITTER_DEST_MI ← ((byte*)) 54065
Promoting word/dword/signed dword to byte* in DTV_BLITTER_DEST_HI ← ((byte*)) 54066
Promoting word/dword/signed dword to byte* in DTV_BLITTER_DEST_MOD_LO ← ((byte*)) 54067
Promoting word/dword/signed dword to byte* in DTV_BLITTER_DEST_MOD_HI ← ((byte*)) 54068
Promoting word/dword/signed dword to byte* in DTV_BLITTER_DEST_LIN_LO ← ((byte*)) 54069
Promoting word/dword/signed dword to byte* in DTV_BLITTER_DEST_LIN_HI ← ((byte*)) 54070
Promoting word/dword/signed dword to byte* in DTV_BLITTER_DEST_STEP ← ((byte*)) 54071
Promoting word/dword/signed dword to byte* in DTV_BLITTER_LEN_LO ← ((byte*)) 54072
Promoting word/dword/signed dword to byte* in DTV_BLITTER_LEN_HI ← ((byte*)) 54073
Promoting word/dword/signed dword to byte* in DTV_BLITTER_CONTROL ← ((byte*)) 54074
Promoting word/dword/signed dword to byte* in DTV_BLITTER_TRANSPARANCY ← ((byte*)) 54075
Promoting word/dword/signed dword to byte* in DTV_BLITTER_ALU ← ((byte*)) 54078
Promoting word/dword/signed dword to byte* in DTV_BLITTER_CONTROL2 ← ((byte*)) 54079
Promoting word/dword/signed dword to byte* in CHUNKY ← ((byte*)) 32768
Promoting word/signed word/dword/signed dword to byte* in gfx_init_chunky::gfxb ← ((byte*)) 16384
Promoting word/signed word/dword/signed dword to byte* in gfx_init_chunky::gfxb ← ((byte*)) 16384
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) PROCPORT_DDR ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) PROCPORT_DDR_MEMORY_MASK ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte*) PROCPORT ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) PROCPORT_RAM_ALL ← (byte/signed byte/word/signed word/dword/signed dword) 48
  (byte) PROCPORT_RAM_IO ← (byte/signed byte/word/signed word/dword/signed dword) 53
  (byte) PROCPORT_RAM_CHARROM ← (byte/signed byte/word/signed word/dword/signed dword) 49
  (byte) PROCPORT_KERNEL_IO ← (byte/signed byte/word/signed word/dword/signed dword) 54
  (byte) PROCPORT_BASIC_KERNEL_IO ← (byte/signed byte/word/signed word/dword/signed dword) 55
  (byte*) CHARGEN ← ((byte*)) (word/dword/signed dword) 53248
  (byte*) SPRITES_XPOS ← ((byte*)) (word/dword/signed dword) 53248
  (byte*) SPRITES_YPOS ← ((byte*)) (word/dword/signed dword) 53249
  (byte*) SPRITES_XMSB ← ((byte*)) (word/dword/signed dword) 53264
  (byte*) RASTER ← ((byte*)) (word/dword/signed dword) 53266
  (byte*) SPRITES_ENABLE ← ((byte*)) (word/dword/signed dword) 53269
  (byte*) SPRITES_EXPAND_Y ← ((byte*)) (word/dword/signed dword) 53271
  (byte*) SPRITES_PRIORITY ← ((byte*)) (word/dword/signed dword) 53275
  (byte*) SPRITES_MC ← ((byte*)) (word/dword/signed dword) 53276
  (byte*) SPRITES_EXPAND_X ← ((byte*)) (word/dword/signed dword) 53277
  (byte*) BORDERCOL ← ((byte*)) (word/dword/signed dword) 53280
  (byte*) BGCOL ← ((byte*)) (word/dword/signed dword) 53281
  (byte*) BGCOL1 ← ((byte*)) (word/dword/signed dword) 53281
  (byte*) BGCOL2 ← ((byte*)) (word/dword/signed dword) 53282
  (byte*) BGCOL3 ← ((byte*)) (word/dword/signed dword) 53283
  (byte*) BGCOL4 ← ((byte*)) (word/dword/signed dword) 53284
  (byte*) SPRITES_MC1 ← ((byte*)) (word/dword/signed dword) 53285
  (byte*) SPRITES_MC2 ← ((byte*)) (word/dword/signed dword) 53286
  (byte*) SPRITES_COLS ← ((byte*)) (word/dword/signed dword) 53287
  (byte*) VIC_CONTROL ← ((byte*)) (word/dword/signed dword) 53265
  (byte*) D011 ← ((byte*)) (word/dword/signed dword) 53265
  (byte) VIC_RST8 ← (byte/word/signed word/dword/signed dword) 128
  (byte) VIC_ECM ← (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte) VIC_BMM ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) VIC_DEN ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_RSEL ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) VIC_CONTROL2 ← ((byte*)) (word/dword/signed dword) 53270
  (byte*) D016 ← ((byte*)) (word/dword/signed dword) 53270
  (byte) VIC_MCM ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_CSEL ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) D018 ← ((byte*)) (word/dword/signed dword) 53272
  (byte*) VIC_MEMORY ← ((byte*)) (word/dword/signed dword) 53272
  (byte*) IRQ_STATUS ← ((byte*)) (word/dword/signed dword) 53273
  (byte*) IRQ_ENABLE ← ((byte*)) (word/dword/signed dword) 53274
  (byte) IRQ_RASTER ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) IRQ_COLLISION_BG ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) IRQ_COLLISION_SPRITE ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) IRQ_LIGHTPEN ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) COLS ← ((byte*)) (word/dword/signed dword) 55296
  (byte*) CIA1_PORT_A ← ((byte*)) (word/dword/signed dword) 56320
  (byte*) CIA1_PORT_B ← ((byte*)) (word/dword/signed dword) 56321
  (byte*) CIA1_PORT_A_DDR ← ((byte*)) (word/dword/signed dword) 56322
  (byte*) CIA1_PORT_B_DDR ← ((byte*)) (word/dword/signed dword) 56323
  (byte*) CIA1_INTERRUPT ← ((byte*)) (word/dword/signed dword) 56333
  (byte) CIA_INTERRUPT_CLEAR ← (byte/signed byte/word/signed word/dword/signed dword) 127
  (byte*) CIA2_PORT_A ← ((byte*)) (word/dword/signed dword) 56576
  (byte*) CIA2_PORT_B ← ((byte*)) (word/dword/signed dword) 56577
  (byte*) CIA2_PORT_A_DDR ← ((byte*)) (word/dword/signed dword) 56578
  (byte*) CIA2_PORT_B_DDR ← ((byte*)) (word/dword/signed dword) 56579
  (byte*) CIA2_INTERRUPT ← ((byte*)) (word/dword/signed dword) 56589
  (void()**) KERNEL_IRQ ← ((void()**)) (word/signed word/dword/signed dword) 788
  (void()**) HARDWARE_IRQ ← ((void()**)) (word/dword/signed dword) 65534
  (byte) BLACK ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) WHITE ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) RED ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) CYAN ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) PURPLE ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) GREEN ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) BLUE ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) YELLOW ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) ORANGE ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) BROWN ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) PINK ← (byte/signed byte/word/signed word/dword/signed dword) 10
  (byte) DARK_GREY ← (byte/signed byte/word/signed word/dword/signed dword) 11
  (byte) GREY ← (byte/signed byte/word/signed word/dword/signed dword) 12
  (byte) LIGHT_GREEN ← (byte/signed byte/word/signed word/dword/signed dword) 13
  (byte) LIGHT_BLUE ← (byte/signed byte/word/signed word/dword/signed dword) 14
  (byte) LIGHT_GREY ← (byte/signed byte/word/signed word/dword/signed dword) 15
  to:@1
toD018: scope:[toD018]  from
  (word~) toD018::$0 ← ((word)) (byte*) toD018::screen
  (word~) toD018::$1 ← (word~) toD018::$0 & (word/signed word/dword/signed dword) 16383
  (word~) toD018::$2 ← (word~) toD018::$1 << (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte~) toD018::$3 ← > (word~) toD018::$2
  (word~) toD018::$4 ← ((word)) (byte*) toD018::gfx
  (byte~) toD018::$5 ← > (word~) toD018::$4
  (byte~) toD018::$6 ← (byte~) toD018::$5 >> (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte~) toD018::$7 ← (byte~) toD018::$6 & (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte~) toD018::$8 ← (byte~) toD018::$3 | (byte~) toD018::$7
  (byte) toD018::return ← (byte~) toD018::$8
  to:toD018::@return
toD018::@return: scope:[toD018]  from toD018 toD018::@1
  (byte) toD018::return ← (byte) toD018::return
  return (byte) toD018::return
  to:@return
toD018::@1: scope:[toD018]  from
  to:toD018::@return
@1: scope:[]  from @begin
  to:@2
toDd00: scope:[toDd00]  from
  (word~) toDd00::$0 ← ((word)) (byte*) toDd00::gfx
  (byte~) toDd00::$1 ← > (word~) toDd00::$0
  (byte~) toDd00::$2 ← (byte~) toDd00::$1 >> (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte/word/dword~) toDd00::$3 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte~) toDd00::$2
  (byte) toDd00::return ← (byte/word/dword~) toDd00::$3
  to:toDd00::@return
toDd00::@return: scope:[toDd00]  from toDd00 toDd00::@1
  (byte) toDd00::return ← (byte) toDd00::return
  return (byte) toDd00::return
  to:@return
toDd00::@1: scope:[toDd00]  from
  to:toDd00::@return
@2: scope:[]  from @1
  to:@3
vicSelectGfxBank: scope:[vicSelectGfxBank]  from
  *((byte*) CIA2_PORT_A_DDR) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
  *((byte*) CIA2_PORT_A) ← (byte~) vicSelectGfxBank::$0
  to:vicSelectGfxBank::@return
vicSelectGfxBank::@return: scope:[vicSelectGfxBank]  from vicSelectGfxBank
  return 
  to:@return
@3: scope:[]  from @2
  (byte*) DTV_FEATURE ← ((byte*)) (word/dword/signed dword) 53311
  (byte) DTV_FEATURE_ENABLE ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_FEATURE_DISABLE_TIL_RESET ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte*) DTV_CONTROL ← ((byte*)) (word/dword/signed dword) 53308
  (byte) DTV_LINEAR ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_BORDER_OFF ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) DTV_HIGHCOLOR ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DTV_OVERSCAN ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) DTV_COLORRAM_OFF ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) DTV_BADLINE_OFF ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) DTV_CHUNKY ← (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte*) DTV_PALETTE ← ((byte*)) (word/dword/signed dword) 53760
  (byte[16]) DTV_PALETTE_DEFAULT ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 15, (byte/signed byte/word/signed word/dword/signed dword) 54, (byte/word/signed word/dword/signed dword) 190, (byte/signed byte/word/signed word/dword/signed dword) 88, (byte/word/signed word/dword/signed dword) 219, (byte/word/signed word/dword/signed dword) 134, (byte/word/signed word/dword/signed dword) 255, (byte/signed byte/word/signed word/dword/signed dword) 41, (byte/signed byte/word/signed word/dword/signed dword) 38, (byte/signed byte/word/signed word/dword/signed dword) 59, (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/word/signed word/dword/signed dword) 223, (byte/word/signed word/dword/signed dword) 154, (byte/signed byte/word/signed word/dword/signed dword) 10 }
  (byte*) DTV_PLANEA_START_LO ← ((byte*)) (word/dword/signed dword) 53306
  (byte*) DTV_PLANEA_START_MI ← ((byte*)) (word/dword/signed dword) 53307
  (byte*) DTV_PLANEA_START_HI ← ((byte*)) (word/dword/signed dword) 53317
  (byte*) DTV_PLANEA_STEP ← ((byte*)) (word/dword/signed dword) 53318
  (byte*) DTV_PLANEA_MODULO_LO ← ((byte*)) (word/dword/signed dword) 53304
  (byte*) DTV_PLANEA_MODULO_HI ← ((byte*)) (word/dword/signed dword) 53305
  (byte*) DTV_PLANEB_START_LO ← ((byte*)) (word/dword/signed dword) 53321
  (byte*) DTV_PLANEB_START_MI ← ((byte*)) (word/dword/signed dword) 53322
  (byte*) DTV_PLANEB_START_HI ← ((byte*)) (word/dword/signed dword) 53323
  (byte*) DTV_PLANEB_STEP ← ((byte*)) (word/dword/signed dword) 53324
  (byte*) DTV_PLANEB_MODULO_LO ← ((byte*)) (word/dword/signed dword) 53319
  (byte*) DTV_PLANEB_MODULO_HI ← ((byte*)) (word/dword/signed dword) 53320
  (byte*) DTV_SPRITE_BANK ← ((byte*)) (word/dword/signed dword) 53325
  (byte*) DTV_COLOR_BANK_LO ← ((byte*)) (word/dword/signed dword) 53302
  (byte*) DTV_COLOR_BANK_HI ← ((byte*)) (word/dword/signed dword) 53303
  (dword) DTV_COLOR_BANK_DEFAULT ← (dword/signed dword) 120832
  (byte*) DTV_GRAPHICS_VIC_BANK ← ((byte*)) (word/dword/signed dword) 53309
  (byte*) DTV_GRAPHICS_HICOL_BANK ← ((byte*)) (word/dword/signed dword) 53310
  to:@4
dtvSetCpuBankSegment1: scope:[dtvSetCpuBankSegment1]  from
  (byte*) dtvSetCpuBankSegment1::cpuBank ← ((byte*)) (byte/word/signed word/dword/signed dword) 255
  *((byte*) dtvSetCpuBankSegment1::cpuBank) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx
  asm { .byte$32,$dd lda$ff .byte$32,$00  }
  to:dtvSetCpuBankSegment1::@return
dtvSetCpuBankSegment1::@return: scope:[dtvSetCpuBankSegment1]  from dtvSetCpuBankSegment1
  return 
  to:@return
@4: scope:[]  from @3
  (byte*) DTV_BLITTER_SRCA_LO ← ((byte*)) (word/dword/signed dword) 54048
  (byte*) DTV_BLITTER_SRCA_MI ← ((byte*)) (word/dword/signed dword) 54049
  (byte*) DTV_BLITTER_SRCA_HI ← ((byte*)) (word/dword/signed dword) 54050
  (byte*) DTV_BLITTER_SRCA_MOD_LO ← ((byte*)) (word/dword/signed dword) 54051
  (byte*) DTV_BLITTER_SRCA_MOD_HI ← ((byte*)) (word/dword/signed dword) 54052
  (byte*) DTV_BLITTER_SRCA_LIN_LO ← ((byte*)) (word/dword/signed dword) 54053
  (byte*) DTV_BLITTER_SRCA_LIN_HI ← ((byte*)) (word/dword/signed dword) 54054
  (byte*) DTV_BLITTER_SRCA_STEP ← ((byte*)) (word/dword/signed dword) 54055
  (byte*) DTV_BLITTER_SRCB_LO ← ((byte*)) (word/dword/signed dword) 54056
  (byte*) DTV_BLITTER_SRCB_MI ← ((byte*)) (word/dword/signed dword) 54057
  (byte*) DTV_BLITTER_SRCB_HI ← ((byte*)) (word/dword/signed dword) 54058
  (byte*) DTV_BLITTER_SRCB_MOD_LO ← ((byte*)) (word/dword/signed dword) 54059
  (byte*) DTV_BLITTER_SRCB_MOD_HI ← ((byte*)) (word/dword/signed dword) 54060
  (byte*) DTV_BLITTER_SRCB_LIN_LO ← ((byte*)) (word/dword/signed dword) 54061
  (byte*) DTV_BLITTER_SRCB_LIN_HI ← ((byte*)) (word/dword/signed dword) 54062
  (byte*) DTV_BLITTER_SRCB_STEP ← ((byte*)) (word/dword/signed dword) 54063
  (byte*) DTV_BLITTER_DEST_LO ← ((byte*)) (word/dword/signed dword) 54064
  (byte*) DTV_BLITTER_DEST_MI ← ((byte*)) (word/dword/signed dword) 54065
  (byte*) DTV_BLITTER_DEST_HI ← ((byte*)) (word/dword/signed dword) 54066
  (byte*) DTV_BLITTER_DEST_MOD_LO ← ((byte*)) (word/dword/signed dword) 54067
  (byte*) DTV_BLITTER_DEST_MOD_HI ← ((byte*)) (word/dword/signed dword) 54068
  (byte*) DTV_BLITTER_DEST_LIN_LO ← ((byte*)) (word/dword/signed dword) 54069
  (byte*) DTV_BLITTER_DEST_LIN_HI ← ((byte*)) (word/dword/signed dword) 54070
  (byte*) DTV_BLITTER_DEST_STEP ← ((byte*)) (word/dword/signed dword) 54071
  (byte*) DTV_BLITTER_LEN_LO ← ((byte*)) (word/dword/signed dword) 54072
  (byte*) DTV_BLITTER_LEN_HI ← ((byte*)) (word/dword/signed dword) 54073
  (byte*) DTV_BLITTER_CONTROL ← ((byte*)) (word/dword/signed dword) 54074
  (byte) DTV_BLIT_FORCE_START ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_BLIT_SRCA_FWD ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) DTV_BLIT_SRCB_FWD ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DTV_BLIT_DEST_FWD ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) DTV_BLIT_VIC_IRQ ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) DTV_BLIT_CIA_IRQ ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) DTV_BLIT_VBLANK ← (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte) DTV_BLIT_IRQ_EN ← (byte/word/signed word/dword/signed dword) 128
  (byte*) DTV_BLITTER_TRANSPARANCY ← ((byte*)) (word/dword/signed dword) 54075
  (byte) DTV_BLIT_DISABLE_B ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_BLIT_WRITE_TRANSPARENT ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) DTV_BLIT_WRITE_NONTRANSPARENT ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DTV_BLIT_TRANSPARANCY_NONE ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte*) DTV_BLITTER_ALU ← ((byte*)) (word/dword/signed dword) 54078
  (byte) DTV_BLIT_SHIFT0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) DTV_BLIT_SHIFT1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_BLIT_SHIFT2 ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) DTV_BLIT_SHIFT3 ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) DTV_BLIT_SHIFT4 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DTV_BLIT_SHIFT5 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) DTV_BLIT_SHIFT6 ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) DTV_BLIT_SHIFT7 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) DTV_BLIT_AND ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) DTV_BLIT_NAND ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) DTV_BLIT_NOR ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) DTV_BLIT_OR ← (byte/signed byte/word/signed word/dword/signed dword) 24
  (byte) DTV_BLIT_XOR ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) DTV_BLIT_XNOR ← (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte) DTV_BLIT_ADD ← (byte/signed byte/word/signed word/dword/signed dword) 48
  (byte) DTV_BLIT_SUB ← (byte/signed byte/word/signed word/dword/signed dword) 56
  (byte*) DTV_BLITTER_CONTROL2 ← ((byte*)) (word/dword/signed dword) 54079
  (byte) DTV_BLIT_CLEAR_IRQ ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_BLIT_SRCA_CONT ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) DTV_BLIT_SRCB_CONT ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DTV_BLIT_DEST_CONT ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) DTV_BLIT_STATUS_BUSY ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_BLIT_STATUS_IRQ ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte*) CHUNKY ← ((byte*)) (word/dword/signed dword) 32768
  to:@5
main: scope:[main]  from
  asm { sei  }
  *((byte*) PROCPORT_DDR) ← (byte) PROCPORT_DDR_MEMORY_MASK
  *((byte*) PROCPORT) ← (byte) PROCPORT_RAM_IO
  (void~) main::$0 ← call gfx_init_chunky 
  *((byte*) DTV_FEATURE) ← (byte) DTV_FEATURE_ENABLE
  (byte~) main::$1 ← (byte) DTV_HIGHCOLOR | (byte) DTV_LINEAR
  (byte~) main::$2 ← (byte~) main::$1 | (byte) DTV_COLORRAM_OFF
  (byte~) main::$3 ← (byte~) main::$2 | (byte) DTV_CHUNKY
  (byte~) main::$4 ← (byte~) main::$3 | (byte) DTV_BADLINE_OFF
  *((byte*) DTV_CONTROL) ← (byte~) main::$4
  (byte~) main::$5 ← (byte) VIC_DEN | (byte) VIC_ECM
  (byte~) main::$6 ← (byte~) main::$5 | (byte) VIC_RSEL
  (byte/word/dword~) main::$7 ← (byte~) main::$6 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL) ← (byte/word/dword~) main::$7
  (byte~) main::$8 ← (byte) VIC_MCM | (byte) VIC_CSEL
  *((byte*) VIC_CONTROL2) ← (byte~) main::$8
  (byte~) main::$9 ← < (byte*) CHUNKY
  *((byte*) DTV_PLANEB_START_LO) ← (byte~) main::$9
  (byte~) main::$10 ← > (byte*) CHUNKY
  *((byte*) DTV_PLANEB_START_MI) ← (byte~) main::$10
  *((byte*) DTV_PLANEB_START_HI) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_STEP) ← (byte/signed byte/word/signed word/dword/signed dword) 8
  *((byte*) DTV_PLANEB_MODULO_LO) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_MODULO_HI) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) CIA2_PORT_A_DDR) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) main::$11 ← ((word)) (byte*) CHUNKY
  (word/signed dword/dword~) main::$12 ← (word~) main::$11 / (word/signed word/dword/signed dword) 16384
  (byte~) main::$13 ← ((byte)) (word/signed dword/dword~) main::$12
  (byte/word/dword~) main::$14 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte~) main::$13
  *((byte*) CIA2_PORT_A) ← (byte/word/dword~) main::$14
  (word~) main::$15 ← ((word)) (byte*) CHUNKY
  (word~) main::$16 ← (word~) main::$15 & (word/signed word/dword/signed dword) 16383
  (word~) main::$17 ← (word~) main::$16 >> (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte~) main::$18 ← ((byte)) (word~) main::$17
  (word~) main::$19 ← ((word)) (byte*) CHUNKY
  (word~) main::$20 ← (word~) main::$19 & (word/signed word/dword/signed dword) 16383
  (byte~) main::$21 ← > (word~) main::$20
  (byte~) main::$22 ← (byte~) main::$21 >> (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte~) main::$23 ← (byte~) main::$18 | (byte~) main::$22
  *((byte*) VIC_MEMORY) ← (byte~) main::$23
  (byte) main::j ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  *((byte*) DTV_PALETTE + (byte) main::j) ← (byte) main::j
  (byte) main::j ← (byte) main::j + rangenext(0,15)
  (bool~) main::$24 ← (byte) main::j != rangelast(0,15)
  if((bool~) main::$24) goto main::@1
  to:main::@9
main::@9: scope:[main]  from main::@1
  to:main::@2
main::@2: scope:[main]  from main::@15 main::@9
  if(true) goto main::@3
  to:main::@10
main::@3: scope:[main]  from main::@11 main::@2
  asm { ldx#$ff rff: cpxRASTER bnerff stabilize: nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop cpxRASTER beqeat+0 eat: inx cpx#$08 bnestabilize  }
  (byte~) main::$25 ← (byte) VIC_DEN | (byte) VIC_ECM
  (byte~) main::$26 ← (byte~) main::$25 | (byte) VIC_RSEL
  (byte/word/dword~) main::$27 ← (byte~) main::$26 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL) ← (byte/word/dword~) main::$27
  *((byte*) BORDERCOL) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) main::rst ← (byte/signed byte/word/signed word/dword/signed dword) 66
  to:main::@5
main::@10: scope:[main]  from main::@2
  to:main::@4
main::@4: scope:[main]  from main::@10 main::@16
  to:main::@return
main::@11: scope:[main]  from
  to:main::@3
main::@5: scope:[main]  from main::@3 main::@6
  (bool~) main::$28 ← *((byte*) RASTER) != (byte) main::rst
  if((bool~) main::$28) goto main::@6
  to:main::@12
main::@6: scope:[main]  from main::@13 main::@5
  to:main::@5
main::@12: scope:[main]  from main::@5
  to:main::@7
main::@7: scope:[main]  from main::@12 main::@14
  asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
  to:main::@8
main::@13: scope:[main]  from
  to:main::@6
main::@14: scope:[main]  from
  to:main::@7
main::@8: scope:[main]  from main::@7 main::@8
  (byte) main::rst ← *((byte*) RASTER)
  (byte~) main::$29 ← (byte) VIC_DEN | (byte) VIC_ECM
  (byte~) main::$30 ← (byte~) main::$29 | (byte) VIC_RSEL
  (byte~) main::$31 ← (byte) main::rst & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte~) main::$32 ← (byte~) main::$30 | (byte~) main::$31
  *((byte*) VIC_CONTROL) ← (byte~) main::$32
  (byte~) main::$33 ← (byte) main::rst << (byte/signed byte/word/signed word/dword/signed dword) 4
  *((byte*) BORDERCOL) ← (byte~) main::$33
  asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
  (bool~) main::$34 ← (byte) main::rst != (byte/word/signed word/dword/signed dword) 242
  if((bool~) main::$34) goto main::@8
  to:main::@15
main::@15: scope:[main]  from main::@8
  to:main::@2
main::@16: scope:[main]  from
  to:main::@4
main::@return: scope:[main]  from main::@4
  return 
  to:@return
@5: scope:[]  from @4
  to:@6
gfx_init_chunky: scope:[gfx_init_chunky]  from
  (byte*~) gfx_init_chunky::$0 ← (byte*) CHUNKY / (word/signed word/dword/signed dword) 16384
  (byte~) gfx_init_chunky::$1 ← ((byte)) (byte*~) gfx_init_chunky::$0
  (byte) gfx_init_chunky::gfxbCpuBank ← (byte~) gfx_init_chunky::$1
  (void~) gfx_init_chunky::$2 ← call dtvSetCpuBankSegment1 (byte) gfx_init_chunky::gfxbCpuBank 
  (byte) gfx_init_chunky::gfxbCpuBank ← ++ (byte) gfx_init_chunky::gfxbCpuBank
  (byte*) gfx_init_chunky::gfxb ← ((byte*)) (word/signed word/dword/signed dword) 16384
  (byte) gfx_init_chunky::y ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_chunky::@1
gfx_init_chunky::@1: scope:[gfx_init_chunky]  from gfx_init_chunky gfx_init_chunky::@5
  (word) gfx_init_chunky::x ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_chunky::@2
gfx_init_chunky::@2: scope:[gfx_init_chunky]  from gfx_init_chunky::@1 gfx_init_chunky::@3
  (bool~) gfx_init_chunky::$3 ← (byte*) gfx_init_chunky::gfxb == (word/dword/signed dword) 32768
  (bool~) gfx_init_chunky::$4 ← ! (bool~) gfx_init_chunky::$3
  if((bool~) gfx_init_chunky::$4) goto gfx_init_chunky::@3
  to:gfx_init_chunky::@4
gfx_init_chunky::@3: scope:[gfx_init_chunky]  from gfx_init_chunky::@2 gfx_init_chunky::@4
  (word~) gfx_init_chunky::$6 ← (word) gfx_init_chunky::x + (byte) gfx_init_chunky::y
  (byte~) gfx_init_chunky::$7 ← ((byte)) (word~) gfx_init_chunky::$6
  (byte) gfx_init_chunky::c ← (byte~) gfx_init_chunky::$7
  *((byte*) gfx_init_chunky::gfxb) ← (byte) gfx_init_chunky::c
  (byte*) gfx_init_chunky::gfxb ← ++ (byte*) gfx_init_chunky::gfxb
  (word) gfx_init_chunky::x ← (word) gfx_init_chunky::x + rangenext(0,319)
  (bool~) gfx_init_chunky::$8 ← (word) gfx_init_chunky::x != rangelast(0,319)
  if((bool~) gfx_init_chunky::$8) goto gfx_init_chunky::@2
  to:gfx_init_chunky::@5
gfx_init_chunky::@4: scope:[gfx_init_chunky]  from gfx_init_chunky::@2
  (void~) gfx_init_chunky::$5 ← call dtvSetCpuBankSegment1 (byte) gfx_init_chunky::gfxbCpuBank 
  (byte) gfx_init_chunky::gfxbCpuBank ← ++ (byte) gfx_init_chunky::gfxbCpuBank
  (byte*) gfx_init_chunky::gfxb ← ((byte*)) (word/signed word/dword/signed dword) 16384
  to:gfx_init_chunky::@3
gfx_init_chunky::@5: scope:[gfx_init_chunky]  from gfx_init_chunky::@3
  (byte) gfx_init_chunky::y ← (byte) gfx_init_chunky::y + rangenext(0,50)
  (bool~) gfx_init_chunky::$9 ← (byte) gfx_init_chunky::y != rangelast(0,50)
  if((bool~) gfx_init_chunky::$9) goto gfx_init_chunky::@1
  to:gfx_init_chunky::@6
gfx_init_chunky::@6: scope:[gfx_init_chunky]  from gfx_init_chunky::@5
  (byte/signed byte/word/signed word/dword/signed dword~) gfx_init_chunky::$10 ← (word/signed word/dword/signed dword) 16384 / (word/signed word/dword/signed dword) 16384
  (byte~) gfx_init_chunky::$11 ← ((byte)) (byte/signed byte/word/signed word/dword/signed dword~) gfx_init_chunky::$10
  (void~) gfx_init_chunky::$12 ← call dtvSetCpuBankSegment1 (byte~) gfx_init_chunky::$11 
  to:gfx_init_chunky::@return
gfx_init_chunky::@return: scope:[gfx_init_chunky]  from gfx_init_chunky::@6
  return 
  to:@return
@6: scope:[]  from @5
  call main 
  to:@end
@end: scope:[]  from @6

Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Removing unused procedure toD018
Removing unused procedure toDd00
Removing unused procedure vicSelectGfxBank
Eliminating unused variable (byte) PROCPORT_RAM_ALL and assignment [3] (byte) PROCPORT_RAM_ALL ← (byte/signed byte/word/signed word/dword/signed dword) 48
Eliminating unused variable (byte) PROCPORT_RAM_CHARROM and assignment [5] (byte) PROCPORT_RAM_CHARROM ← (byte/signed byte/word/signed word/dword/signed dword) 49
Eliminating unused variable (byte) PROCPORT_KERNEL_IO and assignment [6] (byte) PROCPORT_KERNEL_IO ← (byte/signed byte/word/signed word/dword/signed dword) 54
Eliminating unused variable (byte) PROCPORT_BASIC_KERNEL_IO and assignment [7] (byte) PROCPORT_BASIC_KERNEL_IO ← (byte/signed byte/word/signed word/dword/signed dword) 55
Eliminating unused variable (byte*) CHARGEN and assignment [8] (byte*) CHARGEN ← ((byte*)) (word/dword/signed dword) 53248
Eliminating unused variable (byte*) SPRITES_XPOS and assignment [9] (byte*) SPRITES_XPOS ← ((byte*)) (word/dword/signed dword) 53248
Eliminating unused variable (byte*) SPRITES_YPOS and assignment [10] (byte*) SPRITES_YPOS ← ((byte*)) (word/dword/signed dword) 53249
Eliminating unused variable (byte*) SPRITES_XMSB and assignment [11] (byte*) SPRITES_XMSB ← ((byte*)) (word/dword/signed dword) 53264
Eliminating unused variable (byte*) SPRITES_ENABLE and assignment [13] (byte*) SPRITES_ENABLE ← ((byte*)) (word/dword/signed dword) 53269
Eliminating unused variable (byte*) SPRITES_EXPAND_Y and assignment [14] (byte*) SPRITES_EXPAND_Y ← ((byte*)) (word/dword/signed dword) 53271
Eliminating unused variable (byte*) SPRITES_PRIORITY and assignment [15] (byte*) SPRITES_PRIORITY ← ((byte*)) (word/dword/signed dword) 53275
Eliminating unused variable (byte*) SPRITES_MC and assignment [16] (byte*) SPRITES_MC ← ((byte*)) (word/dword/signed dword) 53276
Eliminating unused variable (byte*) SPRITES_EXPAND_X and assignment [17] (byte*) SPRITES_EXPAND_X ← ((byte*)) (word/dword/signed dword) 53277
Eliminating unused variable (byte*) BGCOL and assignment [19] (byte*) BGCOL ← ((byte*)) (word/dword/signed dword) 53281
Eliminating unused variable (byte*) BGCOL1 and assignment [20] (byte*) BGCOL1 ← ((byte*)) (word/dword/signed dword) 53281
Eliminating unused variable (byte*) BGCOL2 and assignment [21] (byte*) BGCOL2 ← ((byte*)) (word/dword/signed dword) 53282
Eliminating unused variable (byte*) BGCOL3 and assignment [22] (byte*) BGCOL3 ← ((byte*)) (word/dword/signed dword) 53283
Eliminating unused variable (byte*) BGCOL4 and assignment [23] (byte*) BGCOL4 ← ((byte*)) (word/dword/signed dword) 53284
Eliminating unused variable (byte*) SPRITES_MC1 and assignment [24] (byte*) SPRITES_MC1 ← ((byte*)) (word/dword/signed dword) 53285
Eliminating unused variable (byte*) SPRITES_MC2 and assignment [25] (byte*) SPRITES_MC2 ← ((byte*)) (word/dword/signed dword) 53286
Eliminating unused variable (byte*) SPRITES_COLS and assignment [26] (byte*) SPRITES_COLS ← ((byte*)) (word/dword/signed dword) 53287
Eliminating unused variable (byte*) D011 and assignment [28] (byte*) D011 ← ((byte*)) (word/dword/signed dword) 53265
Eliminating unused variable (byte) VIC_RST8 and assignment [29] (byte) VIC_RST8 ← (byte/word/signed word/dword/signed dword) 128
Eliminating unused variable (byte) VIC_BMM and assignment [31] (byte) VIC_BMM ← (byte/signed byte/word/signed word/dword/signed dword) 32
Eliminating unused variable (byte*) D016 and assignment [35] (byte*) D016 ← ((byte*)) (word/dword/signed dword) 53270
Eliminating unused variable (byte*) D018 and assignment [38] (byte*) D018 ← ((byte*)) (word/dword/signed dword) 53272
Eliminating unused variable (byte*) IRQ_STATUS and assignment [40] (byte*) IRQ_STATUS ← ((byte*)) (word/dword/signed dword) 53273
Eliminating unused variable (byte*) IRQ_ENABLE and assignment [41] (byte*) IRQ_ENABLE ← ((byte*)) (word/dword/signed dword) 53274
Eliminating unused variable (byte) IRQ_RASTER and assignment [42] (byte) IRQ_RASTER ← (byte/signed byte/word/signed word/dword/signed dword) 1
Eliminating unused variable (byte) IRQ_COLLISION_BG and assignment [43] (byte) IRQ_COLLISION_BG ← (byte/signed byte/word/signed word/dword/signed dword) 2
Eliminating unused variable (byte) IRQ_COLLISION_SPRITE and assignment [44] (byte) IRQ_COLLISION_SPRITE ← (byte/signed byte/word/signed word/dword/signed dword) 4
Eliminating unused variable (byte) IRQ_LIGHTPEN and assignment [45] (byte) IRQ_LIGHTPEN ← (byte/signed byte/word/signed word/dword/signed dword) 8
Eliminating unused variable (byte*) COLS and assignment [46] (byte*) COLS ← ((byte*)) (word/dword/signed dword) 55296
Eliminating unused variable (byte*) CIA1_PORT_A and assignment [47] (byte*) CIA1_PORT_A ← ((byte*)) (word/dword/signed dword) 56320
Eliminating unused variable (byte*) CIA1_PORT_B and assignment [48] (byte*) CIA1_PORT_B ← ((byte*)) (word/dword/signed dword) 56321
Eliminating unused variable (byte*) CIA1_PORT_A_DDR and assignment [49] (byte*) CIA1_PORT_A_DDR ← ((byte*)) (word/dword/signed dword) 56322
Eliminating unused variable (byte*) CIA1_PORT_B_DDR and assignment [50] (byte*) CIA1_PORT_B_DDR ← ((byte*)) (word/dword/signed dword) 56323
Eliminating unused variable (byte*) CIA1_INTERRUPT and assignment [51] (byte*) CIA1_INTERRUPT ← ((byte*)) (word/dword/signed dword) 56333
Eliminating unused variable (byte) CIA_INTERRUPT_CLEAR and assignment [52] (byte) CIA_INTERRUPT_CLEAR ← (byte/signed byte/word/signed word/dword/signed dword) 127
Eliminating unused variable (byte*) CIA2_PORT_B and assignment [54] (byte*) CIA2_PORT_B ← ((byte*)) (word/dword/signed dword) 56577
Eliminating unused variable (byte*) CIA2_PORT_B_DDR and assignment [56] (byte*) CIA2_PORT_B_DDR ← ((byte*)) (word/dword/signed dword) 56579
Eliminating unused variable (byte*) CIA2_INTERRUPT and assignment [57] (byte*) CIA2_INTERRUPT ← ((byte*)) (word/dword/signed dword) 56589
Eliminating unused variable (void()**) KERNEL_IRQ and assignment [58] (void()**) KERNEL_IRQ ← ((void()**)) (word/signed word/dword/signed dword) 788
Eliminating unused variable (void()**) HARDWARE_IRQ and assignment [59] (void()**) HARDWARE_IRQ ← ((void()**)) (word/dword/signed dword) 65534
Eliminating unused variable (byte) BLACK and assignment [60] (byte) BLACK ← (byte/signed byte/word/signed word/dword/signed dword) 0
Eliminating unused variable (byte) WHITE and assignment [61] (byte) WHITE ← (byte/signed byte/word/signed word/dword/signed dword) 1
Eliminating unused variable (byte) RED and assignment [62] (byte) RED ← (byte/signed byte/word/signed word/dword/signed dword) 2
Eliminating unused variable (byte) CYAN and assignment [63] (byte) CYAN ← (byte/signed byte/word/signed word/dword/signed dword) 3
Eliminating unused variable (byte) PURPLE and assignment [64] (byte) PURPLE ← (byte/signed byte/word/signed word/dword/signed dword) 4
Eliminating unused variable (byte) GREEN and assignment [65] (byte) GREEN ← (byte/signed byte/word/signed word/dword/signed dword) 5
Eliminating unused variable (byte) BLUE and assignment [66] (byte) BLUE ← (byte/signed byte/word/signed word/dword/signed dword) 6
Eliminating unused variable (byte) YELLOW and assignment [67] (byte) YELLOW ← (byte/signed byte/word/signed word/dword/signed dword) 7
Eliminating unused variable (byte) ORANGE and assignment [68] (byte) ORANGE ← (byte/signed byte/word/signed word/dword/signed dword) 8
Eliminating unused variable (byte) BROWN and assignment [69] (byte) BROWN ← (byte/signed byte/word/signed word/dword/signed dword) 9
Eliminating unused variable (byte) PINK and assignment [70] (byte) PINK ← (byte/signed byte/word/signed word/dword/signed dword) 10
Eliminating unused variable (byte) DARK_GREY and assignment [71] (byte) DARK_GREY ← (byte/signed byte/word/signed word/dword/signed dword) 11
Eliminating unused variable (byte) GREY and assignment [72] (byte) GREY ← (byte/signed byte/word/signed word/dword/signed dword) 12
Eliminating unused variable (byte) LIGHT_GREEN and assignment [73] (byte) LIGHT_GREEN ← (byte/signed byte/word/signed word/dword/signed dword) 13
Eliminating unused variable (byte) LIGHT_BLUE and assignment [74] (byte) LIGHT_BLUE ← (byte/signed byte/word/signed word/dword/signed dword) 14
Eliminating unused variable (byte) LIGHT_GREY and assignment [75] (byte) LIGHT_GREY ← (byte/signed byte/word/signed word/dword/signed dword) 15
Eliminating unused variable (byte) DTV_FEATURE_DISABLE_TIL_RESET and assignment [78] (byte) DTV_FEATURE_DISABLE_TIL_RESET ← (byte/signed byte/word/signed word/dword/signed dword) 2
Eliminating unused variable (byte) DTV_BORDER_OFF and assignment [81] (byte) DTV_BORDER_OFF ← (byte/signed byte/word/signed word/dword/signed dword) 2
Eliminating unused variable (byte) DTV_OVERSCAN and assignment [83] (byte) DTV_OVERSCAN ← (byte/signed byte/word/signed word/dword/signed dword) 8
Eliminating unused variable (byte[16]) DTV_PALETTE_DEFAULT and assignment [88] (byte[16]) DTV_PALETTE_DEFAULT ← { (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 15, (byte/signed byte/word/signed word/dword/signed dword) 54, (byte/word/signed word/dword/signed dword) 190, (byte/signed byte/word/signed word/dword/signed dword) 88, (byte/word/signed word/dword/signed dword) 219, (byte/word/signed word/dword/signed dword) 134, (byte/word/signed word/dword/signed dword) 255, (byte/signed byte/word/signed word/dword/signed dword) 41, (byte/signed byte/word/signed word/dword/signed dword) 38, (byte/signed byte/word/signed word/dword/signed dword) 59, (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/word/signed word/dword/signed dword) 223, (byte/word/signed word/dword/signed dword) 154, (byte/signed byte/word/signed word/dword/signed dword) 10 }
Eliminating unused variable (byte*) DTV_PLANEA_START_LO and assignment [89] (byte*) DTV_PLANEA_START_LO ← ((byte*)) (word/dword/signed dword) 53306
Eliminating unused variable (byte*) DTV_PLANEA_START_MI and assignment [90] (byte*) DTV_PLANEA_START_MI ← ((byte*)) (word/dword/signed dword) 53307
Eliminating unused variable (byte*) DTV_PLANEA_START_HI and assignment [91] (byte*) DTV_PLANEA_START_HI ← ((byte*)) (word/dword/signed dword) 53317
Eliminating unused variable (byte*) DTV_PLANEA_STEP and assignment [92] (byte*) DTV_PLANEA_STEP ← ((byte*)) (word/dword/signed dword) 53318
Eliminating unused variable (byte*) DTV_PLANEA_MODULO_LO and assignment [93] (byte*) DTV_PLANEA_MODULO_LO ← ((byte*)) (word/dword/signed dword) 53304
Eliminating unused variable (byte*) DTV_PLANEA_MODULO_HI and assignment [94] (byte*) DTV_PLANEA_MODULO_HI ← ((byte*)) (word/dword/signed dword) 53305
Eliminating unused variable (byte*) DTV_SPRITE_BANK and assignment [101] (byte*) DTV_SPRITE_BANK ← ((byte*)) (word/dword/signed dword) 53325
Eliminating unused variable (byte*) DTV_COLOR_BANK_LO and assignment [102] (byte*) DTV_COLOR_BANK_LO ← ((byte*)) (word/dword/signed dword) 53302
Eliminating unused variable (byte*) DTV_COLOR_BANK_HI and assignment [103] (byte*) DTV_COLOR_BANK_HI ← ((byte*)) (word/dword/signed dword) 53303
Eliminating unused variable (dword) DTV_COLOR_BANK_DEFAULT and assignment [104] (dword) DTV_COLOR_BANK_DEFAULT ← (dword/signed dword) 120832
Eliminating unused variable (byte*) DTV_GRAPHICS_VIC_BANK and assignment [105] (byte*) DTV_GRAPHICS_VIC_BANK ← ((byte*)) (word/dword/signed dword) 53309
Eliminating unused variable (byte*) DTV_GRAPHICS_HICOL_BANK and assignment [106] (byte*) DTV_GRAPHICS_HICOL_BANK ← ((byte*)) (word/dword/signed dword) 53310
Eliminating unused variable (byte*) DTV_BLITTER_SRCA_LO and assignment [111] (byte*) DTV_BLITTER_SRCA_LO ← ((byte*)) (word/dword/signed dword) 54048
Eliminating unused variable (byte*) DTV_BLITTER_SRCA_MI and assignment [112] (byte*) DTV_BLITTER_SRCA_MI ← ((byte*)) (word/dword/signed dword) 54049
Eliminating unused variable (byte*) DTV_BLITTER_SRCA_HI and assignment [113] (byte*) DTV_BLITTER_SRCA_HI ← ((byte*)) (word/dword/signed dword) 54050
Eliminating unused variable (byte*) DTV_BLITTER_SRCA_MOD_LO and assignment [114] (byte*) DTV_BLITTER_SRCA_MOD_LO ← ((byte*)) (word/dword/signed dword) 54051
Eliminating unused variable (byte*) DTV_BLITTER_SRCA_MOD_HI and assignment [115] (byte*) DTV_BLITTER_SRCA_MOD_HI ← ((byte*)) (word/dword/signed dword) 54052
Eliminating unused variable (byte*) DTV_BLITTER_SRCA_LIN_LO and assignment [116] (byte*) DTV_BLITTER_SRCA_LIN_LO ← ((byte*)) (word/dword/signed dword) 54053
Eliminating unused variable (byte*) DTV_BLITTER_SRCA_LIN_HI and assignment [117] (byte*) DTV_BLITTER_SRCA_LIN_HI ← ((byte*)) (word/dword/signed dword) 54054
Eliminating unused variable (byte*) DTV_BLITTER_SRCA_STEP and assignment [118] (byte*) DTV_BLITTER_SRCA_STEP ← ((byte*)) (word/dword/signed dword) 54055
Eliminating unused variable (byte*) DTV_BLITTER_SRCB_LO and assignment [119] (byte*) DTV_BLITTER_SRCB_LO ← ((byte*)) (word/dword/signed dword) 54056
Eliminating unused variable (byte*) DTV_BLITTER_SRCB_MI and assignment [120] (byte*) DTV_BLITTER_SRCB_MI ← ((byte*)) (word/dword/signed dword) 54057
Eliminating unused variable (byte*) DTV_BLITTER_SRCB_HI and assignment [121] (byte*) DTV_BLITTER_SRCB_HI ← ((byte*)) (word/dword/signed dword) 54058
Eliminating unused variable (byte*) DTV_BLITTER_SRCB_MOD_LO and assignment [122] (byte*) DTV_BLITTER_SRCB_MOD_LO ← ((byte*)) (word/dword/signed dword) 54059
Eliminating unused variable (byte*) DTV_BLITTER_SRCB_MOD_HI and assignment [123] (byte*) DTV_BLITTER_SRCB_MOD_HI ← ((byte*)) (word/dword/signed dword) 54060
Eliminating unused variable (byte*) DTV_BLITTER_SRCB_LIN_LO and assignment [124] (byte*) DTV_BLITTER_SRCB_LIN_LO ← ((byte*)) (word/dword/signed dword) 54061
Eliminating unused variable (byte*) DTV_BLITTER_SRCB_LIN_HI and assignment [125] (byte*) DTV_BLITTER_SRCB_LIN_HI ← ((byte*)) (word/dword/signed dword) 54062
Eliminating unused variable (byte*) DTV_BLITTER_SRCB_STEP and assignment [126] (byte*) DTV_BLITTER_SRCB_STEP ← ((byte*)) (word/dword/signed dword) 54063
Eliminating unused variable (byte*) DTV_BLITTER_DEST_LO and assignment [127] (byte*) DTV_BLITTER_DEST_LO ← ((byte*)) (word/dword/signed dword) 54064
Eliminating unused variable (byte*) DTV_BLITTER_DEST_MI and assignment [128] (byte*) DTV_BLITTER_DEST_MI ← ((byte*)) (word/dword/signed dword) 54065
Eliminating unused variable (byte*) DTV_BLITTER_DEST_HI and assignment [129] (byte*) DTV_BLITTER_DEST_HI ← ((byte*)) (word/dword/signed dword) 54066
Eliminating unused variable (byte*) DTV_BLITTER_DEST_MOD_LO and assignment [130] (byte*) DTV_BLITTER_DEST_MOD_LO ← ((byte*)) (word/dword/signed dword) 54067
Eliminating unused variable (byte*) DTV_BLITTER_DEST_MOD_HI and assignment [131] (byte*) DTV_BLITTER_DEST_MOD_HI ← ((byte*)) (word/dword/signed dword) 54068
Eliminating unused variable (byte*) DTV_BLITTER_DEST_LIN_LO and assignment [132] (byte*) DTV_BLITTER_DEST_LIN_LO ← ((byte*)) (word/dword/signed dword) 54069
Eliminating unused variable (byte*) DTV_BLITTER_DEST_LIN_HI and assignment [133] (byte*) DTV_BLITTER_DEST_LIN_HI ← ((byte*)) (word/dword/signed dword) 54070
Eliminating unused variable (byte*) DTV_BLITTER_DEST_STEP and assignment [134] (byte*) DTV_BLITTER_DEST_STEP ← ((byte*)) (word/dword/signed dword) 54071
Eliminating unused variable (byte*) DTV_BLITTER_LEN_LO and assignment [135] (byte*) DTV_BLITTER_LEN_LO ← ((byte*)) (word/dword/signed dword) 54072
Eliminating unused variable (byte*) DTV_BLITTER_LEN_HI and assignment [136] (byte*) DTV_BLITTER_LEN_HI ← ((byte*)) (word/dword/signed dword) 54073
Eliminating unused variable (byte*) DTV_BLITTER_CONTROL and assignment [137] (byte*) DTV_BLITTER_CONTROL ← ((byte*)) (word/dword/signed dword) 54074
Eliminating unused variable (byte) DTV_BLIT_FORCE_START and assignment [138] (byte) DTV_BLIT_FORCE_START ← (byte/signed byte/word/signed word/dword/signed dword) 1
Eliminating unused variable (byte) DTV_BLIT_SRCA_FWD and assignment [139] (byte) DTV_BLIT_SRCA_FWD ← (byte/signed byte/word/signed word/dword/signed dword) 2
Eliminating unused variable (byte) DTV_BLIT_SRCB_FWD and assignment [140] (byte) DTV_BLIT_SRCB_FWD ← (byte/signed byte/word/signed word/dword/signed dword) 4
Eliminating unused variable (byte) DTV_BLIT_DEST_FWD and assignment [141] (byte) DTV_BLIT_DEST_FWD ← (byte/signed byte/word/signed word/dword/signed dword) 8
Eliminating unused variable (byte) DTV_BLIT_VIC_IRQ and assignment [142] (byte) DTV_BLIT_VIC_IRQ ← (byte/signed byte/word/signed word/dword/signed dword) 16
Eliminating unused variable (byte) DTV_BLIT_CIA_IRQ and assignment [143] (byte) DTV_BLIT_CIA_IRQ ← (byte/signed byte/word/signed word/dword/signed dword) 32
Eliminating unused variable (byte) DTV_BLIT_VBLANK and assignment [144] (byte) DTV_BLIT_VBLANK ← (byte/signed byte/word/signed word/dword/signed dword) 64
Eliminating unused variable (byte) DTV_BLIT_IRQ_EN and assignment [145] (byte) DTV_BLIT_IRQ_EN ← (byte/word/signed word/dword/signed dword) 128
Eliminating unused variable (byte*) DTV_BLITTER_TRANSPARANCY and assignment [146] (byte*) DTV_BLITTER_TRANSPARANCY ← ((byte*)) (word/dword/signed dword) 54075
Eliminating unused variable (byte) DTV_BLIT_DISABLE_B and assignment [147] (byte) DTV_BLIT_DISABLE_B ← (byte/signed byte/word/signed word/dword/signed dword) 1
Eliminating unused variable (byte) DTV_BLIT_WRITE_TRANSPARENT and assignment [148] (byte) DTV_BLIT_WRITE_TRANSPARENT ← (byte/signed byte/word/signed word/dword/signed dword) 2
Eliminating unused variable (byte) DTV_BLIT_WRITE_NONTRANSPARENT and assignment [149] (byte) DTV_BLIT_WRITE_NONTRANSPARENT ← (byte/signed byte/word/signed word/dword/signed dword) 4
Eliminating unused variable (byte) DTV_BLIT_TRANSPARANCY_NONE and assignment [150] (byte) DTV_BLIT_TRANSPARANCY_NONE ← (byte/signed byte/word/signed word/dword/signed dword) 0
Eliminating unused variable (byte*) DTV_BLITTER_ALU and assignment [151] (byte*) DTV_BLITTER_ALU ← ((byte*)) (word/dword/signed dword) 54078
Eliminating unused variable (byte) DTV_BLIT_SHIFT0 and assignment [152] (byte) DTV_BLIT_SHIFT0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
Eliminating unused variable (byte) DTV_BLIT_SHIFT1 and assignment [153] (byte) DTV_BLIT_SHIFT1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
Eliminating unused variable (byte) DTV_BLIT_SHIFT2 and assignment [154] (byte) DTV_BLIT_SHIFT2 ← (byte/signed byte/word/signed word/dword/signed dword) 2
Eliminating unused variable (byte) DTV_BLIT_SHIFT3 and assignment [155] (byte) DTV_BLIT_SHIFT3 ← (byte/signed byte/word/signed word/dword/signed dword) 3
Eliminating unused variable (byte) DTV_BLIT_SHIFT4 and assignment [156] (byte) DTV_BLIT_SHIFT4 ← (byte/signed byte/word/signed word/dword/signed dword) 4
Eliminating unused variable (byte) DTV_BLIT_SHIFT5 and assignment [157] (byte) DTV_BLIT_SHIFT5 ← (byte/signed byte/word/signed word/dword/signed dword) 5
Eliminating unused variable (byte) DTV_BLIT_SHIFT6 and assignment [158] (byte) DTV_BLIT_SHIFT6 ← (byte/signed byte/word/signed word/dword/signed dword) 6
Eliminating unused variable (byte) DTV_BLIT_SHIFT7 and assignment [159] (byte) DTV_BLIT_SHIFT7 ← (byte/signed byte/word/signed word/dword/signed dword) 7
Eliminating unused variable (byte) DTV_BLIT_AND and assignment [160] (byte) DTV_BLIT_AND ← (byte/signed byte/word/signed word/dword/signed dword) 0
Eliminating unused variable (byte) DTV_BLIT_NAND and assignment [161] (byte) DTV_BLIT_NAND ← (byte/signed byte/word/signed word/dword/signed dword) 8
Eliminating unused variable (byte) DTV_BLIT_NOR and assignment [162] (byte) DTV_BLIT_NOR ← (byte/signed byte/word/signed word/dword/signed dword) 16
Eliminating unused variable (byte) DTV_BLIT_OR and assignment [163] (byte) DTV_BLIT_OR ← (byte/signed byte/word/signed word/dword/signed dword) 24
Eliminating unused variable (byte) DTV_BLIT_XOR and assignment [164] (byte) DTV_BLIT_XOR ← (byte/signed byte/word/signed word/dword/signed dword) 32
Eliminating unused variable (byte) DTV_BLIT_XNOR and assignment [165] (byte) DTV_BLIT_XNOR ← (byte/signed byte/word/signed word/dword/signed dword) 40
Eliminating unused variable (byte) DTV_BLIT_ADD and assignment [166] (byte) DTV_BLIT_ADD ← (byte/signed byte/word/signed word/dword/signed dword) 48
Eliminating unused variable (byte) DTV_BLIT_SUB and assignment [167] (byte) DTV_BLIT_SUB ← (byte/signed byte/word/signed word/dword/signed dword) 56
Eliminating unused variable (byte*) DTV_BLITTER_CONTROL2 and assignment [168] (byte*) DTV_BLITTER_CONTROL2 ← ((byte*)) (word/dword/signed dword) 54079
Eliminating unused variable (byte) DTV_BLIT_CLEAR_IRQ and assignment [169] (byte) DTV_BLIT_CLEAR_IRQ ← (byte/signed byte/word/signed word/dword/signed dword) 1
Eliminating unused variable (byte) DTV_BLIT_SRCA_CONT and assignment [170] (byte) DTV_BLIT_SRCA_CONT ← (byte/signed byte/word/signed word/dword/signed dword) 2
Eliminating unused variable (byte) DTV_BLIT_SRCB_CONT and assignment [171] (byte) DTV_BLIT_SRCB_CONT ← (byte/signed byte/word/signed word/dword/signed dword) 4
Eliminating unused variable (byte) DTV_BLIT_DEST_CONT and assignment [172] (byte) DTV_BLIT_DEST_CONT ← (byte/signed byte/word/signed word/dword/signed dword) 8
Eliminating unused variable (byte) DTV_BLIT_STATUS_BUSY and assignment [173] (byte) DTV_BLIT_STATUS_BUSY ← (byte/signed byte/word/signed word/dword/signed dword) 1
Eliminating unused variable (byte) DTV_BLIT_STATUS_IRQ and assignment [174] (byte) DTV_BLIT_STATUS_IRQ ← (byte/signed byte/word/signed word/dword/signed dword) 2
Eliminating unused variable - keeping the call (void~) main::$0
Eliminating unused variable - keeping the call (void~) gfx_init_chunky::$2
Eliminating unused variable - keeping the call (void~) gfx_init_chunky::$5
Eliminating unused variable - keeping the call (void~) gfx_init_chunky::$12
Removing empty block @1
Removing empty block @2
Removing empty block main::@9
Removing empty block main::@10
Removing empty block main::@4
Removing empty block main::@11
Removing empty block main::@12
Removing empty block main::@13
Removing empty block main::@14
Removing empty block main::@15
Removing empty block main::@16
Removing empty block @5
PROCEDURE MODIFY VARIABLE ANALYSIS

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) PROCPORT_DDR#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte*) PROCPORT#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) PROCPORT_RAM_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) 53
  (byte*) RASTER#0 ← ((byte*)) (word/dword/signed dword) 53266
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) 53280
  (byte*) VIC_CONTROL#0 ← ((byte*)) (word/dword/signed dword) 53265
  (byte) VIC_ECM#0 ← (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte) VIC_DEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_RSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) VIC_CONTROL2#0 ← ((byte*)) (word/dword/signed dword) 53270
  (byte) VIC_MCM#0 ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_CSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) VIC_MEMORY#0 ← ((byte*)) (word/dword/signed dword) 53272
  (byte*) CIA2_PORT_A#0 ← ((byte*)) (word/dword/signed dword) 56576
  (byte*) CIA2_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) 56578
  to:@3
@3: scope:[]  from @begin
  (byte*) DTV_FEATURE#0 ← ((byte*)) (word/dword/signed dword) 53311
  (byte) DTV_FEATURE_ENABLE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte*) DTV_CONTROL#0 ← ((byte*)) (word/dword/signed dword) 53308
  (byte) DTV_LINEAR#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_HIGHCOLOR#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DTV_COLORRAM_OFF#0 ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) DTV_BADLINE_OFF#0 ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) DTV_CHUNKY#0 ← (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte*) DTV_PALETTE#0 ← ((byte*)) (word/dword/signed dword) 53760
  (byte*) DTV_PLANEB_START_LO#0 ← ((byte*)) (word/dword/signed dword) 53321
  (byte*) DTV_PLANEB_START_MI#0 ← ((byte*)) (word/dword/signed dword) 53322
  (byte*) DTV_PLANEB_START_HI#0 ← ((byte*)) (word/dword/signed dword) 53323
  (byte*) DTV_PLANEB_STEP#0 ← ((byte*)) (word/dword/signed dword) 53324
  (byte*) DTV_PLANEB_MODULO_LO#0 ← ((byte*)) (word/dword/signed dword) 53319
  (byte*) DTV_PLANEB_MODULO_HI#0 ← ((byte*)) (word/dword/signed dword) 53320
  to:@4
dtvSetCpuBankSegment1: scope:[dtvSetCpuBankSegment1]  from gfx_init_chunky gfx_init_chunky::@4 gfx_init_chunky::@6
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 ← phi( gfx_init_chunky/(byte) dtvSetCpuBankSegment1::cpuBankIdx#0 gfx_init_chunky::@4/(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 gfx_init_chunky::@6/(byte) dtvSetCpuBankSegment1::cpuBankIdx#2 )
  (byte*) dtvSetCpuBankSegment1::cpuBank#0 ← ((byte*)) (byte/word/signed word/dword/signed dword) 255
  *((byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#3
  asm { .byte$32,$dd lda$ff .byte$32,$00  }
  to:dtvSetCpuBankSegment1::@return
dtvSetCpuBankSegment1::@return: scope:[dtvSetCpuBankSegment1]  from dtvSetCpuBankSegment1
  return 
  to:@return
@4: scope:[]  from @3
  (byte*) CHUNKY#0 ← ((byte*)) (word/dword/signed dword) 32768
  to:@6
main: scope:[main]  from @6
  asm { sei  }
  *((byte*) PROCPORT_DDR#0) ← (byte) PROCPORT_DDR_MEMORY_MASK#0
  *((byte*) PROCPORT#0) ← (byte) PROCPORT_RAM_IO#0
  call gfx_init_chunky 
  to:main::@17
main::@17: scope:[main]  from main
  *((byte*) DTV_FEATURE#0) ← (byte) DTV_FEATURE_ENABLE#0
  (byte~) main::$1 ← (byte) DTV_HIGHCOLOR#0 | (byte) DTV_LINEAR#0
  (byte~) main::$2 ← (byte~) main::$1 | (byte) DTV_COLORRAM_OFF#0
  (byte~) main::$3 ← (byte~) main::$2 | (byte) DTV_CHUNKY#0
  (byte~) main::$4 ← (byte~) main::$3 | (byte) DTV_BADLINE_OFF#0
  *((byte*) DTV_CONTROL#0) ← (byte~) main::$4
  (byte~) main::$5 ← (byte) VIC_DEN#0 | (byte) VIC_ECM#0
  (byte~) main::$6 ← (byte~) main::$5 | (byte) VIC_RSEL#0
  (byte/word/dword~) main::$7 ← (byte~) main::$6 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) main::$7
  (byte~) main::$8 ← (byte) VIC_MCM#0 | (byte) VIC_CSEL#0
  *((byte*) VIC_CONTROL2#0) ← (byte~) main::$8
  (byte~) main::$9 ← < (byte*) CHUNKY#0
  *((byte*) DTV_PLANEB_START_LO#0) ← (byte~) main::$9
  (byte~) main::$10 ← > (byte*) CHUNKY#0
  *((byte*) DTV_PLANEB_START_MI#0) ← (byte~) main::$10
  *((byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 8
  *((byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) main::$11 ← ((word)) (byte*) CHUNKY#0
  (word/signed dword/dword~) main::$12 ← (word~) main::$11 / (word/signed word/dword/signed dword) 16384
  (byte~) main::$13 ← ((byte)) (word/signed dword/dword~) main::$12
  (byte/word/dword~) main::$14 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte~) main::$13
  *((byte*) CIA2_PORT_A#0) ← (byte/word/dword~) main::$14
  (word~) main::$15 ← ((word)) (byte*) CHUNKY#0
  (word~) main::$16 ← (word~) main::$15 & (word/signed word/dword/signed dword) 16383
  (word~) main::$17 ← (word~) main::$16 >> (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte~) main::$18 ← ((byte)) (word~) main::$17
  (word~) main::$19 ← ((word)) (byte*) CHUNKY#0
  (word~) main::$20 ← (word~) main::$19 & (word/signed word/dword/signed dword) 16383
  (byte~) main::$21 ← > (word~) main::$20
  (byte~) main::$22 ← (byte~) main::$21 >> (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte~) main::$23 ← (byte~) main::$18 | (byte~) main::$22
  *((byte*) VIC_MEMORY#0) ← (byte~) main::$23
  (byte) main::j#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@17
  (byte) main::j#2 ← phi( main::@1/(byte) main::j#1 main::@17/(byte) main::j#0 )
  *((byte*) DTV_PALETTE#0 + (byte) main::j#2) ← (byte) main::j#2
  (byte) main::j#1 ← (byte) main::j#2 + rangenext(0,15)
  (bool~) main::$24 ← (byte) main::j#1 != rangelast(0,15)
  if((bool~) main::$24) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@8
  if(true) goto main::@3
  to:main::@return
main::@3: scope:[main]  from main::@2
  asm { ldx#$ff rff: cpxRASTER bnerff stabilize: nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop cpxRASTER beqeat+0 eat: inx cpx#$08 bnestabilize  }
  (byte~) main::$25 ← (byte) VIC_DEN#0 | (byte) VIC_ECM#0
  (byte~) main::$26 ← (byte~) main::$25 | (byte) VIC_RSEL#0
  (byte/word/dword~) main::$27 ← (byte~) main::$26 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) main::$27
  *((byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) main::rst#0 ← (byte/signed byte/word/signed word/dword/signed dword) 66
  to:main::@5
main::@5: scope:[main]  from main::@3 main::@6
  (byte) main::rst#2 ← phi( main::@3/(byte) main::rst#0 main::@6/(byte) main::rst#3 )
  (bool~) main::$28 ← *((byte*) RASTER#0) != (byte) main::rst#2
  if((bool~) main::$28) goto main::@6
  to:main::@7
main::@6: scope:[main]  from main::@5
  (byte) main::rst#3 ← phi( main::@5/(byte) main::rst#2 )
  to:main::@5
main::@7: scope:[main]  from main::@5
  asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
  to:main::@8
main::@8: scope:[main]  from main::@7 main::@8
  (byte) main::rst#1 ← *((byte*) RASTER#0)
  (byte~) main::$29 ← (byte) VIC_DEN#0 | (byte) VIC_ECM#0
  (byte~) main::$30 ← (byte~) main::$29 | (byte) VIC_RSEL#0
  (byte~) main::$31 ← (byte) main::rst#1 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte~) main::$32 ← (byte~) main::$30 | (byte~) main::$31
  *((byte*) VIC_CONTROL#0) ← (byte~) main::$32
  (byte~) main::$33 ← (byte) main::rst#1 << (byte/signed byte/word/signed word/dword/signed dword) 4
  *((byte*) BORDERCOL#0) ← (byte~) main::$33
  asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
  (bool~) main::$34 ← (byte) main::rst#1 != (byte/word/signed word/dword/signed dword) 242
  if((bool~) main::$34) goto main::@8
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
gfx_init_chunky: scope:[gfx_init_chunky]  from main
  (byte*~) gfx_init_chunky::$0 ← (byte*) CHUNKY#0 / (word/signed word/dword/signed dword) 16384
  (byte~) gfx_init_chunky::$1 ← ((byte)) (byte*~) gfx_init_chunky::$0
  (byte) gfx_init_chunky::gfxbCpuBank#0 ← (byte~) gfx_init_chunky::$1
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#0 ← (byte) gfx_init_chunky::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_chunky::@7
gfx_init_chunky::@7: scope:[gfx_init_chunky]  from gfx_init_chunky
  (byte) gfx_init_chunky::gfxbCpuBank#3 ← phi( gfx_init_chunky/(byte) gfx_init_chunky::gfxbCpuBank#0 )
  (byte) gfx_init_chunky::gfxbCpuBank#1 ← ++ (byte) gfx_init_chunky::gfxbCpuBank#3
  (byte*) gfx_init_chunky::gfxb#0 ← ((byte*)) (word/signed word/dword/signed dword) 16384
  (byte) gfx_init_chunky::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_chunky::@1
gfx_init_chunky::@1: scope:[gfx_init_chunky]  from gfx_init_chunky::@5 gfx_init_chunky::@7
  (byte) gfx_init_chunky::gfxbCpuBank#7 ← phi( gfx_init_chunky::@5/(byte) gfx_init_chunky::gfxbCpuBank#9 gfx_init_chunky::@7/(byte) gfx_init_chunky::gfxbCpuBank#1 )
  (byte) gfx_init_chunky::y#6 ← phi( gfx_init_chunky::@5/(byte) gfx_init_chunky::y#1 gfx_init_chunky::@7/(byte) gfx_init_chunky::y#0 )
  (byte*) gfx_init_chunky::gfxb#5 ← phi( gfx_init_chunky::@5/(byte*) gfx_init_chunky::gfxb#6 gfx_init_chunky::@7/(byte*) gfx_init_chunky::gfxb#0 )
  (word) gfx_init_chunky::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_chunky::@2
gfx_init_chunky::@2: scope:[gfx_init_chunky]  from gfx_init_chunky::@1 gfx_init_chunky::@3
  (byte) gfx_init_chunky::gfxbCpuBank#6 ← phi( gfx_init_chunky::@1/(byte) gfx_init_chunky::gfxbCpuBank#7 gfx_init_chunky::@3/(byte) gfx_init_chunky::gfxbCpuBank#8 )
  (byte) gfx_init_chunky::y#4 ← phi( gfx_init_chunky::@1/(byte) gfx_init_chunky::y#6 gfx_init_chunky::@3/(byte) gfx_init_chunky::y#2 )
  (word) gfx_init_chunky::x#3 ← phi( gfx_init_chunky::@1/(word) gfx_init_chunky::x#0 gfx_init_chunky::@3/(word) gfx_init_chunky::x#1 )
  (byte*) gfx_init_chunky::gfxb#3 ← phi( gfx_init_chunky::@1/(byte*) gfx_init_chunky::gfxb#5 gfx_init_chunky::@3/(byte*) gfx_init_chunky::gfxb#1 )
  (bool~) gfx_init_chunky::$3 ← (byte*) gfx_init_chunky::gfxb#3 == (word/dword/signed dword) 32768
  (bool~) gfx_init_chunky::$4 ← ! (bool~) gfx_init_chunky::$3
  if((bool~) gfx_init_chunky::$4) goto gfx_init_chunky::@3
  to:gfx_init_chunky::@4
gfx_init_chunky::@3: scope:[gfx_init_chunky]  from gfx_init_chunky::@2 gfx_init_chunky::@8
  (byte) gfx_init_chunky::gfxbCpuBank#8 ← phi( gfx_init_chunky::@2/(byte) gfx_init_chunky::gfxbCpuBank#6 gfx_init_chunky::@8/(byte) gfx_init_chunky::gfxbCpuBank#2 )
  (byte*) gfx_init_chunky::gfxb#4 ← phi( gfx_init_chunky::@2/(byte*) gfx_init_chunky::gfxb#3 gfx_init_chunky::@8/(byte*) gfx_init_chunky::gfxb#2 )
  (byte) gfx_init_chunky::y#2 ← phi( gfx_init_chunky::@2/(byte) gfx_init_chunky::y#4 gfx_init_chunky::@8/(byte) gfx_init_chunky::y#5 )
  (word) gfx_init_chunky::x#2 ← phi( gfx_init_chunky::@2/(word) gfx_init_chunky::x#3 gfx_init_chunky::@8/(word) gfx_init_chunky::x#4 )
  (word~) gfx_init_chunky::$6 ← (word) gfx_init_chunky::x#2 + (byte) gfx_init_chunky::y#2
  (byte~) gfx_init_chunky::$7 ← ((byte)) (word~) gfx_init_chunky::$6
  (byte) gfx_init_chunky::c#0 ← (byte~) gfx_init_chunky::$7
  *((byte*) gfx_init_chunky::gfxb#4) ← (byte) gfx_init_chunky::c#0
  (byte*) gfx_init_chunky::gfxb#1 ← ++ (byte*) gfx_init_chunky::gfxb#4
  (word) gfx_init_chunky::x#1 ← (word) gfx_init_chunky::x#2 + rangenext(0,319)
  (bool~) gfx_init_chunky::$8 ← (word) gfx_init_chunky::x#1 != rangelast(0,319)
  if((bool~) gfx_init_chunky::$8) goto gfx_init_chunky::@2
  to:gfx_init_chunky::@5
gfx_init_chunky::@4: scope:[gfx_init_chunky]  from gfx_init_chunky::@2
  (byte) gfx_init_chunky::y#7 ← phi( gfx_init_chunky::@2/(byte) gfx_init_chunky::y#4 )
  (word) gfx_init_chunky::x#5 ← phi( gfx_init_chunky::@2/(word) gfx_init_chunky::x#3 )
  (byte) gfx_init_chunky::gfxbCpuBank#4 ← phi( gfx_init_chunky::@2/(byte) gfx_init_chunky::gfxbCpuBank#6 )
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_chunky::gfxbCpuBank#4
  call dtvSetCpuBankSegment1 
  to:gfx_init_chunky::@8
gfx_init_chunky::@8: scope:[gfx_init_chunky]  from gfx_init_chunky::@4
  (byte) gfx_init_chunky::y#5 ← phi( gfx_init_chunky::@4/(byte) gfx_init_chunky::y#7 )
  (word) gfx_init_chunky::x#4 ← phi( gfx_init_chunky::@4/(word) gfx_init_chunky::x#5 )
  (byte) gfx_init_chunky::gfxbCpuBank#5 ← phi( gfx_init_chunky::@4/(byte) gfx_init_chunky::gfxbCpuBank#4 )
  (byte) gfx_init_chunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_chunky::gfxbCpuBank#5
  (byte*) gfx_init_chunky::gfxb#2 ← ((byte*)) (word/signed word/dword/signed dword) 16384
  to:gfx_init_chunky::@3
gfx_init_chunky::@5: scope:[gfx_init_chunky]  from gfx_init_chunky::@3
  (byte) gfx_init_chunky::gfxbCpuBank#9 ← phi( gfx_init_chunky::@3/(byte) gfx_init_chunky::gfxbCpuBank#8 )
  (byte*) gfx_init_chunky::gfxb#6 ← phi( gfx_init_chunky::@3/(byte*) gfx_init_chunky::gfxb#1 )
  (byte) gfx_init_chunky::y#3 ← phi( gfx_init_chunky::@3/(byte) gfx_init_chunky::y#2 )
  (byte) gfx_init_chunky::y#1 ← (byte) gfx_init_chunky::y#3 + rangenext(0,50)
  (bool~) gfx_init_chunky::$9 ← (byte) gfx_init_chunky::y#1 != rangelast(0,50)
  if((bool~) gfx_init_chunky::$9) goto gfx_init_chunky::@1
  to:gfx_init_chunky::@6
gfx_init_chunky::@6: scope:[gfx_init_chunky]  from gfx_init_chunky::@5
  (byte/signed byte/word/signed word/dword/signed dword~) gfx_init_chunky::$10 ← (word/signed word/dword/signed dword) 16384 / (word/signed word/dword/signed dword) 16384
  (byte~) gfx_init_chunky::$11 ← ((byte)) (byte/signed byte/word/signed word/dword/signed dword~) gfx_init_chunky::$10
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 ← (byte~) gfx_init_chunky::$11
  call dtvSetCpuBankSegment1 
  to:gfx_init_chunky::@9
gfx_init_chunky::@9: scope:[gfx_init_chunky]  from gfx_init_chunky::@6
  to:gfx_init_chunky::@return
gfx_init_chunky::@return: scope:[gfx_init_chunky]  from gfx_init_chunky::@9
  return 
  to:@return
@6: scope:[]  from @4
  call main 
  to:@7
@7: scope:[]  from @6
  to:@end
@end: scope:[]  from @7

SYMBOL TABLE SSA
(label) @3
(label) @4
(label) @6
(label) @7
(label) @begin
(label) @end
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte*) CHUNKY
(byte*) CHUNKY#0
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A#0
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_A_DDR#0
(byte) DTV_BADLINE_OFF
(byte) DTV_BADLINE_OFF#0
(byte) DTV_CHUNKY
(byte) DTV_CHUNKY#0
(byte) DTV_COLORRAM_OFF
(byte) DTV_COLORRAM_OFF#0
(byte*) DTV_CONTROL
(byte*) DTV_CONTROL#0
(byte*) DTV_FEATURE
(byte*) DTV_FEATURE#0
(byte) DTV_FEATURE_ENABLE
(byte) DTV_FEATURE_ENABLE#0
(byte) DTV_HIGHCOLOR
(byte) DTV_HIGHCOLOR#0
(byte) DTV_LINEAR
(byte) DTV_LINEAR#0
(byte*) DTV_PALETTE
(byte*) DTV_PALETTE#0
(byte*) DTV_PLANEB_MODULO_HI
(byte*) DTV_PLANEB_MODULO_HI#0
(byte*) DTV_PLANEB_MODULO_LO
(byte*) DTV_PLANEB_MODULO_LO#0
(byte*) DTV_PLANEB_START_HI
(byte*) DTV_PLANEB_START_HI#0
(byte*) DTV_PLANEB_START_LO
(byte*) DTV_PLANEB_START_LO#0
(byte*) DTV_PLANEB_START_MI
(byte*) DTV_PLANEB_START_MI#0
(byte*) DTV_PLANEB_STEP
(byte*) DTV_PLANEB_STEP#0
(byte*) PROCPORT
(byte*) PROCPORT#0
(byte*) PROCPORT_DDR
(byte*) PROCPORT_DDR#0
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_DDR_MEMORY_MASK#0
(byte) PROCPORT_RAM_IO
(byte) PROCPORT_RAM_IO#0
(byte*) RASTER
(byte*) RASTER#0
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL#0
(byte*) VIC_CONTROL2
(byte*) VIC_CONTROL2#0
(byte) VIC_CSEL
(byte) VIC_CSEL#0
(byte) VIC_DEN
(byte) VIC_DEN#0
(byte) VIC_ECM
(byte) VIC_ECM#0
(byte) VIC_MCM
(byte) VIC_MCM#0
(byte*) VIC_MEMORY
(byte*) VIC_MEMORY#0
(byte) VIC_RSEL
(byte) VIC_RSEL#0
(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
(label) dtvSetCpuBankSegment1::@return
(byte*) dtvSetCpuBankSegment1::cpuBank
(byte*) dtvSetCpuBankSegment1::cpuBank#0
(byte) dtvSetCpuBankSegment1::cpuBankIdx
(byte) dtvSetCpuBankSegment1::cpuBankIdx#0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#1
(byte) dtvSetCpuBankSegment1::cpuBankIdx#2
(byte) dtvSetCpuBankSegment1::cpuBankIdx#3
(void()) gfx_init_chunky()
(byte*~) gfx_init_chunky::$0
(byte~) gfx_init_chunky::$1
(byte/signed byte/word/signed word/dword/signed dword~) gfx_init_chunky::$10
(byte~) gfx_init_chunky::$11
(bool~) gfx_init_chunky::$3
(bool~) gfx_init_chunky::$4
(word~) gfx_init_chunky::$6
(byte~) gfx_init_chunky::$7
(bool~) gfx_init_chunky::$8
(bool~) gfx_init_chunky::$9
(label) gfx_init_chunky::@1
(label) gfx_init_chunky::@2
(label) gfx_init_chunky::@3
(label) gfx_init_chunky::@4
(label) gfx_init_chunky::@5
(label) gfx_init_chunky::@6
(label) gfx_init_chunky::@7
(label) gfx_init_chunky::@8
(label) gfx_init_chunky::@9
(label) gfx_init_chunky::@return
(byte) gfx_init_chunky::c
(byte) gfx_init_chunky::c#0
(byte*) gfx_init_chunky::gfxb
(byte*) gfx_init_chunky::gfxb#0
(byte*) gfx_init_chunky::gfxb#1
(byte*) gfx_init_chunky::gfxb#2
(byte*) gfx_init_chunky::gfxb#3
(byte*) gfx_init_chunky::gfxb#4
(byte*) gfx_init_chunky::gfxb#5
(byte*) gfx_init_chunky::gfxb#6
(byte) gfx_init_chunky::gfxbCpuBank
(byte) gfx_init_chunky::gfxbCpuBank#0
(byte) gfx_init_chunky::gfxbCpuBank#1
(byte) gfx_init_chunky::gfxbCpuBank#2
(byte) gfx_init_chunky::gfxbCpuBank#3
(byte) gfx_init_chunky::gfxbCpuBank#4
(byte) gfx_init_chunky::gfxbCpuBank#5
(byte) gfx_init_chunky::gfxbCpuBank#6
(byte) gfx_init_chunky::gfxbCpuBank#7
(byte) gfx_init_chunky::gfxbCpuBank#8
(byte) gfx_init_chunky::gfxbCpuBank#9
(word) gfx_init_chunky::x
(word) gfx_init_chunky::x#0
(word) gfx_init_chunky::x#1
(word) gfx_init_chunky::x#2
(word) gfx_init_chunky::x#3
(word) gfx_init_chunky::x#4
(word) gfx_init_chunky::x#5
(byte) gfx_init_chunky::y
(byte) gfx_init_chunky::y#0
(byte) gfx_init_chunky::y#1
(byte) gfx_init_chunky::y#2
(byte) gfx_init_chunky::y#3
(byte) gfx_init_chunky::y#4
(byte) gfx_init_chunky::y#5
(byte) gfx_init_chunky::y#6
(byte) gfx_init_chunky::y#7
(void()) main()
(byte~) main::$1
(byte~) main::$10
(word~) main::$11
(word/signed dword/dword~) main::$12
(byte~) main::$13
(byte/word/dword~) main::$14
(word~) main::$15
(word~) main::$16
(word~) main::$17
(byte~) main::$18
(word~) main::$19
(byte~) main::$2
(word~) main::$20
(byte~) main::$21
(byte~) main::$22
(byte~) main::$23
(bool~) main::$24
(byte~) main::$25
(byte~) main::$26
(byte/word/dword~) main::$27
(bool~) main::$28
(byte~) main::$29
(byte~) main::$3
(byte~) main::$30
(byte~) main::$31
(byte~) main::$32
(byte~) main::$33
(bool~) main::$34
(byte~) main::$4
(byte~) main::$5
(byte~) main::$6
(byte/word/dword~) main::$7
(byte~) main::$8
(byte~) main::$9
(label) main::@1
(label) main::@17
(label) main::@2
(label) main::@3
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@return
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2
(byte) main::rst
(byte) main::rst#0
(byte) main::rst#1
(byte) main::rst#2
(byte) main::rst#3

OPTIMIZING CONTROL FLOW GRAPH
Culled Empty Block (label) gfx_init_chunky::@9
Culled Empty Block (label) @7
Succesful SSA optimization Pass2CullEmptyBlocks
Inversing boolean not (bool~) gfx_init_chunky::$4 ← (byte*) gfx_init_chunky::gfxb#3 != (word/dword/signed dword) 32768 from (bool~) gfx_init_chunky::$3 ← (byte*) gfx_init_chunky::gfxb#3 == (word/dword/signed dword) 32768
Succesful SSA optimization Pass2UnaryNotSimplification
Not aliassing across scopes: dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#0
Not aliassing across scopes: dtvSetCpuBankSegment1::cpuBankIdx#0 gfx_init_chunky::gfxbCpuBank#0
Not aliassing across scopes: dtvSetCpuBankSegment1::cpuBankIdx#1 gfx_init_chunky::gfxbCpuBank#4
Alias (byte) main::rst#2 = (byte) main::rst#3 
Alias (byte) gfx_init_chunky::gfxbCpuBank#0 = (byte~) gfx_init_chunky::$1 (byte) gfx_init_chunky::gfxbCpuBank#3 
Alias (byte) gfx_init_chunky::c#0 = (byte~) gfx_init_chunky::$7 
Alias (byte) gfx_init_chunky::gfxbCpuBank#4 = (byte) gfx_init_chunky::gfxbCpuBank#6 (byte) gfx_init_chunky::gfxbCpuBank#5 
Alias (word) gfx_init_chunky::x#3 = (word) gfx_init_chunky::x#5 (word) gfx_init_chunky::x#4 
Alias (byte) gfx_init_chunky::y#4 = (byte) gfx_init_chunky::y#7 (byte) gfx_init_chunky::y#5 
Alias (byte) gfx_init_chunky::y#2 = (byte) gfx_init_chunky::y#3 
Alias (byte*) gfx_init_chunky::gfxb#1 = (byte*) gfx_init_chunky::gfxb#6 
Alias (byte) gfx_init_chunky::gfxbCpuBank#8 = (byte) gfx_init_chunky::gfxbCpuBank#9 
Alias (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 = (byte~) gfx_init_chunky::$11 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#0
Not aliassing across scopes: dtvSetCpuBankSegment1::cpuBankIdx#0 gfx_init_chunky::gfxbCpuBank#0
Not aliassing across scopes: dtvSetCpuBankSegment1::cpuBankIdx#1 gfx_init_chunky::gfxbCpuBank#4
Alias (word) gfx_init_chunky::x#2 = (word) gfx_init_chunky::x#3 
Alias (byte) gfx_init_chunky::y#2 = (byte) gfx_init_chunky::y#4 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#0
Not aliassing across scopes: dtvSetCpuBankSegment1::cpuBankIdx#0 gfx_init_chunky::gfxbCpuBank#0
Not aliassing across scopes: dtvSetCpuBankSegment1::cpuBankIdx#1 gfx_init_chunky::gfxbCpuBank#4
Self Phi Eliminated (byte) main::rst#2
Self Phi Eliminated (byte) gfx_init_chunky::y#2
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) main::rst#2 (byte) main::rst#0
Redundant Phi (byte) gfx_init_chunky::y#2 (byte) gfx_init_chunky::y#6
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) main::$24 if((byte) main::j#1!=rangelast(0,15)) goto main::@1
Simple Condition (bool~) main::$28 if(*((byte*) RASTER#0)!=(byte) main::rst#0) goto main::@6
Simple Condition (bool~) main::$34 if((byte) main::rst#1!=(byte/word/signed word/dword/signed dword) 242) goto main::@8
Simple Condition (bool~) gfx_init_chunky::$4 if((byte*) gfx_init_chunky::gfxb#3!=(word/dword/signed dword) 32768) goto gfx_init_chunky::@3
Simple Condition (bool~) gfx_init_chunky::$8 if((word) gfx_init_chunky::x#1!=rangelast(0,319)) goto gfx_init_chunky::@2
Simple Condition (bool~) gfx_init_chunky::$9 if((byte) gfx_init_chunky::y#1!=rangelast(0,50)) goto gfx_init_chunky::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) PROCPORT_DDR#0 = ((byte*))0
Constant (const byte) PROCPORT_DDR_MEMORY_MASK#0 = 7
Constant (const byte*) PROCPORT#0 = ((byte*))1
Constant (const byte) PROCPORT_RAM_IO#0 = 53
Constant (const byte*) RASTER#0 = ((byte*))53266
Constant (const byte*) BORDERCOL#0 = ((byte*))53280
Constant (const byte*) VIC_CONTROL#0 = ((byte*))53265
Constant (const byte) VIC_ECM#0 = 64
Constant (const byte) VIC_DEN#0 = 16
Constant (const byte) VIC_RSEL#0 = 8
Constant (const byte*) VIC_CONTROL2#0 = ((byte*))53270
Constant (const byte) VIC_MCM#0 = 16
Constant (const byte) VIC_CSEL#0 = 8
Constant (const byte*) VIC_MEMORY#0 = ((byte*))53272
Constant (const byte*) CIA2_PORT_A#0 = ((byte*))56576
Constant (const byte*) CIA2_PORT_A_DDR#0 = ((byte*))56578
Constant (const byte*) DTV_FEATURE#0 = ((byte*))53311
Constant (const byte) DTV_FEATURE_ENABLE#0 = 1
Constant (const byte*) DTV_CONTROL#0 = ((byte*))53308
Constant (const byte) DTV_LINEAR#0 = 1
Constant (const byte) DTV_HIGHCOLOR#0 = 4
Constant (const byte) DTV_COLORRAM_OFF#0 = 16
Constant (const byte) DTV_BADLINE_OFF#0 = 32
Constant (const byte) DTV_CHUNKY#0 = 64
Constant (const byte*) DTV_PALETTE#0 = ((byte*))53760
Constant (const byte*) DTV_PLANEB_START_LO#0 = ((byte*))53321
Constant (const byte*) DTV_PLANEB_START_MI#0 = ((byte*))53322
Constant (const byte*) DTV_PLANEB_START_HI#0 = ((byte*))53323
Constant (const byte*) DTV_PLANEB_STEP#0 = ((byte*))53324
Constant (const byte*) DTV_PLANEB_MODULO_LO#0 = ((byte*))53319
Constant (const byte*) DTV_PLANEB_MODULO_HI#0 = ((byte*))53320
Constant (const byte*) dtvSetCpuBankSegment1::cpuBank#0 = ((byte*))255
Constant (const byte*) CHUNKY#0 = ((byte*))32768
Constant (const byte) main::j#0 = 0
Constant (const byte) main::rst#0 = 66
Constant (const byte*) gfx_init_chunky::gfxb#0 = ((byte*))16384
Constant (const byte) gfx_init_chunky::y#0 = 0
Constant (const word) gfx_init_chunky::x#0 = 0
Constant (const byte*) gfx_init_chunky::gfxb#2 = ((byte*))16384
Constant (const byte/signed byte/word/signed word/dword/signed dword) gfx_init_chunky::$10 = 16384/16384
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::$1 = DTV_HIGHCOLOR#0|DTV_LINEAR#0
Constant (const byte) main::$5 = VIC_DEN#0|VIC_ECM#0
Constant (const byte) main::$8 = VIC_MCM#0|VIC_CSEL#0
Constant (const byte) main::$9 = <CHUNKY#0
Constant (const byte) main::$10 = >CHUNKY#0
Constant (const word) main::$11 = ((word))CHUNKY#0
Constant (const word) main::$15 = ((word))CHUNKY#0
Constant (const word) main::$19 = ((word))CHUNKY#0
Constant (const byte) main::$25 = VIC_DEN#0|VIC_ECM#0
Constant (const byte) main::$29 = VIC_DEN#0|VIC_ECM#0
Constant (const byte*) gfx_init_chunky::$0 = CHUNKY#0/16384
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#2 = ((byte))gfx_init_chunky::$10
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::$2 = main::$1|DTV_COLORRAM_OFF#0
Constant (const byte) main::$6 = main::$5|VIC_RSEL#0
Constant (const word/signed dword/dword) main::$12 = main::$11/16384
Constant (const word) main::$16 = main::$15&16383
Constant (const word) main::$20 = main::$19&16383
Constant (const byte) main::$26 = main::$25|VIC_RSEL#0
Constant (const byte) main::$30 = main::$29|VIC_RSEL#0
Constant (const byte) gfx_init_chunky::gfxbCpuBank#0 = ((byte))gfx_init_chunky::$0
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::$3 = main::$2|DTV_CHUNKY#0
Constant (const byte/word/dword) main::$7 = main::$6|3
Constant (const byte) main::$13 = ((byte))main::$12
Constant (const word) main::$17 = main::$16>>6
Constant (const byte) main::$21 = >main::$20
Constant (const byte/word/dword) main::$27 = main::$26|3
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#0 = gfx_init_chunky::gfxbCpuBank#0
Constant (const byte) gfx_init_chunky::gfxbCpuBank#1 = ++gfx_init_chunky::gfxbCpuBank#0
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::$4 = main::$3|DTV_BADLINE_OFF#0
Constant (const byte/word/dword) main::$14 = 3^main::$13
Constant (const byte) main::$18 = ((byte))main::$17
Constant (const byte) main::$22 = main::$21>>2
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::$23 = main::$18|main::$22
Succesful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination if(true) goto main::@3
Succesful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Succesful SSA optimization Pass2EliminateUnusedBlocks
Resolved ranged next value main::j#1 ← ++ main::j#2 to ++
Resolved ranged comparison value if(main::j#1!=rangelast(0,15)) goto main::@1 to (byte/signed byte/word/signed word/dword/signed dword) 16
Resolved ranged next value gfx_init_chunky::x#1 ← ++ gfx_init_chunky::x#2 to ++
Resolved ranged comparison value if(gfx_init_chunky::x#1!=rangelast(0,319)) goto gfx_init_chunky::@2 to (word/signed word/dword/signed dword) 320
Resolved ranged next value gfx_init_chunky::y#1 ← ++ gfx_init_chunky::y#6 to ++
Resolved ranged comparison value if(gfx_init_chunky::y#1!=rangelast(0,50)) goto gfx_init_chunky::@1 to (byte/signed byte/word/signed word/dword/signed dword) 51
Culled Empty Block (label) @3
Culled Empty Block (label) @4
Culled Empty Block (label) main::@2
Culled Empty Block (label) main::@6
Culled Empty Block (label) gfx_init_chunky::@7
Succesful SSA optimization Pass2CullEmptyBlocks
Not aliassing across scopes: dtvSetCpuBankSegment1::cpuBankIdx#1 gfx_init_chunky::gfxbCpuBank#4
Not aliassing across scopes: dtvSetCpuBankSegment1::cpuBankIdx#1 gfx_init_chunky::gfxbCpuBank#4
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#2
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#2
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#0
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#0
Inlining constant with different constant siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::rst#0
Inlining constant with var siblings (const byte*) gfx_init_chunky::gfxb#0
Inlining constant with var siblings (const byte*) gfx_init_chunky::gfxb#0
Inlining constant with var siblings (const byte*) gfx_init_chunky::gfxb#0
Inlining constant with var siblings (const byte*) gfx_init_chunky::gfxb#0
Inlining constant with var siblings (const byte) gfx_init_chunky::y#0
Inlining constant with var siblings (const byte) gfx_init_chunky::y#0
Inlining constant with var siblings (const word) gfx_init_chunky::x#0
Inlining constant with var siblings (const word) gfx_init_chunky::x#0
Inlining constant with var siblings (const byte*) gfx_init_chunky::gfxb#2
Inlining constant with var siblings (const byte*) gfx_init_chunky::gfxb#2
Inlining constant with var siblings (const byte*) gfx_init_chunky::gfxb#2
Inlining constant with var siblings (const byte*) gfx_init_chunky::gfxb#2
Inlining constant with var siblings (const byte) gfx_init_chunky::gfxbCpuBank#0
Inlining constant with var siblings (const byte) gfx_init_chunky::gfxbCpuBank#0
Inlining constant with var siblings (const byte) gfx_init_chunky::gfxbCpuBank#0
Inlining constant with var siblings (const byte) gfx_init_chunky::gfxbCpuBank#0
Inlining constant with different constant siblings (const byte) gfx_init_chunky::gfxbCpuBank#0
Inlining constant with var siblings (const byte) gfx_init_chunky::gfxbCpuBank#1
Inlining constant with var siblings (const byte) gfx_init_chunky::gfxbCpuBank#1
Inlining constant with var siblings (const byte) gfx_init_chunky::gfxbCpuBank#1
Inlining constant with var siblings (const byte) gfx_init_chunky::gfxbCpuBank#1
Inlining constant with different constant siblings (const byte) gfx_init_chunky::gfxbCpuBank#1
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#0 = ((byte))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384
Constant inlined main::rst#0 = (byte/signed byte/word/signed word/dword/signed dword) 66
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#2 = ((byte))(word/signed word/dword/signed dword) 16384/(word/signed word/dword/signed dword) 16384
Constant inlined main::$12 = ((word))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384
Constant inlined main::$13 = ((byte))((word))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384
Constant inlined main::$14 = (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384
Constant inlined gfx_init_chunky::y#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$15 = ((word))(const byte*) CHUNKY#0
Constant inlined gfx_init_chunky::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$30 = (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0
Constant inlined main::$10 = >(const byte*) CHUNKY#0
Constant inlined main::$11 = ((word))(const byte*) CHUNKY#0
Constant inlined main::$16 = ((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383
Constant inlined main::$17 = ((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 6
Constant inlined main::$18 = ((byte))((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 6
Constant inlined main::$19 = ((word))(const byte*) CHUNKY#0
Constant inlined main::j#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$23 = ((byte))((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 6|>((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined gfx_init_chunky::gfxbCpuBank#1 = ++((byte))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384
Constant inlined main::$25 = (const byte) VIC_DEN#0|(const byte) VIC_ECM#0
Constant inlined main::$26 = (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0
Constant inlined gfx_init_chunky::gfxb#2 = ((byte*))(word/signed word/dword/signed dword) 16384
Constant inlined main::$20 = ((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383
Constant inlined gfx_init_chunky::gfxb#0 = ((byte*))(word/signed word/dword/signed dword) 16384
Constant inlined main::$21 = >((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383
Constant inlined main::$22 = >((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined gfx_init_chunky::gfxbCpuBank#0 = ((byte))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384
Constant inlined main::$1 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0
Constant inlined main::$27 = (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined gfx_init_chunky::$10 = (word/signed word/dword/signed dword) 16384/(word/signed word/dword/signed dword) 16384
Constant inlined main::$2 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_COLORRAM_OFF#0
Constant inlined main::$29 = (const byte) VIC_DEN#0|(const byte) VIC_ECM#0
Constant inlined main::$5 = (const byte) VIC_DEN#0|(const byte) VIC_ECM#0
Constant inlined main::$6 = (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0
Constant inlined main::$3 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_COLORRAM_OFF#0|(const byte) DTV_CHUNKY#0
Constant inlined main::$4 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_COLORRAM_OFF#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_BADLINE_OFF#0
Constant inlined gfx_init_chunky::$0 = (const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384
Constant inlined main::$9 = <(const byte*) CHUNKY#0
Constant inlined main::$7 = (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined main::$8 = (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @6 @end main main::@17 main::@1 main::@3 main::@5 main::@7 main::@8 gfx_init_chunky gfx_init_chunky::@1 gfx_init_chunky::@2 gfx_init_chunky::@4 gfx_init_chunky::@8 gfx_init_chunky::@3 gfx_init_chunky::@5 gfx_init_chunky::@6 gfx_init_chunky::@return dtvSetCpuBankSegment1 dtvSetCpuBankSegment1::@return 
Added new block during phi lifting main::@18(between main::@1 and main::@1)
Added new block during phi lifting gfx_init_chunky::@10(between gfx_init_chunky::@5 and gfx_init_chunky::@1)
Added new block during phi lifting gfx_init_chunky::@11(between gfx_init_chunky::@3 and gfx_init_chunky::@2)
Added new block during phi lifting gfx_init_chunky::@12(between gfx_init_chunky::@2 and gfx_init_chunky::@3)
Block Sequence Planned @begin @6 @end main main::@17 main::@1 main::@3 main::@5 main::@7 main::@8 main::@18 gfx_init_chunky gfx_init_chunky::@1 gfx_init_chunky::@2 gfx_init_chunky::@4 gfx_init_chunky::@8 gfx_init_chunky::@3 gfx_init_chunky::@5 gfx_init_chunky::@6 gfx_init_chunky::@return gfx_init_chunky::@10 gfx_init_chunky::@11 gfx_init_chunky::@12 dtvSetCpuBankSegment1 dtvSetCpuBankSegment1::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @6
Adding NOP phi() at start of @end
Adding NOP phi() at start of gfx_init_chunky
Adding NOP phi() at start of gfx_init_chunky::@6
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to gfx_init_chunky:7 
Calls in [gfx_init_chunky] to dtvSetCpuBankSegment1:40 dtvSetCpuBankSegment1:48 dtvSetCpuBankSegment1:61 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 10 initial phi equivalence classes
Coalesced [38] main::j#3 ← main::j#1
Coalesced [42] gfx_init_chunky::gfxb#8 ← gfx_init_chunky::gfxb#5
Coalesced [43] gfx_init_chunky::gfxbCpuBank#11 ← gfx_init_chunky::gfxbCpuBank#7
Coalesced [47] dtvSetCpuBankSegment1::cpuBankIdx#4 ← dtvSetCpuBankSegment1::cpuBankIdx#1
Coalesced [50] gfx_init_chunky::gfxbCpuBank#14 ← gfx_init_chunky::gfxbCpuBank#2
Coalesced [63] gfx_init_chunky::gfxb#7 ← gfx_init_chunky::gfxb#1
Coalesced [64] gfx_init_chunky::y#8 ← gfx_init_chunky::y#1
Coalesced [65] gfx_init_chunky::gfxbCpuBank#10 ← gfx_init_chunky::gfxbCpuBank#8
Coalesced (already) [66] gfx_init_chunky::gfxb#9 ← gfx_init_chunky::gfxb#1
Coalesced [67] gfx_init_chunky::x#6 ← gfx_init_chunky::x#1
Coalesced (already) [68] gfx_init_chunky::gfxbCpuBank#12 ← gfx_init_chunky::gfxbCpuBank#8
Coalesced [69] gfx_init_chunky::gfxb#10 ← gfx_init_chunky::gfxb#3
Coalesced (already) [70] gfx_init_chunky::gfxbCpuBank#13 ← gfx_init_chunky::gfxbCpuBank#4
Coalesced down to 6 phi equivalence classes
Culled Empty Block (label) main::@18
Culled Empty Block (label) gfx_init_chunky::@10
Culled Empty Block (label) gfx_init_chunky::@11
Culled Empty Block (label) gfx_init_chunky::@12
Block Sequence Planned @begin @6 @end main main::@17 main::@1 main::@3 main::@5 main::@7 main::@8 gfx_init_chunky gfx_init_chunky::@1 gfx_init_chunky::@2 gfx_init_chunky::@4 gfx_init_chunky::@8 gfx_init_chunky::@3 gfx_init_chunky::@5 gfx_init_chunky::@6 gfx_init_chunky::@return dtvSetCpuBankSegment1 dtvSetCpuBankSegment1::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @6
Adding NOP phi() at start of @end
Adding NOP phi() at start of gfx_init_chunky
Adding NOP phi() at start of gfx_init_chunky::@6
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@6
@6: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main  [ ] ( )
  to:@end
@end: scope:[]  from @6
  [3] phi() [ ] ( )
main: scope:[main]  from @6
  asm { sei  }
  [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2 [ ] )
  [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2 [ ] )
  [7] call gfx_init_chunky  [ ] ( main:2 [ ] )
  to:main::@17
main::@17: scope:[main]  from main
  [8] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 [ ] ( main:2 [ ] )
  [9] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_COLORRAM_OFF#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_BADLINE_OFF#0 [ ] ( main:2 [ ] )
  [10] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] )
  [11] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 [ ] ( main:2 [ ] )
  [12] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) CHUNKY#0 [ ] ( main:2 [ ] )
  [13] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) CHUNKY#0 [ ] ( main:2 [ ] )
  [14] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] )
  [15] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 8 [ ] ( main:2 [ ] )
  [16] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] )
  [17] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] )
  [18] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] )
  [19] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384 [ ] ( main:2 [ ] )
  [20] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 6|>((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 2 [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@17
  [21] (byte) main::j#2 ← phi( main::@1/(byte) main::j#1 main::@17/(byte/signed byte/word/signed word/dword/signed dword) 0 ) [ main::j#2 ] ( main:2 [ main::j#2 ] )
  [22] *((const byte*) DTV_PALETTE#0 + (byte) main::j#2) ← (byte) main::j#2 [ main::j#2 ] ( main:2 [ main::j#2 ] )
  [23] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 ] ( main:2 [ main::j#1 ] )
  [24] if((byte) main::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto main::@1 [ main::j#1 ] ( main:2 [ main::j#1 ] )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@8
  asm { ldx#$ff rff: cpxRASTER bnerff stabilize: nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop cpxRASTER beqeat+0 eat: inx cpx#$08 bnestabilize  }
  [26] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] )
  [27] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] )
  to:main::@5
main::@5: scope:[main]  from main::@3 main::@5
  [28] if(*((const byte*) RASTER#0)!=(byte/signed byte/word/signed word/dword/signed dword) 66) goto main::@5 [ ] ( main:2 [ ] )
  to:main::@7
main::@7: scope:[main]  from main::@5
  asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
  to:main::@8
main::@8: scope:[main]  from main::@7 main::@8
  [30] (byte) main::rst#1 ← *((const byte*) RASTER#0) [ main::rst#1 ] ( main:2 [ main::rst#1 ] )
  [31] (byte~) main::$31 ← (byte) main::rst#1 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ main::rst#1 main::$31 ] ( main:2 [ main::rst#1 main::$31 ] )
  [32] (byte~) main::$32 ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0 | (byte~) main::$31 [ main::rst#1 main::$32 ] ( main:2 [ main::rst#1 main::$32 ] )
  [33] *((const byte*) VIC_CONTROL#0) ← (byte~) main::$32 [ main::rst#1 ] ( main:2 [ main::rst#1 ] )
  [34] (byte~) main::$33 ← (byte) main::rst#1 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::rst#1 main::$33 ] ( main:2 [ main::rst#1 main::$33 ] )
  [35] *((const byte*) BORDERCOL#0) ← (byte~) main::$33 [ main::rst#1 ] ( main:2 [ main::rst#1 ] )
  asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
  [37] if((byte) main::rst#1!=(byte/word/signed word/dword/signed dword) 242) goto main::@8 [ ] ( main:2 [ ] )
  to:main::@3
gfx_init_chunky: scope:[gfx_init_chunky]  from main
  [38] phi() [ ] ( main:2::gfx_init_chunky:7 [ ] )
  [39] call dtvSetCpuBankSegment1  [ ] ( main:2::gfx_init_chunky:7 [ ] )
  to:gfx_init_chunky::@1
gfx_init_chunky::@1: scope:[gfx_init_chunky]  from gfx_init_chunky gfx_init_chunky::@5
  [40] (byte) gfx_init_chunky::gfxbCpuBank#7 ← phi( gfx_init_chunky::@5/(byte) gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky/++((byte))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384 ) [ gfx_init_chunky::gfxb#5 gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#7 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::gfxb#5 gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#7 ] )
  [40] (byte) gfx_init_chunky::y#6 ← phi( gfx_init_chunky::@5/(byte) gfx_init_chunky::y#1 gfx_init_chunky/(byte/signed byte/word/signed word/dword/signed dword) 0 ) [ gfx_init_chunky::gfxb#5 gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#7 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::gfxb#5 gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#7 ] )
  [40] (byte*) gfx_init_chunky::gfxb#5 ← phi( gfx_init_chunky::@5/(byte*) gfx_init_chunky::gfxb#1 gfx_init_chunky/((byte*))(word/signed word/dword/signed dword) 16384 ) [ gfx_init_chunky::gfxb#5 gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#7 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::gfxb#5 gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#7 ] )
  to:gfx_init_chunky::@2
gfx_init_chunky::@2: scope:[gfx_init_chunky]  from gfx_init_chunky::@1 gfx_init_chunky::@3
  [41] (byte) gfx_init_chunky::gfxbCpuBank#4 ← phi( gfx_init_chunky::@1/(byte) gfx_init_chunky::gfxbCpuBank#7 gfx_init_chunky::@3/(byte) gfx_init_chunky::gfxbCpuBank#8 ) [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#3 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#3 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] )
  [41] (word) gfx_init_chunky::x#2 ← phi( gfx_init_chunky::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_chunky::@3/(word) gfx_init_chunky::x#1 ) [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#3 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#3 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] )
  [41] (byte*) gfx_init_chunky::gfxb#3 ← phi( gfx_init_chunky::@1/(byte*) gfx_init_chunky::gfxb#5 gfx_init_chunky::@3/(byte*) gfx_init_chunky::gfxb#1 ) [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#3 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#3 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] )
  [42] if((byte*) gfx_init_chunky::gfxb#3!=(word/dword/signed dword) 32768) goto gfx_init_chunky::@3 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#3 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#3 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] )
  to:gfx_init_chunky::@4
gfx_init_chunky::@4: scope:[gfx_init_chunky]  from gfx_init_chunky::@2
  [43] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_chunky::gfxbCpuBank#4 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 dtvSetCpuBankSegment1::cpuBankIdx#1 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 dtvSetCpuBankSegment1::cpuBankIdx#1 ] )
  [44] call dtvSetCpuBankSegment1  [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] )
  to:gfx_init_chunky::@8
gfx_init_chunky::@8: scope:[gfx_init_chunky]  from gfx_init_chunky::@4
  [45] (byte) gfx_init_chunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_chunky::gfxbCpuBank#4 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#2 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#2 ] )
  to:gfx_init_chunky::@3
gfx_init_chunky::@3: scope:[gfx_init_chunky]  from gfx_init_chunky::@2 gfx_init_chunky::@8
  [46] (byte) gfx_init_chunky::gfxbCpuBank#8 ← phi( gfx_init_chunky::@2/(byte) gfx_init_chunky::gfxbCpuBank#4 gfx_init_chunky::@8/(byte) gfx_init_chunky::gfxbCpuBank#2 ) [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 ] )
  [46] (byte*) gfx_init_chunky::gfxb#4 ← phi( gfx_init_chunky::@2/(byte*) gfx_init_chunky::gfxb#3 gfx_init_chunky::@8/((byte*))(word/signed word/dword/signed dword) 16384 ) [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 ] )
  [47] (word~) gfx_init_chunky::$6 ← (word) gfx_init_chunky::x#2 + (byte) gfx_init_chunky::y#6 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::$6 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::$6 ] )
  [48] (byte) gfx_init_chunky::c#0 ← ((byte)) (word~) gfx_init_chunky::$6 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::c#0 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::c#0 ] )
  [49] *((byte*) gfx_init_chunky::gfxb#4) ← (byte) gfx_init_chunky::c#0 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 ] )
  [50] (byte*) gfx_init_chunky::gfxb#1 ← ++ (byte*) gfx_init_chunky::gfxb#4 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 ] )
  [51] (word) gfx_init_chunky::x#1 ← ++ (word) gfx_init_chunky::x#2 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] )
  [52] if((word) gfx_init_chunky::x#1!=(word/signed word/dword/signed dword) 320) goto gfx_init_chunky::@2 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] )
  to:gfx_init_chunky::@5
gfx_init_chunky::@5: scope:[gfx_init_chunky]  from gfx_init_chunky::@3
  [53] (byte) gfx_init_chunky::y#1 ← ++ (byte) gfx_init_chunky::y#6 [ gfx_init_chunky::gfxb#1 gfx_init_chunky::y#1 gfx_init_chunky::gfxbCpuBank#8 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::gfxb#1 gfx_init_chunky::y#1 gfx_init_chunky::gfxbCpuBank#8 ] )
  [54] if((byte) gfx_init_chunky::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 51) goto gfx_init_chunky::@1 [ gfx_init_chunky::gfxb#1 gfx_init_chunky::y#1 gfx_init_chunky::gfxbCpuBank#8 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::gfxb#1 gfx_init_chunky::y#1 gfx_init_chunky::gfxbCpuBank#8 ] )
  to:gfx_init_chunky::@6
gfx_init_chunky::@6: scope:[gfx_init_chunky]  from gfx_init_chunky::@5
  [55] phi() [ ] ( main:2::gfx_init_chunky:7 [ ] )
  [56] call dtvSetCpuBankSegment1  [ ] ( main:2::gfx_init_chunky:7 [ ] )
  to:gfx_init_chunky::@return
gfx_init_chunky::@return: scope:[gfx_init_chunky]  from gfx_init_chunky::@6
  [57] return  [ ] ( main:2::gfx_init_chunky:7 [ ] )
  to:@return
dtvSetCpuBankSegment1: scope:[dtvSetCpuBankSegment1]  from gfx_init_chunky gfx_init_chunky::@4 gfx_init_chunky::@6
  [58] (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 ← phi( gfx_init_chunky/((byte))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384 gfx_init_chunky::@4/(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 gfx_init_chunky::@6/((byte))(word/signed word/dword/signed dword) 16384/(word/signed word/dword/signed dword) 16384 ) [ dtvSetCpuBankSegment1::cpuBankIdx#3 ] ( main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:39 [ dtvSetCpuBankSegment1::cpuBankIdx#3 ] main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:44 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 dtvSetCpuBankSegment1::cpuBankIdx#3 ] main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:56 [ dtvSetCpuBankSegment1::cpuBankIdx#3 ] )
  [59] *((const byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 [ ] ( main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:39 [ ] main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:44 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:56 [ ] )
  asm { .byte$32,$dd lda$ff .byte$32,$00  }
  to:dtvSetCpuBankSegment1::@return
dtvSetCpuBankSegment1::@return: scope:[dtvSetCpuBankSegment1]  from dtvSetCpuBankSegment1
  [61] return  [ ] ( main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:39 [ ] main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:44 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:56 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@6 dominated by  @begin @6 
@end dominated by  @begin @end @6 
main dominated by  @begin main @6 
main::@17 dominated by  @begin main::@17 main @6 
main::@1 dominated by  @begin main::@17 main @6 main::@1 
main::@3 dominated by  @begin main::@17 main @6 main::@1 main::@3 
main::@5 dominated by  @begin main::@17 main @6 main::@1 main::@5 main::@3 
main::@7 dominated by  main::@7 @begin main::@17 main @6 main::@1 main::@5 main::@3 
main::@8 dominated by  main::@7 @begin main::@8 main::@17 main @6 main::@1 main::@5 main::@3 
gfx_init_chunky dominated by  @begin main @6 gfx_init_chunky 
gfx_init_chunky::@1 dominated by  @begin main @6 gfx_init_chunky gfx_init_chunky::@1 
gfx_init_chunky::@2 dominated by  @begin main @6 gfx_init_chunky gfx_init_chunky::@1 gfx_init_chunky::@2 
gfx_init_chunky::@4 dominated by  @begin main gfx_init_chunky::@4 @6 gfx_init_chunky gfx_init_chunky::@1 gfx_init_chunky::@2 
gfx_init_chunky::@8 dominated by  @begin main gfx_init_chunky::@4 @6 gfx_init_chunky gfx_init_chunky::@8 gfx_init_chunky::@1 gfx_init_chunky::@2 
gfx_init_chunky::@3 dominated by  @begin main gfx_init_chunky::@3 @6 gfx_init_chunky gfx_init_chunky::@1 gfx_init_chunky::@2 
gfx_init_chunky::@5 dominated by  @begin main gfx_init_chunky::@5 gfx_init_chunky::@3 @6 gfx_init_chunky gfx_init_chunky::@1 gfx_init_chunky::@2 
gfx_init_chunky::@6 dominated by  @begin main gfx_init_chunky::@5 gfx_init_chunky::@6 gfx_init_chunky::@3 @6 gfx_init_chunky gfx_init_chunky::@1 gfx_init_chunky::@2 
gfx_init_chunky::@return dominated by  @begin main gfx_init_chunky::@return gfx_init_chunky::@5 gfx_init_chunky::@6 gfx_init_chunky::@3 @6 gfx_init_chunky gfx_init_chunky::@1 gfx_init_chunky::@2 
dtvSetCpuBankSegment1 dominated by  @begin dtvSetCpuBankSegment1 main @6 gfx_init_chunky 
dtvSetCpuBankSegment1::@return dominated by  @begin dtvSetCpuBankSegment1 dtvSetCpuBankSegment1::@return main @6 gfx_init_chunky 

NATURAL LOOPS
Found back edge: Loop head: main::@1 tails: main::@1 blocks: null
Found back edge: Loop head: main::@5 tails: main::@5 blocks: null
Found back edge: Loop head: main::@3 tails: main::@8 blocks: null
Found back edge: Loop head: main::@8 tails: main::@8 blocks: null
Found back edge: Loop head: gfx_init_chunky::@2 tails: gfx_init_chunky::@3 blocks: null
Found back edge: Loop head: gfx_init_chunky::@1 tails: gfx_init_chunky::@5 blocks: null
Populated: Loop head: main::@1 tails: main::@1 blocks: main::@1 
Populated: Loop head: main::@5 tails: main::@5 blocks: main::@5 
Populated: Loop head: main::@3 tails: main::@8 blocks: main::@8 main::@7 main::@5 main::@3 
Populated: Loop head: main::@8 tails: main::@8 blocks: main::@8 
Populated: Loop head: gfx_init_chunky::@2 tails: gfx_init_chunky::@3 blocks: gfx_init_chunky::@3 gfx_init_chunky::@2 gfx_init_chunky::@8 gfx_init_chunky::@4 
Populated: Loop head: gfx_init_chunky::@1 tails: gfx_init_chunky::@5 blocks: gfx_init_chunky::@5 gfx_init_chunky::@3 gfx_init_chunky::@2 gfx_init_chunky::@8 gfx_init_chunky::@1 gfx_init_chunky::@4 
Loop head: main::@1 tails: main::@1 blocks: main::@1 
Loop head: main::@5 tails: main::@5 blocks: main::@5 
Loop head: main::@3 tails: main::@8 blocks: main::@8 main::@7 main::@5 main::@3 
Loop head: main::@8 tails: main::@8 blocks: main::@8 
Loop head: gfx_init_chunky::@2 tails: gfx_init_chunky::@3 blocks: gfx_init_chunky::@3 gfx_init_chunky::@2 gfx_init_chunky::@8 gfx_init_chunky::@4 
Loop head: gfx_init_chunky::@1 tails: gfx_init_chunky::@5 blocks: gfx_init_chunky::@5 gfx_init_chunky::@3 gfx_init_chunky::@2 gfx_init_chunky::@8 gfx_init_chunky::@1 gfx_init_chunky::@4 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 4 loops in scope [main]
  Loop head: main::@1 tails: main::@1 blocks: main::@1 
  Loop head: main::@5 tails: main::@5 blocks: main::@5 
  Loop head: main::@3 tails: main::@8 blocks: main::@8 main::@7 main::@5 main::@3 
  Loop head: main::@8 tails: main::@8 blocks: main::@8 
Found 2 loops in scope [gfx_init_chunky]
  Loop head: gfx_init_chunky::@2 tails: gfx_init_chunky::@3 blocks: gfx_init_chunky::@3 gfx_init_chunky::@2 gfx_init_chunky::@8 gfx_init_chunky::@4 
  Loop head: gfx_init_chunky::@1 tails: gfx_init_chunky::@5 blocks: gfx_init_chunky::@5 gfx_init_chunky::@3 gfx_init_chunky::@2 gfx_init_chunky::@8 gfx_init_chunky::@1 gfx_init_chunky::@4 
Found 0 loops in scope [dtvSetCpuBankSegment1]
Loop head: main::@1 tails: main::@1 blocks: main::@1  depth: 1
Loop head: main::@5 tails: main::@5 blocks: main::@5  depth: 2
Loop head: main::@3 tails: main::@8 blocks: main::@8 main::@7 main::@5 main::@3  depth: 1
Loop head: main::@8 tails: main::@8 blocks: main::@8  depth: 2
Loop head: gfx_init_chunky::@2 tails: gfx_init_chunky::@3 blocks: gfx_init_chunky::@3 gfx_init_chunky::@2 gfx_init_chunky::@8 gfx_init_chunky::@4  depth: 2
Loop head: gfx_init_chunky::@1 tails: gfx_init_chunky::@5 blocks: gfx_init_chunky::@5 gfx_init_chunky::@3 gfx_init_chunky::@2 gfx_init_chunky::@8 gfx_init_chunky::@1 gfx_init_chunky::@4  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) BORDERCOL
(byte*) CHUNKY
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte) DTV_BADLINE_OFF
(byte) DTV_CHUNKY
(byte) DTV_COLORRAM_OFF
(byte*) DTV_CONTROL
(byte*) DTV_FEATURE
(byte) DTV_FEATURE_ENABLE
(byte) DTV_HIGHCOLOR
(byte) DTV_LINEAR
(byte*) DTV_PALETTE
(byte*) DTV_PLANEB_MODULO_HI
(byte*) DTV_PLANEB_MODULO_LO
(byte*) DTV_PLANEB_START_HI
(byte*) DTV_PLANEB_START_LO
(byte*) DTV_PLANEB_START_MI
(byte*) DTV_PLANEB_STEP
(byte*) PROCPORT
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_RAM_IO
(byte*) RASTER
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
(byte*) dtvSetCpuBankSegment1::cpuBank
(byte) dtvSetCpuBankSegment1::cpuBankIdx
(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 202.0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#3 103.0
(void()) gfx_init_chunky()
(word~) gfx_init_chunky::$6 202.0
(byte) gfx_init_chunky::c
(byte) gfx_init_chunky::c#0 202.0
(byte*) gfx_init_chunky::gfxb
(byte*) gfx_init_chunky::gfxb#1 42.599999999999994
(byte*) gfx_init_chunky::gfxb#3 157.0
(byte*) gfx_init_chunky::gfxb#4 75.75
(byte*) gfx_init_chunky::gfxb#5 22.0
(byte) gfx_init_chunky::gfxbCpuBank
(byte) gfx_init_chunky::gfxbCpuBank#2 202.0
(byte) gfx_init_chunky::gfxbCpuBank#4 103.75
(byte) gfx_init_chunky::gfxbCpuBank#7 22.0
(byte) gfx_init_chunky::gfxbCpuBank#8 34.888888888888886
(word) gfx_init_chunky::x
(word) gfx_init_chunky::x#1 151.5
(word) gfx_init_chunky::x#2 30.299999999999997
(byte) gfx_init_chunky::y
(byte) gfx_init_chunky::y#1 16.5
(byte) gfx_init_chunky::y#6 9.461538461538462
(void()) main()
(byte~) main::$31 202.0
(byte~) main::$32 202.0
(byte~) main::$33 202.0
(byte) main::j
(byte) main::j#1 16.5
(byte) main::j#2 22.0
(byte) main::rst
(byte) main::rst#1 57.714285714285715

Initial phi equivalence classes
[ main::j#2 main::j#1 ]
[ gfx_init_chunky::y#6 gfx_init_chunky::y#1 ]
[ gfx_init_chunky::x#2 gfx_init_chunky::x#1 ]
[ gfx_init_chunky::gfxbCpuBank#4 gfx_init_chunky::gfxbCpuBank#7 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::gfxbCpuBank#2 ]
[ gfx_init_chunky::gfxb#4 gfx_init_chunky::gfxb#3 gfx_init_chunky::gfxb#5 gfx_init_chunky::gfxb#1 ]
[ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ]
Added variable main::rst#1 to zero page equivalence class [ main::rst#1 ]
Added variable main::$31 to zero page equivalence class [ main::$31 ]
Added variable main::$32 to zero page equivalence class [ main::$32 ]
Added variable main::$33 to zero page equivalence class [ main::$33 ]
Added variable gfx_init_chunky::$6 to zero page equivalence class [ gfx_init_chunky::$6 ]
Added variable gfx_init_chunky::c#0 to zero page equivalence class [ gfx_init_chunky::c#0 ]
Complete equivalence classes
[ main::j#2 main::j#1 ]
[ gfx_init_chunky::y#6 gfx_init_chunky::y#1 ]
[ gfx_init_chunky::x#2 gfx_init_chunky::x#1 ]
[ gfx_init_chunky::gfxbCpuBank#4 gfx_init_chunky::gfxbCpuBank#7 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::gfxbCpuBank#2 ]
[ gfx_init_chunky::gfxb#4 gfx_init_chunky::gfxb#3 gfx_init_chunky::gfxb#5 gfx_init_chunky::gfxb#1 ]
[ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ]
[ main::rst#1 ]
[ main::$31 ]
[ main::$32 ]
[ main::$33 ]
[ gfx_init_chunky::$6 ]
[ gfx_init_chunky::c#0 ]
Allocated zp ZP_BYTE:2 [ main::j#2 main::j#1 ]
Allocated zp ZP_BYTE:3 [ gfx_init_chunky::y#6 gfx_init_chunky::y#1 ]
Allocated zp ZP_WORD:4 [ gfx_init_chunky::x#2 gfx_init_chunky::x#1 ]
Allocated zp ZP_BYTE:6 [ gfx_init_chunky::gfxbCpuBank#4 gfx_init_chunky::gfxbCpuBank#7 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::gfxbCpuBank#2 ]
Allocated zp ZP_WORD:7 [ gfx_init_chunky::gfxb#4 gfx_init_chunky::gfxb#3 gfx_init_chunky::gfxb#5 gfx_init_chunky::gfxb#1 ]
Allocated zp ZP_BYTE:9 [ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ]
Allocated zp ZP_BYTE:10 [ main::rst#1 ]
Allocated zp ZP_BYTE:11 [ main::$31 ]
Allocated zp ZP_BYTE:12 [ main::$32 ]
Allocated zp ZP_BYTE:13 [ main::$33 ]
Allocated zp ZP_WORD:14 [ gfx_init_chunky::$6 ]
Allocated zp ZP_BYTE:16 [ gfx_init_chunky::c#0 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label PROCPORT_DDR = 0
  .const PROCPORT_DDR_MEMORY_MASK = 7
  .label PROCPORT = 1
  .const PROCPORT_RAM_IO = $35
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label VIC_CONTROL = $d011
  .const VIC_ECM = $40
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label VIC_CONTROL2 = $d016
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  .label VIC_MEMORY = $d018
  .label CIA2_PORT_A = $dd00
  .label CIA2_PORT_A_DDR = $dd02
  .label DTV_FEATURE = $d03f
  .const DTV_FEATURE_ENABLE = 1
  .label DTV_CONTROL = $d03c
  .const DTV_LINEAR = 1
  .const DTV_HIGHCOLOR = 4
  .const DTV_COLORRAM_OFF = $10
  .const DTV_BADLINE_OFF = $20
  .const DTV_CHUNKY = $40
  .label DTV_PALETTE = $d200
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  .label CHUNKY = $8000
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @6 [phi:@begin->@6]
b6_from_bbegin:
  jmp b6
//SEG4 @6
b6:
//SEG5 [2] call main  [ ] ( )
  jsr main
//SEG6 [3] phi from @6 to @end [phi:@6->@end]
bend_from_b6:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
    .label _31 = $b
    .label _32 = $c
    .label _33 = $d
    .label j = 2
    .label rst = $a
  //SEG9 asm { sei  }
    sei
  //SEG10 [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG11 [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG12 [7] call gfx_init_chunky  [ ] ( main:2 [ ] )
  //SEG13 [38] phi from main to gfx_init_chunky [phi:main->gfx_init_chunky]
  gfx_init_chunky_from_main:
    jsr gfx_init_chunky
    jmp b17
  //SEG14 main::@17
  b17:
  //SEG15 [8] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
  //SEG16 [9] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_COLORRAM_OFF#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_BADLINE_OFF#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_COLORRAM_OFF|DTV_CHUNKY|DTV_BADLINE_OFF
    sta DTV_CONTROL
  //SEG17 [10] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_ECM|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG18 [11] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
  //SEG19 [12] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) CHUNKY#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #<CHUNKY
    sta DTV_PLANEB_START_LO
  //SEG20 [13] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) CHUNKY#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #>CHUNKY
    sta DTV_PLANEB_START_MI
  //SEG21 [14] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG22 [15] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 8 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #8
    sta DTV_PLANEB_STEP
  //SEG23 [16] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG24 [17] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
  //SEG25 [18] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG26 [19] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #3^CHUNKY/$4000
    sta CIA2_PORT_A
  //SEG27 [20] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 6|>((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 2 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #(CHUNKY&$3fff)>>6|(0)>>2
    sta VIC_MEMORY
  //SEG28 [21] phi from main::@17 to main::@1 [phi:main::@17->main::@1]
  b1_from_b17:
  //SEG29 [21] phi (byte) main::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@17->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta j
    jmp b1
  //SEG30 [21] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG31 [21] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG32 main::@1
  b1:
  //SEG33 [22] *((const byte*) DTV_PALETTE#0 + (byte) main::j#2) ← (byte) main::j#2 [ main::j#2 ] ( main:2 [ main::j#2 ] ) -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy j
    tya
    sta DTV_PALETTE,y
  //SEG34 [23] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 ] ( main:2 [ main::j#1 ] ) -- vbuz1=_inc_vbuz1 
    inc j
  //SEG35 [24] if((byte) main::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto main::@1 [ main::j#1 ] ( main:2 [ main::j#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda j
    cmp #$10
    bne b1_from_b1
    jmp b3
  //SEG36 main::@3
  b3:
  //SEG37 asm { ldx#$ff rff: cpxRASTER bnerff stabilize: nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop cpxRASTER beqeat+0 eat: inx cpx#$08 bnestabilize  }
    ldx #$ff
  rff:
    cpx RASTER
    bne rff
  stabilize:
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    cpx RASTER
    beq eat+0
  eat:
    inx
    cpx #8
    bne stabilize
  //SEG38 [26] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_ECM|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG39 [27] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
    jmp b5
  //SEG40 main::@5
  b5:
  //SEG41 [28] if(*((const byte*) RASTER#0)!=(byte/signed byte/word/signed word/dword/signed dword) 66) goto main::@5 [ ] ( main:2 [ ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$42
    bne b5
    jmp b7
  //SEG42 main::@7
  b7:
  //SEG43 asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    jmp b8
  //SEG44 main::@8
  b8:
  //SEG45 [30] (byte) main::rst#1 ← *((const byte*) RASTER#0) [ main::rst#1 ] ( main:2 [ main::rst#1 ] ) -- vbuz1=_deref_pbuc1 
    lda RASTER
    sta rst
  //SEG46 [31] (byte~) main::$31 ← (byte) main::rst#1 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ main::rst#1 main::$31 ] ( main:2 [ main::rst#1 main::$31 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and rst
    sta _31
  //SEG47 [32] (byte~) main::$32 ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0 | (byte~) main::$31 [ main::rst#1 main::$32 ] ( main:2 [ main::rst#1 main::$32 ] ) -- vbuz1=vbuc1_bor_vbuz2 
    lda #VIC_DEN|VIC_ECM|VIC_RSEL
    ora _31
    sta _32
  //SEG48 [33] *((const byte*) VIC_CONTROL#0) ← (byte~) main::$32 [ main::rst#1 ] ( main:2 [ main::rst#1 ] ) -- _deref_pbuc1=vbuz1 
    lda _32
    sta VIC_CONTROL
  //SEG49 [34] (byte~) main::$33 ← (byte) main::rst#1 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::rst#1 main::$33 ] ( main:2 [ main::rst#1 main::$33 ] ) -- vbuz1=vbuz2_rol_4 
    lda rst
    asl
    asl
    asl
    asl
    sta _33
  //SEG50 [35] *((const byte*) BORDERCOL#0) ← (byte~) main::$33 [ main::rst#1 ] ( main:2 [ main::rst#1 ] ) -- _deref_pbuc1=vbuz1 
    lda _33
    sta BORDERCOL
  //SEG51 asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
  //SEG52 [37] if((byte) main::rst#1!=(byte/word/signed word/dword/signed dword) 242) goto main::@8 [ ] ( main:2 [ ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda rst
    cmp #$f2
    bne b8
    jmp b3
}
//SEG53 gfx_init_chunky
gfx_init_chunky: {
    .label _6 = $e
    .label c = $10
    .label gfxb = 7
    .label x = 4
    .label gfxbCpuBank = 6
    .label y = 3
  //SEG54 [39] call dtvSetCpuBankSegment1  [ ] ( main:2::gfx_init_chunky:7 [ ] )
  //SEG55 [58] phi from gfx_init_chunky to dtvSetCpuBankSegment1 [phi:gfx_init_chunky->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_chunky:
  //SEG56 [58] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = ((byte))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384 [phi:gfx_init_chunky->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$ff&CHUNKY/$4000
    sta dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
  //SEG57 [40] phi from gfx_init_chunky to gfx_init_chunky::@1 [phi:gfx_init_chunky->gfx_init_chunky::@1]
  b1_from_gfx_init_chunky:
  //SEG58 [40] phi (byte) gfx_init_chunky::gfxbCpuBank#7 = ++((byte))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384 [phi:gfx_init_chunky->gfx_init_chunky::@1#0] -- vbuz1=vbuc1 
    lda #($ff&CHUNKY/$4000)+1
    sta gfxbCpuBank
  //SEG59 [40] phi (byte) gfx_init_chunky::y#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_chunky->gfx_init_chunky::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG60 [40] phi (byte*) gfx_init_chunky::gfxb#5 = ((byte*))(word/signed word/dword/signed dword) 16384 [phi:gfx_init_chunky->gfx_init_chunky::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta gfxb
    lda #>$4000
    sta gfxb+1
    jmp b1
  //SEG61 [40] phi from gfx_init_chunky::@5 to gfx_init_chunky::@1 [phi:gfx_init_chunky::@5->gfx_init_chunky::@1]
  b1_from_b5:
  //SEG62 [40] phi (byte) gfx_init_chunky::gfxbCpuBank#7 = (byte) gfx_init_chunky::gfxbCpuBank#8 [phi:gfx_init_chunky::@5->gfx_init_chunky::@1#0] -- register_copy 
  //SEG63 [40] phi (byte) gfx_init_chunky::y#6 = (byte) gfx_init_chunky::y#1 [phi:gfx_init_chunky::@5->gfx_init_chunky::@1#1] -- register_copy 
  //SEG64 [40] phi (byte*) gfx_init_chunky::gfxb#5 = (byte*) gfx_init_chunky::gfxb#1 [phi:gfx_init_chunky::@5->gfx_init_chunky::@1#2] -- register_copy 
    jmp b1
  //SEG65 gfx_init_chunky::@1
  b1:
  //SEG66 [41] phi from gfx_init_chunky::@1 to gfx_init_chunky::@2 [phi:gfx_init_chunky::@1->gfx_init_chunky::@2]
  b2_from_b1:
  //SEG67 [41] phi (byte) gfx_init_chunky::gfxbCpuBank#4 = (byte) gfx_init_chunky::gfxbCpuBank#7 [phi:gfx_init_chunky::@1->gfx_init_chunky::@2#0] -- register_copy 
  //SEG68 [41] phi (word) gfx_init_chunky::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_chunky::@1->gfx_init_chunky::@2#1] -- vwuz1=vbuc1 
    lda #<0
    sta x
    lda #>0
    sta x+1
  //SEG69 [41] phi (byte*) gfx_init_chunky::gfxb#3 = (byte*) gfx_init_chunky::gfxb#5 [phi:gfx_init_chunky::@1->gfx_init_chunky::@2#2] -- register_copy 
    jmp b2
  //SEG70 [41] phi from gfx_init_chunky::@3 to gfx_init_chunky::@2 [phi:gfx_init_chunky::@3->gfx_init_chunky::@2]
  b2_from_b3:
  //SEG71 [41] phi (byte) gfx_init_chunky::gfxbCpuBank#4 = (byte) gfx_init_chunky::gfxbCpuBank#8 [phi:gfx_init_chunky::@3->gfx_init_chunky::@2#0] -- register_copy 
  //SEG72 [41] phi (word) gfx_init_chunky::x#2 = (word) gfx_init_chunky::x#1 [phi:gfx_init_chunky::@3->gfx_init_chunky::@2#1] -- register_copy 
  //SEG73 [41] phi (byte*) gfx_init_chunky::gfxb#3 = (byte*) gfx_init_chunky::gfxb#1 [phi:gfx_init_chunky::@3->gfx_init_chunky::@2#2] -- register_copy 
    jmp b2
  //SEG74 gfx_init_chunky::@2
  b2:
  //SEG75 [42] if((byte*) gfx_init_chunky::gfxb#3!=(word/dword/signed dword) 32768) goto gfx_init_chunky::@3 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#3 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#3 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] ) -- pbuz1_neq_vwuc1_then_la1 
    lda gfxb+1
    cmp #>$8000
    bne b3_from_b2
    lda gfxb
    cmp #<$8000
    bne b3_from_b2
    jmp b4
  //SEG76 gfx_init_chunky::@4
  b4:
  //SEG77 [43] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_chunky::gfxbCpuBank#4 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 dtvSetCpuBankSegment1::cpuBankIdx#1 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 dtvSetCpuBankSegment1::cpuBankIdx#1 ] ) -- vbuz1=vbuz2 
    lda gfxbCpuBank
    sta dtvSetCpuBankSegment1.cpuBankIdx
  //SEG78 [44] call dtvSetCpuBankSegment1  [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] )
  //SEG79 [58] phi from gfx_init_chunky::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_chunky::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b4:
  //SEG80 [58] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 [phi:gfx_init_chunky::@4->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    jmp b8
  //SEG81 gfx_init_chunky::@8
  b8:
  //SEG82 [45] (byte) gfx_init_chunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_chunky::gfxbCpuBank#4 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#2 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#2 ] ) -- vbuz1=_inc_vbuz1 
    inc gfxbCpuBank
  //SEG83 [46] phi from gfx_init_chunky::@8 to gfx_init_chunky::@3 [phi:gfx_init_chunky::@8->gfx_init_chunky::@3]
  b3_from_b8:
  //SEG84 [46] phi (byte) gfx_init_chunky::gfxbCpuBank#8 = (byte) gfx_init_chunky::gfxbCpuBank#2 [phi:gfx_init_chunky::@8->gfx_init_chunky::@3#0] -- register_copy 
  //SEG85 [46] phi (byte*) gfx_init_chunky::gfxb#4 = ((byte*))(word/signed word/dword/signed dword) 16384 [phi:gfx_init_chunky::@8->gfx_init_chunky::@3#1] -- pbuz1=pbuc1 
    lda #<$4000
    sta gfxb
    lda #>$4000
    sta gfxb+1
    jmp b3
  //SEG86 [46] phi from gfx_init_chunky::@2 to gfx_init_chunky::@3 [phi:gfx_init_chunky::@2->gfx_init_chunky::@3]
  b3_from_b2:
  //SEG87 [46] phi (byte) gfx_init_chunky::gfxbCpuBank#8 = (byte) gfx_init_chunky::gfxbCpuBank#4 [phi:gfx_init_chunky::@2->gfx_init_chunky::@3#0] -- register_copy 
  //SEG88 [46] phi (byte*) gfx_init_chunky::gfxb#4 = (byte*) gfx_init_chunky::gfxb#3 [phi:gfx_init_chunky::@2->gfx_init_chunky::@3#1] -- register_copy 
    jmp b3
  //SEG89 gfx_init_chunky::@3
  b3:
  //SEG90 [47] (word~) gfx_init_chunky::$6 ← (word) gfx_init_chunky::x#2 + (byte) gfx_init_chunky::y#6 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::$6 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::$6 ] ) -- vwuz1=vwuz2_plus_vbuz3 
    lda y
    clc
    adc x
    sta _6
    lda #0
    adc x+1
    sta _6+1
  //SEG91 [48] (byte) gfx_init_chunky::c#0 ← ((byte)) (word~) gfx_init_chunky::$6 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::c#0 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::c#0 ] ) -- vbuz1=_byte_vwuz2 
    lda _6
    sta c
  //SEG92 [49] *((byte*) gfx_init_chunky::gfxb#4) ← (byte) gfx_init_chunky::c#0 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 ] ) -- _deref_pbuz1=vbuz2 
    lda c
    ldy #0
    sta (gfxb),y
  //SEG93 [50] (byte*) gfx_init_chunky::gfxb#1 ← ++ (byte*) gfx_init_chunky::gfxb#4 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 ] ) -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG94 [51] (word) gfx_init_chunky::x#1 ← ++ (word) gfx_init_chunky::x#2 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] ) -- vwuz1=_inc_vwuz1 
    inc x
    bne !+
    inc x+1
  !:
  //SEG95 [52] if((word) gfx_init_chunky::x#1!=(word/signed word/dword/signed dword) 320) goto gfx_init_chunky::@2 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] ) -- vwuz1_neq_vwuc1_then_la1 
    lda x+1
    cmp #>$140
    bne b2_from_b3
    lda x
    cmp #<$140
    bne b2_from_b3
    jmp b5
  //SEG96 gfx_init_chunky::@5
  b5:
  //SEG97 [53] (byte) gfx_init_chunky::y#1 ← ++ (byte) gfx_init_chunky::y#6 [ gfx_init_chunky::gfxb#1 gfx_init_chunky::y#1 gfx_init_chunky::gfxbCpuBank#8 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::gfxb#1 gfx_init_chunky::y#1 gfx_init_chunky::gfxbCpuBank#8 ] ) -- vbuz1=_inc_vbuz1 
    inc y
  //SEG98 [54] if((byte) gfx_init_chunky::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 51) goto gfx_init_chunky::@1 [ gfx_init_chunky::gfxb#1 gfx_init_chunky::y#1 gfx_init_chunky::gfxbCpuBank#8 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::gfxb#1 gfx_init_chunky::y#1 gfx_init_chunky::gfxbCpuBank#8 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$33
    bne b1_from_b5
  //SEG99 [55] phi from gfx_init_chunky::@5 to gfx_init_chunky::@6 [phi:gfx_init_chunky::@5->gfx_init_chunky::@6]
  b6_from_b5:
    jmp b6
  //SEG100 gfx_init_chunky::@6
  b6:
  //SEG101 [56] call dtvSetCpuBankSegment1  [ ] ( main:2::gfx_init_chunky:7 [ ] )
  //SEG102 [58] phi from gfx_init_chunky::@6 to dtvSetCpuBankSegment1 [phi:gfx_init_chunky::@6->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b6:
  //SEG103 [58] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = ((byte))(word/signed word/dword/signed dword) 16384/(word/signed word/dword/signed dword) 16384 [phi:gfx_init_chunky::@6->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp breturn
  //SEG104 gfx_init_chunky::@return
  breturn:
  //SEG105 [57] return  [ ] ( main:2::gfx_init_chunky:7 [ ] )
    rts
}
//SEG106 dtvSetCpuBankSegment1
dtvSetCpuBankSegment1: {
    .label cpuBank = $ff
    .label cpuBankIdx = 9
  //SEG107 [59] *((const byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 [ ] ( main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:39 [ ] main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:44 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:56 [ ] ) -- _deref_pbuc1=vbuz1 
    lda cpuBankIdx
    sta cpuBank
  //SEG108 asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda $ff
    .byte $32, $00
    jmp breturn
  //SEG109 dtvSetCpuBankSegment1::@return
  breturn:
  //SEG110 [61] return  [ ] ( main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:39 [ ] main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:44 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:56 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [9] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_COLORRAM_OFF#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_BADLINE_OFF#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [11] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) CHUNKY#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) CHUNKY#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [14] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [15] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 8 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [16] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [17] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [18] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [19] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [20] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 6|>((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 2 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement asm { ldx#$ff rff: cpxRASTER bnerff stabilize: nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop cpxRASTER beqeat+0 eat: inx cpx#$08 bnestabilize  } always clobbers reg byte x 
Statement [26] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [27] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [28] if(*((const byte*) RASTER#0)!=(byte/signed byte/word/signed word/dword/signed dword) 66) goto main::@5 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [31] (byte~) main::$31 ← (byte) main::rst#1 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ main::rst#1 main::$31 ] ( main:2 [ main::rst#1 main::$31 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ main::rst#1 ]
Statement [32] (byte~) main::$32 ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0 | (byte~) main::$31 [ main::rst#1 main::$32 ] ( main:2 [ main::rst#1 main::$32 ] ) always clobbers reg byte a 
Statement [34] (byte~) main::$33 ← (byte) main::rst#1 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::rst#1 main::$33 ] ( main:2 [ main::rst#1 main::$33 ] ) always clobbers reg byte a 
Statement [42] if((byte*) gfx_init_chunky::gfxb#3!=(word/dword/signed dword) 32768) goto gfx_init_chunky::@3 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#3 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#3 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ gfx_init_chunky::y#6 gfx_init_chunky::y#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ gfx_init_chunky::gfxbCpuBank#4 gfx_init_chunky::gfxbCpuBank#7 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::gfxbCpuBank#2 ]
Statement [47] (word~) gfx_init_chunky::$6 ← (word) gfx_init_chunky::x#2 + (byte) gfx_init_chunky::y#6 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::$6 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::$6 ] ) always clobbers reg byte a 
Statement [48] (byte) gfx_init_chunky::c#0 ← ((byte)) (word~) gfx_init_chunky::$6 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::c#0 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::c#0 ] ) always clobbers reg byte a 
Statement [49] *((byte*) gfx_init_chunky::gfxb#4) ← (byte) gfx_init_chunky::c#0 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:3 [ gfx_init_chunky::y#6 gfx_init_chunky::y#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:6 [ gfx_init_chunky::gfxbCpuBank#4 gfx_init_chunky::gfxbCpuBank#7 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::gfxbCpuBank#2 ]
Statement [52] if((word) gfx_init_chunky::x#1!=(word/signed word/dword/signed dword) 320) goto gfx_init_chunky::@2 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] ) always clobbers reg byte a 
Statement asm { .byte$32,$dd lda$ff .byte$32,$00  } always clobbers reg byte a 
Statement [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [9] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_COLORRAM_OFF#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_BADLINE_OFF#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [11] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) CHUNKY#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) CHUNKY#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [14] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [15] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 8 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [16] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [17] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [18] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [19] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [20] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 6|>((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 2 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement asm { ldx#$ff rff: cpxRASTER bnerff stabilize: nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop cpxRASTER beqeat+0 eat: inx cpx#$08 bnestabilize  } always clobbers reg byte x 
Statement [26] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [27] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [28] if(*((const byte*) RASTER#0)!=(byte/signed byte/word/signed word/dword/signed dword) 66) goto main::@5 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [31] (byte~) main::$31 ← (byte) main::rst#1 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ main::rst#1 main::$31 ] ( main:2 [ main::rst#1 main::$31 ] ) always clobbers reg byte a 
Statement [32] (byte~) main::$32 ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0 | (byte~) main::$31 [ main::rst#1 main::$32 ] ( main:2 [ main::rst#1 main::$32 ] ) always clobbers reg byte a 
Statement [34] (byte~) main::$33 ← (byte) main::rst#1 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::rst#1 main::$33 ] ( main:2 [ main::rst#1 main::$33 ] ) always clobbers reg byte a 
Statement [42] if((byte*) gfx_init_chunky::gfxb#3!=(word/dword/signed dword) 32768) goto gfx_init_chunky::@3 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#3 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#3 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] ) always clobbers reg byte a 
Statement [47] (word~) gfx_init_chunky::$6 ← (word) gfx_init_chunky::x#2 + (byte) gfx_init_chunky::y#6 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::$6 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::$6 ] ) always clobbers reg byte a 
Statement [48] (byte) gfx_init_chunky::c#0 ← ((byte)) (word~) gfx_init_chunky::$6 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::c#0 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::c#0 ] ) always clobbers reg byte a 
Statement [49] *((byte*) gfx_init_chunky::gfxb#4) ← (byte) gfx_init_chunky::c#0 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 ] ) always clobbers reg byte y 
Statement [52] if((word) gfx_init_chunky::x#1!=(word/signed word/dword/signed dword) 320) goto gfx_init_chunky::@2 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] ) always clobbers reg byte a 
Statement asm { .byte$32,$dd lda$ff .byte$32,$00  } always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::j#2 main::j#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ gfx_init_chunky::y#6 gfx_init_chunky::y#1 ] : zp ZP_BYTE:3 , reg byte x , 
Potential registers zp ZP_WORD:4 [ gfx_init_chunky::x#2 gfx_init_chunky::x#1 ] : zp ZP_WORD:4 , 
Potential registers zp ZP_BYTE:6 [ gfx_init_chunky::gfxbCpuBank#4 gfx_init_chunky::gfxbCpuBank#7 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::gfxbCpuBank#2 ] : zp ZP_BYTE:6 , reg byte x , 
Potential registers zp ZP_WORD:7 [ gfx_init_chunky::gfxb#4 gfx_init_chunky::gfxb#3 gfx_init_chunky::gfxb#5 gfx_init_chunky::gfxb#1 ] : zp ZP_WORD:7 , 
Potential registers zp ZP_BYTE:9 [ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ] : zp ZP_BYTE:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ main::rst#1 ] : zp ZP_BYTE:10 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:11 [ main::$31 ] : zp ZP_BYTE:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ main::$32 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ main::$33 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:14 [ gfx_init_chunky::$6 ] : zp ZP_WORD:14 , 
Potential registers zp ZP_BYTE:16 [ gfx_init_chunky::c#0 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [gfx_init_chunky] 362.64: zp ZP_BYTE:6 [ gfx_init_chunky::gfxbCpuBank#4 gfx_init_chunky::gfxbCpuBank#7 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::gfxbCpuBank#2 ] 297.35: zp ZP_WORD:7 [ gfx_init_chunky::gfxb#4 gfx_init_chunky::gfxb#3 gfx_init_chunky::gfxb#5 gfx_init_chunky::gfxb#1 ] 202: zp ZP_WORD:14 [ gfx_init_chunky::$6 ] 202: zp ZP_BYTE:16 [ gfx_init_chunky::c#0 ] 181.8: zp ZP_WORD:4 [ gfx_init_chunky::x#2 gfx_init_chunky::x#1 ] 25.96: zp ZP_BYTE:3 [ gfx_init_chunky::y#6 gfx_init_chunky::y#1 ] 
Uplift Scope [main] 202: zp ZP_BYTE:11 [ main::$31 ] 202: zp ZP_BYTE:12 [ main::$32 ] 202: zp ZP_BYTE:13 [ main::$33 ] 57.71: zp ZP_BYTE:10 [ main::rst#1 ] 38.5: zp ZP_BYTE:2 [ main::j#2 main::j#1 ] 
Uplift Scope [dtvSetCpuBankSegment1] 305: zp ZP_BYTE:9 [ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ] 
Uplift Scope [] 

Uplifting [gfx_init_chunky] best 25250 combination reg byte x [ gfx_init_chunky::gfxbCpuBank#4 gfx_init_chunky::gfxbCpuBank#7 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::gfxbCpuBank#2 ] zp ZP_WORD:7 [ gfx_init_chunky::gfxb#4 gfx_init_chunky::gfxb#3 gfx_init_chunky::gfxb#5 gfx_init_chunky::gfxb#1 ] zp ZP_WORD:14 [ gfx_init_chunky::$6 ] reg byte a [ gfx_init_chunky::c#0 ] zp ZP_WORD:4 [ gfx_init_chunky::x#2 gfx_init_chunky::x#1 ] zp ZP_BYTE:3 [ gfx_init_chunky::y#6 gfx_init_chunky::y#1 ] 
Uplifting [main] best 22650 combination reg byte a [ main::$31 ] reg byte a [ main::$32 ] reg byte a [ main::$33 ] reg byte x [ main::rst#1 ] zp ZP_BYTE:2 [ main::j#2 main::j#1 ] 
Limited combination testing to 100 combinations of 768 possible.
Uplifting [dtvSetCpuBankSegment1] best 22541 combination reg byte a [ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ] 
Uplifting [] best 22541 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ main::j#2 main::j#1 ]
Uplifting [main] best 22421 combination reg byte x [ main::j#2 main::j#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ gfx_init_chunky::y#6 gfx_init_chunky::y#1 ]
Uplifting [gfx_init_chunky] best 22421 combination zp ZP_BYTE:3 [ gfx_init_chunky::y#6 gfx_init_chunky::y#1 ] 
Allocated (was zp ZP_BYTE:3) zp ZP_BYTE:2 [ gfx_init_chunky::y#6 gfx_init_chunky::y#1 ]
Allocated (was zp ZP_WORD:4) zp ZP_WORD:3 [ gfx_init_chunky::x#2 gfx_init_chunky::x#1 ]
Allocated (was zp ZP_WORD:7) zp ZP_WORD:5 [ gfx_init_chunky::gfxb#4 gfx_init_chunky::gfxb#3 gfx_init_chunky::gfxb#5 gfx_init_chunky::gfxb#1 ]
Allocated (was zp ZP_WORD:14) zp ZP_WORD:7 [ gfx_init_chunky::$6 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label PROCPORT_DDR = 0
  .const PROCPORT_DDR_MEMORY_MASK = 7
  .label PROCPORT = 1
  .const PROCPORT_RAM_IO = $35
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label VIC_CONTROL = $d011
  .const VIC_ECM = $40
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label VIC_CONTROL2 = $d016
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  .label VIC_MEMORY = $d018
  .label CIA2_PORT_A = $dd00
  .label CIA2_PORT_A_DDR = $dd02
  .label DTV_FEATURE = $d03f
  .const DTV_FEATURE_ENABLE = 1
  .label DTV_CONTROL = $d03c
  .const DTV_LINEAR = 1
  .const DTV_HIGHCOLOR = 4
  .const DTV_COLORRAM_OFF = $10
  .const DTV_BADLINE_OFF = $20
  .const DTV_CHUNKY = $40
  .label DTV_PALETTE = $d200
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  .label CHUNKY = $8000
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @6 [phi:@begin->@6]
b6_from_bbegin:
  jmp b6
//SEG4 @6
b6:
//SEG5 [2] call main  [ ] ( )
  jsr main
//SEG6 [3] phi from @6 to @end [phi:@6->@end]
bend_from_b6:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
  //SEG9 asm { sei  }
    sei
  //SEG10 [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG11 [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG12 [7] call gfx_init_chunky  [ ] ( main:2 [ ] )
  //SEG13 [38] phi from main to gfx_init_chunky [phi:main->gfx_init_chunky]
  gfx_init_chunky_from_main:
    jsr gfx_init_chunky
    jmp b17
  //SEG14 main::@17
  b17:
  //SEG15 [8] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
  //SEG16 [9] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_COLORRAM_OFF#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_BADLINE_OFF#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_COLORRAM_OFF|DTV_CHUNKY|DTV_BADLINE_OFF
    sta DTV_CONTROL
  //SEG17 [10] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_ECM|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG18 [11] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
  //SEG19 [12] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) CHUNKY#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #<CHUNKY
    sta DTV_PLANEB_START_LO
  //SEG20 [13] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) CHUNKY#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #>CHUNKY
    sta DTV_PLANEB_START_MI
  //SEG21 [14] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG22 [15] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 8 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #8
    sta DTV_PLANEB_STEP
  //SEG23 [16] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG24 [17] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
  //SEG25 [18] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG26 [19] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #3^CHUNKY/$4000
    sta CIA2_PORT_A
  //SEG27 [20] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 6|>((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 2 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #(CHUNKY&$3fff)>>6|(0)>>2
    sta VIC_MEMORY
  //SEG28 [21] phi from main::@17 to main::@1 [phi:main::@17->main::@1]
  b1_from_b17:
  //SEG29 [21] phi (byte) main::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@17->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG30 [21] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG31 [21] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG32 main::@1
  b1:
  //SEG33 [22] *((const byte*) DTV_PALETTE#0 + (byte) main::j#2) ← (byte) main::j#2 [ main::j#2 ] ( main:2 [ main::j#2 ] ) -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG34 [23] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 ] ( main:2 [ main::j#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG35 [24] if((byte) main::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto main::@1 [ main::j#1 ] ( main:2 [ main::j#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b1
    jmp b3
  //SEG36 main::@3
  b3:
  //SEG37 asm { ldx#$ff rff: cpxRASTER bnerff stabilize: nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop cpxRASTER beqeat+0 eat: inx cpx#$08 bnestabilize  }
    ldx #$ff
  rff:
    cpx RASTER
    bne rff
  stabilize:
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    cpx RASTER
    beq eat+0
  eat:
    inx
    cpx #8
    bne stabilize
  //SEG38 [26] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_ECM|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG39 [27] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
    jmp b5
  //SEG40 main::@5
  b5:
  //SEG41 [28] if(*((const byte*) RASTER#0)!=(byte/signed byte/word/signed word/dword/signed dword) 66) goto main::@5 [ ] ( main:2 [ ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$42
    bne b5
    jmp b7
  //SEG42 main::@7
  b7:
  //SEG43 asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    jmp b8
  //SEG44 main::@8
  b8:
  //SEG45 [30] (byte) main::rst#1 ← *((const byte*) RASTER#0) [ main::rst#1 ] ( main:2 [ main::rst#1 ] ) -- vbuxx=_deref_pbuc1 
    ldx RASTER
  //SEG46 [31] (byte~) main::$31 ← (byte) main::rst#1 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ main::rst#1 main::$31 ] ( main:2 [ main::rst#1 main::$31 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
  //SEG47 [32] (byte~) main::$32 ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0 | (byte~) main::$31 [ main::rst#1 main::$32 ] ( main:2 [ main::rst#1 main::$32 ] ) -- vbuaa=vbuc1_bor_vbuaa 
    ora #VIC_DEN|VIC_ECM|VIC_RSEL
  //SEG48 [33] *((const byte*) VIC_CONTROL#0) ← (byte~) main::$32 [ main::rst#1 ] ( main:2 [ main::rst#1 ] ) -- _deref_pbuc1=vbuaa 
    sta VIC_CONTROL
  //SEG49 [34] (byte~) main::$33 ← (byte) main::rst#1 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::rst#1 main::$33 ] ( main:2 [ main::rst#1 main::$33 ] ) -- vbuaa=vbuxx_rol_4 
    txa
    asl
    asl
    asl
    asl
  //SEG50 [35] *((const byte*) BORDERCOL#0) ← (byte~) main::$33 [ main::rst#1 ] ( main:2 [ main::rst#1 ] ) -- _deref_pbuc1=vbuaa 
    sta BORDERCOL
  //SEG51 asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
  //SEG52 [37] if((byte) main::rst#1!=(byte/word/signed word/dword/signed dword) 242) goto main::@8 [ ] ( main:2 [ ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$f2
    bne b8
    jmp b3
}
//SEG53 gfx_init_chunky
gfx_init_chunky: {
    .label _6 = 7
    .label gfxb = 5
    .label x = 3
    .label y = 2
  //SEG54 [39] call dtvSetCpuBankSegment1  [ ] ( main:2::gfx_init_chunky:7 [ ] )
  //SEG55 [58] phi from gfx_init_chunky to dtvSetCpuBankSegment1 [phi:gfx_init_chunky->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_chunky:
  //SEG56 [58] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = ((byte))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384 [phi:gfx_init_chunky->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$ff&CHUNKY/$4000
    jsr dtvSetCpuBankSegment1
  //SEG57 [40] phi from gfx_init_chunky to gfx_init_chunky::@1 [phi:gfx_init_chunky->gfx_init_chunky::@1]
  b1_from_gfx_init_chunky:
  //SEG58 [40] phi (byte) gfx_init_chunky::gfxbCpuBank#7 = ++((byte))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384 [phi:gfx_init_chunky->gfx_init_chunky::@1#0] -- vbuxx=vbuc1 
    ldx #($ff&CHUNKY/$4000)+1
  //SEG59 [40] phi (byte) gfx_init_chunky::y#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_chunky->gfx_init_chunky::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG60 [40] phi (byte*) gfx_init_chunky::gfxb#5 = ((byte*))(word/signed word/dword/signed dword) 16384 [phi:gfx_init_chunky->gfx_init_chunky::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta gfxb
    lda #>$4000
    sta gfxb+1
    jmp b1
  //SEG61 [40] phi from gfx_init_chunky::@5 to gfx_init_chunky::@1 [phi:gfx_init_chunky::@5->gfx_init_chunky::@1]
  b1_from_b5:
  //SEG62 [40] phi (byte) gfx_init_chunky::gfxbCpuBank#7 = (byte) gfx_init_chunky::gfxbCpuBank#8 [phi:gfx_init_chunky::@5->gfx_init_chunky::@1#0] -- register_copy 
  //SEG63 [40] phi (byte) gfx_init_chunky::y#6 = (byte) gfx_init_chunky::y#1 [phi:gfx_init_chunky::@5->gfx_init_chunky::@1#1] -- register_copy 
  //SEG64 [40] phi (byte*) gfx_init_chunky::gfxb#5 = (byte*) gfx_init_chunky::gfxb#1 [phi:gfx_init_chunky::@5->gfx_init_chunky::@1#2] -- register_copy 
    jmp b1
  //SEG65 gfx_init_chunky::@1
  b1:
  //SEG66 [41] phi from gfx_init_chunky::@1 to gfx_init_chunky::@2 [phi:gfx_init_chunky::@1->gfx_init_chunky::@2]
  b2_from_b1:
  //SEG67 [41] phi (byte) gfx_init_chunky::gfxbCpuBank#4 = (byte) gfx_init_chunky::gfxbCpuBank#7 [phi:gfx_init_chunky::@1->gfx_init_chunky::@2#0] -- register_copy 
  //SEG68 [41] phi (word) gfx_init_chunky::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_chunky::@1->gfx_init_chunky::@2#1] -- vwuz1=vbuc1 
    lda #<0
    sta x
    lda #>0
    sta x+1
  //SEG69 [41] phi (byte*) gfx_init_chunky::gfxb#3 = (byte*) gfx_init_chunky::gfxb#5 [phi:gfx_init_chunky::@1->gfx_init_chunky::@2#2] -- register_copy 
    jmp b2
  //SEG70 [41] phi from gfx_init_chunky::@3 to gfx_init_chunky::@2 [phi:gfx_init_chunky::@3->gfx_init_chunky::@2]
  b2_from_b3:
  //SEG71 [41] phi (byte) gfx_init_chunky::gfxbCpuBank#4 = (byte) gfx_init_chunky::gfxbCpuBank#8 [phi:gfx_init_chunky::@3->gfx_init_chunky::@2#0] -- register_copy 
  //SEG72 [41] phi (word) gfx_init_chunky::x#2 = (word) gfx_init_chunky::x#1 [phi:gfx_init_chunky::@3->gfx_init_chunky::@2#1] -- register_copy 
  //SEG73 [41] phi (byte*) gfx_init_chunky::gfxb#3 = (byte*) gfx_init_chunky::gfxb#1 [phi:gfx_init_chunky::@3->gfx_init_chunky::@2#2] -- register_copy 
    jmp b2
  //SEG74 gfx_init_chunky::@2
  b2:
  //SEG75 [42] if((byte*) gfx_init_chunky::gfxb#3!=(word/dword/signed dword) 32768) goto gfx_init_chunky::@3 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#3 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#3 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] ) -- pbuz1_neq_vwuc1_then_la1 
    lda gfxb+1
    cmp #>$8000
    bne b3_from_b2
    lda gfxb
    cmp #<$8000
    bne b3_from_b2
    jmp b4
  //SEG76 gfx_init_chunky::@4
  b4:
  //SEG77 [43] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_chunky::gfxbCpuBank#4 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 dtvSetCpuBankSegment1::cpuBankIdx#1 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 dtvSetCpuBankSegment1::cpuBankIdx#1 ] ) -- vbuaa=vbuxx 
    txa
  //SEG78 [44] call dtvSetCpuBankSegment1  [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] )
  //SEG79 [58] phi from gfx_init_chunky::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_chunky::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b4:
  //SEG80 [58] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 [phi:gfx_init_chunky::@4->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    jmp b8
  //SEG81 gfx_init_chunky::@8
  b8:
  //SEG82 [45] (byte) gfx_init_chunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_chunky::gfxbCpuBank#4 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#2 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#2 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG83 [46] phi from gfx_init_chunky::@8 to gfx_init_chunky::@3 [phi:gfx_init_chunky::@8->gfx_init_chunky::@3]
  b3_from_b8:
  //SEG84 [46] phi (byte) gfx_init_chunky::gfxbCpuBank#8 = (byte) gfx_init_chunky::gfxbCpuBank#2 [phi:gfx_init_chunky::@8->gfx_init_chunky::@3#0] -- register_copy 
  //SEG85 [46] phi (byte*) gfx_init_chunky::gfxb#4 = ((byte*))(word/signed word/dword/signed dword) 16384 [phi:gfx_init_chunky::@8->gfx_init_chunky::@3#1] -- pbuz1=pbuc1 
    lda #<$4000
    sta gfxb
    lda #>$4000
    sta gfxb+1
    jmp b3
  //SEG86 [46] phi from gfx_init_chunky::@2 to gfx_init_chunky::@3 [phi:gfx_init_chunky::@2->gfx_init_chunky::@3]
  b3_from_b2:
  //SEG87 [46] phi (byte) gfx_init_chunky::gfxbCpuBank#8 = (byte) gfx_init_chunky::gfxbCpuBank#4 [phi:gfx_init_chunky::@2->gfx_init_chunky::@3#0] -- register_copy 
  //SEG88 [46] phi (byte*) gfx_init_chunky::gfxb#4 = (byte*) gfx_init_chunky::gfxb#3 [phi:gfx_init_chunky::@2->gfx_init_chunky::@3#1] -- register_copy 
    jmp b3
  //SEG89 gfx_init_chunky::@3
  b3:
  //SEG90 [47] (word~) gfx_init_chunky::$6 ← (word) gfx_init_chunky::x#2 + (byte) gfx_init_chunky::y#6 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::$6 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::$6 ] ) -- vwuz1=vwuz2_plus_vbuz3 
    lda y
    clc
    adc x
    sta _6
    lda #0
    adc x+1
    sta _6+1
  //SEG91 [48] (byte) gfx_init_chunky::c#0 ← ((byte)) (word~) gfx_init_chunky::$6 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::c#0 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::c#0 ] ) -- vbuaa=_byte_vwuz1 
    lda _6
  //SEG92 [49] *((byte*) gfx_init_chunky::gfxb#4) ← (byte) gfx_init_chunky::c#0 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxb),y
  //SEG93 [50] (byte*) gfx_init_chunky::gfxb#1 ← ++ (byte*) gfx_init_chunky::gfxb#4 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 ] ) -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG94 [51] (word) gfx_init_chunky::x#1 ← ++ (word) gfx_init_chunky::x#2 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] ) -- vwuz1=_inc_vwuz1 
    inc x
    bne !+
    inc x+1
  !:
  //SEG95 [52] if((word) gfx_init_chunky::x#1!=(word/signed word/dword/signed dword) 320) goto gfx_init_chunky::@2 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] ) -- vwuz1_neq_vwuc1_then_la1 
    lda x+1
    cmp #>$140
    bne b2_from_b3
    lda x
    cmp #<$140
    bne b2_from_b3
    jmp b5
  //SEG96 gfx_init_chunky::@5
  b5:
  //SEG97 [53] (byte) gfx_init_chunky::y#1 ← ++ (byte) gfx_init_chunky::y#6 [ gfx_init_chunky::gfxb#1 gfx_init_chunky::y#1 gfx_init_chunky::gfxbCpuBank#8 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::gfxb#1 gfx_init_chunky::y#1 gfx_init_chunky::gfxbCpuBank#8 ] ) -- vbuz1=_inc_vbuz1 
    inc y
  //SEG98 [54] if((byte) gfx_init_chunky::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 51) goto gfx_init_chunky::@1 [ gfx_init_chunky::gfxb#1 gfx_init_chunky::y#1 gfx_init_chunky::gfxbCpuBank#8 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::gfxb#1 gfx_init_chunky::y#1 gfx_init_chunky::gfxbCpuBank#8 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$33
    bne b1_from_b5
  //SEG99 [55] phi from gfx_init_chunky::@5 to gfx_init_chunky::@6 [phi:gfx_init_chunky::@5->gfx_init_chunky::@6]
  b6_from_b5:
    jmp b6
  //SEG100 gfx_init_chunky::@6
  b6:
  //SEG101 [56] call dtvSetCpuBankSegment1  [ ] ( main:2::gfx_init_chunky:7 [ ] )
  //SEG102 [58] phi from gfx_init_chunky::@6 to dtvSetCpuBankSegment1 [phi:gfx_init_chunky::@6->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b6:
  //SEG103 [58] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = ((byte))(word/signed word/dword/signed dword) 16384/(word/signed word/dword/signed dword) 16384 [phi:gfx_init_chunky::@6->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp breturn
  //SEG104 gfx_init_chunky::@return
  breturn:
  //SEG105 [57] return  [ ] ( main:2::gfx_init_chunky:7 [ ] )
    rts
}
//SEG106 dtvSetCpuBankSegment1
dtvSetCpuBankSegment1: {
    .label cpuBank = $ff
  //SEG107 [59] *((const byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 [ ] ( main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:39 [ ] main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:44 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:56 [ ] ) -- _deref_pbuc1=vbuaa 
    sta cpuBank
  //SEG108 asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda $ff
    .byte $32, $00
    jmp breturn
  //SEG109 dtvSetCpuBankSegment1::@return
  breturn:
  //SEG110 [61] return  [ ] ( main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:39 [ ] main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:44 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:56 [ ] )
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b6
Removing instruction jmp bend
Removing instruction jmp b17
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b8
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b1 with b1
Replacing label b3_from_b2 with b3
Replacing label b3_from_b2 with b3
Replacing label b2_from_b3 with b2
Replacing label b2_from_b3 with b2
Replacing label b1_from_b5 with b1
Removing instruction bbegin:
Removing instruction b6_from_bbegin:
Removing instruction bend_from_b6:
Removing instruction b1_from_b1:
Removing instruction b1_from_b5:
Removing instruction b2_from_b1:
Removing instruction b2_from_b3:
Removing instruction b3_from_b2:
Removing instruction b6_from_b5:
Removing instruction dtvSetCpuBankSegment1_from_b6:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b6:
Removing instruction bend:
Removing instruction gfx_init_chunky_from_main:
Removing instruction b17:
Removing instruction b1_from_b17:
Removing instruction b7:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_chunky:
Removing instruction b1_from_gfx_init_chunky:
Removing instruction b4:
Removing instruction dtvSetCpuBankSegment1_from_b4:
Removing instruction b8:
Removing instruction b3_from_b8:
Removing instruction b5:
Removing instruction b6:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @6
(label) @begin
(label) @end
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) 53280
(byte*) CHUNKY
(const byte*) CHUNKY#0 CHUNKY = ((byte*))(word/dword/signed dword) 32768
(byte*) CIA2_PORT_A
(const byte*) CIA2_PORT_A#0 CIA2_PORT_A = ((byte*))(word/dword/signed dword) 56576
(byte*) CIA2_PORT_A_DDR
(const byte*) CIA2_PORT_A_DDR#0 CIA2_PORT_A_DDR = ((byte*))(word/dword/signed dword) 56578
(byte) DTV_BADLINE_OFF
(const byte) DTV_BADLINE_OFF#0 DTV_BADLINE_OFF = (byte/signed byte/word/signed word/dword/signed dword) 32
(byte) DTV_CHUNKY
(const byte) DTV_CHUNKY#0 DTV_CHUNKY = (byte/signed byte/word/signed word/dword/signed dword) 64
(byte) DTV_COLORRAM_OFF
(const byte) DTV_COLORRAM_OFF#0 DTV_COLORRAM_OFF = (byte/signed byte/word/signed word/dword/signed dword) 16
(byte*) DTV_CONTROL
(const byte*) DTV_CONTROL#0 DTV_CONTROL = ((byte*))(word/dword/signed dword) 53308
(byte*) DTV_FEATURE
(const byte*) DTV_FEATURE#0 DTV_FEATURE = ((byte*))(word/dword/signed dword) 53311
(byte) DTV_FEATURE_ENABLE
(const byte) DTV_FEATURE_ENABLE#0 DTV_FEATURE_ENABLE = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte) DTV_HIGHCOLOR
(const byte) DTV_HIGHCOLOR#0 DTV_HIGHCOLOR = (byte/signed byte/word/signed word/dword/signed dword) 4
(byte) DTV_LINEAR
(const byte) DTV_LINEAR#0 DTV_LINEAR = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte*) DTV_PALETTE
(const byte*) DTV_PALETTE#0 DTV_PALETTE = ((byte*))(word/dword/signed dword) 53760
(byte*) DTV_PLANEB_MODULO_HI
(const byte*) DTV_PLANEB_MODULO_HI#0 DTV_PLANEB_MODULO_HI = ((byte*))(word/dword/signed dword) 53320
(byte*) DTV_PLANEB_MODULO_LO
(const byte*) DTV_PLANEB_MODULO_LO#0 DTV_PLANEB_MODULO_LO = ((byte*))(word/dword/signed dword) 53319
(byte*) DTV_PLANEB_START_HI
(const byte*) DTV_PLANEB_START_HI#0 DTV_PLANEB_START_HI = ((byte*))(word/dword/signed dword) 53323
(byte*) DTV_PLANEB_START_LO
(const byte*) DTV_PLANEB_START_LO#0 DTV_PLANEB_START_LO = ((byte*))(word/dword/signed dword) 53321
(byte*) DTV_PLANEB_START_MI
(const byte*) DTV_PLANEB_START_MI#0 DTV_PLANEB_START_MI = ((byte*))(word/dword/signed dword) 53322
(byte*) DTV_PLANEB_STEP
(const byte*) DTV_PLANEB_STEP#0 DTV_PLANEB_STEP = ((byte*))(word/dword/signed dword) 53324
(byte*) PROCPORT
(const byte*) PROCPORT#0 PROCPORT = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 1
(byte*) PROCPORT_DDR
(const byte*) PROCPORT_DDR#0 PROCPORT_DDR = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 0
(byte) PROCPORT_DDR_MEMORY_MASK
(const byte) PROCPORT_DDR_MEMORY_MASK#0 PROCPORT_DDR_MEMORY_MASK = (byte/signed byte/word/signed word/dword/signed dword) 7
(byte) PROCPORT_RAM_IO
(const byte) PROCPORT_RAM_IO#0 PROCPORT_RAM_IO = (byte/signed byte/word/signed word/dword/signed dword) 53
(byte*) RASTER
(const byte*) RASTER#0 RASTER = ((byte*))(word/dword/signed dword) 53266
(byte*) VIC_CONTROL
(const byte*) VIC_CONTROL#0 VIC_CONTROL = ((byte*))(word/dword/signed dword) 53265
(byte*) VIC_CONTROL2
(const byte*) VIC_CONTROL2#0 VIC_CONTROL2 = ((byte*))(word/dword/signed dword) 53270
(byte) VIC_CSEL
(const byte) VIC_CSEL#0 VIC_CSEL = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte) VIC_DEN
(const byte) VIC_DEN#0 VIC_DEN = (byte/signed byte/word/signed word/dword/signed dword) 16
(byte) VIC_ECM
(const byte) VIC_ECM#0 VIC_ECM = (byte/signed byte/word/signed word/dword/signed dword) 64
(byte) VIC_MCM
(const byte) VIC_MCM#0 VIC_MCM = (byte/signed byte/word/signed word/dword/signed dword) 16
(byte*) VIC_MEMORY
(const byte*) VIC_MEMORY#0 VIC_MEMORY = ((byte*))(word/dword/signed dword) 53272
(byte) VIC_RSEL
(const byte) VIC_RSEL#0 VIC_RSEL = (byte/signed byte/word/signed word/dword/signed dword) 8
(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
(label) dtvSetCpuBankSegment1::@return
(byte*) dtvSetCpuBankSegment1::cpuBank
(const byte*) dtvSetCpuBankSegment1::cpuBank#0 cpuBank = ((byte*))(byte/word/signed word/dword/signed dword) 255
(byte) dtvSetCpuBankSegment1::cpuBankIdx
(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 reg byte a 202.0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#3 reg byte a 103.0
(void()) gfx_init_chunky()
(word~) gfx_init_chunky::$6 $6 zp ZP_WORD:7 202.0
(label) gfx_init_chunky::@1
(label) gfx_init_chunky::@2
(label) gfx_init_chunky::@3
(label) gfx_init_chunky::@4
(label) gfx_init_chunky::@5
(label) gfx_init_chunky::@6
(label) gfx_init_chunky::@8
(label) gfx_init_chunky::@return
(byte) gfx_init_chunky::c
(byte) gfx_init_chunky::c#0 reg byte a 202.0
(byte*) gfx_init_chunky::gfxb
(byte*) gfx_init_chunky::gfxb#1 gfxb zp ZP_WORD:5 42.599999999999994
(byte*) gfx_init_chunky::gfxb#3 gfxb zp ZP_WORD:5 157.0
(byte*) gfx_init_chunky::gfxb#4 gfxb zp ZP_WORD:5 75.75
(byte*) gfx_init_chunky::gfxb#5 gfxb zp ZP_WORD:5 22.0
(byte) gfx_init_chunky::gfxbCpuBank
(byte) gfx_init_chunky::gfxbCpuBank#2 reg byte x 202.0
(byte) gfx_init_chunky::gfxbCpuBank#4 reg byte x 103.75
(byte) gfx_init_chunky::gfxbCpuBank#7 reg byte x 22.0
(byte) gfx_init_chunky::gfxbCpuBank#8 reg byte x 34.888888888888886
(word) gfx_init_chunky::x
(word) gfx_init_chunky::x#1 x zp ZP_WORD:3 151.5
(word) gfx_init_chunky::x#2 x zp ZP_WORD:3 30.299999999999997
(byte) gfx_init_chunky::y
(byte) gfx_init_chunky::y#1 y zp ZP_BYTE:2 16.5
(byte) gfx_init_chunky::y#6 y zp ZP_BYTE:2 9.461538461538462
(void()) main()
(byte~) main::$31 reg byte a 202.0
(byte~) main::$32 reg byte a 202.0
(byte~) main::$33 reg byte a 202.0
(label) main::@1
(label) main::@17
(label) main::@3
(label) main::@5
(label) main::@7
(label) main::@8
(byte) main::j
(byte) main::j#1 reg byte x 16.5
(byte) main::j#2 reg byte x 22.0
(byte) main::rst
(byte) main::rst#1 reg byte x 57.714285714285715

reg byte x [ main::j#2 main::j#1 ]
zp ZP_BYTE:2 [ gfx_init_chunky::y#6 gfx_init_chunky::y#1 ]
zp ZP_WORD:3 [ gfx_init_chunky::x#2 gfx_init_chunky::x#1 ]
reg byte x [ gfx_init_chunky::gfxbCpuBank#4 gfx_init_chunky::gfxbCpuBank#7 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::gfxbCpuBank#2 ]
zp ZP_WORD:5 [ gfx_init_chunky::gfxb#4 gfx_init_chunky::gfxb#3 gfx_init_chunky::gfxb#5 gfx_init_chunky::gfxb#1 ]
reg byte a [ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ]
reg byte x [ main::rst#1 ]
reg byte a [ main::$31 ]
reg byte a [ main::$32 ]
reg byte a [ main::$33 ]
zp ZP_WORD:7 [ gfx_init_chunky::$6 ]
reg byte a [ gfx_init_chunky::c#0 ]


FINAL ASSEMBLER
Score: 19888

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label PROCPORT_DDR = 0
  .const PROCPORT_DDR_MEMORY_MASK = 7
  .label PROCPORT = 1
  .const PROCPORT_RAM_IO = $35
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label VIC_CONTROL = $d011
  .const VIC_ECM = $40
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label VIC_CONTROL2 = $d016
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  .label VIC_MEMORY = $d018
  .label CIA2_PORT_A = $dd00
  .label CIA2_PORT_A_DDR = $dd02
  .label DTV_FEATURE = $d03f
  .const DTV_FEATURE_ENABLE = 1
  .label DTV_CONTROL = $d03c
  .const DTV_LINEAR = 1
  .const DTV_HIGHCOLOR = 4
  .const DTV_COLORRAM_OFF = $10
  .const DTV_BADLINE_OFF = $20
  .const DTV_CHUNKY = $40
  .label DTV_PALETTE = $d200
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  .label CHUNKY = $8000
//SEG2 @begin
//SEG3 [1] phi from @begin to @6 [phi:@begin->@6]
//SEG4 @6
//SEG5 [2] call main  [ ] ( )
  jsr main
//SEG6 [3] phi from @6 to @end [phi:@6->@end]
//SEG7 @end
//SEG8 main
main: {
  //SEG9 asm { sei  }
    sei
  //SEG10 [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG11 [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG12 [7] call gfx_init_chunky  [ ] ( main:2 [ ] )
  //SEG13 [38] phi from main to gfx_init_chunky [phi:main->gfx_init_chunky]
    jsr gfx_init_chunky
  //SEG14 main::@17
  //SEG15 [8] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
  //SEG16 [9] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_COLORRAM_OFF#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_BADLINE_OFF#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_COLORRAM_OFF|DTV_CHUNKY|DTV_BADLINE_OFF
    sta DTV_CONTROL
  //SEG17 [10] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_ECM|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG18 [11] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
  //SEG19 [12] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) CHUNKY#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #<CHUNKY
    sta DTV_PLANEB_START_LO
  //SEG20 [13] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) CHUNKY#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #>CHUNKY
    sta DTV_PLANEB_START_MI
  //SEG21 [14] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG22 [15] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 8 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #8
    sta DTV_PLANEB_STEP
  //SEG23 [16] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG24 [17] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_MODULO_HI
  //SEG25 [18] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG26 [19] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #3^CHUNKY/$4000
    sta CIA2_PORT_A
  //SEG27 [20] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 6|>((word))(const byte*) CHUNKY#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 2 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #(CHUNKY&$3fff)>>6|(0)>>2
    sta VIC_MEMORY
  //SEG28 [21] phi from main::@17 to main::@1 [phi:main::@17->main::@1]
  //SEG29 [21] phi (byte) main::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@17->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG30 [21] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG31 [21] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG32 main::@1
  b1:
  //SEG33 [22] *((const byte*) DTV_PALETTE#0 + (byte) main::j#2) ← (byte) main::j#2 [ main::j#2 ] ( main:2 [ main::j#2 ] ) -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG34 [23] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 ] ( main:2 [ main::j#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG35 [24] if((byte) main::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto main::@1 [ main::j#1 ] ( main:2 [ main::j#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG36 main::@3
  b3:
  //SEG37 asm { ldx#$ff rff: cpxRASTER bnerff stabilize: nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop cpxRASTER beqeat+0 eat: inx cpx#$08 bnestabilize  }
    ldx #$ff
  rff:
    cpx RASTER
    bne rff
  stabilize:
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    cpx RASTER
    beq eat+0
  eat:
    inx
    cpx #8
    bne stabilize
  //SEG38 [26] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_ECM|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG39 [27] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
  //SEG40 main::@5
  b5:
  //SEG41 [28] if(*((const byte*) RASTER#0)!=(byte/signed byte/word/signed word/dword/signed dword) 66) goto main::@5 [ ] ( main:2 [ ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$42
    bne b5
  //SEG42 main::@7
  //SEG43 asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
  //SEG44 main::@8
  b8:
  //SEG45 [30] (byte) main::rst#1 ← *((const byte*) RASTER#0) [ main::rst#1 ] ( main:2 [ main::rst#1 ] ) -- vbuxx=_deref_pbuc1 
    ldx RASTER
  //SEG46 [31] (byte~) main::$31 ← (byte) main::rst#1 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ main::rst#1 main::$31 ] ( main:2 [ main::rst#1 main::$31 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
  //SEG47 [32] (byte~) main::$32 ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0 | (byte~) main::$31 [ main::rst#1 main::$32 ] ( main:2 [ main::rst#1 main::$32 ] ) -- vbuaa=vbuc1_bor_vbuaa 
    ora #VIC_DEN|VIC_ECM|VIC_RSEL
  //SEG48 [33] *((const byte*) VIC_CONTROL#0) ← (byte~) main::$32 [ main::rst#1 ] ( main:2 [ main::rst#1 ] ) -- _deref_pbuc1=vbuaa 
    sta VIC_CONTROL
  //SEG49 [34] (byte~) main::$33 ← (byte) main::rst#1 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::rst#1 main::$33 ] ( main:2 [ main::rst#1 main::$33 ] ) -- vbuaa=vbuxx_rol_4 
    txa
    asl
    asl
    asl
    asl
  //SEG50 [35] *((const byte*) BORDERCOL#0) ← (byte~) main::$33 [ main::rst#1 ] ( main:2 [ main::rst#1 ] ) -- _deref_pbuc1=vbuaa 
    sta BORDERCOL
  //SEG51 asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
  //SEG52 [37] if((byte) main::rst#1!=(byte/word/signed word/dword/signed dword) 242) goto main::@8 [ ] ( main:2 [ ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$f2
    bne b8
    jmp b3
}
//SEG53 gfx_init_chunky
gfx_init_chunky: {
    .label _6 = 7
    .label gfxb = 5
    .label x = 3
    .label y = 2
  //SEG54 [39] call dtvSetCpuBankSegment1  [ ] ( main:2::gfx_init_chunky:7 [ ] )
  //SEG55 [58] phi from gfx_init_chunky to dtvSetCpuBankSegment1 [phi:gfx_init_chunky->dtvSetCpuBankSegment1]
  //SEG56 [58] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = ((byte))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384 [phi:gfx_init_chunky->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$ff&CHUNKY/$4000
    jsr dtvSetCpuBankSegment1
  //SEG57 [40] phi from gfx_init_chunky to gfx_init_chunky::@1 [phi:gfx_init_chunky->gfx_init_chunky::@1]
  //SEG58 [40] phi (byte) gfx_init_chunky::gfxbCpuBank#7 = ++((byte))(const byte*) CHUNKY#0/(word/signed word/dword/signed dword) 16384 [phi:gfx_init_chunky->gfx_init_chunky::@1#0] -- vbuxx=vbuc1 
    ldx #($ff&CHUNKY/$4000)+1
  //SEG59 [40] phi (byte) gfx_init_chunky::y#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_chunky->gfx_init_chunky::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG60 [40] phi (byte*) gfx_init_chunky::gfxb#5 = ((byte*))(word/signed word/dword/signed dword) 16384 [phi:gfx_init_chunky->gfx_init_chunky::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta gfxb
    lda #>$4000
    sta gfxb+1
  //SEG61 [40] phi from gfx_init_chunky::@5 to gfx_init_chunky::@1 [phi:gfx_init_chunky::@5->gfx_init_chunky::@1]
  //SEG62 [40] phi (byte) gfx_init_chunky::gfxbCpuBank#7 = (byte) gfx_init_chunky::gfxbCpuBank#8 [phi:gfx_init_chunky::@5->gfx_init_chunky::@1#0] -- register_copy 
  //SEG63 [40] phi (byte) gfx_init_chunky::y#6 = (byte) gfx_init_chunky::y#1 [phi:gfx_init_chunky::@5->gfx_init_chunky::@1#1] -- register_copy 
  //SEG64 [40] phi (byte*) gfx_init_chunky::gfxb#5 = (byte*) gfx_init_chunky::gfxb#1 [phi:gfx_init_chunky::@5->gfx_init_chunky::@1#2] -- register_copy 
  //SEG65 gfx_init_chunky::@1
  b1:
  //SEG66 [41] phi from gfx_init_chunky::@1 to gfx_init_chunky::@2 [phi:gfx_init_chunky::@1->gfx_init_chunky::@2]
  //SEG67 [41] phi (byte) gfx_init_chunky::gfxbCpuBank#4 = (byte) gfx_init_chunky::gfxbCpuBank#7 [phi:gfx_init_chunky::@1->gfx_init_chunky::@2#0] -- register_copy 
  //SEG68 [41] phi (word) gfx_init_chunky::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_chunky::@1->gfx_init_chunky::@2#1] -- vwuz1=vbuc1 
    lda #<0
    sta x
    sta x+1
  //SEG69 [41] phi (byte*) gfx_init_chunky::gfxb#3 = (byte*) gfx_init_chunky::gfxb#5 [phi:gfx_init_chunky::@1->gfx_init_chunky::@2#2] -- register_copy 
  //SEG70 [41] phi from gfx_init_chunky::@3 to gfx_init_chunky::@2 [phi:gfx_init_chunky::@3->gfx_init_chunky::@2]
  //SEG71 [41] phi (byte) gfx_init_chunky::gfxbCpuBank#4 = (byte) gfx_init_chunky::gfxbCpuBank#8 [phi:gfx_init_chunky::@3->gfx_init_chunky::@2#0] -- register_copy 
  //SEG72 [41] phi (word) gfx_init_chunky::x#2 = (word) gfx_init_chunky::x#1 [phi:gfx_init_chunky::@3->gfx_init_chunky::@2#1] -- register_copy 
  //SEG73 [41] phi (byte*) gfx_init_chunky::gfxb#3 = (byte*) gfx_init_chunky::gfxb#1 [phi:gfx_init_chunky::@3->gfx_init_chunky::@2#2] -- register_copy 
  //SEG74 gfx_init_chunky::@2
  b2:
  //SEG75 [42] if((byte*) gfx_init_chunky::gfxb#3!=(word/dword/signed dword) 32768) goto gfx_init_chunky::@3 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#3 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#3 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] ) -- pbuz1_neq_vwuc1_then_la1 
    lda gfxb+1
    cmp #>$8000
    bne b3
    lda gfxb
    cmp #<$8000
    bne b3
  //SEG76 gfx_init_chunky::@4
  //SEG77 [43] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_chunky::gfxbCpuBank#4 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 dtvSetCpuBankSegment1::cpuBankIdx#1 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 dtvSetCpuBankSegment1::cpuBankIdx#1 ] ) -- vbuaa=vbuxx 
    txa
  //SEG78 [44] call dtvSetCpuBankSegment1  [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] )
  //SEG79 [58] phi from gfx_init_chunky::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_chunky::@4->dtvSetCpuBankSegment1]
  //SEG80 [58] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 [phi:gfx_init_chunky::@4->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
  //SEG81 gfx_init_chunky::@8
  //SEG82 [45] (byte) gfx_init_chunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_chunky::gfxbCpuBank#4 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#2 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#2 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG83 [46] phi from gfx_init_chunky::@8 to gfx_init_chunky::@3 [phi:gfx_init_chunky::@8->gfx_init_chunky::@3]
  //SEG84 [46] phi (byte) gfx_init_chunky::gfxbCpuBank#8 = (byte) gfx_init_chunky::gfxbCpuBank#2 [phi:gfx_init_chunky::@8->gfx_init_chunky::@3#0] -- register_copy 
  //SEG85 [46] phi (byte*) gfx_init_chunky::gfxb#4 = ((byte*))(word/signed word/dword/signed dword) 16384 [phi:gfx_init_chunky::@8->gfx_init_chunky::@3#1] -- pbuz1=pbuc1 
    lda #<$4000
    sta gfxb
    lda #>$4000
    sta gfxb+1
  //SEG86 [46] phi from gfx_init_chunky::@2 to gfx_init_chunky::@3 [phi:gfx_init_chunky::@2->gfx_init_chunky::@3]
  //SEG87 [46] phi (byte) gfx_init_chunky::gfxbCpuBank#8 = (byte) gfx_init_chunky::gfxbCpuBank#4 [phi:gfx_init_chunky::@2->gfx_init_chunky::@3#0] -- register_copy 
  //SEG88 [46] phi (byte*) gfx_init_chunky::gfxb#4 = (byte*) gfx_init_chunky::gfxb#3 [phi:gfx_init_chunky::@2->gfx_init_chunky::@3#1] -- register_copy 
  //SEG89 gfx_init_chunky::@3
  b3:
  //SEG90 [47] (word~) gfx_init_chunky::$6 ← (word) gfx_init_chunky::x#2 + (byte) gfx_init_chunky::y#6 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::$6 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::$6 ] ) -- vwuz1=vwuz2_plus_vbuz3 
    lda y
    clc
    adc x
    sta _6
    lda #0
    adc x+1
    sta _6+1
  //SEG91 [48] (byte) gfx_init_chunky::c#0 ← ((byte)) (word~) gfx_init_chunky::$6 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::c#0 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 gfx_init_chunky::c#0 ] ) -- vbuaa=_byte_vwuz1 
    lda _6
  //SEG92 [49] *((byte*) gfx_init_chunky::gfxb#4) ← (byte) gfx_init_chunky::c#0 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 gfx_init_chunky::gfxb#4 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxb),y
  //SEG93 [50] (byte*) gfx_init_chunky::gfxb#1 ← ++ (byte*) gfx_init_chunky::gfxb#4 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#2 ] ) -- pbuz1=_inc_pbuz1 
    inc gfxb
    bne !+
    inc gfxb+1
  !:
  //SEG94 [51] (word) gfx_init_chunky::x#1 ← ++ (word) gfx_init_chunky::x#2 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] ) -- vwuz1=_inc_vwuz1 
    inc x
    bne !+
    inc x+1
  !:
  //SEG95 [52] if((word) gfx_init_chunky::x#1!=(word/signed word/dword/signed dword) 320) goto gfx_init_chunky::@2 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::y#6 gfx_init_chunky::gfxb#1 gfx_init_chunky::gfxbCpuBank#8 gfx_init_chunky::x#1 ] ) -- vwuz1_neq_vwuc1_then_la1 
    lda x+1
    cmp #>$140
    bne b2
    lda x
    cmp #<$140
    bne b2
  //SEG96 gfx_init_chunky::@5
  //SEG97 [53] (byte) gfx_init_chunky::y#1 ← ++ (byte) gfx_init_chunky::y#6 [ gfx_init_chunky::gfxb#1 gfx_init_chunky::y#1 gfx_init_chunky::gfxbCpuBank#8 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::gfxb#1 gfx_init_chunky::y#1 gfx_init_chunky::gfxbCpuBank#8 ] ) -- vbuz1=_inc_vbuz1 
    inc y
  //SEG98 [54] if((byte) gfx_init_chunky::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 51) goto gfx_init_chunky::@1 [ gfx_init_chunky::gfxb#1 gfx_init_chunky::y#1 gfx_init_chunky::gfxbCpuBank#8 ] ( main:2::gfx_init_chunky:7 [ gfx_init_chunky::gfxb#1 gfx_init_chunky::y#1 gfx_init_chunky::gfxbCpuBank#8 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda y
    cmp #$33
    bne b1
  //SEG99 [55] phi from gfx_init_chunky::@5 to gfx_init_chunky::@6 [phi:gfx_init_chunky::@5->gfx_init_chunky::@6]
  //SEG100 gfx_init_chunky::@6
  //SEG101 [56] call dtvSetCpuBankSegment1  [ ] ( main:2::gfx_init_chunky:7 [ ] )
  //SEG102 [58] phi from gfx_init_chunky::@6 to dtvSetCpuBankSegment1 [phi:gfx_init_chunky::@6->dtvSetCpuBankSegment1]
  //SEG103 [58] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = ((byte))(word/signed word/dword/signed dword) 16384/(word/signed word/dword/signed dword) 16384 [phi:gfx_init_chunky::@6->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
  //SEG104 gfx_init_chunky::@return
  //SEG105 [57] return  [ ] ( main:2::gfx_init_chunky:7 [ ] )
    rts
}
//SEG106 dtvSetCpuBankSegment1
dtvSetCpuBankSegment1: {
    .label cpuBank = $ff
  //SEG107 [59] *((const byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 [ ] ( main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:39 [ ] main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:44 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:56 [ ] ) -- _deref_pbuc1=vbuaa 
    sta cpuBank
  //SEG108 asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda $ff
    .byte $32, $00
  //SEG109 dtvSetCpuBankSegment1::@return
  //SEG110 [61] return  [ ] ( main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:39 [ ] main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:44 [ gfx_init_chunky::y#6 gfx_init_chunky::x#2 gfx_init_chunky::gfxbCpuBank#4 ] main:2::gfx_init_chunky:7::dtvSetCpuBankSegment1:56 [ ] )
    rts
}

