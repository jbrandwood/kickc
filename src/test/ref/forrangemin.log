Inlined call call __init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from __start::@1
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  *((const byte*) SCREEN1 + (byte) main::i#2) ← (byte) main::i#2
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,$ff)
  (bool~) main::$0 ← (byte) main::i#1 != rangelast(0,$ff)
  if((bool~) main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) main::j#0 ← (byte) 0
  (byte) main::j#1 ← (number) $64
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::j#3 ← phi( main::@2/(byte) main::j#1 main::@3/(byte) main::j#2 )
  *((const byte*) SCREEN2 + (byte) main::j#3) ← (byte) main::j#3
  (byte) main::j#2 ← (byte) main::j#3 + rangenext($64,0)
  (bool~) main::$1 ← (byte) main::j#2 != rangelast($64,0)
  if((bool~) main::$1) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const byte*) SCREEN1 = (byte*)(number) $400
(const byte*) SCREEN2 = (byte*)(number) $500
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(void()) main()
(bool~) main::$0
(bool~) main::$1
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2
(byte) main::j#3

Adding number conversion cast (unumber) $64 in (byte) main::j#1 ← (number) $64
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) main::j#1 ← (unumber)(number) $64
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 1280
Simplifying constant integer cast $64
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $64
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition (bool~) main::$0 [5] if((byte) main::i#1!=rangelast(0,$ff)) goto main::@1
Simple Condition (bool~) main::$1 [12] if((byte) main::j#2!=rangelast($64,0)) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::i#0 = 0
Constant (const byte) main::j#0 = 0
Constant (const byte) main::j#1 = $64
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [3] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [5] if(main::i#1!=rangelast(0,$ff)) goto main::@1 to (number) 0
Resolved ranged next value [10] main::j#2 ← -- main::j#3 to --
Resolved ranged comparison value [12] if(main::j#2!=rangelast($64,0)) goto main::@3 to (number) $ff
Eliminating unused constant (const byte) main::j#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 0 in [3] if((byte) main::i#1!=(number) 0) goto main::@1
Adding number conversion cast (unumber) $ff in [7] if((byte) main::j#2!=(number) $ff) goto main::@3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::j#1
Constant inlined main::i#0 = (byte) 0
Constant inlined main::j#1 = (byte) $64
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@4(between main::@1 and main::@1)
Added new block during phi lifting main::@5(between main::@3 and main::@3)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [11] main::j#4 ← main::j#2
Coalesced [12] main::i#3 ← main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@2
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@4
Renumbering block main::@3 to main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [2] *((const byte*) SCREEN1 + (byte) main::i#2) ← (byte) main::i#2
  [3] (byte) main::i#1 ← ++ (byte) main::i#2
  [4] if((byte) main::i#1!=(byte) 0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [5] (byte) main::j#3 ← phi( main::@1/(byte) $64 main::@2/(byte) main::j#2 )
  [6] *((const byte*) SCREEN2 + (byte) main::j#3) ← (byte) main::j#3
  [7] (byte) main::j#2 ← -- (byte) main::j#3
  [8] if((byte) main::j#2!=(byte) $ff) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@2
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 22.0
(byte) main::j
(byte) main::j#2 16.5
(byte) main::j#3 22.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#3 main::j#2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#3 main::j#2 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::j#3 main::j#2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Minimal range based for() loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN1 = $400
  .label SCREEN2 = $500
  // main
main: {
    .label i = 2
    .label j = 3
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] *((const byte*) SCREEN1 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy.z i
    tya
    sta SCREEN1,y
    // [3] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [4] if((byte) main::i#1!=(byte) 0) goto main::@1 -- vbuz1_neq_0_then_la1 
    lda.z i
    cmp #0
    bne __b1_from___b1
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [5] phi (byte) main::j#3 = (byte) $64 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #$64
    sta.z j
    jmp __b2
    // [5] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  __b2_from___b2:
    // [5] phi (byte) main::j#3 = (byte) main::j#2 [phi:main::@2->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [6] *((const byte*) SCREEN2 + (byte) main::j#3) ← (byte) main::j#3 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy.z j
    tya
    sta SCREEN2,y
    // [7] (byte) main::j#2 ← -- (byte) main::j#3 -- vbuz1=_dec_vbuz1 
    dec.z j
    // [8] if((byte) main::j#2!=(byte) $ff) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z j
    bne __b2_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::j#3 main::j#2 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 38.5: zp[1]:2 [ main::i#2 main::i#1 ] 38.5: zp[1]:3 [ main::j#3 main::j#2 ] 
Uplift Scope [] 

Uplifting [main] best 466 combination reg byte x [ main::i#2 main::i#1 ] reg byte x [ main::j#3 main::j#2 ] 
Uplifting [] best 466 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal range based for() loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN1 = $400
  .label SCREEN2 = $500
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] *((const byte*) SCREEN1 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN1,x
    // [3] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [4] if((byte) main::i#1!=(byte) 0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from___b1
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [5] phi (byte) main::j#3 = (byte) $64 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #$64
    jmp __b2
    // [5] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  __b2_from___b2:
    // [5] phi (byte) main::j#3 = (byte) main::j#2 [phi:main::@2->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [6] *((const byte*) SCREEN2 + (byte) main::j#3) ← (byte) main::j#3 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN2,x
    // [7] (byte) main::j#2 ← -- (byte) main::j#3 -- vbuxx=_dec_vbuxx 
    dex
    // [8] if((byte) main::j#2!=(byte) $ff) goto main::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$ff
    bne __b2_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from___b2 with __b2
Removing instruction __b1_from___b1:
Removing instruction __b2_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2_from___b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(const byte*) SCREEN1 = (byte*) 1024
(const byte*) SCREEN2 = (byte*) 1280
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 22.0
(byte) main::j
(byte) main::j#2 reg byte x 16.5
(byte) main::j#3 reg byte x 22.0

reg byte x [ main::i#2 main::i#1 ]
reg byte x [ main::j#3 main::j#2 ]


FINAL ASSEMBLER
Score: 316

  // File Comments
// Minimal range based for() loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN1 = $400
  .label SCREEN2 = $500
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // SCREEN1[i] = i
    // [2] *((const byte*) SCREEN1 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN1,x
    // for(byte i : 0..255)
    // [3] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [4] if((byte) main::i#1!=(byte) 0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [5] phi (byte) main::j#3 = (byte) $64 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #$64
    // [5] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
    // [5] phi (byte) main::j#3 = (byte) main::j#2 [phi:main::@2->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // SCREEN2[j] = j
    // [6] *((const byte*) SCREEN2 + (byte) main::j#3) ← (byte) main::j#3 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN2,x
    // for(j : 100..0)
    // [7] (byte) main::j#2 ← -- (byte) main::j#3 -- vbuxx=_dec_vbuxx 
    dex
    // [8] if((byte) main::j#2!=(byte) $ff) goto main::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$ff
    bne __b2
    // main::@return
    // }
    // [9] return 
    rts
}
  // File Data

