Fixing pointer addition (word*~) bsearch16u::$7 ← (word*) bsearch16u::items + (byte~) bsearch16u::$6
Fixing pointer addition (word*~) bsearch16u::$15 ← (word*) bsearch16u::pivot + (number) 1
Fixing pointer addition (word*~) bsearch16u::$1 ← (word*) bsearch16u::items - (number) 1
Fixing pointer array-indexing *((word*) utoa::digit_values + (byte) utoa::digit)
Fixing pointer array-indexing *((dword*) ultoa::digit_values + (byte) ultoa::digit)
Warning! Adding boolean cast to non-boolean condition *((byte*) strcpy::src)
Identified constant variable (byte*) HEAP_TOP
Identified constant variable (byte*) gen_sintab::f_2pi
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @3
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) getFAC::@1
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @12
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) @16
Culled Empty Block (label) @17
Culled Empty Block (label) @18
Culled Empty Block (label) @19
Culled Empty Block (label) @20
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) @25
Culled Empty Block (label) @26
Culled Empty Block (label) @27
Culled Empty Block (label) @28
Culled Empty Block (label) @29
Culled Empty Block (label) @30
Culled Empty Block (label) @31
Culled Empty Block (label) @32
Culled Empty Block (label) @33
Culled Empty Block (label) @34
Culled Empty Block (label) @35
Culled Empty Block (label) @36
Culled Empty Block (label) @37
Culled Empty Block (label) @38
Culled Empty Block (label) @39
Culled Empty Block (label) @40
Culled Empty Block (label) @41
Culled Empty Block (label) @42
Culled Empty Block (label) @43
Culled Empty Block (label) @44
Culled Empty Block (label) @45
Culled Empty Block (label) @46
Culled Empty Block (label) @47
Culled Empty Block (label) @48
Culled Empty Block (label) @49
Culled Empty Block (label) @50
Culled Empty Block (label) @51
Culled Empty Block (label) @52
Culled Empty Block (label) @53
Culled Empty Block (label) @54
Culled Empty Block (label) @55
Culled Empty Block (label) @56
Culled Empty Block (label) @57
Culled Empty Block (label) @58
Culled Empty Block (label) @59
Culled Empty Block (label) @60
Culled Empty Block (label) @61
Culled Empty Block (label) @62
Culled Empty Block (label) @63
Culled Empty Block (label) @64
Culled Empty Block (label) @65
Culled Empty Block (label) main::@1
Culled Empty Block (label) main::@4
Culled Empty Block (label) @67
Culled Empty Block (label) @68
Culled Empty Block (label) clear_screen::@2
Culled Empty Block (label) @70
Culled Empty Block (label) @72
Culled Empty Block (label) place_sprites::@2
Culled Empty Block (label) @73
Culled Empty Block (label) gen_sprites::@2
Culled Empty Block (label) @74
Culled Empty Block (label) @75
Culled Empty Block (label) gen_sintab::@2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) PROCPORT#0 ← ((byte*)) (number) 1
  (byte*) CHARGEN#0 ← ((byte*)) (number) $d000
  (byte*) SPRITES_XPOS#0 ← ((byte*)) (number) $d000
  (byte*) SPRITES_YPOS#0 ← ((byte*)) (number) $d001
  (byte*) SPRITES_XMSB#0 ← ((byte*)) (number) $d010
  (byte*) RASTER#0 ← ((byte*)) (number) $d012
  (byte*) SPRITES_ENABLE#0 ← ((byte*)) (number) $d015
  (byte*) SPRITES_EXPAND_Y#0 ← ((byte*)) (number) $d017
  (byte*) SPRITES_EXPAND_X#0 ← ((byte*)) (number) $d01d
  (byte*) BORDERCOL#0 ← ((byte*)) (number) $d020
  (byte*) SPRITES_COLS#0 ← ((byte*)) (number) $d027
  (byte*) COLS#0 ← ((byte*)) (number) $d800
  to:@4
@4: scope:[]  from @begin
  (byte*) memLo#0 ← ((byte*)) (number) $fe
  (byte*) memHi#0 ← ((byte*)) (number) $ff
  to:@66
prepareMEM: scope:[prepareMEM]  from addMEMtoFAC divMEMbyFAC mulFACbyMEM setFAC setMEMtoFAC
  (byte*) prepareMEM::mem#5 ← phi( addMEMtoFAC/(byte*) prepareMEM::mem#2 divMEMbyFAC/(byte*) prepareMEM::mem#3 mulFACbyMEM/(byte*) prepareMEM::mem#4 setFAC/(byte*) prepareMEM::mem#0 setMEMtoFAC/(byte*) prepareMEM::mem#1 )
  (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem#5
  *((byte*) memLo#0) ← (byte~) prepareMEM::$0
  (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem#5
  *((byte*) memHi#0) ← (byte~) prepareMEM::$1
  to:prepareMEM::@return
prepareMEM::@return: scope:[prepareMEM]  from prepareMEM
  return 
  to:@return
setFAC: scope:[setFAC]  from gen_sintab gen_sintab::@1 gen_sintab::@16 gen_sintab::@4 gen_sintab::@8
  (word) setFAC::w#5 ← phi( gen_sintab/(word) setFAC::w#0 gen_sintab::@1/(word) setFAC::w#3 gen_sintab::@16/(word) setFAC::w#4 gen_sintab::@4/(word) setFAC::w#1 gen_sintab::@8/(word) setFAC::w#2 )
  (byte*~) setFAC::$0 ← ((byte*)) (word) setFAC::w#5
  (byte*) prepareMEM::mem#0 ← (byte*~) setFAC::$0
  call prepareMEM 
  to:setFAC::@1
setFAC::@1: scope:[setFAC]  from setFAC
  asm { ldy$fe lda$ff jsr$b391  }
  to:setFAC::@return
setFAC::@return: scope:[setFAC]  from setFAC::@1
  return 
  to:@return
getFAC: scope:[getFAC]  from gen_sintab::@21
  asm { jsr$b1aa sty$fe sta$ff  }
  (word) getFAC::w#0 ← ((word)) { *((byte*) memHi#0), *((byte*) memLo#0) }
  (word) getFAC::return#0 ← (word) getFAC::w#0
  to:getFAC::@return
getFAC::@return: scope:[getFAC]  from getFAC
  (word) getFAC::return#3 ← phi( getFAC/(word) getFAC::return#0 )
  (word) getFAC::return#1 ← (word) getFAC::return#3
  return 
  to:@return
setARGtoFAC: scope:[setARGtoFAC]  from gen_sintab::@3
  asm { jsr$bc0f  }
  to:setARGtoFAC::@return
setARGtoFAC::@return: scope:[setARGtoFAC]  from setARGtoFAC
  return 
  to:@return
setMEMtoFAC: scope:[setMEMtoFAC]  from gen_sintab::@10 gen_sintab::@12 gen_sintab::@15 gen_sintab::@5 gen_sintab::@7
  (byte*) setMEMtoFAC::mem#5 ← phi( gen_sintab::@10/(byte*) setMEMtoFAC::mem#2 gen_sintab::@12/(byte*) setMEMtoFAC::mem#3 gen_sintab::@15/(byte*) setMEMtoFAC::mem#4 gen_sintab::@5/(byte*) setMEMtoFAC::mem#0 gen_sintab::@7/(byte*) setMEMtoFAC::mem#1 )
  (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#5
  call prepareMEM 
  to:setMEMtoFAC::@1
setMEMtoFAC::@1: scope:[setMEMtoFAC]  from setMEMtoFAC
  asm { ldx$fe ldy$ff jsr$bbd4  }
  to:setMEMtoFAC::@return
setMEMtoFAC::@return: scope:[setMEMtoFAC]  from setMEMtoFAC::@1
  return 
  to:@return
addMEMtoFAC: scope:[addMEMtoFAC]  from gen_sintab::@11 gen_sintab::@20
  (byte*) addMEMtoFAC::mem#2 ← phi( gen_sintab::@11/(byte*) addMEMtoFAC::mem#0 gen_sintab::@20/(byte*) addMEMtoFAC::mem#1 )
  (byte*) prepareMEM::mem#2 ← (byte*) addMEMtoFAC::mem#2
  call prepareMEM 
  to:addMEMtoFAC::@1
addMEMtoFAC::@1: scope:[addMEMtoFAC]  from addMEMtoFAC
  asm { lda$fe ldy$ff jsr$b867  }
  to:addMEMtoFAC::@return
addMEMtoFAC::@return: scope:[addMEMtoFAC]  from addMEMtoFAC::@1
  return 
  to:@return
subFACfromARG: scope:[subFACfromARG]  from gen_sintab::@6
  asm { jsr$b853  }
  to:subFACfromARG::@return
subFACfromARG::@return: scope:[subFACfromARG]  from subFACfromARG
  return 
  to:@return
divMEMbyFAC: scope:[divMEMbyFAC]  from gen_sintab::@17 gen_sintab::@9
  (byte*) divMEMbyFAC::mem#2 ← phi( gen_sintab::@17/(byte*) divMEMbyFAC::mem#1 gen_sintab::@9/(byte*) divMEMbyFAC::mem#0 )
  (byte*) prepareMEM::mem#3 ← (byte*) divMEMbyFAC::mem#2
  call prepareMEM 
  to:divMEMbyFAC::@1
divMEMbyFAC::@1: scope:[divMEMbyFAC]  from divMEMbyFAC
  asm { lda$fe ldy$ff jsr$bb0f  }
  to:divMEMbyFAC::@return
divMEMbyFAC::@return: scope:[divMEMbyFAC]  from divMEMbyFAC::@1
  return 
  to:@return
mulFACbyMEM: scope:[mulFACbyMEM]  from gen_sintab::@14 gen_sintab::@19
  (byte*) mulFACbyMEM::mem#2 ← phi( gen_sintab::@14/(byte*) mulFACbyMEM::mem#0 gen_sintab::@19/(byte*) mulFACbyMEM::mem#1 )
  (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2
  call prepareMEM 
  to:mulFACbyMEM::@1
mulFACbyMEM::@1: scope:[mulFACbyMEM]  from mulFACbyMEM
  asm { lda$fe ldy$ff jsr$ba28  }
  to:mulFACbyMEM::@return
mulFACbyMEM::@return: scope:[mulFACbyMEM]  from mulFACbyMEM::@1
  return 
  to:@return
sinFAC: scope:[sinFAC]  from gen_sintab::@18
  asm { jsr$e26b  }
  to:sinFAC::@return
sinFAC::@return: scope:[sinFAC]  from sinFAC
  return 
  to:@return
@66: scope:[]  from @4
  (byte) sinlen_x#0 ← (number) $dd
  (byte[$dd]) sintab_x#0 ← { fill( $dd, 0) }
  (byte) sinlen_y#0 ← (number) $c5
  (byte[$c5]) sintab_y#0 ← { fill( $c5, 0) }
  (byte*) sprites#0 ← ((byte*)) (number) $2000
  (byte*) SCREEN#0 ← ((byte*)) (number) $400
  to:@69
main: scope:[main]  from @76
  (byte) sin_idx_y#23 ← phi( @76/(byte) sin_idx_y#17 )
  (byte) sin_idx_x#25 ← phi( @76/(byte) sin_idx_x#16 )
  (byte) progress_idx#30 ← phi( @76/(byte) progress_idx#35 )
  (byte*) progress_cursor#29 ← phi( @76/(byte*) progress_cursor#35 )
  call init 
  to:main::@5
main::@5: scope:[main]  from main
  (byte) sin_idx_y#20 ← phi( main/(byte) sin_idx_y#23 )
  (byte) sin_idx_x#22 ← phi( main/(byte) sin_idx_x#25 )
  (byte) progress_idx#16 ← phi( main/(byte) progress_idx#6 )
  (byte*) progress_cursor#15 ← phi( main/(byte*) progress_cursor#6 )
  (byte*) progress_cursor#0 ← (byte*) progress_cursor#15
  (byte) progress_idx#0 ← (byte) progress_idx#16
  to:main::@2
main::@2: scope:[main]  from main::@2 main::@5 main::@6
  (byte) progress_idx#40 ← phi( main::@2/(byte) progress_idx#40 main::@5/(byte) progress_idx#0 main::@6/(byte) progress_idx#31 )
  (byte*) progress_cursor#40 ← phi( main::@2/(byte*) progress_cursor#40 main::@5/(byte*) progress_cursor#0 main::@6/(byte*) progress_cursor#30 )
  (byte) sin_idx_y#18 ← phi( main::@2/(byte) sin_idx_y#18 main::@5/(byte) sin_idx_y#20 main::@6/(byte) sin_idx_y#0 )
  (byte) sin_idx_x#17 ← phi( main::@2/(byte) sin_idx_x#17 main::@5/(byte) sin_idx_x#22 main::@6/(byte) sin_idx_x#0 )
  (bool~) main::$1 ← *((byte*) RASTER#0) != (number) $ff
  if((bool~) main::$1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) progress_idx#36 ← phi( main::@2/(byte) progress_idx#40 )
  (byte*) progress_cursor#36 ← phi( main::@2/(byte*) progress_cursor#40 )
  (byte) sin_idx_y#13 ← phi( main::@2/(byte) sin_idx_y#18 )
  (byte) sin_idx_x#13 ← phi( main::@2/(byte) sin_idx_x#17 )
  call anim 
  to:main::@6
main::@6: scope:[main]  from main::@3
  (byte) progress_idx#31 ← phi( main::@3/(byte) progress_idx#36 )
  (byte*) progress_cursor#30 ← phi( main::@3/(byte*) progress_cursor#36 )
  (byte) sin_idx_y#7 ← phi( main::@3/(byte) sin_idx_y#5 )
  (byte) sin_idx_x#7 ← phi( main::@3/(byte) sin_idx_x#5 )
  (byte) sin_idx_x#0 ← (byte) sin_idx_x#7
  (byte) sin_idx_y#0 ← (byte) sin_idx_y#7
  if(true) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@6
  (byte) sin_idx_y#8 ← phi( main::@6/(byte) sin_idx_y#0 )
  (byte) sin_idx_x#8 ← phi( main::@6/(byte) sin_idx_x#0 )
  (byte) progress_idx#17 ← phi( main::@6/(byte) progress_idx#31 )
  (byte*) progress_cursor#16 ← phi( main::@6/(byte*) progress_cursor#30 )
  (byte*) progress_cursor#1 ← (byte*) progress_cursor#16
  (byte) progress_idx#1 ← (byte) progress_idx#17
  (byte) sin_idx_x#1 ← (byte) sin_idx_x#8
  (byte) sin_idx_y#1 ← (byte) sin_idx_y#8
  return 
  to:@return
init: scope:[init]  from main
  (byte) progress_idx#47 ← phi( main/(byte) progress_idx#30 )
  (byte*) progress_cursor#47 ← phi( main/(byte*) progress_cursor#29 )
  call clear_screen 
  to:init::@3
init::@3: scope:[init]  from init
  (byte) progress_idx#45 ← phi( init/(byte) progress_idx#47 )
  (byte*) progress_cursor#45 ← phi( init/(byte*) progress_cursor#47 )
  (byte) init::i#0 ← (byte) 0
  to:init::@1
init::@1: scope:[init]  from init::@1 init::@3
  (byte) progress_idx#43 ← phi( init::@1/(byte) progress_idx#43 init::@3/(byte) progress_idx#45 )
  (byte*) progress_cursor#43 ← phi( init::@1/(byte*) progress_cursor#43 init::@3/(byte*) progress_cursor#45 )
  (byte) init::i#2 ← phi( init::@1/(byte) init::i#1 init::@3/(byte) init::i#0 )
  *((byte*) COLS#0 + (byte) init::i#2) ← (number) 0
  (number~) init::$9 ← (number) $28 + (byte) init::i#2
  *((byte*) COLS#0 + (number~) init::$9) ← (number) $b
  (byte) init::i#1 ← (byte) init::i#2 + rangenext(0,$27)
  (bool~) init::$10 ← (byte) init::i#1 != rangelast(0,$27)
  if((bool~) init::$10) goto init::@1
  to:init::@2
init::@2: scope:[init]  from init::@1
  (byte) progress_idx#41 ← phi( init::@1/(byte) progress_idx#43 )
  (byte*) progress_cursor#41 ← phi( init::@1/(byte*) progress_cursor#43 )
  call place_sprites 
  to:init::@4
init::@4: scope:[init]  from init::@2
  (byte) progress_idx#37 ← phi( init::@2/(byte) progress_idx#41 )
  (byte*) progress_cursor#37 ← phi( init::@2/(byte*) progress_cursor#41 )
  call gen_sprites 
  to:init::@5
init::@5: scope:[init]  from init::@4
  (byte) progress_idx#32 ← phi( init::@4/(byte) progress_idx#37 )
  (byte*) progress_cursor#31 ← phi( init::@4/(byte*) progress_cursor#37 )
  (byte*) progress_init::line#0 ← (byte*) SCREEN#0
  call progress_init 
  to:init::@6
init::@6: scope:[init]  from init::@5
  (byte) progress_idx#18 ← phi( init::@5/(byte) progress_idx#9 )
  (byte*) progress_cursor#17 ← phi( init::@5/(byte*) progress_cursor#9 )
  (byte*) progress_cursor#2 ← (byte*) progress_cursor#17
  (byte) progress_idx#2 ← (byte) progress_idx#18
  (byte*) gen_sintab::sintab#0 ← (byte[$dd]) sintab_x#0
  (byte) gen_sintab::length#0 ← (byte) sinlen_x#0
  (byte) gen_sintab::min#0 ← (number) 0
  (byte) gen_sintab::max#0 ← (number) $ff
  call gen_sintab 
  to:init::@7
init::@7: scope:[init]  from init::@6
  (byte*) progress_cursor#18 ← phi( init::@6/(byte*) progress_cursor#13 )
  (byte) progress_idx#19 ← phi( init::@6/(byte) progress_idx#14 )
  (byte) progress_idx#3 ← (byte) progress_idx#19
  (byte*) progress_cursor#3 ← (byte*) progress_cursor#18
  (byte*~) init::$5 ← (byte*) SCREEN#0 + (number) $28
  (byte*) progress_init::line#1 ← (byte*~) init::$5
  call progress_init 
  to:init::@8
init::@8: scope:[init]  from init::@7
  (byte) progress_idx#20 ← phi( init::@7/(byte) progress_idx#9 )
  (byte*) progress_cursor#19 ← phi( init::@7/(byte*) progress_cursor#9 )
  (byte*) progress_cursor#4 ← (byte*) progress_cursor#19
  (byte) progress_idx#4 ← (byte) progress_idx#20
  (byte*) gen_sintab::sintab#1 ← (byte[$c5]) sintab_y#0
  (byte) gen_sintab::length#1 ← (byte) sinlen_y#0
  (byte) gen_sintab::min#1 ← (number) $32
  (byte) gen_sintab::max#1 ← (number) $d0
  call gen_sintab 
  to:init::@9
init::@9: scope:[init]  from init::@8
  (byte*) progress_cursor#20 ← phi( init::@8/(byte*) progress_cursor#13 )
  (byte) progress_idx#21 ← phi( init::@8/(byte) progress_idx#14 )
  (byte) progress_idx#5 ← (byte) progress_idx#21
  (byte*) progress_cursor#5 ← (byte*) progress_cursor#20
  call clear_screen 
  to:init::@10
init::@10: scope:[init]  from init::@9
  (byte) progress_idx#33 ← phi( init::@9/(byte) progress_idx#5 )
  (byte*) progress_cursor#32 ← phi( init::@9/(byte*) progress_cursor#5 )
  to:init::@return
init::@return: scope:[init]  from init::@10
  (byte) progress_idx#22 ← phi( init::@10/(byte) progress_idx#33 )
  (byte*) progress_cursor#21 ← phi( init::@10/(byte*) progress_cursor#32 )
  (byte*) progress_cursor#6 ← (byte*) progress_cursor#21
  (byte) progress_idx#6 ← (byte) progress_idx#22
  return 
  to:@return
clear_screen: scope:[clear_screen]  from init init::@9
  (byte*) clear_screen::sc#0 ← (byte*) SCREEN#0
  to:clear_screen::@1
clear_screen::@1: scope:[clear_screen]  from clear_screen clear_screen::@1
  (byte*) clear_screen::sc#2 ← phi( clear_screen/(byte*) clear_screen::sc#0 clear_screen::@1/(byte*) clear_screen::sc#1 )
  *((byte*) clear_screen::sc#2) ← (byte) ' '
  (byte*) clear_screen::sc#1 ← ++ (byte*) clear_screen::sc#2
  (byte*~) clear_screen::$0 ← (byte*) SCREEN#0 + (number) $3e8
  (bool~) clear_screen::$1 ← (byte*) clear_screen::sc#1 < (byte*~) clear_screen::$0
  if((bool~) clear_screen::$1) goto clear_screen::@1
  to:clear_screen::@return
clear_screen::@return: scope:[clear_screen]  from clear_screen::@1
  return 
  to:@return
@69: scope:[]  from @66
  (byte*) progress_cursor#7 ← (byte*) SCREEN#0
  (byte) progress_idx#7 ← (number) 0
  to:@71
progress_init: scope:[progress_init]  from init::@5 init::@7
  (byte*) progress_init::line#2 ← phi( init::@5/(byte*) progress_init::line#0 init::@7/(byte*) progress_init::line#1 )
  (byte*) progress_cursor#8 ← (byte*) progress_init::line#2
  (byte) progress_idx#8 ← (number) 0
  to:progress_init::@return
progress_init::@return: scope:[progress_init]  from progress_init
  (byte) progress_idx#23 ← phi( progress_init/(byte) progress_idx#8 )
  (byte*) progress_cursor#22 ← phi( progress_init/(byte*) progress_cursor#8 )
  (byte*) progress_cursor#9 ← (byte*) progress_cursor#22
  (byte) progress_idx#9 ← (byte) progress_idx#23
  return 
  to:@return
progress_inc: scope:[progress_inc]  from gen_sintab::@22
  (byte*) progress_cursor#33 ← phi( gen_sintab::@22/(byte*) progress_cursor#34 )
  (byte) progress_idx#24 ← phi( gen_sintab::@22/(byte) progress_idx#34 )
  (byte[]) progress_inc::progress_chars#0 ← { (number) $20, (number) $65, (number) $74, (number) $75, (number) $61, (number) $f6, (number) $e7, (number) $ea, (number) $e0 }
  (byte) progress_idx#10 ← ++ (byte) progress_idx#24
  (bool~) progress_inc::$0 ← (byte) progress_idx#10 == (number) 8
  (bool~) progress_inc::$1 ← ! (bool~) progress_inc::$0
  if((bool~) progress_inc::$1) goto progress_inc::@1
  to:progress_inc::@2
progress_inc::@1: scope:[progress_inc]  from progress_inc progress_inc::@2
  (byte*) progress_cursor#23 ← phi( progress_inc/(byte*) progress_cursor#33 progress_inc::@2/(byte*) progress_cursor#10 )
  (byte) progress_idx#25 ← phi( progress_inc/(byte) progress_idx#10 progress_inc::@2/(byte) progress_idx#11 )
  *((byte*) progress_cursor#23) ← *((byte[]) progress_inc::progress_chars#0 + (byte) progress_idx#25)
  to:progress_inc::@return
progress_inc::@2: scope:[progress_inc]  from progress_inc
  (byte*) progress_cursor#24 ← phi( progress_inc/(byte*) progress_cursor#33 )
  *((byte*) progress_cursor#24) ← *((byte[]) progress_inc::progress_chars#0 + (number) 8)
  (byte*) progress_cursor#10 ← ++ (byte*) progress_cursor#24
  (byte) progress_idx#11 ← (number) 0
  to:progress_inc::@1
progress_inc::@return: scope:[progress_inc]  from progress_inc::@1
  (byte*) progress_cursor#25 ← phi( progress_inc::@1/(byte*) progress_cursor#23 )
  (byte) progress_idx#26 ← phi( progress_inc::@1/(byte) progress_idx#25 )
  (byte) progress_idx#12 ← (byte) progress_idx#26
  (byte*) progress_cursor#11 ← (byte*) progress_cursor#25
  return 
  to:@return
@71: scope:[]  from @69
  (byte) progress_idx#39 ← phi( @69/(byte) progress_idx#7 )
  (byte*) progress_cursor#39 ← phi( @69/(byte*) progress_cursor#7 )
  (byte) sin_idx_x#2 ← (number) 0
  (byte) sin_idx_y#2 ← (number) 0
  to:@76
anim: scope:[anim]  from main::@3
  (byte) sin_idx_y#9 ← phi( main::@3/(byte) sin_idx_y#13 )
  (byte) sin_idx_x#9 ← phi( main::@3/(byte) sin_idx_x#13 )
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  (byte) anim::xidx#0 ← (byte) sin_idx_x#9
  (byte) anim::yidx#0 ← (byte) sin_idx_y#9
  (byte) anim::j2#0 ← (number) $c
  (byte) anim::x_msb#0 ← (number) 0
  (byte) anim::j#0 ← (byte) 0
  to:anim::@4
anim::@4: scope:[anim]  from anim anim::@6
  (byte) sin_idx_y#24 ← phi( anim/(byte) sin_idx_y#9 anim::@6/(byte) sin_idx_y#19 )
  (byte) sin_idx_x#23 ← phi( anim/(byte) sin_idx_x#9 anim::@6/(byte) sin_idx_x#14 )
  (byte) anim::j#5 ← phi( anim/(byte) anim::j#0 anim::@6/(byte) anim::j#1 )
  (byte) anim::yidx#3 ← phi( anim/(byte) anim::yidx#0 anim::@6/(byte) anim::yidx#6 )
  (byte) anim::j2#2 ← phi( anim/(byte) anim::j2#0 anim::@6/(byte) anim::j2#1 )
  (byte) anim::x_msb#2 ← phi( anim/(byte) anim::x_msb#0 anim::@6/(byte) anim::x_msb#4 )
  (byte) anim::xidx#3 ← phi( anim/(byte) anim::xidx#0 anim::@6/(byte) anim::xidx#5 )
  (word~) anim::$4 ← ((word)) (number) $1e
  (word~) anim::$5 ← (word~) anim::$4 + *((byte[$dd]) sintab_x#0 + (byte) anim::xidx#3)
  (word) anim::x#0 ← (word~) anim::$5
  (number~) anim::$6 ← (byte) anim::x_msb#2 * (number) 2
  (byte~) anim::$7 ← > (word) anim::x#0
  (number~) anim::$8 ← (number~) anim::$6 | (byte~) anim::$7
  (byte) anim::x_msb#1 ← (number~) anim::$8
  (byte~) anim::$9 ← < (word) anim::x#0
  *((byte*) SPRITES_XPOS#0 + (byte) anim::j2#2) ← (byte~) anim::$9
  *((byte*) SPRITES_YPOS#0 + (byte) anim::j2#2) ← *((byte[$c5]) sintab_y#0 + (byte) anim::yidx#3)
  (number~) anim::$10 ← (byte) anim::xidx#3 + (number) $a
  (byte) anim::xidx#1 ← (number~) anim::$10
  (bool~) anim::$11 ← (byte) anim::xidx#1 >= (byte) sinlen_x#0
  (bool~) anim::$12 ← ! (bool~) anim::$11
  if((bool~) anim::$12) goto anim::@5
  to:anim::@7
anim::@5: scope:[anim]  from anim::@4 anim::@7
  (byte) sin_idx_y#21 ← phi( anim::@4/(byte) sin_idx_y#24 anim::@7/(byte) sin_idx_y#25 )
  (byte) sin_idx_x#18 ← phi( anim::@4/(byte) sin_idx_x#23 anim::@7/(byte) sin_idx_x#24 )
  (byte) anim::x_msb#5 ← phi( anim::@4/(byte) anim::x_msb#1 anim::@7/(byte) anim::x_msb#7 )
  (byte) anim::xidx#6 ← phi( anim::@4/(byte) anim::xidx#1 anim::@7/(byte) anim::xidx#2 )
  (byte) anim::j#3 ← phi( anim::@4/(byte) anim::j#5 anim::@7/(byte) anim::j#6 )
  (byte) anim::j2#4 ← phi( anim::@4/(byte) anim::j2#2 anim::@7/(byte) anim::j2#6 )
  (byte) anim::yidx#4 ← phi( anim::@4/(byte) anim::yidx#3 anim::@7/(byte) anim::yidx#7 )
  (number~) anim::$14 ← (byte) anim::yidx#4 + (number) 8
  (byte) anim::yidx#1 ← (number~) anim::$14
  (bool~) anim::$15 ← (byte) anim::yidx#1 >= (byte) sinlen_y#0
  (bool~) anim::$16 ← ! (bool~) anim::$15
  if((bool~) anim::$16) goto anim::@6
  to:anim::@8
anim::@7: scope:[anim]  from anim::@4
  (byte) sin_idx_y#25 ← phi( anim::@4/(byte) sin_idx_y#24 )
  (byte) sin_idx_x#24 ← phi( anim::@4/(byte) sin_idx_x#23 )
  (byte) anim::x_msb#7 ← phi( anim::@4/(byte) anim::x_msb#1 )
  (byte) anim::j#6 ← phi( anim::@4/(byte) anim::j#5 )
  (byte) anim::j2#6 ← phi( anim::@4/(byte) anim::j2#2 )
  (byte) anim::yidx#7 ← phi( anim::@4/(byte) anim::yidx#3 )
  (byte) anim::xidx#4 ← phi( anim::@4/(byte) anim::xidx#1 )
  (byte~) anim::$13 ← (byte) anim::xidx#4 - (byte) sinlen_x#0
  (byte) anim::xidx#2 ← (byte~) anim::$13
  to:anim::@5
anim::@6: scope:[anim]  from anim::@5 anim::@8
  (byte) sin_idx_y#19 ← phi( anim::@5/(byte) sin_idx_y#21 anim::@8/(byte) sin_idx_y#22 )
  (byte) sin_idx_x#14 ← phi( anim::@5/(byte) sin_idx_x#18 anim::@8/(byte) sin_idx_x#19 )
  (byte) anim::yidx#6 ← phi( anim::@5/(byte) anim::yidx#1 anim::@8/(byte) anim::yidx#2 )
  (byte) anim::x_msb#4 ← phi( anim::@5/(byte) anim::x_msb#5 anim::@8/(byte) anim::x_msb#6 )
  (byte) anim::xidx#5 ← phi( anim::@5/(byte) anim::xidx#6 anim::@8/(byte) anim::xidx#7 )
  (byte) anim::j#2 ← phi( anim::@5/(byte) anim::j#3 anim::@8/(byte) anim::j#4 )
  (byte) anim::j2#3 ← phi( anim::@5/(byte) anim::j2#4 anim::@8/(byte) anim::j2#5 )
  (number~) anim::$18 ← (byte) anim::j2#3 - (number) 2
  (byte) anim::j2#1 ← (number~) anim::$18
  (byte) anim::j#1 ← (byte) anim::j#2 + rangenext(0,6)
  (bool~) anim::$19 ← (byte) anim::j#1 != rangelast(0,6)
  if((bool~) anim::$19) goto anim::@4
  to:anim::@9
anim::@8: scope:[anim]  from anim::@5
  (byte) sin_idx_y#22 ← phi( anim::@5/(byte) sin_idx_y#21 )
  (byte) sin_idx_x#19 ← phi( anim::@5/(byte) sin_idx_x#18 )
  (byte) anim::x_msb#6 ← phi( anim::@5/(byte) anim::x_msb#5 )
  (byte) anim::xidx#7 ← phi( anim::@5/(byte) anim::xidx#6 )
  (byte) anim::j#4 ← phi( anim::@5/(byte) anim::j#3 )
  (byte) anim::j2#5 ← phi( anim::@5/(byte) anim::j2#4 )
  (byte) anim::yidx#5 ← phi( anim::@5/(byte) anim::yidx#1 )
  (byte~) anim::$17 ← (byte) anim::yidx#5 - (byte) sinlen_y#0
  (byte) anim::yidx#2 ← (byte~) anim::$17
  to:anim::@6
anim::@9: scope:[anim]  from anim::@6
  (byte) sin_idx_y#15 ← phi( anim::@6/(byte) sin_idx_y#19 )
  (byte) sin_idx_x#10 ← phi( anim::@6/(byte) sin_idx_x#14 )
  (byte) anim::x_msb#3 ← phi( anim::@6/(byte) anim::x_msb#4 )
  *((byte*) SPRITES_XMSB#0) ← (byte) anim::x_msb#3
  (byte) sin_idx_x#3 ← ++ (byte) sin_idx_x#10
  (bool~) anim::$0 ← (byte) sin_idx_x#3 >= (byte) sinlen_x#0
  (bool~) anim::$1 ← ! (bool~) anim::$0
  if((bool~) anim::$1) goto anim::@1
  to:anim::@10
anim::@1: scope:[anim]  from anim::@10 anim::@9
  (byte) sin_idx_x#20 ← phi( anim::@10/(byte) sin_idx_x#4 anim::@9/(byte) sin_idx_x#3 )
  (byte) sin_idx_y#10 ← phi( anim::@10/(byte) sin_idx_y#14 anim::@9/(byte) sin_idx_y#15 )
  (byte) sin_idx_y#3 ← ++ (byte) sin_idx_y#10
  (bool~) anim::$2 ← (byte) sin_idx_y#3 >= (byte) sinlen_y#0
  (bool~) anim::$3 ← ! (bool~) anim::$2
  if((bool~) anim::$3) goto anim::@2
  to:anim::@3
anim::@10: scope:[anim]  from anim::@9
  (byte) sin_idx_y#14 ← phi( anim::@9/(byte) sin_idx_y#15 )
  (byte) sin_idx_x#4 ← (number) 0
  to:anim::@1
anim::@2: scope:[anim]  from anim::@1 anim::@3
  (byte) sin_idx_y#16 ← phi( anim::@1/(byte) sin_idx_y#3 anim::@3/(byte) sin_idx_y#4 )
  (byte) sin_idx_x#15 ← phi( anim::@1/(byte) sin_idx_x#20 anim::@3/(byte) sin_idx_x#21 )
  *((byte*) BORDERCOL#0) ← -- *((byte*) BORDERCOL#0)
  to:anim::@return
anim::@3: scope:[anim]  from anim::@1
  (byte) sin_idx_x#21 ← phi( anim::@1/(byte) sin_idx_x#20 )
  (byte) sin_idx_y#4 ← (number) 0
  to:anim::@2
anim::@return: scope:[anim]  from anim::@2
  (byte) sin_idx_y#11 ← phi( anim::@2/(byte) sin_idx_y#16 )
  (byte) sin_idx_x#11 ← phi( anim::@2/(byte) sin_idx_x#15 )
  (byte) sin_idx_x#5 ← (byte) sin_idx_x#11
  (byte) sin_idx_y#5 ← (byte) sin_idx_y#11
  return 
  to:@return
place_sprites: scope:[place_sprites]  from init::@2
  *((byte*) SPRITES_ENABLE#0) ← (number) $7f
  *((byte*) SPRITES_EXPAND_X#0) ← (number) $7f
  *((byte*) SPRITES_EXPAND_Y#0) ← (number) $7f
  (byte*~) place_sprites::$0 ← (byte*) SCREEN#0 + (number) $3f8
  (byte*) place_sprites::sprites_ptr#0 ← (byte*~) place_sprites::$0
  (word~) place_sprites::$1 ← ((word)) (byte*) sprites#0
  (number~) place_sprites::$2 ← (word~) place_sprites::$1 / (number) $40
  (byte~) place_sprites::$3 ← ((byte)) (number~) place_sprites::$2
  (byte) place_sprites::spr_id#0 ← (byte~) place_sprites::$3
  (byte) place_sprites::spr_x#0 ← (number) $3c
  (byte) place_sprites::j2#0 ← (number) 0
  (byte) place_sprites::col#0 ← (number) 5
  (byte) place_sprites::j#0 ← (byte) 0
  to:place_sprites::@1
place_sprites::@1: scope:[place_sprites]  from place_sprites place_sprites::@1
  (byte) place_sprites::col#2 ← phi( place_sprites/(byte) place_sprites::col#0 place_sprites::@1/(byte) place_sprites::col#1 )
  (byte) place_sprites::j2#3 ← phi( place_sprites/(byte) place_sprites::j2#0 place_sprites::@1/(byte) place_sprites::j2#2 )
  (byte) place_sprites::spr_x#2 ← phi( place_sprites/(byte) place_sprites::spr_x#0 place_sprites::@1/(byte) place_sprites::spr_x#1 )
  (byte) place_sprites::j#2 ← phi( place_sprites/(byte) place_sprites::j#0 place_sprites::@1/(byte) place_sprites::j#1 )
  (byte*) place_sprites::sprites_ptr#1 ← phi( place_sprites/(byte*) place_sprites::sprites_ptr#0 place_sprites::@1/(byte*) place_sprites::sprites_ptr#1 )
  (byte) place_sprites::spr_id#2 ← phi( place_sprites/(byte) place_sprites::spr_id#0 place_sprites::@1/(byte) place_sprites::spr_id#1 )
  *((byte*) place_sprites::sprites_ptr#1 + (byte) place_sprites::j#2) ← (byte) place_sprites::spr_id#2
  (byte) place_sprites::spr_id#1 ← ++ (byte) place_sprites::spr_id#2
  *((byte*) SPRITES_XPOS#0 + (byte) place_sprites::j2#3) ← (byte) place_sprites::spr_x#2
  *((byte*) SPRITES_YPOS#0 + (byte) place_sprites::j2#3) ← (number) $50
  *((byte*) SPRITES_COLS#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::col#2
  (number~) place_sprites::$4 ← (byte) place_sprites::spr_x#2 + (number) $20
  (byte) place_sprites::spr_x#1 ← (number~) place_sprites::$4
  (number~) place_sprites::$5 ← (byte) place_sprites::col#2 ^ (number) 7^(number) 5
  (byte) place_sprites::col#1 ← (number~) place_sprites::$5
  (byte) place_sprites::j2#1 ← ++ (byte) place_sprites::j2#3
  (byte) place_sprites::j2#2 ← ++ (byte) place_sprites::j2#1
  (byte) place_sprites::j#1 ← (byte) place_sprites::j#2 + rangenext(0,6)
  (bool~) place_sprites::$6 ← (byte) place_sprites::j#1 != rangelast(0,6)
  if((bool~) place_sprites::$6) goto place_sprites::@1
  to:place_sprites::@return
place_sprites::@return: scope:[place_sprites]  from place_sprites::@1
  return 
  to:@return
gen_sprites: scope:[gen_sprites]  from init::@4
  (byte[]) gen_sprites::cml#0 ← (const string) gen_sprites::$3
  (byte*) gen_sprites::spr#0 ← (byte*) sprites#0
  (byte) gen_sprites::i#0 ← (byte) 0
  to:gen_sprites::@1
gen_sprites::@1: scope:[gen_sprites]  from gen_sprites gen_sprites::@3
  (byte*) gen_sprites::spr#2 ← phi( gen_sprites/(byte*) gen_sprites::spr#0 gen_sprites::@3/(byte*) gen_sprites::spr#1 )
  (byte) gen_sprites::i#2 ← phi( gen_sprites/(byte) gen_sprites::i#0 gen_sprites::@3/(byte) gen_sprites::i#1 )
  (byte) gen_chargen_sprite::ch#0 ← *((byte[]) gen_sprites::cml#0 + (byte) gen_sprites::i#2)
  (byte*) gen_chargen_sprite::sprite#0 ← (byte*) gen_sprites::spr#2
  call gen_chargen_sprite 
  to:gen_sprites::@3
gen_sprites::@3: scope:[gen_sprites]  from gen_sprites::@1
  (byte) gen_sprites::i#3 ← phi( gen_sprites::@1/(byte) gen_sprites::i#2 )
  (byte*) gen_sprites::spr#3 ← phi( gen_sprites::@1/(byte*) gen_sprites::spr#2 )
  (byte*~) gen_sprites::$1 ← (byte*) gen_sprites::spr#3 + (number) $40
  (byte*) gen_sprites::spr#1 ← (byte*~) gen_sprites::$1
  (byte) gen_sprites::i#1 ← (byte) gen_sprites::i#3 + rangenext(0,6)
  (bool~) gen_sprites::$2 ← (byte) gen_sprites::i#1 != rangelast(0,6)
  if((bool~) gen_sprites::$2) goto gen_sprites::@1
  to:gen_sprites::@return
gen_sprites::@return: scope:[gen_sprites]  from gen_sprites::@3
  return 
  to:@return
gen_chargen_sprite: scope:[gen_chargen_sprite]  from gen_sprites::@1
  (byte*) gen_chargen_sprite::sprite#12 ← phi( gen_sprites::@1/(byte*) gen_chargen_sprite::sprite#0 )
  (byte) gen_chargen_sprite::ch#1 ← phi( gen_sprites::@1/(byte) gen_chargen_sprite::ch#0 )
  (word~) gen_chargen_sprite::$0 ← ((word)) (byte) gen_chargen_sprite::ch#1
  (number~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 * (number) 8
  (byte*~) gen_chargen_sprite::$2 ← (byte*) CHARGEN#0 + (number~) gen_chargen_sprite::$1
  (byte*) gen_chargen_sprite::chargen#0 ← (byte*~) gen_chargen_sprite::$2
  asm { sei  }
  *((byte*) PROCPORT#0) ← (number) $32
  (byte) gen_chargen_sprite::y#0 ← (byte) 0
  to:gen_chargen_sprite::@1
gen_chargen_sprite::@1: scope:[gen_chargen_sprite]  from gen_chargen_sprite gen_chargen_sprite::@8
  (byte*) gen_chargen_sprite::sprite#11 ← phi( gen_chargen_sprite/(byte*) gen_chargen_sprite::sprite#12 gen_chargen_sprite::@8/(byte*) gen_chargen_sprite::sprite#2 )
  (byte) gen_chargen_sprite::y#2 ← phi( gen_chargen_sprite/(byte) gen_chargen_sprite::y#0 gen_chargen_sprite::@8/(byte) gen_chargen_sprite::y#1 )
  (byte*) gen_chargen_sprite::chargen#1 ← phi( gen_chargen_sprite/(byte*) gen_chargen_sprite::chargen#0 gen_chargen_sprite::@8/(byte*) gen_chargen_sprite::chargen#2 )
  (byte) gen_chargen_sprite::bits#0 ← *((byte*) gen_chargen_sprite::chargen#1 + (byte) gen_chargen_sprite::y#2)
  (byte) gen_chargen_sprite::s_gen#0 ← (number) 0
  (byte) gen_chargen_sprite::s_gen_cnt#0 ← (number) 0
  (byte) gen_chargen_sprite::x#0 ← (byte) 0
  to:gen_chargen_sprite::@2
gen_chargen_sprite::@2: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@1 gen_chargen_sprite::@7
  (byte*) gen_chargen_sprite::chargen#9 ← phi( gen_chargen_sprite::@1/(byte*) gen_chargen_sprite::chargen#1 gen_chargen_sprite::@7/(byte*) gen_chargen_sprite::chargen#3 )
  (byte) gen_chargen_sprite::y#10 ← phi( gen_chargen_sprite::@1/(byte) gen_chargen_sprite::y#2 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::y#4 )
  (byte) gen_chargen_sprite::x#8 ← phi( gen_chargen_sprite::@1/(byte) gen_chargen_sprite::x#0 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::x#1 )
  (byte*) gen_chargen_sprite::sprite#10 ← phi( gen_chargen_sprite::@1/(byte*) gen_chargen_sprite::sprite#11 gen_chargen_sprite::@7/(byte*) gen_chargen_sprite::sprite#6 )
  (byte) gen_chargen_sprite::s_gen_cnt#7 ← phi( gen_chargen_sprite::@1/(byte) gen_chargen_sprite::s_gen_cnt#0 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::s_gen_cnt#8 )
  (byte) gen_chargen_sprite::s_gen#8 ← phi( gen_chargen_sprite::@1/(byte) gen_chargen_sprite::s_gen#0 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::s_gen#9 )
  (byte) gen_chargen_sprite::bits#2 ← phi( gen_chargen_sprite::@1/(byte) gen_chargen_sprite::bits#0 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::bits#1 )
  (byte) gen_chargen_sprite::c#0 ← (number) 0
  (number~) gen_chargen_sprite::$3 ← (byte) gen_chargen_sprite::bits#2 & (number) $80
  (bool~) gen_chargen_sprite::$4 ← (number~) gen_chargen_sprite::$3 != (number) 0
  (bool~) gen_chargen_sprite::$5 ← ! (bool~) gen_chargen_sprite::$4
  if((bool~) gen_chargen_sprite::$5) goto gen_chargen_sprite::@3
  to:gen_chargen_sprite::@10
gen_chargen_sprite::@3: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@10 gen_chargen_sprite::@2
  (byte*) gen_chargen_sprite::chargen#7 ← phi( gen_chargen_sprite::@10/(byte*) gen_chargen_sprite::chargen#8 gen_chargen_sprite::@2/(byte*) gen_chargen_sprite::chargen#9 )
  (byte) gen_chargen_sprite::y#8 ← phi( gen_chargen_sprite::@10/(byte) gen_chargen_sprite::y#9 gen_chargen_sprite::@2/(byte) gen_chargen_sprite::y#10 )
  (byte) gen_chargen_sprite::x#6 ← phi( gen_chargen_sprite::@10/(byte) gen_chargen_sprite::x#7 gen_chargen_sprite::@2/(byte) gen_chargen_sprite::x#8 )
  (byte) gen_chargen_sprite::bits#7 ← phi( gen_chargen_sprite::@10/(byte) gen_chargen_sprite::bits#8 gen_chargen_sprite::@2/(byte) gen_chargen_sprite::bits#2 )
  (byte*) gen_chargen_sprite::sprite#7 ← phi( gen_chargen_sprite::@10/(byte*) gen_chargen_sprite::sprite#9 gen_chargen_sprite::@2/(byte*) gen_chargen_sprite::sprite#10 )
  (byte) gen_chargen_sprite::s_gen_cnt#4 ← phi( gen_chargen_sprite::@10/(byte) gen_chargen_sprite::s_gen_cnt#6 gen_chargen_sprite::@2/(byte) gen_chargen_sprite::s_gen_cnt#7 )
  (byte) gen_chargen_sprite::c#3 ← phi( gen_chargen_sprite::@10/(byte) gen_chargen_sprite::c#1 gen_chargen_sprite::@2/(byte) gen_chargen_sprite::c#0 )
  (byte) gen_chargen_sprite::s_gen#5 ← phi( gen_chargen_sprite::@10/(byte) gen_chargen_sprite::s_gen#7 gen_chargen_sprite::@2/(byte) gen_chargen_sprite::s_gen#8 )
  (byte) gen_chargen_sprite::b#0 ← (byte) 0
  to:gen_chargen_sprite::@4
gen_chargen_sprite::@10: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@2
  (byte*) gen_chargen_sprite::chargen#8 ← phi( gen_chargen_sprite::@2/(byte*) gen_chargen_sprite::chargen#9 )
  (byte) gen_chargen_sprite::y#9 ← phi( gen_chargen_sprite::@2/(byte) gen_chargen_sprite::y#10 )
  (byte) gen_chargen_sprite::x#7 ← phi( gen_chargen_sprite::@2/(byte) gen_chargen_sprite::x#8 )
  (byte) gen_chargen_sprite::bits#8 ← phi( gen_chargen_sprite::@2/(byte) gen_chargen_sprite::bits#2 )
  (byte*) gen_chargen_sprite::sprite#9 ← phi( gen_chargen_sprite::@2/(byte*) gen_chargen_sprite::sprite#10 )
  (byte) gen_chargen_sprite::s_gen_cnt#6 ← phi( gen_chargen_sprite::@2/(byte) gen_chargen_sprite::s_gen_cnt#7 )
  (byte) gen_chargen_sprite::s_gen#7 ← phi( gen_chargen_sprite::@2/(byte) gen_chargen_sprite::s_gen#8 )
  (byte) gen_chargen_sprite::c#1 ← (number) 1
  to:gen_chargen_sprite::@3
gen_chargen_sprite::@4: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@3 gen_chargen_sprite::@5
  (byte*) gen_chargen_sprite::chargen#5 ← phi( gen_chargen_sprite::@3/(byte*) gen_chargen_sprite::chargen#7 gen_chargen_sprite::@5/(byte*) gen_chargen_sprite::chargen#4 )
  (byte) gen_chargen_sprite::y#6 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::y#8 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::y#5 )
  (byte) gen_chargen_sprite::x#4 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::x#6 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::x#3 )
  (byte) gen_chargen_sprite::bits#5 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::bits#7 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::bits#4 )
  (byte*) gen_chargen_sprite::sprite#5 ← phi( gen_chargen_sprite::@3/(byte*) gen_chargen_sprite::sprite#7 gen_chargen_sprite::@5/(byte*) gen_chargen_sprite::sprite#8 )
  (byte) gen_chargen_sprite::b#3 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::b#0 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::b#1 )
  (byte) gen_chargen_sprite::s_gen_cnt#3 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::s_gen_cnt#5 )
  (byte) gen_chargen_sprite::c#2 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::c#3 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::c#4 )
  (byte) gen_chargen_sprite::s_gen#3 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::s_gen#5 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::s_gen#6 )
  (number~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 * (number) 2
  (number~) gen_chargen_sprite::$7 ← (number~) gen_chargen_sprite::$6 | (byte) gen_chargen_sprite::c#2
  (byte) gen_chargen_sprite::s_gen#1 ← (number~) gen_chargen_sprite::$7
  (byte) gen_chargen_sprite::s_gen_cnt#1 ← ++ (byte) gen_chargen_sprite::s_gen_cnt#3
  (bool~) gen_chargen_sprite::$8 ← (byte) gen_chargen_sprite::s_gen_cnt#1 == (number) 8
  (bool~) gen_chargen_sprite::$9 ← ! (bool~) gen_chargen_sprite::$8
  if((bool~) gen_chargen_sprite::$9) goto gen_chargen_sprite::@5
  to:gen_chargen_sprite::@6
gen_chargen_sprite::@5: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@4 gen_chargen_sprite::@6
  (byte*) gen_chargen_sprite::chargen#4 ← phi( gen_chargen_sprite::@4/(byte*) gen_chargen_sprite::chargen#5 gen_chargen_sprite::@6/(byte*) gen_chargen_sprite::chargen#6 )
  (byte) gen_chargen_sprite::y#5 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::y#6 gen_chargen_sprite::@6/(byte) gen_chargen_sprite::y#7 )
  (byte*) gen_chargen_sprite::sprite#8 ← phi( gen_chargen_sprite::@4/(byte*) gen_chargen_sprite::sprite#5 gen_chargen_sprite::@6/(byte*) gen_chargen_sprite::sprite#1 )
  (byte) gen_chargen_sprite::x#3 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::x#4 gen_chargen_sprite::@6/(byte) gen_chargen_sprite::x#5 )
  (byte) gen_chargen_sprite::bits#4 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::bits#5 gen_chargen_sprite::@6/(byte) gen_chargen_sprite::bits#6 )
  (byte) gen_chargen_sprite::s_gen_cnt#5 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::s_gen_cnt#1 gen_chargen_sprite::@6/(byte) gen_chargen_sprite::s_gen_cnt#2 )
  (byte) gen_chargen_sprite::c#4 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::c#2 gen_chargen_sprite::@6/(byte) gen_chargen_sprite::c#5 )
  (byte) gen_chargen_sprite::s_gen#6 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::s_gen#1 gen_chargen_sprite::@6/(byte) gen_chargen_sprite::s_gen#2 )
  (byte) gen_chargen_sprite::b#2 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::b#3 gen_chargen_sprite::@6/(byte) gen_chargen_sprite::b#4 )
  (byte) gen_chargen_sprite::b#1 ← (byte) gen_chargen_sprite::b#2 + rangenext(0,2)
  (bool~) gen_chargen_sprite::$10 ← (byte) gen_chargen_sprite::b#1 != rangelast(0,2)
  if((bool~) gen_chargen_sprite::$10) goto gen_chargen_sprite::@4
  to:gen_chargen_sprite::@7
gen_chargen_sprite::@6: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@4
  (byte*) gen_chargen_sprite::chargen#6 ← phi( gen_chargen_sprite::@4/(byte*) gen_chargen_sprite::chargen#5 )
  (byte) gen_chargen_sprite::y#7 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::y#6 )
  (byte) gen_chargen_sprite::x#5 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::x#4 )
  (byte) gen_chargen_sprite::bits#6 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::bits#5 )
  (byte) gen_chargen_sprite::c#5 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::c#2 )
  (byte) gen_chargen_sprite::b#4 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::b#3 )
  (byte*) gen_chargen_sprite::sprite#3 ← phi( gen_chargen_sprite::@4/(byte*) gen_chargen_sprite::sprite#5 )
  (byte) gen_chargen_sprite::s_gen#4 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::s_gen#1 )
  *((byte*) gen_chargen_sprite::sprite#3 + (number) 0) ← (byte) gen_chargen_sprite::s_gen#4
  *((byte*) gen_chargen_sprite::sprite#3 + (number) 3) ← (byte) gen_chargen_sprite::s_gen#4
  *((byte*) gen_chargen_sprite::sprite#3 + (number) 6) ← (byte) gen_chargen_sprite::s_gen#4
  (byte*) gen_chargen_sprite::sprite#1 ← ++ (byte*) gen_chargen_sprite::sprite#3
  (byte) gen_chargen_sprite::s_gen#2 ← (number) 0
  (byte) gen_chargen_sprite::s_gen_cnt#2 ← (number) 0
  to:gen_chargen_sprite::@5
gen_chargen_sprite::@7: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@5
  (byte) gen_chargen_sprite::s_gen_cnt#8 ← phi( gen_chargen_sprite::@5/(byte) gen_chargen_sprite::s_gen_cnt#5 )
  (byte) gen_chargen_sprite::s_gen#9 ← phi( gen_chargen_sprite::@5/(byte) gen_chargen_sprite::s_gen#6 )
  (byte*) gen_chargen_sprite::chargen#3 ← phi( gen_chargen_sprite::@5/(byte*) gen_chargen_sprite::chargen#4 )
  (byte) gen_chargen_sprite::y#4 ← phi( gen_chargen_sprite::@5/(byte) gen_chargen_sprite::y#5 )
  (byte*) gen_chargen_sprite::sprite#6 ← phi( gen_chargen_sprite::@5/(byte*) gen_chargen_sprite::sprite#8 )
  (byte) gen_chargen_sprite::x#2 ← phi( gen_chargen_sprite::@5/(byte) gen_chargen_sprite::x#3 )
  (byte) gen_chargen_sprite::bits#3 ← phi( gen_chargen_sprite::@5/(byte) gen_chargen_sprite::bits#4 )
  (number~) gen_chargen_sprite::$11 ← (byte) gen_chargen_sprite::bits#3 * (number) 2
  (byte) gen_chargen_sprite::bits#1 ← (number~) gen_chargen_sprite::$11
  (byte) gen_chargen_sprite::x#1 ← (byte) gen_chargen_sprite::x#2 + rangenext(0,7)
  (bool~) gen_chargen_sprite::$12 ← (byte) gen_chargen_sprite::x#1 != rangelast(0,7)
  if((bool~) gen_chargen_sprite::$12) goto gen_chargen_sprite::@2
  to:gen_chargen_sprite::@8
gen_chargen_sprite::@8: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@7
  (byte*) gen_chargen_sprite::chargen#2 ← phi( gen_chargen_sprite::@7/(byte*) gen_chargen_sprite::chargen#3 )
  (byte) gen_chargen_sprite::y#3 ← phi( gen_chargen_sprite::@7/(byte) gen_chargen_sprite::y#4 )
  (byte*) gen_chargen_sprite::sprite#4 ← phi( gen_chargen_sprite::@7/(byte*) gen_chargen_sprite::sprite#6 )
  (byte*~) gen_chargen_sprite::$13 ← (byte*) gen_chargen_sprite::sprite#4 + (number) 6
  (byte*) gen_chargen_sprite::sprite#2 ← (byte*~) gen_chargen_sprite::$13
  (byte) gen_chargen_sprite::y#1 ← (byte) gen_chargen_sprite::y#3 + rangenext(0,7)
  (bool~) gen_chargen_sprite::$14 ← (byte) gen_chargen_sprite::y#1 != rangelast(0,7)
  if((bool~) gen_chargen_sprite::$14) goto gen_chargen_sprite::@1
  to:gen_chargen_sprite::@9
gen_chargen_sprite::@9: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@8
  *((byte*) PROCPORT#0) ← (number) $37
  asm { cli  }
  to:gen_chargen_sprite::@return
gen_chargen_sprite::@return: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@9
  return 
  to:@return
gen_sintab: scope:[gen_sintab]  from init::@6 init::@8
  (byte*) progress_cursor#64 ← phi( init::@6/(byte*) progress_cursor#2 init::@8/(byte*) progress_cursor#4 )
  (byte) progress_idx#64 ← phi( init::@6/(byte) progress_idx#2 init::@8/(byte) progress_idx#4 )
  (byte*) gen_sintab::sintab#24 ← phi( init::@6/(byte*) gen_sintab::sintab#0 init::@8/(byte*) gen_sintab::sintab#1 )
  (byte) gen_sintab::length#24 ← phi( init::@6/(byte) gen_sintab::length#0 init::@8/(byte) gen_sintab::length#1 )
  (byte) gen_sintab::min#4 ← phi( init::@6/(byte) gen_sintab::min#0 init::@8/(byte) gen_sintab::min#1 )
  (byte) gen_sintab::max#2 ← phi( init::@6/(byte) gen_sintab::max#0 init::@8/(byte) gen_sintab::max#1 )
  (byte[]) gen_sintab::f_i#0 ← { (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte[]) gen_sintab::f_min#0 ← { (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte[]) gen_sintab::f_amp#0 ← { (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte*) gen_sintab::f_2pi#0 ← ((byte*)) (number) $e2e5
  (word~) gen_sintab::$0 ← ((word)) (byte) gen_sintab::max#2
  (word) setFAC::w#0 ← (word~) gen_sintab::$0
  call setFAC 
  to:gen_sintab::@3
gen_sintab::@3: scope:[gen_sintab]  from gen_sintab
  (byte*) progress_cursor#63 ← phi( gen_sintab/(byte*) progress_cursor#64 )
  (byte) progress_idx#63 ← phi( gen_sintab/(byte) progress_idx#64 )
  (byte*) gen_sintab::sintab#23 ← phi( gen_sintab/(byte*) gen_sintab::sintab#24 )
  (byte) gen_sintab::length#23 ← phi( gen_sintab/(byte) gen_sintab::length#24 )
  (byte) gen_sintab::min#3 ← phi( gen_sintab/(byte) gen_sintab::min#4 )
  call setARGtoFAC 
  to:gen_sintab::@4
gen_sintab::@4: scope:[gen_sintab]  from gen_sintab::@3
  (byte*) progress_cursor#62 ← phi( gen_sintab::@3/(byte*) progress_cursor#63 )
  (byte) progress_idx#62 ← phi( gen_sintab::@3/(byte) progress_idx#63 )
  (byte*) gen_sintab::sintab#22 ← phi( gen_sintab::@3/(byte*) gen_sintab::sintab#23 )
  (byte) gen_sintab::length#22 ← phi( gen_sintab::@3/(byte) gen_sintab::length#23 )
  (byte) gen_sintab::min#2 ← phi( gen_sintab::@3/(byte) gen_sintab::min#3 )
  (word~) gen_sintab::$3 ← ((word)) (byte) gen_sintab::min#2
  (word) setFAC::w#1 ← (word~) gen_sintab::$3
  call setFAC 
  to:gen_sintab::@5
gen_sintab::@5: scope:[gen_sintab]  from gen_sintab::@4
  (byte*) progress_cursor#61 ← phi( gen_sintab::@4/(byte*) progress_cursor#62 )
  (byte) progress_idx#61 ← phi( gen_sintab::@4/(byte) progress_idx#62 )
  (byte*) gen_sintab::sintab#21 ← phi( gen_sintab::@4/(byte*) gen_sintab::sintab#22 )
  (byte) gen_sintab::length#21 ← phi( gen_sintab::@4/(byte) gen_sintab::length#22 )
  (byte*) setMEMtoFAC::mem#0 ← (byte[]) gen_sintab::f_min#0
  call setMEMtoFAC 
  to:gen_sintab::@6
gen_sintab::@6: scope:[gen_sintab]  from gen_sintab::@5
  (byte*) progress_cursor#60 ← phi( gen_sintab::@5/(byte*) progress_cursor#61 )
  (byte) progress_idx#60 ← phi( gen_sintab::@5/(byte) progress_idx#61 )
  (byte*) gen_sintab::sintab#20 ← phi( gen_sintab::@5/(byte*) gen_sintab::sintab#21 )
  (byte) gen_sintab::length#20 ← phi( gen_sintab::@5/(byte) gen_sintab::length#21 )
  call subFACfromARG 
  to:gen_sintab::@7
gen_sintab::@7: scope:[gen_sintab]  from gen_sintab::@6
  (byte*) progress_cursor#59 ← phi( gen_sintab::@6/(byte*) progress_cursor#60 )
  (byte) progress_idx#59 ← phi( gen_sintab::@6/(byte) progress_idx#60 )
  (byte*) gen_sintab::sintab#19 ← phi( gen_sintab::@6/(byte*) gen_sintab::sintab#20 )
  (byte) gen_sintab::length#19 ← phi( gen_sintab::@6/(byte) gen_sintab::length#20 )
  (byte*) setMEMtoFAC::mem#1 ← (byte[]) gen_sintab::f_amp#0
  call setMEMtoFAC 
  to:gen_sintab::@8
gen_sintab::@8: scope:[gen_sintab]  from gen_sintab::@7
  (byte*) progress_cursor#58 ← phi( gen_sintab::@7/(byte*) progress_cursor#59 )
  (byte) progress_idx#58 ← phi( gen_sintab::@7/(byte) progress_idx#59 )
  (byte*) gen_sintab::sintab#18 ← phi( gen_sintab::@7/(byte*) gen_sintab::sintab#19 )
  (byte) gen_sintab::length#18 ← phi( gen_sintab::@7/(byte) gen_sintab::length#19 )
  (word) setFAC::w#2 ← (number) 2
  call setFAC 
  to:gen_sintab::@9
gen_sintab::@9: scope:[gen_sintab]  from gen_sintab::@8
  (byte*) progress_cursor#57 ← phi( gen_sintab::@8/(byte*) progress_cursor#58 )
  (byte) progress_idx#57 ← phi( gen_sintab::@8/(byte) progress_idx#58 )
  (byte*) gen_sintab::sintab#17 ← phi( gen_sintab::@8/(byte*) gen_sintab::sintab#18 )
  (byte) gen_sintab::length#17 ← phi( gen_sintab::@8/(byte) gen_sintab::length#18 )
  (byte*) divMEMbyFAC::mem#0 ← (byte[]) gen_sintab::f_amp#0
  call divMEMbyFAC 
  to:gen_sintab::@10
gen_sintab::@10: scope:[gen_sintab]  from gen_sintab::@9
  (byte*) progress_cursor#56 ← phi( gen_sintab::@9/(byte*) progress_cursor#57 )
  (byte) progress_idx#56 ← phi( gen_sintab::@9/(byte) progress_idx#57 )
  (byte*) gen_sintab::sintab#16 ← phi( gen_sintab::@9/(byte*) gen_sintab::sintab#17 )
  (byte) gen_sintab::length#16 ← phi( gen_sintab::@9/(byte) gen_sintab::length#17 )
  (byte*) setMEMtoFAC::mem#2 ← (byte[]) gen_sintab::f_amp#0
  call setMEMtoFAC 
  to:gen_sintab::@11
gen_sintab::@11: scope:[gen_sintab]  from gen_sintab::@10
  (byte*) progress_cursor#55 ← phi( gen_sintab::@10/(byte*) progress_cursor#56 )
  (byte) progress_idx#55 ← phi( gen_sintab::@10/(byte) progress_idx#56 )
  (byte*) gen_sintab::sintab#15 ← phi( gen_sintab::@10/(byte*) gen_sintab::sintab#16 )
  (byte) gen_sintab::length#14 ← phi( gen_sintab::@10/(byte) gen_sintab::length#16 )
  (byte*) addMEMtoFAC::mem#0 ← (byte[]) gen_sintab::f_min#0
  call addMEMtoFAC 
  to:gen_sintab::@12
gen_sintab::@12: scope:[gen_sintab]  from gen_sintab::@11
  (byte*) progress_cursor#54 ← phi( gen_sintab::@11/(byte*) progress_cursor#55 )
  (byte) progress_idx#54 ← phi( gen_sintab::@11/(byte) progress_idx#55 )
  (byte*) gen_sintab::sintab#14 ← phi( gen_sintab::@11/(byte*) gen_sintab::sintab#15 )
  (byte) gen_sintab::length#12 ← phi( gen_sintab::@11/(byte) gen_sintab::length#14 )
  (byte*) setMEMtoFAC::mem#3 ← (byte[]) gen_sintab::f_min#0
  call setMEMtoFAC 
  to:gen_sintab::@13
gen_sintab::@13: scope:[gen_sintab]  from gen_sintab::@12
  (byte*) progress_cursor#53 ← phi( gen_sintab::@12/(byte*) progress_cursor#54 )
  (byte) progress_idx#53 ← phi( gen_sintab::@12/(byte) progress_idx#54 )
  (byte*) gen_sintab::sintab#12 ← phi( gen_sintab::@12/(byte*) gen_sintab::sintab#14 )
  (byte) gen_sintab::length#10 ← phi( gen_sintab::@12/(byte) gen_sintab::length#12 )
  (byte) gen_sintab::i#0 ← (number) 0
  to:gen_sintab::@1
gen_sintab::@1: scope:[gen_sintab]  from gen_sintab::@13 gen_sintab::@23
  (byte*) progress_cursor#52 ← phi( gen_sintab::@13/(byte*) progress_cursor#53 gen_sintab::@23/(byte*) progress_cursor#12 )
  (byte) progress_idx#52 ← phi( gen_sintab::@13/(byte) progress_idx#53 gen_sintab::@23/(byte) progress_idx#13 )
  (byte*) gen_sintab::sintab#11 ← phi( gen_sintab::@13/(byte*) gen_sintab::sintab#12 gen_sintab::@23/(byte*) gen_sintab::sintab#13 )
  (byte) gen_sintab::length#8 ← phi( gen_sintab::@13/(byte) gen_sintab::length#10 gen_sintab::@23/(byte) gen_sintab::length#3 )
  (byte) gen_sintab::i#2 ← phi( gen_sintab::@13/(byte) gen_sintab::i#0 gen_sintab::@23/(byte) gen_sintab::i#1 )
  (word~) gen_sintab::$13 ← ((word)) (byte) gen_sintab::i#2
  (word) setFAC::w#3 ← (word~) gen_sintab::$13
  call setFAC 
  to:gen_sintab::@14
gen_sintab::@14: scope:[gen_sintab]  from gen_sintab::@1
  (byte*) progress_cursor#51 ← phi( gen_sintab::@1/(byte*) progress_cursor#52 )
  (byte) progress_idx#51 ← phi( gen_sintab::@1/(byte) progress_idx#52 )
  (byte) gen_sintab::i#12 ← phi( gen_sintab::@1/(byte) gen_sintab::i#2 )
  (byte*) gen_sintab::sintab#10 ← phi( gen_sintab::@1/(byte*) gen_sintab::sintab#11 )
  (byte) gen_sintab::length#6 ← phi( gen_sintab::@1/(byte) gen_sintab::length#8 )
  (byte*) mulFACbyMEM::mem#0 ← (byte*) gen_sintab::f_2pi#0
  call mulFACbyMEM 
  to:gen_sintab::@15
gen_sintab::@15: scope:[gen_sintab]  from gen_sintab::@14
  (byte*) progress_cursor#50 ← phi( gen_sintab::@14/(byte*) progress_cursor#51 )
  (byte) progress_idx#50 ← phi( gen_sintab::@14/(byte) progress_idx#51 )
  (byte) gen_sintab::i#11 ← phi( gen_sintab::@14/(byte) gen_sintab::i#12 )
  (byte*) gen_sintab::sintab#9 ← phi( gen_sintab::@14/(byte*) gen_sintab::sintab#10 )
  (byte) gen_sintab::length#4 ← phi( gen_sintab::@14/(byte) gen_sintab::length#6 )
  (byte*) setMEMtoFAC::mem#4 ← (byte[]) gen_sintab::f_i#0
  call setMEMtoFAC 
  to:gen_sintab::@16
gen_sintab::@16: scope:[gen_sintab]  from gen_sintab::@15
  (byte*) progress_cursor#49 ← phi( gen_sintab::@15/(byte*) progress_cursor#50 )
  (byte) progress_idx#49 ← phi( gen_sintab::@15/(byte) progress_idx#50 )
  (byte) gen_sintab::i#10 ← phi( gen_sintab::@15/(byte) gen_sintab::i#11 )
  (byte*) gen_sintab::sintab#8 ← phi( gen_sintab::@15/(byte*) gen_sintab::sintab#9 )
  (byte) gen_sintab::length#2 ← phi( gen_sintab::@15/(byte) gen_sintab::length#4 )
  (word~) gen_sintab::$17 ← ((word)) (byte) gen_sintab::length#2
  (word) setFAC::w#4 ← (word~) gen_sintab::$17
  call setFAC 
  to:gen_sintab::@17
gen_sintab::@17: scope:[gen_sintab]  from gen_sintab::@16
  (byte) gen_sintab::length#15 ← phi( gen_sintab::@16/(byte) gen_sintab::length#2 )
  (byte*) progress_cursor#48 ← phi( gen_sintab::@16/(byte*) progress_cursor#49 )
  (byte) progress_idx#48 ← phi( gen_sintab::@16/(byte) progress_idx#49 )
  (byte) gen_sintab::i#9 ← phi( gen_sintab::@16/(byte) gen_sintab::i#10 )
  (byte*) gen_sintab::sintab#7 ← phi( gen_sintab::@16/(byte*) gen_sintab::sintab#8 )
  (byte*) divMEMbyFAC::mem#1 ← (byte[]) gen_sintab::f_i#0
  call divMEMbyFAC 
  to:gen_sintab::@18
gen_sintab::@18: scope:[gen_sintab]  from gen_sintab::@17
  (byte) gen_sintab::length#13 ← phi( gen_sintab::@17/(byte) gen_sintab::length#15 )
  (byte*) progress_cursor#46 ← phi( gen_sintab::@17/(byte*) progress_cursor#48 )
  (byte) progress_idx#46 ← phi( gen_sintab::@17/(byte) progress_idx#48 )
  (byte) gen_sintab::i#8 ← phi( gen_sintab::@17/(byte) gen_sintab::i#9 )
  (byte*) gen_sintab::sintab#6 ← phi( gen_sintab::@17/(byte*) gen_sintab::sintab#7 )
  call sinFAC 
  to:gen_sintab::@19
gen_sintab::@19: scope:[gen_sintab]  from gen_sintab::@18
  (byte) gen_sintab::length#11 ← phi( gen_sintab::@18/(byte) gen_sintab::length#13 )
  (byte*) progress_cursor#44 ← phi( gen_sintab::@18/(byte*) progress_cursor#46 )
  (byte) progress_idx#44 ← phi( gen_sintab::@18/(byte) progress_idx#46 )
  (byte) gen_sintab::i#7 ← phi( gen_sintab::@18/(byte) gen_sintab::i#8 )
  (byte*) gen_sintab::sintab#5 ← phi( gen_sintab::@18/(byte*) gen_sintab::sintab#6 )
  (byte*) mulFACbyMEM::mem#1 ← (byte[]) gen_sintab::f_amp#0
  call mulFACbyMEM 
  to:gen_sintab::@20
gen_sintab::@20: scope:[gen_sintab]  from gen_sintab::@19
  (byte) gen_sintab::length#9 ← phi( gen_sintab::@19/(byte) gen_sintab::length#11 )
  (byte*) progress_cursor#42 ← phi( gen_sintab::@19/(byte*) progress_cursor#44 )
  (byte) progress_idx#42 ← phi( gen_sintab::@19/(byte) progress_idx#44 )
  (byte) gen_sintab::i#6 ← phi( gen_sintab::@19/(byte) gen_sintab::i#7 )
  (byte*) gen_sintab::sintab#4 ← phi( gen_sintab::@19/(byte*) gen_sintab::sintab#5 )
  (byte*) addMEMtoFAC::mem#1 ← (byte[]) gen_sintab::f_min#0
  call addMEMtoFAC 
  to:gen_sintab::@21
gen_sintab::@21: scope:[gen_sintab]  from gen_sintab::@20
  (byte) gen_sintab::length#7 ← phi( gen_sintab::@20/(byte) gen_sintab::length#9 )
  (byte*) progress_cursor#38 ← phi( gen_sintab::@20/(byte*) progress_cursor#42 )
  (byte) progress_idx#38 ← phi( gen_sintab::@20/(byte) progress_idx#42 )
  (byte) gen_sintab::i#5 ← phi( gen_sintab::@20/(byte) gen_sintab::i#6 )
  (byte*) gen_sintab::sintab#3 ← phi( gen_sintab::@20/(byte*) gen_sintab::sintab#4 )
  call getFAC 
  (word) getFAC::return#2 ← (word) getFAC::return#1
  to:gen_sintab::@22
gen_sintab::@22: scope:[gen_sintab]  from gen_sintab::@21
  (byte) gen_sintab::length#5 ← phi( gen_sintab::@21/(byte) gen_sintab::length#7 )
  (byte*) progress_cursor#34 ← phi( gen_sintab::@21/(byte*) progress_cursor#38 )
  (byte) progress_idx#34 ← phi( gen_sintab::@21/(byte) progress_idx#38 )
  (byte) gen_sintab::i#3 ← phi( gen_sintab::@21/(byte) gen_sintab::i#5 )
  (byte*) gen_sintab::sintab#2 ← phi( gen_sintab::@21/(byte*) gen_sintab::sintab#3 )
  (word) getFAC::return#4 ← phi( gen_sintab::@21/(word) getFAC::return#2 )
  (word~) gen_sintab::$23 ← (word) getFAC::return#4
  (byte~) gen_sintab::$24 ← ((byte)) (word~) gen_sintab::$23
  *((byte*) gen_sintab::sintab#2 + (byte) gen_sintab::i#3) ← (byte~) gen_sintab::$24
  call progress_inc 
  to:gen_sintab::@23
gen_sintab::@23: scope:[gen_sintab]  from gen_sintab::@22
  (byte*) gen_sintab::sintab#13 ← phi( gen_sintab::@22/(byte*) gen_sintab::sintab#2 )
  (byte) gen_sintab::length#3 ← phi( gen_sintab::@22/(byte) gen_sintab::length#5 )
  (byte) gen_sintab::i#4 ← phi( gen_sintab::@22/(byte) gen_sintab::i#3 )
  (byte*) progress_cursor#26 ← phi( gen_sintab::@22/(byte*) progress_cursor#11 )
  (byte) progress_idx#27 ← phi( gen_sintab::@22/(byte) progress_idx#12 )
  (byte) progress_idx#13 ← (byte) progress_idx#27
  (byte*) progress_cursor#12 ← (byte*) progress_cursor#26
  (byte) gen_sintab::i#1 ← ++ (byte) gen_sintab::i#4
  (bool~) gen_sintab::$26 ← (byte) gen_sintab::i#1 < (byte) gen_sintab::length#3
  if((bool~) gen_sintab::$26) goto gen_sintab::@1
  to:gen_sintab::@return
gen_sintab::@return: scope:[gen_sintab]  from gen_sintab::@23
  (byte*) progress_cursor#27 ← phi( gen_sintab::@23/(byte*) progress_cursor#12 )
  (byte) progress_idx#28 ← phi( gen_sintab::@23/(byte) progress_idx#13 )
  (byte) progress_idx#14 ← (byte) progress_idx#28
  (byte*) progress_cursor#13 ← (byte*) progress_cursor#27
  return 
  to:@return
@76: scope:[]  from @71
  (byte) sin_idx_y#17 ← phi( @71/(byte) sin_idx_y#2 )
  (byte) sin_idx_x#16 ← phi( @71/(byte) sin_idx_x#2 )
  (byte) progress_idx#35 ← phi( @71/(byte) progress_idx#39 )
  (byte*) progress_cursor#35 ← phi( @71/(byte*) progress_cursor#39 )
  call main 
  to:@77
@77: scope:[]  from @76
  (byte) sin_idx_y#12 ← phi( @76/(byte) sin_idx_y#1 )
  (byte) sin_idx_x#12 ← phi( @76/(byte) sin_idx_x#1 )
  (byte) progress_idx#29 ← phi( @76/(byte) progress_idx#1 )
  (byte*) progress_cursor#28 ← phi( @76/(byte*) progress_cursor#1 )
  (byte*) progress_cursor#14 ← (byte*) progress_cursor#28
  (byte) progress_idx#15 ← (byte) progress_idx#29
  (byte) sin_idx_x#6 ← (byte) sin_idx_x#12
  (byte) sin_idx_y#6 ← (byte) sin_idx_y#12
  to:@end
@end: scope:[]  from @77

SYMBOL TABLE SSA
(label) @4
(label) @66
(label) @69
(label) @71
(label) @76
(label) @77
(label) @begin
(label) @end
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte*) CHARGEN
(byte*) CHARGEN#0
(byte*) COLS
(byte*) COLS#0
(byte*) PROCPORT
(byte*) PROCPORT#0
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(byte*) RASTER
(byte*) RASTER#0
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SPRITES_COLS
(byte*) SPRITES_COLS#0
(byte*) SPRITES_ENABLE
(byte*) SPRITES_ENABLE#0
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_X#0
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_EXPAND_Y#0
(byte*) SPRITES_XMSB
(byte*) SPRITES_XMSB#0
(byte*) SPRITES_XPOS
(byte*) SPRITES_XPOS#0
(byte*) SPRITES_YPOS
(byte*) SPRITES_YPOS#0
(void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
(label) addMEMtoFAC::@1
(label) addMEMtoFAC::@return
(byte*) addMEMtoFAC::mem
(byte*) addMEMtoFAC::mem#0
(byte*) addMEMtoFAC::mem#1
(byte*) addMEMtoFAC::mem#2
(void()) anim()
(bool~) anim::$0
(bool~) anim::$1
(number~) anim::$10
(bool~) anim::$11
(bool~) anim::$12
(byte~) anim::$13
(number~) anim::$14
(bool~) anim::$15
(bool~) anim::$16
(byte~) anim::$17
(number~) anim::$18
(bool~) anim::$19
(bool~) anim::$2
(bool~) anim::$3
(word~) anim::$4
(word~) anim::$5
(number~) anim::$6
(byte~) anim::$7
(number~) anim::$8
(byte~) anim::$9
(label) anim::@1
(label) anim::@10
(label) anim::@2
(label) anim::@3
(label) anim::@4
(label) anim::@5
(label) anim::@6
(label) anim::@7
(label) anim::@8
(label) anim::@9
(label) anim::@return
(byte) anim::j
(byte) anim::j#0
(byte) anim::j#1
(byte) anim::j#2
(byte) anim::j#3
(byte) anim::j#4
(byte) anim::j#5
(byte) anim::j#6
(byte) anim::j2
(byte) anim::j2#0
(byte) anim::j2#1
(byte) anim::j2#2
(byte) anim::j2#3
(byte) anim::j2#4
(byte) anim::j2#5
(byte) anim::j2#6
(word) anim::x
(word) anim::x#0
(byte) anim::x_msb
(byte) anim::x_msb#0
(byte) anim::x_msb#1
(byte) anim::x_msb#2
(byte) anim::x_msb#3
(byte) anim::x_msb#4
(byte) anim::x_msb#5
(byte) anim::x_msb#6
(byte) anim::x_msb#7
(byte) anim::xidx
(byte) anim::xidx#0
(byte) anim::xidx#1
(byte) anim::xidx#2
(byte) anim::xidx#3
(byte) anim::xidx#4
(byte) anim::xidx#5
(byte) anim::xidx#6
(byte) anim::xidx#7
(byte) anim::yidx
(byte) anim::yidx#0
(byte) anim::yidx#1
(byte) anim::yidx#2
(byte) anim::yidx#3
(byte) anim::yidx#4
(byte) anim::yidx#5
(byte) anim::yidx#6
(byte) anim::yidx#7
(void()) clear_screen()
(byte*~) clear_screen::$0
(bool~) clear_screen::$1
(label) clear_screen::@1
(label) clear_screen::@return
(byte*) clear_screen::sc
(byte*) clear_screen::sc#0
(byte*) clear_screen::sc#1
(byte*) clear_screen::sc#2
(void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
(label) divMEMbyFAC::@1
(label) divMEMbyFAC::@return
(byte*) divMEMbyFAC::mem
(byte*) divMEMbyFAC::mem#0
(byte*) divMEMbyFAC::mem#1
(byte*) divMEMbyFAC::mem#2
(void()) gen_chargen_sprite((byte) gen_chargen_sprite::ch , (byte*) gen_chargen_sprite::sprite)
(word~) gen_chargen_sprite::$0
(number~) gen_chargen_sprite::$1
(bool~) gen_chargen_sprite::$10
(number~) gen_chargen_sprite::$11
(bool~) gen_chargen_sprite::$12
(byte*~) gen_chargen_sprite::$13
(bool~) gen_chargen_sprite::$14
(byte*~) gen_chargen_sprite::$2
(number~) gen_chargen_sprite::$3
(bool~) gen_chargen_sprite::$4
(bool~) gen_chargen_sprite::$5
(number~) gen_chargen_sprite::$6
(number~) gen_chargen_sprite::$7
(bool~) gen_chargen_sprite::$8
(bool~) gen_chargen_sprite::$9
(label) gen_chargen_sprite::@1
(label) gen_chargen_sprite::@10
(label) gen_chargen_sprite::@2
(label) gen_chargen_sprite::@3
(label) gen_chargen_sprite::@4
(label) gen_chargen_sprite::@5
(label) gen_chargen_sprite::@6
(label) gen_chargen_sprite::@7
(label) gen_chargen_sprite::@8
(label) gen_chargen_sprite::@9
(label) gen_chargen_sprite::@return
(byte) gen_chargen_sprite::b
(byte) gen_chargen_sprite::b#0
(byte) gen_chargen_sprite::b#1
(byte) gen_chargen_sprite::b#2
(byte) gen_chargen_sprite::b#3
(byte) gen_chargen_sprite::b#4
(byte) gen_chargen_sprite::bits
(byte) gen_chargen_sprite::bits#0
(byte) gen_chargen_sprite::bits#1
(byte) gen_chargen_sprite::bits#2
(byte) gen_chargen_sprite::bits#3
(byte) gen_chargen_sprite::bits#4
(byte) gen_chargen_sprite::bits#5
(byte) gen_chargen_sprite::bits#6
(byte) gen_chargen_sprite::bits#7
(byte) gen_chargen_sprite::bits#8
(byte) gen_chargen_sprite::c
(byte) gen_chargen_sprite::c#0
(byte) gen_chargen_sprite::c#1
(byte) gen_chargen_sprite::c#2
(byte) gen_chargen_sprite::c#3
(byte) gen_chargen_sprite::c#4
(byte) gen_chargen_sprite::c#5
(byte) gen_chargen_sprite::ch
(byte) gen_chargen_sprite::ch#0
(byte) gen_chargen_sprite::ch#1
(byte*) gen_chargen_sprite::chargen
(byte*) gen_chargen_sprite::chargen#0
(byte*) gen_chargen_sprite::chargen#1
(byte*) gen_chargen_sprite::chargen#2
(byte*) gen_chargen_sprite::chargen#3
(byte*) gen_chargen_sprite::chargen#4
(byte*) gen_chargen_sprite::chargen#5
(byte*) gen_chargen_sprite::chargen#6
(byte*) gen_chargen_sprite::chargen#7
(byte*) gen_chargen_sprite::chargen#8
(byte*) gen_chargen_sprite::chargen#9
(byte) gen_chargen_sprite::s_gen
(byte) gen_chargen_sprite::s_gen#0
(byte) gen_chargen_sprite::s_gen#1
(byte) gen_chargen_sprite::s_gen#2
(byte) gen_chargen_sprite::s_gen#3
(byte) gen_chargen_sprite::s_gen#4
(byte) gen_chargen_sprite::s_gen#5
(byte) gen_chargen_sprite::s_gen#6
(byte) gen_chargen_sprite::s_gen#7
(byte) gen_chargen_sprite::s_gen#8
(byte) gen_chargen_sprite::s_gen#9
(byte) gen_chargen_sprite::s_gen_cnt
(byte) gen_chargen_sprite::s_gen_cnt#0
(byte) gen_chargen_sprite::s_gen_cnt#1
(byte) gen_chargen_sprite::s_gen_cnt#2
(byte) gen_chargen_sprite::s_gen_cnt#3
(byte) gen_chargen_sprite::s_gen_cnt#4
(byte) gen_chargen_sprite::s_gen_cnt#5
(byte) gen_chargen_sprite::s_gen_cnt#6
(byte) gen_chargen_sprite::s_gen_cnt#7
(byte) gen_chargen_sprite::s_gen_cnt#8
(byte*) gen_chargen_sprite::sprite
(byte*) gen_chargen_sprite::sprite#0
(byte*) gen_chargen_sprite::sprite#1
(byte*) gen_chargen_sprite::sprite#10
(byte*) gen_chargen_sprite::sprite#11
(byte*) gen_chargen_sprite::sprite#12
(byte*) gen_chargen_sprite::sprite#2
(byte*) gen_chargen_sprite::sprite#3
(byte*) gen_chargen_sprite::sprite#4
(byte*) gen_chargen_sprite::sprite#5
(byte*) gen_chargen_sprite::sprite#6
(byte*) gen_chargen_sprite::sprite#7
(byte*) gen_chargen_sprite::sprite#8
(byte*) gen_chargen_sprite::sprite#9
(byte) gen_chargen_sprite::x
(byte) gen_chargen_sprite::x#0
(byte) gen_chargen_sprite::x#1
(byte) gen_chargen_sprite::x#2
(byte) gen_chargen_sprite::x#3
(byte) gen_chargen_sprite::x#4
(byte) gen_chargen_sprite::x#5
(byte) gen_chargen_sprite::x#6
(byte) gen_chargen_sprite::x#7
(byte) gen_chargen_sprite::x#8
(byte) gen_chargen_sprite::y
(byte) gen_chargen_sprite::y#0
(byte) gen_chargen_sprite::y#1
(byte) gen_chargen_sprite::y#10
(byte) gen_chargen_sprite::y#2
(byte) gen_chargen_sprite::y#3
(byte) gen_chargen_sprite::y#4
(byte) gen_chargen_sprite::y#5
(byte) gen_chargen_sprite::y#6
(byte) gen_chargen_sprite::y#7
(byte) gen_chargen_sprite::y#8
(byte) gen_chargen_sprite::y#9
(void()) gen_sintab((byte*) gen_sintab::sintab , (byte) gen_sintab::length , (byte) gen_sintab::min , (byte) gen_sintab::max)
(word~) gen_sintab::$0
(word~) gen_sintab::$13
(word~) gen_sintab::$17
(word~) gen_sintab::$23
(byte~) gen_sintab::$24
(bool~) gen_sintab::$26
(word~) gen_sintab::$3
(label) gen_sintab::@1
(label) gen_sintab::@10
(label) gen_sintab::@11
(label) gen_sintab::@12
(label) gen_sintab::@13
(label) gen_sintab::@14
(label) gen_sintab::@15
(label) gen_sintab::@16
(label) gen_sintab::@17
(label) gen_sintab::@18
(label) gen_sintab::@19
(label) gen_sintab::@20
(label) gen_sintab::@21
(label) gen_sintab::@22
(label) gen_sintab::@23
(label) gen_sintab::@3
(label) gen_sintab::@4
(label) gen_sintab::@5
(label) gen_sintab::@6
(label) gen_sintab::@7
(label) gen_sintab::@8
(label) gen_sintab::@9
(label) gen_sintab::@return
(byte*) gen_sintab::f_2pi
(byte*) gen_sintab::f_2pi#0
(byte[]) gen_sintab::f_amp
(byte[]) gen_sintab::f_amp#0
(byte[]) gen_sintab::f_i
(byte[]) gen_sintab::f_i#0
(byte[]) gen_sintab::f_min
(byte[]) gen_sintab::f_min#0
(byte) gen_sintab::i
(byte) gen_sintab::i#0
(byte) gen_sintab::i#1
(byte) gen_sintab::i#10
(byte) gen_sintab::i#11
(byte) gen_sintab::i#12
(byte) gen_sintab::i#2
(byte) gen_sintab::i#3
(byte) gen_sintab::i#4
(byte) gen_sintab::i#5
(byte) gen_sintab::i#6
(byte) gen_sintab::i#7
(byte) gen_sintab::i#8
(byte) gen_sintab::i#9
(byte) gen_sintab::length
(byte) gen_sintab::length#0
(byte) gen_sintab::length#1
(byte) gen_sintab::length#10
(byte) gen_sintab::length#11
(byte) gen_sintab::length#12
(byte) gen_sintab::length#13
(byte) gen_sintab::length#14
(byte) gen_sintab::length#15
(byte) gen_sintab::length#16
(byte) gen_sintab::length#17
(byte) gen_sintab::length#18
(byte) gen_sintab::length#19
(byte) gen_sintab::length#2
(byte) gen_sintab::length#20
(byte) gen_sintab::length#21
(byte) gen_sintab::length#22
(byte) gen_sintab::length#23
(byte) gen_sintab::length#24
(byte) gen_sintab::length#3
(byte) gen_sintab::length#4
(byte) gen_sintab::length#5
(byte) gen_sintab::length#6
(byte) gen_sintab::length#7
(byte) gen_sintab::length#8
(byte) gen_sintab::length#9
(byte) gen_sintab::max
(byte) gen_sintab::max#0
(byte) gen_sintab::max#1
(byte) gen_sintab::max#2
(byte) gen_sintab::min
(byte) gen_sintab::min#0
(byte) gen_sintab::min#1
(byte) gen_sintab::min#2
(byte) gen_sintab::min#3
(byte) gen_sintab::min#4
(byte*) gen_sintab::sintab
(byte*) gen_sintab::sintab#0
(byte*) gen_sintab::sintab#1
(byte*) gen_sintab::sintab#10
(byte*) gen_sintab::sintab#11
(byte*) gen_sintab::sintab#12
(byte*) gen_sintab::sintab#13
(byte*) gen_sintab::sintab#14
(byte*) gen_sintab::sintab#15
(byte*) gen_sintab::sintab#16
(byte*) gen_sintab::sintab#17
(byte*) gen_sintab::sintab#18
(byte*) gen_sintab::sintab#19
(byte*) gen_sintab::sintab#2
(byte*) gen_sintab::sintab#20
(byte*) gen_sintab::sintab#21
(byte*) gen_sintab::sintab#22
(byte*) gen_sintab::sintab#23
(byte*) gen_sintab::sintab#24
(byte*) gen_sintab::sintab#3
(byte*) gen_sintab::sintab#4
(byte*) gen_sintab::sintab#5
(byte*) gen_sintab::sintab#6
(byte*) gen_sintab::sintab#7
(byte*) gen_sintab::sintab#8
(byte*) gen_sintab::sintab#9
(void()) gen_sprites()
(byte*~) gen_sprites::$1
(bool~) gen_sprites::$2
(const string) gen_sprites::$3 = (string) "camelot"
(label) gen_sprites::@1
(label) gen_sprites::@3
(label) gen_sprites::@return
(byte[]) gen_sprites::cml
(byte[]) gen_sprites::cml#0
(byte) gen_sprites::i
(byte) gen_sprites::i#0
(byte) gen_sprites::i#1
(byte) gen_sprites::i#2
(byte) gen_sprites::i#3
(byte*) gen_sprites::spr
(byte*) gen_sprites::spr#0
(byte*) gen_sprites::spr#1
(byte*) gen_sprites::spr#2
(byte*) gen_sprites::spr#3
(word()) getFAC()
(label) getFAC::@return
(word) getFAC::return
(word) getFAC::return#0
(word) getFAC::return#1
(word) getFAC::return#2
(word) getFAC::return#3
(word) getFAC::return#4
(word) getFAC::w
(word) getFAC::w#0
(void()) init()
(bool~) init::$10
(byte*~) init::$5
(number~) init::$9
(label) init::@1
(label) init::@10
(label) init::@2
(label) init::@3
(label) init::@4
(label) init::@5
(label) init::@6
(label) init::@7
(label) init::@8
(label) init::@9
(label) init::@return
(byte) init::i
(byte) init::i#0
(byte) init::i#1
(byte) init::i#2
(void()) main()
(bool~) main::$1
(label) main::@2
(label) main::@3
(label) main::@5
(label) main::@6
(label) main::@return
(byte*) memHi
(byte*) memHi#0
(byte*) memLo
(byte*) memLo#0
(void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
(label) mulFACbyMEM::@1
(label) mulFACbyMEM::@return
(byte*) mulFACbyMEM::mem
(byte*) mulFACbyMEM::mem#0
(byte*) mulFACbyMEM::mem#1
(byte*) mulFACbyMEM::mem#2
(void()) place_sprites()
(byte*~) place_sprites::$0
(word~) place_sprites::$1
(number~) place_sprites::$2
(byte~) place_sprites::$3
(number~) place_sprites::$4
(number~) place_sprites::$5
(bool~) place_sprites::$6
(label) place_sprites::@1
(label) place_sprites::@return
(byte) place_sprites::col
(byte) place_sprites::col#0
(byte) place_sprites::col#1
(byte) place_sprites::col#2
(byte) place_sprites::j
(byte) place_sprites::j#0
(byte) place_sprites::j#1
(byte) place_sprites::j#2
(byte) place_sprites::j2
(byte) place_sprites::j2#0
(byte) place_sprites::j2#1
(byte) place_sprites::j2#2
(byte) place_sprites::j2#3
(byte) place_sprites::spr_id
(byte) place_sprites::spr_id#0
(byte) place_sprites::spr_id#1
(byte) place_sprites::spr_id#2
(byte) place_sprites::spr_x
(byte) place_sprites::spr_x#0
(byte) place_sprites::spr_x#1
(byte) place_sprites::spr_x#2
(byte*) place_sprites::sprites_ptr
(byte*) place_sprites::sprites_ptr#0
(byte*) place_sprites::sprites_ptr#1
(void()) prepareMEM((byte*) prepareMEM::mem)
(byte~) prepareMEM::$0
(byte~) prepareMEM::$1
(label) prepareMEM::@return
(byte*) prepareMEM::mem
(byte*) prepareMEM::mem#0
(byte*) prepareMEM::mem#1
(byte*) prepareMEM::mem#2
(byte*) prepareMEM::mem#3
(byte*) prepareMEM::mem#4
(byte*) prepareMEM::mem#5
(byte*) progress_cursor
(byte*) progress_cursor#0
(byte*) progress_cursor#1
(byte*) progress_cursor#10
(byte*) progress_cursor#11
(byte*) progress_cursor#12
(byte*) progress_cursor#13
(byte*) progress_cursor#14
(byte*) progress_cursor#15
(byte*) progress_cursor#16
(byte*) progress_cursor#17
(byte*) progress_cursor#18
(byte*) progress_cursor#19
(byte*) progress_cursor#2
(byte*) progress_cursor#20
(byte*) progress_cursor#21
(byte*) progress_cursor#22
(byte*) progress_cursor#23
(byte*) progress_cursor#24
(byte*) progress_cursor#25
(byte*) progress_cursor#26
(byte*) progress_cursor#27
(byte*) progress_cursor#28
(byte*) progress_cursor#29
(byte*) progress_cursor#3
(byte*) progress_cursor#30
(byte*) progress_cursor#31
(byte*) progress_cursor#32
(byte*) progress_cursor#33
(byte*) progress_cursor#34
(byte*) progress_cursor#35
(byte*) progress_cursor#36
(byte*) progress_cursor#37
(byte*) progress_cursor#38
(byte*) progress_cursor#39
(byte*) progress_cursor#4
(byte*) progress_cursor#40
(byte*) progress_cursor#41
(byte*) progress_cursor#42
(byte*) progress_cursor#43
(byte*) progress_cursor#44
(byte*) progress_cursor#45
(byte*) progress_cursor#46
(byte*) progress_cursor#47
(byte*) progress_cursor#48
(byte*) progress_cursor#49
(byte*) progress_cursor#5
(byte*) progress_cursor#50
(byte*) progress_cursor#51
(byte*) progress_cursor#52
(byte*) progress_cursor#53
(byte*) progress_cursor#54
(byte*) progress_cursor#55
(byte*) progress_cursor#56
(byte*) progress_cursor#57
(byte*) progress_cursor#58
(byte*) progress_cursor#59
(byte*) progress_cursor#6
(byte*) progress_cursor#60
(byte*) progress_cursor#61
(byte*) progress_cursor#62
(byte*) progress_cursor#63
(byte*) progress_cursor#64
(byte*) progress_cursor#7
(byte*) progress_cursor#8
(byte*) progress_cursor#9
(byte) progress_idx
(byte) progress_idx#0
(byte) progress_idx#1
(byte) progress_idx#10
(byte) progress_idx#11
(byte) progress_idx#12
(byte) progress_idx#13
(byte) progress_idx#14
(byte) progress_idx#15
(byte) progress_idx#16
(byte) progress_idx#17
(byte) progress_idx#18
(byte) progress_idx#19
(byte) progress_idx#2
(byte) progress_idx#20
(byte) progress_idx#21
(byte) progress_idx#22
(byte) progress_idx#23
(byte) progress_idx#24
(byte) progress_idx#25
(byte) progress_idx#26
(byte) progress_idx#27
(byte) progress_idx#28
(byte) progress_idx#29
(byte) progress_idx#3
(byte) progress_idx#30
(byte) progress_idx#31
(byte) progress_idx#32
(byte) progress_idx#33
(byte) progress_idx#34
(byte) progress_idx#35
(byte) progress_idx#36
(byte) progress_idx#37
(byte) progress_idx#38
(byte) progress_idx#39
(byte) progress_idx#4
(byte) progress_idx#40
(byte) progress_idx#41
(byte) progress_idx#42
(byte) progress_idx#43
(byte) progress_idx#44
(byte) progress_idx#45
(byte) progress_idx#46
(byte) progress_idx#47
(byte) progress_idx#48
(byte) progress_idx#49
(byte) progress_idx#5
(byte) progress_idx#50
(byte) progress_idx#51
(byte) progress_idx#52
(byte) progress_idx#53
(byte) progress_idx#54
(byte) progress_idx#55
(byte) progress_idx#56
(byte) progress_idx#57
(byte) progress_idx#58
(byte) progress_idx#59
(byte) progress_idx#6
(byte) progress_idx#60
(byte) progress_idx#61
(byte) progress_idx#62
(byte) progress_idx#63
(byte) progress_idx#64
(byte) progress_idx#7
(byte) progress_idx#8
(byte) progress_idx#9
(void()) progress_inc()
(bool~) progress_inc::$0
(bool~) progress_inc::$1
(label) progress_inc::@1
(label) progress_inc::@2
(label) progress_inc::@return
(byte[]) progress_inc::progress_chars
(byte[]) progress_inc::progress_chars#0
(void()) progress_init((byte*) progress_init::line)
(label) progress_init::@return
(byte*) progress_init::line
(byte*) progress_init::line#0
(byte*) progress_init::line#1
(byte*) progress_init::line#2
(void()) setARGtoFAC()
(label) setARGtoFAC::@return
(void()) setFAC((word) setFAC::w)
(byte*~) setFAC::$0
(label) setFAC::@1
(label) setFAC::@return
(word) setFAC::w
(word) setFAC::w#0
(word) setFAC::w#1
(word) setFAC::w#2
(word) setFAC::w#3
(word) setFAC::w#4
(word) setFAC::w#5
(void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
(label) setMEMtoFAC::@1
(label) setMEMtoFAC::@return
(byte*) setMEMtoFAC::mem
(byte*) setMEMtoFAC::mem#0
(byte*) setMEMtoFAC::mem#1
(byte*) setMEMtoFAC::mem#2
(byte*) setMEMtoFAC::mem#3
(byte*) setMEMtoFAC::mem#4
(byte*) setMEMtoFAC::mem#5
(void()) sinFAC()
(label) sinFAC::@return
(byte) sin_idx_x
(byte) sin_idx_x#0
(byte) sin_idx_x#1
(byte) sin_idx_x#10
(byte) sin_idx_x#11
(byte) sin_idx_x#12
(byte) sin_idx_x#13
(byte) sin_idx_x#14
(byte) sin_idx_x#15
(byte) sin_idx_x#16
(byte) sin_idx_x#17
(byte) sin_idx_x#18
(byte) sin_idx_x#19
(byte) sin_idx_x#2
(byte) sin_idx_x#20
(byte) sin_idx_x#21
(byte) sin_idx_x#22
(byte) sin_idx_x#23
(byte) sin_idx_x#24
(byte) sin_idx_x#25
(byte) sin_idx_x#3
(byte) sin_idx_x#4
(byte) sin_idx_x#5
(byte) sin_idx_x#6
(byte) sin_idx_x#7
(byte) sin_idx_x#8
(byte) sin_idx_x#9
(byte) sin_idx_y
(byte) sin_idx_y#0
(byte) sin_idx_y#1
(byte) sin_idx_y#10
(byte) sin_idx_y#11
(byte) sin_idx_y#12
(byte) sin_idx_y#13
(byte) sin_idx_y#14
(byte) sin_idx_y#15
(byte) sin_idx_y#16
(byte) sin_idx_y#17
(byte) sin_idx_y#18
(byte) sin_idx_y#19
(byte) sin_idx_y#2
(byte) sin_idx_y#20
(byte) sin_idx_y#21
(byte) sin_idx_y#22
(byte) sin_idx_y#23
(byte) sin_idx_y#24
(byte) sin_idx_y#25
(byte) sin_idx_y#3
(byte) sin_idx_y#4
(byte) sin_idx_y#5
(byte) sin_idx_y#6
(byte) sin_idx_y#7
(byte) sin_idx_y#8
(byte) sin_idx_y#9
(byte) sinlen_x
(byte) sinlen_x#0
(byte) sinlen_y
(byte) sinlen_y#0
(byte[$dd]) sintab_x
(byte[$dd]) sintab_x#0
(byte[$c5]) sintab_y
(byte[$c5]) sintab_y#0
(byte*) sprites
(byte*) sprites#0
(void()) subFACfromARG()
(label) subFACfromARG::@return

Fixing inline constructor with getFAC::$0 ← (byte)*(memHi#0) w= (byte)*(memLo#0)
Successful SSA optimization Pass2FixInlineConstructorsNew
Adding number conversion cast (unumber) $dd in (byte) sinlen_x#0 ← (number) $dd
Adding number conversion cast (unumber) $c5 in (byte) sinlen_y#0 ← (number) $c5
Adding number conversion cast (unumber) $ff in (bool~) main::$1 ← *((byte*) RASTER#0) != (number) $ff
Adding number conversion cast (unumber) 0 in *((byte*) COLS#0 + (byte) init::i#2) ← (number) 0
Adding number conversion cast (unumber) $28 in (number~) init::$9 ← (number) $28 + (byte) init::i#2
Adding number conversion cast (unumber) init::$9 in (number~) init::$9 ← (unumber)(number) $28 + (byte) init::i#2
Adding number conversion cast (unumber) $b in *((byte*) COLS#0 + (unumber~) init::$9) ← (number) $b
Adding number conversion cast (unumber) 0 in (byte) gen_sintab::min#0 ← (number) 0
Adding number conversion cast (unumber) $ff in (byte) gen_sintab::max#0 ← (number) $ff
Adding number conversion cast (unumber) $28 in (byte*~) init::$5 ← (byte*) SCREEN#0 + (number) $28
Adding number conversion cast (unumber) $32 in (byte) gen_sintab::min#1 ← (number) $32
Adding number conversion cast (unumber) $d0 in (byte) gen_sintab::max#1 ← (number) $d0
Adding number conversion cast (unumber) $3e8 in (byte*~) clear_screen::$0 ← (byte*) SCREEN#0 + (number) $3e8
Adding number conversion cast (unumber) 0 in (byte) progress_idx#7 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) progress_idx#8 ← (number) 0
Adding number conversion cast (unumber) 8 in (bool~) progress_inc::$0 ← (byte) progress_idx#10 == (number) 8
Adding number conversion cast (unumber) 8 in *((byte*) progress_cursor#24) ← *((byte[]) progress_inc::progress_chars#0 + (number) 8)
Adding number conversion cast (unumber) 0 in (byte) progress_idx#11 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) sin_idx_x#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) sin_idx_y#2 ← (number) 0
Adding number conversion cast (unumber) $c in (byte) anim::j2#0 ← (number) $c
Adding number conversion cast (unumber) 0 in (byte) anim::x_msb#0 ← (number) 0
Adding number conversion cast (unumber) 2 in (number~) anim::$6 ← (byte) anim::x_msb#2 * (number) 2
Adding number conversion cast (unumber) anim::$6 in (number~) anim::$6 ← (byte) anim::x_msb#2 * (unumber)(number) 2
Adding number conversion cast (unumber) anim::$8 in (number~) anim::$8 ← (unumber~) anim::$6 | (byte~) anim::$7
Adding number conversion cast (unumber) $a in (number~) anim::$10 ← (byte) anim::xidx#3 + (number) $a
Adding number conversion cast (unumber) anim::$10 in (number~) anim::$10 ← (byte) anim::xidx#3 + (unumber)(number) $a
Adding number conversion cast (unumber) 8 in (number~) anim::$14 ← (byte) anim::yidx#4 + (number) 8
Adding number conversion cast (unumber) anim::$14 in (number~) anim::$14 ← (byte) anim::yidx#4 + (unumber)(number) 8
Adding number conversion cast (unumber) 2 in (number~) anim::$18 ← (byte) anim::j2#3 - (number) 2
Adding number conversion cast (unumber) anim::$18 in (number~) anim::$18 ← (byte) anim::j2#3 - (unumber)(number) 2
Adding number conversion cast (unumber) 0 in (byte) sin_idx_x#4 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) sin_idx_y#4 ← (number) 0
Adding number conversion cast (unumber) $7f in *((byte*) SPRITES_ENABLE#0) ← (number) $7f
Adding number conversion cast (unumber) $7f in *((byte*) SPRITES_EXPAND_X#0) ← (number) $7f
Adding number conversion cast (unumber) $7f in *((byte*) SPRITES_EXPAND_Y#0) ← (number) $7f
Adding number conversion cast (unumber) $3f8 in (byte*~) place_sprites::$0 ← (byte*) SCREEN#0 + (number) $3f8
Adding number conversion cast (unumber) $40 in (number~) place_sprites::$2 ← (word~) place_sprites::$1 / (number) $40
Adding number conversion cast (unumber) place_sprites::$2 in (number~) place_sprites::$2 ← (word~) place_sprites::$1 / (unumber)(number) $40
Adding number conversion cast (unumber) $3c in (byte) place_sprites::spr_x#0 ← (number) $3c
Adding number conversion cast (unumber) 0 in (byte) place_sprites::j2#0 ← (number) 0
Adding number conversion cast (unumber) 5 in (byte) place_sprites::col#0 ← (number) 5
Adding number conversion cast (unumber) $50 in *((byte*) SPRITES_YPOS#0 + (byte) place_sprites::j2#3) ← (number) $50
Adding number conversion cast (unumber) $20 in (number~) place_sprites::$4 ← (byte) place_sprites::spr_x#2 + (number) $20
Adding number conversion cast (unumber) place_sprites::$4 in (number~) place_sprites::$4 ← (byte) place_sprites::spr_x#2 + (unumber)(number) $20
Adding number conversion cast (unumber) 7^5 in (number~) place_sprites::$5 ← (byte) place_sprites::col#2 ^ (number) 7^(number) 5
Adding number conversion cast (unumber) place_sprites::$5 in (number~) place_sprites::$5 ← (byte) place_sprites::col#2 ^ (unumber)(number) 7^(number) 5
Adding number conversion cast (unumber) $40 in (byte*~) gen_sprites::$1 ← (byte*) gen_sprites::spr#3 + (number) $40
Adding number conversion cast (unumber) 8 in (number~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 * (number) 8
Adding number conversion cast (unumber) gen_chargen_sprite::$1 in (number~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 * (unumber)(number) 8
Adding number conversion cast (unumber) $32 in *((byte*) PROCPORT#0) ← (number) $32
Adding number conversion cast (unumber) 0 in (byte) gen_chargen_sprite::s_gen#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gen_chargen_sprite::s_gen_cnt#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gen_chargen_sprite::c#0 ← (number) 0
Adding number conversion cast (unumber) $80 in (number~) gen_chargen_sprite::$3 ← (byte) gen_chargen_sprite::bits#2 & (number) $80
Adding number conversion cast (unumber) gen_chargen_sprite::$3 in (number~) gen_chargen_sprite::$3 ← (byte) gen_chargen_sprite::bits#2 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) gen_chargen_sprite::$4 ← (unumber~) gen_chargen_sprite::$3 != (number) 0
Adding number conversion cast (unumber) 1 in (byte) gen_chargen_sprite::c#1 ← (number) 1
Adding number conversion cast (unumber) 2 in (number~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 * (number) 2
Adding number conversion cast (unumber) gen_chargen_sprite::$6 in (number~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 * (unumber)(number) 2
Adding number conversion cast (unumber) gen_chargen_sprite::$7 in (number~) gen_chargen_sprite::$7 ← (unumber~) gen_chargen_sprite::$6 | (byte) gen_chargen_sprite::c#2
Adding number conversion cast (unumber) 8 in (bool~) gen_chargen_sprite::$8 ← (byte) gen_chargen_sprite::s_gen_cnt#1 == (number) 8
Adding number conversion cast (unumber) 0 in *((byte*) gen_chargen_sprite::sprite#3 + (number) 0) ← (byte) gen_chargen_sprite::s_gen#4
Adding number conversion cast (unumber) 3 in *((byte*) gen_chargen_sprite::sprite#3 + (number) 3) ← (byte) gen_chargen_sprite::s_gen#4
Adding number conversion cast (unumber) 6 in *((byte*) gen_chargen_sprite::sprite#3 + (number) 6) ← (byte) gen_chargen_sprite::s_gen#4
Adding number conversion cast (unumber) 0 in (byte) gen_chargen_sprite::s_gen#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gen_chargen_sprite::s_gen_cnt#2 ← (number) 0
Adding number conversion cast (unumber) 2 in (number~) gen_chargen_sprite::$11 ← (byte) gen_chargen_sprite::bits#3 * (number) 2
Adding number conversion cast (unumber) gen_chargen_sprite::$11 in (number~) gen_chargen_sprite::$11 ← (byte) gen_chargen_sprite::bits#3 * (unumber)(number) 2
Adding number conversion cast (unumber) 6 in (byte*~) gen_chargen_sprite::$13 ← (byte*) gen_chargen_sprite::sprite#4 + (number) 6
Adding number conversion cast (unumber) $37 in *((byte*) PROCPORT#0) ← (number) $37
Adding number conversion cast (unumber) 2 in (word) setFAC::w#2 ← (number) 2
Adding number conversion cast (unumber) 0 in (byte) gen_sintab::i#0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (byte) to elements in (byte[]) progress_inc::progress_chars#0 ← { (byte)(number) $20, (byte)(number) $65, (byte)(number) $74, (byte)(number) $75, (byte)(number) $61, (byte)(number) $f6, (byte)(number) $e7, (byte)(number) $ea, (byte)(number) $e0 }
Adding number conversion cast (byte) to elements in (byte[]) gen_sintab::f_i#0 ← { (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Adding number conversion cast (byte) to elements in (byte[]) gen_sintab::f_min#0 ← { (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Adding number conversion cast (byte) to elements in (byte[]) gen_sintab::f_amp#0 ← { (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Successful SSA optimization PassNAddArrayNumberTypeConversions
Inlining cast (byte*) PROCPORT#0 ← (byte*)(number) 1
Inlining cast (byte*) CHARGEN#0 ← (byte*)(number) $d000
Inlining cast (byte*) SPRITES_XPOS#0 ← (byte*)(number) $d000
Inlining cast (byte*) SPRITES_YPOS#0 ← (byte*)(number) $d001
Inlining cast (byte*) SPRITES_XMSB#0 ← (byte*)(number) $d010
Inlining cast (byte*) RASTER#0 ← (byte*)(number) $d012
Inlining cast (byte*) SPRITES_ENABLE#0 ← (byte*)(number) $d015
Inlining cast (byte*) SPRITES_EXPAND_Y#0 ← (byte*)(number) $d017
Inlining cast (byte*) SPRITES_EXPAND_X#0 ← (byte*)(number) $d01d
Inlining cast (byte*) BORDERCOL#0 ← (byte*)(number) $d020
Inlining cast (byte*) SPRITES_COLS#0 ← (byte*)(number) $d027
Inlining cast (byte*) COLS#0 ← (byte*)(number) $d800
Inlining cast (byte*) memLo#0 ← (byte*)(number) $fe
Inlining cast (byte*) memHi#0 ← (byte*)(number) $ff
Inlining cast (byte*~) setFAC::$0 ← (byte*)(word) setFAC::w#5
Inlining cast (byte) sinlen_x#0 ← (unumber)(number) $dd
Inlining cast (byte) sinlen_y#0 ← (unumber)(number) $c5
Inlining cast (byte*) sprites#0 ← (byte*)(number) $2000
Inlining cast (byte*) SCREEN#0 ← (byte*)(number) $400
Inlining cast *((byte*) COLS#0 + (byte) init::i#2) ← (unumber)(number) 0
Inlining cast *((byte*) COLS#0 + (unumber~) init::$9) ← (unumber)(number) $b
Inlining cast (byte) gen_sintab::min#0 ← (unumber)(number) 0
Inlining cast (byte) gen_sintab::max#0 ← (unumber)(number) $ff
Inlining cast (byte) gen_sintab::min#1 ← (unumber)(number) $32
Inlining cast (byte) gen_sintab::max#1 ← (unumber)(number) $d0
Inlining cast (byte) progress_idx#7 ← (unumber)(number) 0
Inlining cast (byte) progress_idx#8 ← (unumber)(number) 0
Inlining cast (byte) progress_idx#11 ← (unumber)(number) 0
Inlining cast (byte) sin_idx_x#2 ← (unumber)(number) 0
Inlining cast (byte) sin_idx_y#2 ← (unumber)(number) 0
Inlining cast (byte) anim::j2#0 ← (unumber)(number) $c
Inlining cast (byte) anim::x_msb#0 ← (unumber)(number) 0
Inlining cast (word~) anim::$4 ← (word)(number) $1e
Inlining cast (byte) sin_idx_x#4 ← (unumber)(number) 0
Inlining cast (byte) sin_idx_y#4 ← (unumber)(number) 0
Inlining cast *((byte*) SPRITES_ENABLE#0) ← (unumber)(number) $7f
Inlining cast *((byte*) SPRITES_EXPAND_X#0) ← (unumber)(number) $7f
Inlining cast *((byte*) SPRITES_EXPAND_Y#0) ← (unumber)(number) $7f
Inlining cast (word~) place_sprites::$1 ← (word)(byte*) sprites#0
Inlining cast (byte~) place_sprites::$3 ← (byte)(unumber~) place_sprites::$2
Inlining cast (byte) place_sprites::spr_x#0 ← (unumber)(number) $3c
Inlining cast (byte) place_sprites::j2#0 ← (unumber)(number) 0
Inlining cast (byte) place_sprites::col#0 ← (unumber)(number) 5
Inlining cast *((byte*) SPRITES_YPOS#0 + (byte) place_sprites::j2#3) ← (unumber)(number) $50
Inlining cast (word~) gen_chargen_sprite::$0 ← (word)(byte) gen_chargen_sprite::ch#1
Inlining cast *((byte*) PROCPORT#0) ← (unumber)(number) $32
Inlining cast (byte) gen_chargen_sprite::s_gen#0 ← (unumber)(number) 0
Inlining cast (byte) gen_chargen_sprite::s_gen_cnt#0 ← (unumber)(number) 0
Inlining cast (byte) gen_chargen_sprite::c#0 ← (unumber)(number) 0
Inlining cast (byte) gen_chargen_sprite::c#1 ← (unumber)(number) 1
Inlining cast (byte) gen_chargen_sprite::s_gen#2 ← (unumber)(number) 0
Inlining cast (byte) gen_chargen_sprite::s_gen_cnt#2 ← (unumber)(number) 0
Inlining cast *((byte*) PROCPORT#0) ← (unumber)(number) $37
Inlining cast (byte*) gen_sintab::f_2pi#0 ← (byte*)(number) $e2e5
Inlining cast (word~) gen_sintab::$0 ← (word)(byte) gen_sintab::max#2
Inlining cast (word~) gen_sintab::$3 ← (word)(byte) gen_sintab::min#2
Inlining cast (word) setFAC::w#2 ← (unumber)(number) 2
Inlining cast (byte) gen_sintab::i#0 ← (unumber)(number) 0
Inlining cast (word~) gen_sintab::$13 ← (word)(byte) gen_sintab::i#2
Inlining cast (word~) gen_sintab::$17 ← (word)(byte) gen_sintab::length#2
Inlining cast (byte~) gen_sintab::$24 ← (byte)(word~) gen_sintab::$23
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1
Simplifying constant pointer cast (byte*) 53248
Simplifying constant pointer cast (byte*) 53248
Simplifying constant pointer cast (byte*) 53249
Simplifying constant pointer cast (byte*) 53264
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53269
Simplifying constant pointer cast (byte*) 53271
Simplifying constant pointer cast (byte*) 53277
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53287
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 254
Simplifying constant pointer cast (byte*) 255
Simplifying constant integer cast *((byte*) memHi#0)
Simplifying constant integer cast *((byte*) memLo#0)
Simplifying constant integer cast $dd
Simplifying constant integer cast $c5
Simplifying constant pointer cast (byte*) 8192
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $b
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast $28
Simplifying constant integer cast $32
Simplifying constant integer cast $d0
Simplifying constant integer cast $3e8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $20
Simplifying constant integer cast $65
Simplifying constant integer cast $74
Simplifying constant integer cast $75
Simplifying constant integer cast $61
Simplifying constant integer cast $f6
Simplifying constant integer cast $e7
Simplifying constant integer cast $ea
Simplifying constant integer cast $e0
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $c
Simplifying constant integer cast 0
Simplifying constant integer cast $1e
Simplifying constant integer cast 2
Simplifying constant integer cast $a
Simplifying constant integer cast 8
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $7f
Simplifying constant integer cast $7f
Simplifying constant integer cast $7f
Simplifying constant integer cast $3f8
Simplifying constant integer cast $40
Simplifying constant integer cast $3c
Simplifying constant integer cast 0
Simplifying constant integer cast 5
Simplifying constant integer cast $50
Simplifying constant integer cast $20
Simplifying constant integer cast $40
Simplifying constant integer cast 8
Simplifying constant integer cast $32
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 6
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 6
Simplifying constant integer cast $37
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 58085
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $dd
Finalized unsigned number type (byte) $c5
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $32
Finalized unsigned number type (byte) $d0
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (word) $3f8
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $3c
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) $50
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $32
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $37
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) init::$9 ← (byte) $28 + (byte) init::i#2
Inferred type updated to byte in (unumber~) anim::$6 ← (byte) anim::x_msb#2 * (byte) 2
Inferred type updated to byte in (unumber~) anim::$8 ← (byte~) anim::$6 | (byte~) anim::$7
Inferred type updated to byte in (unumber~) anim::$10 ← (byte) anim::xidx#3 + (byte) $a
Inferred type updated to byte in (unumber~) anim::$14 ← (byte) anim::yidx#4 + (byte) 8
Inferred type updated to byte in (unumber~) anim::$18 ← (byte) anim::j2#3 - (byte) 2
Inferred type updated to word in (unumber~) place_sprites::$2 ← (word~) place_sprites::$1 / (byte) $40
Inferred type updated to byte in (unumber~) place_sprites::$4 ← (byte) place_sprites::spr_x#2 + (byte) $20
Inferred type updated to byte in (unumber~) place_sprites::$5 ← (byte) place_sprites::col#2 ^ (byte)(number) 7^(number) 5
Inferred type updated to word in (unumber~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 * (byte) 8
Inferred type updated to byte in (unumber~) gen_chargen_sprite::$3 ← (byte) gen_chargen_sprite::bits#2 & (byte) $80
Inferred type updated to byte in (unumber~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 * (byte) 2
Inferred type updated to byte in (unumber~) gen_chargen_sprite::$7 ← (byte~) gen_chargen_sprite::$6 | (byte) gen_chargen_sprite::c#2
Inferred type updated to byte in (unumber~) gen_chargen_sprite::$11 ← (byte) gen_chargen_sprite::bits#3 * (byte) 2
Inversing boolean not [155] (bool~) progress_inc::$1 ← (byte) progress_idx#10 != (byte) 8 from [154] (bool~) progress_inc::$0 ← (byte) progress_idx#10 == (byte) 8
Inversing boolean not [191] (bool~) anim::$12 ← (byte) anim::xidx#1 < (byte) sinlen_x#0 from [190] (bool~) anim::$11 ← (byte) anim::xidx#1 >= (byte) sinlen_x#0
Inversing boolean not [197] (bool~) anim::$16 ← (byte) anim::yidx#1 < (byte) sinlen_y#0 from [196] (bool~) anim::$15 ← (byte) anim::yidx#1 >= (byte) sinlen_y#0
Inversing boolean not [215] (bool~) anim::$1 ← (byte) sin_idx_x#3 < (byte) sinlen_x#0 from [214] (bool~) anim::$0 ← (byte) sin_idx_x#3 >= (byte) sinlen_x#0
Inversing boolean not [220] (bool~) anim::$3 ← (byte) sin_idx_y#3 < (byte) sinlen_y#0 from [219] (bool~) anim::$2 ← (byte) sin_idx_y#3 >= (byte) sinlen_y#0
Inversing boolean not [292] (bool~) gen_chargen_sprite::$5 ← (byte~) gen_chargen_sprite::$3 == (byte) 0 from [291] (bool~) gen_chargen_sprite::$4 ← (byte~) gen_chargen_sprite::$3 != (byte) 0
Inversing boolean not [304] (bool~) gen_chargen_sprite::$9 ← (byte) gen_chargen_sprite::s_gen_cnt#1 != (byte) 8 from [303] (bool~) gen_chargen_sprite::$8 ← (byte) gen_chargen_sprite::s_gen_cnt#1 == (byte) 8
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) prepareMEM::mem#0 = (byte*~) setFAC::$0 
Alias (word) getFAC::return#0 = (word) getFAC::w#0 (word~) getFAC::$0 (word) getFAC::return#3 (word) getFAC::return#1 
Alias (byte) sin_idx_x#22 = (byte) sin_idx_x#25 
Alias (byte) sin_idx_y#20 = (byte) sin_idx_y#23 
Alias (byte*) progress_cursor#0 = (byte*) progress_cursor#15 
Alias (byte) progress_idx#0 = (byte) progress_idx#16 
Alias (byte) sin_idx_x#13 = (byte) sin_idx_x#17 
Alias (byte) sin_idx_y#13 = (byte) sin_idx_y#18 
Alias (byte*) progress_cursor#1 = (byte*) progress_cursor#36 (byte*) progress_cursor#40 (byte*) progress_cursor#30 (byte*) progress_cursor#16 
Alias (byte) progress_idx#1 = (byte) progress_idx#36 (byte) progress_idx#40 (byte) progress_idx#31 (byte) progress_idx#17 
Alias (byte) sin_idx_x#0 = (byte) sin_idx_x#7 (byte) sin_idx_x#8 (byte) sin_idx_x#1 
Alias (byte) sin_idx_y#0 = (byte) sin_idx_y#7 (byte) sin_idx_y#8 (byte) sin_idx_y#1 
Alias (byte*) progress_cursor#45 = (byte*) progress_cursor#47 
Alias (byte) progress_idx#45 = (byte) progress_idx#47 
Alias (byte*) progress_cursor#31 = (byte*) progress_cursor#41 (byte*) progress_cursor#43 (byte*) progress_cursor#37 
Alias (byte) progress_idx#32 = (byte) progress_idx#41 (byte) progress_idx#43 (byte) progress_idx#37 
Alias (byte*) progress_cursor#17 = (byte*) progress_cursor#2 
Alias (byte) progress_idx#18 = (byte) progress_idx#2 
Alias (byte) progress_idx#19 = (byte) progress_idx#3 
Alias (byte*) progress_cursor#18 = (byte*) progress_cursor#3 
Alias (byte*) progress_init::line#1 = (byte*~) init::$5 
Alias (byte*) progress_cursor#19 = (byte*) progress_cursor#4 
Alias (byte) progress_idx#20 = (byte) progress_idx#4 
Alias (byte) progress_idx#21 = (byte) progress_idx#5 (byte) progress_idx#33 (byte) progress_idx#22 (byte) progress_idx#6 
Alias (byte*) progress_cursor#20 = (byte*) progress_cursor#5 (byte*) progress_cursor#32 (byte*) progress_cursor#21 (byte*) progress_cursor#6 
Alias (byte*) SCREEN#0 = (byte*) progress_cursor#7 (byte*) progress_cursor#39 (byte*) progress_cursor#35 
Alias (byte*) progress_cursor#22 = (byte*) progress_cursor#8 (byte*) progress_cursor#9 
Alias (byte) progress_idx#23 = (byte) progress_idx#8 (byte) progress_idx#9 
Alias (byte*) progress_cursor#24 = (byte*) progress_cursor#33 
Alias (byte) progress_idx#12 = (byte) progress_idx#26 (byte) progress_idx#25 
Alias (byte*) progress_cursor#11 = (byte*) progress_cursor#25 (byte*) progress_cursor#23 
Alias (byte) progress_idx#35 = (byte) progress_idx#39 (byte) progress_idx#7 
Alias (word) anim::x#0 = (word~) anim::$5 
Alias (byte) anim::x_msb#1 = (byte~) anim::$8 (byte) anim::x_msb#7 
Alias (byte) anim::xidx#1 = (byte~) anim::$10 (byte) anim::xidx#4 
Alias (byte) anim::yidx#1 = (byte~) anim::$14 (byte) anim::yidx#5 
Alias (byte) anim::yidx#3 = (byte) anim::yidx#7 
Alias (byte) anim::j2#2 = (byte) anim::j2#6 
Alias (byte) anim::j#5 = (byte) anim::j#6 
Alias (byte) sin_idx_x#23 = (byte) sin_idx_x#24 
Alias (byte) sin_idx_y#24 = (byte) sin_idx_y#25 
Alias (byte) anim::xidx#2 = (byte~) anim::$13 
Alias (byte) anim::j2#1 = (byte~) anim::$18 
Alias (byte) anim::j2#4 = (byte) anim::j2#5 
Alias (byte) anim::j#3 = (byte) anim::j#4 
Alias (byte) anim::xidx#6 = (byte) anim::xidx#7 
Alias (byte) anim::x_msb#5 = (byte) anim::x_msb#6 
Alias (byte) sin_idx_x#18 = (byte) sin_idx_x#19 
Alias (byte) sin_idx_y#21 = (byte) sin_idx_y#22 
Alias (byte) anim::yidx#2 = (byte~) anim::$17 
Alias (byte) anim::x_msb#3 = (byte) anim::x_msb#4 
Alias (byte) sin_idx_x#10 = (byte) sin_idx_x#14 
Alias (byte) sin_idx_y#14 = (byte) sin_idx_y#15 (byte) sin_idx_y#19 
Alias (byte) sin_idx_x#20 = (byte) sin_idx_x#21 
Alias (byte) sin_idx_x#11 = (byte) sin_idx_x#15 (byte) sin_idx_x#5 
Alias (byte) sin_idx_y#11 = (byte) sin_idx_y#16 (byte) sin_idx_y#5 
Alias (byte*) place_sprites::sprites_ptr#0 = (byte*~) place_sprites::$0 
Alias (byte) place_sprites::spr_id#0 = (byte~) place_sprites::$3 
Alias (byte) place_sprites::spr_x#1 = (byte~) place_sprites::$4 
Alias (byte) place_sprites::col#1 = (byte~) place_sprites::$5 
Alias (byte*) gen_sprites::spr#2 = (byte*) gen_sprites::spr#3 
Alias (byte) gen_sprites::i#2 = (byte) gen_sprites::i#3 
Alias (byte*) gen_sprites::spr#1 = (byte*~) gen_sprites::$1 
Alias (byte*) gen_chargen_sprite::chargen#0 = (byte*~) gen_chargen_sprite::$2 
Alias (byte) gen_chargen_sprite::s_gen#7 = (byte) gen_chargen_sprite::s_gen#8 
Alias (byte) gen_chargen_sprite::s_gen_cnt#6 = (byte) gen_chargen_sprite::s_gen_cnt#7 
Alias (byte*) gen_chargen_sprite::sprite#10 = (byte*) gen_chargen_sprite::sprite#9 
Alias (byte) gen_chargen_sprite::bits#2 = (byte) gen_chargen_sprite::bits#8 
Alias (byte) gen_chargen_sprite::x#7 = (byte) gen_chargen_sprite::x#8 
Alias (byte) gen_chargen_sprite::y#10 = (byte) gen_chargen_sprite::y#9 
Alias (byte*) gen_chargen_sprite::chargen#8 = (byte*) gen_chargen_sprite::chargen#9 
Alias (byte) gen_chargen_sprite::s_gen#1 = (byte~) gen_chargen_sprite::$7 (byte) gen_chargen_sprite::s_gen#4 
Alias (byte*) gen_chargen_sprite::sprite#3 = (byte*) gen_chargen_sprite::sprite#5 
Alias (byte) gen_chargen_sprite::b#3 = (byte) gen_chargen_sprite::b#4 
Alias (byte) gen_chargen_sprite::c#2 = (byte) gen_chargen_sprite::c#5 
Alias (byte) gen_chargen_sprite::bits#5 = (byte) gen_chargen_sprite::bits#6 
Alias (byte) gen_chargen_sprite::x#4 = (byte) gen_chargen_sprite::x#5 
Alias (byte) gen_chargen_sprite::y#6 = (byte) gen_chargen_sprite::y#7 
Alias (byte*) gen_chargen_sprite::chargen#5 = (byte*) gen_chargen_sprite::chargen#6 
Alias (byte) gen_chargen_sprite::bits#3 = (byte) gen_chargen_sprite::bits#4 
Alias (byte) gen_chargen_sprite::x#2 = (byte) gen_chargen_sprite::x#3 
Alias (byte*) gen_chargen_sprite::sprite#4 = (byte*) gen_chargen_sprite::sprite#6 (byte*) gen_chargen_sprite::sprite#8 
Alias (byte) gen_chargen_sprite::y#3 = (byte) gen_chargen_sprite::y#4 (byte) gen_chargen_sprite::y#5 
Alias (byte*) gen_chargen_sprite::chargen#2 = (byte*) gen_chargen_sprite::chargen#3 (byte*) gen_chargen_sprite::chargen#4 
Alias (byte) gen_chargen_sprite::s_gen#6 = (byte) gen_chargen_sprite::s_gen#9 
Alias (byte) gen_chargen_sprite::s_gen_cnt#5 = (byte) gen_chargen_sprite::s_gen_cnt#8 
Alias (byte) gen_chargen_sprite::bits#1 = (byte~) gen_chargen_sprite::$11 
Alias (byte*) gen_chargen_sprite::sprite#2 = (byte*~) gen_chargen_sprite::$13 
Alias (word) setFAC::w#0 = (word~) gen_sintab::$0 
Alias (byte) gen_sintab::min#2 = (byte) gen_sintab::min#3 (byte) gen_sintab::min#4 
Alias (byte) gen_sintab::length#10 = (byte) gen_sintab::length#23 (byte) gen_sintab::length#24 (byte) gen_sintab::length#22 (byte) gen_sintab::length#21 (byte) gen_sintab::length#20 (byte) gen_sintab::length#19 (byte) gen_sintab::length#18 (byte) gen_sintab::length#17 (byte) gen_sintab::length#16 (byte) gen_sintab::length#14 (byte) gen_sintab::length#12 
Alias (byte*) gen_sintab::sintab#12 = (byte*) gen_sintab::sintab#23 (byte*) gen_sintab::sintab#24 (byte*) gen_sintab::sintab#22 (byte*) gen_sintab::sintab#21 (byte*) gen_sintab::sintab#20 (byte*) gen_sintab::sintab#19 (byte*) gen_sintab::sintab#18 (byte*) gen_sintab::sintab#17 (byte*) gen_sintab::sintab#16 (byte*) gen_sintab::sintab#15 (byte*) gen_sintab::sintab#14 
Alias (byte) progress_idx#53 = (byte) progress_idx#63 (byte) progress_idx#64 (byte) progress_idx#62 (byte) progress_idx#61 (byte) progress_idx#60 (byte) progress_idx#59 (byte) progress_idx#58 (byte) progress_idx#57 (byte) progress_idx#56 (byte) progress_idx#55 (byte) progress_idx#54 
Alias (byte*) progress_cursor#53 = (byte*) progress_cursor#63 (byte*) progress_cursor#64 (byte*) progress_cursor#62 (byte*) progress_cursor#61 (byte*) progress_cursor#60 (byte*) progress_cursor#59 (byte*) progress_cursor#58 (byte*) progress_cursor#57 (byte*) progress_cursor#56 (byte*) progress_cursor#55 (byte*) progress_cursor#54 
Alias (word) setFAC::w#1 = (word~) gen_sintab::$3 
Alias (word) setFAC::w#3 = (word~) gen_sintab::$13 
Alias (byte) gen_sintab::length#11 = (byte) gen_sintab::length#6 (byte) gen_sintab::length#8 (byte) gen_sintab::length#4 (byte) gen_sintab::length#2 (byte) gen_sintab::length#15 (byte) gen_sintab::length#13 (byte) gen_sintab::length#9 (byte) gen_sintab::length#7 (byte) gen_sintab::length#5 (byte) gen_sintab::length#3 
Alias (byte*) gen_sintab::sintab#10 = (byte*) gen_sintab::sintab#11 (byte*) gen_sintab::sintab#9 (byte*) gen_sintab::sintab#8 (byte*) gen_sintab::sintab#7 (byte*) gen_sintab::sintab#6 (byte*) gen_sintab::sintab#5 (byte*) gen_sintab::sintab#4 (byte*) gen_sintab::sintab#3 (byte*) gen_sintab::sintab#2 (byte*) gen_sintab::sintab#13 
Alias (byte) gen_sintab::i#10 = (byte) gen_sintab::i#12 (byte) gen_sintab::i#2 (byte) gen_sintab::i#11 (byte) gen_sintab::i#9 (byte) gen_sintab::i#8 (byte) gen_sintab::i#7 (byte) gen_sintab::i#6 (byte) gen_sintab::i#5 (byte) gen_sintab::i#3 (byte) gen_sintab::i#4 
Alias (byte) progress_idx#34 = (byte) progress_idx#51 (byte) progress_idx#52 (byte) progress_idx#50 (byte) progress_idx#49 (byte) progress_idx#48 (byte) progress_idx#46 (byte) progress_idx#44 (byte) progress_idx#42 (byte) progress_idx#38 
Alias (byte*) progress_cursor#34 = (byte*) progress_cursor#51 (byte*) progress_cursor#52 (byte*) progress_cursor#50 (byte*) progress_cursor#49 (byte*) progress_cursor#48 (byte*) progress_cursor#46 (byte*) progress_cursor#44 (byte*) progress_cursor#42 (byte*) progress_cursor#38 
Alias (word) setFAC::w#4 = (word~) gen_sintab::$17 
Alias (word) getFAC::return#2 = (word) getFAC::return#4 
Alias (byte) progress_idx#13 = (byte) progress_idx#27 (byte) progress_idx#28 (byte) progress_idx#14 
Alias (byte*) progress_cursor#12 = (byte*) progress_cursor#26 (byte*) progress_cursor#27 (byte*) progress_cursor#13 
Alias (byte) sin_idx_x#16 = (byte) sin_idx_x#2 
Alias (byte) sin_idx_y#17 = (byte) sin_idx_y#2 
Alias (byte*) progress_cursor#14 = (byte*) progress_cursor#28 
Alias (byte) progress_idx#15 = (byte) progress_idx#29 
Alias (byte) sin_idx_x#12 = (byte) sin_idx_x#6 
Alias (byte) sin_idx_y#12 = (byte) sin_idx_y#6 
Successful SSA optimization Pass2AliasElimination
Alias (byte) anim::yidx#3 = (byte) anim::yidx#4 
Alias (byte) anim::j2#2 = (byte) anim::j2#4 (byte) anim::j2#3 
Alias (byte) anim::j#2 = (byte) anim::j#3 (byte) anim::j#5 
Alias (byte) anim::x_msb#1 = (byte) anim::x_msb#5 (byte) anim::x_msb#3 
Alias (byte) sin_idx_x#10 = (byte) sin_idx_x#18 (byte) sin_idx_x#23 
Alias (byte) sin_idx_y#10 = (byte) sin_idx_y#21 (byte) sin_idx_y#24 (byte) sin_idx_y#14 
Alias (byte) anim::xidx#5 = (byte) anim::xidx#6 
Alias (byte) sin_idx_x#11 = (byte) sin_idx_x#20 
Alias (byte) gen_chargen_sprite::s_gen#5 = (byte) gen_chargen_sprite::s_gen#7 
Alias (byte) gen_chargen_sprite::s_gen_cnt#4 = (byte) gen_chargen_sprite::s_gen_cnt#6 
Alias (byte*) gen_chargen_sprite::sprite#10 = (byte*) gen_chargen_sprite::sprite#7 
Alias (byte) gen_chargen_sprite::bits#2 = (byte) gen_chargen_sprite::bits#7 
Alias (byte) gen_chargen_sprite::x#6 = (byte) gen_chargen_sprite::x#7 
Alias (byte) gen_chargen_sprite::y#10 = (byte) gen_chargen_sprite::y#8 
Alias (byte*) gen_chargen_sprite::chargen#7 = (byte*) gen_chargen_sprite::chargen#8 
Alias (byte) gen_chargen_sprite::b#2 = (byte) gen_chargen_sprite::b#3 
Alias (byte) gen_chargen_sprite::c#2 = (byte) gen_chargen_sprite::c#4 
Alias (byte) gen_chargen_sprite::bits#3 = (byte) gen_chargen_sprite::bits#5 
Alias (byte) gen_chargen_sprite::x#2 = (byte) gen_chargen_sprite::x#4 
Alias (byte) gen_chargen_sprite::y#3 = (byte) gen_chargen_sprite::y#6 
Alias (byte*) gen_chargen_sprite::chargen#2 = (byte*) gen_chargen_sprite::chargen#5 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) progress_cursor#29 (byte*) SCREEN#0
Identical Phi Values (byte) progress_idx#30 (byte) progress_idx#35
Identical Phi Values (byte) sin_idx_x#22 (byte) sin_idx_x#16
Identical Phi Values (byte) sin_idx_y#20 (byte) sin_idx_y#17
Identical Phi Values (byte*) progress_cursor#0 (byte*) progress_cursor#20
Identical Phi Values (byte) progress_idx#0 (byte) progress_idx#21
Identical Phi Values (byte*) progress_cursor#1 (byte*) progress_cursor#0
Identical Phi Values (byte) progress_idx#1 (byte) progress_idx#0
Identical Phi Values (byte) sin_idx_x#0 (byte) sin_idx_x#11
Identical Phi Values (byte) sin_idx_y#0 (byte) sin_idx_y#11
Identical Phi Values (byte*) progress_cursor#45 (byte*) progress_cursor#29
Identical Phi Values (byte) progress_idx#45 (byte) progress_idx#30
Identical Phi Values (byte*) progress_cursor#31 (byte*) progress_cursor#45
Identical Phi Values (byte) progress_idx#32 (byte) progress_idx#45
Identical Phi Values (byte*) progress_cursor#17 (byte*) progress_cursor#22
Identical Phi Values (byte) progress_idx#18 (byte) progress_idx#23
Identical Phi Values (byte) progress_idx#19 (byte) progress_idx#13
Identical Phi Values (byte*) progress_cursor#18 (byte*) progress_cursor#12
Identical Phi Values (byte*) progress_cursor#19 (byte*) progress_cursor#22
Identical Phi Values (byte) progress_idx#20 (byte) progress_idx#23
Identical Phi Values (byte) progress_idx#21 (byte) progress_idx#13
Identical Phi Values (byte*) progress_cursor#20 (byte*) progress_cursor#12
Identical Phi Values (byte) progress_idx#24 (byte) progress_idx#34
Identical Phi Values (byte*) progress_cursor#24 (byte*) progress_cursor#34
Identical Phi Values (byte) sin_idx_x#9 (byte) sin_idx_x#13
Identical Phi Values (byte) sin_idx_y#9 (byte) sin_idx_y#13
Identical Phi Values (byte) sin_idx_x#10 (byte) sin_idx_x#9
Identical Phi Values (byte) sin_idx_y#10 (byte) sin_idx_y#9
Identical Phi Values (byte*) place_sprites::sprites_ptr#1 (byte*) place_sprites::sprites_ptr#0
Identical Phi Values (byte) gen_chargen_sprite::ch#1 (byte) gen_chargen_sprite::ch#0
Identical Phi Values (byte*) gen_chargen_sprite::sprite#12 (byte*) gen_chargen_sprite::sprite#0
Identical Phi Values (byte) gen_chargen_sprite::c#2 (byte) gen_chargen_sprite::c#3
Identical Phi Values (byte) gen_chargen_sprite::bits#3 (byte) gen_chargen_sprite::bits#2
Identical Phi Values (byte) gen_chargen_sprite::x#2 (byte) gen_chargen_sprite::x#6
Identical Phi Values (byte) gen_chargen_sprite::y#3 (byte) gen_chargen_sprite::y#10
Identical Phi Values (byte*) gen_chargen_sprite::chargen#2 (byte*) gen_chargen_sprite::chargen#7
Identical Phi Values (byte) gen_sintab::length#11 (byte) gen_sintab::length#10
Identical Phi Values (byte*) gen_sintab::sintab#10 (byte*) gen_sintab::sintab#12
Identical Phi Values (byte) progress_idx#13 (byte) progress_idx#12
Identical Phi Values (byte*) progress_cursor#12 (byte*) progress_cursor#11
Identical Phi Values (byte*) progress_cursor#14 (byte*) progress_cursor#1
Identical Phi Values (byte) progress_idx#15 (byte) progress_idx#1
Identical Phi Values (byte) sin_idx_x#12 (byte) sin_idx_x#0
Identical Phi Values (byte) sin_idx_y#12 (byte) sin_idx_y#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte) gen_chargen_sprite::y#10 (byte) gen_chargen_sprite::y#2
Identical Phi Values (byte*) gen_chargen_sprite::chargen#7 (byte*) gen_chargen_sprite::chargen#1
Identical Phi Values (byte) progress_idx#53 (byte) progress_idx#23
Identical Phi Values (byte*) progress_cursor#53 (byte*) progress_cursor#22
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) gen_chargen_sprite::chargen#1 (byte*) gen_chargen_sprite::chargen#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$1 [72] if(*((byte*) RASTER#0)!=(byte) $ff) goto main::@2
Simple Condition (bool~) init::$10 [95] if((byte) init::i#1!=rangelast(0,$27)) goto init::@1
Simple Condition (bool~) clear_screen::$1 [140] if((byte*) clear_screen::sc#1<(byte*~) clear_screen::$0) goto clear_screen::@1
Simple Condition (bool~) progress_inc::$1 [156] if((byte) progress_idx#10!=(byte) 8) goto progress_inc::@1
Simple Condition (bool~) anim::$12 [192] if((byte) anim::xidx#1<(byte) sinlen_x#0) goto anim::@5
Simple Condition (bool~) anim::$16 [198] if((byte) anim::yidx#1<(byte) sinlen_y#0) goto anim::@6
Simple Condition (bool~) anim::$19 [207] if((byte) anim::j#1!=rangelast(0,6)) goto anim::@4
Simple Condition (bool~) anim::$1 [216] if((byte) sin_idx_x#3<(byte) sinlen_x#0) goto anim::@1
Simple Condition (bool~) anim::$3 [221] if((byte) sin_idx_y#3<(byte) sinlen_y#0) goto anim::@2
Simple Condition (bool~) place_sprites::$6 [259] if((byte) place_sprites::j#1!=rangelast(0,6)) goto place_sprites::@1
Simple Condition (bool~) gen_sprites::$2 [273] if((byte) gen_sprites::i#1!=rangelast(0,6)) goto gen_sprites::@1
Simple Condition (bool~) gen_chargen_sprite::$5 [293] if((byte~) gen_chargen_sprite::$3==(byte) 0) goto gen_chargen_sprite::@3
Simple Condition (bool~) gen_chargen_sprite::$9 [305] if((byte) gen_chargen_sprite::s_gen_cnt#1!=(byte) 8) goto gen_chargen_sprite::@5
Simple Condition (bool~) gen_chargen_sprite::$10 [309] if((byte) gen_chargen_sprite::b#1!=rangelast(0,2)) goto gen_chargen_sprite::@4
Simple Condition (bool~) gen_chargen_sprite::$12 [322] if((byte) gen_chargen_sprite::x#1!=rangelast(0,7)) goto gen_chargen_sprite::@2
Simple Condition (bool~) gen_chargen_sprite::$14 [328] if((byte) gen_chargen_sprite::y#1!=rangelast(0,7)) goto gen_chargen_sprite::@1
Simple Condition (bool~) gen_sintab::$26 [409] if((byte) gen_sintab::i#1<(byte) gen_sintab::length#10) goto gen_sintab::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [60] (byte[$dd]) sintab_x#0 ← { fill( $dd, 0) }
Constant right-side identified [62] (byte[$c5]) sintab_y#0 ← { fill( $c5, 0) }
Constant right-side identified [152] (byte[]) progress_inc::progress_chars#0 ← { (byte) $20, (byte) $65, (byte) $74, (byte) $75, (byte) $61, (byte) $f6, (byte) $e7, (byte) $ea, (byte) $e0 }
Constant right-side identified [333] (byte[]) gen_sintab::f_i#0 ← { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Constant right-side identified [334] (byte[]) gen_sintab::f_min#0 ← { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Constant right-side identified [335] (byte[]) gen_sintab::f_amp#0 ← { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) PROCPORT#0 = (byte*) 1
Constant (const byte*) CHARGEN#0 = (byte*) 53248
Constant (const byte*) SPRITES_XPOS#0 = (byte*) 53248
Constant (const byte*) SPRITES_YPOS#0 = (byte*) 53249
Constant (const byte*) SPRITES_XMSB#0 = (byte*) 53264
Constant (const byte*) RASTER#0 = (byte*) 53266
Constant (const byte*) SPRITES_ENABLE#0 = (byte*) 53269
Constant (const byte*) SPRITES_EXPAND_Y#0 = (byte*) 53271
Constant (const byte*) SPRITES_EXPAND_X#0 = (byte*) 53277
Constant (const byte*) BORDERCOL#0 = (byte*) 53280
Constant (const byte*) SPRITES_COLS#0 = (byte*) 53287
Constant (const byte*) COLS#0 = (byte*) 55296
Constant (const byte*) memLo#0 = (byte*) 254
Constant (const byte*) memHi#0 = (byte*) 255
Constant (const byte) sinlen_x#0 = $dd
Constant (const byte[$dd]) sintab_x#0 = { fill( $dd, 0) }
Constant (const byte) sinlen_y#0 = $c5
Constant (const byte[$c5]) sintab_y#0 = { fill( $c5, 0) }
Constant (const byte*) sprites#0 = (byte*) 8192
Constant (const byte*) SCREEN#0 = (byte*) 1024
Constant (const byte) init::i#0 = 0
Constant (const byte) gen_sintab::min#0 = 0
Constant (const byte) gen_sintab::max#0 = $ff
Constant (const byte) gen_sintab::min#1 = $32
Constant (const byte) gen_sintab::max#1 = $d0
Constant (const byte) progress_idx#35 = 0
Constant (const byte) progress_idx#23 = 0
Constant (const byte[]) progress_inc::progress_chars#0 = { $20, $65, $74, $75, $61, $f6, $e7, $ea, $e0 }
Constant (const byte) progress_idx#11 = 0
Constant (const byte) sin_idx_x#16 = 0
Constant (const byte) sin_idx_y#17 = 0
Constant (const byte) anim::j2#0 = $c
Constant (const byte) anim::x_msb#0 = 0
Constant (const byte) anim::j#0 = 0
Constant (const word) anim::$4 = $1e
Constant (const byte) sin_idx_x#4 = 0
Constant (const byte) sin_idx_y#4 = 0
Constant (const byte) place_sprites::spr_x#0 = $3c
Constant (const byte) place_sprites::j2#0 = 0
Constant (const byte) place_sprites::col#0 = 5
Constant (const byte) place_sprites::j#0 = 0
Constant (const byte[]) gen_sprites::cml#0 = gen_sprites::$3
Constant (const byte) gen_sprites::i#0 = 0
Constant (const byte) gen_chargen_sprite::y#0 = 0
Constant (const byte) gen_chargen_sprite::s_gen#0 = 0
Constant (const byte) gen_chargen_sprite::s_gen_cnt#0 = 0
Constant (const byte) gen_chargen_sprite::x#0 = 0
Constant (const byte) gen_chargen_sprite::c#0 = 0
Constant (const byte) gen_chargen_sprite::b#0 = 0
Constant (const byte) gen_chargen_sprite::c#1 = 1
Constant (const byte) gen_chargen_sprite::s_gen#2 = 0
Constant (const byte) gen_chargen_sprite::s_gen_cnt#2 = 0
Constant (const byte[]) gen_sintab::f_i#0 = { 0, 0, 0, 0, 0 }
Constant (const byte[]) gen_sintab::f_min#0 = { 0, 0, 0, 0, 0 }
Constant (const byte[]) gen_sintab::f_amp#0 = { 0, 0, 0, 0, 0 }
Constant (const byte*) gen_sintab::f_2pi#0 = (byte*) 58085
Constant (const word) setFAC::w#2 = 2
Constant (const byte) gen_sintab::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) progress_init::line#0 = SCREEN#0
Constant (const byte*) gen_sintab::sintab#0 = sintab_x#0
Constant (const byte) gen_sintab::length#0 = sinlen_x#0
Constant (const byte*) gen_sintab::sintab#1 = sintab_y#0
Constant (const byte) gen_sintab::length#1 = sinlen_y#0
Constant (const byte*) clear_screen::sc#0 = SCREEN#0
Constant (const byte*) gen_sprites::spr#0 = sprites#0
Constant (const byte*) setMEMtoFAC::mem#0 = gen_sintab::f_min#0
Constant (const byte*) setMEMtoFAC::mem#1 = gen_sintab::f_amp#0
Constant (const byte*) divMEMbyFAC::mem#0 = gen_sintab::f_amp#0
Constant (const byte*) setMEMtoFAC::mem#2 = gen_sintab::f_amp#0
Constant (const byte*) addMEMtoFAC::mem#0 = gen_sintab::f_min#0
Constant (const byte*) setMEMtoFAC::mem#3 = gen_sintab::f_min#0
Constant (const byte*) mulFACbyMEM::mem#0 = gen_sintab::f_2pi#0
Constant (const byte*) setMEMtoFAC::mem#4 = gen_sintab::f_i#0
Constant (const byte*) divMEMbyFAC::mem#1 = gen_sintab::f_i#0
Constant (const byte*) mulFACbyMEM::mem#1 = gen_sintab::f_amp#0
Constant (const byte*) addMEMtoFAC::mem#1 = gen_sintab::f_min#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)sprites#0 in [237] (word~) place_sprites::$1 ← (word)(const byte*) sprites#0
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [78] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [93] init::i#1 ← ++ init::i#2 to ++
Resolved ranged comparison value [95] if(init::i#1!=rangelast(0,$27)) goto init::@1 to (number) $28
Resolved ranged next value [205] anim::j#1 ← ++ anim::j#2 to ++
Resolved ranged comparison value [207] if(anim::j#1!=rangelast(0,6)) goto anim::@4 to (number) 7
Resolved ranged next value [257] place_sprites::j#1 ← ++ place_sprites::j#2 to ++
Resolved ranged comparison value [259] if(place_sprites::j#1!=rangelast(0,6)) goto place_sprites::@1 to (number) 7
Resolved ranged next value [271] gen_sprites::i#1 ← ++ gen_sprites::i#2 to ++
Resolved ranged comparison value [273] if(gen_sprites::i#1!=rangelast(0,6)) goto gen_sprites::@1 to (number) 7
Resolved ranged next value [307] gen_chargen_sprite::b#1 ← ++ gen_chargen_sprite::b#2 to ++
Resolved ranged comparison value [309] if(gen_chargen_sprite::b#1!=rangelast(0,2)) goto gen_chargen_sprite::@4 to (number) 3
Resolved ranged next value [320] gen_chargen_sprite::x#1 ← ++ gen_chargen_sprite::x#6 to ++
Resolved ranged comparison value [322] if(gen_chargen_sprite::x#1!=rangelast(0,7)) goto gen_chargen_sprite::@2 to (number) 8
Resolved ranged next value [326] gen_chargen_sprite::y#1 ← ++ gen_chargen_sprite::y#2 to ++
Resolved ranged comparison value [328] if(gen_chargen_sprite::y#1!=rangelast(0,7)) goto gen_chargen_sprite::@1 to (number) 8
Simplifying expression containing zero gen_chargen_sprite::sprite#3 in [311] *((byte*) gen_chargen_sprite::sprite#3 + (byte) 0) ← (byte) gen_chargen_sprite::s_gen#1
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) progress_idx#35
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) $28 in if((byte) init::i#1!=(number) $28) goto init::@1
Adding number conversion cast (unumber) 7 in if((byte) anim::j#1!=(number) 7) goto anim::@4
Adding number conversion cast (unumber) 7 in if((byte) place_sprites::j#1!=(number) 7) goto place_sprites::@1
Adding number conversion cast (unumber) 7 in if((byte) gen_sprites::i#1!=(number) 7) goto gen_sprites::@1
Adding number conversion cast (unumber) 3 in if((byte) gen_chargen_sprite::b#1!=(number) 3) goto gen_chargen_sprite::@4
Adding number conversion cast (unumber) 8 in if((byte) gen_chargen_sprite::x#1!=(number) 8) goto gen_chargen_sprite::@2
Adding number conversion cast (unumber) 8 in if((byte) gen_chargen_sprite::y#1!=(number) 8) goto gen_chargen_sprite::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $28
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast 3
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [55] (byte*) progress_init::line#1 ← (const byte*) SCREEN#0 + (byte) $28
Constant right-side identified [63] (byte*~) clear_screen::$0 ← (const byte*) SCREEN#0 + (word) $3e8
Constant right-side identified [110] (byte*) place_sprites::sprites_ptr#0 ← (const byte*) SCREEN#0 + (word) $3f8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) progress_init::line#1 = SCREEN#0+$28
Constant (const byte*) clear_screen::$0 = SCREEN#0+$3e8
Constant (const byte*) place_sprites::sprites_ptr#0 = SCREEN#0+$3f8
Constant (const word) place_sprites::$1 = (word)sprites#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [108] (word~) place_sprites::$2 ← (const word) place_sprites::$1 / (byte) $40
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) place_sprites::$2 = place_sprites::$1/$40
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte)place_sprites::$2 in [109] (byte) place_sprites::spr_id#0 ← (byte)(const word) place_sprites::$2
Successful SSA optimization Pass2ConstantValues
Constant (const byte) place_sprites::spr_id#0 = (byte)place_sprites::$2
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to use shift [79] (byte~) anim::$6 ← (byte) anim::x_msb#2 * (byte) 2
Rewriting multiplication to use shift [130] (word~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 * (byte) 8
Rewriting multiplication to use shift [141] (byte~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 * (byte) 2
Rewriting multiplication to use shift [152] (byte) gen_chargen_sprite::bits#1 ← (byte) gen_chargen_sprite::bits#2 * (byte) 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const word) setFAC::w#2
Inlining constant with var siblings (const byte*) setMEMtoFAC::mem#0
Inlining constant with var siblings (const byte*) setMEMtoFAC::mem#1
Inlining constant with var siblings (const byte*) setMEMtoFAC::mem#2
Inlining constant with var siblings (const byte*) setMEMtoFAC::mem#3
Inlining constant with var siblings (const byte*) setMEMtoFAC::mem#4
Inlining constant with var siblings (const byte*) addMEMtoFAC::mem#0
Inlining constant with var siblings (const byte*) addMEMtoFAC::mem#1
Inlining constant with var siblings (const byte*) divMEMbyFAC::mem#0
Inlining constant with var siblings (const byte*) divMEMbyFAC::mem#1
Inlining constant with var siblings (const byte*) mulFACbyMEM::mem#0
Inlining constant with var siblings (const byte*) mulFACbyMEM::mem#1
Inlining constant with var siblings (const byte) init::i#0
Inlining constant with var siblings (const byte*) clear_screen::sc#0
Inlining constant with var siblings (const byte*) progress_init::line#0
Inlining constant with var siblings (const byte*) progress_init::line#1
Inlining constant with var siblings (const byte) anim::j2#0
Inlining constant with var siblings (const byte) anim::x_msb#0
Inlining constant with var siblings (const byte) anim::j#0
Inlining constant with var siblings (const byte) place_sprites::spr_x#0
Inlining constant with var siblings (const byte) place_sprites::j2#0
Inlining constant with var siblings (const byte) place_sprites::col#0
Inlining constant with var siblings (const byte) place_sprites::j#0
Inlining constant with var siblings (const byte) place_sprites::spr_id#0
Inlining constant with var siblings (const byte) gen_sprites::i#0
Inlining constant with var siblings (const byte*) gen_sprites::spr#0
Inlining constant with var siblings (const byte) gen_chargen_sprite::y#0
Inlining constant with var siblings (const byte) gen_chargen_sprite::s_gen#0
Inlining constant with var siblings (const byte) gen_chargen_sprite::s_gen_cnt#0
Inlining constant with var siblings (const byte) gen_chargen_sprite::x#0
Inlining constant with var siblings (const byte) gen_chargen_sprite::c#0
Inlining constant with var siblings (const byte) gen_chargen_sprite::b#0
Inlining constant with var siblings (const byte) gen_chargen_sprite::c#1
Inlining constant with var siblings (const byte) gen_chargen_sprite::s_gen#2
Inlining constant with var siblings (const byte) gen_chargen_sprite::s_gen_cnt#2
Inlining constant with var siblings (const byte) gen_sintab::min#0
Inlining constant with var siblings (const byte) gen_sintab::max#0
Inlining constant with var siblings (const byte) gen_sintab::min#1
Inlining constant with var siblings (const byte) gen_sintab::max#1
Inlining constant with var siblings (const byte) gen_sintab::i#0
Inlining constant with var siblings (const byte*) gen_sintab::sintab#0
Inlining constant with var siblings (const byte) gen_sintab::length#0
Inlining constant with var siblings (const byte*) gen_sintab::sintab#1
Inlining constant with var siblings (const byte) gen_sintab::length#1
Inlining constant with var siblings (const byte) progress_idx#23
Inlining constant with var siblings (const byte) progress_idx#11
Inlining constant with var siblings (const byte) sin_idx_x#16
Inlining constant with var siblings (const byte) sin_idx_y#17
Inlining constant with var siblings (const byte) sin_idx_x#4
Inlining constant with var siblings (const byte) sin_idx_y#4
Constant inlined setFAC::w#2 = (byte) 2
Constant inlined place_sprites::j#0 = (byte) 0
Constant inlined gen_sintab::length#1 = (const byte) sinlen_y#0
Constant inlined progress_idx#23 = (byte) 0
Constant inlined gen_chargen_sprite::c#0 = (byte) 0
Constant inlined place_sprites::spr_id#0 = (byte)(word)(const byte*) sprites#0/(byte) $40
Constant inlined divMEMbyFAC::mem#1 = (const byte[]) gen_sintab::f_i#0
Constant inlined divMEMbyFAC::mem#0 = (const byte[]) gen_sintab::f_amp#0
Constant inlined setMEMtoFAC::mem#3 = (const byte[]) gen_sintab::f_min#0
Constant inlined setMEMtoFAC::mem#2 = (const byte[]) gen_sintab::f_amp#0
Constant inlined setMEMtoFAC::mem#1 = (const byte[]) gen_sintab::f_amp#0
Constant inlined setMEMtoFAC::mem#0 = (const byte[]) gen_sintab::f_min#0
Constant inlined gen_chargen_sprite::c#1 = (byte) 1
Constant inlined setMEMtoFAC::mem#4 = (const byte[]) gen_sintab::f_i#0
Constant inlined addMEMtoFAC::mem#0 = (const byte[]) gen_sintab::f_min#0
Constant inlined addMEMtoFAC::mem#1 = (const byte[]) gen_sintab::f_min#0
Constant inlined gen_sprites::spr#0 = (const byte*) sprites#0
Constant inlined clear_screen::sc#0 = (const byte*) SCREEN#0
Constant inlined sin_idx_y#17 = (byte) 0
Constant inlined gen_chargen_sprite::x#0 = (byte) 0
Constant inlined gen_sintab::sintab#0 = (const byte[$dd]) sintab_x#0
Constant inlined place_sprites::j2#0 = (byte) 0
Constant inlined gen_sintab::sintab#1 = (const byte[$c5]) sintab_y#0
Constant inlined sin_idx_x#4 = (byte) 0
Constant inlined gen_sintab::length#0 = (const byte) sinlen_x#0
Constant inlined gen_sintab::max#0 = (byte) $ff
Constant inlined gen_sintab::max#1 = (byte) $d0
Constant inlined mulFACbyMEM::mem#0 = (const byte*) gen_sintab::f_2pi#0
Constant inlined mulFACbyMEM::mem#1 = (const byte[]) gen_sintab::f_amp#0
Constant inlined gen_sintab::min#1 = (byte) $32
Constant inlined clear_screen::$0 = (const byte*) SCREEN#0+(word) $3e8
Constant inlined init::i#0 = (byte) 0
Constant inlined gen_sintab::min#0 = (byte) 0
Constant inlined sin_idx_x#16 = (byte) 0
Constant inlined progress_init::line#0 = (const byte*) SCREEN#0
Constant inlined gen_chargen_sprite::s_gen_cnt#2 = (byte) 0
Constant inlined place_sprites::$2 = (word)(const byte*) sprites#0/(byte) $40
Constant inlined place_sprites::$1 = (word)(const byte*) sprites#0
Constant inlined gen_chargen_sprite::s_gen_cnt#0 = (byte) 0
Constant inlined progress_init::line#1 = (const byte*) SCREEN#0+(byte) $28
Constant inlined anim::j#0 = (byte) 0
Constant inlined gen_chargen_sprite::b#0 = (byte) 0
Constant inlined gen_sintab::i#0 = (byte) 0
Constant inlined gen_chargen_sprite::s_gen#2 = (byte) 0
Constant inlined place_sprites::spr_x#0 = (byte) $3c
Constant inlined gen_chargen_sprite::s_gen#0 = (byte) 0
Constant inlined anim::x_msb#0 = (byte) 0
Constant inlined gen_sprites::i#0 = (byte) 0
Constant inlined place_sprites::col#0 = (byte) 5
Constant inlined anim::$4 = (word) $1e
Constant inlined gen_chargen_sprite::y#0 = (byte) 0
Constant inlined sin_idx_y#4 = (byte) 0
Constant inlined progress_idx#11 = (byte) 0
Constant inlined gen_sprites::$3 = (const byte[]) gen_sprites::cml#0
Constant inlined anim::j2#0 = (byte) $c
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in assignment *(COLS#0+$28 + init::$9)
Consolidated array index constant in *(progress_inc::progress_chars#0+8)
Successful SSA optimization Pass2ConstantAdditionElimination
Alias (byte) init::i#2 = (byte~) init::$9 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) addMEMtoFAC::mem#2 (const byte[]) gen_sintab::f_min#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte*) prepareMEM::mem#2 = gen_sintab::f_min#0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte*) prepareMEM::mem#2
Constant inlined prepareMEM::mem#2 = (const byte[]) gen_sintab::f_min#0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@7(between main::@2 and main::@2)
Added new block during phi lifting init::@11(between init::@1 and init::@1)
Added new block during phi lifting clear_screen::@3(between clear_screen::@1 and clear_screen::@1)
Added new block during phi lifting progress_inc::@3(between progress_inc and progress_inc::@1)
Added new block during phi lifting anim::@11(between anim::@6 and anim::@4)
Added new block during phi lifting anim::@12(between anim::@4 and anim::@5)
Added new block during phi lifting anim::@13(between anim::@5 and anim::@6)
Added new block during phi lifting anim::@14(between anim::@9 and anim::@1)
Added new block during phi lifting anim::@15(between anim::@1 and anim::@2)
Added new block during phi lifting place_sprites::@3(between place_sprites::@1 and place_sprites::@1)
Added new block during phi lifting gen_sprites::@4(between gen_sprites::@3 and gen_sprites::@1)
Added new block during phi lifting gen_chargen_sprite::@11(between gen_chargen_sprite::@8 and gen_chargen_sprite::@1)
Added new block during phi lifting gen_chargen_sprite::@12(between gen_chargen_sprite::@7 and gen_chargen_sprite::@2)
Added new block during phi lifting gen_chargen_sprite::@13(between gen_chargen_sprite::@5 and gen_chargen_sprite::@4)
Added new block during phi lifting gen_chargen_sprite::@14(between gen_chargen_sprite::@4 and gen_chargen_sprite::@5)
Added new block during phi lifting gen_sintab::@24(between gen_sintab::@23 and gen_sintab::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @4
Adding NOP phi() at start of @66
Adding NOP phi() at start of @69
Adding NOP phi() at start of @71
Adding NOP phi() at start of @76
Adding NOP phi() at start of @77
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of anim::@10
Adding NOP phi() at start of anim::@3
Adding NOP phi() at start of init
Adding NOP phi() at start of init::@3
Adding NOP phi() at start of init::@2
Adding NOP phi() at start of init::@4
Adding NOP phi() at start of init::@5
Adding NOP phi() at start of init::@6
Adding NOP phi() at start of init::@7
Adding NOP phi() at start of init::@8
Adding NOP phi() at start of init::@9
Adding NOP phi() at start of init::@10
Adding NOP phi() at start of clear_screen
Adding NOP phi() at start of gen_sintab::@3
Adding NOP phi() at start of gen_sintab::@5
Adding NOP phi() at start of gen_sintab::@6
Adding NOP phi() at start of gen_sintab::@7
Adding NOP phi() at start of gen_sintab::@8
Adding NOP phi() at start of gen_sintab::@9
Adding NOP phi() at start of gen_sintab::@10
Adding NOP phi() at start of gen_sintab::@11
Adding NOP phi() at start of gen_sintab::@12
Adding NOP phi() at start of gen_sintab::@14
Adding NOP phi() at start of gen_sintab::@15
Adding NOP phi() at start of gen_sintab::@17
Adding NOP phi() at start of gen_sintab::@18
Adding NOP phi() at start of gen_sintab::@19
Adding NOP phi() at start of gen_sintab::@20
Adding NOP phi() at start of gen_sintab::@21
Adding NOP phi() at start of addMEMtoFAC
Adding NOP phi() at start of gen_sprites
Adding NOP phi() at start of gen_chargen_sprite::@10
CALL GRAPH
Calls in [] to main:6 
Calls in [main] to init:10 anim:15 
Calls in [init] to clear_screen:67 place_sprites:75 gen_sprites:77 progress_init:79 gen_sintab:81 progress_init:83 gen_sintab:85 clear_screen:87 
Calls in [gen_sintab] to setFAC:101 setARGtoFAC:103 setFAC:106 setMEMtoFAC:108 subFACfromARG:110 setMEMtoFAC:112 setFAC:114 divMEMbyFAC:116 setMEMtoFAC:118 addMEMtoFAC:120 setMEMtoFAC:122 setFAC:127 mulFACbyMEM:129 setMEMtoFAC:131 setFAC:134 divMEMbyFAC:136 sinFAC:138 mulFACbyMEM:140 addMEMtoFAC:142 getFAC:144 progress_inc:149 
Calls in [addMEMtoFAC] to prepareMEM:170 
Calls in [mulFACbyMEM] to prepareMEM:182 
Calls in [divMEMbyFAC] to prepareMEM:190 
Calls in [setFAC] to prepareMEM:196 
Calls in [setMEMtoFAC] to prepareMEM:202 
Calls in [gen_sprites] to gen_chargen_sprite:216 

Created 50 initial phi equivalence classes
Coalesced [16] sin_idx_x#27 ← sin_idx_x#11
Coalesced [17] sin_idx_y#27 ← sin_idx_y#11
Coalesced (already) [18] sin_idx_x#26 ← sin_idx_x#13
Coalesced (already) [19] sin_idx_y#26 ← sin_idx_y#13
Coalesced [23] anim::xidx#8 ← anim::xidx#0
Coalesced [24] anim::yidx#8 ← anim::yidx#0
Coalesced [36] anim::xidx#11 ← anim::xidx#2
Coalesced [41] anim::yidx#11 ← anim::yidx#2
Coalesced [57] sin_idx_y#28 ← sin_idx_y#3
Coalesced [58] sin_idx_x#28 ← sin_idx_x#3
Coalesced [59] anim::xidx#9 ← anim::xidx#5
Coalesced [60] anim::x_msb#8 ← anim::x_msb#1
Coalesced [61] anim::j2#7 ← anim::j2#1
Coalesced [62] anim::yidx#9 ← anim::yidx#6
Coalesced [63] anim::j#7 ← anim::j#1
Coalesced [64] anim::yidx#10 ← anim::yidx#1
Coalesced [65] anim::xidx#10 ← anim::xidx#1
Coalesced [90] init::i#3 ← init::i#1
Coalesced [97] clear_screen::sc#3 ← clear_screen::sc#1
Coalesced [100] setFAC::w#6 ← setFAC::w#0
Coalesced [105] setFAC::w#9 ← setFAC::w#1
Coalesced [123] progress_cursor#67 ← progress_cursor#22
Coalesced [126] setFAC::w#7 ← setFAC::w#3
Coalesced [133] setFAC::w#8 ← setFAC::w#4
Coalesced [153] gen_sintab::i#13 ← gen_sintab::i#1
Coalesced [154] progress_idx#66 ← progress_idx#12
Coalesced [155] progress_cursor#68 ← progress_cursor#11
Coalesced [160] progress_cursor#66 ← progress_cursor#10
Coalesced [164] progress_idx#65 ← progress_idx#10
Coalesced (already) [165] progress_cursor#65 ← progress_cursor#34
Coalesced [181] prepareMEM::mem#7 ← prepareMEM::mem#4
Coalesced [189] prepareMEM::mem#6 ← prepareMEM::mem#3
Coalesced [195] prepareMEM::mem#8 ← prepareMEM::mem#0
Coalesced [201] prepareMEM::mem#9 ← prepareMEM::mem#1
Coalesced [210] progress_cursor#22 ← progress_init::line#2
Coalesced [221] gen_sprites::i#4 ← gen_sprites::i#1
Coalesced [222] gen_sprites::spr#4 ← gen_sprites::spr#1
Coalesced [228] gen_chargen_sprite::sprite#13 ← gen_chargen_sprite::sprite#0
Coalesced [231] gen_chargen_sprite::bits#9 ← gen_chargen_sprite::bits#0
Coalesced [232] gen_chargen_sprite::sprite#15 ← gen_chargen_sprite::sprite#11
Coalesced [238] gen_chargen_sprite::s_gen#11 ← gen_chargen_sprite::s_gen#5
Coalesced [239] gen_chargen_sprite::s_gen_cnt#10 ← gen_chargen_sprite::s_gen_cnt#4
Coalesced [240] gen_chargen_sprite::sprite#17 ← gen_chargen_sprite::sprite#10
Coalesced [250] gen_chargen_sprite::sprite#20 ← gen_chargen_sprite::sprite#1
Coalesced [263] gen_chargen_sprite::y#11 ← gen_chargen_sprite::y#1
Coalesced [264] gen_chargen_sprite::sprite#14 ← gen_chargen_sprite::sprite#2
Coalesced [265] gen_chargen_sprite::bits#10 ← gen_chargen_sprite::bits#1
Coalesced [266] gen_chargen_sprite::s_gen#10 ← gen_chargen_sprite::s_gen#6
Coalesced [267] gen_chargen_sprite::s_gen_cnt#9 ← gen_chargen_sprite::s_gen_cnt#5
Coalesced [268] gen_chargen_sprite::sprite#16 ← gen_chargen_sprite::sprite#4
Coalesced [269] gen_chargen_sprite::x#9 ← gen_chargen_sprite::x#1
Coalesced (already) [270] gen_chargen_sprite::s_gen#12 ← gen_chargen_sprite::s_gen#6
Coalesced (already) [271] gen_chargen_sprite::s_gen_cnt#11 ← gen_chargen_sprite::s_gen_cnt#5
Coalesced [272] gen_chargen_sprite::b#5 ← gen_chargen_sprite::b#1
Coalesced (already) [273] gen_chargen_sprite::sprite#18 ← gen_chargen_sprite::sprite#4
Coalesced [274] gen_chargen_sprite::s_gen#13 ← gen_chargen_sprite::s_gen#1
Coalesced [275] gen_chargen_sprite::s_gen_cnt#12 ← gen_chargen_sprite::s_gen_cnt#1
Coalesced (already) [276] gen_chargen_sprite::sprite#19 ← gen_chargen_sprite::sprite#3
Coalesced [293] place_sprites::spr_id#3 ← place_sprites::spr_id#1
Coalesced [294] place_sprites::j#3 ← place_sprites::j#1
Coalesced [295] place_sprites::spr_x#3 ← place_sprites::spr_x#1
Coalesced [296] place_sprites::j2#4 ← place_sprites::j2#2
Coalesced [297] place_sprites::col#3 ← place_sprites::col#1
Coalesced down to 36 phi equivalence classes
Culled Empty Block (label) @4
Culled Empty Block (label) @66
Culled Empty Block (label) @69
Culled Empty Block (label) @71
Culled Empty Block (label) @77
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@7
Culled Empty Block (label) anim::@10
Culled Empty Block (label) anim::@3
Culled Empty Block (label) anim::@11
Culled Empty Block (label) anim::@13
Culled Empty Block (label) anim::@12
Culled Empty Block (label) init::@3
Culled Empty Block (label) init::@10
Culled Empty Block (label) init::@11
Culled Empty Block (label) clear_screen::@3
Culled Empty Block (label) gen_sintab::@13
Culled Empty Block (label) gen_sintab::@24
Culled Empty Block (label) progress_inc::@3
Culled Empty Block (label) gen_sprites::@4
Culled Empty Block (label) gen_chargen_sprite::@11
Culled Empty Block (label) gen_chargen_sprite::@12
Culled Empty Block (label) gen_chargen_sprite::@13
Culled Empty Block (label) gen_chargen_sprite::@14
Culled Empty Block (label) place_sprites::@3
Renumbering block @76 to @1
Renumbering block main::@2 to main::@1
Renumbering block main::@3 to main::@2
Renumbering block init::@4 to init::@3
Renumbering block init::@5 to init::@4
Renumbering block init::@6 to init::@5
Renumbering block init::@7 to init::@6
Renumbering block init::@8 to init::@7
Renumbering block init::@9 to init::@8
Renumbering block anim::@4 to anim::@3
Renumbering block anim::@5 to anim::@4
Renumbering block anim::@6 to anim::@5
Renumbering block anim::@7 to anim::@6
Renumbering block anim::@8 to anim::@7
Renumbering block anim::@9 to anim::@8
Renumbering block anim::@14 to anim::@9
Renumbering block anim::@15 to anim::@10
Renumbering block gen_sprites::@3 to gen_sprites::@2
Renumbering block gen_sintab::@3 to gen_sintab::@2
Renumbering block gen_sintab::@4 to gen_sintab::@3
Renumbering block gen_sintab::@5 to gen_sintab::@4
Renumbering block gen_sintab::@6 to gen_sintab::@5
Renumbering block gen_sintab::@7 to gen_sintab::@6
Renumbering block gen_sintab::@8 to gen_sintab::@7
Renumbering block gen_sintab::@9 to gen_sintab::@8
Renumbering block gen_sintab::@10 to gen_sintab::@9
Renumbering block gen_sintab::@11 to gen_sintab::@10
Renumbering block gen_sintab::@12 to gen_sintab::@11
Renumbering block gen_sintab::@14 to gen_sintab::@12
Renumbering block gen_sintab::@15 to gen_sintab::@13
Renumbering block gen_sintab::@16 to gen_sintab::@14
Renumbering block gen_sintab::@17 to gen_sintab::@15
Renumbering block gen_sintab::@18 to gen_sintab::@16
Renumbering block gen_sintab::@19 to gen_sintab::@17
Renumbering block gen_sintab::@20 to gen_sintab::@18
Renumbering block gen_sintab::@21 to gen_sintab::@19
Renumbering block gen_sintab::@22 to gen_sintab::@20
Renumbering block gen_sintab::@23 to gen_sintab::@21
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of anim::@9
Adding NOP phi() at start of anim::@10
Adding NOP phi() at start of init
Adding NOP phi() at start of init::@2
Adding NOP phi() at start of init::@3
Adding NOP phi() at start of init::@4
Adding NOP phi() at start of init::@5
Adding NOP phi() at start of init::@6
Adding NOP phi() at start of init::@7
Adding NOP phi() at start of init::@8
Adding NOP phi() at start of clear_screen
Adding NOP phi() at start of gen_sintab::@2
Adding NOP phi() at start of gen_sintab::@4
Adding NOP phi() at start of gen_sintab::@5
Adding NOP phi() at start of gen_sintab::@6
Adding NOP phi() at start of gen_sintab::@7
Adding NOP phi() at start of gen_sintab::@8
Adding NOP phi() at start of gen_sintab::@9
Adding NOP phi() at start of gen_sintab::@10
Adding NOP phi() at start of gen_sintab::@11
Adding NOP phi() at start of gen_sintab::@12
Adding NOP phi() at start of gen_sintab::@13
Adding NOP phi() at start of gen_sintab::@15
Adding NOP phi() at start of gen_sintab::@16
Adding NOP phi() at start of gen_sintab::@17
Adding NOP phi() at start of gen_sintab::@18
Adding NOP phi() at start of gen_sintab::@19
Adding NOP phi() at start of addMEMtoFAC
Adding NOP phi() at start of gen_sprites
Adding NOP phi() at start of gen_chargen_sprite::@10

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call init 
  to:main::@1
main::@1: scope:[main]  from main main::@1 main::@2
  [6] (byte) sin_idx_y#13 ← phi( main::@1/(byte) sin_idx_y#13 main/(byte) 0 main::@2/(byte) sin_idx_y#11 )
  [6] (byte) sin_idx_x#13 ← phi( main::@1/(byte) sin_idx_x#13 main/(byte) 0 main::@2/(byte) sin_idx_x#11 )
  [7] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call anim 
  to:main::@1
anim: scope:[anim]  from main::@2
  [10] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0)
  [11] (byte) anim::xidx#0 ← (byte) sin_idx_x#13
  [12] (byte) anim::yidx#0 ← (byte) sin_idx_y#13
  to:anim::@3
anim::@3: scope:[anim]  from anim anim::@5
  [13] (byte) anim::j#2 ← phi( anim/(byte) 0 anim::@5/(byte) anim::j#1 )
  [13] (byte) anim::yidx#3 ← phi( anim/(byte) anim::yidx#0 anim::@5/(byte) anim::yidx#6 )
  [13] (byte) anim::j2#2 ← phi( anim/(byte) $c anim::@5/(byte) anim::j2#1 )
  [13] (byte) anim::x_msb#2 ← phi( anim/(byte) 0 anim::@5/(byte) anim::x_msb#1 )
  [13] (byte) anim::xidx#3 ← phi( anim/(byte) anim::xidx#0 anim::@5/(byte) anim::xidx#5 )
  [14] (word) anim::x#0 ← (word) $1e + *((const byte[$dd]) sintab_x#0 + (byte) anim::xidx#3)
  [15] (byte~) anim::$6 ← (byte) anim::x_msb#2 << (byte) 1
  [16] (byte~) anim::$7 ← > (word) anim::x#0
  [17] (byte) anim::x_msb#1 ← (byte~) anim::$6 | (byte~) anim::$7
  [18] (byte~) anim::$9 ← < (word) anim::x#0
  [19] *((const byte*) SPRITES_XPOS#0 + (byte) anim::j2#2) ← (byte~) anim::$9
  [20] *((const byte*) SPRITES_YPOS#0 + (byte) anim::j2#2) ← *((const byte[$c5]) sintab_y#0 + (byte) anim::yidx#3)
  [21] (byte) anim::xidx#1 ← (byte) anim::xidx#3 + (byte) $a
  [22] if((byte) anim::xidx#1<(const byte) sinlen_x#0) goto anim::@4
  to:anim::@6
anim::@6: scope:[anim]  from anim::@3
  [23] (byte) anim::xidx#2 ← (byte) anim::xidx#1 - (const byte) sinlen_x#0
  to:anim::@4
anim::@4: scope:[anim]  from anim::@3 anim::@6
  [24] (byte) anim::xidx#5 ← phi( anim::@3/(byte) anim::xidx#1 anim::@6/(byte) anim::xidx#2 )
  [25] (byte) anim::yidx#1 ← (byte) anim::yidx#3 + (byte) 8
  [26] if((byte) anim::yidx#1<(const byte) sinlen_y#0) goto anim::@5
  to:anim::@7
anim::@7: scope:[anim]  from anim::@4
  [27] (byte) anim::yidx#2 ← (byte) anim::yidx#1 - (const byte) sinlen_y#0
  to:anim::@5
anim::@5: scope:[anim]  from anim::@4 anim::@7
  [28] (byte) anim::yidx#6 ← phi( anim::@4/(byte) anim::yidx#1 anim::@7/(byte) anim::yidx#2 )
  [29] (byte) anim::j2#1 ← (byte) anim::j2#2 - (byte) 2
  [30] (byte) anim::j#1 ← ++ (byte) anim::j#2
  [31] if((byte) anim::j#1!=(byte) 7) goto anim::@3
  to:anim::@8
anim::@8: scope:[anim]  from anim::@5
  [32] *((const byte*) SPRITES_XMSB#0) ← (byte) anim::x_msb#1
  [33] (byte) sin_idx_x#3 ← ++ (byte) sin_idx_x#13
  [34] if((byte) sin_idx_x#3<(const byte) sinlen_x#0) goto anim::@9
  to:anim::@1
anim::@9: scope:[anim]  from anim::@8
  [35] phi()
  to:anim::@1
anim::@1: scope:[anim]  from anim::@8 anim::@9
  [36] (byte) sin_idx_x#11 ← phi( anim::@8/(byte) 0 anim::@9/(byte) sin_idx_x#3 )
  [37] (byte) sin_idx_y#3 ← ++ (byte) sin_idx_y#13
  [38] if((byte) sin_idx_y#3<(const byte) sinlen_y#0) goto anim::@10
  to:anim::@2
anim::@10: scope:[anim]  from anim::@1
  [39] phi()
  to:anim::@2
anim::@2: scope:[anim]  from anim::@1 anim::@10
  [40] (byte) sin_idx_y#11 ← phi( anim::@10/(byte) sin_idx_y#3 anim::@1/(byte) 0 )
  [41] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0)
  to:anim::@return
anim::@return: scope:[anim]  from anim::@2
  [42] return 
  to:@return
init: scope:[init]  from main
  [43] phi()
  [44] call clear_screen 
  to:init::@1
init::@1: scope:[init]  from init init::@1
  [45] (byte) init::i#2 ← phi( init::@1/(byte) init::i#1 init/(byte) 0 )
  [46] *((const byte*) COLS#0 + (byte) init::i#2) ← (byte) 0
  [47] *((const byte*) COLS#0+(byte) $28 + (byte) init::i#2) ← (byte) $b
  [48] (byte) init::i#1 ← ++ (byte) init::i#2
  [49] if((byte) init::i#1!=(byte) $28) goto init::@1
  to:init::@2
init::@2: scope:[init]  from init::@1
  [50] phi()
  [51] call place_sprites 
  to:init::@3
init::@3: scope:[init]  from init::@2
  [52] phi()
  [53] call gen_sprites 
  to:init::@4
init::@4: scope:[init]  from init::@3
  [54] phi()
  [55] call progress_init 
  to:init::@5
init::@5: scope:[init]  from init::@4
  [56] phi()
  [57] call gen_sintab 
  to:init::@6
init::@6: scope:[init]  from init::@5
  [58] phi()
  [59] call progress_init 
  to:init::@7
init::@7: scope:[init]  from init::@6
  [60] phi()
  [61] call gen_sintab 
  to:init::@8
init::@8: scope:[init]  from init::@7
  [62] phi()
  [63] call clear_screen 
  to:init::@return
init::@return: scope:[init]  from init::@8
  [64] return 
  to:@return
clear_screen: scope:[clear_screen]  from init init::@8
  [65] phi()
  to:clear_screen::@1
clear_screen::@1: scope:[clear_screen]  from clear_screen clear_screen::@1
  [66] (byte*) clear_screen::sc#2 ← phi( clear_screen/(const byte*) SCREEN#0 clear_screen::@1/(byte*) clear_screen::sc#1 )
  [67] *((byte*) clear_screen::sc#2) ← (byte) ' '
  [68] (byte*) clear_screen::sc#1 ← ++ (byte*) clear_screen::sc#2
  [69] if((byte*) clear_screen::sc#1<(const byte*) SCREEN#0+(word) $3e8) goto clear_screen::@1
  to:clear_screen::@return
clear_screen::@return: scope:[clear_screen]  from clear_screen::@1
  [70] return 
  to:@return
gen_sintab: scope:[gen_sintab]  from init::@5 init::@7
  [71] (byte*) gen_sintab::sintab#12 ← phi( init::@5/(const byte[$dd]) sintab_x#0 init::@7/(const byte[$c5]) sintab_y#0 )
  [71] (byte) gen_sintab::length#10 ← phi( init::@5/(const byte) sinlen_x#0 init::@7/(const byte) sinlen_y#0 )
  [71] (byte) gen_sintab::min#2 ← phi( init::@5/(byte) 0 init::@7/(byte) $32 )
  [71] (byte) gen_sintab::max#2 ← phi( init::@5/(byte) $ff init::@7/(byte) $d0 )
  [72] (word) setFAC::w#0 ← (word)(byte) gen_sintab::max#2
  [73] call setFAC 
  to:gen_sintab::@2
gen_sintab::@2: scope:[gen_sintab]  from gen_sintab
  [74] phi()
  [75] call setARGtoFAC 
  to:gen_sintab::@3
gen_sintab::@3: scope:[gen_sintab]  from gen_sintab::@2
  [76] (word) setFAC::w#1 ← (word)(byte) gen_sintab::min#2
  [77] call setFAC 
  to:gen_sintab::@4
gen_sintab::@4: scope:[gen_sintab]  from gen_sintab::@3
  [78] phi()
  [79] call setMEMtoFAC 
  to:gen_sintab::@5
gen_sintab::@5: scope:[gen_sintab]  from gen_sintab::@4
  [80] phi()
  [81] call subFACfromARG 
  to:gen_sintab::@6
gen_sintab::@6: scope:[gen_sintab]  from gen_sintab::@5
  [82] phi()
  [83] call setMEMtoFAC 
  to:gen_sintab::@7
gen_sintab::@7: scope:[gen_sintab]  from gen_sintab::@6
  [84] phi()
  [85] call setFAC 
  to:gen_sintab::@8
gen_sintab::@8: scope:[gen_sintab]  from gen_sintab::@7
  [86] phi()
  [87] call divMEMbyFAC 
  to:gen_sintab::@9
gen_sintab::@9: scope:[gen_sintab]  from gen_sintab::@8
  [88] phi()
  [89] call setMEMtoFAC 
  to:gen_sintab::@10
gen_sintab::@10: scope:[gen_sintab]  from gen_sintab::@9
  [90] phi()
  [91] call addMEMtoFAC 
  to:gen_sintab::@11
gen_sintab::@11: scope:[gen_sintab]  from gen_sintab::@10
  [92] phi()
  [93] call setMEMtoFAC 
  to:gen_sintab::@1
gen_sintab::@1: scope:[gen_sintab]  from gen_sintab::@11 gen_sintab::@21
  [94] (byte*) progress_cursor#34 ← phi( gen_sintab::@11/(byte*) progress_init::line#2 gen_sintab::@21/(byte*) progress_cursor#11 )
  [94] (byte) progress_idx#34 ← phi( gen_sintab::@11/(byte) 0 gen_sintab::@21/(byte) progress_idx#12 )
  [94] (byte) gen_sintab::i#10 ← phi( gen_sintab::@11/(byte) 0 gen_sintab::@21/(byte) gen_sintab::i#1 )
  [95] (word) setFAC::w#3 ← (word)(byte) gen_sintab::i#10
  [96] call setFAC 
  to:gen_sintab::@12
gen_sintab::@12: scope:[gen_sintab]  from gen_sintab::@1
  [97] phi()
  [98] call mulFACbyMEM 
  to:gen_sintab::@13
gen_sintab::@13: scope:[gen_sintab]  from gen_sintab::@12
  [99] phi()
  [100] call setMEMtoFAC 
  to:gen_sintab::@14
gen_sintab::@14: scope:[gen_sintab]  from gen_sintab::@13
  [101] (word) setFAC::w#4 ← (word)(byte) gen_sintab::length#10
  [102] call setFAC 
  to:gen_sintab::@15
gen_sintab::@15: scope:[gen_sintab]  from gen_sintab::@14
  [103] phi()
  [104] call divMEMbyFAC 
  to:gen_sintab::@16
gen_sintab::@16: scope:[gen_sintab]  from gen_sintab::@15
  [105] phi()
  [106] call sinFAC 
  to:gen_sintab::@17
gen_sintab::@17: scope:[gen_sintab]  from gen_sintab::@16
  [107] phi()
  [108] call mulFACbyMEM 
  to:gen_sintab::@18
gen_sintab::@18: scope:[gen_sintab]  from gen_sintab::@17
  [109] phi()
  [110] call addMEMtoFAC 
  to:gen_sintab::@19
gen_sintab::@19: scope:[gen_sintab]  from gen_sintab::@18
  [111] phi()
  [112] call getFAC 
  [113] (word) getFAC::return#2 ← (word) getFAC::return#0
  to:gen_sintab::@20
gen_sintab::@20: scope:[gen_sintab]  from gen_sintab::@19
  [114] (word~) gen_sintab::$23 ← (word) getFAC::return#2
  [115] (byte~) gen_sintab::$24 ← (byte)(word~) gen_sintab::$23
  [116] *((byte*) gen_sintab::sintab#12 + (byte) gen_sintab::i#10) ← (byte~) gen_sintab::$24
  [117] call progress_inc 
  to:gen_sintab::@21
gen_sintab::@21: scope:[gen_sintab]  from gen_sintab::@20
  [118] (byte) gen_sintab::i#1 ← ++ (byte) gen_sintab::i#10
  [119] if((byte) gen_sintab::i#1<(byte) gen_sintab::length#10) goto gen_sintab::@1
  to:gen_sintab::@return
gen_sintab::@return: scope:[gen_sintab]  from gen_sintab::@21
  [120] return 
  to:@return
progress_inc: scope:[progress_inc]  from gen_sintab::@20
  [121] (byte) progress_idx#10 ← ++ (byte) progress_idx#34
  [122] if((byte) progress_idx#10!=(byte) 8) goto progress_inc::@1
  to:progress_inc::@2
progress_inc::@2: scope:[progress_inc]  from progress_inc
  [123] *((byte*) progress_cursor#34) ← *((const byte[]) progress_inc::progress_chars#0+(byte) 8)
  [124] (byte*) progress_cursor#10 ← ++ (byte*) progress_cursor#34
  to:progress_inc::@1
progress_inc::@1: scope:[progress_inc]  from progress_inc progress_inc::@2
  [125] (byte*) progress_cursor#11 ← phi( progress_inc/(byte*) progress_cursor#34 progress_inc::@2/(byte*) progress_cursor#10 )
  [125] (byte) progress_idx#12 ← phi( progress_inc/(byte) progress_idx#10 progress_inc::@2/(byte) 0 )
  [126] *((byte*) progress_cursor#11) ← *((const byte[]) progress_inc::progress_chars#0 + (byte) progress_idx#12)
  to:progress_inc::@return
progress_inc::@return: scope:[progress_inc]  from progress_inc::@1
  [127] return 
  to:@return
getFAC: scope:[getFAC]  from gen_sintab::@19
  asm { jsr$b1aa sty$fe sta$ff  }
  [129] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0)
  to:getFAC::@return
getFAC::@return: scope:[getFAC]  from getFAC
  [130] return 
  to:@return
addMEMtoFAC: scope:[addMEMtoFAC]  from gen_sintab::@10 gen_sintab::@18
  [131] phi()
  [132] call prepareMEM 
  to:addMEMtoFAC::@1
addMEMtoFAC::@1: scope:[addMEMtoFAC]  from addMEMtoFAC
  asm { lda$fe ldy$ff jsr$b867  }
  to:addMEMtoFAC::@return
addMEMtoFAC::@return: scope:[addMEMtoFAC]  from addMEMtoFAC::@1
  [134] return 
  to:@return
prepareMEM: scope:[prepareMEM]  from addMEMtoFAC divMEMbyFAC mulFACbyMEM setFAC setMEMtoFAC
  [135] (byte*) prepareMEM::mem#5 ← phi( addMEMtoFAC/(const byte[]) gen_sintab::f_min#0 divMEMbyFAC/(byte*) prepareMEM::mem#3 mulFACbyMEM/(byte*) prepareMEM::mem#4 setFAC/(byte*) prepareMEM::mem#0 setMEMtoFAC/(byte*) prepareMEM::mem#1 )
  [136] (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem#5
  [137] *((const byte*) memLo#0) ← (byte~) prepareMEM::$0
  [138] (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem#5
  [139] *((const byte*) memHi#0) ← (byte~) prepareMEM::$1
  to:prepareMEM::@return
prepareMEM::@return: scope:[prepareMEM]  from prepareMEM
  [140] return 
  to:@return
mulFACbyMEM: scope:[mulFACbyMEM]  from gen_sintab::@12 gen_sintab::@17
  [141] (byte*) mulFACbyMEM::mem#2 ← phi( gen_sintab::@12/(const byte*) gen_sintab::f_2pi#0 gen_sintab::@17/(const byte[]) gen_sintab::f_amp#0 )
  [142] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2
  [143] call prepareMEM 
  to:mulFACbyMEM::@1
mulFACbyMEM::@1: scope:[mulFACbyMEM]  from mulFACbyMEM
  asm { lda$fe ldy$ff jsr$ba28  }
  to:mulFACbyMEM::@return
mulFACbyMEM::@return: scope:[mulFACbyMEM]  from mulFACbyMEM::@1
  [145] return 
  to:@return
sinFAC: scope:[sinFAC]  from gen_sintab::@16
  asm { jsr$e26b  }
  to:sinFAC::@return
sinFAC::@return: scope:[sinFAC]  from sinFAC
  [147] return 
  to:@return
divMEMbyFAC: scope:[divMEMbyFAC]  from gen_sintab::@15 gen_sintab::@8
  [148] (byte*) divMEMbyFAC::mem#2 ← phi( gen_sintab::@15/(const byte[]) gen_sintab::f_i#0 gen_sintab::@8/(const byte[]) gen_sintab::f_amp#0 )
  [149] (byte*) prepareMEM::mem#3 ← (byte*) divMEMbyFAC::mem#2
  [150] call prepareMEM 
  to:divMEMbyFAC::@1
divMEMbyFAC::@1: scope:[divMEMbyFAC]  from divMEMbyFAC
  asm { lda$fe ldy$ff jsr$bb0f  }
  to:divMEMbyFAC::@return
divMEMbyFAC::@return: scope:[divMEMbyFAC]  from divMEMbyFAC::@1
  [152] return 
  to:@return
setFAC: scope:[setFAC]  from gen_sintab gen_sintab::@1 gen_sintab::@14 gen_sintab::@3 gen_sintab::@7
  [153] (word) setFAC::w#5 ← phi( gen_sintab/(word) setFAC::w#0 gen_sintab::@1/(word) setFAC::w#3 gen_sintab::@14/(word) setFAC::w#4 gen_sintab::@3/(word) setFAC::w#1 gen_sintab::@7/(byte) 2 )
  [154] (byte*) prepareMEM::mem#0 ← (byte*)(word) setFAC::w#5
  [155] call prepareMEM 
  to:setFAC::@1
setFAC::@1: scope:[setFAC]  from setFAC
  asm { ldy$fe lda$ff jsr$b391  }
  to:setFAC::@return
setFAC::@return: scope:[setFAC]  from setFAC::@1
  [157] return 
  to:@return
setMEMtoFAC: scope:[setMEMtoFAC]  from gen_sintab::@11 gen_sintab::@13 gen_sintab::@4 gen_sintab::@6 gen_sintab::@9
  [158] (byte*) setMEMtoFAC::mem#5 ← phi( gen_sintab::@9/(const byte[]) gen_sintab::f_amp#0 gen_sintab::@11/(const byte[]) gen_sintab::f_min#0 gen_sintab::@13/(const byte[]) gen_sintab::f_i#0 gen_sintab::@4/(const byte[]) gen_sintab::f_min#0 gen_sintab::@6/(const byte[]) gen_sintab::f_amp#0 )
  [159] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#5
  [160] call prepareMEM 
  to:setMEMtoFAC::@1
setMEMtoFAC::@1: scope:[setMEMtoFAC]  from setMEMtoFAC
  asm { ldx$fe ldy$ff jsr$bbd4  }
  to:setMEMtoFAC::@return
setMEMtoFAC::@return: scope:[setMEMtoFAC]  from setMEMtoFAC::@1
  [162] return 
  to:@return
subFACfromARG: scope:[subFACfromARG]  from gen_sintab::@5
  asm { jsr$b853  }
  to:subFACfromARG::@return
subFACfromARG::@return: scope:[subFACfromARG]  from subFACfromARG
  [164] return 
  to:@return
setARGtoFAC: scope:[setARGtoFAC]  from gen_sintab::@2
  asm { jsr$bc0f  }
  to:setARGtoFAC::@return
setARGtoFAC::@return: scope:[setARGtoFAC]  from setARGtoFAC
  [166] return 
  to:@return
progress_init: scope:[progress_init]  from init::@4 init::@6
  [167] (byte*) progress_init::line#2 ← phi( init::@4/(const byte*) SCREEN#0 init::@6/(const byte*) SCREEN#0+(byte) $28 )
  to:progress_init::@return
progress_init::@return: scope:[progress_init]  from progress_init
  [168] return 
  to:@return
gen_sprites: scope:[gen_sprites]  from init::@3
  [169] phi()
  to:gen_sprites::@1
gen_sprites::@1: scope:[gen_sprites]  from gen_sprites gen_sprites::@2
  [170] (byte*) gen_sprites::spr#2 ← phi( gen_sprites/(const byte*) sprites#0 gen_sprites::@2/(byte*) gen_sprites::spr#1 )
  [170] (byte) gen_sprites::i#2 ← phi( gen_sprites/(byte) 0 gen_sprites::@2/(byte) gen_sprites::i#1 )
  [171] (byte) gen_chargen_sprite::ch#0 ← *((const byte[]) gen_sprites::cml#0 + (byte) gen_sprites::i#2)
  [172] (byte*) gen_chargen_sprite::sprite#0 ← (byte*) gen_sprites::spr#2
  [173] call gen_chargen_sprite 
  to:gen_sprites::@2
gen_sprites::@2: scope:[gen_sprites]  from gen_sprites::@1
  [174] (byte*) gen_sprites::spr#1 ← (byte*) gen_sprites::spr#2 + (byte) $40
  [175] (byte) gen_sprites::i#1 ← ++ (byte) gen_sprites::i#2
  [176] if((byte) gen_sprites::i#1!=(byte) 7) goto gen_sprites::@1
  to:gen_sprites::@return
gen_sprites::@return: scope:[gen_sprites]  from gen_sprites::@2
  [177] return 
  to:@return
gen_chargen_sprite: scope:[gen_chargen_sprite]  from gen_sprites::@1
  [178] (word~) gen_chargen_sprite::$0 ← (word)(byte) gen_chargen_sprite::ch#0
  [179] (word~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 << (byte) 3
  [180] (byte*) gen_chargen_sprite::chargen#0 ← (const byte*) CHARGEN#0 + (word~) gen_chargen_sprite::$1
  asm { sei  }
  [182] *((const byte*) PROCPORT#0) ← (byte) $32
  to:gen_chargen_sprite::@1
gen_chargen_sprite::@1: scope:[gen_chargen_sprite]  from gen_chargen_sprite gen_chargen_sprite::@8
  [183] (byte*) gen_chargen_sprite::sprite#11 ← phi( gen_chargen_sprite/(byte*) gen_chargen_sprite::sprite#0 gen_chargen_sprite::@8/(byte*) gen_chargen_sprite::sprite#2 )
  [183] (byte) gen_chargen_sprite::y#2 ← phi( gen_chargen_sprite/(byte) 0 gen_chargen_sprite::@8/(byte) gen_chargen_sprite::y#1 )
  [184] (byte) gen_chargen_sprite::bits#0 ← *((byte*) gen_chargen_sprite::chargen#0 + (byte) gen_chargen_sprite::y#2)
  to:gen_chargen_sprite::@2
gen_chargen_sprite::@2: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@1 gen_chargen_sprite::@7
  [185] (byte) gen_chargen_sprite::x#6 ← phi( gen_chargen_sprite::@1/(byte) 0 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::x#1 )
  [185] (byte*) gen_chargen_sprite::sprite#10 ← phi( gen_chargen_sprite::@1/(byte*) gen_chargen_sprite::sprite#11 gen_chargen_sprite::@7/(byte*) gen_chargen_sprite::sprite#4 )
  [185] (byte) gen_chargen_sprite::s_gen_cnt#4 ← phi( gen_chargen_sprite::@1/(byte) 0 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::s_gen_cnt#5 )
  [185] (byte) gen_chargen_sprite::s_gen#5 ← phi( gen_chargen_sprite::@1/(byte) 0 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::s_gen#6 )
  [185] (byte) gen_chargen_sprite::bits#2 ← phi( gen_chargen_sprite::@1/(byte) gen_chargen_sprite::bits#0 gen_chargen_sprite::@7/(byte) gen_chargen_sprite::bits#1 )
  [186] (byte~) gen_chargen_sprite::$3 ← (byte) gen_chargen_sprite::bits#2 & (byte) $80
  [187] if((byte~) gen_chargen_sprite::$3==(byte) 0) goto gen_chargen_sprite::@3
  to:gen_chargen_sprite::@10
gen_chargen_sprite::@10: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@2
  [188] phi()
  to:gen_chargen_sprite::@3
gen_chargen_sprite::@3: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@10 gen_chargen_sprite::@2
  [189] (byte) gen_chargen_sprite::c#3 ← phi( gen_chargen_sprite::@10/(byte) 1 gen_chargen_sprite::@2/(byte) 0 )
  to:gen_chargen_sprite::@4
gen_chargen_sprite::@4: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@3 gen_chargen_sprite::@5
  [190] (byte*) gen_chargen_sprite::sprite#3 ← phi( gen_chargen_sprite::@3/(byte*) gen_chargen_sprite::sprite#10 gen_chargen_sprite::@5/(byte*) gen_chargen_sprite::sprite#4 )
  [190] (byte) gen_chargen_sprite::b#2 ← phi( gen_chargen_sprite::@3/(byte) 0 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::b#1 )
  [190] (byte) gen_chargen_sprite::s_gen_cnt#3 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::s_gen_cnt#5 )
  [190] (byte) gen_chargen_sprite::s_gen#3 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::s_gen#5 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::s_gen#6 )
  [191] (byte~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 << (byte) 1
  [192] (byte) gen_chargen_sprite::s_gen#1 ← (byte~) gen_chargen_sprite::$6 | (byte) gen_chargen_sprite::c#3
  [193] (byte) gen_chargen_sprite::s_gen_cnt#1 ← ++ (byte) gen_chargen_sprite::s_gen_cnt#3
  [194] if((byte) gen_chargen_sprite::s_gen_cnt#1!=(byte) 8) goto gen_chargen_sprite::@5
  to:gen_chargen_sprite::@6
gen_chargen_sprite::@6: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@4
  [195] *((byte*) gen_chargen_sprite::sprite#3) ← (byte) gen_chargen_sprite::s_gen#1
  [196] *((byte*) gen_chargen_sprite::sprite#3 + (byte) 3) ← (byte) gen_chargen_sprite::s_gen#1
  [197] *((byte*) gen_chargen_sprite::sprite#3 + (byte) 6) ← (byte) gen_chargen_sprite::s_gen#1
  [198] (byte*) gen_chargen_sprite::sprite#1 ← ++ (byte*) gen_chargen_sprite::sprite#3
  to:gen_chargen_sprite::@5
gen_chargen_sprite::@5: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@4 gen_chargen_sprite::@6
  [199] (byte*) gen_chargen_sprite::sprite#4 ← phi( gen_chargen_sprite::@4/(byte*) gen_chargen_sprite::sprite#3 gen_chargen_sprite::@6/(byte*) gen_chargen_sprite::sprite#1 )
  [199] (byte) gen_chargen_sprite::s_gen_cnt#5 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::s_gen_cnt#1 gen_chargen_sprite::@6/(byte) 0 )
  [199] (byte) gen_chargen_sprite::s_gen#6 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::s_gen#1 gen_chargen_sprite::@6/(byte) 0 )
  [200] (byte) gen_chargen_sprite::b#1 ← ++ (byte) gen_chargen_sprite::b#2
  [201] if((byte) gen_chargen_sprite::b#1!=(byte) 3) goto gen_chargen_sprite::@4
  to:gen_chargen_sprite::@7
gen_chargen_sprite::@7: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@5
  [202] (byte) gen_chargen_sprite::bits#1 ← (byte) gen_chargen_sprite::bits#2 << (byte) 1
  [203] (byte) gen_chargen_sprite::x#1 ← ++ (byte) gen_chargen_sprite::x#6
  [204] if((byte) gen_chargen_sprite::x#1!=(byte) 8) goto gen_chargen_sprite::@2
  to:gen_chargen_sprite::@8
gen_chargen_sprite::@8: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@7
  [205] (byte*) gen_chargen_sprite::sprite#2 ← (byte*) gen_chargen_sprite::sprite#4 + (byte) 6
  [206] (byte) gen_chargen_sprite::y#1 ← ++ (byte) gen_chargen_sprite::y#2
  [207] if((byte) gen_chargen_sprite::y#1!=(byte) 8) goto gen_chargen_sprite::@1
  to:gen_chargen_sprite::@9
gen_chargen_sprite::@9: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@8
  [208] *((const byte*) PROCPORT#0) ← (byte) $37
  asm { cli  }
  to:gen_chargen_sprite::@return
gen_chargen_sprite::@return: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@9
  [210] return 
  to:@return
place_sprites: scope:[place_sprites]  from init::@2
  [211] *((const byte*) SPRITES_ENABLE#0) ← (byte) $7f
  [212] *((const byte*) SPRITES_EXPAND_X#0) ← (byte) $7f
  [213] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte) $7f
  to:place_sprites::@1
place_sprites::@1: scope:[place_sprites]  from place_sprites place_sprites::@1
  [214] (byte) place_sprites::col#2 ← phi( place_sprites/(byte) 5 place_sprites::@1/(byte) place_sprites::col#1 )
  [214] (byte) place_sprites::j2#3 ← phi( place_sprites/(byte) 0 place_sprites::@1/(byte) place_sprites::j2#2 )
  [214] (byte) place_sprites::spr_x#2 ← phi( place_sprites/(byte) $3c place_sprites::@1/(byte) place_sprites::spr_x#1 )
  [214] (byte) place_sprites::j#2 ← phi( place_sprites/(byte) 0 place_sprites::@1/(byte) place_sprites::j#1 )
  [214] (byte) place_sprites::spr_id#2 ← phi( place_sprites/(byte)(word)(const byte*) sprites#0/(byte) $40 place_sprites::@1/(byte) place_sprites::spr_id#1 )
  [215] *((const byte*) place_sprites::sprites_ptr#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::spr_id#2
  [216] (byte) place_sprites::spr_id#1 ← ++ (byte) place_sprites::spr_id#2
  [217] *((const byte*) SPRITES_XPOS#0 + (byte) place_sprites::j2#3) ← (byte) place_sprites::spr_x#2
  [218] *((const byte*) SPRITES_YPOS#0 + (byte) place_sprites::j2#3) ← (byte) $50
  [219] *((const byte*) SPRITES_COLS#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::col#2
  [220] (byte) place_sprites::spr_x#1 ← (byte) place_sprites::spr_x#2 + (byte) $20
  [221] (byte) place_sprites::col#1 ← (byte) place_sprites::col#2 ^ (byte)(number) 7^(number) 5
  [222] (byte) place_sprites::j2#1 ← ++ (byte) place_sprites::j2#3
  [223] (byte) place_sprites::j2#2 ← ++ (byte) place_sprites::j2#1
  [224] (byte) place_sprites::j#1 ← ++ (byte) place_sprites::j#2
  [225] if((byte) place_sprites::j#1!=(byte) 7) goto place_sprites::@1
  to:place_sprites::@return
place_sprites::@return: scope:[place_sprites]  from place_sprites::@1
  [226] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BORDERCOL
(byte*) CHARGEN
(byte*) COLS
(byte*) PROCPORT
(byte*) RASTER
(byte*) SCREEN
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
(byte*) addMEMtoFAC::mem
(void()) anim()
(byte~) anim::$6 101.0
(byte~) anim::$7 202.0
(byte~) anim::$9 202.0
(byte) anim::j
(byte) anim::j#1 151.5
(byte) anim::j#2 11.882352941176471
(byte) anim::j2
(byte) anim::j2#1 67.33333333333333
(byte) anim::j2#2 25.25
(word) anim::x
(word) anim::x#0 75.75
(byte) anim::x_msb
(byte) anim::x_msb#1 13.6
(byte) anim::x_msb#2 101.0
(byte) anim::xidx
(byte) anim::xidx#0 2.0
(byte) anim::xidx#1 202.0
(byte) anim::xidx#2 202.0
(byte) anim::xidx#3 38.125
(byte) anim::xidx#5 37.875
(byte) anim::yidx
(byte) anim::yidx#0 4.0
(byte) anim::yidx#1 202.0
(byte) anim::yidx#2 202.0
(byte) anim::yidx#3 25.416666666666664
(byte) anim::yidx#6 75.75
(void()) clear_screen()
(byte*) clear_screen::sc
(byte*) clear_screen::sc#1 16.5
(byte*) clear_screen::sc#2 16.5
(void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
(byte*) divMEMbyFAC::mem
(byte*) divMEMbyFAC::mem#2 2.0
(void()) gen_chargen_sprite((byte) gen_chargen_sprite::ch , (byte*) gen_chargen_sprite::sprite)
(word~) gen_chargen_sprite::$0 4.0
(word~) gen_chargen_sprite::$1 4.0
(byte~) gen_chargen_sprite::$3 2002.0
(byte~) gen_chargen_sprite::$6 20002.0
(byte) gen_chargen_sprite::b
(byte) gen_chargen_sprite::b#1 15001.5
(byte) gen_chargen_sprite::b#2 2000.2
(byte) gen_chargen_sprite::bits
(byte) gen_chargen_sprite::bits#0 202.0
(byte) gen_chargen_sprite::bits#1 667.3333333333334
(byte) gen_chargen_sprite::bits#2 182.58823529411765
(byte) gen_chargen_sprite::c
(byte) gen_chargen_sprite::c#3 769.3076923076923
(byte) gen_chargen_sprite::ch
(byte) gen_chargen_sprite::ch#0 5.5
(byte*) gen_chargen_sprite::chargen
(byte*) gen_chargen_sprite::chargen#0 3.678571428571429
(byte) gen_chargen_sprite::s_gen
(byte) gen_chargen_sprite::s_gen#1 10001.0
(byte) gen_chargen_sprite::s_gen#3 21003.0
(byte) gen_chargen_sprite::s_gen#5 400.4
(byte) gen_chargen_sprite::s_gen#6 3500.5
(byte) gen_chargen_sprite::s_gen_cnt
(byte) gen_chargen_sprite::s_gen_cnt#1 15001.5
(byte) gen_chargen_sprite::s_gen_cnt#3 7001.0
(byte) gen_chargen_sprite::s_gen_cnt#4 400.4
(byte) gen_chargen_sprite::s_gen_cnt#5 3500.5
(byte*) gen_chargen_sprite::sprite
(byte*) gen_chargen_sprite::sprite#0 2.1666666666666665
(byte*) gen_chargen_sprite::sprite#1 20002.0
(byte*) gen_chargen_sprite::sprite#10 420.59999999999997
(byte*) gen_chargen_sprite::sprite#11 102.0
(byte*) gen_chargen_sprite::sprite#2 67.33333333333333
(byte*) gen_chargen_sprite::sprite#3 7625.875
(byte*) gen_chargen_sprite::sprite#4 5184.166666666666
(byte) gen_chargen_sprite::x
(byte) gen_chargen_sprite::x#1 1501.5
(byte) gen_chargen_sprite::x#6 111.22222222222223
(byte) gen_chargen_sprite::y
(byte) gen_chargen_sprite::y#1 151.5
(byte) gen_chargen_sprite::y#2 13.173913043478262
(void()) gen_sintab((byte*) gen_sintab::sintab , (byte) gen_sintab::length , (byte) gen_sintab::min , (byte) gen_sintab::max)
(word~) gen_sintab::$23 11.0
(byte~) gen_sintab::$24 22.0
(byte*) gen_sintab::f_2pi
(byte[]) gen_sintab::f_amp
(byte[]) gen_sintab::f_i
(byte[]) gen_sintab::f_min
(byte) gen_sintab::i
(byte) gen_sintab::i#1 16.5
(byte) gen_sintab::i#10 1.375
(byte) gen_sintab::length
(byte) gen_sintab::length#10 0.22448979591836735
(byte) gen_sintab::max
(byte) gen_sintab::max#2
(byte) gen_sintab::min
(byte) gen_sintab::min#2
(byte*) gen_sintab::sintab
(byte*) gen_sintab::sintab#12 0.22448979591836735
(void()) gen_sprites()
(byte[]) gen_sprites::cml
(byte) gen_sprites::i
(byte) gen_sprites::i#1 16.5
(byte) gen_sprites::i#2 6.6000000000000005
(byte*) gen_sprites::spr
(byte*) gen_sprites::spr#1 7.333333333333333
(byte*) gen_sprites::spr#2 8.25
(word()) getFAC()
(word) getFAC::return
(word) getFAC::return#0 4.333333333333333
(word) getFAC::return#2 22.0
(word) getFAC::w
(void()) init()
(byte) init::i
(byte) init::i#1 16.5
(byte) init::i#2 14.666666666666666
(void()) main()
(byte*) memHi
(byte*) memLo
(void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
(byte*) mulFACbyMEM::mem
(byte*) mulFACbyMEM::mem#2 2.0
(void()) place_sprites()
(byte) place_sprites::col
(byte) place_sprites::col#1 4.4
(byte) place_sprites::col#2 4.714285714285714
(byte) place_sprites::j
(byte) place_sprites::j#1 16.5
(byte) place_sprites::j#2 4.4
(byte) place_sprites::j2
(byte) place_sprites::j2#1 22.0
(byte) place_sprites::j2#2 7.333333333333333
(byte) place_sprites::j2#3 5.5
(byte) place_sprites::spr_id
(byte) place_sprites::spr_id#1 2.2
(byte) place_sprites::spr_id#2 16.5
(byte) place_sprites::spr_x
(byte) place_sprites::spr_x#1 3.6666666666666665
(byte) place_sprites::spr_x#2 5.5
(byte*) place_sprites::sprites_ptr
(void()) prepareMEM((byte*) prepareMEM::mem)
(byte~) prepareMEM::$0 4.0
(byte~) prepareMEM::$1 4.0
(byte*) prepareMEM::mem
(byte*) prepareMEM::mem#0 4.0
(byte*) prepareMEM::mem#1 4.0
(byte*) prepareMEM::mem#3 4.0
(byte*) prepareMEM::mem#4 4.0
(byte*) prepareMEM::mem#5 3.9999999999999996
(byte*) progress_cursor
(byte*) progress_cursor#10 4.0
(byte*) progress_cursor#11 2.8333333333333335
(byte*) progress_cursor#34 0.7307692307692306
(byte) progress_idx
(byte) progress_idx#10 3.0
(byte) progress_idx#12 2.5
(byte) progress_idx#34 0.5652173913043479
(void()) progress_inc()
(byte[]) progress_inc::progress_chars
(void()) progress_init((byte*) progress_init::line)
(byte*) progress_init::line
(byte*) progress_init::line#2 0.06896551724137931
(void()) setARGtoFAC()
(void()) setFAC((word) setFAC::w)
(word) setFAC::w
(word) setFAC::w#0 4.0
(word) setFAC::w#1 4.0
(word) setFAC::w#3 22.0
(word) setFAC::w#4 22.0
(word) setFAC::w#5 26.0
(void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
(byte*) setMEMtoFAC::mem
(byte*) setMEMtoFAC::mem#5 2.0
(void()) sinFAC()
(byte) sin_idx_x
(byte) sin_idx_x#11 1.625
(byte) sin_idx_x#13 8.346153846153845
(byte) sin_idx_x#3 2.0
(byte) sin_idx_y
(byte) sin_idx_y#11 3.25
(byte) sin_idx_y#13 7.2333333333333325
(byte) sin_idx_y#3 2.0
(byte) sinlen_x
(byte) sinlen_y
(byte[$dd]) sintab_x
(byte[$c5]) sintab_y
(byte*) sprites
(void()) subFACfromARG()

Initial phi equivalence classes
[ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ]
[ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ]
[ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ]
[ anim::x_msb#2 anim::x_msb#1 ]
[ anim::j2#2 anim::j2#1 ]
[ anim::yidx#3 anim::yidx#0 anim::yidx#6 anim::yidx#1 anim::yidx#2 ]
[ anim::j#2 anim::j#1 ]
[ init::i#2 init::i#1 ]
[ clear_screen::sc#2 clear_screen::sc#1 ]
[ gen_sintab::max#2 ]
[ gen_sintab::min#2 ]
[ gen_sintab::length#10 ]
[ gen_sintab::sintab#12 ]
[ gen_sintab::i#10 gen_sintab::i#1 ]
[ progress_idx#34 progress_idx#12 progress_idx#10 ]
[ progress_cursor#34 progress_init::line#2 progress_cursor#11 progress_cursor#10 ]
[ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 ]
[ mulFACbyMEM::mem#2 ]
[ divMEMbyFAC::mem#2 ]
[ setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 ]
[ setMEMtoFAC::mem#5 ]
[ gen_sprites::i#2 gen_sprites::i#1 ]
[ gen_sprites::spr#2 gen_sprites::spr#1 ]
[ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ]
[ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ]
[ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ]
[ gen_chargen_sprite::c#3 ]
[ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ]
[ gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::s_gen_cnt#5 gen_chargen_sprite::s_gen_cnt#1 ]
[ gen_chargen_sprite::b#2 gen_chargen_sprite::b#1 ]
[ gen_chargen_sprite::sprite#3 gen_chargen_sprite::sprite#10 gen_chargen_sprite::sprite#11 gen_chargen_sprite::sprite#0 gen_chargen_sprite::sprite#2 gen_chargen_sprite::sprite#4 gen_chargen_sprite::sprite#1 ]
[ place_sprites::spr_id#2 place_sprites::spr_id#1 ]
[ place_sprites::j#2 place_sprites::j#1 ]
[ place_sprites::spr_x#2 place_sprites::spr_x#1 ]
[ place_sprites::j2#3 place_sprites::j2#2 ]
[ place_sprites::col#2 place_sprites::col#1 ]
Added variable anim::x#0 to zero page equivalence class [ anim::x#0 ]
Added variable anim::$6 to zero page equivalence class [ anim::$6 ]
Added variable anim::$7 to zero page equivalence class [ anim::$7 ]
Added variable anim::$9 to zero page equivalence class [ anim::$9 ]
Added variable getFAC::return#2 to zero page equivalence class [ getFAC::return#2 ]
Added variable gen_sintab::$23 to zero page equivalence class [ gen_sintab::$23 ]
Added variable gen_sintab::$24 to zero page equivalence class [ gen_sintab::$24 ]
Added variable getFAC::return#0 to zero page equivalence class [ getFAC::return#0 ]
Added variable prepareMEM::$0 to zero page equivalence class [ prepareMEM::$0 ]
Added variable prepareMEM::$1 to zero page equivalence class [ prepareMEM::$1 ]
Added variable gen_chargen_sprite::ch#0 to zero page equivalence class [ gen_chargen_sprite::ch#0 ]
Added variable gen_chargen_sprite::$0 to zero page equivalence class [ gen_chargen_sprite::$0 ]
Added variable gen_chargen_sprite::$1 to zero page equivalence class [ gen_chargen_sprite::$1 ]
Added variable gen_chargen_sprite::chargen#0 to zero page equivalence class [ gen_chargen_sprite::chargen#0 ]
Added variable gen_chargen_sprite::$3 to zero page equivalence class [ gen_chargen_sprite::$3 ]
Added variable gen_chargen_sprite::$6 to zero page equivalence class [ gen_chargen_sprite::$6 ]
Added variable place_sprites::j2#1 to zero page equivalence class [ place_sprites::j2#1 ]
Complete equivalence classes
[ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ]
[ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ]
[ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ]
[ anim::x_msb#2 anim::x_msb#1 ]
[ anim::j2#2 anim::j2#1 ]
[ anim::yidx#3 anim::yidx#0 anim::yidx#6 anim::yidx#1 anim::yidx#2 ]
[ anim::j#2 anim::j#1 ]
[ init::i#2 init::i#1 ]
[ clear_screen::sc#2 clear_screen::sc#1 ]
[ gen_sintab::max#2 ]
[ gen_sintab::min#2 ]
[ gen_sintab::length#10 ]
[ gen_sintab::sintab#12 ]
[ gen_sintab::i#10 gen_sintab::i#1 ]
[ progress_idx#34 progress_idx#12 progress_idx#10 ]
[ progress_cursor#34 progress_init::line#2 progress_cursor#11 progress_cursor#10 ]
[ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 ]
[ mulFACbyMEM::mem#2 ]
[ divMEMbyFAC::mem#2 ]
[ setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 ]
[ setMEMtoFAC::mem#5 ]
[ gen_sprites::i#2 gen_sprites::i#1 ]
[ gen_sprites::spr#2 gen_sprites::spr#1 ]
[ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ]
[ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ]
[ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ]
[ gen_chargen_sprite::c#3 ]
[ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ]
[ gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::s_gen_cnt#5 gen_chargen_sprite::s_gen_cnt#1 ]
[ gen_chargen_sprite::b#2 gen_chargen_sprite::b#1 ]
[ gen_chargen_sprite::sprite#3 gen_chargen_sprite::sprite#10 gen_chargen_sprite::sprite#11 gen_chargen_sprite::sprite#0 gen_chargen_sprite::sprite#2 gen_chargen_sprite::sprite#4 gen_chargen_sprite::sprite#1 ]
[ place_sprites::spr_id#2 place_sprites::spr_id#1 ]
[ place_sprites::j#2 place_sprites::j#1 ]
[ place_sprites::spr_x#2 place_sprites::spr_x#1 ]
[ place_sprites::j2#3 place_sprites::j2#2 ]
[ place_sprites::col#2 place_sprites::col#1 ]
[ anim::x#0 ]
[ anim::$6 ]
[ anim::$7 ]
[ anim::$9 ]
[ getFAC::return#2 ]
[ gen_sintab::$23 ]
[ gen_sintab::$24 ]
[ getFAC::return#0 ]
[ prepareMEM::$0 ]
[ prepareMEM::$1 ]
[ gen_chargen_sprite::ch#0 ]
[ gen_chargen_sprite::$0 ]
[ gen_chargen_sprite::$1 ]
[ gen_chargen_sprite::chargen#0 ]
[ gen_chargen_sprite::$3 ]
[ gen_chargen_sprite::$6 ]
[ place_sprites::j2#1 ]
Allocated zp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ]
Allocated zp ZP_BYTE:3 [ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ]
Allocated zp ZP_BYTE:4 [ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ]
Allocated zp ZP_BYTE:5 [ anim::x_msb#2 anim::x_msb#1 ]
Allocated zp ZP_BYTE:6 [ anim::j2#2 anim::j2#1 ]
Allocated zp ZP_BYTE:7 [ anim::yidx#3 anim::yidx#0 anim::yidx#6 anim::yidx#1 anim::yidx#2 ]
Allocated zp ZP_BYTE:8 [ anim::j#2 anim::j#1 ]
Allocated zp ZP_BYTE:9 [ init::i#2 init::i#1 ]
Allocated zp ZP_WORD:10 [ clear_screen::sc#2 clear_screen::sc#1 ]
Allocated zp ZP_BYTE:12 [ gen_sintab::max#2 ]
Allocated zp ZP_BYTE:13 [ gen_sintab::min#2 ]
Allocated zp ZP_BYTE:14 [ gen_sintab::length#10 ]
Allocated zp ZP_WORD:15 [ gen_sintab::sintab#12 ]
Allocated zp ZP_BYTE:17 [ gen_sintab::i#10 gen_sintab::i#1 ]
Allocated zp ZP_BYTE:18 [ progress_idx#34 progress_idx#12 progress_idx#10 ]
Allocated zp ZP_WORD:19 [ progress_cursor#34 progress_init::line#2 progress_cursor#11 progress_cursor#10 ]
Allocated zp ZP_WORD:21 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 ]
Allocated zp ZP_WORD:23 [ mulFACbyMEM::mem#2 ]
Allocated zp ZP_WORD:25 [ divMEMbyFAC::mem#2 ]
Allocated zp ZP_WORD:27 [ setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 ]
Allocated zp ZP_WORD:29 [ setMEMtoFAC::mem#5 ]
Allocated zp ZP_BYTE:31 [ gen_sprites::i#2 gen_sprites::i#1 ]
Allocated zp ZP_WORD:32 [ gen_sprites::spr#2 gen_sprites::spr#1 ]
Allocated zp ZP_BYTE:34 [ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ]
Allocated zp ZP_BYTE:35 [ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ]
Allocated zp ZP_BYTE:36 [ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ]
Allocated zp ZP_BYTE:37 [ gen_chargen_sprite::c#3 ]
Allocated zp ZP_BYTE:38 [ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ]
Allocated zp ZP_BYTE:39 [ gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::s_gen_cnt#5 gen_chargen_sprite::s_gen_cnt#1 ]
Allocated zp ZP_BYTE:40 [ gen_chargen_sprite::b#2 gen_chargen_sprite::b#1 ]
Allocated zp ZP_WORD:41 [ gen_chargen_sprite::sprite#3 gen_chargen_sprite::sprite#10 gen_chargen_sprite::sprite#11 gen_chargen_sprite::sprite#0 gen_chargen_sprite::sprite#2 gen_chargen_sprite::sprite#4 gen_chargen_sprite::sprite#1 ]
Allocated zp ZP_BYTE:43 [ place_sprites::spr_id#2 place_sprites::spr_id#1 ]
Allocated zp ZP_BYTE:44 [ place_sprites::j#2 place_sprites::j#1 ]
Allocated zp ZP_BYTE:45 [ place_sprites::spr_x#2 place_sprites::spr_x#1 ]
Allocated zp ZP_BYTE:46 [ place_sprites::j2#3 place_sprites::j2#2 ]
Allocated zp ZP_BYTE:47 [ place_sprites::col#2 place_sprites::col#1 ]
Allocated zp ZP_WORD:48 [ anim::x#0 ]
Allocated zp ZP_BYTE:50 [ anim::$6 ]
Allocated zp ZP_BYTE:51 [ anim::$7 ]
Allocated zp ZP_BYTE:52 [ anim::$9 ]
Allocated zp ZP_WORD:53 [ getFAC::return#2 ]
Allocated zp ZP_WORD:55 [ gen_sintab::$23 ]
Allocated zp ZP_BYTE:57 [ gen_sintab::$24 ]
Allocated zp ZP_WORD:58 [ getFAC::return#0 ]
Allocated zp ZP_BYTE:60 [ prepareMEM::$0 ]
Allocated zp ZP_BYTE:61 [ prepareMEM::$1 ]
Allocated zp ZP_BYTE:62 [ gen_chargen_sprite::ch#0 ]
Allocated zp ZP_WORD:63 [ gen_chargen_sprite::$0 ]
Allocated zp ZP_WORD:65 [ gen_chargen_sprite::$1 ]
Allocated zp ZP_WORD:67 [ gen_chargen_sprite::chargen#0 ]
Allocated zp ZP_BYTE:69 [ gen_chargen_sprite::$3 ]
Allocated zp ZP_BYTE:70 [ gen_chargen_sprite::$6 ]
Allocated zp ZP_BYTE:71 [ place_sprites::j2#1 ]

INITIAL ASM
  // File Comments
  // Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_EXPAND_X = $d01d
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  // Color Ram
  .label COLS = $d800
  // Zeropage addresses used to hold lo/hi-bytes of addresses of float numbers in MEM
  .label memLo = $fe
  .label memHi = $ff
  .const sinlen_x = $dd
  .const sinlen_y = $c5
  .label sprites = $2000
  .label SCREEN = $400
  .label progress_idx = $12
  .label progress_cursor = $13
  .label sin_idx_x = 2
  .label sin_idx_y = 3
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    // [5] call init 
    // [43] phi from main to init [phi:main->init]
  init_from_main:
    jsr init
    // [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [6] phi (byte) sin_idx_y#13 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_y
    // [6] phi (byte) sin_idx_x#13 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_x
    jmp b1
    // [6] phi from main::@1 main::@2 to main::@1 [phi:main::@1/main::@2->main::@1]
  b1_from_b1:
  b1_from_b2:
    // [6] phi (byte) sin_idx_y#13 = (byte) sin_idx_y#13 [phi:main::@1/main::@2->main::@1#0] -- register_copy 
    // [6] phi (byte) sin_idx_x#13 = (byte) sin_idx_x#13 [phi:main::@1/main::@2->main::@1#1] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [7] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@1 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b1_from_b1
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
    // main::@2
  b2:
    // [9] call anim 
    jsr anim
    jmp b1_from_b2
}
  // anim
anim: {
    .label _6 = $32
    .label _7 = $33
    .label _9 = $34
    .label xidx = 4
    .label yidx = 7
    .label x = $30
    .label x_msb = 5
    .label j2 = 6
    .label j = 8
    // [10] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // [11] (byte) anim::xidx#0 ← (byte) sin_idx_x#13 -- vbuz1=vbuz2 
    lda sin_idx_x
    sta xidx
    // [12] (byte) anim::yidx#0 ← (byte) sin_idx_y#13 -- vbuz1=vbuz2 
    lda sin_idx_y
    sta yidx
    // [13] phi from anim to anim::@3 [phi:anim->anim::@3]
  b3_from_anim:
    // [13] phi (byte) anim::j#2 = (byte) 0 [phi:anim->anim::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta j
    // [13] phi (byte) anim::yidx#3 = (byte) anim::yidx#0 [phi:anim->anim::@3#1] -- register_copy 
    // [13] phi (byte) anim::j2#2 = (byte) $c [phi:anim->anim::@3#2] -- vbuz1=vbuc1 
    lda #$c
    sta j2
    // [13] phi (byte) anim::x_msb#2 = (byte) 0 [phi:anim->anim::@3#3] -- vbuz1=vbuc1 
    lda #0
    sta x_msb
    // [13] phi (byte) anim::xidx#3 = (byte) anim::xidx#0 [phi:anim->anim::@3#4] -- register_copy 
    jmp b3
    // [13] phi from anim::@5 to anim::@3 [phi:anim::@5->anim::@3]
  b3_from_b5:
    // [13] phi (byte) anim::j#2 = (byte) anim::j#1 [phi:anim::@5->anim::@3#0] -- register_copy 
    // [13] phi (byte) anim::yidx#3 = (byte) anim::yidx#6 [phi:anim::@5->anim::@3#1] -- register_copy 
    // [13] phi (byte) anim::j2#2 = (byte) anim::j2#1 [phi:anim::@5->anim::@3#2] -- register_copy 
    // [13] phi (byte) anim::x_msb#2 = (byte) anim::x_msb#1 [phi:anim::@5->anim::@3#3] -- register_copy 
    // [13] phi (byte) anim::xidx#3 = (byte) anim::xidx#5 [phi:anim::@5->anim::@3#4] -- register_copy 
    jmp b3
    // anim::@3
  b3:
    // [14] (word) anim::x#0 ← (word) $1e + *((const byte[$dd]) sintab_x#0 + (byte) anim::xidx#3) -- vwuz1=vwuc1_plus_pbuc2_derefidx_vbuz2 
    ldy xidx
    lda sintab_x,y
    clc
    adc #<$1e
    sta x
    lda #>$1e
    adc #0
    sta x+1
    // [15] (byte~) anim::$6 ← (byte) anim::x_msb#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda x_msb
    asl
    sta _6
    // [16] (byte~) anim::$7 ← > (word) anim::x#0 -- vbuz1=_hi_vwuz2 
    lda x+1
    sta _7
    // [17] (byte) anim::x_msb#1 ← (byte~) anim::$6 | (byte~) anim::$7 -- vbuz1=vbuz2_bor_vbuz3 
    lda _6
    ora _7
    sta x_msb
    // [18] (byte~) anim::$9 ← < (word) anim::x#0 -- vbuz1=_lo_vwuz2 
    lda x
    sta _9
    // [19] *((const byte*) SPRITES_XPOS#0 + (byte) anim::j2#2) ← (byte~) anim::$9 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _9
    ldy j2
    sta SPRITES_XPOS,y
    // [20] *((const byte*) SPRITES_YPOS#0 + (byte) anim::j2#2) ← *((const byte[$c5]) sintab_y#0 + (byte) anim::yidx#3) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy yidx
    lda sintab_y,y
    ldy j2
    sta SPRITES_YPOS,y
    // [21] (byte) anim::xidx#1 ← (byte) anim::xidx#3 + (byte) $a -- vbuz1=vbuz1_plus_vbuc1 
    lax xidx
    axs #-[$a]
    stx xidx
    // [22] if((byte) anim::xidx#1<(const byte) sinlen_x#0) goto anim::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda xidx
    cmp #sinlen_x
    bcc b4_from_b3
    jmp b6
    // anim::@6
  b6:
    // [23] (byte) anim::xidx#2 ← (byte) anim::xidx#1 - (const byte) sinlen_x#0 -- vbuz1=vbuz1_minus_vbuc1 
    lax xidx
    axs #sinlen_x
    stx xidx
    // [24] phi from anim::@3 anim::@6 to anim::@4 [phi:anim::@3/anim::@6->anim::@4]
  b4_from_b3:
  b4_from_b6:
    // [24] phi (byte) anim::xidx#5 = (byte) anim::xidx#1 [phi:anim::@3/anim::@6->anim::@4#0] -- register_copy 
    jmp b4
    // anim::@4
  b4:
    // [25] (byte) anim::yidx#1 ← (byte) anim::yidx#3 + (byte) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax yidx
    axs #-[8]
    stx yidx
    // [26] if((byte) anim::yidx#1<(const byte) sinlen_y#0) goto anim::@5 -- vbuz1_lt_vbuc1_then_la1 
    lda yidx
    cmp #sinlen_y
    bcc b5_from_b4
    jmp b7
    // anim::@7
  b7:
    // [27] (byte) anim::yidx#2 ← (byte) anim::yidx#1 - (const byte) sinlen_y#0 -- vbuz1=vbuz1_minus_vbuc1 
    lax yidx
    axs #sinlen_y
    stx yidx
    // [28] phi from anim::@4 anim::@7 to anim::@5 [phi:anim::@4/anim::@7->anim::@5]
  b5_from_b4:
  b5_from_b7:
    // [28] phi (byte) anim::yidx#6 = (byte) anim::yidx#1 [phi:anim::@4/anim::@7->anim::@5#0] -- register_copy 
    jmp b5
    // anim::@5
  b5:
    // [29] (byte) anim::j2#1 ← (byte) anim::j2#2 - (byte) 2 -- vbuz1=vbuz1_minus_2 
    dec j2
    dec j2
    // [30] (byte) anim::j#1 ← ++ (byte) anim::j#2 -- vbuz1=_inc_vbuz1 
    inc j
    // [31] if((byte) anim::j#1!=(byte) 7) goto anim::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp j
    bne b3_from_b5
    jmp b8
    // anim::@8
  b8:
    // [32] *((const byte*) SPRITES_XMSB#0) ← (byte) anim::x_msb#1 -- _deref_pbuc1=vbuz1 
    lda x_msb
    sta SPRITES_XMSB
    // [33] (byte) sin_idx_x#3 ← ++ (byte) sin_idx_x#13 -- vbuz1=_inc_vbuz1 
    inc sin_idx_x
    // [34] if((byte) sin_idx_x#3<(const byte) sinlen_x#0) goto anim::@9 -- vbuz1_lt_vbuc1_then_la1 
    lda sin_idx_x
    cmp #sinlen_x
    bcc b9_from_b8
    // [36] phi from anim::@8 to anim::@1 [phi:anim::@8->anim::@1]
  b1_from_b8:
    // [36] phi (byte) sin_idx_x#11 = (byte) 0 [phi:anim::@8->anim::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_x
    jmp b1
    // [35] phi from anim::@8 to anim::@9 [phi:anim::@8->anim::@9]
  b9_from_b8:
    jmp b9
    // anim::@9
  b9:
    // [36] phi from anim::@9 to anim::@1 [phi:anim::@9->anim::@1]
  b1_from_b9:
    // [36] phi (byte) sin_idx_x#11 = (byte) sin_idx_x#3 [phi:anim::@9->anim::@1#0] -- register_copy 
    jmp b1
    // anim::@1
  b1:
    // [37] (byte) sin_idx_y#3 ← ++ (byte) sin_idx_y#13 -- vbuz1=_inc_vbuz1 
    inc sin_idx_y
    // [38] if((byte) sin_idx_y#3<(const byte) sinlen_y#0) goto anim::@10 -- vbuz1_lt_vbuc1_then_la1 
    lda sin_idx_y
    cmp #sinlen_y
    bcc b10_from_b1
    // [40] phi from anim::@1 to anim::@2 [phi:anim::@1->anim::@2]
  b2_from_b1:
    // [40] phi (byte) sin_idx_y#11 = (byte) 0 [phi:anim::@1->anim::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_y
    jmp b2
    // [39] phi from anim::@1 to anim::@10 [phi:anim::@1->anim::@10]
  b10_from_b1:
    jmp b10
    // anim::@10
  b10:
    // [40] phi from anim::@10 to anim::@2 [phi:anim::@10->anim::@2]
  b2_from_b10:
    // [40] phi (byte) sin_idx_y#11 = (byte) sin_idx_y#3 [phi:anim::@10->anim::@2#0] -- register_copy 
    jmp b2
    // anim::@2
  b2:
    // [41] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BORDERCOL
    jmp breturn
    // anim::@return
  breturn:
    // [42] return 
    rts
}
  // init
init: {
    .label i = 9
    // [44] call clear_screen 
    // [65] phi from init to clear_screen [phi:init->clear_screen]
  clear_screen_from_init:
    jsr clear_screen
    // [45] phi from init to init::@1 [phi:init->init::@1]
  b1_from_init:
    // [45] phi (byte) init::i#2 = (byte) 0 [phi:init->init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
    // [45] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  b1_from_b1:
    // [45] phi (byte) init::i#2 = (byte) init::i#1 [phi:init::@1->init::@1#0] -- register_copy 
    jmp b1
    // init::@1
  b1:
    // [46] *((const byte*) COLS#0 + (byte) init::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy i
    sta COLS,y
    // [47] *((const byte*) COLS#0+(byte) $28 + (byte) init::i#2) ← (byte) $b -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #$b
    ldy i
    sta COLS+$28,y
    // [48] (byte) init::i#1 ← ++ (byte) init::i#2 -- vbuz1=_inc_vbuz1 
    inc i
    // [49] if((byte) init::i#1!=(byte) $28) goto init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp i
    bne b1_from_b1
    // [50] phi from init::@1 to init::@2 [phi:init::@1->init::@2]
  b2_from_b1:
    jmp b2
    // init::@2
  b2:
    // [51] call place_sprites 
    jsr place_sprites
    // [52] phi from init::@2 to init::@3 [phi:init::@2->init::@3]
  b3_from_b2:
    jmp b3
    // init::@3
  b3:
    // [53] call gen_sprites 
    // [169] phi from init::@3 to gen_sprites [phi:init::@3->gen_sprites]
  gen_sprites_from_b3:
    jsr gen_sprites
    // [54] phi from init::@3 to init::@4 [phi:init::@3->init::@4]
  b4_from_b3:
    jmp b4
    // init::@4
  b4:
    // [55] call progress_init 
    // [167] phi from init::@4 to progress_init [phi:init::@4->progress_init]
  progress_init_from_b4:
    // [167] phi (byte*) progress_init::line#2 = (const byte*) SCREEN#0 [phi:init::@4->progress_init#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta progress_init.line
    lda #>SCREEN
    sta progress_init.line+1
    jsr progress_init
    // [56] phi from init::@4 to init::@5 [phi:init::@4->init::@5]
  b5_from_b4:
    jmp b5
    // init::@5
  b5:
    // [57] call gen_sintab 
    // [71] phi from init::@5 to gen_sintab [phi:init::@5->gen_sintab]
  gen_sintab_from_b5:
    // [71] phi (byte*) gen_sintab::sintab#12 = (const byte[$dd]) sintab_x#0 [phi:init::@5->gen_sintab#0] -- pbuz1=pbuc1 
    lda #<sintab_x
    sta gen_sintab.sintab
    lda #>sintab_x
    sta gen_sintab.sintab+1
    // [71] phi (byte) gen_sintab::length#10 = (const byte) sinlen_x#0 [phi:init::@5->gen_sintab#1] -- vbuz1=vbuc1 
    lda #sinlen_x
    sta gen_sintab.length
    // [71] phi (byte) gen_sintab::min#2 = (byte) 0 [phi:init::@5->gen_sintab#2] -- vbuz1=vbuc1 
    lda #0
    sta gen_sintab.min
    // [71] phi (byte) gen_sintab::max#2 = (byte) $ff [phi:init::@5->gen_sintab#3] -- vbuz1=vbuc1 
    lda #$ff
    sta gen_sintab.max
    jsr gen_sintab
    // [58] phi from init::@5 to init::@6 [phi:init::@5->init::@6]
  b6_from_b5:
    jmp b6
    // init::@6
  b6:
    // [59] call progress_init 
    // [167] phi from init::@6 to progress_init [phi:init::@6->progress_init]
  progress_init_from_b6:
    // [167] phi (byte*) progress_init::line#2 = (const byte*) SCREEN#0+(byte) $28 [phi:init::@6->progress_init#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28
    sta progress_init.line
    lda #>SCREEN+$28
    sta progress_init.line+1
    jsr progress_init
    // [60] phi from init::@6 to init::@7 [phi:init::@6->init::@7]
  b7_from_b6:
    jmp b7
    // init::@7
  b7:
    // [61] call gen_sintab 
    // [71] phi from init::@7 to gen_sintab [phi:init::@7->gen_sintab]
  gen_sintab_from_b7:
    // [71] phi (byte*) gen_sintab::sintab#12 = (const byte[$c5]) sintab_y#0 [phi:init::@7->gen_sintab#0] -- pbuz1=pbuc1 
    lda #<sintab_y
    sta gen_sintab.sintab
    lda #>sintab_y
    sta gen_sintab.sintab+1
    // [71] phi (byte) gen_sintab::length#10 = (const byte) sinlen_y#0 [phi:init::@7->gen_sintab#1] -- vbuz1=vbuc1 
    lda #sinlen_y
    sta gen_sintab.length
    // [71] phi (byte) gen_sintab::min#2 = (byte) $32 [phi:init::@7->gen_sintab#2] -- vbuz1=vbuc1 
    lda #$32
    sta gen_sintab.min
    // [71] phi (byte) gen_sintab::max#2 = (byte) $d0 [phi:init::@7->gen_sintab#3] -- vbuz1=vbuc1 
    lda #$d0
    sta gen_sintab.max
    jsr gen_sintab
    // [62] phi from init::@7 to init::@8 [phi:init::@7->init::@8]
  b8_from_b7:
    jmp b8
    // init::@8
  b8:
    // [63] call clear_screen 
    // [65] phi from init::@8 to clear_screen [phi:init::@8->clear_screen]
  clear_screen_from_b8:
    jsr clear_screen
    jmp breturn
    // init::@return
  breturn:
    // [64] return 
    rts
}
  // clear_screen
clear_screen: {
    .label sc = $a
    // [66] phi from clear_screen to clear_screen::@1 [phi:clear_screen->clear_screen::@1]
  b1_from_clear_screen:
    // [66] phi (byte*) clear_screen::sc#2 = (const byte*) SCREEN#0 [phi:clear_screen->clear_screen::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta sc
    lda #>SCREEN
    sta sc+1
    jmp b1
    // [66] phi from clear_screen::@1 to clear_screen::@1 [phi:clear_screen::@1->clear_screen::@1]
  b1_from_b1:
    // [66] phi (byte*) clear_screen::sc#2 = (byte*) clear_screen::sc#1 [phi:clear_screen::@1->clear_screen::@1#0] -- register_copy 
    jmp b1
    // clear_screen::@1
  b1:
    // [67] *((byte*) clear_screen::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
    // [68] (byte*) clear_screen::sc#1 ← ++ (byte*) clear_screen::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
    // [69] if((byte*) clear_screen::sc#1<(const byte*) SCREEN#0+(word) $3e8) goto clear_screen::@1 -- pbuz1_lt_pbuc1_then_la1 
    lda sc+1
    cmp #>SCREEN+$3e8
    bcc b1_from_b1
    bne !+
    lda sc
    cmp #<SCREEN+$3e8
    bcc b1_from_b1
  !:
    jmp breturn
    // clear_screen::@return
  breturn:
    // [70] return 
    rts
}
  // gen_sintab
// Generate a sinus table using BASIC floats
// - sintab is a pointer to the table to fill
// - length is the length of the sine table
// - min is the minimum value of the generated sinus
// - max is the maximum value of the generated sinus
// gen_sintab(byte* zeropage($f) sintab, byte zeropage($e) length, byte zeropage($d) min, byte zeropage($c) max)
gen_sintab: {
    // amplitude/2
    .label f_2pi = $e2e5
    .label _23 = $37
    .label _24 = $39
    .label i = $11
    .label max = $c
    .label min = $d
    .label length = $e
    .label sintab = $f
    // [72] (word) setFAC::w#0 ← (word)(byte) gen_sintab::max#2 -- vwuz1=_word_vbuz2 
    lda max
    sta setFAC.w
    lda #0
    sta setFAC.w+1
    // [73] call setFAC 
    // [153] phi from gen_sintab to setFAC [phi:gen_sintab->setFAC]
  setFAC_from_gen_sintab:
    // [153] phi (word) setFAC::w#5 = (word) setFAC::w#0 [phi:gen_sintab->setFAC#0] -- register_copy 
    jsr setFAC
    // [74] phi from gen_sintab to gen_sintab::@2 [phi:gen_sintab->gen_sintab::@2]
  b2_from_gen_sintab:
    jmp b2
    // gen_sintab::@2
  b2:
    // [75] call setARGtoFAC 
    jsr setARGtoFAC
    jmp b3
    // gen_sintab::@3
  b3:
    // [76] (word) setFAC::w#1 ← (word)(byte) gen_sintab::min#2 -- vwuz1=_word_vbuz2 
    lda min
    sta setFAC.w
    lda #0
    sta setFAC.w+1
    // [77] call setFAC 
    // [153] phi from gen_sintab::@3 to setFAC [phi:gen_sintab::@3->setFAC]
  setFAC_from_b3:
    // [153] phi (word) setFAC::w#5 = (word) setFAC::w#1 [phi:gen_sintab::@3->setFAC#0] -- register_copy 
    jsr setFAC
    // [78] phi from gen_sintab::@3 to gen_sintab::@4 [phi:gen_sintab::@3->gen_sintab::@4]
  b4_from_b3:
    jmp b4
    // gen_sintab::@4
  b4:
    // [79] call setMEMtoFAC 
    // [158] phi from gen_sintab::@4 to setMEMtoFAC [phi:gen_sintab::@4->setMEMtoFAC]
  setMEMtoFAC_from_b4:
    // [158] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_min#0 [phi:gen_sintab::@4->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_min
    sta setMEMtoFAC.mem
    lda #>f_min
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [80] phi from gen_sintab::@4 to gen_sintab::@5 [phi:gen_sintab::@4->gen_sintab::@5]
  b5_from_b4:
    jmp b5
    // gen_sintab::@5
  b5:
    // [81] call subFACfromARG 
    jsr subFACfromARG
    // [82] phi from gen_sintab::@5 to gen_sintab::@6 [phi:gen_sintab::@5->gen_sintab::@6]
  b6_from_b5:
    jmp b6
    // gen_sintab::@6
  b6:
    // [83] call setMEMtoFAC 
    // [158] phi from gen_sintab::@6 to setMEMtoFAC [phi:gen_sintab::@6->setMEMtoFAC]
  setMEMtoFAC_from_b6:
    // [158] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@6->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta setMEMtoFAC.mem
    lda #>f_amp
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [84] phi from gen_sintab::@6 to gen_sintab::@7 [phi:gen_sintab::@6->gen_sintab::@7]
  b7_from_b6:
    jmp b7
    // gen_sintab::@7
  b7:
    // [85] call setFAC 
    // [153] phi from gen_sintab::@7 to setFAC [phi:gen_sintab::@7->setFAC]
  setFAC_from_b7:
    // [153] phi (word) setFAC::w#5 = (byte) 2 [phi:gen_sintab::@7->setFAC#0] -- vwuz1=vbuc1 
    lda #<2
    sta setFAC.w
    lda #>2
    sta setFAC.w+1
    jsr setFAC
    // [86] phi from gen_sintab::@7 to gen_sintab::@8 [phi:gen_sintab::@7->gen_sintab::@8]
  b8_from_b7:
    jmp b8
    // gen_sintab::@8
  b8:
    // [87] call divMEMbyFAC 
    // [148] phi from gen_sintab::@8 to divMEMbyFAC [phi:gen_sintab::@8->divMEMbyFAC]
  divMEMbyFAC_from_b8:
    // [148] phi (byte*) divMEMbyFAC::mem#2 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@8->divMEMbyFAC#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta divMEMbyFAC.mem
    lda #>f_amp
    sta divMEMbyFAC.mem+1
    jsr divMEMbyFAC
    // [88] phi from gen_sintab::@8 to gen_sintab::@9 [phi:gen_sintab::@8->gen_sintab::@9]
  b9_from_b8:
    jmp b9
    // gen_sintab::@9
  b9:
    // [89] call setMEMtoFAC 
    // [158] phi from gen_sintab::@9 to setMEMtoFAC [phi:gen_sintab::@9->setMEMtoFAC]
  setMEMtoFAC_from_b9:
    // [158] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@9->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta setMEMtoFAC.mem
    lda #>f_amp
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [90] phi from gen_sintab::@9 to gen_sintab::@10 [phi:gen_sintab::@9->gen_sintab::@10]
  b10_from_b9:
    jmp b10
    // gen_sintab::@10
  b10:
    // [91] call addMEMtoFAC 
    // [131] phi from gen_sintab::@10 to addMEMtoFAC [phi:gen_sintab::@10->addMEMtoFAC]
  addMEMtoFAC_from_b10:
    jsr addMEMtoFAC
    // [92] phi from gen_sintab::@10 to gen_sintab::@11 [phi:gen_sintab::@10->gen_sintab::@11]
  b11_from_b10:
    jmp b11
    // gen_sintab::@11
  b11:
    // [93] call setMEMtoFAC 
    // [158] phi from gen_sintab::@11 to setMEMtoFAC [phi:gen_sintab::@11->setMEMtoFAC]
  setMEMtoFAC_from_b11:
    // [158] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_min#0 [phi:gen_sintab::@11->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_min
    sta setMEMtoFAC.mem
    lda #>f_min
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [94] phi from gen_sintab::@11 to gen_sintab::@1 [phi:gen_sintab::@11->gen_sintab::@1]
  b1_from_b11:
    // [94] phi (byte*) progress_cursor#34 = (byte*) progress_init::line#2 [phi:gen_sintab::@11->gen_sintab::@1#0] -- register_copy 
    // [94] phi (byte) progress_idx#34 = (byte) 0 [phi:gen_sintab::@11->gen_sintab::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta progress_idx
    // [94] phi (byte) gen_sintab::i#10 = (byte) 0 [phi:gen_sintab::@11->gen_sintab::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // f_min = min + (max - min) / 2
    // [94] phi from gen_sintab::@21 to gen_sintab::@1 [phi:gen_sintab::@21->gen_sintab::@1]
  b1_from_b21:
    // [94] phi (byte*) progress_cursor#34 = (byte*) progress_cursor#11 [phi:gen_sintab::@21->gen_sintab::@1#0] -- register_copy 
    // [94] phi (byte) progress_idx#34 = (byte) progress_idx#12 [phi:gen_sintab::@21->gen_sintab::@1#1] -- register_copy 
    // [94] phi (byte) gen_sintab::i#10 = (byte) gen_sintab::i#1 [phi:gen_sintab::@21->gen_sintab::@1#2] -- register_copy 
    jmp b1
    // gen_sintab::@1
  b1:
    // [95] (word) setFAC::w#3 ← (word)(byte) gen_sintab::i#10 -- vwuz1=_word_vbuz2 
    lda i
    sta setFAC.w
    lda #0
    sta setFAC.w+1
    // [96] call setFAC 
    // [153] phi from gen_sintab::@1 to setFAC [phi:gen_sintab::@1->setFAC]
  setFAC_from_b1:
    // [153] phi (word) setFAC::w#5 = (word) setFAC::w#3 [phi:gen_sintab::@1->setFAC#0] -- register_copy 
    jsr setFAC
    // [97] phi from gen_sintab::@1 to gen_sintab::@12 [phi:gen_sintab::@1->gen_sintab::@12]
  b12_from_b1:
    jmp b12
    // gen_sintab::@12
  b12:
    // [98] call mulFACbyMEM 
    // [141] phi from gen_sintab::@12 to mulFACbyMEM [phi:gen_sintab::@12->mulFACbyMEM]
  mulFACbyMEM_from_b12:
    // [141] phi (byte*) mulFACbyMEM::mem#2 = (const byte*) gen_sintab::f_2pi#0 [phi:gen_sintab::@12->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_2pi
    sta mulFACbyMEM.mem
    lda #>f_2pi
    sta mulFACbyMEM.mem+1
    jsr mulFACbyMEM
    // [99] phi from gen_sintab::@12 to gen_sintab::@13 [phi:gen_sintab::@12->gen_sintab::@13]
  b13_from_b12:
    jmp b13
    // gen_sintab::@13
  b13:
    // [100] call setMEMtoFAC 
    // [158] phi from gen_sintab::@13 to setMEMtoFAC [phi:gen_sintab::@13->setMEMtoFAC]
  setMEMtoFAC_from_b13:
    // [158] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_i#0 [phi:gen_sintab::@13->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta setMEMtoFAC.mem
    lda #>f_i
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    jmp b14
    // gen_sintab::@14
  b14:
    // [101] (word) setFAC::w#4 ← (word)(byte) gen_sintab::length#10 -- vwuz1=_word_vbuz2 
    lda length
    sta setFAC.w
    lda #0
    sta setFAC.w+1
    // [102] call setFAC 
    // [153] phi from gen_sintab::@14 to setFAC [phi:gen_sintab::@14->setFAC]
  setFAC_from_b14:
    // [153] phi (word) setFAC::w#5 = (word) setFAC::w#4 [phi:gen_sintab::@14->setFAC#0] -- register_copy 
    jsr setFAC
    // [103] phi from gen_sintab::@14 to gen_sintab::@15 [phi:gen_sintab::@14->gen_sintab::@15]
  b15_from_b14:
    jmp b15
    // gen_sintab::@15
  b15:
    // [104] call divMEMbyFAC 
    // [148] phi from gen_sintab::@15 to divMEMbyFAC [phi:gen_sintab::@15->divMEMbyFAC]
  divMEMbyFAC_from_b15:
    // [148] phi (byte*) divMEMbyFAC::mem#2 = (const byte[]) gen_sintab::f_i#0 [phi:gen_sintab::@15->divMEMbyFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta divMEMbyFAC.mem
    lda #>f_i
    sta divMEMbyFAC.mem+1
    jsr divMEMbyFAC
    // [105] phi from gen_sintab::@15 to gen_sintab::@16 [phi:gen_sintab::@15->gen_sintab::@16]
  b16_from_b15:
    jmp b16
    // gen_sintab::@16
  b16:
    // [106] call sinFAC 
    jsr sinFAC
    // [107] phi from gen_sintab::@16 to gen_sintab::@17 [phi:gen_sintab::@16->gen_sintab::@17]
  b17_from_b16:
    jmp b17
    // gen_sintab::@17
  b17:
    // [108] call mulFACbyMEM 
    // [141] phi from gen_sintab::@17 to mulFACbyMEM [phi:gen_sintab::@17->mulFACbyMEM]
  mulFACbyMEM_from_b17:
    // [141] phi (byte*) mulFACbyMEM::mem#2 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@17->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta mulFACbyMEM.mem
    lda #>f_amp
    sta mulFACbyMEM.mem+1
    jsr mulFACbyMEM
    // [109] phi from gen_sintab::@17 to gen_sintab::@18 [phi:gen_sintab::@17->gen_sintab::@18]
  b18_from_b17:
    jmp b18
    // gen_sintab::@18
  b18:
    // [110] call addMEMtoFAC 
    // [131] phi from gen_sintab::@18 to addMEMtoFAC [phi:gen_sintab::@18->addMEMtoFAC]
  addMEMtoFAC_from_b18:
    jsr addMEMtoFAC
    // [111] phi from gen_sintab::@18 to gen_sintab::@19 [phi:gen_sintab::@18->gen_sintab::@19]
  b19_from_b18:
    jmp b19
    // gen_sintab::@19
  b19:
    // [112] call getFAC 
    jsr getFAC
    // [113] (word) getFAC::return#2 ← (word) getFAC::return#0 -- vwuz1=vwuz2 
    lda getFAC.return
    sta getFAC.return_2
    lda getFAC.return+1
    sta getFAC.return_2+1
    jmp b20
    // gen_sintab::@20
  b20:
    // [114] (word~) gen_sintab::$23 ← (word) getFAC::return#2 -- vwuz1=vwuz2 
    lda getFAC.return_2
    sta _23
    lda getFAC.return_2+1
    sta _23+1
    // [115] (byte~) gen_sintab::$24 ← (byte)(word~) gen_sintab::$23 -- vbuz1=_byte_vwuz2 
    lda _23
    sta _24
    // [116] *((byte*) gen_sintab::sintab#12 + (byte) gen_sintab::i#10) ← (byte~) gen_sintab::$24 -- pbuz1_derefidx_vbuz2=vbuz3 
    // fac =  sin( i * 2 * PI / length ) * (max - min) / 2 + min + (max - min) / 2
    lda _24
    ldy i
    sta (sintab),y
    // [117] call progress_inc 
    jsr progress_inc
    jmp b21
    // gen_sintab::@21
  b21:
    // [118] (byte) gen_sintab::i#1 ← ++ (byte) gen_sintab::i#10 -- vbuz1=_inc_vbuz1 
    inc i
    // [119] if((byte) gen_sintab::i#1<(byte) gen_sintab::length#10) goto gen_sintab::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda i
    cmp length
    bcc b1_from_b21
    jmp breturn
    // gen_sintab::@return
  breturn:
    // [120] return 
    rts
    f_i: .byte 0, 0, 0, 0, 0
    // i * 2 * PI
    f_min: .byte 0, 0, 0, 0, 0
    // amplitude/2 + min
    f_amp: .byte 0, 0, 0, 0, 0
}
  // progress_inc
// Increase PETSCII progress one bit
// Done by increasing the character until the idx is 8 and then moving to the next char
progress_inc: {
    // [121] (byte) progress_idx#10 ← ++ (byte) progress_idx#34 -- vbuz1=_inc_vbuz1 
    inc progress_idx
    // [122] if((byte) progress_idx#10!=(byte) 8) goto progress_inc::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp progress_idx
    bne b1_from_progress_inc
    jmp b2
    // progress_inc::@2
  b2:
    // [123] *((byte*) progress_cursor#34) ← *((const byte[]) progress_inc::progress_chars#0+(byte) 8) -- _deref_pbuz1=_deref_pbuc1 
    lda progress_chars+8
    ldy #0
    sta (progress_cursor),y
    // [124] (byte*) progress_cursor#10 ← ++ (byte*) progress_cursor#34 -- pbuz1=_inc_pbuz1 
    inc progress_cursor
    bne !+
    inc progress_cursor+1
  !:
    // [125] phi from progress_inc::@2 to progress_inc::@1 [phi:progress_inc::@2->progress_inc::@1]
  b1_from_b2:
    // [125] phi (byte*) progress_cursor#11 = (byte*) progress_cursor#10 [phi:progress_inc::@2->progress_inc::@1#0] -- register_copy 
    // [125] phi (byte) progress_idx#12 = (byte) 0 [phi:progress_inc::@2->progress_inc::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta progress_idx
    jmp b1
    // [125] phi from progress_inc to progress_inc::@1 [phi:progress_inc->progress_inc::@1]
  b1_from_progress_inc:
    // [125] phi (byte*) progress_cursor#11 = (byte*) progress_cursor#34 [phi:progress_inc->progress_inc::@1#0] -- register_copy 
    // [125] phi (byte) progress_idx#12 = (byte) progress_idx#10 [phi:progress_inc->progress_inc::@1#1] -- register_copy 
    jmp b1
    // progress_inc::@1
  b1:
    // [126] *((byte*) progress_cursor#11) ← *((const byte[]) progress_inc::progress_chars#0 + (byte) progress_idx#12) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy progress_idx
    lda progress_chars,y
    ldy #0
    sta (progress_cursor),y
    jmp breturn
    // progress_inc::@return
  breturn:
    // [127] return 
    rts
    // Progress characters
    progress_chars: .byte $20, $65, $74, $75, $61, $f6, $e7, $ea, $e0
}
  // getFAC
// word = FAC
// Get the value of the FAC (floating point accumulator) as an integer 16bit word
// Destroys the value in the FAC in the process
getFAC: {
    .label return = $3a
    .label return_2 = $35
    // asm { jsr$b1aa sty$fe sta$ff  }
    // Load FAC (floating point accumulator) integer part into word register Y,A
    jsr $b1aa
    sty $fe
    sta $ff
    // [129] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda memLo
    sta return
    lda memHi
    sta return+1
    jmp breturn
    // getFAC::@return
  breturn:
    // [130] return 
    rts
}
  // addMEMtoFAC
// FAC = MEM+FAC
// Set FAC to MEM (float saved in memory) plus FAC (float accumulator)
// Reads 5 bytes from memory
addMEMtoFAC: {
    // [132] call prepareMEM 
    // [135] phi from addMEMtoFAC to prepareMEM [phi:addMEMtoFAC->prepareMEM]
  prepareMEM_from_addMEMtoFAC:
    // [135] phi (byte*) prepareMEM::mem#5 = (const byte[]) gen_sintab::f_min#0 [phi:addMEMtoFAC->prepareMEM#0] -- pbuz1=pbuc1 
    lda #<gen_sintab.f_min
    sta prepareMEM.mem
    lda #>gen_sintab.f_min
    sta prepareMEM.mem+1
    jsr prepareMEM
    jmp b1
    // addMEMtoFAC::@1
  b1:
    // asm { lda$fe ldy$ff jsr$b867  }
    lda $fe
    ldy $ff
    jsr $b867
    jmp breturn
    // addMEMtoFAC::@return
  breturn:
    // [134] return 
    rts
}
  // prepareMEM
// Prepare MEM pointers for operations using MEM
// prepareMEM(byte* zeropage($15) mem)
prepareMEM: {
    .label _0 = $3c
    .label _1 = $3d
    .label mem = $15
    // [136] (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem#5 -- vbuz1=_lo_pbuz2 
    lda mem
    sta _0
    // [137] *((const byte*) memLo#0) ← (byte~) prepareMEM::$0 -- _deref_pbuc1=vbuz1 
    lda _0
    sta memLo
    // [138] (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem#5 -- vbuz1=_hi_pbuz2 
    lda mem+1
    sta _1
    // [139] *((const byte*) memHi#0) ← (byte~) prepareMEM::$1 -- _deref_pbuc1=vbuz1 
    lda _1
    sta memHi
    jmp breturn
    // prepareMEM::@return
  breturn:
    // [140] return 
    rts
}
  // mulFACbyMEM
// FAC = MEM*FAC
// Set FAC to MEM (float saved in memory) multiplied by FAC (float accumulator)
// Reads 5 bytes from memory
// mulFACbyMEM(byte* zeropage($17) mem)
mulFACbyMEM: {
    .label mem = $17
    // [142] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2 -- pbuz1=pbuz2 
    lda mem
    sta prepareMEM.mem
    lda mem+1
    sta prepareMEM.mem+1
    // [143] call prepareMEM 
    // [135] phi from mulFACbyMEM to prepareMEM [phi:mulFACbyMEM->prepareMEM]
  prepareMEM_from_mulFACbyMEM:
    // [135] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#4 [phi:mulFACbyMEM->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
    // mulFACbyMEM::@1
  b1:
    // asm { lda$fe ldy$ff jsr$ba28  }
    lda $fe
    ldy $ff
    jsr $ba28
    jmp breturn
    // mulFACbyMEM::@return
  breturn:
    // [145] return 
    rts
}
  // sinFAC
// FAC = sin(FAC)
// Set FAC to sinus of the FAC - sin(FAC)
// Sinus is calculated on radians (0-2*PI)
sinFAC: {
    // asm { jsr$e26b  }
    jsr $e26b
    jmp breturn
    // sinFAC::@return
  breturn:
    // [147] return 
    rts
}
  // divMEMbyFAC
// FAC = MEM/FAC
// Set FAC to MEM (float saved in memory) divided by FAC (float accumulator)
// Reads 5 bytes from memory
// divMEMbyFAC(byte* zeropage($19) mem)
divMEMbyFAC: {
    .label mem = $19
    // [149] (byte*) prepareMEM::mem#3 ← (byte*) divMEMbyFAC::mem#2 -- pbuz1=pbuz2 
    lda mem
    sta prepareMEM.mem
    lda mem+1
    sta prepareMEM.mem+1
    // [150] call prepareMEM 
    // [135] phi from divMEMbyFAC to prepareMEM [phi:divMEMbyFAC->prepareMEM]
  prepareMEM_from_divMEMbyFAC:
    // [135] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#3 [phi:divMEMbyFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
    // divMEMbyFAC::@1
  b1:
    // asm { lda$fe ldy$ff jsr$bb0f  }
    lda $fe
    ldy $ff
    jsr $bb0f
    jmp breturn
    // divMEMbyFAC::@return
  breturn:
    // [152] return 
    rts
}
  // setFAC
// FAC = word
// Set the FAC (floating point accumulator) to the integer value of a 16bit word
// setFAC(word zeropage($1b) w)
setFAC: {
    .label w = $1b
    // [154] (byte*) prepareMEM::mem#0 ← (byte*)(word) setFAC::w#5 -- pbuz1=pbuz2 
    lda w
    sta prepareMEM.mem
    lda w+1
    sta prepareMEM.mem+1
    // [155] call prepareMEM 
    // [135] phi from setFAC to prepareMEM [phi:setFAC->prepareMEM]
  prepareMEM_from_setFAC:
    // [135] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#0 [phi:setFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
    // setFAC::@1
  b1:
    // asm { ldy$fe lda$ff jsr$b391  }
    // Load word register Y,A into FAC (floating point accumulator)
    ldy $fe
    lda $ff
    jsr $b391
    jmp breturn
    // setFAC::@return
  breturn:
    // [157] return 
    rts
}
  // setMEMtoFAC
// MEM = FAC
// Stores the value of the FAC to memory
// Stores 5 bytes (means it is necessary to allocate 5 bytes to avoid clobbering other data using eg. byte[] mem = {0, 0, 0, 0, 0};)
// setMEMtoFAC(byte* zeropage($1d) mem)
setMEMtoFAC: {
    .label mem = $1d
    // [159] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#5 -- pbuz1=pbuz2 
    lda mem
    sta prepareMEM.mem
    lda mem+1
    sta prepareMEM.mem+1
    // [160] call prepareMEM 
    // [135] phi from setMEMtoFAC to prepareMEM [phi:setMEMtoFAC->prepareMEM]
  prepareMEM_from_setMEMtoFAC:
    // [135] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#1 [phi:setMEMtoFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
    // setMEMtoFAC::@1
  b1:
    // asm { ldx$fe ldy$ff jsr$bbd4  }
    ldx $fe
    ldy $ff
    jsr $bbd4
    jmp breturn
    // setMEMtoFAC::@return
  breturn:
    // [162] return 
    rts
}
  // subFACfromARG
// FAC = ARG-FAC
// Set FAC to ARG minus FAC
subFACfromARG: {
    // asm { jsr$b853  }
    jsr $b853
    jmp breturn
    // subFACfromARG::@return
  breturn:
    // [164] return 
    rts
}
  // setARGtoFAC
// ARG = FAC
// Set the ARG (floating point argument) to the value of the FAC (floating point accumulator)
setARGtoFAC: {
    // asm { jsr$bc0f  }
    jsr $bc0f
    jmp breturn
    // setARGtoFAC::@return
  breturn:
    // [166] return 
    rts
}
  // progress_init
// Initialize the PETSCII progress bar
// progress_init(byte* zeropage($13) line)
progress_init: {
    .label line = $13
    jmp breturn
    // progress_init::@return
  breturn:
    // [168] return 
    rts
}
  // gen_sprites
gen_sprites: {
    .label spr = $20
    .label i = $1f
    // [170] phi from gen_sprites to gen_sprites::@1 [phi:gen_sprites->gen_sprites::@1]
  b1_from_gen_sprites:
    // [170] phi (byte*) gen_sprites::spr#2 = (const byte*) sprites#0 [phi:gen_sprites->gen_sprites::@1#0] -- pbuz1=pbuc1 
    lda #<sprites
    sta spr
    lda #>sprites
    sta spr+1
    // [170] phi (byte) gen_sprites::i#2 = (byte) 0 [phi:gen_sprites->gen_sprites::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
    // [170] phi from gen_sprites::@2 to gen_sprites::@1 [phi:gen_sprites::@2->gen_sprites::@1]
  b1_from_b2:
    // [170] phi (byte*) gen_sprites::spr#2 = (byte*) gen_sprites::spr#1 [phi:gen_sprites::@2->gen_sprites::@1#0] -- register_copy 
    // [170] phi (byte) gen_sprites::i#2 = (byte) gen_sprites::i#1 [phi:gen_sprites::@2->gen_sprites::@1#1] -- register_copy 
    jmp b1
    // gen_sprites::@1
  b1:
    // [171] (byte) gen_chargen_sprite::ch#0 ← *((const byte[]) gen_sprites::cml#0 + (byte) gen_sprites::i#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda cml,y
    sta gen_chargen_sprite.ch
    // [172] (byte*) gen_chargen_sprite::sprite#0 ← (byte*) gen_sprites::spr#2 -- pbuz1=pbuz2 
    lda spr
    sta gen_chargen_sprite.sprite
    lda spr+1
    sta gen_chargen_sprite.sprite+1
    // [173] call gen_chargen_sprite 
    jsr gen_chargen_sprite
    jmp b2
    // gen_sprites::@2
  b2:
    // [174] (byte*) gen_sprites::spr#1 ← (byte*) gen_sprites::spr#2 + (byte) $40 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$40
    clc
    adc spr
    sta spr
    bcc !+
    inc spr+1
  !:
    // [175] (byte) gen_sprites::i#1 ← ++ (byte) gen_sprites::i#2 -- vbuz1=_inc_vbuz1 
    inc i
    // [176] if((byte) gen_sprites::i#1!=(byte) 7) goto gen_sprites::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp i
    bne b1_from_b2
    jmp breturn
    // gen_sprites::@return
  breturn:
    // [177] return 
    rts
    cml: .text "camelot"
}
  // gen_chargen_sprite
// Generate a sprite from a C64 CHARGEN character (by making each pixel 3x3 pixels large)
// - c is the character to generate
// - sprite is a pointer to the position of the sprite to generate
// gen_chargen_sprite(byte zeropage($3e) ch, byte* zeropage($29) sprite)
gen_chargen_sprite: {
    .label _0 = $3f
    .label _1 = $41
    .label _3 = $45
    .label _6 = $46
    .label ch = $3e
    .label sprite = $29
    .label chargen = $43
    .label bits = $23
    .label s_gen = $26
    .label s_gen_cnt = $27
    .label b = $28
    .label x = $24
    .label y = $22
    .label c = $25
    // [178] (word~) gen_chargen_sprite::$0 ← (word)(byte) gen_chargen_sprite::ch#0 -- vwuz1=_word_vbuz2 
    lda ch
    sta _0
    lda #0
    sta _0+1
    // [179] (word~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda _0
    asl
    sta _1
    lda _0+1
    rol
    sta _1+1
    asl _1
    rol _1+1
    asl _1
    rol _1+1
    // [180] (byte*) gen_chargen_sprite::chargen#0 ← (const byte*) CHARGEN#0 + (word~) gen_chargen_sprite::$1 -- pbuz1=pbuc1_plus_vwuz2 
    lda _1
    clc
    adc #<CHARGEN
    sta chargen
    lda _1+1
    adc #>CHARGEN
    sta chargen+1
    // asm { sei  }
    sei
    // [182] *((const byte*) PROCPORT#0) ← (byte) $32 -- _deref_pbuc1=vbuc2 
    lda #$32
    sta PROCPORT
    // [183] phi from gen_chargen_sprite to gen_chargen_sprite::@1 [phi:gen_chargen_sprite->gen_chargen_sprite::@1]
  b1_from_gen_chargen_sprite:
    // [183] phi (byte*) gen_chargen_sprite::sprite#11 = (byte*) gen_chargen_sprite::sprite#0 [phi:gen_chargen_sprite->gen_chargen_sprite::@1#0] -- register_copy 
    // [183] phi (byte) gen_chargen_sprite::y#2 = (byte) 0 [phi:gen_chargen_sprite->gen_chargen_sprite::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta y
    jmp b1
    // [183] phi from gen_chargen_sprite::@8 to gen_chargen_sprite::@1 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@1]
  b1_from_b8:
    // [183] phi (byte*) gen_chargen_sprite::sprite#11 = (byte*) gen_chargen_sprite::sprite#2 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@1#0] -- register_copy 
    // [183] phi (byte) gen_chargen_sprite::y#2 = (byte) gen_chargen_sprite::y#1 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@1#1] -- register_copy 
    jmp b1
    // gen_chargen_sprite::@1
  b1:
    // [184] (byte) gen_chargen_sprite::bits#0 ← *((byte*) gen_chargen_sprite::chargen#0 + (byte) gen_chargen_sprite::y#2) -- vbuz1=pbuz2_derefidx_vbuz3 
    // current chargen line
    ldy y
    lda (chargen),y
    sta bits
    // [185] phi from gen_chargen_sprite::@1 to gen_chargen_sprite::@2 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2]
  b2_from_b1:
    // [185] phi (byte) gen_chargen_sprite::x#6 = (byte) 0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta x
    // [185] phi (byte*) gen_chargen_sprite::sprite#10 = (byte*) gen_chargen_sprite::sprite#11 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#1] -- register_copy 
    // [185] phi (byte) gen_chargen_sprite::s_gen_cnt#4 = (byte) 0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#2] -- vbuz1=vbuc1 
    lda #0
    sta s_gen_cnt
    // [185] phi (byte) gen_chargen_sprite::s_gen#5 = (byte) 0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta s_gen
    // [185] phi (byte) gen_chargen_sprite::bits#2 = (byte) gen_chargen_sprite::bits#0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#4] -- register_copy 
    jmp b2
    // [185] phi from gen_chargen_sprite::@7 to gen_chargen_sprite::@2 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@2]
  b2_from_b7:
    // [185] phi (byte) gen_chargen_sprite::x#6 = (byte) gen_chargen_sprite::x#1 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@2#0] -- register_copy 
    // [185] phi (byte*) gen_chargen_sprite::sprite#10 = (byte*) gen_chargen_sprite::sprite#4 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@2#1] -- register_copy 
    // [185] phi (byte) gen_chargen_sprite::s_gen_cnt#4 = (byte) gen_chargen_sprite::s_gen_cnt#5 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@2#2] -- register_copy 
    // [185] phi (byte) gen_chargen_sprite::s_gen#5 = (byte) gen_chargen_sprite::s_gen#6 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@2#3] -- register_copy 
    // [185] phi (byte) gen_chargen_sprite::bits#2 = (byte) gen_chargen_sprite::bits#1 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@2#4] -- register_copy 
    jmp b2
    // gen_chargen_sprite::@2
  b2:
    // [186] (byte~) gen_chargen_sprite::$3 ← (byte) gen_chargen_sprite::bits#2 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and bits
    sta _3
    // [187] if((byte~) gen_chargen_sprite::$3==(byte) 0) goto gen_chargen_sprite::@3 -- vbuz1_eq_0_then_la1 
    lda _3
    cmp #0
    beq b3_from_b2
    // [188] phi from gen_chargen_sprite::@2 to gen_chargen_sprite::@10 [phi:gen_chargen_sprite::@2->gen_chargen_sprite::@10]
  b10_from_b2:
    jmp b10
    // gen_chargen_sprite::@10
  b10:
    // [189] phi from gen_chargen_sprite::@10 to gen_chargen_sprite::@3 [phi:gen_chargen_sprite::@10->gen_chargen_sprite::@3]
  b3_from_b10:
    // [189] phi (byte) gen_chargen_sprite::c#3 = (byte) 1 [phi:gen_chargen_sprite::@10->gen_chargen_sprite::@3#0] -- vbuz1=vbuc1 
    lda #1
    sta c
    jmp b3
    // [189] phi from gen_chargen_sprite::@2 to gen_chargen_sprite::@3 [phi:gen_chargen_sprite::@2->gen_chargen_sprite::@3]
  b3_from_b2:
    // [189] phi (byte) gen_chargen_sprite::c#3 = (byte) 0 [phi:gen_chargen_sprite::@2->gen_chargen_sprite::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta c
    jmp b3
    // gen_chargen_sprite::@3
  b3:
    // [190] phi from gen_chargen_sprite::@3 to gen_chargen_sprite::@4 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4]
  b4_from_b3:
    // [190] phi (byte*) gen_chargen_sprite::sprite#3 = (byte*) gen_chargen_sprite::sprite#10 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#0] -- register_copy 
    // [190] phi (byte) gen_chargen_sprite::b#2 = (byte) 0 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta b
    // [190] phi (byte) gen_chargen_sprite::s_gen_cnt#3 = (byte) gen_chargen_sprite::s_gen_cnt#4 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#2] -- register_copy 
    // [190] phi (byte) gen_chargen_sprite::s_gen#3 = (byte) gen_chargen_sprite::s_gen#5 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#3] -- register_copy 
    jmp b4
  // generate 3 pixels in the sprite byte (s_gen)
    // [190] phi from gen_chargen_sprite::@5 to gen_chargen_sprite::@4 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4]
  b4_from_b5:
    // [190] phi (byte*) gen_chargen_sprite::sprite#3 = (byte*) gen_chargen_sprite::sprite#4 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#0] -- register_copy 
    // [190] phi (byte) gen_chargen_sprite::b#2 = (byte) gen_chargen_sprite::b#1 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#1] -- register_copy 
    // [190] phi (byte) gen_chargen_sprite::s_gen_cnt#3 = (byte) gen_chargen_sprite::s_gen_cnt#5 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#2] -- register_copy 
    // [190] phi (byte) gen_chargen_sprite::s_gen#3 = (byte) gen_chargen_sprite::s_gen#6 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#3] -- register_copy 
    jmp b4
    // gen_chargen_sprite::@4
  b4:
    // [191] (byte~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda s_gen
    asl
    sta _6
    // [192] (byte) gen_chargen_sprite::s_gen#1 ← (byte~) gen_chargen_sprite::$6 | (byte) gen_chargen_sprite::c#3 -- vbuz1=vbuz2_bor_vbuz3 
    lda _6
    ora c
    sta s_gen
    // [193] (byte) gen_chargen_sprite::s_gen_cnt#1 ← ++ (byte) gen_chargen_sprite::s_gen_cnt#3 -- vbuz1=_inc_vbuz1 
    inc s_gen_cnt
    // [194] if((byte) gen_chargen_sprite::s_gen_cnt#1!=(byte) 8) goto gen_chargen_sprite::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp s_gen_cnt
    bne b5_from_b4
    jmp b6
    // gen_chargen_sprite::@6
  b6:
    // [195] *((byte*) gen_chargen_sprite::sprite#3) ← (byte) gen_chargen_sprite::s_gen#1 -- _deref_pbuz1=vbuz2 
    // sprite byte filled - store and move to next byte
    lda s_gen
    ldy #0
    sta (sprite),y
    // [196] *((byte*) gen_chargen_sprite::sprite#3 + (byte) 3) ← (byte) gen_chargen_sprite::s_gen#1 -- pbuz1_derefidx_vbuc1=vbuz2 
    lda s_gen
    ldy #3
    sta (sprite),y
    // [197] *((byte*) gen_chargen_sprite::sprite#3 + (byte) 6) ← (byte) gen_chargen_sprite::s_gen#1 -- pbuz1_derefidx_vbuc1=vbuz2 
    lda s_gen
    ldy #6
    sta (sprite),y
    // [198] (byte*) gen_chargen_sprite::sprite#1 ← ++ (byte*) gen_chargen_sprite::sprite#3 -- pbuz1=_inc_pbuz1 
    inc sprite
    bne !+
    inc sprite+1
  !:
    // [199] phi from gen_chargen_sprite::@6 to gen_chargen_sprite::@5 [phi:gen_chargen_sprite::@6->gen_chargen_sprite::@5]
  b5_from_b6:
    // [199] phi (byte*) gen_chargen_sprite::sprite#4 = (byte*) gen_chargen_sprite::sprite#1 [phi:gen_chargen_sprite::@6->gen_chargen_sprite::@5#0] -- register_copy 
    // [199] phi (byte) gen_chargen_sprite::s_gen_cnt#5 = (byte) 0 [phi:gen_chargen_sprite::@6->gen_chargen_sprite::@5#1] -- vbuz1=vbuc1 
    lda #0
    sta s_gen_cnt
    // [199] phi (byte) gen_chargen_sprite::s_gen#6 = (byte) 0 [phi:gen_chargen_sprite::@6->gen_chargen_sprite::@5#2] -- vbuz1=vbuc1 
    lda #0
    sta s_gen
    jmp b5
    // [199] phi from gen_chargen_sprite::@4 to gen_chargen_sprite::@5 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5]
  b5_from_b4:
    // [199] phi (byte*) gen_chargen_sprite::sprite#4 = (byte*) gen_chargen_sprite::sprite#3 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5#0] -- register_copy 
    // [199] phi (byte) gen_chargen_sprite::s_gen_cnt#5 = (byte) gen_chargen_sprite::s_gen_cnt#1 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5#1] -- register_copy 
    // [199] phi (byte) gen_chargen_sprite::s_gen#6 = (byte) gen_chargen_sprite::s_gen#1 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5#2] -- register_copy 
    jmp b5
    // gen_chargen_sprite::@5
  b5:
    // [200] (byte) gen_chargen_sprite::b#1 ← ++ (byte) gen_chargen_sprite::b#2 -- vbuz1=_inc_vbuz1 
    inc b
    // [201] if((byte) gen_chargen_sprite::b#1!=(byte) 3) goto gen_chargen_sprite::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp b
    bne b4_from_b5
    jmp b7
    // gen_chargen_sprite::@7
  b7:
    // [202] (byte) gen_chargen_sprite::bits#1 ← (byte) gen_chargen_sprite::bits#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl bits
    // [203] (byte) gen_chargen_sprite::x#1 ← ++ (byte) gen_chargen_sprite::x#6 -- vbuz1=_inc_vbuz1 
    inc x
    // [204] if((byte) gen_chargen_sprite::x#1!=(byte) 8) goto gen_chargen_sprite::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp x
    bne b2_from_b7
    jmp b8
    // gen_chargen_sprite::@8
  b8:
    // [205] (byte*) gen_chargen_sprite::sprite#2 ← (byte*) gen_chargen_sprite::sprite#4 + (byte) 6 -- pbuz1=pbuz1_plus_vbuc1 
    lda #6
    clc
    adc sprite
    sta sprite
    bcc !+
    inc sprite+1
  !:
    // [206] (byte) gen_chargen_sprite::y#1 ← ++ (byte) gen_chargen_sprite::y#2 -- vbuz1=_inc_vbuz1 
    inc y
    // [207] if((byte) gen_chargen_sprite::y#1!=(byte) 8) goto gen_chargen_sprite::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp y
    bne b1_from_b8
    jmp b9
    // gen_chargen_sprite::@9
  b9:
    // [208] *((const byte*) PROCPORT#0) ← (byte) $37 -- _deref_pbuc1=vbuc2 
    lda #$37
    sta PROCPORT
    // asm { cli  }
    cli
    jmp breturn
    // gen_chargen_sprite::@return
  breturn:
    // [210] return 
    rts
}
  // place_sprites
place_sprites: {
    .label sprites_ptr = SCREEN+$3f8
    .label spr_id = $2b
    .label spr_x = $2d
    .label col = $2f
    .label j2 = $47
    .label j2_2 = $2e
    .label j = $2c
    .label j2_3 = $2e
    // [211] *((const byte*) SPRITES_ENABLE#0) ← (byte) $7f -- _deref_pbuc1=vbuc2 
    lda #$7f
    sta SPRITES_ENABLE
    // [212] *((const byte*) SPRITES_EXPAND_X#0) ← (byte) $7f -- _deref_pbuc1=vbuc2 
    lda #$7f
    sta SPRITES_EXPAND_X
    // [213] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte) $7f -- _deref_pbuc1=vbuc2 
    lda #$7f
    sta SPRITES_EXPAND_Y
    // [214] phi from place_sprites to place_sprites::@1 [phi:place_sprites->place_sprites::@1]
  b1_from_place_sprites:
    // [214] phi (byte) place_sprites::col#2 = (byte) 5 [phi:place_sprites->place_sprites::@1#0] -- vbuz1=vbuc1 
    lda #5
    sta col
    // [214] phi (byte) place_sprites::j2#3 = (byte) 0 [phi:place_sprites->place_sprites::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta j2_3
    // [214] phi (byte) place_sprites::spr_x#2 = (byte) $3c [phi:place_sprites->place_sprites::@1#2] -- vbuz1=vbuc1 
    lda #$3c
    sta spr_x
    // [214] phi (byte) place_sprites::j#2 = (byte) 0 [phi:place_sprites->place_sprites::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta j
    // [214] phi (byte) place_sprites::spr_id#2 = (byte)(word)(const byte*) sprites#0/(byte) $40 [phi:place_sprites->place_sprites::@1#4] -- vbuz1=vbuc1 
    lda #sprites/$40
    sta spr_id
    jmp b1
    // [214] phi from place_sprites::@1 to place_sprites::@1 [phi:place_sprites::@1->place_sprites::@1]
  b1_from_b1:
    // [214] phi (byte) place_sprites::col#2 = (byte) place_sprites::col#1 [phi:place_sprites::@1->place_sprites::@1#0] -- register_copy 
    // [214] phi (byte) place_sprites::j2#3 = (byte) place_sprites::j2#2 [phi:place_sprites::@1->place_sprites::@1#1] -- register_copy 
    // [214] phi (byte) place_sprites::spr_x#2 = (byte) place_sprites::spr_x#1 [phi:place_sprites::@1->place_sprites::@1#2] -- register_copy 
    // [214] phi (byte) place_sprites::j#2 = (byte) place_sprites::j#1 [phi:place_sprites::@1->place_sprites::@1#3] -- register_copy 
    // [214] phi (byte) place_sprites::spr_id#2 = (byte) place_sprites::spr_id#1 [phi:place_sprites::@1->place_sprites::@1#4] -- register_copy 
    jmp b1
    // place_sprites::@1
  b1:
    // [215] *((const byte*) place_sprites::sprites_ptr#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::spr_id#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda spr_id
    ldy j
    sta sprites_ptr,y
    // [216] (byte) place_sprites::spr_id#1 ← ++ (byte) place_sprites::spr_id#2 -- vbuz1=_inc_vbuz1 
    inc spr_id
    // [217] *((const byte*) SPRITES_XPOS#0 + (byte) place_sprites::j2#3) ← (byte) place_sprites::spr_x#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda spr_x
    ldy j2_3
    sta SPRITES_XPOS,y
    // [218] *((const byte*) SPRITES_YPOS#0 + (byte) place_sprites::j2#3) ← (byte) $50 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #$50
    ldy j2_3
    sta SPRITES_YPOS,y
    // [219] *((const byte*) SPRITES_COLS#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::col#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda col
    ldy j
    sta SPRITES_COLS,y
    // [220] (byte) place_sprites::spr_x#1 ← (byte) place_sprites::spr_x#2 + (byte) $20 -- vbuz1=vbuz1_plus_vbuc1 
    lax spr_x
    axs #-[$20]
    stx spr_x
    // [221] (byte) place_sprites::col#1 ← (byte) place_sprites::col#2 ^ (byte)(number) 7^(number) 5 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #7^5
    eor col
    sta col
    // [222] (byte) place_sprites::j2#1 ← ++ (byte) place_sprites::j2#3 -- vbuz1=_inc_vbuz2 
    ldy j2_3
    iny
    sty j2
    // [223] (byte) place_sprites::j2#2 ← ++ (byte) place_sprites::j2#1 -- vbuz1=_inc_vbuz2 
    ldy j2
    iny
    sty j2_2
    // [224] (byte) place_sprites::j#1 ← ++ (byte) place_sprites::j#2 -- vbuz1=_inc_vbuz1 
    inc j
    // [225] if((byte) place_sprites::j#1!=(byte) 7) goto place_sprites::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp j
    bne b1_from_b1
    jmp breturn
    // place_sprites::@return
  breturn:
    // [226] return 
    rts
}
  // File Data
  sintab_x: .fill $dd, 0
  sintab_y: .fill $c5, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp ZP_BYTE:51 [ anim::$7 ] has ALU potential.
Statement [7] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@1 [ sin_idx_x#13 sin_idx_y#13 ] ( main:2 [ sin_idx_x#13 sin_idx_y#13 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ]
Statement [14] (word) anim::x#0 ← (word) $1e + *((const byte[$dd]) sintab_x#0 + (byte) anim::xidx#3) [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::x_msb#2 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::x_msb#2 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ anim::x_msb#2 anim::x_msb#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ anim::j2#2 anim::j2#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ anim::yidx#3 anim::yidx#0 anim::yidx#6 anim::yidx#1 anim::yidx#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ anim::j#2 anim::j#1 ]
Statement [15] (byte~) anim::$6 ← (byte) anim::x_msb#2 << (byte) 1 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 anim::$6 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 anim::$6 ] ) always clobbers reg byte a 
Statement [18] (byte~) anim::$9 ← < (word) anim::x#0 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::$9 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::$9 ] ) always clobbers reg byte a 
Statement [20] *((const byte*) SPRITES_YPOS#0 + (byte) anim::j2#2) ← *((const byte[$c5]) sintab_y#0 + (byte) anim::yidx#3) [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 ] ) always clobbers reg byte a 
Statement [21] (byte) anim::xidx#1 ← (byte) anim::xidx#3 + (byte) $a [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#1 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#1 ] ) always clobbers reg byte a 
Statement [23] (byte) anim::xidx#2 ← (byte) anim::xidx#1 - (const byte) sinlen_x#0 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#2 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#2 ] ) always clobbers reg byte a 
Statement [25] (byte) anim::yidx#1 ← (byte) anim::yidx#3 + (byte) 8 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#1 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#1 ] ) always clobbers reg byte a 
Statement [27] (byte) anim::yidx#2 ← (byte) anim::yidx#1 - (const byte) sinlen_y#0 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#2 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#2 ] ) always clobbers reg byte a 
Statement [46] *((const byte*) COLS#0 + (byte) init::i#2) ← (byte) 0 [ init::i#2 ] ( main:2::init:5 [ init::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ init::i#2 init::i#1 ]
Statement [47] *((const byte*) COLS#0+(byte) $28 + (byte) init::i#2) ← (byte) $b [ init::i#2 ] ( main:2::init:5 [ init::i#2 ] ) always clobbers reg byte a 
Statement [67] *((byte*) clear_screen::sc#2) ← (byte) ' ' [ clear_screen::sc#2 ] ( main:2::init:5::clear_screen:44 [ clear_screen::sc#2 ] main:2::init:5::clear_screen:63 [ clear_screen::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [69] if((byte*) clear_screen::sc#1<(const byte*) SCREEN#0+(word) $3e8) goto clear_screen::@1 [ clear_screen::sc#1 ] ( main:2::init:5::clear_screen:44 [ clear_screen::sc#1 ] main:2::init:5::clear_screen:63 [ clear_screen::sc#1 ] ) always clobbers reg byte a 
Statement [72] (word) setFAC::w#0 ← (word)(byte) gen_sintab::max#2 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#0 progress_init::line#2 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#0 progress_init::line#2 ] main:2::init:5::gen_sintab:61 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#0 progress_init::line#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:13 [ gen_sintab::min#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:14 [ gen_sintab::length#10 ]
Statement [76] (word) setFAC::w#1 ← (word)(byte) gen_sintab::min#2 [ gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#1 progress_init::line#2 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#1 progress_init::line#2 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#1 progress_init::line#2 ] ) always clobbers reg byte a 
Statement [95] (word) setFAC::w#3 ← (word)(byte) gen_sintab::i#10 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#3 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#3 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:17 [ gen_sintab::i#10 gen_sintab::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:18 [ progress_idx#34 progress_idx#12 progress_idx#10 ]
Statement [101] (word) setFAC::w#4 ← (word)(byte) gen_sintab::length#10 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#4 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#4 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#4 ] ) always clobbers reg byte a 
Statement [113] (word) getFAC::return#2 ← (word) getFAC::return#0 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#2 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#2 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#2 ] ) always clobbers reg byte a 
Statement [114] (word~) gen_sintab::$23 ← (word) getFAC::return#2 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$23 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$23 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$23 ] ) always clobbers reg byte a 
Statement [115] (byte~) gen_sintab::$24 ← (byte)(word~) gen_sintab::$23 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$24 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$24 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$24 ] ) always clobbers reg byte a 
Statement [123] *((byte*) progress_cursor#34) ← *((const byte[]) progress_inc::progress_chars#0+(byte) 8) [ progress_cursor#34 ] ( main:2::init:5::gen_sintab:57::progress_inc:117 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_cursor#34 ] main:2::init:5::gen_sintab:61::progress_inc:117 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_cursor#34 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:14 [ gen_sintab::length#10 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:17 [ gen_sintab::i#10 gen_sintab::i#1 ]
Statement [126] *((byte*) progress_cursor#11) ← *((const byte[]) progress_inc::progress_chars#0 + (byte) progress_idx#12) [ progress_idx#12 progress_cursor#11 ] ( main:2::init:5::gen_sintab:57::progress_inc:117 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#12 progress_cursor#11 ] main:2::init:5::gen_sintab:61::progress_inc:117 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#12 progress_cursor#11 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:18 [ progress_idx#34 progress_idx#12 progress_idx#10 ]
Statement asm { jsr$b1aa sty$fe sta$ff  } always clobbers reg byte a reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:14 [ gen_sintab::length#10 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:17 [ gen_sintab::i#10 gen_sintab::i#1 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:18 [ progress_idx#34 progress_idx#12 progress_idx#10 ]
Statement [129] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) [ getFAC::return#0 ] ( main:2::init:5::gen_sintab:57::getFAC:112 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#0 ] main:2::init:5::gen_sintab:61::getFAC:112 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#0 ] ) always clobbers reg byte a 
Statement asm { lda$fe ldy$ff jsr$b867  } always clobbers reg byte a reg byte x reg byte y 
Statement [142] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2 [ prepareMEM::mem#4 ] ( main:2::init:5::gen_sintab:57::mulFACbyMEM:98 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] main:2::init:5::gen_sintab:61::mulFACbyMEM:98 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] main:2::init:5::gen_sintab:57::mulFACbyMEM:108 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] main:2::init:5::gen_sintab:61::mulFACbyMEM:108 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] ) always clobbers reg byte a 
Statement asm { lda$fe ldy$ff jsr$ba28  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { jsr$e26b  } always clobbers reg byte a reg byte x reg byte y 
Statement [149] (byte*) prepareMEM::mem#3 ← (byte*) divMEMbyFAC::mem#2 [ prepareMEM::mem#3 ] ( main:2::init:5::gen_sintab:57::divMEMbyFAC:87 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#3 ] main:2::init:5::gen_sintab:61::divMEMbyFAC:87 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#3 ] main:2::init:5::gen_sintab:57::divMEMbyFAC:104 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#3 ] main:2::init:5::gen_sintab:61::divMEMbyFAC:104 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#3 ] ) always clobbers reg byte a 
Statement asm { lda$fe ldy$ff jsr$bb0f  } always clobbers reg byte a reg byte x reg byte y 
Statement [154] (byte*) prepareMEM::mem#0 ← (byte*)(word) setFAC::w#5 [ prepareMEM::mem#0 ] ( main:2::init:5::gen_sintab:57::setFAC:73 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:61::setFAC:73 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:57::setFAC:77 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:61::setFAC:77 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:57::setFAC:85 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:61::setFAC:85 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:57::setFAC:96 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:61::setFAC:96 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:57::setFAC:102 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:61::setFAC:102 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#0 ] ) always clobbers reg byte a 
Statement asm { ldy$fe lda$ff jsr$b391  } always clobbers reg byte a reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:13 [ gen_sintab::min#2 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:13 [ gen_sintab::min#2 ]
Statement [159] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#5 [ prepareMEM::mem#1 ] ( main:2::init:5::gen_sintab:57::setMEMtoFAC:79 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:79 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:83 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:83 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:89 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:89 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:93 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:93 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:100 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:100 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#1 ] ) always clobbers reg byte a 
Statement asm { ldx$fe ldy$ff jsr$bbd4  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { jsr$b853  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { jsr$bc0f  } always clobbers reg byte a reg byte x 
Statement [172] (byte*) gen_chargen_sprite::sprite#0 ← (byte*) gen_sprites::spr#2 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::ch#0 gen_chargen_sprite::sprite#0 ] ( main:2::init:5::gen_sprites:53 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::ch#0 gen_chargen_sprite::sprite#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:31 [ gen_sprites::i#2 gen_sprites::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:62 [ gen_chargen_sprite::ch#0 ]
Statement [174] (byte*) gen_sprites::spr#1 ← (byte*) gen_sprites::spr#2 + (byte) $40 [ gen_sprites::i#2 gen_sprites::spr#1 ] ( main:2::init:5::gen_sprites:53 [ gen_sprites::i#2 gen_sprites::spr#1 ] ) always clobbers reg byte a 
Statement [178] (word~) gen_chargen_sprite::$0 ← (word)(byte) gen_chargen_sprite::ch#0 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::$0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::$0 ] ) always clobbers reg byte a 
Statement [179] (word~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 << (byte) 3 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::$1 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::$1 ] ) always clobbers reg byte a 
Statement [180] (byte*) gen_chargen_sprite::chargen#0 ← (const byte*) CHARGEN#0 + (word~) gen_chargen_sprite::$1 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ) always clobbers reg byte a 
Statement [182] *((const byte*) PROCPORT#0) ← (byte) $32 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ) always clobbers reg byte a 
Statement [184] (byte) gen_chargen_sprite::bits#0 ← *((byte*) gen_chargen_sprite::chargen#0 + (byte) gen_chargen_sprite::y#2) [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#11 gen_chargen_sprite::bits#0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#11 gen_chargen_sprite::bits#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:34 [ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ]
Statement [191] (byte~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 << (byte) 1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::$6 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::$6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:35 [ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:36 [ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:37 [ gen_chargen_sprite::c#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:39 [ gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::s_gen_cnt#5 gen_chargen_sprite::s_gen_cnt#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:40 [ gen_chargen_sprite::b#2 gen_chargen_sprite::b#1 ]
Statement [195] *((byte*) gen_chargen_sprite::sprite#3) ← (byte) gen_chargen_sprite::s_gen#1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:31 [ gen_sprites::i#2 gen_sprites::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:34 [ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:35 [ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:36 [ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:37 [ gen_chargen_sprite::c#3 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:40 [ gen_chargen_sprite::b#2 gen_chargen_sprite::b#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:38 [ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ]
Statement [196] *((byte*) gen_chargen_sprite::sprite#3 + (byte) 3) ← (byte) gen_chargen_sprite::s_gen#1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ) always clobbers reg byte y 
Statement [197] *((byte*) gen_chargen_sprite::sprite#3 + (byte) 6) ← (byte) gen_chargen_sprite::s_gen#1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 ] ) always clobbers reg byte y 
Statement [205] (byte*) gen_chargen_sprite::sprite#2 ← (byte*) gen_chargen_sprite::sprite#4 + (byte) 6 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#2 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#2 ] ) always clobbers reg byte a 
Statement [208] *((const byte*) PROCPORT#0) ← (byte) $37 [ ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 ] ) always clobbers reg byte a 
Statement [211] *((const byte*) SPRITES_ENABLE#0) ← (byte) $7f [ ] ( main:2::init:5::place_sprites:51 [ ] ) always clobbers reg byte a 
Statement [212] *((const byte*) SPRITES_EXPAND_X#0) ← (byte) $7f [ ] ( main:2::init:5::place_sprites:51 [ ] ) always clobbers reg byte a 
Statement [213] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte) $7f [ ] ( main:2::init:5::place_sprites:51 [ ] ) always clobbers reg byte a 
Statement [218] *((const byte*) SPRITES_YPOS#0 + (byte) place_sprites::j2#3) ← (byte) $50 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:44 [ place_sprites::j#2 place_sprites::j#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:45 [ place_sprites::spr_x#2 place_sprites::spr_x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:46 [ place_sprites::j2#3 place_sprites::j2#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:47 [ place_sprites::col#2 place_sprites::col#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:43 [ place_sprites::spr_id#2 place_sprites::spr_id#1 ]
Statement [219] *((const byte*) SPRITES_COLS#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::col#2 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ) always clobbers reg byte a 
Statement [220] (byte) place_sprites::spr_x#1 ← (byte) place_sprites::spr_x#2 + (byte) $20 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 place_sprites::spr_x#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 place_sprites::spr_x#1 ] ) always clobbers reg byte a 
Statement [221] (byte) place_sprites::col#1 ← (byte) place_sprites::col#2 ^ (byte)(number) 7^(number) 5 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::spr_id#1 place_sprites::spr_x#1 place_sprites::col#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::spr_id#1 place_sprites::spr_x#1 place_sprites::col#1 ] ) always clobbers reg byte a 
Statement [7] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@1 [ sin_idx_x#13 sin_idx_y#13 ] ( main:2 [ sin_idx_x#13 sin_idx_y#13 ] ) always clobbers reg byte a 
Statement [14] (word) anim::x#0 ← (word) $1e + *((const byte[$dd]) sintab_x#0 + (byte) anim::xidx#3) [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::x_msb#2 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::x_msb#2 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 ] ) always clobbers reg byte a 
Statement [15] (byte~) anim::$6 ← (byte) anim::x_msb#2 << (byte) 1 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 anim::$6 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 anim::$6 ] ) always clobbers reg byte a 
Statement [18] (byte~) anim::$9 ← < (word) anim::x#0 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::$9 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::$9 ] ) always clobbers reg byte a 
Statement [20] *((const byte*) SPRITES_YPOS#0 + (byte) anim::j2#2) ← *((const byte[$c5]) sintab_y#0 + (byte) anim::yidx#3) [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 ] ) always clobbers reg byte a 
Statement [21] (byte) anim::xidx#1 ← (byte) anim::xidx#3 + (byte) $a [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#1 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#1 ] ) always clobbers reg byte a 
Statement [23] (byte) anim::xidx#2 ← (byte) anim::xidx#1 - (const byte) sinlen_x#0 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#2 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#2 ] ) always clobbers reg byte a 
Statement [25] (byte) anim::yidx#1 ← (byte) anim::yidx#3 + (byte) 8 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#1 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#1 ] ) always clobbers reg byte a 
Statement [27] (byte) anim::yidx#2 ← (byte) anim::yidx#1 - (const byte) sinlen_y#0 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#2 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#2 ] ) always clobbers reg byte a 
Statement [46] *((const byte*) COLS#0 + (byte) init::i#2) ← (byte) 0 [ init::i#2 ] ( main:2::init:5 [ init::i#2 ] ) always clobbers reg byte a 
Statement [47] *((const byte*) COLS#0+(byte) $28 + (byte) init::i#2) ← (byte) $b [ init::i#2 ] ( main:2::init:5 [ init::i#2 ] ) always clobbers reg byte a 
Statement [67] *((byte*) clear_screen::sc#2) ← (byte) ' ' [ clear_screen::sc#2 ] ( main:2::init:5::clear_screen:44 [ clear_screen::sc#2 ] main:2::init:5::clear_screen:63 [ clear_screen::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [69] if((byte*) clear_screen::sc#1<(const byte*) SCREEN#0+(word) $3e8) goto clear_screen::@1 [ clear_screen::sc#1 ] ( main:2::init:5::clear_screen:44 [ clear_screen::sc#1 ] main:2::init:5::clear_screen:63 [ clear_screen::sc#1 ] ) always clobbers reg byte a 
Statement [72] (word) setFAC::w#0 ← (word)(byte) gen_sintab::max#2 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#0 progress_init::line#2 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#0 progress_init::line#2 ] main:2::init:5::gen_sintab:61 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#0 progress_init::line#2 ] ) always clobbers reg byte a 
Statement [76] (word) setFAC::w#1 ← (word)(byte) gen_sintab::min#2 [ gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#1 progress_init::line#2 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#1 progress_init::line#2 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#1 progress_init::line#2 ] ) always clobbers reg byte a 
Statement [95] (word) setFAC::w#3 ← (word)(byte) gen_sintab::i#10 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#3 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#3 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#3 ] ) always clobbers reg byte a 
Statement [101] (word) setFAC::w#4 ← (word)(byte) gen_sintab::length#10 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#4 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#4 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#4 ] ) always clobbers reg byte a 
Statement [113] (word) getFAC::return#2 ← (word) getFAC::return#0 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#2 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#2 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#2 ] ) always clobbers reg byte a 
Statement [114] (word~) gen_sintab::$23 ← (word) getFAC::return#2 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$23 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$23 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$23 ] ) always clobbers reg byte a 
Statement [115] (byte~) gen_sintab::$24 ← (byte)(word~) gen_sintab::$23 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$24 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$24 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$24 ] ) always clobbers reg byte a 
Statement [116] *((byte*) gen_sintab::sintab#12 + (byte) gen_sintab::i#10) ← (byte~) gen_sintab::$24 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 ] ) always clobbers reg byte y 
Statement [119] if((byte) gen_sintab::i#1<(byte) gen_sintab::length#10) goto gen_sintab::@1 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#1 progress_idx#12 progress_cursor#11 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#1 progress_idx#12 progress_cursor#11 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#1 progress_idx#12 progress_cursor#11 ] ) always clobbers reg byte a 
Statement [122] if((byte) progress_idx#10!=(byte) 8) goto progress_inc::@1 [ progress_cursor#34 progress_idx#10 ] ( main:2::init:5::gen_sintab:57::progress_inc:117 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_cursor#34 progress_idx#10 ] main:2::init:5::gen_sintab:61::progress_inc:117 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_cursor#34 progress_idx#10 ] ) always clobbers reg byte a 
Statement [123] *((byte*) progress_cursor#34) ← *((const byte[]) progress_inc::progress_chars#0+(byte) 8) [ progress_cursor#34 ] ( main:2::init:5::gen_sintab:57::progress_inc:117 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_cursor#34 ] main:2::init:5::gen_sintab:61::progress_inc:117 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_cursor#34 ] ) always clobbers reg byte a reg byte y 
Statement [126] *((byte*) progress_cursor#11) ← *((const byte[]) progress_inc::progress_chars#0 + (byte) progress_idx#12) [ progress_idx#12 progress_cursor#11 ] ( main:2::init:5::gen_sintab:57::progress_inc:117 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#12 progress_cursor#11 ] main:2::init:5::gen_sintab:61::progress_inc:117 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#12 progress_cursor#11 ] ) always clobbers reg byte a reg byte y 
Statement asm { jsr$b1aa sty$fe sta$ff  } always clobbers reg byte a reg byte x reg byte y 
Statement [129] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) [ getFAC::return#0 ] ( main:2::init:5::gen_sintab:57::getFAC:112 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#0 ] main:2::init:5::gen_sintab:61::getFAC:112 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#0 ] ) always clobbers reg byte a 
Statement asm { lda$fe ldy$ff jsr$b867  } always clobbers reg byte a reg byte x reg byte y 
Statement [142] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2 [ prepareMEM::mem#4 ] ( main:2::init:5::gen_sintab:57::mulFACbyMEM:98 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] main:2::init:5::gen_sintab:61::mulFACbyMEM:98 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] main:2::init:5::gen_sintab:57::mulFACbyMEM:108 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] main:2::init:5::gen_sintab:61::mulFACbyMEM:108 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] ) always clobbers reg byte a 
Statement asm { lda$fe ldy$ff jsr$ba28  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { jsr$e26b  } always clobbers reg byte a reg byte x reg byte y 
Statement [149] (byte*) prepareMEM::mem#3 ← (byte*) divMEMbyFAC::mem#2 [ prepareMEM::mem#3 ] ( main:2::init:5::gen_sintab:57::divMEMbyFAC:87 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#3 ] main:2::init:5::gen_sintab:61::divMEMbyFAC:87 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#3 ] main:2::init:5::gen_sintab:57::divMEMbyFAC:104 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#3 ] main:2::init:5::gen_sintab:61::divMEMbyFAC:104 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#3 ] ) always clobbers reg byte a 
Statement asm { lda$fe ldy$ff jsr$bb0f  } always clobbers reg byte a reg byte x reg byte y 
Statement [154] (byte*) prepareMEM::mem#0 ← (byte*)(word) setFAC::w#5 [ prepareMEM::mem#0 ] ( main:2::init:5::gen_sintab:57::setFAC:73 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:61::setFAC:73 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:57::setFAC:77 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:61::setFAC:77 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:57::setFAC:85 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:61::setFAC:85 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:57::setFAC:96 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:61::setFAC:96 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:57::setFAC:102 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:61::setFAC:102 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#0 ] ) always clobbers reg byte a 
Statement asm { ldy$fe lda$ff jsr$b391  } always clobbers reg byte a reg byte x reg byte y 
Statement [159] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#5 [ prepareMEM::mem#1 ] ( main:2::init:5::gen_sintab:57::setMEMtoFAC:79 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:79 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:83 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:83 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:89 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:89 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:93 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:93 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:100 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:100 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#1 ] ) always clobbers reg byte a 
Statement asm { ldx$fe ldy$ff jsr$bbd4  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { jsr$b853  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { jsr$bc0f  } always clobbers reg byte a reg byte x 
Statement [172] (byte*) gen_chargen_sprite::sprite#0 ← (byte*) gen_sprites::spr#2 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::ch#0 gen_chargen_sprite::sprite#0 ] ( main:2::init:5::gen_sprites:53 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::ch#0 gen_chargen_sprite::sprite#0 ] ) always clobbers reg byte a 
Statement [174] (byte*) gen_sprites::spr#1 ← (byte*) gen_sprites::spr#2 + (byte) $40 [ gen_sprites::i#2 gen_sprites::spr#1 ] ( main:2::init:5::gen_sprites:53 [ gen_sprites::i#2 gen_sprites::spr#1 ] ) always clobbers reg byte a 
Statement [178] (word~) gen_chargen_sprite::$0 ← (word)(byte) gen_chargen_sprite::ch#0 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::$0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::$0 ] ) always clobbers reg byte a 
Statement [179] (word~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 << (byte) 3 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::$1 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::$1 ] ) always clobbers reg byte a 
Statement [180] (byte*) gen_chargen_sprite::chargen#0 ← (const byte*) CHARGEN#0 + (word~) gen_chargen_sprite::$1 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ) always clobbers reg byte a 
Statement [182] *((const byte*) PROCPORT#0) ← (byte) $32 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ) always clobbers reg byte a 
Statement [184] (byte) gen_chargen_sprite::bits#0 ← *((byte*) gen_chargen_sprite::chargen#0 + (byte) gen_chargen_sprite::y#2) [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#11 gen_chargen_sprite::bits#0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#11 gen_chargen_sprite::bits#0 ] ) always clobbers reg byte a reg byte y 
Statement [186] (byte~) gen_chargen_sprite::$3 ← (byte) gen_chargen_sprite::bits#2 & (byte) $80 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::sprite#10 gen_chargen_sprite::x#6 gen_chargen_sprite::$3 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::sprite#10 gen_chargen_sprite::x#6 gen_chargen_sprite::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:38 [ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ]
Statement [191] (byte~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 << (byte) 1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::$6 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::$6 ] ) always clobbers reg byte a 
Statement [195] *((byte*) gen_chargen_sprite::sprite#3) ← (byte) gen_chargen_sprite::s_gen#1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ) always clobbers reg byte a reg byte y 
Statement [196] *((byte*) gen_chargen_sprite::sprite#3 + (byte) 3) ← (byte) gen_chargen_sprite::s_gen#1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ) always clobbers reg byte a reg byte y 
Statement [197] *((byte*) gen_chargen_sprite::sprite#3 + (byte) 6) ← (byte) gen_chargen_sprite::s_gen#1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 ] ) always clobbers reg byte a reg byte y 
Statement [205] (byte*) gen_chargen_sprite::sprite#2 ← (byte*) gen_chargen_sprite::sprite#4 + (byte) 6 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#2 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#2 ] ) always clobbers reg byte a 
Statement [208] *((const byte*) PROCPORT#0) ← (byte) $37 [ ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 ] ) always clobbers reg byte a 
Statement [211] *((const byte*) SPRITES_ENABLE#0) ← (byte) $7f [ ] ( main:2::init:5::place_sprites:51 [ ] ) always clobbers reg byte a 
Statement [212] *((const byte*) SPRITES_EXPAND_X#0) ← (byte) $7f [ ] ( main:2::init:5::place_sprites:51 [ ] ) always clobbers reg byte a 
Statement [213] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte) $7f [ ] ( main:2::init:5::place_sprites:51 [ ] ) always clobbers reg byte a 
Statement [215] *((const byte*) place_sprites::sprites_ptr#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::spr_id#2 [ place_sprites::spr_id#2 place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 ] ( main:2::init:5::place_sprites:51 [ place_sprites::spr_id#2 place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 ] ) always clobbers reg byte a 
Statement [217] *((const byte*) SPRITES_XPOS#0 + (byte) place_sprites::j2#3) ← (byte) place_sprites::spr_x#2 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ) always clobbers reg byte a 
Statement [218] *((const byte*) SPRITES_YPOS#0 + (byte) place_sprites::j2#3) ← (byte) $50 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ) always clobbers reg byte a 
Statement [219] *((const byte*) SPRITES_COLS#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::col#2 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ) always clobbers reg byte a 
Statement [220] (byte) place_sprites::spr_x#1 ← (byte) place_sprites::spr_x#2 + (byte) $20 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 place_sprites::spr_x#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 place_sprites::spr_x#1 ] ) always clobbers reg byte a 
Statement [221] (byte) place_sprites::col#1 ← (byte) place_sprites::col#2 ^ (byte)(number) 7^(number) 5 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::spr_id#1 place_sprites::spr_x#1 place_sprites::col#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::spr_id#1 place_sprites::spr_x#1 place_sprites::col#1 ] ) always clobbers reg byte a 
Statement [7] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@1 [ sin_idx_x#13 sin_idx_y#13 ] ( main:2 [ sin_idx_x#13 sin_idx_y#13 ] ) always clobbers reg byte a 
Statement [14] (word) anim::x#0 ← (word) $1e + *((const byte[$dd]) sintab_x#0 + (byte) anim::xidx#3) [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::x_msb#2 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::x_msb#2 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 ] ) always clobbers reg byte a 
Statement [15] (byte~) anim::$6 ← (byte) anim::x_msb#2 << (byte) 1 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 anim::$6 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x#0 anim::$6 ] ) always clobbers reg byte a 
Statement [18] (byte~) anim::$9 ← < (word) anim::x#0 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::$9 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::$9 ] ) always clobbers reg byte a 
Statement [20] *((const byte*) SPRITES_YPOS#0 + (byte) anim::j2#2) ← *((const byte[$c5]) sintab_y#0 + (byte) anim::yidx#3) [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::xidx#3 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 ] ) always clobbers reg byte a 
Statement [21] (byte) anim::xidx#1 ← (byte) anim::xidx#3 + (byte) $a [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#1 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#1 ] ) always clobbers reg byte a 
Statement [23] (byte) anim::xidx#2 ← (byte) anim::xidx#1 - (const byte) sinlen_x#0 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#2 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::yidx#3 anim::j#2 anim::x_msb#1 anim::xidx#2 ] ) always clobbers reg byte a 
Statement [25] (byte) anim::yidx#1 ← (byte) anim::yidx#3 + (byte) 8 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#1 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#1 ] ) always clobbers reg byte a 
Statement [27] (byte) anim::yidx#2 ← (byte) anim::yidx#1 - (const byte) sinlen_y#0 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#2 ] ( main:2::anim:9 [ sin_idx_x#13 sin_idx_y#13 anim::j2#2 anim::j#2 anim::xidx#5 anim::x_msb#1 anim::yidx#2 ] ) always clobbers reg byte a 
Statement [46] *((const byte*) COLS#0 + (byte) init::i#2) ← (byte) 0 [ init::i#2 ] ( main:2::init:5 [ init::i#2 ] ) always clobbers reg byte a 
Statement [47] *((const byte*) COLS#0+(byte) $28 + (byte) init::i#2) ← (byte) $b [ init::i#2 ] ( main:2::init:5 [ init::i#2 ] ) always clobbers reg byte a 
Statement [67] *((byte*) clear_screen::sc#2) ← (byte) ' ' [ clear_screen::sc#2 ] ( main:2::init:5::clear_screen:44 [ clear_screen::sc#2 ] main:2::init:5::clear_screen:63 [ clear_screen::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [69] if((byte*) clear_screen::sc#1<(const byte*) SCREEN#0+(word) $3e8) goto clear_screen::@1 [ clear_screen::sc#1 ] ( main:2::init:5::clear_screen:44 [ clear_screen::sc#1 ] main:2::init:5::clear_screen:63 [ clear_screen::sc#1 ] ) always clobbers reg byte a 
Statement [72] (word) setFAC::w#0 ← (word)(byte) gen_sintab::max#2 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#0 progress_init::line#2 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#0 progress_init::line#2 ] main:2::init:5::gen_sintab:61 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#0 progress_init::line#2 ] ) always clobbers reg byte a 
Statement [76] (word) setFAC::w#1 ← (word)(byte) gen_sintab::min#2 [ gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#1 progress_init::line#2 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#1 progress_init::line#2 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 setFAC::w#1 progress_init::line#2 ] ) always clobbers reg byte a 
Statement [95] (word) setFAC::w#3 ← (word)(byte) gen_sintab::i#10 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#3 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#3 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#3 ] ) always clobbers reg byte a 
Statement [101] (word) setFAC::w#4 ← (word)(byte) gen_sintab::length#10 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#4 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#4 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 setFAC::w#4 ] ) always clobbers reg byte a 
Statement [113] (word) getFAC::return#2 ← (word) getFAC::return#0 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#2 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#2 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#2 ] ) always clobbers reg byte a 
Statement [114] (word~) gen_sintab::$23 ← (word) getFAC::return#2 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$23 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$23 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$23 ] ) always clobbers reg byte a 
Statement [115] (byte~) gen_sintab::$24 ← (byte)(word~) gen_sintab::$23 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$24 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$24 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 gen_sintab::$24 ] ) always clobbers reg byte a 
Statement [116] *((byte*) gen_sintab::sintab#12 + (byte) gen_sintab::i#10) ← (byte~) gen_sintab::$24 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 ] ) always clobbers reg byte y 
Statement [119] if((byte) gen_sintab::i#1<(byte) gen_sintab::length#10) goto gen_sintab::@1 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#1 progress_idx#12 progress_cursor#11 ] ( main:2::init:5::gen_sintab:57 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#1 progress_idx#12 progress_cursor#11 ] main:2::init:5::gen_sintab:61 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#1 progress_idx#12 progress_cursor#11 ] ) always clobbers reg byte a 
Statement [122] if((byte) progress_idx#10!=(byte) 8) goto progress_inc::@1 [ progress_cursor#34 progress_idx#10 ] ( main:2::init:5::gen_sintab:57::progress_inc:117 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_cursor#34 progress_idx#10 ] main:2::init:5::gen_sintab:61::progress_inc:117 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_cursor#34 progress_idx#10 ] ) always clobbers reg byte a 
Statement [123] *((byte*) progress_cursor#34) ← *((const byte[]) progress_inc::progress_chars#0+(byte) 8) [ progress_cursor#34 ] ( main:2::init:5::gen_sintab:57::progress_inc:117 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_cursor#34 ] main:2::init:5::gen_sintab:61::progress_inc:117 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_cursor#34 ] ) always clobbers reg byte a reg byte y 
Statement [126] *((byte*) progress_cursor#11) ← *((const byte[]) progress_inc::progress_chars#0 + (byte) progress_idx#12) [ progress_idx#12 progress_cursor#11 ] ( main:2::init:5::gen_sintab:57::progress_inc:117 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#12 progress_cursor#11 ] main:2::init:5::gen_sintab:61::progress_inc:117 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#12 progress_cursor#11 ] ) always clobbers reg byte a reg byte y 
Statement asm { jsr$b1aa sty$fe sta$ff  } always clobbers reg byte a reg byte x reg byte y 
Statement [129] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) [ getFAC::return#0 ] ( main:2::init:5::gen_sintab:57::getFAC:112 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#0 ] main:2::init:5::gen_sintab:61::getFAC:112 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 getFAC::return#0 ] ) always clobbers reg byte a 
Statement asm { lda$fe ldy$ff jsr$b867  } always clobbers reg byte a reg byte x reg byte y 
Statement [142] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2 [ prepareMEM::mem#4 ] ( main:2::init:5::gen_sintab:57::mulFACbyMEM:98 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] main:2::init:5::gen_sintab:61::mulFACbyMEM:98 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] main:2::init:5::gen_sintab:57::mulFACbyMEM:108 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] main:2::init:5::gen_sintab:61::mulFACbyMEM:108 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#4 ] ) always clobbers reg byte a 
Statement asm { lda$fe ldy$ff jsr$ba28  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { jsr$e26b  } always clobbers reg byte a reg byte x reg byte y 
Statement [149] (byte*) prepareMEM::mem#3 ← (byte*) divMEMbyFAC::mem#2 [ prepareMEM::mem#3 ] ( main:2::init:5::gen_sintab:57::divMEMbyFAC:87 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#3 ] main:2::init:5::gen_sintab:61::divMEMbyFAC:87 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#3 ] main:2::init:5::gen_sintab:57::divMEMbyFAC:104 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#3 ] main:2::init:5::gen_sintab:61::divMEMbyFAC:104 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#3 ] ) always clobbers reg byte a 
Statement asm { lda$fe ldy$ff jsr$bb0f  } always clobbers reg byte a reg byte x reg byte y 
Statement [154] (byte*) prepareMEM::mem#0 ← (byte*)(word) setFAC::w#5 [ prepareMEM::mem#0 ] ( main:2::init:5::gen_sintab:57::setFAC:73 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:61::setFAC:73 [ gen_sintab::min#2 gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:57::setFAC:77 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:61::setFAC:77 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:57::setFAC:85 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:61::setFAC:85 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:57::setFAC:96 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:61::setFAC:96 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:57::setFAC:102 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#0 ] main:2::init:5::gen_sintab:61::setFAC:102 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#0 ] ) always clobbers reg byte a 
Statement asm { ldy$fe lda$ff jsr$b391  } always clobbers reg byte a reg byte x reg byte y 
Statement [159] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#5 [ prepareMEM::mem#1 ] ( main:2::init:5::gen_sintab:57::setMEMtoFAC:79 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:79 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:83 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:83 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:89 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:89 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:93 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:93 [ gen_sintab::length#10 gen_sintab::sintab#12 progress_init::line#2 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:57::setMEMtoFAC:100 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#1 ] main:2::init:5::gen_sintab:61::setMEMtoFAC:100 [ gen_sintab::length#10 gen_sintab::sintab#12 gen_sintab::i#10 progress_idx#34 progress_cursor#34 prepareMEM::mem#1 ] ) always clobbers reg byte a 
Statement asm { ldx$fe ldy$ff jsr$bbd4  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { jsr$b853  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { jsr$bc0f  } always clobbers reg byte a reg byte x 
Statement [172] (byte*) gen_chargen_sprite::sprite#0 ← (byte*) gen_sprites::spr#2 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::ch#0 gen_chargen_sprite::sprite#0 ] ( main:2::init:5::gen_sprites:53 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::ch#0 gen_chargen_sprite::sprite#0 ] ) always clobbers reg byte a 
Statement [174] (byte*) gen_sprites::spr#1 ← (byte*) gen_sprites::spr#2 + (byte) $40 [ gen_sprites::i#2 gen_sprites::spr#1 ] ( main:2::init:5::gen_sprites:53 [ gen_sprites::i#2 gen_sprites::spr#1 ] ) always clobbers reg byte a 
Statement [178] (word~) gen_chargen_sprite::$0 ← (word)(byte) gen_chargen_sprite::ch#0 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::$0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::$0 ] ) always clobbers reg byte a 
Statement [179] (word~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 << (byte) 3 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::$1 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::$1 ] ) always clobbers reg byte a 
Statement [180] (byte*) gen_chargen_sprite::chargen#0 ← (const byte*) CHARGEN#0 + (word~) gen_chargen_sprite::$1 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ) always clobbers reg byte a 
Statement [182] *((const byte*) PROCPORT#0) ← (byte) $32 [ gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::sprite#0 gen_chargen_sprite::chargen#0 ] ) always clobbers reg byte a 
Statement [184] (byte) gen_chargen_sprite::bits#0 ← *((byte*) gen_chargen_sprite::chargen#0 + (byte) gen_chargen_sprite::y#2) [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#11 gen_chargen_sprite::bits#0 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#11 gen_chargen_sprite::bits#0 ] ) always clobbers reg byte a reg byte y 
Statement [186] (byte~) gen_chargen_sprite::$3 ← (byte) gen_chargen_sprite::bits#2 & (byte) $80 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::sprite#10 gen_chargen_sprite::x#6 gen_chargen_sprite::$3 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::sprite#10 gen_chargen_sprite::x#6 gen_chargen_sprite::$3 ] ) always clobbers reg byte a 
Statement [191] (byte~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 << (byte) 1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::$6 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::$6 ] ) always clobbers reg byte a 
Statement [195] *((byte*) gen_chargen_sprite::sprite#3) ← (byte) gen_chargen_sprite::s_gen#1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ) always clobbers reg byte a reg byte y 
Statement [196] *((byte*) gen_chargen_sprite::sprite#3 + (byte) 3) ← (byte) gen_chargen_sprite::s_gen#1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 gen_chargen_sprite::s_gen#1 ] ) always clobbers reg byte a reg byte y 
Statement [197] *((byte*) gen_chargen_sprite::sprite#3 + (byte) 6) ← (byte) gen_chargen_sprite::s_gen#1 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::bits#2 gen_chargen_sprite::x#6 gen_chargen_sprite::c#3 gen_chargen_sprite::b#2 gen_chargen_sprite::sprite#3 ] ) always clobbers reg byte a reg byte y 
Statement [205] (byte*) gen_chargen_sprite::sprite#2 ← (byte*) gen_chargen_sprite::sprite#4 + (byte) 6 [ gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#2 ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 gen_chargen_sprite::chargen#0 gen_chargen_sprite::y#2 gen_chargen_sprite::sprite#2 ] ) always clobbers reg byte a 
Statement [208] *((const byte*) PROCPORT#0) ← (byte) $37 [ ] ( main:2::init:5::gen_sprites:53::gen_chargen_sprite:173 [ gen_sprites::i#2 gen_sprites::spr#2 ] ) always clobbers reg byte a 
Statement [211] *((const byte*) SPRITES_ENABLE#0) ← (byte) $7f [ ] ( main:2::init:5::place_sprites:51 [ ] ) always clobbers reg byte a 
Statement [212] *((const byte*) SPRITES_EXPAND_X#0) ← (byte) $7f [ ] ( main:2::init:5::place_sprites:51 [ ] ) always clobbers reg byte a 
Statement [213] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte) $7f [ ] ( main:2::init:5::place_sprites:51 [ ] ) always clobbers reg byte a 
Statement [215] *((const byte*) place_sprites::sprites_ptr#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::spr_id#2 [ place_sprites::spr_id#2 place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 ] ( main:2::init:5::place_sprites:51 [ place_sprites::spr_id#2 place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 ] ) always clobbers reg byte a 
Statement [217] *((const byte*) SPRITES_XPOS#0 + (byte) place_sprites::j2#3) ← (byte) place_sprites::spr_x#2 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ) always clobbers reg byte a 
Statement [218] *((const byte*) SPRITES_YPOS#0 + (byte) place_sprites::j2#3) ← (byte) $50 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ) always clobbers reg byte a 
Statement [219] *((const byte*) SPRITES_COLS#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::col#2 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::spr_x#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 ] ) always clobbers reg byte a 
Statement [220] (byte) place_sprites::spr_x#1 ← (byte) place_sprites::spr_x#2 + (byte) $20 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 place_sprites::spr_x#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::col#2 place_sprites::spr_id#1 place_sprites::spr_x#1 ] ) always clobbers reg byte a 
Statement [221] (byte) place_sprites::col#1 ← (byte) place_sprites::col#2 ^ (byte)(number) 7^(number) 5 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::spr_id#1 place_sprites::spr_x#1 place_sprites::col#1 ] ( main:2::init:5::place_sprites:51 [ place_sprites::j#2 place_sprites::j2#3 place_sprites::spr_id#1 place_sprites::spr_x#1 place_sprites::col#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ] : zp ZP_BYTE:4 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ anim::x_msb#2 anim::x_msb#1 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ anim::j2#2 anim::j2#1 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ anim::yidx#3 anim::yidx#0 anim::yidx#6 anim::yidx#1 anim::yidx#2 ] : zp ZP_BYTE:7 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ anim::j#2 anim::j#1 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ init::i#2 init::i#1 ] : zp ZP_BYTE:9 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:10 [ clear_screen::sc#2 clear_screen::sc#1 ] : zp ZP_WORD:10 , 
Potential registers zp ZP_BYTE:12 [ gen_sintab::max#2 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ gen_sintab::min#2 ] : zp ZP_BYTE:13 , 
Potential registers zp ZP_BYTE:14 [ gen_sintab::length#10 ] : zp ZP_BYTE:14 , 
Potential registers zp ZP_WORD:15 [ gen_sintab::sintab#12 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_BYTE:17 [ gen_sintab::i#10 gen_sintab::i#1 ] : zp ZP_BYTE:17 , 
Potential registers zp ZP_BYTE:18 [ progress_idx#34 progress_idx#12 progress_idx#10 ] : zp ZP_BYTE:18 , 
Potential registers zp ZP_WORD:19 [ progress_cursor#34 progress_init::line#2 progress_cursor#11 progress_cursor#10 ] : zp ZP_WORD:19 , 
Potential registers zp ZP_WORD:21 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 ] : zp ZP_WORD:21 , 
Potential registers zp ZP_WORD:23 [ mulFACbyMEM::mem#2 ] : zp ZP_WORD:23 , 
Potential registers zp ZP_WORD:25 [ divMEMbyFAC::mem#2 ] : zp ZP_WORD:25 , 
Potential registers zp ZP_WORD:27 [ setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 ] : zp ZP_WORD:27 , 
Potential registers zp ZP_WORD:29 [ setMEMtoFAC::mem#5 ] : zp ZP_WORD:29 , 
Potential registers zp ZP_BYTE:31 [ gen_sprites::i#2 gen_sprites::i#1 ] : zp ZP_BYTE:31 , reg byte x , 
Potential registers zp ZP_WORD:32 [ gen_sprites::spr#2 gen_sprites::spr#1 ] : zp ZP_WORD:32 , 
Potential registers zp ZP_BYTE:34 [ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ] : zp ZP_BYTE:34 , reg byte x , 
Potential registers zp ZP_BYTE:35 [ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ] : zp ZP_BYTE:35 , reg byte x , 
Potential registers zp ZP_BYTE:36 [ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ] : zp ZP_BYTE:36 , reg byte x , 
Potential registers zp ZP_BYTE:37 [ gen_chargen_sprite::c#3 ] : zp ZP_BYTE:37 , reg byte x , 
Potential registers zp ZP_BYTE:38 [ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ] : zp ZP_BYTE:38 , reg byte x , 
Potential registers zp ZP_BYTE:39 [ gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::s_gen_cnt#5 gen_chargen_sprite::s_gen_cnt#1 ] : zp ZP_BYTE:39 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:40 [ gen_chargen_sprite::b#2 gen_chargen_sprite::b#1 ] : zp ZP_BYTE:40 , reg byte x , 
Potential registers zp ZP_WORD:41 [ gen_chargen_sprite::sprite#3 gen_chargen_sprite::sprite#10 gen_chargen_sprite::sprite#11 gen_chargen_sprite::sprite#0 gen_chargen_sprite::sprite#2 gen_chargen_sprite::sprite#4 gen_chargen_sprite::sprite#1 ] : zp ZP_WORD:41 , 
Potential registers zp ZP_BYTE:43 [ place_sprites::spr_id#2 place_sprites::spr_id#1 ] : zp ZP_BYTE:43 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:44 [ place_sprites::j#2 place_sprites::j#1 ] : zp ZP_BYTE:44 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:45 [ place_sprites::spr_x#2 place_sprites::spr_x#1 ] : zp ZP_BYTE:45 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:46 [ place_sprites::j2#3 place_sprites::j2#2 ] : zp ZP_BYTE:46 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:47 [ place_sprites::col#2 place_sprites::col#1 ] : zp ZP_BYTE:47 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:48 [ anim::x#0 ] : zp ZP_WORD:48 , 
Potential registers zp ZP_BYTE:50 [ anim::$6 ] : zp ZP_BYTE:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:51 [ anim::$7 ] : zp ZP_BYTE:51 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:52 [ anim::$9 ] : zp ZP_BYTE:52 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:53 [ getFAC::return#2 ] : zp ZP_WORD:53 , 
Potential registers zp ZP_WORD:55 [ gen_sintab::$23 ] : zp ZP_WORD:55 , 
Potential registers zp ZP_BYTE:57 [ gen_sintab::$24 ] : zp ZP_BYTE:57 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:58 [ getFAC::return#0 ] : zp ZP_WORD:58 , 
Potential registers zp ZP_BYTE:60 [ prepareMEM::$0 ] : zp ZP_BYTE:60 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:61 [ prepareMEM::$1 ] : zp ZP_BYTE:61 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:62 [ gen_chargen_sprite::ch#0 ] : zp ZP_BYTE:62 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:63 [ gen_chargen_sprite::$0 ] : zp ZP_WORD:63 , 
Potential registers zp ZP_WORD:65 [ gen_chargen_sprite::$1 ] : zp ZP_WORD:65 , 
Potential registers zp ZP_WORD:67 [ gen_chargen_sprite::chargen#0 ] : zp ZP_WORD:67 , 
Potential registers zp ZP_BYTE:69 [ gen_chargen_sprite::$3 ] : zp ZP_BYTE:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:70 [ gen_chargen_sprite::$6 ] : zp ZP_BYTE:70 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:71 [ place_sprites::j2#1 ] : zp ZP_BYTE:71 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [gen_chargen_sprite] 34,904.9: zp ZP_BYTE:38 [ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ] 33,404.14: zp ZP_WORD:41 [ gen_chargen_sprite::sprite#3 gen_chargen_sprite::sprite#10 gen_chargen_sprite::sprite#11 gen_chargen_sprite::sprite#0 gen_chargen_sprite::sprite#2 gen_chargen_sprite::sprite#4 gen_chargen_sprite::sprite#1 ] 25,903.4: zp ZP_BYTE:39 [ gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::s_gen_cnt#5 gen_chargen_sprite::s_gen_cnt#1 ] 20,002: zp ZP_BYTE:70 [ gen_chargen_sprite::$6 ] 17,001.7: zp ZP_BYTE:40 [ gen_chargen_sprite::b#2 gen_chargen_sprite::b#1 ] 2,002: zp ZP_BYTE:69 [ gen_chargen_sprite::$3 ] 1,612.72: zp ZP_BYTE:36 [ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ] 1,051.92: zp ZP_BYTE:35 [ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ] 769.31: zp ZP_BYTE:37 [ gen_chargen_sprite::c#3 ] 164.67: zp ZP_BYTE:34 [ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ] 5.5: zp ZP_BYTE:62 [ gen_chargen_sprite::ch#0 ] 4: zp ZP_WORD:63 [ gen_chargen_sprite::$0 ] 4: zp ZP_WORD:65 [ gen_chargen_sprite::$1 ] 3.68: zp ZP_WORD:67 [ gen_chargen_sprite::chargen#0 ] 
Uplift Scope [anim] 509.17: zp ZP_BYTE:7 [ anim::yidx#3 anim::yidx#0 anim::yidx#6 anim::yidx#1 anim::yidx#2 ] 482: zp ZP_BYTE:4 [ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ] 202: zp ZP_BYTE:51 [ anim::$7 ] 202: zp ZP_BYTE:52 [ anim::$9 ] 163.38: zp ZP_BYTE:8 [ anim::j#2 anim::j#1 ] 114.6: zp ZP_BYTE:5 [ anim::x_msb#2 anim::x_msb#1 ] 101: zp ZP_BYTE:50 [ anim::$6 ] 92.58: zp ZP_BYTE:6 [ anim::j2#2 anim::j2#1 ] 75.75: zp ZP_WORD:48 [ anim::x#0 ] 
Uplift Scope [place_sprites] 22: zp ZP_BYTE:71 [ place_sprites::j2#1 ] 20.9: zp ZP_BYTE:44 [ place_sprites::j#2 place_sprites::j#1 ] 18.7: zp ZP_BYTE:43 [ place_sprites::spr_id#2 place_sprites::spr_id#1 ] 12.83: zp ZP_BYTE:46 [ place_sprites::j2#3 place_sprites::j2#2 ] 9.17: zp ZP_BYTE:45 [ place_sprites::spr_x#2 place_sprites::spr_x#1 ] 9.11: zp ZP_BYTE:47 [ place_sprites::col#2 place_sprites::col#1 ] 
Uplift Scope [setFAC] 78: zp ZP_WORD:27 [ setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 ] 
Uplift Scope [gen_sintab] 22: zp ZP_BYTE:57 [ gen_sintab::$24 ] 17.88: zp ZP_BYTE:17 [ gen_sintab::i#10 gen_sintab::i#1 ] 11: zp ZP_WORD:55 [ gen_sintab::$23 ] 0.22: zp ZP_BYTE:14 [ gen_sintab::length#10 ] 0.22: zp ZP_WORD:15 [ gen_sintab::sintab#12 ] 0: zp ZP_BYTE:12 [ gen_sintab::max#2 ] 0: zp ZP_BYTE:13 [ gen_sintab::min#2 ] 
Uplift Scope [gen_sprites] 23.1: zp ZP_BYTE:31 [ gen_sprites::i#2 gen_sprites::i#1 ] 15.58: zp ZP_WORD:32 [ gen_sprites::spr#2 gen_sprites::spr#1 ] 
Uplift Scope [] 12.48: zp ZP_BYTE:3 [ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ] 11.97: zp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ] 7.63: zp ZP_WORD:19 [ progress_cursor#34 progress_init::line#2 progress_cursor#11 progress_cursor#10 ] 6.07: zp ZP_BYTE:18 [ progress_idx#34 progress_idx#12 progress_idx#10 ] 
Uplift Scope [clear_screen] 33: zp ZP_WORD:10 [ clear_screen::sc#2 clear_screen::sc#1 ] 
Uplift Scope [init] 31.17: zp ZP_BYTE:9 [ init::i#2 init::i#1 ] 
Uplift Scope [prepareMEM] 20: zp ZP_WORD:21 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 ] 4: zp ZP_BYTE:60 [ prepareMEM::$0 ] 4: zp ZP_BYTE:61 [ prepareMEM::$1 ] 
Uplift Scope [getFAC] 22: zp ZP_WORD:53 [ getFAC::return#2 ] 4.33: zp ZP_WORD:58 [ getFAC::return#0 ] 
Uplift Scope [setMEMtoFAC] 2: zp ZP_WORD:29 [ setMEMtoFAC::mem#5 ] 
Uplift Scope [divMEMbyFAC] 2: zp ZP_WORD:25 [ divMEMbyFAC::mem#2 ] 
Uplift Scope [mulFACbyMEM] 2: zp ZP_WORD:23 [ mulFACbyMEM::mem#2 ] 
Uplift Scope [setARGtoFAC] 
Uplift Scope [addMEMtoFAC] 
Uplift Scope [subFACfromARG] 
Uplift Scope [sinFAC] 
Uplift Scope [RADIX] 
Uplift Scope [main] 
Uplift Scope [progress_init] 
Uplift Scope [progress_inc] 

Uplifting [gen_chargen_sprite] best 1064016 combination zp ZP_BYTE:38 [ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ] zp ZP_WORD:41 [ gen_chargen_sprite::sprite#3 gen_chargen_sprite::sprite#10 gen_chargen_sprite::sprite#11 gen_chargen_sprite::sprite#0 gen_chargen_sprite::sprite#2 gen_chargen_sprite::sprite#4 gen_chargen_sprite::sprite#1 ] reg byte y [ gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::s_gen_cnt#5 gen_chargen_sprite::s_gen_cnt#1 ] reg byte a [ gen_chargen_sprite::$6 ] reg byte x [ gen_chargen_sprite::b#2 gen_chargen_sprite::b#1 ] reg byte a [ gen_chargen_sprite::$3 ] zp ZP_BYTE:36 [ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ] zp ZP_BYTE:35 [ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ] zp ZP_BYTE:37 [ gen_chargen_sprite::c#3 ] zp ZP_BYTE:34 [ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ] zp ZP_BYTE:62 [ gen_chargen_sprite::ch#0 ] zp ZP_WORD:63 [ gen_chargen_sprite::$0 ] zp ZP_WORD:65 [ gen_chargen_sprite::$1 ] zp ZP_WORD:67 [ gen_chargen_sprite::chargen#0 ] 
Limited combination testing to 100 combinations of 9216 possible.
Uplifting [anim] best 1062816 combination zp ZP_BYTE:7 [ anim::yidx#3 anim::yidx#0 anim::yidx#6 anim::yidx#1 anim::yidx#2 ] zp ZP_BYTE:4 [ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ] reg byte a [ anim::$7 ] reg byte a [ anim::$9 ] zp ZP_BYTE:8 [ anim::j#2 anim::j#1 ] zp ZP_BYTE:5 [ anim::x_msb#2 anim::x_msb#1 ] zp ZP_BYTE:50 [ anim::$6 ] zp ZP_BYTE:6 [ anim::j2#2 anim::j2#1 ] zp ZP_WORD:48 [ anim::x#0 ] 
Limited combination testing to 100 combinations of 19440 possible.
Uplifting [place_sprites] best 1062756 combination reg byte x [ place_sprites::j2#1 ] zp ZP_BYTE:44 [ place_sprites::j#2 place_sprites::j#1 ] zp ZP_BYTE:43 [ place_sprites::spr_id#2 place_sprites::spr_id#1 ] zp ZP_BYTE:46 [ place_sprites::j2#3 place_sprites::j2#2 ] zp ZP_BYTE:45 [ place_sprites::spr_x#2 place_sprites::spr_x#1 ] zp ZP_BYTE:47 [ place_sprites::col#2 place_sprites::col#1 ] 
Limited combination testing to 100 combinations of 972 possible.
Uplifting [setFAC] best 1062756 combination zp ZP_WORD:27 [ setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 ] 
Uplifting [gen_sintab] best 1062689 combination reg byte a [ gen_sintab::$24 ] zp ZP_BYTE:17 [ gen_sintab::i#10 gen_sintab::i#1 ] zp ZP_WORD:55 [ gen_sintab::$23 ] zp ZP_BYTE:14 [ gen_sintab::length#10 ] zp ZP_WORD:15 [ gen_sintab::sintab#12 ] reg byte x [ gen_sintab::max#2 ] zp ZP_BYTE:13 [ gen_sintab::min#2 ] 
Uplifting [gen_sprites] best 1062689 combination zp ZP_BYTE:31 [ gen_sprites::i#2 gen_sprites::i#1 ] zp ZP_WORD:32 [ gen_sprites::spr#2 gen_sprites::spr#1 ] 
Uplifting [] best 1062689 combination zp ZP_BYTE:3 [ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ] zp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ] zp ZP_WORD:19 [ progress_cursor#34 progress_init::line#2 progress_cursor#11 progress_cursor#10 ] zp ZP_BYTE:18 [ progress_idx#34 progress_idx#12 progress_idx#10 ] 
Uplifting [clear_screen] best 1062689 combination zp ZP_WORD:10 [ clear_screen::sc#2 clear_screen::sc#1 ] 
Uplifting [init] best 1062539 combination reg byte x [ init::i#2 init::i#1 ] 
Uplifting [prepareMEM] best 1062527 combination zp ZP_WORD:21 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 ] reg byte a [ prepareMEM::$0 ] reg byte a [ prepareMEM::$1 ] 
Uplifting [getFAC] best 1062527 combination zp ZP_WORD:53 [ getFAC::return#2 ] zp ZP_WORD:58 [ getFAC::return#0 ] 
Uplifting [setMEMtoFAC] best 1062527 combination zp ZP_WORD:29 [ setMEMtoFAC::mem#5 ] 
Uplifting [divMEMbyFAC] best 1062527 combination zp ZP_WORD:25 [ divMEMbyFAC::mem#2 ] 
Uplifting [mulFACbyMEM] best 1062527 combination zp ZP_WORD:23 [ mulFACbyMEM::mem#2 ] 
Uplifting [setARGtoFAC] best 1062527 combination 
Uplifting [addMEMtoFAC] best 1062527 combination 
Uplifting [subFACfromARG] best 1062527 combination 
Uplifting [sinFAC] best 1062527 combination 
Uplifting [RADIX] best 1062527 combination 
Uplifting [main] best 1062527 combination 
Uplifting [progress_init] best 1062527 combination 
Uplifting [progress_inc] best 1062527 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:38 [ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ]
Uplifting [gen_chargen_sprite] best 1062527 combination zp ZP_BYTE:38 [ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:36 [ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ]
Uplifting [gen_chargen_sprite] best 1062527 combination zp ZP_BYTE:36 [ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:35 [ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ]
Uplifting [gen_chargen_sprite] best 1062527 combination zp ZP_BYTE:35 [ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:37 [ gen_chargen_sprite::c#3 ]
Uplifting [gen_chargen_sprite] best 1062527 combination zp ZP_BYTE:37 [ gen_chargen_sprite::c#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ anim::yidx#3 anim::yidx#0 anim::yidx#6 anim::yidx#1 anim::yidx#2 ]
Uplifting [anim] best 1062527 combination zp ZP_BYTE:7 [ anim::yidx#3 anim::yidx#0 anim::yidx#6 anim::yidx#1 anim::yidx#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:4 [ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ]
Uplifting [anim] best 1062527 combination zp ZP_BYTE:4 [ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:34 [ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ]
Uplifting [gen_chargen_sprite] best 1062527 combination zp ZP_BYTE:34 [ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ anim::j#2 anim::j#1 ]
Uplifting [anim] best 1062527 combination zp ZP_BYTE:8 [ anim::j#2 anim::j#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ anim::x_msb#2 anim::x_msb#1 ]
Uplifting [anim] best 1062527 combination zp ZP_BYTE:5 [ anim::x_msb#2 anim::x_msb#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:50 [ anim::$6 ]
Uplifting [anim] best 1062527 combination zp ZP_BYTE:50 [ anim::$6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ anim::j2#2 anim::j2#1 ]
Uplifting [anim] best 1062527 combination zp ZP_BYTE:6 [ anim::j2#2 anim::j2#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:31 [ gen_sprites::i#2 gen_sprites::i#1 ]
Uplifting [gen_sprites] best 1062527 combination zp ZP_BYTE:31 [ gen_sprites::i#2 gen_sprites::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:44 [ place_sprites::j#2 place_sprites::j#1 ]
Uplifting [place_sprites] best 1062527 combination zp ZP_BYTE:44 [ place_sprites::j#2 place_sprites::j#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:43 [ place_sprites::spr_id#2 place_sprites::spr_id#1 ]
Uplifting [place_sprites] best 1062527 combination zp ZP_BYTE:43 [ place_sprites::spr_id#2 place_sprites::spr_id#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:17 [ gen_sintab::i#10 gen_sintab::i#1 ]
Uplifting [gen_sintab] best 1062527 combination zp ZP_BYTE:17 [ gen_sintab::i#10 gen_sintab::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:46 [ place_sprites::j2#3 place_sprites::j2#2 ]
Uplifting [place_sprites] best 1062527 combination zp ZP_BYTE:46 [ place_sprites::j2#3 place_sprites::j2#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ]
Uplifting [] best 1062527 combination zp ZP_BYTE:3 [ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ]
Uplifting [] best 1062527 combination zp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:45 [ place_sprites::spr_x#2 place_sprites::spr_x#1 ]
Uplifting [place_sprites] best 1062527 combination zp ZP_BYTE:45 [ place_sprites::spr_x#2 place_sprites::spr_x#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:47 [ place_sprites::col#2 place_sprites::col#1 ]
Uplifting [place_sprites] best 1062527 combination zp ZP_BYTE:47 [ place_sprites::col#2 place_sprites::col#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ progress_idx#34 progress_idx#12 progress_idx#10 ]
Uplifting [] best 1062527 combination zp ZP_BYTE:18 [ progress_idx#34 progress_idx#12 progress_idx#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:62 [ gen_chargen_sprite::ch#0 ]
Uplifting [gen_chargen_sprite] best 1062496 combination reg byte x [ gen_chargen_sprite::ch#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:14 [ gen_sintab::length#10 ]
Uplifting [gen_sintab] best 1062496 combination zp ZP_BYTE:14 [ gen_sintab::length#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:13 [ gen_sintab::min#2 ]
Uplifting [gen_sintab] best 1062496 combination zp ZP_BYTE:13 [ gen_sintab::min#2 ] 
Coalescing zero page register with common assignment [ zp ZP_BYTE:5 [ anim::x_msb#2 anim::x_msb#1 ] ] with [ zp ZP_BYTE:50 [ anim::$6 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:21 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 ] ] with [ zp ZP_WORD:23 [ mulFACbyMEM::mem#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:21 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 mulFACbyMEM::mem#2 ] ] with [ zp ZP_WORD:25 [ divMEMbyFAC::mem#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:21 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 mulFACbyMEM::mem#2 divMEMbyFAC::mem#2 ] ] with [ zp ZP_WORD:27 [ setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:21 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 mulFACbyMEM::mem#2 divMEMbyFAC::mem#2 setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 ] ] with [ zp ZP_WORD:29 [ setMEMtoFAC::mem#5 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:53 [ getFAC::return#2 ] ] with [ zp ZP_WORD:55 [ gen_sintab::$23 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:53 [ getFAC::return#2 gen_sintab::$23 ] ] with [ zp ZP_WORD:58 [ getFAC::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:63 [ gen_chargen_sprite::$0 ] ] with [ zp ZP_WORD:65 [ gen_chargen_sprite::$1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:63 [ gen_chargen_sprite::$0 gen_chargen_sprite::$1 ] ] with [ zp ZP_WORD:67 [ gen_chargen_sprite::chargen#0 ] ] - score: 1
Allocated (was zp ZP_WORD:10) zp ZP_WORD:9 [ clear_screen::sc#2 clear_screen::sc#1 ]
Allocated (was zp ZP_BYTE:13) zp ZP_BYTE:11 [ gen_sintab::min#2 ]
Allocated (was zp ZP_BYTE:14) zp ZP_BYTE:12 [ gen_sintab::length#10 ]
Allocated (was zp ZP_WORD:15) zp ZP_WORD:13 [ gen_sintab::sintab#12 ]
Allocated (was zp ZP_BYTE:17) zp ZP_BYTE:15 [ gen_sintab::i#10 gen_sintab::i#1 ]
Allocated (was zp ZP_BYTE:18) zp ZP_BYTE:16 [ progress_idx#34 progress_idx#12 progress_idx#10 ]
Allocated (was zp ZP_WORD:19) zp ZP_WORD:17 [ progress_cursor#34 progress_init::line#2 progress_cursor#11 progress_cursor#10 ]
Allocated (was zp ZP_WORD:21) zp ZP_WORD:19 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 mulFACbyMEM::mem#2 divMEMbyFAC::mem#2 setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 setMEMtoFAC::mem#5 ]
Allocated (was zp ZP_BYTE:31) zp ZP_BYTE:21 [ gen_sprites::i#2 gen_sprites::i#1 ]
Allocated (was zp ZP_WORD:32) zp ZP_WORD:22 [ gen_sprites::spr#2 gen_sprites::spr#1 ]
Allocated (was zp ZP_BYTE:34) zp ZP_BYTE:24 [ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ]
Allocated (was zp ZP_BYTE:35) zp ZP_BYTE:25 [ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ]
Allocated (was zp ZP_BYTE:36) zp ZP_BYTE:26 [ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ]
Allocated (was zp ZP_BYTE:37) zp ZP_BYTE:27 [ gen_chargen_sprite::c#3 ]
Allocated (was zp ZP_BYTE:38) zp ZP_BYTE:28 [ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ]
Allocated (was zp ZP_WORD:41) zp ZP_WORD:29 [ gen_chargen_sprite::sprite#3 gen_chargen_sprite::sprite#10 gen_chargen_sprite::sprite#11 gen_chargen_sprite::sprite#0 gen_chargen_sprite::sprite#2 gen_chargen_sprite::sprite#4 gen_chargen_sprite::sprite#1 ]
Allocated (was zp ZP_BYTE:43) zp ZP_BYTE:31 [ place_sprites::spr_id#2 place_sprites::spr_id#1 ]
Allocated (was zp ZP_BYTE:44) zp ZP_BYTE:32 [ place_sprites::j#2 place_sprites::j#1 ]
Allocated (was zp ZP_BYTE:45) zp ZP_BYTE:33 [ place_sprites::spr_x#2 place_sprites::spr_x#1 ]
Allocated (was zp ZP_BYTE:46) zp ZP_BYTE:34 [ place_sprites::j2#3 place_sprites::j2#2 ]
Allocated (was zp ZP_BYTE:47) zp ZP_BYTE:35 [ place_sprites::col#2 place_sprites::col#1 ]
Allocated (was zp ZP_WORD:48) zp ZP_WORD:36 [ anim::x#0 ]
Allocated (was zp ZP_WORD:53) zp ZP_WORD:38 [ getFAC::return#2 gen_sintab::$23 getFAC::return#0 ]
Allocated (was zp ZP_WORD:63) zp ZP_WORD:40 [ gen_chargen_sprite::$0 gen_chargen_sprite::$1 gen_chargen_sprite::chargen#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_EXPAND_X = $d01d
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  // Color Ram
  .label COLS = $d800
  // Zeropage addresses used to hold lo/hi-bytes of addresses of float numbers in MEM
  .label memLo = $fe
  .label memHi = $ff
  .const sinlen_x = $dd
  .const sinlen_y = $c5
  .label sprites = $2000
  .label SCREEN = $400
  .label progress_idx = $10
  .label progress_cursor = $11
  .label sin_idx_x = 2
  .label sin_idx_y = 3
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    // [5] call init 
    // [43] phi from main to init [phi:main->init]
  init_from_main:
    jsr init
    // [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [6] phi (byte) sin_idx_y#13 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_y
    // [6] phi (byte) sin_idx_x#13 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_x
    jmp b1
    // [6] phi from main::@1 main::@2 to main::@1 [phi:main::@1/main::@2->main::@1]
  b1_from_b1:
  b1_from_b2:
    // [6] phi (byte) sin_idx_y#13 = (byte) sin_idx_y#13 [phi:main::@1/main::@2->main::@1#0] -- register_copy 
    // [6] phi (byte) sin_idx_x#13 = (byte) sin_idx_x#13 [phi:main::@1/main::@2->main::@1#1] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [7] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@1 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b1_from_b1
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
    // main::@2
  b2:
    // [9] call anim 
    jsr anim
    jmp b1_from_b2
}
  // anim
anim: {
    .label _6 = 5
    .label xidx = 4
    .label yidx = 7
    .label x = $24
    .label x_msb = 5
    .label j2 = 6
    .label j = 8
    // [10] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // [11] (byte) anim::xidx#0 ← (byte) sin_idx_x#13 -- vbuz1=vbuz2 
    lda sin_idx_x
    sta xidx
    // [12] (byte) anim::yidx#0 ← (byte) sin_idx_y#13 -- vbuz1=vbuz2 
    lda sin_idx_y
    sta yidx
    // [13] phi from anim to anim::@3 [phi:anim->anim::@3]
  b3_from_anim:
    // [13] phi (byte) anim::j#2 = (byte) 0 [phi:anim->anim::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta j
    // [13] phi (byte) anim::yidx#3 = (byte) anim::yidx#0 [phi:anim->anim::@3#1] -- register_copy 
    // [13] phi (byte) anim::j2#2 = (byte) $c [phi:anim->anim::@3#2] -- vbuz1=vbuc1 
    lda #$c
    sta j2
    // [13] phi (byte) anim::x_msb#2 = (byte) 0 [phi:anim->anim::@3#3] -- vbuz1=vbuc1 
    lda #0
    sta x_msb
    // [13] phi (byte) anim::xidx#3 = (byte) anim::xidx#0 [phi:anim->anim::@3#4] -- register_copy 
    jmp b3
    // [13] phi from anim::@5 to anim::@3 [phi:anim::@5->anim::@3]
  b3_from_b5:
    // [13] phi (byte) anim::j#2 = (byte) anim::j#1 [phi:anim::@5->anim::@3#0] -- register_copy 
    // [13] phi (byte) anim::yidx#3 = (byte) anim::yidx#6 [phi:anim::@5->anim::@3#1] -- register_copy 
    // [13] phi (byte) anim::j2#2 = (byte) anim::j2#1 [phi:anim::@5->anim::@3#2] -- register_copy 
    // [13] phi (byte) anim::x_msb#2 = (byte) anim::x_msb#1 [phi:anim::@5->anim::@3#3] -- register_copy 
    // [13] phi (byte) anim::xidx#3 = (byte) anim::xidx#5 [phi:anim::@5->anim::@3#4] -- register_copy 
    jmp b3
    // anim::@3
  b3:
    // [14] (word) anim::x#0 ← (word) $1e + *((const byte[$dd]) sintab_x#0 + (byte) anim::xidx#3) -- vwuz1=vwuc1_plus_pbuc2_derefidx_vbuz2 
    ldy xidx
    lda sintab_x,y
    clc
    adc #<$1e
    sta x
    lda #>$1e
    adc #0
    sta x+1
    // [15] (byte~) anim::$6 ← (byte) anim::x_msb#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl _6
    // [16] (byte~) anim::$7 ← > (word) anim::x#0 -- vbuaa=_hi_vwuz1 
    lda x+1
    // [17] (byte) anim::x_msb#1 ← (byte~) anim::$6 | (byte~) anim::$7 -- vbuz1=vbuz1_bor_vbuaa 
    ora x_msb
    sta x_msb
    // [18] (byte~) anim::$9 ← < (word) anim::x#0 -- vbuaa=_lo_vwuz1 
    lda x
    // [19] *((const byte*) SPRITES_XPOS#0 + (byte) anim::j2#2) ← (byte~) anim::$9 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy j2
    sta SPRITES_XPOS,y
    // [20] *((const byte*) SPRITES_YPOS#0 + (byte) anim::j2#2) ← *((const byte[$c5]) sintab_y#0 + (byte) anim::yidx#3) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy yidx
    lda sintab_y,y
    ldy j2
    sta SPRITES_YPOS,y
    // [21] (byte) anim::xidx#1 ← (byte) anim::xidx#3 + (byte) $a -- vbuz1=vbuz1_plus_vbuc1 
    lax xidx
    axs #-[$a]
    stx xidx
    // [22] if((byte) anim::xidx#1<(const byte) sinlen_x#0) goto anim::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda xidx
    cmp #sinlen_x
    bcc b4_from_b3
    jmp b6
    // anim::@6
  b6:
    // [23] (byte) anim::xidx#2 ← (byte) anim::xidx#1 - (const byte) sinlen_x#0 -- vbuz1=vbuz1_minus_vbuc1 
    lax xidx
    axs #sinlen_x
    stx xidx
    // [24] phi from anim::@3 anim::@6 to anim::@4 [phi:anim::@3/anim::@6->anim::@4]
  b4_from_b3:
  b4_from_b6:
    // [24] phi (byte) anim::xidx#5 = (byte) anim::xidx#1 [phi:anim::@3/anim::@6->anim::@4#0] -- register_copy 
    jmp b4
    // anim::@4
  b4:
    // [25] (byte) anim::yidx#1 ← (byte) anim::yidx#3 + (byte) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax yidx
    axs #-[8]
    stx yidx
    // [26] if((byte) anim::yidx#1<(const byte) sinlen_y#0) goto anim::@5 -- vbuz1_lt_vbuc1_then_la1 
    lda yidx
    cmp #sinlen_y
    bcc b5_from_b4
    jmp b7
    // anim::@7
  b7:
    // [27] (byte) anim::yidx#2 ← (byte) anim::yidx#1 - (const byte) sinlen_y#0 -- vbuz1=vbuz1_minus_vbuc1 
    lax yidx
    axs #sinlen_y
    stx yidx
    // [28] phi from anim::@4 anim::@7 to anim::@5 [phi:anim::@4/anim::@7->anim::@5]
  b5_from_b4:
  b5_from_b7:
    // [28] phi (byte) anim::yidx#6 = (byte) anim::yidx#1 [phi:anim::@4/anim::@7->anim::@5#0] -- register_copy 
    jmp b5
    // anim::@5
  b5:
    // [29] (byte) anim::j2#1 ← (byte) anim::j2#2 - (byte) 2 -- vbuz1=vbuz1_minus_2 
    dec j2
    dec j2
    // [30] (byte) anim::j#1 ← ++ (byte) anim::j#2 -- vbuz1=_inc_vbuz1 
    inc j
    // [31] if((byte) anim::j#1!=(byte) 7) goto anim::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp j
    bne b3_from_b5
    jmp b8
    // anim::@8
  b8:
    // [32] *((const byte*) SPRITES_XMSB#0) ← (byte) anim::x_msb#1 -- _deref_pbuc1=vbuz1 
    lda x_msb
    sta SPRITES_XMSB
    // [33] (byte) sin_idx_x#3 ← ++ (byte) sin_idx_x#13 -- vbuz1=_inc_vbuz1 
    inc sin_idx_x
    // [34] if((byte) sin_idx_x#3<(const byte) sinlen_x#0) goto anim::@9 -- vbuz1_lt_vbuc1_then_la1 
    lda sin_idx_x
    cmp #sinlen_x
    bcc b9_from_b8
    // [36] phi from anim::@8 to anim::@1 [phi:anim::@8->anim::@1]
  b1_from_b8:
    // [36] phi (byte) sin_idx_x#11 = (byte) 0 [phi:anim::@8->anim::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_x
    jmp b1
    // [35] phi from anim::@8 to anim::@9 [phi:anim::@8->anim::@9]
  b9_from_b8:
    jmp b9
    // anim::@9
  b9:
    // [36] phi from anim::@9 to anim::@1 [phi:anim::@9->anim::@1]
  b1_from_b9:
    // [36] phi (byte) sin_idx_x#11 = (byte) sin_idx_x#3 [phi:anim::@9->anim::@1#0] -- register_copy 
    jmp b1
    // anim::@1
  b1:
    // [37] (byte) sin_idx_y#3 ← ++ (byte) sin_idx_y#13 -- vbuz1=_inc_vbuz1 
    inc sin_idx_y
    // [38] if((byte) sin_idx_y#3<(const byte) sinlen_y#0) goto anim::@10 -- vbuz1_lt_vbuc1_then_la1 
    lda sin_idx_y
    cmp #sinlen_y
    bcc b10_from_b1
    // [40] phi from anim::@1 to anim::@2 [phi:anim::@1->anim::@2]
  b2_from_b1:
    // [40] phi (byte) sin_idx_y#11 = (byte) 0 [phi:anim::@1->anim::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_y
    jmp b2
    // [39] phi from anim::@1 to anim::@10 [phi:anim::@1->anim::@10]
  b10_from_b1:
    jmp b10
    // anim::@10
  b10:
    // [40] phi from anim::@10 to anim::@2 [phi:anim::@10->anim::@2]
  b2_from_b10:
    // [40] phi (byte) sin_idx_y#11 = (byte) sin_idx_y#3 [phi:anim::@10->anim::@2#0] -- register_copy 
    jmp b2
    // anim::@2
  b2:
    // [41] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BORDERCOL
    jmp breturn
    // anim::@return
  breturn:
    // [42] return 
    rts
}
  // init
init: {
    // [44] call clear_screen 
    // [65] phi from init to clear_screen [phi:init->clear_screen]
  clear_screen_from_init:
    jsr clear_screen
    // [45] phi from init to init::@1 [phi:init->init::@1]
  b1_from_init:
    // [45] phi (byte) init::i#2 = (byte) 0 [phi:init->init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
    // [45] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  b1_from_b1:
    // [45] phi (byte) init::i#2 = (byte) init::i#1 [phi:init::@1->init::@1#0] -- register_copy 
    jmp b1
    // init::@1
  b1:
    // [46] *((const byte*) COLS#0 + (byte) init::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta COLS,x
    // [47] *((const byte*) COLS#0+(byte) $28 + (byte) init::i#2) ← (byte) $b -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$b
    sta COLS+$28,x
    // [48] (byte) init::i#1 ← ++ (byte) init::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [49] if((byte) init::i#1!=(byte) $28) goto init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b1_from_b1
    // [50] phi from init::@1 to init::@2 [phi:init::@1->init::@2]
  b2_from_b1:
    jmp b2
    // init::@2
  b2:
    // [51] call place_sprites 
    jsr place_sprites
    // [52] phi from init::@2 to init::@3 [phi:init::@2->init::@3]
  b3_from_b2:
    jmp b3
    // init::@3
  b3:
    // [53] call gen_sprites 
    // [169] phi from init::@3 to gen_sprites [phi:init::@3->gen_sprites]
  gen_sprites_from_b3:
    jsr gen_sprites
    // [54] phi from init::@3 to init::@4 [phi:init::@3->init::@4]
  b4_from_b3:
    jmp b4
    // init::@4
  b4:
    // [55] call progress_init 
    // [167] phi from init::@4 to progress_init [phi:init::@4->progress_init]
  progress_init_from_b4:
    // [167] phi (byte*) progress_init::line#2 = (const byte*) SCREEN#0 [phi:init::@4->progress_init#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta progress_init.line
    lda #>SCREEN
    sta progress_init.line+1
    jsr progress_init
    // [56] phi from init::@4 to init::@5 [phi:init::@4->init::@5]
  b5_from_b4:
    jmp b5
    // init::@5
  b5:
    // [57] call gen_sintab 
    // [71] phi from init::@5 to gen_sintab [phi:init::@5->gen_sintab]
  gen_sintab_from_b5:
    // [71] phi (byte*) gen_sintab::sintab#12 = (const byte[$dd]) sintab_x#0 [phi:init::@5->gen_sintab#0] -- pbuz1=pbuc1 
    lda #<sintab_x
    sta gen_sintab.sintab
    lda #>sintab_x
    sta gen_sintab.sintab+1
    // [71] phi (byte) gen_sintab::length#10 = (const byte) sinlen_x#0 [phi:init::@5->gen_sintab#1] -- vbuz1=vbuc1 
    lda #sinlen_x
    sta gen_sintab.length
    // [71] phi (byte) gen_sintab::min#2 = (byte) 0 [phi:init::@5->gen_sintab#2] -- vbuz1=vbuc1 
    lda #0
    sta gen_sintab.min
    // [71] phi (byte) gen_sintab::max#2 = (byte) $ff [phi:init::@5->gen_sintab#3] -- vbuxx=vbuc1 
    ldx #$ff
    jsr gen_sintab
    // [58] phi from init::@5 to init::@6 [phi:init::@5->init::@6]
  b6_from_b5:
    jmp b6
    // init::@6
  b6:
    // [59] call progress_init 
    // [167] phi from init::@6 to progress_init [phi:init::@6->progress_init]
  progress_init_from_b6:
    // [167] phi (byte*) progress_init::line#2 = (const byte*) SCREEN#0+(byte) $28 [phi:init::@6->progress_init#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28
    sta progress_init.line
    lda #>SCREEN+$28
    sta progress_init.line+1
    jsr progress_init
    // [60] phi from init::@6 to init::@7 [phi:init::@6->init::@7]
  b7_from_b6:
    jmp b7
    // init::@7
  b7:
    // [61] call gen_sintab 
    // [71] phi from init::@7 to gen_sintab [phi:init::@7->gen_sintab]
  gen_sintab_from_b7:
    // [71] phi (byte*) gen_sintab::sintab#12 = (const byte[$c5]) sintab_y#0 [phi:init::@7->gen_sintab#0] -- pbuz1=pbuc1 
    lda #<sintab_y
    sta gen_sintab.sintab
    lda #>sintab_y
    sta gen_sintab.sintab+1
    // [71] phi (byte) gen_sintab::length#10 = (const byte) sinlen_y#0 [phi:init::@7->gen_sintab#1] -- vbuz1=vbuc1 
    lda #sinlen_y
    sta gen_sintab.length
    // [71] phi (byte) gen_sintab::min#2 = (byte) $32 [phi:init::@7->gen_sintab#2] -- vbuz1=vbuc1 
    lda #$32
    sta gen_sintab.min
    // [71] phi (byte) gen_sintab::max#2 = (byte) $d0 [phi:init::@7->gen_sintab#3] -- vbuxx=vbuc1 
    ldx #$d0
    jsr gen_sintab
    // [62] phi from init::@7 to init::@8 [phi:init::@7->init::@8]
  b8_from_b7:
    jmp b8
    // init::@8
  b8:
    // [63] call clear_screen 
    // [65] phi from init::@8 to clear_screen [phi:init::@8->clear_screen]
  clear_screen_from_b8:
    jsr clear_screen
    jmp breturn
    // init::@return
  breturn:
    // [64] return 
    rts
}
  // clear_screen
clear_screen: {
    .label sc = 9
    // [66] phi from clear_screen to clear_screen::@1 [phi:clear_screen->clear_screen::@1]
  b1_from_clear_screen:
    // [66] phi (byte*) clear_screen::sc#2 = (const byte*) SCREEN#0 [phi:clear_screen->clear_screen::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta sc
    lda #>SCREEN
    sta sc+1
    jmp b1
    // [66] phi from clear_screen::@1 to clear_screen::@1 [phi:clear_screen::@1->clear_screen::@1]
  b1_from_b1:
    // [66] phi (byte*) clear_screen::sc#2 = (byte*) clear_screen::sc#1 [phi:clear_screen::@1->clear_screen::@1#0] -- register_copy 
    jmp b1
    // clear_screen::@1
  b1:
    // [67] *((byte*) clear_screen::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
    // [68] (byte*) clear_screen::sc#1 ← ++ (byte*) clear_screen::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
    // [69] if((byte*) clear_screen::sc#1<(const byte*) SCREEN#0+(word) $3e8) goto clear_screen::@1 -- pbuz1_lt_pbuc1_then_la1 
    lda sc+1
    cmp #>SCREEN+$3e8
    bcc b1_from_b1
    bne !+
    lda sc
    cmp #<SCREEN+$3e8
    bcc b1_from_b1
  !:
    jmp breturn
    // clear_screen::@return
  breturn:
    // [70] return 
    rts
}
  // gen_sintab
// Generate a sinus table using BASIC floats
// - sintab is a pointer to the table to fill
// - length is the length of the sine table
// - min is the minimum value of the generated sinus
// - max is the maximum value of the generated sinus
// gen_sintab(byte* zeropage($d) sintab, byte zeropage($c) length, byte zeropage($b) min, byte register(X) max)
gen_sintab: {
    // amplitude/2
    .label f_2pi = $e2e5
    .label _23 = $26
    .label i = $f
    .label min = $b
    .label length = $c
    .label sintab = $d
    // [72] (word) setFAC::w#0 ← (word)(byte) gen_sintab::max#2 -- vwuz1=_word_vbuxx 
    txa
    sta setFAC.w
    lda #0
    sta setFAC.w+1
    // [73] call setFAC 
    // [153] phi from gen_sintab to setFAC [phi:gen_sintab->setFAC]
  setFAC_from_gen_sintab:
    // [153] phi (word) setFAC::w#5 = (word) setFAC::w#0 [phi:gen_sintab->setFAC#0] -- register_copy 
    jsr setFAC
    // [74] phi from gen_sintab to gen_sintab::@2 [phi:gen_sintab->gen_sintab::@2]
  b2_from_gen_sintab:
    jmp b2
    // gen_sintab::@2
  b2:
    // [75] call setARGtoFAC 
    jsr setARGtoFAC
    jmp b3
    // gen_sintab::@3
  b3:
    // [76] (word) setFAC::w#1 ← (word)(byte) gen_sintab::min#2 -- vwuz1=_word_vbuz2 
    lda min
    sta setFAC.w
    lda #0
    sta setFAC.w+1
    // [77] call setFAC 
    // [153] phi from gen_sintab::@3 to setFAC [phi:gen_sintab::@3->setFAC]
  setFAC_from_b3:
    // [153] phi (word) setFAC::w#5 = (word) setFAC::w#1 [phi:gen_sintab::@3->setFAC#0] -- register_copy 
    jsr setFAC
    // [78] phi from gen_sintab::@3 to gen_sintab::@4 [phi:gen_sintab::@3->gen_sintab::@4]
  b4_from_b3:
    jmp b4
    // gen_sintab::@4
  b4:
    // [79] call setMEMtoFAC 
    // [158] phi from gen_sintab::@4 to setMEMtoFAC [phi:gen_sintab::@4->setMEMtoFAC]
  setMEMtoFAC_from_b4:
    // [158] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_min#0 [phi:gen_sintab::@4->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_min
    sta setMEMtoFAC.mem
    lda #>f_min
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [80] phi from gen_sintab::@4 to gen_sintab::@5 [phi:gen_sintab::@4->gen_sintab::@5]
  b5_from_b4:
    jmp b5
    // gen_sintab::@5
  b5:
    // [81] call subFACfromARG 
    jsr subFACfromARG
    // [82] phi from gen_sintab::@5 to gen_sintab::@6 [phi:gen_sintab::@5->gen_sintab::@6]
  b6_from_b5:
    jmp b6
    // gen_sintab::@6
  b6:
    // [83] call setMEMtoFAC 
    // [158] phi from gen_sintab::@6 to setMEMtoFAC [phi:gen_sintab::@6->setMEMtoFAC]
  setMEMtoFAC_from_b6:
    // [158] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@6->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta setMEMtoFAC.mem
    lda #>f_amp
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [84] phi from gen_sintab::@6 to gen_sintab::@7 [phi:gen_sintab::@6->gen_sintab::@7]
  b7_from_b6:
    jmp b7
    // gen_sintab::@7
  b7:
    // [85] call setFAC 
    // [153] phi from gen_sintab::@7 to setFAC [phi:gen_sintab::@7->setFAC]
  setFAC_from_b7:
    // [153] phi (word) setFAC::w#5 = (byte) 2 [phi:gen_sintab::@7->setFAC#0] -- vwuz1=vbuc1 
    lda #<2
    sta setFAC.w
    lda #>2
    sta setFAC.w+1
    jsr setFAC
    // [86] phi from gen_sintab::@7 to gen_sintab::@8 [phi:gen_sintab::@7->gen_sintab::@8]
  b8_from_b7:
    jmp b8
    // gen_sintab::@8
  b8:
    // [87] call divMEMbyFAC 
    // [148] phi from gen_sintab::@8 to divMEMbyFAC [phi:gen_sintab::@8->divMEMbyFAC]
  divMEMbyFAC_from_b8:
    // [148] phi (byte*) divMEMbyFAC::mem#2 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@8->divMEMbyFAC#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta divMEMbyFAC.mem
    lda #>f_amp
    sta divMEMbyFAC.mem+1
    jsr divMEMbyFAC
    // [88] phi from gen_sintab::@8 to gen_sintab::@9 [phi:gen_sintab::@8->gen_sintab::@9]
  b9_from_b8:
    jmp b9
    // gen_sintab::@9
  b9:
    // [89] call setMEMtoFAC 
    // [158] phi from gen_sintab::@9 to setMEMtoFAC [phi:gen_sintab::@9->setMEMtoFAC]
  setMEMtoFAC_from_b9:
    // [158] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@9->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta setMEMtoFAC.mem
    lda #>f_amp
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [90] phi from gen_sintab::@9 to gen_sintab::@10 [phi:gen_sintab::@9->gen_sintab::@10]
  b10_from_b9:
    jmp b10
    // gen_sintab::@10
  b10:
    // [91] call addMEMtoFAC 
    // [131] phi from gen_sintab::@10 to addMEMtoFAC [phi:gen_sintab::@10->addMEMtoFAC]
  addMEMtoFAC_from_b10:
    jsr addMEMtoFAC
    // [92] phi from gen_sintab::@10 to gen_sintab::@11 [phi:gen_sintab::@10->gen_sintab::@11]
  b11_from_b10:
    jmp b11
    // gen_sintab::@11
  b11:
    // [93] call setMEMtoFAC 
    // [158] phi from gen_sintab::@11 to setMEMtoFAC [phi:gen_sintab::@11->setMEMtoFAC]
  setMEMtoFAC_from_b11:
    // [158] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_min#0 [phi:gen_sintab::@11->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_min
    sta setMEMtoFAC.mem
    lda #>f_min
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [94] phi from gen_sintab::@11 to gen_sintab::@1 [phi:gen_sintab::@11->gen_sintab::@1]
  b1_from_b11:
    // [94] phi (byte*) progress_cursor#34 = (byte*) progress_init::line#2 [phi:gen_sintab::@11->gen_sintab::@1#0] -- register_copy 
    // [94] phi (byte) progress_idx#34 = (byte) 0 [phi:gen_sintab::@11->gen_sintab::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta progress_idx
    // [94] phi (byte) gen_sintab::i#10 = (byte) 0 [phi:gen_sintab::@11->gen_sintab::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  // f_min = min + (max - min) / 2
    // [94] phi from gen_sintab::@21 to gen_sintab::@1 [phi:gen_sintab::@21->gen_sintab::@1]
  b1_from_b21:
    // [94] phi (byte*) progress_cursor#34 = (byte*) progress_cursor#11 [phi:gen_sintab::@21->gen_sintab::@1#0] -- register_copy 
    // [94] phi (byte) progress_idx#34 = (byte) progress_idx#12 [phi:gen_sintab::@21->gen_sintab::@1#1] -- register_copy 
    // [94] phi (byte) gen_sintab::i#10 = (byte) gen_sintab::i#1 [phi:gen_sintab::@21->gen_sintab::@1#2] -- register_copy 
    jmp b1
    // gen_sintab::@1
  b1:
    // [95] (word) setFAC::w#3 ← (word)(byte) gen_sintab::i#10 -- vwuz1=_word_vbuz2 
    lda i
    sta setFAC.w
    lda #0
    sta setFAC.w+1
    // [96] call setFAC 
    // [153] phi from gen_sintab::@1 to setFAC [phi:gen_sintab::@1->setFAC]
  setFAC_from_b1:
    // [153] phi (word) setFAC::w#5 = (word) setFAC::w#3 [phi:gen_sintab::@1->setFAC#0] -- register_copy 
    jsr setFAC
    // [97] phi from gen_sintab::@1 to gen_sintab::@12 [phi:gen_sintab::@1->gen_sintab::@12]
  b12_from_b1:
    jmp b12
    // gen_sintab::@12
  b12:
    // [98] call mulFACbyMEM 
    // [141] phi from gen_sintab::@12 to mulFACbyMEM [phi:gen_sintab::@12->mulFACbyMEM]
  mulFACbyMEM_from_b12:
    // [141] phi (byte*) mulFACbyMEM::mem#2 = (const byte*) gen_sintab::f_2pi#0 [phi:gen_sintab::@12->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_2pi
    sta mulFACbyMEM.mem
    lda #>f_2pi
    sta mulFACbyMEM.mem+1
    jsr mulFACbyMEM
    // [99] phi from gen_sintab::@12 to gen_sintab::@13 [phi:gen_sintab::@12->gen_sintab::@13]
  b13_from_b12:
    jmp b13
    // gen_sintab::@13
  b13:
    // [100] call setMEMtoFAC 
    // [158] phi from gen_sintab::@13 to setMEMtoFAC [phi:gen_sintab::@13->setMEMtoFAC]
  setMEMtoFAC_from_b13:
    // [158] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_i#0 [phi:gen_sintab::@13->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta setMEMtoFAC.mem
    lda #>f_i
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    jmp b14
    // gen_sintab::@14
  b14:
    // [101] (word) setFAC::w#4 ← (word)(byte) gen_sintab::length#10 -- vwuz1=_word_vbuz2 
    lda length
    sta setFAC.w
    lda #0
    sta setFAC.w+1
    // [102] call setFAC 
    // [153] phi from gen_sintab::@14 to setFAC [phi:gen_sintab::@14->setFAC]
  setFAC_from_b14:
    // [153] phi (word) setFAC::w#5 = (word) setFAC::w#4 [phi:gen_sintab::@14->setFAC#0] -- register_copy 
    jsr setFAC
    // [103] phi from gen_sintab::@14 to gen_sintab::@15 [phi:gen_sintab::@14->gen_sintab::@15]
  b15_from_b14:
    jmp b15
    // gen_sintab::@15
  b15:
    // [104] call divMEMbyFAC 
    // [148] phi from gen_sintab::@15 to divMEMbyFAC [phi:gen_sintab::@15->divMEMbyFAC]
  divMEMbyFAC_from_b15:
    // [148] phi (byte*) divMEMbyFAC::mem#2 = (const byte[]) gen_sintab::f_i#0 [phi:gen_sintab::@15->divMEMbyFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta divMEMbyFAC.mem
    lda #>f_i
    sta divMEMbyFAC.mem+1
    jsr divMEMbyFAC
    // [105] phi from gen_sintab::@15 to gen_sintab::@16 [phi:gen_sintab::@15->gen_sintab::@16]
  b16_from_b15:
    jmp b16
    // gen_sintab::@16
  b16:
    // [106] call sinFAC 
    jsr sinFAC
    // [107] phi from gen_sintab::@16 to gen_sintab::@17 [phi:gen_sintab::@16->gen_sintab::@17]
  b17_from_b16:
    jmp b17
    // gen_sintab::@17
  b17:
    // [108] call mulFACbyMEM 
    // [141] phi from gen_sintab::@17 to mulFACbyMEM [phi:gen_sintab::@17->mulFACbyMEM]
  mulFACbyMEM_from_b17:
    // [141] phi (byte*) mulFACbyMEM::mem#2 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@17->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta mulFACbyMEM.mem
    lda #>f_amp
    sta mulFACbyMEM.mem+1
    jsr mulFACbyMEM
    // [109] phi from gen_sintab::@17 to gen_sintab::@18 [phi:gen_sintab::@17->gen_sintab::@18]
  b18_from_b17:
    jmp b18
    // gen_sintab::@18
  b18:
    // [110] call addMEMtoFAC 
    // [131] phi from gen_sintab::@18 to addMEMtoFAC [phi:gen_sintab::@18->addMEMtoFAC]
  addMEMtoFAC_from_b18:
    jsr addMEMtoFAC
    // [111] phi from gen_sintab::@18 to gen_sintab::@19 [phi:gen_sintab::@18->gen_sintab::@19]
  b19_from_b18:
    jmp b19
    // gen_sintab::@19
  b19:
    // [112] call getFAC 
    jsr getFAC
    // [113] (word) getFAC::return#2 ← (word) getFAC::return#0
    jmp b20
    // gen_sintab::@20
  b20:
    // [114] (word~) gen_sintab::$23 ← (word) getFAC::return#2
    // [115] (byte~) gen_sintab::$24 ← (byte)(word~) gen_sintab::$23 -- vbuaa=_byte_vwuz1 
    lda _23
    // [116] *((byte*) gen_sintab::sintab#12 + (byte) gen_sintab::i#10) ← (byte~) gen_sintab::$24 -- pbuz1_derefidx_vbuz2=vbuaa 
    // fac =  sin( i * 2 * PI / length ) * (max - min) / 2 + min + (max - min) / 2
    ldy i
    sta (sintab),y
    // [117] call progress_inc 
    jsr progress_inc
    jmp b21
    // gen_sintab::@21
  b21:
    // [118] (byte) gen_sintab::i#1 ← ++ (byte) gen_sintab::i#10 -- vbuz1=_inc_vbuz1 
    inc i
    // [119] if((byte) gen_sintab::i#1<(byte) gen_sintab::length#10) goto gen_sintab::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda i
    cmp length
    bcc b1_from_b21
    jmp breturn
    // gen_sintab::@return
  breturn:
    // [120] return 
    rts
    f_i: .byte 0, 0, 0, 0, 0
    // i * 2 * PI
    f_min: .byte 0, 0, 0, 0, 0
    // amplitude/2 + min
    f_amp: .byte 0, 0, 0, 0, 0
}
  // progress_inc
// Increase PETSCII progress one bit
// Done by increasing the character until the idx is 8 and then moving to the next char
progress_inc: {
    // [121] (byte) progress_idx#10 ← ++ (byte) progress_idx#34 -- vbuz1=_inc_vbuz1 
    inc progress_idx
    // [122] if((byte) progress_idx#10!=(byte) 8) goto progress_inc::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp progress_idx
    bne b1_from_progress_inc
    jmp b2
    // progress_inc::@2
  b2:
    // [123] *((byte*) progress_cursor#34) ← *((const byte[]) progress_inc::progress_chars#0+(byte) 8) -- _deref_pbuz1=_deref_pbuc1 
    lda progress_chars+8
    ldy #0
    sta (progress_cursor),y
    // [124] (byte*) progress_cursor#10 ← ++ (byte*) progress_cursor#34 -- pbuz1=_inc_pbuz1 
    inc progress_cursor
    bne !+
    inc progress_cursor+1
  !:
    // [125] phi from progress_inc::@2 to progress_inc::@1 [phi:progress_inc::@2->progress_inc::@1]
  b1_from_b2:
    // [125] phi (byte*) progress_cursor#11 = (byte*) progress_cursor#10 [phi:progress_inc::@2->progress_inc::@1#0] -- register_copy 
    // [125] phi (byte) progress_idx#12 = (byte) 0 [phi:progress_inc::@2->progress_inc::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta progress_idx
    jmp b1
    // [125] phi from progress_inc to progress_inc::@1 [phi:progress_inc->progress_inc::@1]
  b1_from_progress_inc:
    // [125] phi (byte*) progress_cursor#11 = (byte*) progress_cursor#34 [phi:progress_inc->progress_inc::@1#0] -- register_copy 
    // [125] phi (byte) progress_idx#12 = (byte) progress_idx#10 [phi:progress_inc->progress_inc::@1#1] -- register_copy 
    jmp b1
    // progress_inc::@1
  b1:
    // [126] *((byte*) progress_cursor#11) ← *((const byte[]) progress_inc::progress_chars#0 + (byte) progress_idx#12) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy progress_idx
    lda progress_chars,y
    ldy #0
    sta (progress_cursor),y
    jmp breturn
    // progress_inc::@return
  breturn:
    // [127] return 
    rts
    // Progress characters
    progress_chars: .byte $20, $65, $74, $75, $61, $f6, $e7, $ea, $e0
}
  // getFAC
// word = FAC
// Get the value of the FAC (floating point accumulator) as an integer 16bit word
// Destroys the value in the FAC in the process
getFAC: {
    .label return = $26
    // asm { jsr$b1aa sty$fe sta$ff  }
    // Load FAC (floating point accumulator) integer part into word register Y,A
    jsr $b1aa
    sty $fe
    sta $ff
    // [129] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda memLo
    sta return
    lda memHi
    sta return+1
    jmp breturn
    // getFAC::@return
  breturn:
    // [130] return 
    rts
}
  // addMEMtoFAC
// FAC = MEM+FAC
// Set FAC to MEM (float saved in memory) plus FAC (float accumulator)
// Reads 5 bytes from memory
addMEMtoFAC: {
    // [132] call prepareMEM 
    // [135] phi from addMEMtoFAC to prepareMEM [phi:addMEMtoFAC->prepareMEM]
  prepareMEM_from_addMEMtoFAC:
    // [135] phi (byte*) prepareMEM::mem#5 = (const byte[]) gen_sintab::f_min#0 [phi:addMEMtoFAC->prepareMEM#0] -- pbuz1=pbuc1 
    lda #<gen_sintab.f_min
    sta prepareMEM.mem
    lda #>gen_sintab.f_min
    sta prepareMEM.mem+1
    jsr prepareMEM
    jmp b1
    // addMEMtoFAC::@1
  b1:
    // asm { lda$fe ldy$ff jsr$b867  }
    lda $fe
    ldy $ff
    jsr $b867
    jmp breturn
    // addMEMtoFAC::@return
  breturn:
    // [134] return 
    rts
}
  // prepareMEM
// Prepare MEM pointers for operations using MEM
// prepareMEM(byte* zeropage($13) mem)
prepareMEM: {
    .label mem = $13
    // [136] (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem#5 -- vbuaa=_lo_pbuz1 
    lda mem
    // [137] *((const byte*) memLo#0) ← (byte~) prepareMEM::$0 -- _deref_pbuc1=vbuaa 
    sta memLo
    // [138] (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem#5 -- vbuaa=_hi_pbuz1 
    lda mem+1
    // [139] *((const byte*) memHi#0) ← (byte~) prepareMEM::$1 -- _deref_pbuc1=vbuaa 
    sta memHi
    jmp breturn
    // prepareMEM::@return
  breturn:
    // [140] return 
    rts
}
  // mulFACbyMEM
// FAC = MEM*FAC
// Set FAC to MEM (float saved in memory) multiplied by FAC (float accumulator)
// Reads 5 bytes from memory
// mulFACbyMEM(byte* zeropage($13) mem)
mulFACbyMEM: {
    .label mem = $13
    // [142] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2
    // [143] call prepareMEM 
    // [135] phi from mulFACbyMEM to prepareMEM [phi:mulFACbyMEM->prepareMEM]
  prepareMEM_from_mulFACbyMEM:
    // [135] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#4 [phi:mulFACbyMEM->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
    // mulFACbyMEM::@1
  b1:
    // asm { lda$fe ldy$ff jsr$ba28  }
    lda $fe
    ldy $ff
    jsr $ba28
    jmp breturn
    // mulFACbyMEM::@return
  breturn:
    // [145] return 
    rts
}
  // sinFAC
// FAC = sin(FAC)
// Set FAC to sinus of the FAC - sin(FAC)
// Sinus is calculated on radians (0-2*PI)
sinFAC: {
    // asm { jsr$e26b  }
    jsr $e26b
    jmp breturn
    // sinFAC::@return
  breturn:
    // [147] return 
    rts
}
  // divMEMbyFAC
// FAC = MEM/FAC
// Set FAC to MEM (float saved in memory) divided by FAC (float accumulator)
// Reads 5 bytes from memory
// divMEMbyFAC(byte* zeropage($13) mem)
divMEMbyFAC: {
    .label mem = $13
    // [149] (byte*) prepareMEM::mem#3 ← (byte*) divMEMbyFAC::mem#2
    // [150] call prepareMEM 
    // [135] phi from divMEMbyFAC to prepareMEM [phi:divMEMbyFAC->prepareMEM]
  prepareMEM_from_divMEMbyFAC:
    // [135] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#3 [phi:divMEMbyFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
    // divMEMbyFAC::@1
  b1:
    // asm { lda$fe ldy$ff jsr$bb0f  }
    lda $fe
    ldy $ff
    jsr $bb0f
    jmp breturn
    // divMEMbyFAC::@return
  breturn:
    // [152] return 
    rts
}
  // setFAC
// FAC = word
// Set the FAC (floating point accumulator) to the integer value of a 16bit word
// setFAC(word zeropage($13) w)
setFAC: {
    .label w = $13
    // [154] (byte*) prepareMEM::mem#0 ← (byte*)(word) setFAC::w#5
    // [155] call prepareMEM 
    // [135] phi from setFAC to prepareMEM [phi:setFAC->prepareMEM]
  prepareMEM_from_setFAC:
    // [135] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#0 [phi:setFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
    // setFAC::@1
  b1:
    // asm { ldy$fe lda$ff jsr$b391  }
    // Load word register Y,A into FAC (floating point accumulator)
    ldy $fe
    lda $ff
    jsr $b391
    jmp breturn
    // setFAC::@return
  breturn:
    // [157] return 
    rts
}
  // setMEMtoFAC
// MEM = FAC
// Stores the value of the FAC to memory
// Stores 5 bytes (means it is necessary to allocate 5 bytes to avoid clobbering other data using eg. byte[] mem = {0, 0, 0, 0, 0};)
// setMEMtoFAC(byte* zeropage($13) mem)
setMEMtoFAC: {
    .label mem = $13
    // [159] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#5
    // [160] call prepareMEM 
    // [135] phi from setMEMtoFAC to prepareMEM [phi:setMEMtoFAC->prepareMEM]
  prepareMEM_from_setMEMtoFAC:
    // [135] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#1 [phi:setMEMtoFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
    // setMEMtoFAC::@1
  b1:
    // asm { ldx$fe ldy$ff jsr$bbd4  }
    ldx $fe
    ldy $ff
    jsr $bbd4
    jmp breturn
    // setMEMtoFAC::@return
  breturn:
    // [162] return 
    rts
}
  // subFACfromARG
// FAC = ARG-FAC
// Set FAC to ARG minus FAC
subFACfromARG: {
    // asm { jsr$b853  }
    jsr $b853
    jmp breturn
    // subFACfromARG::@return
  breturn:
    // [164] return 
    rts
}
  // setARGtoFAC
// ARG = FAC
// Set the ARG (floating point argument) to the value of the FAC (floating point accumulator)
setARGtoFAC: {
    // asm { jsr$bc0f  }
    jsr $bc0f
    jmp breturn
    // setARGtoFAC::@return
  breturn:
    // [166] return 
    rts
}
  // progress_init
// Initialize the PETSCII progress bar
// progress_init(byte* zeropage($11) line)
progress_init: {
    .label line = $11
    jmp breturn
    // progress_init::@return
  breturn:
    // [168] return 
    rts
}
  // gen_sprites
gen_sprites: {
    .label spr = $16
    .label i = $15
    // [170] phi from gen_sprites to gen_sprites::@1 [phi:gen_sprites->gen_sprites::@1]
  b1_from_gen_sprites:
    // [170] phi (byte*) gen_sprites::spr#2 = (const byte*) sprites#0 [phi:gen_sprites->gen_sprites::@1#0] -- pbuz1=pbuc1 
    lda #<sprites
    sta spr
    lda #>sprites
    sta spr+1
    // [170] phi (byte) gen_sprites::i#2 = (byte) 0 [phi:gen_sprites->gen_sprites::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
    // [170] phi from gen_sprites::@2 to gen_sprites::@1 [phi:gen_sprites::@2->gen_sprites::@1]
  b1_from_b2:
    // [170] phi (byte*) gen_sprites::spr#2 = (byte*) gen_sprites::spr#1 [phi:gen_sprites::@2->gen_sprites::@1#0] -- register_copy 
    // [170] phi (byte) gen_sprites::i#2 = (byte) gen_sprites::i#1 [phi:gen_sprites::@2->gen_sprites::@1#1] -- register_copy 
    jmp b1
    // gen_sprites::@1
  b1:
    // [171] (byte) gen_chargen_sprite::ch#0 ← *((const byte[]) gen_sprites::cml#0 + (byte) gen_sprites::i#2) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldy i
    ldx cml,y
    // [172] (byte*) gen_chargen_sprite::sprite#0 ← (byte*) gen_sprites::spr#2 -- pbuz1=pbuz2 
    lda spr
    sta gen_chargen_sprite.sprite
    lda spr+1
    sta gen_chargen_sprite.sprite+1
    // [173] call gen_chargen_sprite 
    jsr gen_chargen_sprite
    jmp b2
    // gen_sprites::@2
  b2:
    // [174] (byte*) gen_sprites::spr#1 ← (byte*) gen_sprites::spr#2 + (byte) $40 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$40
    clc
    adc spr
    sta spr
    bcc !+
    inc spr+1
  !:
    // [175] (byte) gen_sprites::i#1 ← ++ (byte) gen_sprites::i#2 -- vbuz1=_inc_vbuz1 
    inc i
    // [176] if((byte) gen_sprites::i#1!=(byte) 7) goto gen_sprites::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp i
    bne b1_from_b2
    jmp breturn
    // gen_sprites::@return
  breturn:
    // [177] return 
    rts
    cml: .text "camelot"
}
  // gen_chargen_sprite
// Generate a sprite from a C64 CHARGEN character (by making each pixel 3x3 pixels large)
// - c is the character to generate
// - sprite is a pointer to the position of the sprite to generate
// gen_chargen_sprite(byte register(X) ch, byte* zeropage($1d) sprite)
gen_chargen_sprite: {
    .label _0 = $28
    .label _1 = $28
    .label sprite = $1d
    .label chargen = $28
    .label bits = $19
    .label s_gen = $1c
    .label x = $1a
    .label y = $18
    .label c = $1b
    // [178] (word~) gen_chargen_sprite::$0 ← (word)(byte) gen_chargen_sprite::ch#0 -- vwuz1=_word_vbuxx 
    txa
    sta _0
    lda #0
    sta _0+1
    // [179] (word~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _1
    rol _1+1
    asl _1
    rol _1+1
    asl _1
    rol _1+1
    // [180] (byte*) gen_chargen_sprite::chargen#0 ← (const byte*) CHARGEN#0 + (word~) gen_chargen_sprite::$1 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda chargen
    adc #<CHARGEN
    sta chargen
    lda chargen+1
    adc #>CHARGEN
    sta chargen+1
    // asm { sei  }
    sei
    // [182] *((const byte*) PROCPORT#0) ← (byte) $32 -- _deref_pbuc1=vbuc2 
    lda #$32
    sta PROCPORT
    // [183] phi from gen_chargen_sprite to gen_chargen_sprite::@1 [phi:gen_chargen_sprite->gen_chargen_sprite::@1]
  b1_from_gen_chargen_sprite:
    // [183] phi (byte*) gen_chargen_sprite::sprite#11 = (byte*) gen_chargen_sprite::sprite#0 [phi:gen_chargen_sprite->gen_chargen_sprite::@1#0] -- register_copy 
    // [183] phi (byte) gen_chargen_sprite::y#2 = (byte) 0 [phi:gen_chargen_sprite->gen_chargen_sprite::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta y
    jmp b1
    // [183] phi from gen_chargen_sprite::@8 to gen_chargen_sprite::@1 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@1]
  b1_from_b8:
    // [183] phi (byte*) gen_chargen_sprite::sprite#11 = (byte*) gen_chargen_sprite::sprite#2 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@1#0] -- register_copy 
    // [183] phi (byte) gen_chargen_sprite::y#2 = (byte) gen_chargen_sprite::y#1 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@1#1] -- register_copy 
    jmp b1
    // gen_chargen_sprite::@1
  b1:
    // [184] (byte) gen_chargen_sprite::bits#0 ← *((byte*) gen_chargen_sprite::chargen#0 + (byte) gen_chargen_sprite::y#2) -- vbuz1=pbuz2_derefidx_vbuz3 
    // current chargen line
    ldy y
    lda (chargen),y
    sta bits
    // [185] phi from gen_chargen_sprite::@1 to gen_chargen_sprite::@2 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2]
  b2_from_b1:
    // [185] phi (byte) gen_chargen_sprite::x#6 = (byte) 0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta x
    // [185] phi (byte*) gen_chargen_sprite::sprite#10 = (byte*) gen_chargen_sprite::sprite#11 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#1] -- register_copy 
    // [185] phi (byte) gen_chargen_sprite::s_gen_cnt#4 = (byte) 0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#2] -- vbuyy=vbuc1 
    ldy #0
    // [185] phi (byte) gen_chargen_sprite::s_gen#5 = (byte) 0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta s_gen
    // [185] phi (byte) gen_chargen_sprite::bits#2 = (byte) gen_chargen_sprite::bits#0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#4] -- register_copy 
    jmp b2
    // [185] phi from gen_chargen_sprite::@7 to gen_chargen_sprite::@2 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@2]
  b2_from_b7:
    // [185] phi (byte) gen_chargen_sprite::x#6 = (byte) gen_chargen_sprite::x#1 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@2#0] -- register_copy 
    // [185] phi (byte*) gen_chargen_sprite::sprite#10 = (byte*) gen_chargen_sprite::sprite#4 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@2#1] -- register_copy 
    // [185] phi (byte) gen_chargen_sprite::s_gen_cnt#4 = (byte) gen_chargen_sprite::s_gen_cnt#5 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@2#2] -- register_copy 
    // [185] phi (byte) gen_chargen_sprite::s_gen#5 = (byte) gen_chargen_sprite::s_gen#6 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@2#3] -- register_copy 
    // [185] phi (byte) gen_chargen_sprite::bits#2 = (byte) gen_chargen_sprite::bits#1 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@2#4] -- register_copy 
    jmp b2
    // gen_chargen_sprite::@2
  b2:
    // [186] (byte~) gen_chargen_sprite::$3 ← (byte) gen_chargen_sprite::bits#2 & (byte) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and bits
    // [187] if((byte~) gen_chargen_sprite::$3==(byte) 0) goto gen_chargen_sprite::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b3_from_b2
    // [188] phi from gen_chargen_sprite::@2 to gen_chargen_sprite::@10 [phi:gen_chargen_sprite::@2->gen_chargen_sprite::@10]
  b10_from_b2:
    jmp b10
    // gen_chargen_sprite::@10
  b10:
    // [189] phi from gen_chargen_sprite::@10 to gen_chargen_sprite::@3 [phi:gen_chargen_sprite::@10->gen_chargen_sprite::@3]
  b3_from_b10:
    // [189] phi (byte) gen_chargen_sprite::c#3 = (byte) 1 [phi:gen_chargen_sprite::@10->gen_chargen_sprite::@3#0] -- vbuz1=vbuc1 
    lda #1
    sta c
    jmp b3
    // [189] phi from gen_chargen_sprite::@2 to gen_chargen_sprite::@3 [phi:gen_chargen_sprite::@2->gen_chargen_sprite::@3]
  b3_from_b2:
    // [189] phi (byte) gen_chargen_sprite::c#3 = (byte) 0 [phi:gen_chargen_sprite::@2->gen_chargen_sprite::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta c
    jmp b3
    // gen_chargen_sprite::@3
  b3:
    // [190] phi from gen_chargen_sprite::@3 to gen_chargen_sprite::@4 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4]
  b4_from_b3:
    // [190] phi (byte*) gen_chargen_sprite::sprite#3 = (byte*) gen_chargen_sprite::sprite#10 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#0] -- register_copy 
    // [190] phi (byte) gen_chargen_sprite::b#2 = (byte) 0 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#1] -- vbuxx=vbuc1 
    ldx #0
    // [190] phi (byte) gen_chargen_sprite::s_gen_cnt#3 = (byte) gen_chargen_sprite::s_gen_cnt#4 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#2] -- register_copy 
    // [190] phi (byte) gen_chargen_sprite::s_gen#3 = (byte) gen_chargen_sprite::s_gen#5 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#3] -- register_copy 
    jmp b4
  // generate 3 pixels in the sprite byte (s_gen)
    // [190] phi from gen_chargen_sprite::@5 to gen_chargen_sprite::@4 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4]
  b4_from_b5:
    // [190] phi (byte*) gen_chargen_sprite::sprite#3 = (byte*) gen_chargen_sprite::sprite#4 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#0] -- register_copy 
    // [190] phi (byte) gen_chargen_sprite::b#2 = (byte) gen_chargen_sprite::b#1 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#1] -- register_copy 
    // [190] phi (byte) gen_chargen_sprite::s_gen_cnt#3 = (byte) gen_chargen_sprite::s_gen_cnt#5 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#2] -- register_copy 
    // [190] phi (byte) gen_chargen_sprite::s_gen#3 = (byte) gen_chargen_sprite::s_gen#6 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#3] -- register_copy 
    jmp b4
    // gen_chargen_sprite::@4
  b4:
    // [191] (byte~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda s_gen
    asl
    // [192] (byte) gen_chargen_sprite::s_gen#1 ← (byte~) gen_chargen_sprite::$6 | (byte) gen_chargen_sprite::c#3 -- vbuz1=vbuaa_bor_vbuz2 
    ora c
    sta s_gen
    // [193] (byte) gen_chargen_sprite::s_gen_cnt#1 ← ++ (byte) gen_chargen_sprite::s_gen_cnt#3 -- vbuyy=_inc_vbuyy 
    iny
    // [194] if((byte) gen_chargen_sprite::s_gen_cnt#1!=(byte) 8) goto gen_chargen_sprite::@5 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne b5_from_b4
    jmp b6
    // gen_chargen_sprite::@6
  b6:
    // [195] *((byte*) gen_chargen_sprite::sprite#3) ← (byte) gen_chargen_sprite::s_gen#1 -- _deref_pbuz1=vbuz2 
    // sprite byte filled - store and move to next byte
    lda s_gen
    ldy #0
    sta (sprite),y
    // [196] *((byte*) gen_chargen_sprite::sprite#3 + (byte) 3) ← (byte) gen_chargen_sprite::s_gen#1 -- pbuz1_derefidx_vbuc1=vbuz2 
    lda s_gen
    ldy #3
    sta (sprite),y
    // [197] *((byte*) gen_chargen_sprite::sprite#3 + (byte) 6) ← (byte) gen_chargen_sprite::s_gen#1 -- pbuz1_derefidx_vbuc1=vbuz2 
    lda s_gen
    ldy #6
    sta (sprite),y
    // [198] (byte*) gen_chargen_sprite::sprite#1 ← ++ (byte*) gen_chargen_sprite::sprite#3 -- pbuz1=_inc_pbuz1 
    inc sprite
    bne !+
    inc sprite+1
  !:
    // [199] phi from gen_chargen_sprite::@6 to gen_chargen_sprite::@5 [phi:gen_chargen_sprite::@6->gen_chargen_sprite::@5]
  b5_from_b6:
    // [199] phi (byte*) gen_chargen_sprite::sprite#4 = (byte*) gen_chargen_sprite::sprite#1 [phi:gen_chargen_sprite::@6->gen_chargen_sprite::@5#0] -- register_copy 
    // [199] phi (byte) gen_chargen_sprite::s_gen_cnt#5 = (byte) 0 [phi:gen_chargen_sprite::@6->gen_chargen_sprite::@5#1] -- vbuyy=vbuc1 
    ldy #0
    // [199] phi (byte) gen_chargen_sprite::s_gen#6 = (byte) 0 [phi:gen_chargen_sprite::@6->gen_chargen_sprite::@5#2] -- vbuz1=vbuc1 
    lda #0
    sta s_gen
    jmp b5
    // [199] phi from gen_chargen_sprite::@4 to gen_chargen_sprite::@5 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5]
  b5_from_b4:
    // [199] phi (byte*) gen_chargen_sprite::sprite#4 = (byte*) gen_chargen_sprite::sprite#3 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5#0] -- register_copy 
    // [199] phi (byte) gen_chargen_sprite::s_gen_cnt#5 = (byte) gen_chargen_sprite::s_gen_cnt#1 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5#1] -- register_copy 
    // [199] phi (byte) gen_chargen_sprite::s_gen#6 = (byte) gen_chargen_sprite::s_gen#1 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5#2] -- register_copy 
    jmp b5
    // gen_chargen_sprite::@5
  b5:
    // [200] (byte) gen_chargen_sprite::b#1 ← ++ (byte) gen_chargen_sprite::b#2 -- vbuxx=_inc_vbuxx 
    inx
    // [201] if((byte) gen_chargen_sprite::b#1!=(byte) 3) goto gen_chargen_sprite::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #3
    bne b4_from_b5
    jmp b7
    // gen_chargen_sprite::@7
  b7:
    // [202] (byte) gen_chargen_sprite::bits#1 ← (byte) gen_chargen_sprite::bits#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl bits
    // [203] (byte) gen_chargen_sprite::x#1 ← ++ (byte) gen_chargen_sprite::x#6 -- vbuz1=_inc_vbuz1 
    inc x
    // [204] if((byte) gen_chargen_sprite::x#1!=(byte) 8) goto gen_chargen_sprite::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp x
    bne b2_from_b7
    jmp b8
    // gen_chargen_sprite::@8
  b8:
    // [205] (byte*) gen_chargen_sprite::sprite#2 ← (byte*) gen_chargen_sprite::sprite#4 + (byte) 6 -- pbuz1=pbuz1_plus_vbuc1 
    lda #6
    clc
    adc sprite
    sta sprite
    bcc !+
    inc sprite+1
  !:
    // [206] (byte) gen_chargen_sprite::y#1 ← ++ (byte) gen_chargen_sprite::y#2 -- vbuz1=_inc_vbuz1 
    inc y
    // [207] if((byte) gen_chargen_sprite::y#1!=(byte) 8) goto gen_chargen_sprite::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp y
    bne b1_from_b8
    jmp b9
    // gen_chargen_sprite::@9
  b9:
    // [208] *((const byte*) PROCPORT#0) ← (byte) $37 -- _deref_pbuc1=vbuc2 
    lda #$37
    sta PROCPORT
    // asm { cli  }
    cli
    jmp breturn
    // gen_chargen_sprite::@return
  breturn:
    // [210] return 
    rts
}
  // place_sprites
place_sprites: {
    .label sprites_ptr = SCREEN+$3f8
    .label spr_id = $1f
    .label spr_x = $21
    .label col = $23
    .label j2 = $22
    .label j = $20
    // [211] *((const byte*) SPRITES_ENABLE#0) ← (byte) $7f -- _deref_pbuc1=vbuc2 
    lda #$7f
    sta SPRITES_ENABLE
    // [212] *((const byte*) SPRITES_EXPAND_X#0) ← (byte) $7f -- _deref_pbuc1=vbuc2 
    lda #$7f
    sta SPRITES_EXPAND_X
    // [213] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte) $7f -- _deref_pbuc1=vbuc2 
    lda #$7f
    sta SPRITES_EXPAND_Y
    // [214] phi from place_sprites to place_sprites::@1 [phi:place_sprites->place_sprites::@1]
  b1_from_place_sprites:
    // [214] phi (byte) place_sprites::col#2 = (byte) 5 [phi:place_sprites->place_sprites::@1#0] -- vbuz1=vbuc1 
    lda #5
    sta col
    // [214] phi (byte) place_sprites::j2#3 = (byte) 0 [phi:place_sprites->place_sprites::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta j2
    // [214] phi (byte) place_sprites::spr_x#2 = (byte) $3c [phi:place_sprites->place_sprites::@1#2] -- vbuz1=vbuc1 
    lda #$3c
    sta spr_x
    // [214] phi (byte) place_sprites::j#2 = (byte) 0 [phi:place_sprites->place_sprites::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta j
    // [214] phi (byte) place_sprites::spr_id#2 = (byte)(word)(const byte*) sprites#0/(byte) $40 [phi:place_sprites->place_sprites::@1#4] -- vbuz1=vbuc1 
    lda #sprites/$40
    sta spr_id
    jmp b1
    // [214] phi from place_sprites::@1 to place_sprites::@1 [phi:place_sprites::@1->place_sprites::@1]
  b1_from_b1:
    // [214] phi (byte) place_sprites::col#2 = (byte) place_sprites::col#1 [phi:place_sprites::@1->place_sprites::@1#0] -- register_copy 
    // [214] phi (byte) place_sprites::j2#3 = (byte) place_sprites::j2#2 [phi:place_sprites::@1->place_sprites::@1#1] -- register_copy 
    // [214] phi (byte) place_sprites::spr_x#2 = (byte) place_sprites::spr_x#1 [phi:place_sprites::@1->place_sprites::@1#2] -- register_copy 
    // [214] phi (byte) place_sprites::j#2 = (byte) place_sprites::j#1 [phi:place_sprites::@1->place_sprites::@1#3] -- register_copy 
    // [214] phi (byte) place_sprites::spr_id#2 = (byte) place_sprites::spr_id#1 [phi:place_sprites::@1->place_sprites::@1#4] -- register_copy 
    jmp b1
    // place_sprites::@1
  b1:
    // [215] *((const byte*) place_sprites::sprites_ptr#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::spr_id#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda spr_id
    ldy j
    sta sprites_ptr,y
    // [216] (byte) place_sprites::spr_id#1 ← ++ (byte) place_sprites::spr_id#2 -- vbuz1=_inc_vbuz1 
    inc spr_id
    // [217] *((const byte*) SPRITES_XPOS#0 + (byte) place_sprites::j2#3) ← (byte) place_sprites::spr_x#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda spr_x
    ldy j2
    sta SPRITES_XPOS,y
    // [218] *((const byte*) SPRITES_YPOS#0 + (byte) place_sprites::j2#3) ← (byte) $50 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #$50
    ldy j2
    sta SPRITES_YPOS,y
    // [219] *((const byte*) SPRITES_COLS#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::col#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda col
    ldy j
    sta SPRITES_COLS,y
    // [220] (byte) place_sprites::spr_x#1 ← (byte) place_sprites::spr_x#2 + (byte) $20 -- vbuz1=vbuz1_plus_vbuc1 
    lax spr_x
    axs #-[$20]
    stx spr_x
    // [221] (byte) place_sprites::col#1 ← (byte) place_sprites::col#2 ^ (byte)(number) 7^(number) 5 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #7^5
    eor col
    sta col
    // [222] (byte) place_sprites::j2#1 ← ++ (byte) place_sprites::j2#3 -- vbuxx=_inc_vbuz1 
    ldx j2
    inx
    // [223] (byte) place_sprites::j2#2 ← ++ (byte) place_sprites::j2#1 -- vbuz1=_inc_vbuxx 
    inx
    stx j2
    // [224] (byte) place_sprites::j#1 ← ++ (byte) place_sprites::j#2 -- vbuz1=_inc_vbuz1 
    inc j
    // [225] if((byte) place_sprites::j#1!=(byte) 7) goto place_sprites::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp j
    bne b1_from_b1
    jmp breturn
    // place_sprites::@return
  breturn:
    // [226] return 
    rts
}
  // File Data
  sintab_x: .fill $dd, 0
  sintab_y: .fill $c5, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b6
Removing instruction jmp b4
Removing instruction jmp b7
Removing instruction jmp b5
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b1
Removing instruction jmp b10
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b1
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b14
Removing instruction jmp b15
Removing instruction jmp b16
Removing instruction jmp b17
Removing instruction jmp b18
Removing instruction jmp b19
Removing instruction jmp b20
Removing instruction jmp b21
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b10
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b5
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda x+1
Replacing instruction lda xidx with TXA
Replacing instruction lda yidx with TXA
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Removing instruction lda #0
Removing instruction lda s_gen
Removing instruction lda s_gen
Replacing instruction lda #0 with TYA
Removing instruction lda #$7f
Removing instruction lda #$7f
Removing instruction ldy j2
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b1 with b1
Replacing label b1_from_b2 with b1
Replacing label b4_from_b3 with b4
Replacing label b5_from_b4 with b5
Replacing label b3_from_b5 with b3
Replacing label b9_from_b8 with b1
Replacing label b10_from_b1 with b2
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b21 with b1
Replacing label b1_from_progress_inc with b1
Replacing label b1_from_b2 with b1
Replacing label b5_from_b4 with b5
Replacing label b4_from_b5 with b4
Replacing label b2_from_b7 with b2
Replacing label b1_from_b8 with b1
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b1:
Removing instruction b1_from_b2:
Removing instruction b2_from_b1:
Removing instruction b3_from_b5:
Removing instruction b4_from_b3:
Removing instruction b4_from_b6:
Removing instruction b5_from_b4:
Removing instruction b5_from_b7:
Removing instruction b9_from_b8:
Removing instruction b9:
Removing instruction b1_from_b9:
Removing instruction b10_from_b1:
Removing instruction b10:
Removing instruction b2_from_b10:
Removing instruction b1_from_b1:
Removing instruction b2_from_b1:
Removing instruction b3_from_b2:
Removing instruction gen_sprites_from_b3:
Removing instruction b4_from_b3:
Removing instruction progress_init_from_b4:
Removing instruction b5_from_b4:
Removing instruction gen_sintab_from_b5:
Removing instruction b6_from_b5:
Removing instruction progress_init_from_b6:
Removing instruction b7_from_b6:
Removing instruction gen_sintab_from_b7:
Removing instruction b8_from_b7:
Removing instruction clear_screen_from_b8:
Removing instruction b1_from_b1:
Removing instruction b2_from_gen_sintab:
Removing instruction b4_from_b3:
Removing instruction setMEMtoFAC_from_b4:
Removing instruction b5_from_b4:
Removing instruction b6_from_b5:
Removing instruction setMEMtoFAC_from_b6:
Removing instruction b7_from_b6:
Removing instruction setFAC_from_b7:
Removing instruction b8_from_b7:
Removing instruction divMEMbyFAC_from_b8:
Removing instruction b9_from_b8:
Removing instruction setMEMtoFAC_from_b9:
Removing instruction b10_from_b9:
Removing instruction addMEMtoFAC_from_b10:
Removing instruction b11_from_b10:
Removing instruction setMEMtoFAC_from_b11:
Removing instruction b1_from_b21:
Removing instruction b12_from_b1:
Removing instruction mulFACbyMEM_from_b12:
Removing instruction b13_from_b12:
Removing instruction setMEMtoFAC_from_b13:
Removing instruction b15_from_b14:
Removing instruction divMEMbyFAC_from_b15:
Removing instruction b16_from_b15:
Removing instruction b17_from_b16:
Removing instruction mulFACbyMEM_from_b17:
Removing instruction b18_from_b17:
Removing instruction addMEMtoFAC_from_b18:
Removing instruction b19_from_b18:
Removing instruction b1_from_progress_inc:
Removing instruction b1_from_b2:
Removing instruction b1_from_b8:
Removing instruction b2_from_b7:
Removing instruction b10_from_b2:
Removing instruction b3_from_b10:
Removing instruction b4_from_b3:
Removing instruction b4_from_b5:
Removing instruction b5_from_b4:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction init_from_main:
Removing instruction b1_from_main:
Removing instruction b2:
Removing instruction b3_from_anim:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b1_from_b8:
Removing instruction b2_from_b1:
Removing instruction breturn:
Removing instruction clear_screen_from_init:
Removing instruction b1_from_init:
Removing instruction b2:
Removing instruction b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction breturn:
Removing instruction b1_from_clear_screen:
Removing instruction breturn:
Removing instruction setFAC_from_gen_sintab:
Removing instruction b2:
Removing instruction b3:
Removing instruction setFAC_from_b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b1_from_b11:
Removing instruction setFAC_from_b1:
Removing instruction b12:
Removing instruction b13:
Removing instruction b14:
Removing instruction setFAC_from_b14:
Removing instruction b15:
Removing instruction b16:
Removing instruction b17:
Removing instruction b18:
Removing instruction b19:
Removing instruction b20:
Removing instruction b21:
Removing instruction breturn:
Removing instruction b2:
Removing instruction b1_from_b2:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction prepareMEM_from_addMEMtoFAC:
Removing instruction b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction prepareMEM_from_mulFACbyMEM:
Removing instruction b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction prepareMEM_from_divMEMbyFAC:
Removing instruction b1:
Removing instruction breturn:
Removing instruction prepareMEM_from_setFAC:
Removing instruction b1:
Removing instruction breturn:
Removing instruction prepareMEM_from_setMEMtoFAC:
Removing instruction b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_gen_sprites:
Removing instruction b2:
Removing instruction breturn:
Removing instruction b1_from_gen_chargen_sprite:
Removing instruction b2_from_b1:
Removing instruction b10:
Removing instruction b6:
Removing instruction b5_from_b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction breturn:
Removing instruction b1_from_place_sprites:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Relabelling long label b3_from_b2 to b6
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda s_gen
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = (byte*) 53280
(byte*) CHARGEN
(const byte*) CHARGEN#0 CHARGEN = (byte*) 53248
(byte*) COLS
(const byte*) COLS#0 COLS = (byte*) 55296
(byte*) PROCPORT
(const byte*) PROCPORT#0 PROCPORT = (byte*) 1
(const byte) RADIX::BINARY BINARY = (number) 2
(const byte) RADIX::DECIMAL DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL OCTAL = (number) 8
(byte*) RASTER
(const byte*) RASTER#0 RASTER = (byte*) 53266
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (byte*) 1024
(byte*) SPRITES_COLS
(const byte*) SPRITES_COLS#0 SPRITES_COLS = (byte*) 53287
(byte*) SPRITES_ENABLE
(const byte*) SPRITES_ENABLE#0 SPRITES_ENABLE = (byte*) 53269
(byte*) SPRITES_EXPAND_X
(const byte*) SPRITES_EXPAND_X#0 SPRITES_EXPAND_X = (byte*) 53277
(byte*) SPRITES_EXPAND_Y
(const byte*) SPRITES_EXPAND_Y#0 SPRITES_EXPAND_Y = (byte*) 53271
(byte*) SPRITES_XMSB
(const byte*) SPRITES_XMSB#0 SPRITES_XMSB = (byte*) 53264
(byte*) SPRITES_XPOS
(const byte*) SPRITES_XPOS#0 SPRITES_XPOS = (byte*) 53248
(byte*) SPRITES_YPOS
(const byte*) SPRITES_YPOS#0 SPRITES_YPOS = (byte*) 53249
(void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
(label) addMEMtoFAC::@1
(label) addMEMtoFAC::@return
(byte*) addMEMtoFAC::mem
(void()) anim()
(byte~) anim::$6 $6 zp ZP_BYTE:5 101.0
(byte~) anim::$7 reg byte a 202.0
(byte~) anim::$9 reg byte a 202.0
(label) anim::@1
(label) anim::@10
(label) anim::@2
(label) anim::@3
(label) anim::@4
(label) anim::@5
(label) anim::@6
(label) anim::@7
(label) anim::@8
(label) anim::@9
(label) anim::@return
(byte) anim::j
(byte) anim::j#1 j zp ZP_BYTE:8 151.5
(byte) anim::j#2 j zp ZP_BYTE:8 11.882352941176471
(byte) anim::j2
(byte) anim::j2#1 j2 zp ZP_BYTE:6 67.33333333333333
(byte) anim::j2#2 j2 zp ZP_BYTE:6 25.25
(word) anim::x
(word) anim::x#0 x zp ZP_WORD:36 75.75
(byte) anim::x_msb
(byte) anim::x_msb#1 x_msb zp ZP_BYTE:5 13.6
(byte) anim::x_msb#2 x_msb zp ZP_BYTE:5 101.0
(byte) anim::xidx
(byte) anim::xidx#0 xidx zp ZP_BYTE:4 2.0
(byte) anim::xidx#1 xidx zp ZP_BYTE:4 202.0
(byte) anim::xidx#2 xidx zp ZP_BYTE:4 202.0
(byte) anim::xidx#3 xidx zp ZP_BYTE:4 38.125
(byte) anim::xidx#5 xidx zp ZP_BYTE:4 37.875
(byte) anim::yidx
(byte) anim::yidx#0 yidx zp ZP_BYTE:7 4.0
(byte) anim::yidx#1 yidx zp ZP_BYTE:7 202.0
(byte) anim::yidx#2 yidx zp ZP_BYTE:7 202.0
(byte) anim::yidx#3 yidx zp ZP_BYTE:7 25.416666666666664
(byte) anim::yidx#6 yidx zp ZP_BYTE:7 75.75
(void()) clear_screen()
(label) clear_screen::@1
(label) clear_screen::@return
(byte*) clear_screen::sc
(byte*) clear_screen::sc#1 sc zp ZP_WORD:9 16.5
(byte*) clear_screen::sc#2 sc zp ZP_WORD:9 16.5
(void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
(label) divMEMbyFAC::@1
(label) divMEMbyFAC::@return
(byte*) divMEMbyFAC::mem
(byte*) divMEMbyFAC::mem#2 mem zp ZP_WORD:19 2.0
(void()) gen_chargen_sprite((byte) gen_chargen_sprite::ch , (byte*) gen_chargen_sprite::sprite)
(word~) gen_chargen_sprite::$0 $0 zp ZP_WORD:40 4.0
(word~) gen_chargen_sprite::$1 $1 zp ZP_WORD:40 4.0
(byte~) gen_chargen_sprite::$3 reg byte a 2002.0
(byte~) gen_chargen_sprite::$6 reg byte a 20002.0
(label) gen_chargen_sprite::@1
(label) gen_chargen_sprite::@10
(label) gen_chargen_sprite::@2
(label) gen_chargen_sprite::@3
(label) gen_chargen_sprite::@4
(label) gen_chargen_sprite::@5
(label) gen_chargen_sprite::@6
(label) gen_chargen_sprite::@7
(label) gen_chargen_sprite::@8
(label) gen_chargen_sprite::@9
(label) gen_chargen_sprite::@return
(byte) gen_chargen_sprite::b
(byte) gen_chargen_sprite::b#1 reg byte x 15001.5
(byte) gen_chargen_sprite::b#2 reg byte x 2000.2
(byte) gen_chargen_sprite::bits
(byte) gen_chargen_sprite::bits#0 bits zp ZP_BYTE:25 202.0
(byte) gen_chargen_sprite::bits#1 bits zp ZP_BYTE:25 667.3333333333334
(byte) gen_chargen_sprite::bits#2 bits zp ZP_BYTE:25 182.58823529411765
(byte) gen_chargen_sprite::c
(byte) gen_chargen_sprite::c#3 c zp ZP_BYTE:27 769.3076923076923
(byte) gen_chargen_sprite::ch
(byte) gen_chargen_sprite::ch#0 reg byte x 5.5
(byte*) gen_chargen_sprite::chargen
(byte*) gen_chargen_sprite::chargen#0 chargen zp ZP_WORD:40 3.678571428571429
(byte) gen_chargen_sprite::s_gen
(byte) gen_chargen_sprite::s_gen#1 s_gen zp ZP_BYTE:28 10001.0
(byte) gen_chargen_sprite::s_gen#3 s_gen zp ZP_BYTE:28 21003.0
(byte) gen_chargen_sprite::s_gen#5 s_gen zp ZP_BYTE:28 400.4
(byte) gen_chargen_sprite::s_gen#6 s_gen zp ZP_BYTE:28 3500.5
(byte) gen_chargen_sprite::s_gen_cnt
(byte) gen_chargen_sprite::s_gen_cnt#1 reg byte y 15001.5
(byte) gen_chargen_sprite::s_gen_cnt#3 reg byte y 7001.0
(byte) gen_chargen_sprite::s_gen_cnt#4 reg byte y 400.4
(byte) gen_chargen_sprite::s_gen_cnt#5 reg byte y 3500.5
(byte*) gen_chargen_sprite::sprite
(byte*) gen_chargen_sprite::sprite#0 sprite zp ZP_WORD:29 2.1666666666666665
(byte*) gen_chargen_sprite::sprite#1 sprite zp ZP_WORD:29 20002.0
(byte*) gen_chargen_sprite::sprite#10 sprite zp ZP_WORD:29 420.59999999999997
(byte*) gen_chargen_sprite::sprite#11 sprite zp ZP_WORD:29 102.0
(byte*) gen_chargen_sprite::sprite#2 sprite zp ZP_WORD:29 67.33333333333333
(byte*) gen_chargen_sprite::sprite#3 sprite zp ZP_WORD:29 7625.875
(byte*) gen_chargen_sprite::sprite#4 sprite zp ZP_WORD:29 5184.166666666666
(byte) gen_chargen_sprite::x
(byte) gen_chargen_sprite::x#1 x zp ZP_BYTE:26 1501.5
(byte) gen_chargen_sprite::x#6 x zp ZP_BYTE:26 111.22222222222223
(byte) gen_chargen_sprite::y
(byte) gen_chargen_sprite::y#1 y zp ZP_BYTE:24 151.5
(byte) gen_chargen_sprite::y#2 y zp ZP_BYTE:24 13.173913043478262
(void()) gen_sintab((byte*) gen_sintab::sintab , (byte) gen_sintab::length , (byte) gen_sintab::min , (byte) gen_sintab::max)
(word~) gen_sintab::$23 $23 zp ZP_WORD:38 11.0
(byte~) gen_sintab::$24 reg byte a 22.0
(label) gen_sintab::@1
(label) gen_sintab::@10
(label) gen_sintab::@11
(label) gen_sintab::@12
(label) gen_sintab::@13
(label) gen_sintab::@14
(label) gen_sintab::@15
(label) gen_sintab::@16
(label) gen_sintab::@17
(label) gen_sintab::@18
(label) gen_sintab::@19
(label) gen_sintab::@2
(label) gen_sintab::@20
(label) gen_sintab::@21
(label) gen_sintab::@3
(label) gen_sintab::@4
(label) gen_sintab::@5
(label) gen_sintab::@6
(label) gen_sintab::@7
(label) gen_sintab::@8
(label) gen_sintab::@9
(label) gen_sintab::@return
(byte*) gen_sintab::f_2pi
(const byte*) gen_sintab::f_2pi#0 f_2pi = (byte*) 58085
(byte[]) gen_sintab::f_amp
(const byte[]) gen_sintab::f_amp#0 f_amp = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(byte[]) gen_sintab::f_i
(const byte[]) gen_sintab::f_i#0 f_i = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(byte[]) gen_sintab::f_min
(const byte[]) gen_sintab::f_min#0 f_min = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(byte) gen_sintab::i
(byte) gen_sintab::i#1 i zp ZP_BYTE:15 16.5
(byte) gen_sintab::i#10 i zp ZP_BYTE:15 1.375
(byte) gen_sintab::length
(byte) gen_sintab::length#10 length zp ZP_BYTE:12 0.22448979591836735
(byte) gen_sintab::max
(byte) gen_sintab::max#2 reg byte x
(byte) gen_sintab::min
(byte) gen_sintab::min#2 min zp ZP_BYTE:11
(byte*) gen_sintab::sintab
(byte*) gen_sintab::sintab#12 sintab zp ZP_WORD:13 0.22448979591836735
(void()) gen_sprites()
(label) gen_sprites::@1
(label) gen_sprites::@2
(label) gen_sprites::@return
(byte[]) gen_sprites::cml
(const byte[]) gen_sprites::cml#0 cml = (string) "camelot"
(byte) gen_sprites::i
(byte) gen_sprites::i#1 i zp ZP_BYTE:21 16.5
(byte) gen_sprites::i#2 i zp ZP_BYTE:21 6.6000000000000005
(byte*) gen_sprites::spr
(byte*) gen_sprites::spr#1 spr zp ZP_WORD:22 7.333333333333333
(byte*) gen_sprites::spr#2 spr zp ZP_WORD:22 8.25
(word()) getFAC()
(label) getFAC::@return
(word) getFAC::return
(word) getFAC::return#0 return zp ZP_WORD:38 4.333333333333333
(word) getFAC::return#2 return zp ZP_WORD:38 22.0
(word) getFAC::w
(void()) init()
(label) init::@1
(label) init::@2
(label) init::@3
(label) init::@4
(label) init::@5
(label) init::@6
(label) init::@7
(label) init::@8
(label) init::@return
(byte) init::i
(byte) init::i#1 reg byte x 16.5
(byte) init::i#2 reg byte x 14.666666666666666
(void()) main()
(label) main::@1
(label) main::@2
(byte*) memHi
(const byte*) memHi#0 memHi = (byte*) 255
(byte*) memLo
(const byte*) memLo#0 memLo = (byte*) 254
(void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
(label) mulFACbyMEM::@1
(label) mulFACbyMEM::@return
(byte*) mulFACbyMEM::mem
(byte*) mulFACbyMEM::mem#2 mem zp ZP_WORD:19 2.0
(void()) place_sprites()
(label) place_sprites::@1
(label) place_sprites::@return
(byte) place_sprites::col
(byte) place_sprites::col#1 col zp ZP_BYTE:35 4.4
(byte) place_sprites::col#2 col zp ZP_BYTE:35 4.714285714285714
(byte) place_sprites::j
(byte) place_sprites::j#1 j zp ZP_BYTE:32 16.5
(byte) place_sprites::j#2 j zp ZP_BYTE:32 4.4
(byte) place_sprites::j2
(byte) place_sprites::j2#1 reg byte x 22.0
(byte) place_sprites::j2#2 j2 zp ZP_BYTE:34 7.333333333333333
(byte) place_sprites::j2#3 j2 zp ZP_BYTE:34 5.5
(byte) place_sprites::spr_id
(byte) place_sprites::spr_id#1 spr_id zp ZP_BYTE:31 2.2
(byte) place_sprites::spr_id#2 spr_id zp ZP_BYTE:31 16.5
(byte) place_sprites::spr_x
(byte) place_sprites::spr_x#1 spr_x zp ZP_BYTE:33 3.6666666666666665
(byte) place_sprites::spr_x#2 spr_x zp ZP_BYTE:33 5.5
(byte*) place_sprites::sprites_ptr
(const byte*) place_sprites::sprites_ptr#0 sprites_ptr = (const byte*) SCREEN#0+(word) $3f8
(void()) prepareMEM((byte*) prepareMEM::mem)
(byte~) prepareMEM::$0 reg byte a 4.0
(byte~) prepareMEM::$1 reg byte a 4.0
(label) prepareMEM::@return
(byte*) prepareMEM::mem
(byte*) prepareMEM::mem#0 mem zp ZP_WORD:19 4.0
(byte*) prepareMEM::mem#1 mem zp ZP_WORD:19 4.0
(byte*) prepareMEM::mem#3 mem zp ZP_WORD:19 4.0
(byte*) prepareMEM::mem#4 mem zp ZP_WORD:19 4.0
(byte*) prepareMEM::mem#5 mem zp ZP_WORD:19 3.9999999999999996
(byte*) progress_cursor
(byte*) progress_cursor#10 progress_cursor zp ZP_WORD:17 4.0
(byte*) progress_cursor#11 progress_cursor zp ZP_WORD:17 2.8333333333333335
(byte*) progress_cursor#34 progress_cursor zp ZP_WORD:17 0.7307692307692306
(byte) progress_idx
(byte) progress_idx#10 progress_idx zp ZP_BYTE:16 3.0
(byte) progress_idx#12 progress_idx zp ZP_BYTE:16 2.5
(byte) progress_idx#34 progress_idx zp ZP_BYTE:16 0.5652173913043479
(void()) progress_inc()
(label) progress_inc::@1
(label) progress_inc::@2
(label) progress_inc::@return
(byte[]) progress_inc::progress_chars
(const byte[]) progress_inc::progress_chars#0 progress_chars = { (byte) $20, (byte) $65, (byte) $74, (byte) $75, (byte) $61, (byte) $f6, (byte) $e7, (byte) $ea, (byte) $e0 }
(void()) progress_init((byte*) progress_init::line)
(label) progress_init::@return
(byte*) progress_init::line
(byte*) progress_init::line#2 line zp ZP_WORD:17 0.06896551724137931
(void()) setARGtoFAC()
(label) setARGtoFAC::@return
(void()) setFAC((word) setFAC::w)
(label) setFAC::@1
(label) setFAC::@return
(word) setFAC::w
(word) setFAC::w#0 w zp ZP_WORD:19 4.0
(word) setFAC::w#1 w zp ZP_WORD:19 4.0
(word) setFAC::w#3 w zp ZP_WORD:19 22.0
(word) setFAC::w#4 w zp ZP_WORD:19 22.0
(word) setFAC::w#5 w zp ZP_WORD:19 26.0
(void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
(label) setMEMtoFAC::@1
(label) setMEMtoFAC::@return
(byte*) setMEMtoFAC::mem
(byte*) setMEMtoFAC::mem#5 mem zp ZP_WORD:19 2.0
(void()) sinFAC()
(label) sinFAC::@return
(byte) sin_idx_x
(byte) sin_idx_x#11 sin_idx_x zp ZP_BYTE:2 1.625
(byte) sin_idx_x#13 sin_idx_x zp ZP_BYTE:2 8.346153846153845
(byte) sin_idx_x#3 sin_idx_x zp ZP_BYTE:2 2.0
(byte) sin_idx_y
(byte) sin_idx_y#11 sin_idx_y zp ZP_BYTE:3 3.25
(byte) sin_idx_y#13 sin_idx_y zp ZP_BYTE:3 7.2333333333333325
(byte) sin_idx_y#3 sin_idx_y zp ZP_BYTE:3 2.0
(byte) sinlen_x
(const byte) sinlen_x#0 sinlen_x = (byte) $dd
(byte) sinlen_y
(const byte) sinlen_y#0 sinlen_y = (byte) $c5
(byte[$dd]) sintab_x
(const byte[$dd]) sintab_x#0 sintab_x = { fill( $dd, 0) }
(byte[$c5]) sintab_y
(const byte[$c5]) sintab_y#0 sintab_y = { fill( $c5, 0) }
(byte*) sprites
(const byte*) sprites#0 sprites = (byte*) 8192
(void()) subFACfromARG()
(label) subFACfromARG::@return

zp ZP_BYTE:2 [ sin_idx_x#13 sin_idx_x#11 sin_idx_x#3 ]
zp ZP_BYTE:3 [ sin_idx_y#13 sin_idx_y#11 sin_idx_y#3 ]
zp ZP_BYTE:4 [ anim::xidx#3 anim::xidx#0 anim::xidx#5 anim::xidx#1 anim::xidx#2 ]
zp ZP_BYTE:5 [ anim::x_msb#2 anim::x_msb#1 anim::$6 ]
zp ZP_BYTE:6 [ anim::j2#2 anim::j2#1 ]
zp ZP_BYTE:7 [ anim::yidx#3 anim::yidx#0 anim::yidx#6 anim::yidx#1 anim::yidx#2 ]
zp ZP_BYTE:8 [ anim::j#2 anim::j#1 ]
reg byte x [ init::i#2 init::i#1 ]
zp ZP_WORD:9 [ clear_screen::sc#2 clear_screen::sc#1 ]
reg byte x [ gen_sintab::max#2 ]
zp ZP_BYTE:11 [ gen_sintab::min#2 ]
zp ZP_BYTE:12 [ gen_sintab::length#10 ]
zp ZP_WORD:13 [ gen_sintab::sintab#12 ]
zp ZP_BYTE:15 [ gen_sintab::i#10 gen_sintab::i#1 ]
zp ZP_BYTE:16 [ progress_idx#34 progress_idx#12 progress_idx#10 ]
zp ZP_WORD:17 [ progress_cursor#34 progress_init::line#2 progress_cursor#11 progress_cursor#10 ]
zp ZP_WORD:19 [ prepareMEM::mem#5 prepareMEM::mem#3 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 mulFACbyMEM::mem#2 divMEMbyFAC::mem#2 setFAC::w#5 setFAC::w#0 setFAC::w#3 setFAC::w#4 setFAC::w#1 setMEMtoFAC::mem#5 ]
zp ZP_BYTE:21 [ gen_sprites::i#2 gen_sprites::i#1 ]
zp ZP_WORD:22 [ gen_sprites::spr#2 gen_sprites::spr#1 ]
zp ZP_BYTE:24 [ gen_chargen_sprite::y#2 gen_chargen_sprite::y#1 ]
zp ZP_BYTE:25 [ gen_chargen_sprite::bits#2 gen_chargen_sprite::bits#0 gen_chargen_sprite::bits#1 ]
zp ZP_BYTE:26 [ gen_chargen_sprite::x#6 gen_chargen_sprite::x#1 ]
zp ZP_BYTE:27 [ gen_chargen_sprite::c#3 ]
zp ZP_BYTE:28 [ gen_chargen_sprite::s_gen#3 gen_chargen_sprite::s_gen#5 gen_chargen_sprite::s_gen#6 gen_chargen_sprite::s_gen#1 ]
reg byte y [ gen_chargen_sprite::s_gen_cnt#3 gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::s_gen_cnt#5 gen_chargen_sprite::s_gen_cnt#1 ]
reg byte x [ gen_chargen_sprite::b#2 gen_chargen_sprite::b#1 ]
zp ZP_WORD:29 [ gen_chargen_sprite::sprite#3 gen_chargen_sprite::sprite#10 gen_chargen_sprite::sprite#11 gen_chargen_sprite::sprite#0 gen_chargen_sprite::sprite#2 gen_chargen_sprite::sprite#4 gen_chargen_sprite::sprite#1 ]
zp ZP_BYTE:31 [ place_sprites::spr_id#2 place_sprites::spr_id#1 ]
zp ZP_BYTE:32 [ place_sprites::j#2 place_sprites::j#1 ]
zp ZP_BYTE:33 [ place_sprites::spr_x#2 place_sprites::spr_x#1 ]
zp ZP_BYTE:34 [ place_sprites::j2#3 place_sprites::j2#2 ]
zp ZP_BYTE:35 [ place_sprites::col#2 place_sprites::col#1 ]
zp ZP_WORD:36 [ anim::x#0 ]
reg byte a [ anim::$7 ]
reg byte a [ anim::$9 ]
zp ZP_WORD:38 [ getFAC::return#2 gen_sintab::$23 getFAC::return#0 ]
reg byte a [ gen_sintab::$24 ]
reg byte a [ prepareMEM::$0 ]
reg byte a [ prepareMEM::$1 ]
reg byte x [ gen_chargen_sprite::ch#0 ]
zp ZP_WORD:40 [ gen_chargen_sprite::$0 gen_chargen_sprite::$1 gen_chargen_sprite::chargen#0 ]
reg byte a [ gen_chargen_sprite::$3 ]
reg byte a [ gen_chargen_sprite::$6 ]
reg byte x [ place_sprites::j2#1 ]


FINAL ASSEMBLER
Score: 769618

  // File Comments
  // Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_EXPAND_X = $d01d
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  // Color Ram
  .label COLS = $d800
  // Zeropage addresses used to hold lo/hi-bytes of addresses of float numbers in MEM
  .label memLo = $fe
  .label memHi = $ff
  .const sinlen_x = $dd
  .const sinlen_y = $c5
  .label sprites = $2000
  .label SCREEN = $400
  .label progress_idx = $10
  .label progress_cursor = $11
  .label sin_idx_x = 2
  .label sin_idx_y = 3
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // init()
    // [5] call init 
    // [43] phi from main to init [phi:main->init]
    jsr init
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // [6] phi (byte) sin_idx_y#13 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_y
    // [6] phi (byte) sin_idx_x#13 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    sta sin_idx_x
    // [6] phi from main::@1 main::@2 to main::@1 [phi:main::@1/main::@2->main::@1]
    // [6] phi (byte) sin_idx_y#13 = (byte) sin_idx_y#13 [phi:main::@1/main::@2->main::@1#0] -- register_copy 
    // [6] phi (byte) sin_idx_x#13 = (byte) sin_idx_x#13 [phi:main::@1/main::@2->main::@1#1] -- register_copy 
    // main::@1
  b1:
    // while (*RASTER!=$ff)
    // [7] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@1 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne b1
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // anim()
    // [9] call anim 
    jsr anim
    jmp b1
}
  // anim
anim: {
    .label _6 = 5
    .label xidx = 4
    .label yidx = 7
    .label x = $24
    .label x_msb = 5
    .label j2 = 6
    .label j = 8
    // (*BORDERCOL)++;
    // [10] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // xidx = sin_idx_x
    // [11] (byte) anim::xidx#0 ← (byte) sin_idx_x#13 -- vbuz1=vbuz2 
    lda sin_idx_x
    sta xidx
    // yidx = sin_idx_y
    // [12] (byte) anim::yidx#0 ← (byte) sin_idx_y#13 -- vbuz1=vbuz2 
    lda sin_idx_y
    sta yidx
    // [13] phi from anim to anim::@3 [phi:anim->anim::@3]
    // [13] phi (byte) anim::j#2 = (byte) 0 [phi:anim->anim::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta j
    // [13] phi (byte) anim::yidx#3 = (byte) anim::yidx#0 [phi:anim->anim::@3#1] -- register_copy 
    // [13] phi (byte) anim::j2#2 = (byte) $c [phi:anim->anim::@3#2] -- vbuz1=vbuc1 
    lda #$c
    sta j2
    // [13] phi (byte) anim::x_msb#2 = (byte) 0 [phi:anim->anim::@3#3] -- vbuz1=vbuc1 
    lda #0
    sta x_msb
    // [13] phi (byte) anim::xidx#3 = (byte) anim::xidx#0 [phi:anim->anim::@3#4] -- register_copy 
    // [13] phi from anim::@5 to anim::@3 [phi:anim::@5->anim::@3]
    // [13] phi (byte) anim::j#2 = (byte) anim::j#1 [phi:anim::@5->anim::@3#0] -- register_copy 
    // [13] phi (byte) anim::yidx#3 = (byte) anim::yidx#6 [phi:anim::@5->anim::@3#1] -- register_copy 
    // [13] phi (byte) anim::j2#2 = (byte) anim::j2#1 [phi:anim::@5->anim::@3#2] -- register_copy 
    // [13] phi (byte) anim::x_msb#2 = (byte) anim::x_msb#1 [phi:anim::@5->anim::@3#3] -- register_copy 
    // [13] phi (byte) anim::xidx#3 = (byte) anim::xidx#5 [phi:anim::@5->anim::@3#4] -- register_copy 
    // anim::@3
  b3:
    // x = (word)$1e + sintab_x[xidx]
    // [14] (word) anim::x#0 ← (word) $1e + *((const byte[$dd]) sintab_x#0 + (byte) anim::xidx#3) -- vwuz1=vwuc1_plus_pbuc2_derefidx_vbuz2 
    ldy xidx
    lda sintab_x,y
    clc
    adc #<$1e
    sta x
    lda #>$1e
    adc #0
    sta x+1
    // x_msb*2
    // [15] (byte~) anim::$6 ← (byte) anim::x_msb#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl _6
    // >x
    // [16] (byte~) anim::$7 ← > (word) anim::x#0 -- vbuaa=_hi_vwuz1 
    // x_msb = x_msb*2 | >x
    // [17] (byte) anim::x_msb#1 ← (byte~) anim::$6 | (byte~) anim::$7 -- vbuz1=vbuz1_bor_vbuaa 
    ora x_msb
    sta x_msb
    // <x
    // [18] (byte~) anim::$9 ← < (word) anim::x#0 -- vbuaa=_lo_vwuz1 
    lda x
    // SPRITES_XPOS[j2] = <x
    // [19] *((const byte*) SPRITES_XPOS#0 + (byte) anim::j2#2) ← (byte~) anim::$9 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy j2
    sta SPRITES_XPOS,y
    // SPRITES_YPOS[j2] = sintab_y[yidx]
    // [20] *((const byte*) SPRITES_YPOS#0 + (byte) anim::j2#2) ← *((const byte[$c5]) sintab_y#0 + (byte) anim::yidx#3) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy yidx
    lda sintab_y,y
    ldy j2
    sta SPRITES_YPOS,y
    // xidx = xidx+10
    // [21] (byte) anim::xidx#1 ← (byte) anim::xidx#3 + (byte) $a -- vbuz1=vbuz1_plus_vbuc1 
    lax xidx
    axs #-[$a]
    stx xidx
    // if(xidx>=sinlen_x)
    // [22] if((byte) anim::xidx#1<(const byte) sinlen_x#0) goto anim::@4 -- vbuz1_lt_vbuc1_then_la1 
    txa
    cmp #sinlen_x
    bcc b4
    // anim::@6
    // xidx = xidx-sinlen_x
    // [23] (byte) anim::xidx#2 ← (byte) anim::xidx#1 - (const byte) sinlen_x#0 -- vbuz1=vbuz1_minus_vbuc1 
    lax xidx
    axs #sinlen_x
    stx xidx
    // [24] phi from anim::@3 anim::@6 to anim::@4 [phi:anim::@3/anim::@6->anim::@4]
    // [24] phi (byte) anim::xidx#5 = (byte) anim::xidx#1 [phi:anim::@3/anim::@6->anim::@4#0] -- register_copy 
    // anim::@4
  b4:
    // yidx = yidx+8
    // [25] (byte) anim::yidx#1 ← (byte) anim::yidx#3 + (byte) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax yidx
    axs #-[8]
    stx yidx
    // if(yidx>=sinlen_y)
    // [26] if((byte) anim::yidx#1<(const byte) sinlen_y#0) goto anim::@5 -- vbuz1_lt_vbuc1_then_la1 
    txa
    cmp #sinlen_y
    bcc b5
    // anim::@7
    // yidx = yidx-sinlen_y
    // [27] (byte) anim::yidx#2 ← (byte) anim::yidx#1 - (const byte) sinlen_y#0 -- vbuz1=vbuz1_minus_vbuc1 
    lax yidx
    axs #sinlen_y
    stx yidx
    // [28] phi from anim::@4 anim::@7 to anim::@5 [phi:anim::@4/anim::@7->anim::@5]
    // [28] phi (byte) anim::yidx#6 = (byte) anim::yidx#1 [phi:anim::@4/anim::@7->anim::@5#0] -- register_copy 
    // anim::@5
  b5:
    // j2 = j2-2
    // [29] (byte) anim::j2#1 ← (byte) anim::j2#2 - (byte) 2 -- vbuz1=vbuz1_minus_2 
    dec j2
    dec j2
    // for( byte j : 0..6)
    // [30] (byte) anim::j#1 ← ++ (byte) anim::j#2 -- vbuz1=_inc_vbuz1 
    inc j
    // [31] if((byte) anim::j#1!=(byte) 7) goto anim::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp j
    bne b3
    // anim::@8
    // *SPRITES_XMSB = x_msb
    // [32] *((const byte*) SPRITES_XMSB#0) ← (byte) anim::x_msb#1 -- _deref_pbuc1=vbuz1 
    lda x_msb
    sta SPRITES_XMSB
    // if(++sin_idx_x>=sinlen_x)
    // [33] (byte) sin_idx_x#3 ← ++ (byte) sin_idx_x#13 -- vbuz1=_inc_vbuz1 
    inc sin_idx_x
    // [34] if((byte) sin_idx_x#3<(const byte) sinlen_x#0) goto anim::@9 -- vbuz1_lt_vbuc1_then_la1 
    lda sin_idx_x
    cmp #sinlen_x
    bcc b1
    // [36] phi from anim::@8 to anim::@1 [phi:anim::@8->anim::@1]
    // [36] phi (byte) sin_idx_x#11 = (byte) 0 [phi:anim::@8->anim::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_x
    // [35] phi from anim::@8 to anim::@9 [phi:anim::@8->anim::@9]
    // anim::@9
    // [36] phi from anim::@9 to anim::@1 [phi:anim::@9->anim::@1]
    // [36] phi (byte) sin_idx_x#11 = (byte) sin_idx_x#3 [phi:anim::@9->anim::@1#0] -- register_copy 
    // anim::@1
  b1:
    // if(++sin_idx_y>=sinlen_y)
    // [37] (byte) sin_idx_y#3 ← ++ (byte) sin_idx_y#13 -- vbuz1=_inc_vbuz1 
    inc sin_idx_y
    // [38] if((byte) sin_idx_y#3<(const byte) sinlen_y#0) goto anim::@10 -- vbuz1_lt_vbuc1_then_la1 
    lda sin_idx_y
    cmp #sinlen_y
    bcc b2
    // [40] phi from anim::@1 to anim::@2 [phi:anim::@1->anim::@2]
    // [40] phi (byte) sin_idx_y#11 = (byte) 0 [phi:anim::@1->anim::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx_y
    // [39] phi from anim::@1 to anim::@10 [phi:anim::@1->anim::@10]
    // anim::@10
    // [40] phi from anim::@10 to anim::@2 [phi:anim::@10->anim::@2]
    // [40] phi (byte) sin_idx_y#11 = (byte) sin_idx_y#3 [phi:anim::@10->anim::@2#0] -- register_copy 
    // anim::@2
  b2:
    // (*BORDERCOL)--;
    // [41] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BORDERCOL
    // anim::@return
    // }
    // [42] return 
    rts
}
  // init
init: {
    // clear_screen()
    // [44] call clear_screen 
    // [65] phi from init to clear_screen [phi:init->clear_screen]
    jsr clear_screen
    // [45] phi from init to init::@1 [phi:init->init::@1]
    // [45] phi (byte) init::i#2 = (byte) 0 [phi:init->init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [45] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
    // [45] phi (byte) init::i#2 = (byte) init::i#1 [phi:init::@1->init::@1#0] -- register_copy 
    // init::@1
  b1:
    // COLS[i] = $0
    // [46] *((const byte*) COLS#0 + (byte) init::i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta COLS,x
    // COLS[40+i] = $b
    // [47] *((const byte*) COLS#0+(byte) $28 + (byte) init::i#2) ← (byte) $b -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$b
    sta COLS+$28,x
    // for( byte i : 0..39)
    // [48] (byte) init::i#1 ← ++ (byte) init::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [49] if((byte) init::i#1!=(byte) $28) goto init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b1
    // [50] phi from init::@1 to init::@2 [phi:init::@1->init::@2]
    // init::@2
    // place_sprites()
    // [51] call place_sprites 
    jsr place_sprites
    // [52] phi from init::@2 to init::@3 [phi:init::@2->init::@3]
    // init::@3
    // gen_sprites()
    // [53] call gen_sprites 
    // [169] phi from init::@3 to gen_sprites [phi:init::@3->gen_sprites]
    jsr gen_sprites
    // [54] phi from init::@3 to init::@4 [phi:init::@3->init::@4]
    // init::@4
    // progress_init(SCREEN)
    // [55] call progress_init 
    // [167] phi from init::@4 to progress_init [phi:init::@4->progress_init]
    // [167] phi (byte*) progress_init::line#2 = (const byte*) SCREEN#0 [phi:init::@4->progress_init#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta progress_init.line
    lda #>SCREEN
    sta progress_init.line+1
    jsr progress_init
    // [56] phi from init::@4 to init::@5 [phi:init::@4->init::@5]
    // init::@5
    // gen_sintab(sintab_x, sinlen_x, $00, $ff)
    // [57] call gen_sintab 
    // [71] phi from init::@5 to gen_sintab [phi:init::@5->gen_sintab]
    // [71] phi (byte*) gen_sintab::sintab#12 = (const byte[$dd]) sintab_x#0 [phi:init::@5->gen_sintab#0] -- pbuz1=pbuc1 
    lda #<sintab_x
    sta gen_sintab.sintab
    lda #>sintab_x
    sta gen_sintab.sintab+1
    // [71] phi (byte) gen_sintab::length#10 = (const byte) sinlen_x#0 [phi:init::@5->gen_sintab#1] -- vbuz1=vbuc1 
    lda #sinlen_x
    sta gen_sintab.length
    // [71] phi (byte) gen_sintab::min#2 = (byte) 0 [phi:init::@5->gen_sintab#2] -- vbuz1=vbuc1 
    lda #0
    sta gen_sintab.min
    // [71] phi (byte) gen_sintab::max#2 = (byte) $ff [phi:init::@5->gen_sintab#3] -- vbuxx=vbuc1 
    ldx #$ff
    jsr gen_sintab
    // [58] phi from init::@5 to init::@6 [phi:init::@5->init::@6]
    // init::@6
    // progress_init(SCREEN+40)
    // [59] call progress_init 
    // [167] phi from init::@6 to progress_init [phi:init::@6->progress_init]
    // [167] phi (byte*) progress_init::line#2 = (const byte*) SCREEN#0+(byte) $28 [phi:init::@6->progress_init#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$28
    sta progress_init.line
    lda #>SCREEN+$28
    sta progress_init.line+1
    jsr progress_init
    // [60] phi from init::@6 to init::@7 [phi:init::@6->init::@7]
    // init::@7
    // gen_sintab(sintab_y, sinlen_y, $32, $d0)
    // [61] call gen_sintab 
    // [71] phi from init::@7 to gen_sintab [phi:init::@7->gen_sintab]
    // [71] phi (byte*) gen_sintab::sintab#12 = (const byte[$c5]) sintab_y#0 [phi:init::@7->gen_sintab#0] -- pbuz1=pbuc1 
    lda #<sintab_y
    sta gen_sintab.sintab
    lda #>sintab_y
    sta gen_sintab.sintab+1
    // [71] phi (byte) gen_sintab::length#10 = (const byte) sinlen_y#0 [phi:init::@7->gen_sintab#1] -- vbuz1=vbuc1 
    lda #sinlen_y
    sta gen_sintab.length
    // [71] phi (byte) gen_sintab::min#2 = (byte) $32 [phi:init::@7->gen_sintab#2] -- vbuz1=vbuc1 
    lda #$32
    sta gen_sintab.min
    // [71] phi (byte) gen_sintab::max#2 = (byte) $d0 [phi:init::@7->gen_sintab#3] -- vbuxx=vbuc1 
    ldx #$d0
    jsr gen_sintab
    // [62] phi from init::@7 to init::@8 [phi:init::@7->init::@8]
    // init::@8
    // clear_screen()
    // [63] call clear_screen 
    // [65] phi from init::@8 to clear_screen [phi:init::@8->clear_screen]
    jsr clear_screen
    // init::@return
    // }
    // [64] return 
    rts
}
  // clear_screen
clear_screen: {
    .label sc = 9
    // [66] phi from clear_screen to clear_screen::@1 [phi:clear_screen->clear_screen::@1]
    // [66] phi (byte*) clear_screen::sc#2 = (const byte*) SCREEN#0 [phi:clear_screen->clear_screen::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta sc
    lda #>SCREEN
    sta sc+1
    // [66] phi from clear_screen::@1 to clear_screen::@1 [phi:clear_screen::@1->clear_screen::@1]
    // [66] phi (byte*) clear_screen::sc#2 = (byte*) clear_screen::sc#1 [phi:clear_screen::@1->clear_screen::@1#0] -- register_copy 
    // clear_screen::@1
  b1:
    // *sc = ' '
    // [67] *((byte*) clear_screen::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
    // for(byte* sc = SCREEN; sc<SCREEN+1000; sc++)
    // [68] (byte*) clear_screen::sc#1 ← ++ (byte*) clear_screen::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
    // [69] if((byte*) clear_screen::sc#1<(const byte*) SCREEN#0+(word) $3e8) goto clear_screen::@1 -- pbuz1_lt_pbuc1_then_la1 
    lda sc+1
    cmp #>SCREEN+$3e8
    bcc b1
    bne !+
    lda sc
    cmp #<SCREEN+$3e8
    bcc b1
  !:
    // clear_screen::@return
    // }
    // [70] return 
    rts
}
  // gen_sintab
// Generate a sinus table using BASIC floats
// - sintab is a pointer to the table to fill
// - length is the length of the sine table
// - min is the minimum value of the generated sinus
// - max is the maximum value of the generated sinus
// gen_sintab(byte* zeropage($d) sintab, byte zeropage($c) length, byte zeropage($b) min, byte register(X) max)
gen_sintab: {
    // amplitude/2
    .label f_2pi = $e2e5
    .label _23 = $26
    .label i = $f
    .label min = $b
    .label length = $c
    .label sintab = $d
    // setFAC((word)max)
    // [72] (word) setFAC::w#0 ← (word)(byte) gen_sintab::max#2 -- vwuz1=_word_vbuxx 
    txa
    sta setFAC.w
    lda #0
    sta setFAC.w+1
    // [73] call setFAC 
    // [153] phi from gen_sintab to setFAC [phi:gen_sintab->setFAC]
    // [153] phi (word) setFAC::w#5 = (word) setFAC::w#0 [phi:gen_sintab->setFAC#0] -- register_copy 
    jsr setFAC
    // [74] phi from gen_sintab to gen_sintab::@2 [phi:gen_sintab->gen_sintab::@2]
    // gen_sintab::@2
    // setARGtoFAC()
    // [75] call setARGtoFAC 
    jsr setARGtoFAC
    // gen_sintab::@3
    // setFAC((word)min)
    // [76] (word) setFAC::w#1 ← (word)(byte) gen_sintab::min#2 -- vwuz1=_word_vbuz2 
    lda min
    sta setFAC.w
    lda #0
    sta setFAC.w+1
    // [77] call setFAC 
    // [153] phi from gen_sintab::@3 to setFAC [phi:gen_sintab::@3->setFAC]
    // [153] phi (word) setFAC::w#5 = (word) setFAC::w#1 [phi:gen_sintab::@3->setFAC#0] -- register_copy 
    jsr setFAC
    // [78] phi from gen_sintab::@3 to gen_sintab::@4 [phi:gen_sintab::@3->gen_sintab::@4]
    // gen_sintab::@4
    // setMEMtoFAC(f_min)
    // [79] call setMEMtoFAC 
    // [158] phi from gen_sintab::@4 to setMEMtoFAC [phi:gen_sintab::@4->setMEMtoFAC]
    // [158] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_min#0 [phi:gen_sintab::@4->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_min
    sta setMEMtoFAC.mem
    lda #>f_min
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [80] phi from gen_sintab::@4 to gen_sintab::@5 [phi:gen_sintab::@4->gen_sintab::@5]
    // gen_sintab::@5
    // subFACfromARG()
    // [81] call subFACfromARG 
    jsr subFACfromARG
    // [82] phi from gen_sintab::@5 to gen_sintab::@6 [phi:gen_sintab::@5->gen_sintab::@6]
    // gen_sintab::@6
    // setMEMtoFAC(f_amp)
    // [83] call setMEMtoFAC 
    // [158] phi from gen_sintab::@6 to setMEMtoFAC [phi:gen_sintab::@6->setMEMtoFAC]
    // [158] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@6->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta setMEMtoFAC.mem
    lda #>f_amp
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [84] phi from gen_sintab::@6 to gen_sintab::@7 [phi:gen_sintab::@6->gen_sintab::@7]
    // gen_sintab::@7
    // setFAC(2)
    // [85] call setFAC 
    // [153] phi from gen_sintab::@7 to setFAC [phi:gen_sintab::@7->setFAC]
    // [153] phi (word) setFAC::w#5 = (byte) 2 [phi:gen_sintab::@7->setFAC#0] -- vwuz1=vbuc1 
    lda #<2
    sta setFAC.w
    lda #>2
    sta setFAC.w+1
    jsr setFAC
    // [86] phi from gen_sintab::@7 to gen_sintab::@8 [phi:gen_sintab::@7->gen_sintab::@8]
    // gen_sintab::@8
    // divMEMbyFAC(f_amp)
    // [87] call divMEMbyFAC 
    // [148] phi from gen_sintab::@8 to divMEMbyFAC [phi:gen_sintab::@8->divMEMbyFAC]
    // [148] phi (byte*) divMEMbyFAC::mem#2 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@8->divMEMbyFAC#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta divMEMbyFAC.mem
    lda #>f_amp
    sta divMEMbyFAC.mem+1
    jsr divMEMbyFAC
    // [88] phi from gen_sintab::@8 to gen_sintab::@9 [phi:gen_sintab::@8->gen_sintab::@9]
    // gen_sintab::@9
    // setMEMtoFAC(f_amp)
    // [89] call setMEMtoFAC 
    // [158] phi from gen_sintab::@9 to setMEMtoFAC [phi:gen_sintab::@9->setMEMtoFAC]
    // [158] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@9->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta setMEMtoFAC.mem
    lda #>f_amp
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [90] phi from gen_sintab::@9 to gen_sintab::@10 [phi:gen_sintab::@9->gen_sintab::@10]
    // gen_sintab::@10
    // addMEMtoFAC(f_min)
    // [91] call addMEMtoFAC 
    // [131] phi from gen_sintab::@10 to addMEMtoFAC [phi:gen_sintab::@10->addMEMtoFAC]
    jsr addMEMtoFAC
    // [92] phi from gen_sintab::@10 to gen_sintab::@11 [phi:gen_sintab::@10->gen_sintab::@11]
    // gen_sintab::@11
    // setMEMtoFAC(f_min)
    // [93] call setMEMtoFAC 
    // [158] phi from gen_sintab::@11 to setMEMtoFAC [phi:gen_sintab::@11->setMEMtoFAC]
    // [158] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_min#0 [phi:gen_sintab::@11->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_min
    sta setMEMtoFAC.mem
    lda #>f_min
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // [94] phi from gen_sintab::@11 to gen_sintab::@1 [phi:gen_sintab::@11->gen_sintab::@1]
    // [94] phi (byte*) progress_cursor#34 = (byte*) progress_init::line#2 [phi:gen_sintab::@11->gen_sintab::@1#0] -- register_copy 
    // [94] phi (byte) progress_idx#34 = (byte) 0 [phi:gen_sintab::@11->gen_sintab::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta progress_idx
    // [94] phi (byte) gen_sintab::i#10 = (byte) 0 [phi:gen_sintab::@11->gen_sintab::@1#2] -- vbuz1=vbuc1 
    sta i
  // f_min = min + (max - min) / 2
    // [94] phi from gen_sintab::@21 to gen_sintab::@1 [phi:gen_sintab::@21->gen_sintab::@1]
    // [94] phi (byte*) progress_cursor#34 = (byte*) progress_cursor#11 [phi:gen_sintab::@21->gen_sintab::@1#0] -- register_copy 
    // [94] phi (byte) progress_idx#34 = (byte) progress_idx#12 [phi:gen_sintab::@21->gen_sintab::@1#1] -- register_copy 
    // [94] phi (byte) gen_sintab::i#10 = (byte) gen_sintab::i#1 [phi:gen_sintab::@21->gen_sintab::@1#2] -- register_copy 
    // gen_sintab::@1
  b1:
    // setFAC((word)i)
    // [95] (word) setFAC::w#3 ← (word)(byte) gen_sintab::i#10 -- vwuz1=_word_vbuz2 
    lda i
    sta setFAC.w
    lda #0
    sta setFAC.w+1
    // [96] call setFAC 
    // [153] phi from gen_sintab::@1 to setFAC [phi:gen_sintab::@1->setFAC]
    // [153] phi (word) setFAC::w#5 = (word) setFAC::w#3 [phi:gen_sintab::@1->setFAC#0] -- register_copy 
    jsr setFAC
    // [97] phi from gen_sintab::@1 to gen_sintab::@12 [phi:gen_sintab::@1->gen_sintab::@12]
    // gen_sintab::@12
    // mulFACbyMEM(f_2pi)
    // [98] call mulFACbyMEM 
    // [141] phi from gen_sintab::@12 to mulFACbyMEM [phi:gen_sintab::@12->mulFACbyMEM]
    // [141] phi (byte*) mulFACbyMEM::mem#2 = (const byte*) gen_sintab::f_2pi#0 [phi:gen_sintab::@12->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_2pi
    sta mulFACbyMEM.mem
    lda #>f_2pi
    sta mulFACbyMEM.mem+1
    jsr mulFACbyMEM
    // [99] phi from gen_sintab::@12 to gen_sintab::@13 [phi:gen_sintab::@12->gen_sintab::@13]
    // gen_sintab::@13
    // setMEMtoFAC(f_i)
    // [100] call setMEMtoFAC 
    // [158] phi from gen_sintab::@13 to setMEMtoFAC [phi:gen_sintab::@13->setMEMtoFAC]
    // [158] phi (byte*) setMEMtoFAC::mem#5 = (const byte[]) gen_sintab::f_i#0 [phi:gen_sintab::@13->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta setMEMtoFAC.mem
    lda #>f_i
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
    // gen_sintab::@14
    // setFAC((word)length)
    // [101] (word) setFAC::w#4 ← (word)(byte) gen_sintab::length#10 -- vwuz1=_word_vbuz2 
    lda length
    sta setFAC.w
    lda #0
    sta setFAC.w+1
    // [102] call setFAC 
    // [153] phi from gen_sintab::@14 to setFAC [phi:gen_sintab::@14->setFAC]
    // [153] phi (word) setFAC::w#5 = (word) setFAC::w#4 [phi:gen_sintab::@14->setFAC#0] -- register_copy 
    jsr setFAC
    // [103] phi from gen_sintab::@14 to gen_sintab::@15 [phi:gen_sintab::@14->gen_sintab::@15]
    // gen_sintab::@15
    // divMEMbyFAC(f_i)
    // [104] call divMEMbyFAC 
    // [148] phi from gen_sintab::@15 to divMEMbyFAC [phi:gen_sintab::@15->divMEMbyFAC]
    // [148] phi (byte*) divMEMbyFAC::mem#2 = (const byte[]) gen_sintab::f_i#0 [phi:gen_sintab::@15->divMEMbyFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta divMEMbyFAC.mem
    lda #>f_i
    sta divMEMbyFAC.mem+1
    jsr divMEMbyFAC
    // [105] phi from gen_sintab::@15 to gen_sintab::@16 [phi:gen_sintab::@15->gen_sintab::@16]
    // gen_sintab::@16
    // sinFAC()
    // [106] call sinFAC 
    jsr sinFAC
    // [107] phi from gen_sintab::@16 to gen_sintab::@17 [phi:gen_sintab::@16->gen_sintab::@17]
    // gen_sintab::@17
    // mulFACbyMEM(f_amp)
    // [108] call mulFACbyMEM 
    // [141] phi from gen_sintab::@17 to mulFACbyMEM [phi:gen_sintab::@17->mulFACbyMEM]
    // [141] phi (byte*) mulFACbyMEM::mem#2 = (const byte[]) gen_sintab::f_amp#0 [phi:gen_sintab::@17->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_amp
    sta mulFACbyMEM.mem
    lda #>f_amp
    sta mulFACbyMEM.mem+1
    jsr mulFACbyMEM
    // [109] phi from gen_sintab::@17 to gen_sintab::@18 [phi:gen_sintab::@17->gen_sintab::@18]
    // gen_sintab::@18
    // addMEMtoFAC(f_min)
    // [110] call addMEMtoFAC 
    // [131] phi from gen_sintab::@18 to addMEMtoFAC [phi:gen_sintab::@18->addMEMtoFAC]
    jsr addMEMtoFAC
    // [111] phi from gen_sintab::@18 to gen_sintab::@19 [phi:gen_sintab::@18->gen_sintab::@19]
    // gen_sintab::@19
    // getFAC()
    // [112] call getFAC 
    jsr getFAC
    // [113] (word) getFAC::return#2 ← (word) getFAC::return#0
    // gen_sintab::@20
    // [114] (word~) gen_sintab::$23 ← (word) getFAC::return#2
    // (byte)getFAC()
    // [115] (byte~) gen_sintab::$24 ← (byte)(word~) gen_sintab::$23 -- vbuaa=_byte_vwuz1 
    lda _23
    // sintab[i] = (byte)getFAC()
    // [116] *((byte*) gen_sintab::sintab#12 + (byte) gen_sintab::i#10) ← (byte~) gen_sintab::$24 -- pbuz1_derefidx_vbuz2=vbuaa 
    // fac =  sin( i * 2 * PI / length ) * (max - min) / 2 + min + (max - min) / 2
    ldy i
    sta (sintab),y
    // progress_inc()
    // [117] call progress_inc 
    jsr progress_inc
    // gen_sintab::@21
    // for(byte i =0; i<length; i++)
    // [118] (byte) gen_sintab::i#1 ← ++ (byte) gen_sintab::i#10 -- vbuz1=_inc_vbuz1 
    inc i
    // [119] if((byte) gen_sintab::i#1<(byte) gen_sintab::length#10) goto gen_sintab::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda i
    cmp length
    bcc b1
    // gen_sintab::@return
    // }
    // [120] return 
    rts
    f_i: .byte 0, 0, 0, 0, 0
    // i * 2 * PI
    f_min: .byte 0, 0, 0, 0, 0
    // amplitude/2 + min
    f_amp: .byte 0, 0, 0, 0, 0
}
  // progress_inc
// Increase PETSCII progress one bit
// Done by increasing the character until the idx is 8 and then moving to the next char
progress_inc: {
    // if(++progress_idx==8)
    // [121] (byte) progress_idx#10 ← ++ (byte) progress_idx#34 -- vbuz1=_inc_vbuz1 
    inc progress_idx
    // [122] if((byte) progress_idx#10!=(byte) 8) goto progress_inc::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp progress_idx
    bne b1
    // progress_inc::@2
    // *progress_cursor = progress_chars[8]
    // [123] *((byte*) progress_cursor#34) ← *((const byte[]) progress_inc::progress_chars#0+(byte) 8) -- _deref_pbuz1=_deref_pbuc1 
    lda progress_chars+8
    ldy #0
    sta (progress_cursor),y
    // progress_cursor++;
    // [124] (byte*) progress_cursor#10 ← ++ (byte*) progress_cursor#34 -- pbuz1=_inc_pbuz1 
    inc progress_cursor
    bne !+
    inc progress_cursor+1
  !:
    // [125] phi from progress_inc::@2 to progress_inc::@1 [phi:progress_inc::@2->progress_inc::@1]
    // [125] phi (byte*) progress_cursor#11 = (byte*) progress_cursor#10 [phi:progress_inc::@2->progress_inc::@1#0] -- register_copy 
    // [125] phi (byte) progress_idx#12 = (byte) 0 [phi:progress_inc::@2->progress_inc::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta progress_idx
    // [125] phi from progress_inc to progress_inc::@1 [phi:progress_inc->progress_inc::@1]
    // [125] phi (byte*) progress_cursor#11 = (byte*) progress_cursor#34 [phi:progress_inc->progress_inc::@1#0] -- register_copy 
    // [125] phi (byte) progress_idx#12 = (byte) progress_idx#10 [phi:progress_inc->progress_inc::@1#1] -- register_copy 
    // progress_inc::@1
  b1:
    // *progress_cursor = progress_chars[progress_idx]
    // [126] *((byte*) progress_cursor#11) ← *((const byte[]) progress_inc::progress_chars#0 + (byte) progress_idx#12) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy progress_idx
    lda progress_chars,y
    ldy #0
    sta (progress_cursor),y
    // progress_inc::@return
    // }
    // [127] return 
    rts
    // Progress characters
    progress_chars: .byte $20, $65, $74, $75, $61, $f6, $e7, $ea, $e0
}
  // getFAC
// word = FAC
// Get the value of the FAC (floating point accumulator) as an integer 16bit word
// Destroys the value in the FAC in the process
getFAC: {
    .label return = $26
    // asm
    // asm { jsr$b1aa sty$fe sta$ff  }
    // Load FAC (floating point accumulator) integer part into word register Y,A
    jsr $b1aa
    sty $fe
    sta $ff
    // w = { *memHi, *memLo}
    // [129] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda memLo
    sta return
    lda memHi
    sta return+1
    // getFAC::@return
    // }
    // [130] return 
    rts
}
  // addMEMtoFAC
// FAC = MEM+FAC
// Set FAC to MEM (float saved in memory) plus FAC (float accumulator)
// Reads 5 bytes from memory
addMEMtoFAC: {
    // prepareMEM(mem)
    // [132] call prepareMEM 
    // [135] phi from addMEMtoFAC to prepareMEM [phi:addMEMtoFAC->prepareMEM]
    // [135] phi (byte*) prepareMEM::mem#5 = (const byte[]) gen_sintab::f_min#0 [phi:addMEMtoFAC->prepareMEM#0] -- pbuz1=pbuc1 
    lda #<gen_sintab.f_min
    sta prepareMEM.mem
    lda #>gen_sintab.f_min
    sta prepareMEM.mem+1
    jsr prepareMEM
    // addMEMtoFAC::@1
    // asm
    // asm { lda$fe ldy$ff jsr$b867  }
    lda $fe
    ldy $ff
    jsr $b867
    // addMEMtoFAC::@return
    // }
    // [134] return 
    rts
}
  // prepareMEM
// Prepare MEM pointers for operations using MEM
// prepareMEM(byte* zeropage($13) mem)
prepareMEM: {
    .label mem = $13
    // <mem
    // [136] (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem#5 -- vbuaa=_lo_pbuz1 
    lda mem
    // *memLo = <mem
    // [137] *((const byte*) memLo#0) ← (byte~) prepareMEM::$0 -- _deref_pbuc1=vbuaa 
    sta memLo
    // >mem
    // [138] (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem#5 -- vbuaa=_hi_pbuz1 
    lda mem+1
    // *memHi = >mem
    // [139] *((const byte*) memHi#0) ← (byte~) prepareMEM::$1 -- _deref_pbuc1=vbuaa 
    sta memHi
    // prepareMEM::@return
    // }
    // [140] return 
    rts
}
  // mulFACbyMEM
// FAC = MEM*FAC
// Set FAC to MEM (float saved in memory) multiplied by FAC (float accumulator)
// Reads 5 bytes from memory
// mulFACbyMEM(byte* zeropage($13) mem)
mulFACbyMEM: {
    .label mem = $13
    // prepareMEM(mem)
    // [142] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2
    // [143] call prepareMEM 
    // [135] phi from mulFACbyMEM to prepareMEM [phi:mulFACbyMEM->prepareMEM]
    // [135] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#4 [phi:mulFACbyMEM->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    // mulFACbyMEM::@1
    // asm
    // asm { lda$fe ldy$ff jsr$ba28  }
    lda $fe
    ldy $ff
    jsr $ba28
    // mulFACbyMEM::@return
    // }
    // [145] return 
    rts
}
  // sinFAC
// FAC = sin(FAC)
// Set FAC to sinus of the FAC - sin(FAC)
// Sinus is calculated on radians (0-2*PI)
sinFAC: {
    // asm
    // asm { jsr$e26b  }
    jsr $e26b
    // sinFAC::@return
    // }
    // [147] return 
    rts
}
  // divMEMbyFAC
// FAC = MEM/FAC
// Set FAC to MEM (float saved in memory) divided by FAC (float accumulator)
// Reads 5 bytes from memory
// divMEMbyFAC(byte* zeropage($13) mem)
divMEMbyFAC: {
    .label mem = $13
    // prepareMEM(mem)
    // [149] (byte*) prepareMEM::mem#3 ← (byte*) divMEMbyFAC::mem#2
    // [150] call prepareMEM 
    // [135] phi from divMEMbyFAC to prepareMEM [phi:divMEMbyFAC->prepareMEM]
    // [135] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#3 [phi:divMEMbyFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    // divMEMbyFAC::@1
    // asm
    // asm { lda$fe ldy$ff jsr$bb0f  }
    lda $fe
    ldy $ff
    jsr $bb0f
    // divMEMbyFAC::@return
    // }
    // [152] return 
    rts
}
  // setFAC
// FAC = word
// Set the FAC (floating point accumulator) to the integer value of a 16bit word
// setFAC(word zeropage($13) w)
setFAC: {
    .label w = $13
    // prepareMEM((byte*)w)
    // [154] (byte*) prepareMEM::mem#0 ← (byte*)(word) setFAC::w#5
    // [155] call prepareMEM 
    // [135] phi from setFAC to prepareMEM [phi:setFAC->prepareMEM]
    // [135] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#0 [phi:setFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    // setFAC::@1
    // asm
    // asm { ldy$fe lda$ff jsr$b391  }
    // Load word register Y,A into FAC (floating point accumulator)
    ldy $fe
    lda $ff
    jsr $b391
    // setFAC::@return
    // }
    // [157] return 
    rts
}
  // setMEMtoFAC
// MEM = FAC
// Stores the value of the FAC to memory
// Stores 5 bytes (means it is necessary to allocate 5 bytes to avoid clobbering other data using eg. byte[] mem = {0, 0, 0, 0, 0};)
// setMEMtoFAC(byte* zeropage($13) mem)
setMEMtoFAC: {
    .label mem = $13
    // prepareMEM(mem)
    // [159] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#5
    // [160] call prepareMEM 
    // [135] phi from setMEMtoFAC to prepareMEM [phi:setMEMtoFAC->prepareMEM]
    // [135] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#1 [phi:setMEMtoFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    // setMEMtoFAC::@1
    // asm
    // asm { ldx$fe ldy$ff jsr$bbd4  }
    ldx $fe
    ldy $ff
    jsr $bbd4
    // setMEMtoFAC::@return
    // }
    // [162] return 
    rts
}
  // subFACfromARG
// FAC = ARG-FAC
// Set FAC to ARG minus FAC
subFACfromARG: {
    // asm
    // asm { jsr$b853  }
    jsr $b853
    // subFACfromARG::@return
    // }
    // [164] return 
    rts
}
  // setARGtoFAC
// ARG = FAC
// Set the ARG (floating point argument) to the value of the FAC (floating point accumulator)
setARGtoFAC: {
    // asm
    // asm { jsr$bc0f  }
    jsr $bc0f
    // setARGtoFAC::@return
    // }
    // [166] return 
    rts
}
  // progress_init
// Initialize the PETSCII progress bar
// progress_init(byte* zeropage($11) line)
progress_init: {
    .label line = $11
    // progress_init::@return
    // [168] return 
    rts
}
  // gen_sprites
gen_sprites: {
    .label spr = $16
    .label i = $15
    // [170] phi from gen_sprites to gen_sprites::@1 [phi:gen_sprites->gen_sprites::@1]
    // [170] phi (byte*) gen_sprites::spr#2 = (const byte*) sprites#0 [phi:gen_sprites->gen_sprites::@1#0] -- pbuz1=pbuc1 
    lda #<sprites
    sta spr
    lda #>sprites
    sta spr+1
    // [170] phi (byte) gen_sprites::i#2 = (byte) 0 [phi:gen_sprites->gen_sprites::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    // [170] phi from gen_sprites::@2 to gen_sprites::@1 [phi:gen_sprites::@2->gen_sprites::@1]
    // [170] phi (byte*) gen_sprites::spr#2 = (byte*) gen_sprites::spr#1 [phi:gen_sprites::@2->gen_sprites::@1#0] -- register_copy 
    // [170] phi (byte) gen_sprites::i#2 = (byte) gen_sprites::i#1 [phi:gen_sprites::@2->gen_sprites::@1#1] -- register_copy 
    // gen_sprites::@1
  b1:
    // gen_chargen_sprite(cml[i], spr)
    // [171] (byte) gen_chargen_sprite::ch#0 ← *((const byte[]) gen_sprites::cml#0 + (byte) gen_sprites::i#2) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldy i
    ldx cml,y
    // [172] (byte*) gen_chargen_sprite::sprite#0 ← (byte*) gen_sprites::spr#2 -- pbuz1=pbuz2 
    lda spr
    sta gen_chargen_sprite.sprite
    lda spr+1
    sta gen_chargen_sprite.sprite+1
    // [173] call gen_chargen_sprite 
    jsr gen_chargen_sprite
    // gen_sprites::@2
    // spr = spr + $40
    // [174] (byte*) gen_sprites::spr#1 ← (byte*) gen_sprites::spr#2 + (byte) $40 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$40
    clc
    adc spr
    sta spr
    bcc !+
    inc spr+1
  !:
    // for( byte i : 0..6 )
    // [175] (byte) gen_sprites::i#1 ← ++ (byte) gen_sprites::i#2 -- vbuz1=_inc_vbuz1 
    inc i
    // [176] if((byte) gen_sprites::i#1!=(byte) 7) goto gen_sprites::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp i
    bne b1
    // gen_sprites::@return
    // }
    // [177] return 
    rts
    cml: .text "camelot"
}
  // gen_chargen_sprite
// Generate a sprite from a C64 CHARGEN character (by making each pixel 3x3 pixels large)
// - c is the character to generate
// - sprite is a pointer to the position of the sprite to generate
// gen_chargen_sprite(byte register(X) ch, byte* zeropage($1d) sprite)
gen_chargen_sprite: {
    .label _0 = $28
    .label _1 = $28
    .label sprite = $1d
    .label chargen = $28
    .label bits = $19
    .label s_gen = $1c
    .label x = $1a
    .label y = $18
    .label c = $1b
    // (word)ch
    // [178] (word~) gen_chargen_sprite::$0 ← (word)(byte) gen_chargen_sprite::ch#0 -- vwuz1=_word_vbuxx 
    txa
    sta _0
    lda #0
    sta _0+1
    // ((word)ch)*8
    // [179] (word~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _1
    rol _1+1
    asl _1
    rol _1+1
    asl _1
    rol _1+1
    // chargen = CHARGEN+((word)ch)*8
    // [180] (byte*) gen_chargen_sprite::chargen#0 ← (const byte*) CHARGEN#0 + (word~) gen_chargen_sprite::$1 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda chargen
    adc #<CHARGEN
    sta chargen
    lda chargen+1
    adc #>CHARGEN
    sta chargen+1
    // asm
    // asm { sei  }
    sei
    // *PROCPORT = $32
    // [182] *((const byte*) PROCPORT#0) ← (byte) $32 -- _deref_pbuc1=vbuc2 
    lda #$32
    sta PROCPORT
    // [183] phi from gen_chargen_sprite to gen_chargen_sprite::@1 [phi:gen_chargen_sprite->gen_chargen_sprite::@1]
    // [183] phi (byte*) gen_chargen_sprite::sprite#11 = (byte*) gen_chargen_sprite::sprite#0 [phi:gen_chargen_sprite->gen_chargen_sprite::@1#0] -- register_copy 
    // [183] phi (byte) gen_chargen_sprite::y#2 = (byte) 0 [phi:gen_chargen_sprite->gen_chargen_sprite::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta y
    // [183] phi from gen_chargen_sprite::@8 to gen_chargen_sprite::@1 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@1]
    // [183] phi (byte*) gen_chargen_sprite::sprite#11 = (byte*) gen_chargen_sprite::sprite#2 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@1#0] -- register_copy 
    // [183] phi (byte) gen_chargen_sprite::y#2 = (byte) gen_chargen_sprite::y#1 [phi:gen_chargen_sprite::@8->gen_chargen_sprite::@1#1] -- register_copy 
    // gen_chargen_sprite::@1
  b1:
    // bits = chargen[y]
    // [184] (byte) gen_chargen_sprite::bits#0 ← *((byte*) gen_chargen_sprite::chargen#0 + (byte) gen_chargen_sprite::y#2) -- vbuz1=pbuz2_derefidx_vbuz3 
    // current chargen line
    ldy y
    lda (chargen),y
    sta bits
    // [185] phi from gen_chargen_sprite::@1 to gen_chargen_sprite::@2 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2]
    // [185] phi (byte) gen_chargen_sprite::x#6 = (byte) 0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta x
    // [185] phi (byte*) gen_chargen_sprite::sprite#10 = (byte*) gen_chargen_sprite::sprite#11 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#1] -- register_copy 
    // [185] phi (byte) gen_chargen_sprite::s_gen_cnt#4 = (byte) 0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#2] -- vbuyy=vbuc1 
    tay
    // [185] phi (byte) gen_chargen_sprite::s_gen#5 = (byte) 0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#3] -- vbuz1=vbuc1 
    sta s_gen
    // [185] phi (byte) gen_chargen_sprite::bits#2 = (byte) gen_chargen_sprite::bits#0 [phi:gen_chargen_sprite::@1->gen_chargen_sprite::@2#4] -- register_copy 
    // [185] phi from gen_chargen_sprite::@7 to gen_chargen_sprite::@2 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@2]
    // [185] phi (byte) gen_chargen_sprite::x#6 = (byte) gen_chargen_sprite::x#1 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@2#0] -- register_copy 
    // [185] phi (byte*) gen_chargen_sprite::sprite#10 = (byte*) gen_chargen_sprite::sprite#4 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@2#1] -- register_copy 
    // [185] phi (byte) gen_chargen_sprite::s_gen_cnt#4 = (byte) gen_chargen_sprite::s_gen_cnt#5 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@2#2] -- register_copy 
    // [185] phi (byte) gen_chargen_sprite::s_gen#5 = (byte) gen_chargen_sprite::s_gen#6 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@2#3] -- register_copy 
    // [185] phi (byte) gen_chargen_sprite::bits#2 = (byte) gen_chargen_sprite::bits#1 [phi:gen_chargen_sprite::@7->gen_chargen_sprite::@2#4] -- register_copy 
    // gen_chargen_sprite::@2
  b2:
    // bits & $80
    // [186] (byte~) gen_chargen_sprite::$3 ← (byte) gen_chargen_sprite::bits#2 & (byte) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and bits
    // if((bits & $80) != 0)
    // [187] if((byte~) gen_chargen_sprite::$3==(byte) 0) goto gen_chargen_sprite::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b6
    // [188] phi from gen_chargen_sprite::@2 to gen_chargen_sprite::@10 [phi:gen_chargen_sprite::@2->gen_chargen_sprite::@10]
    // gen_chargen_sprite::@10
    // [189] phi from gen_chargen_sprite::@10 to gen_chargen_sprite::@3 [phi:gen_chargen_sprite::@10->gen_chargen_sprite::@3]
    // [189] phi (byte) gen_chargen_sprite::c#3 = (byte) 1 [phi:gen_chargen_sprite::@10->gen_chargen_sprite::@3#0] -- vbuz1=vbuc1 
    lda #1
    sta c
    jmp b3
    // [189] phi from gen_chargen_sprite::@2 to gen_chargen_sprite::@3 [phi:gen_chargen_sprite::@2->gen_chargen_sprite::@3]
  b6:
    // [189] phi (byte) gen_chargen_sprite::c#3 = (byte) 0 [phi:gen_chargen_sprite::@2->gen_chargen_sprite::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta c
    // gen_chargen_sprite::@3
  b3:
    // [190] phi from gen_chargen_sprite::@3 to gen_chargen_sprite::@4 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4]
    // [190] phi (byte*) gen_chargen_sprite::sprite#3 = (byte*) gen_chargen_sprite::sprite#10 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#0] -- register_copy 
    // [190] phi (byte) gen_chargen_sprite::b#2 = (byte) 0 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#1] -- vbuxx=vbuc1 
    ldx #0
    // [190] phi (byte) gen_chargen_sprite::s_gen_cnt#3 = (byte) gen_chargen_sprite::s_gen_cnt#4 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#2] -- register_copy 
    // [190] phi (byte) gen_chargen_sprite::s_gen#3 = (byte) gen_chargen_sprite::s_gen#5 [phi:gen_chargen_sprite::@3->gen_chargen_sprite::@4#3] -- register_copy 
  // generate 3 pixels in the sprite byte (s_gen)
    // [190] phi from gen_chargen_sprite::@5 to gen_chargen_sprite::@4 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4]
    // [190] phi (byte*) gen_chargen_sprite::sprite#3 = (byte*) gen_chargen_sprite::sprite#4 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#0] -- register_copy 
    // [190] phi (byte) gen_chargen_sprite::b#2 = (byte) gen_chargen_sprite::b#1 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#1] -- register_copy 
    // [190] phi (byte) gen_chargen_sprite::s_gen_cnt#3 = (byte) gen_chargen_sprite::s_gen_cnt#5 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#2] -- register_copy 
    // [190] phi (byte) gen_chargen_sprite::s_gen#3 = (byte) gen_chargen_sprite::s_gen#6 [phi:gen_chargen_sprite::@5->gen_chargen_sprite::@4#3] -- register_copy 
    // gen_chargen_sprite::@4
  b4:
    // s_gen*2
    // [191] (byte~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda s_gen
    asl
    // s_gen = s_gen*2 | c
    // [192] (byte) gen_chargen_sprite::s_gen#1 ← (byte~) gen_chargen_sprite::$6 | (byte) gen_chargen_sprite::c#3 -- vbuz1=vbuaa_bor_vbuz2 
    ora c
    sta s_gen
    // if(++s_gen_cnt==8)
    // [193] (byte) gen_chargen_sprite::s_gen_cnt#1 ← ++ (byte) gen_chargen_sprite::s_gen_cnt#3 -- vbuyy=_inc_vbuyy 
    iny
    // [194] if((byte) gen_chargen_sprite::s_gen_cnt#1!=(byte) 8) goto gen_chargen_sprite::@5 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne b5
    // gen_chargen_sprite::@6
    // sprite[0] = s_gen
    // [195] *((byte*) gen_chargen_sprite::sprite#3) ← (byte) gen_chargen_sprite::s_gen#1 -- _deref_pbuz1=vbuz2 
    // sprite byte filled - store and move to next byte
    ldy #0
    sta (sprite),y
    // sprite[3] = s_gen
    // [196] *((byte*) gen_chargen_sprite::sprite#3 + (byte) 3) ← (byte) gen_chargen_sprite::s_gen#1 -- pbuz1_derefidx_vbuc1=vbuz2 
    ldy #3
    sta (sprite),y
    // sprite[6] = s_gen
    // [197] *((byte*) gen_chargen_sprite::sprite#3 + (byte) 6) ← (byte) gen_chargen_sprite::s_gen#1 -- pbuz1_derefidx_vbuc1=vbuz2 
    ldy #6
    sta (sprite),y
    // sprite++;
    // [198] (byte*) gen_chargen_sprite::sprite#1 ← ++ (byte*) gen_chargen_sprite::sprite#3 -- pbuz1=_inc_pbuz1 
    inc sprite
    bne !+
    inc sprite+1
  !:
    // [199] phi from gen_chargen_sprite::@6 to gen_chargen_sprite::@5 [phi:gen_chargen_sprite::@6->gen_chargen_sprite::@5]
    // [199] phi (byte*) gen_chargen_sprite::sprite#4 = (byte*) gen_chargen_sprite::sprite#1 [phi:gen_chargen_sprite::@6->gen_chargen_sprite::@5#0] -- register_copy 
    // [199] phi (byte) gen_chargen_sprite::s_gen_cnt#5 = (byte) 0 [phi:gen_chargen_sprite::@6->gen_chargen_sprite::@5#1] -- vbuyy=vbuc1 
    ldy #0
    // [199] phi (byte) gen_chargen_sprite::s_gen#6 = (byte) 0 [phi:gen_chargen_sprite::@6->gen_chargen_sprite::@5#2] -- vbuz1=vbuc1 
    tya
    sta s_gen
    // [199] phi from gen_chargen_sprite::@4 to gen_chargen_sprite::@5 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5]
    // [199] phi (byte*) gen_chargen_sprite::sprite#4 = (byte*) gen_chargen_sprite::sprite#3 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5#0] -- register_copy 
    // [199] phi (byte) gen_chargen_sprite::s_gen_cnt#5 = (byte) gen_chargen_sprite::s_gen_cnt#1 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5#1] -- register_copy 
    // [199] phi (byte) gen_chargen_sprite::s_gen#6 = (byte) gen_chargen_sprite::s_gen#1 [phi:gen_chargen_sprite::@4->gen_chargen_sprite::@5#2] -- register_copy 
    // gen_chargen_sprite::@5
  b5:
    // for(byte b : 0..2)
    // [200] (byte) gen_chargen_sprite::b#1 ← ++ (byte) gen_chargen_sprite::b#2 -- vbuxx=_inc_vbuxx 
    inx
    // [201] if((byte) gen_chargen_sprite::b#1!=(byte) 3) goto gen_chargen_sprite::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #3
    bne b4
    // gen_chargen_sprite::@7
    // bits = bits*2
    // [202] (byte) gen_chargen_sprite::bits#1 ← (byte) gen_chargen_sprite::bits#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl bits
    // for(byte x:0..7)
    // [203] (byte) gen_chargen_sprite::x#1 ← ++ (byte) gen_chargen_sprite::x#6 -- vbuz1=_inc_vbuz1 
    inc x
    // [204] if((byte) gen_chargen_sprite::x#1!=(byte) 8) goto gen_chargen_sprite::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp x
    bne b2
    // gen_chargen_sprite::@8
    // sprite = sprite + 6
    // [205] (byte*) gen_chargen_sprite::sprite#2 ← (byte*) gen_chargen_sprite::sprite#4 + (byte) 6 -- pbuz1=pbuz1_plus_vbuc1 
    lda #6
    clc
    adc sprite
    sta sprite
    bcc !+
    inc sprite+1
  !:
    // for(byte y:0..7)
    // [206] (byte) gen_chargen_sprite::y#1 ← ++ (byte) gen_chargen_sprite::y#2 -- vbuz1=_inc_vbuz1 
    inc y
    // [207] if((byte) gen_chargen_sprite::y#1!=(byte) 8) goto gen_chargen_sprite::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp y
    bne b1
    // gen_chargen_sprite::@9
    // *PROCPORT = $37
    // [208] *((const byte*) PROCPORT#0) ← (byte) $37 -- _deref_pbuc1=vbuc2 
    lda #$37
    sta PROCPORT
    // asm
    // asm { cli  }
    cli
    // gen_chargen_sprite::@return
    // }
    // [210] return 
    rts
}
  // place_sprites
place_sprites: {
    .label sprites_ptr = SCREEN+$3f8
    .label spr_id = $1f
    .label spr_x = $21
    .label col = $23
    .label j2 = $22
    .label j = $20
    // *SPRITES_ENABLE = %01111111
    // [211] *((const byte*) SPRITES_ENABLE#0) ← (byte) $7f -- _deref_pbuc1=vbuc2 
    lda #$7f
    sta SPRITES_ENABLE
    // *SPRITES_EXPAND_X = %01111111
    // [212] *((const byte*) SPRITES_EXPAND_X#0) ← (byte) $7f -- _deref_pbuc1=vbuc2 
    sta SPRITES_EXPAND_X
    // *SPRITES_EXPAND_Y = %01111111
    // [213] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte) $7f -- _deref_pbuc1=vbuc2 
    sta SPRITES_EXPAND_Y
    // [214] phi from place_sprites to place_sprites::@1 [phi:place_sprites->place_sprites::@1]
    // [214] phi (byte) place_sprites::col#2 = (byte) 5 [phi:place_sprites->place_sprites::@1#0] -- vbuz1=vbuc1 
    lda #5
    sta col
    // [214] phi (byte) place_sprites::j2#3 = (byte) 0 [phi:place_sprites->place_sprites::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta j2
    // [214] phi (byte) place_sprites::spr_x#2 = (byte) $3c [phi:place_sprites->place_sprites::@1#2] -- vbuz1=vbuc1 
    lda #$3c
    sta spr_x
    // [214] phi (byte) place_sprites::j#2 = (byte) 0 [phi:place_sprites->place_sprites::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta j
    // [214] phi (byte) place_sprites::spr_id#2 = (byte)(word)(const byte*) sprites#0/(byte) $40 [phi:place_sprites->place_sprites::@1#4] -- vbuz1=vbuc1 
    lda #sprites/$40
    sta spr_id
    // [214] phi from place_sprites::@1 to place_sprites::@1 [phi:place_sprites::@1->place_sprites::@1]
    // [214] phi (byte) place_sprites::col#2 = (byte) place_sprites::col#1 [phi:place_sprites::@1->place_sprites::@1#0] -- register_copy 
    // [214] phi (byte) place_sprites::j2#3 = (byte) place_sprites::j2#2 [phi:place_sprites::@1->place_sprites::@1#1] -- register_copy 
    // [214] phi (byte) place_sprites::spr_x#2 = (byte) place_sprites::spr_x#1 [phi:place_sprites::@1->place_sprites::@1#2] -- register_copy 
    // [214] phi (byte) place_sprites::j#2 = (byte) place_sprites::j#1 [phi:place_sprites::@1->place_sprites::@1#3] -- register_copy 
    // [214] phi (byte) place_sprites::spr_id#2 = (byte) place_sprites::spr_id#1 [phi:place_sprites::@1->place_sprites::@1#4] -- register_copy 
    // place_sprites::@1
  b1:
    // sprites_ptr[j] = spr_id++
    // [215] *((const byte*) place_sprites::sprites_ptr#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::spr_id#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda spr_id
    ldy j
    sta sprites_ptr,y
    // sprites_ptr[j] = spr_id++;
    // [216] (byte) place_sprites::spr_id#1 ← ++ (byte) place_sprites::spr_id#2 -- vbuz1=_inc_vbuz1 
    inc spr_id
    // SPRITES_XPOS[j2] = spr_x
    // [217] *((const byte*) SPRITES_XPOS#0 + (byte) place_sprites::j2#3) ← (byte) place_sprites::spr_x#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda spr_x
    ldy j2
    sta SPRITES_XPOS,y
    // SPRITES_YPOS[j2] = 80
    // [218] *((const byte*) SPRITES_YPOS#0 + (byte) place_sprites::j2#3) ← (byte) $50 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #$50
    sta SPRITES_YPOS,y
    // SPRITES_COLS[j] = col
    // [219] *((const byte*) SPRITES_COLS#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::col#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda col
    ldy j
    sta SPRITES_COLS,y
    // spr_x = spr_x + 32
    // [220] (byte) place_sprites::spr_x#1 ← (byte) place_sprites::spr_x#2 + (byte) $20 -- vbuz1=vbuz1_plus_vbuc1 
    lax spr_x
    axs #-[$20]
    stx spr_x
    // col = col^($7^$5)
    // [221] (byte) place_sprites::col#1 ← (byte) place_sprites::col#2 ^ (byte)(number) 7^(number) 5 -- vbuz1=vbuz1_bxor_vbuc1 
    lda #7^5
    eor col
    sta col
    // j2++;
    // [222] (byte) place_sprites::j2#1 ← ++ (byte) place_sprites::j2#3 -- vbuxx=_inc_vbuz1 
    ldx j2
    inx
    // [223] (byte) place_sprites::j2#2 ← ++ (byte) place_sprites::j2#1 -- vbuz1=_inc_vbuxx 
    inx
    stx j2
    // for( byte j : 0..6)
    // [224] (byte) place_sprites::j#1 ← ++ (byte) place_sprites::j#2 -- vbuz1=_inc_vbuz1 
    inc j
    // [225] if((byte) place_sprites::j#1!=(byte) 7) goto place_sprites::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp j
    bne b1
    // place_sprites::@return
    // }
    // [226] return 
    rts
}
  // File Data
  sintab_x: .fill $dd, 0
  sintab_y: .fill $c5, 0

