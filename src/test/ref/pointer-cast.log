Fixing pointer addition (word*~) main::$4 ← (word*~) main::$3 + (byte/signed byte/word/signed word/dword/signed dword) 1
Fixing pointer addition (signed word*~) main::$6 ← (signed word*~) main::$5 + (byte/signed byte/word/signed word/dword/signed dword) 2
Fixing pointer addition (word*~) main::$11 ← (word*~) main::$10 + (byte/signed byte/word/signed word/dword/signed dword) 1
Fixing pointer addition (signed word*~) main::$13 ← (signed word*~) main::$12 + (byte/signed byte/word/signed word/dword/signed dword) 2
Fixing pointer addition (word*~) main::$18 ← (word*~) main::$17 + (byte/signed byte/word/signed word/dword/signed dword) 1
Fixing pointer addition (signed word*~) main::$20 ← (signed word*~) main::$19 + (byte/signed byte/word/signed word/dword/signed dword) 2
Fixing pointer addition (word*~) main::$25 ← (word*~) main::$24 + (byte/signed byte/word/signed word/dword/signed dword) 1
Fixing pointer addition (signed word*~) main::$27 ← (signed word*~) main::$26 + (byte/signed byte/word/signed word/dword/signed dword) 2
Identified constant variable (byte*) ub_screen
Identified constant variable (signed byte*) sb_screen
Identified constant variable (word*) uw_screen
Identified constant variable (signed word*) sw_screen
Identified constant variable (byte) ub
Identified constant variable (word) uw

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) ub_screen#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  (signed byte*) sb_screen#0 ← ((signed byte*)) (word/signed word/dword/signed dword) $428
  (word*) uw_screen#0 ← ((word*)) (word/signed word/dword/signed dword) $450
  (signed word*) sw_screen#0 ← ((signed word*)) (word/signed word/dword/signed dword) $478
  (byte) ub#0 ← (byte/signed byte/word/signed word/dword/signed dword) $29
  (signed byte/signed word/signed dword~) $0 ← - (byte/signed byte/word/signed word/dword/signed dword) $29
  (signed byte) sb#0 ← (signed byte/signed word/signed dword~) $0
  (word) uw#0 ← (word/signed word/dword/signed dword) $3000
  (signed word/signed dword~) $1 ← - (word/signed word/dword/signed dword) $3000
  (signed word) sw#0 ← (signed word/signed dword~) $1
  to:@1
main: scope:[main]  from @1
  (signed word) sw#1 ← phi( @1/(signed word) sw#2 )
  (signed byte) sb#1 ← phi( @1/(signed byte) sb#2 )
  (byte*~) main::$0 ← ((byte*)) (byte*) ub_screen#0
  *((byte*~) main::$0) ← (byte) ub#0
  (signed byte*~) main::$1 ← ((signed byte*)) (byte*) ub_screen#0
  (signed byte*~) main::$2 ← (signed byte*~) main::$1 + (byte/signed byte/word/signed word/dword/signed dword) 1
  *((signed byte*~) main::$2) ← (signed byte) sb#1
  (word*~) main::$3 ← ((word*)) (byte*) ub_screen#0
  (byte/signed byte/word/signed word/dword/signed dword) main::$28 ← (byte/signed byte/word/signed word/dword/signed dword) 1 * (const byte) SIZEOF_WORD
  (word*~) main::$4 ← (word*~) main::$3 + (byte/signed byte/word/signed word/dword/signed dword) main::$28
  *((word*~) main::$4) ← (word) uw#0
  (signed word*~) main::$5 ← ((signed word*)) (byte*) ub_screen#0
  (byte/signed byte/word/signed word/dword/signed dword) main::$29 ← (byte/signed byte/word/signed word/dword/signed dword) 2 * (const byte) SIZEOF_SIGNED_WORD
  (signed word*~) main::$6 ← (signed word*~) main::$5 + (byte/signed byte/word/signed word/dword/signed dword) main::$29
  *((signed word*~) main::$6) ← (signed word) sw#1
  (byte*~) main::$7 ← ((byte*)) (signed byte*) sb_screen#0
  *((byte*~) main::$7) ← (byte) ub#0
  (signed byte*~) main::$8 ← ((signed byte*)) (signed byte*) sb_screen#0
  (signed byte*~) main::$9 ← (signed byte*~) main::$8 + (byte/signed byte/word/signed word/dword/signed dword) 1
  *((signed byte*~) main::$9) ← (signed byte) sb#1
  (word*~) main::$10 ← ((word*)) (signed byte*) sb_screen#0
  (byte/signed byte/word/signed word/dword/signed dword) main::$30 ← (byte/signed byte/word/signed word/dword/signed dword) 1 * (const byte) SIZEOF_WORD
  (word*~) main::$11 ← (word*~) main::$10 + (byte/signed byte/word/signed word/dword/signed dword) main::$30
  *((word*~) main::$11) ← (word) uw#0
  (signed word*~) main::$12 ← ((signed word*)) (signed byte*) sb_screen#0
  (byte/signed byte/word/signed word/dword/signed dword) main::$31 ← (byte/signed byte/word/signed word/dword/signed dword) 2 * (const byte) SIZEOF_SIGNED_WORD
  (signed word*~) main::$13 ← (signed word*~) main::$12 + (byte/signed byte/word/signed word/dword/signed dword) main::$31
  *((signed word*~) main::$13) ← (signed word) sw#1
  (byte*~) main::$14 ← ((byte*)) (word*) uw_screen#0
  *((byte*~) main::$14) ← (byte) ub#0
  (signed byte*~) main::$15 ← ((signed byte*)) (word*) uw_screen#0
  (signed byte*~) main::$16 ← (signed byte*~) main::$15 + (byte/signed byte/word/signed word/dword/signed dword) 1
  *((signed byte*~) main::$16) ← (signed byte) sb#1
  (word*~) main::$17 ← ((word*)) (word*) uw_screen#0
  (byte/signed byte/word/signed word/dword/signed dword) main::$32 ← (byte/signed byte/word/signed word/dword/signed dword) 1 * (const byte) SIZEOF_WORD
  (word*~) main::$18 ← (word*~) main::$17 + (byte/signed byte/word/signed word/dword/signed dword) main::$32
  *((word*~) main::$18) ← (word) uw#0
  (signed word*~) main::$19 ← ((signed word*)) (word*) uw_screen#0
  (byte/signed byte/word/signed word/dword/signed dword) main::$33 ← (byte/signed byte/word/signed word/dword/signed dword) 2 * (const byte) SIZEOF_SIGNED_WORD
  (signed word*~) main::$20 ← (signed word*~) main::$19 + (byte/signed byte/word/signed word/dword/signed dword) main::$33
  *((signed word*~) main::$20) ← (signed word) sw#1
  (byte*~) main::$21 ← ((byte*)) (signed word*) sw_screen#0
  *((byte*~) main::$21) ← (byte) ub#0
  (signed byte*~) main::$22 ← ((signed byte*)) (signed word*) sw_screen#0
  (signed byte*~) main::$23 ← (signed byte*~) main::$22 + (byte/signed byte/word/signed word/dword/signed dword) 1
  *((signed byte*~) main::$23) ← (signed byte) sb#1
  (word*~) main::$24 ← ((word*)) (signed word*) sw_screen#0
  (byte/signed byte/word/signed word/dword/signed dword) main::$34 ← (byte/signed byte/word/signed word/dword/signed dword) 1 * (const byte) SIZEOF_WORD
  (word*~) main::$25 ← (word*~) main::$24 + (byte/signed byte/word/signed word/dword/signed dword) main::$34
  *((word*~) main::$25) ← (word) uw#0
  (signed word*~) main::$26 ← ((signed word*)) (signed word*) sw_screen#0
  (byte/signed byte/word/signed word/dword/signed dword) main::$35 ← (byte/signed byte/word/signed word/dword/signed dword) 2 * (const byte) SIZEOF_SIGNED_WORD
  (signed word*~) main::$27 ← (signed word*~) main::$26 + (byte/signed byte/word/signed word/dword/signed dword) main::$35
  *((signed word*~) main::$27) ← (signed word) sw#1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  (signed word) sw#2 ← phi( @begin/(signed word) sw#0 )
  (signed byte) sb#2 ← phi( @begin/(signed byte) sb#0 )
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(signed byte/signed word/signed dword~) $0
(signed word/signed dword~) $1
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) SIZEOF_SIGNED_WORD = (byte/signed byte/word/signed word/dword/signed dword) 2
(const byte) SIZEOF_WORD = (byte/signed byte/word/signed word/dword/signed dword) 2
(void()) main()
(byte*~) main::$0
(signed byte*~) main::$1
(word*~) main::$10
(word*~) main::$11
(signed word*~) main::$12
(signed word*~) main::$13
(byte*~) main::$14
(signed byte*~) main::$15
(signed byte*~) main::$16
(word*~) main::$17
(word*~) main::$18
(signed word*~) main::$19
(signed byte*~) main::$2
(signed word*~) main::$20
(byte*~) main::$21
(signed byte*~) main::$22
(signed byte*~) main::$23
(word*~) main::$24
(word*~) main::$25
(signed word*~) main::$26
(signed word*~) main::$27
(byte/signed byte/word/signed word/dword/signed dword) main::$28
(byte/signed byte/word/signed word/dword/signed dword) main::$29
(word*~) main::$3
(byte/signed byte/word/signed word/dword/signed dword) main::$30
(byte/signed byte/word/signed word/dword/signed dword) main::$31
(byte/signed byte/word/signed word/dword/signed dword) main::$32
(byte/signed byte/word/signed word/dword/signed dword) main::$33
(byte/signed byte/word/signed word/dword/signed dword) main::$34
(byte/signed byte/word/signed word/dword/signed dword) main::$35
(word*~) main::$4
(signed word*~) main::$5
(signed word*~) main::$6
(byte*~) main::$7
(signed byte*~) main::$8
(signed byte*~) main::$9
(label) main::@return
(signed byte) sb
(signed byte) sb#0
(signed byte) sb#1
(signed byte) sb#2
(signed byte*) sb_screen
(signed byte*) sb_screen#0
(signed word) sw
(signed word) sw#0
(signed word) sw#1
(signed word) sw#2
(signed word*) sw_screen
(signed word*) sw_screen#0
(byte) ub
(byte) ub#0
(byte*) ub_screen
(byte*) ub_screen#0
(word) uw
(word) uw#0
(word*) uw_screen
(word*) uw_screen#0

Culled Empty Block (label) @2
Successful SSA optimization Pass2CullEmptyBlocks
Alias (signed byte) sb#0 = (signed byte/signed word/signed dword~) $0 (signed byte) sb#2 
Alias (signed word) sw#0 = (signed word/signed dword~) $1 (signed word) sw#2 
Successful SSA optimization Pass2AliasElimination
Redundant Phi (signed byte) sb#1 (signed byte) sb#0
Redundant Phi (signed word) sw#1 (signed word) sw#0
Successful SSA optimization Pass2RedundantPhiElimination
Constant (const byte*) ub_screen#0 = ((byte*))$400
Constant (const signed byte*) sb_screen#0 = ((signed byte*))$428
Constant (const word*) uw_screen#0 = ((word*))$450
Constant (const signed word*) sw_screen#0 = ((signed word*))$478
Constant (const byte) ub#0 = $29
Constant (const signed byte) sb#0 = -$29
Constant (const word) uw#0 = $3000
Constant (const signed word) sw#0 = -$3000
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$28 = 1*SIZEOF_WORD
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$29 = 2*SIZEOF_SIGNED_WORD
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$30 = 1*SIZEOF_WORD
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$31 = 2*SIZEOF_SIGNED_WORD
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$32 = 1*SIZEOF_WORD
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$33 = 2*SIZEOF_SIGNED_WORD
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$34 = 1*SIZEOF_WORD
Constant (const byte/signed byte/word/signed word/dword/signed dword) main::$35 = 2*SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) main::$0 = ((byte*))ub_screen#0
Constant (const signed byte*) main::$1 = ((signed byte*))ub_screen#0
Constant (const word*) main::$3 = ((word*))ub_screen#0
Constant (const signed word*) main::$5 = ((signed word*))ub_screen#0
Constant (const byte*) main::$7 = ((byte*))sb_screen#0
Constant (const signed byte*) main::$8 = ((signed byte*))sb_screen#0
Constant (const word*) main::$10 = ((word*))sb_screen#0
Constant (const signed word*) main::$12 = ((signed word*))sb_screen#0
Constant (const byte*) main::$14 = ((byte*))uw_screen#0
Constant (const signed byte*) main::$15 = ((signed byte*))uw_screen#0
Constant (const word*) main::$17 = ((word*))uw_screen#0
Constant (const signed word*) main::$19 = ((signed word*))uw_screen#0
Constant (const byte*) main::$21 = ((byte*))sw_screen#0
Constant (const signed byte*) main::$22 = ((signed byte*))sw_screen#0
Constant (const word*) main::$24 = ((word*))sw_screen#0
Constant (const signed word*) main::$26 = ((signed word*))sw_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const signed byte*) main::$2 = main::$1+1
Constant (const word*) main::$4 = main::$3+main::$28
Constant (const signed word*) main::$6 = main::$5+main::$29
Constant (const signed byte*) main::$9 = main::$8+1
Constant (const word*) main::$11 = main::$10+main::$30
Constant (const signed word*) main::$13 = main::$12+main::$31
Constant (const signed byte*) main::$16 = main::$15+1
Constant (const word*) main::$18 = main::$17+main::$32
Constant (const signed word*) main::$20 = main::$19+main::$33
Constant (const signed byte*) main::$23 = main::$22+1
Constant (const word*) main::$25 = main::$24+main::$34
Constant (const signed word*) main::$27 = main::$26+main::$35
Successful SSA optimization Pass2ConstantIdentification
Constant inlined main::$34 = (byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD
Constant inlined main::$12 = ((signed word*))(const signed byte*) sb_screen#0
Constant inlined main::$35 = (byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD
Constant inlined main::$13 = ((signed word*))(const signed byte*) sb_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD
Constant inlined main::$14 = ((byte*))(const word*) uw_screen#0
Constant inlined main::$15 = ((signed byte*))(const word*) uw_screen#0
Constant inlined main::$30 = (byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD
Constant inlined main::$31 = (byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD
Constant inlined main::$32 = (byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD
Constant inlined main::$10 = ((word*))(const signed byte*) sb_screen#0
Constant inlined main::$33 = (byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD
Constant inlined main::$11 = ((word*))(const signed byte*) sb_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD
Constant inlined main::$16 = ((signed byte*))(const word*) uw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined main::$17 = ((word*))(const word*) uw_screen#0
Constant inlined main::$18 = ((word*))(const word*) uw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD
Constant inlined main::$19 = ((signed word*))(const word*) uw_screen#0
Constant inlined main::$23 = ((signed byte*))(const signed word*) sw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined main::$24 = ((word*))(const signed word*) sw_screen#0
Constant inlined main::$25 = ((word*))(const signed word*) sw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD
Constant inlined main::$26 = ((signed word*))(const signed word*) sw_screen#0
Constant inlined main::$20 = ((signed word*))(const word*) uw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD
Constant inlined main::$21 = ((byte*))(const signed word*) sw_screen#0
Constant inlined main::$22 = ((signed byte*))(const signed word*) sw_screen#0
Constant inlined main::$1 = ((signed byte*))(const byte*) ub_screen#0
Constant inlined main::$27 = ((signed word*))(const signed word*) sw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD
Constant inlined main::$28 = (byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD
Constant inlined main::$2 = ((signed byte*))(const byte*) ub_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined main::$29 = (byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD
Constant inlined main::$0 = ((byte*))(const byte*) ub_screen#0
Constant inlined main::$5 = ((signed word*))(const byte*) ub_screen#0
Constant inlined main::$6 = ((signed word*))(const byte*) ub_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD
Constant inlined main::$3 = ((word*))(const byte*) ub_screen#0
Constant inlined main::$4 = ((word*))(const byte*) ub_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD
Constant inlined main::$9 = ((signed byte*))(const signed byte*) sb_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined main::$7 = ((byte*))(const signed byte*) sb_screen#0
Constant inlined main::$8 = ((signed byte*))(const signed byte*) sb_screen#0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *(((byte*))(const byte*) ub_screen#0) ← (const byte) ub#0
  [5] *(((signed byte*))(const byte*) ub_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0
  [6] *(((word*))(const byte*) ub_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0
  [7] *(((signed word*))(const byte*) ub_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0
  [8] *(((byte*))(const signed byte*) sb_screen#0) ← (const byte) ub#0
  [9] *(((signed byte*))(const signed byte*) sb_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0
  [10] *(((word*))(const signed byte*) sb_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0
  [11] *(((signed word*))(const signed byte*) sb_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0
  [12] *(((byte*))(const word*) uw_screen#0) ← (const byte) ub#0
  [13] *(((signed byte*))(const word*) uw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0
  [14] *(((word*))(const word*) uw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0
  [15] *(((signed word*))(const word*) uw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0
  [16] *(((byte*))(const signed word*) sw_screen#0) ← (const byte) ub#0
  [17] *(((signed byte*))(const signed word*) sw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0
  [18] *(((word*))(const signed word*) sw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0
  [19] *(((signed word*))(const signed word*) sw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0
  to:main::@return
main::@return: scope:[main]  from main
  [20] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(signed byte) sb
(signed byte*) sb_screen
(signed word) sw
(signed word*) sw_screen
(byte) ub
(byte*) ub_screen
(word) uw
(word*) uw_screen

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
//SEG0 File Comments
// Tests casting pointer types to other pointer types
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const SIZEOF_WORD = 2
  .const SIZEOF_SIGNED_WORD = 2
  .label ub_screen = $400
  .label sb_screen = $428
  .label uw_screen = $450
  .label sw_screen = $478
  .const ub = $29
  .const sb = -$29
  .const uw = $3000
  .const sw = -$3000
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [4] *(((byte*))(const byte*) ub_screen#0) ← (const byte) ub#0 -- _deref_pbuc1=vbuc2 
    lda #ub
    sta ub_screen
  //SEG11 [5] *(((signed byte*))(const byte*) ub_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0 -- _deref_pbsc1=vbsc2 
    lda #sb
    sta ub_screen+1
  //SEG12 [6] *(((word*))(const byte*) ub_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0 -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta ub_screen+1*SIZEOF_WORD
    lda #>uw
    sta ub_screen+1*SIZEOF_WORD+1
  //SEG13 [7] *(((signed word*))(const byte*) ub_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0 -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta ub_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta ub_screen+2*SIZEOF_SIGNED_WORD+1
  //SEG14 [8] *(((byte*))(const signed byte*) sb_screen#0) ← (const byte) ub#0 -- _deref_pbuc1=vbuc2 
    lda #ub
    sta sb_screen
  //SEG15 [9] *(((signed byte*))(const signed byte*) sb_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0 -- _deref_pbsc1=vbsc2 
    lda #sb
    sta sb_screen+1
  //SEG16 [10] *(((word*))(const signed byte*) sb_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0 -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta sb_screen+1*SIZEOF_WORD
    lda #>uw
    sta sb_screen+1*SIZEOF_WORD+1
  //SEG17 [11] *(((signed word*))(const signed byte*) sb_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0 -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta sb_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta sb_screen+2*SIZEOF_SIGNED_WORD+1
  //SEG18 [12] *(((byte*))(const word*) uw_screen#0) ← (const byte) ub#0 -- _deref_pbuc1=vbuc2 
    lda #ub
    sta uw_screen
  //SEG19 [13] *(((signed byte*))(const word*) uw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0 -- _deref_pbsc1=vbsc2 
    lda #sb
    sta uw_screen+1
  //SEG20 [14] *(((word*))(const word*) uw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0 -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta uw_screen+1*SIZEOF_WORD
    lda #>uw
    sta uw_screen+1*SIZEOF_WORD+1
  //SEG21 [15] *(((signed word*))(const word*) uw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0 -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta uw_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta uw_screen+2*SIZEOF_SIGNED_WORD+1
  //SEG22 [16] *(((byte*))(const signed word*) sw_screen#0) ← (const byte) ub#0 -- _deref_pbuc1=vbuc2 
    lda #ub
    sta sw_screen
  //SEG23 [17] *(((signed byte*))(const signed word*) sw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0 -- _deref_pbsc1=vbsc2 
    lda #sb
    sta sw_screen+1
  //SEG24 [18] *(((word*))(const signed word*) sw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0 -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta sw_screen+1*SIZEOF_WORD
    lda #>uw
    sta sw_screen+1*SIZEOF_WORD+1
  //SEG25 [19] *(((signed word*))(const signed word*) sw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0 -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta sw_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta sw_screen+2*SIZEOF_SIGNED_WORD+1
    jmp breturn
  //SEG26 main::@return
  breturn:
  //SEG27 [20] return 
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *(((byte*))(const byte*) ub_screen#0) ← (const byte) ub#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *(((signed byte*))(const byte*) ub_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *(((word*))(const byte*) ub_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *(((signed word*))(const byte*) ub_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [8] *(((byte*))(const signed byte*) sb_screen#0) ← (const byte) ub#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [9] *(((signed byte*))(const signed byte*) sb_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *(((word*))(const signed byte*) sb_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [11] *(((signed word*))(const signed byte*) sb_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [12] *(((byte*))(const word*) uw_screen#0) ← (const byte) ub#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [13] *(((signed byte*))(const word*) uw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [14] *(((word*))(const word*) uw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [15] *(((signed word*))(const word*) uw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [16] *(((byte*))(const signed word*) sw_screen#0) ← (const byte) ub#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [17] *(((signed byte*))(const signed word*) sw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [18] *(((word*))(const signed word*) sw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [19] *(((signed word*))(const signed word*) sw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 165 combination 
Uplifting [] best 165 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Tests casting pointer types to other pointer types
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const SIZEOF_WORD = 2
  .const SIZEOF_SIGNED_WORD = 2
  .label ub_screen = $400
  .label sb_screen = $428
  .label uw_screen = $450
  .label sw_screen = $478
  .const ub = $29
  .const sb = -$29
  .const uw = $3000
  .const sw = -$3000
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [4] *(((byte*))(const byte*) ub_screen#0) ← (const byte) ub#0 -- _deref_pbuc1=vbuc2 
    lda #ub
    sta ub_screen
  //SEG11 [5] *(((signed byte*))(const byte*) ub_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0 -- _deref_pbsc1=vbsc2 
    lda #sb
    sta ub_screen+1
  //SEG12 [6] *(((word*))(const byte*) ub_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0 -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta ub_screen+1*SIZEOF_WORD
    lda #>uw
    sta ub_screen+1*SIZEOF_WORD+1
  //SEG13 [7] *(((signed word*))(const byte*) ub_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0 -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta ub_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta ub_screen+2*SIZEOF_SIGNED_WORD+1
  //SEG14 [8] *(((byte*))(const signed byte*) sb_screen#0) ← (const byte) ub#0 -- _deref_pbuc1=vbuc2 
    lda #ub
    sta sb_screen
  //SEG15 [9] *(((signed byte*))(const signed byte*) sb_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0 -- _deref_pbsc1=vbsc2 
    lda #sb
    sta sb_screen+1
  //SEG16 [10] *(((word*))(const signed byte*) sb_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0 -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta sb_screen+1*SIZEOF_WORD
    lda #>uw
    sta sb_screen+1*SIZEOF_WORD+1
  //SEG17 [11] *(((signed word*))(const signed byte*) sb_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0 -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta sb_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta sb_screen+2*SIZEOF_SIGNED_WORD+1
  //SEG18 [12] *(((byte*))(const word*) uw_screen#0) ← (const byte) ub#0 -- _deref_pbuc1=vbuc2 
    lda #ub
    sta uw_screen
  //SEG19 [13] *(((signed byte*))(const word*) uw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0 -- _deref_pbsc1=vbsc2 
    lda #sb
    sta uw_screen+1
  //SEG20 [14] *(((word*))(const word*) uw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0 -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta uw_screen+1*SIZEOF_WORD
    lda #>uw
    sta uw_screen+1*SIZEOF_WORD+1
  //SEG21 [15] *(((signed word*))(const word*) uw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0 -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta uw_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta uw_screen+2*SIZEOF_SIGNED_WORD+1
  //SEG22 [16] *(((byte*))(const signed word*) sw_screen#0) ← (const byte) ub#0 -- _deref_pbuc1=vbuc2 
    lda #ub
    sta sw_screen
  //SEG23 [17] *(((signed byte*))(const signed word*) sw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0 -- _deref_pbsc1=vbsc2 
    lda #sb
    sta sw_screen+1
  //SEG24 [18] *(((word*))(const signed word*) sw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0 -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta sw_screen+1*SIZEOF_WORD
    lda #>uw
    sta sw_screen+1*SIZEOF_WORD+1
  //SEG25 [19] *(((signed word*))(const signed word*) sw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0 -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta sw_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta sw_screen+2*SIZEOF_SIGNED_WORD+1
    jmp breturn
  //SEG26 main::@return
  breturn:
  //SEG27 [20] return 
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) SIZEOF_SIGNED_WORD SIZEOF_SIGNED_WORD = (byte/signed byte/word/signed word/dword/signed dword) 2
(const byte) SIZEOF_WORD SIZEOF_WORD = (byte/signed byte/word/signed word/dword/signed dword) 2
(void()) main()
(label) main::@return
(signed byte) sb
(const signed byte) sb#0 sb = -(byte/signed byte/word/signed word/dword/signed dword) $29
(signed byte*) sb_screen
(const signed byte*) sb_screen#0 sb_screen = ((signed byte*))(word/signed word/dword/signed dword) $428
(signed word) sw
(const signed word) sw#0 sw = -(word/signed word/dword/signed dword) $3000
(signed word*) sw_screen
(const signed word*) sw_screen#0 sw_screen = ((signed word*))(word/signed word/dword/signed dword) $478
(byte) ub
(const byte) ub#0 ub = (byte/signed byte/word/signed word/dword/signed dword) $29
(byte*) ub_screen
(const byte*) ub_screen#0 ub_screen = ((byte*))(word/signed word/dword/signed dword) $400
(word) uw
(const word) uw#0 uw = (word/signed word/dword/signed dword) $3000
(word*) uw_screen
(const word*) uw_screen#0 uw_screen = ((word*))(word/signed word/dword/signed dword) $450



FINAL ASSEMBLER
Score: 150

//SEG0 File Comments
// Tests casting pointer types to other pointer types
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const SIZEOF_WORD = 2
  .const SIZEOF_SIGNED_WORD = 2
  .label ub_screen = $400
  .label sb_screen = $428
  .label uw_screen = $450
  .label sw_screen = $478
  .const ub = $29
  .const sb = -$29
  .const uw = $3000
  .const sw = -$3000
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [4] *(((byte*))(const byte*) ub_screen#0) ← (const byte) ub#0 -- _deref_pbuc1=vbuc2 
    lda #ub
    sta ub_screen
  //SEG11 [5] *(((signed byte*))(const byte*) ub_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0 -- _deref_pbsc1=vbsc2 
    lda #sb
    sta ub_screen+1
  //SEG12 [6] *(((word*))(const byte*) ub_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0 -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta ub_screen+1*SIZEOF_WORD
    lda #>uw
    sta ub_screen+1*SIZEOF_WORD+1
  //SEG13 [7] *(((signed word*))(const byte*) ub_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0 -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta ub_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta ub_screen+2*SIZEOF_SIGNED_WORD+1
  //SEG14 [8] *(((byte*))(const signed byte*) sb_screen#0) ← (const byte) ub#0 -- _deref_pbuc1=vbuc2 
    lda #ub
    sta sb_screen
  //SEG15 [9] *(((signed byte*))(const signed byte*) sb_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0 -- _deref_pbsc1=vbsc2 
    lda #sb
    sta sb_screen+1
  //SEG16 [10] *(((word*))(const signed byte*) sb_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0 -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta sb_screen+1*SIZEOF_WORD
    lda #>uw
    sta sb_screen+1*SIZEOF_WORD+1
  //SEG17 [11] *(((signed word*))(const signed byte*) sb_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0 -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta sb_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta sb_screen+2*SIZEOF_SIGNED_WORD+1
  //SEG18 [12] *(((byte*))(const word*) uw_screen#0) ← (const byte) ub#0 -- _deref_pbuc1=vbuc2 
    lda #ub
    sta uw_screen
  //SEG19 [13] *(((signed byte*))(const word*) uw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0 -- _deref_pbsc1=vbsc2 
    lda #sb
    sta uw_screen+1
  //SEG20 [14] *(((word*))(const word*) uw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0 -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta uw_screen+1*SIZEOF_WORD
    lda #>uw
    sta uw_screen+1*SIZEOF_WORD+1
  //SEG21 [15] *(((signed word*))(const word*) uw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0 -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta uw_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta uw_screen+2*SIZEOF_SIGNED_WORD+1
  //SEG22 [16] *(((byte*))(const signed word*) sw_screen#0) ← (const byte) ub#0 -- _deref_pbuc1=vbuc2 
    lda #ub
    sta sw_screen
  //SEG23 [17] *(((signed byte*))(const signed word*) sw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (const signed byte) sb#0 -- _deref_pbsc1=vbsc2 
    lda #sb
    sta sw_screen+1
  //SEG24 [18] *(((word*))(const signed word*) sw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 1*(const byte) SIZEOF_WORD) ← (const word) uw#0 -- _deref_pwuc1=vwuc2 
    lda #<uw
    sta sw_screen+1*SIZEOF_WORD
    lda #>uw
    sta sw_screen+1*SIZEOF_WORD+1
  //SEG25 [19] *(((signed word*))(const signed word*) sw_screen#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) SIZEOF_SIGNED_WORD) ← (const signed word) sw#0 -- _deref_pwsc1=vwsc2 
    lda #<sw
    sta sw_screen+2*SIZEOF_SIGNED_WORD
    lda #>sw
    sta sw_screen+2*SIZEOF_SIGNED_WORD+1
  //SEG26 main::@return
  //SEG27 [20] return 
    rts
}

