Inlined call call __init

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::sum#0 = 0
  main::addend#0 = $1e240
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::addend#3 = phi( main/main::addend#0, main::@2/main::addend#1 )
  main::sum#4 = phi( main/main::sum#0, main::@2/main::sum#1 )
  main::i#2 = phi( main/main::i#0, main::@2/main::i#1 )
  main::$0 = main::i#2 < $64
  if(main::$0) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  main::addend#2 = phi( main::@1/main::addend#3 )
  main::sum#2 = phi( main::@1/main::sum#4 )
  main::sum#1 = main::sum#2 + main::addend#2
  main::addend#1 = main::addend#2 + main::i#3
  main::i#1 = ++ main::i#3
  to:main::@1
main::@3: scope:[main]  from main::@1
  main::sum#3 = phi( main::@1/main::sum#4 )
  *SCREEN = main::sum#3
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
__constant unsigned long *SCREEN = (char *)$400
void __start()
void main()
bool main::$0
unsigned long main::addend
unsigned long main::addend#0
unsigned long main::addend#1
unsigned long main::addend#2
unsigned long main::addend#3
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::i#3
unsigned long main::sum
unsigned long main::sum#0
unsigned long main::sum#1
unsigned long main::sum#2
unsigned long main::sum#3
unsigned long main::sum#4

Adding number conversion cast (unumber) $64 in main::$0 = main::i#2 < $64
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast $64
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $64
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::sum#2 = main::sum#4 main::sum#3 
Alias main::addend#2 = main::addend#3 
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$0 [5] if(main::i#2<$64) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::sum#0 = 0
Constant main::addend#0 = $1e240
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::sum#0
Inlining constant with var siblings main::addend#0
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Constant inlined main::addend#0 = $1e240
Constant inlined main::sum#0 = 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
CALL GRAPH

Created 3 initial phi equivalence classes
Coalesced [8] main::i#4 = main::i#1
Coalesced [9] main::sum#5 = main::sum#1
Coalesced [10] main::addend#4 = main::addend#1
Coalesced down to 3 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] main::addend#2 = phi( main/$1e240, main::@2/main::addend#1 )
  [1] main::sum#2 = phi( main/0, main::@2/main::sum#1 )
  [1] main::i#2 = phi( main/0, main::@2/main::i#1 )
  [2] if(main::i#2<$64) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [3] *SCREEN = main::sum#2
  to:main::@return
main::@return: scope:[main]  from main::@3
  [4] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [5] main::sum#1 = main::sum#2 + main::addend#2
  [6] main::addend#1 = main::addend#2 + main::i#2
  [7] main::i#1 = ++ main::i#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
unsigned long main::addend
unsigned long main::addend#1 // 11.0
unsigned long main::addend#2 // 11.0
char main::i
char main::i#1 // 22.0
char main::i#2 // 11.0
unsigned long main::sum
unsigned long main::sum#1 // 7.333333333333333
unsigned long main::sum#2 // 12.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::sum#2 main::sum#1 ]
[ main::addend#2 main::addend#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::sum#2 main::sum#1 ]
[ main::addend#2 main::addend#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[4]:3 [ main::addend#2 main::addend#1 ]
Allocated zp[4]:7 [ main::sum#2 main::sum#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] *SCREEN = main::sum#2 [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y reg byte z 
Statement [5] main::sum#1 = main::sum#2 + main::addend#2 [ main::i#2 main::addend#2 main::sum#1 ] (  [ main::i#2 main::addend#2 main::sum#1 ] { }  ) always clobbers reg byte a reg byte x reg byte y reg byte z 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte z as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [6] main::addend#1 = main::addend#2 + main::i#2 [ main::i#2 main::sum#1 main::addend#1 ] (  [ main::i#2 main::sum#1 main::addend#1 ] { }  ) always clobbers reg byte a 
Statement [2] if(main::i#2<$64) goto main::@2 [ main::i#2 main::sum#2 main::addend#2 ] (  [ main::i#2 main::sum#2 main::addend#2 ] { }  ) always clobbers reg byte a 
Statement [3] *SCREEN = main::sum#2 [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y reg byte z 
Statement [5] main::sum#1 = main::sum#2 + main::addend#2 [ main::i#2 main::addend#2 main::sum#1 ] (  [ main::i#2 main::addend#2 main::sum#1 ] { }  ) always clobbers reg byte a reg byte x reg byte y reg byte z 
Statement [6] main::addend#1 = main::addend#2 + main::i#2 [ main::i#2 main::sum#1 main::addend#1 ] (  [ main::i#2 main::sum#1 main::addend#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , 
Potential registers zp[4]:7 [ main::sum#2 main::sum#1 ] : zp[4]:7 , 
Potential registers zp[4]:3 [ main::addend#2 main::addend#1 ] : zp[4]:3 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 33: zp[1]:2 [ main::i#2 main::i#1 ] 22: zp[4]:3 [ main::addend#2 main::addend#1 ] 19.33: zp[4]:7 [ main::sum#2 main::sum#1 ] 
Uplift Scope [] 

Uplifting [main] best 1301 combination zp[1]:2 [ main::i#2 main::i#1 ] zp[4]:3 [ main::addend#2 main::addend#1 ] zp[4]:7 [ main::sum#2 main::sum#1 ] 
Uplifting [] best 1301 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 1301 combination zp[1]:2 [ main::i#2 main::i#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test the 45GS02 CPU
// A program that uses 45GS02 instructions
  // Upstart
.cpu _45gs02
  // Commodore 64 PRG executable file
.file [name="cpu-45gs02.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label sum = 7
    .label addend = 3
    .label i = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::addend#2 = $1e240 [phi:main->main::@1#0] -- vduz1=vduc1 
    lda #<$1e240
    sta.z addend
    lda #>$1e240
    sta.z addend+1
    lda #<$1e240>>$10
    sta.z addend+2
    lda #>$1e240>>$10
    sta.z addend+3
    // [1] phi main::sum#2 = 0 [phi:main->main::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z sum
    lda #>0
    sta.z sum+1
    lda #<0>>$10
    sta.z sum+2
    lda #>0>>$10
    sta.z sum+3
    // [1] phi main::i#2 = 0 [phi:main->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [2] if(main::i#2<$64) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #$64
    bcc __b2
    jmp __b3
    // main::@3
  __b3:
    // [3] *SCREEN = main::sum#2 -- _deref_pduc1=vduz1 
    ldq.z sum
    stq SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
    // main::@2
  __b2:
    // [5] main::sum#1 = main::sum#2 + main::addend#2 -- vduz1=vduz1_plus_vduz2 
    clc
    ldq.z sum
    adcq.z addend
    stq.z sum
    // [6] main::addend#1 = main::addend#2 + main::i#2 -- vduz1=vduz1_plus_vbuz2 
    // will utilize ADQ/STQ
    lda.z i
    clc
    adc.z addend
    sta.z addend
    lda.z addend+1
    adc #0
    sta.z addend+1
    lda.z addend+2
    adc #0
    sta.z addend+2
    lda.z addend+3
    adc #0
    sta.z addend+3
    // [7] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi main::addend#2 = main::addend#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::sum#2 = main::sum#1 [phi:main::@2->main::@1#1] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#2] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant unsigned long *SCREEN = (char *) 1024
void main()
unsigned long main::addend
unsigned long main::addend#1 // addend zp[4]:3 11.0
unsigned long main::addend#2 // addend zp[4]:3 11.0
char main::i
char main::i#1 // i zp[1]:2 22.0
char main::i#2 // i zp[1]:2 11.0
unsigned long main::sum
unsigned long main::sum#1 // sum zp[4]:7 7.333333333333333
unsigned long main::sum#2 // sum zp[4]:7 12.0

zp[1]:2 [ main::i#2 main::i#1 ]
zp[4]:7 [ main::sum#2 main::sum#1 ]
zp[4]:3 [ main::addend#2 main::addend#1 ]


FINAL ASSEMBLER
Score: 1218

  // File Comments
// Test the 45GS02 CPU
// A program that uses 45GS02 instructions
  // Upstart
.cpu _45gs02
  // Commodore 64 PRG executable file
.file [name="cpu-45gs02.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label sum = 7
    .label addend = 3
    .label i = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::addend#2 = $1e240 [phi:main->main::@1#0] -- vduz1=vduc1 
    lda #<$1e240
    sta.z addend
    lda #>$1e240
    sta.z addend+1
    lda #<$1e240>>$10
    sta.z addend+2
    lda #>$1e240>>$10
    sta.z addend+3
    // [1] phi main::sum#2 = 0 [phi:main->main::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z sum
    sta.z sum+1
    lda #<0>>$10
    sta.z sum+2
    lda #>0>>$10
    sta.z sum+3
    // [1] phi main::i#2 = 0 [phi:main->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // main::@1
  __b1:
    // for(char i=0;i<100;i++)
    // [2] if(main::i#2<$64) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #$64
    bcc __b2
    // main::@3
    // *SCREEN = sum
    // [3] *SCREEN = main::sum#2 -- _deref_pduc1=vduz1 
    ldq.z sum
    stq SCREEN
    // main::@return
    // }
    // [4] return 
    rts
    // main::@2
  __b2:
    // sum += addend
    // [5] main::sum#1 = main::sum#2 + main::addend#2 -- vduz1=vduz1_plus_vduz2 
    clc
    ldq.z sum
    adcq.z addend
    stq.z sum
    // addend += i
    // [6] main::addend#1 = main::addend#2 + main::i#2 -- vduz1=vduz1_plus_vbuz2 
    // will utilize ADQ/STQ
    lda.z i
    clc
    adc.z addend
    sta.z addend
    lda.z addend+1
    adc #0
    sta.z addend+1
    lda.z addend+2
    adc #0
    sta.z addend+2
    lda.z addend+3
    adc #0
    sta.z addend+3
    // for(char i=0;i<100;i++)
    // [7] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi main::addend#2 = main::addend#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::sum#2 = main::sum#1 [phi:main::@2->main::@1#1] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#2] -- register_copy 
    jmp __b1
}
  // File Data

