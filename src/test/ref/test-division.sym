__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
int div16s(int dividend , int divisor)
int div16s::dividend
int div16s::dividend#0 // dividend zp[2]:6 551.0
int div16s::divisor
int div16s::divisor#0 // divisor zp[2]:20 551.0
int div16s::return
int div16s::return#0 // return zp[2]:14 367.33333333333337
int div16s::return#2 // return zp[2]:14 202.0
unsigned int div16u(unsigned int dividend , unsigned int divisor)
unsigned int div16u::dividend
unsigned int div16u::dividend#0 // dividend zp[2]:12 551.0
unsigned int div16u::divisor
unsigned int div16u::divisor#0 // divisor zp[2]:8 551.0
unsigned int div16u::return
unsigned int div16u::return#0 // return zp[2]:14 367.33333333333337
unsigned int div16u::return#2 // return zp[2]:14 202.0
signed char div8s(signed char dividend , signed char divisor)
signed char div8s::dividend
signed char div8s::dividend#0 // reg byte x 701.0
char div8s::dividendu
signed char div8s::dividendu#1 // reg byte a 1001.0
char div8s::dividendu#3 // reg byte x 429.0
char div8s::dividendu#7 // reg byte x 2002.0
char div8s::dividendu#8 // reg byte x 2002.0
signed char div8s::divisor
signed char div8s::divisor#0 // reg byte y 300.42857142857144
char div8s::divisoru
signed char div8s::divisoru#1 // reg byte y 500.5
char div8s::divisoru#3 // reg byte a 1501.5
char div8s::divisoru#4 // reg byte a 2002.0
char div8s::divisoru#5 // reg byte a 2002.0
char div8s::neg
char div8s::neg#2 // neg zp[1]:16 1001.0
char div8s::neg#3 // neg zp[1]:16 500.5
char div8s::neg#4 // neg zp[1]:16 500.5
char div8s::resultu
char div8s::resultu#0 // reg byte y 333.6666666666667
signed char div8s::return
signed char div8s::return#1 // reg byte a 2002.0
signed char div8s::return#2 // reg byte a 701.0
signed char div8s::return#3 // reg byte a 202.0
signed char div8s::return#6 // reg byte a 1001.0
char div8u(char dividend , char divisor)
char div8u::dividend
char div8u::dividend#0 // reg byte x 1001.0
char div8u::dividend#1 // reg byte x 101.0
char div8u::dividend#2 // reg byte x 11103.0
char div8u::divisor
char div8u::divisor#0 // reg byte a 2002.0
char div8u::divisor#1 // reg byte a 202.0
char div8u::divisor#2 // reg byte a 5551.5
char div8u::return
char div8u::return#0 // reg byte a 2775.75
char div8u::return#2 // reg byte a 2002.0
char div8u::return#3 // reg byte a 202.0
int divr16s(int dividend , int divisor , int rem)
int divr16s::dividend
int divr16s::dividend#0 // dividend zp[2]:12 7001.0
unsigned int divr16s::dividendu
int divr16s::dividendu#1 // dividendu zp[2]:12 10001.0
unsigned int divr16s::dividendu#3 // dividendu zp[2]:12 4286.142857142857
unsigned int divr16s::dividendu#7 // dividendu zp[2]:12 20002.0
unsigned int divr16s::dividendu#8 // dividendu zp[2]:12 20002.0
int divr16s::divisor
int divr16s::divisor#0 // divisor zp[2]:8 3000.4285714285716
unsigned int divr16s::divisoru
int divr16s::divisoru#1 // divisoru zp[2]:8 5000.5
unsigned int divr16s::divisoru#3 // divisoru zp[2]:8 15001.5
unsigned int divr16s::divisoru#4 // divisoru zp[2]:8 20002.0
unsigned int divr16s::divisoru#5 // divisoru zp[2]:8 20002.0
char divr16s::neg
char divr16s::neg#2 // reg byte y 10001.0
char divr16s::neg#3 // reg byte y 5000.5
char divr16s::neg#4 // reg byte y 5000.5
int divr16s::rem
unsigned int divr16s::remu
unsigned int divr16s::resultu
unsigned int divr16s::resultu#0 // resultu zp[2]:14 3333.6666666666665
int divr16s::return
int divr16s::return#1 // return zp[2]:14 20002.0
int divr16s::return#2 // return zp[2]:14 7001.0
int divr16s::return#3 // return zp[2]:14 2002.0
int divr16s::return#6 // return zp[2]:14 10001.0
unsigned int divr16u(unsigned int dividend , unsigned int divisor , unsigned int rem)
char divr16u::$1 // reg byte a 2.0000002E7
char divr16u::$2 // reg byte a 2.0000002E7
unsigned int divr16u::dividend
unsigned int divr16u::dividend#0 // dividend zp[2]:12 2500000.25
unsigned int divr16u::dividend#1 // dividend zp[2]:12 1001.0
unsigned int divr16u::dividend#2 // dividend zp[2]:12 10001.0
unsigned int divr16u::dividend#3 // dividend zp[2]:12 4300000.571428571
unsigned int divr16u::dividend#5 // dividend zp[2]:12 111003.0
unsigned int divr16u::divisor
unsigned int divr16u::divisor#0 // divisor zp[2]:8 2002.0
unsigned int divr16u::divisor#1 // divisor zp[2]:8 20002.0
unsigned int divr16u::divisor#6 // divisor zp[2]:8 1250687.75
char divr16u::i
char divr16u::i#1 // reg byte x 1.50000015E7
char divr16u::i#2 // reg byte x 1538461.6923076923
unsigned int divr16u::quotient
unsigned int divr16u::quotient#1 // quotient zp[2]:14 1.50000015E7
unsigned int divr16u::quotient#2 // quotient zp[2]:14 1.0000001E7
unsigned int divr16u::quotient#3 // quotient zp[2]:14 2500000.25
unsigned int divr16u::rem
unsigned int divr16u::rem#0 // rem zp[2]:10 7500000.75
unsigned int divr16u::rem#1 // rem zp[2]:10 2.0000002E7
unsigned int divr16u::rem#11 // rem zp[2]:10 1.0033334666666666E7
unsigned int divr16u::rem#2 // rem zp[2]:10 2.0000002E7
unsigned int divr16u::rem#5 // rem zp[2]:10 2.0000002E7
unsigned int divr16u::rem#6 // rem zp[2]:10 1.0000001E7
unsigned int divr16u::return
unsigned int divr16u::return#0 // return zp[2]:14 4287286.428571429
unsigned int divr16u::return#2 // return zp[2]:14 2002.0
unsigned int divr16u::return#3 // return zp[2]:14 20002.0
char divr8u(char dividend , char divisor , char rem)
char divr8u::$1 // reg byte a 2.0000002E7
char divr8u::dividend
char divr8u::dividend#0 // dividend zp[1]:17 36667.33333333333
char divr8u::dividend#1 // dividend zp[1]:17 2500000.25
char divr8u::dividend#2 // dividend zp[1]:17 5016667.333333333
char divr8u::divisor
char divr8u::divisor#0 // divisor zp[1]:22 1250625.1875
char divr8u::i
char divr8u::i#1 // reg byte x 1.50000015E7
char divr8u::i#2 // reg byte x 1666666.8333333333
char divr8u::quotient
char divr8u::quotient#1 // quotient zp[1]:19 1.50000015E7
char divr8u::quotient#2 // quotient zp[1]:19 1.0000001E7
char divr8u::quotient#3 // quotient zp[1]:19 2857143.1428571427
char divr8u::rem
char divr8u::rem#1 // reg byte y 1.0000001E7
char divr8u::rem#10 // reg byte y 1.0033334666666666E7
char divr8u::rem#2 // reg byte y 2.0000002E7
char divr8u::rem#3 // reg byte y 2.0000002E7
char divr8u::rem#4 // reg byte y 2.0000002E7
char divr8u::rem#5 // reg byte y 1.0000001E7
char divr8u::return
char divr8u::return#0 // reg byte a 20002.0
char divr8u::return#1 // return zp[1]:19 5001667.333333333
void main()
void * memset(void *str , char c , unsigned int num)
char memset::c
__constant char memset::c#0 = ' ' // c
char *memset::dst
char *memset::dst#1 // dst zp[2]:6 2002.0
char *memset::dst#2 // dst zp[2]:6 1334.6666666666667
char *memset::end
__constant char *memset::end#0 = (char *)memset::str#0+memset::num#0 // end
unsigned int memset::num
__constant unsigned int memset::num#0 = $3e8 // num
void *memset::return
void *memset::str
__constant void *memset::str#0 = (void *)print_screen#0 // str
void print_char(char ch)
char print_char::ch
char print_char::ch#0 // reg byte a 200002.0
char print_char::ch#5 // reg byte a 200002.0
char print_char::ch#6 // reg byte a 200002.0
char print_char::ch#7 // reg byte a 1300004.0
char *print_char_cursor
char *print_char_cursor#135 // print_char_cursor zp[2]:12 601.5
char *print_char_cursor#138 // print_char_cursor zp[2]:12 601.5
char *print_char_cursor#141 // print_char_cursor zp[2]:12 5703.0
char *print_char_cursor#142 // print_char_cursor zp[2]:12 40469.33333333333
char *print_char_cursor#144 // print_char_cursor zp[2]:12 22.444444444444443
char *print_char_cursor#160 // print_char_cursor zp[2]:12 202.0
char *print_char_cursor#164 // print_char_cursor zp[2]:12 202.0
char *print_char_cursor#169 // print_char_cursor zp[2]:12 202.0
char *print_char_cursor#18 // print_char_cursor zp[2]:12 14274.119565217392
char *print_char_cursor#187 // print_char_cursor zp[2]:12 202.0
char *print_char_cursor#85 // print_char_cursor zp[2]:12 1152004.5
void print_cls()
__constant const char print_hextab[] = "0123456789abcdef"z
char *print_line_cursor
char *print_line_cursor#0 // print_line_cursor zp[2]:4 2949.127450980392
char *print_line_cursor#21 // print_line_cursor zp[2]:4 201003.0
char *print_line_cursor#41 // print_line_cursor zp[2]:4 1405.0
char *print_line_cursor#43 // print_line_cursor zp[2]:4 8.782608695652174
void print_ln()
void print_schar(signed char b)
signed char print_schar::b
signed char print_schar::b#0 // b zp[1]:3 2002.0
signed char print_schar::b#1 // b zp[1]:3 101.0
signed char print_schar::b#10 // b zp[1]:3 567.8333333333334
signed char print_schar::b#2 // b zp[1]:3 202.0
signed char print_schar::b#3 // b zp[1]:3 202.0
signed char print_schar::b#4 // b zp[1]:3 202.0
signed char print_schar::b#7 // b zp[1]:3 2002.0
char *print_screen
__constant char *print_screen#0 = (char *) 1024 // print_screen
void print_sint(int w)
int print_sint::w
int print_sint::w#0 // w zp[2]:6 2002.0
int print_sint::w#1 // w zp[2]:6 101.0
int print_sint::w#10 // w zp[2]:6 567.8333333333334
int print_sint::w#2 // w zp[2]:6 202.0
int print_sint::w#3 // w zp[2]:6 202.0
int print_sint::w#4 // w zp[2]:6 202.0
int print_sint::w#7 // w zp[2]:6 2002.0
void print_str(char *str)
char *print_str::str
char *print_str::str#0 // str zp[2]:6 200002.0
char *print_str::str#13 // str zp[2]:6 100251.25
char *print_str::str#16 // str zp[2]:6 1001.0
void print_uchar(char b)
char print_uchar::$0 // reg byte a 200002.0
char print_uchar::$2 // reg byte a 200002.0
char print_uchar::b
char print_uchar::b#0 // b zp[1]:3 2002.0
char print_uchar::b#1 // b zp[1]:3 20002.0
char print_uchar::b#2 // b zp[1]:3 20002.0
char print_uchar::b#3 // b zp[1]:3 202.0
char print_uchar::b#4 // b zp[1]:3 202.0
char print_uchar::b#5 // b zp[1]:3 202.0
char print_uchar::b#6 // b zp[1]:3 202.0
char print_uchar::b#7 // b zp[1]:3 55352.25
void print_uint(unsigned int w)
unsigned int print_uint::w
unsigned int print_uint::w#0 // w zp[2]:6 2002.0
unsigned int print_uint::w#1 // w zp[2]:6 101.0
unsigned int print_uint::w#2 // w zp[2]:6 202.0
unsigned int print_uint::w#3 // w zp[2]:6 202.0
unsigned int print_uint::w#4 // w zp[2]:6 202.0
unsigned int print_uint::w#5 // w zp[2]:6 7135.666666666666
int rem16s
int rem16s#1 // rem16s zp[2]:10 10001.0
int rem16s#12 // rem16s zp[2]:10 913.7727272727273
int rem16s#38 // rem16s zp[2]:10 20002.0
unsigned int rem16u
unsigned int rem16u#0 // rem16u zp[2]:10 3707.4814814814818
signed char rem8s
signed char rem8s#1 // reg byte x 1001.0
signed char rem8s#10 // reg byte x 116.83333333333334
signed char rem8s#33 // reg byte x 2002.0
char rem8u
char rem8u#18 // reg byte x 3850.076923076923
__constant char str[4] = " / "
__constant char str1[4] = " = "
__constant char str2[2] = " "
void test_16s()
char test_16s::$11 // reg byte x 151.5
int test_16s::dividend
int test_16s::dividend#0 // dividend zp[2]:6 43.285714285714285
__constant int test_16s::dividends[] = { $7fff, $7fff, -$7fff, -$7fff, $7fff, -$7fff }
int test_16s::divisor
int test_16s::divisor#0 // divisor zp[2]:20 27.545454545454547
__constant int test_16s::divisors[] = { 5, -7, $b, -$d, -$11, $13 }
char test_16s::i
char test_16s::i#1 // i zp[1]:2 151.5
char test_16s::i#10 // i zp[1]:2 11.653846153846153
int test_16s::res
int test_16s::res#0 // res zp[2]:14 20.2
void test_16u()
char test_16u::$11 // reg byte x 151.5
unsigned int test_16u::dividend
unsigned int test_16u::dividend#0 // dividend zp[2]:6 43.285714285714285
__constant unsigned int test_16u::dividends[] = { $ffff, $ffff, $ffff, $ffff, $ffff, $ffff }
unsigned int test_16u::divisor
unsigned int test_16u::divisor#0 // divisor zp[2]:8 27.545454545454547
__constant unsigned int test_16u::divisors[] = { 5, 7, $b, $d, $11, $13 }
char test_16u::i
char test_16u::i#1 // i zp[1]:2 151.5
char test_16u::i#10 // i zp[1]:2 11.653846153846153
unsigned int test_16u::res
unsigned int test_16u::res#0 // res zp[2]:14 20.2
void test_8s()
signed char test_8s::dividend
signed char test_8s::dividend#0 // dividend zp[1]:3 43.285714285714285
__constant signed char test_8s::dividends[] = { $7f, -$7f, -$7f, $7f, $7f, $7f }
signed char test_8s::divisor
signed char test_8s::divisor#0 // divisor zp[1]:18 27.545454545454547
__constant signed char test_8s::divisors[] = { 5, 7, -$b, -$d, $11, $13 }
char test_8s::i
char test_8s::i#1 // i zp[1]:2 151.5
char test_8s::i#10 // i zp[1]:2 16.16
signed char test_8s::res
signed char test_8s::res#0 // res zp[1]:19 20.2
void test_8u()
char test_8u::dividend
char test_8u::dividend#0 // dividend zp[1]:3 43.285714285714285
__constant char test_8u::dividends[] = { $ff, $ff, $ff, $ff, $ff, $ff }
char test_8u::divisor
char test_8u::divisor#0 // divisor zp[1]:16 30.299999999999997
__constant char test_8u::divisors[] = { 5, 7, $b, $d, $11, $13 }
char test_8u::i
char test_8u::i#1 // i zp[1]:2 101.0
char test_8u::i#10 // i zp[1]:2 16.833333333333332
char test_8u::res
char test_8u::res#0 // res zp[1]:17 22.444444444444443

zp[1]:2 [ test_16s::i#10 test_16s::i#1 test_8s::i#10 test_8s::i#1 test_16u::i#10 test_16u::i#1 test_8u::i#10 test_8u::i#1 ]
reg byte x [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
reg byte a [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
zp[1]:3 [ print_uchar::b#7 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 print_uchar::b#5 print_uchar::b#6 print_schar::b#7 print_schar::b#0 print_schar::b#10 print_schar::b#1 print_schar::b#2 print_schar::b#3 print_schar::b#4 test_8u::dividend#0 test_8s::dividend#0 ]
zp[2]:4 [ print_line_cursor#21 print_line_cursor#41 print_line_cursor#43 print_line_cursor#0 ]
zp[2]:6 [ print_uint::w#5 print_uint::w#0 print_uint::w#1 print_uint::w#2 print_uint::w#3 print_uint::w#4 print_sint::w#7 print_sint::w#0 print_sint::w#10 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_sint::w#4 test_16u::dividend#0 test_16s::dividend#0 div16s::dividend#0 print_str::str#13 print_str::str#16 print_str::str#0 memset::dst#2 memset::dst#1 ]
reg byte x [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
reg byte a [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
reg byte a [ div8s::return#2 div8s::return#6 div8s::return#1 ]
reg byte x [ rem8s#10 rem8s#33 rem8s#1 ]
reg byte y [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
reg byte x [ divr8u::i#2 divr8u::i#1 ]
reg byte a [ print_char::ch#7 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
zp[2]:8 [ divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 div16u::divisor#0 divr16s::divisor#0 divr16s::divisoru#1 test_16u::divisor#0 ]
zp[2]:10 [ divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16s#12 rem16s#38 rem16s#1 rem16u#0 ]
zp[2]:12 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 div16u::dividend#0 divr16s::dividend#0 divr16s::dividendu#1 print_char_cursor#85 print_char_cursor#135 print_char_cursor#160 print_char_cursor#138 print_char_cursor#164 print_char_cursor#142 print_char_cursor#18 print_char_cursor#141 print_char_cursor#144 print_char_cursor#187 print_char_cursor#169 ]
zp[2]:14 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 divr16s::return#2 divr16s::return#6 divr16s::return#1 divr16s::resultu#0 divr16s::return#3 div16u::return#2 test_16u::res#0 div16u::return#0 div16s::return#2 test_16s::res#0 div16s::return#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte y [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
zp[1]:16 [ test_8u::divisor#0 div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
reg byte a [ div8u::return#3 ]
zp[1]:17 [ test_8u::res#0 divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
reg byte x [ test_16u::$11 ]
zp[1]:18 [ test_8s::divisor#0 ]
reg byte x [ div8s::dividend#0 ]
reg byte y [ div8s::divisor#0 ]
reg byte a [ div8s::return#3 ]
zp[1]:19 [ test_8s::res#0 divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
reg byte x [ test_16s::$11 ]
zp[2]:20 [ test_16s::divisor#0 div16s::divisor#0 ]
zp[1]:22 [ divr8u::divisor#0 ]
reg byte a [ divr8u::return#0 ]
reg byte a [ div8u::return#0 ]
reg byte a [ print_uchar::$0 ]
reg byte a [ print_uchar::$2 ]
reg byte a [ div8u::return#2 ]
reg byte y [ div8s::resultu#0 ]
reg byte y [ div8s::divisoru#1 ]
reg byte a [ div8s::dividendu#1 ]
reg byte a [ divr8u::$1 ]
reg byte x [ rem8u#18 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
