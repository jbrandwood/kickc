Fixing struct type size struct printf_buffer_number to 12
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Added struct type cast to parameter value list call printf_uchar *((struct $0) stars.star_x + (byte) main::i) (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) DECIMAL } 
Added struct type cast to parameter value list call printf_uchar *((struct $0) stars.star_y + (byte) main::i) (struct printf_format_number){ (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (const byte) DECIMAL } 
Eliminating unused variable with no statement (void~) main::$2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(byte()) toupper((byte) toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  (byte) toupper::ch#1 ← phi( strupr::@2/(byte) toupper::ch#0 )
  (bool~) toupper::$0 ← (byte) toupper::ch#1 >= (byte) 'a'
  (bool~) toupper::$1 ← (byte) toupper::ch#1 <= (byte) 'z'
  (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
  if((bool~) toupper::$2) goto toupper::@1
  to:toupper::@2
toupper::@1: scope:[toupper]  from toupper
  (byte) toupper::ch#2 ← phi( toupper/(byte) toupper::ch#1 )
  (byte~) toupper::$3 ← (byte) toupper::ch#2 + (byte) 'A'-(byte) 'a'
  (byte) toupper::return#0 ← (byte~) toupper::$3
  to:toupper::@return
toupper::@2: scope:[toupper]  from toupper
  (byte) toupper::ch#3 ← phi( toupper/(byte) toupper::ch#1 )
  (byte) toupper::return#1 ← (byte) toupper::ch#3
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper::@1 toupper::@2
  (byte) toupper::return#4 ← phi( toupper::@1/(byte) toupper::return#0 toupper::@2/(byte) toupper::return#1 )
  (byte) toupper::return#2 ← (byte) toupper::return#4
  return 
  to:@return

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@3 cscroll::@4
  (word) memcpy::num#2 ← phi( cscroll::@3/(word) memcpy::num#0 cscroll::@4/(word) memcpy::num#1 )
  (void*) memcpy::destination#2 ← phi( cscroll::@3/(void*) memcpy::destination#0 cscroll::@4/(void*) memcpy::destination#1 )
  (void*) memcpy::source#2 ← phi( cscroll::@3/(void*) memcpy::source#0 cscroll::@4/(void*) memcpy::source#1 )
  (byte*) memcpy::src#0 ← ((byte*)) (void*) memcpy::source#2
  (byte*) memcpy::dst#0 ← ((byte*)) (void*) memcpy::destination#2
  (byte*~) memcpy::$2 ← (byte*)(void*) memcpy::source#2
  (byte*~) memcpy::$0 ← (byte*~) memcpy::$2 + (word) memcpy::num#2
  (byte*) memcpy::src_end#0 ← (byte*~) memcpy::$0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  (void*) memcpy::destination#4 ← phi( memcpy/(void*) memcpy::destination#2 memcpy::@2/(void*) memcpy::destination#5 )
  (byte*) memcpy::dst#3 ← phi( memcpy/(byte*) memcpy::dst#0 memcpy::@2/(byte*) memcpy::dst#1 )
  (byte*) memcpy::src_end#1 ← phi( memcpy/(byte*) memcpy::src_end#0 memcpy::@2/(byte*) memcpy::src_end#2 )
  (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#0 memcpy::@2/(byte*) memcpy::src#1 )
  (bool~) memcpy::$1 ← (byte*) memcpy::src#2 != (byte*) memcpy::src_end#1
  if((bool~) memcpy::$1) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#5 ← phi( memcpy::@1/(void*) memcpy::destination#4 )
  (byte*) memcpy::src_end#2 ← phi( memcpy::@1/(byte*) memcpy::src_end#1 )
  (byte*) memcpy::dst#2 ← phi( memcpy::@1/(byte*) memcpy::dst#3 )
  (byte*) memcpy::src#3 ← phi( memcpy::@1/(byte*) memcpy::src#2 )
  *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#3)
  (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#3 ← phi( memcpy::@1/(void*) memcpy::destination#4 )
  (void*) memcpy::return#0 ← (void*) memcpy::destination#3
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  (void*) memcpy::return#4 ← phi( memcpy::@3/(void*) memcpy::return#0 )
  (void*) memcpy::return#1 ← (void*) memcpy::return#4
  return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@5 cscroll::@6
  (byte) memset::c#5 ← phi( cscroll::@5/(byte) memset::c#0 cscroll::@6/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( cscroll::@5/(void*) memset::str#0 cscroll::@6/(void*) memset::str#1 )
  (word) memset::num#2 ← phi( cscroll::@5/(word) memset::num#0 cscroll::@6/(word) memset::num#1 )
  (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#4 memset::@3/(void*) memset::str#5 )
  (void*) memset::return#0 ← (void*) memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#4 ← phi( memset/(byte) memset::c#5 )
  (word) memset::num#3 ← phi( memset/(word) memset::num#2 )
  (void*) memset::str#3 ← phi( memset/(void*) memset::str#4 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#3
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#3
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#3 ← phi( memset::@2/(byte) memset::c#4 memset::@4/(byte) memset::c#2 )
  (void*) memset::str#5 ← phi( memset::@2/(void*) memset::str#3 memset::@4/(void*) memset::str#6 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#6 ← phi( memset::@3/(void*) memset::str#5 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#2 ← phi( memset::@3/(byte) memset::c#3 )
  *((byte*) memset::dst#3) ← (byte) memset::c#2
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#4 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#4
  return 
  to:@return

(byte*()) strupr((byte*) strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  (byte*) strupr::str#1 ← phi( printf_number_buffer::@11/(byte*) strupr::str#0 )
  (byte*) strupr::src#0 ← (byte*) strupr::str#1
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@4
  (byte*) strupr::str#3 ← phi( strupr/(byte*) strupr::str#1 strupr::@4/(byte*) strupr::str#4 )
  (byte*) strupr::src#2 ← phi( strupr/(byte*) strupr::src#0 strupr::@4/(byte*) strupr::src#1 )
  (bool~) strupr::$1 ← (number) 0 != *((byte*) strupr::src#2)
  if((bool~) strupr::$1) goto strupr::@2
  to:strupr::@3
strupr::@2: scope:[strupr]  from strupr::@1
  (byte*) strupr::str#5 ← phi( strupr::@1/(byte*) strupr::str#3 )
  (byte*) strupr::src#3 ← phi( strupr::@1/(byte*) strupr::src#2 )
  (byte) toupper::ch#0 ← *((byte*) strupr::src#3)
  call toupper 
  (byte) toupper::return#3 ← (byte) toupper::return#2
  to:strupr::@4
strupr::@4: scope:[strupr]  from strupr::@2
  (byte*) strupr::str#4 ← phi( strupr::@2/(byte*) strupr::str#5 )
  (byte*) strupr::src#4 ← phi( strupr::@2/(byte*) strupr::src#3 )
  (byte) toupper::return#5 ← phi( strupr::@2/(byte) toupper::return#3 )
  (byte~) strupr::$0 ← (byte) toupper::return#5
  *((byte*) strupr::src#4) ← (byte~) strupr::$0
  (byte*) strupr::src#1 ← ++ (byte*) strupr::src#4
  to:strupr::@1
strupr::@3: scope:[strupr]  from strupr::@1
  (byte*) strupr::str#2 ← phi( strupr::@1/(byte*) strupr::str#3 )
  (byte*) strupr::return#0 ← (byte*) strupr::str#2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@3
  (byte*) strupr::return#3 ← phi( strupr::@3/(byte*) strupr::return#0 )
  (byte*) strupr::return#1 ← (byte*) strupr::return#3
  return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  (byte*) strlen::str#4 ← phi( printf_number_buffer::@6/(byte*) strlen::str#1 )
  (word) strlen::len#0 ← (word) 0
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  (word) strlen::len#4 ← phi( strlen/(word) strlen::len#0 strlen::@2/(word) strlen::len#1 )
  (byte*) strlen::str#2 ← phi( strlen/(byte*) strlen::str#4 strlen::@2/(byte*) strlen::str#0 )
  (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#2)
  if((bool~) strlen::$0) goto strlen::@2
  to:strlen::@3
strlen::@2: scope:[strlen]  from strlen::@1
  (byte*) strlen::str#3 ← phi( strlen::@1/(byte*) strlen::str#2 )
  (word) strlen::len#2 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::len#1 ← ++ (word) strlen::len#2
  (byte*) strlen::str#0 ← ++ (byte*) strlen::str#3
  to:strlen::@1
strlen::@3: scope:[strlen]  from strlen::@1
  (word) strlen::len#3 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::return#0 ← (word) strlen::len#3
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@3
  (word) strlen::return#3 ← phi( strlen::@3/(word) strlen::return#0 )
  (word) strlen::return#1 ← (word) strlen::return#3
  return 
  to:@return

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@3
  (byte*) uctoa::buffer#21 ← phi( printf_uchar::@3/(byte*) uctoa::buffer#5 )
  (byte) uctoa::value#12 ← phi( printf_uchar::@3/(byte) uctoa::value#1 )
  (byte) uctoa::radix#1 ← phi( printf_uchar::@3/(byte) uctoa::radix#0 )
  (byte) uctoa::max_digits#0 ← (byte) 0
  (byte*) uctoa::digit_values#0 ← (byte*) 0
  (bool~) uctoa::$0 ← (byte) uctoa::radix#1 == (const byte) DECIMAL
  if((bool~) uctoa::$0) goto uctoa::@1
  to:uctoa::@6
uctoa::@1: scope:[uctoa]  from uctoa
  (byte*) uctoa::buffer#17 ← phi( uctoa/(byte*) uctoa::buffer#21 )
  (byte) uctoa::value#8 ← phi( uctoa/(byte) uctoa::value#12 )
  (byte) uctoa::max_digits#1 ← (number) 3
  (byte*) uctoa::digit_values#1 ← (const byte*) RADIX_DECIMAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@6: scope:[uctoa]  from uctoa
  (byte) uctoa::value#13 ← phi( uctoa/(byte) uctoa::value#12 )
  (byte*) uctoa::buffer#16 ← phi( uctoa/(byte*) uctoa::buffer#21 )
  (byte) uctoa::radix#2 ← phi( uctoa/(byte) uctoa::radix#1 )
  (bool~) uctoa::$1 ← (byte) uctoa::radix#2 == (const byte) HEXADECIMAL
  if((bool~) uctoa::$1) goto uctoa::@2
  to:uctoa::@7
uctoa::@2: scope:[uctoa]  from uctoa::@6
  (byte*) uctoa::buffer#18 ← phi( uctoa::@6/(byte*) uctoa::buffer#16 )
  (byte) uctoa::value#9 ← phi( uctoa::@6/(byte) uctoa::value#13 )
  (byte) uctoa::max_digits#2 ← (number) 2
  (byte*) uctoa::digit_values#2 ← (const byte*) RADIX_HEXADECIMAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@7: scope:[uctoa]  from uctoa::@6
  (byte) uctoa::value#14 ← phi( uctoa::@6/(byte) uctoa::value#13 )
  (byte*) uctoa::buffer#13 ← phi( uctoa::@6/(byte*) uctoa::buffer#16 )
  (byte) uctoa::radix#3 ← phi( uctoa::@6/(byte) uctoa::radix#2 )
  (bool~) uctoa::$2 ← (byte) uctoa::radix#3 == (const byte) OCTAL
  if((bool~) uctoa::$2) goto uctoa::@3
  to:uctoa::@8
uctoa::@3: scope:[uctoa]  from uctoa::@7
  (byte*) uctoa::buffer#19 ← phi( uctoa::@7/(byte*) uctoa::buffer#13 )
  (byte) uctoa::value#10 ← phi( uctoa::@7/(byte) uctoa::value#14 )
  (byte) uctoa::max_digits#3 ← (number) 3
  (byte*) uctoa::digit_values#3 ← (const byte*) RADIX_OCTAL_VALUES_CHAR
  to:uctoa::@5
uctoa::@8: scope:[uctoa]  from uctoa::@7
  (byte) uctoa::value#15 ← phi( uctoa::@7/(byte) uctoa::value#14 )
  (byte*) uctoa::buffer#10 ← phi( uctoa::@7/(byte*) uctoa::buffer#13 )
  (byte) uctoa::radix#4 ← phi( uctoa::@7/(byte) uctoa::radix#3 )
  (bool~) uctoa::$3 ← (byte) uctoa::radix#4 == (const byte) BINARY
  if((bool~) uctoa::$3) goto uctoa::@4
  to:uctoa::@9
uctoa::@4: scope:[uctoa]  from uctoa::@8
  (byte*) uctoa::buffer#20 ← phi( uctoa::@8/(byte*) uctoa::buffer#10 )
  (byte) uctoa::value#11 ← phi( uctoa::@8/(byte) uctoa::value#15 )
  (byte) uctoa::max_digits#4 ← (number) 8
  (byte*) uctoa::digit_values#4 ← (const byte*) RADIX_BINARY_VALUES_CHAR
  to:uctoa::@5
uctoa::@9: scope:[uctoa]  from uctoa::@8
  (byte*) uctoa::buffer#6 ← phi( uctoa::@8/(byte*) uctoa::buffer#10 )
  *((byte*) uctoa::buffer#6) ← (byte) 'e'
  (byte*) uctoa::buffer#0 ← ++ (byte*) uctoa::buffer#6
  *((byte*) uctoa::buffer#0) ← (byte) 'r'
  (byte*) uctoa::buffer#1 ← ++ (byte*) uctoa::buffer#0
  *((byte*) uctoa::buffer#1) ← (byte) 'r'
  (byte*) uctoa::buffer#2 ← ++ (byte*) uctoa::buffer#1
  *((byte*) uctoa::buffer#2) ← (number) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@12 uctoa::@9
  return 
  to:@return
uctoa::@5: scope:[uctoa]  from uctoa::@1 uctoa::@2 uctoa::@3 uctoa::@4
  (byte*) uctoa::buffer#15 ← phi( uctoa::@1/(byte*) uctoa::buffer#17 uctoa::@2/(byte*) uctoa::buffer#18 uctoa::@3/(byte*) uctoa::buffer#19 uctoa::@4/(byte*) uctoa::buffer#20 )
  (byte) uctoa::value#7 ← phi( uctoa::@1/(byte) uctoa::value#8 uctoa::@2/(byte) uctoa::value#9 uctoa::@3/(byte) uctoa::value#10 uctoa::@4/(byte) uctoa::value#11 )
  (byte*) uctoa::digit_values#8 ← phi( uctoa::@1/(byte*) uctoa::digit_values#1 uctoa::@2/(byte*) uctoa::digit_values#2 uctoa::@3/(byte*) uctoa::digit_values#3 uctoa::@4/(byte*) uctoa::digit_values#4 )
  (byte) uctoa::max_digits#7 ← phi( uctoa::@1/(byte) uctoa::max_digits#1 uctoa::@2/(byte) uctoa::max_digits#2 uctoa::@3/(byte) uctoa::max_digits#3 uctoa::@4/(byte) uctoa::max_digits#4 )
  (byte) uctoa::started#0 ← (byte) 0
  (byte) uctoa::digit#0 ← (byte) 0
  to:uctoa::@10
uctoa::@10: scope:[uctoa]  from uctoa::@13 uctoa::@5
  (byte*) uctoa::buffer#11 ← phi( uctoa::@13/(byte*) uctoa::buffer#14 uctoa::@5/(byte*) uctoa::buffer#15 )
  (byte) uctoa::started#3 ← phi( uctoa::@13/(byte) uctoa::started#4 uctoa::@5/(byte) uctoa::started#0 )
  (byte) uctoa::value#5 ← phi( uctoa::@13/(byte) uctoa::value#6 uctoa::@5/(byte) uctoa::value#7 )
  (byte*) uctoa::digit_values#6 ← phi( uctoa::@13/(byte*) uctoa::digit_values#7 uctoa::@5/(byte*) uctoa::digit_values#8 )
  (byte) uctoa::digit#2 ← phi( uctoa::@13/(byte) uctoa::digit#1 uctoa::@5/(byte) uctoa::digit#0 )
  (byte) uctoa::max_digits#5 ← phi( uctoa::@13/(byte) uctoa::max_digits#6 uctoa::@5/(byte) uctoa::max_digits#7 )
  (number~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (number) 1
  (bool~) uctoa::$5 ← (byte) uctoa::digit#2 < (number~) uctoa::$4
  if((bool~) uctoa::$5) goto uctoa::@11
  to:uctoa::@12
uctoa::@11: scope:[uctoa]  from uctoa::@10
  (byte) uctoa::max_digits#8 ← phi( uctoa::@10/(byte) uctoa::max_digits#5 )
  (byte*) uctoa::buffer#12 ← phi( uctoa::@10/(byte*) uctoa::buffer#11 )
  (byte) uctoa::started#2 ← phi( uctoa::@10/(byte) uctoa::started#3 )
  (byte) uctoa::value#2 ← phi( uctoa::@10/(byte) uctoa::value#5 )
  (byte) uctoa::digit#3 ← phi( uctoa::@10/(byte) uctoa::digit#2 )
  (byte*) uctoa::digit_values#5 ← phi( uctoa::@10/(byte*) uctoa::digit_values#6 )
  (byte) uctoa::digit_value#0 ← *((byte*) uctoa::digit_values#5 + (byte) uctoa::digit#3)
  (bool~) uctoa::$6 ← (byte) uctoa::value#2 >= (byte) uctoa::digit_value#0
  (bool~) uctoa::$7 ← (byte) uctoa::started#2 || (bool~) uctoa::$6
  (bool~) uctoa::$8 ← ! (bool~) uctoa::$7
  if((bool~) uctoa::$8) goto uctoa::@13
  to:uctoa::@14
uctoa::@12: scope:[uctoa]  from uctoa::@10
  (byte*) uctoa::buffer#7 ← phi( uctoa::@10/(byte*) uctoa::buffer#11 )
  (byte) uctoa::value#3 ← phi( uctoa::@10/(byte) uctoa::value#5 )
  (byte~) uctoa::$10 ← (byte)(byte) uctoa::value#3
  *((byte*) uctoa::buffer#7) ← *((const byte*) DIGITS + (byte~) uctoa::$10)
  (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#7
  *((byte*) uctoa::buffer#3) ← (number) 0
  to:uctoa::@return
uctoa::@13: scope:[uctoa]  from uctoa::@11 uctoa::@15
  (byte*) uctoa::buffer#14 ← phi( uctoa::@11/(byte*) uctoa::buffer#12 uctoa::@15/(byte*) uctoa::buffer#4 )
  (byte) uctoa::started#4 ← phi( uctoa::@11/(byte) uctoa::started#2 uctoa::@15/(byte) uctoa::started#1 )
  (byte) uctoa::value#6 ← phi( uctoa::@11/(byte) uctoa::value#2 uctoa::@15/(byte) uctoa::value#0 )
  (byte*) uctoa::digit_values#7 ← phi( uctoa::@11/(byte*) uctoa::digit_values#5 uctoa::@15/(byte*) uctoa::digit_values#9 )
  (byte) uctoa::max_digits#6 ← phi( uctoa::@11/(byte) uctoa::max_digits#8 uctoa::@15/(byte) uctoa::max_digits#9 )
  (byte) uctoa::digit#4 ← phi( uctoa::@11/(byte) uctoa::digit#3 uctoa::@15/(byte) uctoa::digit#5 )
  (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#4
  to:uctoa::@10
uctoa::@14: scope:[uctoa]  from uctoa::@11
  (byte*) uctoa::digit_values#10 ← phi( uctoa::@11/(byte*) uctoa::digit_values#5 )
  (byte) uctoa::max_digits#10 ← phi( uctoa::@11/(byte) uctoa::max_digits#8 )
  (byte) uctoa::digit#6 ← phi( uctoa::@11/(byte) uctoa::digit#3 )
  (byte) uctoa::digit_value#1 ← phi( uctoa::@11/(byte) uctoa::digit_value#0 )
  (byte) uctoa::value#4 ← phi( uctoa::@11/(byte) uctoa::value#2 )
  (byte*) uctoa::buffer#8 ← phi( uctoa::@11/(byte*) uctoa::buffer#12 )
  (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#8
  (byte) uctoa_append::value#0 ← (byte) uctoa::value#4
  (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#1
  call uctoa_append 
  (byte) uctoa_append::return#0 ← (byte) uctoa_append::return#2
  to:uctoa::@15
uctoa::@15: scope:[uctoa]  from uctoa::@14
  (byte*) uctoa::digit_values#9 ← phi( uctoa::@14/(byte*) uctoa::digit_values#10 )
  (byte) uctoa::max_digits#9 ← phi( uctoa::@14/(byte) uctoa::max_digits#10 )
  (byte) uctoa::digit#5 ← phi( uctoa::@14/(byte) uctoa::digit#6 )
  (byte*) uctoa::buffer#9 ← phi( uctoa::@14/(byte*) uctoa::buffer#8 )
  (byte) uctoa_append::return#3 ← phi( uctoa::@14/(byte) uctoa_append::return#0 )
  (byte~) uctoa::$9 ← (byte) uctoa_append::return#3
  (byte) uctoa::value#0 ← (byte~) uctoa::$9
  (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#9
  (byte) uctoa::started#1 ← (number) 1
  to:uctoa::@13

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@14
  (byte*) uctoa_append::buffer#3 ← phi( uctoa::@14/(byte*) uctoa_append::buffer#0 )
  (byte) uctoa_append::sub#3 ← phi( uctoa::@14/(byte) uctoa_append::sub#0 )
  (byte) uctoa_append::value#5 ← phi( uctoa::@14/(byte) uctoa_append::value#0 )
  (byte) uctoa_append::digit#0 ← (byte) 0
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  (byte*) uctoa_append::buffer#2 ← phi( uctoa_append/(byte*) uctoa_append::buffer#3 uctoa_append::@2/(byte*) uctoa_append::buffer#4 )
  (byte) uctoa_append::digit#4 ← phi( uctoa_append/(byte) uctoa_append::digit#0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  (byte) uctoa_append::sub#1 ← phi( uctoa_append/(byte) uctoa_append::sub#3 uctoa_append::@2/(byte) uctoa_append::sub#2 )
  (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#5 uctoa_append::@2/(byte) uctoa_append::value#1 )
  (bool~) uctoa_append::$0 ← (byte) uctoa_append::value#2 >= (byte) uctoa_append::sub#1
  if((bool~) uctoa_append::$0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  (byte*) uctoa_append::buffer#4 ← phi( uctoa_append::@1/(byte*) uctoa_append::buffer#2 )
  (byte) uctoa_append::sub#2 ← phi( uctoa_append::@1/(byte) uctoa_append::sub#1 )
  (byte) uctoa_append::value#3 ← phi( uctoa_append::@1/(byte) uctoa_append::value#2 )
  (byte) uctoa_append::digit#2 ← phi( uctoa_append::@1/(byte) uctoa_append::digit#4 )
  (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#3 - (byte) uctoa_append::sub#2
  to:uctoa_append::@1
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  (byte) uctoa_append::value#4 ← phi( uctoa_append::@1/(byte) uctoa_append::value#2 )
  (byte*) uctoa_append::buffer#1 ← phi( uctoa_append::@1/(byte*) uctoa_append::buffer#2 )
  (byte) uctoa_append::digit#3 ← phi( uctoa_append::@1/(byte) uctoa_append::digit#4 )
  *((byte*) uctoa_append::buffer#1) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#3)
  (byte) uctoa_append::return#1 ← (byte) uctoa_append::value#4
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  (byte) uctoa_append::return#4 ← phi( uctoa_append::@3/(byte) uctoa_append::return#1 )
  (byte) uctoa_append::return#2 ← (byte) uctoa_append::return#4
  return 
  to:@return
@1: scope:[]  from @begin
  (byte) conio_cursor_x ← (byte) 0
  (byte) conio_cursor_y ← (byte) 0
  (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  (byte) conio_textcolor ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  (byte) conio_scroll_enable ← (byte) 1
  to:@2

(void()) clrscr()
clrscr: scope:[clrscr]  from main
  (byte*) clrscr::line_text#0 ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) clrscr::line_cols#0 ← (const nomodify byte*) CONIO_SCREEN_COLORS
  (byte) clrscr::l#0 ← (byte) 0
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@6
  (byte*) clrscr::line_cols#6 ← phi( clrscr/(byte*) clrscr::line_cols#0 clrscr::@6/(byte*) clrscr::line_cols#1 )
  (byte*) clrscr::line_text#6 ← phi( clrscr/(byte*) clrscr::line_text#0 clrscr::@6/(byte*) clrscr::line_text#1 )
  (byte) clrscr::l#2 ← phi( clrscr/(byte) clrscr::l#0 clrscr::@6/(byte) clrscr::l#1 )
  (bool~) clrscr::$0 ← (byte) clrscr::l#2 < (number) $19
  if((bool~) clrscr::$0) goto clrscr::@2
  to:clrscr::@3
clrscr::@2: scope:[clrscr]  from clrscr::@1
  (byte) clrscr::l#5 ← phi( clrscr::@1/(byte) clrscr::l#2 )
  (byte*) clrscr::line_cols#5 ← phi( clrscr::@1/(byte*) clrscr::line_cols#6 )
  (byte*) clrscr::line_text#5 ← phi( clrscr::@1/(byte*) clrscr::line_text#6 )
  (byte) clrscr::c#0 ← (byte) 0
  to:clrscr::@4
clrscr::@3: scope:[clrscr]  from clrscr::@1
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← (number) 0
  (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:clrscr::@return
clrscr::@4: scope:[clrscr]  from clrscr::@2 clrscr::@5
  (byte) clrscr::l#4 ← phi( clrscr::@2/(byte) clrscr::l#5 clrscr::@5/(byte) clrscr::l#6 )
  (byte*) clrscr::line_cols#4 ← phi( clrscr::@2/(byte*) clrscr::line_cols#5 clrscr::@5/(byte*) clrscr::line_cols#2 )
  (byte*) clrscr::line_text#4 ← phi( clrscr::@2/(byte*) clrscr::line_text#5 clrscr::@5/(byte*) clrscr::line_text#2 )
  (byte) clrscr::c#2 ← phi( clrscr::@2/(byte) clrscr::c#0 clrscr::@5/(byte) clrscr::c#1 )
  (bool~) clrscr::$1 ← (byte) clrscr::c#2 < (number) $28
  if((bool~) clrscr::$1) goto clrscr::@5
  to:clrscr::@6
clrscr::@5: scope:[clrscr]  from clrscr::@4
  (byte) clrscr::l#6 ← phi( clrscr::@4/(byte) clrscr::l#4 )
  (byte*) clrscr::line_cols#2 ← phi( clrscr::@4/(byte*) clrscr::line_cols#4 )
  (byte) clrscr::c#3 ← phi( clrscr::@4/(byte) clrscr::c#2 )
  (byte*) clrscr::line_text#2 ← phi( clrscr::@4/(byte*) clrscr::line_text#4 )
  *((byte*) clrscr::line_text#2 + (byte) clrscr::c#3) ← (byte) ' '
  *((byte*) clrscr::line_cols#2 + (byte) clrscr::c#3) ← (byte) conio_textcolor
  (byte) clrscr::c#1 ← ++ (byte) clrscr::c#3
  to:clrscr::@4
clrscr::@6: scope:[clrscr]  from clrscr::@4
  (byte) clrscr::l#3 ← phi( clrscr::@4/(byte) clrscr::l#4 )
  (byte*) clrscr::line_cols#3 ← phi( clrscr::@4/(byte*) clrscr::line_cols#4 )
  (byte*) clrscr::line_text#3 ← phi( clrscr::@4/(byte*) clrscr::line_text#4 )
  (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#3 + (number) $28
  (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#3 + (number) $28
  (byte) clrscr::l#1 ← ++ (byte) clrscr::l#3
  to:clrscr::@1
clrscr::@return: scope:[clrscr]  from clrscr::@3
  return 
  to:@return

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from cscroll::@2
  (byte) gotoxy::x#4 ← phi( cscroll::@2/(byte) gotoxy::x#1 )
  (byte) gotoxy::y#2 ← phi( cscroll::@2/(byte) gotoxy::y#1 )
  (bool~) gotoxy::$0 ← (byte) gotoxy::y#2 > (number) $19
  (bool~) gotoxy::$1 ← ! (bool~) gotoxy::$0
  if((bool~) gotoxy::$1) goto gotoxy::@1
  to:gotoxy::@3
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  (byte) gotoxy::y#4 ← phi( gotoxy/(byte) gotoxy::y#2 gotoxy::@3/(byte) gotoxy::y#0 )
  (byte) gotoxy::x#2 ← phi( gotoxy/(byte) gotoxy::x#4 gotoxy::@3/(byte) gotoxy::x#5 )
  (bool~) gotoxy::$2 ← (byte) gotoxy::x#2 >= (number) $28
  (bool~) gotoxy::$3 ← ! (bool~) gotoxy::$2
  if((bool~) gotoxy::$3) goto gotoxy::@2
  to:gotoxy::@4
gotoxy::@3: scope:[gotoxy]  from gotoxy
  (byte) gotoxy::x#5 ← phi( gotoxy/(byte) gotoxy::x#4 )
  (byte) gotoxy::y#0 ← (number) 0
  to:gotoxy::@1
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  (byte) gotoxy::y#3 ← phi( gotoxy::@1/(byte) gotoxy::y#4 gotoxy::@4/(byte) gotoxy::y#5 )
  (byte) gotoxy::x#3 ← phi( gotoxy::@1/(byte) gotoxy::x#2 gotoxy::@4/(byte) gotoxy::x#0 )
  (byte) conio_cursor_x ← (byte) gotoxy::x#3
  (byte) conio_cursor_y ← (byte) gotoxy::y#3
  (word~) gotoxy::$8 ← (word)(byte) gotoxy::y#3
  (number~) gotoxy::$4 ← (word~) gotoxy::$8 * (number) $28
  (number~) gotoxy::$5 ← (number~) gotoxy::$4 + (byte) gotoxy::x#3
  (word) gotoxy::offset#0 ← (number~) gotoxy::$5
  (byte*~) gotoxy::$6 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0
  (byte*) conio_cursor_text ← (byte*~) gotoxy::$6
  (byte*~) gotoxy::$7 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0
  (byte*) conio_cursor_color ← (byte*~) gotoxy::$7
  to:gotoxy::@return
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  (byte) gotoxy::y#5 ← phi( gotoxy::@1/(byte) gotoxy::y#4 )
  (byte) gotoxy::x#0 ← (number) 0
  to:gotoxy::@2
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  return 
  to:@return

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@9 printf_padding::@2
  (byte) cputc::c#3 ← phi( cputs::@2/(byte) cputc::c#0 printf_number_buffer::@9/(byte) cputc::c#2 printf_padding::@2/(byte) cputc::c#1 )
  (bool~) cputc::$0 ← (byte) cputc::c#3 == (byte) '
'
  if((bool~) cputc::$0) goto cputc::@1
  to:cputc::@2
cputc::@1: scope:[cputc]  from cputc
  call cputln 
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@1
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc
  (byte) cputc::c#4 ← phi( cputc/(byte) cputc::c#3 )
  *((byte*) conio_cursor_text) ← (byte) cputc::c#4
  (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text
  *((byte*) conio_cursor_color) ← (byte) conio_textcolor
  (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color
  (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  (bool~) cputc::$1 ← (byte) conio_cursor_x == (number) $28
  (bool~) cputc::$2 ← ! (bool~) cputc::$1
  if((bool~) cputc::$2) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  call cscroll 
  to:cputc::@5
cputc::@5: scope:[cputc]  from cputc::@3
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@2 cputc::@4 cputc::@5
  return 
  to:@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1
  (number~) cputln::$0 ← (number) $28 - (byte) conio_cursor_x
  (word) cputln::ln_offset#0 ← (number~) cputln::$0
  (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0
  (byte*) conio_cursor_text ← (byte*~) cputln::$1
  (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0
  (byte*) conio_cursor_color ← (byte*~) cputln::$2
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  call cscroll 
  to:cputln::@1
cputln::@1: scope:[cputln]  from cputln
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln::@1
  return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputc::@3 cputln
  (bool~) cscroll::$0 ← (byte) conio_cursor_y == (number) $19
  (bool~) cscroll::$1 ← ! (bool~) cscroll::$0
  if((bool~) cscroll::$1) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  (bool~) cscroll::$9 ← (number) 0 != (byte) conio_scroll_enable
  if((bool~) cscroll::$9) goto cscroll::@3
  to:cscroll::@2
cscroll::@3: scope:[cscroll]  from cscroll::@1
  (void*) memcpy::destination#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT
  (void*) memcpy::source#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $28
  (word) memcpy::num#0 ← (number) $19*(number) $28-(number) $28
  call memcpy 
  (void*) memcpy::return#2 ← (void*) memcpy::return#1
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  (void*) memcpy::destination#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS
  (void*) memcpy::source#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $28
  (word) memcpy::num#1 ← (number) $19*(number) $28-(number) $28
  call memcpy 
  (void*) memcpy::return#3 ← (void*) memcpy::return#1
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(number) $28
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $28
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:cscroll::@6
cscroll::@6: scope:[cscroll]  from cscroll::@5
  (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(number) $28
  (byte) memset::c#1 ← (byte) conio_textcolor
  (word) memset::num#1 ← (number) $28
  call memset 
  (void*) memset::return#3 ← (void*) memset::return#1
  to:cscroll::@7
cscroll::@7: scope:[cscroll]  from cscroll::@6
  (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (number) $28
  (byte*) conio_cursor_text ← (byte*~) cscroll::$7
  (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (number) $28
  (byte*) conio_cursor_color ← (byte*~) cscroll::$8
  (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@2: scope:[cscroll]  from cscroll::@1
  (byte) gotoxy::x#1 ← (number) 0
  (byte) gotoxy::y#1 ← (number) 0
  call gotoxy 
  to:cscroll::@8
cscroll::@8: scope:[cscroll]  from cscroll::@2
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@7 cscroll::@8
  return 
  to:@return

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@4 main::@6 printf_number_buffer::@5
  (to_nomodify byte*) cputs::s#5 ← phi( main::@4/(to_nomodify byte*) cputs::s#2 main::@6/(to_nomodify byte*) cputs::s#3 printf_number_buffer::@5/(to_nomodify byte*) cputs::s#1 )
  (byte) cputs::c#0 ← (byte) 0
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@3
  (to_nomodify byte*) cputs::s#4 ← phi( cputs/(to_nomodify byte*) cputs::s#5 cputs::@3/(to_nomodify byte*) cputs::s#6 )
  (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#4)
  (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#4
  (bool~) cputs::$1 ← (number) 0 != (byte) cputs::c#1
  if((bool~) cputs::$1) goto cputs::@2
  to:cputs::@return
cputs::@2: scope:[cputs]  from cputs::@1
  (to_nomodify byte*) cputs::s#7 ← phi( cputs::@1/(to_nomodify byte*) cputs::s#0 )
  (byte) cputs::c#2 ← phi( cputs::@1/(byte) cputs::c#1 )
  (byte) cputc::c#0 ← (byte) cputs::c#2
  call cputc 
  to:cputs::@3
cputs::@3: scope:[cputs]  from cputs::@2
  (to_nomodify byte*) cputs::s#6 ← phi( cputs::@2/(to_nomodify byte*) cputs::s#7 )
  to:cputs::@1
cputs::@return: scope:[cputs]  from cputs::@1
  return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  (byte) printf_padding::pad#5 ← phi( printf_number_buffer::@10/(byte) printf_padding::pad#1 printf_number_buffer::@12/(byte) printf_padding::pad#2 printf_number_buffer::@8/(byte) printf_padding::pad#0 )
  (byte) printf_padding::length#4 ← phi( printf_number_buffer::@10/(byte) printf_padding::length#1 printf_number_buffer::@12/(byte) printf_padding::length#2 printf_number_buffer::@8/(byte) printf_padding::length#0 )
  (byte) printf_padding::i#0 ← (byte) 0
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  (byte) printf_padding::pad#4 ← phi( printf_padding/(byte) printf_padding::pad#5 printf_padding::@3/(byte) printf_padding::pad#6 )
  (byte) printf_padding::length#3 ← phi( printf_padding/(byte) printf_padding::length#4 printf_padding::@3/(byte) printf_padding::length#5 )
  (byte) printf_padding::i#2 ← phi( printf_padding/(byte) printf_padding::i#0 printf_padding::@3/(byte) printf_padding::i#1 )
  (bool~) printf_padding::$0 ← (byte) printf_padding::i#2 < (byte) printf_padding::length#3
  if((bool~) printf_padding::$0) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  (byte) printf_padding::length#6 ← phi( printf_padding::@1/(byte) printf_padding::length#3 )
  (byte) printf_padding::i#4 ← phi( printf_padding::@1/(byte) printf_padding::i#2 )
  (byte) printf_padding::pad#3 ← phi( printf_padding::@1/(byte) printf_padding::pad#4 )
  (byte) cputc::c#1 ← (byte) printf_padding::pad#3
  call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  (byte) printf_padding::pad#6 ← phi( printf_padding::@2/(byte) printf_padding::pad#3 )
  (byte) printf_padding::length#5 ← phi( printf_padding::@2/(byte) printf_padding::length#6 )
  (byte) printf_padding::i#3 ← phi( printf_padding::@2/(byte) printf_padding::i#4 )
  (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#3
  to:printf_padding::@1
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  return 
  to:@return

(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from main::@2 main::@5
  (byte) printf_uchar::format_upper_case#6 ← phi( main::@2/(byte) printf_uchar::format_upper_case#0 main::@5/(byte) printf_uchar::format_upper_case#1 )
  (byte) printf_uchar::format_zero_padding#6 ← phi( main::@2/(byte) printf_uchar::format_zero_padding#0 main::@5/(byte) printf_uchar::format_zero_padding#1 )
  (byte) printf_uchar::format_justify_left#6 ← phi( main::@2/(byte) printf_uchar::format_justify_left#0 main::@5/(byte) printf_uchar::format_justify_left#1 )
  (byte) printf_uchar::format_min_length#6 ← phi( main::@2/(byte) printf_uchar::format_min_length#0 main::@5/(byte) printf_uchar::format_min_length#1 )
  (byte) printf_uchar::format_radix#6 ← phi( main::@2/(byte) printf_uchar::format_radix#0 main::@5/(byte) printf_uchar::format_radix#1 )
  (byte) printf_uchar::uvalue#5 ← phi( main::@2/(byte) printf_uchar::uvalue#0 main::@5/(byte) printf_uchar::uvalue#1 )
  (byte) printf_uchar::format_sign_always#2 ← phi( main::@2/(byte) printf_uchar::format_sign_always#0 main::@5/(byte) printf_uchar::format_sign_always#1 )
  (bool~) printf_uchar::$5 ← (number) 0 != (byte) printf_uchar::format_sign_always#2
  if((bool~) printf_uchar::$5) goto printf_uchar::@1
  to:printf_uchar::@2
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  (byte) printf_uchar::format_upper_case#4 ← phi( printf_uchar/(byte) printf_uchar::format_upper_case#6 )
  (byte) printf_uchar::format_zero_padding#4 ← phi( printf_uchar/(byte) printf_uchar::format_zero_padding#6 )
  (byte) printf_uchar::format_sign_always#5 ← phi( printf_uchar/(byte) printf_uchar::format_sign_always#2 )
  (byte) printf_uchar::format_justify_left#4 ← phi( printf_uchar/(byte) printf_uchar::format_justify_left#6 )
  (byte) printf_uchar::format_min_length#4 ← phi( printf_uchar/(byte) printf_uchar::format_min_length#6 )
  (byte) printf_uchar::format_radix#4 ← phi( printf_uchar/(byte) printf_uchar::format_radix#6 )
  (byte) printf_uchar::uvalue#3 ← phi( printf_uchar/(byte) printf_uchar::uvalue#5 )
  (byte~) printf_uchar::$1 ← (byte) '+'
  to:printf_uchar::@3
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar
  (byte) printf_uchar::format_upper_case#5 ← phi( printf_uchar/(byte) printf_uchar::format_upper_case#6 )
  (byte) printf_uchar::format_zero_padding#5 ← phi( printf_uchar/(byte) printf_uchar::format_zero_padding#6 )
  (byte) printf_uchar::format_sign_always#6 ← phi( printf_uchar/(byte) printf_uchar::format_sign_always#2 )
  (byte) printf_uchar::format_justify_left#5 ← phi( printf_uchar/(byte) printf_uchar::format_justify_left#6 )
  (byte) printf_uchar::format_min_length#5 ← phi( printf_uchar/(byte) printf_uchar::format_min_length#6 )
  (byte) printf_uchar::format_radix#5 ← phi( printf_uchar/(byte) printf_uchar::format_radix#6 )
  (byte) printf_uchar::uvalue#4 ← phi( printf_uchar/(byte) printf_uchar::uvalue#5 )
  (number~) printf_uchar::$0 ← (number) 0
  to:printf_uchar::@3
printf_uchar::@3: scope:[printf_uchar]  from printf_uchar::@1 printf_uchar::@2
  (byte) printf_uchar::format_upper_case#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_upper_case#4 printf_uchar::@2/(byte) printf_uchar::format_upper_case#5 )
  (byte) printf_uchar::format_zero_padding#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_zero_padding#4 printf_uchar::@2/(byte) printf_uchar::format_zero_padding#5 )
  (byte) printf_uchar::format_sign_always#4 ← phi( printf_uchar::@1/(byte) printf_uchar::format_sign_always#5 printf_uchar::@2/(byte) printf_uchar::format_sign_always#6 )
  (byte) printf_uchar::format_justify_left#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_justify_left#4 printf_uchar::@2/(byte) printf_uchar::format_justify_left#5 )
  (byte) printf_uchar::format_min_length#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_min_length#4 printf_uchar::@2/(byte) printf_uchar::format_min_length#5 )
  (byte) printf_uchar::format_radix#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_radix#4 printf_uchar::@2/(byte) printf_uchar::format_radix#5 )
  (byte) printf_uchar::uvalue#2 ← phi( printf_uchar::@1/(byte) printf_uchar::uvalue#3 printf_uchar::@2/(byte) printf_uchar::uvalue#4 )
  (number~) printf_uchar::$2 ← phi( printf_uchar::@1/(byte~) printf_uchar::$1 printf_uchar::@2/(number~) printf_uchar::$0 )
  *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (number~) printf_uchar::$2
  (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2
  (byte*) uctoa::buffer#5 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) uctoa::radix#0 ← (byte) printf_uchar::format_radix#2
  call uctoa 
  to:printf_uchar::@4
printf_uchar::@4: scope:[printf_uchar]  from printf_uchar::@3
  (byte) printf_uchar::format_radix#3 ← phi( printf_uchar::@3/(byte) printf_uchar::format_radix#2 )
  (byte) printf_uchar::format_upper_case#2 ← phi( printf_uchar::@3/(byte) printf_uchar::format_upper_case#3 )
  (byte) printf_uchar::format_zero_padding#2 ← phi( printf_uchar::@3/(byte) printf_uchar::format_zero_padding#3 )
  (byte) printf_uchar::format_sign_always#3 ← phi( printf_uchar::@3/(byte) printf_uchar::format_sign_always#4 )
  (byte) printf_uchar::format_justify_left#2 ← phi( printf_uchar::@3/(byte) printf_uchar::format_justify_left#3 )
  (byte) printf_uchar::format_min_length#2 ← phi( printf_uchar::@3/(byte) printf_uchar::format_min_length#3 )
  (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  (byte*) printf_number_buffer::buffer_digits#0 ← (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  (byte) printf_number_buffer::format_min_length#0 ← (byte) printf_uchar::format_min_length#2
  (byte) printf_number_buffer::format_justify_left#0 ← (byte) printf_uchar::format_justify_left#2
  (byte) printf_number_buffer::format_sign_always#0 ← (byte) printf_uchar::format_sign_always#3
  (byte) printf_number_buffer::format_zero_padding#0 ← (byte) printf_uchar::format_zero_padding#2
  (byte) printf_number_buffer::format_upper_case#0 ← (byte) printf_uchar::format_upper_case#2
  (byte) printf_number_buffer::format_radix#0 ← (byte) printf_uchar::format_radix#3
  call printf_number_buffer 
  to:printf_uchar::@5
printf_uchar::@5: scope:[printf_uchar]  from printf_uchar::@4
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@5
  return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@4
  (byte) printf_number_buffer::format_upper_case#10 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_upper_case#0 )
  (byte) printf_number_buffer::buffer_sign#7 ← phi( printf_uchar::@4/(byte) printf_number_buffer::buffer_sign#0 )
  (byte*) printf_number_buffer::buffer_digits#4 ← phi( printf_uchar::@4/(byte*) printf_number_buffer::buffer_digits#0 )
  (byte) printf_number_buffer::format_zero_padding#4 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_zero_padding#0 )
  (byte) printf_number_buffer::format_justify_left#3 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_justify_left#0 )
  (byte) printf_number_buffer::format_min_length#1 ← phi( printf_uchar::@4/(byte) printf_number_buffer::format_min_length#0 )
  (signed byte) printf_number_buffer::padding#0 ← (signed byte) 0
  (bool~) printf_number_buffer::$26 ← (number) 0 != (byte) printf_number_buffer::format_min_length#1
  (bool~) printf_number_buffer::$0 ← ! (bool~) printf_number_buffer::$26
  if((bool~) printf_number_buffer::$0) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@14
  (byte*) printf_number_buffer::buffer_digits#12 ← phi( printf_number_buffer/(byte*) printf_number_buffer::buffer_digits#4 printf_number_buffer::@13/(byte*) printf_number_buffer::buffer_digits#15 printf_number_buffer::@14/(byte*) printf_number_buffer::buffer_digits#16 )
  (byte) printf_number_buffer::format_upper_case#7 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_upper_case#10 printf_number_buffer::@13/(byte) printf_number_buffer::format_upper_case#11 printf_number_buffer::@14/(byte) printf_number_buffer::format_upper_case#12 )
  (byte) printf_number_buffer::buffer_sign#5 ← phi( printf_number_buffer/(byte) printf_number_buffer::buffer_sign#7 printf_number_buffer::@13/(byte) printf_number_buffer::buffer_sign#8 printf_number_buffer::@14/(byte) printf_number_buffer::buffer_sign#9 )
  (signed byte) printf_number_buffer::padding#3 ← phi( printf_number_buffer/(signed byte) printf_number_buffer::padding#0 printf_number_buffer::@13/(signed byte) printf_number_buffer::padding#1 printf_number_buffer::@14/(signed byte) printf_number_buffer::padding#2 )
  (byte) printf_number_buffer::format_zero_padding#1 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_zero_padding#4 printf_number_buffer::@13/(byte) printf_number_buffer::format_zero_padding#5 printf_number_buffer::@14/(byte) printf_number_buffer::format_zero_padding#6 )
  (byte) printf_number_buffer::format_justify_left#1 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_justify_left#3 printf_number_buffer::@13/(byte) printf_number_buffer::format_justify_left#4 printf_number_buffer::@14/(byte) printf_number_buffer::format_justify_left#5 )
  (bool~) printf_number_buffer::$27 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#1
  (bool~) printf_number_buffer::$1 ← ! (bool~) printf_number_buffer::$27
  (bool~) printf_number_buffer::$28 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#1
  (bool~) printf_number_buffer::$2 ← ! (bool~) printf_number_buffer::$28
  (bool~) printf_number_buffer::$3 ← (bool~) printf_number_buffer::$1 && (bool~) printf_number_buffer::$2
  (bool~) printf_number_buffer::$4 ← (bool~) printf_number_buffer::$3 && (signed byte) printf_number_buffer::padding#3
  (bool~) printf_number_buffer::$5 ← ! (bool~) printf_number_buffer::$4
  if((bool~) printf_number_buffer::$5) goto printf_number_buffer::@2
  to:printf_number_buffer::@8
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  (byte) printf_number_buffer::format_upper_case#16 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_upper_case#10 )
  (byte) printf_number_buffer::format_zero_padding#16 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_zero_padding#4 )
  (byte) printf_number_buffer::format_justify_left#11 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_justify_left#3 )
  (byte) printf_number_buffer::format_min_length#5 ← phi( printf_number_buffer/(byte) printf_number_buffer::format_min_length#1 )
  (byte) printf_number_buffer::buffer_sign#4 ← phi( printf_number_buffer/(byte) printf_number_buffer::buffer_sign#7 )
  (byte*) printf_number_buffer::buffer_digits#1 ← phi( printf_number_buffer/(byte*) printf_number_buffer::buffer_digits#4 )
  (byte*) strlen::str#1 ← (byte*) printf_number_buffer::buffer_digits#1
  call strlen 
  (word) strlen::return#2 ← (word) strlen::return#1
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@6
  (byte*) printf_number_buffer::buffer_digits#18 ← phi( printf_number_buffer::@6/(byte*) printf_number_buffer::buffer_digits#1 )
  (byte) printf_number_buffer::format_upper_case#14 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_upper_case#16 )
  (byte) printf_number_buffer::format_zero_padding#10 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_zero_padding#16 )
  (byte) printf_number_buffer::format_justify_left#7 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_justify_left#11 )
  (byte) printf_number_buffer::format_min_length#3 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::format_min_length#5 )
  (byte) printf_number_buffer::buffer_sign#1 ← phi( printf_number_buffer::@6/(byte) printf_number_buffer::buffer_sign#4 )
  (word) strlen::return#4 ← phi( printf_number_buffer::@6/(word) strlen::return#2 )
  (word~) printf_number_buffer::$19 ← (word) strlen::return#4
  (signed byte) printf_number_buffer::len#0 ← (signed byte)(word~) printf_number_buffer::$19
  (bool~) printf_number_buffer::$29 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#1
  (bool~) printf_number_buffer::$20 ← ! (bool~) printf_number_buffer::$29
  if((bool~) printf_number_buffer::$20) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@15 printf_number_buffer::@7
  (byte*) printf_number_buffer::buffer_digits#15 ← phi( printf_number_buffer::@15/(byte*) printf_number_buffer::buffer_digits#18 printf_number_buffer::@7/(byte*) printf_number_buffer::buffer_digits#19 )
  (byte) printf_number_buffer::format_upper_case#11 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_upper_case#14 printf_number_buffer::@7/(byte) printf_number_buffer::format_upper_case#15 )
  (byte) printf_number_buffer::buffer_sign#8 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::buffer_sign#1 printf_number_buffer::@7/(byte) printf_number_buffer::buffer_sign#11 )
  (byte) printf_number_buffer::format_zero_padding#5 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_zero_padding#10 printf_number_buffer::@7/(byte) printf_number_buffer::format_zero_padding#11 )
  (byte) printf_number_buffer::format_justify_left#4 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_justify_left#7 printf_number_buffer::@7/(byte) printf_number_buffer::format_justify_left#8 )
  (signed byte) printf_number_buffer::len#2 ← phi( printf_number_buffer::@15/(signed byte) printf_number_buffer::len#0 printf_number_buffer::@7/(signed byte) printf_number_buffer::len#1 )
  (byte) printf_number_buffer::format_min_length#2 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_min_length#3 printf_number_buffer::@7/(byte) printf_number_buffer::format_min_length#4 )
  (signed byte~) printf_number_buffer::$25 ← (signed byte)(byte) printf_number_buffer::format_min_length#2
  (signed byte~) printf_number_buffer::$21 ← (signed byte~) printf_number_buffer::$25 - (signed byte) printf_number_buffer::len#2
  (signed byte) printf_number_buffer::padding#1 ← (signed byte~) printf_number_buffer::$21
  (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (number) 0
  (bool~) printf_number_buffer::$23 ← ! (bool~) printf_number_buffer::$22
  if((bool~) printf_number_buffer::$23) goto printf_number_buffer::@1
  to:printf_number_buffer::@14
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@15
  (byte*) printf_number_buffer::buffer_digits#19 ← phi( printf_number_buffer::@15/(byte*) printf_number_buffer::buffer_digits#18 )
  (byte) printf_number_buffer::format_upper_case#15 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_upper_case#14 )
  (byte) printf_number_buffer::buffer_sign#11 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::buffer_sign#1 )
  (byte) printf_number_buffer::format_zero_padding#11 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_zero_padding#10 )
  (byte) printf_number_buffer::format_justify_left#8 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_justify_left#7 )
  (byte) printf_number_buffer::format_min_length#4 ← phi( printf_number_buffer::@15/(byte) printf_number_buffer::format_min_length#3 )
  (signed byte) printf_number_buffer::len#3 ← phi( printf_number_buffer::@15/(signed byte) printf_number_buffer::len#0 )
  (signed byte) printf_number_buffer::len#1 ← ++ (signed byte) printf_number_buffer::len#3
  to:printf_number_buffer::@13
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@13
  (byte*) printf_number_buffer::buffer_digits#16 ← phi( printf_number_buffer::@13/(byte*) printf_number_buffer::buffer_digits#15 )
  (byte) printf_number_buffer::format_upper_case#12 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_upper_case#11 )
  (byte) printf_number_buffer::buffer_sign#9 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::buffer_sign#8 )
  (byte) printf_number_buffer::format_zero_padding#6 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_zero_padding#5 )
  (byte) printf_number_buffer::format_justify_left#5 ← phi( printf_number_buffer::@13/(byte) printf_number_buffer::format_justify_left#4 )
  (signed byte) printf_number_buffer::padding#2 ← (number) 0
  to:printf_number_buffer::@1
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16
  (byte) printf_number_buffer::format_justify_left#16 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_justify_left#1 printf_number_buffer::@16/(byte) printf_number_buffer::format_justify_left#18 )
  (byte*) printf_number_buffer::buffer_digits#10 ← phi( printf_number_buffer::@1/(byte*) printf_number_buffer::buffer_digits#12 printf_number_buffer::@16/(byte*) printf_number_buffer::buffer_digits#13 )
  (byte) printf_number_buffer::format_upper_case#5 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_upper_case#7 printf_number_buffer::@16/(byte) printf_number_buffer::format_upper_case#8 )
  (signed byte) printf_number_buffer::padding#10 ← phi( printf_number_buffer::@1/(signed byte) printf_number_buffer::padding#3 printf_number_buffer::@16/(signed byte) printf_number_buffer::padding#12 )
  (byte) printf_number_buffer::format_zero_padding#8 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_zero_padding#1 printf_number_buffer::@16/(byte) printf_number_buffer::format_zero_padding#12 )
  (byte) printf_number_buffer::buffer_sign#2 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::buffer_sign#5 printf_number_buffer::@16/(byte) printf_number_buffer::buffer_sign#6 )
  (bool~) printf_number_buffer::$30 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#2
  (bool~) printf_number_buffer::$7 ← ! (bool~) printf_number_buffer::$30
  if((bool~) printf_number_buffer::$7) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@1
  (byte) printf_number_buffer::format_justify_left#20 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_justify_left#1 )
  (byte*) printf_number_buffer::buffer_digits#17 ← phi( printf_number_buffer::@1/(byte*) printf_number_buffer::buffer_digits#12 )
  (byte) printf_number_buffer::format_upper_case#13 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_upper_case#7 )
  (byte) printf_number_buffer::format_zero_padding#17 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::format_zero_padding#1 )
  (byte) printf_number_buffer::buffer_sign#10 ← phi( printf_number_buffer::@1/(byte) printf_number_buffer::buffer_sign#5 )
  (signed byte) printf_number_buffer::padding#4 ← phi( printf_number_buffer::@1/(signed byte) printf_number_buffer::padding#3 )
  (byte) printf_padding::pad#0 ← (byte) ' '
  (byte) printf_padding::length#0 ← (byte)(signed byte) printf_number_buffer::padding#4
  call printf_padding 
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@8
  (byte) printf_number_buffer::format_justify_left#18 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_justify_left#20 )
  (byte*) printf_number_buffer::buffer_digits#13 ← phi( printf_number_buffer::@8/(byte*) printf_number_buffer::buffer_digits#17 )
  (byte) printf_number_buffer::format_upper_case#8 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_upper_case#13 )
  (signed byte) printf_number_buffer::padding#12 ← phi( printf_number_buffer::@8/(signed byte) printf_number_buffer::padding#4 )
  (byte) printf_number_buffer::format_zero_padding#12 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::format_zero_padding#17 )
  (byte) printf_number_buffer::buffer_sign#6 ← phi( printf_number_buffer::@8/(byte) printf_number_buffer::buffer_sign#10 )
  to:printf_number_buffer::@2
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@17 printf_number_buffer::@2
  (byte) printf_number_buffer::format_justify_left#13 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_justify_left#15 printf_number_buffer::@2/(byte) printf_number_buffer::format_justify_left#16 )
  (byte*) printf_number_buffer::buffer_digits#8 ← phi( printf_number_buffer::@17/(byte*) printf_number_buffer::buffer_digits#9 printf_number_buffer::@2/(byte*) printf_number_buffer::buffer_digits#10 )
  (byte) printf_number_buffer::format_upper_case#3 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_upper_case#4 printf_number_buffer::@2/(byte) printf_number_buffer::format_upper_case#5 )
  (signed byte) printf_number_buffer::padding#5 ← phi( printf_number_buffer::@17/(signed byte) printf_number_buffer::padding#9 printf_number_buffer::@2/(signed byte) printf_number_buffer::padding#10 )
  (byte) printf_number_buffer::format_zero_padding#2 ← phi( printf_number_buffer::@17/(byte) printf_number_buffer::format_zero_padding#7 printf_number_buffer::@2/(byte) printf_number_buffer::format_zero_padding#8 )
  (bool~) printf_number_buffer::$9 ← (byte) printf_number_buffer::format_zero_padding#2 && (signed byte) printf_number_buffer::padding#5
  (bool~) printf_number_buffer::$10 ← ! (bool~) printf_number_buffer::$9
  if((bool~) printf_number_buffer::$10) goto printf_number_buffer::@4
  to:printf_number_buffer::@10
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  (byte) printf_number_buffer::format_justify_left#19 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_justify_left#16 )
  (byte*) printf_number_buffer::buffer_digits#14 ← phi( printf_number_buffer::@2/(byte*) printf_number_buffer::buffer_digits#10 )
  (byte) printf_number_buffer::format_upper_case#9 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_upper_case#5 )
  (signed byte) printf_number_buffer::padding#13 ← phi( printf_number_buffer::@2/(signed byte) printf_number_buffer::padding#10 )
  (byte) printf_number_buffer::format_zero_padding#13 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::format_zero_padding#8 )
  (byte) printf_number_buffer::buffer_sign#3 ← phi( printf_number_buffer::@2/(byte) printf_number_buffer::buffer_sign#2 )
  (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#3
  call cputc 
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@9
  (byte) printf_number_buffer::format_justify_left#15 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_justify_left#19 )
  (byte*) printf_number_buffer::buffer_digits#9 ← phi( printf_number_buffer::@9/(byte*) printf_number_buffer::buffer_digits#14 )
  (byte) printf_number_buffer::format_upper_case#4 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_upper_case#9 )
  (signed byte) printf_number_buffer::padding#9 ← phi( printf_number_buffer::@9/(signed byte) printf_number_buffer::padding#13 )
  (byte) printf_number_buffer::format_zero_padding#7 ← phi( printf_number_buffer::@9/(byte) printf_number_buffer::format_zero_padding#13 )
  to:printf_number_buffer::@3
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@18 printf_number_buffer::@3
  (signed byte) printf_number_buffer::padding#15 ← phi( printf_number_buffer::@18/(signed byte) printf_number_buffer::padding#16 printf_number_buffer::@3/(signed byte) printf_number_buffer::padding#5 )
  (byte) printf_number_buffer::format_justify_left#10 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_justify_left#12 printf_number_buffer::@3/(byte) printf_number_buffer::format_justify_left#13 )
  (byte) printf_number_buffer::format_zero_padding#15 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_zero_padding#18 printf_number_buffer::@3/(byte) printf_number_buffer::format_zero_padding#2 )
  (byte*) printf_number_buffer::buffer_digits#6 ← phi( printf_number_buffer::@18/(byte*) printf_number_buffer::buffer_digits#7 printf_number_buffer::@3/(byte*) printf_number_buffer::buffer_digits#8 )
  (byte) printf_number_buffer::format_upper_case#1 ← phi( printf_number_buffer::@18/(byte) printf_number_buffer::format_upper_case#2 printf_number_buffer::@3/(byte) printf_number_buffer::format_upper_case#3 )
  (bool~) printf_number_buffer::$31 ← (number) 0 != (byte) printf_number_buffer::format_upper_case#1
  (bool~) printf_number_buffer::$12 ← ! (bool~) printf_number_buffer::$31
  if((bool~) printf_number_buffer::$12) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@3
  (byte) printf_number_buffer::format_justify_left#17 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_justify_left#13 )
  (byte) printf_number_buffer::format_zero_padding#20 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_zero_padding#2 )
  (byte*) printf_number_buffer::buffer_digits#11 ← phi( printf_number_buffer::@3/(byte*) printf_number_buffer::buffer_digits#8 )
  (byte) printf_number_buffer::format_upper_case#6 ← phi( printf_number_buffer::@3/(byte) printf_number_buffer::format_upper_case#3 )
  (signed byte) printf_number_buffer::padding#6 ← phi( printf_number_buffer::@3/(signed byte) printf_number_buffer::padding#5 )
  (byte) printf_padding::pad#1 ← (byte) '0'
  (byte) printf_padding::length#1 ← (byte)(signed byte) printf_number_buffer::padding#6
  call printf_padding 
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@10
  (signed byte) printf_number_buffer::padding#16 ← phi( printf_number_buffer::@10/(signed byte) printf_number_buffer::padding#6 )
  (byte) printf_number_buffer::format_justify_left#12 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_justify_left#17 )
  (byte) printf_number_buffer::format_zero_padding#18 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_zero_padding#20 )
  (byte*) printf_number_buffer::buffer_digits#7 ← phi( printf_number_buffer::@10/(byte*) printf_number_buffer::buffer_digits#11 )
  (byte) printf_number_buffer::format_upper_case#2 ← phi( printf_number_buffer::@10/(byte) printf_number_buffer::format_upper_case#6 )
  to:printf_number_buffer::@4
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@20 printf_number_buffer::@4
  (signed byte) printf_number_buffer::padding#11 ← phi( printf_number_buffer::@20/(signed byte) printf_number_buffer::padding#14 printf_number_buffer::@4/(signed byte) printf_number_buffer::padding#15 )
  (byte) printf_number_buffer::format_justify_left#6 ← phi( printf_number_buffer::@20/(byte) printf_number_buffer::format_justify_left#9 printf_number_buffer::@4/(byte) printf_number_buffer::format_justify_left#10 )
  (byte) printf_number_buffer::format_zero_padding#9 ← phi( printf_number_buffer::@20/(byte) printf_number_buffer::format_zero_padding#14 printf_number_buffer::@4/(byte) printf_number_buffer::format_zero_padding#15 )
  (byte*) printf_number_buffer::buffer_digits#2 ← phi( printf_number_buffer::@20/(byte*) printf_number_buffer::buffer_digits#5 printf_number_buffer::@4/(byte*) printf_number_buffer::buffer_digits#6 )
  (to_nomodify byte*) cputs::s#1 ← (byte*) printf_number_buffer::buffer_digits#2
  call cputs 
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@5
  (signed byte) printf_number_buffer::padding#7 ← phi( printf_number_buffer::@5/(signed byte) printf_number_buffer::padding#11 )
  (byte) printf_number_buffer::format_justify_left#2 ← phi( printf_number_buffer::@5/(byte) printf_number_buffer::format_justify_left#6 )
  (byte) printf_number_buffer::format_zero_padding#3 ← phi( printf_number_buffer::@5/(byte) printf_number_buffer::format_zero_padding#9 )
  (bool~) printf_number_buffer::$32 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#3
  (bool~) printf_number_buffer::$14 ← ! (bool~) printf_number_buffer::$32
  (bool~) printf_number_buffer::$15 ← (byte) printf_number_buffer::format_justify_left#2 && (bool~) printf_number_buffer::$14
  (bool~) printf_number_buffer::$16 ← (bool~) printf_number_buffer::$15 && (signed byte) printf_number_buffer::padding#7
  (bool~) printf_number_buffer::$17 ← ! (bool~) printf_number_buffer::$16
  if((bool~) printf_number_buffer::$17) goto printf_number_buffer::@return
  to:printf_number_buffer::@12
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  (signed byte) printf_number_buffer::padding#17 ← phi( printf_number_buffer::@4/(signed byte) printf_number_buffer::padding#15 )
  (byte) printf_number_buffer::format_justify_left#14 ← phi( printf_number_buffer::@4/(byte) printf_number_buffer::format_justify_left#10 )
  (byte) printf_number_buffer::format_zero_padding#19 ← phi( printf_number_buffer::@4/(byte) printf_number_buffer::format_zero_padding#15 )
  (byte*) printf_number_buffer::buffer_digits#3 ← phi( printf_number_buffer::@4/(byte*) printf_number_buffer::buffer_digits#6 )
  (byte*) strupr::str#0 ← (byte*) printf_number_buffer::buffer_digits#3
  call strupr 
  (byte*) strupr::return#2 ← (byte*) strupr::return#1
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@11
  (signed byte) printf_number_buffer::padding#14 ← phi( printf_number_buffer::@11/(signed byte) printf_number_buffer::padding#17 )
  (byte) printf_number_buffer::format_justify_left#9 ← phi( printf_number_buffer::@11/(byte) printf_number_buffer::format_justify_left#14 )
  (byte) printf_number_buffer::format_zero_padding#14 ← phi( printf_number_buffer::@11/(byte) printf_number_buffer::format_zero_padding#19 )
  (byte*) printf_number_buffer::buffer_digits#5 ← phi( printf_number_buffer::@11/(byte*) printf_number_buffer::buffer_digits#3 )
  to:printf_number_buffer::@5
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  (signed byte) printf_number_buffer::padding#8 ← phi( printf_number_buffer::@19/(signed byte) printf_number_buffer::padding#7 )
  (byte) printf_padding::pad#2 ← (byte) ' '
  (byte) printf_padding::length#2 ← (byte)(signed byte) printf_number_buffer::padding#8
  call printf_padding 
  to:printf_number_buffer::@21
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@19 printf_number_buffer::@21
  return 
  to:@return

(void()) main()
main: scope:[main]  from @2
  call clrscr 
  to:main::@3
main::@3: scope:[main]  from main
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@7
  (byte) main::i#2 ← phi( main::@3/(byte) main::i#0 main::@7/(byte) main::i#1 )
  (bool~) main::$1 ← (byte) main::i#2 < (number) 5
  if((bool~) main::$1) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte) printf_uchar::uvalue#0 ← *((byte*)&(struct $0) stars+(const byte) OFFSET_STRUCT_$0_STAR_X + (byte) main::i#3)
  (byte) printf_uchar::format_min_length#0 ← (byte) 0
  (byte) printf_uchar::format_justify_left#0 ← (byte) 0
  (byte) printf_uchar::format_sign_always#0 ← (byte) 0
  (byte) printf_uchar::format_zero_padding#0 ← (byte) 0
  (byte) printf_uchar::format_upper_case#0 ← (byte) 0
  (byte) printf_uchar::format_radix#0 ← (const byte) DECIMAL
  call printf_uchar 
  to:main::@4
main::@4: scope:[main]  from main::@2
  (byte) main::i#6 ← phi( main::@2/(byte) main::i#3 )
  (to_nomodify byte*) cputs::s#2 ← (const byte*) main::s
  call cputs 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::i#4 ← phi( main::@4/(byte) main::i#6 )
  (byte) printf_uchar::uvalue#1 ← *((byte*)&(struct $0) stars+(const byte) OFFSET_STRUCT_$0_STAR_Y + (byte) main::i#4)
  (byte) printf_uchar::format_min_length#1 ← (byte) 0
  (byte) printf_uchar::format_justify_left#1 ← (byte) 0
  (byte) printf_uchar::format_sign_always#1 ← (byte) 0
  (byte) printf_uchar::format_zero_padding#1 ← (byte) 0
  (byte) printf_uchar::format_upper_case#1 ← (byte) 0
  (byte) printf_uchar::format_radix#1 ← (const byte) DECIMAL
  call printf_uchar 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte) main::i#7 ← phi( main::@5/(byte) main::i#4 )
  (to_nomodify byte*) cputs::s#3 ← (const byte*) main::s1
  call cputs 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte) main::i#5 ← phi( main::@6/(byte) main::i#7 )
  (byte) main::i#1 ← ++ (byte) main::i#5
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@2: scope:[]  from @1
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(const byte*) $0::speed_x[(number) 5]  = { fill( 5, 0) }
(const byte*) $0::speed_y[(number) 5]  = { fill( 5, 0) }
(const byte*) $0::star_x[(number) 5]  = { fill( 5, 0) }
(const byte*) $0::star_y[(number) 5]  = { fill( 5, 0) }
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const byte) BINARY = (number) 2
(const nomodify byte*) CONIO_SCREEN_COLORS = (byte*)(number) $d800
(const nomodify byte*) CONIO_SCREEN_TEXT = (byte*)(number) $400
(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT = (byte) $e
(const byte) DECIMAL = (number) $a
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const byte) HEXADECIMAL = (number) $10
(const byte) OCTAL = (number) 8
(const byte) OFFSET_STRUCT_$0_STAR_X = (byte) 0
(const byte) OFFSET_STRUCT_$0_STAR_Y = (byte) 5
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = (byte) 1
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN = (byte) 0
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const byte*) RADIX_BINARY_VALUES_CHAR[]  = { (byte) $80, (byte) $40, (byte) $20, (byte) $10, (byte) 8, (byte) 4, (byte) 2 }
(const byte*) RADIX_DECIMAL_VALUES_CHAR[]  = { (byte) $64, (byte) $a }
(const byte*) RADIX_HEXADECIMAL_VALUES_CHAR[]  = { (byte) $10 }
(const byte*) RADIX_OCTAL_VALUES_CHAR[]  = { (byte) $40, (byte) 8 }
(void()) clrscr()
(bool~) clrscr::$0
(bool~) clrscr::$1
(label) clrscr::@1
(label) clrscr::@2
(label) clrscr::@3
(label) clrscr::@4
(label) clrscr::@5
(label) clrscr::@6
(label) clrscr::@return
(byte) clrscr::c
(byte) clrscr::c#0
(byte) clrscr::c#1
(byte) clrscr::c#2
(byte) clrscr::c#3
(byte) clrscr::l
(byte) clrscr::l#0
(byte) clrscr::l#1
(byte) clrscr::l#2
(byte) clrscr::l#3
(byte) clrscr::l#4
(byte) clrscr::l#5
(byte) clrscr::l#6
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#0
(byte*) clrscr::line_cols#1
(byte*) clrscr::line_cols#2
(byte*) clrscr::line_cols#3
(byte*) clrscr::line_cols#4
(byte*) clrscr::line_cols#5
(byte*) clrscr::line_cols#6
(byte*) clrscr::line_text
(byte*) clrscr::line_text#0
(byte*) clrscr::line_text#1
(byte*) clrscr::line_text#2
(byte*) clrscr::line_text#3
(byte*) clrscr::line_text#4
(byte*) clrscr::line_text#5
(byte*) clrscr::line_text#6
(byte*) conio_cursor_color loadstore
(byte*) conio_cursor_text loadstore
(byte) conio_cursor_x loadstore
(byte) conio_cursor_y loadstore
(byte) conio_scroll_enable loadstore
(byte) conio_textcolor loadstore
(void()) cputc((byte) cputc::c)
(bool~) cputc::$0
(bool~) cputc::$1
(bool~) cputc::$2
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@4
(label) cputc::@5
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0
(byte) cputc::c#1
(byte) cputc::c#2
(byte) cputc::c#3
(byte) cputc::c#4
(void()) cputln()
(number~) cputln::$0
(byte*~) cputln::$1
(byte*~) cputln::$2
(label) cputln::@1
(label) cputln::@return
(word) cputln::ln_offset
(word) cputln::ln_offset#0
(void()) cputs((to_nomodify byte*) cputs::s)
(bool~) cputs::$1
(label) cputs::@1
(label) cputs::@2
(label) cputs::@3
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#0
(byte) cputs::c#1
(byte) cputs::c#2
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0
(to_nomodify byte*) cputs::s#1
(to_nomodify byte*) cputs::s#2
(to_nomodify byte*) cputs::s#3
(to_nomodify byte*) cputs::s#4
(to_nomodify byte*) cputs::s#5
(to_nomodify byte*) cputs::s#6
(to_nomodify byte*) cputs::s#7
(void()) cscroll()
(bool~) cscroll::$0
(bool~) cscroll::$1
(byte*~) cscroll::$7
(byte*~) cscroll::$8
(bool~) cscroll::$9
(label) cscroll::@1
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@6
(label) cscroll::@7
(label) cscroll::@8
(label) cscroll::@return
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(bool~) gotoxy::$0
(bool~) gotoxy::$1
(bool~) gotoxy::$2
(bool~) gotoxy::$3
(number~) gotoxy::$4
(number~) gotoxy::$5
(byte*~) gotoxy::$6
(byte*~) gotoxy::$7
(word~) gotoxy::$8
(label) gotoxy::@1
(label) gotoxy::@2
(label) gotoxy::@3
(label) gotoxy::@4
(label) gotoxy::@return
(word) gotoxy::offset
(word) gotoxy::offset#0
(byte) gotoxy::x
(byte) gotoxy::x#0
(byte) gotoxy::x#1
(byte) gotoxy::x#2
(byte) gotoxy::x#3
(byte) gotoxy::x#4
(byte) gotoxy::x#5
(byte) gotoxy::y
(byte) gotoxy::y#0
(byte) gotoxy::y#1
(byte) gotoxy::y#2
(byte) gotoxy::y#3
(byte) gotoxy::y#4
(byte) gotoxy::y#5
(void()) main()
(bool~) main::$1
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(byte) main::i#7
(const byte*) main::s[(byte) 2]  = (byte*) " "
(const byte*) main::s1[(byte) 2]  = (byte*) "
"
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(byte*~) memcpy::$0
(bool~) memcpy::$1
(byte*~) memcpy::$2
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@3
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#0
(void*) memcpy::destination#1
(void*) memcpy::destination#2
(void*) memcpy::destination#3
(void*) memcpy::destination#4
(void*) memcpy::destination#5
(byte*) memcpy::dst
(byte*) memcpy::dst#0
(byte*) memcpy::dst#1
(byte*) memcpy::dst#2
(byte*) memcpy::dst#3
(word) memcpy::num
(word) memcpy::num#0
(word) memcpy::num#1
(word) memcpy::num#2
(void*) memcpy::return
(void*) memcpy::return#0
(void*) memcpy::return#1
(void*) memcpy::return#2
(void*) memcpy::return#3
(void*) memcpy::return#4
(void*) memcpy::source
(void*) memcpy::source#0
(void*) memcpy::source#1
(void*) memcpy::source#2
(byte*) memcpy::src
(byte*) memcpy::src#0
(byte*) memcpy::src#1
(byte*) memcpy::src#2
(byte*) memcpy::src#3
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0
(byte*) memcpy::src_end#1
(byte*) memcpy::src_end#2
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte) memset::c#5
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(word) memset::num#3
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::return#4
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void*) memset::str#6
(struct printf_buffer_number) printf_buffer loadstore = {}
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(bool~) printf_number_buffer::$0
(bool~) printf_number_buffer::$1
(bool~) printf_number_buffer::$10
(bool~) printf_number_buffer::$12
(bool~) printf_number_buffer::$14
(bool~) printf_number_buffer::$15
(bool~) printf_number_buffer::$16
(bool~) printf_number_buffer::$17
(word~) printf_number_buffer::$19
(bool~) printf_number_buffer::$2
(bool~) printf_number_buffer::$20
(signed byte~) printf_number_buffer::$21
(bool~) printf_number_buffer::$22
(bool~) printf_number_buffer::$23
(signed byte~) printf_number_buffer::$25
(bool~) printf_number_buffer::$26
(bool~) printf_number_buffer::$27
(bool~) printf_number_buffer::$28
(bool~) printf_number_buffer::$29
(bool~) printf_number_buffer::$3
(bool~) printf_number_buffer::$30
(bool~) printf_number_buffer::$31
(bool~) printf_number_buffer::$32
(bool~) printf_number_buffer::$4
(bool~) printf_number_buffer::$5
(bool~) printf_number_buffer::$7
(bool~) printf_number_buffer::$9
(label) printf_number_buffer::@1
(label) printf_number_buffer::@10
(label) printf_number_buffer::@11
(label) printf_number_buffer::@12
(label) printf_number_buffer::@13
(label) printf_number_buffer::@14
(label) printf_number_buffer::@15
(label) printf_number_buffer::@16
(label) printf_number_buffer::@17
(label) printf_number_buffer::@18
(label) printf_number_buffer::@19
(label) printf_number_buffer::@2
(label) printf_number_buffer::@20
(label) printf_number_buffer::@21
(label) printf_number_buffer::@3
(label) printf_number_buffer::@4
(label) printf_number_buffer::@5
(label) printf_number_buffer::@6
(label) printf_number_buffer::@7
(label) printf_number_buffer::@8
(label) printf_number_buffer::@9
(label) printf_number_buffer::@return
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte*) printf_number_buffer::buffer_digits#0
(byte*) printf_number_buffer::buffer_digits#1
(byte*) printf_number_buffer::buffer_digits#10
(byte*) printf_number_buffer::buffer_digits#11
(byte*) printf_number_buffer::buffer_digits#12
(byte*) printf_number_buffer::buffer_digits#13
(byte*) printf_number_buffer::buffer_digits#14
(byte*) printf_number_buffer::buffer_digits#15
(byte*) printf_number_buffer::buffer_digits#16
(byte*) printf_number_buffer::buffer_digits#17
(byte*) printf_number_buffer::buffer_digits#18
(byte*) printf_number_buffer::buffer_digits#19
(byte*) printf_number_buffer::buffer_digits#2
(byte*) printf_number_buffer::buffer_digits#3
(byte*) printf_number_buffer::buffer_digits#4
(byte*) printf_number_buffer::buffer_digits#5
(byte*) printf_number_buffer::buffer_digits#6
(byte*) printf_number_buffer::buffer_digits#7
(byte*) printf_number_buffer::buffer_digits#8
(byte*) printf_number_buffer::buffer_digits#9
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0
(byte) printf_number_buffer::buffer_sign#1
(byte) printf_number_buffer::buffer_sign#10
(byte) printf_number_buffer::buffer_sign#11
(byte) printf_number_buffer::buffer_sign#2
(byte) printf_number_buffer::buffer_sign#3
(byte) printf_number_buffer::buffer_sign#4
(byte) printf_number_buffer::buffer_sign#5
(byte) printf_number_buffer::buffer_sign#6
(byte) printf_number_buffer::buffer_sign#7
(byte) printf_number_buffer::buffer_sign#8
(byte) printf_number_buffer::buffer_sign#9
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_justify_left#0
(byte) printf_number_buffer::format_justify_left#1
(byte) printf_number_buffer::format_justify_left#10
(byte) printf_number_buffer::format_justify_left#11
(byte) printf_number_buffer::format_justify_left#12
(byte) printf_number_buffer::format_justify_left#13
(byte) printf_number_buffer::format_justify_left#14
(byte) printf_number_buffer::format_justify_left#15
(byte) printf_number_buffer::format_justify_left#16
(byte) printf_number_buffer::format_justify_left#17
(byte) printf_number_buffer::format_justify_left#18
(byte) printf_number_buffer::format_justify_left#19
(byte) printf_number_buffer::format_justify_left#2
(byte) printf_number_buffer::format_justify_left#20
(byte) printf_number_buffer::format_justify_left#3
(byte) printf_number_buffer::format_justify_left#4
(byte) printf_number_buffer::format_justify_left#5
(byte) printf_number_buffer::format_justify_left#6
(byte) printf_number_buffer::format_justify_left#7
(byte) printf_number_buffer::format_justify_left#8
(byte) printf_number_buffer::format_justify_left#9
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_min_length#0
(byte) printf_number_buffer::format_min_length#1
(byte) printf_number_buffer::format_min_length#2
(byte) printf_number_buffer::format_min_length#3
(byte) printf_number_buffer::format_min_length#4
(byte) printf_number_buffer::format_min_length#5
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_radix#0
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_sign_always#0
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_upper_case#0
(byte) printf_number_buffer::format_upper_case#1
(byte) printf_number_buffer::format_upper_case#10
(byte) printf_number_buffer::format_upper_case#11
(byte) printf_number_buffer::format_upper_case#12
(byte) printf_number_buffer::format_upper_case#13
(byte) printf_number_buffer::format_upper_case#14
(byte) printf_number_buffer::format_upper_case#15
(byte) printf_number_buffer::format_upper_case#16
(byte) printf_number_buffer::format_upper_case#2
(byte) printf_number_buffer::format_upper_case#3
(byte) printf_number_buffer::format_upper_case#4
(byte) printf_number_buffer::format_upper_case#5
(byte) printf_number_buffer::format_upper_case#6
(byte) printf_number_buffer::format_upper_case#7
(byte) printf_number_buffer::format_upper_case#8
(byte) printf_number_buffer::format_upper_case#9
(byte) printf_number_buffer::format_zero_padding
(byte) printf_number_buffer::format_zero_padding#0
(byte) printf_number_buffer::format_zero_padding#1
(byte) printf_number_buffer::format_zero_padding#10
(byte) printf_number_buffer::format_zero_padding#11
(byte) printf_number_buffer::format_zero_padding#12
(byte) printf_number_buffer::format_zero_padding#13
(byte) printf_number_buffer::format_zero_padding#14
(byte) printf_number_buffer::format_zero_padding#15
(byte) printf_number_buffer::format_zero_padding#16
(byte) printf_number_buffer::format_zero_padding#17
(byte) printf_number_buffer::format_zero_padding#18
(byte) printf_number_buffer::format_zero_padding#19
(byte) printf_number_buffer::format_zero_padding#2
(byte) printf_number_buffer::format_zero_padding#20
(byte) printf_number_buffer::format_zero_padding#3
(byte) printf_number_buffer::format_zero_padding#4
(byte) printf_number_buffer::format_zero_padding#5
(byte) printf_number_buffer::format_zero_padding#6
(byte) printf_number_buffer::format_zero_padding#7
(byte) printf_number_buffer::format_zero_padding#8
(byte) printf_number_buffer::format_zero_padding#9
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::len#0
(signed byte) printf_number_buffer::len#1
(signed byte) printf_number_buffer::len#2
(signed byte) printf_number_buffer::len#3
(signed byte) printf_number_buffer::padding
(signed byte) printf_number_buffer::padding#0
(signed byte) printf_number_buffer::padding#1
(signed byte) printf_number_buffer::padding#10
(signed byte) printf_number_buffer::padding#11
(signed byte) printf_number_buffer::padding#12
(signed byte) printf_number_buffer::padding#13
(signed byte) printf_number_buffer::padding#14
(signed byte) printf_number_buffer::padding#15
(signed byte) printf_number_buffer::padding#16
(signed byte) printf_number_buffer::padding#17
(signed byte) printf_number_buffer::padding#2
(signed byte) printf_number_buffer::padding#3
(signed byte) printf_number_buffer::padding#4
(signed byte) printf_number_buffer::padding#5
(signed byte) printf_number_buffer::padding#6
(signed byte) printf_number_buffer::padding#7
(signed byte) printf_number_buffer::padding#8
(signed byte) printf_number_buffer::padding#9
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(bool~) printf_padding::$0
(label) printf_padding::@1
(label) printf_padding::@2
(label) printf_padding::@3
(label) printf_padding::@return
(byte) printf_padding::i
(byte) printf_padding::i#0
(byte) printf_padding::i#1
(byte) printf_padding::i#2
(byte) printf_padding::i#3
(byte) printf_padding::i#4
(byte) printf_padding::length
(byte) printf_padding::length#0
(byte) printf_padding::length#1
(byte) printf_padding::length#2
(byte) printf_padding::length#3
(byte) printf_padding::length#4
(byte) printf_padding::length#5
(byte) printf_padding::length#6
(byte) printf_padding::pad
(byte) printf_padding::pad#0
(byte) printf_padding::pad#1
(byte) printf_padding::pad#2
(byte) printf_padding::pad#3
(byte) printf_padding::pad#4
(byte) printf_padding::pad#5
(byte) printf_padding::pad#6
(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
(number~) printf_uchar::$0
(byte~) printf_uchar::$1
(number~) printf_uchar::$2
(bool~) printf_uchar::$5
(label) printf_uchar::@1
(label) printf_uchar::@2
(label) printf_uchar::@3
(label) printf_uchar::@4
(label) printf_uchar::@5
(label) printf_uchar::@return
(struct printf_format_number) printf_uchar::format
(byte) printf_uchar::format_justify_left
(byte) printf_uchar::format_justify_left#0
(byte) printf_uchar::format_justify_left#1
(byte) printf_uchar::format_justify_left#2
(byte) printf_uchar::format_justify_left#3
(byte) printf_uchar::format_justify_left#4
(byte) printf_uchar::format_justify_left#5
(byte) printf_uchar::format_justify_left#6
(byte) printf_uchar::format_min_length
(byte) printf_uchar::format_min_length#0
(byte) printf_uchar::format_min_length#1
(byte) printf_uchar::format_min_length#2
(byte) printf_uchar::format_min_length#3
(byte) printf_uchar::format_min_length#4
(byte) printf_uchar::format_min_length#5
(byte) printf_uchar::format_min_length#6
(byte) printf_uchar::format_radix
(byte) printf_uchar::format_radix#0
(byte) printf_uchar::format_radix#1
(byte) printf_uchar::format_radix#2
(byte) printf_uchar::format_radix#3
(byte) printf_uchar::format_radix#4
(byte) printf_uchar::format_radix#5
(byte) printf_uchar::format_radix#6
(byte) printf_uchar::format_sign_always
(byte) printf_uchar::format_sign_always#0
(byte) printf_uchar::format_sign_always#1
(byte) printf_uchar::format_sign_always#2
(byte) printf_uchar::format_sign_always#3
(byte) printf_uchar::format_sign_always#4
(byte) printf_uchar::format_sign_always#5
(byte) printf_uchar::format_sign_always#6
(byte) printf_uchar::format_upper_case
(byte) printf_uchar::format_upper_case#0
(byte) printf_uchar::format_upper_case#1
(byte) printf_uchar::format_upper_case#2
(byte) printf_uchar::format_upper_case#3
(byte) printf_uchar::format_upper_case#4
(byte) printf_uchar::format_upper_case#5
(byte) printf_uchar::format_upper_case#6
(byte) printf_uchar::format_zero_padding
(byte) printf_uchar::format_zero_padding#0
(byte) printf_uchar::format_zero_padding#1
(byte) printf_uchar::format_zero_padding#2
(byte) printf_uchar::format_zero_padding#3
(byte) printf_uchar::format_zero_padding#4
(byte) printf_uchar::format_zero_padding#5
(byte) printf_uchar::format_zero_padding#6
(byte) printf_uchar::uvalue
(byte) printf_uchar::uvalue#0
(byte) printf_uchar::uvalue#1
(byte) printf_uchar::uvalue#2
(byte) printf_uchar::uvalue#3
(byte) printf_uchar::uvalue#4
(byte) printf_uchar::uvalue#5
(struct $0) stars loadstore = { star_x: { (byte) $32, (byte) $28, (byte) $1e, (byte) $46, (byte) $28 }, star_y: { (byte) $32, (byte) $46, (byte) $14, (byte) $a, (byte) $50 }, speed_x: { (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2 }, speed_y: { (byte) 7, (byte) 7, (byte) 7, (byte) 7, (byte) 7 } }
(word()) strlen((byte*) strlen::str)
(bool~) strlen::$0
(label) strlen::@1
(label) strlen::@2
(label) strlen::@3
(label) strlen::@return
(word) strlen::len
(word) strlen::len#0
(word) strlen::len#1
(word) strlen::len#2
(word) strlen::len#3
(word) strlen::len#4
(word) strlen::return
(word) strlen::return#0
(word) strlen::return#1
(word) strlen::return#2
(word) strlen::return#3
(word) strlen::return#4
(byte*) strlen::str
(byte*) strlen::str#0
(byte*) strlen::str#1
(byte*) strlen::str#2
(byte*) strlen::str#3
(byte*) strlen::str#4
(byte*()) strupr((byte*) strupr::str)
(byte~) strupr::$0
(bool~) strupr::$1
(label) strupr::@1
(label) strupr::@2
(label) strupr::@3
(label) strupr::@4
(label) strupr::@return
(byte*) strupr::return
(byte*) strupr::return#0
(byte*) strupr::return#1
(byte*) strupr::return#2
(byte*) strupr::return#3
(byte*) strupr::src
(byte*) strupr::src#0
(byte*) strupr::src#1
(byte*) strupr::src#2
(byte*) strupr::src#3
(byte*) strupr::src#4
(byte*) strupr::str
(byte*) strupr::str#0
(byte*) strupr::str#1
(byte*) strupr::str#2
(byte*) strupr::str#3
(byte*) strupr::str#4
(byte*) strupr::str#5
(byte()) toupper((byte) toupper::ch)
(bool~) toupper::$0
(bool~) toupper::$1
(bool~) toupper::$2
(byte~) toupper::$3
(label) toupper::@1
(label) toupper::@2
(label) toupper::@return
(byte) toupper::ch
(byte) toupper::ch#0
(byte) toupper::ch#1
(byte) toupper::ch#2
(byte) toupper::ch#3
(byte) toupper::return
(byte) toupper::return#0
(byte) toupper::return#1
(byte) toupper::return#2
(byte) toupper::return#3
(byte) toupper::return#4
(byte) toupper::return#5
(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
(bool~) uctoa::$0
(bool~) uctoa::$1
(byte~) uctoa::$10
(bool~) uctoa::$2
(bool~) uctoa::$3
(number~) uctoa::$4
(bool~) uctoa::$5
(bool~) uctoa::$6
(bool~) uctoa::$7
(bool~) uctoa::$8
(byte~) uctoa::$9
(label) uctoa::@1
(label) uctoa::@10
(label) uctoa::@11
(label) uctoa::@12
(label) uctoa::@13
(label) uctoa::@14
(label) uctoa::@15
(label) uctoa::@2
(label) uctoa::@3
(label) uctoa::@4
(label) uctoa::@5
(label) uctoa::@6
(label) uctoa::@7
(label) uctoa::@8
(label) uctoa::@9
(label) uctoa::@return
(byte*) uctoa::buffer
(byte*) uctoa::buffer#0
(byte*) uctoa::buffer#1
(byte*) uctoa::buffer#10
(byte*) uctoa::buffer#11
(byte*) uctoa::buffer#12
(byte*) uctoa::buffer#13
(byte*) uctoa::buffer#14
(byte*) uctoa::buffer#15
(byte*) uctoa::buffer#16
(byte*) uctoa::buffer#17
(byte*) uctoa::buffer#18
(byte*) uctoa::buffer#19
(byte*) uctoa::buffer#2
(byte*) uctoa::buffer#20
(byte*) uctoa::buffer#21
(byte*) uctoa::buffer#3
(byte*) uctoa::buffer#4
(byte*) uctoa::buffer#5
(byte*) uctoa::buffer#6
(byte*) uctoa::buffer#7
(byte*) uctoa::buffer#8
(byte*) uctoa::buffer#9
(byte) uctoa::digit
(byte) uctoa::digit#0
(byte) uctoa::digit#1
(byte) uctoa::digit#2
(byte) uctoa::digit#3
(byte) uctoa::digit#4
(byte) uctoa::digit#5
(byte) uctoa::digit#6
(byte) uctoa::digit_value
(byte) uctoa::digit_value#0
(byte) uctoa::digit_value#1
(byte*) uctoa::digit_values
(byte*) uctoa::digit_values#0
(byte*) uctoa::digit_values#1
(byte*) uctoa::digit_values#10
(byte*) uctoa::digit_values#2
(byte*) uctoa::digit_values#3
(byte*) uctoa::digit_values#4
(byte*) uctoa::digit_values#5
(byte*) uctoa::digit_values#6
(byte*) uctoa::digit_values#7
(byte*) uctoa::digit_values#8
(byte*) uctoa::digit_values#9
(byte) uctoa::max_digits
(byte) uctoa::max_digits#0
(byte) uctoa::max_digits#1
(byte) uctoa::max_digits#10
(byte) uctoa::max_digits#2
(byte) uctoa::max_digits#3
(byte) uctoa::max_digits#4
(byte) uctoa::max_digits#5
(byte) uctoa::max_digits#6
(byte) uctoa::max_digits#7
(byte) uctoa::max_digits#8
(byte) uctoa::max_digits#9
(byte) uctoa::radix
(byte) uctoa::radix#0
(byte) uctoa::radix#1
(byte) uctoa::radix#2
(byte) uctoa::radix#3
(byte) uctoa::radix#4
(byte) uctoa::started
(byte) uctoa::started#0
(byte) uctoa::started#1
(byte) uctoa::started#2
(byte) uctoa::started#3
(byte) uctoa::started#4
(byte) uctoa::value
(byte) uctoa::value#0
(byte) uctoa::value#1
(byte) uctoa::value#10
(byte) uctoa::value#11
(byte) uctoa::value#12
(byte) uctoa::value#13
(byte) uctoa::value#14
(byte) uctoa::value#15
(byte) uctoa::value#2
(byte) uctoa::value#3
(byte) uctoa::value#4
(byte) uctoa::value#5
(byte) uctoa::value#6
(byte) uctoa::value#7
(byte) uctoa::value#8
(byte) uctoa::value#9
(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
(bool~) uctoa_append::$0
(label) uctoa_append::@1
(label) uctoa_append::@2
(label) uctoa_append::@3
(label) uctoa_append::@return
(byte*) uctoa_append::buffer
(byte*) uctoa_append::buffer#0
(byte*) uctoa_append::buffer#1
(byte*) uctoa_append::buffer#2
(byte*) uctoa_append::buffer#3
(byte*) uctoa_append::buffer#4
(byte) uctoa_append::digit
(byte) uctoa_append::digit#0
(byte) uctoa_append::digit#1
(byte) uctoa_append::digit#2
(byte) uctoa_append::digit#3
(byte) uctoa_append::digit#4
(byte) uctoa_append::return
(byte) uctoa_append::return#0
(byte) uctoa_append::return#1
(byte) uctoa_append::return#2
(byte) uctoa_append::return#3
(byte) uctoa_append::return#4
(byte) uctoa_append::sub
(byte) uctoa_append::sub#0
(byte) uctoa_append::sub#1
(byte) uctoa_append::sub#2
(byte) uctoa_append::sub#3
(byte) uctoa_append::value
(byte) uctoa_append::value#0
(byte) uctoa_append::value#1
(byte) uctoa_append::value#2
(byte) uctoa_append::value#3
(byte) uctoa_append::value#4
(byte) uctoa_append::value#5

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) strupr::$1 ← (number) 0 != *((byte*) strupr::src#2)
Adding number conversion cast (unumber) 0 in (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#2)
Adding number conversion cast (unumber) 3 in (byte) uctoa::max_digits#1 ← (number) 3
Adding number conversion cast (unumber) 2 in (byte) uctoa::max_digits#2 ← (number) 2
Adding number conversion cast (unumber) 3 in (byte) uctoa::max_digits#3 ← (number) 3
Adding number conversion cast (unumber) 8 in (byte) uctoa::max_digits#4 ← (number) 8
Adding number conversion cast (unumber) 0 in *((byte*) uctoa::buffer#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (number) 1
Adding number conversion cast (unumber) uctoa::$4 in (number~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((byte*) uctoa::buffer#3) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) uctoa::started#1 ← (number) 1
Adding number conversion cast (unumber) $19 in (bool~) clrscr::$0 ← (byte) clrscr::l#2 < (number) $19
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_y ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) clrscr::$1 ← (byte) clrscr::c#2 < (number) $28
Adding number conversion cast (unumber) $28 in (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#3 + (number) $28
Adding number conversion cast (unumber) $28 in (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#3 + (number) $28
Adding number conversion cast (unumber) $19 in (bool~) gotoxy::$0 ← (byte) gotoxy::y#2 > (number) $19
Adding number conversion cast (unumber) $28 in (bool~) gotoxy::$2 ← (byte) gotoxy::x#2 >= (number) $28
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (number~) gotoxy::$4 ← (word~) gotoxy::$8 * (number) $28
Adding number conversion cast (unumber) gotoxy::$4 in (number~) gotoxy::$4 ← (word~) gotoxy::$8 * (unumber)(number) $28
Adding number conversion cast (unumber) gotoxy::$5 in (number~) gotoxy::$5 ← (unumber~) gotoxy::$4 + (byte) gotoxy::x#3
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) cputc::$1 ← (byte) conio_cursor_x == (number) $28
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) $28 in (number~) cputln::$0 ← (number) $28 - (byte) conio_cursor_x
Adding number conversion cast (unumber) cputln::$0 in (number~) cputln::$0 ← (unumber)(number) $28 - (byte) conio_cursor_x
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) $19 in (bool~) cscroll::$0 ← (byte) conio_cursor_y == (number) $19
Adding number conversion cast (unumber) 0 in (bool~) cscroll::$9 ← (number) 0 != (byte) conio_scroll_enable
Adding number conversion cast (unumber) $28 in (void*) memcpy::source#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $28
Adding number conversion cast (unumber) $19*$28-$28 in (word) memcpy::num#0 ← (number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $28 in (void*) memcpy::source#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $28
Adding number conversion cast (unumber) $19*$28-$28 in (word) memcpy::num#1 ← (number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $28 in (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $19*$28 in (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(unumber)(number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#0 ← (number) $28
Adding number conversion cast (unumber) $28 in (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $19*$28 in (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(unumber)(number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#1 ← (number) $28
Adding number conversion cast (unumber) $28 in (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (number) $28
Adding number conversion cast (unumber) $28 in (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (number) $28
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) cputs::$1 ← (number) 0 != (byte) cputs::c#1
Adding number conversion cast (unumber) 0 in (bool~) printf_uchar::$5 ← (number) 0 != (byte) printf_uchar::format_sign_always#2
Adding number conversion cast (unumber) printf_uchar::$2 in (byte) printf_uchar::format_upper_case#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_upper_case#4 printf_uchar::@2/(byte) printf_uchar::format_upper_case#5 )
  (byte) printf_uchar::format_zero_padding#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_zero_padding#4 printf_uchar::@2/(byte) printf_uchar::format_zero_padding#5 )
  (byte) printf_uchar::format_sign_always#4 ← phi( printf_uchar::@1/(byte) printf_uchar::format_sign_always#5 printf_uchar::@2/(byte) printf_uchar::format_sign_always#6 )
  (byte) printf_uchar::format_justify_left#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_justify_left#4 printf_uchar::@2/(byte) printf_uchar::format_justify_left#5 )
  (byte) printf_uchar::format_min_length#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_min_length#4 printf_uchar::@2/(byte) printf_uchar::format_min_length#5 )
  (byte) printf_uchar::format_radix#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_radix#4 printf_uchar::@2/(byte) printf_uchar::format_radix#5 )
  (byte) printf_uchar::uvalue#2 ← phi( printf_uchar::@1/(byte) printf_uchar::uvalue#3 printf_uchar::@2/(byte) printf_uchar::uvalue#4 )
  (number~) printf_uchar::$2 ← phi( printf_uchar::@1/(byte~) printf_uchar::$1 printf_uchar::@2/(number~) printf_uchar::$0 )
Adding number conversion cast (unumber) printf_uchar::$0 in (byte) printf_uchar::format_upper_case#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_upper_case#4 printf_uchar::@2/(byte) printf_uchar::format_upper_case#5 )
  (byte) printf_uchar::format_zero_padding#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_zero_padding#4 printf_uchar::@2/(byte) printf_uchar::format_zero_padding#5 )
  (byte) printf_uchar::format_sign_always#4 ← phi( printf_uchar::@1/(byte) printf_uchar::format_sign_always#5 printf_uchar::@2/(byte) printf_uchar::format_sign_always#6 )
  (byte) printf_uchar::format_justify_left#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_justify_left#4 printf_uchar::@2/(byte) printf_uchar::format_justify_left#5 )
  (byte) printf_uchar::format_min_length#3 ← phi( printf_uchar::@1/(byte) printf_uchar::format_min_length#4 printf_uchar::@2/(byte) printf_uchar::format_min_length#5 )
  (byte) printf_uchar::format_radix#2 ← phi( printf_uchar::@1/(byte) printf_uchar::format_radix#4 printf_uchar::@2/(byte) printf_uchar::format_radix#5 )
  (byte) printf_uchar::uvalue#2 ← phi( printf_uchar::@1/(byte) printf_uchar::uvalue#3 printf_uchar::@2/(byte) printf_uchar::uvalue#4 )
  (unumber~) printf_uchar::$2 ← phi( printf_uchar::@1/(byte~) printf_uchar::$1 printf_uchar::@2/(number~) printf_uchar::$0 )
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$26 ← (number) 0 != (byte) printf_number_buffer::format_min_length#1
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$27 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#1
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$28 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#1
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$29 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#1
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (number) 0
Adding number conversion cast (snumber) 0 in (signed byte) printf_number_buffer::padding#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$30 ← (number) 0 != (byte) printf_number_buffer::buffer_sign#2
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$31 ← (number) 0 != (byte) printf_number_buffer::format_upper_case#1
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$32 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#3
Adding number conversion cast (unumber) 5 in (bool~) main::$1 ← (byte) main::i#2 < (number) 5
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) 0 in (unumber~) printf_uchar::$0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#2
Inlining cast (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#2
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3
Inlining cast (byte) uctoa::max_digits#1 ← (unumber)(number) 3
Inlining cast (byte) uctoa::max_digits#2 ← (unumber)(number) 2
Inlining cast (byte) uctoa::max_digits#3 ← (unumber)(number) 3
Inlining cast (byte) uctoa::max_digits#4 ← (unumber)(number) 8
Inlining cast *((byte*) uctoa::buffer#2) ← (unumber)(number) 0
Inlining cast *((byte*) uctoa::buffer#3) ← (unumber)(number) 0
Inlining cast (byte) uctoa::started#1 ← (unumber)(number) 1
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_y ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#0 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::x#0 ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (word) memcpy::num#0 ← (unumber)(number) $19*(number) $28-(number) $28
Inlining cast (word) memcpy::num#1 ← (unumber)(number) $19*(number) $28-(number) $28
Inlining cast (word) memset::num#0 ← (unumber)(number) $28
Inlining cast (word) memset::num#1 ← (unumber)(number) $28
Inlining cast (byte) gotoxy::x#1 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#1 ← (unumber)(number) 0
Inlining cast (unumber~) printf_uchar::$0 ← (unumber)(number) 0
Inlining cast (signed byte) printf_number_buffer::padding#2 ← (snumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 55296
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) uctoa::value#3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) uctoa::$4 ← (byte) uctoa::max_digits#5 - (byte) 1
Inferred type updated to word in (unumber~) gotoxy::$4 ← (word~) gotoxy::$8 * (byte) $28
Inferred type updated to word in (unumber~) gotoxy::$5 ← (word~) gotoxy::$4 + (byte) gotoxy::x#3
Inferred type updated to byte in (unumber~) cputln::$0 ← (byte) $28 - (byte) conio_cursor_x
Inferred type updated to byte in (unumber~) printf_uchar::$0 ← (byte) 0
Inferred type updated to byte for (unumber~) printf_uchar::$2
Inversing boolean not [33] (bool~) memset::$1 ← (word) memset::num#2 <= (byte) 0 from [32] (bool~) memset::$0 ← (word) memset::num#2 > (byte) 0
Inversing boolean not [194] (bool~) gotoxy::$1 ← (byte) gotoxy::y#2 <= (byte) $19 from [193] (bool~) gotoxy::$0 ← (byte) gotoxy::y#2 > (byte) $19
Inversing boolean not [198] (bool~) gotoxy::$3 ← (byte) gotoxy::x#2 < (byte) $28 from [197] (bool~) gotoxy::$2 ← (byte) gotoxy::x#2 >= (byte) $28
Inversing boolean not [227] (bool~) cputc::$2 ← (byte) conio_cursor_x != (byte) $28 from [226] (bool~) cputc::$1 ← (byte) conio_cursor_x == (byte) $28
Inversing boolean not [244] (bool~) cscroll::$1 ← (byte) conio_cursor_y != (byte) $19 from [243] (bool~) cscroll::$0 ← (byte) conio_cursor_y == (byte) $19
Inversing boolean not [327] (bool~) printf_number_buffer::$0 ← (byte) 0 == (byte) printf_number_buffer::format_min_length#1 from [326] (bool~) printf_number_buffer::$26 ← (byte) 0 != (byte) printf_number_buffer::format_min_length#1
Inversing boolean not [331] (bool~) printf_number_buffer::$1 ← (byte) 0 == (byte) printf_number_buffer::format_justify_left#1 from [330] (bool~) printf_number_buffer::$27 ← (byte) 0 != (byte) printf_number_buffer::format_justify_left#1
Inversing boolean not [333] (bool~) printf_number_buffer::$2 ← (byte) 0 == (byte) printf_number_buffer::format_zero_padding#1 from [332] (bool~) printf_number_buffer::$28 ← (byte) 0 != (byte) printf_number_buffer::format_zero_padding#1
Inversing boolean not [346] (bool~) printf_number_buffer::$20 ← (byte) 0 == (byte) printf_number_buffer::buffer_sign#1 from [345] (bool~) printf_number_buffer::$29 ← (byte) 0 != (byte) printf_number_buffer::buffer_sign#1
Inversing boolean not [353] (bool~) printf_number_buffer::$23 ← (signed byte) printf_number_buffer::padding#1 >= (signed byte) 0 from [352] (bool~) printf_number_buffer::$22 ← (signed byte) printf_number_buffer::padding#1 < (signed byte) 0
Inversing boolean not [361] (bool~) printf_number_buffer::$7 ← (byte) 0 == (byte) printf_number_buffer::buffer_sign#2 from [360] (bool~) printf_number_buffer::$30 ← (byte) 0 != (byte) printf_number_buffer::buffer_sign#2
Inversing boolean not [378] (bool~) printf_number_buffer::$12 ← (byte) 0 == (byte) printf_number_buffer::format_upper_case#1 from [377] (bool~) printf_number_buffer::$31 ← (byte) 0 != (byte) printf_number_buffer::format_upper_case#1
Inversing boolean not [390] (bool~) printf_number_buffer::$14 ← (byte) 0 == (byte) printf_number_buffer::format_zero_padding#3 from [389] (bool~) printf_number_buffer::$32 ← (byte) 0 != (byte) printf_number_buffer::format_zero_padding#3
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Alias toupper::ch#1 = toupper::ch#2 toupper::ch#3 toupper::return#1 
Alias toupper::return#0 = toupper::$3 
Alias toupper::return#2 = toupper::return#4 
Alias memcpy::src_end#0 = memcpy::$0 
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#3 = memcpy::destination#5 memcpy::destination#4 memcpy::return#0 memcpy::return#4 memcpy::return#1 
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias strupr::src#0 = strupr::str#1 
Alias strupr::src#2 = strupr::src#3 strupr::src#4 
Alias strupr::str#2 = strupr::str#5 strupr::str#3 strupr::str#4 strupr::return#0 strupr::return#3 strupr::return#1 
Alias toupper::return#3 = toupper::return#5 
Alias strlen::len#2 = strlen::len#4 strlen::len#3 strlen::return#0 strlen::return#3 strlen::return#1 
Alias strlen::str#2 = strlen::str#3 
Alias uctoa::value#10 = uctoa::value#8 uctoa::value#12 uctoa::value#13 uctoa::value#9 uctoa::value#14 uctoa::value#15 uctoa::value#11 
Alias uctoa::buffer#10 = uctoa::buffer#17 uctoa::buffer#21 uctoa::buffer#16 uctoa::buffer#18 uctoa::buffer#13 uctoa::buffer#19 uctoa::buffer#20 uctoa::buffer#6 
Alias uctoa::radix#1 = uctoa::radix#2 uctoa::radix#3 uctoa::radix#4 
Alias uctoa::digit_values#10 = uctoa::digit_values#5 uctoa::digit_values#6 uctoa::digit_values#9 
Alias uctoa::digit#2 = uctoa::digit#3 uctoa::digit#6 uctoa::digit#5 
Alias uctoa::value#2 = uctoa::value#5 uctoa::value#3 uctoa::$10 uctoa::value#4 
Alias uctoa::started#2 = uctoa::started#3 
Alias uctoa::buffer#11 = uctoa::buffer#12 uctoa::buffer#7 uctoa::buffer#8 uctoa::buffer#9 
Alias uctoa::max_digits#10 = uctoa::max_digits#8 uctoa::max_digits#5 uctoa::max_digits#9 
Alias uctoa::digit_value#0 = uctoa::digit_value#1 
Alias uctoa_append::return#0 = uctoa_append::return#3 
Alias uctoa::value#0 = uctoa::$9 
Alias uctoa_append::digit#2 = uctoa_append::digit#4 uctoa_append::digit#3 
Alias uctoa_append::value#2 = uctoa_append::value#3 uctoa_append::value#4 uctoa_append::return#1 uctoa_append::return#4 uctoa_append::return#2 
Alias uctoa_append::sub#1 = uctoa_append::sub#2 
Alias uctoa_append::buffer#1 = uctoa_append::buffer#4 uctoa_append::buffer#2 
Alias clrscr::line_text#5 = clrscr::line_text#6 
Alias clrscr::line_cols#5 = clrscr::line_cols#6 
Alias clrscr::l#2 = clrscr::l#5 
Alias clrscr::line_text#2 = clrscr::line_text#4 clrscr::line_text#3 
Alias clrscr::c#2 = clrscr::c#3 
Alias clrscr::line_cols#2 = clrscr::line_cols#4 clrscr::line_cols#3 
Alias clrscr::l#3 = clrscr::l#6 clrscr::l#4 
Alias gotoxy::x#4 = gotoxy::x#5 
Alias gotoxy::offset#0 = gotoxy::$5 
Alias gotoxy::y#4 = gotoxy::y#5 
Alias cputc::c#3 = cputc::c#4 
Alias cputln::ln_offset#0 = cputln::$0 
Alias cputs::c#1 = cputs::c#2 
Alias cputs::s#0 = cputs::s#7 cputs::s#6 
Alias printf_padding::pad#3 = printf_padding::pad#4 printf_padding::pad#6 
Alias printf_padding::i#2 = printf_padding::i#4 printf_padding::i#3 
Alias printf_padding::length#3 = printf_padding::length#6 printf_padding::length#5 
Alias printf_uchar::uvalue#3 = printf_uchar::uvalue#5 printf_uchar::uvalue#4 
Alias printf_uchar::format_radix#4 = printf_uchar::format_radix#6 printf_uchar::format_radix#5 
Alias printf_uchar::format_min_length#4 = printf_uchar::format_min_length#6 printf_uchar::format_min_length#5 
Alias printf_uchar::format_justify_left#4 = printf_uchar::format_justify_left#6 printf_uchar::format_justify_left#5 
Alias printf_uchar::format_sign_always#2 = printf_uchar::format_sign_always#5 printf_uchar::format_sign_always#6 
Alias printf_uchar::format_zero_padding#4 = printf_uchar::format_zero_padding#6 printf_uchar::format_zero_padding#5 
Alias printf_uchar::format_upper_case#4 = printf_uchar::format_upper_case#6 printf_uchar::format_upper_case#5 
Alias printf_uchar::format_min_length#2 = printf_uchar::format_min_length#3 
Alias printf_uchar::format_justify_left#2 = printf_uchar::format_justify_left#3 
Alias printf_uchar::format_sign_always#3 = printf_uchar::format_sign_always#4 
Alias printf_uchar::format_zero_padding#2 = printf_uchar::format_zero_padding#3 
Alias printf_uchar::format_upper_case#2 = printf_uchar::format_upper_case#3 
Alias printf_uchar::format_radix#2 = printf_uchar::format_radix#3 
Alias printf_number_buffer::buffer_digits#1 = printf_number_buffer::buffer_digits#4 printf_number_buffer::buffer_digits#18 printf_number_buffer::buffer_digits#19 
Alias printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#4 printf_number_buffer::buffer_sign#7 printf_number_buffer::buffer_sign#11 
Alias printf_number_buffer::format_min_length#1 = printf_number_buffer::format_min_length#5 printf_number_buffer::format_min_length#3 printf_number_buffer::format_min_length#4 
Alias printf_number_buffer::format_justify_left#11 = printf_number_buffer::format_justify_left#3 printf_number_buffer::format_justify_left#7 printf_number_buffer::format_justify_left#8 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#16 printf_number_buffer::format_zero_padding#4 printf_number_buffer::format_zero_padding#11 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#16 printf_number_buffer::format_upper_case#14 printf_number_buffer::format_upper_case#15 
Alias strlen::return#2 = strlen::return#4 
Alias printf_number_buffer::padding#1 = printf_number_buffer::$21 
Alias printf_number_buffer::len#0 = printf_number_buffer::len#3 
Alias printf_number_buffer::format_justify_left#4 = printf_number_buffer::format_justify_left#5 
Alias printf_number_buffer::format_zero_padding#5 = printf_number_buffer::format_zero_padding#6 
Alias printf_number_buffer::buffer_sign#8 = printf_number_buffer::buffer_sign#9 
Alias printf_number_buffer::format_upper_case#11 = printf_number_buffer::format_upper_case#12 
Alias printf_number_buffer::buffer_digits#15 = printf_number_buffer::buffer_digits#16 
Alias printf_number_buffer::padding#12 = printf_number_buffer::padding#4 printf_number_buffer::padding#3 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#5 printf_number_buffer::buffer_sign#6 
Alias printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#17 printf_number_buffer::format_zero_padding#12 
Alias printf_number_buffer::format_upper_case#13 = printf_number_buffer::format_upper_case#7 printf_number_buffer::format_upper_case#8 
Alias printf_number_buffer::buffer_digits#12 = printf_number_buffer::buffer_digits#17 printf_number_buffer::buffer_digits#13 
Alias printf_number_buffer::format_justify_left#1 = printf_number_buffer::format_justify_left#20 printf_number_buffer::format_justify_left#18 
Alias printf_number_buffer::buffer_sign#2 = printf_number_buffer::buffer_sign#3 
Alias printf_number_buffer::format_zero_padding#13 = printf_number_buffer::format_zero_padding#8 printf_number_buffer::format_zero_padding#7 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#13 printf_number_buffer::padding#9 
Alias printf_number_buffer::format_upper_case#4 = printf_number_buffer::format_upper_case#9 printf_number_buffer::format_upper_case#5 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#14 printf_number_buffer::buffer_digits#9 
Alias printf_number_buffer::format_justify_left#15 = printf_number_buffer::format_justify_left#19 printf_number_buffer::format_justify_left#16 
Alias printf_number_buffer::padding#16 = printf_number_buffer::padding#6 printf_number_buffer::padding#5 
Alias printf_number_buffer::format_upper_case#2 = printf_number_buffer::format_upper_case#6 printf_number_buffer::format_upper_case#3 
Alias printf_number_buffer::buffer_digits#11 = printf_number_buffer::buffer_digits#8 printf_number_buffer::buffer_digits#7 
Alias printf_number_buffer::format_zero_padding#18 = printf_number_buffer::format_zero_padding#20 printf_number_buffer::format_zero_padding#2 
Alias printf_number_buffer::format_justify_left#12 = printf_number_buffer::format_justify_left#17 printf_number_buffer::format_justify_left#13 
Alias printf_number_buffer::format_zero_padding#3 = printf_number_buffer::format_zero_padding#9 
Alias printf_number_buffer::format_justify_left#2 = printf_number_buffer::format_justify_left#6 
Alias printf_number_buffer::padding#11 = printf_number_buffer::padding#7 printf_number_buffer::padding#8 
Alias printf_number_buffer::buffer_digits#3 = printf_number_buffer::buffer_digits#6 printf_number_buffer::buffer_digits#5 
Alias printf_number_buffer::format_zero_padding#14 = printf_number_buffer::format_zero_padding#19 printf_number_buffer::format_zero_padding#15 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#14 printf_number_buffer::format_justify_left#9 
Alias printf_number_buffer::padding#14 = printf_number_buffer::padding#17 printf_number_buffer::padding#15 
Alias main::i#2 = main::i#3 main::i#6 main::i#4 main::i#7 main::i#5 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Alias uctoa::value#10 = uctoa::value#7 
Alias uctoa::buffer#10 = uctoa::buffer#15 
Alias uctoa::digit#2 = uctoa::digit#4 
Alias uctoa::max_digits#10 = uctoa::max_digits#6 
Alias uctoa::digit_values#10 = uctoa::digit_values#7 
Alias gotoxy::x#2 = gotoxy::x#4 
Alias gotoxy::y#3 = gotoxy::y#4 
Alias printf_uchar::uvalue#2 = printf_uchar::uvalue#3 
Alias printf_uchar::format_radix#2 = printf_uchar::format_radix#4 
Alias printf_uchar::format_min_length#2 = printf_uchar::format_min_length#4 
Alias printf_uchar::format_justify_left#2 = printf_uchar::format_justify_left#4 
Alias printf_uchar::format_sign_always#2 = printf_uchar::format_sign_always#3 
Alias printf_uchar::format_zero_padding#2 = printf_uchar::format_zero_padding#4 
Alias printf_uchar::format_upper_case#2 = printf_uchar::format_upper_case#4 
Alias printf_number_buffer::format_min_length#1 = printf_number_buffer::format_min_length#2 
Alias printf_number_buffer::format_justify_left#11 = printf_number_buffer::format_justify_left#4 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#5 
Alias printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#8 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#11 
Alias printf_number_buffer::buffer_digits#1 = printf_number_buffer::buffer_digits#15 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 
Alias printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#13 printf_number_buffer::format_zero_padding#18 printf_number_buffer::format_zero_padding#14 printf_number_buffer::format_zero_padding#3 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#12 printf_number_buffer::padding#16 printf_number_buffer::padding#14 printf_number_buffer::padding#11 
Alias printf_number_buffer::format_upper_case#1 = printf_number_buffer::format_upper_case#4 printf_number_buffer::format_upper_case#13 printf_number_buffer::format_upper_case#2 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#12 printf_number_buffer::buffer_digits#11 printf_number_buffer::buffer_digits#3 printf_number_buffer::buffer_digits#2 
Alias printf_number_buffer::format_justify_left#1 = printf_number_buffer::format_justify_left#15 printf_number_buffer::format_justify_left#12 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_justify_left#2 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Alias printf_number_buffer::format_justify_left#1 = printf_number_buffer::format_justify_left#11 
Alias printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 
Alias printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 
Alias printf_number_buffer::format_upper_case#1 = printf_number_buffer::format_upper_case#10 
Alias printf_number_buffer::buffer_digits#1 = printf_number_buffer::buffer_digits#10 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$2 cscroll::$8 
Identical Phi Values (byte) toupper::ch#1 (byte) toupper::ch#0
Identical Phi Values (byte*) memcpy::src_end#1 (byte*) memcpy::src_end#0
Identical Phi Values (void*) memcpy::destination#3 (void*) memcpy::destination#2
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#5 (void*) memset::str#3
Identical Phi Values (byte) memset::c#2 (byte) memset::c#4
Identical Phi Values (byte*) strupr::src#0 (byte*) strupr::str#0
Identical Phi Values (byte*) strupr::str#2 (byte*) strupr::src#0
Identical Phi Values (byte*) strlen::str#4 (byte*) strlen::str#1
Identical Phi Values (byte) uctoa::radix#1 (byte) uctoa::radix#0
Identical Phi Values (byte) uctoa::value#10 (byte) uctoa::value#1
Identical Phi Values (byte*) uctoa::buffer#10 (byte*) uctoa::buffer#5
Identical Phi Values (byte) uctoa::max_digits#10 (byte) uctoa::max_digits#7
Identical Phi Values (byte*) uctoa::digit_values#10 (byte*) uctoa::digit_values#8
Identical Phi Values (byte) uctoa_append::value#5 (byte) uctoa_append::value#0
Identical Phi Values (byte) uctoa_append::sub#3 (byte) uctoa_append::sub#0
Identical Phi Values (byte*) uctoa_append::buffer#3 (byte*) uctoa_append::buffer#0
Identical Phi Values (byte) uctoa_append::sub#1 (byte) uctoa_append::sub#3
Identical Phi Values (byte*) uctoa_append::buffer#1 (byte*) uctoa_append::buffer#3
Identical Phi Values (byte*) clrscr::line_text#2 (byte*) clrscr::line_text#5
Identical Phi Values (byte*) clrscr::line_cols#2 (byte*) clrscr::line_cols#5
Identical Phi Values (byte) clrscr::l#3 (byte) clrscr::l#2
Identical Phi Values (byte) gotoxy::y#2 (byte) gotoxy::y#1
Identical Phi Values (byte) gotoxy::x#2 (byte) gotoxy::x#1
Identical Phi Values (byte) printf_padding::length#3 (byte) printf_padding::length#4
Identical Phi Values (byte) printf_padding::pad#3 (byte) printf_padding::pad#5
Identical Phi Values (byte) printf_number_buffer::format_min_length#1 (byte) printf_number_buffer::format_min_length#0
Identical Phi Values (byte) printf_number_buffer::format_justify_left#1 (byte) printf_number_buffer::format_justify_left#0
Identical Phi Values (byte) printf_number_buffer::format_zero_padding#1 (byte) printf_number_buffer::format_zero_padding#0
Identical Phi Values (byte*) printf_number_buffer::buffer_digits#1 (byte*) printf_number_buffer::buffer_digits#0
Identical Phi Values (byte) printf_number_buffer::buffer_sign#1 (byte) printf_number_buffer::buffer_sign#0
Identical Phi Values (byte) printf_number_buffer::format_upper_case#1 (byte) printf_number_buffer::format_upper_case#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memcpy::$1 [15] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
Simple Condition (bool~) memset::$1 [22] if((word) memset::num#2<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [29] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) strupr::$1 [36] if((byte) 0!=*((byte*) strupr::src#2)) goto strupr::@2
Simple Condition (bool~) strlen::$0 [48] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
Simple Condition (bool~) uctoa::$0 [56] if((byte) uctoa::radix#0==(const byte) DECIMAL) goto uctoa::@1
Simple Condition (bool~) uctoa::$1 [60] if((byte) uctoa::radix#0==(const byte) HEXADECIMAL) goto uctoa::@2
Simple Condition (bool~) uctoa::$2 [64] if((byte) uctoa::radix#0==(const byte) OCTAL) goto uctoa::@3
Simple Condition (bool~) uctoa::$3 [68] if((byte) uctoa::radix#0==(const byte) BINARY) goto uctoa::@4
Simple Condition (bool~) uctoa::$5 [85] if((byte) uctoa::digit#2<(byte~) uctoa::$4) goto uctoa::@11
Simple Condition (bool~) uctoa_append::$0 [108] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
Simple Condition (bool~) clrscr::$0 [124] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@2
Simple Condition (bool~) clrscr::$1 [132] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@5
Simple Condition (bool~) gotoxy::$1 [142] if((byte) gotoxy::y#1<=(byte) $19) goto gotoxy::@1
Simple Condition (bool~) gotoxy::$3 [145] if((byte) gotoxy::x#1<(byte) $28) goto gotoxy::@2
Simple Condition (bool~) cputc::$0 [161] if((byte) cputc::c#3==(byte) '
') goto cputc::@1
Simple Condition (bool~) cputc::$2 [169] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
Simple Condition (bool~) cscroll::$1 [184] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
Simple Condition (bool~) cscroll::$9 [186] if((byte) 0!=(byte) conio_scroll_enable) goto cscroll::@3
Simple Condition (bool~) cputs::$1 [222] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
Simple Condition (bool~) printf_padding::$0 [230] if((byte) printf_padding::i#2<(byte) printf_padding::length#4) goto printf_padding::@2
Simple Condition (bool~) printf_uchar::$5 [237] if((byte) 0!=(byte) printf_uchar::format_sign_always#2) goto printf_uchar::@1
Simple Condition (bool~) printf_number_buffer::$0 [259] if((byte) 0==(byte) printf_number_buffer::format_min_length#0) goto printf_number_buffer::@1
Simple Condition (bool~) printf_number_buffer::$20 [273] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@13
Simple Condition (bool~) printf_number_buffer::$23 [278] if((signed byte) printf_number_buffer::padding#1>=(signed byte) 0) goto printf_number_buffer::@1
Simple Condition (bool~) printf_number_buffer::$7 [282] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@3
Simple Condition (bool~) printf_number_buffer::$12 [292] if((byte) 0==(byte) printf_number_buffer::format_upper_case#0) goto printf_number_buffer::@5
Simple Condition (bool~) main::$1 [314] if((byte) main::i#2<(byte) 5) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting && if()-condition to two if()s [3] (bool~) toupper::$2 ← (bool~) toupper::$0 && (bool~) toupper::$1
Rewriting ! if()-condition to reversed if() [89] (bool~) uctoa::$8 ← ! (bool~) uctoa::$7
Rewriting || if()-condition to two if()s [88] (bool~) uctoa::$7 ← (byte) uctoa::started#2 || (bool~) uctoa::$6
Rewriting ! if()-condition to reversed if() [265] (bool~) printf_number_buffer::$5 ← ! (bool~) printf_number_buffer::$4
Rewriting && if()-condition to two if()s [264] (bool~) printf_number_buffer::$4 ← (bool~) printf_number_buffer::$3 && (signed byte) printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [263] (bool~) printf_number_buffer::$3 ← (bool~) printf_number_buffer::$1 && (bool~) printf_number_buffer::$2
Rewriting ! if()-condition to reversed if() [287] (bool~) printf_number_buffer::$10 ← ! (bool~) printf_number_buffer::$9
Rewriting && if()-condition to two if()s [286] (bool~) printf_number_buffer::$9 ← (byte) printf_number_buffer::format_zero_padding#0 && (signed byte) printf_number_buffer::padding#10
Rewriting ! if()-condition to reversed if() [301] (bool~) printf_number_buffer::$17 ← ! (bool~) printf_number_buffer::$16
Rewriting && if()-condition to two if()s [300] (bool~) printf_number_buffer::$16 ← (bool~) printf_number_buffer::$15 && (signed byte) printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [299] (bool~) printf_number_buffer::$15 ← (byte) printf_number_buffer::format_justify_left#0 && (bool~) printf_number_buffer::$14
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition (byte) uctoa::started#2
Warning! Adding boolean cast to non-boolean condition (byte) printf_number_buffer::format_zero_padding#0
Warning! Adding boolean cast to non-boolean condition (byte) printf_number_buffer::format_justify_left#0
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_number_buffer::padding#10
Constant right-side identified [189] (word) memcpy::num#0 ← (unumber)(number) $19*(number) $28-(number) $28
Constant right-side identified [194] (word) memcpy::num#1 ← (unumber)(number) $19*(number) $28-(number) $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) strlen::len#0 = 0
Constant (const byte) uctoa::max_digits#0 = 0
Constant (const byte*) uctoa::digit_values#0 = (byte*) 0
Constant (const byte) uctoa::max_digits#1 = 3
Constant (const byte*) uctoa::digit_values#1 = RADIX_DECIMAL_VALUES_CHAR
Constant (const byte) uctoa::max_digits#2 = 2
Constant (const byte*) uctoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES_CHAR
Constant (const byte) uctoa::max_digits#3 = 3
Constant (const byte*) uctoa::digit_values#3 = RADIX_OCTAL_VALUES_CHAR
Constant (const byte) uctoa::max_digits#4 = 8
Constant (const byte*) uctoa::digit_values#4 = RADIX_BINARY_VALUES_CHAR
Constant (const byte) uctoa::started#0 = 0
Constant (const byte) uctoa::digit#0 = 0
Constant (const byte) uctoa::started#1 = 1
Constant (const byte) uctoa_append::digit#0 = 0
Constant (const byte*) clrscr::line_text#0 = CONIO_SCREEN_TEXT
Constant (const byte*) clrscr::line_cols#0 = CONIO_SCREEN_COLORS
Constant (const byte) clrscr::l#0 = 0
Constant (const byte) clrscr::c#0 = 0
Constant (const byte) gotoxy::y#0 = 0
Constant (const byte) gotoxy::x#0 = 0
Constant (const void*) memcpy::destination#0 = (void*)CONIO_SCREEN_TEXT
Constant (const void*) memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
Constant (const word) memcpy::num#0 = (unumber)$19*$28-$28
Constant (const void*) memcpy::destination#1 = (void*)CONIO_SCREEN_COLORS
Constant (const void*) memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
Constant (const word) memcpy::num#1 = (unumber)$19*$28-$28
Constant (const void*) memset::str#0 = (void*)CONIO_SCREEN_TEXT+(word)$19*$28-$28
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $28
Constant (const void*) memset::str#1 = (void*)CONIO_SCREEN_COLORS+(word)$19*$28-$28
Constant (const word) memset::num#1 = $28
Constant (const byte) gotoxy::x#1 = 0
Constant (const byte) gotoxy::y#1 = 0
Constant (const byte) cputs::c#0 = 0
Constant (const byte) printf_padding::i#0 = 0
Constant (const byte) printf_uchar::$1 = '+'
Constant (const byte) printf_uchar::$0 = 0
Constant (const byte*) uctoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const byte*) printf_number_buffer::buffer_digits#0 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant (const signed byte) printf_number_buffer::padding#0 = 0
Constant (const signed byte) printf_number_buffer::padding#2 = 0
Constant (const byte) printf_padding::pad#0 = ' '
Constant (const byte) printf_padding::pad#1 = '0'
Constant (const byte) printf_padding::pad#2 = ' '
Constant (const byte) main::i#0 = 0
Constant (const byte) printf_uchar::format_min_length#0 = 0
Constant (const byte) printf_uchar::format_justify_left#0 = 0
Constant (const byte) printf_uchar::format_sign_always#0 = 0
Constant (const byte) printf_uchar::format_zero_padding#0 = 0
Constant (const byte) printf_uchar::format_upper_case#0 = 0
Constant (const byte) printf_uchar::format_radix#0 = DECIMAL
Constant (const to_nomodify byte*) cputs::s#2 = main::s
Constant (const byte) printf_uchar::format_min_length#1 = 0
Constant (const byte) printf_uchar::format_justify_left#1 = 0
Constant (const byte) printf_uchar::format_sign_always#1 = 0
Constant (const byte) printf_uchar::format_zero_padding#1 = 0
Constant (const byte) printf_uchar::format_upper_case#1 = 0
Constant (const byte) printf_uchar::format_radix#1 = DECIMAL
Constant (const to_nomodify byte*) cputs::s#3 = main::s1
Constant (const byte) conio_textcolor = CONIO_TEXTCOLOR_DEFAULT
Constant (const byte) conio_scroll_enable = 1
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) memset::c#1 = conio_textcolor
Constant (const byte*) strlen::str#1 = printf_number_buffer::buffer_digits#0
Constant (const to_nomodify byte*) cputs::s#1 = printf_number_buffer::buffer_digits#0
Constant (const byte*) strupr::str#0 = printf_number_buffer::buffer_digits#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) strupr::return#2 = strupr::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [142] if((const byte) gotoxy::y#1<=(byte) $19) goto gotoxy::@1
if() condition always true - replacing block destination [145] if((const byte) gotoxy::x#1<(byte) $28) goto gotoxy::@2
if() condition always true - replacing block destination [186] if((byte) 0!=(const byte) conio_scroll_enable) goto cscroll::@3
Successful SSA optimization Pass2ConstantIfs
Simplifying expression containing zero (byte*)&printf_buffer in [241] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) ← (byte~) printf_uchar::$2
Simplifying expression containing zero (byte*)&printf_buffer in [246] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Simplifying expression containing zero (byte*)&stars in [315] (byte) printf_uchar::uvalue#0 ← *((byte*)&(struct $0) stars+(const byte) OFFSET_STRUCT_$0_STAR_X + (byte) main::i#2)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (void*) memcpy::return#2 and assignment [134] (void*) memcpy::return#2 ← (void*) memcpy::destination#2
Eliminating unused variable (void*) memcpy::return#3 and assignment [136] (void*) memcpy::return#3 ← (void*) memcpy::destination#2
Eliminating unused variable (void*) memset::return#2 and assignment [138] (void*) memset::return#2 ← (void*) memset::str#3
Eliminating unused variable (void*) memset::return#3 and assignment [140] (void*) memset::return#3 ← (void*) memset::str#3
Eliminating unused variable (byte) printf_number_buffer::format_sign_always#0 and assignment [173] (byte) printf_number_buffer::format_sign_always#0 ← (byte) printf_uchar::format_sign_always#2
Eliminating unused variable (byte) printf_number_buffer::format_radix#0 and assignment [176] (byte) printf_number_buffer::format_radix#0 ← (byte) printf_uchar::format_radix#2
Eliminating unused constant (const byte*) strupr::return#2
Eliminating unused constant (const byte) uctoa::max_digits#0
Eliminating unused constant (const byte*) uctoa::digit_values#0
Eliminating unused constant (const byte) cputs::c#0
Eliminating unused constant (const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN
Eliminating unused constant (const byte) OFFSET_STRUCT_$0_STAR_X
Eliminating unused constant (const byte) conio_scroll_enable
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte) gotoxy::y#3 from unused block gotoxy::@1
Eliminating variable (byte) gotoxy::x#3 from unused block gotoxy::@2
Eliminating variable (word~) gotoxy::$8 from unused block gotoxy::@2
Eliminating variable (word~) gotoxy::$4 from unused block gotoxy::@2
Eliminating variable (word) gotoxy::offset#0 from unused block gotoxy::@2
Eliminating variable (byte*~) gotoxy::$6 from unused block gotoxy::@2
Eliminating variable (byte*~) gotoxy::$7 from unused block gotoxy::@2
Removing unused procedure gotoxy
Removing unused procedure block gotoxy
Removing PHI-reference to removed block (gotoxy) in block gotoxy::@1
Removing unused procedure block gotoxy::@1
Removing PHI-reference to removed block (gotoxy::@1) in block gotoxy::@2
Removing unused procedure block gotoxy::@3
Removing unused procedure block gotoxy::@2
Removing unused procedure block gotoxy::@4
Removing unused procedure block gotoxy::@return
Removing unused block cscroll::@2
Removing unused block cscroll::@8
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 0 in (bool~) uctoa::$11 ← (number) 0 != (byte) uctoa::started#2
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$33 ← (number) 0 != (byte) printf_number_buffer::format_zero_padding#0
Adding number conversion cast (unumber) 0 in (bool~) printf_number_buffer::$34 ← (number) 0 != (byte) printf_number_buffer::format_justify_left#0
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$35 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$36 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in (bool~) printf_number_buffer::$37 ← (number) 0 != (signed byte) printf_number_buffer::padding#10
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$2 cscroll::$8 
Simple Condition (bool~) toupper::$0 [2] if((byte) toupper::ch#0>=(byte) 'a') goto toupper::@3
Simple Condition (bool~) uctoa::$11 [60] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@14
Simple Condition (bool~) printf_number_buffer::$1 [164] if((byte) 0==(byte) printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@23
Simple Condition (bool~) printf_number_buffer::$33 [179] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@24
Simple Condition (bool~) printf_number_buffer::$34 [188] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@26
Simple Condition (bool~) toupper::$1 [205] if((byte) toupper::ch#0<=(byte) 'z') goto toupper::@1
Simple Condition (bool~) uctoa::$6 [206] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@14
Simple Condition (bool~) printf_number_buffer::$35 [208] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@8
Simple Condition (bool~) printf_number_buffer::$2 [209] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@22
Simple Condition (bool~) printf_number_buffer::$36 [211] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@10
Simple Condition (bool~) printf_number_buffer::$37 [213] if((signed byte) 0!=(signed byte) printf_number_buffer::padding#10) goto printf_number_buffer::@12
Simple Condition (bool~) printf_number_buffer::$14 [214] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@25
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [2] if((byte) toupper::ch#0<(byte) 'a') goto toupper::@2
Negating conditional jump and destination [164] if((byte) 0!=(byte) printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@2
Negating conditional jump and destination [179] if((byte) 0==(byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@4
Negating conditional jump and destination [188] if((byte) 0==(byte) printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@return
Negating conditional jump and destination [209] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@2
Negating conditional jump and destination [214] if((byte) 0!=(byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [46] (byte*) uctoa::buffer#0 ← ++ (const byte*) uctoa::buffer#5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) uctoa::buffer#0 = ++uctoa::buffer#5
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$2 cscroll::$8 
Constant right-side identified [45] (byte*) uctoa::buffer#1 ← ++ (const byte*) uctoa::buffer#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) uctoa::buffer#1 = ++uctoa::buffer#0
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$2 cscroll::$8 
Constant right-side identified [46] (byte*) uctoa::buffer#2 ← ++ (const byte*) uctoa::buffer#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) uctoa::buffer#2 = ++uctoa::buffer#1
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$2 cscroll::$8 
Inlining Noop Cast [5] (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [6] (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#2 keeping memcpy::destination#2
Inlining Noop Cast [7] (byte*~) memcpy::$2 ← (byte*)(void*) memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [17] (byte*~) memset::$4 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [19] (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [162] (signed byte~) printf_number_buffer::$25 ← (signed byte)(byte) printf_number_buffer::format_min_length#0 keeping printf_number_buffer::format_min_length#0
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings (const void*) memcpy::destination#0
Inlining constant with var siblings (const void*) memcpy::source#0
Inlining constant with var siblings (const word) memcpy::num#0
Inlining constant with var siblings (const void*) memcpy::destination#1
Inlining constant with var siblings (const void*) memcpy::source#1
Inlining constant with var siblings (const word) memcpy::num#1
Inlining constant with var siblings (const void*) memset::str#0
Inlining constant with var siblings (const byte) memset::c#0
Inlining constant with var siblings (const word) memset::num#0
Inlining constant with var siblings (const void*) memset::str#1
Inlining constant with var siblings (const word) memset::num#1
Inlining constant with var siblings (const byte) memset::c#1
Inlining constant with var siblings (const word) strlen::len#0
Inlining constant with var siblings (const byte*) strlen::str#1
Inlining constant with var siblings (const byte) uctoa::max_digits#1
Inlining constant with var siblings (const byte*) uctoa::digit_values#1
Inlining constant with var siblings (const byte) uctoa::max_digits#2
Inlining constant with var siblings (const byte*) uctoa::digit_values#2
Inlining constant with var siblings (const byte) uctoa::max_digits#3
Inlining constant with var siblings (const byte*) uctoa::digit_values#3
Inlining constant with var siblings (const byte) uctoa::max_digits#4
Inlining constant with var siblings (const byte*) uctoa::digit_values#4
Inlining constant with var siblings (const byte) uctoa::started#0
Inlining constant with var siblings (const byte) uctoa::digit#0
Inlining constant with var siblings (const byte) uctoa::started#1
Inlining constant with var siblings (const byte*) uctoa::buffer#5
Inlining constant with var siblings (const byte*) uctoa::buffer#0
Inlining constant with var siblings (const byte*) uctoa::buffer#1
Inlining constant with var siblings (const byte*) uctoa::buffer#2
Inlining constant with var siblings (const byte) uctoa_append::digit#0
Inlining constant with var siblings (const byte*) clrscr::line_text#0
Inlining constant with var siblings (const byte*) clrscr::line_cols#0
Inlining constant with var siblings (const byte) clrscr::l#0
Inlining constant with var siblings (const byte) clrscr::c#0
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#2
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#3
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#1
Inlining constant with var siblings (const byte) printf_padding::i#0
Inlining constant with var siblings (const byte) printf_padding::pad#0
Inlining constant with var siblings (const byte) printf_padding::pad#1
Inlining constant with var siblings (const byte) printf_padding::pad#2
Inlining constant with var siblings (const byte) printf_uchar::format_min_length#0
Inlining constant with var siblings (const byte) printf_uchar::format_justify_left#0
Inlining constant with var siblings (const byte) printf_uchar::format_sign_always#0
Inlining constant with var siblings (const byte) printf_uchar::format_zero_padding#0
Inlining constant with var siblings (const byte) printf_uchar::format_upper_case#0
Inlining constant with var siblings (const byte) printf_uchar::format_radix#0
Inlining constant with var siblings (const byte) printf_uchar::format_min_length#1
Inlining constant with var siblings (const byte) printf_uchar::format_justify_left#1
Inlining constant with var siblings (const byte) printf_uchar::format_sign_always#1
Inlining constant with var siblings (const byte) printf_uchar::format_zero_padding#1
Inlining constant with var siblings (const byte) printf_uchar::format_upper_case#1
Inlining constant with var siblings (const byte) printf_uchar::format_radix#1
Inlining constant with var siblings (const signed byte) printf_number_buffer::padding#0
Inlining constant with var siblings (const signed byte) printf_number_buffer::padding#2
Inlining constant with var siblings (const byte) main::i#0
Constant inlined uctoa_append::digit#0 = (byte) 0
Constant inlined cputs::s#3 = (const byte*) main::s1
Constant inlined cputs::s#1 = (const byte*) printf_number_buffer::buffer_digits#0
Constant inlined cputs::s#2 = (const byte*) main::s
Constant inlined printf_uchar::format_justify_left#0 = (byte) 0
Constant inlined printf_uchar::format_justify_left#1 = (byte) 0
Constant inlined conio_textcolor = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
Constant inlined memset::num#1 = (byte) $28
Constant inlined memset::num#0 = (byte) $28
Constant inlined clrscr::l#0 = (byte) 0
Constant inlined strlen::len#0 = (word) 0
Constant inlined printf_number_buffer::padding#2 = (signed byte) 0
Constant inlined uctoa::digit#0 = (byte) 0
Constant inlined clrscr::line_text#0 = (const nomodify byte*) CONIO_SCREEN_TEXT
Constant inlined memcpy::source#0 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28
Constant inlined printf_uchar::format_sign_always#1 = (byte) 0
Constant inlined printf_uchar::format_sign_always#0 = (byte) 0
Constant inlined memset::c#0 = (byte) ' '
Constant inlined printf_uchar::format_min_length#1 = (byte) 0
Constant inlined memset::c#1 = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
Constant inlined printf_uchar::format_min_length#0 = (byte) 0
Constant inlined printf_uchar::format_upper_case#1 = (byte) 0
Constant inlined printf_number_buffer::padding#0 = (signed byte) 0
Constant inlined printf_uchar::format_upper_case#0 = (byte) 0
Constant inlined uctoa::digit_values#2 = (const byte*) RADIX_HEXADECIMAL_VALUES_CHAR
Constant inlined uctoa::started#0 = (byte) 0
Constant inlined uctoa::digit_values#1 = (const byte*) RADIX_DECIMAL_VALUES_CHAR
Constant inlined uctoa::started#1 = (byte) 1
Constant inlined uctoa::digit_values#4 = (const byte*) RADIX_BINARY_VALUES_CHAR
Constant inlined uctoa::digit_values#3 = (const byte*) RADIX_OCTAL_VALUES_CHAR
Constant inlined printf_uchar::$0 = (byte) 0
Constant inlined printf_uchar::$1 = (byte) '+'
Constant inlined OFFSET_STRUCT_$0_STAR_Y = (byte) 5
Constant inlined strlen::str#1 = (const byte*) printf_number_buffer::buffer_digits#0
Constant inlined memcpy::destination#0 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT
Constant inlined memcpy::destination#1 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS
Constant inlined uctoa::max_digits#1 = (byte) 3
Constant inlined memcpy::source#1 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28
Constant inlined main::i#0 = (byte) 0
Constant inlined uctoa::max_digits#3 = (byte) 3
Constant inlined uctoa::max_digits#2 = (byte) 2
Constant inlined strupr::str#0 = (const byte*) printf_number_buffer::buffer_digits#0
Constant inlined uctoa::max_digits#4 = (byte) 8
Constant inlined uctoa::buffer#1 = ++++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined memset::str#1 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28
Constant inlined uctoa::buffer#2 = ++++++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_padding::pad#0 = (byte) ' '
Constant inlined memset::str#0 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28
Constant inlined printf_padding::i#0 = (byte) 0
Constant inlined printf_padding::pad#1 = (byte) '0'
Constant inlined printf_uchar::format_zero_padding#1 = (byte) 0
Constant inlined uctoa::buffer#0 = ++(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_padding::pad#2 = (byte) ' '
Constant inlined printf_uchar::format_zero_padding#0 = (byte) 0
Constant inlined uctoa::buffer#5 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined memcpy::num#1 = (word)(number) $19*(number) $28-(number) $28
Constant inlined memcpy::num#0 = (word)(number) $19*(number) $28-(number) $28
Constant inlined printf_uchar::format_radix#1 = (const byte) DECIMAL
Constant inlined printf_uchar::format_radix#0 = (const byte) DECIMAL
Constant inlined clrscr::c#0 = (byte) 0
Constant inlined clrscr::line_cols#0 = (const nomodify byte*) CONIO_SCREEN_COLORS
Successful SSA optimization Pass2ConstantInlining
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
Simplifying constant integer increment ++(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+2
Successful SSA optimization Pass2ConstantSimplification
Adding number conversion cast (unumber) 1 in [44] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 1) ← (byte) 'r'
Adding number conversion cast (unumber) 2 in [45] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 2) ← (byte) 'r'
Adding number conversion cast (unumber) 3 in [46] *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+(number) 3) ← (byte) 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$2 cscroll::$8 
Identical Phi Values (word) memcpy::num#2 (word)(number) $19*(number) $28-(number) $28
Identical Phi Values (word) memset::num#2 (byte) $28
Identical Phi Values (byte) printf_uchar::format_sign_always#2 (byte) 0
Identical Phi Values (byte) printf_uchar::format_radix#2 (const byte) DECIMAL
Identical Phi Values (byte) printf_uchar::format_min_length#2 (byte) 0
Identical Phi Values (byte) printf_uchar::format_justify_left#2 (byte) 0
Identical Phi Values (byte) printf_uchar::format_zero_padding#2 (byte) 0
Identical Phi Values (byte) printf_uchar::format_upper_case#2 (byte) 0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte) uctoa::radix#0 = DECIMAL
Constant (const byte) printf_number_buffer::format_min_length#0 = 0
Constant (const byte) printf_number_buffer::format_justify_left#0 = 0
Constant (const byte) printf_number_buffer::format_zero_padding#0 = 0
Constant (const byte) printf_number_buffer::format_upper_case#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (signed byte)printf_number_buffer::format_min_length#0 in [157] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(const byte) printf_number_buffer::format_min_length#0 - (signed byte) printf_number_buffer::len#2
Successful SSA optimization Pass2ConstantValues
if() condition always false - eliminating [13] if((byte) $28<=(byte) 0) goto memset::@1
if() condition always true - replacing block destination [34] if((const byte) uctoa::radix#0==(const byte) DECIMAL) goto uctoa::@1
if() condition always false - eliminating [35] if((const byte) uctoa::radix#0==(const byte) HEXADECIMAL) goto uctoa::@2
if() condition always false - eliminating [36] if((const byte) uctoa::radix#0==(const byte) OCTAL) goto uctoa::@3
if() condition always false - eliminating [37] if((const byte) uctoa::radix#0==(const byte) BINARY) goto uctoa::@4
if() condition always false - eliminating [135] if((byte) 0!=(byte) 0) goto printf_uchar::@1
if() condition always true - replacing block destination [148] if((byte) 0==(const byte) printf_number_buffer::format_min_length#0) goto printf_number_buffer::@1
if() condition always false - eliminating [150] if((byte) 0!=(const byte) printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@2
if() condition always true - replacing block destination [163] if((byte) 0==(const byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@4
if() condition always true - replacing block destination [166] if((byte) 0==(const byte) printf_number_buffer::format_upper_case#0) goto printf_number_buffer::@5
if() condition always true - replacing block destination [170] if((byte) 0==(const byte) printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@return
if() condition always false - eliminating [190] if((byte) 0!=(const byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@2
if() condition always false - eliminating [193] if((byte) 0!=(const byte) printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@return
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero (signed byte)(const byte) printf_number_buffer::format_min_length#0 in [157] (signed byte) printf_number_buffer::padding#1 ← (signed byte)(const byte) printf_number_buffer::format_min_length#0 - (signed byte) printf_number_buffer::len#2
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero printf_number_buffer::len#2 in [157] (signed byte) printf_number_buffer::padding#1 ← (signed byte) 0 - (signed byte) printf_number_buffer::len#2
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) BINARY
Eliminating unused constant (const byte) OCTAL
Eliminating unused constant (const byte) HEXADECIMAL
Eliminating unused constant (const byte) uctoa::radix#0
Eliminating unused constant (const byte) printf_number_buffer::format_min_length#0
Eliminating unused constant (const byte) printf_number_buffer::format_justify_left#0
Eliminating unused constant (const byte) printf_number_buffer::format_zero_padding#0
Eliminating unused constant (const byte) printf_number_buffer::format_upper_case#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) DECIMAL
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte) toupper::return#0 from unused block toupper::@1
Eliminating variable (byte) toupper::return#2 from unused block toupper::@return
Eliminating variable (byte*) strupr::src#2 from unused block strupr::@1
Eliminating variable (byte) toupper::ch#0 from unused block strupr::@2
Eliminating variable (byte) toupper::return#3 from unused block strupr::@2
Eliminating variable (byte~) strupr::$0 from unused block strupr::@4
Eliminating variable (byte*) strupr::src#1 from unused block strupr::@4
Eliminating variable (byte*) strlen::str#2 from unused block strlen::@1
Eliminating variable (word) strlen::len#2 from unused block strlen::@1
Eliminating variable (word) strlen::len#1 from unused block strlen::@2
Eliminating variable (byte*) strlen::str#0 from unused block strlen::@2
Eliminating variable (word) strlen::return#2 from unused block printf_number_buffer::@6
Eliminating variable (word~) printf_number_buffer::$19 from unused block printf_number_buffer::@15
Eliminating variable (signed byte) printf_number_buffer::len#0 from unused block printf_number_buffer::@15
Eliminating variable (signed byte) printf_number_buffer::len#2 from unused block printf_number_buffer::@13
Eliminating variable (signed byte) printf_number_buffer::padding#1 from unused block printf_number_buffer::@13
Eliminating variable (signed byte) printf_number_buffer::len#1 from unused block printf_number_buffer::@7
Eliminating variable (byte) printf_padding::length#1 from unused block printf_number_buffer::@10
Eliminating variable (byte) printf_padding::length#2 from unused block printf_number_buffer::@12
Removing unused procedure toupper
Removing unused procedure block toupper
Removing unused procedure block toupper::@1
Removing PHI-reference to removed block (toupper::@1) in block toupper::@return
Removing unused procedure block toupper::@2
Removing PHI-reference to removed block (toupper::@2) in block toupper::@return
Removing unused procedure block toupper::@return
Removing unused procedure block toupper::@3
Removing unused procedure strupr
Removing unused procedure block strupr
Removing PHI-reference to removed block (strupr) in block strupr::@1
Removing unused procedure block strupr::@1
Removing unused procedure block strupr::@2
Removing unused procedure block strupr::@4
Removing unused procedure block strupr::@3
Removing unused procedure block strupr::@return
Removing unused procedure strlen
Removing unused procedure block strlen
Removing PHI-reference to removed block (strlen) in block strlen::@1
Removing PHI-reference to removed block (strlen) in block strlen::@1
Removing unused procedure block strlen::@1
Removing unused procedure block strlen::@2
Removing unused procedure block strlen::@3
Removing unused procedure block strlen::@return
Removing unused block uctoa::@6
Removing PHI-reference to removed block (uctoa::@2) in block uctoa::@5
Removing PHI-reference to removed block (uctoa::@2) in block uctoa::@5
Removing unused block uctoa::@2
Removing unused block uctoa::@7
Removing PHI-reference to removed block (uctoa::@3) in block uctoa::@5
Removing PHI-reference to removed block (uctoa::@3) in block uctoa::@5
Removing unused block uctoa::@3
Removing unused block uctoa::@8
Removing PHI-reference to removed block (uctoa::@4) in block uctoa::@5
Removing PHI-reference to removed block (uctoa::@4) in block uctoa::@5
Removing unused block uctoa::@4
Removing unused block uctoa::@9
Removing PHI-reference to removed block (printf_uchar::@1) in block printf_uchar::@3
Removing unused block printf_uchar::@1
Removing unused block printf_number_buffer::@6
Removing PHI-reference to removed block (printf_number_buffer::@15) in block printf_number_buffer::@13
Removing unused block printf_number_buffer::@15
Removing PHI-reference to removed block (printf_number_buffer::@13) in block printf_number_buffer::@1
Removing unused block printf_number_buffer::@13
Removing unused block printf_number_buffer::@7
Removing PHI-reference to removed block (printf_number_buffer::@14) in block printf_number_buffer::@1
Removing unused block printf_number_buffer::@14
Removing PHI-reference to removed block (printf_number_buffer::@10) in block printf_padding
Removing PHI-reference to removed block (printf_number_buffer::@10) in block printf_padding
Removing unused block printf_number_buffer::@10
Removing unused block printf_number_buffer::@18
Removing unused block printf_number_buffer::@11
Removing unused block printf_number_buffer::@20
Removing PHI-reference to removed block (printf_number_buffer::@12) in block printf_padding
Removing PHI-reference to removed block (printf_number_buffer::@12) in block printf_padding
Removing unused block printf_number_buffer::@12
Removing unused block printf_number_buffer::@21
Removing unused block printf_number_buffer::@24
Removing unused block printf_number_buffer::@25
Removing unused block printf_number_buffer::@26
Successful SSA optimization Pass2EliminateUnusedBlocks
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$2 cscroll::$8 
Identical Phi Values (byte) uctoa::max_digits#7 (byte) 3
Identical Phi Values (byte*) uctoa::digit_values#8 (const byte*) RADIX_DECIMAL_VALUES_CHAR
Identical Phi Values (byte) printf_padding::length#4 (byte) printf_padding::length#0
Identical Phi Values (byte) printf_padding::pad#5 (byte) ' '
Identical Phi Values (byte~) printf_uchar::$2 (byte) 0
Identical Phi Values (signed byte) printf_number_buffer::padding#10 (signed byte) 0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [18] (byte~) uctoa::$4 ← (byte) 3 - (byte) 1
Constant right-side identified [117] (byte) printf_padding::length#0 ← (byte)(signed byte) 0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) uctoa::$4 = 3-1
Constant (const byte) cputc::c#1 = ' '
Constant (const byte) printf_padding::length#0 = (byte)0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [102] if((byte) printf_padding::i#2<(const byte) printf_padding::length#0) goto printf_padding::@2
if() condition always false - eliminating [136] if((signed byte) 0!=(signed byte) 0) goto printf_number_buffer::@8
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero (byte)(signed byte) 0 in 
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused constant (const byte*) RADIX_BINARY_VALUES_CHAR
Eliminating unused constant (const byte*) RADIX_OCTAL_VALUES_CHAR
Eliminating unused constant (const byte*) RADIX_HEXADECIMAL_VALUES_CHAR
Eliminating unused constant (const byte) printf_padding::length#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte) printf_padding::i#2 from unused block printf_padding::@1
Eliminating variable (byte) printf_padding::i#1 from unused block printf_padding::@3
Removing unused procedure printf_padding
Removing unused procedure block printf_padding
Removing PHI-reference to removed block (printf_padding) in block printf_padding::@1
Removing unused procedure block printf_padding::@1
Removing unused procedure block printf_padding::@2
Removing PHI-reference to removed block (printf_padding::@2) in block cputc
Removing unused procedure block printf_padding::@3
Removing unused procedure block printf_padding::@return
Removing unused block printf_number_buffer::@8
Removing unused block printf_number_buffer::@16
Successful SSA optimization Pass2EliminateUnusedBlocks
Inlining constant with var siblings (const byte) cputc::c#1
Constant inlined uctoa::$4 = (byte) 3-(byte) 1
Constant inlined cputc::c#1 = (byte) ' '
Successful SSA optimization Pass2ConstantInlining
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$2 cscroll::$8 
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$2 cscroll::$8 
Added new block during phi lifting uctoa::@17(between uctoa::@16 and uctoa::@13)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of cputc::@5
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cputc::@4
Adding NOP phi() at start of cputln::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4
Adding NOP phi() at start of cscroll::@5
Adding NOP phi() at start of cscroll::@6
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of memcpy::@3
Adding NOP phi() at start of printf_uchar::@2
Adding NOP phi() at start of printf_uchar::@5
Adding NOP phi() at start of printf_number_buffer
Adding NOP phi() at start of printf_number_buffer::@1
Adding NOP phi() at start of printf_number_buffer::@23
Adding NOP phi() at start of printf_number_buffer::@22
Adding NOP phi() at start of printf_number_buffer::@17
Adding NOP phi() at start of printf_number_buffer::@3
Adding NOP phi() at start of printf_number_buffer::@4
Adding NOP phi() at start of printf_number_buffer::@5
Adding NOP phi() at start of printf_number_buffer::@19
Adding NOP phi() at start of uctoa
Adding NOP phi() at start of uctoa::@1
Adding NOP phi() at start of clrscr
Adding NOP phi() at start of clrscr::@2
CALL GRAPH
Calls in [] to main:6 
Calls in [main] to clrscr:10 printf_uchar:17 cputs:19 printf_uchar:22 cputs:24 
Calls in [cputs] to cputc:36 
Calls in [cputc] to cscroll:48 cputln:52 
Calls in [cputln] to cscroll:61 
Calls in [cscroll] to memcpy:67 memcpy:69 memset:71 memset:73 
Calls in [printf_uchar] to uctoa:107 printf_number_buffer:109 
Calls in [printf_number_buffer] to cputc:119 cputs:124 
Calls in [uctoa] to uctoa_append:151 

Created 25 initial phi equivalence classes
Coalesced [16] printf_uchar::uvalue#6 ← printf_uchar::uvalue#0
Coalesced [21] printf_uchar::uvalue#7 ← printf_uchar::uvalue#1
Coalesced [26] main::i#8 ← main::i#1
Coalesced [28] cputs::s#8 ← cputs::s#5
Coalesced [35] cputc::c#5 ← cputc::c#0
Coalesced [37] cputs::s#9 ← cputs::s#0
Coalesced [89] memset::dst#5 ← memset::dst#1
Coalesced [101] memcpy::src#5 ← memcpy::src#1
Coalesced [102] memcpy::dst#5 ← memcpy::dst#1
Coalesced [118] cputc::c#6 ← cputc::c#2
Coalesced [129] uctoa::value#17 ← uctoa::value#1
Coalesced [139] uctoa::value#18 ← uctoa::value#2
Coalesced [140] uctoa::started#6 ← uctoa::started#2
Coalesced [141] uctoa::buffer#23 ← uctoa::buffer#11
Coalesced [144] uctoa::digit#7 ← uctoa::digit#1
Coalesced (already) [145] uctoa::value#16 ← uctoa::value#6
Coalesced (already) [146] uctoa::started#5 ← uctoa::started#4
Coalesced (already) [147] uctoa::buffer#22 ← uctoa::buffer#14
Coalesced [155] uctoa::value#19 ← uctoa::value#0
Coalesced [156] uctoa::buffer#24 ← uctoa::buffer#4
Coalesced [157] uctoa_append::value#6 ← uctoa_append::value#0
Coalesced [164] uctoa_append::value#7 ← uctoa_append::value#1
Coalesced [165] uctoa_append::digit#5 ← uctoa_append::digit#1
Coalesced [180] clrscr::l#7 ← clrscr::l#1
Coalesced [181] clrscr::line_text#7 ← clrscr::line_text#1
Coalesced [182] clrscr::line_cols#7 ← clrscr::line_cols#1
Coalesced [186] clrscr::c#4 ← clrscr::c#1
Coalesced down to 21 phi equivalence classes
Culled Empty Block (label) @3
Culled Empty Block (label) main::@3
Culled Empty Block (label) cputs::@3
Culled Empty Block (label) cputc::@5
Culled Empty Block (label) cputc::@4
Culled Empty Block (label) cputln::@1
Culled Empty Block (label) cscroll::@1
Culled Empty Block (label) memset::@1
Culled Empty Block (label) memcpy::@3
Culled Empty Block (label) printf_uchar::@2
Culled Empty Block (label) printf_uchar::@5
Culled Empty Block (label) printf_number_buffer::@1
Culled Empty Block (label) printf_number_buffer::@23
Culled Empty Block (label) printf_number_buffer::@22
Culled Empty Block (label) printf_number_buffer::@17
Culled Empty Block (label) printf_number_buffer::@3
Culled Empty Block (label) printf_number_buffer::@4
Culled Empty Block (label) printf_number_buffer::@19
Culled Empty Block (label) uctoa::@1
Culled Empty Block (label) uctoa::@5
Culled Empty Block (label) uctoa::@17
Culled Empty Block (label) clrscr::@2
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block uctoa::@10 to uctoa::@1
Renumbering block uctoa::@11 to uctoa::@2
Renumbering block uctoa::@12 to uctoa::@3
Renumbering block uctoa::@13 to uctoa::@4
Renumbering block uctoa::@14 to uctoa::@5
Renumbering block uctoa::@15 to uctoa::@6
Renumbering block uctoa::@16 to uctoa::@7
Renumbering block clrscr::@3 to clrscr::@2
Renumbering block clrscr::@4 to clrscr::@3
Renumbering block clrscr::@5 to clrscr::@4
Renumbering block clrscr::@6 to clrscr::@5
Renumbering block cscroll::@3 to cscroll::@1
Renumbering block cscroll::@4 to cscroll::@2
Renumbering block cscroll::@5 to cscroll::@3
Renumbering block cscroll::@6 to cscroll::@4
Renumbering block cscroll::@7 to cscroll::@5
Renumbering block printf_uchar::@3 to printf_uchar::@1
Renumbering block printf_uchar::@4 to printf_uchar::@2
Renumbering block printf_number_buffer::@2 to printf_number_buffer::@1
Renumbering block printf_number_buffer::@5 to printf_number_buffer::@2
Renumbering block printf_number_buffer::@9 to printf_number_buffer::@3
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Renumbering block main::@6 to main::@5
Renumbering block main::@7 to main::@6
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@2
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4
Adding NOP phi() at start of printf_number_buffer
Adding NOP phi() at start of printf_number_buffer::@2
Adding NOP phi() at start of uctoa
Adding NOP phi() at start of uctoa_append
Adding NOP phi() at start of clrscr

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:@2
@2: scope:[]  from @1
  [5] phi()
  [6] call main 
  to:@end
@end: scope:[]  from @2
  [7] phi()

(void()) main()
main: scope:[main]  from @2
  [8] phi()
  [9] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main main::@6
  [10] (byte) main::i#2 ← phi( main/(byte) 0 main::@6/(byte) main::i#1 )
  [11] if((byte) main::i#2<(byte) 5) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [12] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [13] (byte) printf_uchar::uvalue#0 ← *((byte*)&(struct $0) stars + (byte) main::i#2)
  [14] call printf_uchar 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [15] phi()
  [16] call cputs 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [17] (byte) printf_uchar::uvalue#1 ← *((byte*)&(struct $0) stars+(byte) 5 + (byte) main::i#2)
  [18] call printf_uchar 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [19] phi()
  [20] call cputs 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [21] (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@3 main::@5 printf_number_buffer::@2
  [22] (to_nomodify byte*) cputs::s#5 ← phi( main::@3/(const byte*) main::s main::@5/(const byte*) main::s1 printf_number_buffer::@2/(const byte*) printf_number_buffer::buffer_digits#0 )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [23] (to_nomodify byte*) cputs::s#4 ← phi( cputs/(to_nomodify byte*) cputs::s#5 cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [24] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#4)
  [25] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#4
  [26] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [27] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [28] (byte) cputc::c#0 ← (byte) cputs::c#1
  [29] call cputc 
  to:cputs::@1

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@3
  [30] (byte) cputc::c#3 ← phi( cputs::@2/(byte) cputc::c#0 printf_number_buffer::@3/(byte) cputc::c#2 )
  [31] if((byte) cputc::c#3==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [32] *((byte*) conio_cursor_text) ← (byte) cputc::c#3
  [33] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text
  [34] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  [35] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color
  [36] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [37] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [38] (byte) conio_cursor_x ← (byte) 0
  [39] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [40] call cscroll 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [41] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [42] phi()
  [43] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1
  [44] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x
  [45] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0
  [46] (byte*) conio_cursor_text ← (byte*~) cputln::$1
  [47] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0
  [48] (byte*) conio_cursor_color ← (byte*~) cputln::$2
  [49] (byte) conio_cursor_x ← (byte) 0
  [50] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [51] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [52] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputc::@3 cputln
  [53] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [54] phi()
  [55] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [56] phi()
  [57] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [58] phi()
  [59] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [60] phi()
  [61] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [62] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28
  [63] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
  [64] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28
  [65] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
  [66] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [67] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [68] (byte) memset::c#4 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT )
  [68] (void*) memset::str#3 ← phi( cscroll::@3/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 cscroll::@4/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [69] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28
  [70] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [71] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [72] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [73] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [74] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [75] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [76] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS )
  [76] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 )
  [77] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [78] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [79] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [80] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [80] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [81] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [82] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [83] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [84] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [85] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from main::@2 main::@4
  [86] (byte) printf_uchar::uvalue#2 ← phi( main::@2/(byte) printf_uchar::uvalue#0 main::@4/(byte) printf_uchar::uvalue#1 )
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [87] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [88] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2
  [89] call uctoa 
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [90] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [91] call printf_number_buffer 
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [92] return 
  to:@return

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@2
  [93] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [94] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [95] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#0
  [96] call cputc 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [97] phi()
  [98] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [99] return 
  to:@return

(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@1
  [100] phi()
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [101] (byte*) uctoa::buffer#11 ← phi( uctoa::@4/(byte*) uctoa::buffer#14 uctoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [101] (byte) uctoa::started#2 ← phi( uctoa::@4/(byte) uctoa::started#4 uctoa/(byte) 0 )
  [101] (byte) uctoa::value#2 ← phi( uctoa::@4/(byte) uctoa::value#6 uctoa/(byte) uctoa::value#1 )
  [101] (byte) uctoa::digit#2 ← phi( uctoa::@4/(byte) uctoa::digit#1 uctoa/(byte) 0 )
  [102] if((byte) uctoa::digit#2<(byte) 3-(byte) 1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [103] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2)
  [104] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11
  [105] *((byte*) uctoa::buffer#3) ← (byte) 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [106] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [107] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_DECIMAL_VALUES_CHAR + (byte) uctoa::digit#2)
  [108] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [109] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [110] (byte*) uctoa::buffer#14 ← phi( uctoa::@7/(byte*) uctoa::buffer#11 uctoa::@6/(byte*) uctoa::buffer#4 )
  [110] (byte) uctoa::started#4 ← phi( uctoa::@7/(byte) uctoa::started#2 uctoa::@6/(byte) 1 )
  [110] (byte) uctoa::value#6 ← phi( uctoa::@7/(byte) uctoa::value#2 uctoa::@6/(byte) uctoa::value#0 )
  [111] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [112] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
  [113] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
  [114] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
  [115] call uctoa_append 
  [116] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [117] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
  [118] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11
  to:uctoa::@4

(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [119] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [120] (byte) uctoa_append::digit#2 ← phi( uctoa_append/(byte) 0 uctoa_append::@2/(byte) uctoa_append::digit#1 )
  [120] (byte) uctoa_append::value#2 ← phi( uctoa_append/(byte) uctoa_append::value#0 uctoa_append::@2/(byte) uctoa_append::value#1 )
  [121] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [122] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2)
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [123] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [124] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2
  [125] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0
  to:uctoa_append::@1

(void()) clrscr()
clrscr: scope:[clrscr]  from main
  [126] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [127] (byte*) clrscr::line_cols#5 ← phi( clrscr/(const nomodify byte*) CONIO_SCREEN_COLORS clrscr::@5/(byte*) clrscr::line_cols#1 )
  [127] (byte*) clrscr::line_text#5 ← phi( clrscr/(const nomodify byte*) CONIO_SCREEN_TEXT clrscr::@5/(byte*) clrscr::line_text#1 )
  [127] (byte) clrscr::l#2 ← phi( clrscr/(byte) 0 clrscr::@5/(byte) clrscr::l#1 )
  [128] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [129] (byte) conio_cursor_x ← (byte) 0
  [130] (byte) conio_cursor_y ← (byte) 0
  [131] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [132] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [133] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [134] (byte) clrscr::c#2 ← phi( clrscr::@1/(byte) 0 clrscr::@4/(byte) clrscr::c#1 )
  [135] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [136] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28
  [137] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28
  [138] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [139] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' '
  [140] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  [141] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2
  to:clrscr::@3


VARIABLE REGISTER WEIGHTS
(void()) clrscr()
(byte) clrscr::c
(byte) clrscr::c#1 20002.0
(byte) clrscr::c#2 12501.25
(byte) clrscr::l
(byte) clrscr::l#1 2002.0
(byte) clrscr::l#2 333.6666666666667
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#1 1001.0
(byte*) clrscr::line_cols#5 1500.375
(byte*) clrscr::line_text
(byte*) clrscr::line_text#1 667.3333333333334
(byte*) clrscr::line_text#5 1714.7142857142858
(byte*) conio_cursor_color loadstore 3.0972222375E8
(byte*) conio_cursor_text loadstore 3.054794535616439E8
(byte) conio_cursor_x loadstore 4.210526507017544E7
(byte) conio_cursor_y loadstore 4.2368421197368425E8
(void()) cputc((byte) cputc::c)
(byte) cputc::c
(byte) cputc::c#0 2.0000002E7
(byte) cputc::c#2 20002.0
(byte) cputc::c#3 1.05005002E8
(void()) cputln()
(byte*~) cputln::$1 2.000000002E9
(byte*~) cputln::$2 2.000000002E9
(word) cputln::ln_offset
(word) cputln::ln_offset#0 1.000000001E9
(void()) cputs((to_nomodify byte*) cputs::s)
(byte) cputs::c
(byte) cputs::c#1 1.0000001E7
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 5000000.5
(to_nomodify byte*) cputs::s#4 1.5050002E7
(to_nomodify byte*) cputs::s#5 100001.0
(void()) cscroll()
(byte*~) cscroll::$7 2.0000000002E10
(byte*~) cscroll::$8 2.0000000002E10
(void()) main()
(byte) main::i
(byte) main::i#1 202.0
(byte) main::i#2 50.5
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(void*) memcpy::destination
(void*) memcpy::destination#2
(byte*) memcpy::dst
(byte*) memcpy::dst#1 1.00000000000001E14
(byte*) memcpy::dst#2 1.0003333333333467E14
(byte*) memcpy::dst#4 2.00000000002E11
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(void*) memcpy::source#2
(byte*) memcpy::src
(byte*) memcpy::src#1 2.00000000000002E14
(byte*) memcpy::src#2 1.0002500000000125E14
(byte*) memcpy::src#4 1.00000000001E11
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0 1.251250000000025E13
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte) memset::c#4 1.4285714285714428E13
(byte*) memset::dst
(byte*) memset::dst#1 2.00000000000002E14
(byte*) memset::dst#2 1.3336666666666834E14
(byte*) memset::dst#4 2.00000000002E11
(byte*) memset::end
(byte*) memset::end#0 1.6683333333333668E13
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#3
(struct printf_buffer_number) printf_buffer loadstore = {}
(byte) printf_buffer_number::sign
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0 7001.0
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_zero_padding
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::padding
(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
(struct printf_format_number) printf_uchar::format
(byte) printf_uchar::format_justify_left
(byte) printf_uchar::format_min_length
(byte) printf_uchar::format_radix
(byte) printf_uchar::format_sign_always
(byte) printf_uchar::format_upper_case
(byte) printf_uchar::format_zero_padding
(byte) printf_uchar::uvalue
(byte) printf_uchar::uvalue#0 202.0
(byte) printf_uchar::uvalue#1 202.0
(byte) printf_uchar::uvalue#2 601.5
(struct $0) stars loadstore = { star_x: { (byte) $32, (byte) $28, (byte) $1e, (byte) $46, (byte) $28 }, star_y: { (byte) $32, (byte) $46, (byte) $14, (byte) $a, (byte) $50 }, speed_x: { (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2 }, speed_y: { (byte) 7, (byte) 7, (byte) 7, (byte) 7, (byte) 7 } }
(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
(byte*) uctoa::buffer
(byte*) uctoa::buffer#11 335000.50000000006
(byte*) uctoa::buffer#14 1500001.5
(byte*) uctoa::buffer#3 20002.0
(byte*) uctoa::buffer#4 2000002.0
(byte) uctoa::digit
(byte) uctoa::digit#1 2000002.0
(byte) uctoa::digit#2 307692.6153846154
(byte) uctoa::digit_value
(byte) uctoa::digit_value#0 600000.6000000001
(byte*) uctoa::digit_values
(byte) uctoa::max_digits
(byte) uctoa::radix
(byte) uctoa::started
(byte) uctoa::started#2 600000.6000000001
(byte) uctoa::started#4 1000001.0
(byte) uctoa::value
(byte) uctoa::value#0 1000001.0
(byte) uctoa::value#1 5501.0
(byte) uctoa::value#2 670001.0000000001
(byte) uctoa::value#6 1500001.5
(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
(byte*) uctoa_append::buffer
(byte*) uctoa_append::buffer#0 1375000.25
(byte) uctoa_append::digit
(byte) uctoa_append::digit#1 1.0000000001E10
(byte) uctoa_append::digit#2 1.00050000015E10
(byte) uctoa_append::return
(byte) uctoa_append::return#0 2000002.0
(byte) uctoa_append::sub
(byte) uctoa_append::sub#0 3.3335000005E9
(byte) uctoa_append::value
(byte) uctoa_append::value#0 3666667.333333333
(byte) uctoa_append::value#1 2.0000000002E10
(byte) uctoa_append::value#2 5.001833334166666E9

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ cputs::s#4 cputs::s#5 cputs::s#0 ]
[ cputc::c#3 cputc::c#0 cputc::c#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ printf_uchar::uvalue#2 printf_uchar::uvalue#0 printf_uchar::uvalue#1 ]
[ uctoa::digit#2 uctoa::digit#1 ]
[ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
[ uctoa::started#2 uctoa::started#4 ]
[ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
[ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
[ uctoa_append::digit#2 uctoa_append::digit#1 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
Added variable conio_cursor_x to live range equivalence class [ conio_cursor_x ]
Added variable conio_cursor_y to live range equivalence class [ conio_cursor_y ]
Added variable conio_cursor_text to live range equivalence class [ conio_cursor_text ]
Added variable conio_cursor_color to live range equivalence class [ conio_cursor_color ]
Added variable cputs::c#1 to live range equivalence class [ cputs::c#1 ]
Added variable cputln::ln_offset#0 to live range equivalence class [ cputln::ln_offset#0 ]
Added variable cputln::$1 to live range equivalence class [ cputln::$1 ]
Added variable cputln::$2 to live range equivalence class [ cputln::$2 ]
Added variable cscroll::$7 to live range equivalence class [ cscroll::$7 ]
Added variable cscroll::$8 to live range equivalence class [ cscroll::$8 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable memcpy::src_end#0 to live range equivalence class [ memcpy::src_end#0 ]
Added variable printf_number_buffer::buffer_sign#0 to live range equivalence class [ printf_number_buffer::buffer_sign#0 ]
Added variable uctoa::buffer#3 to live range equivalence class [ uctoa::buffer#3 ]
Added variable uctoa::digit_value#0 to live range equivalence class [ uctoa::digit_value#0 ]
Added variable uctoa_append::buffer#0 to live range equivalence class [ uctoa_append::buffer#0 ]
Added variable uctoa_append::sub#0 to live range equivalence class [ uctoa_append::sub#0 ]
Added variable uctoa_append::return#0 to live range equivalence class [ uctoa_append::return#0 ]
Added variable printf_buffer to live range equivalence class [ printf_buffer ]
Added variable stars to live range equivalence class [ stars ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ cputs::s#4 cputs::s#5 cputs::s#0 ]
[ cputc::c#3 cputc::c#0 cputc::c#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ printf_uchar::uvalue#2 printf_uchar::uvalue#0 printf_uchar::uvalue#1 ]
[ uctoa::digit#2 uctoa::digit#1 ]
[ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
[ uctoa::started#2 uctoa::started#4 ]
[ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
[ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
[ uctoa_append::digit#2 uctoa_append::digit#1 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
[ conio_cursor_x ]
[ conio_cursor_y ]
[ conio_cursor_text ]
[ conio_cursor_color ]
[ cputs::c#1 ]
[ cputln::ln_offset#0 ]
[ cputln::$1 ]
[ cputln::$2 ]
[ cscroll::$7 ]
[ cscroll::$8 ]
[ memset::end#0 ]
[ memcpy::src_end#0 ]
[ printf_number_buffer::buffer_sign#0 ]
[ uctoa::buffer#3 ]
[ uctoa::digit_value#0 ]
[ uctoa_append::buffer#0 ]
[ uctoa_append::sub#0 ]
[ uctoa_append::return#0 ]
[ printf_buffer ]
[ stars ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:3 [ cputs::s#4 cputs::s#5 cputs::s#0 ]
Allocated zp[1]:5 [ cputc::c#3 cputc::c#0 cputc::c#2 ]
Allocated zp[2]:6 [ memset::str#3 ]
Allocated zp[1]:8 [ memset::c#4 ]
Allocated zp[2]:9 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[2]:11 [ memcpy::source#2 ]
Allocated zp[2]:13 [ memcpy::destination#2 ]
Allocated zp[2]:15 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
Allocated zp[2]:17 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated zp[1]:19 [ printf_uchar::uvalue#2 printf_uchar::uvalue#0 printf_uchar::uvalue#1 ]
Allocated zp[1]:20 [ uctoa::digit#2 uctoa::digit#1 ]
Allocated zp[1]:21 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
Allocated zp[1]:22 [ uctoa::started#2 uctoa::started#4 ]
Allocated zp[2]:23 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ]
Allocated zp[1]:25 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Allocated zp[1]:26 [ uctoa_append::digit#2 uctoa_append::digit#1 ]
Allocated zp[1]:27 [ clrscr::l#2 clrscr::l#1 ]
Allocated zp[2]:28 [ clrscr::line_text#5 clrscr::line_text#1 ]
Allocated zp[2]:30 [ clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated zp[1]:32 [ clrscr::c#2 clrscr::c#1 ]
Allocated zp[1]:33 [ conio_cursor_x ]
Allocated zp[1]:34 [ conio_cursor_y ]
Allocated zp[2]:35 [ conio_cursor_text ]
Allocated zp[2]:37 [ conio_cursor_color ]
Allocated zp[1]:39 [ cputs::c#1 ]
Allocated zp[2]:40 [ cputln::ln_offset#0 ]
Allocated zp[2]:42 [ cputln::$1 ]
Allocated zp[2]:44 [ cputln::$2 ]
Allocated zp[2]:46 [ cscroll::$7 ]
Allocated zp[2]:48 [ cscroll::$8 ]
Allocated zp[2]:50 [ memset::end#0 ]
Allocated zp[2]:52 [ memcpy::src_end#0 ]
Allocated zp[1]:54 [ printf_number_buffer::buffer_sign#0 ]
Allocated zp[2]:55 [ uctoa::buffer#3 ]
Allocated zp[1]:57 [ uctoa::digit_value#0 ]
Allocated zp[2]:58 [ uctoa_append::buffer#0 ]
Allocated zp[1]:60 [ uctoa_append::sub#0 ]
Allocated zp[1]:61 [ uctoa_append::return#0 ]
Allocated mem[12] [ printf_buffer ]
Allocated mem[20] [ stars ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Stars struct of array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // The default text color
  .const CONIO_TEXTCOLOR_DEFAULT = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  // The screen width
  // The screen height
  // The screen bytes
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  .label conio_cursor_x = $21
  .label conio_cursor_y = $22
  .label conio_cursor_text = $23
  .label conio_cursor_color = $25
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor x-position
  lda #0
  sta.z conio_cursor_x
  // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor y-position
  lda #0
  sta.z conio_cursor_y
  // [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_TEXT
  sta.z conio_cursor_text
  lda #>CONIO_SCREEN_TEXT
  sta.z conio_cursor_text+1
  // [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_COLORS
  sta.z conio_cursor_color
  lda #>CONIO_SCREEN_COLORS
  sta.z conio_cursor_color+1
  // [5] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [6] call main 
  // [8] phi from @2 to main [phi:@2->main]
main_from___b2:
  jsr main
  // [7] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label i = 2
    // [9] call clrscr 
    // [126] phi from main to clrscr [phi:main->clrscr]
  clrscr_from_main:
    jsr clrscr
    // [10] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [10] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [11] if((byte) main::i#2<(byte) 5) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #5
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [12] return 
    rts
    // main::@2
  __b2:
    // [13] (byte) printf_uchar::uvalue#0 ← *((byte*)&(struct $0) stars + (byte) main::i#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda stars,y
    sta.z printf_uchar.uvalue
    // [14] call printf_uchar 
    // [86] phi from main::@2 to printf_uchar [phi:main::@2->printf_uchar]
  printf_uchar_from___b2:
    // [86] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#0 [phi:main::@2->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    // [15] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [16] call cputs 
    // [22] phi from main::@3 to cputs [phi:main::@3->cputs]
  cputs_from___b3:
    // [22] phi (to_nomodify byte*) cputs::s#5 = (const byte*) main::s [phi:main::@3->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    jmp __b4
    // main::@4
  __b4:
    // [17] (byte) printf_uchar::uvalue#1 ← *((byte*)&(struct $0) stars+(byte) 5 + (byte) main::i#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z i
    lda stars+5,y
    sta.z printf_uchar.uvalue
    // [18] call printf_uchar 
    // [86] phi from main::@4 to printf_uchar [phi:main::@4->printf_uchar]
  printf_uchar_from___b4:
    // [86] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#1 [phi:main::@4->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    // [19] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [20] call cputs 
    // [22] phi from main::@5 to cputs [phi:main::@5->cputs]
  cputs_from___b5:
    // [22] phi (to_nomodify byte*) cputs::s#5 = (const byte*) main::s1 [phi:main::@5->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    jmp __b6
    // main::@6
  __b6:
    // [21] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [10] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  __b1_from___b6:
    // [10] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
    jmp __b1
    s: .text " "
    .byte 0
    s1: .text @"\n"
    .byte 0
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(3) s)
cputs: {
    .label c = $27
    .label s = 3
    // [23] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [23] phi (to_nomodify byte*) cputs::s#4 = (to_nomodify byte*) cputs::s#5 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [24] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#4) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (s),y
    sta.z c
    // [25] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#4 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [26] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z c
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [27] return 
    rts
    // cputs::@2
  __b2:
    // [28] (byte) cputc::c#0 ← (byte) cputs::c#1 -- vbuz1=vbuz2 
    lda.z c
    sta.z cputc.c
    // [29] call cputc 
    // [30] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
  cputc_from___b2:
    // [30] phi (byte) cputc::c#3 = (byte) cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1_from___b2
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte zp(5) c)
cputc: {
    .label c = 5
    // [31] if((byte) cputc::c#3==(byte) ' ') goto cputc::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    cmp.z c
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [32] *((byte*) conio_cursor_text) ← (byte) cputc::c#3 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (conio_cursor_text),y
    // [33] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // [34] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- _deref_pbuz1=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    ldy #0
    sta (conio_cursor_color),y
    // [35] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // [36] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [37] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    jmp __b3
    // cputc::@3
  __b3:
    // [38] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [39] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [40] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputc::@return
  __breturn:
    // [41] return 
    rts
    // [42] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [43] call cputln 
    jsr cputln
    jmp __breturn
}
  // cputln
// Print a newline
cputln: {
    .label __1 = $2a
    .label __2 = $2c
    .label ln_offset = $28
    // [44] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x -- vwuz1=vbuc1_minus_vbuz2 
    sec
    lda #$28
    sbc.z conio_cursor_x
    sta.z ln_offset
    lda #0
    sbc #0
    sta.z ln_offset+1
    // [45] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0 -- pbuz1=pbuz2_plus_vwuz3 
    lda.z conio_cursor_text
    clc
    adc.z ln_offset
    sta.z __1
    lda.z conio_cursor_text+1
    adc.z ln_offset+1
    sta.z __1+1
    // [46] (byte*) conio_cursor_text ← (byte*~) cputln::$1 -- pbuz1=pbuz2 
    lda.z __1
    sta.z conio_cursor_text
    lda.z __1+1
    sta.z conio_cursor_text+1
    // [47] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0 -- pbuz1=pbuz2_plus_vwuz3 
    lda.z conio_cursor_color
    clc
    adc.z ln_offset
    sta.z __2
    lda.z conio_cursor_color+1
    adc.z ln_offset+1
    sta.z __2+1
    // [48] (byte*) conio_cursor_color ← (byte*~) cputln::$2 -- pbuz1=pbuz2 
    lda.z __2
    sta.z conio_cursor_color
    lda.z __2+1
    sta.z conio_cursor_color+1
    // [49] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [50] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [51] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [52] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    .label __7 = $2e
    .label __8 = $30
    // [53] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [54] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [55] call memcpy 
    // [76] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [76] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_TEXT
    sta.z memcpy.destination+1
    // [76] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [56] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [57] call memcpy 
    // [76] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [76] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_COLORS
    sta.z memcpy.destination+1
    // [76] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [58] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [59] call memset 
    // [68] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [68] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [68] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [60] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
  __b4_from___b3:
    jmp __b4
    // cscroll::@4
  __b4:
    // [61] call memset 
    // [68] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [68] phi (byte) memset::c#4 = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [phi:cscroll::@4->memset#0] -- vbuz1=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    sta.z memset.c
    // [68] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [62] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 -- pbuz1=pbuz2_minus_vwuc1 
    lda.z conio_cursor_text
    sec
    sbc #<$28
    sta.z __7
    lda.z conio_cursor_text+1
    sbc #>$28
    sta.z __7+1
    // [63] (byte*) conio_cursor_text ← (byte*~) cscroll::$7 -- pbuz1=pbuz2 
    lda.z __7
    sta.z conio_cursor_text
    lda.z __7+1
    sta.z conio_cursor_text+1
    // [64] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 -- pbuz1=pbuz2_minus_vwuc1 
    lda.z conio_cursor_color
    sec
    sbc #<$28
    sta.z __8
    lda.z conio_cursor_color+1
    sbc #>$28
    sta.z __8+1
    // [65] (byte*) conio_cursor_color ← (byte*~) cscroll::$8 -- pbuz1=pbuz2 
    lda.z __8
    sta.z conio_cursor_color
    lda.z __8+1
    sta.z conio_cursor_color+1
    // [66] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [67] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(6) str, byte zp(8) c)
memset: {
    .label end = $32
    .label dst = 9
    .label str = 6
    .label c = 8
    jmp __b1
    // memset::@1
  __b1:
    // [69] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [70] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 -- pbuz1=pbuz2 
    lda.z str
    sta.z dst
    lda.z str+1
    sta.z dst+1
    // [71] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [71] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [72] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [73] return 
    rts
    // memset::@3
  __b3:
    // [74] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // [75] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($d) destination, void* zp($b) source)
memcpy: {
    .label src_end = $34
    .label dst = $11
    .label src = $f
    .label source = $b
    .label destination = $d
    // [77] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [78] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 -- pbuz1=pbuz2 
    lda.z source
    sta.z src
    lda.z source+1
    sta.z src+1
    // [79] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 -- pbuz1=pbuz2 
    lda.z destination
    sta.z dst
    lda.z destination+1
    sta.z dst+1
    // [80] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [80] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [80] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [81] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [82] return 
    rts
    // memcpy::@2
  __b2:
    // [83] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [84] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [85] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // printf_uchar
// Print an unsigned char using a specific format
// printf_uchar(byte zp($13) uvalue)
printf_uchar: {
    .label uvalue = $13
    jmp __b1
    // printf_uchar::@1
  __b1:
    // [87] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [88] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2 -- vbuz1=vbuz2 
    lda.z uvalue
    sta.z uctoa.value
    // [89] call uctoa 
  // Format number into buffer
    // [100] phi from printf_uchar::@1 to uctoa [phi:printf_uchar::@1->uctoa]
  uctoa_from___b1:
    jsr uctoa
    jmp __b2
    // printf_uchar::@2
  __b2:
    // [90] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [91] call printf_number_buffer 
  // Print using format
    // [93] phi from printf_uchar::@2 to printf_number_buffer [phi:printf_uchar::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    jsr printf_number_buffer
    jmp __breturn
    // printf_uchar::@return
  __breturn:
    // [92] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp($36) buffer_sign)
printf_number_buffer: {
    .label buffer_digits = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    .label buffer_sign = $36
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [94] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z buffer_sign
    beq __b2_from___b1
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [95] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#0 -- vbuz1=vbuz2 
    lda.z buffer_sign
    sta.z cputc.c
    // [96] call cputc 
    // [30] phi from printf_number_buffer::@3 to cputc [phi:printf_number_buffer::@3->cputc]
  cputc_from___b3:
    // [30] phi (byte) cputc::c#3 = (byte) cputc::c#2 [phi:printf_number_buffer::@3->cputc#0] -- register_copy 
    jsr cputc
    // [97] phi from printf_number_buffer::@1 printf_number_buffer::@3 to printf_number_buffer::@2 [phi:printf_number_buffer::@1/printf_number_buffer::@3->printf_number_buffer::@2]
  __b2_from___b1:
  __b2_from___b3:
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [98] call cputs 
    // [22] phi from printf_number_buffer::@2 to cputs [phi:printf_number_buffer::@2->cputs]
  cputs_from___b2:
    // [22] phi (to_nomodify byte*) cputs::s#5 = (const byte*) printf_number_buffer::buffer_digits#0 [phi:printf_number_buffer::@2->cputs#0] -- pbuz1=pbuc1 
    lda #<buffer_digits
    sta.z cputs.s
    lda #>buffer_digits
    sta.z cputs.s+1
    jsr cputs
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [99] return 
    rts
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte zp($15) value, byte* zp($37) buffer)
uctoa: {
    .label digit_value = $39
    .label buffer = $37
    .label digit = $14
    .label value = $15
    .label buffer_1 = $17
    .label started = $16
    // [101] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
  __b1_from_uctoa:
    // [101] phi (byte*) uctoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer_1+1
    // [101] phi (byte) uctoa::started#2 = (byte) 0 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [101] phi (byte) uctoa::value#2 = (byte) uctoa::value#1 [phi:uctoa->uctoa::@1#2] -- register_copy 
    // [101] phi (byte) uctoa::digit#2 = (byte) 0 [phi:uctoa->uctoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // uctoa::@1
  __b1:
    // [102] if((byte) uctoa::digit#2<(byte) 3-(byte) 1) goto uctoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #3-1
    bcc __b2
    jmp __b3
    // uctoa::@3
  __b3:
    // [103] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z value
    lda DIGITS,y
    ldy #0
    sta (buffer_1),y
    // [104] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz2 
    lda.z buffer_1
    clc
    adc #1
    sta.z buffer
    lda.z buffer_1+1
    adc #0
    sta.z buffer+1
    // [105] *((byte*) uctoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa::@return
  __breturn:
    // [106] return 
    rts
    // uctoa::@2
  __b2:
    // [107] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_DECIMAL_VALUES_CHAR + (byte) uctoa::digit#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda RADIX_DECIMAL_VALUES_CHAR,y
    sta.z digit_value
    // [108] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // uctoa::@7
  __b7:
    // [109] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z digit_value
    bcs __b5
    // [110] phi from uctoa::@7 to uctoa::@4 [phi:uctoa::@7->uctoa::@4]
  __b4_from___b7:
    // [110] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#11 [phi:uctoa::@7->uctoa::@4#0] -- register_copy 
    // [110] phi (byte) uctoa::started#4 = (byte) uctoa::started#2 [phi:uctoa::@7->uctoa::@4#1] -- register_copy 
    // [110] phi (byte) uctoa::value#6 = (byte) uctoa::value#2 [phi:uctoa::@7->uctoa::@4#2] -- register_copy 
    jmp __b4
    // uctoa::@4
  __b4:
    // [111] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [101] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
  __b1_from___b4:
    // [101] phi (byte*) uctoa::buffer#11 = (byte*) uctoa::buffer#14 [phi:uctoa::@4->uctoa::@1#0] -- register_copy 
    // [101] phi (byte) uctoa::started#2 = (byte) uctoa::started#4 [phi:uctoa::@4->uctoa::@1#1] -- register_copy 
    // [101] phi (byte) uctoa::value#2 = (byte) uctoa::value#6 [phi:uctoa::@4->uctoa::@1#2] -- register_copy 
    // [101] phi (byte) uctoa::digit#2 = (byte) uctoa::digit#1 [phi:uctoa::@4->uctoa::@1#3] -- register_copy 
    jmp __b1
    // uctoa::@5
  __b5:
    // [112] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11 -- pbuz1=pbuz2 
    lda.z buffer_1
    sta.z uctoa_append.buffer
    lda.z buffer_1+1
    sta.z uctoa_append.buffer+1
    // [113] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2 -- vbuz1=vbuz2 
    lda.z value
    sta.z uctoa_append.value
    // [114] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0 -- vbuz1=vbuz2 
    lda.z digit_value
    sta.z uctoa_append.sub
    // [115] call uctoa_append 
    // [119] phi from uctoa::@5 to uctoa_append [phi:uctoa::@5->uctoa_append]
  uctoa_append_from___b5:
    jsr uctoa_append
    // [116] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2 -- vbuz1=vbuz2 
    lda.z uctoa_append.value
    sta.z uctoa_append.return
    jmp __b6
    // uctoa::@6
  __b6:
    // [117] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0 -- vbuz1=vbuz2 
    lda.z uctoa_append.return
    sta.z value
    // [118] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [110] phi from uctoa::@6 to uctoa::@4 [phi:uctoa::@6->uctoa::@4]
  __b4_from___b6:
    // [110] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#4 [phi:uctoa::@6->uctoa::@4#0] -- register_copy 
    // [110] phi (byte) uctoa::started#4 = (byte) 1 [phi:uctoa::@6->uctoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [110] phi (byte) uctoa::value#6 = (byte) uctoa::value#0 [phi:uctoa::@6->uctoa::@4#2] -- register_copy 
    jmp __b4
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp($3a) buffer, byte zp($19) value, byte zp($3c) sub)
uctoa_append: {
    .label buffer = $3a
    .label value = $19
    .label sub = $3c
    .label return = $3d
    .label digit = $1a
    // [120] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
  __b1_from_uctoa_append:
    // [120] phi (byte) uctoa_append::digit#2 = (byte) 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    // [120] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    jmp __b1
    // uctoa_append::@1
  __b1:
    // [121] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z value
    cmp.z sub
    bcs __b2
    jmp __b3
    // uctoa_append::@3
  __b3:
    // [122] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa_append::@return
  __breturn:
    // [123] return 
    rts
    // uctoa_append::@2
  __b2:
    // [124] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [125] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    // [120] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
  __b1_from___b2:
    // [120] phi (byte) uctoa_append::digit#2 = (byte) uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [120] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label c = $20
    .label line_text = $1c
    .label line_cols = $1e
    .label l = $1b
    // [127] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
  __b1_from_clrscr:
    // [127] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) CONIO_SCREEN_COLORS [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z line_cols
    lda #>CONIO_SCREEN_COLORS
    sta.z line_cols+1
    // [127] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) CONIO_SCREEN_TEXT [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z line_text
    lda #>CONIO_SCREEN_TEXT
    sta.z line_text+1
    // [127] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b1
    // clrscr::@1
  __b1:
    // [128] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #$19
    bcc __b3_from___b1
    jmp __b2
    // clrscr::@2
  __b2:
    // [129] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [130] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [131] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // [132] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [133] return 
    rts
    // [134] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b3_from___b1:
    // [134] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b3
    // clrscr::@3
  __b3:
    // [135] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z c
    cmp #$28
    bcc __b4
    jmp __b5
    // clrscr::@5
  __b5:
    // [136] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // [137] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // [138] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [127] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
  __b1_from___b5:
    // [127] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [127] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [127] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // [139] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #' '
    ldy.z c
    sta (line_text),y
    // [140] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    ldy.z c
    sta (line_cols),y
    // [141] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [134] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
  __b3_from___b4:
    // [134] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_CHAR: .byte $64, $a
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0
  stars: .byte $32, $28, $1e, $46, $28, $32, $46, $14, $a, $50, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte) conio_cursor_x ← (byte) 0 [ stars printf_buffer ] (  [ stars printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] (byte) conio_cursor_y ← (byte) 0 [ stars printf_buffer ] (  [ stars printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT [ stars printf_buffer ] (  [ stars printf_buffer ] { }  ) always clobbers reg byte a 
Statement [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS [ stars printf_buffer ] (  [ stars printf_buffer ] { }  ) always clobbers reg byte a 
Statement [24] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#4) [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#4 cputs::c#1 ] ( main:6::cputs:16 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#4 cputs::c#1 ] { }  main:6::cputs:20 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#4 cputs::c#1 ] { }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#4 cputs::c#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#4 cputs::c#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [32] *((byte*) conio_cursor_text) ← (byte) cputc::c#3 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:16::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte y 
Statement [34] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:16::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Statement [37] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:16::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [38] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:16::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [44] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x [ conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] ( main:6::cputs:16::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [45] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0 [ conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] ( main:6::cputs:16::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [46] (byte*) conio_cursor_text ← (byte*~) cputln::$1 [ conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] ( main:6::cputs:16::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [47] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0 [ conio_cursor_y conio_cursor_text cputln::$2 ] ( main:6::cputs:16::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [48] (byte*) conio_cursor_color ← (byte*~) cputln::$2 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:16::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [49] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:16::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [53] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:16::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [62] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 [ conio_cursor_y conio_cursor_color cscroll::$7 ] ( main:6::cputs:16::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [63] (byte*) conio_cursor_text ← (byte*~) cscroll::$7 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:16::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [64] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 [ conio_cursor_y conio_cursor_text cscroll::$8 ] ( main:6::cputs:16::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [65] (byte*) conio_cursor_color ← (byte*~) cscroll::$8 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:16::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [69] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::cputs:16::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ memset::c#4 ]
Statement [70] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::cputs:16::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [72] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:16::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [74] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:16::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:8 [ memset::c#4 ]
Statement [77] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:6::cputs:16::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [78] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:6::cputs:16::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [79] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:6::cputs:16::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [81] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:16::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [83] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:16::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Statement [87] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_uchar::uvalue#2 printf_buffer ] ( main:6::printf_uchar:14 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_uchar::uvalue#2 printf_buffer ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 uctoa::value#1 } }  main:6::printf_uchar:18 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_uchar::uvalue#2 printf_buffer ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 uctoa::value#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:19 [ printf_uchar::uvalue#2 printf_uchar::uvalue#0 printf_uchar::uvalue#1 ]
Statement [103] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) [ printf_buffer uctoa::buffer#11 ] ( main:6::printf_uchar:14::uctoa:89 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::buffer#11 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 uctoa::value#1 } }  main:6::printf_uchar:18::uctoa:89 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::buffer#11 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [104] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 [ printf_buffer uctoa::buffer#3 ] ( main:6::printf_uchar:14::uctoa:89 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::buffer#3 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 uctoa::value#1 } }  main:6::printf_uchar:18::uctoa:89 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::buffer#3 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 uctoa::value#1 } }  ) always clobbers reg byte a 
Statement [105] *((byte*) uctoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:6::printf_uchar:14::uctoa:89 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 uctoa::value#1 } }  main:6::printf_uchar:18::uctoa:89 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [112] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11 [ printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] ( main:6::printf_uchar:14::uctoa:89 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:6::printf_uchar:18::uctoa:89 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:20 [ uctoa::digit#2 uctoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:21 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:57 [ uctoa::digit_value#0 ]
Statement [122] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) [ uctoa_append::value#2 ] ( main:6::printf_uchar:14::uctoa:89::uctoa_append:115 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:6::printf_uchar:18::uctoa:89::uctoa_append:115 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:20 [ uctoa::digit#2 uctoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:25 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:25 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
Statement [125] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 [ uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] ( main:6::printf_uchar:14::uctoa:89::uctoa_append:115 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:6::printf_uchar:18::uctoa:89::uctoa_append:115 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:60 [ uctoa_append::sub#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:26 [ uctoa_append::digit#2 uctoa_append::digit#1 ]
Statement [129] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x ] ( main:6::clrscr:9 [ stars printf_buffer conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [130] (byte) conio_cursor_y ← (byte) 0 [ conio_cursor_x conio_cursor_y ] ( main:6::clrscr:9 [ stars printf_buffer conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [131] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT [ conio_cursor_x conio_cursor_y conio_cursor_text ] ( main:6::clrscr:9 [ stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text ] { }  ) always clobbers reg byte a 
Statement [132] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::clrscr:9 [ stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  ) always clobbers reg byte a 
Statement [136] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:6::clrscr:9 [ stars printf_buffer clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:27 [ clrscr::l#2 clrscr::l#1 ]
Statement [137] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:6::clrscr:9 [ stars printf_buffer clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [139] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ stars printf_buffer clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:32 [ clrscr::c#2 clrscr::c#1 ]
Statement [140] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ stars printf_buffer clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [1] (byte) conio_cursor_x ← (byte) 0 [ stars printf_buffer ] (  [ stars printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] (byte) conio_cursor_y ← (byte) 0 [ stars printf_buffer ] (  [ stars printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT [ stars printf_buffer ] (  [ stars printf_buffer ] { }  ) always clobbers reg byte a 
Statement [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS [ stars printf_buffer ] (  [ stars printf_buffer ] { }  ) always clobbers reg byte a 
Statement [24] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#4) [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#4 cputs::c#1 ] ( main:6::cputs:16 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#4 cputs::c#1 ] { }  main:6::cputs:20 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#4 cputs::c#1 ] { }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#4 cputs::c#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#4 cputs::c#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } }  ) always clobbers reg byte a reg byte y 
Statement [32] *((byte*) conio_cursor_text) ← (byte) cputc::c#3 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:16::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte y 
Statement [34] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:16::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Statement [37] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:16::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [38] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:16::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [44] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x [ conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] ( main:6::cputs:16::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [45] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0 [ conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] ( main:6::cputs:16::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_color cputln::ln_offset#0 cputln::$1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [46] (byte*) conio_cursor_text ← (byte*~) cputln::$1 [ conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] ( main:6::cputs:16::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color cputln::ln_offset#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [47] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0 [ conio_cursor_y conio_cursor_text cputln::$2 ] ( main:6::cputs:16::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_text cputln::$2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [48] (byte*) conio_cursor_color ← (byte*~) cputln::$2 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:16::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [49] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:16::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [53] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:16::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [62] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 [ conio_cursor_y conio_cursor_color cscroll::$7 ] ( main:6::cputs:16::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [63] (byte*) conio_cursor_text ← (byte*~) cscroll::$7 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:16::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [64] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 [ conio_cursor_y conio_cursor_text cscroll::$8 ] ( main:6::cputs:16::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [65] (byte*) conio_cursor_color ← (byte*~) cscroll::$8 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:16::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [69] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::cputs:16::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [70] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::cputs:16::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [72] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:16::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [74] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:16::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:59 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memset:61 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Statement [77] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:6::cputs:16::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [78] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:6::cputs:16::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [79] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:6::cputs:16::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [81] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:16::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a 
Statement [83] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:16::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:55 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cscroll:40::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::cputs:16::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::cputs:20::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputs:98::cputc:29::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:6::printf_uchar:14::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  main:6::printf_uchar:18::printf_number_buffer:91::cputc:96::cputln:43::cscroll:51::memcpy:57 [ main::i#2 stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#0 } }  ) always clobbers reg byte a reg byte y 
Statement [87] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_uchar::uvalue#2 printf_buffer ] ( main:6::printf_uchar:14 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_uchar::uvalue#2 printf_buffer ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 uctoa::value#1 } }  main:6::printf_uchar:18 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_uchar::uvalue#2 printf_buffer ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 uctoa::value#1 } }  ) always clobbers reg byte a 
Statement [103] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) [ printf_buffer uctoa::buffer#11 ] ( main:6::printf_uchar:14::uctoa:89 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::buffer#11 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 uctoa::value#1 } }  main:6::printf_uchar:18::uctoa:89 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::buffer#11 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [104] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 [ printf_buffer uctoa::buffer#3 ] ( main:6::printf_uchar:14::uctoa:89 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::buffer#3 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 uctoa::value#1 } }  main:6::printf_uchar:18::uctoa:89 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::buffer#3 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 uctoa::value#1 } }  ) always clobbers reg byte a 
Statement [105] *((byte*) uctoa::buffer#3) ← (byte) 0 [ printf_buffer ] ( main:6::printf_uchar:14::uctoa:89 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 uctoa::value#1 } }  main:6::printf_uchar:18::uctoa:89 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 uctoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [112] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11 [ printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] ( main:6::printf_uchar:14::uctoa:89 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:6::printf_uchar:18::uctoa:89 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::value#2 uctoa::buffer#11 uctoa::digit_value#0 uctoa_append::buffer#0 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [122] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) [ uctoa_append::value#2 ] ( main:6::printf_uchar:14::uctoa:89::uctoa_append:115 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:6::printf_uchar:18::uctoa:89::uctoa_append:115 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::value#2 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [125] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 [ uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] ( main:6::printf_uchar:14::uctoa:89::uctoa_append:115 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { printf_uchar::uvalue#0 = printf_uchar::uvalue#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  main:6::printf_uchar:18::uctoa:89::uctoa_append:115 [ main::i#2 stars conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color printf_buffer uctoa::digit#2 uctoa::buffer#11 uctoa_append::buffer#0 uctoa_append::sub#0 uctoa_append::value#1 uctoa_append::digit#1 ] { { printf_uchar::uvalue#1 = printf_uchar::uvalue#2 uctoa::value#1 } { uctoa_append::buffer#0 = uctoa::buffer#11 } { uctoa_append::value#0 = uctoa::value#2 } { uctoa_append::sub#0 = uctoa::digit_value#0 } { uctoa_append::return#0 = uctoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [129] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x ] ( main:6::clrscr:9 [ stars printf_buffer conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [130] (byte) conio_cursor_y ← (byte) 0 [ conio_cursor_x conio_cursor_y ] ( main:6::clrscr:9 [ stars printf_buffer conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [131] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT [ conio_cursor_x conio_cursor_y conio_cursor_text ] ( main:6::clrscr:9 [ stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text ] { }  ) always clobbers reg byte a 
Statement [132] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::clrscr:9 [ stars printf_buffer conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  ) always clobbers reg byte a 
Statement [136] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:6::clrscr:9 [ stars printf_buffer clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Statement [137] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:6::clrscr:9 [ stars printf_buffer clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [139] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ stars printf_buffer clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [140] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ stars printf_buffer clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[2]:3 [ cputs::s#4 cputs::s#5 cputs::s#0 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ cputc::c#3 cputc::c#0 cputc::c#2 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:6 [ memset::str#3 ] : zp[2]:6 , 
Potential registers zp[1]:8 [ memset::c#4 ] : zp[1]:8 , reg byte x , 
Potential registers zp[2]:9 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:9 , 
Potential registers zp[2]:11 [ memcpy::source#2 ] : zp[2]:11 , 
Potential registers zp[2]:13 [ memcpy::destination#2 ] : zp[2]:13 , 
Potential registers zp[2]:15 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] : zp[2]:15 , 
Potential registers zp[2]:17 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] : zp[2]:17 , 
Potential registers zp[1]:19 [ printf_uchar::uvalue#2 printf_uchar::uvalue#0 printf_uchar::uvalue#1 ] : zp[1]:19 , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ uctoa::digit#2 uctoa::digit#1 ] : zp[1]:20 , reg byte x , 
Potential registers zp[1]:21 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ] : zp[1]:21 , reg byte x , reg byte y , 
Potential registers zp[1]:22 [ uctoa::started#2 uctoa::started#4 ] : zp[1]:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:23 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] : zp[2]:23 , 
Potential registers zp[1]:25 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] : zp[1]:25 , reg byte x , 
Potential registers zp[1]:26 [ uctoa_append::digit#2 uctoa_append::digit#1 ] : zp[1]:26 , reg byte x , reg byte y , 
Potential registers zp[1]:27 [ clrscr::l#2 clrscr::l#1 ] : zp[1]:27 , reg byte x , reg byte y , 
Potential registers zp[2]:28 [ clrscr::line_text#5 clrscr::line_text#1 ] : zp[2]:28 , 
Potential registers zp[2]:30 [ clrscr::line_cols#5 clrscr::line_cols#1 ] : zp[2]:30 , 
Potential registers zp[1]:32 [ clrscr::c#2 clrscr::c#1 ] : zp[1]:32 , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ conio_cursor_x ] : zp[1]:33 , 
Potential registers zp[1]:34 [ conio_cursor_y ] : zp[1]:34 , 
Potential registers zp[2]:35 [ conio_cursor_text ] : zp[2]:35 , 
Potential registers zp[2]:37 [ conio_cursor_color ] : zp[2]:37 , 
Potential registers zp[1]:39 [ cputs::c#1 ] : zp[1]:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:40 [ cputln::ln_offset#0 ] : zp[2]:40 , 
Potential registers zp[2]:42 [ cputln::$1 ] : zp[2]:42 , 
Potential registers zp[2]:44 [ cputln::$2 ] : zp[2]:44 , 
Potential registers zp[2]:46 [ cscroll::$7 ] : zp[2]:46 , 
Potential registers zp[2]:48 [ cscroll::$8 ] : zp[2]:48 , 
Potential registers zp[2]:50 [ memset::end#0 ] : zp[2]:50 , 
Potential registers zp[2]:52 [ memcpy::src_end#0 ] : zp[2]:52 , 
Potential registers zp[1]:54 [ printf_number_buffer::buffer_sign#0 ] : zp[1]:54 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:55 [ uctoa::buffer#3 ] : zp[2]:55 , 
Potential registers zp[1]:57 [ uctoa::digit_value#0 ] : zp[1]:57 , reg byte x , reg byte y , 
Potential registers zp[2]:58 [ uctoa_append::buffer#0 ] : zp[2]:58 , 
Potential registers zp[1]:60 [ uctoa_append::sub#0 ] : zp[1]:60 , reg byte x , reg byte y , 
Potential registers zp[1]:61 [ uctoa_append::return#0 ] : zp[1]:61 , reg byte a , reg byte x , reg byte y , 
Potential registers mem[12] [ printf_buffer ] : mem[12] , 
Potential registers mem[20] [ stars ] : mem[20] , 

REGISTER UPLIFT SCOPES
Uplift Scope [memcpy] 300,125,000,000,004.25: zp[2]:15 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] 200,233,333,333,337.7: zp[2]:17 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] 12,512,500,000,000.25: zp[2]:52 [ memcpy::src_end#0 ] 0: zp[2]:11 [ memcpy::source#2 ] 0: zp[2]:13 [ memcpy::destination#2 ] 
Uplift Scope [memset] 333,566,666,666,672.4: zp[2]:9 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 16,683,333,333,333.67: zp[2]:50 [ memset::end#0 ] 14,285,714,285,714.43: zp[1]:8 [ memset::c#4 ] 0: zp[2]:6 [ memset::str#3 ] 
Uplift Scope [uctoa_append] 25,005,500,003.5: zp[1]:25 [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] 20,005,000,002.5: zp[1]:26 [ uctoa_append::digit#2 uctoa_append::digit#1 ] 3,333,500,000.5: zp[1]:60 [ uctoa_append::sub#0 ] 2,000,002: zp[1]:61 [ uctoa_append::return#0 ] 1,375,000.25: zp[2]:58 [ uctoa_append::buffer#0 ] 
Uplift Scope [cscroll] 20,000,000,002: zp[2]:46 [ cscroll::$7 ] 20,000,000,002: zp[2]:48 [ cscroll::$8 ] 
Uplift Scope [cputln] 2,000,000,002: zp[2]:42 [ cputln::$1 ] 2,000,000,002: zp[2]:44 [ cputln::$2 ] 1,000,000,001: zp[2]:40 [ cputln::ln_offset#0 ] 
Uplift Scope [] 423,684,211.97: zp[1]:34 [ conio_cursor_y ] 309,722,223.75: zp[2]:37 [ conio_cursor_color ] 305,479,453.56: zp[2]:35 [ conio_cursor_text ] 42,105,265.07: zp[1]:33 [ conio_cursor_x ] 0: mem[12] [ printf_buffer ] 0: mem[20] [ stars ] 
Uplift Scope [cputc] 125,025,006: zp[1]:5 [ cputc::c#3 cputc::c#0 cputc::c#2 ] 
Uplift Scope [cputs] 20,150,003.5: zp[2]:3 [ cputs::s#4 cputs::s#5 cputs::s#0 ] 10,000,001: zp[1]:39 [ cputs::c#1 ] 
Uplift Scope [uctoa] 3,835,004: zp[2]:23 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] 3,175,504.5: zp[1]:21 [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ] 2,307,694.62: zp[1]:20 [ uctoa::digit#2 uctoa::digit#1 ] 1,600,001.6: zp[1]:22 [ uctoa::started#2 uctoa::started#4 ] 600,000.6: zp[1]:57 [ uctoa::digit_value#0 ] 20,002: zp[2]:55 [ uctoa::buffer#3 ] 
Uplift Scope [clrscr] 32,503.25: zp[1]:32 [ clrscr::c#2 clrscr::c#1 ] 2,501.38: zp[2]:30 [ clrscr::line_cols#5 clrscr::line_cols#1 ] 2,382.05: zp[2]:28 [ clrscr::line_text#5 clrscr::line_text#1 ] 2,335.67: zp[1]:27 [ clrscr::l#2 clrscr::l#1 ] 
Uplift Scope [printf_number_buffer] 7,001: zp[1]:54 [ printf_number_buffer::buffer_sign#0 ] 
Uplift Scope [printf_uchar] 1,005.5: zp[1]:19 [ printf_uchar::uvalue#2 printf_uchar::uvalue#0 printf_uchar::uvalue#1 ] 
Uplift Scope [main] 252.5: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [RADIX] 
Uplift Scope [printf_format_number] 
Uplift Scope [printf_buffer_number] 
Uplift Scope [printf_format_string] 
Uplift Scope [$0] 

Uplifting [memcpy] best 179240 combination zp[2]:15 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] zp[2]:17 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] zp[2]:52 [ memcpy::src_end#0 ] zp[2]:11 [ memcpy::source#2 ] zp[2]:13 [ memcpy::destination#2 ] 
Uplifting [memset] best 178234 combination zp[2]:9 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:50 [ memset::end#0 ] reg byte x [ memset::c#4 ] zp[2]:6 [ memset::str#3 ] 
Uplifting [uctoa_append] best 166031 combination reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ] reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ] zp[1]:60 [ uctoa_append::sub#0 ] reg byte x [ uctoa_append::return#0 ] zp[2]:58 [ uctoa_append::buffer#0 ] 
Uplifting [cscroll] best 166031 combination zp[2]:46 [ cscroll::$7 ] zp[2]:48 [ cscroll::$8 ] 
Uplifting [cputln] best 166031 combination zp[2]:42 [ cputln::$1 ] zp[2]:44 [ cputln::$2 ] zp[2]:40 [ cputln::ln_offset#0 ] 
Uplifting [] best 166031 combination zp[1]:34 [ conio_cursor_y ] zp[2]:37 [ conio_cursor_color ] zp[2]:35 [ conio_cursor_text ] zp[1]:33 [ conio_cursor_x ] mem[12] [ printf_buffer ] mem[20] [ stars ] 
Uplifting [cputc] best 165722 combination reg byte a [ cputc::c#3 cputc::c#0 cputc::c#2 ] 
Uplifting [cputs] best 164822 combination zp[2]:3 [ cputs::s#4 cputs::s#5 cputs::s#0 ] reg byte a [ cputs::c#1 ] 
Uplifting [uctoa] best 163916 combination zp[2]:23 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ] zp[1]:20 [ uctoa::digit#2 uctoa::digit#1 ] zp[1]:22 [ uctoa::started#2 uctoa::started#4 ] zp[1]:57 [ uctoa::digit_value#0 ] zp[2]:55 [ uctoa::buffer#3 ] 
Uplifting [clrscr] best 162326 combination reg byte y [ clrscr::c#2 clrscr::c#1 ] zp[2]:30 [ clrscr::line_cols#5 clrscr::line_cols#1 ] zp[2]:28 [ clrscr::line_text#5 clrscr::line_text#1 ] reg byte x [ clrscr::l#2 clrscr::l#1 ] 
Uplifting [printf_number_buffer] best 162317 combination reg byte a [ printf_number_buffer::buffer_sign#0 ] 
Uplifting [printf_uchar] best 162254 combination reg byte x [ printf_uchar::uvalue#2 printf_uchar::uvalue#0 printf_uchar::uvalue#1 ] 
Uplifting [main] best 162254 combination zp[1]:2 [ main::i#2 main::i#1 ] 
Uplifting [RADIX] best 162254 combination 
Uplifting [printf_format_number] best 162254 combination 
Uplifting [printf_buffer_number] best 162254 combination 
Uplifting [printf_format_string] best 162254 combination 
Uplifting [$0] best 162254 combination 
Attempting to uplift remaining variables inzp[1]:60 [ uctoa_append::sub#0 ]
Uplifting [uctoa_append] best 162254 combination zp[1]:60 [ uctoa_append::sub#0 ] 
Attempting to uplift remaining variables inzp[1]:34 [ conio_cursor_y ]
Uplifting [] best 162254 combination zp[1]:34 [ conio_cursor_y ] 
Attempting to uplift remaining variables inzp[1]:33 [ conio_cursor_x ]
Uplifting [] best 162254 combination zp[1]:33 [ conio_cursor_x ] 
Attempting to uplift remaining variables inzp[1]:20 [ uctoa::digit#2 uctoa::digit#1 ]
Uplifting [uctoa] best 162254 combination zp[1]:20 [ uctoa::digit#2 uctoa::digit#1 ] 
Attempting to uplift remaining variables inzp[1]:22 [ uctoa::started#2 uctoa::started#4 ]
Uplifting [uctoa] best 162254 combination zp[1]:22 [ uctoa::started#2 uctoa::started#4 ] 
Attempting to uplift remaining variables inzp[1]:57 [ uctoa::digit_value#0 ]
Uplifting [uctoa] best 162254 combination zp[1]:57 [ uctoa::digit_value#0 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 162254 combination zp[1]:2 [ main::i#2 main::i#1 ] 
Coalescing zero page register [ zp[2]:35 [ conio_cursor_text ] ] with [ zp[2]:42 [ cputln::$1 ] ] - score: 2
Coalescing zero page register [ zp[2]:35 [ conio_cursor_text cputln::$1 ] ] with [ zp[2]:46 [ cscroll::$7 ] ] - score: 2
Coalescing zero page register [ zp[2]:37 [ conio_cursor_color ] ] with [ zp[2]:44 [ cputln::$2 ] ] - score: 2
Coalescing zero page register [ zp[2]:37 [ conio_cursor_color cputln::$2 ] ] with [ zp[2]:48 [ cscroll::$8 ] ] - score: 2
Coalescing zero page register [ zp[2]:6 [ memset::str#3 ] ] with [ zp[2]:9 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:11 [ memcpy::source#2 ] ] with [ zp[2]:15 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:13 [ memcpy::destination#2 ] ] with [ zp[2]:17 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:23 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 ] ] with [ zp[2]:55 [ uctoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:23 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 ] ] with [ zp[2]:58 [ uctoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:57 [ uctoa::digit_value#0 ] ] with [ zp[1]:60 [ uctoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:11 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] with [ zp[2]:6 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[2]:23 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 ] ] with [ zp[2]:3 [ cputs::s#4 cputs::s#5 cputs::s#0 ] ]
Coalescing zero page register [ zp[2]:28 [ clrscr::line_text#5 clrscr::line_text#1 ] ] with [ zp[2]:13 [ memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ]
Coalescing zero page register [ zp[2]:35 [ conio_cursor_text cputln::$1 cscroll::$7 ] ] with [ zp[2]:30 [ clrscr::line_cols#5 clrscr::line_cols#1 ] ]
Coalescing zero page register [ zp[2]:52 [ memcpy::src_end#0 ] ] with [ zp[2]:50 [ memset::end#0 ] ]
Coalescing zero page register [ zp[2]:40 [ cputln::ln_offset#0 ] ] with [ zp[2]:11 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Allocated (was zp[1]:20) zp[1]:3 [ uctoa::digit#2 uctoa::digit#1 ]
Allocated (was zp[1]:22) zp[1]:4 [ uctoa::started#2 uctoa::started#4 ]
Allocated (was zp[2]:23) zp[2]:5 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 cputs::s#4 cputs::s#5 cputs::s#0 ]
Allocated (was zp[2]:28) zp[2]:7 [ clrscr::line_text#5 clrscr::line_text#1 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated (was zp[1]:33) zp[1]:9 [ conio_cursor_x ]
Allocated (was zp[1]:34) zp[1]:10 [ conio_cursor_y ]
Allocated (was zp[2]:35) zp[2]:11 [ conio_cursor_text cputln::$1 cscroll::$7 clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated (was zp[2]:37) zp[2]:13 [ conio_cursor_color cputln::$2 cscroll::$8 ]
Allocated (was zp[2]:40) zp[2]:15 [ cputln::ln_offset#0 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated (was zp[2]:52) zp[2]:17 [ memcpy::src_end#0 memset::end#0 ]
Allocated (was zp[1]:57) zp[1]:19 [ uctoa::digit_value#0 uctoa_append::sub#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Stars struct of array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // The default text color
  .const CONIO_TEXTCOLOR_DEFAULT = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  // The screen width
  // The screen height
  // The screen bytes
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  .label conio_cursor_x = 9
  .label conio_cursor_y = $a
  .label conio_cursor_text = $b
  .label conio_cursor_color = $d
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor x-position
  lda #0
  sta.z conio_cursor_x
  // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor y-position
  lda #0
  sta.z conio_cursor_y
  // [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_TEXT
  sta.z conio_cursor_text
  lda #>CONIO_SCREEN_TEXT
  sta.z conio_cursor_text+1
  // [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_COLORS
  sta.z conio_cursor_color
  lda #>CONIO_SCREEN_COLORS
  sta.z conio_cursor_color+1
  // [5] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [6] call main 
  // [8] phi from @2 to main [phi:@2->main]
main_from___b2:
  jsr main
  // [7] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label i = 2
    // [9] call clrscr 
    // [126] phi from main to clrscr [phi:main->clrscr]
  clrscr_from_main:
    jsr clrscr
    // [10] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [10] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [11] if((byte) main::i#2<(byte) 5) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #5
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [12] return 
    rts
    // main::@2
  __b2:
    // [13] (byte) printf_uchar::uvalue#0 ← *((byte*)&(struct $0) stars + (byte) main::i#2) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldy.z i
    ldx stars,y
    // [14] call printf_uchar 
    // [86] phi from main::@2 to printf_uchar [phi:main::@2->printf_uchar]
  printf_uchar_from___b2:
    // [86] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#0 [phi:main::@2->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    // [15] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [16] call cputs 
    // [22] phi from main::@3 to cputs [phi:main::@3->cputs]
  cputs_from___b3:
    // [22] phi (to_nomodify byte*) cputs::s#5 = (const byte*) main::s [phi:main::@3->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    jmp __b4
    // main::@4
  __b4:
    // [17] (byte) printf_uchar::uvalue#1 ← *((byte*)&(struct $0) stars+(byte) 5 + (byte) main::i#2) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldy.z i
    ldx stars+5,y
    // [18] call printf_uchar 
    // [86] phi from main::@4 to printf_uchar [phi:main::@4->printf_uchar]
  printf_uchar_from___b4:
    // [86] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#1 [phi:main::@4->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    // [19] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [20] call cputs 
    // [22] phi from main::@5 to cputs [phi:main::@5->cputs]
  cputs_from___b5:
    // [22] phi (to_nomodify byte*) cputs::s#5 = (const byte*) main::s1 [phi:main::@5->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    jmp __b6
    // main::@6
  __b6:
    // [21] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [10] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  __b1_from___b6:
    // [10] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
    jmp __b1
    s: .text " "
    .byte 0
    s1: .text @"\n"
    .byte 0
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(5) s)
cputs: {
    .label s = 5
    // [23] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [23] phi (to_nomodify byte*) cputs::s#4 = (to_nomodify byte*) cputs::s#5 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [24] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#4) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // [25] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#4 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [26] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [27] return 
    rts
    // cputs::@2
  __b2:
    // [28] (byte) cputc::c#0 ← (byte) cputs::c#1
    // [29] call cputc 
    // [30] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
  cputc_from___b2:
    // [30] phi (byte) cputc::c#3 = (byte) cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1_from___b2
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // [31] if((byte) cputc::c#3==(byte) ' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [32] *((byte*) conio_cursor_text) ← (byte) cputc::c#3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (conio_cursor_text),y
    // [33] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // [34] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- _deref_pbuz1=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    ldy #0
    sta (conio_cursor_color),y
    // [35] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // [36] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [37] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    jmp __b3
    // cputc::@3
  __b3:
    // [38] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [39] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [40] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputc::@return
  __breturn:
    // [41] return 
    rts
    // [42] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [43] call cputln 
    jsr cputln
    jmp __breturn
}
  // cputln
// Print a newline
cputln: {
    .label __1 = $b
    .label __2 = $d
    .label ln_offset = $f
    // [44] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x -- vwuz1=vbuc1_minus_vbuz2 
    sec
    lda #$28
    sbc.z conio_cursor_x
    sta.z ln_offset
    lda #0
    sbc #0
    sta.z ln_offset+1
    // [45] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z __1
    clc
    adc.z ln_offset
    sta.z __1
    lda.z __1+1
    adc.z ln_offset+1
    sta.z __1+1
    // [46] (byte*) conio_cursor_text ← (byte*~) cputln::$1
    // [47] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z __2
    clc
    adc.z ln_offset
    sta.z __2
    lda.z __2+1
    adc.z ln_offset+1
    sta.z __2+1
    // [48] (byte*) conio_cursor_color ← (byte*~) cputln::$2
    // [49] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [50] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [51] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [52] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    .label __7 = $b
    .label __8 = $d
    // [53] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [54] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [55] call memcpy 
    // [76] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [76] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_TEXT
    sta.z memcpy.destination+1
    // [76] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [56] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [57] call memcpy 
    // [76] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [76] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_COLORS
    sta.z memcpy.destination+1
    // [76] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [58] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [59] call memset 
    // [68] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [68] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [68] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [60] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
  __b4_from___b3:
    jmp __b4
    // cscroll::@4
  __b4:
    // [61] call memset 
    // [68] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [68] phi (byte) memset::c#4 = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #CONIO_TEXTCOLOR_DEFAULT
    // [68] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [62] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __7
    sec
    sbc #<$28
    sta.z __7
    lda.z __7+1
    sbc #>$28
    sta.z __7+1
    // [63] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
    // [64] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __8
    sec
    sbc #<$28
    sta.z __8
    lda.z __8+1
    sbc #>$28
    sta.z __8+1
    // [65] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
    // [66] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [67] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($f) str, byte register(X) c)
memset: {
    .label end = $11
    .label dst = $f
    .label str = $f
    jmp __b1
    // memset::@1
  __b1:
    // [69] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [70] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [71] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [71] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [72] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [73] return 
    rts
    // memset::@3
  __b3:
    // [74] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [75] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp(7) destination, void* zp($f) source)
memcpy: {
    .label src_end = $11
    .label dst = 7
    .label src = $f
    .label source = $f
    .label destination = 7
    // [77] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [78] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
    // [79] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
    // [80] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [80] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [80] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [81] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [82] return 
    rts
    // memcpy::@2
  __b2:
    // [83] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [84] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [85] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // printf_uchar
// Print an unsigned char using a specific format
// printf_uchar(byte register(X) uvalue)
printf_uchar: {
    jmp __b1
    // printf_uchar::@1
  __b1:
    // [87] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [88] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2
    // [89] call uctoa 
  // Format number into buffer
    // [100] phi from printf_uchar::@1 to uctoa [phi:printf_uchar::@1->uctoa]
  uctoa_from___b1:
    jsr uctoa
    jmp __b2
    // printf_uchar::@2
  __b2:
    // [90] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuaa=_deref_pbuc1 
    lda printf_buffer
    // [91] call printf_number_buffer 
  // Print using format
    // [93] phi from printf_uchar::@2 to printf_number_buffer [phi:printf_uchar::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    jsr printf_number_buffer
    jmp __breturn
    // printf_uchar::@return
  __breturn:
    // [92] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte register(A) buffer_sign)
printf_number_buffer: {
    .label buffer_digits = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [94] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [95] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#0
    // [96] call cputc 
    // [30] phi from printf_number_buffer::@3 to cputc [phi:printf_number_buffer::@3->cputc]
  cputc_from___b3:
    // [30] phi (byte) cputc::c#3 = (byte) cputc::c#2 [phi:printf_number_buffer::@3->cputc#0] -- register_copy 
    jsr cputc
    // [97] phi from printf_number_buffer::@1 printf_number_buffer::@3 to printf_number_buffer::@2 [phi:printf_number_buffer::@1/printf_number_buffer::@3->printf_number_buffer::@2]
  __b2_from___b1:
  __b2_from___b3:
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [98] call cputs 
    // [22] phi from printf_number_buffer::@2 to cputs [phi:printf_number_buffer::@2->cputs]
  cputs_from___b2:
    // [22] phi (to_nomodify byte*) cputs::s#5 = (const byte*) printf_number_buffer::buffer_digits#0 [phi:printf_number_buffer::@2->cputs#0] -- pbuz1=pbuc1 
    lda #<buffer_digits
    sta.z cputs.s
    lda #>buffer_digits
    sta.z cputs.s+1
    jsr cputs
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [99] return 
    rts
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte register(X) value, byte* zp(5) buffer)
uctoa: {
    .label digit_value = $13
    .label buffer = 5
    .label digit = 3
    .label started = 4
    // [101] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
  __b1_from_uctoa:
    // [101] phi (byte*) uctoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [101] phi (byte) uctoa::started#2 = (byte) 0 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [101] phi (byte) uctoa::value#2 = (byte) uctoa::value#1 [phi:uctoa->uctoa::@1#2] -- register_copy 
    // [101] phi (byte) uctoa::digit#2 = (byte) 0 [phi:uctoa->uctoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // uctoa::@1
  __b1:
    // [102] if((byte) uctoa::digit#2<(byte) 3-(byte) 1) goto uctoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #3-1
    bcc __b2
    jmp __b3
    // uctoa::@3
  __b3:
    // [103] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // [104] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [105] *((byte*) uctoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa::@return
  __breturn:
    // [106] return 
    rts
    // uctoa::@2
  __b2:
    // [107] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_DECIMAL_VALUES_CHAR + (byte) uctoa::digit#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda RADIX_DECIMAL_VALUES_CHAR,y
    sta.z digit_value
    // [108] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    jmp __b7
    // uctoa::@7
  __b7:
    // [109] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5 -- vbuxx_ge_vbuz1_then_la1 
    cpx.z digit_value
    bcs __b5
    // [110] phi from uctoa::@7 to uctoa::@4 [phi:uctoa::@7->uctoa::@4]
  __b4_from___b7:
    // [110] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#11 [phi:uctoa::@7->uctoa::@4#0] -- register_copy 
    // [110] phi (byte) uctoa::started#4 = (byte) uctoa::started#2 [phi:uctoa::@7->uctoa::@4#1] -- register_copy 
    // [110] phi (byte) uctoa::value#6 = (byte) uctoa::value#2 [phi:uctoa::@7->uctoa::@4#2] -- register_copy 
    jmp __b4
    // uctoa::@4
  __b4:
    // [111] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [101] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
  __b1_from___b4:
    // [101] phi (byte*) uctoa::buffer#11 = (byte*) uctoa::buffer#14 [phi:uctoa::@4->uctoa::@1#0] -- register_copy 
    // [101] phi (byte) uctoa::started#2 = (byte) uctoa::started#4 [phi:uctoa::@4->uctoa::@1#1] -- register_copy 
    // [101] phi (byte) uctoa::value#2 = (byte) uctoa::value#6 [phi:uctoa::@4->uctoa::@1#2] -- register_copy 
    // [101] phi (byte) uctoa::digit#2 = (byte) uctoa::digit#1 [phi:uctoa::@4->uctoa::@1#3] -- register_copy 
    jmp __b1
    // uctoa::@5
  __b5:
    // [112] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
    // [113] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
    // [114] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
    // [115] call uctoa_append 
    // [119] phi from uctoa::@5 to uctoa_append [phi:uctoa::@5->uctoa_append]
  uctoa_append_from___b5:
    jsr uctoa_append
    // [116] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
    jmp __b6
    // uctoa::@6
  __b6:
    // [117] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
    // [118] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [110] phi from uctoa::@6 to uctoa::@4 [phi:uctoa::@6->uctoa::@4]
  __b4_from___b6:
    // [110] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#4 [phi:uctoa::@6->uctoa::@4#0] -- register_copy 
    // [110] phi (byte) uctoa::started#4 = (byte) 1 [phi:uctoa::@6->uctoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [110] phi (byte) uctoa::value#6 = (byte) uctoa::value#0 [phi:uctoa::@6->uctoa::@4#2] -- register_copy 
    jmp __b4
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp(5) buffer, byte register(X) value, byte zp($13) sub)
uctoa_append: {
    .label buffer = 5
    .label sub = $13
    // [120] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
  __b1_from_uctoa_append:
    // [120] phi (byte) uctoa_append::digit#2 = (byte) 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [120] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    jmp __b1
    // uctoa_append::@1
  __b1:
    // [121] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2 -- vbuxx_ge_vbuz1_then_la1 
    cpx.z sub
    bcs __b2
    jmp __b3
    // uctoa_append::@3
  __b3:
    // [122] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuyy 
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    jmp __breturn
    // uctoa_append::@return
  __breturn:
    // [123] return 
    rts
    // uctoa_append::@2
  __b2:
    // [124] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2 -- vbuyy=_inc_vbuyy 
    iny
    // [125] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z sub
    tax
    // [120] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
  __b1_from___b2:
    // [120] phi (byte) uctoa_append::digit#2 = (byte) uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [120] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = 7
    .label line_cols = $b
    // [127] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
  __b1_from_clrscr:
    // [127] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) CONIO_SCREEN_COLORS [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z line_cols
    lda #>CONIO_SCREEN_COLORS
    sta.z line_cols+1
    // [127] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) CONIO_SCREEN_TEXT [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z line_text
    lda #>CONIO_SCREEN_TEXT
    sta.z line_text+1
    // [127] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // clrscr::@1
  __b1:
    // [128] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b3_from___b1
    jmp __b2
    // clrscr::@2
  __b2:
    // [129] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [130] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [131] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // [132] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [133] return 
    rts
    // [134] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b3_from___b1:
    // [134] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b3
    // clrscr::@3
  __b3:
    // [135] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b4
    jmp __b5
    // clrscr::@5
  __b5:
    // [136] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // [137] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // [138] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [127] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
  __b1_from___b5:
    // [127] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [127] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [127] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // [139] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // [140] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    sta (line_cols),y
    // [141] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [134] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
  __b3_from___b4:
    // [134] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_CHAR: .byte $64, $a
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0
  stars: .byte $32, $28, $1e, $46, $28, $32, $46, $14, $a, $50, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b5
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction ldy #0
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b2 with __b1
Replacing label __b1_from_cputc with __b1
Replacing label __b2_from___b3 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b1 with __b2
Removing instruction __b1:
Removing instruction __b2_from___b1:
Removing instruction main_from___b2:
Removing instruction __bend_from___b2:
Removing instruction __b3_from___b2:
Removing instruction cputs_from___b3:
Removing instruction __b5_from___b4:
Removing instruction cputs_from___b5:
Removing instruction __b1_from_cputs:
Removing instruction __b1_from___b2:
Removing instruction cputc_from___b2:
Removing instruction __b1_from_cputc:
Removing instruction __b1_from_cscroll:
Removing instruction memcpy_from___b1:
Removing instruction __b2_from___b1:
Removing instruction memcpy_from___b2:
Removing instruction __b3_from___b2:
Removing instruction memset_from___b3:
Removing instruction __b4_from___b3:
Removing instruction memset_from___b4:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b1_from_memcpy:
Removing instruction __b1_from___b2:
Removing instruction cputc_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction cputs_from___b2:
Removing instruction __b4_from___b7:
Removing instruction uctoa_append_from___b5:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b2:
Removing instruction __bend:
Removing instruction clrscr_from_main:
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction printf_uchar_from___b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction printf_uchar_from___b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b1_from___b6:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction uctoa_from___b1:
Removing instruction __b2:
Removing instruction printf_number_buffer_from___b2:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_uctoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1_from_uctoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_clrscr:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b3_from___b1 to __b2
Succesful ASM optimization Pass5RelabelLongLabels
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts

FINAL SYMBOL TABLE
(const byte*) $0::speed_x[(number) 5]  = { fill( 5, 0) }
(const byte*) $0::speed_y[(number) 5]  = { fill( 5, 0) }
(const byte*) $0::star_x[(number) 5]  = { fill( 5, 0) }
(const byte*) $0::star_y[(number) 5]  = { fill( 5, 0) }
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify byte*) CONIO_SCREEN_COLORS = (byte*) 55296
(const nomodify byte*) CONIO_SCREEN_TEXT = (byte*) 1024
(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT = (byte) $e
(const byte*) DIGITS[]  = (byte*) "0123456789abcdef"z
(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = (byte) 1
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const byte*) RADIX_DECIMAL_VALUES_CHAR[]  = { (byte) $64, (byte) $a }
(const byte) SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = (byte) $c
(void()) clrscr()
(label) clrscr::@1
(label) clrscr::@2
(label) clrscr::@3
(label) clrscr::@4
(label) clrscr::@5
(label) clrscr::@return
(byte) clrscr::c
(byte) clrscr::c#1 reg byte y 20002.0
(byte) clrscr::c#2 reg byte y 12501.25
(byte) clrscr::l
(byte) clrscr::l#1 reg byte x 2002.0
(byte) clrscr::l#2 reg byte x 333.6666666666667
(byte*) clrscr::line_cols
(byte*) clrscr::line_cols#1 line_cols zp[2]:11 1001.0
(byte*) clrscr::line_cols#5 line_cols zp[2]:11 1500.375
(byte*) clrscr::line_text
(byte*) clrscr::line_text#1 line_text zp[2]:7 667.3333333333334
(byte*) clrscr::line_text#5 line_text zp[2]:7 1714.7142857142858
(byte*) conio_cursor_color loadstore zp[2]:13 3.0972222375E8
(byte*) conio_cursor_text loadstore zp[2]:11 3.054794535616439E8
(byte) conio_cursor_x loadstore zp[1]:9 4.210526507017544E7
(byte) conio_cursor_y loadstore zp[1]:10 4.2368421197368425E8
(void()) cputc((byte) cputc::c)
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0 reg byte a 2.0000002E7
(byte) cputc::c#2 reg byte a 20002.0
(byte) cputc::c#3 reg byte a 1.05005002E8
(void()) cputln()
(byte*~) cputln::$1 zp[2]:11 2.000000002E9
(byte*~) cputln::$2 zp[2]:13 2.000000002E9
(label) cputln::@return
(word) cputln::ln_offset
(word) cputln::ln_offset#0 ln_offset zp[2]:15 1.000000001E9
(void()) cputs((to_nomodify byte*) cputs::s)
(label) cputs::@1
(label) cputs::@2
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#1 reg byte a 1.0000001E7
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 s zp[2]:5 5000000.5
(to_nomodify byte*) cputs::s#4 s zp[2]:5 1.5050002E7
(to_nomodify byte*) cputs::s#5 s zp[2]:5 100001.0
(void()) cscroll()
(byte*~) cscroll::$7 zp[2]:11 2.0000000002E10
(byte*~) cscroll::$8 zp[2]:13 2.0000000002E10
(label) cscroll::@1
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(byte) main::i
(byte) main::i#1 i zp[1]:2 202.0
(byte) main::i#2 i zp[1]:2 50.5
(const byte*) main::s[(byte) 2]  = (byte*) " "
(const byte*) main::s1[(byte) 2]  = (byte*) "
"
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#2 destination zp[2]:7
(byte*) memcpy::dst
(byte*) memcpy::dst#1 dst zp[2]:7 1.00000000000001E14
(byte*) memcpy::dst#2 dst zp[2]:7 1.0003333333333467E14
(byte*) memcpy::dst#4 dst zp[2]:7 2.00000000002E11
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(void*) memcpy::source#2 source zp[2]:15
(byte*) memcpy::src
(byte*) memcpy::src#1 src zp[2]:15 2.00000000000002E14
(byte*) memcpy::src#2 src zp[2]:15 1.0002500000000125E14
(byte*) memcpy::src#4 src zp[2]:15 1.00000000001E11
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0 src_end zp[2]:17 1.251250000000025E13
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(byte) memset::c#4 reg byte x 1.4285714285714428E13
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:15 2.00000000000002E14
(byte*) memset::dst#2 dst zp[2]:15 1.3336666666666834E14
(byte*) memset::dst#4 dst zp[2]:15 2.00000000002E11
(byte*) memset::end
(byte*) memset::end#0 end zp[2]:17 1.6683333333333668E13
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp[2]:15
(struct printf_buffer_number) printf_buffer loadstore mem[12] = {}
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::upper_case
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
(label) printf_number_buffer::@1
(label) printf_number_buffer::@2
(label) printf_number_buffer::@3
(label) printf_number_buffer::@return
(struct printf_buffer_number) printf_number_buffer::buffer
(byte*) printf_number_buffer::buffer_digits
(const byte*) printf_number_buffer::buffer_digits#0 buffer_digits = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
(byte) printf_number_buffer::buffer_sign
(byte) printf_number_buffer::buffer_sign#0 reg byte a 7001.0
(struct printf_format_number) printf_number_buffer::format
(byte) printf_number_buffer::format_justify_left
(byte) printf_number_buffer::format_min_length
(byte) printf_number_buffer::format_radix
(byte) printf_number_buffer::format_sign_always
(byte) printf_number_buffer::format_upper_case
(byte) printf_number_buffer::format_zero_padding
(signed byte) printf_number_buffer::len
(signed byte) printf_number_buffer::padding
(void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_upper_case , (byte) printf_uchar::format_radix)
(label) printf_uchar::@1
(label) printf_uchar::@2
(label) printf_uchar::@return
(struct printf_format_number) printf_uchar::format
(byte) printf_uchar::format_justify_left
(byte) printf_uchar::format_min_length
(byte) printf_uchar::format_radix
(byte) printf_uchar::format_sign_always
(byte) printf_uchar::format_upper_case
(byte) printf_uchar::format_zero_padding
(byte) printf_uchar::uvalue
(byte) printf_uchar::uvalue#0 reg byte x 202.0
(byte) printf_uchar::uvalue#1 reg byte x 202.0
(byte) printf_uchar::uvalue#2 reg byte x 601.5
(struct $0) stars loadstore mem[20] = { star_x: { (byte) $32, (byte) $28, (byte) $1e, (byte) $46, (byte) $28 }, star_y: { (byte) $32, (byte) $46, (byte) $14, (byte) $a, (byte) $50 }, speed_x: { (byte) 2, (byte) 2, (byte) 2, (byte) 2, (byte) 2 }, speed_y: { (byte) 7, (byte) 7, (byte) 7, (byte) 7, (byte) 7 } }
(void()) uctoa((byte) uctoa::value , (byte*) uctoa::buffer , (byte) uctoa::radix)
(label) uctoa::@1
(label) uctoa::@2
(label) uctoa::@3
(label) uctoa::@4
(label) uctoa::@5
(label) uctoa::@6
(label) uctoa::@7
(label) uctoa::@return
(byte*) uctoa::buffer
(byte*) uctoa::buffer#11 buffer zp[2]:5 335000.50000000006
(byte*) uctoa::buffer#14 buffer zp[2]:5 1500001.5
(byte*) uctoa::buffer#3 buffer zp[2]:5 20002.0
(byte*) uctoa::buffer#4 buffer zp[2]:5 2000002.0
(byte) uctoa::digit
(byte) uctoa::digit#1 digit zp[1]:3 2000002.0
(byte) uctoa::digit#2 digit zp[1]:3 307692.6153846154
(byte) uctoa::digit_value
(byte) uctoa::digit_value#0 digit_value zp[1]:19 600000.6000000001
(byte*) uctoa::digit_values
(byte) uctoa::max_digits
(byte) uctoa::radix
(byte) uctoa::started
(byte) uctoa::started#2 started zp[1]:4 600000.6000000001
(byte) uctoa::started#4 started zp[1]:4 1000001.0
(byte) uctoa::value
(byte) uctoa::value#0 reg byte x 1000001.0
(byte) uctoa::value#1 reg byte x 5501.0
(byte) uctoa::value#2 reg byte x 670001.0000000001
(byte) uctoa::value#6 reg byte x 1500001.5
(byte()) uctoa_append((byte*) uctoa_append::buffer , (byte) uctoa_append::value , (byte) uctoa_append::sub)
(label) uctoa_append::@1
(label) uctoa_append::@2
(label) uctoa_append::@3
(label) uctoa_append::@return
(byte*) uctoa_append::buffer
(byte*) uctoa_append::buffer#0 buffer zp[2]:5 1375000.25
(byte) uctoa_append::digit
(byte) uctoa_append::digit#1 reg byte y 1.0000000001E10
(byte) uctoa_append::digit#2 reg byte y 1.00050000015E10
(byte) uctoa_append::return
(byte) uctoa_append::return#0 reg byte x 2000002.0
(byte) uctoa_append::sub
(byte) uctoa_append::sub#0 sub zp[1]:19 3.3335000005E9
(byte) uctoa_append::value
(byte) uctoa_append::value#0 reg byte x 3666667.333333333
(byte) uctoa_append::value#1 reg byte x 2.0000000002E10
(byte) uctoa_append::value#2 reg byte x 5.001833334166666E9

zp[1]:2 [ main::i#2 main::i#1 ]
reg byte a [ cputc::c#3 cputc::c#0 cputc::c#2 ]
reg byte x [ memset::c#4 ]
reg byte x [ printf_uchar::uvalue#2 printf_uchar::uvalue#0 printf_uchar::uvalue#1 ]
zp[1]:3 [ uctoa::digit#2 uctoa::digit#1 ]
reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
zp[1]:4 [ uctoa::started#2 uctoa::started#4 ]
zp[2]:5 [ uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 cputs::s#4 cputs::s#5 cputs::s#0 ]
reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ]
reg byte x [ clrscr::l#2 clrscr::l#1 ]
zp[2]:7 [ clrscr::line_text#5 clrscr::line_text#1 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
reg byte y [ clrscr::c#2 clrscr::c#1 ]
zp[1]:9 [ conio_cursor_x ]
zp[1]:10 [ conio_cursor_y ]
zp[2]:11 [ conio_cursor_text cputln::$1 cscroll::$7 clrscr::line_cols#5 clrscr::line_cols#1 ]
zp[2]:13 [ conio_cursor_color cputln::$2 cscroll::$8 ]
reg byte a [ cputs::c#1 ]
zp[2]:15 [ cputln::ln_offset#0 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
zp[2]:17 [ memcpy::src_end#0 memset::end#0 ]
reg byte a [ printf_number_buffer::buffer_sign#0 ]
zp[1]:19 [ uctoa::digit_value#0 uctoa_append::sub#0 ]
reg byte x [ uctoa_append::return#0 ]
mem[12] [ printf_buffer ]
mem[20] [ stars ]


FINAL ASSEMBLER
Score: 137100

  // File Comments
// Stars struct of array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // The default text color
  .const CONIO_TEXTCOLOR_DEFAULT = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  // The screen width
  // The screen height
  // The screen bytes
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  .label conio_cursor_x = 9
  .label conio_cursor_y = $a
  .label conio_cursor_text = $b
  .label conio_cursor_color = $d
  // @begin
__bbegin:
  // @1
  // conio_cursor_x = 0
  // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor x-position
  lda #0
  sta.z conio_cursor_x
  // conio_cursor_y = 0
  // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor y-position
  sta.z conio_cursor_y
  // conio_cursor_text = CONIO_SCREEN_TEXT
  // [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_TEXT
  sta.z conio_cursor_text
  lda #>CONIO_SCREEN_TEXT
  sta.z conio_cursor_text+1
  // conio_cursor_color = CONIO_SCREEN_COLORS
  // [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_COLORS
  sta.z conio_cursor_color
  lda #>CONIO_SCREEN_COLORS
  sta.z conio_cursor_color+1
  // [5] phi from @1 to @2 [phi:@1->@2]
  // @2
  // [6] call main 
  // [8] phi from @2 to main [phi:@2->main]
  jsr main
  rts
  // [7] phi from @2 to @end [phi:@2->@end]
  // @end
  // main
main: {
    .label i = 2
    // clrscr()
    // [9] call clrscr 
    // [126] phi from main to clrscr [phi:main->clrscr]
    jsr clrscr
    // [10] phi from main to main::@1 [phi:main->main::@1]
    // [10] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // main::@1
  __b1:
    // for(char i=0;i<5;i++)
    // [11] if((byte) main::i#2<(byte) 5) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #5
    bcc __b2
    // main::@return
    // }
    // [12] return 
    rts
    // main::@2
  __b2:
    // printf("%u %u\n", stars.star_x[i], stars.star_y[i])
    // [13] (byte) printf_uchar::uvalue#0 ← *((byte*)&(struct $0) stars + (byte) main::i#2) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldy.z i
    ldx stars,y
    // [14] call printf_uchar 
    // [86] phi from main::@2 to printf_uchar [phi:main::@2->printf_uchar]
    // [86] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#0 [phi:main::@2->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    // [15] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // printf("%u %u\n", stars.star_x[i], stars.star_y[i])
    // [16] call cputs 
    // [22] phi from main::@3 to cputs [phi:main::@3->cputs]
    // [22] phi (to_nomodify byte*) cputs::s#5 = (const byte*) main::s [phi:main::@3->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    // main::@4
    // printf("%u %u\n", stars.star_x[i], stars.star_y[i])
    // [17] (byte) printf_uchar::uvalue#1 ← *((byte*)&(struct $0) stars+(byte) 5 + (byte) main::i#2) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldy.z i
    ldx stars+5,y
    // [18] call printf_uchar 
    // [86] phi from main::@4 to printf_uchar [phi:main::@4->printf_uchar]
    // [86] phi (byte) printf_uchar::uvalue#2 = (byte) printf_uchar::uvalue#1 [phi:main::@4->printf_uchar#0] -- register_copy 
    jsr printf_uchar
    // [19] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // main::@5
    // printf("%u %u\n", stars.star_x[i], stars.star_y[i])
    // [20] call cputs 
    // [22] phi from main::@5 to cputs [phi:main::@5->cputs]
    // [22] phi (to_nomodify byte*) cputs::s#5 = (const byte*) main::s1 [phi:main::@5->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    // main::@6
    // for(char i=0;i<5;i++)
    // [21] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [10] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
    // [10] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
    jmp __b1
    s: .text " "
    .byte 0
    s1: .text @"\n"
    .byte 0
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(5) s)
cputs: {
    .label s = 5
    // [23] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
    // [23] phi (to_nomodify byte*) cputs::s#4 = (to_nomodify byte*) cputs::s#5 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    // cputs::@1
  __b1:
    // c=*s++
    // [24] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#4) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // while(c=*s++)
    // [25] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#4 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [26] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    // cputs::@return
    // }
    // [27] return 
    rts
    // cputs::@2
  __b2:
    // cputc(c)
    // [28] (byte) cputc::c#0 ← (byte) cputs::c#1
    // [29] call cputc 
    // [30] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
    // [30] phi (byte) cputc::c#3 = (byte) cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // if(c=='\n')
    // [31] if((byte) cputc::c#3==(byte) ' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1
    // cputc::@2
    // *conio_cursor_text++ = c
    // [32] *((byte*) conio_cursor_text) ← (byte) cputc::c#3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (conio_cursor_text),y
    // *conio_cursor_text++ = c;
    // [33] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // *conio_cursor_color++ = conio_textcolor
    // [34] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- _deref_pbuz1=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    ldy #0
    sta (conio_cursor_color),y
    // *conio_cursor_color++ = conio_textcolor;
    // [35] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // if(++conio_cursor_x==CONIO_WIDTH)
    // [36] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [37] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // cputc::@3
    // conio_cursor_x = 0
    // [38] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // ++conio_cursor_y;
    // [39] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // cscroll()
    // [40] call cscroll 
    jsr cscroll
    // cputc::@return
  __breturn:
    // }
    // [41] return 
    rts
    // [42] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
    // cputc::@1
  __b1:
    // cputln()
    // [43] call cputln 
    jsr cputln
    rts
}
  // cputln
// Print a newline
cputln: {
    .label __1 = $b
    .label __2 = $d
    .label ln_offset = $f
    // ln_offset = CONIO_WIDTH - conio_cursor_x
    // [44] (word) cputln::ln_offset#0 ← (byte) $28 - (byte) conio_cursor_x -- vwuz1=vbuc1_minus_vbuz2 
    sec
    lda #$28
    sbc.z conio_cursor_x
    sta.z ln_offset
    lda #0
    sbc #0
    sta.z ln_offset+1
    // conio_cursor_text  + ln_offset
    // [45] (byte*~) cputln::$1 ← (byte*) conio_cursor_text + (word) cputln::ln_offset#0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z __1
    clc
    adc.z ln_offset
    sta.z __1
    lda.z __1+1
    adc.z ln_offset+1
    sta.z __1+1
    // conio_cursor_text =  conio_cursor_text  + ln_offset
    // [46] (byte*) conio_cursor_text ← (byte*~) cputln::$1
    // conio_cursor_color + ln_offset
    // [47] (byte*~) cputln::$2 ← (byte*) conio_cursor_color + (word) cputln::ln_offset#0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z __2
    clc
    adc.z ln_offset
    sta.z __2
    lda.z __2+1
    adc.z ln_offset+1
    sta.z __2+1
    // conio_cursor_color = conio_cursor_color + ln_offset
    // [48] (byte*) conio_cursor_color ← (byte*~) cputln::$2
    // conio_cursor_x = 0
    // [49] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y++;
    // [50] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // cscroll()
    // [51] call cscroll 
    jsr cscroll
    // cputln::@return
    // }
    // [52] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    .label __7 = $b
    .label __8 = $d
    // if(conio_cursor_y==CONIO_HEIGHT)
    // [53] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [54] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
    // cscroll::@1
    // memcpy(CONIO_SCREEN_TEXT, CONIO_SCREEN_TEXT+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [55] call memcpy 
    // [76] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
    // [76] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_TEXT
    sta.z memcpy.destination+1
    // [76] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [56] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
    // cscroll::@2
    // memcpy(CONIO_SCREEN_COLORS, CONIO_SCREEN_COLORS+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [57] call memcpy 
    // [76] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
    // [76] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_COLORS
    sta.z memcpy.destination+1
    // [76] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [58] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
    // cscroll::@3
    // memset(CONIO_SCREEN_TEXT+CONIO_BYTES-CONIO_WIDTH, ' ', CONIO_WIDTH)
    // [59] call memset 
    // [68] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
    // [68] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [68] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [60] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
    // cscroll::@4
    // memset(CONIO_SCREEN_COLORS+CONIO_BYTES-CONIO_WIDTH, conio_textcolor, CONIO_WIDTH)
    // [61] call memset 
    // [68] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
    // [68] phi (byte) memset::c#4 = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #CONIO_TEXTCOLOR_DEFAULT
    // [68] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // cscroll::@5
    // conio_cursor_text-CONIO_WIDTH
    // [62] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __7
    sec
    sbc #<$28
    sta.z __7
    lda.z __7+1
    sbc #>$28
    sta.z __7+1
    // conio_cursor_text = conio_cursor_text-CONIO_WIDTH
    // [63] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
    // conio_cursor_color-CONIO_WIDTH
    // [64] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __8
    sec
    sbc #<$28
    sta.z __8
    lda.z __8+1
    sbc #>$28
    sta.z __8+1
    // conio_cursor_color = conio_cursor_color-CONIO_WIDTH
    // [65] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
    // conio_cursor_y--;
    // [66] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    // cscroll::@return
  __breturn:
    // }
    // [67] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($f) str, byte register(X) c)
memset: {
    .label end = $11
    .label dst = $f
    .label str = $f
    // memset::@1
    // end = (char*)str + num
    // [69] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [70] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [71] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [71] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [72] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
    // }
    // [73] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [74] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [75] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp(7) destination, void* zp($f) source)
memcpy: {
    .label src_end = $11
    .label dst = 7
    .label src = $f
    .label source = $f
    .label destination = 7
    // src_end = (char*)source+num
    // [77] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [78] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
    // [79] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
    // [80] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
    // [80] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [80] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [81] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    // memcpy::@return
    // }
    // [82] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [83] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [84] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [85] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1
}
  // printf_uchar
// Print an unsigned char using a specific format
// printf_uchar(byte register(X) uvalue)
printf_uchar: {
    // printf_uchar::@1
    // printf_buffer.sign = format.sign_always?'+':0
    // [87] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // uctoa(uvalue, printf_buffer.digits, format.radix)
    // [88] (byte) uctoa::value#1 ← (byte) printf_uchar::uvalue#2
    // [89] call uctoa 
  // Format number into buffer
    // [100] phi from printf_uchar::@1 to uctoa [phi:printf_uchar::@1->uctoa]
    jsr uctoa
    // printf_uchar::@2
    // printf_number_buffer(printf_buffer, format)
    // [90] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer) -- vbuaa=_deref_pbuc1 
    lda printf_buffer
    // [91] call printf_number_buffer 
  // Print using format
    // [93] phi from printf_uchar::@2 to printf_number_buffer [phi:printf_uchar::@2->printf_number_buffer]
    jsr printf_number_buffer
    // printf_uchar::@return
    // }
    // [92] return 
    rts
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte register(A) buffer_sign)
printf_number_buffer: {
    .label buffer_digits = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    // printf_number_buffer::@1
    // if(buffer.sign)
    // [94] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b2
    // printf_number_buffer::@3
    // cputc(buffer.sign)
    // [95] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#0
    // [96] call cputc 
    // [30] phi from printf_number_buffer::@3 to cputc [phi:printf_number_buffer::@3->cputc]
    // [30] phi (byte) cputc::c#3 = (byte) cputc::c#2 [phi:printf_number_buffer::@3->cputc#0] -- register_copy 
    jsr cputc
    // [97] phi from printf_number_buffer::@1 printf_number_buffer::@3 to printf_number_buffer::@2 [phi:printf_number_buffer::@1/printf_number_buffer::@3->printf_number_buffer::@2]
    // printf_number_buffer::@2
  __b2:
    // cputs(buffer.digits)
    // [98] call cputs 
    // [22] phi from printf_number_buffer::@2 to cputs [phi:printf_number_buffer::@2->cputs]
    // [22] phi (to_nomodify byte*) cputs::s#5 = (const byte*) printf_number_buffer::buffer_digits#0 [phi:printf_number_buffer::@2->cputs#0] -- pbuz1=pbuc1 
    lda #<buffer_digits
    sta.z cputs.s
    lda #>buffer_digits
    sta.z cputs.s+1
    jsr cputs
    // printf_number_buffer::@return
    // }
    // [99] return 
    rts
}
  // uctoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// uctoa(byte register(X) value, byte* zp(5) buffer)
uctoa: {
    .label digit_value = $13
    .label buffer = 5
    .label digit = 3
    .label started = 4
    // [101] phi from uctoa to uctoa::@1 [phi:uctoa->uctoa::@1]
    // [101] phi (byte*) uctoa::buffer#11 = (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:uctoa->uctoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [101] phi (byte) uctoa::started#2 = (byte) 0 [phi:uctoa->uctoa::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z started
    // [101] phi (byte) uctoa::value#2 = (byte) uctoa::value#1 [phi:uctoa->uctoa::@1#2] -- register_copy 
    // [101] phi (byte) uctoa::digit#2 = (byte) 0 [phi:uctoa->uctoa::@1#3] -- vbuz1=vbuc1 
    sta.z digit
    // uctoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [102] if((byte) uctoa::digit#2<(byte) 3-(byte) 1) goto uctoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #3-1
    bcc __b2
    // uctoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [103] *((byte*) uctoa::buffer#11) ← *((const byte*) DIGITS + (byte) uctoa::value#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [104] (byte*) uctoa::buffer#3 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [105] *((byte*) uctoa::buffer#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // uctoa::@return
    // }
    // [106] return 
    rts
    // uctoa::@2
  __b2:
    // digit_value = digit_values[digit]
    // [107] (byte) uctoa::digit_value#0 ← *((const byte*) RADIX_DECIMAL_VALUES_CHAR + (byte) uctoa::digit#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z digit
    lda RADIX_DECIMAL_VALUES_CHAR,y
    sta.z digit_value
    // if (started || value >= digit_value)
    // [108] if((byte) 0!=(byte) uctoa::started#2) goto uctoa::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z started
    bne __b5
    // uctoa::@7
    // [109] if((byte) uctoa::value#2>=(byte) uctoa::digit_value#0) goto uctoa::@5 -- vbuxx_ge_vbuz1_then_la1 
    cpx.z digit_value
    bcs __b5
    // [110] phi from uctoa::@7 to uctoa::@4 [phi:uctoa::@7->uctoa::@4]
    // [110] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#11 [phi:uctoa::@7->uctoa::@4#0] -- register_copy 
    // [110] phi (byte) uctoa::started#4 = (byte) uctoa::started#2 [phi:uctoa::@7->uctoa::@4#1] -- register_copy 
    // [110] phi (byte) uctoa::value#6 = (byte) uctoa::value#2 [phi:uctoa::@7->uctoa::@4#2] -- register_copy 
    // uctoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [111] (byte) uctoa::digit#1 ← ++ (byte) uctoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [101] phi from uctoa::@4 to uctoa::@1 [phi:uctoa::@4->uctoa::@1]
    // [101] phi (byte*) uctoa::buffer#11 = (byte*) uctoa::buffer#14 [phi:uctoa::@4->uctoa::@1#0] -- register_copy 
    // [101] phi (byte) uctoa::started#2 = (byte) uctoa::started#4 [phi:uctoa::@4->uctoa::@1#1] -- register_copy 
    // [101] phi (byte) uctoa::value#2 = (byte) uctoa::value#6 [phi:uctoa::@4->uctoa::@1#2] -- register_copy 
    // [101] phi (byte) uctoa::digit#2 = (byte) uctoa::digit#1 [phi:uctoa::@4->uctoa::@1#3] -- register_copy 
    jmp __b1
    // uctoa::@5
  __b5:
    // uctoa_append(buffer++, value, digit_value)
    // [112] (byte*) uctoa_append::buffer#0 ← (byte*) uctoa::buffer#11
    // [113] (byte) uctoa_append::value#0 ← (byte) uctoa::value#2
    // [114] (byte) uctoa_append::sub#0 ← (byte) uctoa::digit_value#0
    // [115] call uctoa_append 
    // [119] phi from uctoa::@5 to uctoa_append [phi:uctoa::@5->uctoa_append]
    jsr uctoa_append
    // uctoa_append(buffer++, value, digit_value)
    // [116] (byte) uctoa_append::return#0 ← (byte) uctoa_append::value#2
    // uctoa::@6
    // value = uctoa_append(buffer++, value, digit_value)
    // [117] (byte) uctoa::value#0 ← (byte) uctoa_append::return#0
    // value = uctoa_append(buffer++, value, digit_value);
    // [118] (byte*) uctoa::buffer#4 ← ++ (byte*) uctoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [110] phi from uctoa::@6 to uctoa::@4 [phi:uctoa::@6->uctoa::@4]
    // [110] phi (byte*) uctoa::buffer#14 = (byte*) uctoa::buffer#4 [phi:uctoa::@6->uctoa::@4#0] -- register_copy 
    // [110] phi (byte) uctoa::started#4 = (byte) 1 [phi:uctoa::@6->uctoa::@4#1] -- vbuz1=vbuc1 
    lda #1
    sta.z started
    // [110] phi (byte) uctoa::value#6 = (byte) uctoa::value#0 [phi:uctoa::@6->uctoa::@4#2] -- register_copy 
    jmp __b4
}
  // uctoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// uctoa_append(byte* zp(5) buffer, byte register(X) value, byte zp($13) sub)
uctoa_append: {
    .label buffer = 5
    .label sub = $13
    // [120] phi from uctoa_append to uctoa_append::@1 [phi:uctoa_append->uctoa_append::@1]
    // [120] phi (byte) uctoa_append::digit#2 = (byte) 0 [phi:uctoa_append->uctoa_append::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [120] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#0 [phi:uctoa_append->uctoa_append::@1#1] -- register_copy 
    // uctoa_append::@1
  __b1:
    // while (value >= sub)
    // [121] if((byte) uctoa_append::value#2>=(byte) uctoa_append::sub#0) goto uctoa_append::@2 -- vbuxx_ge_vbuz1_then_la1 
    cpx.z sub
    bcs __b2
    // uctoa_append::@3
    // *buffer = DIGITS[digit]
    // [122] *((byte*) uctoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) uctoa_append::digit#2) -- _deref_pbuz1=pbuc1_derefidx_vbuyy 
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // uctoa_append::@return
    // }
    // [123] return 
    rts
    // uctoa_append::@2
  __b2:
    // digit++;
    // [124] (byte) uctoa_append::digit#1 ← ++ (byte) uctoa_append::digit#2 -- vbuyy=_inc_vbuyy 
    iny
    // value -= sub
    // [125] (byte) uctoa_append::value#1 ← (byte) uctoa_append::value#2 - (byte) uctoa_append::sub#0 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z sub
    tax
    // [120] phi from uctoa_append::@2 to uctoa_append::@1 [phi:uctoa_append::@2->uctoa_append::@1]
    // [120] phi (byte) uctoa_append::digit#2 = (byte) uctoa_append::digit#1 [phi:uctoa_append::@2->uctoa_append::@1#0] -- register_copy 
    // [120] phi (byte) uctoa_append::value#2 = (byte) uctoa_append::value#1 [phi:uctoa_append::@2->uctoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = 7
    .label line_cols = $b
    // [127] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
    // [127] phi (byte*) clrscr::line_cols#5 = (const nomodify byte*) CONIO_SCREEN_COLORS [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z line_cols
    lda #>CONIO_SCREEN_COLORS
    sta.z line_cols+1
    // [127] phi (byte*) clrscr::line_text#5 = (const nomodify byte*) CONIO_SCREEN_TEXT [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z line_text
    lda #>CONIO_SCREEN_TEXT
    sta.z line_text+1
    // [127] phi (byte) clrscr::l#2 = (byte) 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    // clrscr::@1
  __b1:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [128] if((byte) clrscr::l#2<(byte) $19) goto clrscr::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b2
    // clrscr::@2
    // conio_cursor_x = 0
    // [129] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y = 0
    // [130] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
    sta.z conio_cursor_y
    // conio_cursor_text = CONIO_SCREEN_TEXT
    // [131] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // conio_cursor_color = CONIO_SCREEN_COLORS
    // [132] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    // clrscr::@return
    // }
    // [133] return 
    rts
    // [134] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b2:
    // [134] phi (byte) clrscr::c#2 = (byte) 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuyy=vbuc1 
    ldy #0
    // clrscr::@3
  __b3:
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [135] if((byte) clrscr::c#2<(byte) $28) goto clrscr::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b4
    // clrscr::@5
    // line_text += CONIO_WIDTH
    // [136] (byte*) clrscr::line_text#1 ← (byte*) clrscr::line_text#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // line_cols += CONIO_WIDTH
    // [137] (byte*) clrscr::line_cols#1 ← (byte*) clrscr::line_cols#5 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [138] (byte) clrscr::l#1 ← ++ (byte) clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [127] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
    // [127] phi (byte*) clrscr::line_cols#5 = (byte*) clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [127] phi (byte*) clrscr::line_text#5 = (byte*) clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [127] phi (byte) clrscr::l#2 = (byte) clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // line_text[c] = ' '
    // [139] *((byte*) clrscr::line_text#5 + (byte) clrscr::c#2) ← (byte) ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // line_cols[c] = conio_textcolor
    // [140] *((byte*) clrscr::line_cols#5 + (byte) clrscr::c#2) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    sta (line_cols),y
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [141] (byte) clrscr::c#1 ← ++ (byte) clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [134] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
    // [134] phi (byte) clrscr::c#2 = (byte) clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // File Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_CHAR: .byte $64, $a
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0
  stars: .byte $32, $28, $1e, $46, $28, $32, $46, $14, $a, $50, 2, 2, 2, 2, 2, 7, 7, 7, 7, 7

