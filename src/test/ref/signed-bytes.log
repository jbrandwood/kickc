
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from __start
  (byte) main::j#0 ← (byte) 0
  (signed byte) main::i#0 ← (signed byte) -$7f
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::j#3 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#1 )
  (signed byte) main::i#2 ← phi( main/(signed byte) main::i#0 main::@2/(signed byte) main::i#1 )
  (bool~) main::$0 ← (signed byte) main::i#2 < (number) $7f
  if((bool~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::j#2 ← phi( main::@1/(byte) main::j#3 )
  (signed byte) main::i#3 ← phi( main::@1/(signed byte) main::i#2 )
  *((const byte*) main::screen + (byte) main::j#2) ← (byte)(signed byte) main::i#3
  (signed byte) main::i#1 ← ++ (signed byte) main::i#3
  (byte) main::j#1 ← ++ (byte) main::j#2
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) __start()
(label) __start::@1
(label) __start::@return
(void()) main()
(bool~) main::$0
(label) main::@1
(label) main::@2
(label) main::@return
(signed byte) main::i
(signed byte) main::i#0
(signed byte) main::i#1
(signed byte) main::i#2
(signed byte) main::i#3
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2
(byte) main::j#3
(const byte*) main::screen = (byte*)(number) $400

Adding number conversion cast (snumber) $7f in (bool~) main::$0 ← (signed byte) main::i#2 < (number) $7f
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $7f
Successful SSA optimization PassNCastSimplification
Finalized signed number type (signed byte) $7f
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::i#2 = main::i#3 
Alias main::j#2 = main::j#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$0 [4] if((signed byte) main::i#2<(signed byte) $7f) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::j#0 = 0
Constant (const signed byte) main::i#0 = -$7f
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const signed byte) main::i#0
Constant inlined main::i#0 = (signed byte) -$7f
Constant inlined main::j#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [7] main::i#4 ← main::i#1
Coalesced [8] main::j#4 ← main::j#1
Coalesced down to 2 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] (byte) main::j#2 ← phi( main/(byte) 0 main::@2/(byte) main::j#1 )
  [1] (signed byte) main::i#2 ← phi( main/(signed byte) -$7f main::@2/(signed byte) main::i#1 )
  [2] if((signed byte) main::i#2<(signed byte) $7f) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [3] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [4] *((const byte*) main::screen + (byte) main::j#2) ← (byte)(signed byte) main::i#2
  [5] (signed byte) main::i#1 ← ++ (signed byte) main::i#2
  [6] (byte) main::j#1 ← ++ (byte) main::j#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(signed byte) main::i
(signed byte) main::i#1 11.0
(signed byte) main::i#2 11.0
(byte) main::j
(byte) main::j#1 22.0
(byte) main::j#2 8.25

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::j#2 main::j#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    .label i = 2
    .label j = 3
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::j#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    // [1] phi (signed byte) main::i#2 = (signed byte) -$7f [phi:main->main::@1#1] -- vbsz1=vbsc1 
    lda #-$7f
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [2] if((signed byte) main::i#2<(signed byte) $7f) goto main::@2 -- vbsz1_lt_vbsc1_then_la1 
    lda.z i
    sec
    sbc #$7f
    bvc !+
    eor #$80
  !:
    bmi __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@2
  __b2:
    // [4] *((const byte*) main::screen + (byte) main::j#2) ← (byte)(signed byte) main::i#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z i
    ldy.z j
    sta screen,y
    // [5] (signed byte) main::i#1 ← ++ (signed byte) main::i#2 -- vbsz1=_inc_vbsz1 
    inc.z i
    // [6] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi (signed byte) main::i#2 = (signed byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] if((signed byte) main::i#2<(signed byte) $7f) goto main::@2 [ main::i#2 main::j#2 ] (  [ main::i#2 main::j#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::j#2 main::j#1 ]
Statement [4] *((const byte*) main::screen + (byte) main::j#2) ← (byte)(signed byte) main::i#2 [ main::i#2 main::j#2 ] (  [ main::i#2 main::j#2 ] { }  ) always clobbers reg byte a 
Statement [2] if((signed byte) main::i#2<(signed byte) $7f) goto main::@2 [ main::i#2 main::j#2 ] (  [ main::i#2 main::j#2 ] { }  ) always clobbers reg byte a 
Statement [4] *((const byte*) main::screen + (byte) main::j#2) ← (byte)(signed byte) main::i#2 [ main::i#2 main::j#2 ] (  [ main::i#2 main::j#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::j#2 main::j#1 ] : zp[1]:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 30.25: zp[1]:3 [ main::j#2 main::j#1 ] 22: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 376 combination reg byte y [ main::j#2 main::j#1 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 376 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::j#2 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [1] phi (signed byte) main::i#2 = (signed byte) -$7f [phi:main->main::@1#1] -- vbsxx=vbsc1 
    ldx #-$7f
    jmp __b1
    // main::@1
  __b1:
    // [2] if((signed byte) main::i#2<(signed byte) $7f) goto main::@2 -- vbsxx_lt_vbsc1_then_la1 
    txa
    sec
    sbc #$7f
    bvc !+
    eor #$80
  !:
    bmi __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@2
  __b2:
    // [4] *((const byte*) main::screen + (byte) main::j#2) ← (byte)(signed byte) main::i#2 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta screen,y
    // [5] (signed byte) main::i#1 ← ++ (signed byte) main::i#2 -- vbsxx=_inc_vbsxx 
    inx
    // [6] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuyy=_inc_vbuyy 
    iny
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi (signed byte) main::i#2 = (signed byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(signed byte) main::i
(signed byte) main::i#1 reg byte x 11.0
(signed byte) main::i#2 reg byte x 11.0
(byte) main::j
(byte) main::j#1 reg byte y 22.0
(byte) main::j#2 reg byte y 8.25
(const byte*) main::screen = (byte*) 1024

reg byte x [ main::i#2 main::i#1 ]
reg byte y [ main::j#2 main::j#1 ]


FINAL ASSEMBLER
Score: 316

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (byte) main::j#2 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [1] phi (signed byte) main::i#2 = (signed byte) -$7f [phi:main->main::@1#1] -- vbsxx=vbsc1 
    ldx #-$7f
    // main::@1
  __b1:
    // while(i<127)
    // [2] if((signed byte) main::i#2<(signed byte) $7f) goto main::@2 -- vbsxx_lt_vbsc1_then_la1 
    txa
    sec
    sbc #$7f
    bvc !+
    eor #$80
  !:
    bmi __b2
    // main::@return
    // }
    // [3] return 
    rts
    // main::@2
  __b2:
    // screen[j] = (byte)i
    // [4] *((const byte*) main::screen + (byte) main::j#2) ← (byte)(signed byte) main::i#2 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta screen,y
    // i++;
    // [5] (signed byte) main::i#1 ← ++ (signed byte) main::i#2 -- vbsxx=_inc_vbsxx 
    inx
    // j++;
    // [6] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuyy=_inc_vbuyy 
    iny
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi (signed byte) main::i#2 = (signed byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
}
  // File Data

