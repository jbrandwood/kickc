Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  (byte) b#7 ← phi( _start::@1/(byte) b#14 )
  *((const nomodify byte*) SCREEN + (number) 0) ← (byte) b#7
  to:main::@return
main::@return: scope:[main]  from main main::@2
  (byte) b#8 ← phi( main/(byte) b#7 main::@2/(byte) b#1 )
  (byte) b#0 ← (byte) b#8
  return 
  to:@return
main::@1: scope:[main]  from
  (byte) b#15 ← phi( )
  call bb 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) b#9 ← phi( main::@1/(byte) b#3 )
  (byte) b#1 ← (byte) b#9
  *((const nomodify byte*) SCREEN + (number) 1) ← (byte) b#1
  to:main::@return

(void()) bb()
bb: scope:[bb]  from main::@1
  (byte) b#10 ← phi( main::@1/(byte) b#15 )
  (byte) b#2 ← ++ (byte) b#10
  to:bb::@return
bb::@return: scope:[bb]  from bb
  (byte) b#11 ← phi( bb/(byte) b#2 )
  (byte) b#3 ← (byte) b#11
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (byte) b#4 ← (byte) 0
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  (byte) b#14 ← phi( _start::_init1/(byte) b#4 )
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  (byte) b#12 ← phi( _start::@1/(byte) b#0 )
  (byte) b#5 ← (byte) b#12
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  (byte) b#13 ← phi( _start::@2/(byte) b#5 )
  (byte) b#6 ← (byte) b#13
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(byte) b
(byte) b#0
(byte) b#1
(byte) b#10
(byte) b#11
(byte) b#12
(byte) b#13
(byte) b#14
(byte) b#15
(byte) b#2
(byte) b#3
(byte) b#4
(byte) b#5
(byte) b#6
(byte) b#7
(byte) b#8
(byte) b#9
(void()) bb()
(label) bb::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return

Adding number conversion cast (unumber) 0 in *((const nomodify byte*) SCREEN + (number) 0) ← (byte) b#7
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) SCREEN + (number) 1) ← (byte) b#1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias b#0 = b#8 
Alias b#1 = b#9 
Alias b#11 = b#2 b#3 
Alias b#14 = b#4 
Alias b#12 = b#5 b#13 b#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) b#7 (byte) b#14
Identical Phi Values (byte) b#1 (byte) b#11
Identical Phi Values (byte) b#10 (byte) b#15
Identical Phi Values (byte) b#12 (byte) b#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte) b#14 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN in [1] *((const nomodify byte*) SCREEN + (byte) 0) ← (const byte) b#14
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable - keeping the phi block (byte) b#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte) b#15 from unused block main::@1
Eliminating variable (byte) b#11 from unused block bb
Removing unused block main::@1
Removing unused block main::@2
Removing unused procedure bb
Removing unused procedure block bb
Removing unused procedure block bb::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify byte*) SCREEN) ← (const byte) b#14
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) b
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test code after return in main()
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const b = 0
  .label SCREEN = $400
  // main
main: {
    // [0] *((const nomodify byte*) SCREEN) ← (const byte) b#14 -- _deref_pbuc1=vbuc2 
    lda #b
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify byte*) SCREEN) ← (const byte) b#14 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 15 combination 
Uplifting [] best 15 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test code after return in main()
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const b = 0
  .label SCREEN = $400
  // main
main: {
    // [0] *((const nomodify byte*) SCREEN) ← (const byte) b#14 -- _deref_pbuc1=vbuc2 
    lda #b
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(byte) b
(const byte) b#14 b = (byte) 0
(void()) main()
(label) main::@return



FINAL ASSEMBLER
Score: 12

  // File Comments
// Test code after return in main()
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const b = 0
  .label SCREEN = $400
  // main
main: {
    // SCREEN[0] = b
    // [0] *((const nomodify byte*) SCREEN) ← (const byte) b#14 -- _deref_pbuc1=vbuc2 
    lda #b
    sta SCREEN
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data

