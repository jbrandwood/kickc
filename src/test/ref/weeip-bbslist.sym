constant byte* const COLORRAM = (byte*) 55296
constant byte* const DEFAULT_SCREEN = (byte*) 1024
constant byte* DIGITS[]  = "0123456789abcdef"z
constant const byte LIGHT_BLUE = $e
constant byte OFFSET_STRUCT_BBS_HOST_NAME = 2
constant byte OFFSET_STRUCT_BBS_PORT_NUMBER = 4
constant byte OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
constant byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant word* RADIX_DECIMAL_VALUES[]  = { $2710, $3e8, $64, $a }
constant byte SIZEOF_STRUCT_BBS = 6
constant byte SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
constant struct MOS6569_VICII* const VICII = (struct MOS6569_VICII*) 53248
void __start()
constant byte* bbs_host_name[$f]  = "byob.hopto.org"
constant byte* bbs_host_name1[$14]  = "rapidfire.hopto.org"
constant byte* bbs_host_name10[$16]  = "bbs.jammingsignal.com"
constant byte* bbs_host_name11[$19]  = "centronian.servebeer.com"
constant byte* bbs_host_name12[$11]  = "aubbs.dyndns.org"
constant byte* bbs_host_name13[$13]  = "oasisbbs.hopto.org"
constant byte* bbs_host_name14[$13]  = "bbs.thediskbox.com"
constant byte* bbs_host_name15[$19]  = "cottonwoodbbs.dyndns.org"
constant byte* bbs_host_name18[$16]  = "madworld.bounceme.net"
constant byte* bbs_host_name19[$10]  = "bbs.thejlab.com"
constant byte* bbs_host_name2[$13]  = "antidote.hopto.org"
constant byte* bbs_host_name20[$15]  = "hotwirebbs.zapto.org"
constant byte* bbs_host_name21[$18]  = "endlesschaos.dyndns.org"
constant byte* bbs_host_name22[$19]  = "borderlinebbs.dyndns.org"
constant byte* bbs_host_name23[$16]  = "raveolution.hopto.org"
constant byte* bbs_host_name24[$16]  = "theedgebbs.dyndns.org"
constant byte* bbs_host_name25[$14]  = "F96NG92-L.fritz.box"
constant byte* bbs_host_name3[$18]  = "wizardsrealm.c64bbs.org"
constant byte* bbs_host_name4[$15]  = "the-hidden.hopto.org"
constant byte* bbs_host_name5[$13]  = "eagelbird.ddns.net"
constant byte* bbs_host_name6[$c]  = "scorp.us.to"
constant byte* bbs_host_name7[$14]  = "maraud.dynalias.com"
constant byte* bbs_host_name8[$f]  = "cib.dyndns.org"
constant byte* bbs_host_name9[$1d]  = "64vintageremixbbs.dyndns.org"
constant const struct bbs* bbs_list[$1b]  = { { name: bbs_name, host_name: bbs_host_name, port_number: $fa80 }, { name: bbs_name1, host_name: bbs_host_name1, port_number: $fa80 }, { name: bbs_name2, host_name: bbs_host_name2, port_number: $fa80 }, { name: bbs_name3, host_name: bbs_host_name3, port_number: $17 }, { name: bbs_name4, host_name: bbs_host_name4, port_number: $fa80 }, { name: bbs_name5, host_name: bbs_host_name5, port_number: $1900 }, { name: bbs_name6, host_name: bbs_host_name6, port_number: $17 }, { name: bbs_name7, host_name: bbs_host_name7, port_number: $1900 }, { name: bbs_name8, host_name: bbs_host_name8, port_number: $1900 }, { name: bbs_name9, host_name: bbs_host_name9, port_number: $1900 }, { name: bbs_name10, host_name: bbs_host_name10, port_number: $17 }, { name: bbs_name11, host_name: bbs_host_name11, port_number: $1900 }, { name: bbs_name12, host_name: bbs_host_name12, port_number: $8fc }, { name: bbs_name13, host_name: bbs_host_name13, port_number: $1900 }, { name: bbs_name14, host_name: bbs_host_name14, port_number: $1900 }, { name: bbs_name15, host_name: bbs_host_name15, port_number: $1966 }, { name: bbs_name16, host_name: bbs_host_name8, port_number: $1904 }, { name: bbs_name17, host_name: bbs_host_name1, port_number: $fa80 }, { name: bbs_name18, host_name: bbs_host_name18, port_number: $1900 }, { name: bbs_name19, host_name: bbs_host_name19, port_number: $1900 }, { name: bbs_name20, host_name: bbs_host_name20, port_number: $1966 }, { name: bbs_name21, host_name: bbs_host_name21, port_number: $1900 }, { name: bbs_name22, host_name: bbs_host_name22, port_number: $1900 }, { name: bbs_name23, host_name: bbs_host_name23, port_number: $fa80 }, { name: bbs_name24, host_name: bbs_host_name24, port_number: $605 }, { name: bbs_name25, host_name: bbs_host_name25, port_number: $fa80 }, { name: 0, host_name: 0, port_number: 0 } }
constant byte* bbs_name[$c]  = "Boar's Head"
constant byte* bbs_name1[$a]  = "RapidFire"
constant byte* bbs_name10[$f]  = "Jamming Signal"
constant byte* bbs_name11[$f]  = "Centronian BBS"
constant byte* bbs_name12[$11]  = "Anrchy Undergrnd"
constant byte* bbs_name13[$e]  = "The Oasis BBS"
constant byte* bbs_name14[$d]  = "The Disk Box"
constant byte* bbs_name15[$b]  = "Cottonwood"
constant byte* bbs_name16[$10]  = "Wrong Number ]["
constant byte* bbs_name17[$a]  = "RabidFire"
constant byte* bbs_name18[$a]  = "Mad World"
constant byte* bbs_name19[$b]  = "Citadel 64"
constant byte* bbs_name2[$12]  = "Antidote by Triad"
constant byte* bbs_name20[$c]  = "Hotwire BBS"
constant byte* bbs_name21[$e]  = "Endless Chaos"
constant byte* bbs_name22[$b]  = "Borderline"
constant byte* bbs_name23[$c]  = "RAVELOUTION"
constant byte* bbs_name24[$d]  = "The Edge BBS"
constant byte* bbs_name25[9]  = "PGS Test"
constant byte* bbs_name3[$10]  = "Wizards's Realm"
constant byte* bbs_name4[$b]  = "The Hidden"
constant byte* bbs_name5[$e]  = "Eaglewing BBS"
constant byte* bbs_name6[$e]  = "Scorps Portal"
constant byte* bbs_name7[$d]  = "My C=ult BBS"
constant byte* bbs_name8[$10]  = "Commodore Image"
constant byte* bbs_name9[$10]  = "64 Vintag Remic"
void conio_c64_init()
constant byte* const conio_c64_init::BASIC_CURSOR_LINE = (byte*) 214
byte conio_c64_init::line
byte conio_c64_init::line#0 reg byte x 11.0
byte conio_c64_init::line#2 reg byte x 22.0
byte conio_cursor_x loadstore zp[1]:9 2.1428572985714287E7
byte conio_cursor_y loadstore zp[1]:10 3.720930245116279E8
byte* conio_line_color loadstore zp[2]:13 2.8333333471794873E8
byte* conio_line_text loadstore zp[2]:11 2.7625000135E8
void cputc(byte cputc::c)
byte cputc::c
byte cputc::c#0 reg byte a 2.0000002E7
byte cputc::c#2 reg byte a 20002.0
byte cputc::c#3 reg byte a 1.05005002E8
void cputln()
void cputs(const byte* cputs::s)
byte cputs::c
byte cputs::c#1 reg byte a 1.0000001E7
const byte* cputs::s
const byte* cputs::s#0 s zp[2]:5 5000000.5
const byte* cputs::s#2 s zp[2]:5 2002.0
const byte* cputs::s#6 s zp[2]:5 1.5050002E7
const byte* cputs::s#7 s zp[2]:5 101002.0
void cscroll()
void gotoxy(byte gotoxy::x , byte gotoxy::y)
byte*~ gotoxy::$5 zp[2]:19 202.0
byte*~ gotoxy::$6 zp[2]:15 202.0
word~ gotoxy::$7 zp[2]:15 151.5
word~ gotoxy::$8 zp[2]:17 202.0
word~ gotoxy::$9 zp[2]:15 202.0
word gotoxy::line_offset
word gotoxy::line_offset#0 line_offset zp[2]:15 101.0
byte gotoxy::x
constant byte gotoxy::x#2 x = 0
byte gotoxy::y
byte gotoxy::y#2 reg byte x 71.0
byte gotoxy::y#4 reg byte x 67.33333333333333
void main()
struct bbs* main::bbs
struct bbs* main::bbs#1 bbs zp[2]:2 202.0
struct bbs* main::bbs#2 bbs zp[2]:2 14.428571428571429
constant byte* main::s[2]  = " "
constant byte* main::s2[2]  = "
"
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#2 destination zp[2]:7
byte* memcpy::dst
byte* memcpy::dst#1 dst zp[2]:7 1.00000000000001E14
byte* memcpy::dst#2 dst zp[2]:7 1.0003333333333467E14
byte* memcpy::dst#4 dst zp[2]:7 2.00000000002E11
word memcpy::num
void* memcpy::return
void* memcpy::source
void* memcpy::source#2 source zp[2]:23
byte* memcpy::src
byte* memcpy::src#1 src zp[2]:23 2.00000000000002E14
byte* memcpy::src#2 src zp[2]:23 1.0002500000000125E14
byte* memcpy::src#4 src zp[2]:23 1.00000000001E11
byte* memcpy::src_end
byte* memcpy::src_end#0 src_end zp[2]:21 1.251250000000025E13
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#4 reg byte x 1.4285714285714428E13
byte* memset::dst
byte* memset::dst#1 dst zp[2]:7 2.00000000000002E14
byte* memset::dst#2 dst zp[2]:7 1.3336666666666834E14
byte* memset::dst#4 dst zp[2]:7 2.00000000002E11
byte* memset::end
byte* memset::end#0 end zp[2]:23 1.6683333333333668E13
word memset::num
void* memset::return
void* memset::str
void* memset::str#3 str zp[2]:7
struct printf_buffer_number printf_buffer loadstore mem[12] = {}
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
constant byte* printf_number_buffer::buffer_digits#0 buffer_digits = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0 reg byte a 7001.0
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_zero_padding
signed byte printf_number_buffer::len
signed byte printf_number_buffer::padding
void printf_string(byte* printf_string::str , byte printf_string::format_min_length , byte printf_string::format_justify_left)
struct printf_format_string printf_string::format
byte printf_string::format_justify_left
byte printf_string::format_min_length
signed byte printf_string::len
signed byte printf_string::padding
byte* printf_string::str
byte* printf_string::str#0 str zp[2]:5 202.0
byte* printf_string::str#1 str zp[2]:5 202.0
byte* printf_string::str#2 str zp[2]:5 1203.0
void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
struct printf_format_number printf_uint::format
byte printf_uint::format_justify_left
byte printf_uint::format_min_length
byte printf_uint::format_radix
byte printf_uint::format_sign_always
byte printf_uint::format_upper_case
byte printf_uint::format_zero_padding
word printf_uint::uvalue
word printf_uint::uvalue#0 uvalue zp[2]:5 367.33333333333337
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
byte~ utoa::$10 reg byte a 2000002.0
byte~ utoa::$11 reg byte x 20002.0
byte* utoa::buffer
byte* utoa::buffer#11 buffer zp[2]:23 287143.2857142857
byte* utoa::buffer#14 buffer zp[2]:23 1500001.5
byte* utoa::buffer#3 buffer zp[2]:23 20002.0
byte* utoa::buffer#4 buffer zp[2]:23 2000002.0
byte utoa::digit
byte utoa::digit#1 digit zp[1]:4 2000002.0
byte utoa::digit#2 digit zp[1]:4 285714.5714285714
word utoa::digit_value
word utoa::digit_value#0 digit_value zp[2]:21 600000.6000000001
word* utoa::digit_values
byte utoa::max_digits
constant byte utoa::max_digits#1 max_digits = 5
byte utoa::radix
byte utoa::started
byte utoa::started#2 reg byte x 500000.5
byte utoa::started#4 reg byte x 1000001.0
word utoa::value
word utoa::value#0 value zp[2]:5 1000001.0
word utoa::value#1 value zp[2]:5 5501.0
word utoa::value#2 value zp[2]:5 572857.857142857
word utoa::value#6 value zp[2]:5 1500001.5
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
byte* utoa_append::buffer
byte* utoa_append::buffer#0 buffer zp[2]:23 1375000.25
byte utoa_append::digit
byte utoa_append::digit#1 reg byte x 1.0000000001E10
byte utoa_append::digit#2 reg byte x 1.00050000015E10
word utoa_append::return
word utoa_append::return#0 return zp[2]:5 2000002.0
word utoa_append::sub
word utoa_append::sub#0 sub zp[2]:21 3.3335000005E9
word utoa_append::value
word utoa_append::value#0 value zp[2]:5 3666667.333333333
word utoa_append::value#1 value zp[2]:5 2.0000000002E10
word utoa_append::value#2 value zp[2]:5 5.001833334166666E9

reg byte x [ conio_c64_init::line#2 conio_c64_init::line#0 ]
zp[2]:2 [ main::bbs#2 main::bbs#1 ]
reg byte x [ gotoxy::y#4 gotoxy::y#2 ]
reg byte a [ cputc::c#3 cputc::c#0 cputc::c#2 ]
zp[1]:4 [ utoa::digit#2 utoa::digit#1 ]
zp[2]:5 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 printf_uint::uvalue#0 utoa_append::return#0 printf_string::str#2 printf_string::str#0 printf_string::str#1 cputs::s#6 cputs::s#7 cputs::s#2 cputs::s#0 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[2]:7 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
reg byte x [ memset::c#4 ]
zp[1]:9 [ conio_cursor_x ]
zp[1]:10 [ conio_cursor_y ]
zp[2]:11 [ conio_line_text ]
zp[2]:13 [ conio_line_color ]
zp[2]:15 [ gotoxy::$7 gotoxy::$9 gotoxy::line_offset#0 gotoxy::$6 ]
zp[2]:17 [ gotoxy::$8 ]
zp[2]:19 [ gotoxy::$5 ]
reg byte a [ cputs::c#1 ]
reg byte a [ printf_number_buffer::buffer_sign#0 ]
reg byte x [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:21 [ memcpy::src_end#0 utoa::digit_value#0 utoa_append::sub#0 ]
zp[2]:23 [ memset::end#0 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ]
mem[12] [ printf_buffer ]
