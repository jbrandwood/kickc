
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  main::i#2 = phi( main/main::i#0, main::@3/main::i#1 )
  if(main::i#2==1) goto main::@2
  to:main::@4
main::@4: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  if(main::i#3==4) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@4
  main::i#4 = phi( main::@1/main::i#2, main::@4/main::i#3 )
  main::$0 = '0' + main::i#4
  main::SCREEN[main::i#4] = main::$0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  main::i#5 = phi( main::@2/main::i#4, main::@4/main::i#3 )
  main::i#1 = main::i#5 + rangenext(0,5)
  main::$1 = main::i#1 != rangelast(0,5)
  if(main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
char main::$0
bool main::$1
__constant char * const main::SCREEN = (char *)$400
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::i#3
char main::i#4
char main::i#5

Adding number conversion cast (unumber) 1 in if(main::i#2==1) goto main::@2
Adding number conversion cast (unumber) 4 in if(main::i#3==4) goto main::@2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 4
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Alias main::i#2 = main::i#4 
Successful SSA optimization Pass2AliasElimination
Alias main::i#2 = main::i#5 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$1 [8] if(main::i#1!=rangelast(0,5)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [3] if(main::i#2!=4) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [6] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [8] if(main::i#1!=rangelast(0,5)) goto main::@1 to 6
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 6 in [6] if(main::i#1!=6) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 6
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 6
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@5(between main::@3 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [9] main::i#6 = main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@5
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [1] main::i#2 = phi( main/0, main::@3/main::i#1 )
  [2] if(main::i#2==1) goto main::@2
  to:main::@4
main::@4: scope:[main]  from main::@1
  [3] if(main::i#2!=4) goto main::@3
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  [4] main::$0 = '0' + main::i#2
  [5] main::SCREEN[main::i#2] = main::$0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [6] main::i#1 = ++ main::i#2
  [7] if(main::i#1!=6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [8] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
char main::$0 // 22.0
char main::i
char main::i#1 // 16.5
char main::i#2 // 13.2

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$0 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::$0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::$0 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 29.7: zp[1]:2 [ main::i#2 main::i#1 ] 22: zp[1]:3 [ main::$0 ] 
Uplift Scope [] 

Uplifting [main] best 471 combination reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$0 ] 
Uplifting [] best 471 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests simple switch()-statement - switch without default
// Expected output " 1  4 "
  // Upstart
  // Commodore 64 PRG executable file
.file [name="switch-4.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [1] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] if(main::i#2==1) goto main::@2 -- vbuxx_eq_vbuc1_then_la1 
    cpx #1
    beq __b2
    jmp __b4
    // main::@4
  __b4:
    // [3] if(main::i#2!=4) goto main::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b3
    jmp __b2
    // main::@2
  __b2:
    // [4] main::$0 = '0' + main::i#2 -- vbuaa=vbuc1_plus_vbuxx 
    txa
    clc
    adc #'0'
    // [5] main::SCREEN[main::i#2] = main::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    jmp __b3
    // main::@3
  __b3:
    // [6] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [7] if(main::i#1!=6) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #6
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b3 with __b1
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b4:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
char main::$0 // reg byte a 22.0
__constant char * const main::SCREEN = (char *) 1024
char main::i
char main::i#1 // reg byte x 16.5
char main::i#2 // reg byte x 13.2

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::$0 ]


FINAL ASSEMBLER
Score: 291

  // File Comments
// Tests simple switch()-statement - switch without default
// Expected output " 1  4 "
  // Upstart
  // Commodore 64 PRG executable file
.file [name="switch-4.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // case 1:
    // [2] if(main::i#2==1) goto main::@2 -- vbuxx_eq_vbuc1_then_la1 
    cpx #1
    beq __b2
    // main::@4
    // case 4:
    //                 SCREEN[i] = '0'+i;
    //                 break;
    // [3] if(main::i#2!=4) goto main::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b3
    // main::@2
  __b2:
    // '0'+i
    // [4] main::$0 = '0' + main::i#2 -- vbuaa=vbuc1_plus_vbuxx 
    txa
    clc
    adc #'0'
    // SCREEN[i] = '0'+i
    // [5] main::SCREEN[main::i#2] = main::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // main::@3
  __b3:
    // for(char i:0..5)
    // [6] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [7] if(main::i#1!=6) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #6
    bne __b1
    // main::@return
    // }
    // [8] return 
    rts
}
  // File Data

