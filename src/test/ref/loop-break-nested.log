Culled Empty Block (label) main::@13
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@14
Culled Empty Block (label) main::@15
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@16
Culled Empty Block (label) main::@9
Culled Empty Block (label) main::@10
Culled Empty Block (label) main::@11
Culled Empty Block (label) main::@12

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte*) main::line#0 ← ((byte*)) (number) $400
  to:main::@1
main::@1: scope:[main]  from main main::@8
  (byte*) main::line#2 ← phi( main/(byte*) main::line#0 main::@8/(byte*) main::line#1 )
  (bool~) main::$0 ← (byte*) main::line#2 < (number) $400+(number) $28*(number) $19
  if((bool~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte*) main::line#3 ← phi( main::@1/(byte*) main::line#2 )
  (bool~) main::$1 ← *((byte*) main::line#3) == (byte) 'a'
  (bool~) main::$2 ← ! (bool~) main::$1
  if((bool~) main::$2) goto main::@4
  to:main::@return
main::@4: scope:[main]  from main::@2
  (byte*) main::line#7 ← phi( main::@2/(byte*) main::line#3 )
  (byte) main::i#0 ← (byte) 0
  to:main::@6
main::@6: scope:[main]  from main::@4 main::@7
  (byte) main::i#2 ← phi( main::@4/(byte) main::i#0 main::@7/(byte) main::i#1 )
  (byte*) main::line#4 ← phi( main::@4/(byte*) main::line#7 main::@7/(byte*) main::line#5 )
  (bool~) main::$3 ← *((byte*) main::line#4 + (byte) main::i#2) == (byte) 'a'
  (bool~) main::$4 ← ! (bool~) main::$3
  if((bool~) main::$4) goto main::@7
  to:main::@8
main::@7: scope:[main]  from main::@6
  (byte) main::i#3 ← phi( main::@6/(byte) main::i#2 )
  (byte*) main::line#5 ← phi( main::@6/(byte*) main::line#4 )
  *((byte*) main::line#5 + (byte) main::i#3) ← (byte) 'a'
  (byte) main::i#1 ← (byte) main::i#3 + rangenext(0,$27)
  (bool~) main::$5 ← (byte) main::i#1 != rangelast(0,$27)
  if((bool~) main::$5) goto main::@6
  to:main::@8
main::@8: scope:[main]  from main::@6 main::@7
  (byte*) main::line#6 ← phi( main::@6/(byte*) main::line#4 main::@7/(byte*) main::line#5 )
  (byte*) main::line#1 ← (byte*) main::line#6 + (number) $28
  to:main::@1
main::@return: scope:[main]  from main::@1 main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(bool~) main::$0
(bool~) main::$1
(bool~) main::$2
(bool~) main::$3
(bool~) main::$4
(bool~) main::$5
(label) main::@1
(label) main::@2
(label) main::@4
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte*) main::line
(byte*) main::line#0
(byte*) main::line#1
(byte*) main::line#2
(byte*) main::line#3
(byte*) main::line#4
(byte*) main::line#5
(byte*) main::line#6
(byte*) main::line#7

Adding number conversion cast (unumber) $400+$28*$19 in (bool~) main::$0 ← (byte*) main::line#2 < (number) $400+(number) $28*(number) $19
Adding number conversion cast (unumber) $28 in (byte*) main::line#1 ← (byte*) main::line#6 + (number) $28
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) main::line#0 ← (byte*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [6] (bool~) main::$2 ← *((byte*) main::line#3) != (byte) 'a' from [5] (bool~) main::$1 ← *((byte*) main::line#3) == (byte) 'a'
Inversing boolean not [12] (bool~) main::$4 ← *((byte*) main::line#4 + (byte) main::i#2) != (byte) 'a' from [11] (bool~) main::$3 ← *((byte*) main::line#4 + (byte) main::i#2) == (byte) 'a'
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) main::line#2 = (byte*) main::line#3 (byte*) main::line#7 
Alias (byte*) main::line#4 = (byte*) main::line#5 
Alias (byte) main::i#2 = (byte) main::i#3 
Successful SSA optimization Pass2AliasElimination
Alias (byte*) main::line#4 = (byte*) main::line#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) main::line#4 (byte*) main::line#2
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$0 [3] if((byte*) main::line#2<(word)(number) $400+(number) $28*(number) $19) goto main::@2
Simple Condition (bool~) main::$2 [7] if(*((byte*) main::line#2)!=(byte) 'a') goto main::@4
Simple Condition (bool~) main::$4 [13] if(*((byte*) main::line#2 + (byte) main::i#2)!=(byte) 'a') goto main::@7
Simple Condition (bool~) main::$5 [18] if((byte) main::i#1!=rangelast(0,$27)) goto main::@6
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [3] if((byte*) main::line#2>=(word)(number) $400+(number) $28*(number) $19) goto main::@return
Negating conditional jump and destination [13] if(*((byte*) main::line#2 + (byte) main::i#2)==(byte) 'a') goto main::@8
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant (const byte*) main::line#0 = (byte*) 1024
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [16] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [18] if(main::i#1!=rangelast(0,$27)) goto main::@6 to (number) $28
Adding number conversion cast (unumber) $28 in if((byte) main::i#1!=(number) $28) goto main::@6
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte*) main::line#0
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Constant inlined main::line#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@17(between main::@7 and main::@6)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@4
CALL GRAPH
Calls in [] to main:2 

Created 2 initial phi equivalence classes
Coalesced [17] main::line#8 ← main::line#1
Coalesced [18] main::i#4 ← main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@17
Renumbering block main::@6 to main::@3
Renumbering block main::@7 to main::@4
Renumbering block main::@8 to main::@5
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [5] (byte*) main::line#2 ← phi( main/(byte*) 1024 main::@5/(byte*) main::line#1 )
  [6] if((byte*) main::line#2>=(word)(number) $400+(number) $28*(number) $19) goto main::@return
  to:main::@2
main::@2: scope:[main]  from main::@1
  [7] if(*((byte*) main::line#2)!=(byte) 'a') goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@1 main::@2
  [8] return 
  to:@return
main::@3: scope:[main]  from main::@2 main::@4
  [9] (byte) main::i#2 ← phi( main::@2/(byte) 0 main::@4/(byte) main::i#1 )
  [10] if(*((byte*) main::line#2 + (byte) main::i#2)==(byte) 'a') goto main::@5
  to:main::@4
main::@4: scope:[main]  from main::@3
  [11] *((byte*) main::line#2 + (byte) main::i#2) ← (byte) 'a'
  [12] (byte) main::i#1 ← ++ (byte) main::i#2
  [13] if((byte) main::i#1!=(byte) $28) goto main::@3
  to:main::@5
main::@5: scope:[main]  from main::@3 main::@4
  [14] (byte*) main::line#1 ← (byte*) main::line#2 + (byte) $28
  to:main::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i
(byte) main::i#1 151.5
(byte) main::i#2 134.66666666666666
(byte*) main::line
(byte*) main::line#1 22.0
(byte*) main::line#2 30.75

Initial phi equivalence classes
[ main::line#2 main::line#1 ]
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::line#2 main::line#1 ]
[ main::i#2 main::i#1 ]
Allocated zp[2]:2 [ main::line#2 main::line#1 ]
Allocated zp[1]:4 [ main::i#2 main::i#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests break statement in a simple loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label i = 4
    .label line = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte*) main::line#2 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z line
    lda #>$400
    sta.z line+1
    jmp __b1
    // main::@1
  __b1:
    // [6] if((byte*) main::line#2>=(word)(number) $400+(number) $28*(number) $19) goto main::@return -- pbuz1_ge_vwuc1_then_la1 
    lda.z line+1
    cmp #>$400+$28*$19
    bcc !+
    bne __breturn
    lda.z line
    cmp #<$400+$28*$19
    bcs __breturn
  !:
    jmp __b2
    // main::@2
  __b2:
    // [7] if(*((byte*) main::line#2)!=(byte) 'a') goto main::@3 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (line),y
    cmp #'a'
    bne __b3_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
    // [9] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [9] phi (byte) main::i#2 = (byte) 0 [phi:main::@2->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b3
    // [9] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [9] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4->main::@3#0] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [10] if(*((byte*) main::line#2 + (byte) main::i#2)==(byte) 'a') goto main::@5 -- pbuz1_derefidx_vbuz2_eq_vbuc1_then_la1 
    ldy.z i
    lda (line),y
    cmp #'a'
    beq __b5
    jmp __b4
    // main::@4
  __b4:
    // [11] *((byte*) main::line#2 + (byte) main::i#2) ← (byte) 'a' -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #'a'
    ldy.z i
    sta (line),y
    // [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [13] if((byte) main::i#1!=(byte) $28) goto main::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z i
    bne __b3_from___b4
    jmp __b5
    // main::@5
  __b5:
    // [14] (byte*) main::line#1 ← (byte*) main::line#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [5] phi (byte*) main::line#2 = (byte*) main::line#1 [phi:main::@5->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] if((byte*) main::line#2>=(word)(number) $400+(number) $28*(number) $19) goto main::@return [ main::line#2 ] ( main:2 [ main::line#2 ] ) always clobbers reg byte a 
Statement [7] if(*((byte*) main::line#2)!=(byte) 'a') goto main::@3 [ main::line#2 ] ( main:2 [ main::line#2 ] ) always clobbers reg byte a reg byte y 
Statement [10] if(*((byte*) main::line#2 + (byte) main::i#2)==(byte) 'a') goto main::@5 [ main::line#2 main::i#2 ] ( main:2 [ main::line#2 main::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::i#2 main::i#1 ]
Statement [11] *((byte*) main::line#2 + (byte) main::i#2) ← (byte) 'a' [ main::line#2 main::i#2 ] ( main:2 [ main::line#2 main::i#2 ] ) always clobbers reg byte a 
Statement [14] (byte*) main::line#1 ← (byte*) main::line#2 + (byte) $28 [ main::line#1 ] ( main:2 [ main::line#1 ] ) always clobbers reg byte a 
Statement [6] if((byte*) main::line#2>=(word)(number) $400+(number) $28*(number) $19) goto main::@return [ main::line#2 ] ( main:2 [ main::line#2 ] ) always clobbers reg byte a 
Statement [7] if(*((byte*) main::line#2)!=(byte) 'a') goto main::@3 [ main::line#2 ] ( main:2 [ main::line#2 ] ) always clobbers reg byte a reg byte y 
Statement [10] if(*((byte*) main::line#2 + (byte) main::i#2)==(byte) 'a') goto main::@5 [ main::line#2 main::i#2 ] ( main:2 [ main::line#2 main::i#2 ] ) always clobbers reg byte a 
Statement [11] *((byte*) main::line#2 + (byte) main::i#2) ← (byte) 'a' [ main::line#2 main::i#2 ] ( main:2 [ main::line#2 main::i#2 ] ) always clobbers reg byte a 
Statement [14] (byte*) main::line#1 ← (byte*) main::line#2 + (byte) $28 [ main::line#1 ] ( main:2 [ main::line#1 ] ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::line#2 main::line#1 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ main::i#2 main::i#1 ] : zp[1]:4 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 286.17: zp[1]:4 [ main::i#2 main::i#1 ] 52.75: zp[2]:2 [ main::line#2 main::line#1 ] 
Uplift Scope [] 

Uplifting [main] best 4558 combination reg byte y [ main::i#2 main::i#1 ] zp[2]:2 [ main::line#2 main::line#1 ] 
Uplifting [] best 4558 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests break statement in a simple loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label line = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte*) main::line#2 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z line
    lda #>$400
    sta.z line+1
    jmp __b1
    // main::@1
  __b1:
    // [6] if((byte*) main::line#2>=(word)(number) $400+(number) $28*(number) $19) goto main::@return -- pbuz1_ge_vwuc1_then_la1 
    lda.z line+1
    cmp #>$400+$28*$19
    bcc !+
    bne __breturn
    lda.z line
    cmp #<$400+$28*$19
    bcs __breturn
  !:
    jmp __b2
    // main::@2
  __b2:
    // [7] if(*((byte*) main::line#2)!=(byte) 'a') goto main::@3 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (line),y
    cmp #'a'
    bne __b3_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
    // [9] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [9] phi (byte) main::i#2 = (byte) 0 [phi:main::@2->main::@3#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b3
    // [9] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [9] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4->main::@3#0] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [10] if(*((byte*) main::line#2 + (byte) main::i#2)==(byte) 'a') goto main::@5 -- pbuz1_derefidx_vbuyy_eq_vbuc1_then_la1 
    lda (line),y
    cmp #'a'
    beq __b5
    jmp __b4
    // main::@4
  __b4:
    // [11] *((byte*) main::line#2 + (byte) main::i#2) ← (byte) 'a' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #'a'
    sta (line),y
    // [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [13] if((byte) main::i#1!=(byte) $28) goto main::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$28
    bne __b3_from___b4
    jmp __b5
    // main::@5
  __b5:
    // [14] (byte*) main::line#1 ← (byte*) main::line#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [5] phi (byte*) main::line#2 = (byte*) main::line#1 [phi:main::@5->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __bbegin with __b1
Replacing label __b3_from___b4 with __b3
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __b4:
Removing instruction __b1_from___b5:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Relabelling long label __b3_from___b2 to b1
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte y 151.5
(byte) main::i#2 reg byte y 134.66666666666666
(byte*) main::line
(byte*) main::line#1 line zp[2]:2 22.0
(byte*) main::line#2 line zp[2]:2 30.75

zp[2]:2 [ main::line#2 main::line#1 ]
reg byte y [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 3256

  // File Comments
// Tests break statement in a simple loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label line = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte*) main::line#2 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z line
    lda #>$400
    sta.z line+1
    // main::@1
  __b1:
    // for(byte* line = $400; line<$400+40*25;line+=40 )
    // [6] if((byte*) main::line#2>=(word)(number) $400+(number) $28*(number) $19) goto main::@return -- pbuz1_ge_vwuc1_then_la1 
    lda.z line+1
    cmp #>$400+$28*$19
    bcc !+
    bne __breturn
    lda.z line
    cmp #<$400+$28*$19
    bcs __breturn
  !:
    // main::@2
    // if(*line=='a')
    // [7] if(*((byte*) main::line#2)!=(byte) 'a') goto main::@3 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (line),y
    cmp #'a'
    bne b1
    // main::@return
  __breturn:
    // }
    // [8] return 
    rts
    // [9] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b1:
    // [9] phi (byte) main::i#2 = (byte) 0 [phi:main::@2->main::@3#0] -- vbuyy=vbuc1 
    ldy #0
    // [9] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
    // [9] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4->main::@3#0] -- register_copy 
    // main::@3
  __b3:
    // if(line[i]=='a')
    // [10] if(*((byte*) main::line#2 + (byte) main::i#2)==(byte) 'a') goto main::@5 -- pbuz1_derefidx_vbuyy_eq_vbuc1_then_la1 
    lda (line),y
    cmp #'a'
    beq __b5
    // main::@4
    // line[i] = 'a'
    // [11] *((byte*) main::line#2 + (byte) main::i#2) ← (byte) 'a' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #'a'
    sta (line),y
    // for( byte i: 0..39)
    // [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [13] if((byte) main::i#1!=(byte) $28) goto main::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$28
    bne __b3
    // main::@5
  __b5:
    // line+=40
    // [14] (byte*) main::line#1 ← (byte*) main::line#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
    // [5] phi (byte*) main::line#2 = (byte*) main::line#1 [phi:main::@5->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

