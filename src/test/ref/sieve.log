Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call main::$0 = call toD018 SCREEN (byte*)$1800 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from main::@21 print_cls
  memset::c#5 = phi( main::@21/memset::c#1, print_cls/memset::c#0 )
  memset::str#4 = phi( main::@21/memset::str#1, print_cls/memset::str#0 )
  memset::num#2 = phi( main::@21/memset::num#1, print_cls/memset::num#0 )
  memset::$0 = memset::num#2 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#2 = phi( memset/memset::str#4, memset::@3/memset::str#5 )
  memset::return#0 = memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#4 = phi( memset/memset::c#5 )
  memset::num#3 = phi( memset/memset::num#2 )
  memset::str#3 = phi( memset/memset::str#4 )
  memset::$4 = (byte*)memset::str#3
  memset::$2 = memset::$4 + memset::num#3
  memset::end#0 = memset::$2
  memset::dst#0 = ((byte*)) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#3 = phi( memset::@2/memset::c#4, memset::@4/memset::c#2 )
  memset::str#5 = phi( memset::@2/memset::str#3, memset::@4/memset::str#6 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#6 = phi( memset::@3/memset::str#5 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#2 = phi( memset::@3/memset::c#3 )
  *memset::dst#3 = memset::c#2
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#4 = phi( memset::@1/memset::return#0 )
  memset::return#1 = memset::return#4
  return 
  to:@return

dword clock()
clock: scope:[clock]  from main::@3
  clock::$0 = $ffffffff - *CIA2_TIMER_AB
  clock::return#0 = clock::$0
  to:clock::@return
clock::@return: scope:[clock]  from clock
  clock::return#3 = phi( clock/clock::return#0 )
  clock::return#1 = clock::return#3
  return 
  to:@return

void clock_start()
clock_start: scope:[clock_start]  from main::@22
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_STOP|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_A_COUNT_CYCLES
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_STOP|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  *CIA2_TIMER_AB = $ffffffff
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_A_COUNT_CYCLES
  to:clock_start::@return
clock_start::@return: scope:[clock_start]  from clock_start
  return 
  to:@return

word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
divr16u: scope:[divr16u]  from div32u16u div32u16u::@1
  divr16u::divisor#6 = phi( div32u16u/divr16u::divisor#0, div32u16u::@1/divr16u::divisor#1 )
  divr16u::dividend#5 = phi( div32u16u/divr16u::dividend#1, div32u16u::@1/divr16u::dividend#2 )
  divr16u::rem#10 = phi( div32u16u/divr16u::rem#3, div32u16u::@1/divr16u::rem#4 )
  divr16u::quotient#0 = 0
  divr16u::i#0 = 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  divr16u::i#5 = phi( divr16u/divr16u::i#0, divr16u::@3/divr16u::i#1 )
  divr16u::divisor#4 = phi( divr16u/divr16u::divisor#6, divr16u::@3/divr16u::divisor#7 )
  divr16u::quotient#6 = phi( divr16u/divr16u::quotient#0, divr16u::@3/divr16u::quotient#8 )
  divr16u::dividend#3 = phi( divr16u/divr16u::dividend#5, divr16u::@3/divr16u::dividend#6 )
  divr16u::rem#5 = phi( divr16u/divr16u::rem#10, divr16u::@3/divr16u::rem#11 )
  divr16u::$0 = divr16u::rem#5 << 1
  divr16u::rem#0 = divr16u::$0
  divr16u::$1 = > divr16u::dividend#3
  divr16u::$2 = divr16u::$1 & $80
  divr16u::$3 = divr16u::$2 != 0
  divr16u::$4 = ! divr16u::$3
  if(divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  divr16u::i#3 = phi( divr16u::@1/divr16u::i#5, divr16u::@4/divr16u::i#6 )
  divr16u::divisor#2 = phi( divr16u::@1/divr16u::divisor#4, divr16u::@4/divr16u::divisor#5 )
  divr16u::rem#6 = phi( divr16u::@1/divr16u::rem#0, divr16u::@4/divr16u::rem#1 )
  divr16u::quotient#3 = phi( divr16u::@1/divr16u::quotient#6, divr16u::@4/divr16u::quotient#7 )
  divr16u::dividend#4 = phi( divr16u::@1/divr16u::dividend#3, divr16u::@4/divr16u::dividend#7 )
  divr16u::$6 = divr16u::dividend#4 << 1
  divr16u::dividend#0 = divr16u::$6
  divr16u::$7 = divr16u::quotient#3 << 1
  divr16u::quotient#1 = divr16u::$7
  divr16u::$8 = divr16u::rem#6 >= divr16u::divisor#2
  divr16u::$9 = ! divr16u::$8
  if(divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  divr16u::i#6 = phi( divr16u::@1/divr16u::i#5 )
  divr16u::divisor#5 = phi( divr16u::@1/divr16u::divisor#4 )
  divr16u::quotient#7 = phi( divr16u::@1/divr16u::quotient#6 )
  divr16u::dividend#7 = phi( divr16u::@1/divr16u::dividend#3 )
  divr16u::rem#7 = phi( divr16u::@1/divr16u::rem#0 )
  divr16u::$5 = divr16u::rem#7 | 1
  divr16u::rem#1 = divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  divr16u::divisor#7 = phi( divr16u::@2/divr16u::divisor#2, divr16u::@5/divr16u::divisor#3 )
  divr16u::quotient#8 = phi( divr16u::@2/divr16u::quotient#1, divr16u::@5/divr16u::quotient#2 )
  divr16u::dividend#6 = phi( divr16u::@2/divr16u::dividend#0, divr16u::@5/divr16u::dividend#8 )
  divr16u::rem#11 = phi( divr16u::@2/divr16u::rem#6, divr16u::@5/divr16u::rem#2 )
  divr16u::i#2 = phi( divr16u::@2/divr16u::i#3, divr16u::@5/divr16u::i#4 )
  divr16u::i#1 = divr16u::i#2 + rangenext(0,$f)
  divr16u::$11 = divr16u::i#1 != rangelast(0,$f)
  if(divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  divr16u::dividend#8 = phi( divr16u::@2/divr16u::dividend#0 )
  divr16u::i#4 = phi( divr16u::@2/divr16u::i#3 )
  divr16u::divisor#3 = phi( divr16u::@2/divr16u::divisor#2 )
  divr16u::rem#8 = phi( divr16u::@2/divr16u::rem#6 )
  divr16u::quotient#4 = phi( divr16u::@2/divr16u::quotient#1 )
  divr16u::quotient#2 = ++ divr16u::quotient#4
  divr16u::$10 = divr16u::rem#8 - divr16u::divisor#3
  divr16u::rem#2 = divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  divr16u::quotient#5 = phi( divr16u::@3/divr16u::quotient#8 )
  divr16u::rem#9 = phi( divr16u::@3/divr16u::rem#11 )
  rem16u#0 = divr16u::rem#9
  divr16u::return#0 = divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  rem16u#10 = phi( divr16u::@6/rem16u#0 )
  divr16u::return#4 = phi( divr16u::@6/divr16u::return#0 )
  divr16u::return#1 = divr16u::return#4
  rem16u#1 = rem16u#10
  return 
  to:@return

dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
div32u16u: scope:[div32u16u]  from main::@24
  rem16u#18 = phi( main::@24/rem16u#19 )
  div32u16u::divisor#1 = phi( main::@24/div32u16u::divisor#0 )
  div32u16u::dividend#1 = phi( main::@24/div32u16u::dividend#0 )
  div32u16u::$0 = _word1_ div32u16u::dividend#1
  divr16u::dividend#1 = div32u16u::$0
  divr16u::divisor#0 = div32u16u::divisor#1
  divr16u::rem#3 = 0
  call divr16u 
  divr16u::return#2 = divr16u::return#1
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  div32u16u::divisor#2 = phi( div32u16u/div32u16u::divisor#1 )
  div32u16u::dividend#2 = phi( div32u16u/div32u16u::dividend#1 )
  rem16u#11 = phi( div32u16u/rem16u#1 )
  divr16u::return#5 = phi( div32u16u/divr16u::return#2 )
  div32u16u::$1 = divr16u::return#5
  rem16u#2 = rem16u#11
  div32u16u::quotient_hi#0 = div32u16u::$1
  div32u16u::$2 = _word0_ div32u16u::dividend#2
  divr16u::dividend#2 = div32u16u::$2
  divr16u::divisor#1 = div32u16u::divisor#2
  divr16u::rem#4 = rem16u#2
  call divr16u 
  divr16u::return#3 = divr16u::return#1
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  div32u16u::quotient_hi#1 = phi( div32u16u::@1/div32u16u::quotient_hi#0 )
  rem16u#12 = phi( div32u16u::@1/rem16u#1 )
  divr16u::return#6 = phi( div32u16u::@1/divr16u::return#3 )
  div32u16u::$3 = divr16u::return#6
  rem16u#3 = rem16u#12
  div32u16u::quotient_lo#0 = div32u16u::$3
  div32u16u::quotient#0 = (dword){ div32u16u::quotient_hi#1, div32u16u::quotient_lo#0 }
  div32u16u::return#0 = div32u16u::quotient#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  rem16u#13 = phi( div32u16u::@2/rem16u#3 )
  div32u16u::return#3 = phi( div32u16u::@2/div32u16u::return#0 )
  div32u16u::return#1 = div32u16u::return#3
  rem16u#4 = rem16u#13
  return 
  to:@return

void print_str(byte* print_str::str)
print_str: scope:[print_str]  from main::@10 main::@16 main::@18 main::@25 main::@27 print_uint_decimal::@1 print_ulong_decimal::@1
  print_char_cursor#69 = phi( main::@10/print_char_cursor#65, main::@16/print_char_cursor#12, main::@18/print_char_cursor#14, main::@25/print_char_cursor#64, main::@27/print_char_cursor#19, print_uint_decimal::@1/print_char_cursor#61, print_ulong_decimal::@1/print_char_cursor#62 )
  print_str::str#11 = phi( main::@10/print_str::str#7, main::@16/print_str::str#3, main::@18/print_str::str#4, main::@25/print_str::str#5, main::@27/print_str::str#6, print_uint_decimal::@1/print_str::str#1, print_ulong_decimal::@1/print_str::str#2 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  print_char_cursor#59 = phi( print_str/print_char_cursor#69, print_str::@3/print_char_cursor#0 )
  print_str::str#8 = phi( print_str/print_str::str#11, print_str::@3/print_str::str#0 )
  print_str::$1 = 0 != *print_str::str#8
  if(print_str::$1) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  print_char_cursor#58 = phi( print_str::@1/print_char_cursor#59 )
  print_str::str#9 = phi( print_str::@1/print_str::str#8 )
  print_char::ch#0 = *print_str::str#9
  call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  print_str::str#10 = phi( print_str::@2/print_str::str#9 )
  print_char_cursor#30 = phi( print_str::@2/print_char_cursor#9 )
  print_char_cursor#0 = print_char_cursor#30
  print_str::str#0 = ++ print_str::str#10
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  print_char_cursor#31 = phi( print_str::@1/print_char_cursor#59 )
  print_char_cursor#1 = print_char_cursor#31
  return 
  to:@return

void print_ln()
print_ln: scope:[print_ln]  from main::@17 main::@20 main::@29
  print_char_cursor#60 = phi( main::@17/print_char_cursor#13, main::@20/print_char_cursor#16, main::@29/print_char_cursor#21 )
  print_line_cursor#23 = phi( main::@17/print_line_cursor#25, main::@20/print_line_cursor#26, main::@29/print_line_cursor#27 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  print_char_cursor#32 = phi( print_ln/print_char_cursor#60, print_ln::@1/print_char_cursor#32 )
  print_line_cursor#12 = phi( print_ln/print_line_cursor#23, print_ln::@1/print_line_cursor#0 )
  print_ln::$0 = print_line_cursor#12 + $28
  print_line_cursor#0 = print_ln::$0
  print_ln::$1 = print_line_cursor#0 < print_char_cursor#32
  if(print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  print_line_cursor#13 = phi( print_ln::@1/print_line_cursor#0 )
  print_char_cursor#2 = print_line_cursor#13
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  print_char_cursor#33 = phi( print_ln::@2/print_char_cursor#2 )
  print_line_cursor#14 = phi( print_ln::@2/print_line_cursor#13 )
  print_line_cursor#1 = print_line_cursor#14
  print_char_cursor#3 = print_char_cursor#33
  return 
  to:@return

void print_uint_decimal(word print_uint_decimal::w)
print_uint_decimal: scope:[print_uint_decimal]  from main::@12 main::@19 main::@26
  print_char_cursor#70 = phi( main::@12/print_char_cursor#66, main::@19/print_char_cursor#15, main::@26/print_char_cursor#18 )
  print_uint_decimal::w#3 = phi( main::@12/print_uint_decimal::w#2, main::@19/print_uint_decimal::w#0, main::@26/print_uint_decimal::w#1 )
  utoa::value#0 = print_uint_decimal::w#3
  utoa::buffer#0 = decimal_digits
  utoa::radix#0 = DECIMAL
  call utoa 
  to:print_uint_decimal::@1
print_uint_decimal::@1: scope:[print_uint_decimal]  from print_uint_decimal
  print_char_cursor#61 = phi( print_uint_decimal/print_char_cursor#70 )
  print_str::str#1 = decimal_digits
  call print_str 
  to:print_uint_decimal::@2
print_uint_decimal::@2: scope:[print_uint_decimal]  from print_uint_decimal::@1
  print_char_cursor#34 = phi( print_uint_decimal::@1/print_char_cursor#1 )
  print_char_cursor#4 = print_char_cursor#34
  to:print_uint_decimal::@return
print_uint_decimal::@return: scope:[print_uint_decimal]  from print_uint_decimal::@2
  print_char_cursor#35 = phi( print_uint_decimal::@2/print_char_cursor#4 )
  print_char_cursor#5 = print_char_cursor#35
  return 
  to:@return

void print_ulong_decimal(dword print_ulong_decimal::w)
print_ulong_decimal: scope:[print_ulong_decimal]  from main::@28
  print_char_cursor#71 = phi( main::@28/print_char_cursor#20 )
  print_ulong_decimal::w#1 = phi( main::@28/print_ulong_decimal::w#0 )
  ultoa::value#0 = print_ulong_decimal::w#1
  ultoa::buffer#0 = decimal_digits_long
  ultoa::radix#0 = DECIMAL
  call ultoa 
  to:print_ulong_decimal::@1
print_ulong_decimal::@1: scope:[print_ulong_decimal]  from print_ulong_decimal
  print_char_cursor#62 = phi( print_ulong_decimal/print_char_cursor#71 )
  print_str::str#2 = decimal_digits_long
  call print_str 
  to:print_ulong_decimal::@2
print_ulong_decimal::@2: scope:[print_ulong_decimal]  from print_ulong_decimal::@1
  print_char_cursor#36 = phi( print_ulong_decimal::@1/print_char_cursor#1 )
  print_char_cursor#6 = print_char_cursor#36
  to:print_ulong_decimal::@return
print_ulong_decimal::@return: scope:[print_ulong_decimal]  from print_ulong_decimal::@2
  print_char_cursor#37 = phi( print_ulong_decimal::@2/print_char_cursor#6 )
  print_char_cursor#7 = print_char_cursor#37
  return 
  to:@return

void print_char(byte print_char::ch)
print_char: scope:[print_char]  from main::@32 print_str::@2
  print_char_cursor#38 = phi( main::@32/print_char_cursor#24, print_str::@2/print_char_cursor#58 )
  print_char::ch#2 = phi( main::@32/print_char::ch#1, print_str::@2/print_char::ch#0 )
  *print_char_cursor#38 = print_char::ch#2
  print_char_cursor#8 = ++ print_char_cursor#38
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  print_char_cursor#39 = phi( print_char/print_char_cursor#8 )
  print_char_cursor#9 = print_char_cursor#39
  return 
  to:@return

void print_cls()
print_cls: scope:[print_cls]  from main::@15
  print_screen#2 = phi( main::@15/print_screen#5 )
  memset::str#0 = (void*)print_screen#2
  memset::c#0 = ' '
  memset::num#0 = $3e8
  call memset 
  memset::return#2 = memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  print_screen#3 = phi( print_cls/print_screen#2 )
  print_line_cursor#2 = print_screen#3
  print_char_cursor#10 = print_line_cursor#2
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  print_char_cursor#40 = phi( print_cls::@1/print_char_cursor#10 )
  print_line_cursor#15 = phi( print_cls::@1/print_line_cursor#2 )
  print_line_cursor#3 = print_line_cursor#15
  print_char_cursor#11 = print_char_cursor#40
  return 
  to:@return

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from print_uint_decimal
  utoa::buffer#21 = phi( print_uint_decimal/utoa::buffer#0 )
  utoa::value#12 = phi( print_uint_decimal/utoa::value#0 )
  utoa::radix#1 = phi( print_uint_decimal/utoa::radix#0 )
  utoa::max_digits#0 = 0
  utoa::digit_values#0 = (word*) 0
  utoa::$0 = utoa::radix#1 == DECIMAL
  if(utoa::$0) goto utoa::@1
  to:utoa::@6
utoa::@1: scope:[utoa]  from utoa
  utoa::buffer#17 = phi( utoa/utoa::buffer#21 )
  utoa::value#8 = phi( utoa/utoa::value#12 )
  utoa::max_digits#1 = 5
  utoa::digit_values#1 = RADIX_DECIMAL_VALUES
  to:utoa::@5
utoa::@6: scope:[utoa]  from utoa
  utoa::value#13 = phi( utoa/utoa::value#12 )
  utoa::buffer#16 = phi( utoa/utoa::buffer#21 )
  utoa::radix#2 = phi( utoa/utoa::radix#1 )
  utoa::$1 = utoa::radix#2 == HEXADECIMAL
  if(utoa::$1) goto utoa::@2
  to:utoa::@7
utoa::@2: scope:[utoa]  from utoa::@6
  utoa::buffer#18 = phi( utoa::@6/utoa::buffer#16 )
  utoa::value#9 = phi( utoa::@6/utoa::value#13 )
  utoa::max_digits#2 = 4
  utoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES
  to:utoa::@5
utoa::@7: scope:[utoa]  from utoa::@6
  utoa::value#14 = phi( utoa::@6/utoa::value#13 )
  utoa::buffer#13 = phi( utoa::@6/utoa::buffer#16 )
  utoa::radix#3 = phi( utoa::@6/utoa::radix#2 )
  utoa::$2 = utoa::radix#3 == OCTAL
  if(utoa::$2) goto utoa::@3
  to:utoa::@8
utoa::@3: scope:[utoa]  from utoa::@7
  utoa::buffer#19 = phi( utoa::@7/utoa::buffer#13 )
  utoa::value#10 = phi( utoa::@7/utoa::value#14 )
  utoa::max_digits#3 = 6
  utoa::digit_values#3 = RADIX_OCTAL_VALUES
  to:utoa::@5
utoa::@8: scope:[utoa]  from utoa::@7
  utoa::value#15 = phi( utoa::@7/utoa::value#14 )
  utoa::buffer#10 = phi( utoa::@7/utoa::buffer#13 )
  utoa::radix#4 = phi( utoa::@7/utoa::radix#3 )
  utoa::$3 = utoa::radix#4 == BINARY
  if(utoa::$3) goto utoa::@4
  to:utoa::@9
utoa::@4: scope:[utoa]  from utoa::@8
  utoa::buffer#20 = phi( utoa::@8/utoa::buffer#10 )
  utoa::value#11 = phi( utoa::@8/utoa::value#15 )
  utoa::max_digits#4 = $10
  utoa::digit_values#4 = RADIX_BINARY_VALUES
  to:utoa::@5
utoa::@9: scope:[utoa]  from utoa::@8
  utoa::buffer#6 = phi( utoa::@8/utoa::buffer#10 )
  *utoa::buffer#6 = 'e'
  utoa::buffer#1 = ++ utoa::buffer#6
  *utoa::buffer#1 = 'r'
  utoa::buffer#2 = ++ utoa::buffer#1
  *utoa::buffer#2 = 'r'
  utoa::buffer#3 = ++ utoa::buffer#2
  *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@12 utoa::@9
  return 
  to:@return
utoa::@5: scope:[utoa]  from utoa::@1 utoa::@2 utoa::@3 utoa::@4
  utoa::buffer#15 = phi( utoa::@1/utoa::buffer#17, utoa::@2/utoa::buffer#18, utoa::@3/utoa::buffer#19, utoa::@4/utoa::buffer#20 )
  utoa::value#7 = phi( utoa::@1/utoa::value#8, utoa::@2/utoa::value#9, utoa::@3/utoa::value#10, utoa::@4/utoa::value#11 )
  utoa::digit_values#8 = phi( utoa::@1/utoa::digit_values#1, utoa::@2/utoa::digit_values#2, utoa::@3/utoa::digit_values#3, utoa::@4/utoa::digit_values#4 )
  utoa::max_digits#7 = phi( utoa::@1/utoa::max_digits#1, utoa::@2/utoa::max_digits#2, utoa::@3/utoa::max_digits#3, utoa::@4/utoa::max_digits#4 )
  utoa::started#0 = 0
  utoa::digit#0 = 0
  to:utoa::@10
utoa::@10: scope:[utoa]  from utoa::@13 utoa::@5
  utoa::buffer#11 = phi( utoa::@13/utoa::buffer#14, utoa::@5/utoa::buffer#15 )
  utoa::started#3 = phi( utoa::@13/utoa::started#4, utoa::@5/utoa::started#0 )
  utoa::value#5 = phi( utoa::@13/utoa::value#6, utoa::@5/utoa::value#7 )
  utoa::digit_values#6 = phi( utoa::@13/utoa::digit_values#7, utoa::@5/utoa::digit_values#8 )
  utoa::digit#2 = phi( utoa::@13/utoa::digit#1, utoa::@5/utoa::digit#0 )
  utoa::max_digits#5 = phi( utoa::@13/utoa::max_digits#6, utoa::@5/utoa::max_digits#7 )
  utoa::$4 = utoa::max_digits#5 - 1
  utoa::$5 = utoa::digit#2 < utoa::$4
  if(utoa::$5) goto utoa::@11
  to:utoa::@12
utoa::@11: scope:[utoa]  from utoa::@10
  utoa::max_digits#8 = phi( utoa::@10/utoa::max_digits#5 )
  utoa::buffer#12 = phi( utoa::@10/utoa::buffer#11 )
  utoa::started#2 = phi( utoa::@10/utoa::started#3 )
  utoa::value#2 = phi( utoa::@10/utoa::value#5 )
  utoa::digit_values#5 = phi( utoa::@10/utoa::digit_values#6 )
  utoa::digit#3 = phi( utoa::@10/utoa::digit#2 )
  utoa::$10 = utoa::digit#3 * SIZEOF_WORD
  utoa::digit_value#0 = utoa::digit_values#5[utoa::$10]
  utoa::$6 = utoa::value#2 >= utoa::digit_value#0
  utoa::$7 = utoa::started#2 || utoa::$6
  utoa::$8 = ! utoa::$7
  if(utoa::$8) goto utoa::@13
  to:utoa::@14
utoa::@12: scope:[utoa]  from utoa::@10
  utoa::buffer#7 = phi( utoa::@10/utoa::buffer#11 )
  utoa::value#3 = phi( utoa::@10/utoa::value#5 )
  utoa::$11 = (byte)utoa::value#3
  *utoa::buffer#7 = DIGITS[utoa::$11]
  utoa::buffer#4 = ++ utoa::buffer#7
  *utoa::buffer#4 = 0
  to:utoa::@return
utoa::@13: scope:[utoa]  from utoa::@11 utoa::@15
  utoa::buffer#14 = phi( utoa::@11/utoa::buffer#12, utoa::@15/utoa::buffer#5 )
  utoa::started#4 = phi( utoa::@11/utoa::started#2, utoa::@15/utoa::started#1 )
  utoa::value#6 = phi( utoa::@11/utoa::value#2, utoa::@15/utoa::value#1 )
  utoa::digit_values#7 = phi( utoa::@11/utoa::digit_values#5, utoa::@15/utoa::digit_values#9 )
  utoa::max_digits#6 = phi( utoa::@11/utoa::max_digits#8, utoa::@15/utoa::max_digits#9 )
  utoa::digit#4 = phi( utoa::@11/utoa::digit#3, utoa::@15/utoa::digit#5 )
  utoa::digit#1 = ++ utoa::digit#4
  to:utoa::@10
utoa::@14: scope:[utoa]  from utoa::@11
  utoa::digit_values#10 = phi( utoa::@11/utoa::digit_values#5 )
  utoa::max_digits#10 = phi( utoa::@11/utoa::max_digits#8 )
  utoa::digit#6 = phi( utoa::@11/utoa::digit#3 )
  utoa::digit_value#1 = phi( utoa::@11/utoa::digit_value#0 )
  utoa::value#4 = phi( utoa::@11/utoa::value#2 )
  utoa::buffer#8 = phi( utoa::@11/utoa::buffer#12 )
  utoa_append::buffer#0 = utoa::buffer#8
  utoa_append::value#0 = utoa::value#4
  utoa_append::sub#0 = utoa::digit_value#1
  call utoa_append 
  utoa_append::return#0 = utoa_append::return#2
  to:utoa::@15
utoa::@15: scope:[utoa]  from utoa::@14
  utoa::digit_values#9 = phi( utoa::@14/utoa::digit_values#10 )
  utoa::max_digits#9 = phi( utoa::@14/utoa::max_digits#10 )
  utoa::digit#5 = phi( utoa::@14/utoa::digit#6 )
  utoa::buffer#9 = phi( utoa::@14/utoa::buffer#8 )
  utoa_append::return#3 = phi( utoa::@14/utoa_append::return#0 )
  utoa::$9 = utoa_append::return#3
  utoa::value#1 = utoa::$9
  utoa::buffer#5 = ++ utoa::buffer#9
  utoa::started#1 = 1
  to:utoa::@13

void ultoa(dword ultoa::value , byte* ultoa::buffer , byte ultoa::radix)
ultoa: scope:[ultoa]  from print_ulong_decimal
  ultoa::buffer#21 = phi( print_ulong_decimal/ultoa::buffer#0 )
  ultoa::value#12 = phi( print_ulong_decimal/ultoa::value#0 )
  ultoa::radix#1 = phi( print_ulong_decimal/ultoa::radix#0 )
  ultoa::max_digits#0 = 0
  ultoa::digit_values#0 = (dword*) 0
  ultoa::$0 = ultoa::radix#1 == DECIMAL
  if(ultoa::$0) goto ultoa::@1
  to:ultoa::@6
ultoa::@1: scope:[ultoa]  from ultoa
  ultoa::buffer#17 = phi( ultoa/ultoa::buffer#21 )
  ultoa::value#8 = phi( ultoa/ultoa::value#12 )
  ultoa::max_digits#1 = $a
  ultoa::digit_values#1 = RADIX_DECIMAL_VALUES_LONG
  to:ultoa::@5
ultoa::@6: scope:[ultoa]  from ultoa
  ultoa::value#13 = phi( ultoa/ultoa::value#12 )
  ultoa::buffer#16 = phi( ultoa/ultoa::buffer#21 )
  ultoa::radix#2 = phi( ultoa/ultoa::radix#1 )
  ultoa::$1 = ultoa::radix#2 == HEXADECIMAL
  if(ultoa::$1) goto ultoa::@2
  to:ultoa::@7
ultoa::@2: scope:[ultoa]  from ultoa::@6
  ultoa::buffer#18 = phi( ultoa::@6/ultoa::buffer#16 )
  ultoa::value#9 = phi( ultoa::@6/ultoa::value#13 )
  ultoa::max_digits#2 = 8
  ultoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES_LONG
  to:ultoa::@5
ultoa::@7: scope:[ultoa]  from ultoa::@6
  ultoa::value#14 = phi( ultoa::@6/ultoa::value#13 )
  ultoa::buffer#13 = phi( ultoa::@6/ultoa::buffer#16 )
  ultoa::radix#3 = phi( ultoa::@6/ultoa::radix#2 )
  ultoa::$2 = ultoa::radix#3 == OCTAL
  if(ultoa::$2) goto ultoa::@3
  to:ultoa::@8
ultoa::@3: scope:[ultoa]  from ultoa::@7
  ultoa::buffer#19 = phi( ultoa::@7/ultoa::buffer#13 )
  ultoa::value#10 = phi( ultoa::@7/ultoa::value#14 )
  ultoa::max_digits#3 = $b
  ultoa::digit_values#3 = RADIX_OCTAL_VALUES_LONG
  to:ultoa::@5
ultoa::@8: scope:[ultoa]  from ultoa::@7
  ultoa::value#15 = phi( ultoa::@7/ultoa::value#14 )
  ultoa::buffer#10 = phi( ultoa::@7/ultoa::buffer#13 )
  ultoa::radix#4 = phi( ultoa::@7/ultoa::radix#3 )
  ultoa::$3 = ultoa::radix#4 == BINARY
  if(ultoa::$3) goto ultoa::@4
  to:ultoa::@9
ultoa::@4: scope:[ultoa]  from ultoa::@8
  ultoa::buffer#20 = phi( ultoa::@8/ultoa::buffer#10 )
  ultoa::value#11 = phi( ultoa::@8/ultoa::value#15 )
  ultoa::max_digits#4 = $20
  ultoa::digit_values#4 = RADIX_BINARY_VALUES_LONG
  to:ultoa::@5
ultoa::@9: scope:[ultoa]  from ultoa::@8
  ultoa::buffer#6 = phi( ultoa::@8/ultoa::buffer#10 )
  *ultoa::buffer#6 = 'e'
  ultoa::buffer#1 = ++ ultoa::buffer#6
  *ultoa::buffer#1 = 'r'
  ultoa::buffer#2 = ++ ultoa::buffer#1
  *ultoa::buffer#2 = 'r'
  ultoa::buffer#3 = ++ ultoa::buffer#2
  *ultoa::buffer#3 = 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@12 ultoa::@9
  return 
  to:@return
ultoa::@5: scope:[ultoa]  from ultoa::@1 ultoa::@2 ultoa::@3 ultoa::@4
  ultoa::buffer#15 = phi( ultoa::@1/ultoa::buffer#17, ultoa::@2/ultoa::buffer#18, ultoa::@3/ultoa::buffer#19, ultoa::@4/ultoa::buffer#20 )
  ultoa::value#7 = phi( ultoa::@1/ultoa::value#8, ultoa::@2/ultoa::value#9, ultoa::@3/ultoa::value#10, ultoa::@4/ultoa::value#11 )
  ultoa::digit_values#8 = phi( ultoa::@1/ultoa::digit_values#1, ultoa::@2/ultoa::digit_values#2, ultoa::@3/ultoa::digit_values#3, ultoa::@4/ultoa::digit_values#4 )
  ultoa::max_digits#7 = phi( ultoa::@1/ultoa::max_digits#1, ultoa::@2/ultoa::max_digits#2, ultoa::@3/ultoa::max_digits#3, ultoa::@4/ultoa::max_digits#4 )
  ultoa::started#0 = 0
  ultoa::digit#0 = 0
  to:ultoa::@10
ultoa::@10: scope:[ultoa]  from ultoa::@13 ultoa::@5
  ultoa::buffer#11 = phi( ultoa::@13/ultoa::buffer#14, ultoa::@5/ultoa::buffer#15 )
  ultoa::started#3 = phi( ultoa::@13/ultoa::started#4, ultoa::@5/ultoa::started#0 )
  ultoa::value#5 = phi( ultoa::@13/ultoa::value#6, ultoa::@5/ultoa::value#7 )
  ultoa::digit_values#6 = phi( ultoa::@13/ultoa::digit_values#7, ultoa::@5/ultoa::digit_values#8 )
  ultoa::digit#2 = phi( ultoa::@13/ultoa::digit#1, ultoa::@5/ultoa::digit#0 )
  ultoa::max_digits#5 = phi( ultoa::@13/ultoa::max_digits#6, ultoa::@5/ultoa::max_digits#7 )
  ultoa::$4 = ultoa::max_digits#5 - 1
  ultoa::$5 = ultoa::digit#2 < ultoa::$4
  if(ultoa::$5) goto ultoa::@11
  to:ultoa::@12
ultoa::@11: scope:[ultoa]  from ultoa::@10
  ultoa::max_digits#8 = phi( ultoa::@10/ultoa::max_digits#5 )
  ultoa::buffer#12 = phi( ultoa::@10/ultoa::buffer#11 )
  ultoa::started#2 = phi( ultoa::@10/ultoa::started#3 )
  ultoa::value#2 = phi( ultoa::@10/ultoa::value#5 )
  ultoa::digit_values#5 = phi( ultoa::@10/ultoa::digit_values#6 )
  ultoa::digit#3 = phi( ultoa::@10/ultoa::digit#2 )
  ultoa::$10 = ultoa::digit#3 * SIZEOF_DWORD
  ultoa::digit_value#0 = ultoa::digit_values#5[ultoa::$10]
  ultoa::$6 = ultoa::value#2 >= ultoa::digit_value#0
  ultoa::$7 = ultoa::started#2 || ultoa::$6
  ultoa::$8 = ! ultoa::$7
  if(ultoa::$8) goto ultoa::@13
  to:ultoa::@14
ultoa::@12: scope:[ultoa]  from ultoa::@10
  ultoa::buffer#7 = phi( ultoa::@10/ultoa::buffer#11 )
  ultoa::value#3 = phi( ultoa::@10/ultoa::value#5 )
  ultoa::$11 = (byte)ultoa::value#3
  *ultoa::buffer#7 = DIGITS[ultoa::$11]
  ultoa::buffer#4 = ++ ultoa::buffer#7
  *ultoa::buffer#4 = 0
  to:ultoa::@return
ultoa::@13: scope:[ultoa]  from ultoa::@11 ultoa::@15
  ultoa::buffer#14 = phi( ultoa::@11/ultoa::buffer#12, ultoa::@15/ultoa::buffer#5 )
  ultoa::started#4 = phi( ultoa::@11/ultoa::started#2, ultoa::@15/ultoa::started#1 )
  ultoa::value#6 = phi( ultoa::@11/ultoa::value#2, ultoa::@15/ultoa::value#1 )
  ultoa::digit_values#7 = phi( ultoa::@11/ultoa::digit_values#5, ultoa::@15/ultoa::digit_values#9 )
  ultoa::max_digits#6 = phi( ultoa::@11/ultoa::max_digits#8, ultoa::@15/ultoa::max_digits#9 )
  ultoa::digit#4 = phi( ultoa::@11/ultoa::digit#3, ultoa::@15/ultoa::digit#5 )
  ultoa::digit#1 = ++ ultoa::digit#4
  to:ultoa::@10
ultoa::@14: scope:[ultoa]  from ultoa::@11
  ultoa::digit_values#10 = phi( ultoa::@11/ultoa::digit_values#5 )
  ultoa::max_digits#10 = phi( ultoa::@11/ultoa::max_digits#8 )
  ultoa::digit#6 = phi( ultoa::@11/ultoa::digit#3 )
  ultoa::digit_value#1 = phi( ultoa::@11/ultoa::digit_value#0 )
  ultoa::value#4 = phi( ultoa::@11/ultoa::value#2 )
  ultoa::buffer#8 = phi( ultoa::@11/ultoa::buffer#12 )
  ultoa_append::buffer#0 = ultoa::buffer#8
  ultoa_append::value#0 = ultoa::value#4
  ultoa_append::sub#0 = ultoa::digit_value#1
  call ultoa_append 
  ultoa_append::return#0 = ultoa_append::return#2
  to:ultoa::@15
ultoa::@15: scope:[ultoa]  from ultoa::@14
  ultoa::digit_values#9 = phi( ultoa::@14/ultoa::digit_values#10 )
  ultoa::max_digits#9 = phi( ultoa::@14/ultoa::max_digits#10 )
  ultoa::digit#5 = phi( ultoa::@14/ultoa::digit#6 )
  ultoa::buffer#9 = phi( ultoa::@14/ultoa::buffer#8 )
  ultoa_append::return#3 = phi( ultoa::@14/ultoa_append::return#0 )
  ultoa::$9 = ultoa_append::return#3
  ultoa::value#1 = ultoa::$9
  ultoa::buffer#5 = ++ ultoa::buffer#9
  ultoa::started#1 = 1
  to:ultoa::@13

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@14
  utoa_append::buffer#3 = phi( utoa::@14/utoa_append::buffer#0 )
  utoa_append::sub#3 = phi( utoa::@14/utoa_append::sub#0 )
  utoa_append::value#5 = phi( utoa::@14/utoa_append::value#0 )
  utoa_append::digit#0 = 0
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  utoa_append::buffer#2 = phi( utoa_append/utoa_append::buffer#3, utoa_append::@2/utoa_append::buffer#4 )
  utoa_append::digit#4 = phi( utoa_append/utoa_append::digit#0, utoa_append::@2/utoa_append::digit#1 )
  utoa_append::sub#1 = phi( utoa_append/utoa_append::sub#3, utoa_append::@2/utoa_append::sub#2 )
  utoa_append::value#2 = phi( utoa_append/utoa_append::value#5, utoa_append::@2/utoa_append::value#1 )
  utoa_append::$0 = utoa_append::value#2 >= utoa_append::sub#1
  if(utoa_append::$0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  utoa_append::buffer#4 = phi( utoa_append::@1/utoa_append::buffer#2 )
  utoa_append::sub#2 = phi( utoa_append::@1/utoa_append::sub#1 )
  utoa_append::value#3 = phi( utoa_append::@1/utoa_append::value#2 )
  utoa_append::digit#2 = phi( utoa_append::@1/utoa_append::digit#4 )
  utoa_append::digit#1 = ++ utoa_append::digit#2
  utoa_append::value#1 = utoa_append::value#3 - utoa_append::sub#2
  to:utoa_append::@1
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  utoa_append::value#4 = phi( utoa_append::@1/utoa_append::value#2 )
  utoa_append::buffer#1 = phi( utoa_append::@1/utoa_append::buffer#2 )
  utoa_append::digit#3 = phi( utoa_append::@1/utoa_append::digit#4 )
  *utoa_append::buffer#1 = DIGITS[utoa_append::digit#3]
  utoa_append::return#1 = utoa_append::value#4
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  utoa_append::return#4 = phi( utoa_append::@3/utoa_append::return#1 )
  utoa_append::return#2 = utoa_append::return#4
  return 
  to:@return

dword ultoa_append(byte* ultoa_append::buffer , dword ultoa_append::value , dword ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@14
  ultoa_append::buffer#3 = phi( ultoa::@14/ultoa_append::buffer#0 )
  ultoa_append::sub#3 = phi( ultoa::@14/ultoa_append::sub#0 )
  ultoa_append::value#5 = phi( ultoa::@14/ultoa_append::value#0 )
  ultoa_append::digit#0 = 0
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  ultoa_append::buffer#2 = phi( ultoa_append/ultoa_append::buffer#3, ultoa_append::@2/ultoa_append::buffer#4 )
  ultoa_append::digit#4 = phi( ultoa_append/ultoa_append::digit#0, ultoa_append::@2/ultoa_append::digit#1 )
  ultoa_append::sub#1 = phi( ultoa_append/ultoa_append::sub#3, ultoa_append::@2/ultoa_append::sub#2 )
  ultoa_append::value#2 = phi( ultoa_append/ultoa_append::value#5, ultoa_append::@2/ultoa_append::value#1 )
  ultoa_append::$0 = ultoa_append::value#2 >= ultoa_append::sub#1
  if(ultoa_append::$0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  ultoa_append::buffer#4 = phi( ultoa_append::@1/ultoa_append::buffer#2 )
  ultoa_append::sub#2 = phi( ultoa_append::@1/ultoa_append::sub#1 )
  ultoa_append::value#3 = phi( ultoa_append::@1/ultoa_append::value#2 )
  ultoa_append::digit#2 = phi( ultoa_append::@1/ultoa_append::digit#4 )
  ultoa_append::digit#1 = ++ ultoa_append::digit#2
  ultoa_append::value#1 = ultoa_append::value#3 - ultoa_append::sub#2
  to:ultoa_append::@1
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  ultoa_append::value#4 = phi( ultoa_append::@1/ultoa_append::value#2 )
  ultoa_append::buffer#1 = phi( ultoa_append::@1/ultoa_append::buffer#2 )
  ultoa_append::digit#3 = phi( ultoa_append::@1/ultoa_append::digit#4 )
  *ultoa_append::buffer#1 = DIGITS[ultoa_append::digit#3]
  ultoa_append::return#1 = ultoa_append::value#4
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  ultoa_append::return#4 = phi( ultoa_append::@3/ultoa_append::return#1 )
  ultoa_append::return#2 = ultoa_append::return#4
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  rem16u#54 = phi( __start::@1/rem16u#21 )
  print_char_cursor#80 = phi( __start::@1/print_char_cursor#68 )
  print_line_cursor#38 = phi( __start::@1/print_line_cursor#29 )
  print_screen#10 = phi( __start::@1/print_screen#8 )
  main::toD0181_screen#0 = SCREEN
  main::toD0181_gfx#0 = (byte*)$1800
  to:main::toD0181
main::toD0181: scope:[main]  from main
  rem16u#53 = phi( main/rem16u#54 )
  print_char_cursor#77 = phi( main/print_char_cursor#80 )
  print_line_cursor#35 = phi( main/print_line_cursor#38 )
  print_screen#9 = phi( main/print_screen#10 )
  main::toD0181_gfx#1 = phi( main/main::toD0181_gfx#0 )
  main::toD0181_screen#1 = phi( main/main::toD0181_screen#0 )
  main::toD0181_$7 = (word)main::toD0181_screen#1
  main::toD0181_$0 = main::toD0181_$7 & $3fff
  main::toD0181_$1 = main::toD0181_$0 * 4
  main::toD0181_$2 = > main::toD0181_$1
  main::toD0181_$3 = > (word)main::toD0181_gfx#1
  main::toD0181_$4 = main::toD0181_$3 / 4
  main::toD0181_$5 = main::toD0181_$4 & $f
  main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
  main::toD0181_return#0 = main::toD0181_$6
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  rem16u#52 = phi( main::toD0181/rem16u#53 )
  print_char_cursor#72 = phi( main::toD0181/print_char_cursor#77 )
  print_line_cursor#30 = phi( main::toD0181/print_line_cursor#35 )
  print_screen#7 = phi( main::toD0181/print_screen#9 )
  main::toD0181_return#2 = phi( main::toD0181/main::toD0181_return#0 )
  main::toD0181_return#1 = main::toD0181_return#2
  to:main::@15
main::@15: scope:[main]  from main::toD0181_@return
  rem16u#51 = phi( main::toD0181_@return/rem16u#52 )
  print_char_cursor#63 = phi( main::toD0181_@return/print_char_cursor#72 )
  print_line_cursor#24 = phi( main::toD0181_@return/print_line_cursor#30 )
  print_screen#5 = phi( main::toD0181_@return/print_screen#7 )
  main::toD0181_return#3 = phi( main::toD0181_@return/main::toD0181_return#1 )
  main::$0 = main::toD0181_return#3
  *D018 = main::$0
  call print_cls 
  to:main::@16
main::@16: scope:[main]  from main::@15
  rem16u#50 = phi( main::@15/rem16u#51 )
  print_char_cursor#41 = phi( main::@15/print_char_cursor#11 )
  print_line_cursor#16 = phi( main::@15/print_line_cursor#3 )
  print_line_cursor#4 = print_line_cursor#16
  print_char_cursor#12 = print_char_cursor#41
  print_str::str#3 = main::str
  call print_str 
  to:main::@17
main::@17: scope:[main]  from main::@16
  rem16u#49 = phi( main::@16/rem16u#50 )
  print_line_cursor#25 = phi( main::@16/print_line_cursor#4 )
  print_char_cursor#42 = phi( main::@16/print_char_cursor#1 )
  print_char_cursor#13 = print_char_cursor#42
  call print_ln 
  to:main::@18
main::@18: scope:[main]  from main::@17
  rem16u#47 = phi( main::@17/rem16u#49 )
  print_char_cursor#43 = phi( main::@17/print_char_cursor#3 )
  print_line_cursor#17 = phi( main::@17/print_line_cursor#1 )
  print_line_cursor#5 = print_line_cursor#17
  print_char_cursor#14 = print_char_cursor#43
  print_str::str#4 = main::str1
  call print_str 
  to:main::@19
main::@19: scope:[main]  from main::@18
  rem16u#44 = phi( main::@18/rem16u#47 )
  print_line_cursor#31 = phi( main::@18/print_line_cursor#5 )
  print_char_cursor#44 = phi( main::@18/print_char_cursor#1 )
  print_char_cursor#15 = print_char_cursor#44
  print_uint_decimal::w#0 = COUNT
  call print_uint_decimal 
  to:main::@20
main::@20: scope:[main]  from main::@19
  rem16u#41 = phi( main::@19/rem16u#44 )
  print_line_cursor#26 = phi( main::@19/print_line_cursor#31 )
  print_char_cursor#45 = phi( main::@19/print_char_cursor#5 )
  print_char_cursor#16 = print_char_cursor#45
  call print_ln 
  to:main::@21
main::@21: scope:[main]  from main::@20
  rem16u#35 = phi( main::@20/rem16u#41 )
  print_char_cursor#46 = phi( main::@20/print_char_cursor#3 )
  print_line_cursor#18 = phi( main::@20/print_line_cursor#1 )
  print_line_cursor#6 = print_line_cursor#18
  print_char_cursor#17 = print_char_cursor#46
  memset::str#1 = (void*)sieve
  memset::c#1 = 0
  memset::num#1 = COUNT
  call memset 
  memset::return#3 = memset::return#1
  to:main::@22
main::@22: scope:[main]  from main::@21
  print_line_cursor#52 = phi( main::@21/print_line_cursor#6 )
  print_char_cursor#84 = phi( main::@21/print_char_cursor#17 )
  rem16u#30 = phi( main::@21/rem16u#35 )
  call clock_start 
  to:main::@23
main::@23: scope:[main]  from main::@22
  print_line_cursor#50 = phi( main::@22/print_line_cursor#52 )
  print_char_cursor#82 = phi( main::@22/print_char_cursor#84 )
  rem16u#27 = phi( main::@22/rem16u#30 )
  main::i#0 = 2
  main::$9 = & sieve[main::i#0]
  main::sieve_i#0 = main::$9
  to:main::@1
main::@1: scope:[main]  from main::@23 main::@4
  print_line_cursor#48 = phi( main::@23/print_line_cursor#50, main::@4/print_line_cursor#51 )
  print_char_cursor#81 = phi( main::@23/print_char_cursor#82, main::@4/print_char_cursor#83 )
  rem16u#25 = phi( main::@23/rem16u#27, main::@4/rem16u#28 )
  main::sieve_i#4 = phi( main::@23/main::sieve_i#0, main::@4/main::sieve_i#1 )
  main::i#4 = phi( main::@23/main::i#0, main::@4/main::i#2 )
  main::$19 = main::i#4 < SQRT_COUNT
  if(main::$19) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  print_line_cursor#53 = phi( main::@1/print_line_cursor#48 )
  print_char_cursor#85 = phi( main::@1/print_char_cursor#81 )
  rem16u#31 = phi( main::@1/rem16u#25 )
  main::i#12 = phi( main::@1/main::i#4 )
  main::sieve_i#2 = phi( main::@1/main::sieve_i#4 )
  main::$31 = 0 != *main::sieve_i#2
  main::$20 = ! main::$31
  main::$21 = ! main::$20
  if(main::$21) goto main::@4
  to:main::@7
main::@3: scope:[main]  from main::@1
  print_line_cursor#46 = phi( main::@1/print_line_cursor#48 )
  print_char_cursor#78 = phi( main::@1/print_char_cursor#81 )
  rem16u#22 = phi( main::@1/rem16u#25 )
  call clock 
  clock::return#2 = clock::return#1
  to:main::@24
main::@24: scope:[main]  from main::@3
  print_line_cursor#43 = phi( main::@3/print_line_cursor#46 )
  print_char_cursor#73 = phi( main::@3/print_char_cursor#78 )
  rem16u#19 = phi( main::@3/rem16u#22 )
  clock::return#4 = phi( main::@3/clock::return#2 )
  main::$10 = clock::return#4
  main::$11 = main::$10 - CLOCKS_PER_INIT
  main::cyclecount#0 = main::$11
  div32u16u::dividend#0 = main::cyclecount#0
  div32u16u::divisor#0 = (word)CLOCKS_PER_SEC/$64
  call div32u16u 
  div32u16u::return#2 = div32u16u::return#1
  to:main::@25
main::@25: scope:[main]  from main::@24
  print_line_cursor#41 = phi( main::@24/print_line_cursor#43 )
  main::cyclecount#4 = phi( main::@24/main::cyclecount#0 )
  print_char_cursor#64 = phi( main::@24/print_char_cursor#73 )
  rem16u#14 = phi( main::@24/rem16u#4 )
  div32u16u::return#4 = phi( main::@24/div32u16u::return#2 )
  main::$12 = div32u16u::return#4
  rem16u#5 = rem16u#14
  main::sec100s#0 = (word)main::$12
  print_str::str#5 = main::str2
  call print_str 
  to:main::@26
main::@26: scope:[main]  from main::@25
  rem16u#48 = phi( main::@25/rem16u#5 )
  print_line_cursor#39 = phi( main::@25/print_line_cursor#41 )
  main::cyclecount#3 = phi( main::@25/main::cyclecount#4 )
  main::sec100s#1 = phi( main::@25/main::sec100s#0 )
  print_char_cursor#47 = phi( main::@25/print_char_cursor#1 )
  print_char_cursor#18 = print_char_cursor#47
  print_uint_decimal::w#1 = main::sec100s#1
  call print_uint_decimal 
  to:main::@27
main::@27: scope:[main]  from main::@26
  rem16u#45 = phi( main::@26/rem16u#48 )
  print_line_cursor#36 = phi( main::@26/print_line_cursor#39 )
  main::cyclecount#2 = phi( main::@26/main::cyclecount#3 )
  print_char_cursor#48 = phi( main::@26/print_char_cursor#5 )
  print_char_cursor#19 = print_char_cursor#48
  print_str::str#6 = main::str3
  call print_str 
  to:main::@28
main::@28: scope:[main]  from main::@27
  rem16u#42 = phi( main::@27/rem16u#45 )
  print_line_cursor#32 = phi( main::@27/print_line_cursor#36 )
  main::cyclecount#1 = phi( main::@27/main::cyclecount#2 )
  print_char_cursor#49 = phi( main::@27/print_char_cursor#1 )
  print_char_cursor#20 = print_char_cursor#49
  print_ulong_decimal::w#0 = main::cyclecount#1
  call print_ulong_decimal 
  to:main::@29
main::@29: scope:[main]  from main::@28
  rem16u#36 = phi( main::@28/rem16u#42 )
  print_line_cursor#27 = phi( main::@28/print_line_cursor#32 )
  print_char_cursor#50 = phi( main::@28/print_char_cursor#7 )
  print_char_cursor#21 = print_char_cursor#50
  call print_ln 
  to:main::@30
main::@30: scope:[main]  from main::@29
  rem16u#34 = phi( main::@29/rem16u#36 )
  print_char_cursor#51 = phi( main::@29/print_char_cursor#3 )
  print_line_cursor#19 = phi( main::@29/print_line_cursor#1 )
  print_line_cursor#7 = print_line_cursor#19
  print_char_cursor#22 = print_char_cursor#51
  main::i#1 = 2
  to:main::@8
main::@4: scope:[main]  from main::@2 main::@5
  print_line_cursor#51 = phi( main::@2/print_line_cursor#53, main::@5/print_line_cursor#54 )
  print_char_cursor#83 = phi( main::@2/print_char_cursor#85, main::@5/print_char_cursor#86 )
  rem16u#28 = phi( main::@2/rem16u#31, main::@5/rem16u#32 )
  main::sieve_i#3 = phi( main::@2/main::sieve_i#2, main::@5/main::sieve_i#5 )
  main::i#5 = phi( main::@2/main::i#12, main::@5/main::i#13 )
  main::i#2 = ++ main::i#5
  main::sieve_i#1 = ++ main::sieve_i#3
  to:main::@1
main::@7: scope:[main]  from main::@2
  print_line_cursor#56 = phi( main::@2/print_line_cursor#53 )
  print_char_cursor#88 = phi( main::@2/print_char_cursor#85 )
  rem16u#38 = phi( main::@2/rem16u#31 )
  main::sieve_i#7 = phi( main::@2/main::sieve_i#2 )
  main::i#6 = phi( main::@2/main::i#12 )
  main::$22 = main::i#6 * 2
  main::j#0 = main::$22
  main::$23 = & sieve[main::j#0]
  main::s#0 = main::$23
  to:main::@5
main::@5: scope:[main]  from main::@6 main::@7
  print_line_cursor#54 = phi( main::@6/print_line_cursor#55, main::@7/print_line_cursor#56 )
  print_char_cursor#86 = phi( main::@6/print_char_cursor#87, main::@7/print_char_cursor#88 )
  rem16u#32 = phi( main::@6/rem16u#37, main::@7/rem16u#38 )
  main::s#3 = phi( main::@6/main::s#1, main::@7/main::s#0 )
  main::sieve_i#5 = phi( main::@6/main::sieve_i#6, main::@7/main::sieve_i#7 )
  main::i#13 = phi( main::@6/main::i#7, main::@7/main::i#6 )
  main::j#2 = phi( main::@6/main::j#1, main::@7/main::j#0 )
  main::$24 = main::j#2 < COUNT
  if(main::$24) goto main::@6
  to:main::@4
main::@6: scope:[main]  from main::@5
  print_line_cursor#55 = phi( main::@5/print_line_cursor#54 )
  print_char_cursor#87 = phi( main::@5/print_char_cursor#86 )
  rem16u#37 = phi( main::@5/rem16u#32 )
  main::sieve_i#6 = phi( main::@5/main::sieve_i#5 )
  main::j#3 = phi( main::@5/main::j#2 )
  main::i#7 = phi( main::@5/main::i#13 )
  main::s#2 = phi( main::@5/main::s#3 )
  *main::s#2 = 1
  main::s#1 = main::s#2 + main::i#7
  main::j#1 = main::j#3 + main::i#7
  to:main::@5
main::@8: scope:[main]  from main::@11 main::@30
  rem16u#29 = phi( main::@11/rem16u#33, main::@30/rem16u#34 )
  print_line_cursor#40 = phi( main::@11/print_line_cursor#42, main::@30/print_line_cursor#7 )
  print_char_cursor#74 = phi( main::@11/print_char_cursor#79, main::@30/print_char_cursor#22 )
  main::i#8 = phi( main::@11/main::i#3, main::@30/main::i#1 )
  main::$25 = main::i#8 < $514
  if(main::$25) goto main::@9
  to:main::@10
main::@9: scope:[main]  from main::@8
  rem16u#40 = phi( main::@8/rem16u#29 )
  print_line_cursor#45 = phi( main::@8/print_line_cursor#40 )
  print_char_cursor#75 = phi( main::@8/print_char_cursor#74 )
  main::i#9 = phi( main::@8/main::i#8 )
  main::$32 = 0 != sieve[main::i#9]
  main::$26 = ! main::$32
  main::$27 = ! main::$26
  if(main::$27) goto main::@11
  to:main::@12
main::@10: scope:[main]  from main::@8
  rem16u#26 = phi( main::@8/rem16u#29 )
  print_line_cursor#37 = phi( main::@8/print_line_cursor#40 )
  print_char_cursor#65 = phi( main::@8/print_char_cursor#74 )
  print_str::str#7 = main::str4
  call print_str 
  to:main::@31
main::@31: scope:[main]  from main::@10
  rem16u#24 = phi( main::@10/rem16u#26 )
  print_line_cursor#34 = phi( main::@10/print_line_cursor#37 )
  print_char_cursor#52 = phi( main::@10/print_char_cursor#1 )
  print_char_cursor#23 = print_char_cursor#52
  to:main::@13
main::@11: scope:[main]  from main::@33 main::@9
  rem16u#33 = phi( main::@33/rem16u#39, main::@9/rem16u#40 )
  print_line_cursor#42 = phi( main::@33/print_line_cursor#44, main::@9/print_line_cursor#45 )
  print_char_cursor#79 = phi( main::@33/print_char_cursor#25, main::@9/print_char_cursor#75 )
  main::i#10 = phi( main::@33/main::i#14, main::@9/main::i#9 )
  main::i#3 = ++ main::i#10
  to:main::@8
main::@12: scope:[main]  from main::@9
  rem16u#46 = phi( main::@9/rem16u#40 )
  print_line_cursor#49 = phi( main::@9/print_line_cursor#45 )
  print_char_cursor#66 = phi( main::@9/print_char_cursor#75 )
  main::i#11 = phi( main::@9/main::i#9 )
  print_uint_decimal::w#2 = main::i#11
  call print_uint_decimal 
  to:main::@32
main::@32: scope:[main]  from main::@12
  rem16u#43 = phi( main::@12/rem16u#46 )
  print_line_cursor#47 = phi( main::@12/print_line_cursor#49 )
  main::i#15 = phi( main::@12/main::i#11 )
  print_char_cursor#53 = phi( main::@12/print_char_cursor#5 )
  print_char_cursor#24 = print_char_cursor#53
  print_char::ch#1 = ' '
  call print_char 
  to:main::@33
main::@33: scope:[main]  from main::@32
  rem16u#39 = phi( main::@32/rem16u#43 )
  print_line_cursor#44 = phi( main::@32/print_line_cursor#47 )
  main::i#14 = phi( main::@32/main::i#15 )
  print_char_cursor#54 = phi( main::@32/print_char_cursor#9 )
  print_char_cursor#25 = print_char_cursor#54
  to:main::@11
main::@13: scope:[main]  from main::@14 main::@31
  rem16u#20 = phi( main::@14/rem16u#23, main::@31/rem16u#24 )
  print_char_cursor#67 = phi( main::@14/print_char_cursor#76, main::@31/print_char_cursor#23 )
  print_line_cursor#28 = phi( main::@14/print_line_cursor#33, main::@31/print_line_cursor#34 )
  if(true) goto main::@14
  to:main::@return
main::@14: scope:[main]  from main::@13
  rem16u#23 = phi( main::@13/rem16u#20 )
  print_char_cursor#76 = phi( main::@13/print_char_cursor#67 )
  print_line_cursor#33 = phi( main::@13/print_line_cursor#28 )
  *(SCREEN+$3e7) = ++ *(SCREEN+$3e7)
  to:main::@13
main::@return: scope:[main]  from main::@13
  rem16u#15 = phi( main::@13/rem16u#20 )
  print_char_cursor#55 = phi( main::@13/print_char_cursor#67 )
  print_line_cursor#20 = phi( main::@13/print_line_cursor#28 )
  print_line_cursor#8 = print_line_cursor#20
  print_char_cursor#26 = print_char_cursor#55
  rem16u#6 = rem16u#15
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  rem16u#7 = 0
  print_screen#0 = (byte*)$400
  print_line_cursor#9 = print_screen#0
  print_char_cursor#27 = print_line_cursor#9
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  print_screen#8 = phi( __start::__init1/print_screen#0 )
  rem16u#21 = phi( __start::__init1/rem16u#7 )
  print_char_cursor#68 = phi( __start::__init1/print_char_cursor#27 )
  print_line_cursor#29 = phi( __start::__init1/print_line_cursor#9 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  print_screen#6 = phi( __start::@1/print_screen#8 )
  rem16u#16 = phi( __start::@1/rem16u#6 )
  print_char_cursor#56 = phi( __start::@1/print_char_cursor#26 )
  print_line_cursor#21 = phi( __start::@1/print_line_cursor#8 )
  print_line_cursor#10 = print_line_cursor#21
  print_char_cursor#28 = print_char_cursor#56
  rem16u#8 = rem16u#16
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  print_char_cursor#57 = phi( __start::@2/print_char_cursor#28 )
  print_line_cursor#22 = phi( __start::@2/print_line_cursor#10 )
  print_screen#4 = phi( __start::@2/print_screen#6 )
  rem16u#17 = phi( __start::@2/rem16u#8 )
  rem16u#9 = rem16u#17
  print_screen#1 = print_screen#4
  print_line_cursor#11 = print_line_cursor#22
  print_char_cursor#29 = print_char_cursor#57
  return 
  to:@return

SYMBOL TABLE SSA
constant byte BINARY = 2
constant struct MOS6526_CIA* const CIA2 = (struct MOS6526_CIA*)$dd00
constant dword* const CIA2_TIMER_AB = (dword*)$dd04
constant const byte CIA_TIMER_CONTROL_A_COUNT_CYCLES = 0
constant const byte CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
constant const byte CIA_TIMER_CONTROL_CONTINUOUS = 0
constant const byte CIA_TIMER_CONTROL_START = 1
constant const byte CIA_TIMER_CONTROL_STOP = 0
constant const word CLOCKS_PER_FRAME = $4cc8
constant const dword CLOCKS_PER_INIT = $12
constant const dword CLOCKS_PER_SEC = (dword)CLOCKS_PER_FRAME*FRAMES_PER_SEC
constant const word COUNT = $4000
constant byte* const D018 = (byte*)$d018
constant byte DECIMAL = $a
constant byte* DIGITS[]  = "0123456789abcdef"z
constant const byte FRAMES_PER_SEC = $3c
constant byte HEXADECIMAL = $10
constant byte OCTAL = 8
constant byte OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
constant byte OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant word* RADIX_BINARY_VALUES[]  = { $8000, $4000, $2000, $1000, $800, $400, $200, $100, $80, $40, $20, $10, 8, 4, 2 }
constant dword* RADIX_BINARY_VALUES_LONG[]  = { $80000000, $40000000, $20000000, $10000000, $8000000, $4000000, $2000000, $1000000, $800000, $400000, $200000, $100000, $80000, $40000, $20000, $10000, $8000, $4000, $2000, $1000, $800, $400, $200, $100, $80, $40, $20, $10, 8, 4, 2 }
constant word* RADIX_DECIMAL_VALUES[]  = { $2710, $3e8, $64, $a }
constant dword* RADIX_DECIMAL_VALUES_LONG[]  = { $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a }
constant word* RADIX_HEXADECIMAL_VALUES[]  = { $1000, $100, $10 }
constant dword* RADIX_HEXADECIMAL_VALUES_LONG[]  = { $10000000, $1000000, $100000, $10000, $1000, $100, $10 }
constant word* RADIX_OCTAL_VALUES[]  = { $8000, $1000, $200, $40, 8 }
constant dword* RADIX_OCTAL_VALUES_LONG[]  = { $40000000, $8000000, $1000000, $200000, $40000, $8000, $1000, $200, $40, 8 }
constant byte* const SCREEN = (byte*)$400
constant byte SIZEOF_DWORD = 4
constant byte SIZEOF_WORD = 2
constant const byte SQRT_COUNT = $80
void __start()
dword clock()
number~ clock::$0
dword clock::return
dword clock::return#0
dword clock::return#1
dword clock::return#2
dword clock::return#3
dword clock::return#4
void clock_start()
constant byte* decimal_digits[6]  = { fill( 6, 0) }
constant byte* decimal_digits_long[$b]  = { fill( $b, 0) }
dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
word~ div32u16u::$0
word~ div32u16u::$1
word~ div32u16u::$2
word~ div32u16u::$3
dword div32u16u::dividend
dword div32u16u::dividend#0
dword div32u16u::dividend#1
dword div32u16u::dividend#2
word div32u16u::divisor
word div32u16u::divisor#0
word div32u16u::divisor#1
word div32u16u::divisor#2
dword div32u16u::quotient
dword div32u16u::quotient#0
word div32u16u::quotient_hi
word div32u16u::quotient_hi#0
word div32u16u::quotient_hi#1
word div32u16u::quotient_lo
word div32u16u::quotient_lo#0
dword div32u16u::return
dword div32u16u::return#0
dword div32u16u::return#1
dword div32u16u::return#2
dword div32u16u::return#3
dword div32u16u::return#4
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
word~ divr16u::$0
byte~ divr16u::$1
word~ divr16u::$10
bool~ divr16u::$11
number~ divr16u::$2
bool~ divr16u::$3
bool~ divr16u::$4
number~ divr16u::$5
word~ divr16u::$6
word~ divr16u::$7
bool~ divr16u::$8
bool~ divr16u::$9
word divr16u::dividend
word divr16u::dividend#0
word divr16u::dividend#1
word divr16u::dividend#2
word divr16u::dividend#3
word divr16u::dividend#4
word divr16u::dividend#5
word divr16u::dividend#6
word divr16u::dividend#7
word divr16u::dividend#8
word divr16u::divisor
word divr16u::divisor#0
word divr16u::divisor#1
word divr16u::divisor#2
word divr16u::divisor#3
word divr16u::divisor#4
word divr16u::divisor#5
word divr16u::divisor#6
word divr16u::divisor#7
byte divr16u::i
byte divr16u::i#0
byte divr16u::i#1
byte divr16u::i#2
byte divr16u::i#3
byte divr16u::i#4
byte divr16u::i#5
byte divr16u::i#6
word divr16u::quotient
word divr16u::quotient#0
word divr16u::quotient#1
word divr16u::quotient#2
word divr16u::quotient#3
word divr16u::quotient#4
word divr16u::quotient#5
word divr16u::quotient#6
word divr16u::quotient#7
word divr16u::quotient#8
word divr16u::rem
word divr16u::rem#0
word divr16u::rem#1
word divr16u::rem#10
word divr16u::rem#11
word divr16u::rem#2
word divr16u::rem#3
word divr16u::rem#4
word divr16u::rem#5
word divr16u::rem#6
word divr16u::rem#7
word divr16u::rem#8
word divr16u::rem#9
word divr16u::return
word divr16u::return#0
word divr16u::return#1
word divr16u::return#2
word divr16u::return#3
word divr16u::return#4
word divr16u::return#5
word divr16u::return#6
void main()
byte~ main::$0
dword~ main::$10
dword~ main::$11
dword~ main::$12
bool~ main::$19
bool~ main::$20
bool~ main::$21
number~ main::$22
byte*~ main::$23
bool~ main::$24
bool~ main::$25
bool~ main::$26
bool~ main::$27
bool~ main::$31
bool~ main::$32
byte*~ main::$9
dword main::cyclecount
dword main::cyclecount#0
dword main::cyclecount#1
dword main::cyclecount#2
dword main::cyclecount#3
dword main::cyclecount#4
word main::i
word main::i#0
word main::i#1
word main::i#10
word main::i#11
word main::i#12
word main::i#13
word main::i#14
word main::i#15
word main::i#2
word main::i#3
word main::i#4
word main::i#5
word main::i#6
word main::i#7
word main::i#8
word main::i#9
word main::j
word main::j#0
word main::j#1
word main::j#2
word main::j#3
byte* main::s
byte* main::s#0
byte* main::s#1
byte* main::s#2
byte* main::s#3
word main::sec100s
word main::sec100s#0
word main::sec100s#1
byte* main::sieve_i
byte* main::sieve_i#0
byte* main::sieve_i#1
byte* main::sieve_i#2
byte* main::sieve_i#3
byte* main::sieve_i#4
byte* main::sieve_i#5
byte* main::sieve_i#6
byte* main::sieve_i#7
constant byte* main::str[$25]  = "Sieve benchmark - calculating primes"
constant byte* main::str1[$f]  = "between 2 and "
constant byte* main::str2[$16]  = "100ths seconds used: "
constant byte* main::str3[$a]  = " cycles: "
constant byte* main::str4[4]  = "..."
number~ main::toD0181_$0
number~ main::toD0181_$1
byte~ main::toD0181_$2
byte~ main::toD0181_$3
number~ main::toD0181_$4
number~ main::toD0181_$5
number~ main::toD0181_$6
word~ main::toD0181_$7
byte* main::toD0181_gfx
byte* main::toD0181_gfx#0
byte* main::toD0181_gfx#1
byte main::toD0181_return
byte main::toD0181_return#0
byte main::toD0181_return#1
byte main::toD0181_return#2
byte main::toD0181_return#3
byte* main::toD0181_screen
byte* main::toD0181_screen#0
byte* main::toD0181_screen#1
void* memset(void* memset::str , byte memset::c , word memset::num)
bool~ memset::$0
bool~ memset::$1
byte*~ memset::$2
bool~ memset::$3
byte*~ memset::$4
byte memset::c
byte memset::c#0
byte memset::c#1
byte memset::c#2
byte memset::c#3
byte memset::c#4
byte memset::c#5
byte* memset::dst
byte* memset::dst#0
byte* memset::dst#1
byte* memset::dst#2
byte* memset::dst#3
byte* memset::end
byte* memset::end#0
byte* memset::end#1
byte* memset::end#2
word memset::num
word memset::num#0
word memset::num#1
word memset::num#2
word memset::num#3
void* memset::return
void* memset::return#0
void* memset::return#1
void* memset::return#2
void* memset::return#3
void* memset::return#4
void* memset::str
void* memset::str#0
void* memset::str#1
void* memset::str#2
void* memset::str#3
void* memset::str#4
void* memset::str#5
void* memset::str#6
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0
byte print_char::ch#1
byte print_char::ch#2
byte* print_char_cursor
byte* print_char_cursor#0
byte* print_char_cursor#1
byte* print_char_cursor#10
byte* print_char_cursor#11
byte* print_char_cursor#12
byte* print_char_cursor#13
byte* print_char_cursor#14
byte* print_char_cursor#15
byte* print_char_cursor#16
byte* print_char_cursor#17
byte* print_char_cursor#18
byte* print_char_cursor#19
byte* print_char_cursor#2
byte* print_char_cursor#20
byte* print_char_cursor#21
byte* print_char_cursor#22
byte* print_char_cursor#23
byte* print_char_cursor#24
byte* print_char_cursor#25
byte* print_char_cursor#26
byte* print_char_cursor#27
byte* print_char_cursor#28
byte* print_char_cursor#29
byte* print_char_cursor#3
byte* print_char_cursor#30
byte* print_char_cursor#31
byte* print_char_cursor#32
byte* print_char_cursor#33
byte* print_char_cursor#34
byte* print_char_cursor#35
byte* print_char_cursor#36
byte* print_char_cursor#37
byte* print_char_cursor#38
byte* print_char_cursor#39
byte* print_char_cursor#4
byte* print_char_cursor#40
byte* print_char_cursor#41
byte* print_char_cursor#42
byte* print_char_cursor#43
byte* print_char_cursor#44
byte* print_char_cursor#45
byte* print_char_cursor#46
byte* print_char_cursor#47
byte* print_char_cursor#48
byte* print_char_cursor#49
byte* print_char_cursor#5
byte* print_char_cursor#50
byte* print_char_cursor#51
byte* print_char_cursor#52
byte* print_char_cursor#53
byte* print_char_cursor#54
byte* print_char_cursor#55
byte* print_char_cursor#56
byte* print_char_cursor#57
byte* print_char_cursor#58
byte* print_char_cursor#59
byte* print_char_cursor#6
byte* print_char_cursor#60
byte* print_char_cursor#61
byte* print_char_cursor#62
byte* print_char_cursor#63
byte* print_char_cursor#64
byte* print_char_cursor#65
byte* print_char_cursor#66
byte* print_char_cursor#67
byte* print_char_cursor#68
byte* print_char_cursor#69
byte* print_char_cursor#7
byte* print_char_cursor#70
byte* print_char_cursor#71
byte* print_char_cursor#72
byte* print_char_cursor#73
byte* print_char_cursor#74
byte* print_char_cursor#75
byte* print_char_cursor#76
byte* print_char_cursor#77
byte* print_char_cursor#78
byte* print_char_cursor#79
byte* print_char_cursor#8
byte* print_char_cursor#80
byte* print_char_cursor#81
byte* print_char_cursor#82
byte* print_char_cursor#83
byte* print_char_cursor#84
byte* print_char_cursor#85
byte* print_char_cursor#86
byte* print_char_cursor#87
byte* print_char_cursor#88
byte* print_char_cursor#9
void print_cls()
byte* print_line_cursor
byte* print_line_cursor#0
byte* print_line_cursor#1
byte* print_line_cursor#10
byte* print_line_cursor#11
byte* print_line_cursor#12
byte* print_line_cursor#13
byte* print_line_cursor#14
byte* print_line_cursor#15
byte* print_line_cursor#16
byte* print_line_cursor#17
byte* print_line_cursor#18
byte* print_line_cursor#19
byte* print_line_cursor#2
byte* print_line_cursor#20
byte* print_line_cursor#21
byte* print_line_cursor#22
byte* print_line_cursor#23
byte* print_line_cursor#24
byte* print_line_cursor#25
byte* print_line_cursor#26
byte* print_line_cursor#27
byte* print_line_cursor#28
byte* print_line_cursor#29
byte* print_line_cursor#3
byte* print_line_cursor#30
byte* print_line_cursor#31
byte* print_line_cursor#32
byte* print_line_cursor#33
byte* print_line_cursor#34
byte* print_line_cursor#35
byte* print_line_cursor#36
byte* print_line_cursor#37
byte* print_line_cursor#38
byte* print_line_cursor#39
byte* print_line_cursor#4
byte* print_line_cursor#40
byte* print_line_cursor#41
byte* print_line_cursor#42
byte* print_line_cursor#43
byte* print_line_cursor#44
byte* print_line_cursor#45
byte* print_line_cursor#46
byte* print_line_cursor#47
byte* print_line_cursor#48
byte* print_line_cursor#49
byte* print_line_cursor#5
byte* print_line_cursor#50
byte* print_line_cursor#51
byte* print_line_cursor#52
byte* print_line_cursor#53
byte* print_line_cursor#54
byte* print_line_cursor#55
byte* print_line_cursor#56
byte* print_line_cursor#6
byte* print_line_cursor#7
byte* print_line_cursor#8
byte* print_line_cursor#9
void print_ln()
byte*~ print_ln::$0
bool~ print_ln::$1
byte* print_screen
byte* print_screen#0
byte* print_screen#1
byte* print_screen#10
byte* print_screen#2
byte* print_screen#3
byte* print_screen#4
byte* print_screen#5
byte* print_screen#6
byte* print_screen#7
byte* print_screen#8
byte* print_screen#9
void print_str(byte* print_str::str)
bool~ print_str::$1
byte* print_str::str
byte* print_str::str#0
byte* print_str::str#1
byte* print_str::str#10
byte* print_str::str#11
byte* print_str::str#2
byte* print_str::str#3
byte* print_str::str#4
byte* print_str::str#5
byte* print_str::str#6
byte* print_str::str#7
byte* print_str::str#8
byte* print_str::str#9
void print_uint_decimal(word print_uint_decimal::w)
word print_uint_decimal::w
word print_uint_decimal::w#0
word print_uint_decimal::w#1
word print_uint_decimal::w#2
word print_uint_decimal::w#3
void print_ulong_decimal(dword print_ulong_decimal::w)
dword print_ulong_decimal::w
dword print_ulong_decimal::w#0
dword print_ulong_decimal::w#1
word rem16u
word rem16u#0
word rem16u#1
word rem16u#10
word rem16u#11
word rem16u#12
word rem16u#13
word rem16u#14
word rem16u#15
word rem16u#16
word rem16u#17
word rem16u#18
word rem16u#19
word rem16u#2
word rem16u#20
word rem16u#21
word rem16u#22
word rem16u#23
word rem16u#24
word rem16u#25
word rem16u#26
word rem16u#27
word rem16u#28
word rem16u#29
word rem16u#3
word rem16u#30
word rem16u#31
word rem16u#32
word rem16u#33
word rem16u#34
word rem16u#35
word rem16u#36
word rem16u#37
word rem16u#38
word rem16u#39
word rem16u#4
word rem16u#40
word rem16u#41
word rem16u#42
word rem16u#43
word rem16u#44
word rem16u#45
word rem16u#46
word rem16u#47
word rem16u#48
word rem16u#49
word rem16u#5
word rem16u#50
word rem16u#51
word rem16u#52
word rem16u#53
word rem16u#54
word rem16u#6
word rem16u#7
word rem16u#8
word rem16u#9
constant byte* sieve = (byte*)$1000
void ultoa(dword ultoa::value , byte* ultoa::buffer , byte ultoa::radix)
bool~ ultoa::$0
bool~ ultoa::$1
byte~ ultoa::$10
byte~ ultoa::$11
bool~ ultoa::$2
bool~ ultoa::$3
number~ ultoa::$4
bool~ ultoa::$5
bool~ ultoa::$6
bool~ ultoa::$7
bool~ ultoa::$8
dword~ ultoa::$9
byte* ultoa::buffer
byte* ultoa::buffer#0
byte* ultoa::buffer#1
byte* ultoa::buffer#10
byte* ultoa::buffer#11
byte* ultoa::buffer#12
byte* ultoa::buffer#13
byte* ultoa::buffer#14
byte* ultoa::buffer#15
byte* ultoa::buffer#16
byte* ultoa::buffer#17
byte* ultoa::buffer#18
byte* ultoa::buffer#19
byte* ultoa::buffer#2
byte* ultoa::buffer#20
byte* ultoa::buffer#21
byte* ultoa::buffer#3
byte* ultoa::buffer#4
byte* ultoa::buffer#5
byte* ultoa::buffer#6
byte* ultoa::buffer#7
byte* ultoa::buffer#8
byte* ultoa::buffer#9
byte ultoa::digit
byte ultoa::digit#0
byte ultoa::digit#1
byte ultoa::digit#2
byte ultoa::digit#3
byte ultoa::digit#4
byte ultoa::digit#5
byte ultoa::digit#6
dword ultoa::digit_value
dword ultoa::digit_value#0
dword ultoa::digit_value#1
dword* ultoa::digit_values
dword* ultoa::digit_values#0
dword* ultoa::digit_values#1
dword* ultoa::digit_values#10
dword* ultoa::digit_values#2
dword* ultoa::digit_values#3
dword* ultoa::digit_values#4
dword* ultoa::digit_values#5
dword* ultoa::digit_values#6
dword* ultoa::digit_values#7
dword* ultoa::digit_values#8
dword* ultoa::digit_values#9
byte ultoa::max_digits
byte ultoa::max_digits#0
byte ultoa::max_digits#1
byte ultoa::max_digits#10
byte ultoa::max_digits#2
byte ultoa::max_digits#3
byte ultoa::max_digits#4
byte ultoa::max_digits#5
byte ultoa::max_digits#6
byte ultoa::max_digits#7
byte ultoa::max_digits#8
byte ultoa::max_digits#9
byte ultoa::radix
byte ultoa::radix#0
byte ultoa::radix#1
byte ultoa::radix#2
byte ultoa::radix#3
byte ultoa::radix#4
byte ultoa::started
byte ultoa::started#0
byte ultoa::started#1
byte ultoa::started#2
byte ultoa::started#3
byte ultoa::started#4
dword ultoa::value
dword ultoa::value#0
dword ultoa::value#1
dword ultoa::value#10
dword ultoa::value#11
dword ultoa::value#12
dword ultoa::value#13
dword ultoa::value#14
dword ultoa::value#15
dword ultoa::value#2
dword ultoa::value#3
dword ultoa::value#4
dword ultoa::value#5
dword ultoa::value#6
dword ultoa::value#7
dword ultoa::value#8
dword ultoa::value#9
dword ultoa_append(byte* ultoa_append::buffer , dword ultoa_append::value , dword ultoa_append::sub)
bool~ ultoa_append::$0
byte* ultoa_append::buffer
byte* ultoa_append::buffer#0
byte* ultoa_append::buffer#1
byte* ultoa_append::buffer#2
byte* ultoa_append::buffer#3
byte* ultoa_append::buffer#4
byte ultoa_append::digit
byte ultoa_append::digit#0
byte ultoa_append::digit#1
byte ultoa_append::digit#2
byte ultoa_append::digit#3
byte ultoa_append::digit#4
dword ultoa_append::return
dword ultoa_append::return#0
dword ultoa_append::return#1
dword ultoa_append::return#2
dword ultoa_append::return#3
dword ultoa_append::return#4
dword ultoa_append::sub
dword ultoa_append::sub#0
dword ultoa_append::sub#1
dword ultoa_append::sub#2
dword ultoa_append::sub#3
dword ultoa_append::value
dword ultoa_append::value#0
dword ultoa_append::value#1
dword ultoa_append::value#2
dword ultoa_append::value#3
dword ultoa_append::value#4
dword ultoa_append::value#5
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
bool~ utoa::$0
bool~ utoa::$1
byte~ utoa::$10
byte~ utoa::$11
bool~ utoa::$2
bool~ utoa::$3
number~ utoa::$4
bool~ utoa::$5
bool~ utoa::$6
bool~ utoa::$7
bool~ utoa::$8
word~ utoa::$9
byte* utoa::buffer
byte* utoa::buffer#0
byte* utoa::buffer#1
byte* utoa::buffer#10
byte* utoa::buffer#11
byte* utoa::buffer#12
byte* utoa::buffer#13
byte* utoa::buffer#14
byte* utoa::buffer#15
byte* utoa::buffer#16
byte* utoa::buffer#17
byte* utoa::buffer#18
byte* utoa::buffer#19
byte* utoa::buffer#2
byte* utoa::buffer#20
byte* utoa::buffer#21
byte* utoa::buffer#3
byte* utoa::buffer#4
byte* utoa::buffer#5
byte* utoa::buffer#6
byte* utoa::buffer#7
byte* utoa::buffer#8
byte* utoa::buffer#9
byte utoa::digit
byte utoa::digit#0
byte utoa::digit#1
byte utoa::digit#2
byte utoa::digit#3
byte utoa::digit#4
byte utoa::digit#5
byte utoa::digit#6
word utoa::digit_value
word utoa::digit_value#0
word utoa::digit_value#1
word* utoa::digit_values
word* utoa::digit_values#0
word* utoa::digit_values#1
word* utoa::digit_values#10
word* utoa::digit_values#2
word* utoa::digit_values#3
word* utoa::digit_values#4
word* utoa::digit_values#5
word* utoa::digit_values#6
word* utoa::digit_values#7
word* utoa::digit_values#8
word* utoa::digit_values#9
byte utoa::max_digits
byte utoa::max_digits#0
byte utoa::max_digits#1
byte utoa::max_digits#10
byte utoa::max_digits#2
byte utoa::max_digits#3
byte utoa::max_digits#4
byte utoa::max_digits#5
byte utoa::max_digits#6
byte utoa::max_digits#7
byte utoa::max_digits#8
byte utoa::max_digits#9
byte utoa::radix
byte utoa::radix#0
byte utoa::radix#1
byte utoa::radix#2
byte utoa::radix#3
byte utoa::radix#4
byte utoa::started
byte utoa::started#0
byte utoa::started#1
byte utoa::started#2
byte utoa::started#3
byte utoa::started#4
word utoa::value
word utoa::value#0
word utoa::value#1
word utoa::value#10
word utoa::value#11
word utoa::value#12
word utoa::value#13
word utoa::value#14
word utoa::value#15
word utoa::value#2
word utoa::value#3
word utoa::value#4
word utoa::value#5
word utoa::value#6
word utoa::value#7
word utoa::value#8
word utoa::value#9
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
bool~ utoa_append::$0
byte* utoa_append::buffer
byte* utoa_append::buffer#0
byte* utoa_append::buffer#1
byte* utoa_append::buffer#2
byte* utoa_append::buffer#3
byte* utoa_append::buffer#4
byte utoa_append::digit
byte utoa_append::digit#0
byte utoa_append::digit#1
byte utoa_append::digit#2
byte utoa_append::digit#3
byte utoa_append::digit#4
word utoa_append::return
word utoa_append::return#0
word utoa_append::return#1
word utoa_append::return#2
word utoa_append::return#3
word utoa_append::return#4
word utoa_append::sub
word utoa_append::sub#0
word utoa_append::sub#1
word utoa_append::sub#2
word utoa_append::sub#3
word utoa_append::value
word utoa_append::value#0
word utoa_append::value#1
word utoa_append::value#2
word utoa_append::value#3
word utoa_append::value#4
word utoa_append::value#5

Fixing inline constructor with div32u16u::$4 = (word)div32u16u::quotient_hi#1 dw= (word)div32u16u::quotient_lo#0
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#2 > 0
Adding number conversion cast (unumber) $ffffffff in clock::$0 = $ffffffff - *CIA2_TIMER_AB
Adding number conversion cast (unumber) clock::$0 in clock::$0 = (unumber)$ffffffff - *CIA2_TIMER_AB
Adding number conversion cast (unumber) $ffffffff in *CIA2_TIMER_AB = $ffffffff
Adding number conversion cast (unumber) 1 in divr16u::$0 = divr16u::rem#5 << 1
Adding number conversion cast (unumber) $80 in divr16u::$2 = divr16u::$1 & $80
Adding number conversion cast (unumber) divr16u::$2 in divr16u::$2 = divr16u::$1 & (unumber)$80
Adding number conversion cast (unumber) 0 in divr16u::$3 = divr16u::$2 != 0
Adding number conversion cast (unumber) 1 in divr16u::$6 = divr16u::dividend#4 << 1
Adding number conversion cast (unumber) 1 in divr16u::$7 = divr16u::quotient#3 << 1
Adding number conversion cast (unumber) 1 in divr16u::$5 = divr16u::rem#7 | 1
Adding number conversion cast (unumber) divr16u::$5 in divr16u::$5 = divr16u::rem#7 | (unumber)1
Adding number conversion cast (unumber) 0 in divr16u::rem#3 = 0
Adding number conversion cast (unumber) 0 in print_str::$1 = 0 != *print_str::str#8
Adding number conversion cast (unumber) $28 in print_ln::$0 = print_line_cursor#12 + $28
Adding number conversion cast (unumber) $3e8 in memset::num#0 = $3e8
Adding number conversion cast (unumber) 5 in utoa::max_digits#1 = 5
Adding number conversion cast (unumber) 4 in utoa::max_digits#2 = 4
Adding number conversion cast (unumber) 6 in utoa::max_digits#3 = 6
Adding number conversion cast (unumber) $10 in utoa::max_digits#4 = $10
Adding number conversion cast (unumber) 0 in *utoa::buffer#3 = 0
Adding number conversion cast (unumber) 1 in utoa::$4 = utoa::max_digits#5 - 1
Adding number conversion cast (unumber) utoa::$4 in utoa::$4 = utoa::max_digits#5 - (unumber)1
Adding number conversion cast (unumber) 0 in *utoa::buffer#4 = 0
Adding number conversion cast (unumber) 1 in utoa::started#1 = 1
Adding number conversion cast (unumber) $a in ultoa::max_digits#1 = $a
Adding number conversion cast (unumber) 8 in ultoa::max_digits#2 = 8
Adding number conversion cast (unumber) $b in ultoa::max_digits#3 = $b
Adding number conversion cast (unumber) $20 in ultoa::max_digits#4 = $20
Adding number conversion cast (unumber) 0 in *ultoa::buffer#3 = 0
Adding number conversion cast (unumber) 1 in ultoa::$4 = ultoa::max_digits#5 - 1
Adding number conversion cast (unumber) ultoa::$4 in ultoa::$4 = ultoa::max_digits#5 - (unumber)1
Adding number conversion cast (unumber) 0 in *ultoa::buffer#4 = 0
Adding number conversion cast (unumber) 1 in ultoa::started#1 = 1
Adding number conversion cast (unumber) $3fff in main::toD0181_$0 = main::toD0181_$7 & $3fff
Adding number conversion cast (unumber) main::toD0181_$0 in main::toD0181_$0 = main::toD0181_$7 & (unumber)$3fff
Adding number conversion cast (unumber) 4 in main::toD0181_$1 = main::toD0181_$0 * 4
Adding number conversion cast (unumber) main::toD0181_$1 in main::toD0181_$1 = main::toD0181_$0 * (unumber)4
Adding number conversion cast (unumber) 4 in main::toD0181_$4 = main::toD0181_$3 / 4
Adding number conversion cast (unumber) main::toD0181_$4 in main::toD0181_$4 = main::toD0181_$3 / (unumber)4
Adding number conversion cast (unumber) $f in main::toD0181_$5 = main::toD0181_$4 & $f
Adding number conversion cast (unumber) main::toD0181_$5 in main::toD0181_$5 = main::toD0181_$4 & (unumber)$f
Adding number conversion cast (unumber) main::toD0181_$6 in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Adding number conversion cast (unumber) 0 in memset::c#1 = 0
Adding number conversion cast (unumber) 0 in main::$31 = 0 != *main::sieve_i#2
Adding number conversion cast (unumber) $64 in div32u16u::divisor#0 = (word)CLOCKS_PER_SEC/$64
Adding number conversion cast (unumber) 2 in main::i#1 = 2
Adding number conversion cast (unumber) 2 in main::$22 = main::i#6 * 2
Adding number conversion cast (unumber) main::$22 in main::$22 = main::i#6 * (unumber)2
Adding number conversion cast (unumber) 1 in *main::s#2 = 1
Adding number conversion cast (unumber) $514 in main::$25 = main::i#8 < $514
Adding number conversion cast (unumber) 0 in main::$32 = 0 != sieve[main::i#9]
Adding number conversion cast (unumber) $3e7 in *(SCREEN+$3e7) = ++ *(SCREEN+$3e7)
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast memset::dst#0 = (byte*)memset::str#3
Inlining cast *CIA2_TIMER_AB = (unumber)$ffffffff
Inlining cast divr16u::rem#3 = (unumber)0
Inlining cast memset::num#0 = (unumber)$3e8
Inlining cast utoa::max_digits#1 = (unumber)5
Inlining cast utoa::max_digits#2 = (unumber)4
Inlining cast utoa::max_digits#3 = (unumber)6
Inlining cast utoa::max_digits#4 = (unumber)$10
Inlining cast *utoa::buffer#3 = (unumber)0
Inlining cast *utoa::buffer#4 = (unumber)0
Inlining cast utoa::started#1 = (unumber)1
Inlining cast ultoa::max_digits#1 = (unumber)$a
Inlining cast ultoa::max_digits#2 = (unumber)8
Inlining cast ultoa::max_digits#3 = (unumber)$b
Inlining cast ultoa::max_digits#4 = (unumber)$20
Inlining cast *ultoa::buffer#3 = (unumber)0
Inlining cast *ultoa::buffer#4 = (unumber)0
Inlining cast ultoa::started#1 = (unumber)1
Inlining cast memset::c#1 = (unumber)0
Inlining cast main::i#1 = (unumber)2
Inlining cast *main::s#2 = (unumber)1
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (struct MOS6526_CIA*) 56576
Simplifying constant pointer cast (dword*) 56580
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 4096
Simplifying constant integer cast 0
Simplifying constant integer cast $ffffffff
Simplifying constant integer cast $ffffffff
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast div32u16u::quotient_hi#1
Simplifying constant integer cast div32u16u::quotient_lo#0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $3e8
Simplifying constant integer cast 5
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $a
Simplifying constant integer cast 8
Simplifying constant integer cast $b
Simplifying constant integer cast $20
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 6144
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $64
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast $514
Simplifying constant integer cast 0
Simplifying constant integer cast $3e7
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (dword) $ffffffff
Finalized unsigned number type (dword) $ffffffff
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $64
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $514
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $3e7
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to dword in clock::$0 = $ffffffff - *CIA2_TIMER_AB
Inferred type updated to byte in divr16u::$2 = divr16u::$1 & $80
Inferred type updated to word in divr16u::$5 = divr16u::rem#7 | 1
Inferred type updated to byte in utoa::$4 = utoa::max_digits#5 - 1
Inferred type updated to byte in ultoa::$4 = ultoa::max_digits#5 - 1
Inferred type updated to word in main::toD0181_$0 = main::toD0181_$7 & $3fff
Inferred type updated to word in main::toD0181_$1 = main::toD0181_$0 * 4
Inferred type updated to byte in main::toD0181_$4 = main::toD0181_$3 / 4
Inferred type updated to byte in main::toD0181_$5 = main::toD0181_$4 & $f
Inferred type updated to byte in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Inferred type updated to word in main::$22 = main::i#6 * 2
Inversing boolean not [2] memset::$1 = memset::num#2 <= 0 from [1] memset::$0 = memset::num#2 > 0
Inversing boolean not [40] divr16u::$4 = divr16u::$2 == 0 from [39] divr16u::$3 = divr16u::$2 != 0
Inversing boolean not [48] divr16u::$9 = divr16u::rem#6 < divr16u::divisor#2 from [47] divr16u::$8 = divr16u::rem#6 >= divr16u::divisor#2
Inversing boolean not [386] main::$20 = 0 == *main::sieve_i#2 from [385] main::$31 = 0 != *main::sieve_i#2
Inversing boolean not [387] main::$21 = 0 != *main::sieve_i#2 from [386] main::$20 = 0 == *main::sieve_i#2
Inversing boolean not [445] main::$26 = 0 == sieve[main::i#9] from [444] main::$32 = 0 != sieve[main::i#9]
Inversing boolean not [446] main::$27 = 0 != sieve[main::i#9] from [445] main::$26 = 0 == sieve[main::i#9]
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias clock::return#0 = clock::$0 clock::return#3 clock::return#1 
Alias divr16u::rem#0 = divr16u::$0 divr16u::rem#7 
Alias divr16u::dividend#0 = divr16u::$6 divr16u::dividend#8 
Alias divr16u::quotient#1 = divr16u::$7 divr16u::quotient#4 
Alias divr16u::dividend#3 = divr16u::dividend#7 
Alias divr16u::quotient#6 = divr16u::quotient#7 
Alias divr16u::divisor#4 = divr16u::divisor#5 
Alias divr16u::i#5 = divr16u::i#6 
Alias divr16u::rem#1 = divr16u::$5 
Alias divr16u::rem#6 = divr16u::rem#8 
Alias divr16u::divisor#2 = divr16u::divisor#3 
Alias divr16u::i#3 = divr16u::i#4 
Alias divr16u::rem#2 = divr16u::$10 
Alias divr16u::rem#11 = divr16u::rem#9 
Alias divr16u::return#0 = divr16u::quotient#5 divr16u::quotient#8 divr16u::return#4 divr16u::return#1 
Alias rem16u#0 = rem16u#10 rem16u#1 
Alias divr16u::dividend#1 = div32u16u::$0 
Alias divr16u::return#2 = divr16u::return#5 
Alias div32u16u::dividend#1 = div32u16u::dividend#2 
Alias div32u16u::divisor#1 = div32u16u::divisor#2 
Alias rem16u#11 = rem16u#2 
Alias div32u16u::quotient_hi#0 = div32u16u::$1 div32u16u::quotient_hi#1 
Alias divr16u::dividend#2 = div32u16u::$2 
Alias divr16u::return#3 = divr16u::return#6 
Alias rem16u#12 = rem16u#3 rem16u#13 rem16u#4 
Alias div32u16u::quotient_lo#0 = div32u16u::$3 
Alias div32u16u::return#0 = div32u16u::quotient#0 div32u16u::$4 div32u16u::return#3 div32u16u::return#1 
Alias print_str::str#10 = print_str::str#9 print_str::str#8 
Alias print_char_cursor#1 = print_char_cursor#58 print_char_cursor#59 print_char_cursor#31 
Alias print_char_cursor#0 = print_char_cursor#30 
Alias print_line_cursor#0 = print_ln::$0 print_line_cursor#13 print_char_cursor#2 print_line_cursor#14 print_char_cursor#33 print_line_cursor#1 print_char_cursor#3 
Alias print_char_cursor#61 = print_char_cursor#70 
Alias print_char_cursor#34 = print_char_cursor#4 print_char_cursor#35 print_char_cursor#5 
Alias print_char_cursor#62 = print_char_cursor#71 
Alias print_char_cursor#36 = print_char_cursor#6 print_char_cursor#37 print_char_cursor#7 
Alias print_char_cursor#39 = print_char_cursor#8 print_char_cursor#9 
Alias print_line_cursor#15 = print_screen#3 print_screen#2 print_line_cursor#2 print_char_cursor#10 print_char_cursor#40 print_line_cursor#3 print_char_cursor#11 
Alias utoa::value#10 = utoa::value#8 utoa::value#12 utoa::value#13 utoa::value#9 utoa::value#14 utoa::value#15 utoa::value#11 
Alias utoa::buffer#10 = utoa::buffer#17 utoa::buffer#21 utoa::buffer#16 utoa::buffer#18 utoa::buffer#13 utoa::buffer#19 utoa::buffer#20 utoa::buffer#6 
Alias utoa::radix#1 = utoa::radix#2 utoa::radix#3 utoa::radix#4 
Alias utoa::digit#2 = utoa::digit#3 utoa::digit#6 utoa::digit#5 
Alias utoa::digit_values#10 = utoa::digit_values#5 utoa::digit_values#6 utoa::digit_values#9 
Alias utoa::value#2 = utoa::value#5 utoa::value#3 utoa::value#4 
Alias utoa::started#2 = utoa::started#3 
Alias utoa::buffer#11 = utoa::buffer#12 utoa::buffer#7 utoa::buffer#8 utoa::buffer#9 
Alias utoa::max_digits#10 = utoa::max_digits#8 utoa::max_digits#5 utoa::max_digits#9 
Alias utoa::digit_value#0 = utoa::digit_value#1 
Alias utoa_append::return#0 = utoa_append::return#3 
Alias utoa::value#1 = utoa::$9 
Alias ultoa::value#10 = ultoa::value#8 ultoa::value#12 ultoa::value#13 ultoa::value#9 ultoa::value#14 ultoa::value#15 ultoa::value#11 
Alias ultoa::buffer#10 = ultoa::buffer#17 ultoa::buffer#21 ultoa::buffer#16 ultoa::buffer#18 ultoa::buffer#13 ultoa::buffer#19 ultoa::buffer#20 ultoa::buffer#6 
Alias ultoa::radix#1 = ultoa::radix#2 ultoa::radix#3 ultoa::radix#4 
Alias ultoa::digit#2 = ultoa::digit#3 ultoa::digit#6 ultoa::digit#5 
Alias ultoa::digit_values#10 = ultoa::digit_values#5 ultoa::digit_values#6 ultoa::digit_values#9 
Alias ultoa::value#2 = ultoa::value#5 ultoa::value#3 ultoa::value#4 
Alias ultoa::started#2 = ultoa::started#3 
Alias ultoa::buffer#11 = ultoa::buffer#12 ultoa::buffer#7 ultoa::buffer#8 ultoa::buffer#9 
Alias ultoa::max_digits#10 = ultoa::max_digits#8 ultoa::max_digits#5 ultoa::max_digits#9 
Alias ultoa::digit_value#0 = ultoa::digit_value#1 
Alias ultoa_append::return#0 = ultoa_append::return#3 
Alias ultoa::value#1 = ultoa::$9 
Alias utoa_append::digit#2 = utoa_append::digit#4 utoa_append::digit#3 
Alias utoa_append::value#2 = utoa_append::value#3 utoa_append::value#4 utoa_append::return#1 utoa_append::return#4 utoa_append::return#2 
Alias utoa_append::sub#1 = utoa_append::sub#2 
Alias utoa_append::buffer#1 = utoa_append::buffer#4 utoa_append::buffer#2 
Alias ultoa_append::digit#2 = ultoa_append::digit#4 ultoa_append::digit#3 
Alias ultoa_append::value#2 = ultoa_append::value#3 ultoa_append::value#4 ultoa_append::return#1 ultoa_append::return#4 ultoa_append::return#2 
Alias ultoa_append::sub#1 = ultoa_append::sub#2 
Alias ultoa_append::buffer#1 = ultoa_append::buffer#4 ultoa_append::buffer#2 
Alias main::toD0181_screen#0 = main::toD0181_screen#1 
Alias main::toD0181_gfx#0 = main::toD0181_gfx#1 
Alias print_screen#10 = print_screen#9 print_screen#7 print_screen#5 
Alias print_line_cursor#24 = print_line_cursor#35 print_line_cursor#38 print_line_cursor#30 
Alias print_char_cursor#63 = print_char_cursor#77 print_char_cursor#80 print_char_cursor#72 
Alias rem16u#27 = rem16u#53 rem16u#54 rem16u#52 rem16u#51 rem16u#50 rem16u#49 rem16u#47 rem16u#44 rem16u#41 rem16u#35 rem16u#30 
Alias main::toD0181_return#0 = main::toD0181_$6 main::toD0181_return#2 main::toD0181_return#1 main::toD0181_return#3 main::$0 
Alias print_line_cursor#16 = print_line_cursor#4 print_line_cursor#25 
Alias print_char_cursor#12 = print_char_cursor#41 
Alias print_char_cursor#13 = print_char_cursor#42 
Alias print_line_cursor#17 = print_line_cursor#5 print_line_cursor#31 print_line_cursor#26 
Alias print_char_cursor#14 = print_char_cursor#43 
Alias print_char_cursor#15 = print_char_cursor#44 
Alias print_char_cursor#16 = print_char_cursor#45 
Alias print_line_cursor#18 = print_line_cursor#6 print_line_cursor#52 print_line_cursor#50 
Alias print_char_cursor#17 = print_char_cursor#46 print_char_cursor#84 print_char_cursor#82 
Alias main::sieve_i#0 = main::$9 
Alias main::sieve_i#2 = main::sieve_i#4 main::sieve_i#7 
Alias main::i#12 = main::i#4 main::i#6 
Alias rem16u#19 = rem16u#31 rem16u#25 rem16u#22 rem16u#38 
Alias print_char_cursor#64 = print_char_cursor#85 print_char_cursor#81 print_char_cursor#78 print_char_cursor#73 print_char_cursor#88 
Alias print_line_cursor#27 = print_line_cursor#53 print_line_cursor#48 print_line_cursor#46 print_line_cursor#43 print_line_cursor#41 print_line_cursor#39 print_line_cursor#36 print_line_cursor#32 print_line_cursor#56 
Alias clock::return#2 = clock::return#4 
Alias main::cyclecount#0 = main::$11 main::cyclecount#4 main::cyclecount#3 main::cyclecount#2 main::cyclecount#1 
Alias div32u16u::return#2 = div32u16u::return#4 
Alias rem16u#14 = rem16u#5 rem16u#48 rem16u#45 rem16u#42 rem16u#36 rem16u#34 
Alias main::sec100s#0 = main::sec100s#1 
Alias print_char_cursor#18 = print_char_cursor#47 
Alias print_char_cursor#19 = print_char_cursor#48 
Alias print_char_cursor#20 = print_char_cursor#49 
Alias print_char_cursor#21 = print_char_cursor#50 
Alias print_line_cursor#19 = print_line_cursor#7 
Alias print_char_cursor#22 = print_char_cursor#51 
Alias main::j#0 = main::$22 
Alias main::s#0 = main::$23 
Alias main::s#2 = main::s#3 
Alias main::i#13 = main::i#7 
Alias main::j#2 = main::j#3 
Alias main::sieve_i#5 = main::sieve_i#6 
Alias rem16u#32 = rem16u#37 
Alias print_char_cursor#86 = print_char_cursor#87 
Alias print_line_cursor#54 = print_line_cursor#55 
Alias main::i#11 = main::i#9 main::i#8 main::i#15 main::i#14 
Alias print_char_cursor#65 = print_char_cursor#75 print_char_cursor#74 print_char_cursor#66 
Alias print_line_cursor#34 = print_line_cursor#45 print_line_cursor#40 print_line_cursor#37 print_line_cursor#49 print_line_cursor#47 print_line_cursor#44 
Alias rem16u#24 = rem16u#40 rem16u#29 rem16u#26 rem16u#46 rem16u#43 rem16u#39 
Alias print_char_cursor#23 = print_char_cursor#52 
Alias print_char_cursor#24 = print_char_cursor#53 
Alias print_char_cursor#25 = print_char_cursor#54 
Alias print_line_cursor#20 = print_line_cursor#33 print_line_cursor#28 print_line_cursor#8 
Alias print_char_cursor#26 = print_char_cursor#76 print_char_cursor#67 print_char_cursor#55 
Alias rem16u#15 = rem16u#23 rem16u#20 rem16u#6 
Alias print_screen#0 = print_line_cursor#9 print_char_cursor#27 print_line_cursor#29 print_char_cursor#68 print_screen#8 print_screen#6 print_screen#4 print_screen#1 
Alias rem16u#21 = rem16u#7 
Alias print_line_cursor#10 = print_line_cursor#21 print_line_cursor#22 print_line_cursor#11 
Alias print_char_cursor#28 = print_char_cursor#56 print_char_cursor#57 print_char_cursor#29 
Alias rem16u#16 = rem16u#8 rem16u#17 rem16u#9 
Successful SSA optimization Pass2AliasElimination
Alias divr16u::dividend#3 = divr16u::dividend#4 
Alias divr16u::quotient#3 = divr16u::quotient#6 
Alias divr16u::divisor#2 = divr16u::divisor#4 divr16u::divisor#7 
Alias divr16u::i#2 = divr16u::i#3 divr16u::i#5 
Alias divr16u::dividend#0 = divr16u::dividend#6 
Alias utoa::value#10 = utoa::value#7 
Alias utoa::buffer#10 = utoa::buffer#15 
Alias utoa::digit#2 = utoa::digit#4 
Alias utoa::max_digits#10 = utoa::max_digits#6 
Alias utoa::digit_values#10 = utoa::digit_values#7 
Alias ultoa::value#10 = ultoa::value#7 
Alias ultoa::buffer#10 = ultoa::buffer#15 
Alias ultoa::digit#2 = ultoa::digit#4 
Alias ultoa::max_digits#10 = ultoa::max_digits#6 
Alias ultoa::digit_values#10 = ultoa::digit_values#7 
Alias main::i#10 = main::i#11 
Alias print_line_cursor#34 = print_line_cursor#42 
Alias rem16u#24 = rem16u#33 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#5 memset::str#3
Identical Phi Values memset::c#2 memset::c#4
Identical Phi Values divr16u::divisor#2 divr16u::divisor#6
Identical Phi Values div32u16u::dividend#1 div32u16u::dividend#0
Identical Phi Values div32u16u::divisor#1 div32u16u::divisor#0
Identical Phi Values rem16u#18 rem16u#19
Identical Phi Values rem16u#11 rem16u#0
Identical Phi Values rem16u#12 rem16u#0
Identical Phi Values print_char_cursor#0 print_char_cursor#39
Identical Phi Values print_char_cursor#32 print_char_cursor#60
Identical Phi Values print_char_cursor#34 print_char_cursor#1
Identical Phi Values print_ulong_decimal::w#1 print_ulong_decimal::w#0
Identical Phi Values print_char_cursor#62 print_char_cursor#20
Identical Phi Values print_char_cursor#36 print_char_cursor#1
Identical Phi Values print_line_cursor#15 print_screen#10
Identical Phi Values utoa::radix#1 utoa::radix#0
Identical Phi Values utoa::value#10 utoa::value#0
Identical Phi Values utoa::buffer#10 utoa::buffer#0
Identical Phi Values utoa::max_digits#10 utoa::max_digits#7
Identical Phi Values utoa::digit_values#10 utoa::digit_values#8
Identical Phi Values ultoa::radix#1 ultoa::radix#0
Identical Phi Values ultoa::value#10 ultoa::value#0
Identical Phi Values ultoa::buffer#10 ultoa::buffer#0
Identical Phi Values ultoa::max_digits#10 ultoa::max_digits#7
Identical Phi Values ultoa::digit_values#10 ultoa::digit_values#8
Identical Phi Values utoa_append::value#5 utoa_append::value#0
Identical Phi Values utoa_append::sub#3 utoa_append::sub#0
Identical Phi Values utoa_append::buffer#3 utoa_append::buffer#0
Identical Phi Values utoa_append::sub#1 utoa_append::sub#3
Identical Phi Values utoa_append::buffer#1 utoa_append::buffer#3
Identical Phi Values ultoa_append::value#5 ultoa_append::value#0
Identical Phi Values ultoa_append::sub#3 ultoa_append::sub#0
Identical Phi Values ultoa_append::buffer#3 ultoa_append::buffer#0
Identical Phi Values ultoa_append::sub#1 ultoa_append::sub#3
Identical Phi Values ultoa_append::buffer#1 ultoa_append::buffer#3
Identical Phi Values print_screen#10 print_screen#0
Identical Phi Values print_line_cursor#24 print_screen#0
Identical Phi Values print_char_cursor#63 print_screen#0
Identical Phi Values rem16u#27 rem16u#21
Identical Phi Values print_line_cursor#16 print_line_cursor#15
Identical Phi Values print_char_cursor#12 print_line_cursor#15
Identical Phi Values print_char_cursor#13 print_char_cursor#1
Identical Phi Values print_line_cursor#17 print_line_cursor#0
Identical Phi Values print_char_cursor#14 print_line_cursor#0
Identical Phi Values print_char_cursor#15 print_char_cursor#1
Identical Phi Values print_char_cursor#16 print_char_cursor#34
Identical Phi Values print_line_cursor#18 print_line_cursor#0
Identical Phi Values print_char_cursor#17 print_line_cursor#0
Identical Phi Values rem16u#14 rem16u#12
Identical Phi Values print_char_cursor#18 print_char_cursor#1
Identical Phi Values print_char_cursor#19 print_char_cursor#34
Identical Phi Values print_char_cursor#20 print_char_cursor#1
Identical Phi Values print_char_cursor#21 print_char_cursor#36
Identical Phi Values print_line_cursor#19 print_line_cursor#0
Identical Phi Values print_char_cursor#22 print_line_cursor#0
Identical Phi Values main::i#13 main::i#12
Identical Phi Values main::sieve_i#5 main::sieve_i#2
Identical Phi Values rem16u#32 rem16u#19
Identical Phi Values print_char_cursor#86 print_char_cursor#64
Identical Phi Values print_line_cursor#54 print_line_cursor#27
Identical Phi Values print_line_cursor#34 print_line_cursor#19
Identical Phi Values rem16u#24 rem16u#14
Identical Phi Values print_char_cursor#23 print_char_cursor#1
Identical Phi Values print_char_cursor#24 print_char_cursor#34
Identical Phi Values print_char_cursor#25 print_char_cursor#39
Identical Phi Values print_line_cursor#20 print_line_cursor#34
Identical Phi Values print_char_cursor#26 print_char_cursor#23
Identical Phi Values rem16u#15 rem16u#24
Identical Phi Values print_line_cursor#10 print_line_cursor#20
Identical Phi Values print_char_cursor#28 print_char_cursor#26
Identical Phi Values rem16u#16 rem16u#15
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values memset::return#0 memset::str#3
Identical Phi Values print_char_cursor#60 print_char_cursor#1
Identical Phi Values print_char_cursor#38 print_char_cursor#1
Identical Phi Values main::i#5 main::i#12
Identical Phi Values main::sieve_i#3 main::sieve_i#2
Identical Phi Values rem16u#28 rem16u#19
Identical Phi Values print_char_cursor#83 print_char_cursor#64
Identical Phi Values print_line_cursor#51 print_line_cursor#27
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values rem16u#19 rem16u#21
Identical Phi Values print_char_cursor#64 print_line_cursor#0
Identical Phi Values print_line_cursor#27 print_line_cursor#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition memset::$1 [2] if(memset::num#2<=0) goto memset::@1
Simple Condition memset::$3 [9] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition divr16u::$4 [29] if(divr16u::$2==0) goto divr16u::@2
Simple Condition divr16u::$9 [34] if(divr16u::rem#6<divr16u::divisor#6) goto divr16u::@3
Simple Condition divr16u::$11 [39] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1
Simple Condition print_str::$1 [64] if(0!=*print_str::str#10) goto print_str::@2
Simple Condition print_ln::$1 [74] if(print_line_cursor#0<print_char_cursor#1) goto print_ln::@1
Simple Condition utoa::$0 [109] if(utoa::radix#0==DECIMAL) goto utoa::@1
Simple Condition utoa::$1 [113] if(utoa::radix#0==HEXADECIMAL) goto utoa::@2
Simple Condition utoa::$2 [117] if(utoa::radix#0==OCTAL) goto utoa::@3
Simple Condition utoa::$3 [121] if(utoa::radix#0==BINARY) goto utoa::@4
Simple Condition utoa::$5 [138] if(utoa::digit#2<utoa::$4) goto utoa::@11
Simple Condition ultoa::$0 [163] if(ultoa::radix#0==DECIMAL) goto ultoa::@1
Simple Condition ultoa::$1 [167] if(ultoa::radix#0==HEXADECIMAL) goto ultoa::@2
Simple Condition ultoa::$2 [171] if(ultoa::radix#0==OCTAL) goto ultoa::@3
Simple Condition ultoa::$3 [175] if(ultoa::radix#0==BINARY) goto ultoa::@4
Simple Condition ultoa::$5 [192] if(ultoa::digit#2<ultoa::$4) goto ultoa::@11
Simple Condition utoa_append::$0 [217] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
Simple Condition ultoa_append::$0 [226] if(ultoa_append::value#2>=ultoa_append::sub#0) goto ultoa_append::@2
Simple Condition main::$19 [268] if(main::i#12<SQRT_COUNT) goto main::@2
Simple Condition main::$21 [270] if(0!=*main::sieve_i#2) goto main::@4
Simple Condition main::$24 [304] if(main::j#2<COUNT) goto main::@6
Simple Condition main::$25 [310] if(main::i#10<$514) goto main::@9
Simple Condition main::$27 [312] if(0!=sieve[main::i#10]) goto main::@11
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting ! if()-condition to reversed if() [143] utoa::$8 = ! utoa::$7
Rewriting || if()-condition to two if()s [142] utoa::$7 = utoa::started#2 || utoa::$6
Rewriting ! if()-condition to reversed if() [197] ultoa::$8 = ! ultoa::$7
Rewriting || if()-condition to two if()s [196] ultoa::$7 = ultoa::started#2 || ultoa::$6
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition utoa::started#2
Warning! Adding boolean cast to non-boolean condition ultoa::started#2
Rewriting array member address-of to pointer addition [265] main::sieve_i#0 = sieve + main::i#0
Rewriting array member address-of to pointer addition [301] main::s#0 = sieve + main::j#0
Successful SSA optimization PassNArrayElementAddressOfRewriting
Constant right-side identified [258] memset::str#1 = (void*)sieve
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant divr16u::quotient#0 = 0
Constant divr16u::i#0 = 0
Constant divr16u::rem#3 = 0
Constant utoa::buffer#0 = decimal_digits
Constant utoa::radix#0 = DECIMAL
Constant print_str::str#1 = decimal_digits
Constant ultoa::buffer#0 = decimal_digits_long
Constant ultoa::radix#0 = DECIMAL
Constant print_str::str#2 = decimal_digits_long
Constant memset::c#0 = ' '
Constant memset::num#0 = $3e8
Constant utoa::max_digits#0 = 0
Constant utoa::digit_values#0 = (word*) 0
Constant utoa::max_digits#1 = 5
Constant utoa::digit_values#1 = RADIX_DECIMAL_VALUES
Constant utoa::max_digits#2 = 4
Constant utoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES
Constant utoa::max_digits#3 = 6
Constant utoa::digit_values#3 = RADIX_OCTAL_VALUES
Constant utoa::max_digits#4 = $10
Constant utoa::digit_values#4 = RADIX_BINARY_VALUES
Constant utoa::started#0 = 0
Constant utoa::digit#0 = 0
Constant utoa::started#1 = 1
Constant ultoa::max_digits#0 = 0
Constant ultoa::digit_values#0 = (dword*) 0
Constant ultoa::max_digits#1 = $a
Constant ultoa::digit_values#1 = RADIX_DECIMAL_VALUES_LONG
Constant ultoa::max_digits#2 = 8
Constant ultoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES_LONG
Constant ultoa::max_digits#3 = $b
Constant ultoa::digit_values#3 = RADIX_OCTAL_VALUES_LONG
Constant ultoa::max_digits#4 = $20
Constant ultoa::digit_values#4 = RADIX_BINARY_VALUES_LONG
Constant ultoa::started#0 = 0
Constant ultoa::digit#0 = 0
Constant ultoa::started#1 = 1
Constant utoa_append::digit#0 = 0
Constant ultoa_append::digit#0 = 0
Constant main::toD0181_screen#0 = SCREEN
Constant main::toD0181_gfx#0 = (byte*) 6144
Constant print_str::str#3 = main::str
Constant print_str::str#4 = main::str1
Constant print_uint_decimal::w#0 = COUNT
Constant memset::str#1 = (void*)sieve
Constant memset::c#1 = 0
Constant memset::num#1 = COUNT
Constant main::i#0 = 2
Constant div32u16u::divisor#0 = (word)CLOCKS_PER_SEC/$64
Constant print_str::str#5 = main::str2
Constant print_str::str#6 = main::str3
Constant main::i#1 = 2
Constant print_str::str#7 = main::str4
Constant print_char::ch#1 = ' '
Constant rem16u#21 = 0
Constant print_screen#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Constant divr16u::divisor#0 = div32u16u::divisor#0
Constant divr16u::divisor#1 = div32u16u::divisor#0
Constant memset::str#0 = (void*)print_screen#0
Constant main::toD0181_$7 = (word)main::toD0181_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)main::toD0181_gfx#0 in [238] main::toD0181_$3 = > (word)main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [109] if(utoa::radix#0==DECIMAL) goto utoa::@1
if() condition always false - eliminating [113] if(utoa::radix#0==HEXADECIMAL) goto utoa::@2
if() condition always false - eliminating [117] if(utoa::radix#0==OCTAL) goto utoa::@3
if() condition always false - eliminating [121] if(utoa::radix#0==BINARY) goto utoa::@4
if() condition always true - replacing block destination [163] if(ultoa::radix#0==DECIMAL) goto ultoa::@1
if() condition always false - eliminating [167] if(ultoa::radix#0==HEXADECIMAL) goto ultoa::@2
if() condition always false - eliminating [171] if(ultoa::radix#0==OCTAL) goto ultoa::@3
if() condition always false - eliminating [175] if(ultoa::radix#0==BINARY) goto ultoa::@4
if() condition always true - replacing block destination [325] if(true) goto main::@14
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [37] divr16u::i#1 = ++ divr16u::i#2 to ++
Resolved ranged comparison value [39] if(divr16u::i#1!=rangelast(0,$f)) goto divr16u::@1 to $10
De-inlining pointer[w] to *(pointer+w)   [312] if(0!=sieve[main::i#10]) goto main::@11
Successful SSA optimization Pass2DeInlineWordDerefIdx
Simplifying constant evaluating to zero CIA_TIMER_CONTROL_STOP|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_A_COUNT_CYCLES in [15] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_STOP|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_A_COUNT_CYCLES
Simplifying constant evaluating to zero CIA_TIMER_CONTROL_STOP|CIA_TIMER_CONTROL_CONTINUOUS in [16] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_STOP|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A in [16] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = 0|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
Simplifying expression containing zero CIA_TIMER_CONTROL_START in [18] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
Simplifying expression containing zero CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_CONTINUOUS in [19] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_A_COUNT_CYCLES
Successful SSA optimization PassNSimplifyExpressionWithZero
Simplifying expression containing zero CIA_TIMER_CONTROL_START in [19] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_CONTINUOUS
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating variable utoa::buffer#1 from unused block utoa::@9
Eliminating variable utoa::buffer#2 from unused block utoa::@9
Eliminating variable utoa::buffer#3 from unused block utoa::@9
Eliminating variable ultoa::buffer#1 from unused block ultoa::@9
Eliminating variable ultoa::buffer#2 from unused block ultoa::@9
Eliminating variable ultoa::buffer#3 from unused block ultoa::@9
Removing unused block utoa::@6
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing unused block utoa::@2
Removing unused block utoa::@7
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing unused block utoa::@3
Removing unused block utoa::@8
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing unused block utoa::@4
Removing unused block utoa::@9
Removing unused block ultoa::@6
Removing PHI-reference to removed block (ultoa::@2) in block ultoa::@5
Removing PHI-reference to removed block (ultoa::@2) in block ultoa::@5
Removing unused block ultoa::@2
Removing unused block ultoa::@7
Removing PHI-reference to removed block (ultoa::@3) in block ultoa::@5
Removing PHI-reference to removed block (ultoa::@3) in block ultoa::@5
Removing unused block ultoa::@3
Removing unused block ultoa::@8
Removing PHI-reference to removed block (ultoa::@4) in block ultoa::@5
Removing PHI-reference to removed block (ultoa::@4) in block ultoa::@5
Removing unused block ultoa::@4
Removing unused block ultoa::@9
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Eliminating unused variable memset::return#2 and assignment [73] memset::return#2 = memset::str#3
Eliminating unused variable memset::return#3 and assignment [148] memset::return#3 = memset::str#3
Eliminating unused constant CIA_TIMER_CONTROL_STOP
Eliminating unused constant CIA_TIMER_CONTROL_CONTINUOUS
Eliminating unused constant CIA_TIMER_CONTROL_A_COUNT_CYCLES
Eliminating unused constant BINARY
Eliminating unused constant OCTAL
Eliminating unused constant HEXADECIMAL
Eliminating unused constant utoa::radix#0
Eliminating unused constant utoa::max_digits#0
Eliminating unused constant utoa::digit_values#0
Eliminating unused constant utoa::max_digits#2
Eliminating unused constant utoa::digit_values#2
Eliminating unused constant utoa::max_digits#3
Eliminating unused constant utoa::digit_values#3
Eliminating unused constant utoa::max_digits#4
Eliminating unused constant utoa::digit_values#4
Eliminating unused constant ultoa::radix#0
Eliminating unused constant ultoa::max_digits#0
Eliminating unused constant ultoa::digit_values#0
Eliminating unused constant ultoa::max_digits#2
Eliminating unused constant ultoa::digit_values#2
Eliminating unused constant ultoa::max_digits#3
Eliminating unused constant ultoa::digit_values#3
Eliminating unused constant ultoa::max_digits#4
Eliminating unused constant ultoa::digit_values#4
Eliminating unused constant rem16u#21
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant DECIMAL
Eliminating unused constant RADIX_BINARY_VALUES
Eliminating unused constant RADIX_OCTAL_VALUES
Eliminating unused constant RADIX_HEXADECIMAL_VALUES
Eliminating unused constant RADIX_BINARY_VALUES_LONG
Eliminating unused constant RADIX_OCTAL_VALUES_LONG
Eliminating unused constant RADIX_HEXADECIMAL_VALUES_LONG
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $10 in [31] if(divr16u::i#1!=$10) goto divr16u::@1
Adding number conversion cast (unumber) 0 in [82] utoa::$12 = 0 != utoa::started#2
Adding number conversion cast (unumber) 0 in [105] ultoa::$12 = 0 != ultoa::started#2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Identical Phi Values utoa::max_digits#7 utoa::max_digits#1
Identical Phi Values utoa::digit_values#8 utoa::digit_values#1
Identical Phi Values ultoa::max_digits#7 ultoa::max_digits#1
Identical Phi Values ultoa::digit_values#8 ultoa::digit_values#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition utoa::$12 [83] if(0!=utoa::started#2) goto utoa::@14
Simple Condition ultoa::$12 [106] if(0!=ultoa::started#2) goto ultoa::@14
Simple Condition utoa::$6 [188] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@14
Simple Condition ultoa::$6 [189] if(ultoa::value#2>=ultoa::digit_value#0) goto ultoa::@14
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [77] utoa::$4 = utoa::max_digits#1 - 1
Constant right-side identified [100] ultoa::$4 = ultoa::max_digits#1 - 1
Constant right-side identified [132] main::toD0181_$0 = main::toD0181_$7 & $3fff
Constant right-side identified [135] main::toD0181_$3 = > (word)main::toD0181_gfx#0
Constant right-side identified [148] main::sieve_i#0 = sieve + main::i#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant utoa::$4 = utoa::max_digits#1-1
Constant ultoa::$4 = ultoa::max_digits#1-1
Constant main::toD0181_$0 = main::toD0181_$7&$3fff
Constant main::toD0181_$3 = >(word)main::toD0181_gfx#0
Constant main::sieve_i#0 = sieve+main::i#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [124] main::toD0181_$1 = main::toD0181_$0 * 4
Constant right-side identified [126] main::toD0181_$4 = main::toD0181_$3 / 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_$1 = main::toD0181_$0*4
Constant main::toD0181_$4 = main::toD0181_$3/4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [124] main::toD0181_$2 = > main::toD0181_$1
Constant right-side identified [125] main::toD0181_$5 = main::toD0181_$4 & $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_$2 = >main::toD0181_$1
Constant main::toD0181_$5 = main::toD0181_$4&$f
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [124] main::toD0181_return#0 = main::toD0181_$2 | main::toD0181_$5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_return#0 = main::toD0181_$2|main::toD0181_$5
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [2] memset::$4 = (byte*)memset::str#3 keeping memset::str#3
Inlining Noop Cast [4] memset::dst#0 = (byte*)memset::str#3 keeping memset::str#3
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [77] utoa::$10 = utoa::digit#2 * SIZEOF_WORD
Rewriting multiplication to use shift [96] ultoa::$10 = ultoa::digit#2 * SIZEOF_DWORD
Rewriting multiplication to use shift [154] main::j#0 = main::i#12 * 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings memset::c#0
Inlining constant with var siblings memset::num#0
Inlining constant with var siblings memset::str#1
Inlining constant with var siblings memset::c#1
Inlining constant with var siblings memset::num#1
Inlining constant with var siblings memset::str#0
Inlining constant with var siblings divr16u::quotient#0
Inlining constant with var siblings divr16u::i#0
Inlining constant with var siblings divr16u::rem#3
Inlining constant with var siblings divr16u::divisor#0
Inlining constant with var siblings divr16u::divisor#1
Inlining constant with var siblings print_str::str#1
Inlining constant with var siblings print_str::str#2
Inlining constant with var siblings print_str::str#3
Inlining constant with var siblings print_str::str#4
Inlining constant with var siblings print_str::str#5
Inlining constant with var siblings print_str::str#6
Inlining constant with var siblings print_str::str#7
Inlining constant with var siblings print_uint_decimal::w#0
Inlining constant with var siblings print_char::ch#1
Inlining constant with var siblings utoa::buffer#0
Inlining constant with var siblings utoa::started#0
Inlining constant with var siblings utoa::digit#0
Inlining constant with var siblings utoa::started#1
Inlining constant with var siblings ultoa::buffer#0
Inlining constant with var siblings ultoa::started#0
Inlining constant with var siblings ultoa::digit#0
Inlining constant with var siblings ultoa::started#1
Inlining constant with var siblings utoa_append::digit#0
Inlining constant with var siblings ultoa_append::digit#0
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::i#1
Inlining constant with var siblings main::sieve_i#0
Constant inlined utoa_append::digit#0 = 0
Constant inlined utoa::digit_values#1 = RADIX_DECIMAL_VALUES
Constant inlined main::toD0181_screen#0 = SCREEN
Constant inlined divr16u::rem#3 = 0
Constant inlined divr16u::i#0 = 0
Constant inlined utoa::buffer#0 = decimal_digits
Constant inlined memset::num#1 = COUNT
Constant inlined memset::num#0 = $3e8
Constant inlined divr16u::quotient#0 = 0
Constant inlined ultoa::started#0 = 0
Constant inlined utoa::digit#0 = 0
Constant inlined main::i#0 = 2
Constant inlined utoa::$4 = utoa::max_digits#1-1
Constant inlined main::i#1 = 2
Constant inlined divr16u::divisor#1 = div32u16u::divisor#0
Constant inlined divr16u::divisor#0 = div32u16u::divisor#0
Constant inlined print_uint_decimal::w#0 = COUNT
Constant inlined memset::str#1 = (void*)sieve
Constant inlined memset::str#0 = (void*)print_screen#0
Constant inlined main::toD0181_$7 = (word)SCREEN
Constant inlined main::toD0181_$2 = >(word)SCREEN&$3fff*4
Constant inlined main::toD0181_$1 = (word)SCREEN&$3fff*4
Constant inlined utoa::started#1 = 1
Constant inlined main::toD0181_$0 = (word)SCREEN&$3fff
Constant inlined utoa::started#0 = 0
Constant inlined ultoa::$4 = ultoa::max_digits#1-1
Constant inlined ultoa::started#1 = 1
Constant inlined main::toD0181_$5 = >(word)main::toD0181_gfx#0/4&$f
Constant inlined ultoa::buffer#0 = decimal_digits_long
Constant inlined main::toD0181_$4 = >(word)main::toD0181_gfx#0/4
Constant inlined main::toD0181_$3 = >(word)main::toD0181_gfx#0
Constant inlined ultoa::digit#0 = 0
Constant inlined print_char::ch#1 = ' '
Constant inlined print_str::str#4 = main::str1
Constant inlined print_str::str#3 = main::str
Constant inlined print_str::str#2 = decimal_digits_long
Constant inlined ultoa_append::digit#0 = 0
Constant inlined print_str::str#1 = decimal_digits
Constant inlined ultoa::digit_values#1 = RADIX_DECIMAL_VALUES_LONG
Constant inlined memset::c#0 = ' '
Constant inlined memset::c#1 = 0
Constant inlined print_str::str#7 = main::str4
Constant inlined print_str::str#6 = main::str3
Constant inlined main::sieve_i#0 = sieve+2
Constant inlined print_str::str#5 = main::str2
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values divr16u::divisor#6 div32u16u::divisor#0
Successful SSA optimization Pass2IdenticalPhiElimination
Eliminating unused constant SIZEOF_WORD
Eliminating unused constant SIZEOF_DWORD
Successful SSA optimization PassNEliminateUnusedVars
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting divr16u::@7(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@8(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@9(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting utoa::@17(between utoa::@16 and utoa::@13)
Added new block during phi lifting ultoa::@17(between ultoa::@16 and ultoa::@13)
Added new block during phi lifting main::@34(between main::@9 and main::@11)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0181_@return
Adding NOP phi() at start of main::@16
Adding NOP phi() at start of main::@17
Adding NOP phi() at start of main::@21
Adding NOP phi() at start of main::@22
Adding NOP phi() at start of main::@23
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@31
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@32
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_uint_decimal::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of print_ulong_decimal::@2
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa::@1
Adding NOP phi() at start of ultoa
Adding NOP phi() at start of ultoa::@1
CALL GRAPH
Calls in [main] to print_cls:4 print_str:6 print_ln:8 print_str:10 print_uint_decimal:12 print_ln:14 memset:16 clock_start:18 clock:23 div32u16u:28 print_str:33 print_uint_decimal:37 print_str:39 print_ulong_decimal:41 print_ln:43 print_str:48 print_uint_decimal:57 print_char:59 
Calls in [print_cls] to memset:83 
Calls in [print_str] to print_char:94 
Calls in [print_uint_decimal] to utoa:108 print_str:110 
Calls in [div32u16u] to divr16u:134 divr16u:141 
Calls in [print_ulong_decimal] to ultoa:147 print_str:149 
Calls in [utoa] to utoa_append:182 
Calls in [ultoa] to ultoa_append:244 

Created 47 initial phi equivalence classes
Not coalescing [9] print_char_cursor#90 = print_line_cursor#0
Coalesced [11] print_char_cursor#98 = print_char_cursor#1
Coalesced [13] print_line_cursor#57 = print_line_cursor#0
Not coalescing [32] print_char_cursor#91 = print_line_cursor#0
Coalesced [35] print_uint_decimal::w#5 = print_uint_decimal::w#1
Coalesced (already) [36] print_char_cursor#99 = print_char_cursor#1
Coalesced [38] print_char_cursor#92 = print_char_cursor#1
Coalesced (already) [42] print_line_cursor#58 = print_line_cursor#0
Coalesced [44] print_char_cursor#101 = print_line_cursor#0
Not coalescing [47] print_char_cursor#89 = print_char_cursor#65
Coalesced [55] print_uint_decimal::w#4 = print_uint_decimal::w#2
Not coalescing [56] print_char_cursor#97 = print_char_cursor#65
Coalesced [60] print_char_cursor#102 = print_char_cursor#39
Coalesced [63] main::i#17 = main::i#3
Coalesced [64] print_char_cursor#100 = print_char_cursor#79
Coalesced (already) [65] print_char_cursor#103 = print_char_cursor#65
Coalesced [69] main::j#5 = main::j#0
Coalesced [70] main::s#5 = main::s#0
Coalesced [75] main::i#16 = main::i#2
Coalesced [76] main::sieve_i#8 = main::sieve_i#1
Coalesced [80] main::j#4 = main::j#1
Coalesced [81] main::s#4 = main::s#1
Coalesced [87] print_str::str#12 = print_str::str#11
Coalesced (already) [88] print_char_cursor#95 = print_char_cursor#69
Coalesced [93] print_char::ch#3 = print_char::ch#0
Coalesced [96] print_str::str#13 = print_str::str#0
Not coalescing [97] print_char_cursor#96 = print_char_cursor#39
Coalesced [99] print_line_cursor#59 = print_line_cursor#23
Coalesced (already) [105] print_line_cursor#60 = print_line_cursor#0
Coalesced (already) [109] print_char_cursor#93 = print_char_cursor#61
Coalesced [123] memset::dst#5 = memset::dst#1
Coalesced [133] divr16u::dividend#9 = divr16u::dividend#1
Coalesced [139] divr16u::rem#12 = divr16u::rem#4
Coalesced [140] divr16u::dividend#10 = divr16u::dividend#2
Coalesced (already) [148] print_char_cursor#94 = print_char_cursor#1
Coalesced [158] utoa::value#17 = utoa::value#0
Coalesced [170] utoa::value#18 = utoa::value#2
Coalesced [171] utoa::started#6 = utoa::started#2
Coalesced [172] utoa::buffer#23 = utoa::buffer#11
Coalesced [175] utoa::digit#7 = utoa::digit#1
Coalesced (already) [176] utoa::value#16 = utoa::value#6
Coalesced (already) [177] utoa::started#5 = utoa::started#4
Coalesced (already) [178] utoa::buffer#22 = utoa::buffer#14
Coalesced [186] utoa::value#19 = utoa::value#1
Coalesced [187] utoa::buffer#24 = utoa::buffer#5
Coalesced [189] divr16u::rem#13 = divr16u::rem#10
Coalesced [190] divr16u::dividend#11 = divr16u::dividend#5
Coalesced [197] divr16u::rem#16 = divr16u::rem#1
Coalesced [204] divr16u::rem#18 = divr16u::rem#2
Coalesced [205] divr16u::return#8 = divr16u::quotient#2
Coalesced [211] divr16u::rem#14 = divr16u::rem#11
Coalesced [212] divr16u::dividend#12 = divr16u::dividend#0
Coalesced [213] divr16u::quotient#9 = divr16u::return#0
Coalesced [214] divr16u::i#7 = divr16u::i#1
Coalesced [215] divr16u::rem#17 = divr16u::rem#6
Coalesced [216] divr16u::return#7 = divr16u::quotient#1
Coalesced [217] divr16u::rem#15 = divr16u::rem#0
Coalesced [220] ultoa::value#17 = ultoa::value#0
Coalesced [232] ultoa::value#18 = ultoa::value#2
Coalesced [233] ultoa::started#6 = ultoa::started#2
Coalesced [234] ultoa::buffer#23 = ultoa::buffer#11
Coalesced [237] ultoa::digit#7 = ultoa::digit#1
Coalesced (already) [238] ultoa::value#16 = ultoa::value#6
Coalesced (already) [239] ultoa::started#5 = ultoa::started#4
Coalesced (already) [240] ultoa::buffer#22 = ultoa::buffer#14
Coalesced [248] ultoa::value#19 = ultoa::value#1
Coalesced [249] ultoa::buffer#24 = ultoa::buffer#5
Coalesced [250] utoa_append::value#6 = utoa_append::value#0
Coalesced [257] utoa_append::value#7 = utoa_append::value#1
Coalesced [258] utoa_append::digit#5 = utoa_append::digit#1
Coalesced [259] ultoa_append::value#6 = ultoa_append::value#0
Coalesced [266] ultoa_append::value#7 = ultoa_append::value#1
Coalesced [267] ultoa_append::digit#5 = ultoa_append::digit#1
Coalesced down to 30 phi equivalence classes
Culled Empty Block label main::toD0181_@return
Culled Empty Block label main::@23
Culled Empty Block label main::@30
Culled Empty Block label main::@31
Culled Empty Block label main::@13
Culled Empty Block label main::@33
Culled Empty Block label main::@34
Culled Empty Block label print_cls::@1
Culled Empty Block label print_ln::@2
Culled Empty Block label print_ln::@3
Culled Empty Block label print_uint_decimal::@2
Culled Empty Block label memset::@1
Culled Empty Block label print_ulong_decimal::@2
Culled Empty Block label utoa::@1
Culled Empty Block label utoa::@5
Culled Empty Block label utoa::@17
Culled Empty Block label divr16u::@7
Culled Empty Block label divr16u::@9
Culled Empty Block label divr16u::@8
Culled Empty Block label ultoa::@1
Culled Empty Block label ultoa::@5
Culled Empty Block label ultoa::@17
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block utoa::@10 to utoa::@1
Renumbering block utoa::@11 to utoa::@2
Renumbering block utoa::@12 to utoa::@3
Renumbering block utoa::@13 to utoa::@4
Renumbering block utoa::@14 to utoa::@5
Renumbering block utoa::@15 to utoa::@6
Renumbering block utoa::@16 to utoa::@7
Renumbering block ultoa::@10 to ultoa::@1
Renumbering block ultoa::@11 to ultoa::@2
Renumbering block ultoa::@12 to ultoa::@3
Renumbering block ultoa::@13 to ultoa::@4
Renumbering block ultoa::@14 to ultoa::@5
Renumbering block ultoa::@15 to ultoa::@6
Renumbering block ultoa::@16 to ultoa::@7
Renumbering block main::@14 to main::@13
Renumbering block main::@15 to main::@14
Renumbering block main::@16 to main::@15
Renumbering block main::@17 to main::@16
Renumbering block main::@18 to main::@17
Renumbering block main::@19 to main::@18
Renumbering block main::@20 to main::@19
Renumbering block main::@21 to main::@20
Renumbering block main::@22 to main::@21
Renumbering block main::@24 to main::@22
Renumbering block main::@25 to main::@23
Renumbering block main::@26 to main::@24
Renumbering block main::@27 to main::@25
Renumbering block main::@28 to main::@26
Renumbering block main::@29 to main::@27
Renumbering block main::@32 to main::@28
Adding NOP phi() at start of main
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of main::@16
Adding NOP phi() at start of main::@18
Adding NOP phi() at start of main::@19
Adding NOP phi() at start of main::@20
Adding NOP phi() at start of main::@21
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@25
Adding NOP phi() at start of main::@27
Adding NOP phi() at start of main::@28
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_uint_decimal::@1
Adding NOP phi() at start of print_ulong_decimal::@1
Adding NOP phi() at start of utoa
Adding NOP phi() at start of ultoa
Adding NOP phi() at start of utoa_append
Adding NOP phi() at start of ultoa_append

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::toD0181
main::toD0181: scope:[main]  from main
  [1] phi()
  to:main::@14
main::@14: scope:[main]  from main::toD0181
  [2] *D018 = main::toD0181_return#0
  [3] call print_cls 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [4] phi()
  [5] call print_str 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [6] phi()
  [7] call print_ln 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [8] print_char_cursor#90 = print_line_cursor#0
  [9] call print_str 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [10] phi()
  [11] call print_uint_decimal 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [12] phi()
  [13] call print_ln 
  to:main::@20
main::@20: scope:[main]  from main::@19
  [14] phi()
  [15] call memset 
  to:main::@21
main::@21: scope:[main]  from main::@20
  [16] phi()
  [17] call clock_start 
  to:main::@1
main::@1: scope:[main]  from main::@21 main::@4
  [18] main::sieve_i#2 = phi( main::@21/sieve+2, main::@4/main::sieve_i#1 )
  [18] main::i#12 = phi( main::@21/2, main::@4/main::i#2 )
  [19] if(main::i#12<SQRT_COUNT) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [20] phi()
  [21] call clock 
  [22] clock::return#2 = clock::return#0
  to:main::@22
main::@22: scope:[main]  from main::@3
  [23] main::$10 = clock::return#2
  [24] main::cyclecount#0 = main::$10 - CLOCKS_PER_INIT
  [25] div32u16u::dividend#0 = main::cyclecount#0
  [26] call div32u16u 
  [27] div32u16u::return#2 = div32u16u::return#0
  to:main::@23
main::@23: scope:[main]  from main::@22
  [28] main::$12 = div32u16u::return#2
  [29] main::sec100s#0 = (word)main::$12
  [30] print_char_cursor#91 = print_line_cursor#0
  [31] call print_str 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [32] print_uint_decimal::w#1 = main::sec100s#0
  [33] call print_uint_decimal 
  to:main::@25
main::@25: scope:[main]  from main::@24
  [34] phi()
  [35] call print_str 
  to:main::@26
main::@26: scope:[main]  from main::@25
  [36] print_ulong_decimal::w#0 = main::cyclecount#0
  [37] call print_ulong_decimal 
  to:main::@27
main::@27: scope:[main]  from main::@26
  [38] phi()
  [39] call print_ln 
  to:main::@8
main::@8: scope:[main]  from main::@11 main::@27
  [40] print_char_cursor#65 = phi( main::@11/print_char_cursor#79, main::@27/print_line_cursor#0 )
  [40] main::i#10 = phi( main::@11/main::i#3, main::@27/2 )
  [41] if(main::i#10<$514) goto main::@9
  to:main::@10
main::@10: scope:[main]  from main::@8
  [42] print_char_cursor#89 = print_char_cursor#65
  [43] call print_str 
  to:main::@13
main::@13: scope:[main]  from main::@10 main::@13
  [44] *(SCREEN+$3e7) = ++ *(SCREEN+$3e7)
  to:main::@13
main::@9: scope:[main]  from main::@8
  [45] main::$33 = sieve + main::i#10
  [46] if(0!=*main::$33) goto main::@11
  to:main::@12
main::@12: scope:[main]  from main::@9
  [47] print_uint_decimal::w#2 = main::i#10
  [48] print_char_cursor#97 = print_char_cursor#65
  [49] call print_uint_decimal 
  to:main::@28
main::@28: scope:[main]  from main::@12
  [50] phi()
  [51] call print_char 
  to:main::@11
main::@11: scope:[main]  from main::@28 main::@9
  [52] print_char_cursor#79 = phi( main::@28/print_char_cursor#39, main::@9/print_char_cursor#65 )
  [53] main::i#3 = ++ main::i#10
  to:main::@8
main::@2: scope:[main]  from main::@1
  [54] if(0!=*main::sieve_i#2) goto main::@4
  to:main::@7
main::@7: scope:[main]  from main::@2
  [55] main::j#0 = main::i#12 << 1
  [56] main::s#0 = sieve + main::j#0
  to:main::@5
main::@5: scope:[main]  from main::@6 main::@7
  [57] main::s#2 = phi( main::@6/main::s#1, main::@7/main::s#0 )
  [57] main::j#2 = phi( main::@6/main::j#1, main::@7/main::j#0 )
  [58] if(main::j#2<COUNT) goto main::@6
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@5
  [59] main::i#2 = ++ main::i#12
  [60] main::sieve_i#1 = ++ main::sieve_i#2
  to:main::@1
main::@6: scope:[main]  from main::@5
  [61] *main::s#2 = 1
  [62] main::s#1 = main::s#2 + main::i#12
  [63] main::j#1 = main::j#2 + main::i#12
  to:main::@5

void print_cls()
print_cls: scope:[print_cls]  from main::@14
  [64] phi()
  [65] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [66] return 
  to:@return

void print_str(byte* print_str::str)
print_str: scope:[print_str]  from main::@10 main::@15 main::@17 main::@23 main::@25 print_uint_decimal::@1 print_ulong_decimal::@1
  [67] print_char_cursor#69 = phi( main::@10/print_char_cursor#89, main::@15/print_screen#0, main::@17/print_char_cursor#90, main::@23/print_char_cursor#91, main::@25/print_char_cursor#1, print_uint_decimal::@1/print_char_cursor#61, print_ulong_decimal::@1/print_char_cursor#1 )
  [67] print_str::str#11 = phi( main::@10/main::str4, main::@15/main::str, main::@17/main::str1, main::@23/main::str2, main::@25/main::str3, print_uint_decimal::@1/decimal_digits, print_ulong_decimal::@1/decimal_digits_long )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [68] print_char_cursor#1 = phi( print_str/print_char_cursor#69, print_str::@3/print_char_cursor#96 )
  [68] print_str::str#10 = phi( print_str/print_str::str#11, print_str::@3/print_str::str#0 )
  [69] if(0!=*print_str::str#10) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [70] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [71] print_char::ch#0 = *print_str::str#10
  [72] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [73] print_str::str#0 = ++ print_str::str#10
  [74] print_char_cursor#96 = print_char_cursor#39
  to:print_str::@1

void print_ln()
print_ln: scope:[print_ln]  from main::@16 main::@19 main::@27
  [75] print_line_cursor#23 = phi( main::@16/print_screen#0, main::@19/print_line_cursor#0, main::@27/print_line_cursor#0 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [76] print_line_cursor#12 = phi( print_ln/print_line_cursor#23, print_ln::@1/print_line_cursor#0 )
  [77] print_line_cursor#0 = print_line_cursor#12 + $28
  [78] if(print_line_cursor#0<print_char_cursor#1) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [79] return 
  to:@return

void print_uint_decimal(word print_uint_decimal::w)
print_uint_decimal: scope:[print_uint_decimal]  from main::@12 main::@18 main::@24
  [80] print_char_cursor#61 = phi( main::@12/print_char_cursor#97, main::@18/print_char_cursor#1, main::@24/print_char_cursor#1 )
  [80] print_uint_decimal::w#3 = phi( main::@12/print_uint_decimal::w#2, main::@18/COUNT, main::@24/print_uint_decimal::w#1 )
  [81] utoa::value#0 = print_uint_decimal::w#3
  [82] call utoa 
  to:print_uint_decimal::@1
print_uint_decimal::@1: scope:[print_uint_decimal]  from print_uint_decimal
  [83] phi()
  [84] call print_str 
  to:print_uint_decimal::@return
print_uint_decimal::@return: scope:[print_uint_decimal]  from print_uint_decimal::@1
  [85] return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from main::@20 print_cls
  [86] memset::c#4 = phi( main::@20/0, print_cls/' ' )
  [86] memset::str#3 = phi( main::@20/(void*)sieve, print_cls/(void*)print_screen#0 )
  [86] memset::num#2 = phi( main::@20/COUNT, print_cls/$3e8 )
  [87] if(memset::num#2<=0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [88] memset::end#0 = (byte*)memset::str#3 + memset::num#2
  [89] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [90] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [91] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [92] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [93] *memset::dst#2 = memset::c#4
  [94] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

void clock_start()
clock_start: scope:[clock_start]  from main::@21
  [95] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = 0
  [96] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [97] *CIA2_TIMER_AB = $ffffffff
  [98] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [99] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START
  to:clock_start::@return
clock_start::@return: scope:[clock_start]  from clock_start
  [100] return 
  to:@return

dword clock()
clock: scope:[clock]  from main::@3
  [101] clock::return#0 = $ffffffff - *CIA2_TIMER_AB
  to:clock::@return
clock::@return: scope:[clock]  from clock
  [102] return 
  to:@return

dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
div32u16u: scope:[div32u16u]  from main::@22
  [103] divr16u::dividend#1 = _word1_ div32u16u::dividend#0
  [104] call divr16u 
  [105] divr16u::return#2 = divr16u::return#0
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  [106] div32u16u::quotient_hi#0 = divr16u::return#2
  [107] divr16u::dividend#2 = _word0_ div32u16u::dividend#0
  [108] divr16u::rem#4 = rem16u#0
  [109] call divr16u 
  [110] divr16u::return#3 = divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  [111] div32u16u::quotient_lo#0 = divr16u::return#3
  [112] div32u16u::return#0 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  [113] return 
  to:@return

void print_ulong_decimal(dword print_ulong_decimal::w)
print_ulong_decimal: scope:[print_ulong_decimal]  from main::@26
  [114] ultoa::value#0 = print_ulong_decimal::w#0
  [115] call ultoa 
  to:print_ulong_decimal::@1
print_ulong_decimal::@1: scope:[print_ulong_decimal]  from print_ulong_decimal
  [116] phi()
  [117] call print_str 
  to:print_ulong_decimal::@return
print_ulong_decimal::@return: scope:[print_ulong_decimal]  from print_ulong_decimal::@1
  [118] return 
  to:@return

void print_char(byte print_char::ch)
print_char: scope:[print_char]  from main::@28 print_str::@2
  [119] print_char::ch#2 = phi( main::@28/' ', print_str::@2/print_char::ch#0 )
  [120] *print_char_cursor#1 = print_char::ch#2
  [121] print_char_cursor#39 = ++ print_char_cursor#1
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [122] return 
  to:@return

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from print_uint_decimal
  [123] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [124] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/decimal_digits )
  [124] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [124] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/utoa::value#0 )
  [124] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [125] if(utoa::digit#2<utoa::max_digits#1-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [126] utoa::$11 = (byte)utoa::value#2
  [127] *utoa::buffer#11 = DIGITS[utoa::$11]
  [128] utoa::buffer#4 = ++ utoa::buffer#11
  [129] *utoa::buffer#4 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [130] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [131] utoa::$10 = utoa::digit#2 << 1
  [132] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [133] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [134] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [135] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#5 )
  [135] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [135] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#1 )
  [136] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [137] utoa_append::buffer#0 = utoa::buffer#11
  [138] utoa_append::value#0 = utoa::value#2
  [139] utoa_append::sub#0 = utoa::digit_value#0
  [140] call utoa_append 
  [141] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [142] utoa::value#1 = utoa_append::return#0
  [143] utoa::buffer#5 = ++ utoa::buffer#11
  to:utoa::@4

word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
divr16u: scope:[divr16u]  from div32u16u div32u16u::@1
  [144] divr16u::dividend#5 = phi( div32u16u/divr16u::dividend#1, div32u16u::@1/divr16u::dividend#2 )
  [144] divr16u::rem#10 = phi( div32u16u/0, div32u16u::@1/divr16u::rem#4 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [145] divr16u::i#2 = phi( divr16u/0, divr16u::@3/divr16u::i#1 )
  [145] divr16u::quotient#3 = phi( divr16u/0, divr16u::@3/divr16u::return#0 )
  [145] divr16u::dividend#3 = phi( divr16u/divr16u::dividend#5, divr16u::@3/divr16u::dividend#0 )
  [145] divr16u::rem#5 = phi( divr16u/divr16u::rem#10, divr16u::@3/divr16u::rem#11 )
  [146] divr16u::rem#0 = divr16u::rem#5 << 1
  [147] divr16u::$1 = > divr16u::dividend#3
  [148] divr16u::$2 = divr16u::$1 & $80
  [149] if(divr16u::$2==0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [150] divr16u::rem#1 = divr16u::rem#0 | 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [151] divr16u::rem#6 = phi( divr16u::@1/divr16u::rem#0, divr16u::@4/divr16u::rem#1 )
  [152] divr16u::dividend#0 = divr16u::dividend#3 << 1
  [153] divr16u::quotient#1 = divr16u::quotient#3 << 1
  [154] if(divr16u::rem#6<div32u16u::divisor#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [155] divr16u::quotient#2 = ++ divr16u::quotient#1
  [156] divr16u::rem#2 = divr16u::rem#6 - div32u16u::divisor#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [157] divr16u::return#0 = phi( divr16u::@2/divr16u::quotient#1, divr16u::@5/divr16u::quotient#2 )
  [157] divr16u::rem#11 = phi( divr16u::@2/divr16u::rem#6, divr16u::@5/divr16u::rem#2 )
  [158] divr16u::i#1 = ++ divr16u::i#2
  [159] if(divr16u::i#1!=$10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [160] rem16u#0 = divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [161] return 
  to:@return

void ultoa(dword ultoa::value , byte* ultoa::buffer , byte ultoa::radix)
ultoa: scope:[ultoa]  from print_ulong_decimal
  [162] phi()
  to:ultoa::@1
ultoa::@1: scope:[ultoa]  from ultoa ultoa::@4
  [163] ultoa::buffer#11 = phi( ultoa::@4/ultoa::buffer#14, ultoa/decimal_digits_long )
  [163] ultoa::started#2 = phi( ultoa::@4/ultoa::started#4, ultoa/0 )
  [163] ultoa::value#2 = phi( ultoa::@4/ultoa::value#6, ultoa/ultoa::value#0 )
  [163] ultoa::digit#2 = phi( ultoa::@4/ultoa::digit#1, ultoa/0 )
  [164] if(ultoa::digit#2<ultoa::max_digits#1-1) goto ultoa::@2
  to:ultoa::@3
ultoa::@3: scope:[ultoa]  from ultoa::@1
  [165] ultoa::$11 = (byte)ultoa::value#2
  [166] *ultoa::buffer#11 = DIGITS[ultoa::$11]
  [167] ultoa::buffer#4 = ++ ultoa::buffer#11
  [168] *ultoa::buffer#4 = 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@3
  [169] return 
  to:@return
ultoa::@2: scope:[ultoa]  from ultoa::@1
  [170] ultoa::$10 = ultoa::digit#2 << 2
  [171] ultoa::digit_value#0 = RADIX_DECIMAL_VALUES_LONG[ultoa::$10]
  [172] if(0!=ultoa::started#2) goto ultoa::@5
  to:ultoa::@7
ultoa::@7: scope:[ultoa]  from ultoa::@2
  [173] if(ultoa::value#2>=ultoa::digit_value#0) goto ultoa::@5
  to:ultoa::@4
ultoa::@4: scope:[ultoa]  from ultoa::@6 ultoa::@7
  [174] ultoa::buffer#14 = phi( ultoa::@7/ultoa::buffer#11, ultoa::@6/ultoa::buffer#5 )
  [174] ultoa::started#4 = phi( ultoa::@7/ultoa::started#2, ultoa::@6/1 )
  [174] ultoa::value#6 = phi( ultoa::@7/ultoa::value#2, ultoa::@6/ultoa::value#1 )
  [175] ultoa::digit#1 = ++ ultoa::digit#2
  to:ultoa::@1
ultoa::@5: scope:[ultoa]  from ultoa::@2 ultoa::@7
  [176] ultoa_append::buffer#0 = ultoa::buffer#11
  [177] ultoa_append::value#0 = ultoa::value#2
  [178] ultoa_append::sub#0 = ultoa::digit_value#0
  [179] call ultoa_append 
  [180] ultoa_append::return#0 = ultoa_append::value#2
  to:ultoa::@6
ultoa::@6: scope:[ultoa]  from ultoa::@5
  [181] ultoa::value#1 = ultoa_append::return#0
  [182] ultoa::buffer#5 = ++ ultoa::buffer#11
  to:ultoa::@4

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [183] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [184] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [184] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [185] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [186] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [187] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [188] utoa_append::digit#1 = ++ utoa_append::digit#2
  [189] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1

dword ultoa_append(byte* ultoa_append::buffer , dword ultoa_append::value , dword ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@5
  [190] phi()
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  [191] ultoa_append::digit#2 = phi( ultoa_append/0, ultoa_append::@2/ultoa_append::digit#1 )
  [191] ultoa_append::value#2 = phi( ultoa_append/ultoa_append::value#0, ultoa_append::@2/ultoa_append::value#1 )
  [192] if(ultoa_append::value#2>=ultoa_append::sub#0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  [193] *ultoa_append::buffer#0 = DIGITS[ultoa_append::digit#2]
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  [194] return 
  to:@return
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  [195] ultoa_append::digit#1 = ++ ultoa_append::digit#2
  [196] ultoa_append::value#1 = ultoa_append::value#2 - ultoa_append::sub#0
  to:ultoa_append::@1


VARIABLE REGISTER WEIGHTS
dword clock()
dword clock::return
dword clock::return#0 4.333333333333333
dword clock::return#2 4.0
void clock_start()
dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
dword div32u16u::dividend
dword div32u16u::dividend#0 4.800000000000001
word div32u16u::divisor
dword div32u16u::quotient
word div32u16u::quotient_hi
word div32u16u::quotient_hi#0 3.6666666666666665
word div32u16u::quotient_lo
word div32u16u::quotient_lo#0 22.0
dword div32u16u::return
dword div32u16u::return#0 4.333333333333333
dword div32u16u::return#2 4.0
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 2002.0
byte~ divr16u::$2 2002.0
word divr16u::dividend
word divr16u::dividend#0 250.25
word divr16u::dividend#1 22.0
word divr16u::dividend#2 11.0
word divr16u::dividend#3 443.42857142857144
word divr16u::dividend#5 123.0
word divr16u::divisor
byte divr16u::i
byte divr16u::i#1 1501.5
byte divr16u::i#2 154.0
word divr16u::quotient
word divr16u::quotient#1 1501.5
word divr16u::quotient#2 1001.0
word divr16u::quotient#3 250.25
word divr16u::rem
word divr16u::rem#0 750.75
word divr16u::rem#1 2002.0
word divr16u::rem#10 112.0
word divr16u::rem#11 1034.6666666666667
word divr16u::rem#2 2002.0
word divr16u::rem#4 22.0
word divr16u::rem#5 2103.0
word divr16u::rem#6 1001.0
word divr16u::return
word divr16u::return#0 432.1428571428571
word divr16u::return#2 22.0
word divr16u::return#3 22.0
void main()
dword~ main::$10 4.0
dword~ main::$12 2.0
byte*~ main::$33 22.0
dword main::cyclecount
dword main::cyclecount#0 0.5
word main::i
word main::i#10 5.5
word main::i#12 24.6
word main::i#2 11.0
word main::i#3 22.0
word main::j
word main::j#0 16.5
word main::j#1 202.0
word main::j#2 78.5
byte* main::s
byte* main::s#0 22.0
byte* main::s#1 101.0
byte* main::s#2 104.66666666666666
word main::sec100s
word main::sec100s#0 1.3333333333333333
byte* main::sieve_i
byte* main::sieve_i#1 22.0
byte* main::sieve_i#2 3.0
byte* main::toD0181_gfx
byte main::toD0181_return
byte* main::toD0181_screen
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#4 125.125
byte* memset::dst
byte* memset::dst#1 2002.0
byte* memset::dst#2 1368.3333333333335
byte* memset::dst#4 202.0
byte* memset::end
byte* memset::end#0 183.66666666666669
word memset::num
word memset::num#2 101.0
void* memset::return
void* memset::str
void* memset::str#3
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 200002.0
byte print_char::ch#2 1100002.0
byte* print_char_cursor
byte* print_char_cursor#1 63670.36363636364
byte* print_char_cursor#39 220002.6
byte* print_char_cursor#61 29.0
byte* print_char_cursor#65 7.4
byte* print_char_cursor#69 1121.0
byte* print_char_cursor#79 16.5
byte* print_char_cursor#89 4.0
byte* print_char_cursor#90 4.0
byte* print_char_cursor#91 4.0
byte* print_char_cursor#96 200002.0
byte* print_char_cursor#97 22.0
void print_cls()
byte* print_line_cursor
byte* print_line_cursor#0 6.804347826086957
byte* print_line_cursor#12 213.0
byte* print_line_cursor#23 15.0
void print_ln()
byte* print_screen
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 100001.0
byte* print_str::str#10 100251.25
byte* print_str::str#11 1001.0
void print_uint_decimal(word print_uint_decimal::w)
word print_uint_decimal::w
word print_uint_decimal::w#1 4.0
word print_uint_decimal::w#2 11.0
word print_uint_decimal::w#3 114.0
void print_ulong_decimal(dword print_ulong_decimal::w)
dword print_ulong_decimal::w
dword print_ulong_decimal::w#0 13.0
word rem16u
word rem16u#0 18.666666666666664
void ultoa(dword ultoa::value , byte* ultoa::buffer , byte ultoa::radix)
byte~ ultoa::$10 2002.0
byte~ ultoa::$11 202.0
byte* ultoa::buffer
byte* ultoa::buffer#11 300.42857142857144
byte* ultoa::buffer#14 1501.5
byte* ultoa::buffer#4 202.0
byte* ultoa::buffer#5 2002.0
byte ultoa::digit
byte ultoa::digit#1 2002.0
byte ultoa::digit#2 286.0
dword ultoa::digit_value
dword ultoa::digit_value#0 600.5999999999999
dword* ultoa::digit_values
byte ultoa::max_digits
byte ultoa::radix
byte ultoa::started
byte ultoa::started#2 500.5
byte ultoa::started#4 1001.0
dword ultoa::value
dword ultoa::value#0 56.0
dword ultoa::value#1 1001.0
dword ultoa::value#2 586.4285714285714
dword ultoa::value#6 1501.5
dword ultoa_append(byte* ultoa_append::buffer , dword ultoa_append::value , dword ultoa_append::sub)
byte* ultoa_append::buffer
byte* ultoa_append::buffer#0 1375.25
byte ultoa_append::digit
byte ultoa_append::digit#1 1000001.0
byte ultoa_append::digit#2 1005001.5
dword ultoa_append::return
dword ultoa_append::return#0 2002.0
dword ultoa_append::sub
dword ultoa_append::sub#0 333500.5
dword ultoa_append::value
dword ultoa_append::value#0 3667.333333333333
dword ultoa_append::value#1 2000002.0
dword ultoa_append::value#2 501834.16666666674
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
byte~ utoa::$10 200002.0
byte~ utoa::$11 2002.0
byte* utoa::buffer
byte* utoa::buffer#11 28714.714285714286
byte* utoa::buffer#14 150001.5
byte* utoa::buffer#4 2002.0
byte* utoa::buffer#5 200002.0
byte utoa::digit
byte utoa::digit#1 200002.0
byte utoa::digit#2 28571.714285714286
word utoa::digit_value
word utoa::digit_value#0 60000.600000000006
word* utoa::digit_values
byte utoa::max_digits
byte utoa::radix
byte utoa::started
byte utoa::started#2 50000.5
byte utoa::started#4 100001.0
word utoa::value
word utoa::value#0 551.0
word utoa::value#1 100001.0
word utoa::value#2 57286.42857142857
word utoa::value#6 150001.5
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
byte* utoa_append::buffer
byte* utoa_append::buffer#0 137500.25
byte utoa_append::digit
byte utoa_append::digit#1 1.000000001E9
byte utoa_append::digit#2 1.0005000015E9
word utoa_append::return
word utoa_append::return#0 200002.0
word utoa_append::sub
word utoa_append::sub#0 3.333500005E8
word utoa_append::value
word utoa_append::value#0 366667.3333333334
word utoa_append::value#1 2.000000002E9
word utoa_append::value#2 5.0018333416666675E8

Initial phi equivalence classes
[ main::i#12 main::i#2 ]
[ main::sieve_i#2 main::sieve_i#1 ]
[ main::i#10 main::i#3 ]
[ main::j#2 main::j#1 main::j#0 ]
[ main::s#2 main::s#1 main::s#0 ]
[ print_char_cursor#69 print_char_cursor#89 print_char_cursor#90 print_char_cursor#91 print_char_cursor#1 print_char_cursor#61 print_char_cursor#96 print_char_cursor#97 ]
[ print_str::str#10 print_str::str#11 print_str::str#0 ]
[ print_line_cursor#12 print_line_cursor#23 print_char_cursor#65 print_char_cursor#79 print_line_cursor#0 print_char_cursor#39 ]
[ print_uint_decimal::w#3 print_uint_decimal::w#2 print_uint_decimal::w#1 ]
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ print_char::ch#2 print_char::ch#0 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 ]
[ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ ultoa::digit#2 ultoa::digit#1 ]
[ ultoa::value#2 ultoa::value#6 ultoa::value#0 ultoa::value#1 ]
[ ultoa::started#2 ultoa::started#4 ]
[ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#5 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ]
[ ultoa_append::digit#2 ultoa_append::digit#1 ]
Added variable clock::return#2 to live range equivalence class [ clock::return#2 ]
Added variable main::$10 to live range equivalence class [ main::$10 ]
Added variable main::cyclecount#0 to live range equivalence class [ main::cyclecount#0 ]
Added variable div32u16u::dividend#0 to live range equivalence class [ div32u16u::dividend#0 ]
Added variable div32u16u::return#2 to live range equivalence class [ div32u16u::return#2 ]
Added variable main::$12 to live range equivalence class [ main::$12 ]
Added variable main::sec100s#0 to live range equivalence class [ main::sec100s#0 ]
Added variable print_ulong_decimal::w#0 to live range equivalence class [ print_ulong_decimal::w#0 ]
Added variable main::$33 to live range equivalence class [ main::$33 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable clock::return#0 to live range equivalence class [ clock::return#0 ]
Added variable divr16u::return#2 to live range equivalence class [ divr16u::return#2 ]
Added variable div32u16u::quotient_hi#0 to live range equivalence class [ div32u16u::quotient_hi#0 ]
Added variable divr16u::return#3 to live range equivalence class [ divr16u::return#3 ]
Added variable div32u16u::quotient_lo#0 to live range equivalence class [ div32u16u::quotient_lo#0 ]
Added variable div32u16u::return#0 to live range equivalence class [ div32u16u::return#0 ]
Added variable utoa::$11 to live range equivalence class [ utoa::$11 ]
Added variable utoa::buffer#4 to live range equivalence class [ utoa::buffer#4 ]
Added variable utoa::$10 to live range equivalence class [ utoa::$10 ]
Added variable utoa::digit_value#0 to live range equivalence class [ utoa::digit_value#0 ]
Added variable utoa_append::buffer#0 to live range equivalence class [ utoa_append::buffer#0 ]
Added variable utoa_append::sub#0 to live range equivalence class [ utoa_append::sub#0 ]
Added variable utoa_append::return#0 to live range equivalence class [ utoa_append::return#0 ]
Added variable divr16u::$1 to live range equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to live range equivalence class [ divr16u::$2 ]
Added variable rem16u#0 to live range equivalence class [ rem16u#0 ]
Added variable ultoa::$11 to live range equivalence class [ ultoa::$11 ]
Added variable ultoa::buffer#4 to live range equivalence class [ ultoa::buffer#4 ]
Added variable ultoa::$10 to live range equivalence class [ ultoa::$10 ]
Added variable ultoa::digit_value#0 to live range equivalence class [ ultoa::digit_value#0 ]
Added variable ultoa_append::buffer#0 to live range equivalence class [ ultoa_append::buffer#0 ]
Added variable ultoa_append::sub#0 to live range equivalence class [ ultoa_append::sub#0 ]
Added variable ultoa_append::return#0 to live range equivalence class [ ultoa_append::return#0 ]
Complete equivalence classes
[ main::i#12 main::i#2 ]
[ main::sieve_i#2 main::sieve_i#1 ]
[ main::i#10 main::i#3 ]
[ main::j#2 main::j#1 main::j#0 ]
[ main::s#2 main::s#1 main::s#0 ]
[ print_char_cursor#69 print_char_cursor#89 print_char_cursor#90 print_char_cursor#91 print_char_cursor#1 print_char_cursor#61 print_char_cursor#96 print_char_cursor#97 ]
[ print_str::str#10 print_str::str#11 print_str::str#0 ]
[ print_line_cursor#12 print_line_cursor#23 print_char_cursor#65 print_char_cursor#79 print_line_cursor#0 print_char_cursor#39 ]
[ print_uint_decimal::w#3 print_uint_decimal::w#2 print_uint_decimal::w#1 ]
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ print_char::ch#2 print_char::ch#0 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 ]
[ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ ultoa::digit#2 ultoa::digit#1 ]
[ ultoa::value#2 ultoa::value#6 ultoa::value#0 ultoa::value#1 ]
[ ultoa::started#2 ultoa::started#4 ]
[ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#5 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ]
[ ultoa_append::digit#2 ultoa_append::digit#1 ]
[ clock::return#2 ]
[ main::$10 ]
[ main::cyclecount#0 ]
[ div32u16u::dividend#0 ]
[ div32u16u::return#2 ]
[ main::$12 ]
[ main::sec100s#0 ]
[ print_ulong_decimal::w#0 ]
[ main::$33 ]
[ memset::end#0 ]
[ clock::return#0 ]
[ divr16u::return#2 ]
[ div32u16u::quotient_hi#0 ]
[ divr16u::return#3 ]
[ div32u16u::quotient_lo#0 ]
[ div32u16u::return#0 ]
[ utoa::$11 ]
[ utoa::buffer#4 ]
[ utoa::$10 ]
[ utoa::digit_value#0 ]
[ utoa_append::buffer#0 ]
[ utoa_append::sub#0 ]
[ utoa_append::return#0 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
[ rem16u#0 ]
[ ultoa::$11 ]
[ ultoa::buffer#4 ]
[ ultoa::$10 ]
[ ultoa::digit_value#0 ]
[ ultoa_append::buffer#0 ]
[ ultoa_append::sub#0 ]
[ ultoa_append::return#0 ]
Allocated zp[2]:2 [ main::i#12 main::i#2 ]
Allocated zp[2]:4 [ main::sieve_i#2 main::sieve_i#1 ]
Allocated zp[2]:6 [ main::i#10 main::i#3 ]
Allocated zp[2]:8 [ main::j#2 main::j#1 main::j#0 ]
Allocated zp[2]:10 [ main::s#2 main::s#1 main::s#0 ]
Allocated zp[2]:12 [ print_char_cursor#69 print_char_cursor#89 print_char_cursor#90 print_char_cursor#91 print_char_cursor#1 print_char_cursor#61 print_char_cursor#96 print_char_cursor#97 ]
Allocated zp[2]:14 [ print_str::str#10 print_str::str#11 print_str::str#0 ]
Allocated zp[2]:16 [ print_line_cursor#12 print_line_cursor#23 print_char_cursor#65 print_char_cursor#79 print_line_cursor#0 print_char_cursor#39 ]
Allocated zp[2]:18 [ print_uint_decimal::w#3 print_uint_decimal::w#2 print_uint_decimal::w#1 ]
Allocated zp[2]:20 [ memset::num#2 ]
Allocated zp[2]:22 [ memset::str#3 ]
Allocated zp[1]:24 [ memset::c#4 ]
Allocated zp[2]:25 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[1]:27 [ print_char::ch#2 print_char::ch#0 ]
Allocated zp[1]:28 [ utoa::digit#2 utoa::digit#1 ]
Allocated zp[2]:29 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 ]
Allocated zp[1]:31 [ utoa::started#2 utoa::started#4 ]
Allocated zp[2]:32 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 ]
Allocated zp[2]:34 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp[2]:36 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ]
Allocated zp[2]:38 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp[1]:40 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp[1]:41 [ ultoa::digit#2 ultoa::digit#1 ]
Allocated zp[4]:42 [ ultoa::value#2 ultoa::value#6 ultoa::value#0 ultoa::value#1 ]
Allocated zp[1]:46 [ ultoa::started#2 ultoa::started#4 ]
Allocated zp[2]:47 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#5 ]
Allocated zp[2]:49 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
Allocated zp[1]:51 [ utoa_append::digit#2 utoa_append::digit#1 ]
Allocated zp[4]:52 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ]
Allocated zp[1]:56 [ ultoa_append::digit#2 ultoa_append::digit#1 ]
Allocated zp[4]:57 [ clock::return#2 ]
Allocated zp[4]:61 [ main::$10 ]
Allocated zp[4]:65 [ main::cyclecount#0 ]
Allocated zp[4]:69 [ div32u16u::dividend#0 ]
Allocated zp[4]:73 [ div32u16u::return#2 ]
Allocated zp[4]:77 [ main::$12 ]
Allocated zp[2]:81 [ main::sec100s#0 ]
Allocated zp[4]:83 [ print_ulong_decimal::w#0 ]
Allocated zp[2]:87 [ main::$33 ]
Allocated zp[2]:89 [ memset::end#0 ]
Allocated zp[4]:91 [ clock::return#0 ]
Allocated zp[2]:95 [ divr16u::return#2 ]
Allocated zp[2]:97 [ div32u16u::quotient_hi#0 ]
Allocated zp[2]:99 [ divr16u::return#3 ]
Allocated zp[2]:101 [ div32u16u::quotient_lo#0 ]
Allocated zp[4]:103 [ div32u16u::return#0 ]
Allocated zp[1]:107 [ utoa::$11 ]
Allocated zp[2]:108 [ utoa::buffer#4 ]
Allocated zp[1]:110 [ utoa::$10 ]
Allocated zp[2]:111 [ utoa::digit_value#0 ]
Allocated zp[2]:113 [ utoa_append::buffer#0 ]
Allocated zp[2]:115 [ utoa_append::sub#0 ]
Allocated zp[2]:117 [ utoa_append::return#0 ]
Allocated zp[1]:119 [ divr16u::$1 ]
Allocated zp[1]:120 [ divr16u::$2 ]
Allocated zp[2]:121 [ rem16u#0 ]
Allocated zp[1]:123 [ ultoa::$11 ]
Allocated zp[2]:124 [ ultoa::buffer#4 ]
Allocated zp[1]:126 [ ultoa::$10 ]
Allocated zp[4]:127 [ ultoa::digit_value#0 ]
Allocated zp[2]:131 [ ultoa_append::buffer#0 ]
Allocated zp[4]:133 [ ultoa_append::sub#0 ]
Allocated zp[4]:137 [ ultoa_append::return#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] *D018 = main::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] print_char_cursor#90 = print_line_cursor#0 [ print_char_cursor#90 print_line_cursor#0 ] (  [ print_char_cursor#90 print_line_cursor#0 ] { { print_char_cursor#69 = print_char_cursor#90 } }  ) always clobbers reg byte a 
Statement [19] if(main::i#12<SQRT_COUNT) goto main::@2 [ print_line_cursor#0 main::i#12 main::sieve_i#2 ] (  [ print_line_cursor#0 main::i#12 main::sieve_i#2 ] { }  ) always clobbers reg byte a 
Statement [22] clock::return#2 = clock::return#0 [ print_line_cursor#0 clock::return#2 ] (  [ print_line_cursor#0 clock::return#2 ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [23] main::$10 = clock::return#2 [ print_line_cursor#0 main::$10 ] (  [ print_line_cursor#0 main::$10 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [24] main::cyclecount#0 = main::$10 - CLOCKS_PER_INIT [ print_line_cursor#0 main::cyclecount#0 ] (  [ print_line_cursor#0 main::cyclecount#0 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [25] div32u16u::dividend#0 = main::cyclecount#0 [ print_line_cursor#0 main::cyclecount#0 div32u16u::dividend#0 ] (  [ print_line_cursor#0 main::cyclecount#0 div32u16u::dividend#0 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [27] div32u16u::return#2 = div32u16u::return#0 [ print_line_cursor#0 main::cyclecount#0 div32u16u::return#2 ] (  [ print_line_cursor#0 main::cyclecount#0 div32u16u::return#2 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [28] main::$12 = div32u16u::return#2 [ print_line_cursor#0 main::cyclecount#0 main::$12 ] (  [ print_line_cursor#0 main::cyclecount#0 main::$12 ] { { print_char_cursor#69 = print_char_cursor#91 } }  ) always clobbers reg byte a 
Statement [29] main::sec100s#0 = (word)main::$12 [ print_line_cursor#0 main::cyclecount#0 main::sec100s#0 ] (  [ print_line_cursor#0 main::cyclecount#0 main::sec100s#0 ] { { print_char_cursor#69 = print_char_cursor#91 } }  ) always clobbers reg byte a 
Statement [30] print_char_cursor#91 = print_line_cursor#0 [ print_line_cursor#0 main::cyclecount#0 main::sec100s#0 print_char_cursor#91 ] (  [ print_line_cursor#0 main::cyclecount#0 main::sec100s#0 print_char_cursor#91 ] { { print_char_cursor#69 = print_char_cursor#91 } }  ) always clobbers reg byte a 
Statement [32] print_uint_decimal::w#1 = main::sec100s#0 [ print_line_cursor#0 main::cyclecount#0 print_uint_decimal::w#1 print_char_cursor#1 ] (  [ print_line_cursor#0 main::cyclecount#0 print_uint_decimal::w#1 print_char_cursor#1 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 } { print_char_cursor#1 = print_char_cursor#61 } }  ) always clobbers reg byte a 
Statement [36] print_ulong_decimal::w#0 = main::cyclecount#0 [ print_line_cursor#0 print_ulong_decimal::w#0 print_char_cursor#1 ] (  [ print_line_cursor#0 print_ulong_decimal::w#0 print_char_cursor#1 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 } }  ) always clobbers reg byte a 
Statement [41] if(main::i#10<$514) goto main::@9 [ main::i#10 print_char_cursor#65 ] (  [ main::i#10 print_char_cursor#65 ] { }  ) always clobbers reg byte a 
Statement [42] print_char_cursor#89 = print_char_cursor#65 [ print_char_cursor#89 ] (  [ print_char_cursor#89 ] { { print_char_cursor#69 = print_char_cursor#89 } }  ) always clobbers reg byte a 
Statement [45] main::$33 = sieve + main::i#10 [ main::i#10 print_char_cursor#65 main::$33 ] (  [ main::i#10 print_char_cursor#65 main::$33 ] { }  ) always clobbers reg byte a 
Statement [46] if(0!=*main::$33) goto main::@11 [ main::i#10 print_char_cursor#65 ] (  [ main::i#10 print_char_cursor#65 ] { }  ) always clobbers reg byte a reg byte y 
Statement [47] print_uint_decimal::w#2 = main::i#10 [ main::i#10 print_char_cursor#65 print_uint_decimal::w#2 ] (  [ main::i#10 print_char_cursor#65 print_uint_decimal::w#2 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a 
Statement [48] print_char_cursor#97 = print_char_cursor#65 [ main::i#10 print_uint_decimal::w#2 print_char_cursor#97 ] (  [ main::i#10 print_uint_decimal::w#2 print_char_cursor#97 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a 
Statement [54] if(0!=*main::sieve_i#2) goto main::@4 [ print_line_cursor#0 main::i#12 main::sieve_i#2 ] (  [ print_line_cursor#0 main::i#12 main::sieve_i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [55] main::j#0 = main::i#12 << 1 [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#0 ] (  [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#0 ] { }  ) always clobbers reg byte a 
Statement [56] main::s#0 = sieve + main::j#0 [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#0 main::s#0 ] (  [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#0 main::s#0 ] { }  ) always clobbers reg byte a 
Statement [58] if(main::j#2<COUNT) goto main::@6 [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#2 main::s#2 ] (  [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#2 main::s#2 ] { }  ) always clobbers reg byte a 
Statement [61] *main::s#2 = 1 [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#2 main::s#2 ] (  [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#2 main::s#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [62] main::s#1 = main::s#2 + main::i#12 [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#2 main::s#1 ] (  [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#2 main::s#1 ] { }  ) always clobbers reg byte a 
Statement [63] main::j#1 = main::j#2 + main::i#12 [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#1 main::s#1 ] (  [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#1 main::s#1 ] { }  ) always clobbers reg byte a 
Statement [69] if(0!=*print_str::str#10) goto print_str::@2 [ print_char_cursor#1 print_str::str#10 ] ( print_str:5 [ print_char_cursor#1 print_str::str#10 ] { }  print_str:9 [ print_line_cursor#0 print_char_cursor#1 print_str::str#10 ] { { print_char_cursor#69 = print_char_cursor#90 } }  print_str:31 [ print_line_cursor#0 main::cyclecount#0 main::sec100s#0 print_char_cursor#1 print_str::str#10 ] { { print_char_cursor#69 = print_char_cursor#91 } }  print_str:35 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#1 print_str::str#10 ] { { print_char_cursor#1 = print_char_cursor#69 } }  print_str:43 [ print_char_cursor#1 print_str::str#10 ] { { print_char_cursor#69 = print_char_cursor#89 } }  print_uint_decimal:11::print_str:84 [ print_line_cursor#0 print_char_cursor#1 print_str::str#10 ] { { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } }  print_uint_decimal:33::print_str:84 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#1 print_str::str#10 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 } { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } }  print_uint_decimal:49::print_str:84 [ main::i#10 print_char_cursor#1 print_str::str#10 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 } { print_char_cursor#61 = print_char_cursor#97 print_char_cursor#69 } }  print_ulong_decimal:37::print_str:117 [ print_line_cursor#0 print_char_cursor#1 print_str::str#10 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 } { print_char_cursor#1 = print_char_cursor#69 } }  ) always clobbers reg byte a reg byte y 
Statement [71] print_char::ch#0 = *print_str::str#10 [ print_char_cursor#1 print_str::str#10 print_char::ch#0 ] ( print_str:5 [ print_char_cursor#1 print_str::str#10 print_char::ch#0 ] { { print_char::ch#0 = print_char::ch#2 } }  print_str:9 [ print_line_cursor#0 print_char_cursor#1 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#69 = print_char_cursor#90 } { print_char::ch#0 = print_char::ch#2 } }  print_str:31 [ print_line_cursor#0 main::cyclecount#0 main::sec100s#0 print_char_cursor#1 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#69 = print_char_cursor#91 } { print_char::ch#0 = print_char::ch#2 } }  print_str:35 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#1 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#1 = print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_str:43 [ print_char_cursor#1 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#69 = print_char_cursor#89 } { print_char::ch#0 = print_char::ch#2 } }  print_uint_decimal:11::print_str:84 [ print_line_cursor#0 print_char_cursor#1 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_uint_decimal:33::print_str:84 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#1 print_str::str#10 print_char::ch#0 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 } { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_uint_decimal:49::print_str:84 [ main::i#10 print_char_cursor#1 print_str::str#10 print_char::ch#0 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 } { print_char_cursor#61 = print_char_cursor#97 print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_ulong_decimal:37::print_str:117 [ print_line_cursor#0 print_char_cursor#1 print_str::str#10 print_char::ch#0 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 } { print_char_cursor#1 = print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  ) always clobbers reg byte a reg byte y 
Statement [74] print_char_cursor#96 = print_char_cursor#39 [ print_str::str#0 print_char_cursor#96 ] ( print_str:5 [ print_str::str#0 print_char_cursor#96 ] { }  print_str:9 [ print_line_cursor#0 print_str::str#0 print_char_cursor#96 ] { { print_char_cursor#69 = print_char_cursor#90 } }  print_str:31 [ print_line_cursor#0 main::cyclecount#0 main::sec100s#0 print_str::str#0 print_char_cursor#96 ] { { print_char_cursor#69 = print_char_cursor#91 } }  print_str:35 [ print_line_cursor#0 main::cyclecount#0 print_str::str#0 print_char_cursor#96 ] { { print_char_cursor#1 = print_char_cursor#69 } }  print_str:43 [ print_str::str#0 print_char_cursor#96 ] { { print_char_cursor#69 = print_char_cursor#89 } }  print_uint_decimal:11::print_str:84 [ print_line_cursor#0 print_str::str#0 print_char_cursor#96 ] { { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } }  print_uint_decimal:33::print_str:84 [ print_line_cursor#0 main::cyclecount#0 print_str::str#0 print_char_cursor#96 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 } { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } }  print_uint_decimal:49::print_str:84 [ main::i#10 print_str::str#0 print_char_cursor#96 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 } { print_char_cursor#61 = print_char_cursor#97 print_char_cursor#69 } }  print_ulong_decimal:37::print_str:117 [ print_line_cursor#0 print_str::str#0 print_char_cursor#96 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 } { print_char_cursor#1 = print_char_cursor#69 } }  ) always clobbers reg byte a 
Statement [77] print_line_cursor#0 = print_line_cursor#12 + $28 [ print_line_cursor#0 print_char_cursor#1 ] ( print_ln:7 [ print_line_cursor#0 print_char_cursor#1 ] { }  print_ln:13 [ print_line_cursor#0 print_char_cursor#1 ] { { print_line_cursor#0 = print_line_cursor#23 } }  print_ln:39 [ print_line_cursor#0 print_char_cursor#1 ] { { print_line_cursor#0 = print_line_cursor#23 } }  ) always clobbers reg byte a 
Statement [78] if(print_line_cursor#0<print_char_cursor#1) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#1 ] ( print_ln:7 [ print_line_cursor#0 print_char_cursor#1 ] { }  print_ln:13 [ print_line_cursor#0 print_char_cursor#1 ] { { print_line_cursor#0 = print_line_cursor#23 } }  print_ln:39 [ print_line_cursor#0 print_char_cursor#1 ] { { print_line_cursor#0 = print_line_cursor#23 } }  ) always clobbers reg byte a 
Statement [81] utoa::value#0 = print_uint_decimal::w#3 [ print_char_cursor#61 utoa::value#0 ] ( print_uint_decimal:11 [ print_line_cursor#0 print_char_cursor#61 utoa::value#0 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } }  print_uint_decimal:33 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::value#0 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } }  print_uint_decimal:49 [ main::i#10 print_char_cursor#61 utoa::value#0 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a 
Statement [87] if(memset::num#2<=0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#4 ] ( memset:15 [ print_line_cursor#0 memset::num#2 memset::str#3 memset::c#4 ] { }  print_cls:3::memset:65 [ memset::num#2 memset::str#3 memset::c#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:24 [ memset::c#4 ]
Statement [88] memset::end#0 = (byte*)memset::str#3 + memset::num#2 [ memset::str#3 memset::c#4 memset::end#0 ] ( memset:15 [ print_line_cursor#0 memset::str#3 memset::c#4 memset::end#0 ] { }  print_cls:3::memset:65 [ memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [89] memset::dst#4 = (byte*)memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( memset:15 [ print_line_cursor#0 memset::c#4 memset::end#0 memset::dst#4 ] { }  print_cls:3::memset:65 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [91] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( memset:15 [ print_line_cursor#0 memset::c#4 memset::end#0 memset::dst#2 ] { }  print_cls:3::memset:65 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [93] *memset::dst#2 = memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( memset:15 [ print_line_cursor#0 memset::c#4 memset::end#0 memset::dst#2 ] { }  print_cls:3::memset:65 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:24 [ memset::c#4 ]
Statement [95] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = 0 [ ] ( clock_start:17 [ print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [96] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A [ ] ( clock_start:17 [ print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [97] *CIA2_TIMER_AB = $ffffffff [ ] ( clock_start:17 [ print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [98] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A [ ] ( clock_start:17 [ print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [99] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START [ ] ( clock_start:17 [ print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [101] clock::return#0 = $ffffffff - *CIA2_TIMER_AB [ clock::return#0 ] ( clock:21 [ print_line_cursor#0 clock::return#0 ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [103] divr16u::dividend#1 = _word1_ div32u16u::dividend#0 [ div32u16u::dividend#0 divr16u::dividend#1 ] ( div32u16u:26 [ print_line_cursor#0 main::cyclecount#0 div32u16u::dividend#0 divr16u::dividend#1 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [105] divr16u::return#2 = divr16u::return#0 [ div32u16u::dividend#0 divr16u::return#2 rem16u#0 ] ( div32u16u:26 [ print_line_cursor#0 main::cyclecount#0 div32u16u::dividend#0 divr16u::return#2 rem16u#0 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [106] div32u16u::quotient_hi#0 = divr16u::return#2 [ div32u16u::dividend#0 div32u16u::quotient_hi#0 rem16u#0 ] ( div32u16u:26 [ print_line_cursor#0 main::cyclecount#0 div32u16u::dividend#0 div32u16u::quotient_hi#0 rem16u#0 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::dividend#2 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [107] divr16u::dividend#2 = _word0_ div32u16u::dividend#0 [ div32u16u::quotient_hi#0 divr16u::dividend#2 rem16u#0 ] ( div32u16u:26 [ print_line_cursor#0 main::cyclecount#0 div32u16u::quotient_hi#0 divr16u::dividend#2 rem16u#0 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::dividend#2 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [108] divr16u::rem#4 = rem16u#0 [ div32u16u::quotient_hi#0 divr16u::dividend#2 divr16u::rem#4 ] ( div32u16u:26 [ print_line_cursor#0 main::cyclecount#0 div32u16u::quotient_hi#0 divr16u::dividend#2 divr16u::rem#4 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::dividend#2 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [110] divr16u::return#3 = divr16u::return#0 [ div32u16u::quotient_hi#0 divr16u::return#3 ] ( div32u16u:26 [ print_line_cursor#0 main::cyclecount#0 div32u16u::quotient_hi#0 divr16u::return#3 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::dividend#2 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [111] div32u16u::quotient_lo#0 = divr16u::return#3 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ( div32u16u:26 [ print_line_cursor#0 main::cyclecount#0 div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [112] div32u16u::return#0 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0 [ div32u16u::return#0 ] ( div32u16u:26 [ print_line_cursor#0 main::cyclecount#0 div32u16u::return#0 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [114] ultoa::value#0 = print_ulong_decimal::w#0 [ print_char_cursor#1 ultoa::value#0 ] ( print_ulong_decimal:37 [ print_line_cursor#0 print_char_cursor#1 ultoa::value#0 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } }  ) always clobbers reg byte a 
Statement [120] *print_char_cursor#1 = print_char::ch#2 [ print_char_cursor#1 ] ( print_char:51 [ main::i#10 print_char_cursor#1 ] { }  print_str:5::print_char:72 [ print_str::str#10 print_char_cursor#1 ] { { print_char::ch#0 = print_char::ch#2 } }  print_str:9::print_char:72 [ print_line_cursor#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#69 = print_char_cursor#90 } { print_char::ch#0 = print_char::ch#2 } }  print_str:31::print_char:72 [ print_line_cursor#0 main::cyclecount#0 main::sec100s#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#69 = print_char_cursor#91 } { print_char::ch#0 = print_char::ch#2 } }  print_str:35::print_char:72 [ print_line_cursor#0 main::cyclecount#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#1 = print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_str:43::print_char:72 [ print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#69 = print_char_cursor#89 } { print_char::ch#0 = print_char::ch#2 } }  print_uint_decimal:11::print_str:84::print_char:72 [ print_line_cursor#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_uint_decimal:33::print_str:84::print_char:72 [ print_line_cursor#0 main::cyclecount#0 print_str::str#10 print_char_cursor#1 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 } { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_uint_decimal:49::print_str:84::print_char:72 [ main::i#10 print_str::str#10 print_char_cursor#1 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 } { print_char_cursor#61 = print_char_cursor#97 print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_ulong_decimal:37::print_str:117::print_char:72 [ print_line_cursor#0 print_str::str#10 print_char_cursor#1 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 } { print_char_cursor#1 = print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  ) always clobbers reg byte y 
Statement [121] print_char_cursor#39 = ++ print_char_cursor#1 [ print_char_cursor#39 ] ( print_char:51 [ main::i#10 print_char_cursor#39 ] { }  print_str:5::print_char:72 [ print_str::str#10 print_char_cursor#39 ] { { print_char::ch#0 = print_char::ch#2 } }  print_str:9::print_char:72 [ print_line_cursor#0 print_str::str#10 print_char_cursor#39 ] { { print_char_cursor#69 = print_char_cursor#90 } { print_char::ch#0 = print_char::ch#2 } }  print_str:31::print_char:72 [ print_line_cursor#0 main::cyclecount#0 main::sec100s#0 print_str::str#10 print_char_cursor#39 ] { { print_char_cursor#69 = print_char_cursor#91 } { print_char::ch#0 = print_char::ch#2 } }  print_str:35::print_char:72 [ print_line_cursor#0 main::cyclecount#0 print_str::str#10 print_char_cursor#39 ] { { print_char_cursor#1 = print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_str:43::print_char:72 [ print_str::str#10 print_char_cursor#39 ] { { print_char_cursor#69 = print_char_cursor#89 } { print_char::ch#0 = print_char::ch#2 } }  print_uint_decimal:11::print_str:84::print_char:72 [ print_line_cursor#0 print_str::str#10 print_char_cursor#39 ] { { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_uint_decimal:33::print_str:84::print_char:72 [ print_line_cursor#0 main::cyclecount#0 print_str::str#10 print_char_cursor#39 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 } { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_uint_decimal:49::print_str:84::print_char:72 [ main::i#10 print_str::str#10 print_char_cursor#39 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 } { print_char_cursor#61 = print_char_cursor#97 print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_ulong_decimal:37::print_str:117::print_char:72 [ print_line_cursor#0 print_str::str#10 print_char_cursor#39 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 } { print_char_cursor#1 = print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  ) always clobbers reg byte a 
Statement [127] *utoa::buffer#11 = DIGITS[utoa::$11] [ utoa::buffer#11 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::buffer#11 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::buffer#11 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::buffer#11 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a reg byte y 
Statement [128] utoa::buffer#4 = ++ utoa::buffer#11 [ utoa::buffer#4 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::buffer#4 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::buffer#4 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::buffer#4 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a 
Statement [129] *utoa::buffer#4 = 0 [ ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a reg byte y 
Statement [131] utoa::$10 = utoa::digit#2 << 1 [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:28 [ utoa::digit#2 utoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:31 [ utoa::started#2 utoa::started#4 ]
Statement [132] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a 
Statement [134] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a 
Statement [137] utoa_append::buffer#0 = utoa::buffer#11 [ utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [138] utoa_append::value#0 = utoa::value#2 [ utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [139] utoa_append::sub#0 = utoa::digit_value#0 [ utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [141] utoa_append::return#0 = utoa_append::value#2 [ utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [142] utoa::value#1 = utoa_append::return#0 [ utoa::digit#2 utoa::buffer#11 utoa::value#1 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa::value#1 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa::value#1 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa::value#1 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a 
Statement [150] divr16u::rem#1 = divr16u::rem#0 | 1 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( div32u16u:26::divr16u:104 [ print_line_cursor#0 main::cyclecount#0 div32u16u::dividend#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#2 } }  div32u16u:26::divr16u:109 [ print_line_cursor#0 main::cyclecount#0 div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::dividend#2 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:40 [ divr16u::i#2 divr16u::i#1 ]
Statement [154] if(divr16u::rem#6<div32u16u::divisor#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( div32u16u:26::divr16u:104 [ print_line_cursor#0 main::cyclecount#0 div32u16u::dividend#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#2 } }  div32u16u:26::divr16u:109 [ print_line_cursor#0 main::cyclecount#0 div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::dividend#2 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [156] divr16u::rem#2 = divr16u::rem#6 - div32u16u::divisor#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( div32u16u:26::divr16u:104 [ print_line_cursor#0 main::cyclecount#0 div32u16u::dividend#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#2 } }  div32u16u:26::divr16u:109 [ print_line_cursor#0 main::cyclecount#0 div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::dividend#2 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [160] rem16u#0 = divr16u::rem#11 [ divr16u::return#0 rem16u#0 ] ( div32u16u:26::divr16u:104 [ print_line_cursor#0 main::cyclecount#0 div32u16u::dividend#0 divr16u::return#0 rem16u#0 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#2 } }  div32u16u:26::divr16u:109 [ print_line_cursor#0 main::cyclecount#0 div32u16u::quotient_hi#0 divr16u::return#0 rem16u#0 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::dividend#2 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [165] ultoa::$11 = (byte)ultoa::value#2 [ ultoa::buffer#11 ultoa::$11 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::buffer#11 ultoa::$11 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } }  ) always clobbers reg byte a 
Statement [166] *ultoa::buffer#11 = DIGITS[ultoa::$11] [ ultoa::buffer#11 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::buffer#11 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } }  ) always clobbers reg byte a reg byte y 
Statement [167] ultoa::buffer#4 = ++ ultoa::buffer#11 [ ultoa::buffer#4 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::buffer#4 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } }  ) always clobbers reg byte a 
Statement [168] *ultoa::buffer#4 = 0 [ ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } }  ) always clobbers reg byte a reg byte y 
Statement [170] ultoa::$10 = ultoa::digit#2 << 2 [ ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:41 [ ultoa::digit#2 ultoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:46 [ ultoa::started#2 ultoa::started#4 ]
Statement [171] ultoa::digit_value#0 = RADIX_DECIMAL_VALUES_LONG[ultoa::$10] [ ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } }  ) always clobbers reg byte a 
Statement [173] if(ultoa::value#2>=ultoa::digit_value#0) goto ultoa::@5 [ ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } }  ) always clobbers reg byte a 
Statement [176] ultoa_append::buffer#0 = ultoa::buffer#11 [ ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [177] ultoa_append::value#0 = ultoa::value#2 [ ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [178] ultoa_append::sub#0 = ultoa::digit_value#0 [ ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [180] ultoa_append::return#0 = ultoa_append::value#2 [ ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [181] ultoa::value#1 = ultoa_append::return#0 [ ultoa::digit#2 ultoa::buffer#11 ultoa::value#1 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::buffer#11 ultoa::value#1 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } }  ) always clobbers reg byte a 
Statement [185] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( print_uint_decimal:11::utoa:82::utoa_append:140 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:33::utoa:82::utoa_append:140 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:49::utoa:82::utoa_append:140 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:51 [ utoa_append::digit#2 utoa_append::digit#1 ]
Statement [186] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] [ utoa_append::value#2 ] ( print_uint_decimal:11::utoa:82::utoa_append:140 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:33::utoa:82::utoa_append:140 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:49::utoa:82::utoa_append:140 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:28 [ utoa::digit#2 utoa::digit#1 ]
Statement [189] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( print_uint_decimal:11::utoa:82::utoa_append:140 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:33::utoa:82::utoa_append:140 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:49::utoa:82::utoa_append:140 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [192] if(ultoa_append::value#2>=ultoa_append::sub#0) goto ultoa_append::@2 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] ( print_ulong_decimal:37::ultoa:115::ultoa_append:179 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:56 [ ultoa_append::digit#2 ultoa_append::digit#1 ]
Statement [193] *ultoa_append::buffer#0 = DIGITS[ultoa_append::digit#2] [ ultoa_append::value#2 ] ( print_ulong_decimal:37::ultoa:115::ultoa_append:179 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::buffer#11 ultoa_append::value#2 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:41 [ ultoa::digit#2 ultoa::digit#1 ]
Statement [196] ultoa_append::value#1 = ultoa_append::value#2 - ultoa_append::sub#0 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] ( print_ulong_decimal:37::ultoa:115::ultoa_append:179 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [2] *D018 = main::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] print_char_cursor#90 = print_line_cursor#0 [ print_char_cursor#90 print_line_cursor#0 ] (  [ print_char_cursor#90 print_line_cursor#0 ] { { print_char_cursor#69 = print_char_cursor#90 } }  ) always clobbers reg byte a 
Statement [19] if(main::i#12<SQRT_COUNT) goto main::@2 [ print_line_cursor#0 main::i#12 main::sieve_i#2 ] (  [ print_line_cursor#0 main::i#12 main::sieve_i#2 ] { }  ) always clobbers reg byte a 
Statement [22] clock::return#2 = clock::return#0 [ print_line_cursor#0 clock::return#2 ] (  [ print_line_cursor#0 clock::return#2 ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [23] main::$10 = clock::return#2 [ print_line_cursor#0 main::$10 ] (  [ print_line_cursor#0 main::$10 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [24] main::cyclecount#0 = main::$10 - CLOCKS_PER_INIT [ print_line_cursor#0 main::cyclecount#0 ] (  [ print_line_cursor#0 main::cyclecount#0 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [25] div32u16u::dividend#0 = main::cyclecount#0 [ print_line_cursor#0 main::cyclecount#0 div32u16u::dividend#0 ] (  [ print_line_cursor#0 main::cyclecount#0 div32u16u::dividend#0 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [27] div32u16u::return#2 = div32u16u::return#0 [ print_line_cursor#0 main::cyclecount#0 div32u16u::return#2 ] (  [ print_line_cursor#0 main::cyclecount#0 div32u16u::return#2 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [28] main::$12 = div32u16u::return#2 [ print_line_cursor#0 main::cyclecount#0 main::$12 ] (  [ print_line_cursor#0 main::cyclecount#0 main::$12 ] { { print_char_cursor#69 = print_char_cursor#91 } }  ) always clobbers reg byte a 
Statement [29] main::sec100s#0 = (word)main::$12 [ print_line_cursor#0 main::cyclecount#0 main::sec100s#0 ] (  [ print_line_cursor#0 main::cyclecount#0 main::sec100s#0 ] { { print_char_cursor#69 = print_char_cursor#91 } }  ) always clobbers reg byte a 
Statement [30] print_char_cursor#91 = print_line_cursor#0 [ print_line_cursor#0 main::cyclecount#0 main::sec100s#0 print_char_cursor#91 ] (  [ print_line_cursor#0 main::cyclecount#0 main::sec100s#0 print_char_cursor#91 ] { { print_char_cursor#69 = print_char_cursor#91 } }  ) always clobbers reg byte a 
Statement [32] print_uint_decimal::w#1 = main::sec100s#0 [ print_line_cursor#0 main::cyclecount#0 print_uint_decimal::w#1 print_char_cursor#1 ] (  [ print_line_cursor#0 main::cyclecount#0 print_uint_decimal::w#1 print_char_cursor#1 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 } { print_char_cursor#1 = print_char_cursor#61 } }  ) always clobbers reg byte a 
Statement [36] print_ulong_decimal::w#0 = main::cyclecount#0 [ print_line_cursor#0 print_ulong_decimal::w#0 print_char_cursor#1 ] (  [ print_line_cursor#0 print_ulong_decimal::w#0 print_char_cursor#1 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 } }  ) always clobbers reg byte a 
Statement [41] if(main::i#10<$514) goto main::@9 [ main::i#10 print_char_cursor#65 ] (  [ main::i#10 print_char_cursor#65 ] { }  ) always clobbers reg byte a 
Statement [42] print_char_cursor#89 = print_char_cursor#65 [ print_char_cursor#89 ] (  [ print_char_cursor#89 ] { { print_char_cursor#69 = print_char_cursor#89 } }  ) always clobbers reg byte a 
Statement [45] main::$33 = sieve + main::i#10 [ main::i#10 print_char_cursor#65 main::$33 ] (  [ main::i#10 print_char_cursor#65 main::$33 ] { }  ) always clobbers reg byte a 
Statement [46] if(0!=*main::$33) goto main::@11 [ main::i#10 print_char_cursor#65 ] (  [ main::i#10 print_char_cursor#65 ] { }  ) always clobbers reg byte a reg byte y 
Statement [47] print_uint_decimal::w#2 = main::i#10 [ main::i#10 print_char_cursor#65 print_uint_decimal::w#2 ] (  [ main::i#10 print_char_cursor#65 print_uint_decimal::w#2 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a 
Statement [48] print_char_cursor#97 = print_char_cursor#65 [ main::i#10 print_uint_decimal::w#2 print_char_cursor#97 ] (  [ main::i#10 print_uint_decimal::w#2 print_char_cursor#97 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a 
Statement [54] if(0!=*main::sieve_i#2) goto main::@4 [ print_line_cursor#0 main::i#12 main::sieve_i#2 ] (  [ print_line_cursor#0 main::i#12 main::sieve_i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [55] main::j#0 = main::i#12 << 1 [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#0 ] (  [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#0 ] { }  ) always clobbers reg byte a 
Statement [56] main::s#0 = sieve + main::j#0 [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#0 main::s#0 ] (  [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#0 main::s#0 ] { }  ) always clobbers reg byte a 
Statement [58] if(main::j#2<COUNT) goto main::@6 [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#2 main::s#2 ] (  [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#2 main::s#2 ] { }  ) always clobbers reg byte a 
Statement [61] *main::s#2 = 1 [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#2 main::s#2 ] (  [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#2 main::s#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [62] main::s#1 = main::s#2 + main::i#12 [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#2 main::s#1 ] (  [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#2 main::s#1 ] { }  ) always clobbers reg byte a 
Statement [63] main::j#1 = main::j#2 + main::i#12 [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#1 main::s#1 ] (  [ print_line_cursor#0 main::i#12 main::sieve_i#2 main::j#1 main::s#1 ] { }  ) always clobbers reg byte a 
Statement [69] if(0!=*print_str::str#10) goto print_str::@2 [ print_char_cursor#1 print_str::str#10 ] ( print_str:5 [ print_char_cursor#1 print_str::str#10 ] { }  print_str:9 [ print_line_cursor#0 print_char_cursor#1 print_str::str#10 ] { { print_char_cursor#69 = print_char_cursor#90 } }  print_str:31 [ print_line_cursor#0 main::cyclecount#0 main::sec100s#0 print_char_cursor#1 print_str::str#10 ] { { print_char_cursor#69 = print_char_cursor#91 } }  print_str:35 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#1 print_str::str#10 ] { { print_char_cursor#1 = print_char_cursor#69 } }  print_str:43 [ print_char_cursor#1 print_str::str#10 ] { { print_char_cursor#69 = print_char_cursor#89 } }  print_uint_decimal:11::print_str:84 [ print_line_cursor#0 print_char_cursor#1 print_str::str#10 ] { { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } }  print_uint_decimal:33::print_str:84 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#1 print_str::str#10 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 } { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } }  print_uint_decimal:49::print_str:84 [ main::i#10 print_char_cursor#1 print_str::str#10 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 } { print_char_cursor#61 = print_char_cursor#97 print_char_cursor#69 } }  print_ulong_decimal:37::print_str:117 [ print_line_cursor#0 print_char_cursor#1 print_str::str#10 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 } { print_char_cursor#1 = print_char_cursor#69 } }  ) always clobbers reg byte a reg byte y 
Statement [71] print_char::ch#0 = *print_str::str#10 [ print_char_cursor#1 print_str::str#10 print_char::ch#0 ] ( print_str:5 [ print_char_cursor#1 print_str::str#10 print_char::ch#0 ] { { print_char::ch#0 = print_char::ch#2 } }  print_str:9 [ print_line_cursor#0 print_char_cursor#1 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#69 = print_char_cursor#90 } { print_char::ch#0 = print_char::ch#2 } }  print_str:31 [ print_line_cursor#0 main::cyclecount#0 main::sec100s#0 print_char_cursor#1 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#69 = print_char_cursor#91 } { print_char::ch#0 = print_char::ch#2 } }  print_str:35 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#1 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#1 = print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_str:43 [ print_char_cursor#1 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#69 = print_char_cursor#89 } { print_char::ch#0 = print_char::ch#2 } }  print_uint_decimal:11::print_str:84 [ print_line_cursor#0 print_char_cursor#1 print_str::str#10 print_char::ch#0 ] { { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_uint_decimal:33::print_str:84 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#1 print_str::str#10 print_char::ch#0 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 } { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_uint_decimal:49::print_str:84 [ main::i#10 print_char_cursor#1 print_str::str#10 print_char::ch#0 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 } { print_char_cursor#61 = print_char_cursor#97 print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_ulong_decimal:37::print_str:117 [ print_line_cursor#0 print_char_cursor#1 print_str::str#10 print_char::ch#0 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 } { print_char_cursor#1 = print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  ) always clobbers reg byte a reg byte y 
Statement [74] print_char_cursor#96 = print_char_cursor#39 [ print_str::str#0 print_char_cursor#96 ] ( print_str:5 [ print_str::str#0 print_char_cursor#96 ] { }  print_str:9 [ print_line_cursor#0 print_str::str#0 print_char_cursor#96 ] { { print_char_cursor#69 = print_char_cursor#90 } }  print_str:31 [ print_line_cursor#0 main::cyclecount#0 main::sec100s#0 print_str::str#0 print_char_cursor#96 ] { { print_char_cursor#69 = print_char_cursor#91 } }  print_str:35 [ print_line_cursor#0 main::cyclecount#0 print_str::str#0 print_char_cursor#96 ] { { print_char_cursor#1 = print_char_cursor#69 } }  print_str:43 [ print_str::str#0 print_char_cursor#96 ] { { print_char_cursor#69 = print_char_cursor#89 } }  print_uint_decimal:11::print_str:84 [ print_line_cursor#0 print_str::str#0 print_char_cursor#96 ] { { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } }  print_uint_decimal:33::print_str:84 [ print_line_cursor#0 main::cyclecount#0 print_str::str#0 print_char_cursor#96 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 } { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } }  print_uint_decimal:49::print_str:84 [ main::i#10 print_str::str#0 print_char_cursor#96 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 } { print_char_cursor#61 = print_char_cursor#97 print_char_cursor#69 } }  print_ulong_decimal:37::print_str:117 [ print_line_cursor#0 print_str::str#0 print_char_cursor#96 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 } { print_char_cursor#1 = print_char_cursor#69 } }  ) always clobbers reg byte a 
Statement [77] print_line_cursor#0 = print_line_cursor#12 + $28 [ print_line_cursor#0 print_char_cursor#1 ] ( print_ln:7 [ print_line_cursor#0 print_char_cursor#1 ] { }  print_ln:13 [ print_line_cursor#0 print_char_cursor#1 ] { { print_line_cursor#0 = print_line_cursor#23 } }  print_ln:39 [ print_line_cursor#0 print_char_cursor#1 ] { { print_line_cursor#0 = print_line_cursor#23 } }  ) always clobbers reg byte a 
Statement [78] if(print_line_cursor#0<print_char_cursor#1) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#1 ] ( print_ln:7 [ print_line_cursor#0 print_char_cursor#1 ] { }  print_ln:13 [ print_line_cursor#0 print_char_cursor#1 ] { { print_line_cursor#0 = print_line_cursor#23 } }  print_ln:39 [ print_line_cursor#0 print_char_cursor#1 ] { { print_line_cursor#0 = print_line_cursor#23 } }  ) always clobbers reg byte a 
Statement [81] utoa::value#0 = print_uint_decimal::w#3 [ print_char_cursor#61 utoa::value#0 ] ( print_uint_decimal:11 [ print_line_cursor#0 print_char_cursor#61 utoa::value#0 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } }  print_uint_decimal:33 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::value#0 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } }  print_uint_decimal:49 [ main::i#10 print_char_cursor#61 utoa::value#0 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a 
Statement [87] if(memset::num#2<=0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#4 ] ( memset:15 [ print_line_cursor#0 memset::num#2 memset::str#3 memset::c#4 ] { }  print_cls:3::memset:65 [ memset::num#2 memset::str#3 memset::c#4 ] { }  ) always clobbers reg byte a 
Statement [88] memset::end#0 = (byte*)memset::str#3 + memset::num#2 [ memset::str#3 memset::c#4 memset::end#0 ] ( memset:15 [ print_line_cursor#0 memset::str#3 memset::c#4 memset::end#0 ] { }  print_cls:3::memset:65 [ memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [89] memset::dst#4 = (byte*)memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( memset:15 [ print_line_cursor#0 memset::c#4 memset::end#0 memset::dst#4 ] { }  print_cls:3::memset:65 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [91] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( memset:15 [ print_line_cursor#0 memset::c#4 memset::end#0 memset::dst#2 ] { }  print_cls:3::memset:65 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [93] *memset::dst#2 = memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( memset:15 [ print_line_cursor#0 memset::c#4 memset::end#0 memset::dst#2 ] { }  print_cls:3::memset:65 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [95] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = 0 [ ] ( clock_start:17 [ print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [96] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A [ ] ( clock_start:17 [ print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [97] *CIA2_TIMER_AB = $ffffffff [ ] ( clock_start:17 [ print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [98] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A [ ] ( clock_start:17 [ print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [99] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START [ ] ( clock_start:17 [ print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [101] clock::return#0 = $ffffffff - *CIA2_TIMER_AB [ clock::return#0 ] ( clock:21 [ print_line_cursor#0 clock::return#0 ] { { clock::return#0 = clock::return#2 } }  ) always clobbers reg byte a 
Statement [103] divr16u::dividend#1 = _word1_ div32u16u::dividend#0 [ div32u16u::dividend#0 divr16u::dividend#1 ] ( div32u16u:26 [ print_line_cursor#0 main::cyclecount#0 div32u16u::dividend#0 divr16u::dividend#1 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [105] divr16u::return#2 = divr16u::return#0 [ div32u16u::dividend#0 divr16u::return#2 rem16u#0 ] ( div32u16u:26 [ print_line_cursor#0 main::cyclecount#0 div32u16u::dividend#0 divr16u::return#2 rem16u#0 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#2 } }  ) always clobbers reg byte a 
Statement [106] div32u16u::quotient_hi#0 = divr16u::return#2 [ div32u16u::dividend#0 div32u16u::quotient_hi#0 rem16u#0 ] ( div32u16u:26 [ print_line_cursor#0 main::cyclecount#0 div32u16u::dividend#0 div32u16u::quotient_hi#0 rem16u#0 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::dividend#2 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [107] divr16u::dividend#2 = _word0_ div32u16u::dividend#0 [ div32u16u::quotient_hi#0 divr16u::dividend#2 rem16u#0 ] ( div32u16u:26 [ print_line_cursor#0 main::cyclecount#0 div32u16u::quotient_hi#0 divr16u::dividend#2 rem16u#0 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::dividend#2 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [108] divr16u::rem#4 = rem16u#0 [ div32u16u::quotient_hi#0 divr16u::dividend#2 divr16u::rem#4 ] ( div32u16u:26 [ print_line_cursor#0 main::cyclecount#0 div32u16u::quotient_hi#0 divr16u::dividend#2 divr16u::rem#4 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::dividend#2 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [110] divr16u::return#3 = divr16u::return#0 [ div32u16u::quotient_hi#0 divr16u::return#3 ] ( div32u16u:26 [ print_line_cursor#0 main::cyclecount#0 div32u16u::quotient_hi#0 divr16u::return#3 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::dividend#2 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [111] div32u16u::quotient_lo#0 = divr16u::return#3 [ div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] ( div32u16u:26 [ print_line_cursor#0 main::cyclecount#0 div32u16u::quotient_hi#0 div32u16u::quotient_lo#0 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [112] div32u16u::return#0 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0 [ div32u16u::return#0 ] ( div32u16u:26 [ print_line_cursor#0 main::cyclecount#0 div32u16u::return#0 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } }  ) always clobbers reg byte a 
Statement [114] ultoa::value#0 = print_ulong_decimal::w#0 [ print_char_cursor#1 ultoa::value#0 ] ( print_ulong_decimal:37 [ print_line_cursor#0 print_char_cursor#1 ultoa::value#0 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } }  ) always clobbers reg byte a 
Statement [120] *print_char_cursor#1 = print_char::ch#2 [ print_char_cursor#1 ] ( print_char:51 [ main::i#10 print_char_cursor#1 ] { }  print_str:5::print_char:72 [ print_str::str#10 print_char_cursor#1 ] { { print_char::ch#0 = print_char::ch#2 } }  print_str:9::print_char:72 [ print_line_cursor#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#69 = print_char_cursor#90 } { print_char::ch#0 = print_char::ch#2 } }  print_str:31::print_char:72 [ print_line_cursor#0 main::cyclecount#0 main::sec100s#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#69 = print_char_cursor#91 } { print_char::ch#0 = print_char::ch#2 } }  print_str:35::print_char:72 [ print_line_cursor#0 main::cyclecount#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#1 = print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_str:43::print_char:72 [ print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#69 = print_char_cursor#89 } { print_char::ch#0 = print_char::ch#2 } }  print_uint_decimal:11::print_str:84::print_char:72 [ print_line_cursor#0 print_str::str#10 print_char_cursor#1 ] { { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_uint_decimal:33::print_str:84::print_char:72 [ print_line_cursor#0 main::cyclecount#0 print_str::str#10 print_char_cursor#1 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 } { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_uint_decimal:49::print_str:84::print_char:72 [ main::i#10 print_str::str#10 print_char_cursor#1 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 } { print_char_cursor#61 = print_char_cursor#97 print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_ulong_decimal:37::print_str:117::print_char:72 [ print_line_cursor#0 print_str::str#10 print_char_cursor#1 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 } { print_char_cursor#1 = print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  ) always clobbers reg byte y 
Statement [121] print_char_cursor#39 = ++ print_char_cursor#1 [ print_char_cursor#39 ] ( print_char:51 [ main::i#10 print_char_cursor#39 ] { }  print_str:5::print_char:72 [ print_str::str#10 print_char_cursor#39 ] { { print_char::ch#0 = print_char::ch#2 } }  print_str:9::print_char:72 [ print_line_cursor#0 print_str::str#10 print_char_cursor#39 ] { { print_char_cursor#69 = print_char_cursor#90 } { print_char::ch#0 = print_char::ch#2 } }  print_str:31::print_char:72 [ print_line_cursor#0 main::cyclecount#0 main::sec100s#0 print_str::str#10 print_char_cursor#39 ] { { print_char_cursor#69 = print_char_cursor#91 } { print_char::ch#0 = print_char::ch#2 } }  print_str:35::print_char:72 [ print_line_cursor#0 main::cyclecount#0 print_str::str#10 print_char_cursor#39 ] { { print_char_cursor#1 = print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_str:43::print_char:72 [ print_str::str#10 print_char_cursor#39 ] { { print_char_cursor#69 = print_char_cursor#89 } { print_char::ch#0 = print_char::ch#2 } }  print_uint_decimal:11::print_str:84::print_char:72 [ print_line_cursor#0 print_str::str#10 print_char_cursor#39 ] { { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_uint_decimal:33::print_str:84::print_char:72 [ print_line_cursor#0 main::cyclecount#0 print_str::str#10 print_char_cursor#39 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 } { print_char_cursor#1 = print_char_cursor#61 print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_uint_decimal:49::print_str:84::print_char:72 [ main::i#10 print_str::str#10 print_char_cursor#39 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 } { print_char_cursor#61 = print_char_cursor#97 print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  print_ulong_decimal:37::print_str:117::print_char:72 [ print_line_cursor#0 print_str::str#10 print_char_cursor#39 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 } { print_char_cursor#1 = print_char_cursor#69 } { print_char::ch#0 = print_char::ch#2 } }  ) always clobbers reg byte a 
Statement [127] *utoa::buffer#11 = DIGITS[utoa::$11] [ utoa::buffer#11 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::buffer#11 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::buffer#11 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::buffer#11 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a reg byte y 
Statement [128] utoa::buffer#4 = ++ utoa::buffer#11 [ utoa::buffer#4 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::buffer#4 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::buffer#4 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::buffer#4 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a 
Statement [129] *utoa::buffer#4 = 0 [ ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a reg byte y 
Statement [131] utoa::$10 = utoa::digit#2 << 1 [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a 
Statement [132] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a 
Statement [134] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 [ utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a 
Statement [137] utoa_append::buffer#0 = utoa::buffer#11 [ utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [138] utoa_append::value#0 = utoa::value#2 [ utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [139] utoa_append::sub#0 = utoa::digit_value#0 [ utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [141] utoa_append::return#0 = utoa_append::value#2 [ utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [142] utoa::value#1 = utoa_append::return#0 [ utoa::digit#2 utoa::buffer#11 utoa::value#1 ] ( print_uint_decimal:11::utoa:82 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa::value#1 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } }  print_uint_decimal:33::utoa:82 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa::value#1 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } }  print_uint_decimal:49::utoa:82 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa::value#1 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } }  ) always clobbers reg byte a 
Statement [150] divr16u::rem#1 = divr16u::rem#0 | 1 [ divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( div32u16u:26::divr16u:104 [ print_line_cursor#0 main::cyclecount#0 div32u16u::dividend#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#2 } }  div32u16u:26::divr16u:109 [ print_line_cursor#0 main::cyclecount#0 div32u16u::quotient_hi#0 divr16u::dividend#3 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::dividend#2 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [154] if(divr16u::rem#6<div32u16u::divisor#0) goto divr16u::@3 [ divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] ( div32u16u:26::divr16u:104 [ print_line_cursor#0 main::cyclecount#0 div32u16u::dividend#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#2 } }  div32u16u:26::divr16u:109 [ print_line_cursor#0 main::cyclecount#0 div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#6 divr16u::quotient#1 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::dividend#2 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [156] divr16u::rem#2 = divr16u::rem#6 - div32u16u::divisor#0 [ divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( div32u16u:26::divr16u:104 [ print_line_cursor#0 main::cyclecount#0 div32u16u::dividend#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#2 } }  div32u16u:26::divr16u:109 [ print_line_cursor#0 main::cyclecount#0 div32u16u::quotient_hi#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::dividend#2 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [160] rem16u#0 = divr16u::rem#11 [ divr16u::return#0 rem16u#0 ] ( div32u16u:26::divr16u:104 [ print_line_cursor#0 main::cyclecount#0 div32u16u::dividend#0 divr16u::return#0 rem16u#0 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::dividend#1 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#2 } }  div32u16u:26::divr16u:109 [ print_line_cursor#0 main::cyclecount#0 div32u16u::quotient_hi#0 divr16u::return#0 rem16u#0 ] { { div32u16u::dividend#0 = main::cyclecount#0 } { div32u16u::return#0 = div32u16u::return#2 } { divr16u::rem#10 = divr16u::rem#4 rem16u#0 } { divr16u::dividend#2 = divr16u::dividend#5 } { divr16u::return#0 = divr16u::return#3 } }  ) always clobbers reg byte a 
Statement [165] ultoa::$11 = (byte)ultoa::value#2 [ ultoa::buffer#11 ultoa::$11 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::buffer#11 ultoa::$11 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } }  ) always clobbers reg byte a 
Statement [166] *ultoa::buffer#11 = DIGITS[ultoa::$11] [ ultoa::buffer#11 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::buffer#11 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } }  ) always clobbers reg byte a reg byte y 
Statement [167] ultoa::buffer#4 = ++ ultoa::buffer#11 [ ultoa::buffer#4 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::buffer#4 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } }  ) always clobbers reg byte a 
Statement [168] *ultoa::buffer#4 = 0 [ ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } }  ) always clobbers reg byte a reg byte y 
Statement [170] ultoa::$10 = ultoa::digit#2 << 2 [ ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } }  ) always clobbers reg byte a 
Statement [171] ultoa::digit_value#0 = RADIX_DECIMAL_VALUES_LONG[ultoa::$10] [ ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } }  ) always clobbers reg byte a 
Statement [173] if(ultoa::value#2>=ultoa::digit_value#0) goto ultoa::@5 [ ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } }  ) always clobbers reg byte a 
Statement [176] ultoa_append::buffer#0 = ultoa::buffer#11 [ ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [177] ultoa_append::value#0 = ultoa::value#2 [ ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [178] ultoa_append::sub#0 = ultoa::digit_value#0 [ ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [180] ultoa_append::return#0 = ultoa_append::value#2 [ ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [181] ultoa::value#1 = ultoa_append::return#0 [ ultoa::digit#2 ultoa::buffer#11 ultoa::value#1 ] ( print_ulong_decimal:37::ultoa:115 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::buffer#11 ultoa::value#1 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } }  ) always clobbers reg byte a 
Statement [185] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( print_uint_decimal:11::utoa:82::utoa_append:140 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:33::utoa:82::utoa_append:140 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:49::utoa:82::utoa_append:140 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [186] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] [ utoa_append::value#2 ] ( print_uint_decimal:11::utoa:82::utoa_append:140 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:33::utoa:82::utoa_append:140 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:49::utoa:82::utoa_append:140 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [189] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( print_uint_decimal:11::utoa:82::utoa_append:140 [ print_line_cursor#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { print_char_cursor#1 = print_char_cursor#61 } { utoa::value#0 = print_uint_decimal::w#3 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:33::utoa:82::utoa_append:140 [ print_line_cursor#0 main::cyclecount#0 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { print_uint_decimal::w#1 = print_uint_decimal::w#3 main::sec100s#0 utoa::value#0 } { print_char_cursor#1 = print_char_cursor#61 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  print_uint_decimal:49::utoa:82::utoa_append:140 [ main::i#10 print_char_cursor#61 utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { print_uint_decimal::w#2 = print_uint_decimal::w#3 main::i#10 utoa::value#0 } { print_char_cursor#61 = print_char_cursor#97 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [192] if(ultoa_append::value#2>=ultoa_append::sub#0) goto ultoa_append::@2 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] ( print_ulong_decimal:37::ultoa:115::ultoa_append:179 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [193] *ultoa_append::buffer#0 = DIGITS[ultoa_append::digit#2] [ ultoa_append::value#2 ] ( print_ulong_decimal:37::ultoa:115::ultoa_append:179 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::buffer#11 ultoa_append::value#2 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [196] ultoa_append::value#1 = ultoa_append::value#2 - ultoa_append::sub#0 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] ( print_ulong_decimal:37::ultoa:115::ultoa_append:179 [ print_line_cursor#0 print_char_cursor#1 ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] { { print_ulong_decimal::w#0 = main::cyclecount#0 ultoa::value#0 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::i#12 main::i#2 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ main::sieve_i#2 main::sieve_i#1 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ main::i#10 main::i#3 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ main::j#2 main::j#1 main::j#0 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ main::s#2 main::s#1 main::s#0 ] : zp[2]:10 , 
Potential registers zp[2]:12 [ print_char_cursor#69 print_char_cursor#89 print_char_cursor#90 print_char_cursor#91 print_char_cursor#1 print_char_cursor#61 print_char_cursor#96 print_char_cursor#97 ] : zp[2]:12 , 
Potential registers zp[2]:14 [ print_str::str#10 print_str::str#11 print_str::str#0 ] : zp[2]:14 , 
Potential registers zp[2]:16 [ print_line_cursor#12 print_line_cursor#23 print_char_cursor#65 print_char_cursor#79 print_line_cursor#0 print_char_cursor#39 ] : zp[2]:16 , 
Potential registers zp[2]:18 [ print_uint_decimal::w#3 print_uint_decimal::w#2 print_uint_decimal::w#1 ] : zp[2]:18 , 
Potential registers zp[2]:20 [ memset::num#2 ] : zp[2]:20 , 
Potential registers zp[2]:22 [ memset::str#3 ] : zp[2]:22 , 
Potential registers zp[1]:24 [ memset::c#4 ] : zp[1]:24 , reg byte x , 
Potential registers zp[2]:25 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:25 , 
Potential registers zp[1]:27 [ print_char::ch#2 print_char::ch#0 ] : zp[1]:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:28 [ utoa::digit#2 utoa::digit#1 ] : zp[1]:28 , reg byte x , 
Potential registers zp[2]:29 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 ] : zp[2]:29 , 
Potential registers zp[1]:31 [ utoa::started#2 utoa::started#4 ] : zp[1]:31 , reg byte x , reg byte y , 
Potential registers zp[2]:32 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 ] : zp[2]:32 , 
Potential registers zp[2]:34 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp[2]:34 , 
Potential registers zp[2]:36 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ] : zp[2]:36 , 
Potential registers zp[2]:38 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp[2]:38 , 
Potential registers zp[1]:40 [ divr16u::i#2 divr16u::i#1 ] : zp[1]:40 , reg byte x , reg byte y , 
Potential registers zp[1]:41 [ ultoa::digit#2 ultoa::digit#1 ] : zp[1]:41 , reg byte x , 
Potential registers zp[4]:42 [ ultoa::value#2 ultoa::value#6 ultoa::value#0 ultoa::value#1 ] : zp[4]:42 , 
Potential registers zp[1]:46 [ ultoa::started#2 ultoa::started#4 ] : zp[1]:46 , reg byte x , reg byte y , 
Potential registers zp[2]:47 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#5 ] : zp[2]:47 , 
Potential registers zp[2]:49 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] : zp[2]:49 , 
Potential registers zp[1]:51 [ utoa_append::digit#2 utoa_append::digit#1 ] : zp[1]:51 , reg byte x , reg byte y , 
Potential registers zp[4]:52 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] : zp[4]:52 , 
Potential registers zp[1]:56 [ ultoa_append::digit#2 ultoa_append::digit#1 ] : zp[1]:56 , reg byte x , reg byte y , 
Potential registers zp[4]:57 [ clock::return#2 ] : zp[4]:57 , 
Potential registers zp[4]:61 [ main::$10 ] : zp[4]:61 , 
Potential registers zp[4]:65 [ main::cyclecount#0 ] : zp[4]:65 , 
Potential registers zp[4]:69 [ div32u16u::dividend#0 ] : zp[4]:69 , 
Potential registers zp[4]:73 [ div32u16u::return#2 ] : zp[4]:73 , 
Potential registers zp[4]:77 [ main::$12 ] : zp[4]:77 , 
Potential registers zp[2]:81 [ main::sec100s#0 ] : zp[2]:81 , 
Potential registers zp[4]:83 [ print_ulong_decimal::w#0 ] : zp[4]:83 , 
Potential registers zp[2]:87 [ main::$33 ] : zp[2]:87 , 
Potential registers zp[2]:89 [ memset::end#0 ] : zp[2]:89 , 
Potential registers zp[4]:91 [ clock::return#0 ] : zp[4]:91 , 
Potential registers zp[2]:95 [ divr16u::return#2 ] : zp[2]:95 , 
Potential registers zp[2]:97 [ div32u16u::quotient_hi#0 ] : zp[2]:97 , 
Potential registers zp[2]:99 [ divr16u::return#3 ] : zp[2]:99 , 
Potential registers zp[2]:101 [ div32u16u::quotient_lo#0 ] : zp[2]:101 , 
Potential registers zp[4]:103 [ div32u16u::return#0 ] : zp[4]:103 , 
Potential registers zp[1]:107 [ utoa::$11 ] : zp[1]:107 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:108 [ utoa::buffer#4 ] : zp[2]:108 , 
Potential registers zp[1]:110 [ utoa::$10 ] : zp[1]:110 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:111 [ utoa::digit_value#0 ] : zp[2]:111 , 
Potential registers zp[2]:113 [ utoa_append::buffer#0 ] : zp[2]:113 , 
Potential registers zp[2]:115 [ utoa_append::sub#0 ] : zp[2]:115 , 
Potential registers zp[2]:117 [ utoa_append::return#0 ] : zp[2]:117 , 
Potential registers zp[1]:119 [ divr16u::$1 ] : zp[1]:119 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:120 [ divr16u::$2 ] : zp[1]:120 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:121 [ rem16u#0 ] : zp[2]:121 , 
Potential registers zp[1]:123 [ ultoa::$11 ] : zp[1]:123 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:124 [ ultoa::buffer#4 ] : zp[2]:124 , 
Potential registers zp[1]:126 [ ultoa::$10 ] : zp[1]:126 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:127 [ ultoa::digit_value#0 ] : zp[4]:127 , 
Potential registers zp[2]:131 [ ultoa_append::buffer#0 ] : zp[2]:131 , 
Potential registers zp[4]:133 [ ultoa_append::sub#0 ] : zp[4]:133 , 
Potential registers zp[4]:137 [ ultoa_append::return#0 ] : zp[4]:137 , 

REGISTER UPLIFT SCOPES
Uplift Scope [utoa_append] 2,500,550,003.5: zp[2]:49 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] 2,000,500,002.5: zp[1]:51 [ utoa_append::digit#2 utoa_append::digit#1 ] 333,350,000.5: zp[2]:115 [ utoa_append::sub#0 ] 200,002: zp[2]:117 [ utoa_append::return#0 ] 137,500.25: zp[2]:113 [ utoa_append::buffer#0 ] 
Uplift Scope [ultoa_append] 2,505,503.5: zp[4]:52 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] 2,005,002.5: zp[1]:56 [ ultoa_append::digit#2 ultoa_append::digit#1 ] 333,500.5: zp[4]:133 [ ultoa_append::sub#0 ] 2,002: zp[4]:137 [ ultoa_append::return#0 ] 1,375.25: zp[2]:131 [ ultoa_append::buffer#0 ] 
Uplift Scope [utoa] 378,718.21: zp[2]:32 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 ] 307,839.93: zp[2]:29 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 ] 228,573.71: zp[1]:28 [ utoa::digit#2 utoa::digit#1 ] 200,002: zp[1]:110 [ utoa::$10 ] 150,001.5: zp[1]:31 [ utoa::started#2 utoa::started#4 ] 60,000.6: zp[2]:111 [ utoa::digit_value#0 ] 2,002: zp[1]:107 [ utoa::$11 ] 2,002: zp[2]:108 [ utoa::buffer#4 ] 
Uplift Scope [print_char] 1,300,004: zp[1]:27 [ print_char::ch#2 print_char::ch#0 ] 
Uplift Scope [] 264,856.36: zp[2]:12 [ print_char_cursor#69 print_char_cursor#89 print_char_cursor#90 print_char_cursor#91 print_char_cursor#1 print_char_cursor#61 print_char_cursor#96 print_char_cursor#97 ] 220,261.3: zp[2]:16 [ print_line_cursor#12 print_line_cursor#23 print_char_cursor#65 print_char_cursor#79 print_line_cursor#0 print_char_cursor#39 ] 18.67: zp[2]:121 [ rem16u#0 ] 
Uplift Scope [print_str] 201,253.25: zp[2]:14 [ print_str::str#10 print_str::str#11 print_str::str#0 ] 
Uplift Scope [divr16u] 9,027.42: zp[2]:34 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 3,184.89: zp[2]:38 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 2,002: zp[1]:119 [ divr16u::$1 ] 2,002: zp[1]:120 [ divr16u::$2 ] 1,655.5: zp[1]:40 [ divr16u::i#2 divr16u::i#1 ] 849.68: zp[2]:36 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ] 22: zp[2]:95 [ divr16u::return#2 ] 22: zp[2]:99 [ divr16u::return#3 ] 
Uplift Scope [ultoa] 3,803.93: zp[2]:47 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#5 ] 3,144.93: zp[4]:42 [ ultoa::value#2 ultoa::value#6 ultoa::value#0 ultoa::value#1 ] 2,288: zp[1]:41 [ ultoa::digit#2 ultoa::digit#1 ] 2,002: zp[1]:126 [ ultoa::$10 ] 1,501.5: zp[1]:46 [ ultoa::started#2 ultoa::started#4 ] 600.6: zp[4]:127 [ ultoa::digit_value#0 ] 202: zp[1]:123 [ ultoa::$11 ] 202: zp[2]:124 [ ultoa::buffer#4 ] 
Uplift Scope [memset] 3,572.33: zp[2]:25 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 183.67: zp[2]:89 [ memset::end#0 ] 125.12: zp[1]:24 [ memset::c#4 ] 101: zp[2]:20 [ memset::num#2 ] 0: zp[2]:22 [ memset::str#3 ] 
Uplift Scope [main] 297: zp[2]:8 [ main::j#2 main::j#1 main::j#0 ] 227.67: zp[2]:10 [ main::s#2 main::s#1 main::s#0 ] 35.6: zp[2]:2 [ main::i#12 main::i#2 ] 27.5: zp[2]:6 [ main::i#10 main::i#3 ] 25: zp[2]:4 [ main::sieve_i#2 main::sieve_i#1 ] 22: zp[2]:87 [ main::$33 ] 4: zp[4]:61 [ main::$10 ] 2: zp[4]:77 [ main::$12 ] 1.33: zp[2]:81 [ main::sec100s#0 ] 0.5: zp[4]:65 [ main::cyclecount#0 ] 
Uplift Scope [print_uint_decimal] 129: zp[2]:18 [ print_uint_decimal::w#3 print_uint_decimal::w#2 print_uint_decimal::w#1 ] 
Uplift Scope [div32u16u] 22: zp[2]:101 [ div32u16u::quotient_lo#0 ] 4.8: zp[4]:69 [ div32u16u::dividend#0 ] 4.33: zp[4]:103 [ div32u16u::return#0 ] 4: zp[4]:73 [ div32u16u::return#2 ] 3.67: zp[2]:97 [ div32u16u::quotient_hi#0 ] 
Uplift Scope [print_ulong_decimal] 13: zp[4]:83 [ print_ulong_decimal::w#0 ] 
Uplift Scope [clock] 4.33: zp[4]:91 [ clock::return#0 ] 4: zp[4]:57 [ clock::return#2 ] 
Uplift Scope [clock_start] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 
Uplift Scope [RADIX] 

Uplifting [utoa_append] best 102533 combination zp[2]:49 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ] zp[2]:115 [ utoa_append::sub#0 ] zp[2]:117 [ utoa_append::return#0 ] zp[2]:113 [ utoa_append::buffer#0 ] 
Uplifting [ultoa_append] best 101930 combination zp[4]:52 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] reg byte x [ ultoa_append::digit#2 ultoa_append::digit#1 ] zp[4]:133 [ ultoa_append::sub#0 ] zp[4]:137 [ ultoa_append::return#0 ] zp[2]:131 [ ultoa_append::buffer#0 ] 
Uplifting [utoa] best 100824 combination zp[2]:32 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 ] zp[2]:29 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 ] zp[1]:28 [ utoa::digit#2 utoa::digit#1 ] reg byte a [ utoa::$10 ] reg byte x [ utoa::started#2 utoa::started#4 ] zp[2]:111 [ utoa::digit_value#0 ] reg byte x [ utoa::$11 ] zp[2]:108 [ utoa::buffer#4 ] 
Uplifting [print_char] best 100518 combination reg byte a [ print_char::ch#2 print_char::ch#0 ] 
Uplifting [] best 100518 combination zp[2]:12 [ print_char_cursor#69 print_char_cursor#89 print_char_cursor#90 print_char_cursor#91 print_char_cursor#1 print_char_cursor#61 print_char_cursor#96 print_char_cursor#97 ] zp[2]:16 [ print_line_cursor#12 print_line_cursor#23 print_char_cursor#65 print_char_cursor#79 print_line_cursor#0 print_char_cursor#39 ] zp[2]:121 [ rem16u#0 ] 
Uplifting [print_str] best 100518 combination zp[2]:14 [ print_str::str#10 print_str::str#11 print_str::str#0 ] 
Uplifting [divr16u] best 100328 combination zp[2]:34 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp[2]:38 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp[2]:36 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ] zp[2]:95 [ divr16u::return#2 ] zp[2]:99 [ divr16u::return#3 ] 
Uplifting [ultoa] best 100214 combination zp[2]:47 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#5 ] zp[4]:42 [ ultoa::value#2 ultoa::value#6 ultoa::value#0 ultoa::value#1 ] zp[1]:41 [ ultoa::digit#2 ultoa::digit#1 ] reg byte a [ ultoa::$10 ] reg byte x [ ultoa::started#2 ultoa::started#4 ] zp[4]:127 [ ultoa::digit_value#0 ] reg byte a [ ultoa::$11 ] zp[2]:124 [ ultoa::buffer#4 ] 
Uplifting [memset] best 100198 combination zp[2]:25 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:89 [ memset::end#0 ] reg byte x [ memset::c#4 ] zp[2]:20 [ memset::num#2 ] zp[2]:22 [ memset::str#3 ] 
Uplifting [main] best 100198 combination zp[2]:8 [ main::j#2 main::j#1 main::j#0 ] zp[2]:10 [ main::s#2 main::s#1 main::s#0 ] zp[2]:2 [ main::i#12 main::i#2 ] zp[2]:6 [ main::i#10 main::i#3 ] zp[2]:4 [ main::sieve_i#2 main::sieve_i#1 ] zp[2]:87 [ main::$33 ] zp[4]:61 [ main::$10 ] zp[4]:77 [ main::$12 ] zp[2]:81 [ main::sec100s#0 ] zp[4]:65 [ main::cyclecount#0 ] 
Uplifting [print_uint_decimal] best 100198 combination zp[2]:18 [ print_uint_decimal::w#3 print_uint_decimal::w#2 print_uint_decimal::w#1 ] 
Uplifting [div32u16u] best 100198 combination zp[2]:101 [ div32u16u::quotient_lo#0 ] zp[4]:69 [ div32u16u::dividend#0 ] zp[4]:103 [ div32u16u::return#0 ] zp[4]:73 [ div32u16u::return#2 ] zp[2]:97 [ div32u16u::quotient_hi#0 ] 
Uplifting [print_ulong_decimal] best 100198 combination zp[4]:83 [ print_ulong_decimal::w#0 ] 
Uplifting [clock] best 100198 combination zp[4]:91 [ clock::return#0 ] zp[4]:57 [ clock::return#2 ] 
Uplifting [clock_start] best 100198 combination 
Uplifting [MOS6526_CIA] best 100198 combination 
Uplifting [MOS6569_VICII] best 100198 combination 
Uplifting [MOS6581_SID] best 100198 combination 
Uplifting [print_ln] best 100198 combination 
Uplifting [print_cls] best 100198 combination 
Uplifting [RADIX] best 100198 combination 
Attempting to uplift remaining variables inzp[1]:28 [ utoa::digit#2 utoa::digit#1 ]
Uplifting [utoa] best 100198 combination zp[1]:28 [ utoa::digit#2 utoa::digit#1 ] 
Attempting to uplift remaining variables inzp[1]:41 [ ultoa::digit#2 ultoa::digit#1 ]
Uplifting [ultoa] best 100198 combination zp[1]:41 [ ultoa::digit#2 ultoa::digit#1 ] 
Coalescing zero page register [ zp[2]:34 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] with [ zp[2]:121 [ rem16u#0 ] ] - score: 2
Coalescing zero page register [ zp[2]:6 [ main::i#10 main::i#3 ] ] with [ zp[2]:18 [ print_uint_decimal::w#3 print_uint_decimal::w#2 print_uint_decimal::w#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:20 [ memset::num#2 ] ] with [ zp[2]:89 [ memset::end#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ memset::str#3 ] ] with [ zp[2]:25 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:29 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 ] ] with [ zp[2]:49 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:29 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] with [ zp[2]:117 [ utoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:32 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 ] ] with [ zp[2]:108 [ utoa::buffer#4 ] ] - score: 1
Coalescing zero page register [ zp[2]:32 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 utoa::buffer#4 ] ] with [ zp[2]:113 [ utoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:38 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp[2]:95 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:38 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 ] ] with [ zp[2]:99 [ divr16u::return#3 ] ] - score: 1
Coalescing zero page register [ zp[4]:42 [ ultoa::value#2 ultoa::value#6 ultoa::value#0 ultoa::value#1 ] ] with [ zp[4]:52 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] ] - score: 1
Coalescing zero page register [ zp[4]:42 [ ultoa::value#2 ultoa::value#6 ultoa::value#0 ultoa::value#1 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] ] with [ zp[4]:83 [ print_ulong_decimal::w#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:42 [ ultoa::value#2 ultoa::value#6 ultoa::value#0 ultoa::value#1 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 print_ulong_decimal::w#0 ] ] with [ zp[4]:137 [ ultoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:47 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#5 ] ] with [ zp[2]:124 [ ultoa::buffer#4 ] ] - score: 1
Coalescing zero page register [ zp[2]:47 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#5 ultoa::buffer#4 ] ] with [ zp[2]:131 [ ultoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:57 [ clock::return#2 ] ] with [ zp[4]:61 [ main::$10 ] ] - score: 1
Coalescing zero page register [ zp[4]:57 [ clock::return#2 main::$10 ] ] with [ zp[4]:91 [ clock::return#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:65 [ main::cyclecount#0 ] ] with [ zp[4]:69 [ div32u16u::dividend#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:73 [ div32u16u::return#2 ] ] with [ zp[4]:77 [ main::$12 ] ] - score: 1
Coalescing zero page register [ zp[4]:73 [ div32u16u::return#2 main::$12 ] ] with [ zp[4]:103 [ div32u16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:111 [ utoa::digit_value#0 ] ] with [ zp[2]:115 [ utoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:127 [ ultoa::digit_value#0 ] ] with [ zp[4]:133 [ ultoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:6 [ main::i#10 main::i#3 print_uint_decimal::w#3 print_uint_decimal::w#2 print_uint_decimal::w#1 ] ] with [ zp[2]:81 [ main::sec100s#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:38 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 ] ] with [ zp[2]:101 [ div32u16u::quotient_lo#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:42 [ ultoa::value#2 ultoa::value#6 ultoa::value#0 ultoa::value#1 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 print_ulong_decimal::w#0 ultoa_append::return#0 ] ] with [ zp[4]:65 [ main::cyclecount#0 div32u16u::dividend#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:42 [ ultoa::value#2 ultoa::value#6 ultoa::value#0 ultoa::value#1 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 print_ulong_decimal::w#0 ultoa_append::return#0 main::cyclecount#0 div32u16u::dividend#0 ] ] with [ zp[4]:57 [ clock::return#2 main::$10 clock::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:12 [ print_char_cursor#69 print_char_cursor#89 print_char_cursor#90 print_char_cursor#91 print_char_cursor#1 print_char_cursor#61 print_char_cursor#96 print_char_cursor#97 ] ] with [ zp[2]:2 [ main::i#12 main::i#2 ] ]
Coalescing zero page register [ zp[2]:20 [ memset::num#2 memset::end#0 ] ] with [ zp[2]:14 [ print_str::str#10 print_str::str#11 print_str::str#0 ] ]
Coalescing zero page register [ zp[2]:29 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ] ] with [ zp[2]:22 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[2]:34 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 ] ] with [ zp[2]:32 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 utoa::buffer#4 utoa_append::buffer#0 ] ]
Coalescing zero page register [ zp[1]:41 [ ultoa::digit#2 ultoa::digit#1 ] ] with [ zp[1]:28 [ utoa::digit#2 utoa::digit#1 ] ]
Coalescing zero page register [ zp[2]:47 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#5 ultoa::buffer#4 ultoa_append::buffer#0 ] ] with [ zp[2]:36 [ divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ] ]
Coalescing zero page register [ zp[2]:87 [ main::$33 ] ] with [ zp[2]:38 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ] ]
Coalescing zero page register [ zp[2]:111 [ utoa::digit_value#0 utoa_append::sub#0 ] ] with [ zp[2]:97 [ div32u16u::quotient_hi#0 ] ]
Coalescing zero page register [ zp[2]:34 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 utoa::buffer#4 utoa_append::buffer#0 ] ] with [ zp[2]:20 [ memset::num#2 memset::end#0 print_str::str#10 print_str::str#11 print_str::str#0 ] ]
Coalescing zero page register [ zp[2]:47 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#5 ultoa::buffer#4 ultoa_append::buffer#0 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 ] ] with [ zp[2]:29 [ utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Allocated (was zp[2]:4) zp[2]:2 [ main::sieve_i#2 main::sieve_i#1 ]
Allocated (was zp[2]:6) zp[2]:4 [ main::i#10 main::i#3 print_uint_decimal::w#3 print_uint_decimal::w#2 print_uint_decimal::w#1 main::sec100s#0 ]
Allocated (was zp[2]:8) zp[2]:6 [ main::j#2 main::j#1 main::j#0 ]
Allocated (was zp[2]:10) zp[2]:8 [ main::s#2 main::s#1 main::s#0 ]
Allocated (was zp[2]:12) zp[2]:10 [ print_char_cursor#69 print_char_cursor#89 print_char_cursor#90 print_char_cursor#91 print_char_cursor#1 print_char_cursor#61 print_char_cursor#96 print_char_cursor#97 main::i#12 main::i#2 ]
Allocated (was zp[2]:16) zp[2]:12 [ print_line_cursor#12 print_line_cursor#23 print_char_cursor#65 print_char_cursor#79 print_line_cursor#0 print_char_cursor#39 ]
Allocated (was zp[2]:34) zp[2]:14 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 utoa::buffer#4 utoa_append::buffer#0 memset::num#2 memset::end#0 print_str::str#10 print_str::str#11 print_str::str#0 ]
Allocated (was zp[1]:41) zp[1]:16 [ ultoa::digit#2 ultoa::digit#1 utoa::digit#2 utoa::digit#1 ]
Allocated (was zp[4]:42) zp[4]:17 [ ultoa::value#2 ultoa::value#6 ultoa::value#0 ultoa::value#1 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 print_ulong_decimal::w#0 ultoa_append::return#0 main::cyclecount#0 div32u16u::dividend#0 clock::return#2 main::$10 clock::return#0 ]
Allocated (was zp[2]:47) zp[2]:21 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#5 ultoa::buffer#4 ultoa_append::buffer#0 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated (was zp[4]:73) zp[4]:23 [ div32u16u::return#2 main::$12 div32u16u::return#0 ]
Allocated (was zp[2]:87) zp[2]:27 [ main::$33 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ]
Allocated (was zp[2]:111) zp[2]:29 [ utoa::digit_value#0 utoa_append::sub#0 div32u16u::quotient_hi#0 ]
Allocated (was zp[4]:127) zp[4]:31 [ ultoa::digit_value#0 ultoa_append::sub#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// C standard library string.h
// Functions to manipulate C strings and arrays.
  // Upstart
  // Commodore 64 PRG executable file
.file [name="sieve.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  // Clock cycles per frame (on a C64 PAL)
  .const CLOCKS_PER_FRAME = $4cc8
  // Frames per second (on a C64 PAL)
  .const FRAMES_PER_SEC = $3c
  // Clock cycles per second (on a C64 PAL)
  .const CLOCKS_PER_SEC = CLOCKS_PER_FRAME*FRAMES_PER_SEC
  // Clock cycles used to start & read the cycle clock by calling clock_start() and clock() once. Can be subtracted when calculating the number of cycles used by a routine.
  // To make precise cycle measurements interrupts and the display must be disabled so neither steals any cycles from the code.
  .const CLOCKS_PER_INIT = $12
  // Timer Control - Start/stop timer (0:stop, 1: start)
  .const CIA_TIMER_CONTROL_START = 1
  // Timer B Control - Timer counts (00:system cycles, 01: CNT pulses, 10: timer A underflow, 11: time A underflow while CNT is high)
  .const CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
  .const COUNT = $4000
  /* Up to what number? */
  .const SQRT_COUNT = $80
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .label D018 = $d018
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // CIA#2 timer A&B as one single 32-bit value
  .label CIA2_TIMER_AB = $dd04
  .label SCREEN = $400
  /* Sqrt of COUNT */
  .label sieve = $1000
  .label print_screen = $400
  // Remainder after unsigned 16-bit division
  .label rem16u = $e
  .label print_char_cursor = $a
  .label print_line_cursor = $c
  .label print_char_cursor_1 = $c
.segment Code
  // main
main: {
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>toD0181_gfx)/4&$f
    .label toD0181_gfx = $1800
    .label __10 = $11
    .label __12 = $17
    .label cyclecount = $11
    .label sec100s = 4
    .label i = $a
    .label sieve_i = 2
    .label j = 6
    .label s = 8
    .label i_1 = 4
    .label __33 = $1b
    // [1] phi from main to main::toD0181 [phi:main->main::toD0181]
  toD0181_from_main:
    jmp toD0181
    // main::toD0181
  toD0181:
    jmp __b14
    // main::@14
  __b14:
    // [2] *D018 = main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    //Show lower case font
    lda #toD0181_return
    sta D018
    // [3] call print_cls 
    // [64] phi from main::@14 to print_cls [phi:main::@14->print_cls]
  print_cls_from___b14:
    jsr print_cls
    // [4] phi from main::@14 to main::@15 [phi:main::@14->main::@15]
  __b15_from___b14:
    jmp __b15
    // main::@15
  __b15:
    // [5] call print_str 
    // [67] phi from main::@15 to print_str [phi:main::@15->print_str]
  print_str_from___b15:
    // [67] phi print_char_cursor#69 = print_screen#0 [phi:main::@15->print_str#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [67] phi print_str::str#11 = main::str [phi:main::@15->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // [6] phi from main::@15 to main::@16 [phi:main::@15->main::@16]
  __b16_from___b15:
    jmp __b16
    // main::@16
  __b16:
    // [7] call print_ln 
    // [75] phi from main::@16 to print_ln [phi:main::@16->print_ln]
  print_ln_from___b16:
    // [75] phi print_line_cursor#23 = print_screen#0 [phi:main::@16->print_ln#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    jsr print_ln
    jmp __b17
    // main::@17
  __b17:
    // [8] print_char_cursor#90 = print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [9] call print_str 
    // [67] phi from main::@17 to print_str [phi:main::@17->print_str]
  print_str_from___b17:
    // [67] phi print_char_cursor#69 = print_char_cursor#90 [phi:main::@17->print_str#0] -- register_copy 
    // [67] phi print_str::str#11 = main::str1 [phi:main::@17->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [10] phi from main::@17 to main::@18 [phi:main::@17->main::@18]
  __b18_from___b17:
    jmp __b18
    // main::@18
  __b18:
    // [11] call print_uint_decimal 
    // [80] phi from main::@18 to print_uint_decimal [phi:main::@18->print_uint_decimal]
  print_uint_decimal_from___b18:
    // [80] phi print_char_cursor#61 = print_char_cursor#1 [phi:main::@18->print_uint_decimal#0] -- register_copy 
    // [80] phi print_uint_decimal::w#3 = COUNT [phi:main::@18->print_uint_decimal#1] -- vwuz1=vwuc1 
    lda #<COUNT
    sta.z print_uint_decimal.w
    lda #>COUNT
    sta.z print_uint_decimal.w+1
    jsr print_uint_decimal
    // [12] phi from main::@18 to main::@19 [phi:main::@18->main::@19]
  __b19_from___b18:
    jmp __b19
    // main::@19
  __b19:
    // [13] call print_ln 
    // [75] phi from main::@19 to print_ln [phi:main::@19->print_ln]
  print_ln_from___b19:
    // [75] phi print_line_cursor#23 = print_line_cursor#0 [phi:main::@19->print_ln#0] -- register_copy 
    jsr print_ln
    // [14] phi from main::@19 to main::@20 [phi:main::@19->main::@20]
  __b20_from___b19:
    jmp __b20
    // main::@20
  __b20:
    // [15] call memset 
  // Fill sieve with zeros
    // [86] phi from main::@20 to memset [phi:main::@20->memset]
  memset_from___b20:
    // [86] phi memset::c#4 = 0 [phi:main::@20->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [86] phi memset::str#3 = (void*)sieve [phi:main::@20->memset#1] -- pvoz1=pvoc1 
    lda #<sieve
    sta.z memset.str
    lda #>sieve
    sta.z memset.str+1
    // [86] phi memset::num#2 = COUNT [phi:main::@20->memset#2] -- vwuz1=vwuc1 
    lda #<COUNT
    sta.z memset.num
    lda #>COUNT
    sta.z memset.num+1
    jsr memset
    // [16] phi from main::@20 to main::@21 [phi:main::@20->main::@21]
  __b21_from___b20:
    jmp __b21
    // main::@21
  __b21:
    // [17] call clock_start 
    jsr clock_start
    // [18] phi from main::@21 to main::@1 [phi:main::@21->main::@1]
  __b1_from___b21:
    // [18] phi main::sieve_i#2 = sieve+2 [phi:main::@21->main::@1#0] -- pbuz1=pbuc1 
    lda #<sieve+2
    sta.z sieve_i
    lda #>sieve+2
    sta.z sieve_i+1
    // [18] phi main::i#12 = 2 [phi:main::@21->main::@1#1] -- vwuz1=vwuc1 
    lda #<2
    sta.z i
    lda #>2
    sta.z i+1
    jmp __b1
    // main::@1
  __b1:
    // [19] if(main::i#12<SQRT_COUNT) goto main::@2 -- vwuz1_lt_vbuc1_then_la1 
    lda.z i+1
    bne !+
    lda.z i
    cmp #SQRT_COUNT
    bcc __b2
  !:
    // [20] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    jmp __b3
    // main::@3
  __b3:
    // [21] call clock 
    jsr clock
    // [22] clock::return#2 = clock::return#0
    jmp __b22
    // main::@22
  __b22:
    // [23] main::$10 = clock::return#2
    // [24] main::cyclecount#0 = main::$10 - CLOCKS_PER_INIT -- vduz1=vduz1_minus_vduc1 
    lda.z cyclecount
    sec
    sbc #<CLOCKS_PER_INIT
    sta.z cyclecount
    lda.z cyclecount+1
    sbc #>CLOCKS_PER_INIT
    sta.z cyclecount+1
    lda.z cyclecount+2
    sbc #<CLOCKS_PER_INIT>>$10
    sta.z cyclecount+2
    lda.z cyclecount+3
    sbc #>CLOCKS_PER_INIT>>$10
    sta.z cyclecount+3
    // [25] div32u16u::dividend#0 = main::cyclecount#0
    // [26] call div32u16u 
    jsr div32u16u
    // [27] div32u16u::return#2 = div32u16u::return#0
    jmp __b23
    // main::@23
  __b23:
    // [28] main::$12 = div32u16u::return#2
    // [29] main::sec100s#0 = (word)main::$12 -- vwuz1=_word_vduz2 
    lda.z __12
    sta.z sec100s
    lda.z __12+1
    sta.z sec100s+1
    // [30] print_char_cursor#91 = print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [31] call print_str 
    // [67] phi from main::@23 to print_str [phi:main::@23->print_str]
  print_str_from___b23:
    // [67] phi print_char_cursor#69 = print_char_cursor#91 [phi:main::@23->print_str#0] -- register_copy 
    // [67] phi print_str::str#11 = main::str2 [phi:main::@23->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    jmp __b24
    // main::@24
  __b24:
    // [32] print_uint_decimal::w#1 = main::sec100s#0
    // [33] call print_uint_decimal 
    // [80] phi from main::@24 to print_uint_decimal [phi:main::@24->print_uint_decimal]
  print_uint_decimal_from___b24:
    // [80] phi print_char_cursor#61 = print_char_cursor#1 [phi:main::@24->print_uint_decimal#0] -- register_copy 
    // [80] phi print_uint_decimal::w#3 = print_uint_decimal::w#1 [phi:main::@24->print_uint_decimal#1] -- register_copy 
    jsr print_uint_decimal
    // [34] phi from main::@24 to main::@25 [phi:main::@24->main::@25]
  __b25_from___b24:
    jmp __b25
    // main::@25
  __b25:
    // [35] call print_str 
    // [67] phi from main::@25 to print_str [phi:main::@25->print_str]
  print_str_from___b25:
    // [67] phi print_char_cursor#69 = print_char_cursor#1 [phi:main::@25->print_str#0] -- register_copy 
    // [67] phi print_str::str#11 = main::str3 [phi:main::@25->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    jmp __b26
    // main::@26
  __b26:
    // [36] print_ulong_decimal::w#0 = main::cyclecount#0
    // [37] call print_ulong_decimal 
    jsr print_ulong_decimal
    // [38] phi from main::@26 to main::@27 [phi:main::@26->main::@27]
  __b27_from___b26:
    jmp __b27
    // main::@27
  __b27:
    // [39] call print_ln 
    // [75] phi from main::@27 to print_ln [phi:main::@27->print_ln]
  print_ln_from___b27:
    // [75] phi print_line_cursor#23 = print_line_cursor#0 [phi:main::@27->print_ln#0] -- register_copy 
    jsr print_ln
    // [40] phi from main::@27 to main::@8 [phi:main::@27->main::@8]
  __b8_from___b27:
    // [40] phi print_char_cursor#65 = print_line_cursor#0 [phi:main::@27->main::@8#0] -- register_copy 
    // [40] phi main::i#10 = 2 [phi:main::@27->main::@8#1] -- vwuz1=vbuc1 
    lda #<2
    sta.z i_1
    lda #>2
    sta.z i_1+1
    jmp __b8
    // main::@8
  __b8:
    // [41] if(main::i#10<$514) goto main::@9 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i_1+1
    cmp #>$514
    bcc __b9
    bne !+
    lda.z i_1
    cmp #<$514
    bcc __b9
  !:
    jmp __b10
    // main::@10
  __b10:
    // [42] print_char_cursor#89 = print_char_cursor#65 -- pbuz1=pbuz2 
    lda.z print_char_cursor_1
    sta.z print_char_cursor
    lda.z print_char_cursor_1+1
    sta.z print_char_cursor+1
    // [43] call print_str 
    // [67] phi from main::@10 to print_str [phi:main::@10->print_str]
  print_str_from___b10:
    // [67] phi print_char_cursor#69 = print_char_cursor#89 [phi:main::@10->print_str#0] -- register_copy 
    // [67] phi print_str::str#11 = main::str4 [phi:main::@10->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta.z print_str.str
    lda #>str4
    sta.z print_str.str+1
    jsr print_str
    jmp __b13
    // main::@13
  __b13:
    // [44] *(SCREEN+$3e7) = ++ *(SCREEN+$3e7) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SCREEN+$3e7
    jmp __b13
    // main::@9
  __b9:
    // [45] main::$33 = sieve + main::i#10 -- pbuz1=pbuc1_plus_vwuz2 
    clc
    lda.z i_1
    adc #<sieve
    sta.z __33
    lda.z i_1+1
    adc #>sieve
    sta.z __33+1
    // [46] if(0!=*main::$33) goto main::@11 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (__33),y
    cmp #0
    bne __b11_from___b9
    jmp __b12
    // main::@12
  __b12:
    // [47] print_uint_decimal::w#2 = main::i#10
    // [48] print_char_cursor#97 = print_char_cursor#65 -- pbuz1=pbuz2 
    lda.z print_char_cursor_1
    sta.z print_char_cursor
    lda.z print_char_cursor_1+1
    sta.z print_char_cursor+1
    // [49] call print_uint_decimal 
    // [80] phi from main::@12 to print_uint_decimal [phi:main::@12->print_uint_decimal]
  print_uint_decimal_from___b12:
    // [80] phi print_char_cursor#61 = print_char_cursor#97 [phi:main::@12->print_uint_decimal#0] -- register_copy 
    // [80] phi print_uint_decimal::w#3 = print_uint_decimal::w#2 [phi:main::@12->print_uint_decimal#1] -- register_copy 
    jsr print_uint_decimal
    // [50] phi from main::@12 to main::@28 [phi:main::@12->main::@28]
  __b28_from___b12:
    jmp __b28
    // main::@28
  __b28:
    // [51] call print_char 
    // [119] phi from main::@28 to print_char [phi:main::@28->print_char]
  print_char_from___b28:
    // [119] phi print_char::ch#2 = ' ' [phi:main::@28->print_char#0] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [52] phi from main::@28 main::@9 to main::@11 [phi:main::@28/main::@9->main::@11]
  __b11_from___b28:
  __b11_from___b9:
    // [52] phi print_char_cursor#79 = print_char_cursor#39 [phi:main::@28/main::@9->main::@11#0] -- register_copy 
    jmp __b11
    // main::@11
  __b11:
    // [53] main::i#3 = ++ main::i#10 -- vwuz1=_inc_vwuz1 
    inc.z i_1
    bne !+
    inc.z i_1+1
  !:
    // [40] phi from main::@11 to main::@8 [phi:main::@11->main::@8]
  __b8_from___b11:
    // [40] phi print_char_cursor#65 = print_char_cursor#79 [phi:main::@11->main::@8#0] -- register_copy 
    // [40] phi main::i#10 = main::i#3 [phi:main::@11->main::@8#1] -- register_copy 
    jmp __b8
    // main::@2
  __b2:
    // [54] if(0!=*main::sieve_i#2) goto main::@4 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (sieve_i),y
    cmp #0
    bne __b4
    jmp __b7
    // main::@7
  __b7:
    // [55] main::j#0 = main::i#12 << 1 -- vwuz1=vwuz2_rol_1 
    lda.z i
    asl
    sta.z j
    lda.z i+1
    rol
    sta.z j+1
    // [56] main::s#0 = sieve + main::j#0 -- pbuz1=pbuc1_plus_vwuz2 
    clc
    lda.z j
    adc #<sieve
    sta.z s
    lda.z j+1
    adc #>sieve
    sta.z s+1
    // [57] phi from main::@6 main::@7 to main::@5 [phi:main::@6/main::@7->main::@5]
  __b5_from___b6:
  __b5_from___b7:
    // [57] phi main::s#2 = main::s#1 [phi:main::@6/main::@7->main::@5#0] -- register_copy 
    // [57] phi main::j#2 = main::j#1 [phi:main::@6/main::@7->main::@5#1] -- register_copy 
    jmp __b5
    // main::@5
  __b5:
    // [58] if(main::j#2<COUNT) goto main::@6 -- vwuz1_lt_vwuc1_then_la1 
    lda.z j+1
    cmp #>COUNT
    bcc __b6
    bne !+
    lda.z j
    cmp #<COUNT
    bcc __b6
  !:
    jmp __b4
    // main::@4
  __b4:
    // [59] main::i#2 = ++ main::i#12 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [60] main::sieve_i#1 = ++ main::sieve_i#2 -- pbuz1=_inc_pbuz1 
    inc.z sieve_i
    bne !+
    inc.z sieve_i+1
  !:
    // [18] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [18] phi main::sieve_i#2 = main::sieve_i#1 [phi:main::@4->main::@1#0] -- register_copy 
    // [18] phi main::i#12 = main::i#2 [phi:main::@4->main::@1#1] -- register_copy 
    jmp __b1
    // main::@6
  __b6:
    // [61] *main::s#2 = 1 -- _deref_pbuz1=vbuc1 
    lda #1
    ldy #0
    sta (s),y
    // [62] main::s#1 = main::s#2 + main::i#12 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z s
    clc
    adc.z i
    sta.z s
    lda.z s+1
    adc.z i+1
    sta.z s+1
    // [63] main::j#1 = main::j#2 + main::i#12 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z j
    clc
    adc.z i
    sta.z j
    lda.z j+1
    adc.z i+1
    sta.z j+1
    jmp __b5_from___b6
  .segment Data
    str: .text "Sieve benchmark - calculating primes"
    .byte 0
    str1: .text "between 2 and "
    .byte 0
    str2: .text "100ths seconds used: "
    .byte 0
    str3: .text " cycles: "
    .byte 0
    str4: .text "..."
    .byte 0
}
.segment Code
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [65] call memset 
    // [86] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    // [86] phi memset::c#4 = ' ' [phi:print_cls->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [86] phi memset::str#3 = (void*)print_screen#0 [phi:print_cls->memset#1] -- pvoz1=pvoc1 
    lda #<print_screen
    sta.z memset.str
    lda #>print_screen
    sta.z memset.str+1
    // [86] phi memset::num#2 = $3e8 [phi:print_cls->memset#2] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z memset.num
    lda #>$3e8
    sta.z memset.num+1
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [66] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($e) str)
print_str: {
    .label str = $e
    // [68] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
  __b1_from_print_str:
  __b1_from___b3:
    // [68] phi print_char_cursor#1 = print_char_cursor#69 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [68] phi print_str::str#10 = print_str::str#11 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [69] if(0!=*print_str::str#10) goto print_str::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [70] return 
    rts
    // print_str::@2
  __b2:
    // [71] print_char::ch#0 = *print_str::str#10 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [72] call print_char 
    // [119] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [119] phi print_char::ch#2 = print_char::ch#0 [phi:print_str::@2->print_char#0] -- register_copy 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [73] print_str::str#0 = ++ print_str::str#10 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [74] print_char_cursor#96 = print_char_cursor#39 -- pbuz1=pbuz2 
    lda.z print_char_cursor_1
    sta.z print_char_cursor
    lda.z print_char_cursor_1+1
    sta.z print_char_cursor+1
    jmp __b1_from___b3
}
  // print_ln
// Print a newline
print_ln: {
    // [76] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [76] phi print_line_cursor#12 = print_line_cursor#23 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [77] print_line_cursor#0 = print_line_cursor#12 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [78] if(print_line_cursor#0<print_char_cursor#1) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [79] return 
    rts
}
  // print_uint_decimal
// Print a unsigned int as DECIMAL
// print_uint_decimal(word zp(4) w)
print_uint_decimal: {
    .label w = 4
    // [81] utoa::value#0 = print_uint_decimal::w#3 -- vwuz1=vwuz2 
    lda.z w
    sta.z utoa.value
    lda.z w+1
    sta.z utoa.value+1
    // [82] call utoa 
    // [123] phi from print_uint_decimal to utoa [phi:print_uint_decimal->utoa]
  utoa_from_print_uint_decimal:
    jsr utoa
    // [83] phi from print_uint_decimal to print_uint_decimal::@1 [phi:print_uint_decimal->print_uint_decimal::@1]
  __b1_from_print_uint_decimal:
    jmp __b1
    // print_uint_decimal::@1
  __b1:
    // [84] call print_str 
    // [67] phi from print_uint_decimal::@1 to print_str [phi:print_uint_decimal::@1->print_str]
  print_str_from___b1:
    // [67] phi print_char_cursor#69 = print_char_cursor#61 [phi:print_uint_decimal::@1->print_str#0] -- register_copy 
    // [67] phi print_str::str#11 = decimal_digits [phi:print_uint_decimal::@1->print_str#1] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z print_str.str
    lda #>decimal_digits
    sta.z print_str.str+1
    jsr print_str
    jmp __breturn
    // print_uint_decimal::@return
  __breturn:
    // [85] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($15) str, byte register(X) c, word zp($e) num)
memset: {
    .label end = $e
    .label dst = $15
    .label num = $e
    .label str = $15
    // [87] if(memset::num#2<=0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [88] memset::end#0 = (byte*)memset::str#3 + memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [89] memset::dst#4 = (byte*)memset::str#3
    // [90] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [90] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [91] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [92] return 
    rts
    // memset::@3
  __b3:
    // [93] *memset::dst#2 = memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [94] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // clock_start
// Reset & start the processor clock time. The value can be read using clock().
// This uses CIA #2 Timer A+B on the C64
clock_start: {
    // [95] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = 0 -- _deref_pbuc1=vbuc2 
    // Setup CIA#2 timer A to count (down) CPU cycles
    lda #0
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // [96] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [97] *CIA2_TIMER_AB = $ffffffff -- _deref_pduc1=vduc2 
    lda #<$ffffffff
    sta CIA2_TIMER_AB
    lda #>$ffffffff
    sta CIA2_TIMER_AB+1
    lda #<$ffffffff>>$10
    sta CIA2_TIMER_AB+2
    lda #>$ffffffff>>$10
    sta CIA2_TIMER_AB+3
    // [98] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [99] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    jmp __breturn
    // clock_start::@return
  __breturn:
    // [100] return 
    rts
}
  // clock
// Returns the processor clock time used since the beginning of an implementation defined era (normally the beginning of the program).
// This uses CIA #2 Timer A+B on the C64, and must be initialized using clock_start()
clock: {
    .label return = $11
    // [101] clock::return#0 = $ffffffff - *CIA2_TIMER_AB -- vduz1=vduc1_minus__deref_pduc2 
    lda #<$ffffffff
    sec
    sbc CIA2_TIMER_AB
    sta.z return
    lda #>$ffffffff
    sbc CIA2_TIMER_AB+1
    sta.z return+1
    lda #<$ffffffff>>$10
    sbc CIA2_TIMER_AB+2
    sta.z return+2
    lda #>$ffffffff>>$10
    sbc CIA2_TIMER_AB+3
    sta.z return+3
    jmp __breturn
    // clock::@return
  __breturn:
    // [102] return 
    rts
}
  // div32u16u
// Divide unsigned 32-bit unsigned long dividend with a 16-bit unsigned int divisor
// The 16-bit unsigned int remainder can be found in rem16u after the division
// div32u16u(dword zp($11) dividend)
div32u16u: {
    .label divisor = CLOCKS_PER_SEC/$64
    .label quotient_hi = $1d
    .label quotient_lo = $1b
    .label return = $17
    .label dividend = $11
    // [103] divr16u::dividend#1 = _word1_ div32u16u::dividend#0 -- vwuz1=_word1_vduz2 
    lda.z dividend+2
    sta.z divr16u.dividend
    lda.z dividend+3
    sta.z divr16u.dividend+1
    // [104] call divr16u 
    // [144] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
  divr16u_from_div32u16u:
    // [144] phi divr16u::dividend#5 = divr16u::dividend#1 [phi:div32u16u->divr16u#0] -- register_copy 
    // [144] phi divr16u::rem#10 = 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z divr16u.rem
    lda #>0
    sta.z divr16u.rem+1
    jsr divr16u
    // [105] divr16u::return#2 = divr16u::return#0
    jmp __b1
    // div32u16u::@1
  __b1:
    // [106] div32u16u::quotient_hi#0 = divr16u::return#2 -- vwuz1=vwuz2 
    lda.z divr16u.return
    sta.z quotient_hi
    lda.z divr16u.return+1
    sta.z quotient_hi+1
    // [107] divr16u::dividend#2 = _word0_ div32u16u::dividend#0 -- vwuz1=_word0_vduz2 
    lda.z dividend
    sta.z divr16u.dividend
    lda.z dividend+1
    sta.z divr16u.dividend+1
    // [108] divr16u::rem#4 = rem16u#0
    // [109] call divr16u 
    // [144] phi from div32u16u::@1 to divr16u [phi:div32u16u::@1->divr16u]
  divr16u_from___b1:
    // [144] phi divr16u::dividend#5 = divr16u::dividend#2 [phi:div32u16u::@1->divr16u#0] -- register_copy 
    // [144] phi divr16u::rem#10 = divr16u::rem#4 [phi:div32u16u::@1->divr16u#1] -- register_copy 
    jsr divr16u
    // [110] divr16u::return#3 = divr16u::return#0
    jmp __b2
    // div32u16u::@2
  __b2:
    // [111] div32u16u::quotient_lo#0 = divr16u::return#3
    // [112] div32u16u::return#0 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda.z quotient_hi
    sta.z return+2
    lda.z quotient_hi+1
    sta.z return+3
    lda.z quotient_lo
    sta.z return
    lda.z quotient_lo+1
    sta.z return+1
    jmp __breturn
    // div32u16u::@return
  __breturn:
    // [113] return 
    rts
}
  // print_ulong_decimal
// Print a unsigned long as DECIMAL
// print_ulong_decimal(dword zp($11) w)
print_ulong_decimal: {
    .label w = $11
    // [114] ultoa::value#0 = print_ulong_decimal::w#0
    // [115] call ultoa 
    // [162] phi from print_ulong_decimal to ultoa [phi:print_ulong_decimal->ultoa]
  ultoa_from_print_ulong_decimal:
    jsr ultoa
    // [116] phi from print_ulong_decimal to print_ulong_decimal::@1 [phi:print_ulong_decimal->print_ulong_decimal::@1]
  __b1_from_print_ulong_decimal:
    jmp __b1
    // print_ulong_decimal::@1
  __b1:
    // [117] call print_str 
    // [67] phi from print_ulong_decimal::@1 to print_str [phi:print_ulong_decimal::@1->print_str]
  print_str_from___b1:
    // [67] phi print_char_cursor#69 = print_char_cursor#1 [phi:print_ulong_decimal::@1->print_str#0] -- register_copy 
    // [67] phi print_str::str#11 = decimal_digits_long [phi:print_ulong_decimal::@1->print_str#1] -- pbuz1=pbuc1 
    lda #<decimal_digits_long
    sta.z print_str.str
    lda #>decimal_digits_long
    sta.z print_str.str+1
    jsr print_str
    jmp __breturn
    // print_ulong_decimal::@return
  __breturn:
    // [118] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [120] *print_char_cursor#1 = print_char::ch#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [121] print_char_cursor#39 = ++ print_char_cursor#1 -- pbuz1=_inc_pbuz2 
    clc
    lda.z print_char_cursor
    adc #1
    sta.z print_char_cursor_1
    lda.z print_char_cursor+1
    adc #0
    sta.z print_char_cursor_1+1
    jmp __breturn
    // print_char::@return
  __breturn:
    // [122] return 
    rts
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($15) value, byte* zp($e) buffer)
utoa: {
    .const max_digits = 5
    .label value = $15
    .label digit_value = $1d
    .label buffer = $e
    .label digit = $10
    // [124] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [124] phi utoa::buffer#11 = decimal_digits [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z buffer
    lda #>decimal_digits
    sta.z buffer+1
    // [124] phi utoa::started#2 = 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [124] phi utoa::value#2 = utoa::value#0 [phi:utoa->utoa::@1#2] -- register_copy 
    // [124] phi utoa::digit#2 = 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [125] if(utoa::digit#2<utoa::max_digits#1-1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [126] utoa::$11 = (byte)utoa::value#2 -- vbuxx=_byte_vwuz1 
    ldx.z value
    // [127] *utoa::buffer#11 = DIGITS[utoa::$11] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // [128] utoa::buffer#4 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [129] *utoa::buffer#4 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [130] return 
    rts
    // utoa::@2
  __b2:
    // [131] utoa::$10 = utoa::digit#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [132] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [133] if(0!=utoa::started#2) goto utoa::@5 -- 0_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [134] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [135] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [135] phi utoa::buffer#14 = utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [135] phi utoa::started#4 = utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [135] phi utoa::value#6 = utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [136] utoa::digit#1 = ++ utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [124] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [124] phi utoa::buffer#11 = utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [124] phi utoa::started#2 = utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [124] phi utoa::value#2 = utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [124] phi utoa::digit#2 = utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [137] utoa_append::buffer#0 = utoa::buffer#11
    // [138] utoa_append::value#0 = utoa::value#2
    // [139] utoa_append::sub#0 = utoa::digit_value#0
    // [140] call utoa_append 
    // [183] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [141] utoa_append::return#0 = utoa_append::value#2
    jmp __b6
    // utoa::@6
  __b6:
    // [142] utoa::value#1 = utoa_append::return#0
    // [143] utoa::buffer#5 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [135] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [135] phi utoa::buffer#14 = utoa::buffer#5 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [135] phi utoa::started#4 = 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [135] phi utoa::value#6 = utoa::value#1 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($15) dividend, word zp($e) rem)
divr16u: {
    .label rem = $e
    .label dividend = $15
    .label quotient = $1b
    .label return = $1b
    // [145] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  __b1_from_divr16u:
    // [145] phi divr16u::i#2 = 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [145] phi divr16u::quotient#3 = 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z quotient
    lda #>0
    sta.z quotient+1
    // [145] phi divr16u::dividend#3 = divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [145] phi divr16u::rem#5 = divr16u::rem#10 [phi:divr16u->divr16u::@1#3] -- register_copy 
    jmp __b1
    // [145] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  __b1_from___b3:
    // [145] phi divr16u::i#2 = divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [145] phi divr16u::quotient#3 = divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [145] phi divr16u::dividend#3 = divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [145] phi divr16u::rem#5 = divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp __b1
    // divr16u::@1
  __b1:
    // [146] divr16u::rem#0 = divr16u::rem#5 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // [147] divr16u::$1 = > divr16u::dividend#3 -- vbuaa=_byte1_vwuz1 
    lda.z dividend+1
    // [148] divr16u::$2 = divr16u::$1 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [149] if(divr16u::$2==0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b4
    // divr16u::@4
  __b4:
    // [150] divr16u::rem#1 = divr16u::rem#0 | 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [151] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [151] phi divr16u::rem#6 = divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp __b2
    // divr16u::@2
  __b2:
    // [152] divr16u::dividend#0 = divr16u::dividend#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // [153] divr16u::quotient#1 = divr16u::quotient#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // [154] if(divr16u::rem#6<div32u16u::divisor#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>div32u16u.divisor
    bcc __b3_from___b2
    bne !+
    lda.z rem
    cmp #<div32u16u.divisor
    bcc __b3_from___b2
  !:
    jmp __b5
    // divr16u::@5
  __b5:
    // [155] divr16u::quotient#2 = ++ divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // [156] divr16u::rem#2 = divr16u::rem#6 - div32u16u::divisor#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<div32u16u.divisor
    sta.z rem
    lda.z rem+1
    sbc #>div32u16u.divisor
    sta.z rem+1
    // [157] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [157] phi divr16u::return#0 = divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [157] phi divr16u::rem#11 = divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp __b3
    // divr16u::@3
  __b3:
    // [158] divr16u::i#1 = ++ divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [159] if(divr16u::i#1!=$10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b3
    jmp __b6
    // divr16u::@6
  __b6:
    // [160] rem16u#0 = divr16u::rem#11
    jmp __breturn
    // divr16u::@return
  __breturn:
    // [161] return 
    rts
}
  // ultoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// ultoa(dword zp($11) value, byte* zp($15) buffer)
ultoa: {
    .const max_digits = $a
    .label value = $11
    .label digit_value = $1f
    .label buffer = $15
    .label digit = $10
    // [163] phi from ultoa to ultoa::@1 [phi:ultoa->ultoa::@1]
  __b1_from_ultoa:
    // [163] phi ultoa::buffer#11 = decimal_digits_long [phi:ultoa->ultoa::@1#0] -- pbuz1=pbuc1 
    lda #<decimal_digits_long
    sta.z buffer
    lda #>decimal_digits_long
    sta.z buffer+1
    // [163] phi ultoa::started#2 = 0 [phi:ultoa->ultoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [163] phi ultoa::value#2 = ultoa::value#0 [phi:ultoa->ultoa::@1#2] -- register_copy 
    // [163] phi ultoa::digit#2 = 0 [phi:ultoa->ultoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // ultoa::@1
  __b1:
    // [164] if(ultoa::digit#2<ultoa::max_digits#1-1) goto ultoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // ultoa::@3
  __b3:
    // [165] ultoa::$11 = (byte)ultoa::value#2 -- vbuaa=_byte_vduz1 
    lda.z value
    // [166] *ultoa::buffer#11 = DIGITS[ultoa::$11] -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // [167] ultoa::buffer#4 = ++ ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [168] *ultoa::buffer#4 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa::@return
  __breturn:
    // [169] return 
    rts
    // ultoa::@2
  __b2:
    // [170] ultoa::$10 = ultoa::digit#2 << 2 -- vbuaa=vbuz1_rol_2 
    lda.z digit
    asl
    asl
    // [171] ultoa::digit_value#0 = RADIX_DECIMAL_VALUES_LONG[ultoa::$10] -- vduz1=pduc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES_LONG,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES_LONG+1,y
    sta.z digit_value+1
    lda RADIX_DECIMAL_VALUES_LONG+2,y
    sta.z digit_value+2
    lda RADIX_DECIMAL_VALUES_LONG+3,y
    sta.z digit_value+3
    // [172] if(0!=ultoa::started#2) goto ultoa::@5 -- 0_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    jmp __b7
    // ultoa::@7
  __b7:
    // [173] if(ultoa::value#2>=ultoa::digit_value#0) goto ultoa::@5 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z digit_value+3
    bcc !+
    bne __b5
    lda.z value+2
    cmp.z digit_value+2
    bcc !+
    bne __b5
    lda.z value+1
    cmp.z digit_value+1
    bcc !+
    bne __b5
    lda.z value
    cmp.z digit_value
    bcs __b5
  !:
    // [174] phi from ultoa::@7 to ultoa::@4 [phi:ultoa::@7->ultoa::@4]
  __b4_from___b7:
    // [174] phi ultoa::buffer#14 = ultoa::buffer#11 [phi:ultoa::@7->ultoa::@4#0] -- register_copy 
    // [174] phi ultoa::started#4 = ultoa::started#2 [phi:ultoa::@7->ultoa::@4#1] -- register_copy 
    // [174] phi ultoa::value#6 = ultoa::value#2 [phi:ultoa::@7->ultoa::@4#2] -- register_copy 
    jmp __b4
    // ultoa::@4
  __b4:
    // [175] ultoa::digit#1 = ++ ultoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [163] phi from ultoa::@4 to ultoa::@1 [phi:ultoa::@4->ultoa::@1]
  __b1_from___b4:
    // [163] phi ultoa::buffer#11 = ultoa::buffer#14 [phi:ultoa::@4->ultoa::@1#0] -- register_copy 
    // [163] phi ultoa::started#2 = ultoa::started#4 [phi:ultoa::@4->ultoa::@1#1] -- register_copy 
    // [163] phi ultoa::value#2 = ultoa::value#6 [phi:ultoa::@4->ultoa::@1#2] -- register_copy 
    // [163] phi ultoa::digit#2 = ultoa::digit#1 [phi:ultoa::@4->ultoa::@1#3] -- register_copy 
    jmp __b1
    // ultoa::@5
  __b5:
    // [176] ultoa_append::buffer#0 = ultoa::buffer#11
    // [177] ultoa_append::value#0 = ultoa::value#2
    // [178] ultoa_append::sub#0 = ultoa::digit_value#0
    // [179] call ultoa_append 
    // [190] phi from ultoa::@5 to ultoa_append [phi:ultoa::@5->ultoa_append]
  ultoa_append_from___b5:
    jsr ultoa_append
    // [180] ultoa_append::return#0 = ultoa_append::value#2
    jmp __b6
    // ultoa::@6
  __b6:
    // [181] ultoa::value#1 = ultoa_append::return#0
    // [182] ultoa::buffer#5 = ++ ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [174] phi from ultoa::@6 to ultoa::@4 [phi:ultoa::@6->ultoa::@4]
  __b4_from___b6:
    // [174] phi ultoa::buffer#14 = ultoa::buffer#5 [phi:ultoa::@6->ultoa::@4#0] -- register_copy 
    // [174] phi ultoa::started#4 = 1 [phi:ultoa::@6->ultoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [174] phi ultoa::value#6 = ultoa::value#1 [phi:ultoa::@6->ultoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($e) buffer, word zp($15) value, word zp($1d) sub)
utoa_append: {
    .label buffer = $e
    .label value = $15
    .label sub = $1d
    .label return = $15
    // [184] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [184] phi utoa_append::digit#2 = 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [184] phi utoa_append::value#2 = utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [185] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [186] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [187] return 
    rts
    // utoa_append::@2
  __b2:
    // [188] utoa_append::digit#1 = ++ utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // [189] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [184] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [184] phi utoa_append::digit#2 = utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [184] phi utoa_append::value#2 = utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // ultoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// ultoa_append(byte* zp($15) buffer, dword zp($11) value, dword zp($1f) sub)
ultoa_append: {
    .label buffer = $15
    .label value = $11
    .label sub = $1f
    .label return = $11
    // [191] phi from ultoa_append to ultoa_append::@1 [phi:ultoa_append->ultoa_append::@1]
  __b1_from_ultoa_append:
    // [191] phi ultoa_append::digit#2 = 0 [phi:ultoa_append->ultoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [191] phi ultoa_append::value#2 = ultoa_append::value#0 [phi:ultoa_append->ultoa_append::@1#1] -- register_copy 
    jmp __b1
    // ultoa_append::@1
  __b1:
    // [192] if(ultoa_append::value#2>=ultoa_append::sub#0) goto ultoa_append::@2 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z sub+3
    bcc !+
    bne __b2
    lda.z value+2
    cmp.z sub+2
    bcc !+
    bne __b2
    lda.z value+1
    cmp.z sub+1
    bcc !+
    bne __b2
    lda.z value
    cmp.z sub
    bcs __b2
  !:
    jmp __b3
    // ultoa_append::@3
  __b3:
    // [193] *ultoa_append::buffer#0 = DIGITS[ultoa_append::digit#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa_append::@return
  __breturn:
    // [194] return 
    rts
    // ultoa_append::@2
  __b2:
    // [195] ultoa_append::digit#1 = ++ ultoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // [196] ultoa_append::value#1 = ultoa_append::value#2 - ultoa_append::sub#0 -- vduz1=vduz1_minus_vduz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    lda.z value+2
    sbc.z sub+2
    sta.z value+2
    lda.z value+3
    sbc.z sub+3
    sta.z value+3
    // [191] phi from ultoa_append::@2 to ultoa_append::@1 [phi:ultoa_append::@2->ultoa_append::@1]
  __b1_from___b2:
    // [191] phi ultoa_append::digit#2 = ultoa_append::digit#1 [phi:ultoa_append::@2->ultoa_append::@1#0] -- register_copy 
    // [191] phi ultoa_append::value#2 = ultoa_append::value#1 [phi:ultoa_append::@2->ultoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_LONG: .dword $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a
  // Digits used for storing the decimal unsigned int
  decimal_digits: .fill 6, 0
  // Digits used for storing the decimal unsigned int
  decimal_digits_long: .fill $b, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp toD0181
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b16
Removing instruction jmp __b17
Removing instruction jmp __b18
Removing instruction jmp __b19
Removing instruction jmp __b20
Removing instruction jmp __b21
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b22
Removing instruction jmp __b23
Removing instruction jmp __b24
Removing instruction jmp __b25
Removing instruction jmp __b26
Removing instruction jmp __b27
Removing instruction jmp __b8
Removing instruction jmp __b10
Removing instruction jmp __b13
Removing instruction jmp __b12
Removing instruction jmp __b28
Removing instruction jmp __b11
Removing instruction jmp __b7
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b11_from___b9 with __b11
Replacing label __b5_from___b6 with __b5
Replacing label __b1_from___b3 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from___b3 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b3_from___b2 with __b3
Replacing label __b1_from___b3 with __b1
Removing instruction toD0181_from_main:
Removing instruction toD0181:
Removing instruction __b15_from___b14:
Removing instruction print_str_from___b15:
Removing instruction __b16_from___b15:
Removing instruction print_ln_from___b16:
Removing instruction __b18_from___b17:
Removing instruction print_uint_decimal_from___b18:
Removing instruction __b19_from___b18:
Removing instruction print_ln_from___b19:
Removing instruction __b20_from___b19:
Removing instruction __b21_from___b20:
Removing instruction __b3_from___b1:
Removing instruction print_uint_decimal_from___b24:
Removing instruction __b25_from___b24:
Removing instruction print_str_from___b25:
Removing instruction __b27_from___b26:
Removing instruction print_ln_from___b27:
Removing instruction __b28_from___b12:
Removing instruction print_char_from___b28:
Removing instruction __b11_from___b28:
Removing instruction __b11_from___b9:
Removing instruction __b5_from___b6:
Removing instruction __b5_from___b7:
Removing instruction __b1_from_print_str:
Removing instruction __b1_from___b3:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Removing instruction __b1_from_print_uint_decimal:
Removing instruction print_str_from___b1:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b1_from_print_ulong_decimal:
Removing instruction print_str_from___b1:
Removing instruction __b4_from___b7:
Removing instruction utoa_append_from___b5:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b5:
Removing instruction __breturn:
Removing instruction __b4_from___b7:
Removing instruction ultoa_append_from___b5:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b14:
Removing instruction print_cls_from___b14:
Removing instruction __b15:
Removing instruction __b16:
Removing instruction __b17:
Removing instruction print_str_from___b17:
Removing instruction __b18:
Removing instruction __b19:
Removing instruction __b20:
Removing instruction memset_from___b20:
Removing instruction __b21:
Removing instruction __b1_from___b21:
Removing instruction __b3:
Removing instruction __b22:
Removing instruction __b23:
Removing instruction print_str_from___b23:
Removing instruction __b24:
Removing instruction __b25:
Removing instruction __b26:
Removing instruction __b27:
Removing instruction __b8_from___b27:
Removing instruction __b10:
Removing instruction print_str_from___b10:
Removing instruction __b12:
Removing instruction print_uint_decimal_from___b12:
Removing instruction __b28:
Removing instruction __b8_from___b11:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction print_char_from___b2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction utoa_from_print_uint_decimal:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction divr16u_from_div32u16u:
Removing instruction __b1:
Removing instruction divr16u_from___b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction ultoa_from_print_ulong_decimal:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_utoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1_from_divr16u:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b1_from_ultoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1_from_utoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_ultoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda.z digit_value+1
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Fixing long branch [114] bcc __b2 to bcs

FINAL SYMBOL TABLE
constant struct MOS6526_CIA* const CIA2 = (struct MOS6526_CIA*) 56576
constant dword* const CIA2_TIMER_AB = (dword*) 56580
constant const byte CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
constant const byte CIA_TIMER_CONTROL_START = 1
constant const word CLOCKS_PER_FRAME = $4cc8
constant const dword CLOCKS_PER_INIT = $12
constant const dword CLOCKS_PER_SEC = (dword)CLOCKS_PER_FRAME*FRAMES_PER_SEC
constant const word COUNT = $4000
constant byte* const D018 = (byte*) 53272
constant byte* DIGITS[]  = "0123456789abcdef"z
constant const byte FRAMES_PER_SEC = $3c
constant byte OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
constant byte OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant word* RADIX_DECIMAL_VALUES[]  = { $2710, $3e8, $64, $a }
constant dword* RADIX_DECIMAL_VALUES_LONG[]  = { $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a }
constant byte* const SCREEN = (byte*) 1024
constant const byte SQRT_COUNT = $80
dword clock()
dword clock::return
dword clock::return#0 return zp[4]:17 4.333333333333333
dword clock::return#2 return zp[4]:17 4.0
void clock_start()
constant byte* decimal_digits[6]  = { fill( 6, 0) }
constant byte* decimal_digits_long[$b]  = { fill( $b, 0) }
dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
dword div32u16u::dividend
dword div32u16u::dividend#0 dividend zp[4]:17 4.800000000000001
word div32u16u::divisor
constant word div32u16u::divisor#0 divisor = (word)CLOCKS_PER_SEC/$64
dword div32u16u::quotient
word div32u16u::quotient_hi
word div32u16u::quotient_hi#0 quotient_hi zp[2]:29 3.6666666666666665
word div32u16u::quotient_lo
word div32u16u::quotient_lo#0 quotient_lo zp[2]:27 22.0
dword div32u16u::return
dword div32u16u::return#0 return zp[4]:23 4.333333333333333
dword div32u16u::return#2 return zp[4]:23 4.0
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 reg byte a 2002.0
byte~ divr16u::$2 reg byte a 2002.0
word divr16u::dividend
word divr16u::dividend#0 dividend zp[2]:21 250.25
word divr16u::dividend#1 dividend zp[2]:21 22.0
word divr16u::dividend#2 dividend zp[2]:21 11.0
word divr16u::dividend#3 dividend zp[2]:21 443.42857142857144
word divr16u::dividend#5 dividend zp[2]:21 123.0
word divr16u::divisor
byte divr16u::i
byte divr16u::i#1 reg byte x 1501.5
byte divr16u::i#2 reg byte x 154.0
word divr16u::quotient
word divr16u::quotient#1 quotient zp[2]:27 1501.5
word divr16u::quotient#2 quotient zp[2]:27 1001.0
word divr16u::quotient#3 quotient zp[2]:27 250.25
word divr16u::rem
word divr16u::rem#0 rem zp[2]:14 750.75
word divr16u::rem#1 rem zp[2]:14 2002.0
word divr16u::rem#10 rem zp[2]:14 112.0
word divr16u::rem#11 rem zp[2]:14 1034.6666666666667
word divr16u::rem#2 rem zp[2]:14 2002.0
word divr16u::rem#4 rem zp[2]:14 22.0
word divr16u::rem#5 rem zp[2]:14 2103.0
word divr16u::rem#6 rem zp[2]:14 1001.0
word divr16u::return
word divr16u::return#0 return zp[2]:27 432.1428571428571
word divr16u::return#2 return zp[2]:27 22.0
word divr16u::return#3 return zp[2]:27 22.0
void main()
dword~ main::$10 zp[4]:17 4.0
dword~ main::$12 zp[4]:23 2.0
byte*~ main::$33 zp[2]:27 22.0
dword main::cyclecount
dword main::cyclecount#0 cyclecount zp[4]:17 0.5
word main::i
word main::i#10 i_1 zp[2]:4 5.5
word main::i#12 i zp[2]:10 24.6
word main::i#2 i zp[2]:10 11.0
word main::i#3 i_1 zp[2]:4 22.0
word main::j
word main::j#0 j zp[2]:6 16.5
word main::j#1 j zp[2]:6 202.0
word main::j#2 j zp[2]:6 78.5
byte* main::s
byte* main::s#0 s zp[2]:8 22.0
byte* main::s#1 s zp[2]:8 101.0
byte* main::s#2 s zp[2]:8 104.66666666666666
word main::sec100s
word main::sec100s#0 sec100s zp[2]:4 1.3333333333333333
byte* main::sieve_i
byte* main::sieve_i#1 sieve_i zp[2]:2 22.0
byte* main::sieve_i#2 sieve_i zp[2]:2 3.0
constant byte* main::str[$25]  = "Sieve benchmark - calculating primes"
constant byte* main::str1[$f]  = "between 2 and "
constant byte* main::str2[$16]  = "100ths seconds used: "
constant byte* main::str3[$a]  = " cycles: "
constant byte* main::str4[4]  = "..."
byte* main::toD0181_gfx
constant byte* main::toD0181_gfx#0 toD0181_gfx = (byte*) 6144
byte main::toD0181_return
constant byte main::toD0181_return#0 toD0181_return = >(word)SCREEN&$3fff*4|>(word)main::toD0181_gfx#0/4&$f
byte* main::toD0181_screen
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#4 reg byte x 125.125
byte* memset::dst
byte* memset::dst#1 dst zp[2]:21 2002.0
byte* memset::dst#2 dst zp[2]:21 1368.3333333333335
byte* memset::dst#4 dst zp[2]:21 202.0
byte* memset::end
byte* memset::end#0 end zp[2]:14 183.66666666666669
word memset::num
word memset::num#2 num zp[2]:14 101.0
void* memset::return
void* memset::str
void* memset::str#3 str zp[2]:21
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 200002.0
byte print_char::ch#2 reg byte a 1100002.0
byte* print_char_cursor
byte* print_char_cursor#1 print_char_cursor zp[2]:10 63670.36363636364
byte* print_char_cursor#39 print_char_cursor_1 zp[2]:12 220002.6
byte* print_char_cursor#61 print_char_cursor zp[2]:10 29.0
byte* print_char_cursor#65 print_char_cursor_1 zp[2]:12 7.4
byte* print_char_cursor#69 print_char_cursor zp[2]:10 1121.0
byte* print_char_cursor#79 print_char_cursor_1 zp[2]:12 16.5
byte* print_char_cursor#89 print_char_cursor zp[2]:10 4.0
byte* print_char_cursor#90 print_char_cursor zp[2]:10 4.0
byte* print_char_cursor#91 print_char_cursor zp[2]:10 4.0
byte* print_char_cursor#96 print_char_cursor zp[2]:10 200002.0
byte* print_char_cursor#97 print_char_cursor zp[2]:10 22.0
void print_cls()
byte* print_line_cursor
byte* print_line_cursor#0 print_line_cursor zp[2]:12 6.804347826086957
byte* print_line_cursor#12 print_line_cursor zp[2]:12 213.0
byte* print_line_cursor#23 print_line_cursor zp[2]:12 15.0
void print_ln()
byte* print_screen
constant byte* print_screen#0 print_screen = (byte*) 1024
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 str zp[2]:14 100001.0
byte* print_str::str#10 str zp[2]:14 100251.25
byte* print_str::str#11 str zp[2]:14 1001.0
void print_uint_decimal(word print_uint_decimal::w)
word print_uint_decimal::w
word print_uint_decimal::w#1 w zp[2]:4 4.0
word print_uint_decimal::w#2 w zp[2]:4 11.0
word print_uint_decimal::w#3 w zp[2]:4 114.0
void print_ulong_decimal(dword print_ulong_decimal::w)
dword print_ulong_decimal::w
dword print_ulong_decimal::w#0 w zp[4]:17 13.0
word rem16u
word rem16u#0 rem16u zp[2]:14 18.666666666666664
constant byte* sieve = (byte*) 4096
void ultoa(dword ultoa::value , byte* ultoa::buffer , byte ultoa::radix)
byte~ ultoa::$10 reg byte a 2002.0
byte~ ultoa::$11 reg byte a 202.0
byte* ultoa::buffer
byte* ultoa::buffer#11 buffer zp[2]:21 300.42857142857144
byte* ultoa::buffer#14 buffer zp[2]:21 1501.5
byte* ultoa::buffer#4 buffer zp[2]:21 202.0
byte* ultoa::buffer#5 buffer zp[2]:21 2002.0
byte ultoa::digit
byte ultoa::digit#1 digit zp[1]:16 2002.0
byte ultoa::digit#2 digit zp[1]:16 286.0
dword ultoa::digit_value
dword ultoa::digit_value#0 digit_value zp[4]:31 600.5999999999999
dword* ultoa::digit_values
byte ultoa::max_digits
constant byte ultoa::max_digits#1 max_digits = $a
byte ultoa::radix
byte ultoa::started
byte ultoa::started#2 reg byte x 500.5
byte ultoa::started#4 reg byte x 1001.0
dword ultoa::value
dword ultoa::value#0 value zp[4]:17 56.0
dword ultoa::value#1 value zp[4]:17 1001.0
dword ultoa::value#2 value zp[4]:17 586.4285714285714
dword ultoa::value#6 value zp[4]:17 1501.5
dword ultoa_append(byte* ultoa_append::buffer , dword ultoa_append::value , dword ultoa_append::sub)
byte* ultoa_append::buffer
byte* ultoa_append::buffer#0 buffer zp[2]:21 1375.25
byte ultoa_append::digit
byte ultoa_append::digit#1 reg byte x 1000001.0
byte ultoa_append::digit#2 reg byte x 1005001.5
dword ultoa_append::return
dword ultoa_append::return#0 return zp[4]:17 2002.0
dword ultoa_append::sub
dword ultoa_append::sub#0 sub zp[4]:31 333500.5
dword ultoa_append::value
dword ultoa_append::value#0 value zp[4]:17 3667.333333333333
dword ultoa_append::value#1 value zp[4]:17 2000002.0
dword ultoa_append::value#2 value zp[4]:17 501834.16666666674
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
byte~ utoa::$10 reg byte a 200002.0
byte~ utoa::$11 reg byte x 2002.0
byte* utoa::buffer
byte* utoa::buffer#11 buffer zp[2]:14 28714.714285714286
byte* utoa::buffer#14 buffer zp[2]:14 150001.5
byte* utoa::buffer#4 buffer zp[2]:14 2002.0
byte* utoa::buffer#5 buffer zp[2]:14 200002.0
byte utoa::digit
byte utoa::digit#1 digit zp[1]:16 200002.0
byte utoa::digit#2 digit zp[1]:16 28571.714285714286
word utoa::digit_value
word utoa::digit_value#0 digit_value zp[2]:29 60000.600000000006
word* utoa::digit_values
byte utoa::max_digits
constant byte utoa::max_digits#1 max_digits = 5
byte utoa::radix
byte utoa::started
byte utoa::started#2 reg byte x 50000.5
byte utoa::started#4 reg byte x 100001.0
word utoa::value
word utoa::value#0 value zp[2]:21 551.0
word utoa::value#1 value zp[2]:21 100001.0
word utoa::value#2 value zp[2]:21 57286.42857142857
word utoa::value#6 value zp[2]:21 150001.5
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
byte* utoa_append::buffer
byte* utoa_append::buffer#0 buffer zp[2]:14 137500.25
byte utoa_append::digit
byte utoa_append::digit#1 reg byte x 1.000000001E9
byte utoa_append::digit#2 reg byte x 1.0005000015E9
word utoa_append::return
word utoa_append::return#0 return zp[2]:21 200002.0
word utoa_append::sub
word utoa_append::sub#0 sub zp[2]:29 3.333500005E8
word utoa_append::value
word utoa_append::value#0 value zp[2]:21 366667.3333333334
word utoa_append::value#1 value zp[2]:21 2.000000002E9
word utoa_append::value#2 value zp[2]:21 5.0018333416666675E8

zp[2]:2 [ main::sieve_i#2 main::sieve_i#1 ]
zp[2]:4 [ main::i#10 main::i#3 print_uint_decimal::w#3 print_uint_decimal::w#2 print_uint_decimal::w#1 main::sec100s#0 ]
zp[2]:6 [ main::j#2 main::j#1 main::j#0 ]
zp[2]:8 [ main::s#2 main::s#1 main::s#0 ]
zp[2]:10 [ print_char_cursor#69 print_char_cursor#89 print_char_cursor#90 print_char_cursor#91 print_char_cursor#1 print_char_cursor#61 print_char_cursor#96 print_char_cursor#97 main::i#12 main::i#2 ]
zp[2]:12 [ print_line_cursor#12 print_line_cursor#23 print_char_cursor#65 print_char_cursor#79 print_line_cursor#0 print_char_cursor#39 ]
reg byte x [ memset::c#4 ]
reg byte a [ print_char::ch#2 print_char::ch#0 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
zp[2]:14 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 utoa::buffer#4 utoa_append::buffer#0 memset::num#2 memset::end#0 print_str::str#10 print_str::str#11 print_str::str#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[1]:16 [ ultoa::digit#2 ultoa::digit#1 utoa::digit#2 utoa::digit#1 ]
zp[4]:17 [ ultoa::value#2 ultoa::value#6 ultoa::value#0 ultoa::value#1 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 print_ulong_decimal::w#0 ultoa_append::return#0 main::cyclecount#0 div32u16u::dividend#0 clock::return#2 main::$10 clock::return#0 ]
reg byte x [ ultoa::started#2 ultoa::started#4 ]
zp[2]:21 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#5 ultoa::buffer#4 ultoa_append::buffer#0 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
reg byte x [ ultoa_append::digit#2 ultoa_append::digit#1 ]
zp[4]:23 [ div32u16u::return#2 main::$12 div32u16u::return#0 ]
zp[2]:27 [ main::$33 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ]
reg byte x [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:29 [ utoa::digit_value#0 utoa_append::sub#0 div32u16u::quotient_hi#0 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ ultoa::$11 ]
reg byte a [ ultoa::$10 ]
zp[4]:31 [ ultoa::digit_value#0 ultoa_append::sub#0 ]


FINAL ASSEMBLER
Score: 82320

  // File Comments
// C standard library string.h
// Functions to manipulate C strings and arrays.
  // Upstart
  // Commodore 64 PRG executable file
.file [name="sieve.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  // Clock cycles per frame (on a C64 PAL)
  .const CLOCKS_PER_FRAME = $4cc8
  // Frames per second (on a C64 PAL)
  .const FRAMES_PER_SEC = $3c
  // Clock cycles per second (on a C64 PAL)
  .const CLOCKS_PER_SEC = CLOCKS_PER_FRAME*FRAMES_PER_SEC
  // Clock cycles used to start & read the cycle clock by calling clock_start() and clock() once. Can be subtracted when calculating the number of cycles used by a routine.
  // To make precise cycle measurements interrupts and the display must be disabled so neither steals any cycles from the code.
  .const CLOCKS_PER_INIT = $12
  // Timer Control - Start/stop timer (0:stop, 1: start)
  .const CIA_TIMER_CONTROL_START = 1
  // Timer B Control - Timer counts (00:system cycles, 01: CNT pulses, 10: timer A underflow, 11: time A underflow while CNT is high)
  .const CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
  .const COUNT = $4000
  /* Up to what number? */
  .const SQRT_COUNT = $80
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .label D018 = $d018
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // CIA#2 timer A&B as one single 32-bit value
  .label CIA2_TIMER_AB = $dd04
  .label SCREEN = $400
  /* Sqrt of COUNT */
  .label sieve = $1000
  .label print_screen = $400
  // Remainder after unsigned 16-bit division
  .label rem16u = $e
  .label print_char_cursor = $a
  .label print_line_cursor = $c
  .label print_char_cursor_1 = $c
.segment Code
  // main
main: {
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>toD0181_gfx)/4&$f
    .label toD0181_gfx = $1800
    .label __10 = $11
    .label __12 = $17
    .label cyclecount = $11
    .label sec100s = 4
    .label i = $a
    .label sieve_i = 2
    .label j = 6
    .label s = 8
    .label i_1 = 4
    .label __33 = $1b
    // [1] phi from main to main::toD0181 [phi:main->main::toD0181]
    // main::toD0181
    // main::@14
    // *D018 = toD018(SCREEN, (char*)0x1800)
    // [2] *D018 = main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    //Show lower case font
    lda #toD0181_return
    sta D018
    // print_cls()
    // [3] call print_cls 
    // [64] phi from main::@14 to print_cls [phi:main::@14->print_cls]
    jsr print_cls
    // [4] phi from main::@14 to main::@15 [phi:main::@14->main::@15]
    // main::@15
    // print_str("Sieve benchmark - calculating primes")
    // [5] call print_str 
    // [67] phi from main::@15 to print_str [phi:main::@15->print_str]
    // [67] phi print_char_cursor#69 = print_screen#0 [phi:main::@15->print_str#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [67] phi print_str::str#11 = main::str [phi:main::@15->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // [6] phi from main::@15 to main::@16 [phi:main::@15->main::@16]
    // main::@16
    // print_ln()
    // [7] call print_ln 
    // [75] phi from main::@16 to print_ln [phi:main::@16->print_ln]
    // [75] phi print_line_cursor#23 = print_screen#0 [phi:main::@16->print_ln#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    jsr print_ln
    // main::@17
    // [8] print_char_cursor#90 = print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_str("between 2 and ")
    // [9] call print_str 
    // [67] phi from main::@17 to print_str [phi:main::@17->print_str]
    // [67] phi print_char_cursor#69 = print_char_cursor#90 [phi:main::@17->print_str#0] -- register_copy 
    // [67] phi print_str::str#11 = main::str1 [phi:main::@17->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [10] phi from main::@17 to main::@18 [phi:main::@17->main::@18]
    // main::@18
    // print_uint_decimal(COUNT)
    // [11] call print_uint_decimal 
    // [80] phi from main::@18 to print_uint_decimal [phi:main::@18->print_uint_decimal]
    // [80] phi print_char_cursor#61 = print_char_cursor#1 [phi:main::@18->print_uint_decimal#0] -- register_copy 
    // [80] phi print_uint_decimal::w#3 = COUNT [phi:main::@18->print_uint_decimal#1] -- vwuz1=vwuc1 
    lda #<COUNT
    sta.z print_uint_decimal.w
    lda #>COUNT
    sta.z print_uint_decimal.w+1
    jsr print_uint_decimal
    // [12] phi from main::@18 to main::@19 [phi:main::@18->main::@19]
    // main::@19
    // print_ln()
    // [13] call print_ln 
    // [75] phi from main::@19 to print_ln [phi:main::@19->print_ln]
    // [75] phi print_line_cursor#23 = print_line_cursor#0 [phi:main::@19->print_ln#0] -- register_copy 
    jsr print_ln
    // [14] phi from main::@19 to main::@20 [phi:main::@19->main::@20]
    // main::@20
    // memset(sieve, 0, COUNT)
    // [15] call memset 
  // Fill sieve with zeros
    // [86] phi from main::@20 to memset [phi:main::@20->memset]
    // [86] phi memset::c#4 = 0 [phi:main::@20->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [86] phi memset::str#3 = (void*)sieve [phi:main::@20->memset#1] -- pvoz1=pvoc1 
    lda #<sieve
    sta.z memset.str
    lda #>sieve
    sta.z memset.str+1
    // [86] phi memset::num#2 = COUNT [phi:main::@20->memset#2] -- vwuz1=vwuc1 
    lda #<COUNT
    sta.z memset.num
    lda #>COUNT
    sta.z memset.num+1
    jsr memset
    // [16] phi from main::@20 to main::@21 [phi:main::@20->main::@21]
    // main::@21
    // clock_start()
    // [17] call clock_start 
    jsr clock_start
    // [18] phi from main::@21 to main::@1 [phi:main::@21->main::@1]
    // [18] phi main::sieve_i#2 = sieve+2 [phi:main::@21->main::@1#0] -- pbuz1=pbuc1 
    lda #<sieve+2
    sta.z sieve_i
    lda #>sieve+2
    sta.z sieve_i+1
    // [18] phi main::i#12 = 2 [phi:main::@21->main::@1#1] -- vwuz1=vwuc1 
    lda #<2
    sta.z i
    lda #>2
    sta.z i+1
    // main::@1
  __b1:
    // while (i < SQRT_COUNT)
    // [19] if(main::i#12<SQRT_COUNT) goto main::@2 -- vwuz1_lt_vbuc1_then_la1 
    lda.z i+1
    bne !+
    lda.z i
    cmp #SQRT_COUNT
    bcs !__b2+
    jmp __b2
  !__b2:
  !:
    // [20] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // main::@3
    // clock()
    // [21] call clock 
    jsr clock
    // [22] clock::return#2 = clock::return#0
    // main::@22
    // [23] main::$10 = clock::return#2
    // clock_t cyclecount = clock()-CLOCKS_PER_INIT
    // [24] main::cyclecount#0 = main::$10 - CLOCKS_PER_INIT -- vduz1=vduz1_minus_vduc1 
    lda.z cyclecount
    sec
    sbc #<CLOCKS_PER_INIT
    sta.z cyclecount
    lda.z cyclecount+1
    sbc #>CLOCKS_PER_INIT
    sta.z cyclecount+1
    lda.z cyclecount+2
    sbc #<CLOCKS_PER_INIT>>$10
    sta.z cyclecount+2
    lda.z cyclecount+3
    sbc #>CLOCKS_PER_INIT>>$10
    sta.z cyclecount+3
    // div32u16u(cyclecount, (unsigned int)(CLOCKS_PER_SEC/100))
    // [25] div32u16u::dividend#0 = main::cyclecount#0
    // [26] call div32u16u 
    jsr div32u16u
    // [27] div32u16u::return#2 = div32u16u::return#0
    // main::@23
    // [28] main::$12 = div32u16u::return#2
    // unsigned int sec100s = (unsigned int)div32u16u(cyclecount, (unsigned int)(CLOCKS_PER_SEC/100))
    // [29] main::sec100s#0 = (word)main::$12 -- vwuz1=_word_vduz2 
    lda.z __12
    sta.z sec100s
    lda.z __12+1
    sta.z sec100s+1
    // [30] print_char_cursor#91 = print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_str("100ths seconds used: ")
    // [31] call print_str 
    // [67] phi from main::@23 to print_str [phi:main::@23->print_str]
    // [67] phi print_char_cursor#69 = print_char_cursor#91 [phi:main::@23->print_str#0] -- register_copy 
    // [67] phi print_str::str#11 = main::str2 [phi:main::@23->print_str#1] -- pbuz1=pbuc1 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // main::@24
    // print_uint_decimal(sec100s)
    // [32] print_uint_decimal::w#1 = main::sec100s#0
    // [33] call print_uint_decimal 
    // [80] phi from main::@24 to print_uint_decimal [phi:main::@24->print_uint_decimal]
    // [80] phi print_char_cursor#61 = print_char_cursor#1 [phi:main::@24->print_uint_decimal#0] -- register_copy 
    // [80] phi print_uint_decimal::w#3 = print_uint_decimal::w#1 [phi:main::@24->print_uint_decimal#1] -- register_copy 
    jsr print_uint_decimal
    // [34] phi from main::@24 to main::@25 [phi:main::@24->main::@25]
    // main::@25
    // print_str(" cycles: ")
    // [35] call print_str 
    // [67] phi from main::@25 to print_str [phi:main::@25->print_str]
    // [67] phi print_char_cursor#69 = print_char_cursor#1 [phi:main::@25->print_str#0] -- register_copy 
    // [67] phi print_str::str#11 = main::str3 [phi:main::@25->print_str#1] -- pbuz1=pbuc1 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    // main::@26
    // print_ulong_decimal(cyclecount)
    // [36] print_ulong_decimal::w#0 = main::cyclecount#0
    // [37] call print_ulong_decimal 
    jsr print_ulong_decimal
    // [38] phi from main::@26 to main::@27 [phi:main::@26->main::@27]
    // main::@27
    // print_ln()
    // [39] call print_ln 
    // [75] phi from main::@27 to print_ln [phi:main::@27->print_ln]
    // [75] phi print_line_cursor#23 = print_line_cursor#0 [phi:main::@27->print_ln#0] -- register_copy 
    jsr print_ln
    // [40] phi from main::@27 to main::@8 [phi:main::@27->main::@8]
    // [40] phi print_char_cursor#65 = print_line_cursor#0 [phi:main::@27->main::@8#0] -- register_copy 
    // [40] phi main::i#10 = 2 [phi:main::@27->main::@8#1] -- vwuz1=vbuc1 
    lda #<2
    sta.z i_1
    lda #>2
    sta.z i_1+1
    // main::@8
  __b8:
    // for (i = 2; i < 1300; ++i)
    // [41] if(main::i#10<$514) goto main::@9 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i_1+1
    cmp #>$514
    bcc __b9
    bne !+
    lda.z i_1
    cmp #<$514
    bcc __b9
  !:
    // main::@10
    // [42] print_char_cursor#89 = print_char_cursor#65 -- pbuz1=pbuz2 
    lda.z print_char_cursor_1
    sta.z print_char_cursor
    lda.z print_char_cursor_1+1
    sta.z print_char_cursor+1
    // print_str("...")
    // [43] call print_str 
    // [67] phi from main::@10 to print_str [phi:main::@10->print_str]
    // [67] phi print_char_cursor#69 = print_char_cursor#89 [phi:main::@10->print_str#0] -- register_copy 
    // [67] phi print_str::str#11 = main::str4 [phi:main::@10->print_str#1] -- pbuz1=pbuc1 
    lda #<str4
    sta.z print_str.str
    lda #>str4
    sta.z print_str.str+1
    jsr print_str
    // main::@13
  __b13:
    // (*(SCREEN+999))++;
    // [44] *(SCREEN+$3e7) = ++ *(SCREEN+$3e7) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc SCREEN+$3e7
    jmp __b13
    // main::@9
  __b9:
    // if (!sieve[i])
    // [45] main::$33 = sieve + main::i#10 -- pbuz1=pbuc1_plus_vwuz2 
    clc
    lda.z i_1
    adc #<sieve
    sta.z __33
    lda.z i_1+1
    adc #>sieve
    sta.z __33+1
    // [46] if(0!=*main::$33) goto main::@11 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (__33),y
    cmp #0
    bne __b11
    // main::@12
    // print_uint_decimal(i)
    // [47] print_uint_decimal::w#2 = main::i#10
    // [48] print_char_cursor#97 = print_char_cursor#65 -- pbuz1=pbuz2 
    lda.z print_char_cursor_1
    sta.z print_char_cursor
    lda.z print_char_cursor_1+1
    sta.z print_char_cursor+1
    // print_uint_decimal(i)
    // [49] call print_uint_decimal 
    // [80] phi from main::@12 to print_uint_decimal [phi:main::@12->print_uint_decimal]
    // [80] phi print_char_cursor#61 = print_char_cursor#97 [phi:main::@12->print_uint_decimal#0] -- register_copy 
    // [80] phi print_uint_decimal::w#3 = print_uint_decimal::w#2 [phi:main::@12->print_uint_decimal#1] -- register_copy 
    jsr print_uint_decimal
    // [50] phi from main::@12 to main::@28 [phi:main::@12->main::@28]
    // main::@28
    // print_char(' ')
    // [51] call print_char 
    // [119] phi from main::@28 to print_char [phi:main::@28->print_char]
    // [119] phi print_char::ch#2 = ' ' [phi:main::@28->print_char#0] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [52] phi from main::@28 main::@9 to main::@11 [phi:main::@28/main::@9->main::@11]
    // [52] phi print_char_cursor#79 = print_char_cursor#39 [phi:main::@28/main::@9->main::@11#0] -- register_copy 
    // main::@11
  __b11:
    // for (i = 2; i < 1300; ++i)
    // [53] main::i#3 = ++ main::i#10 -- vwuz1=_inc_vwuz1 
    inc.z i_1
    bne !+
    inc.z i_1+1
  !:
    // [40] phi from main::@11 to main::@8 [phi:main::@11->main::@8]
    // [40] phi print_char_cursor#65 = print_char_cursor#79 [phi:main::@11->main::@8#0] -- register_copy 
    // [40] phi main::i#10 = main::i#3 [phi:main::@11->main::@8#1] -- register_copy 
    jmp __b8
    // main::@2
  __b2:
    // if (!*sieve_i)
    // [54] if(0!=*main::sieve_i#2) goto main::@4 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (sieve_i),y
    cmp #0
    bne __b4
    // main::@7
    // unsigned int j = i*2
    // [55] main::j#0 = main::i#12 << 1 -- vwuz1=vwuz2_rol_1 
    lda.z i
    asl
    sta.z j
    lda.z i+1
    rol
    sta.z j+1
    // unsigned char* s = &sieve[j]
    // [56] main::s#0 = sieve + main::j#0 -- pbuz1=pbuc1_plus_vwuz2 
    clc
    lda.z j
    adc #<sieve
    sta.z s
    lda.z j+1
    adc #>sieve
    sta.z s+1
    // [57] phi from main::@6 main::@7 to main::@5 [phi:main::@6/main::@7->main::@5]
    // [57] phi main::s#2 = main::s#1 [phi:main::@6/main::@7->main::@5#0] -- register_copy 
    // [57] phi main::j#2 = main::j#1 [phi:main::@6/main::@7->main::@5#1] -- register_copy 
    // main::@5
  __b5:
    // while (j < COUNT)
    // [58] if(main::j#2<COUNT) goto main::@6 -- vwuz1_lt_vwuc1_then_la1 
    lda.z j+1
    cmp #>COUNT
    bcc __b6
    bne !+
    lda.z j
    cmp #<COUNT
    bcc __b6
  !:
    // main::@4
  __b4:
    // i++;
    // [59] main::i#2 = ++ main::i#12 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // sieve_i++;
    // [60] main::sieve_i#1 = ++ main::sieve_i#2 -- pbuz1=_inc_pbuz1 
    inc.z sieve_i
    bne !+
    inc.z sieve_i+1
  !:
    // [18] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [18] phi main::sieve_i#2 = main::sieve_i#1 [phi:main::@4->main::@1#0] -- register_copy 
    // [18] phi main::i#12 = main::i#2 [phi:main::@4->main::@1#1] -- register_copy 
    jmp __b1
    // main::@6
  __b6:
    // *s = 1
    // [61] *main::s#2 = 1 -- _deref_pbuz1=vbuc1 
    lda #1
    ldy #0
    sta (s),y
    // s += i
    // [62] main::s#1 = main::s#2 + main::i#12 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z s
    clc
    adc.z i
    sta.z s
    lda.z s+1
    adc.z i+1
    sta.z s+1
    // j += i
    // [63] main::j#1 = main::j#2 + main::i#12 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z j
    clc
    adc.z i
    sta.z j
    lda.z j+1
    adc.z i+1
    sta.z j+1
    jmp __b5
  .segment Data
    str: .text "Sieve benchmark - calculating primes"
    .byte 0
    str1: .text "between 2 and "
    .byte 0
    str2: .text "100ths seconds used: "
    .byte 0
    str3: .text " cycles: "
    .byte 0
    str4: .text "..."
    .byte 0
}
.segment Code
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [65] call memset 
    // [86] phi from print_cls to memset [phi:print_cls->memset]
    // [86] phi memset::c#4 = ' ' [phi:print_cls->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [86] phi memset::str#3 = (void*)print_screen#0 [phi:print_cls->memset#1] -- pvoz1=pvoc1 
    lda #<print_screen
    sta.z memset.str
    lda #>print_screen
    sta.z memset.str+1
    // [86] phi memset::num#2 = $3e8 [phi:print_cls->memset#2] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z memset.num
    lda #>$3e8
    sta.z memset.num+1
    jsr memset
    // print_cls::@return
    // }
    // [66] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($e) str)
print_str: {
    .label str = $e
    // [68] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
    // [68] phi print_char_cursor#1 = print_char_cursor#69 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [68] phi print_str::str#10 = print_str::str#11 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    // print_str::@1
  __b1:
    // while(*str)
    // [69] if(0!=*print_str::str#10) goto print_str::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [70] return 
    rts
    // print_str::@2
  __b2:
    // print_char(*(str++))
    // [71] print_char::ch#0 = *print_str::str#10 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [72] call print_char 
    // [119] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
    // [119] phi print_char::ch#2 = print_char::ch#0 [phi:print_str::@2->print_char#0] -- register_copy 
    jsr print_char
    // print_str::@3
    // print_char(*(str++));
    // [73] print_str::str#0 = ++ print_str::str#10 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [74] print_char_cursor#96 = print_char_cursor#39 -- pbuz1=pbuz2 
    lda.z print_char_cursor_1
    sta.z print_char_cursor
    lda.z print_char_cursor_1+1
    sta.z print_char_cursor+1
    jmp __b1
}
  // print_ln
// Print a newline
print_ln: {
    // [76] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [76] phi print_line_cursor#12 = print_line_cursor#23 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [77] print_line_cursor#0 = print_line_cursor#12 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [78] if(print_line_cursor#0<print_char_cursor#1) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [79] return 
    rts
}
  // print_uint_decimal
// Print a unsigned int as DECIMAL
// print_uint_decimal(word zp(4) w)
print_uint_decimal: {
    .label w = 4
    // utoa(w, decimal_digits, DECIMAL)
    // [81] utoa::value#0 = print_uint_decimal::w#3 -- vwuz1=vwuz2 
    lda.z w
    sta.z utoa.value
    lda.z w+1
    sta.z utoa.value+1
    // [82] call utoa 
    // [123] phi from print_uint_decimal to utoa [phi:print_uint_decimal->utoa]
    jsr utoa
    // [83] phi from print_uint_decimal to print_uint_decimal::@1 [phi:print_uint_decimal->print_uint_decimal::@1]
    // print_uint_decimal::@1
    // print_str(decimal_digits)
    // [84] call print_str 
    // [67] phi from print_uint_decimal::@1 to print_str [phi:print_uint_decimal::@1->print_str]
    // [67] phi print_char_cursor#69 = print_char_cursor#61 [phi:print_uint_decimal::@1->print_str#0] -- register_copy 
    // [67] phi print_str::str#11 = decimal_digits [phi:print_uint_decimal::@1->print_str#1] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z print_str.str
    lda #>decimal_digits
    sta.z print_str.str+1
    jsr print_str
    // print_uint_decimal::@return
    // }
    // [85] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($15) str, byte register(X) c, word zp($e) num)
memset: {
    .label end = $e
    .label dst = $15
    .label num = $e
    .label str = $15
    // if(num>0)
    // [87] if(memset::num#2<=0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    // memset::@1
    // char* end = (char*)str + num
    // [88] memset::end#0 = (byte*)memset::str#3 + memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [89] memset::dst#4 = (byte*)memset::str#3
    // [90] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [90] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [91] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
  __breturn:
    // }
    // [92] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [93] *memset::dst#2 = memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [94] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // clock_start
// Reset & start the processor clock time. The value can be read using clock().
// This uses CIA #2 Timer A+B on the C64
clock_start: {
    // CIA2->TIMER_A_CONTROL = CIA_TIMER_CONTROL_STOP | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_A_COUNT_CYCLES
    // [95] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = 0 -- _deref_pbuc1=vbuc2 
    // Setup CIA#2 timer A to count (down) CPU cycles
    lda #0
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // CIA2->TIMER_B_CONTROL = CIA_TIMER_CONTROL_STOP | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    // [96] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // *CIA2_TIMER_AB = 0xffffffff
    // [97] *CIA2_TIMER_AB = $ffffffff -- _deref_pduc1=vduc2 
    lda #<$ffffffff
    sta CIA2_TIMER_AB
    lda #>$ffffffff
    sta CIA2_TIMER_AB+1
    lda #<$ffffffff>>$10
    sta CIA2_TIMER_AB+2
    lda #>$ffffffff>>$10
    sta CIA2_TIMER_AB+3
    // CIA2->TIMER_B_CONTROL = CIA_TIMER_CONTROL_START | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    // [98] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // CIA2->TIMER_A_CONTROL = CIA_TIMER_CONTROL_START | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_A_COUNT_CYCLES
    // [99] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // clock_start::@return
    // }
    // [100] return 
    rts
}
  // clock
// Returns the processor clock time used since the beginning of an implementation defined era (normally the beginning of the program).
// This uses CIA #2 Timer A+B on the C64, and must be initialized using clock_start()
clock: {
    .label return = $11
    // 0xffffffff - *CIA2_TIMER_AB
    // [101] clock::return#0 = $ffffffff - *CIA2_TIMER_AB -- vduz1=vduc1_minus__deref_pduc2 
    lda #<$ffffffff
    sec
    sbc CIA2_TIMER_AB
    sta.z return
    lda #>$ffffffff
    sbc CIA2_TIMER_AB+1
    sta.z return+1
    lda #<$ffffffff>>$10
    sbc CIA2_TIMER_AB+2
    sta.z return+2
    lda #>$ffffffff>>$10
    sbc CIA2_TIMER_AB+3
    sta.z return+3
    // clock::@return
    // }
    // [102] return 
    rts
}
  // div32u16u
// Divide unsigned 32-bit unsigned long dividend with a 16-bit unsigned int divisor
// The 16-bit unsigned int remainder can be found in rem16u after the division
// div32u16u(dword zp($11) dividend)
div32u16u: {
    .label divisor = CLOCKS_PER_SEC/$64
    .label quotient_hi = $1d
    .label quotient_lo = $1b
    .label return = $17
    .label dividend = $11
    // divr16u(WORD1(dividend), divisor, 0)
    // [103] divr16u::dividend#1 = _word1_ div32u16u::dividend#0 -- vwuz1=_word1_vduz2 
    lda.z dividend+2
    sta.z divr16u.dividend
    lda.z dividend+3
    sta.z divr16u.dividend+1
    // [104] call divr16u 
    // [144] phi from div32u16u to divr16u [phi:div32u16u->divr16u]
    // [144] phi divr16u::dividend#5 = divr16u::dividend#1 [phi:div32u16u->divr16u#0] -- register_copy 
    // [144] phi divr16u::rem#10 = 0 [phi:div32u16u->divr16u#1] -- vwuz1=vbuc1 
    lda #<0
    sta.z divr16u.rem
    sta.z divr16u.rem+1
    jsr divr16u
    // divr16u(WORD1(dividend), divisor, 0)
    // [105] divr16u::return#2 = divr16u::return#0
    // div32u16u::@1
    // unsigned int quotient_hi = divr16u(WORD1(dividend), divisor, 0)
    // [106] div32u16u::quotient_hi#0 = divr16u::return#2 -- vwuz1=vwuz2 
    lda.z divr16u.return
    sta.z quotient_hi
    lda.z divr16u.return+1
    sta.z quotient_hi+1
    // divr16u(WORD0(dividend), divisor, rem16u)
    // [107] divr16u::dividend#2 = _word0_ div32u16u::dividend#0 -- vwuz1=_word0_vduz2 
    lda.z dividend
    sta.z divr16u.dividend
    lda.z dividend+1
    sta.z divr16u.dividend+1
    // [108] divr16u::rem#4 = rem16u#0
    // [109] call divr16u 
    // [144] phi from div32u16u::@1 to divr16u [phi:div32u16u::@1->divr16u]
    // [144] phi divr16u::dividend#5 = divr16u::dividend#2 [phi:div32u16u::@1->divr16u#0] -- register_copy 
    // [144] phi divr16u::rem#10 = divr16u::rem#4 [phi:div32u16u::@1->divr16u#1] -- register_copy 
    jsr divr16u
    // divr16u(WORD0(dividend), divisor, rem16u)
    // [110] divr16u::return#3 = divr16u::return#0
    // div32u16u::@2
    // unsigned int quotient_lo = divr16u(WORD0(dividend), divisor, rem16u)
    // [111] div32u16u::quotient_lo#0 = divr16u::return#3
    // unsigned long quotient = { quotient_hi, quotient_lo}
    // [112] div32u16u::return#0 = div32u16u::quotient_hi#0 dw= div32u16u::quotient_lo#0 -- vduz1=vwuz2_dword_vwuz3 
    lda.z quotient_hi
    sta.z return+2
    lda.z quotient_hi+1
    sta.z return+3
    lda.z quotient_lo
    sta.z return
    lda.z quotient_lo+1
    sta.z return+1
    // div32u16u::@return
    // }
    // [113] return 
    rts
}
  // print_ulong_decimal
// Print a unsigned long as DECIMAL
// print_ulong_decimal(dword zp($11) w)
print_ulong_decimal: {
    .label w = $11
    // ultoa(w, decimal_digits_long, DECIMAL)
    // [114] ultoa::value#0 = print_ulong_decimal::w#0
    // [115] call ultoa 
    // [162] phi from print_ulong_decimal to ultoa [phi:print_ulong_decimal->ultoa]
    jsr ultoa
    // [116] phi from print_ulong_decimal to print_ulong_decimal::@1 [phi:print_ulong_decimal->print_ulong_decimal::@1]
    // print_ulong_decimal::@1
    // print_str(decimal_digits_long)
    // [117] call print_str 
    // [67] phi from print_ulong_decimal::@1 to print_str [phi:print_ulong_decimal::@1->print_str]
    // [67] phi print_char_cursor#69 = print_char_cursor#1 [phi:print_ulong_decimal::@1->print_str#0] -- register_copy 
    // [67] phi print_str::str#11 = decimal_digits_long [phi:print_ulong_decimal::@1->print_str#1] -- pbuz1=pbuc1 
    lda #<decimal_digits_long
    sta.z print_str.str
    lda #>decimal_digits_long
    sta.z print_str.str+1
    jsr print_str
    // print_ulong_decimal::@return
    // }
    // [118] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [120] *print_char_cursor#1 = print_char::ch#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [121] print_char_cursor#39 = ++ print_char_cursor#1 -- pbuz1=_inc_pbuz2 
    clc
    lda.z print_char_cursor
    adc #1
    sta.z print_char_cursor_1
    lda.z print_char_cursor+1
    adc #0
    sta.z print_char_cursor_1+1
    // print_char::@return
    // }
    // [122] return 
    rts
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp($15) value, byte* zp($e) buffer)
utoa: {
    .const max_digits = 5
    .label value = $15
    .label digit_value = $1d
    .label buffer = $e
    .label digit = $10
    // [124] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
    // [124] phi utoa::buffer#11 = decimal_digits [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<decimal_digits
    sta.z buffer
    lda #>decimal_digits
    sta.z buffer+1
    // [124] phi utoa::started#2 = 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [124] phi utoa::value#2 = utoa::value#0 [phi:utoa->utoa::@1#2] -- register_copy 
    // [124] phi utoa::digit#2 = 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    txa
    sta.z digit
    // utoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [125] if(utoa::digit#2<utoa::max_digits#1-1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    // utoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [126] utoa::$11 = (byte)utoa::value#2 -- vbuxx=_byte_vwuz1 
    ldx.z value
    // [127] *utoa::buffer#11 = DIGITS[utoa::$11] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [128] utoa::buffer#4 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [129] *utoa::buffer#4 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // utoa::@return
    // }
    // [130] return 
    rts
    // utoa::@2
  __b2:
    // unsigned int digit_value = digit_values[digit]
    // [131] utoa::$10 = utoa::digit#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [132] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // if (started || value >= digit_value)
    // [133] if(0!=utoa::started#2) goto utoa::@5 -- 0_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    // utoa::@7
    // [134] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [135] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
    // [135] phi utoa::buffer#14 = utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [135] phi utoa::started#4 = utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [135] phi utoa::value#6 = utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    // utoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [136] utoa::digit#1 = ++ utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [124] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
    // [124] phi utoa::buffer#11 = utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [124] phi utoa::started#2 = utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [124] phi utoa::value#2 = utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [124] phi utoa::digit#2 = utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // utoa_append(buffer++, value, digit_value)
    // [137] utoa_append::buffer#0 = utoa::buffer#11
    // [138] utoa_append::value#0 = utoa::value#2
    // [139] utoa_append::sub#0 = utoa::digit_value#0
    // [140] call utoa_append 
    // [183] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
    jsr utoa_append
    // utoa_append(buffer++, value, digit_value)
    // [141] utoa_append::return#0 = utoa_append::value#2
    // utoa::@6
    // value = utoa_append(buffer++, value, digit_value)
    // [142] utoa::value#1 = utoa_append::return#0
    // value = utoa_append(buffer++, value, digit_value);
    // [143] utoa::buffer#5 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [135] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
    // [135] phi utoa::buffer#14 = utoa::buffer#5 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [135] phi utoa::started#4 = 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [135] phi utoa::value#6 = utoa::value#1 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // divr16u
// Performs division on two 16 bit unsigned ints and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
// divr16u(word zp($15) dividend, word zp($e) rem)
divr16u: {
    .label rem = $e
    .label dividend = $15
    .label quotient = $1b
    .label return = $1b
    // [145] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
    // [145] phi divr16u::i#2 = 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [145] phi divr16u::quotient#3 = 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vwuc1 
    txa
    sta.z quotient
    sta.z quotient+1
    // [145] phi divr16u::dividend#3 = divr16u::dividend#5 [phi:divr16u->divr16u::@1#2] -- register_copy 
    // [145] phi divr16u::rem#5 = divr16u::rem#10 [phi:divr16u->divr16u::@1#3] -- register_copy 
    // [145] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
    // [145] phi divr16u::i#2 = divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
    // [145] phi divr16u::quotient#3 = divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
    // [145] phi divr16u::dividend#3 = divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
    // [145] phi divr16u::rem#5 = divr16u::rem#11 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    // divr16u::@1
  __b1:
    // rem = rem << 1
    // [146] divr16u::rem#0 = divr16u::rem#5 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z rem
    rol.z rem+1
    // BYTE1(dividend)
    // [147] divr16u::$1 = > divr16u::dividend#3 -- vbuaa=_byte1_vwuz1 
    lda.z dividend+1
    // BYTE1(dividend) & $80
    // [148] divr16u::$2 = divr16u::$1 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if( (BYTE1(dividend) & $80) != 0 )
    // [149] if(divr16u::$2==0) goto divr16u::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2
    // divr16u::@4
    // rem = rem | 1
    // [150] divr16u::rem#1 = divr16u::rem#0 | 1 -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora.z rem
    sta.z rem
    // [151] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
    // [151] phi divr16u::rem#6 = divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    // divr16u::@2
  __b2:
    // dividend = dividend << 1
    // [152] divr16u::dividend#0 = divr16u::dividend#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z dividend
    rol.z dividend+1
    // quotient = quotient << 1
    // [153] divr16u::quotient#1 = divr16u::quotient#3 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z quotient
    rol.z quotient+1
    // if(rem>=divisor)
    // [154] if(divr16u::rem#6<div32u16u::divisor#0) goto divr16u::@3 -- vwuz1_lt_vwuc1_then_la1 
    lda.z rem+1
    cmp #>div32u16u.divisor
    bcc __b3
    bne !+
    lda.z rem
    cmp #<div32u16u.divisor
    bcc __b3
  !:
    // divr16u::@5
    // quotient++;
    // [155] divr16u::quotient#2 = ++ divr16u::quotient#1 -- vwuz1=_inc_vwuz1 
    inc.z quotient
    bne !+
    inc.z quotient+1
  !:
    // rem = rem - divisor
    // [156] divr16u::rem#2 = divr16u::rem#6 - div32u16u::divisor#0 -- vwuz1=vwuz1_minus_vwuc1 
    lda.z rem
    sec
    sbc #<div32u16u.divisor
    sta.z rem
    lda.z rem+1
    sbc #>div32u16u.divisor
    sta.z rem+1
    // [157] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
    // [157] phi divr16u::return#0 = divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
    // [157] phi divr16u::rem#11 = divr16u::rem#6 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    // divr16u::@3
  __b3:
    // for( char i : 0..15)
    // [158] divr16u::i#1 = ++ divr16u::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [159] if(divr16u::i#1!=$10) goto divr16u::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // divr16u::@6
    // rem16u = rem
    // [160] rem16u#0 = divr16u::rem#11
    // divr16u::@return
    // }
    // [161] return 
    rts
}
  // ultoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// ultoa(dword zp($11) value, byte* zp($15) buffer)
ultoa: {
    .const max_digits = $a
    .label value = $11
    .label digit_value = $1f
    .label buffer = $15
    .label digit = $10
    // [163] phi from ultoa to ultoa::@1 [phi:ultoa->ultoa::@1]
    // [163] phi ultoa::buffer#11 = decimal_digits_long [phi:ultoa->ultoa::@1#0] -- pbuz1=pbuc1 
    lda #<decimal_digits_long
    sta.z buffer
    lda #>decimal_digits_long
    sta.z buffer+1
    // [163] phi ultoa::started#2 = 0 [phi:ultoa->ultoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [163] phi ultoa::value#2 = ultoa::value#0 [phi:ultoa->ultoa::@1#2] -- register_copy 
    // [163] phi ultoa::digit#2 = 0 [phi:ultoa->ultoa::@1#3] -- vbuz1=vbuc1 
    txa
    sta.z digit
    // ultoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [164] if(ultoa::digit#2<ultoa::max_digits#1-1) goto ultoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    // ultoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [165] ultoa::$11 = (byte)ultoa::value#2 -- vbuaa=_byte_vduz1 
    lda.z value
    // [166] *ultoa::buffer#11 = DIGITS[ultoa::$11] -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [167] ultoa::buffer#4 = ++ ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [168] *ultoa::buffer#4 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // ultoa::@return
    // }
    // [169] return 
    rts
    // ultoa::@2
  __b2:
    // unsigned long digit_value = digit_values[digit]
    // [170] ultoa::$10 = ultoa::digit#2 << 2 -- vbuaa=vbuz1_rol_2 
    lda.z digit
    asl
    asl
    // [171] ultoa::digit_value#0 = RADIX_DECIMAL_VALUES_LONG[ultoa::$10] -- vduz1=pduc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES_LONG,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES_LONG+1,y
    sta.z digit_value+1
    lda RADIX_DECIMAL_VALUES_LONG+2,y
    sta.z digit_value+2
    lda RADIX_DECIMAL_VALUES_LONG+3,y
    sta.z digit_value+3
    // if (started || value >= digit_value)
    // [172] if(0!=ultoa::started#2) goto ultoa::@5 -- 0_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    // ultoa::@7
    // [173] if(ultoa::value#2>=ultoa::digit_value#0) goto ultoa::@5 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z digit_value+3
    bcc !+
    bne __b5
    lda.z value+2
    cmp.z digit_value+2
    bcc !+
    bne __b5
    lda.z value+1
    cmp.z digit_value+1
    bcc !+
    bne __b5
    lda.z value
    cmp.z digit_value
    bcs __b5
  !:
    // [174] phi from ultoa::@7 to ultoa::@4 [phi:ultoa::@7->ultoa::@4]
    // [174] phi ultoa::buffer#14 = ultoa::buffer#11 [phi:ultoa::@7->ultoa::@4#0] -- register_copy 
    // [174] phi ultoa::started#4 = ultoa::started#2 [phi:ultoa::@7->ultoa::@4#1] -- register_copy 
    // [174] phi ultoa::value#6 = ultoa::value#2 [phi:ultoa::@7->ultoa::@4#2] -- register_copy 
    // ultoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [175] ultoa::digit#1 = ++ ultoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [163] phi from ultoa::@4 to ultoa::@1 [phi:ultoa::@4->ultoa::@1]
    // [163] phi ultoa::buffer#11 = ultoa::buffer#14 [phi:ultoa::@4->ultoa::@1#0] -- register_copy 
    // [163] phi ultoa::started#2 = ultoa::started#4 [phi:ultoa::@4->ultoa::@1#1] -- register_copy 
    // [163] phi ultoa::value#2 = ultoa::value#6 [phi:ultoa::@4->ultoa::@1#2] -- register_copy 
    // [163] phi ultoa::digit#2 = ultoa::digit#1 [phi:ultoa::@4->ultoa::@1#3] -- register_copy 
    jmp __b1
    // ultoa::@5
  __b5:
    // ultoa_append(buffer++, value, digit_value)
    // [176] ultoa_append::buffer#0 = ultoa::buffer#11
    // [177] ultoa_append::value#0 = ultoa::value#2
    // [178] ultoa_append::sub#0 = ultoa::digit_value#0
    // [179] call ultoa_append 
    // [190] phi from ultoa::@5 to ultoa_append [phi:ultoa::@5->ultoa_append]
    jsr ultoa_append
    // ultoa_append(buffer++, value, digit_value)
    // [180] ultoa_append::return#0 = ultoa_append::value#2
    // ultoa::@6
    // value = ultoa_append(buffer++, value, digit_value)
    // [181] ultoa::value#1 = ultoa_append::return#0
    // value = ultoa_append(buffer++, value, digit_value);
    // [182] ultoa::buffer#5 = ++ ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [174] phi from ultoa::@6 to ultoa::@4 [phi:ultoa::@6->ultoa::@4]
    // [174] phi ultoa::buffer#14 = ultoa::buffer#5 [phi:ultoa::@6->ultoa::@4#0] -- register_copy 
    // [174] phi ultoa::started#4 = 1 [phi:ultoa::@6->ultoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [174] phi ultoa::value#6 = ultoa::value#1 [phi:ultoa::@6->ultoa::@4#2] -- register_copy 
    jmp __b4
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($e) buffer, word zp($15) value, word zp($1d) sub)
utoa_append: {
    .label buffer = $e
    .label value = $15
    .label sub = $1d
    .label return = $15
    // [184] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
    // [184] phi utoa_append::digit#2 = 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [184] phi utoa_append::value#2 = utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    // utoa_append::@1
  __b1:
    // while (value >= sub)
    // [185] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    // utoa_append::@3
    // *buffer = DIGITS[digit]
    // [186] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // utoa_append::@return
    // }
    // [187] return 
    rts
    // utoa_append::@2
  __b2:
    // digit++;
    // [188] utoa_append::digit#1 = ++ utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // value -= sub
    // [189] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [184] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
    // [184] phi utoa_append::digit#2 = utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [184] phi utoa_append::value#2 = utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // ultoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// ultoa_append(byte* zp($15) buffer, dword zp($11) value, dword zp($1f) sub)
ultoa_append: {
    .label buffer = $15
    .label value = $11
    .label sub = $1f
    .label return = $11
    // [191] phi from ultoa_append to ultoa_append::@1 [phi:ultoa_append->ultoa_append::@1]
    // [191] phi ultoa_append::digit#2 = 0 [phi:ultoa_append->ultoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [191] phi ultoa_append::value#2 = ultoa_append::value#0 [phi:ultoa_append->ultoa_append::@1#1] -- register_copy 
    // ultoa_append::@1
  __b1:
    // while (value >= sub)
    // [192] if(ultoa_append::value#2>=ultoa_append::sub#0) goto ultoa_append::@2 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z sub+3
    bcc !+
    bne __b2
    lda.z value+2
    cmp.z sub+2
    bcc !+
    bne __b2
    lda.z value+1
    cmp.z sub+1
    bcc !+
    bne __b2
    lda.z value
    cmp.z sub
    bcs __b2
  !:
    // ultoa_append::@3
    // *buffer = DIGITS[digit]
    // [193] *ultoa_append::buffer#0 = DIGITS[ultoa_append::digit#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // ultoa_append::@return
    // }
    // [194] return 
    rts
    // ultoa_append::@2
  __b2:
    // digit++;
    // [195] ultoa_append::digit#1 = ++ ultoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // value -= sub
    // [196] ultoa_append::value#1 = ultoa_append::value#2 - ultoa_append::sub#0 -- vduz1=vduz1_minus_vduz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    lda.z value+2
    sbc.z sub+2
    sta.z value+2
    lda.z value+3
    sbc.z sub+3
    sta.z value+3
    // [191] phi from ultoa_append::@2 to ultoa_append::@1 [phi:ultoa_append::@2->ultoa_append::@1]
    // [191] phi ultoa_append::digit#2 = ultoa_append::digit#1 [phi:ultoa_append::@2->ultoa_append::@1#0] -- register_copy 
    // [191] phi ultoa_append::value#2 = ultoa_append::value#1 [phi:ultoa_append::@2->ultoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_LONG: .dword $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a
  // Digits used for storing the decimal unsigned int
  decimal_digits: .fill 6, 0
  // Digits used for storing the decimal unsigned int
  decimal_digits_long: .fill $b, 0

