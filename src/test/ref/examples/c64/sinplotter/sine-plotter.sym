constant byte* BITMAP = (byte*) 8192
constant struct MOS6526_CIA* const CIA2 = (struct MOS6526_CIA*) 56576
constant byte* const D011 = (byte*) 53265
constant byte* const D016 = (byte*) 53270
constant byte* const D018 = (byte*) 53272
constant byte OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
constant byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
constant const dword PI2_u4f28 = $6487ed51
constant const dword PI_HALF_u4f28 = $1921fb54
constant const dword PI_u4f28 = $3243f6a9
constant byte* const PROCPORT = (byte*) 1
constant byte* const PROCPORT_DDR = (byte*) 0
constant const byte PROCPORT_DDR_MEMORY_MASK = 7
constant const byte PROCPORT_RAM_IO = 5
constant byte* SCREEN = (byte*) 1024
constant const word SIN_SIZE = $200
constant byte SIZEOF_SIGNED_WORD = 2
constant struct MOS6569_VICII* const VICII = (struct MOS6569_VICII*) 53248
constant const byte VICII_BMM = $20
constant const byte VICII_CSEL = 8
constant const byte VICII_DEN = $10
constant const byte VICII_RSEL = 8
constant const byte WHITE = 1
void bitmap_clear(byte bitmap_clear::bgcol , byte bitmap_clear::fgcol)
byte bitmap_clear::bgcol
byte bitmap_clear::col
constant byte bitmap_clear::col#0 col = WHITE*$10
byte bitmap_clear::fgcol
byte* bitmap_gfx
void bitmap_init(byte* bitmap_init::gfx , byte* bitmap_init::screen)
byte~ bitmap_init::$4 reg byte a 202.0
byte~ bitmap_init::$5 reg byte a 202.0
byte~ bitmap_init::$6 reg byte a 202.0
byte~ bitmap_init::$7 zp[1]:22 50.5
byte bitmap_init::bits
byte bitmap_init::bits#1 reg byte a 101.0
byte bitmap_init::bits#3 reg byte a 151.5
byte bitmap_init::bits#4 reg byte a 67.33333333333333
byte* bitmap_init::gfx
byte* bitmap_init::screen
byte bitmap_init::x
byte bitmap_init::x#1 reg byte x 151.5
byte bitmap_init::x#2 reg byte x 50.5
byte bitmap_init::y
byte bitmap_init::y#1 reg byte x 151.5
byte bitmap_init::y#2 reg byte x 50.5
byte* bitmap_init::yoffs
byte* bitmap_init::yoffs#1 yoffs zp[2]:8 202.0
byte* bitmap_init::yoffs#2 yoffs zp[2]:8 63.125
byte* bitmap_init::yoffs#4 yoffs zp[2]:8 101.0
void bitmap_plot(word bitmap_plot::x , byte bitmap_plot::y)
word~ bitmap_plot::$1 zp[2]:37 2002.0
byte~ bitmap_plot::$2 reg byte x 2002.0
byte* bitmap_plot::plotter
word bitmap_plot::plotter#0 plotter zp[2]:35 500.5
byte* bitmap_plot::plotter#1 plotter zp[2]:35 1501.5
word bitmap_plot::x
word bitmap_plot::x#0 x zp[2]:8 101.0
word bitmap_plot::x#1 x zp[2]:8 101.0
word bitmap_plot::x#2 x zp[2]:8 551.0
byte bitmap_plot::y
byte bitmap_plot::y#0 reg byte x 202.0
byte bitmap_plot::y#1 reg byte x 202.0
byte bitmap_plot::y#2 reg byte x 2204.0
constant const byte* bitmap_plot_bit[$100]  = { fill( $100, 0) }
constant const byte* bitmap_plot_yhi[$100]  = { fill( $100, 0) }
constant const byte* bitmap_plot_ylo[$100]  = { fill( $100, 0) }
byte* bitmap_screen
dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
dword div32u16u::dividend
word div32u16u::divisor
dword div32u16u::quotient
word div32u16u::quotient_hi
word div32u16u::quotient_hi#0 quotient_hi zp[2]:33 40.4
word div32u16u::quotient_lo
word div32u16u::quotient_lo#0 quotient_lo zp[2]:20 202.0
dword div32u16u::return
dword div32u16u::return#0 return zp[4]:23 22.0
dword div32u16u::return#1 return zp[4]:23 37.33333333333333
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 reg byte a 20002.0
byte~ divr16u::$2 reg byte a 20002.0
word divr16u::dividend
word divr16u::dividend#0 dividend zp[2]:37 2500.25
word divr16u::dividend#3 dividend zp[2]:37 4429.142857142857
word divr16u::dividend#5 dividend zp[2]:37 1001.0
word divr16u::divisor
byte divr16u::i
byte divr16u::i#1 reg byte x 15001.5
byte divr16u::i#2 reg byte x 1538.6153846153845
word divr16u::quotient
word divr16u::quotient#1 quotient zp[2]:20 15001.5
word divr16u::quotient#2 quotient zp[2]:20 10001.0
word divr16u::quotient#3 quotient zp[2]:20 2500.25
word divr16u::rem
word divr16u::rem#0 rem zp[2]:18 7500.75
word divr16u::rem#1 rem zp[2]:18 20002.0
word divr16u::rem#10 rem zp[2]:18 1102.0
word divr16u::rem#11 rem zp[2]:18 10334.666666666666
word divr16u::rem#2 rem zp[2]:18 20002.0
word divr16u::rem#4 rem zp[2]:18 202.0
word divr16u::rem#5 rem zp[2]:18 21003.0
word divr16u::rem#6 rem zp[2]:18 10001.0
word divr16u::return
word divr16u::return#0 return zp[2]:20 4315.0
word divr16u::return#2 return zp[2]:20 202.0
word divr16u::return#3 return zp[2]:20 202.0
void main()
byte* main::toD0181_gfx
byte main::toD0181_return
constant byte main::toD0181_return#0 toD0181_return = byte1 (word)SCREEN&$3fff*4|byte1 (word)BITMAP/4&$f
byte* main::toD0181_screen
byte* main::vicSelectGfxBank1_gfx
byte* main::vicSelectGfxBank1_toDd001_gfx
byte main::vicSelectGfxBank1_toDd001_return
constant byte main::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = 3
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#4 reg byte x 125.125
byte* memset::dst
byte* memset::dst#1 dst zp[2]:18 2002.0
byte* memset::dst#2 dst zp[2]:18 1368.3333333333335
byte* memset::dst#4 dst zp[2]:18 202.0
byte* memset::end
byte* memset::end#0 end zp[2]:8 183.66666666666669
word memset::num
word memset::num#2 num zp[2]:8 101.0
void* memset::return
void* memset::str
void* memset::str#3 str zp[2]:18
signed dword mul16s(signed word mul16s::a , signed word mul16s::b)
word~ mul16s::$11 zp[2]:33 2002.0
word~ mul16s::$6 zp[2]:33 2002.0
signed word mul16s::a
signed word mul16s::a#0 a zp[2]:18 220.39999999999998
signed word mul16s::b
dword mul16s::m
dword mul16s::m#0 m zp[4]:14 1001.0
dword mul16s::m#1 m zp[4]:14 2002.0
dword mul16s::m#4 m zp[4]:14 2002.0
signed dword mul16s::return
signed dword mul16s::return#0 return zp[4]:14 202.0
signed dword mul16s::return#1 return zp[4]:14 367.33333333333337
dword mul16u(word mul16u::a , word mul16u::b)
byte~ mul16u::$1 reg byte a 2.0000002E7
word mul16u::a
word mul16u::a#0 a zp[2]:27 10001.0
word mul16u::a#1 a zp[2]:27 1.0000001E7
word mul16u::a#2 a zp[2]:27 2002.0
word mul16u::a#3 a zp[2]:27 6683334.166666666
word mul16u::a#6 a zp[2]:27 55501.5
word mul16u::b
word mul16u::b#0 b zp[2]:20 20002.0
word mul16u::b#2 b zp[2]:20 10001.0
dword mul16u::mb
dword mul16u::mb#0 mb zp[4]:29 200002.0
dword mul16u::mb#1 mb zp[4]:29 2.0000002E7
dword mul16u::mb#2 mb zp[4]:29 4300000.571428571
dword mul16u::res
dword mul16u::res#1 res zp[4]:14 2.0000002E7
dword mul16u::res#2 res zp[4]:14 4287286.428571429
dword mul16u::res#6 res zp[4]:14 1.0000001E7
dword mul16u::return
dword mul16u::return#0 return zp[4]:14 20002.0
dword mul16u::return#3 return zp[4]:14 2002.0
word mulu16_sel(word mulu16_sel::v1 , word mulu16_sel::v2 , byte mulu16_sel::select)
dword~ mulu16_sel::$0 zp[4]:14 20002.0
dword~ mulu16_sel::$1 zp[4]:14 20002.0
word mulu16_sel::return
word mulu16_sel::return#0 return zp[2]:35 2002.0
word mulu16_sel::return#1 return_1 zp[2]:37 2002.0
word mulu16_sel::return#10 return_1 zp[2]:37 2002.0
word mulu16_sel::return#11 return zp[2]:35 2002.0
word mulu16_sel::return#12 return zp[2]:35 2143.714285714286
word mulu16_sel::return#2 return zp[2]:35 2002.0
byte mulu16_sel::select
byte mulu16_sel::select#5 reg byte x 1666.8333333333333
word mulu16_sel::v1
word mulu16_sel::v1#0 v1 zp[2]:37 1001.0
word mulu16_sel::v1#1 v1 zp[2]:37 1001.0
word mulu16_sel::v1#2 v1 zp[2]:37 2002.0
word mulu16_sel::v1#3 v1 zp[2]:37 1001.0
word mulu16_sel::v1#4 v1 zp[2]:37 1001.0
word mulu16_sel::v1#5 v1 zp[2]:37 15006.0
word mulu16_sel::v2
word mulu16_sel::v2#0 v2 zp[2]:20 2002.0
word mulu16_sel::v2#1 v2 zp[2]:20 2002.0
word mulu16_sel::v2#3 v2 zp[2]:20 2002.0
word mulu16_sel::v2#4 v2 zp[2]:20 2002.0
word mulu16_sel::v2#5 v2 zp[2]:20 7002.5
word rem16u
word rem16u#14 rem16u zp[2]:18 220.39999999999998
void render_sine()
signed word*~ render_sine::$1 zp[2]:18 202.0
word~ render_sine::$11 zp[2]:33 30.299999999999997
signed word*~ render_sine::$4 zp[2]:33 202.0
signed word render_sine::sin2_val
signed word render_sine::sin2_val#0 sin2_val zp[2]:18 202.0
word render_sine::sin_idx
word render_sine::sin_idx#1 sin_idx zp[2]:6 202.0
word render_sine::sin_idx#2 sin_idx zp[2]:6 16.16
signed word render_sine::sin_val
signed word render_sine::sin_val#0 sin_val zp[2]:18 202.0
word render_sine::xpos
word render_sine::xpos#1 xpos zp[2]:8 101.0
word render_sine::xpos#3 xpos zp[2]:8 19.238095238095237
word render_sine::xpos#9 xpos zp[2]:8 101.0
byte render_sine::ypos
byte render_sine::ypos#0 reg byte x 101.0
byte render_sine::ypos2
byte render_sine::ypos2#0 reg byte x 101.0
constant signed word* sin[$200]  = { fill( $200, 0) }
signed word sin16s(dword sin16s::x)
dword~ sin16s::$4 zp[4]:29 2002.0
byte sin16s::isUpper
byte sin16s::isUpper#2 reg byte y 30.333333333333332
signed word sin16s::return
signed word sin16s::return#0 return zp[2]:18 202.0
signed word sin16s::return#1 return zp[2]:18 701.0
signed word sin16s::return#5 return zp[2]:18 2002.0
signed word sin16s::sinx
signed word sin16s::sinx#1 sinx zp[2]:18 2002.0
word sin16s::usinx
word sin16s::usinx#0 usinx zp[2]:18 166.83333333333334
word sin16s::usinx#1 usinx zp[2]:18 500.5
dword sin16s::x
dword sin16s::x#0 x zp[4]:10 1552.0
dword sin16s::x#1 x zp[4]:10 2002.0
dword sin16s::x#2 x zp[4]:10 2002.0
dword sin16s::x#4 x zp[4]:10 2502.5
dword sin16s::x#6 x zp[4]:10 3003.0
word sin16s::x1
word sin16s::x1#0 x1 zp[2]:33 318.5
word sin16s::x2
word sin16s::x2#0 x2 zp[2]:37 2002.0
word sin16s::x3
word sin16s::x3#0 x3 zp[2]:37 500.5
word sin16s::x3_6
word sin16s::x3_6#0 x3_6 zp[2]:35 2002.0
word sin16s::x4
word sin16s::x4#0 x4 zp[2]:37 2002.0
word sin16s::x5
word sin16s::x5#0 x5 zp[2]:35 2002.0
word sin16s::x5_128
word sin16s::x5_128#0 x5_128 zp[2]:35 2002.0
void sin16s_gen2(signed word* sin16s_gen2::sintab , word sin16s_gen2::wavelength , signed word sin16s_gen2::min , signed word sin16s_gen2::max)
signed dword~ sin16s_gen2::$6 zp[4]:14 202.0
word~ sin16s_gen2::$8 zp[2]:27 101.0
signed word sin16s_gen2::ampl
constant signed word sin16s_gen2::ampl#0 ampl = sin16s_gen2::max#0-sin16s_gen2::min#0
word sin16s_gen2::i
word sin16s_gen2::i#1 i zp[2]:8 202.0
word sin16s_gen2::i#2 i zp[2]:8 23.307692307692307
signed word sin16s_gen2::max
constant signed word sin16s_gen2::max#0 max = $140
signed word sin16s_gen2::min
constant signed word sin16s_gen2::min#0 min = -$140
signed word sin16s_gen2::offs
signed word* sin16s_gen2::sintab
signed word* sin16s_gen2::sintab#0 sintab zp[2]:6 67.33333333333333
signed word* sin16s_gen2::sintab#2 sintab zp[2]:6 27.545454545454547
dword sin16s_gen2::step
dword sin16s_gen2::step#0 step zp[4]:23 7.466666666666667
word sin16s_gen2::wavelength
dword sin16s_gen2::x
dword sin16s_gen2::x#1 x zp[4]:2 101.0
dword sin16s_gen2::x#2 x zp[4]:2 25.25
constant signed word* sin2[$200]  = kickasm {{ .for(var i=0; i<512; i++) {
  	  .word sin(toRadians([i*360]/512))*320
    }
 }}
byte wrap_y(signed word wrap_y::y)
byte wrap_y::return
byte wrap_y::return#0 reg byte a 202.0
byte wrap_y::return#1 reg byte a 202.0
byte wrap_y::return#2 reg byte a 300.75
signed word wrap_y::y
signed word wrap_y::y#0 y zp[2]:18 202.0
signed word wrap_y::y#1 y zp[2]:18 202.0
signed word wrap_y::y#2 y zp[2]:18 200002.0
signed word wrap_y::y#3 y zp[2]:18 200002.0
signed word wrap_y::y#4 y zp[2]:18 200502.5
signed word wrap_y::y#6 y zp[2]:18 200002.0
signed word wrap_y::y#9 y zp[2]:18 1203.0

reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
zp[4]:2 [ sin16s_gen2::x#2 sin16s_gen2::x#1 ]
zp[2]:6 [ render_sine::sin_idx#2 render_sine::sin_idx#1 sin16s_gen2::sintab#2 sin16s_gen2::sintab#0 ]
zp[2]:8 [ memset::num#2 memset::end#0 render_sine::xpos#3 render_sine::xpos#9 render_sine::xpos#1 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 sin16s_gen2::i#2 sin16s_gen2::i#1 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
reg byte x [ memset::c#4 ]
reg byte y [ sin16s::isUpper#2 ]
zp[4]:10 [ sin16s::x#6 sin16s::x#4 sin16s::x#0 sin16s::x#1 sin16s::x#2 ]
zp[4]:14 [ mul16s::m#4 mul16s::m#1 mul16s::m#0 mul16u::return#3 mul16s::return#1 mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#0 mul16s::return#0 sin16s_gen2::$6 mulu16_sel::$0 mulu16_sel::$1 ]
reg byte x [ bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 ]
zp[2]:18 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#14 wrap_y::y#6 wrap_y::y#4 wrap_y::y#9 wrap_y::y#0 wrap_y::y#1 wrap_y::y#2 wrap_y::y#3 render_sine::sin_val#0 render_sine::sin2_val#0 render_sine::$1 sin16s::return#1 sin16s::return#5 sin16s::sinx#1 sin16s::usinx#1 sin16s::return#0 mul16s::a#0 sin16s::usinx#0 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[2]:20 [ mulu16_sel::v2#5 mulu16_sel::v2#4 mulu16_sel::v2#0 mulu16_sel::v2#1 mulu16_sel::v2#3 mul16u::b#2 mul16u::b#0 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ]
reg byte x [ mulu16_sel::select#5 ]
zp[1]:22 [ bitmap_init::$7 ]
reg byte a [ bitmap_init::$4 ]
reg byte a [ bitmap_init::$5 ]
reg byte a [ bitmap_init::$6 ]
zp[4]:23 [ div32u16u::return#0 sin16s_gen2::step#0 div32u16u::return#1 ]
zp[2]:27 [ sin16s_gen2::$8 mul16u::a#3 mul16u::a#6 mul16u::a#2 mul16u::a#0 mul16u::a#1 ]
reg byte a [ wrap_y::return#0 ]
reg byte x [ render_sine::ypos#0 ]
reg byte a [ wrap_y::return#1 ]
reg byte x [ render_sine::ypos2#0 ]
zp[4]:29 [ sin16s::$4 mul16u::mb#2 mul16u::mb#0 mul16u::mb#1 ]
zp[2]:33 [ mul16s::$6 mul16s::$11 sin16s::x1#0 div32u16u::quotient_hi#0 render_sine::$11 render_sine::$4 ]
reg byte a [ wrap_y::return#2 ]
zp[2]:35 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 mulu16_sel::return#0 mulu16_sel::return#12 mulu16_sel::return#2 sin16s::x3_6#0 mulu16_sel::return#11 sin16s::x5#0 sin16s::x5_128#0 ]
zp[2]:37 [ bitmap_plot::$1 mulu16_sel::v1#5 mulu16_sel::v1#4 mulu16_sel::v1#0 mulu16_sel::v1#1 mulu16_sel::v1#2 mulu16_sel::v1#3 sin16s::x3#0 sin16s::x2#0 sin16s::x4#0 mulu16_sel::return#1 mulu16_sel::return#10 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#0 ]
reg byte x [ bitmap_plot::$2 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ mul16u::$1 ]
