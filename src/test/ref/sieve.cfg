@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::toD0181
main::toD0181: scope:[main]  from main
  [5] phi()
  to:main::@14
main::@14: scope:[main]  from main::toD0181
  [6] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0
  [7] call print_cls 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [8] phi()
  [9] call print_str 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [10] phi()
  [11] call print_ln 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [12] (byte*) print_char_cursor#88 ← (byte*) print_line_cursor#1
  [13] call print_str 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [14] phi()
  [15] call print_uint_decimal 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [16] phi()
  [17] call print_ln 
  to:main::@20
main::@20: scope:[main]  from main::@19
  [18] phi()
  [19] call memset 
  to:main::@21
main::@21: scope:[main]  from main::@20
  [20] phi()
  [21] call clock_start 
  to:main::@1
main::@1: scope:[main]  from main::@21 main::@4
  [22] (byte*) main::sieve_i#2 ← phi( main::@21/(const byte*) sieve+(word) 2 main::@4/(byte*) main::sieve_i#1 )
  [22] (word) main::i#12 ← phi( main::@21/(word) 2 main::@4/(word) main::i#2 )
  [23] if((word) main::i#12<(const nomodify byte) SQRT_COUNT) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [24] phi()
  [25] call clock 
  [26] (dword) clock::return#2 ← (dword) clock::return#0
  to:main::@22
main::@22: scope:[main]  from main::@3
  [27] (dword~) main::$10 ← (dword) clock::return#2
  [28] (dword) main::cyclecount#0 ← (dword~) main::$10 - (const nomodify dword) CLOCKS_PER_INIT
  [29] (dword) div32u16u::dividend#0 ← (dword) main::cyclecount#0
  [30] call div32u16u 
  [31] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
  to:main::@23
main::@23: scope:[main]  from main::@22
  [32] (dword~) main::$12 ← (dword) div32u16u::return#2
  [33] (word) main::sec100s#0 ← (word)(dword~) main::$12
  [34] (byte*) print_char_cursor#89 ← (byte*) print_line_cursor#1
  [35] call print_str 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [36] (word) print_uint_decimal::w#1 ← (word) main::sec100s#0
  [37] call print_uint_decimal 
  to:main::@25
main::@25: scope:[main]  from main::@24
  [38] phi()
  [39] call print_str 
  to:main::@26
main::@26: scope:[main]  from main::@25
  [40] (dword) print_ulong_decimal::w#0 ← (dword) main::cyclecount#0
  [41] call print_ulong_decimal 
  to:main::@27
main::@27: scope:[main]  from main::@26
  [42] phi()
  [43] call print_ln 
  to:main::@8
main::@8: scope:[main]  from main::@11 main::@27
  [44] (byte*) print_char_cursor#63 ← phi( main::@11/(byte*) print_char_cursor#77 main::@27/(byte*) print_line_cursor#1 )
  [44] (word) main::i#10 ← phi( main::@11/(word) main::i#3 main::@27/(byte) 2 )
  [45] if((word) main::i#10<(word) $514) goto main::@9
  to:main::@10
main::@10: scope:[main]  from main::@8
  [46] (byte*) print_char_cursor#87 ← (byte*) print_char_cursor#63
  [47] call print_str 
  to:main::@13
main::@13: scope:[main]  from main::@10 main::@13
  [48] *((const nomodify byte*) SCREEN+(word) $3e7) ← ++ *((const nomodify byte*) SCREEN+(word) $3e7)
  to:main::@13
main::@9: scope:[main]  from main::@8
  [49] (byte*~) main::$33 ← (const byte*) sieve + (word) main::i#10
  [50] if((byte) 0!=*((byte*~) main::$33)) goto main::@11
  to:main::@12
main::@12: scope:[main]  from main::@9
  [51] (word) print_uint_decimal::w#2 ← (word) main::i#10
  [52] (byte*) print_char_cursor#95 ← (byte*) print_char_cursor#63
  [53] call print_uint_decimal 
  to:main::@28
main::@28: scope:[main]  from main::@12
  [54] phi()
  [55] call print_char 
  to:main::@11
main::@11: scope:[main]  from main::@28 main::@9
  [56] (byte*) print_char_cursor#77 ← phi( main::@28/(byte*) print_char_cursor#10 main::@9/(byte*) print_char_cursor#63 )
  [57] (word) main::i#3 ← ++ (word) main::i#10
  to:main::@8
main::@2: scope:[main]  from main::@1
  [58] if((byte) 0!=*((byte*) main::sieve_i#2)) goto main::@4
  to:main::@7
main::@7: scope:[main]  from main::@2
  [59] (word) main::j#0 ← (word) main::i#12 << (byte) 1
  [60] (byte*) main::s#0 ← (const byte*) sieve + (word) main::j#0
  to:main::@5
main::@5: scope:[main]  from main::@6 main::@7
  [61] (byte*) main::s#2 ← phi( main::@6/(byte*) main::s#1 main::@7/(byte*) main::s#0 )
  [61] (word) main::j#2 ← phi( main::@6/(word) main::j#1 main::@7/(word) main::j#0 )
  [62] if((word) main::j#2<(const nomodify word) COUNT) goto main::@6
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@5
  [63] (word) main::i#2 ← ++ (word) main::i#12
  [64] (byte*) main::sieve_i#1 ← ++ (byte*) main::sieve_i#2
  to:main::@1
main::@6: scope:[main]  from main::@5
  [65] *((byte*) main::s#2) ← (byte) 1
  [66] (byte*) main::s#1 ← (byte*) main::s#2 + (word) main::i#12
  [67] (word) main::j#1 ← (word) main::j#2 + (word) main::i#12
  to:main::@5

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from main::@28 print_str::@2
  [68] (byte) print_char::ch#2 ← phi( main::@28/(byte) ' ' print_str::@2/(byte) print_char::ch#0 )
  [69] *((byte*) print_char_cursor#2) ← (byte) print_char::ch#2
  [70] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#2
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [71] return 
  to:@return

(void()) print_uint_decimal((word) print_uint_decimal::w)
print_uint_decimal: scope:[print_uint_decimal]  from main::@12 main::@18 main::@24
  [72] (byte*) print_char_cursor#59 ← phi( main::@12/(byte*) print_char_cursor#95 main::@18/(byte*) print_char_cursor#2 main::@24/(byte*) print_char_cursor#2 )
  [72] (word) print_uint_decimal::w#3 ← phi( main::@12/(word) print_uint_decimal::w#2 main::@18/(const nomodify word) COUNT main::@24/(word) print_uint_decimal::w#1 )
  [73] (word) utoa::value#1 ← (word) print_uint_decimal::w#3
  [74] call utoa 
  to:print_uint_decimal::@1
print_uint_decimal::@1: scope:[print_uint_decimal]  from print_uint_decimal
  [75] phi()
  [76] call print_str 
  to:print_uint_decimal::@return
print_uint_decimal::@return: scope:[print_uint_decimal]  from print_uint_decimal::@1
  [77] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from main::@10 main::@15 main::@17 main::@23 main::@25 print_uint_decimal::@1 print_ulong_decimal::@1
  [78] (byte*) print_char_cursor#67 ← phi( main::@10/(byte*) print_char_cursor#87 main::@15/(byte*) 1024 main::@17/(byte*) print_char_cursor#88 main::@23/(byte*) print_char_cursor#89 main::@25/(byte*) print_char_cursor#2 print_uint_decimal::@1/(byte*) print_char_cursor#59 print_ulong_decimal::@1/(byte*) print_char_cursor#2 )
  [78] (byte*) print_str::str#11 ← phi( main::@10/(const byte*) main::str4 main::@15/(const byte*) main::str main::@17/(const byte*) main::str1 main::@23/(const byte*) main::str2 main::@25/(const byte*) main::str3 print_uint_decimal::@1/(const byte*) decimal_digits print_ulong_decimal::@1/(const byte*) decimal_digits_long )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [79] (byte*) print_char_cursor#2 ← phi( print_str/(byte*) print_char_cursor#67 print_str::@3/(byte*) print_char_cursor#94 )
  [79] (byte*) print_str::str#10 ← phi( print_str/(byte*) print_str::str#11 print_str::@3/(byte*) print_str::str#0 )
  [80] if((byte) 0!=*((byte*) print_str::str#10)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [81] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [82] (byte) print_char::ch#0 ← *((byte*) print_str::str#10)
  [83] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [84] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#10
  [85] (byte*) print_char_cursor#94 ← (byte*) print_char_cursor#10
  to:print_str::@1

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from print_uint_decimal
  [86] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [87] (byte*) utoa::buffer#11 ← phi( utoa::@4/(byte*) utoa::buffer#14 utoa/(const byte*) decimal_digits )
  [87] (byte) utoa::started#2 ← phi( utoa::@4/(byte) utoa::started#4 utoa/(byte) 0 )
  [87] (word) utoa::value#2 ← phi( utoa::@4/(word) utoa::value#6 utoa/(word) utoa::value#1 )
  [87] (byte) utoa::digit#2 ← phi( utoa::@4/(byte) utoa::digit#1 utoa/(byte) 0 )
  [88] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [89] (byte~) utoa::$11 ← (byte)(word) utoa::value#2
  [90] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [91] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  [92] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [93] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [94] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [95] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10)
  [96] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [97] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [98] (byte*) utoa::buffer#14 ← phi( utoa::@7/(byte*) utoa::buffer#11 utoa::@6/(byte*) utoa::buffer#4 )
  [98] (byte) utoa::started#4 ← phi( utoa::@7/(byte) utoa::started#2 utoa::@6/(byte) 1 )
  [98] (word) utoa::value#6 ← phi( utoa::@7/(word) utoa::value#2 utoa::@6/(word) utoa::value#0 )
  [99] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [100] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [101] (word) utoa_append::value#0 ← (word) utoa::value#2
  [102] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [103] call utoa_append 
  [104] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [105] (word) utoa::value#0 ← (word) utoa_append::return#0
  [106] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11
  to:utoa::@4

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [107] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [108] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [108] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [109] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [110] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [111] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [112] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [113] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@16 main::@19 main::@27
  [114] (byte*) print_line_cursor#21 ← phi( main::@16/(byte*) 1024 main::@19/(byte*) print_line_cursor#1 main::@27/(byte*) print_line_cursor#1 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [115] (byte*) print_line_cursor#11 ← phi( print_ln/(byte*) print_line_cursor#21 print_ln::@1/(byte*) print_line_cursor#1 )
  [116] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#11 + (byte) $28
  [117] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#2) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [118] return 
  to:@return

(void()) print_ulong_decimal((dword) print_ulong_decimal::w)
print_ulong_decimal: scope:[print_ulong_decimal]  from main::@26
  [119] (dword) ultoa::value#1 ← (dword) print_ulong_decimal::w#0
  [120] call ultoa 
  to:print_ulong_decimal::@1
print_ulong_decimal::@1: scope:[print_ulong_decimal]  from print_ulong_decimal
  [121] phi()
  [122] call print_str 
  to:print_ulong_decimal::@return
print_ulong_decimal::@return: scope:[print_ulong_decimal]  from print_ulong_decimal::@1
  [123] return 
  to:@return

(void()) ultoa((dword) ultoa::value , (byte*) ultoa::buffer , (byte) ultoa::radix)
ultoa: scope:[ultoa]  from print_ulong_decimal
  [124] phi()
  to:ultoa::@1
ultoa::@1: scope:[ultoa]  from ultoa ultoa::@4
  [125] (byte*) ultoa::buffer#11 ← phi( ultoa::@4/(byte*) ultoa::buffer#14 ultoa/(const byte*) decimal_digits_long )
  [125] (byte) ultoa::started#2 ← phi( ultoa::@4/(byte) ultoa::started#4 ultoa/(byte) 0 )
  [125] (dword) ultoa::value#2 ← phi( ultoa::@4/(dword) ultoa::value#6 ultoa/(dword) ultoa::value#1 )
  [125] (byte) ultoa::digit#2 ← phi( ultoa::@4/(byte) ultoa::digit#1 ultoa/(byte) 0 )
  [126] if((byte) ultoa::digit#2<(const byte) ultoa::max_digits#1-(byte) 1) goto ultoa::@2
  to:ultoa::@3
ultoa::@3: scope:[ultoa]  from ultoa::@1
  [127] (byte~) ultoa::$11 ← (byte)(dword) ultoa::value#2
  [128] *((byte*) ultoa::buffer#11) ← *((const byte*) DIGITS + (byte~) ultoa::$11)
  [129] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11
  [130] *((byte*) ultoa::buffer#3) ← (byte) 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@3
  [131] return 
  to:@return
ultoa::@2: scope:[ultoa]  from ultoa::@1
  [132] (byte~) ultoa::$10 ← (byte) ultoa::digit#2 << (byte) 2
  [133] (dword) ultoa::digit_value#0 ← *((const dword*) RADIX_DECIMAL_VALUES_LONG + (byte~) ultoa::$10)
  [134] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@5
  to:ultoa::@7
ultoa::@7: scope:[ultoa]  from ultoa::@2
  [135] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@5
  to:ultoa::@4
ultoa::@4: scope:[ultoa]  from ultoa::@6 ultoa::@7
  [136] (byte*) ultoa::buffer#14 ← phi( ultoa::@7/(byte*) ultoa::buffer#11 ultoa::@6/(byte*) ultoa::buffer#4 )
  [136] (byte) ultoa::started#4 ← phi( ultoa::@7/(byte) ultoa::started#2 ultoa::@6/(byte) 1 )
  [136] (dword) ultoa::value#6 ← phi( ultoa::@7/(dword) ultoa::value#2 ultoa::@6/(dword) ultoa::value#0 )
  [137] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2
  to:ultoa::@1
ultoa::@5: scope:[ultoa]  from ultoa::@2 ultoa::@7
  [138] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11
  [139] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2
  [140] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
  [141] call ultoa_append 
  [142] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
  to:ultoa::@6
ultoa::@6: scope:[ultoa]  from ultoa::@5
  [143] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
  [144] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#11
  to:ultoa::@4

(dword()) ultoa_append((byte*) ultoa_append::buffer , (dword) ultoa_append::value , (dword) ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@5
  [145] phi()
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  [146] (byte) ultoa_append::digit#2 ← phi( ultoa_append/(byte) 0 ultoa_append::@2/(byte) ultoa_append::digit#1 )
  [146] (dword) ultoa_append::value#2 ← phi( ultoa_append/(dword) ultoa_append::value#0 ultoa_append::@2/(dword) ultoa_append::value#1 )
  [147] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  [148] *((byte*) ultoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) ultoa_append::digit#2)
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  [149] return 
  to:@return
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  [150] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2
  [151] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0
  to:ultoa_append::@1

(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
div32u16u: scope:[div32u16u]  from main::@22
  [152] (word) divr16u::dividend#1 ← > (dword) div32u16u::dividend#0
  [153] call divr16u 
  [154] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  [155] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2
  [156] (word) divr16u::dividend#2 ← < (dword) div32u16u::dividend#0
  [157] (word) divr16u::rem#4 ← (word) rem16u#1
  [158] call divr16u 
  [159] (word) divr16u::return#3 ← (word) divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  [160] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3
  [161] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  [162] return 
  to:@return

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from div32u16u div32u16u::@1
  [163] (word) divr16u::dividend#5 ← phi( div32u16u/(word) divr16u::dividend#1 div32u16u::@1/(word) divr16u::dividend#2 )
  [163] (word) divr16u::rem#10 ← phi( div32u16u/(byte) 0 div32u16u::@1/(word) divr16u::rem#4 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [164] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [164] (word) divr16u::quotient#3 ← phi( divr16u/(word) 0 divr16u::@3/(word) divr16u::return#0 )
  [164] (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#0 )
  [164] (word) divr16u::rem#5 ← phi( divr16u/(word) divr16u::rem#10 divr16u::@3/(word) divr16u::rem#11 )
  [165] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1
  [166] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  [167] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [168] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [169] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [170] (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [171] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1
  [172] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [173] if((word) divr16u::rem#6<(const word) div32u16u::divisor#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [174] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [175] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) div32u16u::divisor#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [176] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [176] (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  [177] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [178] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [179] (word) rem16u#1 ← (word) divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [180] return 
  to:@return

(dword()) clock()
clock: scope:[clock]  from main::@3
  [181] (dword) clock::return#0 ← (dword) $ffffffff - *((const nomodify dword*) CIA2_TIMER_AB)
  to:clock::@return
clock::@return: scope:[clock]  from clock
  [182] return 
  to:@return

(void()) clock_start()
clock_start: scope:[clock_start]  from main::@21
  [183] *((const nomodify byte*) CIA2_TIMER_A_CONTROL) ← (byte) 0
  [184] *((const nomodify byte*) CIA2_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [185] *((const nomodify dword*) CIA2_TIMER_AB) ← (dword) $ffffffff
  [186] *((const nomodify byte*) CIA2_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START|(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [187] *((const nomodify byte*) CIA2_TIMER_A_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START
  to:clock_start::@return
clock_start::@return: scope:[clock_start]  from clock_start
  [188] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from main::@20 print_cls
  [189] (byte) memset::c#4 ← phi( main::@20/(byte) 0 print_cls/(byte) ' ' )
  [189] (void*) memset::str#3 ← phi( main::@20/(void*)(const byte*) sieve print_cls/(void*)(byte*) 1024 )
  [189] (word) memset::num#2 ← phi( main::@20/(const nomodify word) COUNT print_cls/(word) $3e8 )
  [190] if((word) memset::num#2<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [191] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2
  [192] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [193] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [194] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [195] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [196] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [197] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void()) print_cls()
print_cls: scope:[print_cls]  from main::@14
  [198] phi()
  [199] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [200] return 
  to:@return
