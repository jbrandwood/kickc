
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main main::@7
  [2] (byte*) print_line_cursor#30 ← phi( main::@7/(byte*) print_line_cursor#25 main/(const byte*) print_screen#0 )
  [2] (byte) main::s#7 ← phi( main::@7/(byte) main::s#10 main/(byte) 0 )
  [2] (byte*) print_char_cursor#74 ← phi( main::@7/(byte*) print_char_cursor#65 main/(const byte*) print_screen#0 )
  [2] (byte) main::i#2 ← phi( main::@7/(byte) main::i#1 main/(byte) 0 )
  [3] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1
  [4] (word) main::w1#0 ← *((const word*) words + (byte~) main::$8)
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@6
  [5] (byte*) print_line_cursor#28 ← phi( main::@1/(byte*) print_line_cursor#30 main::@6/(byte*) print_line_cursor#25 )
  [5] (byte) main::s#5 ← phi( main::@1/(byte) main::s#7 main::@6/(byte) main::s#10 )
  [5] (byte*) print_char_cursor#64 ← phi( main::@1/(byte*) print_char_cursor#74 main::@6/(byte*) print_char_cursor#65 )
  [5] (byte) main::j#2 ← phi( main::@1/(byte) 0 main::@6/(byte) main::j#1 )
  [6] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1
  [7] (word) main::w2#0 ← *((const word*) words + (byte~) main::$9)
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [8] (byte*) print_line_cursor#21 ← phi( main::@2/(byte*) print_line_cursor#28 main::@4/(byte*) print_line_cursor#25 )
  [8] (byte) main::s#3 ← phi( main::@2/(byte) main::s#5 main::@4/(byte) main::s#10 )
  [8] (byte*) print_char_cursor#58 ← phi( main::@2/(byte*) print_char_cursor#64 main::@4/(byte*) print_char_cursor#65 )
  [8] (byte) main::op#2 ← phi( main::@2/(byte) 0 main::@4/(byte) main::op#1 )
  [9] (word) compare::w1#0 ← (word) main::w1#0
  [10] (word) compare::w2#0 ← (word) main::w2#0
  [11] (byte) compare::op#0 ← (byte) main::op#2
  [12] call compare 
  to:main::@9
main::@9: scope:[main]  from main::@3
  [13] (byte) main::s#1 ← ++ (byte) main::s#3
  [14] if((byte) main::s#1!=(byte) 3) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@9
  [15] phi()
  [16] call print_ln 
  to:main::@10
main::@10: scope:[main]  from main::@5
  [17] (byte*) print_char_cursor#108 ← (byte*) print_line_cursor#0
  to:main::@4
main::@4: scope:[main]  from main::@10 main::@9
  [18] (byte*) print_line_cursor#25 ← phi( main::@9/(byte*) print_line_cursor#21 main::@10/(byte*) print_line_cursor#0 )
  [18] (byte) main::s#10 ← phi( main::@9/(byte) main::s#1 main::@10/(byte) 0 )
  [18] (byte*) print_char_cursor#65 ← phi( main::@9/(byte*) print_char_cursor#10 main::@10/(byte*) print_char_cursor#108 )
  [19] (byte) main::op#1 ← ++ (byte) main::op#2
  [20] if((byte) main::op#1!=(byte) 6) goto main::@3
  to:main::@6
main::@6: scope:[main]  from main::@4
  [21] (byte) main::j#1 ← ++ (byte) main::j#2
  [22] if((byte) main::j#1!=(byte) 3) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  [23] (byte) main::i#1 ← ++ (byte) main::i#2
  [24] if((byte) main::i#1!=(byte) 3) goto main::@1
  to:main::@8
main::@8: scope:[main]  from main::@7 main::@8
  [25] phi()
  to:main::@8

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@5
  [26] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [27] (byte*) print_line_cursor#10 ← phi( print_ln/(byte*) print_line_cursor#21 print_ln::@1/(byte*) print_line_cursor#0 )
  [28] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#10 + (byte) $28
  [29] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#10) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [30] return 
  to:@return

(void()) compare((word) compare::w1 , (word) compare::w2 , (byte) compare::op)
compare: scope:[compare]  from main::@3
  [31] if((byte) compare::op#0==(byte) 0) goto compare::@1
  to:compare::@7
compare::@7: scope:[compare]  from compare
  [32] if((byte) compare::op#0==(byte) 1) goto compare::@2
  to:compare::@8
compare::@8: scope:[compare]  from compare::@7
  [33] if((byte) compare::op#0==(byte) 2) goto compare::@3
  to:compare::@9
compare::@9: scope:[compare]  from compare::@8
  [34] if((byte) compare::op#0==(byte) 3) goto compare::@4
  to:compare::@10
compare::@10: scope:[compare]  from compare::@9
  [35] if((byte) compare::op#0==(byte) 4) goto compare::@5
  to:compare::@11
compare::@11: scope:[compare]  from compare::@10
  [36] if((byte) compare::op#0!=(byte) 5) goto compare::@6
  to:compare::@12
compare::@12: scope:[compare]  from compare::@11
  [37] if((word) compare::w1#0==(word) compare::w2#0) goto compare::@19
  to:compare::@13
compare::@13: scope:[compare]  from compare::@12
  [38] phi()
  to:compare::@19
compare::@19: scope:[compare]  from compare::@12 compare::@13
  [39] (byte) compare::r#12 ← phi( compare::@12/(const nomodify byte) FF compare::@13/(const nomodify byte) TT )
  to:compare::@6
compare::@6: scope:[compare]  from compare::@11 compare::@19 compare::@20 compare::@21 compare::@22 compare::@23 compare::@24
  [40] (byte) compare::r#10 ← phi( compare::@11/(const nomodify byte) FF compare::@19/(byte) compare::r#12 compare::@20/(byte) compare::r#13 compare::@21/(byte) compare::r#14 compare::@22/(byte) compare::r#15 compare::@23/(byte) compare::r#16 compare::@24/(byte) compare::r#17 )
  [40] (byte*) compare::ops#7 ← phi( compare::@11/(byte*) 0 compare::@19/(const byte*) compare::ops#1 compare::@20/(const byte*) compare::ops#2 compare::@21/(const byte*) compare::ops#3 compare::@22/(const byte*) compare::ops#4 compare::@23/(const byte*) compare::ops#5 compare::@24/(const byte*) compare::ops#6 )
  [41] (word) print_uint::w#0 ← (word) compare::w1#0
  [42] call print_uint 
  to:compare::@25
compare::@25: scope:[compare]  from compare::@6
  [43] (byte*) print_str::str#1 ← (byte*) compare::ops#7
  [44] call print_str 
  to:compare::@26
compare::@26: scope:[compare]  from compare::@25
  [45] (word) print_uint::w#1 ← (word) compare::w2#0
  [46] call print_uint 
  to:compare::@27
compare::@27: scope:[compare]  from compare::@26
  [47] (byte) print_char::ch#3 ← (byte) compare::r#10
  [48] call print_char 
  to:compare::@28
compare::@28: scope:[compare]  from compare::@27
  [49] phi()
  [50] call print_char 
  to:compare::@return
compare::@return: scope:[compare]  from compare::@28
  [51] return 
  to:@return
compare::@5: scope:[compare]  from compare::@10
  [52] if((word) compare::w1#0!=(word) compare::w2#0) goto compare::@20
  to:compare::@14
compare::@14: scope:[compare]  from compare::@5
  [53] phi()
  to:compare::@20
compare::@20: scope:[compare]  from compare::@14 compare::@5
  [54] (byte) compare::r#13 ← phi( compare::@14/(const nomodify byte) TT compare::@5/(const nomodify byte) FF )
  to:compare::@6
compare::@4: scope:[compare]  from compare::@9
  [55] if((word) compare::w1#0<(word) compare::w2#0) goto compare::@21
  to:compare::@15
compare::@15: scope:[compare]  from compare::@4
  [56] phi()
  to:compare::@21
compare::@21: scope:[compare]  from compare::@15 compare::@4
  [57] (byte) compare::r#14 ← phi( compare::@15/(const nomodify byte) TT compare::@4/(const nomodify byte) FF )
  to:compare::@6
compare::@3: scope:[compare]  from compare::@8
  [58] if((word) compare::w1#0<=(word) compare::w2#0) goto compare::@22
  to:compare::@16
compare::@16: scope:[compare]  from compare::@3
  [59] phi()
  to:compare::@22
compare::@22: scope:[compare]  from compare::@16 compare::@3
  [60] (byte) compare::r#15 ← phi( compare::@16/(const nomodify byte) TT compare::@3/(const nomodify byte) FF )
  to:compare::@6
compare::@2: scope:[compare]  from compare::@7
  [61] if((word) compare::w1#0>(word) compare::w2#0) goto compare::@23
  to:compare::@17
compare::@17: scope:[compare]  from compare::@2
  [62] phi()
  to:compare::@23
compare::@23: scope:[compare]  from compare::@17 compare::@2
  [63] (byte) compare::r#16 ← phi( compare::@17/(const nomodify byte) TT compare::@2/(const nomodify byte) FF )
  to:compare::@6
compare::@1: scope:[compare]  from compare
  [64] if((word) compare::w1#0>=(word) compare::w2#0) goto compare::@24
  to:compare::@18
compare::@18: scope:[compare]  from compare::@1
  [65] phi()
  to:compare::@24
compare::@24: scope:[compare]  from compare::@1 compare::@18
  [66] (byte) compare::r#17 ← phi( compare::@1/(const nomodify byte) FF compare::@18/(const nomodify byte) TT )
  to:compare::@6

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from compare::@27 compare::@28 print_str::@2 print_uchar print_uchar::@1
  [67] (byte*) print_char_cursor#37 ← phi( compare::@27/(byte*) print_char_cursor#10 compare::@28/(byte*) print_char_cursor#10 print_str::@2/(byte*) print_char_cursor#10 print_uchar/(byte*) print_char_cursor#56 print_uchar::@1/(byte*) print_char_cursor#10 )
  [67] (byte) print_char::ch#5 ← phi( compare::@27/(byte) print_char::ch#3 compare::@28/(byte) ' ' print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#1 print_uchar::@1/(byte) print_char::ch#2 )
  [68] *((byte*) print_char_cursor#37) ← (byte) print_char::ch#5
  [69] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#37
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [70] return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from compare::@26 compare::@6
  [71] (byte*) print_char_cursor#55 ← phi( compare::@26/(byte*) print_char_cursor#10 compare::@6/(byte*) print_char_cursor#58 )
  [71] (word) print_uint::w#2 ← phi( compare::@26/(word) print_uint::w#1 compare::@6/(word) print_uint::w#0 )
  [72] (byte) print_uchar::b#0 ← > (word) print_uint::w#2
  [73] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [74] (byte) print_uchar::b#1 ← < (word) print_uint::w#2
  [75] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [76] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  [77] (byte*) print_char_cursor#56 ← phi( print_uint/(byte*) print_char_cursor#55 print_uint::@1/(byte*) print_char_cursor#10 )
  [77] (byte) print_uchar::b#2 ← phi( print_uint/(byte) print_uchar::b#0 print_uint::@1/(byte) print_uchar::b#1 )
  [78] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4
  [79] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [80] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [81] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f
  [82] (byte) print_char::ch#2 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [83] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [84] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from compare::@25
  [85] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [86] (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#1 print_str::@3/(byte*) print_str::str#0 )
  [87] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [88] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [89] (byte) print_char::ch#0 ← *((byte*) print_str::str#2)
  [90] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [91] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2
  to:print_str::@1

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [92] phi()
  [93] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [94] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [95] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [96] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [97] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [98] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [99] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [100] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1
