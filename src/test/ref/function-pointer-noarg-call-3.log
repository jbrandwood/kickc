Resolved forward reference fn1 to void fn1()
Resolved forward reference fn2 to void fn2()

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  main::i#3 = phi( main/main::i#0, main::@3/main::i#4 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::i#2 = phi( main::@1/main::i#3 )
  main::i#1 = ++ main::i#2
  getfn::b#0 = main::i#1
  call getfn 
  getfn::return#0 = getfn::return#3
  to:main::@3
main::@3: scope:[main]  from main::@2
  main::i#4 = phi( main::@2/main::i#1 )
  getfn::return#4 = phi( main::@2/getfn::return#0 )
  main::$0 = getfn::return#4
  call *main::$0 
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void()* getfn(byte getfn::b)
getfn: scope:[getfn]  from main::@2
  getfn::b#1 = phi( main::@2/getfn::b#0 )
  getfn::$0 = getfn::b#1 & 1
  getfn::$1 = getfn::$0 == 0
  if(getfn::$1) goto getfn::@1
  to:getfn::@2
getfn::@1: scope:[getfn]  from getfn
  getfn::return#1 = &fn1
  to:getfn::@return
getfn::@2: scope:[getfn]  from getfn
  getfn::return#2 = &fn2
  to:getfn::@return
getfn::@return: scope:[getfn]  from getfn::@1 getfn::@2
  getfn::return#5 = phi( getfn::@1/getfn::return#1, getfn::@2/getfn::return#2 )
  getfn::return#3 = getfn::return#5
  return 
  to:@return

void fn1()
fn1: scope:[fn1]  from
  *fn1::BORDER_COLOR = ++ *fn1::BORDER_COLOR
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  return 
  to:@return

void fn2()
fn2: scope:[fn2]  from
  *fn2::BG_COLOR = ++ *fn2::BG_COLOR
  to:fn2::@return
fn2::@return: scope:[fn2]  from fn2
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void fn1()
constant byte* const fn1::BORDER_COLOR = (byte*)$d020
void fn2()
constant byte* const fn2::BG_COLOR = (byte*)$d021
void()* getfn(byte getfn::b)
number~ getfn::$0
bool~ getfn::$1
byte getfn::b
byte getfn::b#0
byte getfn::b#1
void()* getfn::return
void()* getfn::return#0
void()* getfn::return#1
void()* getfn::return#2
void()* getfn::return#3
void()* getfn::return#4
void()* getfn::return#5
void main()
void()*~ main::$0
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i#4

Adding number conversion cast (unumber) 1 in getfn::$0 = getfn::b#1 & 1
Adding number conversion cast (unumber) getfn::$0 in getfn::$0 = getfn::b#1 & (unumber)1
Adding number conversion cast (unumber) 0 in getfn::$1 = getfn::$0 == 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53281
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in getfn::$0 = getfn::b#1 & 1
Alias main::i#2 = main::i#3 
Alias getfn::return#0 = getfn::return#4 
Alias main::i#1 = main::i#4 
Alias getfn::return#3 = getfn::return#5 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values getfn::b#1 getfn::b#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition getfn::$1 [13] if(getfn::$0==0) goto getfn::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Constant getfn::return#1 = &fn1
Constant getfn::return#2 = &fn2
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [2] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::i#0
Inlining constant with var siblings getfn::return#1
Inlining constant with var siblings getfn::return#2
Constant inlined getfn::return#1 = &fn1
Constant inlined main::i#0 = 0
Constant inlined getfn::return#2 = &fn2
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of getfn::@2
Adding NOP phi() at start of getfn::@1
CALL GRAPH
Calls in [main] to getfn:8 

Created 2 initial phi equivalence classes
Coalesced [12] main::i#5 = main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label getfn::@2
Adding NOP phi() at start of main
Adding NOP phi() at start of getfn::@1

FINAL CONTROL FLOW GRAPH

void fn2()
fn2: scope:[fn2]  from
  [0] *fn2::BG_COLOR = ++ *fn2::BG_COLOR
  to:fn2::@return
fn2::@return: scope:[fn2]  from fn2
  [1] return 
  to:@return

void fn1()
fn1: scope:[fn1]  from
  [2] *fn1::BORDER_COLOR = ++ *fn1::BORDER_COLOR
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  [3] return 
  to:@return

void main()
main: scope:[main]  from
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [5] main::i#2 = phi( main/0, main::@3/main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] main::i#1 = ++ main::i#2
  [7] getfn::b#0 = main::i#1
  [8] call getfn 
  [9] getfn::return#0 = getfn::return#3
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] main::$0 = getfn::return#0
  [11] call *main::$0 
  to:main::@1

void()* getfn(byte getfn::b)
getfn: scope:[getfn]  from main::@2
  [12] getfn::$0 = getfn::b#0 & 1
  [13] if(getfn::$0==0) goto getfn::@1
  to:getfn::@return
getfn::@1: scope:[getfn]  from getfn
  [14] phi()
  to:getfn::@return
getfn::@return: scope:[getfn]  from getfn getfn::@1
  [15] getfn::return#3 = phi( getfn::@1/&fn1, getfn/&fn2 )
  [16] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void fn1()
void fn2()
void()* getfn(byte getfn::b)
byte~ getfn::$0 202.0
byte getfn::b
byte getfn::b#0 112.0
void()* getfn::return
void()* getfn::return#0 22.0
void()* getfn::return#3 3.6666666666666665
void main()
void()*~ main::$0 11.0
byte main::i
byte main::i#1 5.5
byte main::i#2 22.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ getfn::return#3 ]
Added variable getfn::b#0 to live range equivalence class [ getfn::b#0 ]
Added variable getfn::return#0 to live range equivalence class [ getfn::return#0 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable getfn::$0 to live range equivalence class [ getfn::$0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ getfn::return#3 ]
[ getfn::b#0 ]
[ getfn::return#0 ]
[ main::$0 ]
[ getfn::$0 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:3 [ getfn::return#3 ]
Allocated zp[1]:5 [ getfn::b#0 ]
Allocated zp[2]:6 [ getfn::return#0 ]
Allocated zp[2]:8 [ main::$0 ]
Allocated zp[1]:10 [ getfn::$0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [9] getfn::return#0 = getfn::return#3 [ main::i#1 getfn::return#0 ] (  [ main::i#1 getfn::return#0 ] { { getfn::b#0 = main::i#1 } { getfn::return#0 = getfn::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [10] main::$0 = getfn::return#0 [ main::i#1 main::$0 ] (  [ main::i#1 main::$0 ] { }  ) always clobbers reg byte a 
Statement [11] call *main::$0  [ main::i#1 ] (  [ main::i#1 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [9] getfn::return#0 = getfn::return#3 [ main::i#1 getfn::return#0 ] (  [ main::i#1 getfn::return#0 ] { { getfn::b#0 = main::i#1 } { getfn::return#0 = getfn::return#3 } }  ) always clobbers reg byte a 
Statement [10] main::$0 = getfn::return#0 [ main::i#1 main::$0 ] (  [ main::i#1 main::$0 ] { }  ) always clobbers reg byte a 
Statement [11] call *main::$0  [ main::i#1 ] (  [ main::i#1 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , 
Potential registers zp[2]:3 [ getfn::return#3 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ getfn::b#0 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:6 [ getfn::return#0 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ main::$0 ] : zp[2]:8 , 
Potential registers zp[1]:10 [ getfn::$0 ] : zp[1]:10 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [getfn] 202: zp[1]:10 [ getfn::$0 ] 112: zp[1]:5 [ getfn::b#0 ] 22: zp[2]:6 [ getfn::return#0 ] 3.67: zp[2]:3 [ getfn::return#3 ] 
Uplift Scope [main] 27.5: zp[1]:2 [ main::i#2 main::i#1 ] 11: zp[2]:8 [ main::$0 ] 
Uplift Scope [fn1] 
Uplift Scope [fn2] 
Uplift Scope [] 

Uplifting [getfn] best 731 combination reg byte a [ getfn::$0 ] reg byte a [ getfn::b#0 ] zp[2]:6 [ getfn::return#0 ] zp[2]:3 [ getfn::return#3 ] 
Uplifting [main] best 731 combination zp[1]:2 [ main::i#2 main::i#1 ] zp[2]:8 [ main::$0 ] 
Uplifting [fn1] best 731 combination 
Uplifting [fn2] best 731 combination 
Uplifting [] best 731 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 731 combination zp[1]:2 [ main::i#2 main::i#1 ] 
Coalescing zero page register [ zp[2]:3 [ getfn::return#3 ] ] with [ zp[2]:6 [ getfn::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:3 [ getfn::return#3 getfn::return#0 ] ] with [ zp[2]:8 [ main::$0 ] ] - score: 1

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests creating, assigning returning and calling pointers to non-args no-return functions
  // Upstart
  // Commodore 64 PRG executable file
.file [name="function-pointer-noarg-call-3.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // fn2
fn2: {
    .label BG_COLOR = $d021
    // [0] *fn2::BG_COLOR = ++ *fn2::BG_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    jmp __breturn
    // fn2::@return
  __breturn:
    // [1] return 
    rts
}
  // fn1
fn1: {
    .label BORDER_COLOR = $d020
    // [2] *fn1::BORDER_COLOR = ++ *fn1::BORDER_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDER_COLOR
    jmp __breturn
    // fn1::@return
  __breturn:
    // [3] return 
    rts
}
  // main
main: {
    .label __0 = 3
    .label i = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    jmp __b2
    // main::@2
  __b2:
    // [6] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [7] getfn::b#0 = main::i#1 -- vbuaa=vbuz1 
    lda.z i
    // [8] call getfn 
    jsr getfn
    // [9] getfn::return#0 = getfn::return#3
    jmp __b3
    // main::@3
  __b3:
    // [10] main::$0 = getfn::return#0
    // [11] call *main::$0 
    jsr bi___0
    // [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [5] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp __b1
  bi___0:
    jmp (__0)
}
  // getfn
// declare getfn as function (char b) returning pointer to function (void) returning void
// getfn(byte register(A) b)
getfn: {
    .label return = 3
    // [12] getfn::$0 = getfn::b#0 & 1 -- vbuaa=vbuaa_band_vbuc1 
    and #1
    // [13] if(getfn::$0==0) goto getfn::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1_from_getfn
    // [15] phi from getfn to getfn::@return [phi:getfn->getfn::@return]
  __breturn_from_getfn:
    // [15] phi getfn::return#3 = &fn2 [phi:getfn->getfn::@return#0] -- pprz1=pprc1 
    lda #<fn2
    sta.z return
    lda #>fn2
    sta.z return+1
    jmp __breturn
    // [14] phi from getfn to getfn::@1 [phi:getfn->getfn::@1]
  __b1_from_getfn:
    jmp __b1
    // getfn::@1
  __b1:
    // [15] phi from getfn::@1 to getfn::@return [phi:getfn::@1->getfn::@return]
  __breturn_from___b1:
    // [15] phi getfn::return#3 = &fn1 [phi:getfn::@1->getfn::@return#0] -- pprz1=pprc1 
    lda #<fn1
    sta.z return
    lda #>fn1
    sta.z return+1
    jmp __breturn
    // getfn::@return
  __breturn:
    // [16] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1 with __b2
Replacing label __b1_from_getfn with __b1
Removing instruction __b1:
Removing instruction __b1_from_getfn:
Removing instruction __breturn_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __breturn_from_getfn:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void fn1()
constant byte* const fn1::BORDER_COLOR = (byte*) 53280
void fn2()
constant byte* const fn2::BG_COLOR = (byte*) 53281
void()* getfn(byte getfn::b)
byte~ getfn::$0 reg byte a 202.0
byte getfn::b
byte getfn::b#0 reg byte a 112.0
void()* getfn::return
void()* getfn::return#0 return zp[2]:3 22.0
void()* getfn::return#3 return zp[2]:3 3.6666666666666665
void main()
void()*~ main::$0 zp[2]:3 11.0
byte main::i
byte main::i#1 i zp[1]:2 5.5
byte main::i#2 i zp[1]:2 22.0

zp[1]:2 [ main::i#2 main::i#1 ]
zp[2]:3 [ getfn::return#3 getfn::return#0 main::$0 ]
reg byte a [ getfn::b#0 ]
reg byte a [ getfn::$0 ]


FINAL ASSEMBLER
Score: 392

  // File Comments
// Tests creating, assigning returning and calling pointers to non-args no-return functions
  // Upstart
  // Commodore 64 PRG executable file
.file [name="function-pointer-noarg-call-3.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // fn2
fn2: {
    .label BG_COLOR = $d021
    // (*BG_COLOR)++;
    // [0] *fn2::BG_COLOR = ++ *fn2::BG_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    // fn2::@return
    // }
    // [1] return 
    rts
}
  // fn1
fn1: {
    .label BORDER_COLOR = $d020
    // (*BORDER_COLOR)++;
    // [2] *fn1::BORDER_COLOR = ++ *fn1::BORDER_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDER_COLOR
    // fn1::@return
    // }
    // [3] return 
    rts
}
  // main
main: {
    .label __0 = 3
    .label i = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // main::@1
    // main::@2
  __b2:
    // (*getfn(++i))();
    // [6] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // getfn(++i)
    // [7] getfn::b#0 = main::i#1 -- vbuaa=vbuz1 
    lda.z i
    // [8] call getfn 
    jsr getfn
    // [9] getfn::return#0 = getfn::return#3
    // main::@3
    // [10] main::$0 = getfn::return#0
    // (*getfn(++i))()
    // [11] call *main::$0 
    jsr bi___0
    // [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [5] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp __b2
  bi___0:
    jmp (__0)
}
  // getfn
// declare getfn as function (char b) returning pointer to function (void) returning void
// getfn(byte register(A) b)
getfn: {
    .label return = 3
    // b&1
    // [12] getfn::$0 = getfn::b#0 & 1 -- vbuaa=vbuaa_band_vbuc1 
    and #1
    // if((b&1)==0)
    // [13] if(getfn::$0==0) goto getfn::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1
    // [15] phi from getfn to getfn::@return [phi:getfn->getfn::@return]
    // [15] phi getfn::return#3 = &fn2 [phi:getfn->getfn::@return#0] -- pprz1=pprc1 
    lda #<fn2
    sta.z return
    lda #>fn2
    sta.z return+1
    rts
    // [14] phi from getfn to getfn::@1 [phi:getfn->getfn::@1]
    // getfn::@1
  __b1:
    // [15] phi from getfn::@1 to getfn::@return [phi:getfn::@1->getfn::@return]
    // [15] phi getfn::return#3 = &fn1 [phi:getfn::@1->getfn::@return#0] -- pprz1=pprc1 
    lda #<fn1
    sta.z return
    lda #>fn1
    sta.z return+1
    // getfn::@return
    // }
    // [16] return 
    rts
}
  // File Data

