// The screen
byte *SCREEN = $0400;
byte *COLORS = $D800;

byte FILL = 230;

// The total number of voronoi points
byte numpoints = 0;

// Points to create the Voronoi from
byte[$100] XPOS = $1000;
byte[$100] YPOS = $1100;
byte[$100] COLS = $1200;

main();

void main() {
  addpoint(5, 5, 1);
  addpoint(15, 8, 2);
  addpoint(6, 14, 3);
  addpoint(34, 2, 4);
  addpoint(21, 17, 5);
  addpoint(31, 22, 7);
  initscreen();
  do {
    render();
    animate();
  } while(true)
}

void animate() {
    XPOS[0] = XPOS[0]+1;
    if(XPOS[0]==40) {
      XPOS[0] = 0;
    }
    YPOS[0] = YPOS[0]+1;
    if(YPOS[0]==25) {
      YPOS[0] = 0;
    }
    XPOS[1] = XPOS[1]-1;
    if(XPOS[1]==255) {
      XPOS[1] = 40;
    }
    YPOS[2] = YPOS[2]+1;
    if(YPOS[2]==25) {
      YPOS[2] = 0;
    }
    YPOS[3] = YPOS[3]-1;
    if(YPOS[3]==255) {
      YPOS[3] = 25;
      XPOS[3] = XPOS[3]+7;
      if(XPOS[3]>=40) {
        XPOS[3] = XPOS[3]-40;
      }
    }
}

void addpoint(byte x, byte y, byte c) {
  XPOS[numpoints] = x;
  YPOS[numpoints] = y;
  COLS[numpoints] = c;
  numpoints++;
}

void initscreen() {
  for( byte* screen = SCREEN; screen<SCREEN+$03e8; ++screen) {
    *screen = FILL;
  }
}

void render() {
  byte* colline = COLORS;
  for( byte y : 0.. 24) {
    for( byte x : 0..39) {
      byte col = findcol(x, y);
      colline[x] = col;
    }
    colline = colline+40;
  }
}

byte findcol(byte x, byte y) {
  byte mindiff = 255;
  byte mincol = 0;
  for( byte i=0; i<numpoints; ++i) {
     byte xp = XPOS[i];
     byte yp = YPOS[i];
     if(x==xp) {
       if(y==yp) {
         return 0;
       }
     }
     byte diff;
     if(x<xp) {
       diff = xp-x;
     } else {
       diff = x-xp;
     }
     if(y<yp) {
       diff = diff + (yp-y);
     } else {
       diff = diff + (y-yp);
     }
     if(diff<mindiff) {
       mindiff=diff;
       mincol = COLS[i];
     }
  }
  return mincol;
}



Adding pre/post-modifier (byte) numpoints ← ++ (byte) numpoints
Adding pre/post-modifier (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
Adding pre/post-modifier (byte) findcol::i ← ++ (byte) findcol::i
PROGRAM
  (byte*) SCREEN ← (word) 1024
  (byte*) COLORS ← (word) 55296
  (byte) FILL ← (byte) 230
  (byte) numpoints ← (byte) 0
  (byte[256]) XPOS ← (word) 4096
  (byte[256]) YPOS ← (word) 4352
  (byte[256]) COLS ← (word) 4608
  (void~) $0 ← call main 
proc (void()) main()
  (void~) main::$0 ← call addpoint (byte) 5 (byte) 5 (byte) 1 
  (void~) main::$1 ← call addpoint (byte) 15 (byte) 8 (byte) 2 
  (void~) main::$2 ← call addpoint (byte) 6 (byte) 14 (byte) 3 
  (void~) main::$3 ← call addpoint (byte) 34 (byte) 2 (byte) 4 
  (void~) main::$4 ← call addpoint (byte) 21 (byte) 17 (byte) 5 
  (void~) main::$5 ← call addpoint (byte) 31 (byte) 22 (byte) 7 
  (void~) main::$6 ← call initscreen 
main::@1:
  (void~) main::$7 ← call render 
  (void~) main::$8 ← call animate 
  if(true) goto main::@1
main::@return:
  return 
endproc // main()
proc (void()) animate()
  (byte~) animate::$0 ← (byte[256]) XPOS *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  *((byte[256]) XPOS + (byte) 0) ← (byte) 0
animate::@1:
  (byte~) animate::$5 ← (byte[256]) YPOS *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS *idx (byte) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  *((byte[256]) YPOS + (byte) 0) ← (byte) 0
animate::@2:
  (byte~) animate::$10 ← (byte[256]) XPOS *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS *idx (byte) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  *((byte[256]) XPOS + (byte) 1) ← (byte) 40
animate::@3:
  (byte~) animate::$15 ← (byte[256]) YPOS *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS *idx (byte) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  *((byte[256]) YPOS + (byte) 2) ← (byte) 0
animate::@4:
  (byte~) animate::$20 ← (byte[256]) YPOS *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@5
  *((byte[256]) YPOS + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS *idx (byte) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@6
  (byte~) animate::$30 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$31
animate::@6:
animate::@5:
animate::@return:
  return 
endproc // animate()
proc (void()) addpoint((byte) addpoint::x , (byte) addpoint::y , (byte) addpoint::c)
  *((byte[256]) XPOS + (byte) numpoints) ← (byte) addpoint::x
  *((byte[256]) YPOS + (byte) numpoints) ← (byte) addpoint::y
  *((byte[256]) COLS + (byte) numpoints) ← (byte) addpoint::c
  (byte) numpoints ← ++ (byte) numpoints
addpoint::@return:
  return 
endproc // addpoint()
proc (void()) initscreen()
  (byte*) initscreen::screen ← (byte*) SCREEN
initscreen::@1:
  *((byte*) initscreen::screen) ← (byte) FILL
  (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
  (byte*~) initscreen::$0 ← (byte*) SCREEN + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
initscreen::@return:
  return 
endproc // initscreen()
proc (void()) render()
  (byte*) render::colline ← (byte*) COLORS
  (byte) render::y ← (byte) 0
render::@1:
  (byte) render::x ← (byte) 0
render::@2:
  (byte~) render::$0 ← call findcol (byte) render::x (byte) render::y 
  (byte) render::col ← (byte~) render::$0
  *((byte*) render::colline + (byte) render::x) ← (byte) render::col
  (byte) render::x ← ++ (byte) render::x
  (boolean~) render::$1 ← (byte) render::x != (byte) 40
  if((boolean~) render::$1) goto render::@2
  (byte*~) render::$2 ← (byte*) render::colline + (byte) 40
  (byte*) render::colline ← (byte*~) render::$2
  (byte) render::y ← ++ (byte) render::y
  (boolean~) render::$3 ← (byte) render::y != (byte) 25
  if((boolean~) render::$3) goto render::@1
render::@return:
  return 
endproc // render()
proc (byte()) findcol((byte) findcol::x , (byte) findcol::y)
  (byte) findcol::mindiff ← (byte) 255
  (byte) findcol::mincol ← (byte) 0
  (byte) findcol::i ← (byte) 0
findcol::@1:
  (byte~) findcol::$0 ← (byte[256]) XPOS *idx (byte) findcol::i
  (byte) findcol::xp ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS *idx (byte) findcol::i
  (byte) findcol::yp ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x == (byte) findcol::xp
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  (boolean~) findcol::$4 ← (byte) findcol::y == (byte) findcol::yp
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  (byte) findcol::return ← (byte) 0
  goto findcol::@return
findcol::@3:
findcol::@2:
  (boolean~) findcol::$6 ← (byte) findcol::x < (byte) findcol::xp
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  (byte~) findcol::$8 ← (byte) findcol::xp - (byte) findcol::x
  (byte) findcol::diff ← (byte~) findcol::$8
  goto findcol::@5
findcol::@4:
  (byte~) findcol::$9 ← (byte) findcol::x - (byte) findcol::xp
  (byte) findcol::diff ← (byte~) findcol::$9
findcol::@5:
  (boolean~) findcol::$10 ← (byte) findcol::y < (byte) findcol::yp
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  (byte~) findcol::$12 ← (byte) findcol::yp - (byte) findcol::y
  (byte~) findcol::$13 ← (byte) findcol::diff + (byte~) findcol::$12
  (byte) findcol::diff ← (byte~) findcol::$13
  goto findcol::@7
findcol::@6:
  (byte~) findcol::$14 ← (byte) findcol::y - (byte) findcol::yp
  (byte~) findcol::$15 ← (byte) findcol::diff + (byte~) findcol::$14
  (byte) findcol::diff ← (byte~) findcol::$15
findcol::@7:
  (boolean~) findcol::$16 ← (byte) findcol::diff < (byte) findcol::mindiff
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  (byte) findcol::mindiff ← (byte) findcol::diff
  (byte~) findcol::$18 ← (byte[256]) COLS *idx (byte) findcol::i
  (byte) findcol::mincol ← (byte~) findcol::$18
findcol::@8:
  (byte) findcol::i ← ++ (byte) findcol::i
  (boolean~) findcol::$19 ← (byte) findcol::i < (byte) numpoints
  if((boolean~) findcol::$19) goto findcol::@1
  (byte) findcol::return ← (byte) findcol::mincol
  goto findcol::@return
findcol::@return:
  (byte) findcol::return ← (byte) findcol::return
  return (byte) findcol::return
endproc // findcol()

SYMBOLS
(void~) $0
(byte*) COLORS
(byte[256]) COLS
(byte) FILL
(byte*) SCREEN
(byte[256]) XPOS
(byte[256]) YPOS
(void()) addpoint((byte) addpoint::x , (byte) addpoint::y , (byte) addpoint::c)
(label) addpoint::@return
(byte) addpoint::c
(byte) addpoint::x
(byte) addpoint::y
(void()) animate()
(byte~) animate::$0
(byte~) animate::$1
(byte~) animate::$10
(byte~) animate::$11
(byte~) animate::$12
(boolean~) animate::$13
(boolean~) animate::$14
(byte~) animate::$15
(byte~) animate::$16
(byte~) animate::$17
(boolean~) animate::$18
(boolean~) animate::$19
(byte~) animate::$2
(byte~) animate::$20
(byte~) animate::$21
(byte~) animate::$22
(boolean~) animate::$23
(boolean~) animate::$24
(byte~) animate::$25
(byte~) animate::$26
(byte~) animate::$27
(boolean~) animate::$28
(boolean~) animate::$29
(boolean~) animate::$3
(byte~) animate::$30
(byte~) animate::$31
(boolean~) animate::$4
(byte~) animate::$5
(byte~) animate::$6
(byte~) animate::$7
(boolean~) animate::$8
(boolean~) animate::$9
(label) animate::@1
(label) animate::@2
(label) animate::@3
(label) animate::@4
(label) animate::@5
(label) animate::@6
(label) animate::@return
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$0
(byte~) findcol::$1
(boolean~) findcol::$10
(boolean~) findcol::$11
(byte~) findcol::$12
(byte~) findcol::$13
(byte~) findcol::$14
(byte~) findcol::$15
(boolean~) findcol::$16
(boolean~) findcol::$17
(byte~) findcol::$18
(boolean~) findcol::$19
(boolean~) findcol::$2
(boolean~) findcol::$3
(boolean~) findcol::$4
(boolean~) findcol::$5
(boolean~) findcol::$6
(boolean~) findcol::$7
(byte~) findcol::$8
(byte~) findcol::$9
(label) findcol::@1
(label) findcol::@2
(label) findcol::@3
(label) findcol::@4
(label) findcol::@5
(label) findcol::@6
(label) findcol::@7
(label) findcol::@8
(label) findcol::@return
(byte) findcol::diff
(byte) findcol::i
(byte) findcol::mincol
(byte) findcol::mindiff
(byte) findcol::return
(byte) findcol::x
(byte) findcol::xp
(byte) findcol::y
(byte) findcol::yp
(void()) initscreen()
(byte*~) initscreen::$0
(boolean~) initscreen::$1
(label) initscreen::@1
(label) initscreen::@return
(byte*) initscreen::screen
(void()) main()
(void~) main::$0
(void~) main::$1
(void~) main::$2
(void~) main::$3
(void~) main::$4
(void~) main::$5
(void~) main::$6
(void~) main::$7
(void~) main::$8
(label) main::@1
(label) main::@return
(byte) numpoints
(void()) render()
(byte~) render::$0
(boolean~) render::$1
(byte*~) render::$2
(boolean~) render::$3
(label) render::@1
(label) render::@2
(label) render::@return
(byte) render::col
(byte*) render::colline
(byte) render::x
(byte) render::y

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (byte*) COLORS ← (word) 55296
  (byte) FILL ← (byte) 230
  (byte) numpoints ← (byte) 0
  (byte[256]) XPOS ← (word) 4096
  (byte[256]) YPOS ← (word) 4352
  (byte[256]) COLS ← (word) 4608
  (void~) $0 ← call main 
  to:@1
main: scope:[main]  from
  (void~) main::$0 ← call addpoint (byte) 5 (byte) 5 (byte) 1 
  (void~) main::$1 ← call addpoint (byte) 15 (byte) 8 (byte) 2 
  (void~) main::$2 ← call addpoint (byte) 6 (byte) 14 (byte) 3 
  (void~) main::$3 ← call addpoint (byte) 34 (byte) 2 (byte) 4 
  (void~) main::$4 ← call addpoint (byte) 21 (byte) 17 (byte) 5 
  (void~) main::$5 ← call addpoint (byte) 31 (byte) 22 (byte) 7 
  (void~) main::$6 ← call initscreen 
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (void~) main::$7 ← call render 
  (void~) main::$8 ← call animate 
  if(true) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
animate: scope:[animate]  from
  (byte~) animate::$0 ← (byte[256]) XPOS *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[256]) YPOS *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS *idx (byte) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[256]) XPOS + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[256]) XPOS *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS *idx (byte) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[256]) YPOS + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[256]) YPOS *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS *idx (byte) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[256]) XPOS + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[256]) YPOS *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@5
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[256]) YPOS + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@5: scope:[animate]  from animate::@4 animate::@6
  to:animate::@return
animate::@11: scope:[animate]  from animate::@4
  *((byte[256]) YPOS + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS *idx (byte) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@6
  to:animate::@12
animate::@6: scope:[animate]  from animate::@11 animate::@12
  to:animate::@5
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$31
  to:animate::@6
animate::@return: scope:[animate]  from animate::@5
  return 
  to:@return
@2: scope:[]  from @1
  to:@3
addpoint: scope:[addpoint]  from
  *((byte[256]) XPOS + (byte) numpoints) ← (byte) addpoint::x
  *((byte[256]) YPOS + (byte) numpoints) ← (byte) addpoint::y
  *((byte[256]) COLS + (byte) numpoints) ← (byte) addpoint::c
  (byte) numpoints ← ++ (byte) numpoints
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
@3: scope:[]  from @2
  to:@4
initscreen: scope:[initscreen]  from
  (byte*) initscreen::screen ← (byte*) SCREEN
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  *((byte*) initscreen::screen) ← (byte) FILL
  (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
  (byte*~) initscreen::$0 ← (byte*) SCREEN + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@2
initscreen::@2: scope:[initscreen]  from initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@2
  return 
  to:@return
@4: scope:[]  from @3
  to:@5
render: scope:[render]  from
  (byte*) render::colline ← (byte*) COLORS
  (byte) render::y ← (byte) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte) render::x ← (byte) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@2
  (byte~) render::$0 ← call findcol (byte) render::x (byte) render::y 
  (byte) render::col ← (byte~) render::$0
  *((byte*) render::colline + (byte) render::x) ← (byte) render::col
  (byte) render::x ← ++ (byte) render::x
  (boolean~) render::$1 ← (byte) render::x != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@2
  (byte*~) render::$2 ← (byte*) render::colline + (byte) 40
  (byte*) render::colline ← (byte*~) render::$2
  (byte) render::y ← ++ (byte) render::y
  (boolean~) render::$3 ← (byte) render::y != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@4
render::@4: scope:[render]  from render::@3
  to:render::@return
render::@return: scope:[render]  from render::@4
  return 
  to:@return
@5: scope:[]  from @4
  to:@6
findcol: scope:[findcol]  from
  (byte) findcol::mindiff ← (byte) 255
  (byte) findcol::mincol ← (byte) 0
  (byte) findcol::i ← (byte) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte~) findcol::$0 ← (byte[256]) XPOS *idx (byte) findcol::i
  (byte) findcol::xp ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS *idx (byte) findcol::i
  (byte) findcol::yp ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x == (byte) findcol::xp
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (boolean~) findcol::$6 ← (byte) findcol::x < (byte) findcol::xp
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (boolean~) findcol::$4 ← (byte) findcol::y == (byte) findcol::yp
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@11 findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return ← (byte) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17 findcol::@18
  (byte) findcol::return ← (byte) findcol::return
  return (byte) findcol::return
  to:@return
findcol::@11: scope:[findcol]  from
  to:findcol::@3
findcol::@4: scope:[findcol]  from findcol::@13 findcol::@2
  (byte~) findcol::$9 ← (byte) findcol::x - (byte) findcol::xp
  (byte) findcol::diff ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte~) findcol::$8 ← (byte) findcol::xp - (byte) findcol::x
  (byte) findcol::diff ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (boolean~) findcol::$10 ← (byte) findcol::y < (byte) findcol::yp
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@13: scope:[findcol]  from
  to:findcol::@4
findcol::@6: scope:[findcol]  from findcol::@15 findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y - (byte) findcol::yp
  (byte~) findcol::$15 ← (byte) findcol::diff + (byte~) findcol::$14
  (byte) findcol::diff ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp - (byte) findcol::y
  (byte~) findcol::$13 ← (byte) findcol::diff + (byte~) findcol::$12
  (byte) findcol::diff ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (boolean~) findcol::$16 ← (byte) findcol::diff < (byte) findcol::mindiff
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@15: scope:[findcol]  from
  to:findcol::@6
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::i ← ++ (byte) findcol::i
  (boolean~) findcol::$19 ← (byte) findcol::i < (byte) numpoints
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mindiff ← (byte) findcol::diff
  (byte~) findcol::$18 ← (byte[256]) COLS *idx (byte) findcol::i
  (byte) findcol::mincol ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::return ← (byte) findcol::mincol
  to:findcol::@return
findcol::@18: scope:[findcol]  from
  to:findcol::@return
@6: scope:[]  from @5
  to:@end
@end: scope:[]  from @6

Removing empty block main::@2
Removing empty block @1
Removing empty block @2
Removing empty block @3
Removing empty block initscreen::@2
Removing empty block @4
Removing empty block render::@4
Removing empty block @5
Removing empty block findcol::@11
Removing empty block findcol::@13
Removing empty block findcol::@15
Removing empty block findcol::@18
Removing empty block @6
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (byte*) COLORS ← (word) 55296
  (byte) FILL ← (byte) 230
  (byte) numpoints ← (byte) 0
  (byte[256]) XPOS ← (word) 4096
  (byte[256]) YPOS ← (word) 4352
  (byte[256]) COLS ← (word) 4608
  (void~) $0 ← call main 
  to:@end
main: scope:[main]  from
  (void~) main::$0 ← call addpoint (byte) 5 (byte) 5 (byte) 1 
  (void~) main::$1 ← call addpoint (byte) 15 (byte) 8 (byte) 2 
  (void~) main::$2 ← call addpoint (byte) 6 (byte) 14 (byte) 3 
  (void~) main::$3 ← call addpoint (byte) 34 (byte) 2 (byte) 4 
  (void~) main::$4 ← call addpoint (byte) 21 (byte) 17 (byte) 5 
  (void~) main::$5 ← call addpoint (byte) 31 (byte) 22 (byte) 7 
  (void~) main::$6 ← call initscreen 
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (void~) main::$7 ← call render 
  (void~) main::$8 ← call animate 
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
animate: scope:[animate]  from
  (byte~) animate::$0 ← (byte[256]) XPOS *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[256]) YPOS *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS *idx (byte) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[256]) XPOS + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[256]) XPOS *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS *idx (byte) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[256]) YPOS + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[256]) YPOS *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS *idx (byte) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[256]) XPOS + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[256]) YPOS *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@5
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[256]) YPOS + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@5: scope:[animate]  from animate::@4
  to:animate::@return
animate::@11: scope:[animate]  from animate::@4
  *((byte[256]) YPOS + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS *idx (byte) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@6
  to:animate::@12
animate::@6: scope:[animate]  from animate::@11
  to:animate::@return
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@12 animate::@5 animate::@6
  return 
  to:@return
addpoint: scope:[addpoint]  from
  *((byte[256]) XPOS + (byte) numpoints) ← (byte) addpoint::x
  *((byte[256]) YPOS + (byte) numpoints) ← (byte) addpoint::y
  *((byte[256]) COLS + (byte) numpoints) ← (byte) addpoint::c
  (byte) numpoints ← ++ (byte) numpoints
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from
  (byte*) initscreen::screen ← (byte*) SCREEN
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  *((byte*) initscreen::screen) ← (byte) FILL
  (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
  (byte*~) initscreen::$0 ← (byte*) SCREEN + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from
  (byte*) render::colline ← (byte*) COLORS
  (byte) render::y ← (byte) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte) render::x ← (byte) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@2
  (byte~) render::$0 ← call findcol (byte) render::x (byte) render::y 
  (byte) render::col ← (byte~) render::$0
  *((byte*) render::colline + (byte) render::x) ← (byte) render::col
  (byte) render::x ← ++ (byte) render::x
  (boolean~) render::$1 ← (byte) render::x != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@2
  (byte*~) render::$2 ← (byte*) render::colline + (byte) 40
  (byte*) render::colline ← (byte*~) render::$2
  (byte) render::y ← ++ (byte) render::y
  (boolean~) render::$3 ← (byte) render::y != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from
  (byte) findcol::mindiff ← (byte) 255
  (byte) findcol::mincol ← (byte) 0
  (byte) findcol::i ← (byte) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte~) findcol::$0 ← (byte[256]) XPOS *idx (byte) findcol::i
  (byte) findcol::xp ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS *idx (byte) findcol::i
  (byte) findcol::yp ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x == (byte) findcol::xp
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (boolean~) findcol::$6 ← (byte) findcol::x < (byte) findcol::xp
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (boolean~) findcol::$4 ← (byte) findcol::y == (byte) findcol::yp
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return ← (byte) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return ← (byte) findcol::return
  return (byte) findcol::return
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte~) findcol::$9 ← (byte) findcol::x - (byte) findcol::xp
  (byte) findcol::diff ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte~) findcol::$8 ← (byte) findcol::xp - (byte) findcol::x
  (byte) findcol::diff ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (boolean~) findcol::$10 ← (byte) findcol::y < (byte) findcol::yp
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y - (byte) findcol::yp
  (byte~) findcol::$15 ← (byte) findcol::diff + (byte~) findcol::$14
  (byte) findcol::diff ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp - (byte) findcol::y
  (byte~) findcol::$13 ← (byte) findcol::diff + (byte~) findcol::$12
  (byte) findcol::diff ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (boolean~) findcol::$16 ← (byte) findcol::diff < (byte) findcol::mindiff
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::i ← ++ (byte) findcol::i
  (boolean~) findcol::$19 ← (byte) findcol::i < (byte) numpoints
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mindiff ← (byte) findcol::diff
  (byte~) findcol::$18 ← (byte[256]) COLS *idx (byte) findcol::i
  (byte) findcol::mincol ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::return ← (byte) findcol::mincol
  to:findcol::@return
@end: scope:[]  from @begin

PROCEDURE MODIFY VARIABLE ANALYSIS
main modifies numpoints
addpoint modifies numpoints

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (byte*) COLORS ← (word) 55296
  (byte) FILL ← (byte) 230
  (byte) numpoints ← (byte) 0
  (byte[256]) XPOS ← (word) 4096
  (byte[256]) YPOS ← (word) 4352
  (byte[256]) COLS ← (word) 4608
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  (byte) numpoints ← (byte) numpoints
  to:@end
main: scope:[main]  from @begin
  (byte) addpoint::x ← (byte) 5
  (byte) addpoint::y ← (byte) 5
  (byte) addpoint::c ← (byte) 1
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte) numpoints ← (byte) numpoints
  (byte) addpoint::x ← (byte) 15
  (byte) addpoint::y ← (byte) 8
  (byte) addpoint::c ← (byte) 2
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) numpoints ← (byte) numpoints
  (byte) addpoint::x ← (byte) 6
  (byte) addpoint::y ← (byte) 14
  (byte) addpoint::c ← (byte) 3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) numpoints ← (byte) numpoints
  (byte) addpoint::x ← (byte) 34
  (byte) addpoint::y ← (byte) 2
  (byte) addpoint::c ← (byte) 4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte) numpoints ← (byte) numpoints
  (byte) addpoint::x ← (byte) 21
  (byte) addpoint::y ← (byte) 17
  (byte) addpoint::c ← (byte) 5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte) numpoints ← (byte) numpoints
  (byte) addpoint::x ← (byte) 31
  (byte) addpoint::y ← (byte) 22
  (byte) addpoint::c ← (byte) 7
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte) numpoints ← (byte) numpoints
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  (byte) numpoints ← (byte) numpoints
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← (byte[256]) XPOS *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[256]) YPOS *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS *idx (byte) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[256]) XPOS + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[256]) XPOS *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS *idx (byte) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[256]) YPOS + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[256]) YPOS *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS *idx (byte) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[256]) XPOS + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[256]) YPOS *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@5
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[256]) YPOS + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@5: scope:[animate]  from animate::@4
  to:animate::@return
animate::@11: scope:[animate]  from animate::@4
  *((byte[256]) YPOS + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS *idx (byte) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@6
  to:animate::@12
animate::@6: scope:[animate]  from animate::@11
  to:animate::@return
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[256]) XPOS *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@12 animate::@5 animate::@6
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  *((byte[256]) XPOS + (byte) numpoints) ← (byte) addpoint::x
  *((byte[256]) YPOS + (byte) numpoints) ← (byte) addpoint::y
  *((byte[256]) COLS + (byte) numpoints) ← (byte) addpoint::c
  (byte) numpoints ← ++ (byte) numpoints
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  (byte) numpoints ← (byte) numpoints
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte*) initscreen::screen ← (byte*) SCREEN
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  *((byte*) initscreen::screen) ← (byte) FILL
  (byte*) initscreen::screen ← ++ (byte*) initscreen::screen
  (byte*~) initscreen::$0 ← (byte*) SCREEN + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline ← (byte*) COLORS
  (byte) render::y ← (byte) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte) render::x ← (byte) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) findcol::x ← (byte) render::x
  (byte) findcol::y ← (byte) render::y
  (byte) findcol::return ← call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte~) render::$0 ← (byte) findcol::return
  (byte) render::col ← (byte~) render::$0
  *((byte*) render::colline + (byte) render::x) ← (byte) render::col
  (byte) render::x ← ++ (byte) render::x
  (boolean~) render::$1 ← (byte) render::x != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*~) render::$2 ← (byte*) render::colline + (byte) 40
  (byte*) render::colline ← (byte*~) render::$2
  (byte) render::y ← ++ (byte) render::y
  (boolean~) render::$3 ← (byte) render::y != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte) findcol::mindiff ← (byte) 255
  (byte) findcol::mincol ← (byte) 0
  (byte) findcol::i ← (byte) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte~) findcol::$0 ← (byte[256]) XPOS *idx (byte) findcol::i
  (byte) findcol::xp ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS *idx (byte) findcol::i
  (byte) findcol::yp ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x == (byte) findcol::xp
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (boolean~) findcol::$6 ← (byte) findcol::x < (byte) findcol::xp
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (boolean~) findcol::$4 ← (byte) findcol::y == (byte) findcol::yp
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return ← (byte) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return ← (byte) findcol::return
  return (byte) findcol::return
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte~) findcol::$9 ← (byte) findcol::x - (byte) findcol::xp
  (byte) findcol::diff ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte~) findcol::$8 ← (byte) findcol::xp - (byte) findcol::x
  (byte) findcol::diff ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (boolean~) findcol::$10 ← (byte) findcol::y < (byte) findcol::yp
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y - (byte) findcol::yp
  (byte~) findcol::$15 ← (byte) findcol::diff + (byte~) findcol::$14
  (byte) findcol::diff ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp - (byte) findcol::y
  (byte~) findcol::$13 ← (byte) findcol::diff + (byte~) findcol::$12
  (byte) findcol::diff ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (boolean~) findcol::$16 ← (byte) findcol::diff < (byte) findcol::mindiff
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::i ← ++ (byte) findcol::i
  (boolean~) findcol::$19 ← (byte) findcol::i < (byte) numpoints
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mindiff ← (byte) findcol::diff
  (byte~) findcol::$18 ← (byte[256]) COLS *idx (byte) findcol::i
  (byte) findcol::mincol ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::return ← (byte) findcol::mincol
  to:findcol::@return
@end: scope:[]  from @7

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) COLORS#0 ← (word) 55296
  (byte) FILL#0 ← (byte) 230
  (byte) numpoints#0 ← (byte) 0
  (byte[256]) XPOS#0 ← (word) 4096
  (byte[256]) YPOS#0 ← (word) 4352
  (byte[256]) COLS#0 ← (word) 4608
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  (byte) numpoints#11 ← phi( @begin/(byte) numpoints#0 )
  (byte) numpoints#1 ← (byte) numpoints#11
  to:@end
main: scope:[main]  from @begin
  (byte*) COLORS#12 ← phi( @begin/(byte*) COLORS#0 )
  (byte) FILL#9 ← phi( @begin/(byte) FILL#0 )
  (byte*) SCREEN#9 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[256]) COLS#3 ← phi( @begin/(byte[256]) COLS#0 )
  (byte[256]) YPOS#13 ← phi( @begin/(byte[256]) YPOS#0 )
  (byte[256]) XPOS#13 ← phi( @begin/(byte[256]) XPOS#0 )
  (byte) numpoints#22 ← phi( @begin/(byte) numpoints#0 )
  (byte) addpoint::x#0 ← (byte) 5
  (byte) addpoint::y#0 ← (byte) 5
  (byte) addpoint::c#0 ← (byte) 1
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte*) COLORS#11 ← phi( main/(byte*) COLORS#12 )
  (byte) FILL#8 ← phi( main/(byte) FILL#9 )
  (byte*) SCREEN#8 ← phi( main/(byte*) SCREEN#9 )
  (byte[256]) COLS#4 ← phi( main/(byte[256]) COLS#3 )
  (byte[256]) YPOS#14 ← phi( main/(byte[256]) YPOS#13 )
  (byte[256]) XPOS#14 ← phi( main/(byte[256]) XPOS#13 )
  (byte) numpoints#12 ← phi( main/(byte) numpoints#22 )
  (byte) numpoints#2 ← (byte) numpoints#12
  (byte) addpoint::x#1 ← (byte) 15
  (byte) addpoint::y#1 ← (byte) 8
  (byte) addpoint::c#1 ← (byte) 2
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) COLORS#10 ← phi( main::@3/(byte*) COLORS#11 )
  (byte) FILL#7 ← phi( main::@3/(byte) FILL#8 )
  (byte*) SCREEN#7 ← phi( main::@3/(byte*) SCREEN#8 )
  (byte[256]) COLS#5 ← phi( main::@3/(byte[256]) COLS#4 )
  (byte[256]) YPOS#15 ← phi( main::@3/(byte[256]) YPOS#14 )
  (byte[256]) XPOS#15 ← phi( main::@3/(byte[256]) XPOS#14 )
  (byte) numpoints#13 ← phi( main::@3/(byte) numpoints#2 )
  (byte) numpoints#3 ← (byte) numpoints#13
  (byte) addpoint::x#2 ← (byte) 6
  (byte) addpoint::y#2 ← (byte) 14
  (byte) addpoint::c#2 ← (byte) 3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) COLORS#9 ← phi( main::@4/(byte*) COLORS#10 )
  (byte) FILL#6 ← phi( main::@4/(byte) FILL#7 )
  (byte*) SCREEN#6 ← phi( main::@4/(byte*) SCREEN#7 )
  (byte[256]) COLS#6 ← phi( main::@4/(byte[256]) COLS#5 )
  (byte[256]) YPOS#16 ← phi( main::@4/(byte[256]) YPOS#15 )
  (byte[256]) XPOS#16 ← phi( main::@4/(byte[256]) XPOS#15 )
  (byte) numpoints#14 ← phi( main::@4/(byte) numpoints#3 )
  (byte) numpoints#4 ← (byte) numpoints#14
  (byte) addpoint::x#3 ← (byte) 34
  (byte) addpoint::y#3 ← (byte) 2
  (byte) addpoint::c#3 ← (byte) 4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) COLORS#8 ← phi( main::@5/(byte*) COLORS#9 )
  (byte) FILL#5 ← phi( main::@5/(byte) FILL#6 )
  (byte*) SCREEN#5 ← phi( main::@5/(byte*) SCREEN#6 )
  (byte[256]) COLS#7 ← phi( main::@5/(byte[256]) COLS#6 )
  (byte[256]) YPOS#17 ← phi( main::@5/(byte[256]) YPOS#16 )
  (byte[256]) XPOS#17 ← phi( main::@5/(byte[256]) XPOS#16 )
  (byte) numpoints#15 ← phi( main::@5/(byte) numpoints#4 )
  (byte) numpoints#5 ← (byte) numpoints#15
  (byte) addpoint::x#4 ← (byte) 21
  (byte) addpoint::y#4 ← (byte) 17
  (byte) addpoint::c#4 ← (byte) 5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) COLORS#7 ← phi( main::@6/(byte*) COLORS#8 )
  (byte) FILL#4 ← phi( main::@6/(byte) FILL#5 )
  (byte*) SCREEN#4 ← phi( main::@6/(byte*) SCREEN#5 )
  (byte[256]) COLS#8 ← phi( main::@6/(byte[256]) COLS#7 )
  (byte[256]) YPOS#18 ← phi( main::@6/(byte[256]) YPOS#17 )
  (byte[256]) XPOS#18 ← phi( main::@6/(byte[256]) XPOS#17 )
  (byte) numpoints#16 ← phi( main::@6/(byte) numpoints#5 )
  (byte) numpoints#6 ← (byte) numpoints#16
  (byte) addpoint::x#5 ← (byte) 31
  (byte) addpoint::y#5 ← (byte) 22
  (byte) addpoint::c#5 ← (byte) 7
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte[256]) COLS#29 ← phi( main::@7/(byte[256]) COLS#8 )
  (byte[256]) YPOS#35 ← phi( main::@7/(byte[256]) YPOS#18 )
  (byte[256]) XPOS#33 ← phi( main::@7/(byte[256]) XPOS#18 )
  (byte*) COLORS#5 ← phi( main::@7/(byte*) COLORS#7 )
  (byte) FILL#3 ← phi( main::@7/(byte) FILL#4 )
  (byte*) SCREEN#3 ← phi( main::@7/(byte*) SCREEN#4 )
  (byte) numpoints#17 ← phi( main::@7/(byte) numpoints#6 )
  (byte) numpoints#7 ← (byte) numpoints#17
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  (byte[256]) COLS#28 ← phi( main::@8/(byte[256]) COLS#29 )
  (byte[256]) YPOS#31 ← phi( main::@8/(byte[256]) YPOS#35 )
  (byte) numpoints#31 ← phi( main::@8/(byte) numpoints#7 )
  (byte[256]) XPOS#28 ← phi( main::@8/(byte[256]) XPOS#33 )
  (byte*) COLORS#4 ← phi( main::@8/(byte*) COLORS#5 )
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) COLS#26 ← phi( main::@11/(byte[256]) COLS#27 main::@9/(byte[256]) COLS#28 )
  (byte[256]) YPOS#25 ← phi( main::@11/(byte[256]) YPOS#30 main::@9/(byte[256]) YPOS#31 )
  (byte) numpoints#29 ← phi( main::@11/(byte) numpoints#23 main::@9/(byte) numpoints#31 )
  (byte[256]) XPOS#21 ← phi( main::@11/(byte[256]) XPOS#27 main::@9/(byte[256]) XPOS#28 )
  (byte*) COLORS#2 ← phi( main::@11/(byte*) COLORS#3 main::@9/(byte*) COLORS#4 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  (byte[256]) COLS#30 ← phi( main::@1/(byte[256]) COLS#26 )
  (byte*) COLORS#6 ← phi( main::@1/(byte*) COLORS#2 )
  (byte[256]) YPOS#21 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte) numpoints#26 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) XPOS#9 ← phi( main::@1/(byte[256]) XPOS#21 )
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte[256]) COLS#27 ← phi( main::@10/(byte[256]) COLS#30 )
  (byte[256]) YPOS#30 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#27 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte*) COLORS#3 ← phi( main::@10/(byte*) COLORS#6 )
  (byte) numpoints#23 ← phi( main::@10/(byte) numpoints#26 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  (byte) numpoints#18 ← phi( main::@11/(byte) numpoints#23 )
  (byte) numpoints#8 ← (byte) numpoints#18
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte[256]) YPOS#9 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#1 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte[256]) XPOS#10 ← phi( animate/(byte[256]) XPOS#1 animate::@7/(byte[256]) XPOS#2 )
  (byte[256]) YPOS#1 ← phi( animate/(byte[256]) YPOS#9 animate::@7/(byte[256]) YPOS#10 )
  (byte~) animate::$5 ← (byte[256]) YPOS#1 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS#1 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS#1 *idx (byte) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  (byte[256]) YPOS#10 ← phi( animate/(byte[256]) YPOS#9 )
  (byte[256]) XPOS#2 ← phi( animate/(byte[256]) XPOS#1 )
  *((byte[256]) XPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte[256]) YPOS#11 ← phi( animate::@1/(byte[256]) YPOS#1 animate::@8/(byte[256]) YPOS#2 )
  (byte[256]) XPOS#3 ← phi( animate::@1/(byte[256]) XPOS#10 animate::@8/(byte[256]) XPOS#11 )
  (byte~) animate::$10 ← (byte[256]) XPOS#3 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS#3 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS#3 *idx (byte) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  (byte[256]) XPOS#11 ← phi( animate::@1/(byte[256]) XPOS#10 )
  (byte[256]) YPOS#2 ← phi( animate::@1/(byte[256]) YPOS#1 )
  *((byte[256]) YPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte[256]) XPOS#23 ← phi( animate::@2/(byte[256]) XPOS#3 animate::@9/(byte[256]) XPOS#4 )
  (byte[256]) YPOS#3 ← phi( animate::@2/(byte[256]) YPOS#11 animate::@9/(byte[256]) YPOS#12 )
  (byte~) animate::$15 ← (byte[256]) YPOS#3 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS#3 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS#3 *idx (byte) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  (byte[256]) YPOS#12 ← phi( animate::@2/(byte[256]) YPOS#11 )
  (byte[256]) XPOS#4 ← phi( animate::@2/(byte[256]) XPOS#3 )
  *((byte[256]) XPOS#4 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte[256]) XPOS#12 ← phi( animate::@10/(byte[256]) XPOS#22 animate::@3/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#4 ← phi( animate::@10/(byte[256]) YPOS#5 animate::@3/(byte[256]) YPOS#3 )
  (byte~) animate::$20 ← (byte[256]) YPOS#4 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS#4 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS#4 *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@5
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  (byte[256]) XPOS#22 ← phi( animate::@3/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#5 ← phi( animate::@3/(byte[256]) YPOS#3 )
  *((byte[256]) YPOS#5 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@5: scope:[animate]  from animate::@4
  to:animate::@return
animate::@11: scope:[animate]  from animate::@4
  (byte[256]) XPOS#5 ← phi( animate::@4/(byte[256]) XPOS#12 )
  (byte[256]) YPOS#6 ← phi( animate::@4/(byte[256]) YPOS#4 )
  *((byte[256]) YPOS#6 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS#5 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS#5 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS#5 *idx (byte) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@6
  to:animate::@12
animate::@6: scope:[animate]  from animate::@11
  to:animate::@return
animate::@12: scope:[animate]  from animate::@11
  (byte[256]) XPOS#6 ← phi( animate::@11/(byte[256]) XPOS#5 )
  (byte~) animate::$30 ← (byte[256]) XPOS#6 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS#6 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@12 animate::@5 animate::@6
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte[256]) COLS#1 ← phi( main/(byte[256]) COLS#3 main::@3/(byte[256]) COLS#4 main::@4/(byte[256]) COLS#5 main::@5/(byte[256]) COLS#6 main::@6/(byte[256]) COLS#7 main::@7/(byte[256]) COLS#8 )
  (byte) addpoint::c#6 ← phi( main/(byte) addpoint::c#0 main::@3/(byte) addpoint::c#1 main::@4/(byte) addpoint::c#2 main::@5/(byte) addpoint::c#3 main::@6/(byte) addpoint::c#4 main::@7/(byte) addpoint::c#5 )
  (byte[256]) YPOS#7 ← phi( main/(byte[256]) YPOS#13 main::@3/(byte[256]) YPOS#14 main::@4/(byte[256]) YPOS#15 main::@5/(byte[256]) YPOS#16 main::@6/(byte[256]) YPOS#17 main::@7/(byte[256]) YPOS#18 )
  (byte) addpoint::y#6 ← phi( main/(byte) addpoint::y#0 main::@3/(byte) addpoint::y#1 main::@4/(byte) addpoint::y#2 main::@5/(byte) addpoint::y#3 main::@6/(byte) addpoint::y#4 main::@7/(byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(byte) numpoints#22 main::@3/(byte) numpoints#2 main::@4/(byte) numpoints#3 main::@5/(byte) numpoints#4 main::@6/(byte) numpoints#5 main::@7/(byte) numpoints#6 )
  (byte[256]) XPOS#7 ← phi( main/(byte[256]) XPOS#13 main::@3/(byte[256]) XPOS#14 main::@4/(byte[256]) XPOS#15 main::@5/(byte[256]) XPOS#16 main::@6/(byte[256]) XPOS#17 main::@7/(byte[256]) XPOS#18 )
  (byte) addpoint::x#6 ← phi( main/(byte) addpoint::x#0 main::@3/(byte) addpoint::x#1 main::@4/(byte) addpoint::x#2 main::@5/(byte) addpoint::x#3 main::@6/(byte) addpoint::x#4 main::@7/(byte) addpoint::x#5 )
  *((byte[256]) XPOS#7 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((byte[256]) YPOS#7 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((byte[256]) COLS#1 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#9 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  (byte) numpoints#20 ← phi( addpoint/(byte) numpoints#9 )
  (byte) numpoints#10 ← (byte) numpoints#20
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte) FILL#2 ← phi( main::@8/(byte) FILL#3 )
  (byte*) SCREEN#1 ← phi( main::@8/(byte*) SCREEN#3 )
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#1 initscreen::@1/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte[256]) COLS#24 ← phi( main::@1/(byte[256]) COLS#26 )
  (byte) numpoints#42 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) YPOS#32 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte[256]) XPOS#34 ← phi( main::@1/(byte[256]) XPOS#21 )
  (byte*) COLORS#1 ← phi( main::@1/(byte*) COLORS#2 )
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(byte[256]) COLS#24 render::@3/(byte[256]) COLS#25 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#42 render::@3/(byte) numpoints#43 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#32 render::@3/(byte[256]) YPOS#33 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#34 render::@3/(byte[256]) XPOS#35 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#21 ← phi( render::@1/(byte[256]) COLS#22 render::@5/(byte[256]) COLS#23 )
  (byte) numpoints#39 ← phi( render::@1/(byte) numpoints#40 render::@5/(byte) numpoints#41 )
  (byte[256]) YPOS#22 ← phi( render::@1/(byte[256]) YPOS#26 render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#24 ← phi( render::@1/(byte[256]) XPOS#29 render::@5/(byte[256]) XPOS#30 )
  (byte*) render::colline#4 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#5 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  (byte) findcol::return#0 ← call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte[256]) COLS#23 ← phi( render::@2/(byte[256]) COLS#21 )
  (byte) numpoints#41 ← phi( render::@2/(byte) numpoints#39 )
  (byte[256]) YPOS#27 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#30 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) render::y#5 ← phi( render::@2/(byte) render::y#2 )
  (byte) render::x#3 ← phi( render::@2/(byte) render::x#2 )
  (byte*) render::colline#2 ← phi( render::@2/(byte*) render::colline#4 )
  (byte) findcol::return#4 ← phi( render::@2/(byte) findcol::return#0 )
  (byte~) render::$0 ← (byte) findcol::return#4
  (byte) render::col#0 ← (byte~) render::$0
  *((byte*) render::colline#2 + (byte) render::x#3) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#3
  (boolean~) render::$1 ← (byte) render::x#1 != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte[256]) COLS#25 ← phi( render::@5/(byte[256]) COLS#23 )
  (byte) numpoints#43 ← phi( render::@5/(byte) numpoints#41 )
  (byte[256]) YPOS#33 ← phi( render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#35 ← phi( render::@5/(byte[256]) XPOS#30 )
  (byte) render::y#3 ← phi( render::@5/(byte) render::y#5 )
  (byte*) render::colline#3 ← phi( render::@5/(byte*) render::colline#2 )
  (byte*~) render::$2 ← (byte*) render::colline#3 + (byte) 40
  (byte*) render::colline#1 ← (byte*~) render::$2
  (byte) render::y#1 ← ++ (byte) render::y#3
  (boolean~) render::$3 ← (byte) render::y#1 != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte[256]) COLS#18 ← phi( render::@2/(byte[256]) COLS#21 )
  (byte) numpoints#37 ← phi( render::@2/(byte) numpoints#39 )
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte[256]) YPOS#19 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#19 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) findcol::mindiff#0 ← (byte) 255
  (byte) findcol::mincol#0 ← (byte) 0
  (byte) findcol::i#0 ← (byte) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#3 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 findcol::@8/(byte[256]) COLS#19 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 findcol::@8/(byte) numpoints#21 )
  (byte) findcol::mindiff#9 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#5 ← phi( findcol/(byte) findcol::y#8 findcol::@8/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 findcol::@8/(byte) findcol::x#6 )
  (byte[256]) YPOS#8 ← phi( findcol/(byte[256]) YPOS#19 findcol::@8/(byte[256]) YPOS#20 )
  (byte) findcol::i#2 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#8 ← phi( findcol/(byte[256]) XPOS#19 findcol::@8/(byte[256]) XPOS#20 )
  (byte~) findcol::$0 ← (byte[256]) XPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::xp#0 ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::yp#0 ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x#1 == (byte) findcol::xp#0
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@3/(byte) findcol::mincol#12 )
  (byte[256]) YPOS#38 ← phi( findcol::@1/(byte[256]) YPOS#8 findcol::@3/(byte[256]) YPOS#39 )
  (byte[256]) XPOS#39 ← phi( findcol::@1/(byte[256]) XPOS#8 findcol::@3/(byte[256]) XPOS#40 )
  (byte[256]) COLS#15 ← phi( findcol::@1/(byte[256]) COLS#16 findcol::@3/(byte[256]) COLS#17 )
  (byte) numpoints#34 ← phi( findcol::@1/(byte) numpoints#35 findcol::@3/(byte) numpoints#36 )
  (byte) findcol::i#11 ← phi( findcol::@1/(byte) findcol::i#2 findcol::@3/(byte) findcol::i#12 )
  (byte) findcol::mindiff#8 ← phi( findcol::@1/(byte) findcol::mindiff#9 findcol::@3/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#7 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@3/(byte) findcol::yp#8 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#5 findcol::@3/(byte) findcol::y#11 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@3/(byte) findcol::xp#4 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@3/(byte) findcol::x#7 )
  (boolean~) findcol::$6 ← (byte) findcol::x#2 < (byte) findcol::xp#1
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (byte) findcol::mincol#13 ← phi( findcol::@1/(byte) findcol::mincol#11 )
  (byte[256]) YPOS#40 ← phi( findcol::@1/(byte[256]) YPOS#8 )
  (byte[256]) XPOS#41 ← phi( findcol::@1/(byte[256]) XPOS#8 )
  (byte[256]) COLS#20 ← phi( findcol::@1/(byte[256]) COLS#16 )
  (byte) numpoints#38 ← phi( findcol::@1/(byte) numpoints#35 )
  (byte) findcol::i#13 ← phi( findcol::@1/(byte) findcol::i#2 )
  (byte) findcol::mindiff#12 ← phi( findcol::@1/(byte) findcol::mindiff#9 )
  (byte) findcol::xp#5 ← phi( findcol::@1/(byte) findcol::xp#0 )
  (byte) findcol::x#8 ← phi( findcol::@1/(byte) findcol::x#1 )
  (byte) findcol::yp#1 ← phi( findcol::@1/(byte) findcol::yp#0 )
  (byte) findcol::y#1 ← phi( findcol::@1/(byte) findcol::y#5 )
  (boolean~) findcol::$4 ← (byte) findcol::y#1 == (byte) findcol::yp#1
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  (byte) findcol::mincol#12 ← phi( findcol::@9/(byte) findcol::mincol#13 )
  (byte[256]) YPOS#39 ← phi( findcol::@9/(byte[256]) YPOS#40 )
  (byte[256]) XPOS#40 ← phi( findcol::@9/(byte[256]) XPOS#41 )
  (byte[256]) COLS#17 ← phi( findcol::@9/(byte[256]) COLS#20 )
  (byte) numpoints#36 ← phi( findcol::@9/(byte) numpoints#38 )
  (byte) findcol::i#12 ← phi( findcol::@9/(byte) findcol::i#13 )
  (byte) findcol::mindiff#10 ← phi( findcol::@9/(byte) findcol::mindiff#12 )
  (byte) findcol::yp#8 ← phi( findcol::@9/(byte) findcol::yp#1 )
  (byte) findcol::y#11 ← phi( findcol::@9/(byte) findcol::y#1 )
  (byte) findcol::xp#4 ← phi( findcol::@9/(byte) findcol::xp#5 )
  (byte) findcol::x#7 ← phi( findcol::@9/(byte) findcol::x#8 )
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#5 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::return#3 )
  (byte) findcol::return#2 ← (byte) findcol::return#5
  return (byte) findcol::return#2
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#9 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#37 ← phi( findcol::@2/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#38 ← phi( findcol::@2/(byte[256]) XPOS#39 )
  (byte[256]) COLS#14 ← phi( findcol::@2/(byte[256]) COLS#15 )
  (byte) numpoints#33 ← phi( findcol::@2/(byte) numpoints#34 )
  (byte) findcol::i#10 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#7 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#6 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#7 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::xp#2 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte) findcol::x#3 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte~) findcol::$9 ← (byte) findcol::x#3 - (byte) findcol::xp#2
  (byte) findcol::diff#0 ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#8 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#36 ← phi( findcol::@2/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#37 ← phi( findcol::@2/(byte[256]) XPOS#39 )
  (byte[256]) COLS#13 ← phi( findcol::@2/(byte[256]) COLS#15 )
  (byte) numpoints#32 ← phi( findcol::@2/(byte) numpoints#34 )
  (byte) findcol::i#9 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#6 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#5 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#6 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::x#4 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte) findcol::xp#3 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte~) findcol::$8 ← (byte) findcol::xp#3 - (byte) findcol::x#4
  (byte) findcol::diff#1 ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::mincol#7 ← phi( findcol::@12/(byte) findcol::mincol#8 findcol::@4/(byte) findcol::mincol#9 )
  (byte) findcol::x#13 ← phi( findcol::@12/(byte) findcol::x#4 findcol::@4/(byte) findcol::x#3 )
  (byte[256]) YPOS#34 ← phi( findcol::@12/(byte[256]) YPOS#36 findcol::@4/(byte[256]) YPOS#37 )
  (byte[256]) XPOS#36 ← phi( findcol::@12/(byte[256]) XPOS#37 findcol::@4/(byte[256]) XPOS#38 )
  (byte[256]) COLS#12 ← phi( findcol::@12/(byte[256]) COLS#13 findcol::@4/(byte[256]) COLS#14 )
  (byte) numpoints#30 ← phi( findcol::@12/(byte) numpoints#32 findcol::@4/(byte) numpoints#33 )
  (byte) findcol::i#8 ← phi( findcol::@12/(byte) findcol::i#9 findcol::@4/(byte) findcol::i#10 )
  (byte) findcol::mindiff#5 ← phi( findcol::@12/(byte) findcol::mindiff#6 findcol::@4/(byte) findcol::mindiff#7 )
  (byte) findcol::diff#8 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (byte) findcol::yp#2 ← phi( findcol::@12/(byte) findcol::yp#5 findcol::@4/(byte) findcol::yp#6 )
  (byte) findcol::y#2 ← phi( findcol::@12/(byte) findcol::y#6 findcol::@4/(byte) findcol::y#7 )
  (boolean~) findcol::$10 ← (byte) findcol::y#2 < (byte) findcol::yp#2
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#6 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#12 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[256]) YPOS#29 ← phi( findcol::@5/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#32 ← phi( findcol::@5/(byte[256]) XPOS#36 )
  (byte[256]) COLS#11 ← phi( findcol::@5/(byte[256]) COLS#12 )
  (byte) numpoints#28 ← phi( findcol::@5/(byte) numpoints#30 )
  (byte) findcol::i#7 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#4 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#4 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::yp#3 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte) findcol::y#3 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte~) findcol::$14 ← (byte) findcol::y#3 - (byte) findcol::yp#3
  (byte~) findcol::$15 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  (byte) findcol::diff#2 ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#5 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#11 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[256]) YPOS#28 ← phi( findcol::@5/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#31 ← phi( findcol::@5/(byte[256]) XPOS#36 )
  (byte[256]) COLS#10 ← phi( findcol::@5/(byte[256]) COLS#12 )
  (byte) numpoints#27 ← phi( findcol::@5/(byte) numpoints#30 )
  (byte) findcol::i#6 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#3 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#5 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::y#4 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte) findcol::yp#4 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte~) findcol::$12 ← (byte) findcol::yp#4 - (byte) findcol::y#4
  (byte~) findcol::$13 ← (byte) findcol::diff#5 + (byte~) findcol::$12
  (byte) findcol::diff#3 ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::y#13 ← phi( findcol::@14/(byte) findcol::y#4 findcol::@6/(byte) findcol::y#3 )
  (byte) findcol::mincol#4 ← phi( findcol::@14/(byte) findcol::mincol#5 findcol::@6/(byte) findcol::mincol#6 )
  (byte) findcol::x#10 ← phi( findcol::@14/(byte) findcol::x#11 findcol::@6/(byte) findcol::x#12 )
  (byte[256]) YPOS#24 ← phi( findcol::@14/(byte[256]) YPOS#28 findcol::@6/(byte[256]) YPOS#29 )
  (byte[256]) XPOS#26 ← phi( findcol::@14/(byte[256]) XPOS#31 findcol::@6/(byte[256]) XPOS#32 )
  (byte[256]) COLS#9 ← phi( findcol::@14/(byte[256]) COLS#10 findcol::@6/(byte[256]) COLS#11 )
  (byte) numpoints#25 ← phi( findcol::@14/(byte) numpoints#27 findcol::@6/(byte) numpoints#28 )
  (byte) findcol::i#5 ← phi( findcol::@14/(byte) findcol::i#6 findcol::@6/(byte) findcol::i#7 )
  (byte) findcol::mindiff#2 ← phi( findcol::@14/(byte) findcol::mindiff#3 findcol::@6/(byte) findcol::mindiff#4 )
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$16 ← (byte) findcol::diff#6 < (byte) findcol::mindiff#2
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte[256]) COLS#19 ← phi( findcol::@16/(byte[256]) COLS#2 findcol::@7/(byte[256]) COLS#9 )
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::mindiff#1 findcol::@7/(byte) findcol::mindiff#2 )
  (byte) findcol::y#9 ← phi( findcol::@16/(byte) findcol::y#12 findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::mincol#3 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#4 )
  (byte) findcol::x#6 ← phi( findcol::@16/(byte) findcol::x#9 findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#20 ← phi( findcol::@16/(byte[256]) YPOS#23 findcol::@7/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#20 ← phi( findcol::@16/(byte[256]) XPOS#25 findcol::@7/(byte[256]) XPOS#26 )
  (byte) numpoints#21 ← phi( findcol::@16/(byte) numpoints#24 findcol::@7/(byte) numpoints#25 )
  (byte) findcol::i#3 ← phi( findcol::@16/(byte) findcol::i#4 findcol::@7/(byte) findcol::i#5 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#3
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#21
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::y#12 ← phi( findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::x#9 ← phi( findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#23 ← phi( findcol::@7/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#25 ← phi( findcol::@7/(byte[256]) XPOS#26 )
  (byte) numpoints#24 ← phi( findcol::@7/(byte) numpoints#25 )
  (byte) findcol::i#4 ← phi( findcol::@7/(byte) findcol::i#5 )
  (byte[256]) COLS#2 ← phi( findcol::@7/(byte[256]) COLS#9 )
  (byte) findcol::diff#7 ← phi( findcol::@7/(byte) findcol::diff#6 )
  (byte) findcol::mindiff#1 ← (byte) findcol::diff#7
  (byte~) findcol::$18 ← (byte[256]) COLS#2 *idx (byte) findcol::i#4
  (byte) findcol::mincol#1 ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::mincol#2 ← phi( findcol::@8/(byte) findcol::mincol#3 )
  (byte) findcol::return#3 ← (byte) findcol::mincol#2
  to:findcol::@return
@end: scope:[]  from @7

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) COLORS#0 ← (word) 55296
  (byte) FILL#0 ← (byte) 230
  (byte) numpoints#0 ← (byte) 0
  (byte[256]) XPOS#0 ← (word) 4096
  (byte[256]) YPOS#0 ← (word) 4352
  (byte[256]) COLS#0 ← (word) 4608
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  (byte) numpoints#11 ← phi( @begin/(byte) numpoints#8 )
  (byte) numpoints#1 ← (byte) numpoints#11
  to:@end
main: scope:[main]  from @begin
  (byte*) COLORS#12 ← phi( @begin/(byte*) COLORS#0 )
  (byte) FILL#9 ← phi( @begin/(byte) FILL#0 )
  (byte*) SCREEN#9 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[256]) COLS#3 ← phi( @begin/(byte[256]) COLS#0 )
  (byte[256]) YPOS#13 ← phi( @begin/(byte[256]) YPOS#0 )
  (byte[256]) XPOS#13 ← phi( @begin/(byte[256]) XPOS#0 )
  (byte) numpoints#22 ← phi( @begin/(byte) numpoints#0 )
  (byte) addpoint::x#0 ← (byte) 5
  (byte) addpoint::y#0 ← (byte) 5
  (byte) addpoint::c#0 ← (byte) 1
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte*) COLORS#11 ← phi( main/(byte*) COLORS#12 )
  (byte) FILL#8 ← phi( main/(byte) FILL#9 )
  (byte*) SCREEN#8 ← phi( main/(byte*) SCREEN#9 )
  (byte[256]) COLS#4 ← phi( main/(byte[256]) COLS#3 )
  (byte[256]) YPOS#14 ← phi( main/(byte[256]) YPOS#13 )
  (byte[256]) XPOS#14 ← phi( main/(byte[256]) XPOS#13 )
  (byte) numpoints#12 ← phi( main/(byte) numpoints#10 )
  (byte) numpoints#2 ← (byte) numpoints#12
  (byte) addpoint::x#1 ← (byte) 15
  (byte) addpoint::y#1 ← (byte) 8
  (byte) addpoint::c#1 ← (byte) 2
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) COLORS#10 ← phi( main::@3/(byte*) COLORS#11 )
  (byte) FILL#7 ← phi( main::@3/(byte) FILL#8 )
  (byte*) SCREEN#7 ← phi( main::@3/(byte*) SCREEN#8 )
  (byte[256]) COLS#5 ← phi( main::@3/(byte[256]) COLS#4 )
  (byte[256]) YPOS#15 ← phi( main::@3/(byte[256]) YPOS#14 )
  (byte[256]) XPOS#15 ← phi( main::@3/(byte[256]) XPOS#14 )
  (byte) numpoints#13 ← phi( main::@3/(byte) numpoints#10 )
  (byte) numpoints#3 ← (byte) numpoints#13
  (byte) addpoint::x#2 ← (byte) 6
  (byte) addpoint::y#2 ← (byte) 14
  (byte) addpoint::c#2 ← (byte) 3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) COLORS#9 ← phi( main::@4/(byte*) COLORS#10 )
  (byte) FILL#6 ← phi( main::@4/(byte) FILL#7 )
  (byte*) SCREEN#6 ← phi( main::@4/(byte*) SCREEN#7 )
  (byte[256]) COLS#6 ← phi( main::@4/(byte[256]) COLS#5 )
  (byte[256]) YPOS#16 ← phi( main::@4/(byte[256]) YPOS#15 )
  (byte[256]) XPOS#16 ← phi( main::@4/(byte[256]) XPOS#15 )
  (byte) numpoints#14 ← phi( main::@4/(byte) numpoints#10 )
  (byte) numpoints#4 ← (byte) numpoints#14
  (byte) addpoint::x#3 ← (byte) 34
  (byte) addpoint::y#3 ← (byte) 2
  (byte) addpoint::c#3 ← (byte) 4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) COLORS#8 ← phi( main::@5/(byte*) COLORS#9 )
  (byte) FILL#5 ← phi( main::@5/(byte) FILL#6 )
  (byte*) SCREEN#5 ← phi( main::@5/(byte*) SCREEN#6 )
  (byte[256]) COLS#7 ← phi( main::@5/(byte[256]) COLS#6 )
  (byte[256]) YPOS#17 ← phi( main::@5/(byte[256]) YPOS#16 )
  (byte[256]) XPOS#17 ← phi( main::@5/(byte[256]) XPOS#16 )
  (byte) numpoints#15 ← phi( main::@5/(byte) numpoints#10 )
  (byte) numpoints#5 ← (byte) numpoints#15
  (byte) addpoint::x#4 ← (byte) 21
  (byte) addpoint::y#4 ← (byte) 17
  (byte) addpoint::c#4 ← (byte) 5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) COLORS#7 ← phi( main::@6/(byte*) COLORS#8 )
  (byte) FILL#4 ← phi( main::@6/(byte) FILL#5 )
  (byte*) SCREEN#4 ← phi( main::@6/(byte*) SCREEN#5 )
  (byte[256]) COLS#8 ← phi( main::@6/(byte[256]) COLS#7 )
  (byte[256]) YPOS#18 ← phi( main::@6/(byte[256]) YPOS#17 )
  (byte[256]) XPOS#18 ← phi( main::@6/(byte[256]) XPOS#17 )
  (byte) numpoints#16 ← phi( main::@6/(byte) numpoints#10 )
  (byte) numpoints#6 ← (byte) numpoints#16
  (byte) addpoint::x#5 ← (byte) 31
  (byte) addpoint::y#5 ← (byte) 22
  (byte) addpoint::c#5 ← (byte) 7
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte[256]) COLS#29 ← phi( main::@7/(byte[256]) COLS#8 )
  (byte[256]) YPOS#35 ← phi( main::@7/(byte[256]) YPOS#18 )
  (byte[256]) XPOS#33 ← phi( main::@7/(byte[256]) XPOS#18 )
  (byte*) COLORS#5 ← phi( main::@7/(byte*) COLORS#7 )
  (byte) FILL#3 ← phi( main::@7/(byte) FILL#4 )
  (byte*) SCREEN#3 ← phi( main::@7/(byte*) SCREEN#4 )
  (byte) numpoints#17 ← phi( main::@7/(byte) numpoints#10 )
  (byte) numpoints#7 ← (byte) numpoints#17
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  (byte[256]) COLS#28 ← phi( main::@8/(byte[256]) COLS#29 )
  (byte[256]) YPOS#31 ← phi( main::@8/(byte[256]) YPOS#35 )
  (byte) numpoints#31 ← phi( main::@8/(byte) numpoints#7 )
  (byte[256]) XPOS#28 ← phi( main::@8/(byte[256]) XPOS#33 )
  (byte*) COLORS#4 ← phi( main::@8/(byte*) COLORS#5 )
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) COLS#26 ← phi( main::@11/(byte[256]) COLS#27 main::@9/(byte[256]) COLS#28 )
  (byte[256]) YPOS#25 ← phi( main::@11/(byte[256]) YPOS#30 main::@9/(byte[256]) YPOS#31 )
  (byte) numpoints#29 ← phi( main::@11/(byte) numpoints#23 main::@9/(byte) numpoints#31 )
  (byte[256]) XPOS#21 ← phi( main::@11/(byte[256]) XPOS#27 main::@9/(byte[256]) XPOS#28 )
  (byte*) COLORS#2 ← phi( main::@11/(byte*) COLORS#3 main::@9/(byte*) COLORS#4 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  (byte[256]) COLS#30 ← phi( main::@1/(byte[256]) COLS#26 )
  (byte*) COLORS#6 ← phi( main::@1/(byte*) COLORS#2 )
  (byte[256]) YPOS#21 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte) numpoints#26 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) XPOS#9 ← phi( main::@1/(byte[256]) XPOS#21 )
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte[256]) COLS#27 ← phi( main::@10/(byte[256]) COLS#30 )
  (byte[256]) YPOS#30 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#27 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte*) COLORS#3 ← phi( main::@10/(byte*) COLORS#6 )
  (byte) numpoints#23 ← phi( main::@10/(byte) numpoints#26 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  (byte) numpoints#18 ← phi( main::@11/(byte) numpoints#23 )
  (byte) numpoints#8 ← (byte) numpoints#18
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte[256]) YPOS#9 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#1 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte[256]) XPOS#10 ← phi( animate/(byte[256]) XPOS#1 animate::@7/(byte[256]) XPOS#2 )
  (byte[256]) YPOS#1 ← phi( animate/(byte[256]) YPOS#9 animate::@7/(byte[256]) YPOS#10 )
  (byte~) animate::$5 ← (byte[256]) YPOS#1 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS#1 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS#1 *idx (byte) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  (byte[256]) YPOS#10 ← phi( animate/(byte[256]) YPOS#9 )
  (byte[256]) XPOS#2 ← phi( animate/(byte[256]) XPOS#1 )
  *((byte[256]) XPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte[256]) YPOS#11 ← phi( animate::@1/(byte[256]) YPOS#1 animate::@8/(byte[256]) YPOS#2 )
  (byte[256]) XPOS#3 ← phi( animate::@1/(byte[256]) XPOS#10 animate::@8/(byte[256]) XPOS#11 )
  (byte~) animate::$10 ← (byte[256]) XPOS#3 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS#3 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS#3 *idx (byte) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  (byte[256]) XPOS#11 ← phi( animate::@1/(byte[256]) XPOS#10 )
  (byte[256]) YPOS#2 ← phi( animate::@1/(byte[256]) YPOS#1 )
  *((byte[256]) YPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte[256]) XPOS#23 ← phi( animate::@2/(byte[256]) XPOS#3 animate::@9/(byte[256]) XPOS#4 )
  (byte[256]) YPOS#3 ← phi( animate::@2/(byte[256]) YPOS#11 animate::@9/(byte[256]) YPOS#12 )
  (byte~) animate::$15 ← (byte[256]) YPOS#3 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS#3 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS#3 *idx (byte) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  (byte[256]) YPOS#12 ← phi( animate::@2/(byte[256]) YPOS#11 )
  (byte[256]) XPOS#4 ← phi( animate::@2/(byte[256]) XPOS#3 )
  *((byte[256]) XPOS#4 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte[256]) XPOS#12 ← phi( animate::@10/(byte[256]) XPOS#22 animate::@3/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#4 ← phi( animate::@10/(byte[256]) YPOS#5 animate::@3/(byte[256]) YPOS#3 )
  (byte~) animate::$20 ← (byte[256]) YPOS#4 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS#4 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS#4 *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@5
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  (byte[256]) XPOS#22 ← phi( animate::@3/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#5 ← phi( animate::@3/(byte[256]) YPOS#3 )
  *((byte[256]) YPOS#5 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@5: scope:[animate]  from animate::@4
  to:animate::@return
animate::@11: scope:[animate]  from animate::@4
  (byte[256]) XPOS#5 ← phi( animate::@4/(byte[256]) XPOS#12 )
  (byte[256]) YPOS#6 ← phi( animate::@4/(byte[256]) YPOS#4 )
  *((byte[256]) YPOS#6 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS#5 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS#5 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS#5 *idx (byte) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@6
  to:animate::@12
animate::@6: scope:[animate]  from animate::@11
  to:animate::@return
animate::@12: scope:[animate]  from animate::@11
  (byte[256]) XPOS#6 ← phi( animate::@11/(byte[256]) XPOS#5 )
  (byte~) animate::$30 ← (byte[256]) XPOS#6 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS#6 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@12 animate::@5 animate::@6
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte[256]) COLS#1 ← phi( main/(byte[256]) COLS#3 main::@3/(byte[256]) COLS#4 main::@4/(byte[256]) COLS#5 main::@5/(byte[256]) COLS#6 main::@6/(byte[256]) COLS#7 main::@7/(byte[256]) COLS#8 )
  (byte) addpoint::c#6 ← phi( main/(byte) addpoint::c#0 main::@3/(byte) addpoint::c#1 main::@4/(byte) addpoint::c#2 main::@5/(byte) addpoint::c#3 main::@6/(byte) addpoint::c#4 main::@7/(byte) addpoint::c#5 )
  (byte[256]) YPOS#7 ← phi( main/(byte[256]) YPOS#13 main::@3/(byte[256]) YPOS#14 main::@4/(byte[256]) YPOS#15 main::@5/(byte[256]) YPOS#16 main::@6/(byte[256]) YPOS#17 main::@7/(byte[256]) YPOS#18 )
  (byte) addpoint::y#6 ← phi( main/(byte) addpoint::y#0 main::@3/(byte) addpoint::y#1 main::@4/(byte) addpoint::y#2 main::@5/(byte) addpoint::y#3 main::@6/(byte) addpoint::y#4 main::@7/(byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(byte) numpoints#22 main::@3/(byte) numpoints#2 main::@4/(byte) numpoints#3 main::@5/(byte) numpoints#4 main::@6/(byte) numpoints#5 main::@7/(byte) numpoints#6 )
  (byte[256]) XPOS#7 ← phi( main/(byte[256]) XPOS#13 main::@3/(byte[256]) XPOS#14 main::@4/(byte[256]) XPOS#15 main::@5/(byte[256]) XPOS#16 main::@6/(byte[256]) XPOS#17 main::@7/(byte[256]) XPOS#18 )
  (byte) addpoint::x#6 ← phi( main/(byte) addpoint::x#0 main::@3/(byte) addpoint::x#1 main::@4/(byte) addpoint::x#2 main::@5/(byte) addpoint::x#3 main::@6/(byte) addpoint::x#4 main::@7/(byte) addpoint::x#5 )
  *((byte[256]) XPOS#7 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((byte[256]) YPOS#7 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((byte[256]) COLS#1 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#9 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  (byte) numpoints#20 ← phi( addpoint/(byte) numpoints#9 )
  (byte) numpoints#10 ← (byte) numpoints#20
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte) FILL#2 ← phi( main::@8/(byte) FILL#3 )
  (byte*) SCREEN#1 ← phi( main::@8/(byte*) SCREEN#3 )
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#1 initscreen::@1/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte[256]) COLS#24 ← phi( main::@1/(byte[256]) COLS#26 )
  (byte) numpoints#42 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) YPOS#32 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte[256]) XPOS#34 ← phi( main::@1/(byte[256]) XPOS#21 )
  (byte*) COLORS#1 ← phi( main::@1/(byte*) COLORS#2 )
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(byte[256]) COLS#24 render::@3/(byte[256]) COLS#25 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#42 render::@3/(byte) numpoints#43 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#32 render::@3/(byte[256]) YPOS#33 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#34 render::@3/(byte[256]) XPOS#35 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#21 ← phi( render::@1/(byte[256]) COLS#22 render::@5/(byte[256]) COLS#23 )
  (byte) numpoints#39 ← phi( render::@1/(byte) numpoints#40 render::@5/(byte) numpoints#41 )
  (byte[256]) YPOS#22 ← phi( render::@1/(byte[256]) YPOS#26 render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#24 ← phi( render::@1/(byte[256]) XPOS#29 render::@5/(byte[256]) XPOS#30 )
  (byte*) render::colline#4 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#5 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte[256]) COLS#23 ← phi( render::@2/(byte[256]) COLS#21 )
  (byte) numpoints#41 ← phi( render::@2/(byte) numpoints#39 )
  (byte[256]) YPOS#27 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#30 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) render::y#5 ← phi( render::@2/(byte) render::y#2 )
  (byte) render::x#3 ← phi( render::@2/(byte) render::x#2 )
  (byte*) render::colline#2 ← phi( render::@2/(byte*) render::colline#4 )
  (byte) findcol::return#4 ← phi( render::@2/(byte) findcol::return#0 )
  (byte~) render::$0 ← (byte) findcol::return#4
  (byte) render::col#0 ← (byte~) render::$0
  *((byte*) render::colline#2 + (byte) render::x#3) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#3
  (boolean~) render::$1 ← (byte) render::x#1 != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte[256]) COLS#25 ← phi( render::@5/(byte[256]) COLS#23 )
  (byte) numpoints#43 ← phi( render::@5/(byte) numpoints#41 )
  (byte[256]) YPOS#33 ← phi( render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#35 ← phi( render::@5/(byte[256]) XPOS#30 )
  (byte) render::y#3 ← phi( render::@5/(byte) render::y#5 )
  (byte*) render::colline#3 ← phi( render::@5/(byte*) render::colline#2 )
  (byte*~) render::$2 ← (byte*) render::colline#3 + (byte) 40
  (byte*) render::colline#1 ← (byte*~) render::$2
  (byte) render::y#1 ← ++ (byte) render::y#3
  (boolean~) render::$3 ← (byte) render::y#1 != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte[256]) COLS#18 ← phi( render::@2/(byte[256]) COLS#21 )
  (byte) numpoints#37 ← phi( render::@2/(byte) numpoints#39 )
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte[256]) YPOS#19 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#19 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) findcol::mindiff#0 ← (byte) 255
  (byte) findcol::mincol#0 ← (byte) 0
  (byte) findcol::i#0 ← (byte) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#3 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 findcol::@8/(byte[256]) COLS#19 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 findcol::@8/(byte) numpoints#21 )
  (byte) findcol::mindiff#9 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#5 ← phi( findcol/(byte) findcol::y#8 findcol::@8/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 findcol::@8/(byte) findcol::x#6 )
  (byte[256]) YPOS#8 ← phi( findcol/(byte[256]) YPOS#19 findcol::@8/(byte[256]) YPOS#20 )
  (byte) findcol::i#2 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#8 ← phi( findcol/(byte[256]) XPOS#19 findcol::@8/(byte[256]) XPOS#20 )
  (byte~) findcol::$0 ← (byte[256]) XPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::xp#0 ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::yp#0 ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x#1 == (byte) findcol::xp#0
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@3/(byte) findcol::mincol#12 )
  (byte[256]) YPOS#38 ← phi( findcol::@1/(byte[256]) YPOS#8 findcol::@3/(byte[256]) YPOS#39 )
  (byte[256]) XPOS#39 ← phi( findcol::@1/(byte[256]) XPOS#8 findcol::@3/(byte[256]) XPOS#40 )
  (byte[256]) COLS#15 ← phi( findcol::@1/(byte[256]) COLS#16 findcol::@3/(byte[256]) COLS#17 )
  (byte) numpoints#34 ← phi( findcol::@1/(byte) numpoints#35 findcol::@3/(byte) numpoints#36 )
  (byte) findcol::i#11 ← phi( findcol::@1/(byte) findcol::i#2 findcol::@3/(byte) findcol::i#12 )
  (byte) findcol::mindiff#8 ← phi( findcol::@1/(byte) findcol::mindiff#9 findcol::@3/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#7 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@3/(byte) findcol::yp#8 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#5 findcol::@3/(byte) findcol::y#11 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@3/(byte) findcol::xp#4 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@3/(byte) findcol::x#7 )
  (boolean~) findcol::$6 ← (byte) findcol::x#2 < (byte) findcol::xp#1
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (byte) findcol::mincol#13 ← phi( findcol::@1/(byte) findcol::mincol#11 )
  (byte[256]) YPOS#40 ← phi( findcol::@1/(byte[256]) YPOS#8 )
  (byte[256]) XPOS#41 ← phi( findcol::@1/(byte[256]) XPOS#8 )
  (byte[256]) COLS#20 ← phi( findcol::@1/(byte[256]) COLS#16 )
  (byte) numpoints#38 ← phi( findcol::@1/(byte) numpoints#35 )
  (byte) findcol::i#13 ← phi( findcol::@1/(byte) findcol::i#2 )
  (byte) findcol::mindiff#12 ← phi( findcol::@1/(byte) findcol::mindiff#9 )
  (byte) findcol::xp#5 ← phi( findcol::@1/(byte) findcol::xp#0 )
  (byte) findcol::x#8 ← phi( findcol::@1/(byte) findcol::x#1 )
  (byte) findcol::yp#1 ← phi( findcol::@1/(byte) findcol::yp#0 )
  (byte) findcol::y#1 ← phi( findcol::@1/(byte) findcol::y#5 )
  (boolean~) findcol::$4 ← (byte) findcol::y#1 == (byte) findcol::yp#1
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  (byte) findcol::mincol#12 ← phi( findcol::@9/(byte) findcol::mincol#13 )
  (byte[256]) YPOS#39 ← phi( findcol::@9/(byte[256]) YPOS#40 )
  (byte[256]) XPOS#40 ← phi( findcol::@9/(byte[256]) XPOS#41 )
  (byte[256]) COLS#17 ← phi( findcol::@9/(byte[256]) COLS#20 )
  (byte) numpoints#36 ← phi( findcol::@9/(byte) numpoints#38 )
  (byte) findcol::i#12 ← phi( findcol::@9/(byte) findcol::i#13 )
  (byte) findcol::mindiff#10 ← phi( findcol::@9/(byte) findcol::mindiff#12 )
  (byte) findcol::yp#8 ← phi( findcol::@9/(byte) findcol::yp#1 )
  (byte) findcol::y#11 ← phi( findcol::@9/(byte) findcol::y#1 )
  (byte) findcol::xp#4 ← phi( findcol::@9/(byte) findcol::xp#5 )
  (byte) findcol::x#7 ← phi( findcol::@9/(byte) findcol::x#8 )
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#5 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::return#3 )
  (byte) findcol::return#2 ← (byte) findcol::return#5
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#9 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#37 ← phi( findcol::@2/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#38 ← phi( findcol::@2/(byte[256]) XPOS#39 )
  (byte[256]) COLS#14 ← phi( findcol::@2/(byte[256]) COLS#15 )
  (byte) numpoints#33 ← phi( findcol::@2/(byte) numpoints#34 )
  (byte) findcol::i#10 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#7 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#6 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#7 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::xp#2 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte) findcol::x#3 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte~) findcol::$9 ← (byte) findcol::x#3 - (byte) findcol::xp#2
  (byte) findcol::diff#0 ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#8 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#36 ← phi( findcol::@2/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#37 ← phi( findcol::@2/(byte[256]) XPOS#39 )
  (byte[256]) COLS#13 ← phi( findcol::@2/(byte[256]) COLS#15 )
  (byte) numpoints#32 ← phi( findcol::@2/(byte) numpoints#34 )
  (byte) findcol::i#9 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#6 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#5 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#6 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::x#4 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte) findcol::xp#3 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte~) findcol::$8 ← (byte) findcol::xp#3 - (byte) findcol::x#4
  (byte) findcol::diff#1 ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::mincol#7 ← phi( findcol::@12/(byte) findcol::mincol#8 findcol::@4/(byte) findcol::mincol#9 )
  (byte) findcol::x#13 ← phi( findcol::@12/(byte) findcol::x#4 findcol::@4/(byte) findcol::x#3 )
  (byte[256]) YPOS#34 ← phi( findcol::@12/(byte[256]) YPOS#36 findcol::@4/(byte[256]) YPOS#37 )
  (byte[256]) XPOS#36 ← phi( findcol::@12/(byte[256]) XPOS#37 findcol::@4/(byte[256]) XPOS#38 )
  (byte[256]) COLS#12 ← phi( findcol::@12/(byte[256]) COLS#13 findcol::@4/(byte[256]) COLS#14 )
  (byte) numpoints#30 ← phi( findcol::@12/(byte) numpoints#32 findcol::@4/(byte) numpoints#33 )
  (byte) findcol::i#8 ← phi( findcol::@12/(byte) findcol::i#9 findcol::@4/(byte) findcol::i#10 )
  (byte) findcol::mindiff#5 ← phi( findcol::@12/(byte) findcol::mindiff#6 findcol::@4/(byte) findcol::mindiff#7 )
  (byte) findcol::diff#8 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (byte) findcol::yp#2 ← phi( findcol::@12/(byte) findcol::yp#5 findcol::@4/(byte) findcol::yp#6 )
  (byte) findcol::y#2 ← phi( findcol::@12/(byte) findcol::y#6 findcol::@4/(byte) findcol::y#7 )
  (boolean~) findcol::$10 ← (byte) findcol::y#2 < (byte) findcol::yp#2
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#6 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#12 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[256]) YPOS#29 ← phi( findcol::@5/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#32 ← phi( findcol::@5/(byte[256]) XPOS#36 )
  (byte[256]) COLS#11 ← phi( findcol::@5/(byte[256]) COLS#12 )
  (byte) numpoints#28 ← phi( findcol::@5/(byte) numpoints#30 )
  (byte) findcol::i#7 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#4 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#4 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::yp#3 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte) findcol::y#3 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte~) findcol::$14 ← (byte) findcol::y#3 - (byte) findcol::yp#3
  (byte~) findcol::$15 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  (byte) findcol::diff#2 ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#5 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#11 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[256]) YPOS#28 ← phi( findcol::@5/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#31 ← phi( findcol::@5/(byte[256]) XPOS#36 )
  (byte[256]) COLS#10 ← phi( findcol::@5/(byte[256]) COLS#12 )
  (byte) numpoints#27 ← phi( findcol::@5/(byte) numpoints#30 )
  (byte) findcol::i#6 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#3 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#5 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::y#4 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte) findcol::yp#4 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte~) findcol::$12 ← (byte) findcol::yp#4 - (byte) findcol::y#4
  (byte~) findcol::$13 ← (byte) findcol::diff#5 + (byte~) findcol::$12
  (byte) findcol::diff#3 ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::y#13 ← phi( findcol::@14/(byte) findcol::y#4 findcol::@6/(byte) findcol::y#3 )
  (byte) findcol::mincol#4 ← phi( findcol::@14/(byte) findcol::mincol#5 findcol::@6/(byte) findcol::mincol#6 )
  (byte) findcol::x#10 ← phi( findcol::@14/(byte) findcol::x#11 findcol::@6/(byte) findcol::x#12 )
  (byte[256]) YPOS#24 ← phi( findcol::@14/(byte[256]) YPOS#28 findcol::@6/(byte[256]) YPOS#29 )
  (byte[256]) XPOS#26 ← phi( findcol::@14/(byte[256]) XPOS#31 findcol::@6/(byte[256]) XPOS#32 )
  (byte[256]) COLS#9 ← phi( findcol::@14/(byte[256]) COLS#10 findcol::@6/(byte[256]) COLS#11 )
  (byte) numpoints#25 ← phi( findcol::@14/(byte) numpoints#27 findcol::@6/(byte) numpoints#28 )
  (byte) findcol::i#5 ← phi( findcol::@14/(byte) findcol::i#6 findcol::@6/(byte) findcol::i#7 )
  (byte) findcol::mindiff#2 ← phi( findcol::@14/(byte) findcol::mindiff#3 findcol::@6/(byte) findcol::mindiff#4 )
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$16 ← (byte) findcol::diff#6 < (byte) findcol::mindiff#2
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte[256]) COLS#19 ← phi( findcol::@16/(byte[256]) COLS#2 findcol::@7/(byte[256]) COLS#9 )
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::mindiff#1 findcol::@7/(byte) findcol::mindiff#2 )
  (byte) findcol::y#9 ← phi( findcol::@16/(byte) findcol::y#12 findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::mincol#3 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#4 )
  (byte) findcol::x#6 ← phi( findcol::@16/(byte) findcol::x#9 findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#20 ← phi( findcol::@16/(byte[256]) YPOS#23 findcol::@7/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#20 ← phi( findcol::@16/(byte[256]) XPOS#25 findcol::@7/(byte[256]) XPOS#26 )
  (byte) numpoints#21 ← phi( findcol::@16/(byte) numpoints#24 findcol::@7/(byte) numpoints#25 )
  (byte) findcol::i#3 ← phi( findcol::@16/(byte) findcol::i#4 findcol::@7/(byte) findcol::i#5 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#3
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#21
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::y#12 ← phi( findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::x#9 ← phi( findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#23 ← phi( findcol::@7/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#25 ← phi( findcol::@7/(byte[256]) XPOS#26 )
  (byte) numpoints#24 ← phi( findcol::@7/(byte) numpoints#25 )
  (byte) findcol::i#4 ← phi( findcol::@7/(byte) findcol::i#5 )
  (byte[256]) COLS#2 ← phi( findcol::@7/(byte[256]) COLS#9 )
  (byte) findcol::diff#7 ← phi( findcol::@7/(byte) findcol::diff#6 )
  (byte) findcol::mindiff#1 ← (byte) findcol::diff#7
  (byte~) findcol::$18 ← (byte[256]) COLS#2 *idx (byte) findcol::i#4
  (byte) findcol::mincol#1 ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::mincol#2 ← phi( findcol::@8/(byte) findcol::mincol#3 )
  (byte) findcol::return#3 ← (byte) findcol::mincol#2
  to:findcol::@return
@end: scope:[]  from @7

INITIAL SSA SYMBOL TABLE
(label) @7
(label) @begin
(label) @end
(byte*) COLORS
(byte*) COLORS#0
(byte*) COLORS#1
(byte*) COLORS#10
(byte*) COLORS#11
(byte*) COLORS#12
(byte*) COLORS#2
(byte*) COLORS#3
(byte*) COLORS#4
(byte*) COLORS#5
(byte*) COLORS#6
(byte*) COLORS#7
(byte*) COLORS#8
(byte*) COLORS#9
(byte[256]) COLS
(byte[256]) COLS#0
(byte[256]) COLS#1
(byte[256]) COLS#10
(byte[256]) COLS#11
(byte[256]) COLS#12
(byte[256]) COLS#13
(byte[256]) COLS#14
(byte[256]) COLS#15
(byte[256]) COLS#16
(byte[256]) COLS#17
(byte[256]) COLS#18
(byte[256]) COLS#19
(byte[256]) COLS#2
(byte[256]) COLS#20
(byte[256]) COLS#21
(byte[256]) COLS#22
(byte[256]) COLS#23
(byte[256]) COLS#24
(byte[256]) COLS#25
(byte[256]) COLS#26
(byte[256]) COLS#27
(byte[256]) COLS#28
(byte[256]) COLS#29
(byte[256]) COLS#3
(byte[256]) COLS#30
(byte[256]) COLS#4
(byte[256]) COLS#5
(byte[256]) COLS#6
(byte[256]) COLS#7
(byte[256]) COLS#8
(byte[256]) COLS#9
(byte) FILL
(byte) FILL#0
(byte) FILL#1
(byte) FILL#2
(byte) FILL#3
(byte) FILL#4
(byte) FILL#5
(byte) FILL#6
(byte) FILL#7
(byte) FILL#8
(byte) FILL#9
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte*) SCREEN#5
(byte*) SCREEN#6
(byte*) SCREEN#7
(byte*) SCREEN#8
(byte*) SCREEN#9
(byte[256]) XPOS
(byte[256]) XPOS#0
(byte[256]) XPOS#1
(byte[256]) XPOS#10
(byte[256]) XPOS#11
(byte[256]) XPOS#12
(byte[256]) XPOS#13
(byte[256]) XPOS#14
(byte[256]) XPOS#15
(byte[256]) XPOS#16
(byte[256]) XPOS#17
(byte[256]) XPOS#18
(byte[256]) XPOS#19
(byte[256]) XPOS#2
(byte[256]) XPOS#20
(byte[256]) XPOS#21
(byte[256]) XPOS#22
(byte[256]) XPOS#23
(byte[256]) XPOS#24
(byte[256]) XPOS#25
(byte[256]) XPOS#26
(byte[256]) XPOS#27
(byte[256]) XPOS#28
(byte[256]) XPOS#29
(byte[256]) XPOS#3
(byte[256]) XPOS#30
(byte[256]) XPOS#31
(byte[256]) XPOS#32
(byte[256]) XPOS#33
(byte[256]) XPOS#34
(byte[256]) XPOS#35
(byte[256]) XPOS#36
(byte[256]) XPOS#37
(byte[256]) XPOS#38
(byte[256]) XPOS#39
(byte[256]) XPOS#4
(byte[256]) XPOS#40
(byte[256]) XPOS#41
(byte[256]) XPOS#5
(byte[256]) XPOS#6
(byte[256]) XPOS#7
(byte[256]) XPOS#8
(byte[256]) XPOS#9
(byte[256]) YPOS
(byte[256]) YPOS#0
(byte[256]) YPOS#1
(byte[256]) YPOS#10
(byte[256]) YPOS#11
(byte[256]) YPOS#12
(byte[256]) YPOS#13
(byte[256]) YPOS#14
(byte[256]) YPOS#15
(byte[256]) YPOS#16
(byte[256]) YPOS#17
(byte[256]) YPOS#18
(byte[256]) YPOS#19
(byte[256]) YPOS#2
(byte[256]) YPOS#20
(byte[256]) YPOS#21
(byte[256]) YPOS#22
(byte[256]) YPOS#23
(byte[256]) YPOS#24
(byte[256]) YPOS#25
(byte[256]) YPOS#26
(byte[256]) YPOS#27
(byte[256]) YPOS#28
(byte[256]) YPOS#29
(byte[256]) YPOS#3
(byte[256]) YPOS#30
(byte[256]) YPOS#31
(byte[256]) YPOS#32
(byte[256]) YPOS#33
(byte[256]) YPOS#34
(byte[256]) YPOS#35
(byte[256]) YPOS#36
(byte[256]) YPOS#37
(byte[256]) YPOS#38
(byte[256]) YPOS#39
(byte[256]) YPOS#4
(byte[256]) YPOS#40
(byte[256]) YPOS#5
(byte[256]) YPOS#6
(byte[256]) YPOS#7
(byte[256]) YPOS#8
(byte[256]) YPOS#9
(void()) addpoint((byte) addpoint::x , (byte) addpoint::y , (byte) addpoint::c)
(label) addpoint::@return
(byte) addpoint::c
(byte) addpoint::c#0
(byte) addpoint::c#1
(byte) addpoint::c#2
(byte) addpoint::c#3
(byte) addpoint::c#4
(byte) addpoint::c#5
(byte) addpoint::c#6
(byte) addpoint::x
(byte) addpoint::x#0
(byte) addpoint::x#1
(byte) addpoint::x#2
(byte) addpoint::x#3
(byte) addpoint::x#4
(byte) addpoint::x#5
(byte) addpoint::x#6
(byte) addpoint::y
(byte) addpoint::y#0
(byte) addpoint::y#1
(byte) addpoint::y#2
(byte) addpoint::y#3
(byte) addpoint::y#4
(byte) addpoint::y#5
(byte) addpoint::y#6
(void()) animate()
(byte~) animate::$0
(byte~) animate::$1
(byte~) animate::$10
(byte~) animate::$11
(byte~) animate::$12
(boolean~) animate::$13
(boolean~) animate::$14
(byte~) animate::$15
(byte~) animate::$16
(byte~) animate::$17
(boolean~) animate::$18
(boolean~) animate::$19
(byte~) animate::$2
(byte~) animate::$20
(byte~) animate::$21
(byte~) animate::$22
(boolean~) animate::$23
(boolean~) animate::$24
(byte~) animate::$25
(byte~) animate::$26
(byte~) animate::$27
(boolean~) animate::$28
(boolean~) animate::$29
(boolean~) animate::$3
(byte~) animate::$30
(byte~) animate::$31
(boolean~) animate::$4
(byte~) animate::$5
(byte~) animate::$6
(byte~) animate::$7
(boolean~) animate::$8
(boolean~) animate::$9
(label) animate::@1
(label) animate::@10
(label) animate::@11
(label) animate::@12
(label) animate::@2
(label) animate::@3
(label) animate::@4
(label) animate::@5
(label) animate::@6
(label) animate::@7
(label) animate::@8
(label) animate::@9
(label) animate::@return
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$0
(byte~) findcol::$1
(boolean~) findcol::$10
(boolean~) findcol::$11
(byte~) findcol::$12
(byte~) findcol::$13
(byte~) findcol::$14
(byte~) findcol::$15
(boolean~) findcol::$16
(boolean~) findcol::$17
(byte~) findcol::$18
(boolean~) findcol::$19
(boolean~) findcol::$2
(boolean~) findcol::$3
(boolean~) findcol::$4
(boolean~) findcol::$5
(boolean~) findcol::$6
(boolean~) findcol::$7
(byte~) findcol::$8
(byte~) findcol::$9
(label) findcol::@1
(label) findcol::@10
(label) findcol::@12
(label) findcol::@14
(label) findcol::@16
(label) findcol::@17
(label) findcol::@2
(label) findcol::@3
(label) findcol::@4
(label) findcol::@5
(label) findcol::@6
(label) findcol::@7
(label) findcol::@8
(label) findcol::@9
(label) findcol::@return
(byte) findcol::diff
(byte) findcol::diff#0
(byte) findcol::diff#1
(byte) findcol::diff#2
(byte) findcol::diff#3
(byte) findcol::diff#4
(byte) findcol::diff#5
(byte) findcol::diff#6
(byte) findcol::diff#7
(byte) findcol::diff#8
(byte) findcol::i
(byte) findcol::i#0
(byte) findcol::i#1
(byte) findcol::i#10
(byte) findcol::i#11
(byte) findcol::i#12
(byte) findcol::i#13
(byte) findcol::i#2
(byte) findcol::i#3
(byte) findcol::i#4
(byte) findcol::i#5
(byte) findcol::i#6
(byte) findcol::i#7
(byte) findcol::i#8
(byte) findcol::i#9
(byte) findcol::mincol
(byte) findcol::mincol#0
(byte) findcol::mincol#1
(byte) findcol::mincol#10
(byte) findcol::mincol#11
(byte) findcol::mincol#12
(byte) findcol::mincol#13
(byte) findcol::mincol#2
(byte) findcol::mincol#3
(byte) findcol::mincol#4
(byte) findcol::mincol#5
(byte) findcol::mincol#6
(byte) findcol::mincol#7
(byte) findcol::mincol#8
(byte) findcol::mincol#9
(byte) findcol::mindiff
(byte) findcol::mindiff#0
(byte) findcol::mindiff#1
(byte) findcol::mindiff#10
(byte) findcol::mindiff#11
(byte) findcol::mindiff#12
(byte) findcol::mindiff#2
(byte) findcol::mindiff#3
(byte) findcol::mindiff#4
(byte) findcol::mindiff#5
(byte) findcol::mindiff#6
(byte) findcol::mindiff#7
(byte) findcol::mindiff#8
(byte) findcol::mindiff#9
(byte) findcol::return
(byte) findcol::return#0
(byte) findcol::return#1
(byte) findcol::return#2
(byte) findcol::return#3
(byte) findcol::return#4
(byte) findcol::return#5
(byte) findcol::x
(byte) findcol::x#0
(byte) findcol::x#1
(byte) findcol::x#10
(byte) findcol::x#11
(byte) findcol::x#12
(byte) findcol::x#13
(byte) findcol::x#2
(byte) findcol::x#3
(byte) findcol::x#4
(byte) findcol::x#5
(byte) findcol::x#6
(byte) findcol::x#7
(byte) findcol::x#8
(byte) findcol::x#9
(byte) findcol::xp
(byte) findcol::xp#0
(byte) findcol::xp#1
(byte) findcol::xp#2
(byte) findcol::xp#3
(byte) findcol::xp#4
(byte) findcol::xp#5
(byte) findcol::y
(byte) findcol::y#0
(byte) findcol::y#1
(byte) findcol::y#10
(byte) findcol::y#11
(byte) findcol::y#12
(byte) findcol::y#13
(byte) findcol::y#2
(byte) findcol::y#3
(byte) findcol::y#4
(byte) findcol::y#5
(byte) findcol::y#6
(byte) findcol::y#7
(byte) findcol::y#8
(byte) findcol::y#9
(byte) findcol::yp
(byte) findcol::yp#0
(byte) findcol::yp#1
(byte) findcol::yp#2
(byte) findcol::yp#3
(byte) findcol::yp#4
(byte) findcol::yp#5
(byte) findcol::yp#6
(byte) findcol::yp#7
(byte) findcol::yp#8
(void()) initscreen()
(byte*~) initscreen::$0
(boolean~) initscreen::$1
(label) initscreen::@1
(label) initscreen::@return
(byte*) initscreen::screen
(byte*) initscreen::screen#0
(byte*) initscreen::screen#1
(byte*) initscreen::screen#2
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) numpoints
(byte) numpoints#0
(byte) numpoints#1
(byte) numpoints#10
(byte) numpoints#11
(byte) numpoints#12
(byte) numpoints#13
(byte) numpoints#14
(byte) numpoints#15
(byte) numpoints#16
(byte) numpoints#17
(byte) numpoints#18
(byte) numpoints#19
(byte) numpoints#2
(byte) numpoints#20
(byte) numpoints#21
(byte) numpoints#22
(byte) numpoints#23
(byte) numpoints#24
(byte) numpoints#25
(byte) numpoints#26
(byte) numpoints#27
(byte) numpoints#28
(byte) numpoints#29
(byte) numpoints#3
(byte) numpoints#30
(byte) numpoints#31
(byte) numpoints#32
(byte) numpoints#33
(byte) numpoints#34
(byte) numpoints#35
(byte) numpoints#36
(byte) numpoints#37
(byte) numpoints#38
(byte) numpoints#39
(byte) numpoints#4
(byte) numpoints#40
(byte) numpoints#41
(byte) numpoints#42
(byte) numpoints#43
(byte) numpoints#5
(byte) numpoints#6
(byte) numpoints#7
(byte) numpoints#8
(byte) numpoints#9
(void()) render()
(byte~) render::$0
(boolean~) render::$1
(byte*~) render::$2
(boolean~) render::$3
(label) render::@1
(label) render::@2
(label) render::@3
(label) render::@5
(label) render::@return
(byte) render::col
(byte) render::col#0
(byte*) render::colline
(byte*) render::colline#0
(byte*) render::colline#1
(byte*) render::colline#2
(byte*) render::colline#3
(byte*) render::colline#4
(byte*) render::colline#5
(byte) render::x
(byte) render::x#0
(byte) render::x#1
(byte) render::x#2
(byte) render::x#3
(byte) render::y
(byte) render::y#0
(byte) render::y#1
(byte) render::y#2
(byte) render::y#3
(byte) render::y#4
(byte) render::y#5

Culled Empty Block (label) animate::@5
Culled Empty Block (label) animate::@6
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) COLORS#0 ← (word) 55296
  (byte) FILL#0 ← (byte) 230
  (byte) numpoints#0 ← (byte) 0
  (byte[256]) XPOS#0 ← (word) 4096
  (byte[256]) YPOS#0 ← (word) 4352
  (byte[256]) COLS#0 ← (word) 4608
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  (byte) numpoints#11 ← phi( @begin/(byte) numpoints#8 )
  (byte) numpoints#1 ← (byte) numpoints#11
  to:@end
main: scope:[main]  from @begin
  (byte*) COLORS#12 ← phi( @begin/(byte*) COLORS#0 )
  (byte) FILL#9 ← phi( @begin/(byte) FILL#0 )
  (byte*) SCREEN#9 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[256]) COLS#3 ← phi( @begin/(byte[256]) COLS#0 )
  (byte[256]) YPOS#13 ← phi( @begin/(byte[256]) YPOS#0 )
  (byte[256]) XPOS#13 ← phi( @begin/(byte[256]) XPOS#0 )
  (byte) numpoints#22 ← phi( @begin/(byte) numpoints#0 )
  (byte) addpoint::x#0 ← (byte) 5
  (byte) addpoint::y#0 ← (byte) 5
  (byte) addpoint::c#0 ← (byte) 1
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte*) COLORS#11 ← phi( main/(byte*) COLORS#12 )
  (byte) FILL#8 ← phi( main/(byte) FILL#9 )
  (byte*) SCREEN#8 ← phi( main/(byte*) SCREEN#9 )
  (byte[256]) COLS#4 ← phi( main/(byte[256]) COLS#3 )
  (byte[256]) YPOS#14 ← phi( main/(byte[256]) YPOS#13 )
  (byte[256]) XPOS#14 ← phi( main/(byte[256]) XPOS#13 )
  (byte) numpoints#12 ← phi( main/(byte) numpoints#10 )
  (byte) numpoints#2 ← (byte) numpoints#12
  (byte) addpoint::x#1 ← (byte) 15
  (byte) addpoint::y#1 ← (byte) 8
  (byte) addpoint::c#1 ← (byte) 2
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) COLORS#10 ← phi( main::@3/(byte*) COLORS#11 )
  (byte) FILL#7 ← phi( main::@3/(byte) FILL#8 )
  (byte*) SCREEN#7 ← phi( main::@3/(byte*) SCREEN#8 )
  (byte[256]) COLS#5 ← phi( main::@3/(byte[256]) COLS#4 )
  (byte[256]) YPOS#15 ← phi( main::@3/(byte[256]) YPOS#14 )
  (byte[256]) XPOS#15 ← phi( main::@3/(byte[256]) XPOS#14 )
  (byte) numpoints#13 ← phi( main::@3/(byte) numpoints#10 )
  (byte) numpoints#3 ← (byte) numpoints#13
  (byte) addpoint::x#2 ← (byte) 6
  (byte) addpoint::y#2 ← (byte) 14
  (byte) addpoint::c#2 ← (byte) 3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) COLORS#9 ← phi( main::@4/(byte*) COLORS#10 )
  (byte) FILL#6 ← phi( main::@4/(byte) FILL#7 )
  (byte*) SCREEN#6 ← phi( main::@4/(byte*) SCREEN#7 )
  (byte[256]) COLS#6 ← phi( main::@4/(byte[256]) COLS#5 )
  (byte[256]) YPOS#16 ← phi( main::@4/(byte[256]) YPOS#15 )
  (byte[256]) XPOS#16 ← phi( main::@4/(byte[256]) XPOS#15 )
  (byte) numpoints#14 ← phi( main::@4/(byte) numpoints#10 )
  (byte) numpoints#4 ← (byte) numpoints#14
  (byte) addpoint::x#3 ← (byte) 34
  (byte) addpoint::y#3 ← (byte) 2
  (byte) addpoint::c#3 ← (byte) 4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) COLORS#8 ← phi( main::@5/(byte*) COLORS#9 )
  (byte) FILL#5 ← phi( main::@5/(byte) FILL#6 )
  (byte*) SCREEN#5 ← phi( main::@5/(byte*) SCREEN#6 )
  (byte[256]) COLS#7 ← phi( main::@5/(byte[256]) COLS#6 )
  (byte[256]) YPOS#17 ← phi( main::@5/(byte[256]) YPOS#16 )
  (byte[256]) XPOS#17 ← phi( main::@5/(byte[256]) XPOS#16 )
  (byte) numpoints#15 ← phi( main::@5/(byte) numpoints#10 )
  (byte) numpoints#5 ← (byte) numpoints#15
  (byte) addpoint::x#4 ← (byte) 21
  (byte) addpoint::y#4 ← (byte) 17
  (byte) addpoint::c#4 ← (byte) 5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) COLORS#7 ← phi( main::@6/(byte*) COLORS#8 )
  (byte) FILL#4 ← phi( main::@6/(byte) FILL#5 )
  (byte*) SCREEN#4 ← phi( main::@6/(byte*) SCREEN#5 )
  (byte[256]) COLS#8 ← phi( main::@6/(byte[256]) COLS#7 )
  (byte[256]) YPOS#18 ← phi( main::@6/(byte[256]) YPOS#17 )
  (byte[256]) XPOS#18 ← phi( main::@6/(byte[256]) XPOS#17 )
  (byte) numpoints#16 ← phi( main::@6/(byte) numpoints#10 )
  (byte) numpoints#6 ← (byte) numpoints#16
  (byte) addpoint::x#5 ← (byte) 31
  (byte) addpoint::y#5 ← (byte) 22
  (byte) addpoint::c#5 ← (byte) 7
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte[256]) COLS#29 ← phi( main::@7/(byte[256]) COLS#8 )
  (byte[256]) YPOS#35 ← phi( main::@7/(byte[256]) YPOS#18 )
  (byte[256]) XPOS#33 ← phi( main::@7/(byte[256]) XPOS#18 )
  (byte*) COLORS#5 ← phi( main::@7/(byte*) COLORS#7 )
  (byte) FILL#3 ← phi( main::@7/(byte) FILL#4 )
  (byte*) SCREEN#3 ← phi( main::@7/(byte*) SCREEN#4 )
  (byte) numpoints#17 ← phi( main::@7/(byte) numpoints#10 )
  (byte) numpoints#7 ← (byte) numpoints#17
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  (byte[256]) COLS#28 ← phi( main::@8/(byte[256]) COLS#29 )
  (byte[256]) YPOS#31 ← phi( main::@8/(byte[256]) YPOS#35 )
  (byte) numpoints#31 ← phi( main::@8/(byte) numpoints#7 )
  (byte[256]) XPOS#28 ← phi( main::@8/(byte[256]) XPOS#33 )
  (byte*) COLORS#4 ← phi( main::@8/(byte*) COLORS#5 )
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) COLS#26 ← phi( main::@11/(byte[256]) COLS#27 main::@9/(byte[256]) COLS#28 )
  (byte[256]) YPOS#25 ← phi( main::@11/(byte[256]) YPOS#30 main::@9/(byte[256]) YPOS#31 )
  (byte) numpoints#29 ← phi( main::@11/(byte) numpoints#23 main::@9/(byte) numpoints#31 )
  (byte[256]) XPOS#21 ← phi( main::@11/(byte[256]) XPOS#27 main::@9/(byte[256]) XPOS#28 )
  (byte*) COLORS#2 ← phi( main::@11/(byte*) COLORS#3 main::@9/(byte*) COLORS#4 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  (byte[256]) COLS#30 ← phi( main::@1/(byte[256]) COLS#26 )
  (byte*) COLORS#6 ← phi( main::@1/(byte*) COLORS#2 )
  (byte[256]) YPOS#21 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte) numpoints#26 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) XPOS#9 ← phi( main::@1/(byte[256]) XPOS#21 )
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte[256]) COLS#27 ← phi( main::@10/(byte[256]) COLS#30 )
  (byte[256]) YPOS#30 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#27 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte*) COLORS#3 ← phi( main::@10/(byte*) COLORS#6 )
  (byte) numpoints#23 ← phi( main::@10/(byte) numpoints#26 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  (byte) numpoints#18 ← phi( main::@11/(byte) numpoints#23 )
  (byte) numpoints#8 ← (byte) numpoints#18
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte[256]) YPOS#9 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#1 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte[256]) XPOS#10 ← phi( animate/(byte[256]) XPOS#1 animate::@7/(byte[256]) XPOS#2 )
  (byte[256]) YPOS#1 ← phi( animate/(byte[256]) YPOS#9 animate::@7/(byte[256]) YPOS#10 )
  (byte~) animate::$5 ← (byte[256]) YPOS#1 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS#1 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS#1 *idx (byte) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  (byte[256]) YPOS#10 ← phi( animate/(byte[256]) YPOS#9 )
  (byte[256]) XPOS#2 ← phi( animate/(byte[256]) XPOS#1 )
  *((byte[256]) XPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte[256]) YPOS#11 ← phi( animate::@1/(byte[256]) YPOS#1 animate::@8/(byte[256]) YPOS#2 )
  (byte[256]) XPOS#3 ← phi( animate::@1/(byte[256]) XPOS#10 animate::@8/(byte[256]) XPOS#11 )
  (byte~) animate::$10 ← (byte[256]) XPOS#3 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS#3 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS#3 *idx (byte) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  (byte[256]) XPOS#11 ← phi( animate::@1/(byte[256]) XPOS#10 )
  (byte[256]) YPOS#2 ← phi( animate::@1/(byte[256]) YPOS#1 )
  *((byte[256]) YPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte[256]) XPOS#23 ← phi( animate::@2/(byte[256]) XPOS#3 animate::@9/(byte[256]) XPOS#4 )
  (byte[256]) YPOS#3 ← phi( animate::@2/(byte[256]) YPOS#11 animate::@9/(byte[256]) YPOS#12 )
  (byte~) animate::$15 ← (byte[256]) YPOS#3 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS#3 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS#3 *idx (byte) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  (byte[256]) YPOS#12 ← phi( animate::@2/(byte[256]) YPOS#11 )
  (byte[256]) XPOS#4 ← phi( animate::@2/(byte[256]) XPOS#3 )
  *((byte[256]) XPOS#4 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte[256]) XPOS#12 ← phi( animate::@10/(byte[256]) XPOS#22 animate::@3/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#4 ← phi( animate::@10/(byte[256]) YPOS#5 animate::@3/(byte[256]) YPOS#3 )
  (byte~) animate::$20 ← (byte[256]) YPOS#4 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS#4 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS#4 *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  (byte[256]) XPOS#22 ← phi( animate::@3/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#5 ← phi( animate::@3/(byte[256]) YPOS#3 )
  *((byte[256]) YPOS#5 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  (byte[256]) XPOS#5 ← phi( animate::@4/(byte[256]) XPOS#12 )
  (byte[256]) YPOS#6 ← phi( animate::@4/(byte[256]) YPOS#4 )
  *((byte[256]) YPOS#6 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS#5 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS#5 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS#5 *idx (byte) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte[256]) XPOS#6 ← phi( animate::@11/(byte[256]) XPOS#5 )
  (byte~) animate::$30 ← (byte[256]) XPOS#6 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS#6 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte[256]) COLS#1 ← phi( main/(byte[256]) COLS#3 main::@3/(byte[256]) COLS#4 main::@4/(byte[256]) COLS#5 main::@5/(byte[256]) COLS#6 main::@6/(byte[256]) COLS#7 main::@7/(byte[256]) COLS#8 )
  (byte) addpoint::c#6 ← phi( main/(byte) addpoint::c#0 main::@3/(byte) addpoint::c#1 main::@4/(byte) addpoint::c#2 main::@5/(byte) addpoint::c#3 main::@6/(byte) addpoint::c#4 main::@7/(byte) addpoint::c#5 )
  (byte[256]) YPOS#7 ← phi( main/(byte[256]) YPOS#13 main::@3/(byte[256]) YPOS#14 main::@4/(byte[256]) YPOS#15 main::@5/(byte[256]) YPOS#16 main::@6/(byte[256]) YPOS#17 main::@7/(byte[256]) YPOS#18 )
  (byte) addpoint::y#6 ← phi( main/(byte) addpoint::y#0 main::@3/(byte) addpoint::y#1 main::@4/(byte) addpoint::y#2 main::@5/(byte) addpoint::y#3 main::@6/(byte) addpoint::y#4 main::@7/(byte) addpoint::y#5 )
  (byte) numpoints#19 ← phi( main/(byte) numpoints#22 main::@3/(byte) numpoints#2 main::@4/(byte) numpoints#3 main::@5/(byte) numpoints#4 main::@6/(byte) numpoints#5 main::@7/(byte) numpoints#6 )
  (byte[256]) XPOS#7 ← phi( main/(byte[256]) XPOS#13 main::@3/(byte[256]) XPOS#14 main::@4/(byte[256]) XPOS#15 main::@5/(byte[256]) XPOS#16 main::@6/(byte[256]) XPOS#17 main::@7/(byte[256]) XPOS#18 )
  (byte) addpoint::x#6 ← phi( main/(byte) addpoint::x#0 main::@3/(byte) addpoint::x#1 main::@4/(byte) addpoint::x#2 main::@5/(byte) addpoint::x#3 main::@6/(byte) addpoint::x#4 main::@7/(byte) addpoint::x#5 )
  *((byte[256]) XPOS#7 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((byte[256]) YPOS#7 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((byte[256]) COLS#1 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#9 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  (byte) numpoints#20 ← phi( addpoint/(byte) numpoints#9 )
  (byte) numpoints#10 ← (byte) numpoints#20
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte) FILL#2 ← phi( main::@8/(byte) FILL#3 )
  (byte*) SCREEN#1 ← phi( main::@8/(byte*) SCREEN#3 )
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#1 initscreen::@1/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte[256]) COLS#24 ← phi( main::@1/(byte[256]) COLS#26 )
  (byte) numpoints#42 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) YPOS#32 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte[256]) XPOS#34 ← phi( main::@1/(byte[256]) XPOS#21 )
  (byte*) COLORS#1 ← phi( main::@1/(byte*) COLORS#2 )
  (byte*) render::colline#0 ← (byte*) COLORS#1
  (byte) render::y#0 ← (byte) 0
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(byte[256]) COLS#24 render::@3/(byte[256]) COLS#25 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#42 render::@3/(byte) numpoints#43 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#32 render::@3/(byte[256]) YPOS#33 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#34 render::@3/(byte[256]) XPOS#35 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) render::y#0 render::@3/(byte) render::y#1 )
  (byte) render::x#0 ← (byte) 0
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#21 ← phi( render::@1/(byte[256]) COLS#22 render::@5/(byte[256]) COLS#23 )
  (byte) numpoints#39 ← phi( render::@1/(byte) numpoints#40 render::@5/(byte) numpoints#41 )
  (byte[256]) YPOS#22 ← phi( render::@1/(byte[256]) YPOS#26 render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#24 ← phi( render::@1/(byte[256]) XPOS#29 render::@5/(byte[256]) XPOS#30 )
  (byte*) render::colline#4 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#5 )
  (byte) render::x#2 ← phi( render::@1/(byte) render::x#0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte[256]) COLS#23 ← phi( render::@2/(byte[256]) COLS#21 )
  (byte) numpoints#41 ← phi( render::@2/(byte) numpoints#39 )
  (byte[256]) YPOS#27 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#30 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) render::y#5 ← phi( render::@2/(byte) render::y#2 )
  (byte) render::x#3 ← phi( render::@2/(byte) render::x#2 )
  (byte*) render::colline#2 ← phi( render::@2/(byte*) render::colline#4 )
  (byte) findcol::return#4 ← phi( render::@2/(byte) findcol::return#0 )
  (byte~) render::$0 ← (byte) findcol::return#4
  (byte) render::col#0 ← (byte~) render::$0
  *((byte*) render::colline#2 + (byte) render::x#3) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#3
  (boolean~) render::$1 ← (byte) render::x#1 != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte[256]) COLS#25 ← phi( render::@5/(byte[256]) COLS#23 )
  (byte) numpoints#43 ← phi( render::@5/(byte) numpoints#41 )
  (byte[256]) YPOS#33 ← phi( render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#35 ← phi( render::@5/(byte[256]) XPOS#30 )
  (byte) render::y#3 ← phi( render::@5/(byte) render::y#5 )
  (byte*) render::colline#3 ← phi( render::@5/(byte*) render::colline#2 )
  (byte*~) render::$2 ← (byte*) render::colline#3 + (byte) 40
  (byte*) render::colline#1 ← (byte*~) render::$2
  (byte) render::y#1 ← ++ (byte) render::y#3
  (boolean~) render::$3 ← (byte) render::y#1 != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte[256]) COLS#18 ← phi( render::@2/(byte[256]) COLS#21 )
  (byte) numpoints#37 ← phi( render::@2/(byte) numpoints#39 )
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte[256]) YPOS#19 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#19 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) findcol::mindiff#0 ← (byte) 255
  (byte) findcol::mincol#0 ← (byte) 0
  (byte) findcol::i#0 ← (byte) 0
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) findcol::mincol#0 findcol::@8/(byte) findcol::mincol#3 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 findcol::@8/(byte[256]) COLS#19 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 findcol::@8/(byte) numpoints#21 )
  (byte) findcol::mindiff#9 ← phi( findcol/(byte) findcol::mindiff#0 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#5 ← phi( findcol/(byte) findcol::y#8 findcol::@8/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 findcol::@8/(byte) findcol::x#6 )
  (byte[256]) YPOS#8 ← phi( findcol/(byte[256]) YPOS#19 findcol::@8/(byte[256]) YPOS#20 )
  (byte) findcol::i#2 ← phi( findcol/(byte) findcol::i#0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#8 ← phi( findcol/(byte[256]) XPOS#19 findcol::@8/(byte[256]) XPOS#20 )
  (byte~) findcol::$0 ← (byte[256]) XPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::xp#0 ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::yp#0 ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x#1 == (byte) findcol::xp#0
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@3/(byte) findcol::mincol#12 )
  (byte[256]) YPOS#38 ← phi( findcol::@1/(byte[256]) YPOS#8 findcol::@3/(byte[256]) YPOS#39 )
  (byte[256]) XPOS#39 ← phi( findcol::@1/(byte[256]) XPOS#8 findcol::@3/(byte[256]) XPOS#40 )
  (byte[256]) COLS#15 ← phi( findcol::@1/(byte[256]) COLS#16 findcol::@3/(byte[256]) COLS#17 )
  (byte) numpoints#34 ← phi( findcol::@1/(byte) numpoints#35 findcol::@3/(byte) numpoints#36 )
  (byte) findcol::i#11 ← phi( findcol::@1/(byte) findcol::i#2 findcol::@3/(byte) findcol::i#12 )
  (byte) findcol::mindiff#8 ← phi( findcol::@1/(byte) findcol::mindiff#9 findcol::@3/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#7 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@3/(byte) findcol::yp#8 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#5 findcol::@3/(byte) findcol::y#11 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@3/(byte) findcol::xp#4 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@3/(byte) findcol::x#7 )
  (boolean~) findcol::$6 ← (byte) findcol::x#2 < (byte) findcol::xp#1
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (byte) findcol::mincol#13 ← phi( findcol::@1/(byte) findcol::mincol#11 )
  (byte[256]) YPOS#40 ← phi( findcol::@1/(byte[256]) YPOS#8 )
  (byte[256]) XPOS#41 ← phi( findcol::@1/(byte[256]) XPOS#8 )
  (byte[256]) COLS#20 ← phi( findcol::@1/(byte[256]) COLS#16 )
  (byte) numpoints#38 ← phi( findcol::@1/(byte) numpoints#35 )
  (byte) findcol::i#13 ← phi( findcol::@1/(byte) findcol::i#2 )
  (byte) findcol::mindiff#12 ← phi( findcol::@1/(byte) findcol::mindiff#9 )
  (byte) findcol::xp#5 ← phi( findcol::@1/(byte) findcol::xp#0 )
  (byte) findcol::x#8 ← phi( findcol::@1/(byte) findcol::x#1 )
  (byte) findcol::yp#1 ← phi( findcol::@1/(byte) findcol::yp#0 )
  (byte) findcol::y#1 ← phi( findcol::@1/(byte) findcol::y#5 )
  (boolean~) findcol::$4 ← (byte) findcol::y#1 == (byte) findcol::yp#1
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  (byte) findcol::mincol#12 ← phi( findcol::@9/(byte) findcol::mincol#13 )
  (byte[256]) YPOS#39 ← phi( findcol::@9/(byte[256]) YPOS#40 )
  (byte[256]) XPOS#40 ← phi( findcol::@9/(byte[256]) XPOS#41 )
  (byte[256]) COLS#17 ← phi( findcol::@9/(byte[256]) COLS#20 )
  (byte) numpoints#36 ← phi( findcol::@9/(byte) numpoints#38 )
  (byte) findcol::i#12 ← phi( findcol::@9/(byte) findcol::i#13 )
  (byte) findcol::mindiff#10 ← phi( findcol::@9/(byte) findcol::mindiff#12 )
  (byte) findcol::yp#8 ← phi( findcol::@9/(byte) findcol::yp#1 )
  (byte) findcol::y#11 ← phi( findcol::@9/(byte) findcol::y#1 )
  (byte) findcol::xp#4 ← phi( findcol::@9/(byte) findcol::xp#5 )
  (byte) findcol::x#7 ← phi( findcol::@9/(byte) findcol::x#8 )
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  (byte) findcol::return#1 ← (byte) 0
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#5 ← phi( findcol::@10/(byte) findcol::return#1 findcol::@17/(byte) findcol::return#3 )
  (byte) findcol::return#2 ← (byte) findcol::return#5
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#9 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#37 ← phi( findcol::@2/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#38 ← phi( findcol::@2/(byte[256]) XPOS#39 )
  (byte[256]) COLS#14 ← phi( findcol::@2/(byte[256]) COLS#15 )
  (byte) numpoints#33 ← phi( findcol::@2/(byte) numpoints#34 )
  (byte) findcol::i#10 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#7 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#6 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#7 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::xp#2 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte) findcol::x#3 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte~) findcol::$9 ← (byte) findcol::x#3 - (byte) findcol::xp#2
  (byte) findcol::diff#0 ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#8 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#36 ← phi( findcol::@2/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#37 ← phi( findcol::@2/(byte[256]) XPOS#39 )
  (byte[256]) COLS#13 ← phi( findcol::@2/(byte[256]) COLS#15 )
  (byte) numpoints#32 ← phi( findcol::@2/(byte) numpoints#34 )
  (byte) findcol::i#9 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#6 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#5 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#6 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::x#4 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte) findcol::xp#3 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte~) findcol::$8 ← (byte) findcol::xp#3 - (byte) findcol::x#4
  (byte) findcol::diff#1 ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::mincol#7 ← phi( findcol::@12/(byte) findcol::mincol#8 findcol::@4/(byte) findcol::mincol#9 )
  (byte) findcol::x#13 ← phi( findcol::@12/(byte) findcol::x#4 findcol::@4/(byte) findcol::x#3 )
  (byte[256]) YPOS#34 ← phi( findcol::@12/(byte[256]) YPOS#36 findcol::@4/(byte[256]) YPOS#37 )
  (byte[256]) XPOS#36 ← phi( findcol::@12/(byte[256]) XPOS#37 findcol::@4/(byte[256]) XPOS#38 )
  (byte[256]) COLS#12 ← phi( findcol::@12/(byte[256]) COLS#13 findcol::@4/(byte[256]) COLS#14 )
  (byte) numpoints#30 ← phi( findcol::@12/(byte) numpoints#32 findcol::@4/(byte) numpoints#33 )
  (byte) findcol::i#8 ← phi( findcol::@12/(byte) findcol::i#9 findcol::@4/(byte) findcol::i#10 )
  (byte) findcol::mindiff#5 ← phi( findcol::@12/(byte) findcol::mindiff#6 findcol::@4/(byte) findcol::mindiff#7 )
  (byte) findcol::diff#8 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (byte) findcol::yp#2 ← phi( findcol::@12/(byte) findcol::yp#5 findcol::@4/(byte) findcol::yp#6 )
  (byte) findcol::y#2 ← phi( findcol::@12/(byte) findcol::y#6 findcol::@4/(byte) findcol::y#7 )
  (boolean~) findcol::$10 ← (byte) findcol::y#2 < (byte) findcol::yp#2
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#6 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#12 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[256]) YPOS#29 ← phi( findcol::@5/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#32 ← phi( findcol::@5/(byte[256]) XPOS#36 )
  (byte[256]) COLS#11 ← phi( findcol::@5/(byte[256]) COLS#12 )
  (byte) numpoints#28 ← phi( findcol::@5/(byte) numpoints#30 )
  (byte) findcol::i#7 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#4 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#4 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::yp#3 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte) findcol::y#3 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte~) findcol::$14 ← (byte) findcol::y#3 - (byte) findcol::yp#3
  (byte~) findcol::$15 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  (byte) findcol::diff#2 ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#5 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#11 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[256]) YPOS#28 ← phi( findcol::@5/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#31 ← phi( findcol::@5/(byte[256]) XPOS#36 )
  (byte[256]) COLS#10 ← phi( findcol::@5/(byte[256]) COLS#12 )
  (byte) numpoints#27 ← phi( findcol::@5/(byte) numpoints#30 )
  (byte) findcol::i#6 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#3 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#5 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::y#4 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte) findcol::yp#4 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte~) findcol::$12 ← (byte) findcol::yp#4 - (byte) findcol::y#4
  (byte~) findcol::$13 ← (byte) findcol::diff#5 + (byte~) findcol::$12
  (byte) findcol::diff#3 ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::y#13 ← phi( findcol::@14/(byte) findcol::y#4 findcol::@6/(byte) findcol::y#3 )
  (byte) findcol::mincol#4 ← phi( findcol::@14/(byte) findcol::mincol#5 findcol::@6/(byte) findcol::mincol#6 )
  (byte) findcol::x#10 ← phi( findcol::@14/(byte) findcol::x#11 findcol::@6/(byte) findcol::x#12 )
  (byte[256]) YPOS#24 ← phi( findcol::@14/(byte[256]) YPOS#28 findcol::@6/(byte[256]) YPOS#29 )
  (byte[256]) XPOS#26 ← phi( findcol::@14/(byte[256]) XPOS#31 findcol::@6/(byte[256]) XPOS#32 )
  (byte[256]) COLS#9 ← phi( findcol::@14/(byte[256]) COLS#10 findcol::@6/(byte[256]) COLS#11 )
  (byte) numpoints#25 ← phi( findcol::@14/(byte) numpoints#27 findcol::@6/(byte) numpoints#28 )
  (byte) findcol::i#5 ← phi( findcol::@14/(byte) findcol::i#6 findcol::@6/(byte) findcol::i#7 )
  (byte) findcol::mindiff#2 ← phi( findcol::@14/(byte) findcol::mindiff#3 findcol::@6/(byte) findcol::mindiff#4 )
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$16 ← (byte) findcol::diff#6 < (byte) findcol::mindiff#2
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte[256]) COLS#19 ← phi( findcol::@16/(byte[256]) COLS#2 findcol::@7/(byte[256]) COLS#9 )
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::mindiff#1 findcol::@7/(byte) findcol::mindiff#2 )
  (byte) findcol::y#9 ← phi( findcol::@16/(byte) findcol::y#12 findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::mincol#3 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#4 )
  (byte) findcol::x#6 ← phi( findcol::@16/(byte) findcol::x#9 findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#20 ← phi( findcol::@16/(byte[256]) YPOS#23 findcol::@7/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#20 ← phi( findcol::@16/(byte[256]) XPOS#25 findcol::@7/(byte[256]) XPOS#26 )
  (byte) numpoints#21 ← phi( findcol::@16/(byte) numpoints#24 findcol::@7/(byte) numpoints#25 )
  (byte) findcol::i#3 ← phi( findcol::@16/(byte) findcol::i#4 findcol::@7/(byte) findcol::i#5 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#3
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#21
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::y#12 ← phi( findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::x#9 ← phi( findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#23 ← phi( findcol::@7/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#25 ← phi( findcol::@7/(byte[256]) XPOS#26 )
  (byte) numpoints#24 ← phi( findcol::@7/(byte) numpoints#25 )
  (byte) findcol::i#4 ← phi( findcol::@7/(byte) findcol::i#5 )
  (byte[256]) COLS#2 ← phi( findcol::@7/(byte[256]) COLS#9 )
  (byte) findcol::diff#7 ← phi( findcol::@7/(byte) findcol::diff#6 )
  (byte) findcol::mindiff#1 ← (byte) findcol::diff#7
  (byte~) findcol::$18 ← (byte[256]) COLS#2 *idx (byte) findcol::i#4
  (byte) findcol::mincol#1 ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::mincol#2 ← phi( findcol::@8/(byte) findcol::mincol#3 )
  (byte) findcol::return#3 ← (byte) findcol::mincol#2
  to:findcol::@return
@end: scope:[]  from @7

Constant (byte*) SCREEN#0 (word) 1024
Constant (byte*) COLORS#0 (word) 55296
Constant (byte) FILL#0 (byte) 230
Constant (byte) numpoints#0 (byte) 0
Constant (byte[256]) XPOS#0 (word) 4096
Constant (byte[256]) YPOS#0 (word) 4352
Constant (byte[256]) COLS#0 (word) 4608
Constant (byte) addpoint::x#0 (byte) 5
Constant (byte) addpoint::y#0 (byte) 5
Constant (byte) addpoint::c#0 (byte) 1
Constant (byte) addpoint::x#1 (byte) 15
Constant (byte) addpoint::y#1 (byte) 8
Constant (byte) addpoint::c#1 (byte) 2
Constant (byte) addpoint::x#2 (byte) 6
Constant (byte) addpoint::y#2 (byte) 14
Constant (byte) addpoint::c#2 (byte) 3
Constant (byte) addpoint::x#3 (byte) 34
Constant (byte) addpoint::y#3 (byte) 2
Constant (byte) addpoint::c#3 (byte) 4
Constant (byte) addpoint::x#4 (byte) 21
Constant (byte) addpoint::y#4 (byte) 17
Constant (byte) addpoint::c#4 (byte) 5
Constant (byte) addpoint::x#5 (byte) 31
Constant (byte) addpoint::y#5 (byte) 22
Constant (byte) addpoint::c#5 (byte) 7
Constant (byte) render::y#0 (byte) 0
Constant (byte) render::x#0 (byte) 0
Constant (byte) findcol::mindiff#0 (byte) 255
Constant (byte) findcol::mincol#0 (byte) 0
Constant (byte) findcol::i#0 (byte) 0
Constant (byte) findcol::return#1 (byte) 0
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  (byte) numpoints#11 ← phi( @begin/(byte) numpoints#8 )
  (byte) numpoints#1 ← (byte) numpoints#11
  to:@end
main: scope:[main]  from @begin
  (byte*) COLORS#12 ← phi( @begin/(word) 55296 )
  (byte) FILL#9 ← phi( @begin/(byte) 230 )
  (byte*) SCREEN#9 ← phi( @begin/(word) 1024 )
  (byte[256]) COLS#3 ← phi( @begin/(word) 4608 )
  (byte[256]) YPOS#13 ← phi( @begin/(word) 4352 )
  (byte[256]) XPOS#13 ← phi( @begin/(word) 4096 )
  (byte) numpoints#22 ← phi( @begin/(byte) 0 )
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte*) COLORS#11 ← phi( main/(byte*) COLORS#12 )
  (byte) FILL#8 ← phi( main/(byte) FILL#9 )
  (byte*) SCREEN#8 ← phi( main/(byte*) SCREEN#9 )
  (byte[256]) COLS#4 ← phi( main/(byte[256]) COLS#3 )
  (byte[256]) YPOS#14 ← phi( main/(byte[256]) YPOS#13 )
  (byte[256]) XPOS#14 ← phi( main/(byte[256]) XPOS#13 )
  (byte) numpoints#12 ← phi( main/(byte) numpoints#10 )
  (byte) numpoints#2 ← (byte) numpoints#12
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) COLORS#10 ← phi( main::@3/(byte*) COLORS#11 )
  (byte) FILL#7 ← phi( main::@3/(byte) FILL#8 )
  (byte*) SCREEN#7 ← phi( main::@3/(byte*) SCREEN#8 )
  (byte[256]) COLS#5 ← phi( main::@3/(byte[256]) COLS#4 )
  (byte[256]) YPOS#15 ← phi( main::@3/(byte[256]) YPOS#14 )
  (byte[256]) XPOS#15 ← phi( main::@3/(byte[256]) XPOS#14 )
  (byte) numpoints#13 ← phi( main::@3/(byte) numpoints#10 )
  (byte) numpoints#3 ← (byte) numpoints#13
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) COLORS#9 ← phi( main::@4/(byte*) COLORS#10 )
  (byte) FILL#6 ← phi( main::@4/(byte) FILL#7 )
  (byte*) SCREEN#6 ← phi( main::@4/(byte*) SCREEN#7 )
  (byte[256]) COLS#6 ← phi( main::@4/(byte[256]) COLS#5 )
  (byte[256]) YPOS#16 ← phi( main::@4/(byte[256]) YPOS#15 )
  (byte[256]) XPOS#16 ← phi( main::@4/(byte[256]) XPOS#15 )
  (byte) numpoints#14 ← phi( main::@4/(byte) numpoints#10 )
  (byte) numpoints#4 ← (byte) numpoints#14
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) COLORS#8 ← phi( main::@5/(byte*) COLORS#9 )
  (byte) FILL#5 ← phi( main::@5/(byte) FILL#6 )
  (byte*) SCREEN#5 ← phi( main::@5/(byte*) SCREEN#6 )
  (byte[256]) COLS#7 ← phi( main::@5/(byte[256]) COLS#6 )
  (byte[256]) YPOS#17 ← phi( main::@5/(byte[256]) YPOS#16 )
  (byte[256]) XPOS#17 ← phi( main::@5/(byte[256]) XPOS#16 )
  (byte) numpoints#15 ← phi( main::@5/(byte) numpoints#10 )
  (byte) numpoints#5 ← (byte) numpoints#15
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) COLORS#7 ← phi( main::@6/(byte*) COLORS#8 )
  (byte) FILL#4 ← phi( main::@6/(byte) FILL#5 )
  (byte*) SCREEN#4 ← phi( main::@6/(byte*) SCREEN#5 )
  (byte[256]) COLS#8 ← phi( main::@6/(byte[256]) COLS#7 )
  (byte[256]) YPOS#18 ← phi( main::@6/(byte[256]) YPOS#17 )
  (byte[256]) XPOS#18 ← phi( main::@6/(byte[256]) XPOS#17 )
  (byte) numpoints#16 ← phi( main::@6/(byte) numpoints#10 )
  (byte) numpoints#6 ← (byte) numpoints#16
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte[256]) COLS#29 ← phi( main::@7/(byte[256]) COLS#8 )
  (byte[256]) YPOS#35 ← phi( main::@7/(byte[256]) YPOS#18 )
  (byte[256]) XPOS#33 ← phi( main::@7/(byte[256]) XPOS#18 )
  (byte*) COLORS#5 ← phi( main::@7/(byte*) COLORS#7 )
  (byte) FILL#3 ← phi( main::@7/(byte) FILL#4 )
  (byte*) SCREEN#3 ← phi( main::@7/(byte*) SCREEN#4 )
  (byte) numpoints#17 ← phi( main::@7/(byte) numpoints#10 )
  (byte) numpoints#7 ← (byte) numpoints#17
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  (byte[256]) COLS#28 ← phi( main::@8/(byte[256]) COLS#29 )
  (byte[256]) YPOS#31 ← phi( main::@8/(byte[256]) YPOS#35 )
  (byte) numpoints#31 ← phi( main::@8/(byte) numpoints#7 )
  (byte[256]) XPOS#28 ← phi( main::@8/(byte[256]) XPOS#33 )
  (byte*) COLORS#4 ← phi( main::@8/(byte*) COLORS#5 )
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) COLS#26 ← phi( main::@11/(byte[256]) COLS#27 main::@9/(byte[256]) COLS#28 )
  (byte[256]) YPOS#25 ← phi( main::@11/(byte[256]) YPOS#30 main::@9/(byte[256]) YPOS#31 )
  (byte) numpoints#29 ← phi( main::@11/(byte) numpoints#23 main::@9/(byte) numpoints#31 )
  (byte[256]) XPOS#21 ← phi( main::@11/(byte[256]) XPOS#27 main::@9/(byte[256]) XPOS#28 )
  (byte*) COLORS#2 ← phi( main::@11/(byte*) COLORS#3 main::@9/(byte*) COLORS#4 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  (byte[256]) COLS#30 ← phi( main::@1/(byte[256]) COLS#26 )
  (byte*) COLORS#6 ← phi( main::@1/(byte*) COLORS#2 )
  (byte[256]) YPOS#21 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte) numpoints#26 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) XPOS#9 ← phi( main::@1/(byte[256]) XPOS#21 )
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte[256]) COLS#27 ← phi( main::@10/(byte[256]) COLS#30 )
  (byte[256]) YPOS#30 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#27 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte*) COLORS#3 ← phi( main::@10/(byte*) COLORS#6 )
  (byte) numpoints#23 ← phi( main::@10/(byte) numpoints#26 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  (byte) numpoints#18 ← phi( main::@11/(byte) numpoints#23 )
  (byte) numpoints#8 ← (byte) numpoints#18
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte[256]) YPOS#9 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#1 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
  (boolean~) animate::$4 ← ! (boolean~) animate::$3
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte[256]) XPOS#10 ← phi( animate/(byte[256]) XPOS#1 animate::@7/(byte[256]) XPOS#2 )
  (byte[256]) YPOS#1 ← phi( animate/(byte[256]) YPOS#9 animate::@7/(byte[256]) YPOS#10 )
  (byte~) animate::$5 ← (byte[256]) YPOS#1 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS#1 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS#1 *idx (byte) 0
  (boolean~) animate::$8 ← (byte~) animate::$7 == (byte) 25
  (boolean~) animate::$9 ← ! (boolean~) animate::$8
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  (byte[256]) YPOS#10 ← phi( animate/(byte[256]) YPOS#9 )
  (byte[256]) XPOS#2 ← phi( animate/(byte[256]) XPOS#1 )
  *((byte[256]) XPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte[256]) YPOS#11 ← phi( animate::@1/(byte[256]) YPOS#1 animate::@8/(byte[256]) YPOS#2 )
  (byte[256]) XPOS#3 ← phi( animate::@1/(byte[256]) XPOS#10 animate::@8/(byte[256]) XPOS#11 )
  (byte~) animate::$10 ← (byte[256]) XPOS#3 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS#3 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS#3 *idx (byte) 1
  (boolean~) animate::$13 ← (byte~) animate::$12 == (byte) 255
  (boolean~) animate::$14 ← ! (boolean~) animate::$13
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  (byte[256]) XPOS#11 ← phi( animate::@1/(byte[256]) XPOS#10 )
  (byte[256]) YPOS#2 ← phi( animate::@1/(byte[256]) YPOS#1 )
  *((byte[256]) YPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte[256]) XPOS#23 ← phi( animate::@2/(byte[256]) XPOS#3 animate::@9/(byte[256]) XPOS#4 )
  (byte[256]) YPOS#3 ← phi( animate::@2/(byte[256]) YPOS#11 animate::@9/(byte[256]) YPOS#12 )
  (byte~) animate::$15 ← (byte[256]) YPOS#3 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS#3 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS#3 *idx (byte) 2
  (boolean~) animate::$18 ← (byte~) animate::$17 == (byte) 25
  (boolean~) animate::$19 ← ! (boolean~) animate::$18
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  (byte[256]) YPOS#12 ← phi( animate::@2/(byte[256]) YPOS#11 )
  (byte[256]) XPOS#4 ← phi( animate::@2/(byte[256]) XPOS#3 )
  *((byte[256]) XPOS#4 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte[256]) XPOS#12 ← phi( animate::@10/(byte[256]) XPOS#22 animate::@3/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#4 ← phi( animate::@10/(byte[256]) YPOS#5 animate::@3/(byte[256]) YPOS#3 )
  (byte~) animate::$20 ← (byte[256]) YPOS#4 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS#4 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS#4 *idx (byte) 3
  (boolean~) animate::$23 ← (byte~) animate::$22 == (byte) 255
  (boolean~) animate::$24 ← ! (boolean~) animate::$23
  if((boolean~) animate::$24) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  (byte[256]) XPOS#22 ← phi( animate::@3/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#5 ← phi( animate::@3/(byte[256]) YPOS#3 )
  *((byte[256]) YPOS#5 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  (byte[256]) XPOS#5 ← phi( animate::@4/(byte[256]) XPOS#12 )
  (byte[256]) YPOS#6 ← phi( animate::@4/(byte[256]) YPOS#4 )
  *((byte[256]) YPOS#6 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS#5 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS#5 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS#5 *idx (byte) 3
  (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte) 40
  (boolean~) animate::$29 ← ! (boolean~) animate::$28
  if((boolean~) animate::$29) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte[256]) XPOS#6 ← phi( animate::@11/(byte[256]) XPOS#5 )
  (byte~) animate::$30 ← (byte[256]) XPOS#6 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS#6 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte[256]) COLS#1 ← phi( main/(byte[256]) COLS#3 main::@3/(byte[256]) COLS#4 main::@4/(byte[256]) COLS#5 main::@5/(byte[256]) COLS#6 main::@6/(byte[256]) COLS#7 main::@7/(byte[256]) COLS#8 )
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte[256]) YPOS#7 ← phi( main/(byte[256]) YPOS#13 main::@3/(byte[256]) YPOS#14 main::@4/(byte[256]) YPOS#15 main::@5/(byte[256]) YPOS#16 main::@6/(byte[256]) YPOS#17 main::@7/(byte[256]) YPOS#18 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) numpoints#22 main::@3/(byte) numpoints#2 main::@4/(byte) numpoints#3 main::@5/(byte) numpoints#4 main::@6/(byte) numpoints#5 main::@7/(byte) numpoints#6 )
  (byte[256]) XPOS#7 ← phi( main/(byte[256]) XPOS#13 main::@3/(byte[256]) XPOS#14 main::@4/(byte[256]) XPOS#15 main::@5/(byte[256]) XPOS#16 main::@6/(byte[256]) XPOS#17 main::@7/(byte[256]) XPOS#18 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((byte[256]) XPOS#7 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((byte[256]) YPOS#7 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((byte[256]) COLS#1 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#9 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  (byte) numpoints#20 ← phi( addpoint/(byte) numpoints#9 )
  (byte) numpoints#10 ← (byte) numpoints#20
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte) FILL#2 ← phi( main::@8/(byte) FILL#3 )
  (byte*) SCREEN#1 ← phi( main::@8/(byte*) SCREEN#3 )
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#1 initscreen::@1/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte[256]) COLS#24 ← phi( main::@1/(byte[256]) COLS#26 )
  (byte) numpoints#42 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) YPOS#32 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte[256]) XPOS#34 ← phi( main::@1/(byte[256]) XPOS#21 )
  (byte*) COLORS#1 ← phi( main::@1/(byte*) COLORS#2 )
  (byte*) render::colline#0 ← (byte*) COLORS#1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(byte[256]) COLS#24 render::@3/(byte[256]) COLS#25 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#42 render::@3/(byte) numpoints#43 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#32 render::@3/(byte[256]) YPOS#33 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#34 render::@3/(byte[256]) XPOS#35 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#21 ← phi( render::@1/(byte[256]) COLS#22 render::@5/(byte[256]) COLS#23 )
  (byte) numpoints#39 ← phi( render::@1/(byte) numpoints#40 render::@5/(byte) numpoints#41 )
  (byte[256]) YPOS#22 ← phi( render::@1/(byte[256]) YPOS#26 render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#24 ← phi( render::@1/(byte[256]) XPOS#29 render::@5/(byte[256]) XPOS#30 )
  (byte*) render::colline#4 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#5 )
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte[256]) COLS#23 ← phi( render::@2/(byte[256]) COLS#21 )
  (byte) numpoints#41 ← phi( render::@2/(byte) numpoints#39 )
  (byte[256]) YPOS#27 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#30 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) render::y#5 ← phi( render::@2/(byte) render::y#2 )
  (byte) render::x#3 ← phi( render::@2/(byte) render::x#2 )
  (byte*) render::colline#2 ← phi( render::@2/(byte*) render::colline#4 )
  (byte) findcol::return#4 ← phi( render::@2/(byte) findcol::return#0 )
  (byte~) render::$0 ← (byte) findcol::return#4
  (byte) render::col#0 ← (byte~) render::$0
  *((byte*) render::colline#2 + (byte) render::x#3) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#3
  (boolean~) render::$1 ← (byte) render::x#1 != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte[256]) COLS#25 ← phi( render::@5/(byte[256]) COLS#23 )
  (byte) numpoints#43 ← phi( render::@5/(byte) numpoints#41 )
  (byte[256]) YPOS#33 ← phi( render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#35 ← phi( render::@5/(byte[256]) XPOS#30 )
  (byte) render::y#3 ← phi( render::@5/(byte) render::y#5 )
  (byte*) render::colline#3 ← phi( render::@5/(byte*) render::colline#2 )
  (byte*~) render::$2 ← (byte*) render::colline#3 + (byte) 40
  (byte*) render::colline#1 ← (byte*~) render::$2
  (byte) render::y#1 ← ++ (byte) render::y#3
  (boolean~) render::$3 ← (byte) render::y#1 != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte[256]) COLS#18 ← phi( render::@2/(byte[256]) COLS#21 )
  (byte) numpoints#37 ← phi( render::@2/(byte) numpoints#39 )
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte[256]) YPOS#19 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#19 ← phi( render::@2/(byte[256]) XPOS#24 )
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::mincol#3 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 findcol::@8/(byte[256]) COLS#19 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 findcol::@8/(byte) numpoints#21 )
  (byte) findcol::mindiff#9 ← phi( findcol/(byte) 255 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#5 ← phi( findcol/(byte) findcol::y#8 findcol::@8/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 findcol::@8/(byte) findcol::x#6 )
  (byte[256]) YPOS#8 ← phi( findcol/(byte[256]) YPOS#19 findcol::@8/(byte[256]) YPOS#20 )
  (byte) findcol::i#2 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#8 ← phi( findcol/(byte[256]) XPOS#19 findcol::@8/(byte[256]) XPOS#20 )
  (byte~) findcol::$0 ← (byte[256]) XPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::xp#0 ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::yp#0 ← (byte~) findcol::$1
  (boolean~) findcol::$2 ← (byte) findcol::x#1 == (byte) findcol::xp#0
  (boolean~) findcol::$3 ← ! (boolean~) findcol::$2
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@3/(byte) findcol::mincol#12 )
  (byte[256]) YPOS#38 ← phi( findcol::@1/(byte[256]) YPOS#8 findcol::@3/(byte[256]) YPOS#39 )
  (byte[256]) XPOS#39 ← phi( findcol::@1/(byte[256]) XPOS#8 findcol::@3/(byte[256]) XPOS#40 )
  (byte[256]) COLS#15 ← phi( findcol::@1/(byte[256]) COLS#16 findcol::@3/(byte[256]) COLS#17 )
  (byte) numpoints#34 ← phi( findcol::@1/(byte) numpoints#35 findcol::@3/(byte) numpoints#36 )
  (byte) findcol::i#11 ← phi( findcol::@1/(byte) findcol::i#2 findcol::@3/(byte) findcol::i#12 )
  (byte) findcol::mindiff#8 ← phi( findcol::@1/(byte) findcol::mindiff#9 findcol::@3/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#7 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@3/(byte) findcol::yp#8 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#5 findcol::@3/(byte) findcol::y#11 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@3/(byte) findcol::xp#4 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@3/(byte) findcol::x#7 )
  (boolean~) findcol::$6 ← (byte) findcol::x#2 < (byte) findcol::xp#1
  (boolean~) findcol::$7 ← ! (boolean~) findcol::$6
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (byte) findcol::mincol#13 ← phi( findcol::@1/(byte) findcol::mincol#11 )
  (byte[256]) YPOS#40 ← phi( findcol::@1/(byte[256]) YPOS#8 )
  (byte[256]) XPOS#41 ← phi( findcol::@1/(byte[256]) XPOS#8 )
  (byte[256]) COLS#20 ← phi( findcol::@1/(byte[256]) COLS#16 )
  (byte) numpoints#38 ← phi( findcol::@1/(byte) numpoints#35 )
  (byte) findcol::i#13 ← phi( findcol::@1/(byte) findcol::i#2 )
  (byte) findcol::mindiff#12 ← phi( findcol::@1/(byte) findcol::mindiff#9 )
  (byte) findcol::xp#5 ← phi( findcol::@1/(byte) findcol::xp#0 )
  (byte) findcol::x#8 ← phi( findcol::@1/(byte) findcol::x#1 )
  (byte) findcol::yp#1 ← phi( findcol::@1/(byte) findcol::yp#0 )
  (byte) findcol::y#1 ← phi( findcol::@1/(byte) findcol::y#5 )
  (boolean~) findcol::$4 ← (byte) findcol::y#1 == (byte) findcol::yp#1
  (boolean~) findcol::$5 ← ! (boolean~) findcol::$4
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  (byte) findcol::mincol#12 ← phi( findcol::@9/(byte) findcol::mincol#13 )
  (byte[256]) YPOS#39 ← phi( findcol::@9/(byte[256]) YPOS#40 )
  (byte[256]) XPOS#40 ← phi( findcol::@9/(byte[256]) XPOS#41 )
  (byte[256]) COLS#17 ← phi( findcol::@9/(byte[256]) COLS#20 )
  (byte) numpoints#36 ← phi( findcol::@9/(byte) numpoints#38 )
  (byte) findcol::i#12 ← phi( findcol::@9/(byte) findcol::i#13 )
  (byte) findcol::mindiff#10 ← phi( findcol::@9/(byte) findcol::mindiff#12 )
  (byte) findcol::yp#8 ← phi( findcol::@9/(byte) findcol::yp#1 )
  (byte) findcol::y#11 ← phi( findcol::@9/(byte) findcol::y#1 )
  (byte) findcol::xp#4 ← phi( findcol::@9/(byte) findcol::xp#5 )
  (byte) findcol::x#7 ← phi( findcol::@9/(byte) findcol::x#8 )
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#5 ← phi( findcol::@10/(byte) 0 findcol::@17/(byte) findcol::return#3 )
  (byte) findcol::return#2 ← (byte) findcol::return#5
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#9 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#37 ← phi( findcol::@2/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#38 ← phi( findcol::@2/(byte[256]) XPOS#39 )
  (byte[256]) COLS#14 ← phi( findcol::@2/(byte[256]) COLS#15 )
  (byte) numpoints#33 ← phi( findcol::@2/(byte) numpoints#34 )
  (byte) findcol::i#10 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#7 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#6 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#7 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::xp#2 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte) findcol::x#3 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte~) findcol::$9 ← (byte) findcol::x#3 - (byte) findcol::xp#2
  (byte) findcol::diff#0 ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#8 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#36 ← phi( findcol::@2/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#37 ← phi( findcol::@2/(byte[256]) XPOS#39 )
  (byte[256]) COLS#13 ← phi( findcol::@2/(byte[256]) COLS#15 )
  (byte) numpoints#32 ← phi( findcol::@2/(byte) numpoints#34 )
  (byte) findcol::i#9 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#6 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#5 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#6 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::x#4 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte) findcol::xp#3 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte~) findcol::$8 ← (byte) findcol::xp#3 - (byte) findcol::x#4
  (byte) findcol::diff#1 ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::mincol#7 ← phi( findcol::@12/(byte) findcol::mincol#8 findcol::@4/(byte) findcol::mincol#9 )
  (byte) findcol::x#13 ← phi( findcol::@12/(byte) findcol::x#4 findcol::@4/(byte) findcol::x#3 )
  (byte[256]) YPOS#34 ← phi( findcol::@12/(byte[256]) YPOS#36 findcol::@4/(byte[256]) YPOS#37 )
  (byte[256]) XPOS#36 ← phi( findcol::@12/(byte[256]) XPOS#37 findcol::@4/(byte[256]) XPOS#38 )
  (byte[256]) COLS#12 ← phi( findcol::@12/(byte[256]) COLS#13 findcol::@4/(byte[256]) COLS#14 )
  (byte) numpoints#30 ← phi( findcol::@12/(byte) numpoints#32 findcol::@4/(byte) numpoints#33 )
  (byte) findcol::i#8 ← phi( findcol::@12/(byte) findcol::i#9 findcol::@4/(byte) findcol::i#10 )
  (byte) findcol::mindiff#5 ← phi( findcol::@12/(byte) findcol::mindiff#6 findcol::@4/(byte) findcol::mindiff#7 )
  (byte) findcol::diff#8 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (byte) findcol::yp#2 ← phi( findcol::@12/(byte) findcol::yp#5 findcol::@4/(byte) findcol::yp#6 )
  (byte) findcol::y#2 ← phi( findcol::@12/(byte) findcol::y#6 findcol::@4/(byte) findcol::y#7 )
  (boolean~) findcol::$10 ← (byte) findcol::y#2 < (byte) findcol::yp#2
  (boolean~) findcol::$11 ← ! (boolean~) findcol::$10
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#6 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#12 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[256]) YPOS#29 ← phi( findcol::@5/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#32 ← phi( findcol::@5/(byte[256]) XPOS#36 )
  (byte[256]) COLS#11 ← phi( findcol::@5/(byte[256]) COLS#12 )
  (byte) numpoints#28 ← phi( findcol::@5/(byte) numpoints#30 )
  (byte) findcol::i#7 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#4 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#4 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::yp#3 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte) findcol::y#3 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte~) findcol::$14 ← (byte) findcol::y#3 - (byte) findcol::yp#3
  (byte~) findcol::$15 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  (byte) findcol::diff#2 ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#5 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#11 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[256]) YPOS#28 ← phi( findcol::@5/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#31 ← phi( findcol::@5/(byte[256]) XPOS#36 )
  (byte[256]) COLS#10 ← phi( findcol::@5/(byte[256]) COLS#12 )
  (byte) numpoints#27 ← phi( findcol::@5/(byte) numpoints#30 )
  (byte) findcol::i#6 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#3 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#5 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::y#4 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte) findcol::yp#4 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte~) findcol::$12 ← (byte) findcol::yp#4 - (byte) findcol::y#4
  (byte~) findcol::$13 ← (byte) findcol::diff#5 + (byte~) findcol::$12
  (byte) findcol::diff#3 ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::y#13 ← phi( findcol::@14/(byte) findcol::y#4 findcol::@6/(byte) findcol::y#3 )
  (byte) findcol::mincol#4 ← phi( findcol::@14/(byte) findcol::mincol#5 findcol::@6/(byte) findcol::mincol#6 )
  (byte) findcol::x#10 ← phi( findcol::@14/(byte) findcol::x#11 findcol::@6/(byte) findcol::x#12 )
  (byte[256]) YPOS#24 ← phi( findcol::@14/(byte[256]) YPOS#28 findcol::@6/(byte[256]) YPOS#29 )
  (byte[256]) XPOS#26 ← phi( findcol::@14/(byte[256]) XPOS#31 findcol::@6/(byte[256]) XPOS#32 )
  (byte[256]) COLS#9 ← phi( findcol::@14/(byte[256]) COLS#10 findcol::@6/(byte[256]) COLS#11 )
  (byte) numpoints#25 ← phi( findcol::@14/(byte) numpoints#27 findcol::@6/(byte) numpoints#28 )
  (byte) findcol::i#5 ← phi( findcol::@14/(byte) findcol::i#6 findcol::@6/(byte) findcol::i#7 )
  (byte) findcol::mindiff#2 ← phi( findcol::@14/(byte) findcol::mindiff#3 findcol::@6/(byte) findcol::mindiff#4 )
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$16 ← (byte) findcol::diff#6 < (byte) findcol::mindiff#2
  (boolean~) findcol::$17 ← ! (boolean~) findcol::$16
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte[256]) COLS#19 ← phi( findcol::@16/(byte[256]) COLS#2 findcol::@7/(byte[256]) COLS#9 )
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::mindiff#1 findcol::@7/(byte) findcol::mindiff#2 )
  (byte) findcol::y#9 ← phi( findcol::@16/(byte) findcol::y#12 findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::mincol#3 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#4 )
  (byte) findcol::x#6 ← phi( findcol::@16/(byte) findcol::x#9 findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#20 ← phi( findcol::@16/(byte[256]) YPOS#23 findcol::@7/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#20 ← phi( findcol::@16/(byte[256]) XPOS#25 findcol::@7/(byte[256]) XPOS#26 )
  (byte) numpoints#21 ← phi( findcol::@16/(byte) numpoints#24 findcol::@7/(byte) numpoints#25 )
  (byte) findcol::i#3 ← phi( findcol::@16/(byte) findcol::i#4 findcol::@7/(byte) findcol::i#5 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#3
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#21
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::y#12 ← phi( findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::x#9 ← phi( findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#23 ← phi( findcol::@7/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#25 ← phi( findcol::@7/(byte[256]) XPOS#26 )
  (byte) numpoints#24 ← phi( findcol::@7/(byte) numpoints#25 )
  (byte) findcol::i#4 ← phi( findcol::@7/(byte) findcol::i#5 )
  (byte[256]) COLS#2 ← phi( findcol::@7/(byte[256]) COLS#9 )
  (byte) findcol::diff#7 ← phi( findcol::@7/(byte) findcol::diff#6 )
  (byte) findcol::mindiff#1 ← (byte) findcol::diff#7
  (byte~) findcol::$18 ← (byte[256]) COLS#2 *idx (byte) findcol::i#4
  (byte) findcol::mincol#1 ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::mincol#2 ← phi( findcol::@8/(byte) findcol::mincol#3 )
  (byte) findcol::return#3 ← (byte) findcol::mincol#2
  to:findcol::@return
@end: scope:[]  from @7

Multiple usages for variable. Not optimizing sub-constant (byte*) SCREEN#2
Inversing boolean not (boolean~) animate::$4 ← (byte~) animate::$2 != (byte) 40 from (boolean~) animate::$3 ← (byte~) animate::$2 == (byte) 40
Inversing boolean not (boolean~) animate::$9 ← (byte~) animate::$7 != (byte) 25 from (boolean~) animate::$8 ← (byte~) animate::$7 == (byte) 25
Inversing boolean not (boolean~) animate::$14 ← (byte~) animate::$12 != (byte) 255 from (boolean~) animate::$13 ← (byte~) animate::$12 == (byte) 255
Inversing boolean not (boolean~) animate::$19 ← (byte~) animate::$17 != (byte) 25 from (boolean~) animate::$18 ← (byte~) animate::$17 == (byte) 25
Inversing boolean not (boolean~) animate::$24 ← (byte~) animate::$22 != (byte) 255 from (boolean~) animate::$23 ← (byte~) animate::$22 == (byte) 255
Inversing boolean not (boolean~) animate::$29 ← (byte~) animate::$27 < (byte) 40 from (boolean~) animate::$28 ← (byte~) animate::$27 >= (byte) 40
Inversing boolean not (boolean~) findcol::$3 ← (byte) findcol::x#1 != (byte) findcol::xp#0 from (boolean~) findcol::$2 ← (byte) findcol::x#1 == (byte) findcol::xp#0
Inversing boolean not (boolean~) findcol::$7 ← (byte) findcol::x#2 >= (byte) findcol::xp#1 from (boolean~) findcol::$6 ← (byte) findcol::x#2 < (byte) findcol::xp#1
Inversing boolean not (boolean~) findcol::$5 ← (byte) findcol::y#1 != (byte) findcol::yp#1 from (boolean~) findcol::$4 ← (byte) findcol::y#1 == (byte) findcol::yp#1
Inversing boolean not (boolean~) findcol::$11 ← (byte) findcol::y#2 >= (byte) findcol::yp#2 from (boolean~) findcol::$10 ← (byte) findcol::y#2 < (byte) findcol::yp#2
Inversing boolean not (boolean~) findcol::$17 ← (byte) findcol::diff#6 >= (byte) findcol::mindiff#2 from (boolean~) findcol::$16 ← (byte) findcol::diff#6 < (byte) findcol::mindiff#2
Succesful SSA optimization Pass2UnaryNotSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  (byte) numpoints#11 ← phi( @begin/(byte) numpoints#8 )
  (byte) numpoints#1 ← (byte) numpoints#11
  to:@end
main: scope:[main]  from @begin
  (byte*) COLORS#12 ← phi( @begin/(word) 55296 )
  (byte) FILL#9 ← phi( @begin/(byte) 230 )
  (byte*) SCREEN#9 ← phi( @begin/(word) 1024 )
  (byte[256]) COLS#3 ← phi( @begin/(word) 4608 )
  (byte[256]) YPOS#13 ← phi( @begin/(word) 4352 )
  (byte[256]) XPOS#13 ← phi( @begin/(word) 4096 )
  (byte) numpoints#22 ← phi( @begin/(byte) 0 )
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte*) COLORS#11 ← phi( main/(byte*) COLORS#12 )
  (byte) FILL#8 ← phi( main/(byte) FILL#9 )
  (byte*) SCREEN#8 ← phi( main/(byte*) SCREEN#9 )
  (byte[256]) COLS#4 ← phi( main/(byte[256]) COLS#3 )
  (byte[256]) YPOS#14 ← phi( main/(byte[256]) YPOS#13 )
  (byte[256]) XPOS#14 ← phi( main/(byte[256]) XPOS#13 )
  (byte) numpoints#12 ← phi( main/(byte) numpoints#10 )
  (byte) numpoints#2 ← (byte) numpoints#12
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) COLORS#10 ← phi( main::@3/(byte*) COLORS#11 )
  (byte) FILL#7 ← phi( main::@3/(byte) FILL#8 )
  (byte*) SCREEN#7 ← phi( main::@3/(byte*) SCREEN#8 )
  (byte[256]) COLS#5 ← phi( main::@3/(byte[256]) COLS#4 )
  (byte[256]) YPOS#15 ← phi( main::@3/(byte[256]) YPOS#14 )
  (byte[256]) XPOS#15 ← phi( main::@3/(byte[256]) XPOS#14 )
  (byte) numpoints#13 ← phi( main::@3/(byte) numpoints#10 )
  (byte) numpoints#3 ← (byte) numpoints#13
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) COLORS#9 ← phi( main::@4/(byte*) COLORS#10 )
  (byte) FILL#6 ← phi( main::@4/(byte) FILL#7 )
  (byte*) SCREEN#6 ← phi( main::@4/(byte*) SCREEN#7 )
  (byte[256]) COLS#6 ← phi( main::@4/(byte[256]) COLS#5 )
  (byte[256]) YPOS#16 ← phi( main::@4/(byte[256]) YPOS#15 )
  (byte[256]) XPOS#16 ← phi( main::@4/(byte[256]) XPOS#15 )
  (byte) numpoints#14 ← phi( main::@4/(byte) numpoints#10 )
  (byte) numpoints#4 ← (byte) numpoints#14
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) COLORS#8 ← phi( main::@5/(byte*) COLORS#9 )
  (byte) FILL#5 ← phi( main::@5/(byte) FILL#6 )
  (byte*) SCREEN#5 ← phi( main::@5/(byte*) SCREEN#6 )
  (byte[256]) COLS#7 ← phi( main::@5/(byte[256]) COLS#6 )
  (byte[256]) YPOS#17 ← phi( main::@5/(byte[256]) YPOS#16 )
  (byte[256]) XPOS#17 ← phi( main::@5/(byte[256]) XPOS#16 )
  (byte) numpoints#15 ← phi( main::@5/(byte) numpoints#10 )
  (byte) numpoints#5 ← (byte) numpoints#15
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) COLORS#7 ← phi( main::@6/(byte*) COLORS#8 )
  (byte) FILL#4 ← phi( main::@6/(byte) FILL#5 )
  (byte*) SCREEN#4 ← phi( main::@6/(byte*) SCREEN#5 )
  (byte[256]) COLS#8 ← phi( main::@6/(byte[256]) COLS#7 )
  (byte[256]) YPOS#18 ← phi( main::@6/(byte[256]) YPOS#17 )
  (byte[256]) XPOS#18 ← phi( main::@6/(byte[256]) XPOS#17 )
  (byte) numpoints#16 ← phi( main::@6/(byte) numpoints#10 )
  (byte) numpoints#6 ← (byte) numpoints#16
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte[256]) COLS#29 ← phi( main::@7/(byte[256]) COLS#8 )
  (byte[256]) YPOS#35 ← phi( main::@7/(byte[256]) YPOS#18 )
  (byte[256]) XPOS#33 ← phi( main::@7/(byte[256]) XPOS#18 )
  (byte*) COLORS#5 ← phi( main::@7/(byte*) COLORS#7 )
  (byte) FILL#3 ← phi( main::@7/(byte) FILL#4 )
  (byte*) SCREEN#3 ← phi( main::@7/(byte*) SCREEN#4 )
  (byte) numpoints#17 ← phi( main::@7/(byte) numpoints#10 )
  (byte) numpoints#7 ← (byte) numpoints#17
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  (byte[256]) COLS#28 ← phi( main::@8/(byte[256]) COLS#29 )
  (byte[256]) YPOS#31 ← phi( main::@8/(byte[256]) YPOS#35 )
  (byte) numpoints#31 ← phi( main::@8/(byte) numpoints#7 )
  (byte[256]) XPOS#28 ← phi( main::@8/(byte[256]) XPOS#33 )
  (byte*) COLORS#4 ← phi( main::@8/(byte*) COLORS#5 )
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) COLS#26 ← phi( main::@11/(byte[256]) COLS#27 main::@9/(byte[256]) COLS#28 )
  (byte[256]) YPOS#25 ← phi( main::@11/(byte[256]) YPOS#30 main::@9/(byte[256]) YPOS#31 )
  (byte) numpoints#29 ← phi( main::@11/(byte) numpoints#23 main::@9/(byte) numpoints#31 )
  (byte[256]) XPOS#21 ← phi( main::@11/(byte[256]) XPOS#27 main::@9/(byte[256]) XPOS#28 )
  (byte*) COLORS#2 ← phi( main::@11/(byte*) COLORS#3 main::@9/(byte*) COLORS#4 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  (byte[256]) COLS#30 ← phi( main::@1/(byte[256]) COLS#26 )
  (byte*) COLORS#6 ← phi( main::@1/(byte*) COLORS#2 )
  (byte[256]) YPOS#21 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte) numpoints#26 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) XPOS#9 ← phi( main::@1/(byte[256]) XPOS#21 )
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte[256]) COLS#27 ← phi( main::@10/(byte[256]) COLS#30 )
  (byte[256]) YPOS#30 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#27 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte*) COLORS#3 ← phi( main::@10/(byte*) COLORS#6 )
  (byte) numpoints#23 ← phi( main::@10/(byte) numpoints#26 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  (byte) numpoints#18 ← phi( main::@11/(byte) numpoints#23 )
  (byte) numpoints#8 ← (byte) numpoints#18
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte[256]) YPOS#9 ← phi( main::@10/(byte[256]) YPOS#21 )
  (byte[256]) XPOS#1 ← phi( main::@10/(byte[256]) XPOS#9 )
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$4 ← (byte~) animate::$2 != (byte) 40
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte[256]) XPOS#10 ← phi( animate/(byte[256]) XPOS#1 animate::@7/(byte[256]) XPOS#2 )
  (byte[256]) YPOS#1 ← phi( animate/(byte[256]) YPOS#9 animate::@7/(byte[256]) YPOS#10 )
  (byte~) animate::$5 ← (byte[256]) YPOS#1 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS#1 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS#1 *idx (byte) 0
  (boolean~) animate::$9 ← (byte~) animate::$7 != (byte) 25
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  (byte[256]) YPOS#10 ← phi( animate/(byte[256]) YPOS#9 )
  (byte[256]) XPOS#2 ← phi( animate/(byte[256]) XPOS#1 )
  *((byte[256]) XPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte[256]) YPOS#11 ← phi( animate::@1/(byte[256]) YPOS#1 animate::@8/(byte[256]) YPOS#2 )
  (byte[256]) XPOS#3 ← phi( animate::@1/(byte[256]) XPOS#10 animate::@8/(byte[256]) XPOS#11 )
  (byte~) animate::$10 ← (byte[256]) XPOS#3 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS#3 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS#3 *idx (byte) 1
  (boolean~) animate::$14 ← (byte~) animate::$12 != (byte) 255
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  (byte[256]) XPOS#11 ← phi( animate::@1/(byte[256]) XPOS#10 )
  (byte[256]) YPOS#2 ← phi( animate::@1/(byte[256]) YPOS#1 )
  *((byte[256]) YPOS#2 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte[256]) XPOS#23 ← phi( animate::@2/(byte[256]) XPOS#3 animate::@9/(byte[256]) XPOS#4 )
  (byte[256]) YPOS#3 ← phi( animate::@2/(byte[256]) YPOS#11 animate::@9/(byte[256]) YPOS#12 )
  (byte~) animate::$15 ← (byte[256]) YPOS#3 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS#3 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS#3 *idx (byte) 2
  (boolean~) animate::$19 ← (byte~) animate::$17 != (byte) 25
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  (byte[256]) YPOS#12 ← phi( animate::@2/(byte[256]) YPOS#11 )
  (byte[256]) XPOS#4 ← phi( animate::@2/(byte[256]) XPOS#3 )
  *((byte[256]) XPOS#4 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte[256]) XPOS#12 ← phi( animate::@10/(byte[256]) XPOS#22 animate::@3/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#4 ← phi( animate::@10/(byte[256]) YPOS#5 animate::@3/(byte[256]) YPOS#3 )
  (byte~) animate::$20 ← (byte[256]) YPOS#4 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS#4 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS#4 *idx (byte) 3
  (boolean~) animate::$24 ← (byte~) animate::$22 != (byte) 255
  if((boolean~) animate::$24) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  (byte[256]) XPOS#22 ← phi( animate::@3/(byte[256]) XPOS#23 )
  (byte[256]) YPOS#5 ← phi( animate::@3/(byte[256]) YPOS#3 )
  *((byte[256]) YPOS#5 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  (byte[256]) XPOS#5 ← phi( animate::@4/(byte[256]) XPOS#12 )
  (byte[256]) YPOS#6 ← phi( animate::@4/(byte[256]) YPOS#4 )
  *((byte[256]) YPOS#6 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS#5 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS#5 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS#5 *idx (byte) 3
  (boolean~) animate::$29 ← (byte~) animate::$27 < (byte) 40
  if((boolean~) animate::$29) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte[256]) XPOS#6 ← phi( animate::@11/(byte[256]) XPOS#5 )
  (byte~) animate::$30 ← (byte[256]) XPOS#6 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS#6 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte[256]) COLS#1 ← phi( main/(byte[256]) COLS#3 main::@3/(byte[256]) COLS#4 main::@4/(byte[256]) COLS#5 main::@5/(byte[256]) COLS#6 main::@6/(byte[256]) COLS#7 main::@7/(byte[256]) COLS#8 )
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte[256]) YPOS#7 ← phi( main/(byte[256]) YPOS#13 main::@3/(byte[256]) YPOS#14 main::@4/(byte[256]) YPOS#15 main::@5/(byte[256]) YPOS#16 main::@6/(byte[256]) YPOS#17 main::@7/(byte[256]) YPOS#18 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) numpoints#22 main::@3/(byte) numpoints#2 main::@4/(byte) numpoints#3 main::@5/(byte) numpoints#4 main::@6/(byte) numpoints#5 main::@7/(byte) numpoints#6 )
  (byte[256]) XPOS#7 ← phi( main/(byte[256]) XPOS#13 main::@3/(byte[256]) XPOS#14 main::@4/(byte[256]) XPOS#15 main::@5/(byte[256]) XPOS#16 main::@6/(byte[256]) XPOS#17 main::@7/(byte[256]) XPOS#18 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((byte[256]) XPOS#7 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((byte[256]) YPOS#7 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((byte[256]) COLS#1 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#9 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  (byte) numpoints#20 ← phi( addpoint/(byte) numpoints#9 )
  (byte) numpoints#10 ← (byte) numpoints#20
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte) FILL#2 ← phi( main::@8/(byte) FILL#3 )
  (byte*) SCREEN#1 ← phi( main::@8/(byte*) SCREEN#3 )
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#1 initscreen::@1/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte[256]) COLS#24 ← phi( main::@1/(byte[256]) COLS#26 )
  (byte) numpoints#42 ← phi( main::@1/(byte) numpoints#29 )
  (byte[256]) YPOS#32 ← phi( main::@1/(byte[256]) YPOS#25 )
  (byte[256]) XPOS#34 ← phi( main::@1/(byte[256]) XPOS#21 )
  (byte*) COLORS#1 ← phi( main::@1/(byte*) COLORS#2 )
  (byte*) render::colline#0 ← (byte*) COLORS#1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(byte[256]) COLS#24 render::@3/(byte[256]) COLS#25 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#42 render::@3/(byte) numpoints#43 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#32 render::@3/(byte[256]) YPOS#33 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#34 render::@3/(byte[256]) XPOS#35 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#21 ← phi( render::@1/(byte[256]) COLS#22 render::@5/(byte[256]) COLS#23 )
  (byte) numpoints#39 ← phi( render::@1/(byte) numpoints#40 render::@5/(byte) numpoints#41 )
  (byte[256]) YPOS#22 ← phi( render::@1/(byte[256]) YPOS#26 render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#24 ← phi( render::@1/(byte[256]) XPOS#29 render::@5/(byte[256]) XPOS#30 )
  (byte*) render::colline#4 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#5 )
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  (byte) findcol::return#0 ← (byte) findcol::return#2
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte[256]) COLS#23 ← phi( render::@2/(byte[256]) COLS#21 )
  (byte) numpoints#41 ← phi( render::@2/(byte) numpoints#39 )
  (byte[256]) YPOS#27 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#30 ← phi( render::@2/(byte[256]) XPOS#24 )
  (byte) render::y#5 ← phi( render::@2/(byte) render::y#2 )
  (byte) render::x#3 ← phi( render::@2/(byte) render::x#2 )
  (byte*) render::colline#2 ← phi( render::@2/(byte*) render::colline#4 )
  (byte) findcol::return#4 ← phi( render::@2/(byte) findcol::return#0 )
  (byte~) render::$0 ← (byte) findcol::return#4
  (byte) render::col#0 ← (byte~) render::$0
  *((byte*) render::colline#2 + (byte) render::x#3) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#3
  (boolean~) render::$1 ← (byte) render::x#1 != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte[256]) COLS#25 ← phi( render::@5/(byte[256]) COLS#23 )
  (byte) numpoints#43 ← phi( render::@5/(byte) numpoints#41 )
  (byte[256]) YPOS#33 ← phi( render::@5/(byte[256]) YPOS#27 )
  (byte[256]) XPOS#35 ← phi( render::@5/(byte[256]) XPOS#30 )
  (byte) render::y#3 ← phi( render::@5/(byte) render::y#5 )
  (byte*) render::colline#3 ← phi( render::@5/(byte*) render::colline#2 )
  (byte*~) render::$2 ← (byte*) render::colline#3 + (byte) 40
  (byte*) render::colline#1 ← (byte*~) render::$2
  (byte) render::y#1 ← ++ (byte) render::y#3
  (boolean~) render::$3 ← (byte) render::y#1 != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  (byte[256]) COLS#18 ← phi( render::@2/(byte[256]) COLS#21 )
  (byte) numpoints#37 ← phi( render::@2/(byte) numpoints#39 )
  (byte) findcol::y#8 ← phi( render::@2/(byte) findcol::y#0 )
  (byte) findcol::x#5 ← phi( render::@2/(byte) findcol::x#0 )
  (byte[256]) YPOS#19 ← phi( render::@2/(byte[256]) YPOS#22 )
  (byte[256]) XPOS#19 ← phi( render::@2/(byte[256]) XPOS#24 )
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::mincol#3 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 findcol::@8/(byte[256]) COLS#19 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 findcol::@8/(byte) numpoints#21 )
  (byte) findcol::mindiff#9 ← phi( findcol/(byte) 255 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#5 ← phi( findcol/(byte) findcol::y#8 findcol::@8/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#5 findcol::@8/(byte) findcol::x#6 )
  (byte[256]) YPOS#8 ← phi( findcol/(byte[256]) YPOS#19 findcol::@8/(byte[256]) YPOS#20 )
  (byte) findcol::i#2 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#8 ← phi( findcol/(byte[256]) XPOS#19 findcol::@8/(byte[256]) XPOS#20 )
  (byte~) findcol::$0 ← (byte[256]) XPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::xp#0 ← (byte~) findcol::$0
  (byte~) findcol::$1 ← (byte[256]) YPOS#8 *idx (byte) findcol::i#2
  (byte) findcol::yp#0 ← (byte~) findcol::$1
  (boolean~) findcol::$3 ← (byte) findcol::x#1 != (byte) findcol::xp#0
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@3/(byte) findcol::mincol#12 )
  (byte[256]) YPOS#38 ← phi( findcol::@1/(byte[256]) YPOS#8 findcol::@3/(byte[256]) YPOS#39 )
  (byte[256]) XPOS#39 ← phi( findcol::@1/(byte[256]) XPOS#8 findcol::@3/(byte[256]) XPOS#40 )
  (byte[256]) COLS#15 ← phi( findcol::@1/(byte[256]) COLS#16 findcol::@3/(byte[256]) COLS#17 )
  (byte) numpoints#34 ← phi( findcol::@1/(byte) numpoints#35 findcol::@3/(byte) numpoints#36 )
  (byte) findcol::i#11 ← phi( findcol::@1/(byte) findcol::i#2 findcol::@3/(byte) findcol::i#12 )
  (byte) findcol::mindiff#8 ← phi( findcol::@1/(byte) findcol::mindiff#9 findcol::@3/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#7 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@3/(byte) findcol::yp#8 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#5 findcol::@3/(byte) findcol::y#11 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@3/(byte) findcol::xp#4 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@3/(byte) findcol::x#7 )
  (boolean~) findcol::$7 ← (byte) findcol::x#2 >= (byte) findcol::xp#1
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (byte) findcol::mincol#13 ← phi( findcol::@1/(byte) findcol::mincol#11 )
  (byte[256]) YPOS#40 ← phi( findcol::@1/(byte[256]) YPOS#8 )
  (byte[256]) XPOS#41 ← phi( findcol::@1/(byte[256]) XPOS#8 )
  (byte[256]) COLS#20 ← phi( findcol::@1/(byte[256]) COLS#16 )
  (byte) numpoints#38 ← phi( findcol::@1/(byte) numpoints#35 )
  (byte) findcol::i#13 ← phi( findcol::@1/(byte) findcol::i#2 )
  (byte) findcol::mindiff#12 ← phi( findcol::@1/(byte) findcol::mindiff#9 )
  (byte) findcol::xp#5 ← phi( findcol::@1/(byte) findcol::xp#0 )
  (byte) findcol::x#8 ← phi( findcol::@1/(byte) findcol::x#1 )
  (byte) findcol::yp#1 ← phi( findcol::@1/(byte) findcol::yp#0 )
  (byte) findcol::y#1 ← phi( findcol::@1/(byte) findcol::y#5 )
  (boolean~) findcol::$5 ← (byte) findcol::y#1 != (byte) findcol::yp#1
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  (byte) findcol::mincol#12 ← phi( findcol::@9/(byte) findcol::mincol#13 )
  (byte[256]) YPOS#39 ← phi( findcol::@9/(byte[256]) YPOS#40 )
  (byte[256]) XPOS#40 ← phi( findcol::@9/(byte[256]) XPOS#41 )
  (byte[256]) COLS#17 ← phi( findcol::@9/(byte[256]) COLS#20 )
  (byte) numpoints#36 ← phi( findcol::@9/(byte) numpoints#38 )
  (byte) findcol::i#12 ← phi( findcol::@9/(byte) findcol::i#13 )
  (byte) findcol::mindiff#10 ← phi( findcol::@9/(byte) findcol::mindiff#12 )
  (byte) findcol::yp#8 ← phi( findcol::@9/(byte) findcol::yp#1 )
  (byte) findcol::y#11 ← phi( findcol::@9/(byte) findcol::y#1 )
  (byte) findcol::xp#4 ← phi( findcol::@9/(byte) findcol::xp#5 )
  (byte) findcol::x#7 ← phi( findcol::@9/(byte) findcol::x#8 )
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#5 ← phi( findcol::@10/(byte) 0 findcol::@17/(byte) findcol::return#3 )
  (byte) findcol::return#2 ← (byte) findcol::return#5
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#9 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#37 ← phi( findcol::@2/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#38 ← phi( findcol::@2/(byte[256]) XPOS#39 )
  (byte[256]) COLS#14 ← phi( findcol::@2/(byte[256]) COLS#15 )
  (byte) numpoints#33 ← phi( findcol::@2/(byte) numpoints#34 )
  (byte) findcol::i#10 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#7 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#6 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#7 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::xp#2 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte) findcol::x#3 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte~) findcol::$9 ← (byte) findcol::x#3 - (byte) findcol::xp#2
  (byte) findcol::diff#0 ← (byte~) findcol::$9
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::mincol#8 ← phi( findcol::@2/(byte) findcol::mincol#10 )
  (byte[256]) YPOS#36 ← phi( findcol::@2/(byte[256]) YPOS#38 )
  (byte[256]) XPOS#37 ← phi( findcol::@2/(byte[256]) XPOS#39 )
  (byte[256]) COLS#13 ← phi( findcol::@2/(byte[256]) COLS#15 )
  (byte) numpoints#32 ← phi( findcol::@2/(byte) numpoints#34 )
  (byte) findcol::i#9 ← phi( findcol::@2/(byte) findcol::i#11 )
  (byte) findcol::mindiff#6 ← phi( findcol::@2/(byte) findcol::mindiff#8 )
  (byte) findcol::yp#5 ← phi( findcol::@2/(byte) findcol::yp#7 )
  (byte) findcol::y#6 ← phi( findcol::@2/(byte) findcol::y#10 )
  (byte) findcol::x#4 ← phi( findcol::@2/(byte) findcol::x#2 )
  (byte) findcol::xp#3 ← phi( findcol::@2/(byte) findcol::xp#1 )
  (byte~) findcol::$8 ← (byte) findcol::xp#3 - (byte) findcol::x#4
  (byte) findcol::diff#1 ← (byte~) findcol::$8
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::mincol#7 ← phi( findcol::@12/(byte) findcol::mincol#8 findcol::@4/(byte) findcol::mincol#9 )
  (byte) findcol::x#13 ← phi( findcol::@12/(byte) findcol::x#4 findcol::@4/(byte) findcol::x#3 )
  (byte[256]) YPOS#34 ← phi( findcol::@12/(byte[256]) YPOS#36 findcol::@4/(byte[256]) YPOS#37 )
  (byte[256]) XPOS#36 ← phi( findcol::@12/(byte[256]) XPOS#37 findcol::@4/(byte[256]) XPOS#38 )
  (byte[256]) COLS#12 ← phi( findcol::@12/(byte[256]) COLS#13 findcol::@4/(byte[256]) COLS#14 )
  (byte) numpoints#30 ← phi( findcol::@12/(byte) numpoints#32 findcol::@4/(byte) numpoints#33 )
  (byte) findcol::i#8 ← phi( findcol::@12/(byte) findcol::i#9 findcol::@4/(byte) findcol::i#10 )
  (byte) findcol::mindiff#5 ← phi( findcol::@12/(byte) findcol::mindiff#6 findcol::@4/(byte) findcol::mindiff#7 )
  (byte) findcol::diff#8 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (byte) findcol::yp#2 ← phi( findcol::@12/(byte) findcol::yp#5 findcol::@4/(byte) findcol::yp#6 )
  (byte) findcol::y#2 ← phi( findcol::@12/(byte) findcol::y#6 findcol::@4/(byte) findcol::y#7 )
  (boolean~) findcol::$11 ← (byte) findcol::y#2 >= (byte) findcol::yp#2
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#6 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#12 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[256]) YPOS#29 ← phi( findcol::@5/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#32 ← phi( findcol::@5/(byte[256]) XPOS#36 )
  (byte[256]) COLS#11 ← phi( findcol::@5/(byte[256]) COLS#12 )
  (byte) numpoints#28 ← phi( findcol::@5/(byte) numpoints#30 )
  (byte) findcol::i#7 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#4 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#4 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::yp#3 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte) findcol::y#3 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte~) findcol::$14 ← (byte) findcol::y#3 - (byte) findcol::yp#3
  (byte~) findcol::$15 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  (byte) findcol::diff#2 ← (byte~) findcol::$15
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte) findcol::mincol#5 ← phi( findcol::@5/(byte) findcol::mincol#7 )
  (byte) findcol::x#11 ← phi( findcol::@5/(byte) findcol::x#13 )
  (byte[256]) YPOS#28 ← phi( findcol::@5/(byte[256]) YPOS#34 )
  (byte[256]) XPOS#31 ← phi( findcol::@5/(byte[256]) XPOS#36 )
  (byte[256]) COLS#10 ← phi( findcol::@5/(byte[256]) COLS#12 )
  (byte) numpoints#27 ← phi( findcol::@5/(byte) numpoints#30 )
  (byte) findcol::i#6 ← phi( findcol::@5/(byte) findcol::i#8 )
  (byte) findcol::mindiff#3 ← phi( findcol::@5/(byte) findcol::mindiff#5 )
  (byte) findcol::diff#5 ← phi( findcol::@5/(byte) findcol::diff#8 )
  (byte) findcol::y#4 ← phi( findcol::@5/(byte) findcol::y#2 )
  (byte) findcol::yp#4 ← phi( findcol::@5/(byte) findcol::yp#2 )
  (byte~) findcol::$12 ← (byte) findcol::yp#4 - (byte) findcol::y#4
  (byte~) findcol::$13 ← (byte) findcol::diff#5 + (byte~) findcol::$12
  (byte) findcol::diff#3 ← (byte~) findcol::$13
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::y#13 ← phi( findcol::@14/(byte) findcol::y#4 findcol::@6/(byte) findcol::y#3 )
  (byte) findcol::mincol#4 ← phi( findcol::@14/(byte) findcol::mincol#5 findcol::@6/(byte) findcol::mincol#6 )
  (byte) findcol::x#10 ← phi( findcol::@14/(byte) findcol::x#11 findcol::@6/(byte) findcol::x#12 )
  (byte[256]) YPOS#24 ← phi( findcol::@14/(byte[256]) YPOS#28 findcol::@6/(byte[256]) YPOS#29 )
  (byte[256]) XPOS#26 ← phi( findcol::@14/(byte[256]) XPOS#31 findcol::@6/(byte[256]) XPOS#32 )
  (byte[256]) COLS#9 ← phi( findcol::@14/(byte[256]) COLS#10 findcol::@6/(byte[256]) COLS#11 )
  (byte) numpoints#25 ← phi( findcol::@14/(byte) numpoints#27 findcol::@6/(byte) numpoints#28 )
  (byte) findcol::i#5 ← phi( findcol::@14/(byte) findcol::i#6 findcol::@6/(byte) findcol::i#7 )
  (byte) findcol::mindiff#2 ← phi( findcol::@14/(byte) findcol::mindiff#3 findcol::@6/(byte) findcol::mindiff#4 )
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$17 ← (byte) findcol::diff#6 >= (byte) findcol::mindiff#2
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte[256]) COLS#19 ← phi( findcol::@16/(byte[256]) COLS#2 findcol::@7/(byte[256]) COLS#9 )
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::mindiff#1 findcol::@7/(byte) findcol::mindiff#2 )
  (byte) findcol::y#9 ← phi( findcol::@16/(byte) findcol::y#12 findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::mincol#3 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#4 )
  (byte) findcol::x#6 ← phi( findcol::@16/(byte) findcol::x#9 findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#20 ← phi( findcol::@16/(byte[256]) YPOS#23 findcol::@7/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#20 ← phi( findcol::@16/(byte[256]) XPOS#25 findcol::@7/(byte[256]) XPOS#26 )
  (byte) numpoints#21 ← phi( findcol::@16/(byte) numpoints#24 findcol::@7/(byte) numpoints#25 )
  (byte) findcol::i#3 ← phi( findcol::@16/(byte) findcol::i#4 findcol::@7/(byte) findcol::i#5 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#3
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#21
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::y#12 ← phi( findcol::@7/(byte) findcol::y#13 )
  (byte) findcol::x#9 ← phi( findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#23 ← phi( findcol::@7/(byte[256]) YPOS#24 )
  (byte[256]) XPOS#25 ← phi( findcol::@7/(byte[256]) XPOS#26 )
  (byte) numpoints#24 ← phi( findcol::@7/(byte) numpoints#25 )
  (byte) findcol::i#4 ← phi( findcol::@7/(byte) findcol::i#5 )
  (byte[256]) COLS#2 ← phi( findcol::@7/(byte[256]) COLS#9 )
  (byte) findcol::diff#7 ← phi( findcol::@7/(byte) findcol::diff#6 )
  (byte) findcol::mindiff#1 ← (byte) findcol::diff#7
  (byte~) findcol::$18 ← (byte[256]) COLS#2 *idx (byte) findcol::i#4
  (byte) findcol::mincol#1 ← (byte~) findcol::$18
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  (byte) findcol::mincol#2 ← phi( findcol::@8/(byte) findcol::mincol#3 )
  (byte) findcol::return#3 ← (byte) findcol::mincol#2
  to:findcol::@return
@end: scope:[]  from @7

Not aliassing across scopes: initscreen::screen#0 SCREEN#1
Not aliassing across scopes: render::colline#0 COLORS#1
Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#2
Not aliassing across scopes: render::$0 findcol::return#4
Alias (byte) numpoints#1 = (byte) numpoints#11 (byte) numpoints#8 (byte) numpoints#26 (byte) numpoints#29 (byte) numpoints#23 (byte) numpoints#18 (byte) numpoints#42 
Alias (byte) numpoints#10 = (byte) numpoints#12 (byte) numpoints#2 (byte) numpoints#13 (byte) numpoints#3 (byte) numpoints#14 (byte) numpoints#4 (byte) numpoints#15 (byte) numpoints#5 (byte) numpoints#16 (byte) numpoints#6 (byte) numpoints#17 (byte) numpoints#7 (byte) numpoints#31 (byte) numpoints#20 (byte) numpoints#9 
Alias (byte[256]) XPOS#13 = (byte[256]) XPOS#14 (byte[256]) XPOS#15 (byte[256]) XPOS#16 (byte[256]) XPOS#17 (byte[256]) XPOS#18 (byte[256]) XPOS#33 (byte[256]) XPOS#28 
Alias (byte[256]) YPOS#13 = (byte[256]) YPOS#14 (byte[256]) YPOS#15 (byte[256]) YPOS#16 (byte[256]) YPOS#17 (byte[256]) YPOS#18 (byte[256]) YPOS#35 (byte[256]) YPOS#31 
Alias (byte[256]) COLS#28 = (byte[256]) COLS#4 (byte[256]) COLS#3 (byte[256]) COLS#5 (byte[256]) COLS#6 (byte[256]) COLS#7 (byte[256]) COLS#8 (byte[256]) COLS#29 
Alias (byte*) SCREEN#1 = (byte*) SCREEN#8 (byte*) SCREEN#9 (byte*) SCREEN#7 (byte*) SCREEN#6 (byte*) SCREEN#5 (byte*) SCREEN#4 (byte*) SCREEN#3 
Alias (byte) FILL#2 = (byte) FILL#8 (byte) FILL#9 (byte) FILL#7 (byte) FILL#6 (byte) FILL#5 (byte) FILL#4 (byte) FILL#3 
Alias (byte*) COLORS#10 = (byte*) COLORS#11 (byte*) COLORS#12 (byte*) COLORS#9 (byte*) COLORS#8 (byte*) COLORS#7 (byte*) COLORS#5 (byte*) COLORS#4 
Alias (byte[256]) XPOS#1 = (byte[256]) XPOS#9 (byte[256]) XPOS#21 (byte[256]) XPOS#27 (byte[256]) XPOS#2 (byte[256]) XPOS#34 
Alias (byte[256]) YPOS#10 = (byte[256]) YPOS#21 (byte[256]) YPOS#25 (byte[256]) YPOS#30 (byte[256]) YPOS#9 (byte[256]) YPOS#32 
Alias (byte*) COLORS#1 = (byte*) COLORS#6 (byte*) COLORS#2 (byte*) COLORS#3 
Alias (byte[256]) COLS#24 = (byte[256]) COLS#30 (byte[256]) COLS#26 (byte[256]) COLS#27 
Alias (byte[256]) YPOS#1 = (byte[256]) YPOS#2 
Alias (byte[256]) XPOS#10 = (byte[256]) XPOS#11 
Alias (byte[256]) XPOS#3 = (byte[256]) XPOS#4 
Alias (byte[256]) YPOS#11 = (byte[256]) YPOS#12 
Alias (byte[256]) YPOS#3 = (byte[256]) YPOS#5 
Alias (byte[256]) XPOS#22 = (byte[256]) XPOS#23 
Alias (byte[256]) YPOS#4 = (byte[256]) YPOS#6 
Alias (byte[256]) XPOS#12 = (byte[256]) XPOS#5 (byte[256]) XPOS#6 
Alias (byte) findcol::return#0 = (byte) findcol::return#2 (byte) findcol::return#4 (byte) findcol::return#5 
Alias (byte*) render::colline#2 = (byte*) render::colline#4 (byte*) render::colline#3 
Alias (byte) render::x#2 = (byte) render::x#3 
Alias (byte) render::y#2 = (byte) render::y#5 (byte) render::y#3 
Alias (byte[256]) XPOS#19 = (byte[256]) XPOS#30 (byte[256]) XPOS#24 (byte[256]) XPOS#35 
Alias (byte[256]) YPOS#19 = (byte[256]) YPOS#27 (byte[256]) YPOS#22 (byte[256]) YPOS#33 
Alias (byte) numpoints#37 = (byte) numpoints#41 (byte) numpoints#39 (byte) numpoints#43 
Alias (byte[256]) COLS#18 = (byte[256]) COLS#23 (byte[256]) COLS#21 (byte[256]) COLS#25 
Alias (byte) render::col#0 = (byte~) render::$0 
Alias (byte*) render::colline#1 = (byte*~) render::$2 
Alias (byte) findcol::x#0 = (byte) findcol::x#5 
Alias (byte) findcol::y#0 = (byte) findcol::y#8 
Alias (byte) findcol::xp#0 = (byte~) findcol::$0 (byte) findcol::xp#5 (byte) findcol::xp#4 
Alias (byte) findcol::yp#0 = (byte~) findcol::$1 (byte) findcol::yp#1 (byte) findcol::yp#8 
Alias (byte) findcol::y#1 = (byte) findcol::y#5 (byte) findcol::y#11 
Alias (byte) findcol::x#1 = (byte) findcol::x#8 (byte) findcol::x#7 
Alias (byte) findcol::mindiff#10 = (byte) findcol::mindiff#12 (byte) findcol::mindiff#9 
Alias (byte) findcol::i#12 = (byte) findcol::i#13 (byte) findcol::i#2 
Alias (byte) numpoints#35 = (byte) numpoints#38 (byte) numpoints#36 
Alias (byte[256]) COLS#16 = (byte[256]) COLS#20 (byte[256]) COLS#17 
Alias (byte[256]) XPOS#40 = (byte[256]) XPOS#41 (byte[256]) XPOS#8 
Alias (byte[256]) YPOS#39 = (byte[256]) YPOS#40 (byte[256]) YPOS#8 
Alias (byte) findcol::mincol#11 = (byte) findcol::mincol#13 (byte) findcol::mincol#12 
Alias (byte) findcol::x#2 = (byte) findcol::x#3 (byte) findcol::x#4 
Alias (byte) findcol::xp#1 = (byte) findcol::xp#2 (byte) findcol::xp#3 
Alias (byte) findcol::y#10 = (byte) findcol::y#7 (byte) findcol::y#6 
Alias (byte) findcol::yp#5 = (byte) findcol::yp#6 (byte) findcol::yp#7 
Alias (byte) findcol::mindiff#6 = (byte) findcol::mindiff#7 (byte) findcol::mindiff#8 
Alias (byte) findcol::i#10 = (byte) findcol::i#11 (byte) findcol::i#9 
Alias (byte) numpoints#32 = (byte) numpoints#33 (byte) numpoints#34 
Alias (byte[256]) COLS#13 = (byte[256]) COLS#14 (byte[256]) COLS#15 
Alias (byte[256]) XPOS#37 = (byte[256]) XPOS#38 (byte[256]) XPOS#39 
Alias (byte[256]) YPOS#36 = (byte[256]) YPOS#37 (byte[256]) YPOS#38 
Alias (byte) findcol::mincol#10 = (byte) findcol::mincol#9 (byte) findcol::mincol#8 
Alias (byte) findcol::diff#0 = (byte~) findcol::$9 
Alias (byte) findcol::diff#1 = (byte~) findcol::$8 
Alias (byte) findcol::y#2 = (byte) findcol::y#3 (byte) findcol::y#4 
Alias (byte) findcol::yp#2 = (byte) findcol::yp#3 (byte) findcol::yp#4 
Alias (byte) findcol::diff#4 = (byte) findcol::diff#8 (byte) findcol::diff#5 
Alias (byte) findcol::mindiff#3 = (byte) findcol::mindiff#4 (byte) findcol::mindiff#5 
Alias (byte) findcol::i#6 = (byte) findcol::i#7 (byte) findcol::i#8 
Alias (byte) numpoints#27 = (byte) numpoints#28 (byte) numpoints#30 
Alias (byte[256]) COLS#10 = (byte[256]) COLS#11 (byte[256]) COLS#12 
Alias (byte[256]) XPOS#31 = (byte[256]) XPOS#32 (byte[256]) XPOS#36 
Alias (byte[256]) YPOS#28 = (byte[256]) YPOS#29 (byte[256]) YPOS#34 
Alias (byte) findcol::x#11 = (byte) findcol::x#12 (byte) findcol::x#13 
Alias (byte) findcol::mincol#5 = (byte) findcol::mincol#6 (byte) findcol::mincol#7 
Alias (byte) findcol::diff#2 = (byte~) findcol::$15 
Alias (byte) findcol::diff#3 = (byte~) findcol::$13 
Alias (byte) findcol::diff#6 = (byte) findcol::diff#7 (byte) findcol::mindiff#1 
Alias (byte[256]) COLS#2 = (byte[256]) COLS#9 
Alias (byte) findcol::i#4 = (byte) findcol::i#5 
Alias (byte) numpoints#24 = (byte) numpoints#25 
Alias (byte[256]) XPOS#25 = (byte[256]) XPOS#26 
Alias (byte[256]) YPOS#23 = (byte[256]) YPOS#24 
Alias (byte) findcol::x#10 = (byte) findcol::x#9 
Alias (byte) findcol::y#12 = (byte) findcol::y#13 
Alias (byte) findcol::mincol#1 = (byte~) findcol::$18 
Alias (byte) findcol::mincol#2 = (byte) findcol::mincol#3 (byte) findcol::return#3 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte*) COLORS#10 ← phi( @begin/(word) 55296 )
  (byte) FILL#2 ← phi( @begin/(byte) 230 )
  (byte*) SCREEN#1 ← phi( @begin/(word) 1024 )
  (byte[256]) COLS#28 ← phi( @begin/(word) 4608 )
  (byte[256]) YPOS#13 ← phi( @begin/(word) 4352 )
  (byte[256]) XPOS#13 ← phi( @begin/(word) 4096 )
  (byte) numpoints#22 ← phi( @begin/(byte) 0 )
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) COLS#24 ← phi( main::@11/(byte[256]) COLS#24 main::@9/(byte[256]) COLS#28 )
  (byte[256]) YPOS#10 ← phi( main::@11/(byte[256]) YPOS#10 main::@9/(byte[256]) YPOS#13 )
  (byte) numpoints#1 ← phi( main::@11/(byte) numpoints#1 main::@9/(byte) numpoints#10 )
  (byte[256]) XPOS#1 ← phi( main::@11/(byte[256]) XPOS#1 main::@9/(byte[256]) XPOS#13 )
  (byte*) COLORS#1 ← phi( main::@11/(byte*) COLORS#1 main::@9/(byte*) COLORS#10 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$4 ← (byte~) animate::$2 != (byte) 40
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte[256]) XPOS#10 ← phi( animate/(byte[256]) XPOS#1 animate::@7/(byte[256]) XPOS#1 )
  (byte[256]) YPOS#1 ← phi( animate/(byte[256]) YPOS#10 animate::@7/(byte[256]) YPOS#10 )
  (byte~) animate::$5 ← (byte[256]) YPOS#1 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS#1 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS#1 *idx (byte) 0
  (boolean~) animate::$9 ← (byte~) animate::$7 != (byte) 25
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte[256]) YPOS#11 ← phi( animate::@1/(byte[256]) YPOS#1 animate::@8/(byte[256]) YPOS#1 )
  (byte[256]) XPOS#3 ← phi( animate::@1/(byte[256]) XPOS#10 animate::@8/(byte[256]) XPOS#10 )
  (byte~) animate::$10 ← (byte[256]) XPOS#3 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS#3 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS#3 *idx (byte) 1
  (boolean~) animate::$14 ← (byte~) animate::$12 != (byte) 255
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[256]) YPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte[256]) XPOS#22 ← phi( animate::@2/(byte[256]) XPOS#3 animate::@9/(byte[256]) XPOS#3 )
  (byte[256]) YPOS#3 ← phi( animate::@2/(byte[256]) YPOS#11 animate::@9/(byte[256]) YPOS#11 )
  (byte~) animate::$15 ← (byte[256]) YPOS#3 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS#3 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS#3 *idx (byte) 2
  (boolean~) animate::$19 ← (byte~) animate::$17 != (byte) 25
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[256]) XPOS#3 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte[256]) XPOS#12 ← phi( animate::@10/(byte[256]) XPOS#22 animate::@3/(byte[256]) XPOS#22 )
  (byte[256]) YPOS#4 ← phi( animate::@10/(byte[256]) YPOS#3 animate::@3/(byte[256]) YPOS#3 )
  (byte~) animate::$20 ← (byte[256]) YPOS#4 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS#4 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS#4 *idx (byte) 3
  (boolean~) animate::$24 ← (byte~) animate::$22 != (byte) 255
  if((boolean~) animate::$24) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[256]) YPOS#3 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((byte[256]) YPOS#4 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS#12 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS#12 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS#12 *idx (byte) 3
  (boolean~) animate::$29 ← (byte~) animate::$27 < (byte) 40
  if((boolean~) animate::$29) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[256]) XPOS#12 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS#12 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte[256]) COLS#1 ← phi( main/(byte[256]) COLS#28 main::@3/(byte[256]) COLS#28 main::@4/(byte[256]) COLS#28 main::@5/(byte[256]) COLS#28 main::@6/(byte[256]) COLS#28 main::@7/(byte[256]) COLS#28 )
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte[256]) YPOS#7 ← phi( main/(byte[256]) YPOS#13 main::@3/(byte[256]) YPOS#13 main::@4/(byte[256]) YPOS#13 main::@5/(byte[256]) YPOS#13 main::@6/(byte[256]) YPOS#13 main::@7/(byte[256]) YPOS#13 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) numpoints#22 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte[256]) XPOS#7 ← phi( main/(byte[256]) XPOS#13 main::@3/(byte[256]) XPOS#13 main::@4/(byte[256]) XPOS#13 main::@5/(byte[256]) XPOS#13 main::@6/(byte[256]) XPOS#13 main::@7/(byte[256]) XPOS#13 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((byte[256]) XPOS#7 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((byte[256]) YPOS#7 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((byte[256]) COLS#1 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte*) initscreen::screen#0 ← (byte*) SCREEN#1
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(byte*) SCREEN#1 initscreen::@1/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) FILL#2 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline#0 ← (byte*) COLORS#1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(byte[256]) COLS#24 render::@3/(byte[256]) COLS#18 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#22 render::@5/(byte[256]) COLS#18 )
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#40 render::@5/(byte) numpoints#37 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 render::@5/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 render::@5/(byte[256]) XPOS#19 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#2 )
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  (boolean~) render::$1 ← (byte) render::x#1 != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  (boolean~) render::$3 ← (byte) render::y#1 != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 findcol::@8/(byte[256]) COLS#19 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 findcol::@8/(byte) numpoints#21 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 findcol::@8/(byte) findcol::y#9 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 findcol::@8/(byte) findcol::x#6 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 findcol::@8/(byte[256]) YPOS#20 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 findcol::@8/(byte[256]) XPOS#20 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  (boolean~) findcol::$3 ← (byte) findcol::x#1 != (byte) findcol::xp#0
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (byte) findcol::mincol#10 ← phi( findcol::@1/(byte) findcol::mincol#11 findcol::@3/(byte) findcol::mincol#11 )
  (byte[256]) YPOS#36 ← phi( findcol::@1/(byte[256]) YPOS#39 findcol::@3/(byte[256]) YPOS#39 )
  (byte[256]) XPOS#37 ← phi( findcol::@1/(byte[256]) XPOS#40 findcol::@3/(byte[256]) XPOS#40 )
  (byte[256]) COLS#13 ← phi( findcol::@1/(byte[256]) COLS#16 findcol::@3/(byte[256]) COLS#16 )
  (byte) numpoints#32 ← phi( findcol::@1/(byte) numpoints#35 findcol::@3/(byte) numpoints#35 )
  (byte) findcol::i#10 ← phi( findcol::@1/(byte) findcol::i#12 findcol::@3/(byte) findcol::i#12 )
  (byte) findcol::mindiff#6 ← phi( findcol::@1/(byte) findcol::mindiff#10 findcol::@3/(byte) findcol::mindiff#10 )
  (byte) findcol::yp#5 ← phi( findcol::@1/(byte) findcol::yp#0 findcol::@3/(byte) findcol::yp#0 )
  (byte) findcol::y#10 ← phi( findcol::@1/(byte) findcol::y#1 findcol::@3/(byte) findcol::y#1 )
  (byte) findcol::xp#1 ← phi( findcol::@1/(byte) findcol::xp#0 findcol::@3/(byte) findcol::xp#0 )
  (byte) findcol::x#2 ← phi( findcol::@1/(byte) findcol::x#1 findcol::@3/(byte) findcol::x#1 )
  (boolean~) findcol::$7 ← (byte) findcol::x#2 >= (byte) findcol::xp#1
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (boolean~) findcol::$5 ← (byte) findcol::y#1 != (byte) findcol::yp#0
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#0 ← phi( findcol::@10/(byte) 0 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#2 - (byte) findcol::xp#1
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#1 - (byte) findcol::x#2
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::mincol#5 ← phi( findcol::@12/(byte) findcol::mincol#10 findcol::@4/(byte) findcol::mincol#10 )
  (byte) findcol::x#11 ← phi( findcol::@12/(byte) findcol::x#2 findcol::@4/(byte) findcol::x#2 )
  (byte[256]) YPOS#28 ← phi( findcol::@12/(byte[256]) YPOS#36 findcol::@4/(byte[256]) YPOS#36 )
  (byte[256]) XPOS#31 ← phi( findcol::@12/(byte[256]) XPOS#37 findcol::@4/(byte[256]) XPOS#37 )
  (byte[256]) COLS#10 ← phi( findcol::@12/(byte[256]) COLS#13 findcol::@4/(byte[256]) COLS#13 )
  (byte) numpoints#27 ← phi( findcol::@12/(byte) numpoints#32 findcol::@4/(byte) numpoints#32 )
  (byte) findcol::i#6 ← phi( findcol::@12/(byte) findcol::i#10 findcol::@4/(byte) findcol::i#10 )
  (byte) findcol::mindiff#3 ← phi( findcol::@12/(byte) findcol::mindiff#6 findcol::@4/(byte) findcol::mindiff#6 )
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (byte) findcol::yp#2 ← phi( findcol::@12/(byte) findcol::yp#5 findcol::@4/(byte) findcol::yp#5 )
  (byte) findcol::y#2 ← phi( findcol::@12/(byte) findcol::y#10 findcol::@4/(byte) findcol::y#10 )
  (boolean~) findcol::$11 ← (byte) findcol::y#2 >= (byte) findcol::yp#2
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#2 - (byte) findcol::yp#2
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#2 - (byte) findcol::y#2
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::y#12 ← phi( findcol::@14/(byte) findcol::y#2 findcol::@6/(byte) findcol::y#2 )
  (byte) findcol::mincol#4 ← phi( findcol::@14/(byte) findcol::mincol#5 findcol::@6/(byte) findcol::mincol#5 )
  (byte) findcol::x#10 ← phi( findcol::@14/(byte) findcol::x#11 findcol::@6/(byte) findcol::x#11 )
  (byte[256]) YPOS#23 ← phi( findcol::@14/(byte[256]) YPOS#28 findcol::@6/(byte[256]) YPOS#28 )
  (byte[256]) XPOS#25 ← phi( findcol::@14/(byte[256]) XPOS#31 findcol::@6/(byte[256]) XPOS#31 )
  (byte[256]) COLS#2 ← phi( findcol::@14/(byte[256]) COLS#10 findcol::@6/(byte[256]) COLS#10 )
  (byte) numpoints#24 ← phi( findcol::@14/(byte) numpoints#27 findcol::@6/(byte) numpoints#27 )
  (byte) findcol::i#4 ← phi( findcol::@14/(byte) findcol::i#6 findcol::@6/(byte) findcol::i#6 )
  (byte) findcol::mindiff#2 ← phi( findcol::@14/(byte) findcol::mindiff#3 findcol::@6/(byte) findcol::mindiff#3 )
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$17 ← (byte) findcol::diff#6 >= (byte) findcol::mindiff#2
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte[256]) COLS#19 ← phi( findcol::@16/(byte[256]) COLS#2 findcol::@7/(byte[256]) COLS#2 )
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#2 )
  (byte) findcol::y#9 ← phi( findcol::@16/(byte) findcol::y#12 findcol::@7/(byte) findcol::y#12 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#4 )
  (byte) findcol::x#6 ← phi( findcol::@16/(byte) findcol::x#10 findcol::@7/(byte) findcol::x#10 )
  (byte[256]) YPOS#20 ← phi( findcol::@16/(byte[256]) YPOS#23 findcol::@7/(byte[256]) YPOS#23 )
  (byte[256]) XPOS#20 ← phi( findcol::@16/(byte[256]) XPOS#25 findcol::@7/(byte[256]) XPOS#25 )
  (byte) numpoints#21 ← phi( findcol::@16/(byte) numpoints#24 findcol::@7/(byte) numpoints#24 )
  (byte) findcol::i#3 ← phi( findcol::@16/(byte) findcol::i#4 findcol::@7/(byte) findcol::i#4 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#3
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#21
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#2 *idx (byte) findcol::i#4
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@end: scope:[]  from @7

Redundant Phi (byte) numpoints#22 (byte) 0
Redundant Phi (byte[256]) XPOS#13 (word) 4096
Redundant Phi (byte[256]) YPOS#13 (word) 4352
Redundant Phi (byte[256]) COLS#28 (word) 4608
Redundant Phi (byte*) SCREEN#1 (word) 1024
Redundant Phi (byte) FILL#2 (byte) 230
Redundant Phi (byte*) COLORS#10 (word) 55296
Redundant Phi (byte[256]) YPOS#1 (byte[256]) YPOS#10
Redundant Phi (byte[256]) XPOS#10 (byte[256]) XPOS#1
Redundant Phi (byte[256]) XPOS#3 (byte[256]) XPOS#10
Redundant Phi (byte[256]) YPOS#11 (byte[256]) YPOS#1
Redundant Phi (byte[256]) YPOS#3 (byte[256]) YPOS#11
Redundant Phi (byte[256]) XPOS#22 (byte[256]) XPOS#3
Redundant Phi (byte[256]) YPOS#4 (byte[256]) YPOS#3
Redundant Phi (byte[256]) XPOS#12 (byte[256]) XPOS#22
Redundant Phi (byte[256]) XPOS#7 (byte[256]) XPOS#13
Redundant Phi (byte[256]) YPOS#7 (byte[256]) YPOS#13
Redundant Phi (byte[256]) COLS#1 (byte[256]) COLS#28
Redundant Phi (byte) findcol::x#2 (byte) findcol::x#1
Redundant Phi (byte) findcol::xp#1 (byte) findcol::xp#0
Redundant Phi (byte) findcol::y#10 (byte) findcol::y#1
Redundant Phi (byte) findcol::yp#5 (byte) findcol::yp#0
Redundant Phi (byte) findcol::mindiff#6 (byte) findcol::mindiff#10
Redundant Phi (byte) findcol::i#10 (byte) findcol::i#12
Redundant Phi (byte) numpoints#32 (byte) numpoints#35
Redundant Phi (byte[256]) COLS#13 (byte[256]) COLS#16
Redundant Phi (byte[256]) XPOS#37 (byte[256]) XPOS#40
Redundant Phi (byte[256]) YPOS#36 (byte[256]) YPOS#39
Redundant Phi (byte) findcol::mincol#10 (byte) findcol::mincol#11
Redundant Phi (byte) findcol::y#2 (byte) findcol::y#10
Redundant Phi (byte) findcol::yp#2 (byte) findcol::yp#5
Redundant Phi (byte) findcol::mindiff#3 (byte) findcol::mindiff#6
Redundant Phi (byte) findcol::i#6 (byte) findcol::i#10
Redundant Phi (byte) numpoints#27 (byte) numpoints#32
Redundant Phi (byte[256]) COLS#10 (byte[256]) COLS#13
Redundant Phi (byte[256]) XPOS#31 (byte[256]) XPOS#37
Redundant Phi (byte[256]) YPOS#28 (byte[256]) YPOS#36
Redundant Phi (byte) findcol::x#11 (byte) findcol::x#2
Redundant Phi (byte) findcol::mincol#5 (byte) findcol::mincol#10
Redundant Phi (byte) findcol::mindiff#2 (byte) findcol::mindiff#3
Redundant Phi (byte) findcol::i#4 (byte) findcol::i#6
Redundant Phi (byte) numpoints#24 (byte) numpoints#27
Redundant Phi (byte[256]) COLS#2 (byte[256]) COLS#10
Redundant Phi (byte[256]) XPOS#25 (byte[256]) XPOS#31
Redundant Phi (byte[256]) YPOS#23 (byte[256]) YPOS#28
Redundant Phi (byte) findcol::x#10 (byte) findcol::x#11
Redundant Phi (byte) findcol::mincol#4 (byte) findcol::mincol#5
Redundant Phi (byte) findcol::y#12 (byte) findcol::y#2
Redundant Phi (byte) findcol::i#3 (byte) findcol::i#4
Redundant Phi (byte) numpoints#21 (byte) numpoints#24
Redundant Phi (byte[256]) XPOS#20 (byte[256]) XPOS#25
Redundant Phi (byte[256]) YPOS#20 (byte[256]) YPOS#23
Redundant Phi (byte) findcol::x#6 (byte) findcol::x#10
Redundant Phi (byte) findcol::y#9 (byte) findcol::y#12
Redundant Phi (byte[256]) COLS#19 (byte[256]) COLS#2
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) COLS#24 ← phi( main::@11/(byte[256]) COLS#24 main::@9/(word) 4608 )
  (byte[256]) YPOS#10 ← phi( main::@11/(byte[256]) YPOS#10 main::@9/(word) 4352 )
  (byte) numpoints#1 ← phi( main::@11/(byte) numpoints#1 main::@9/(byte) numpoints#10 )
  (byte[256]) XPOS#1 ← phi( main::@11/(byte[256]) XPOS#1 main::@9/(word) 4096 )
  (byte*) COLORS#1 ← phi( main::@11/(byte*) COLORS#1 main::@9/(word) 55296 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$4 ← (byte~) animate::$2 != (byte) 40
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[256]) YPOS#10 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS#10 *idx (byte) 0
  (boolean~) animate::$9 ← (byte~) animate::$7 != (byte) 25
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[256]) XPOS#1 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS#1 *idx (byte) 1
  (boolean~) animate::$14 ← (byte~) animate::$12 != (byte) 255
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[256]) YPOS#10 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS#10 *idx (byte) 2
  (boolean~) animate::$19 ← (byte~) animate::$17 != (byte) 25
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[256]) YPOS#10 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS#10 *idx (byte) 3
  (boolean~) animate::$24 ← (byte~) animate::$22 != (byte) 255
  if((boolean~) animate::$24) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS#1 *idx (byte) 3
  (boolean~) animate::$29 ← (byte~) animate::$27 < (byte) 40
  if((boolean~) animate::$29) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte*) initscreen::screen#0 ← (word) 1024
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(word) 1024 initscreen::@1/(byte*) SCREEN#2 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) 230 initscreen::@1/(byte) FILL#1 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline#0 ← (byte*) COLORS#1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(byte[256]) COLS#24 render::@3/(byte[256]) COLS#18 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#22 render::@5/(byte[256]) COLS#18 )
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#40 render::@5/(byte) numpoints#37 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 render::@5/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 render::@5/(byte[256]) XPOS#19 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 render::@5/(byte*) render::colline#2 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 render::@5/(byte) render::y#2 )
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  (boolean~) render::$1 ← (byte) render::x#1 != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  (boolean~) render::$3 ← (byte) render::y#1 != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 findcol::@8/(byte[256]) COLS#16 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 findcol::@8/(byte) numpoints#35 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 findcol::@8/(byte) findcol::y#1 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 findcol::@8/(byte) findcol::x#1 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 findcol::@8/(byte[256]) YPOS#39 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 findcol::@8/(byte[256]) XPOS#40 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  (boolean~) findcol::$3 ← (byte) findcol::x#1 != (byte) findcol::xp#0
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (boolean~) findcol::$7 ← (byte) findcol::x#1 >= (byte) findcol::xp#0
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (boolean~) findcol::$5 ← (byte) findcol::y#1 != (byte) findcol::yp#0
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#0 ← phi( findcol::@10/(byte) 0 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (boolean~) findcol::$11 ← (byte) findcol::y#1 >= (byte) findcol::yp#0
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$17 ← (byte) findcol::diff#6 >= (byte) findcol::mindiff#10
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#35
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@end: scope:[]  from @7

Self Phi Eliminated (byte*) COLORS#1
Self Phi Eliminated (byte[256]) XPOS#1
Self Phi Eliminated (byte) numpoints#1
Self Phi Eliminated (byte[256]) YPOS#10
Self Phi Eliminated (byte[256]) COLS#24
Self Phi Eliminated (byte) FILL#1
Self Phi Eliminated (byte*) SCREEN#2
Self Phi Eliminated (byte) render::y#2
Self Phi Eliminated (byte*) render::colline#2
Self Phi Eliminated (byte[256]) XPOS#19
Self Phi Eliminated (byte[256]) YPOS#19
Self Phi Eliminated (byte) numpoints#37
Self Phi Eliminated (byte[256]) COLS#18
Self Phi Eliminated (byte[256]) XPOS#40
Self Phi Eliminated (byte[256]) YPOS#39
Self Phi Eliminated (byte) findcol::x#1
Self Phi Eliminated (byte) findcol::y#1
Self Phi Eliminated (byte) numpoints#35
Self Phi Eliminated (byte[256]) COLS#16
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) COLS#24 ← phi( main::@9/(word) 4608 )
  (byte[256]) YPOS#10 ← phi( main::@9/(word) 4352 )
  (byte) numpoints#1 ← phi( main::@9/(byte) numpoints#10 )
  (byte[256]) XPOS#1 ← phi( main::@9/(word) 4096 )
  (byte*) COLORS#1 ← phi( main::@9/(word) 55296 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  (boolean~) animate::$4 ← (byte~) animate::$2 != (byte) 40
  if((boolean~) animate::$4) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[256]) YPOS#10 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS#10 *idx (byte) 0
  (boolean~) animate::$9 ← (byte~) animate::$7 != (byte) 25
  if((boolean~) animate::$9) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[256]) XPOS#1 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS#1 *idx (byte) 1
  (boolean~) animate::$14 ← (byte~) animate::$12 != (byte) 255
  if((boolean~) animate::$14) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[256]) YPOS#10 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS#10 *idx (byte) 2
  (boolean~) animate::$19 ← (byte~) animate::$17 != (byte) 25
  if((boolean~) animate::$19) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[256]) YPOS#10 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS#10 *idx (byte) 3
  (boolean~) animate::$24 ← (byte~) animate::$22 != (byte) 255
  if((boolean~) animate::$24) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS#1 *idx (byte) 3
  (boolean~) animate::$29 ← (byte~) animate::$27 < (byte) 40
  if((boolean~) animate::$29) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte*) initscreen::screen#0 ← (word) 1024
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(word) 1024 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) 230 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word) 1000
  (boolean~) initscreen::$1 ← (byte*) initscreen::screen#1 < (byte*~) initscreen::$0
  if((boolean~) initscreen::$1) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline#0 ← (byte*) COLORS#1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(byte[256]) COLS#24 render::@3/(byte[256]) COLS#18 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#22 )
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#40 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 )
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  (boolean~) render::$1 ← (byte) render::x#1 != (byte) 40
  if((boolean~) render::$1) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  (boolean~) render::$3 ← (byte) render::y#1 != (byte) 25
  if((boolean~) render::$3) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  (boolean~) findcol::$3 ← (byte) findcol::x#1 != (byte) findcol::xp#0
  if((boolean~) findcol::$3) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  (boolean~) findcol::$7 ← (byte) findcol::x#1 >= (byte) findcol::xp#0
  if((boolean~) findcol::$7) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  (boolean~) findcol::$5 ← (byte) findcol::y#1 != (byte) findcol::yp#0
  if((boolean~) findcol::$5) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#0 ← phi( findcol::@10/(byte) 0 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  (boolean~) findcol::$11 ← (byte) findcol::y#1 >= (byte) findcol::yp#0
  if((boolean~) findcol::$11) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  (boolean~) findcol::$17 ← (byte) findcol::diff#6 >= (byte) findcol::mindiff#10
  if((boolean~) findcol::$17) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  (boolean~) findcol::$19 ← (byte) findcol::i#1 < (byte) numpoints#35
  if((boolean~) findcol::$19) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@end: scope:[]  from @7

Simple Condition (boolean~) animate::$4 if((byte~) animate::$2!=(byte) 40) goto animate::@1
Simple Condition (boolean~) animate::$9 if((byte~) animate::$7!=(byte) 25) goto animate::@2
Simple Condition (boolean~) animate::$14 if((byte~) animate::$12!=(byte) 255) goto animate::@3
Simple Condition (boolean~) animate::$19 if((byte~) animate::$17!=(byte) 25) goto animate::@4
Simple Condition (boolean~) animate::$24 if((byte~) animate::$22!=(byte) 255) goto animate::@return
Simple Condition (boolean~) animate::$29 if((byte~) animate::$27<(byte) 40) goto animate::@return
Simple Condition (boolean~) initscreen::$1 if((byte*) initscreen::screen#1<(byte*~) initscreen::$0) goto initscreen::@1
Simple Condition (boolean~) render::$1 if((byte) render::x#1!=(byte) 40) goto render::@2
Simple Condition (boolean~) render::$3 if((byte) render::y#1!=(byte) 25) goto render::@1
Simple Condition (boolean~) findcol::$3 if((byte) findcol::x#1!=(byte) findcol::xp#0) goto findcol::@2
Simple Condition (boolean~) findcol::$7 if((byte) findcol::x#1>=(byte) findcol::xp#0) goto findcol::@4
Simple Condition (boolean~) findcol::$5 if((byte) findcol::y#1!=(byte) findcol::yp#0) goto findcol::@3
Simple Condition (boolean~) findcol::$11 if((byte) findcol::y#1>=(byte) findcol::yp#0) goto findcol::@6
Simple Condition (boolean~) findcol::$17 if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
Simple Condition (boolean~) findcol::$19 if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@7
@7: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) COLS#24 ← phi( main::@9/(word) 4608 )
  (byte[256]) YPOS#10 ← phi( main::@9/(word) 4352 )
  (byte) numpoints#1 ← phi( main::@9/(byte) numpoints#10 )
  (byte[256]) XPOS#1 ← phi( main::@9/(word) 4096 )
  (byte*) COLORS#1 ← phi( main::@9/(word) 55296 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[256]) YPOS#10 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS#10 *idx (byte) 0
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[256]) XPOS#1 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS#1 *idx (byte) 1
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[256]) YPOS#10 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS#10 *idx (byte) 2
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[256]) YPOS#10 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS#10 *idx (byte) 3
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS#1 *idx (byte) 3
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte*) initscreen::screen#0 ← (word) 1024
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(word) 1024 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) 230 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word) 1000
  if((byte*) initscreen::screen#1<(byte*~) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline#0 ← (byte*) COLORS#1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(byte[256]) COLS#24 render::@3/(byte[256]) COLS#18 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#22 )
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#40 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 )
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  if((byte) findcol::x#1!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@3
  if((byte) findcol::x#1>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#1!=(byte) findcol::yp#0) goto findcol::@3
  to:findcol::@10
findcol::@3: scope:[findcol]  from findcol::@9
  to:findcol::@2
findcol::@10: scope:[findcol]  from findcol::@9
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@10 findcol::@17
  (byte) findcol::return#0 ← phi( findcol::@10/(byte) 0 findcol::@17/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#1>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@17
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
findcol::@17: scope:[findcol]  from findcol::@8
  to:findcol::@return
@end: scope:[]  from @7

Culled Empty Block (label) @7
Culled Empty Block (label) main::@9
Culled Empty Block (label) findcol::@3
Culled Empty Block (label) findcol::@10
Culled Empty Block (label) findcol::@17
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@8
  (byte[256]) COLS#24 ← phi( main::@8/(word) 4608 )
  (byte[256]) YPOS#10 ← phi( main::@8/(word) 4352 )
  (byte) numpoints#1 ← phi( main::@8/(byte) numpoints#10 )
  (byte[256]) XPOS#1 ← phi( main::@8/(word) 4096 )
  (byte*) COLORS#1 ← phi( main::@8/(word) 55296 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← (byte[256]) XPOS#1 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (byte[256]) XPOS#1 *idx (byte) 0
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (byte[256]) YPOS#10 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (byte[256]) YPOS#10 *idx (byte) 0
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((byte[256]) XPOS#1 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (byte[256]) XPOS#1 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (byte[256]) XPOS#1 *idx (byte) 1
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((byte[256]) YPOS#10 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (byte[256]) YPOS#10 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (byte[256]) YPOS#10 *idx (byte) 2
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((byte[256]) XPOS#1 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (byte[256]) YPOS#10 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (byte[256]) YPOS#10 *idx (byte) 3
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((byte[256]) YPOS#10 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((byte[256]) YPOS#10 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (byte[256]) XPOS#1 *idx (byte) 3
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (byte[256]) XPOS#1 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((byte[256]) XPOS#1 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  (byte*) initscreen::screen#0 ← (word) 1024
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) SCREEN#2 ← phi( initscreen/(word) 1024 )
  (byte*) initscreen::screen#2 ← phi( initscreen/(byte*) initscreen::screen#0 initscreen::@1/(byte*) initscreen::screen#1 )
  (byte) FILL#1 ← phi( initscreen/(byte) 230 )
  *((byte*) initscreen::screen#2) ← (byte) FILL#1
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (byte*) SCREEN#2 + (word) 1000
  if((byte*) initscreen::screen#1<(byte*~) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline#0 ← (byte*) COLORS#1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(byte[256]) COLS#24 render::@3/(byte[256]) COLS#18 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) YPOS#26 ← phi( render/(byte[256]) YPOS#10 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(byte[256]) XPOS#1 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#22 )
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#40 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 )
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  if((byte) findcol::x#1!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#1>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#1!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  (byte) findcol::return#0 ← phi( findcol::@9/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#1>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@return
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
@end: scope:[]  from @begin

Constant (byte*) COLORS#1 (word) 55296
Constant (byte[256]) XPOS#1 (word) 4096
Constant (byte[256]) YPOS#10 (word) 4352
Constant (byte[256]) COLS#24 (word) 4608
Constant (byte*) initscreen::screen#0 (word) 1024
Constant (byte) FILL#1 (byte) 230
Constant (byte*) SCREEN#2 (word) 1024
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@8
  (byte) numpoints#1 ← phi( main::@8/(byte) numpoints#10 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← (word) 4096 *idx (byte) 0
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((word) 4096 + (byte) 0) ← (byte~) animate::$1
  (byte~) animate::$2 ← (word) 4096 *idx (byte) 0
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← (word) 4352 *idx (byte) 0
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((word) 4352 + (byte) 0) ← (byte~) animate::$6
  (byte~) animate::$7 ← (word) 4352 *idx (byte) 0
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((word) 4096 + (byte) 0) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← (word) 4096 *idx (byte) 1
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((word) 4096 + (byte) 1) ← (byte~) animate::$11
  (byte~) animate::$12 ← (word) 4096 *idx (byte) 1
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((word) 4352 + (byte) 0) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← (word) 4352 *idx (byte) 2
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((word) 4352 + (byte) 2) ← (byte~) animate::$16
  (byte~) animate::$17 ← (word) 4352 *idx (byte) 2
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((word) 4096 + (byte) 1) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← (word) 4352 *idx (byte) 3
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((word) 4352 + (byte) 3) ← (byte~) animate::$21
  (byte~) animate::$22 ← (word) 4352 *idx (byte) 3
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((word) 4352 + (byte) 2) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((word) 4352 + (byte) 3) ← (byte) 25
  (byte~) animate::$25 ← (word) 4096 *idx (byte) 3
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((word) 4096 + (byte) 3) ← (byte~) animate::$26
  (byte~) animate::$27 ← (word) 4096 *idx (byte) 3
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← (word) 4096 *idx (byte) 3
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((word) 4096 + (byte) 3) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(word) 1024 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (byte) 230
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (word) 1024 + (word) 1000
  if((byte*) initscreen::screen#1<(byte*~) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline#0 ← (word) 55296
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(word) 4608 render::@3/(byte[256]) COLS#18 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) YPOS#26 ← phi( render/(word) 4352 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(word) 4096 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#22 )
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#40 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 )
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  if((byte) findcol::x#1!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#1>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#1!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  (byte) findcol::return#0 ← phi( findcol::@9/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#1>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@return
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
@end: scope:[]  from @begin

Consolidated referenced array index constant in assignment animate::$0
Consolidated assigned array index constant in assignment *(4096)
Consolidated referenced array index constant in assignment animate::$2
Consolidated referenced array index constant in assignment animate::$5
Consolidated assigned array index constant in assignment *(4352)
Consolidated referenced array index constant in assignment animate::$7
Consolidated assigned array index constant in assignment *(4096)
Consolidated referenced array index constant in assignment animate::$10
Consolidated assigned array index constant in assignment *(4097)
Consolidated referenced array index constant in assignment animate::$12
Consolidated assigned array index constant in assignment *(4352)
Consolidated referenced array index constant in assignment animate::$15
Consolidated assigned array index constant in assignment *(4354)
Consolidated referenced array index constant in assignment animate::$17
Consolidated assigned array index constant in assignment *(4097)
Consolidated referenced array index constant in assignment animate::$20
Consolidated assigned array index constant in assignment *(4355)
Consolidated referenced array index constant in assignment animate::$22
Consolidated assigned array index constant in assignment *(4354)
Consolidated assigned array index constant in assignment *(4355)
Consolidated referenced array index constant in assignment animate::$25
Consolidated assigned array index constant in assignment *(4099)
Consolidated referenced array index constant in assignment animate::$27
Consolidated referenced array index constant in assignment animate::$30
Consolidated assigned array index constant in assignment *(4099)
Succesful SSA optimization Pass2ConstantAdditionElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@8
  (byte) numpoints#1 ← phi( main::@8/(byte) numpoints#10 )
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← * (word) 4096
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((word) 4096) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (word) 4096
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (word) 4352
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((word) 4352) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (word) 4352
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((word) 4096) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (word) 4097
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((word) 4097) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (word) 4097
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((word) 4352) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (word) 4354
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((word) 4354) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (word) 4354
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((word) 4097) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (word) 4355
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((word) 4355) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (word) 4355
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((word) 4354) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((word) 4355) ← (byte) 25
  (byte~) animate::$25 ← * (word) 4099
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((word) 4099) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (word) 4099
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (word) 4099
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((word) 4099) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#10 main::@4/(byte) numpoints#10 main::@5/(byte) numpoints#10 main::@6/(byte) numpoints#10 main::@7/(byte) numpoints#10 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#10 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(word) 1024 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (byte) 230
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (word) 1024 + (word) 1000
  if((byte*) initscreen::screen#1<(byte*~) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline#0 ← (word) 55296
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#22 ← phi( render/(word) 4608 render::@3/(byte[256]) COLS#18 )
  (byte) numpoints#40 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#37 )
  (byte[256]) YPOS#26 ← phi( render/(word) 4352 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#29 ← phi( render/(word) 4096 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#5 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#4 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte[256]) COLS#18 ← phi( render::@1/(byte[256]) COLS#22 )
  (byte) numpoints#37 ← phi( render::@1/(byte) numpoints#40 )
  (byte[256]) YPOS#19 ← phi( render::@1/(byte[256]) YPOS#26 )
  (byte[256]) XPOS#19 ← phi( render::@1/(byte[256]) XPOS#29 )
  (byte*) render::colline#2 ← phi( render::@1/(byte*) render::colline#5 )
  (byte) render::y#2 ← phi( render::@1/(byte) render::y#4 )
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  (byte[256]) COLS#16 ← phi( findcol/(byte[256]) COLS#18 )
  (byte) numpoints#35 ← phi( findcol/(byte) numpoints#37 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::y#1 ← phi( findcol/(byte) findcol::y#0 )
  (byte) findcol::x#1 ← phi( findcol/(byte) findcol::x#0 )
  (byte[256]) YPOS#39 ← phi( findcol/(byte[256]) YPOS#19 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::i#1 )
  (byte[256]) XPOS#40 ← phi( findcol/(byte[256]) XPOS#19 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#40 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#39 *idx (byte) findcol::i#12
  if((byte) findcol::x#1!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#1>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#1!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  (byte) findcol::return#0 ← phi( findcol::@9/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#1 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#1
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#1>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#1 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#1
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@return
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
@end: scope:[]  from @begin

Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#2
Not aliassing across scopes: render::col#0 findcol::return#0
Alias (byte) numpoints#1 = (byte) numpoints#10 
Alias (byte) render::y#2 = (byte) render::y#4 
Alias (byte*) render::colline#2 = (byte*) render::colline#5 
Alias (byte[256]) XPOS#19 = (byte[256]) XPOS#29 (byte[256]) XPOS#40 
Alias (byte[256]) YPOS#19 = (byte[256]) YPOS#26 (byte[256]) YPOS#39 
Alias (byte) numpoints#35 = (byte) numpoints#37 (byte) numpoints#40 
Alias (byte[256]) COLS#16 = (byte[256]) COLS#18 (byte[256]) COLS#22 
Alias (byte) findcol::x#0 = (byte) findcol::x#1 
Alias (byte) findcol::y#0 = (byte) findcol::y#1 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@8
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← * (word) 4096
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((word) 4096) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (word) 4096
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (word) 4352
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((word) 4352) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (word) 4352
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((word) 4096) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (word) 4097
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((word) 4097) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (word) 4097
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((word) 4352) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (word) 4354
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((word) 4354) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (word) 4354
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((word) 4097) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (word) 4355
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((word) 4355) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (word) 4355
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((word) 4354) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((word) 4355) ← (byte) 25
  (byte~) animate::$25 ← * (word) 4099
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((word) 4099) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (word) 4099
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (word) 4099
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((word) 4099) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#1 main::@4/(byte) numpoints#1 main::@5/(byte) numpoints#1 main::@6/(byte) numpoints#1 main::@7/(byte) numpoints#1 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#1 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(word) 1024 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (byte) 230
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (word) 1024 + (word) 1000
  if((byte*) initscreen::screen#1<(byte*~) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline#0 ← (word) 55296
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#16 ← phi( render/(word) 4608 render::@3/(byte[256]) COLS#16 )
  (byte) numpoints#35 ← phi( render/(byte) numpoints#1 render::@3/(byte) numpoints#35 )
  (byte[256]) YPOS#19 ← phi( render/(word) 4352 render::@3/(byte[256]) YPOS#19 )
  (byte[256]) XPOS#19 ← phi( render/(word) 4096 render::@3/(byte[256]) XPOS#19 )
  (byte*) render::colline#2 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#2 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#19 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#19 *idx (byte) findcol::i#12
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  (byte) findcol::return#0 ← phi( findcol::@9/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@return
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
@end: scope:[]  from @begin

Self Phi Eliminated (byte[256]) XPOS#19
Self Phi Eliminated (byte[256]) YPOS#19
Self Phi Eliminated (byte) numpoints#35
Self Phi Eliminated (byte[256]) COLS#16
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@8
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← * (word) 4096
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((word) 4096) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (word) 4096
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (word) 4352
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((word) 4352) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (word) 4352
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((word) 4096) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (word) 4097
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((word) 4097) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (word) 4097
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((word) 4352) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (word) 4354
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((word) 4354) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (word) 4354
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((word) 4097) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (word) 4355
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((word) 4355) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (word) 4355
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((word) 4354) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((word) 4355) ← (byte) 25
  (byte~) animate::$25 ← * (word) 4099
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((word) 4099) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (word) 4099
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (word) 4099
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((word) 4099) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#1 main::@4/(byte) numpoints#1 main::@5/(byte) numpoints#1 main::@6/(byte) numpoints#1 main::@7/(byte) numpoints#1 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#1 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(word) 1024 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (byte) 230
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  (byte*~) initscreen::$0 ← (word) 1024 + (word) 1000
  if((byte*) initscreen::screen#1<(byte*~) initscreen::$0) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  (byte*) render::colline#0 ← (word) 55296
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte[256]) COLS#16 ← phi( render/(word) 4608 )
  (byte) numpoints#35 ← phi( render/(byte) numpoints#1 )
  (byte[256]) YPOS#19 ← phi( render/(word) 4352 )
  (byte[256]) XPOS#19 ← phi( render/(word) 4096 )
  (byte*) render::colline#2 ← phi( render/(byte*) render::colline#0 render::@3/(byte*) render::colline#1 )
  (byte) render::y#2 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (byte[256]) XPOS#19 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (byte[256]) YPOS#19 *idx (byte) findcol::i#12
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  (byte) findcol::return#0 ← phi( findcol::@9/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@return
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (byte[256]) COLS#16 *idx (byte) findcol::i#12
  to:findcol::@8
@end: scope:[]  from @begin

Constant (byte*~) initscreen::$0 (word) 2024
Constant (byte*) render::colline#0 (word) 55296
Constant (byte[256]) XPOS#19 (word) 4096
Constant (byte[256]) YPOS#19 (word) 4352
Constant (byte[256]) COLS#16 (word) 4608
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@8
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← * (word) 4096
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((word) 4096) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (word) 4096
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (word) 4352
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((word) 4352) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (word) 4352
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((word) 4096) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (word) 4097
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((word) 4097) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (word) 4097
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((word) 4352) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (word) 4354
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((word) 4354) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (word) 4354
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((word) 4097) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (word) 4355
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((word) 4355) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (word) 4355
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((word) 4354) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((word) 4355) ← (byte) 25
  (byte~) animate::$25 ← * (word) 4099
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((word) 4099) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (word) 4099
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (word) 4099
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((word) 4099) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#1 main::@4/(byte) numpoints#1 main::@5/(byte) numpoints#1 main::@6/(byte) numpoints#1 main::@7/(byte) numpoints#1 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#1 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(word) 1024 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (byte) 230
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(word) 2024) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte) numpoints#35 ← phi( render/(byte) numpoints#1 )
  (byte*) render::colline#2 ← phi( render/(word) 55296 render::@3/(byte*) render::colline#1 )
  (byte) render::y#2 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  (byte) findcol::return#0 ← phi( findcol::@9/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#35) goto findcol::@1
  to:findcol::@return
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12
  to:findcol::@8
@end: scope:[]  from @begin

Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#2
Not aliassing across scopes: render::col#0 findcol::return#0
Alias (byte) numpoints#1 = (byte) numpoints#35 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@8
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← * (word) 4096
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((word) 4096) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (word) 4096
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (word) 4352
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((word) 4352) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (word) 4352
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@7: scope:[animate]  from animate
  *((word) 4096) ← (byte) 0
  to:animate::@1
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (word) 4097
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((word) 4097) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (word) 4097
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@8: scope:[animate]  from animate::@1
  *((word) 4352) ← (byte) 0
  to:animate::@2
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (word) 4354
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((word) 4354) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (word) 4354
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@9: scope:[animate]  from animate::@2
  *((word) 4097) ← (byte) 40
  to:animate::@3
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (word) 4355
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((word) 4355) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (word) 4355
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@10: scope:[animate]  from animate::@3
  *((word) 4354) ← (byte) 0
  to:animate::@4
animate::@11: scope:[animate]  from animate::@4
  *((word) 4355) ← (byte) 25
  (byte~) animate::$25 ← * (word) 4099
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((word) 4099) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (word) 4099
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (word) 4099
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((word) 4099) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#1 main::@4/(byte) numpoints#1 main::@5/(byte) numpoints#1 main::@6/(byte) numpoints#1 main::@7/(byte) numpoints#1 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#1 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return
initscreen: scope:[initscreen]  from main::@8
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  (byte*) initscreen::screen#2 ← phi( initscreen/(word) 1024 initscreen::@1/(byte*) initscreen::screen#1 )
  *((byte*) initscreen::screen#2) ← (byte) 230
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(word) 2024) goto initscreen::@1
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  (byte*) render::colline#2 ← phi( render/(word) 55296 render::@3/(byte*) render::colline#1 )
  (byte) render::y#2 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@2
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@1
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@8
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@8/(byte) findcol::mindiff#11 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@8/(byte) findcol::i#1 )
  (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  (byte) findcol::return#0 ← phi( findcol::@9/(byte) 0 findcol::@8/(byte) findcol::mincol#2 )
  return 
  to:@return
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  to:findcol::@5
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  to:findcol::@7
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@8
  to:findcol::@16
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@7
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@7/(byte) findcol::mindiff#10 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@7/(byte) findcol::mincol#11 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@1
  to:findcol::@return
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12
  to:findcol::@8
@end: scope:[]  from @begin

Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Multiple usages for variable. Not optimizing sub-constant (byte) findcol::i#12
Not aliassing across scopes: findcol::x#0 render::x#2
Not aliassing across scopes: findcol::y#0 render::y#2
Not aliassing across scopes: render::col#0 findcol::return#0
FINAL SYMBOL TABLE
(label) @begin
(label) @end
(byte*) COLORS
(byte[256]) COLS
(byte) FILL
(byte*) SCREEN
(byte[256]) XPOS
(byte[256]) YPOS
(void()) addpoint((byte) addpoint::x , (byte) addpoint::y , (byte) addpoint::c)
(label) addpoint::@return
(byte) addpoint::c
(byte) addpoint::c#6
(byte) addpoint::x
(byte) addpoint::x#6
(byte) addpoint::y
(byte) addpoint::y#6
(void()) animate()
(byte~) animate::$0
(byte~) animate::$1
(byte~) animate::$10
(byte~) animate::$11
(byte~) animate::$12
(byte~) animate::$15
(byte~) animate::$16
(byte~) animate::$17
(byte~) animate::$2
(byte~) animate::$20
(byte~) animate::$21
(byte~) animate::$22
(byte~) animate::$25
(byte~) animate::$26
(byte~) animate::$27
(byte~) animate::$30
(byte~) animate::$31
(byte~) animate::$5
(byte~) animate::$6
(byte~) animate::$7
(label) animate::@1
(label) animate::@10
(label) animate::@11
(label) animate::@12
(label) animate::@2
(label) animate::@3
(label) animate::@4
(label) animate::@7
(label) animate::@8
(label) animate::@9
(label) animate::@return
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$12
(byte~) findcol::$14
(label) findcol::@1
(label) findcol::@12
(label) findcol::@14
(label) findcol::@16
(label) findcol::@2
(label) findcol::@4
(label) findcol::@5
(label) findcol::@6
(label) findcol::@7
(label) findcol::@8
(label) findcol::@9
(label) findcol::@return
(byte) findcol::diff
(byte) findcol::diff#0
(byte) findcol::diff#1
(byte) findcol::diff#2
(byte) findcol::diff#3
(byte) findcol::diff#4
(byte) findcol::diff#6
(byte) findcol::i
(byte) findcol::i#1
(byte) findcol::i#12
(byte) findcol::mincol
(byte) findcol::mincol#1
(byte) findcol::mincol#11
(byte) findcol::mincol#2
(byte) findcol::mindiff
(byte) findcol::mindiff#10
(byte) findcol::mindiff#11
(byte) findcol::return
(byte) findcol::return#0
(byte) findcol::x
(byte) findcol::x#0
(byte) findcol::xp
(byte) findcol::xp#0
(byte) findcol::y
(byte) findcol::y#0
(byte) findcol::yp
(byte) findcol::yp#0
(void()) initscreen()
(label) initscreen::@1
(label) initscreen::@return
(byte*) initscreen::screen
(byte*) initscreen::screen#1
(byte*) initscreen::screen#2
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@return
(byte) numpoints
(byte) numpoints#1
(byte) numpoints#19
(void()) render()
(label) render::@1
(label) render::@2
(label) render::@3
(label) render::@5
(label) render::@return
(byte) render::col
(byte) render::col#0
(byte*) render::colline
(byte*) render::colline#1
(byte*) render::colline#2
(byte) render::x
(byte) render::x#1
(byte) render::x#2
(byte) render::y
(byte) render::y#1
(byte) render::y#2

Block Sequence Planned @begin @end main main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@1 main::@10 main::@11 main::@return animate animate::@7 animate::@1 animate::@8 animate::@2 animate::@9 animate::@3 animate::@10 animate::@4 animate::@11 animate::@12 animate::@return render render::@1 render::@2 render::@5 render::@3 render::@return findcol findcol::@1 findcol::@9 findcol::@return findcol::@2 findcol::@12 findcol::@5 findcol::@14 findcol::@7 findcol::@16 findcol::@8 findcol::@6 findcol::@4 initscreen initscreen::@1 initscreen::@return addpoint addpoint::@return 
Added new block during phi lifting render::@6(between render::@3 and render::@1)
Added new block during phi lifting render::@7(between render::@5 and render::@2)
Added new block during phi lifting findcol::@19(between findcol::@8 and findcol::@1)
Added new block during phi lifting findcol::@20(between findcol::@8 and findcol::@return)
Added new block during phi lifting findcol::@21(between findcol::@7 and findcol::@8)
Added new block during phi lifting initscreen::@3(between initscreen::@1 and initscreen::@1)
Block Sequence Planned @begin @end main main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@1 main::@10 main::@11 main::@return animate animate::@7 animate::@1 animate::@8 animate::@2 animate::@9 animate::@3 animate::@10 animate::@4 animate::@11 animate::@12 animate::@return render render::@1 render::@2 render::@5 render::@3 render::@return render::@6 render::@7 findcol findcol::@1 findcol::@9 findcol::@return findcol::@2 findcol::@12 findcol::@5 findcol::@14 findcol::@7 findcol::@16 findcol::@8 findcol::@20 findcol::@19 findcol::@21 findcol::@6 findcol::@4 initscreen initscreen::@1 initscreen::@return initscreen::@3 addpoint addpoint::@return 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  call main param-assignment
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  call addpoint param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte~) numpoints#44 ← (byte) numpoints#1
  call addpoint param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte~) numpoints#45 ← (byte) numpoints#1
  call addpoint param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte~) numpoints#46 ← (byte) numpoints#1
  call addpoint param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte~) numpoints#47 ← (byte) numpoints#1
  call addpoint param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte~) numpoints#48 ← (byte) numpoints#1
  call addpoint param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  call initscreen param-assignment
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@8
  call render param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@1
  call animate param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
animate: scope:[animate]  from main::@10
  (byte~) animate::$0 ← * (word) 4096
  (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1
  *((word) 4096) ← (byte~) animate::$1
  (byte~) animate::$2 ← * (word) 4096
  if((byte~) animate::$2!=(byte) 40) goto animate::@1
  to:animate::@7
animate::@7: scope:[animate]  from animate
  *((word) 4096) ← (byte) 0
  to:animate::@1
animate::@1: scope:[animate]  from animate animate::@7
  (byte~) animate::$5 ← * (word) 4352
  (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1
  *((word) 4352) ← (byte~) animate::$6
  (byte~) animate::$7 ← * (word) 4352
  if((byte~) animate::$7!=(byte) 25) goto animate::@2
  to:animate::@8
animate::@8: scope:[animate]  from animate::@1
  *((word) 4352) ← (byte) 0
  to:animate::@2
animate::@2: scope:[animate]  from animate::@1 animate::@8
  (byte~) animate::$10 ← * (word) 4097
  (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1
  *((word) 4097) ← (byte~) animate::$11
  (byte~) animate::$12 ← * (word) 4097
  if((byte~) animate::$12!=(byte) 255) goto animate::@3
  to:animate::@9
animate::@9: scope:[animate]  from animate::@2
  *((word) 4097) ← (byte) 40
  to:animate::@3
animate::@3: scope:[animate]  from animate::@2 animate::@9
  (byte~) animate::$15 ← * (word) 4354
  (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1
  *((word) 4354) ← (byte~) animate::$16
  (byte~) animate::$17 ← * (word) 4354
  if((byte~) animate::$17!=(byte) 25) goto animate::@4
  to:animate::@10
animate::@10: scope:[animate]  from animate::@3
  *((word) 4354) ← (byte) 0
  to:animate::@4
animate::@4: scope:[animate]  from animate::@10 animate::@3
  (byte~) animate::$20 ← * (word) 4355
  (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1
  *((word) 4355) ← (byte~) animate::$21
  (byte~) animate::$22 ← * (word) 4355
  if((byte~) animate::$22!=(byte) 255) goto animate::@return
  to:animate::@11
animate::@11: scope:[animate]  from animate::@4
  *((word) 4355) ← (byte) 25
  (byte~) animate::$25 ← * (word) 4099
  (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7
  *((word) 4099) ← (byte~) animate::$26
  (byte~) animate::$27 ← * (word) 4099
  if((byte~) animate::$27<(byte) 40) goto animate::@return
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  (byte~) animate::$30 ← * (word) 4099
  (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40
  *((word) 4099) ← (byte~) animate::$31
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  return 
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@6
  (byte*) render::colline#2 ← phi( render/(word) 55296 render::@6/(byte*~) render::colline#6 )
  (byte) render::y#2 ← phi( render/(byte) 0 render::@6/(byte~) render::y#6 )
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@7
  (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@7/(byte~) render::x#4 )
  (byte) findcol::x#0 ← (byte) render::x#2
  (byte) findcol::y#0 ← (byte) render::y#2
  call findcol param-assignment
  to:render::@5
render::@5: scope:[render]  from render::@2
  (byte) render::col#0 ← (byte) findcol::return#0
  *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0
  (byte) render::x#1 ← ++ (byte) render::x#2
  if((byte) render::x#1!=(byte) 40) goto render::@7
  to:render::@3
render::@3: scope:[render]  from render::@5
  (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40
  (byte) render::y#1 ← ++ (byte) render::y#2
  if((byte) render::y#1!=(byte) 25) goto render::@6
  to:render::@return
render::@return: scope:[render]  from render::@3
  return 
  to:@return
render::@6: scope:[render]  from render::@3
  (byte~) render::y#6 ← (byte) render::y#1
  (byte*~) render::colline#6 ← (byte*) render::colline#1
  to:render::@1
render::@7: scope:[render]  from render::@5
  (byte~) render::x#4 ← (byte) render::x#1
  to:render::@2
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@19
  (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@19/(byte~) findcol::mincol#14 )
  (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@19/(byte~) findcol::mindiff#13 )
  (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@19/(byte~) findcol::i#14 )
  (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12
  (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12
  if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2
  to:findcol::@9
findcol::@9: scope:[findcol]  from findcol::@1
  if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@20 findcol::@9
  (byte) findcol::return#0 ← phi( findcol::@9/(byte) 0 findcol::@20/(byte~) findcol::mincol#15 )
  return 
  to:@return
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4
  to:findcol::@12
findcol::@12: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0
  (byte~) findcol::diff#9 ← (byte) findcol::diff#1
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  (byte) findcol::diff#4 ← phi( findcol::@12/(byte~) findcol::diff#9 findcol::@4/(byte~) findcol::diff#10 )
  if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6
  to:findcol::@14
findcol::@14: scope:[findcol]  from findcol::@5
  (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0
  (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12
  (byte~) findcol::diff#11 ← (byte) findcol::diff#3
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  (byte) findcol::diff#6 ← phi( findcol::@14/(byte~) findcol::diff#11 findcol::@6/(byte~) findcol::diff#12 )
  if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21
  to:findcol::@16
findcol::@16: scope:[findcol]  from findcol::@7
  (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12
  (byte~) findcol::mincol#16 ← (byte) findcol::mincol#1
  (byte~) findcol::diff#13 ← (byte) findcol::diff#6
  to:findcol::@8
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@21
  (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte~) findcol::diff#13 findcol::@21/(byte~) findcol::mindiff#14 )
  (byte) findcol::mincol#2 ← phi( findcol::@16/(byte~) findcol::mincol#16 findcol::@21/(byte~) findcol::mincol#17 )
  (byte) findcol::i#1 ← ++ (byte) findcol::i#12
  if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@19
  to:findcol::@20
findcol::@20: scope:[findcol]  from findcol::@8
  (byte~) findcol::mincol#15 ← (byte) findcol::mincol#2
  to:findcol::@return
findcol::@19: scope:[findcol]  from findcol::@8
  (byte~) findcol::i#14 ← (byte) findcol::i#1
  (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11
  (byte~) findcol::mincol#14 ← (byte) findcol::mincol#2
  to:findcol::@1
findcol::@21: scope:[findcol]  from findcol::@7
  (byte~) findcol::mincol#17 ← (byte) findcol::mincol#11
  (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10
  to:findcol::@8
findcol::@6: scope:[findcol]  from findcol::@5
  (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0
  (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14
  (byte~) findcol::diff#12 ← (byte) findcol::diff#2
  to:findcol::@7
findcol::@4: scope:[findcol]  from findcol::@2
  (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0
  (byte~) findcol::diff#10 ← (byte) findcol::diff#0
  to:findcol::@5
initscreen: scope:[initscreen]  from main::@8
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@3
  (byte*) initscreen::screen#2 ← phi( initscreen/(word) 1024 initscreen::@3/(byte*~) initscreen::screen#3 )
  *((byte*) initscreen::screen#2) ← (byte) 230
  (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2
  if((byte*) initscreen::screen#1<(word) 2024) goto initscreen::@3
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  return 
  to:@return
initscreen::@3: scope:[initscreen]  from initscreen::@1
  (byte*~) initscreen::screen#3 ← (byte*) initscreen::screen#1
  to:initscreen::@1
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 )
  (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 )
  (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte~) numpoints#44 main::@4/(byte~) numpoints#45 main::@5/(byte~) numpoints#46 main::@6/(byte~) numpoints#47 main::@7/(byte~) numpoints#48 )
  (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 )
  *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6
  *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6
  *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6
  (byte) numpoints#1 ← ++ (byte) numpoints#19
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  return 
  to:@return

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::y#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::y#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::y#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::y#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::y#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::y#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::y#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [60] call findcol param-assignment
Propagated render::y#2 through call [60] call findcol param-assignment
Propagated render::colline#2 through call [60] call findcol param-assignment
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  [1] call addpoint param-assignment [ numpoints#1 ]
  to:main::@3
main::@3: scope:[main]  from main
  [2] (byte~) numpoints#44 ← (byte) numpoints#1 [ numpoints#44 ]
  [3] call addpoint param-assignment [ numpoints#1 ]
  to:main::@4
main::@4: scope:[main]  from main::@3
  [4] (byte~) numpoints#45 ← (byte) numpoints#1 [ numpoints#45 ]
  [5] call addpoint param-assignment [ numpoints#1 ]
  to:main::@5
main::@5: scope:[main]  from main::@4
  [6] (byte~) numpoints#46 ← (byte) numpoints#1 [ numpoints#46 ]
  [7] call addpoint param-assignment [ numpoints#1 ]
  to:main::@6
main::@6: scope:[main]  from main::@5
  [8] (byte~) numpoints#47 ← (byte) numpoints#1 [ numpoints#47 ]
  [9] call addpoint param-assignment [ numpoints#1 ]
  to:main::@7
main::@7: scope:[main]  from main::@6
  [10] (byte~) numpoints#48 ← (byte) numpoints#1 [ numpoints#48 ]
  [11] call addpoint param-assignment [ ]
  to:main::@8
main::@8: scope:[main]  from main::@7
  [12] call initscreen param-assignment [ ]
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@8
  [13] call render param-assignment [ ]
  to:main::@10
main::@10: scope:[main]  from main::@1
  [14] call animate param-assignment [ ]
  to:main::@11
main::@11: scope:[main]  from main::@10
  [15] if(true) goto main::@1 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@11
  [16] return  [ ]
  to:@return
animate: scope:[animate]  from main::@10
  [17] (byte~) animate::$0 ← * (word) 4096 [ animate::$0 ]
  [18] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ]
  [19] *((word) 4096) ← (byte~) animate::$1 [ ]
  [20] (byte~) animate::$2 ← * (word) 4096 [ animate::$2 ]
  [21] if((byte~) animate::$2!=(byte) 40) goto animate::@1 [ ]
  to:animate::@7
animate::@7: scope:[animate]  from animate
  [22] *((word) 4096) ← (byte) 0 [ ]
  to:animate::@1
animate::@1: scope:[animate]  from animate animate::@7
  [23] (byte~) animate::$5 ← * (word) 4352 [ animate::$5 ]
  [24] (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1 [ animate::$6 ]
  [25] *((word) 4352) ← (byte~) animate::$6 [ ]
  [26] (byte~) animate::$7 ← * (word) 4352 [ animate::$7 ]
  [27] if((byte~) animate::$7!=(byte) 25) goto animate::@2 [ ]
  to:animate::@8
animate::@8: scope:[animate]  from animate::@1
  [28] *((word) 4352) ← (byte) 0 [ ]
  to:animate::@2
animate::@2: scope:[animate]  from animate::@1 animate::@8
  [29] (byte~) animate::$10 ← * (word) 4097 [ animate::$10 ]
  [30] (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1 [ animate::$11 ]
  [31] *((word) 4097) ← (byte~) animate::$11 [ ]
  [32] (byte~) animate::$12 ← * (word) 4097 [ animate::$12 ]
  [33] if((byte~) animate::$12!=(byte) 255) goto animate::@3 [ ]
  to:animate::@9
animate::@9: scope:[animate]  from animate::@2
  [34] *((word) 4097) ← (byte) 40 [ ]
  to:animate::@3
animate::@3: scope:[animate]  from animate::@2 animate::@9
  [35] (byte~) animate::$15 ← * (word) 4354 [ animate::$15 ]
  [36] (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1 [ animate::$16 ]
  [37] *((word) 4354) ← (byte~) animate::$16 [ ]
  [38] (byte~) animate::$17 ← * (word) 4354 [ animate::$17 ]
  [39] if((byte~) animate::$17!=(byte) 25) goto animate::@4 [ ]
  to:animate::@10
animate::@10: scope:[animate]  from animate::@3
  [40] *((word) 4354) ← (byte) 0 [ ]
  to:animate::@4
animate::@4: scope:[animate]  from animate::@10 animate::@3
  [41] (byte~) animate::$20 ← * (word) 4355 [ animate::$20 ]
  [42] (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1 [ animate::$21 ]
  [43] *((word) 4355) ← (byte~) animate::$21 [ ]
  [44] (byte~) animate::$22 ← * (word) 4355 [ animate::$22 ]
  [45] if((byte~) animate::$22!=(byte) 255) goto animate::@return [ ]
  to:animate::@11
animate::@11: scope:[animate]  from animate::@4
  [46] *((word) 4355) ← (byte) 25 [ ]
  [47] (byte~) animate::$25 ← * (word) 4099 [ animate::$25 ]
  [48] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ]
  [49] *((word) 4099) ← (byte~) animate::$26 [ ]
  [50] (byte~) animate::$27 ← * (word) 4099 [ animate::$27 ]
  [51] if((byte~) animate::$27<(byte) 40) goto animate::@return [ ]
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  [52] (byte~) animate::$30 ← * (word) 4099 [ animate::$30 ]
  [53] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ]
  [54] *((word) 4099) ← (byte~) animate::$31 [ ]
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  [55] return  [ ]
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@6
  [56] (byte*) render::colline#2 ← phi( render/(word) 55296 render::@6/(byte*~) render::colline#6 ) [ render::y#2 render::colline#2 ]
  [56] (byte) render::y#2 ← phi( render/(byte) 0 render::@6/(byte~) render::y#6 ) [ render::y#2 render::colline#2 ]
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@7
  [57] (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@7/(byte~) render::x#4 ) [ render::x#2 render::y#2 render::colline#2 ]
  [58] (byte) findcol::x#0 ← (byte) render::x#2 [ render::x#2 render::y#2 render::colline#2 ]
  [59] (byte) findcol::y#0 ← (byte) render::y#2 [ render::x#2 render::y#2 render::colline#2 ]
  [60] call findcol param-assignment [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  to:render::@5
render::@5: scope:[render]  from render::@2
  [61] (byte) render::col#0 ← (byte) findcol::return#0 [ render::x#2 render::y#2 render::colline#2 render::col#0 ]
  [62] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::x#2 render::y#2 render::colline#2 ]
  [63] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::y#2 render::colline#2 render::x#1 ]
  [64] if((byte) render::x#1!=(byte) 40) goto render::@7 [ render::y#2 render::colline#2 render::x#1 ]
  to:render::@3
render::@3: scope:[render]  from render::@5
  [65] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::y#2 render::colline#1 ]
  [66] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 ]
  [67] if((byte) render::y#1!=(byte) 25) goto render::@6 [ render::y#1 render::colline#1 ]
  to:render::@return
render::@return: scope:[render]  from render::@3
  [68] return  [ ]
  to:@return
render::@6: scope:[render]  from render::@3
  [69] (byte~) render::y#6 ← (byte) render::y#1 [ render::y#6 render::colline#1 ]
  [70] (byte*~) render::colline#6 ← (byte*) render::colline#1 [ render::y#6 render::colline#6 ]
  to:render::@1
render::@7: scope:[render]  from render::@5
  [71] (byte~) render::x#4 ← (byte) render::x#1 [ render::x#4 render::y#2 render::colline#2 ]
  to:render::@2
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@19
  [72] (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@19/(byte~) findcol::mincol#14 ) [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 ]
  [72] (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@19/(byte~) findcol::mindiff#13 ) [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 ]
  [72] (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@19/(byte~) findcol::i#14 ) [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 ]
  [73] (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 ]
  [74] (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 ]
  [75] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 ]
  to:findcol::@9
findcol::@9: scope:[findcol]  from findcol::@1
  [76] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 ]
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@20 findcol::@9
  [77] (byte) findcol::return#0 ← phi( findcol::@9/(byte) 0 findcol::@20/(byte~) findcol::mincol#15 ) [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  [78] return  [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  to:@return
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  [79] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 ]
  to:findcol::@12
findcol::@12: scope:[findcol]  from findcol::@2
  [80] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#1 findcol::mindiff#10 findcol::mincol#11 ]
  [81] (byte~) findcol::diff#9 ← (byte) findcol::diff#1 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#9 findcol::mindiff#10 findcol::mincol#11 ]
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  [82] (byte) findcol::diff#4 ← phi( findcol::@12/(byte~) findcol::diff#9 findcol::@4/(byte~) findcol::diff#10 ) [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 ]
  [83] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 ]
  to:findcol::@14
findcol::@14: scope:[findcol]  from findcol::@5
  [84] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::$12 findcol::mindiff#10 findcol::mincol#11 ]
  [85] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#3 findcol::mindiff#10 findcol::mincol#11 ]
  [86] (byte~) findcol::diff#11 ← (byte) findcol::diff#3 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#11 findcol::mindiff#10 findcol::mincol#11 ]
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  [87] (byte) findcol::diff#6 ← phi( findcol::@14/(byte~) findcol::diff#11 findcol::@6/(byte~) findcol::diff#12 ) [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 ]
  [88] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 ]
  to:findcol::@16
findcol::@16: scope:[findcol]  from findcol::@7
  [89] (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mincol#1 ]
  [90] (byte~) findcol::mincol#16 ← (byte) findcol::mincol#1 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mincol#16 ]
  [91] (byte~) findcol::diff#13 ← (byte) findcol::diff#6 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#16 findcol::diff#13 ]
  to:findcol::@8
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@21
  [92] (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte~) findcol::diff#13 findcol::@21/(byte~) findcol::mindiff#14 ) [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#2 findcol::mindiff#11 ]
  [92] (byte) findcol::mincol#2 ← phi( findcol::@16/(byte~) findcol::mincol#16 findcol::@21/(byte~) findcol::mincol#17 ) [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#2 findcol::mindiff#11 ]
  [93] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ]
  [94] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@19 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::x#0 findcol::y#0 findcol::i#1 findcol::mincol#2 findcol::mindiff#11 ]
  to:findcol::@20
findcol::@20: scope:[findcol]  from findcol::@8
  [95] (byte~) findcol::mincol#15 ← (byte) findcol::mincol#2 [ render::x#2 render::y#2 render::colline#2 findcol::mincol#15 ]
  to:findcol::@return
findcol::@19: scope:[findcol]  from findcol::@8
  [96] (byte~) findcol::i#14 ← (byte) findcol::i#1 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#14 findcol::x#0 findcol::y#0 findcol::mincol#2 findcol::mindiff#11 ]
  [97] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#14 findcol::mindiff#13 findcol::x#0 findcol::y#0 findcol::mincol#2 ]
  [98] (byte~) findcol::mincol#14 ← (byte) findcol::mincol#2 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#14 findcol::mindiff#13 findcol::mincol#14 findcol::x#0 findcol::y#0 ]
  to:findcol::@1
findcol::@21: scope:[findcol]  from findcol::@7
  [99] (byte~) findcol::mincol#17 ← (byte) findcol::mincol#11 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#17 ]
  [100] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#17 findcol::mindiff#14 ]
  to:findcol::@8
findcol::@6: scope:[findcol]  from findcol::@5
  [101] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 findcol::$14 ]
  [102] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 findcol::diff#2 ]
  [103] (byte~) findcol::diff#12 ← (byte) findcol::diff#2 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#12 findcol::mindiff#10 findcol::mincol#11 ]
  to:findcol::@7
findcol::@4: scope:[findcol]  from findcol::@2
  [104] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 findcol::diff#0 ]
  [105] (byte~) findcol::diff#10 ← (byte) findcol::diff#0 [ numpoints#1 render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#10 findcol::mindiff#10 findcol::mincol#11 ]
  to:findcol::@5
initscreen: scope:[initscreen]  from main::@8
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@3
  [106] (byte*) initscreen::screen#2 ← phi( initscreen/(word) 1024 initscreen::@3/(byte*~) initscreen::screen#3 ) [ initscreen::screen#2 ]
  [107] *((byte*) initscreen::screen#2) ← (byte) 230 [ initscreen::screen#2 ]
  [108] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ]
  [109] if((byte*) initscreen::screen#1<(word) 2024) goto initscreen::@3 [ initscreen::screen#1 ]
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  [110] return  [ ]
  to:@return
initscreen::@3: scope:[initscreen]  from initscreen::@1
  [111] (byte*~) initscreen::screen#3 ← (byte*) initscreen::screen#1 [ initscreen::screen#3 ]
  to:initscreen::@1
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  [112] (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [112] (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [112] (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte~) numpoints#44 main::@4/(byte~) numpoints#45 main::@5/(byte~) numpoints#46 main::@6/(byte~) numpoints#47 main::@7/(byte~) numpoints#48 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [112] (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [113] *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ]
  [114] *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ]
  [115] *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ]
  [116] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ numpoints#1 ]
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  [117] return  [ numpoints#1 ]
  to:@return

Created 16 initial phi equivalence classes
Coalesced [2] numpoints#44 ← numpoints#1
Coalesced (already) [4] numpoints#45 ← numpoints#1
Coalesced (already) [6] numpoints#46 ← numpoints#1
Coalesced (already) [8] numpoints#47 ← numpoints#1
Coalesced (already) [10] numpoints#48 ← numpoints#1
Coalesced [69] render::y#6 ← render::y#1
Coalesced [70] render::colline#6 ← render::colline#1
Coalesced [71] render::x#4 ← render::x#1
Coalesced [81] findcol::diff#9 ← findcol::diff#1
Coalesced [86] findcol::diff#11 ← findcol::diff#3
Coalesced [90] findcol::mincol#16 ← findcol::mincol#1
Coalesced [91] findcol::diff#13 ← findcol::diff#6
Coalesced [95] findcol::mincol#15 ← findcol::mincol#2
Coalesced [96] findcol::i#14 ← findcol::i#1
Not coalescing [97] findcol::mindiff#13 ← findcol::mindiff#11
Coalesced [98] findcol::mincol#14 ← findcol::mincol#2
Coalesced (already) [99] findcol::mincol#17 ← findcol::mincol#11
Not coalescing [100] findcol::mindiff#14 ← findcol::mindiff#10
Coalesced [103] findcol::diff#12 ← findcol::diff#2
Coalesced [105] findcol::diff#10 ← findcol::diff#0
Coalesced [111] initscreen::screen#3 ← initscreen::screen#1
Coalesced down to 13 phi equivalence classes
Culled Empty Block (label) render::@6
Culled Empty Block (label) render::@7
Culled Empty Block (label) findcol::@20
Culled Empty Block (label) initscreen::@3
Block Sequence Planned @begin @end main main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@1 main::@10 main::@11 main::@return animate animate::@7 animate::@1 animate::@8 animate::@2 animate::@9 animate::@3 animate::@10 animate::@4 animate::@11 animate::@12 animate::@return render render::@1 render::@2 render::@5 render::@3 render::@return findcol findcol::@1 findcol::@9 findcol::@return findcol::@2 findcol::@12 findcol::@5 findcol::@14 findcol::@7 findcol::@16 findcol::@8 findcol::@19 findcol::@21 findcol::@6 findcol::@4 initscreen initscreen::@1 initscreen::@return addpoint addpoint::@return 
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagated render::x#2 through call [55] call findcol param-assignment
Propagated render::colline#2 through call [55] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [55] call findcol param-assignment
Propagated render::colline#2 through call [55] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [55] call findcol param-assignment
Propagated render::colline#2 through call [55] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [55] call findcol param-assignment
Propagated render::colline#2 through call [55] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [55] call findcol param-assignment
Propagated render::y#2 through call [55] call findcol param-assignment
Propagated render::colline#2 through call [55] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [55] call findcol param-assignment
Propagated render::y#2 through call [55] call findcol param-assignment
Propagated render::colline#2 through call [55] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [55] call findcol param-assignment
Propagated render::y#2 through call [55] call findcol param-assignment
Propagated render::colline#2 through call [55] call findcol param-assignment
Propagating live ranges...
Propagated render::x#2 through call [55] call findcol param-assignment
Propagated render::y#2 through call [55] call findcol param-assignment
Propagated render::colline#2 through call [55] call findcol param-assignment
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  [1] call addpoint param-assignment [ ]
  to:main::@3
main::@3: scope:[main]  from main
  [2] call addpoint param-assignment [ ]
  to:main::@4
main::@4: scope:[main]  from main::@3
  [3] call addpoint param-assignment [ ]
  to:main::@5
main::@5: scope:[main]  from main::@4
  [4] call addpoint param-assignment [ ]
  to:main::@6
main::@6: scope:[main]  from main::@5
  [5] call addpoint param-assignment [ ]
  to:main::@7
main::@7: scope:[main]  from main::@6
  [6] call addpoint param-assignment [ ]
  to:main::@8
main::@8: scope:[main]  from main::@7
  [7] call initscreen param-assignment [ ]
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@8
  [8] call render param-assignment [ ]
  to:main::@10
main::@10: scope:[main]  from main::@1
  [9] call animate param-assignment [ ]
  to:main::@11
main::@11: scope:[main]  from main::@10
  [10] if(true) goto main::@1 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@11
  [11] return  [ ]
  to:@return
animate: scope:[animate]  from main::@10
  [12] (byte~) animate::$0 ← * (word) 4096 [ animate::$0 ]
  [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ]
  [14] *((word) 4096) ← (byte~) animate::$1 [ ]
  [15] (byte~) animate::$2 ← * (word) 4096 [ animate::$2 ]
  [16] if((byte~) animate::$2!=(byte) 40) goto animate::@1 [ ]
  to:animate::@7
animate::@7: scope:[animate]  from animate
  [17] *((word) 4096) ← (byte) 0 [ ]
  to:animate::@1
animate::@1: scope:[animate]  from animate animate::@7
  [18] (byte~) animate::$5 ← * (word) 4352 [ animate::$5 ]
  [19] (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1 [ animate::$6 ]
  [20] *((word) 4352) ← (byte~) animate::$6 [ ]
  [21] (byte~) animate::$7 ← * (word) 4352 [ animate::$7 ]
  [22] if((byte~) animate::$7!=(byte) 25) goto animate::@2 [ ]
  to:animate::@8
animate::@8: scope:[animate]  from animate::@1
  [23] *((word) 4352) ← (byte) 0 [ ]
  to:animate::@2
animate::@2: scope:[animate]  from animate::@1 animate::@8
  [24] (byte~) animate::$10 ← * (word) 4097 [ animate::$10 ]
  [25] (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1 [ animate::$11 ]
  [26] *((word) 4097) ← (byte~) animate::$11 [ ]
  [27] (byte~) animate::$12 ← * (word) 4097 [ animate::$12 ]
  [28] if((byte~) animate::$12!=(byte) 255) goto animate::@3 [ ]
  to:animate::@9
animate::@9: scope:[animate]  from animate::@2
  [29] *((word) 4097) ← (byte) 40 [ ]
  to:animate::@3
animate::@3: scope:[animate]  from animate::@2 animate::@9
  [30] (byte~) animate::$15 ← * (word) 4354 [ animate::$15 ]
  [31] (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1 [ animate::$16 ]
  [32] *((word) 4354) ← (byte~) animate::$16 [ ]
  [33] (byte~) animate::$17 ← * (word) 4354 [ animate::$17 ]
  [34] if((byte~) animate::$17!=(byte) 25) goto animate::@4 [ ]
  to:animate::@10
animate::@10: scope:[animate]  from animate::@3
  [35] *((word) 4354) ← (byte) 0 [ ]
  to:animate::@4
animate::@4: scope:[animate]  from animate::@10 animate::@3
  [36] (byte~) animate::$20 ← * (word) 4355 [ animate::$20 ]
  [37] (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1 [ animate::$21 ]
  [38] *((word) 4355) ← (byte~) animate::$21 [ ]
  [39] (byte~) animate::$22 ← * (word) 4355 [ animate::$22 ]
  [40] if((byte~) animate::$22!=(byte) 255) goto animate::@return [ ]
  to:animate::@11
animate::@11: scope:[animate]  from animate::@4
  [41] *((word) 4355) ← (byte) 25 [ ]
  [42] (byte~) animate::$25 ← * (word) 4099 [ animate::$25 ]
  [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ]
  [44] *((word) 4099) ← (byte~) animate::$26 [ ]
  [45] (byte~) animate::$27 ← * (word) 4099 [ animate::$27 ]
  [46] if((byte~) animate::$27<(byte) 40) goto animate::@return [ ]
  to:animate::@12
animate::@12: scope:[animate]  from animate::@11
  [47] (byte~) animate::$30 ← * (word) 4099 [ animate::$30 ]
  [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ]
  [49] *((word) 4099) ← (byte~) animate::$31 [ ]
  to:animate::@return
animate::@return: scope:[animate]  from animate::@11 animate::@12 animate::@4
  [50] return  [ ]
  to:@return
render: scope:[render]  from main::@1
  to:render::@1
render::@1: scope:[render]  from render render::@3
  [51] (byte*) render::colline#2 ← phi( render/(word) 55296 render::@3/(byte*) render::colline#1 ) [ render::y#2 render::colline#2 ]
  [51] (byte) render::y#2 ← phi( render/(byte) 0 render::@3/(byte) render::y#1 ) [ render::y#2 render::colline#2 ]
  to:render::@2
render::@2: scope:[render]  from render::@1 render::@5
  [52] (byte) render::x#2 ← phi( render::@1/(byte) 0 render::@5/(byte) render::x#1 ) [ render::x#2 render::y#2 render::colline#2 ]
  [53] (byte) findcol::x#0 ← (byte) render::x#2 [ render::x#2 render::y#2 render::colline#2 ]
  [54] (byte) findcol::y#0 ← (byte) render::y#2 [ render::x#2 render::y#2 render::colline#2 ]
  [55] call findcol param-assignment [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  to:render::@5
render::@5: scope:[render]  from render::@2
  [56] (byte) render::col#0 ← (byte) findcol::return#0 [ render::x#2 render::y#2 render::colline#2 render::col#0 ]
  [57] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::x#2 render::y#2 render::colline#2 ]
  [58] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::x#1 render::y#2 render::colline#2 ]
  [59] if((byte) render::x#1!=(byte) 40) goto render::@2 [ render::x#1 render::y#2 render::colline#2 ]
  to:render::@3
render::@3: scope:[render]  from render::@5
  [60] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::colline#1 render::y#2 ]
  [61] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 ]
  [62] if((byte) render::y#1!=(byte) 25) goto render::@1 [ render::y#1 render::colline#1 ]
  to:render::@return
render::@return: scope:[render]  from render::@3
  [63] return  [ ]
  to:@return
findcol: scope:[findcol]  from render::@2
  to:findcol::@1
findcol::@1: scope:[findcol]  from findcol findcol::@19
  [64] (byte) findcol::mincol#11 ← phi( findcol/(byte) 0 findcol::@19/(byte) findcol::mincol#2 ) [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [64] (byte) findcol::mindiff#10 ← phi( findcol/(byte) 255 findcol::@19/(byte~) findcol::mindiff#13 ) [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [64] (byte) findcol::i#12 ← phi( findcol/(byte) 0 findcol::@19/(byte) findcol::i#1 ) [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [65] (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [66] (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [67] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@9
findcol::@9: scope:[findcol]  from findcol::@1
  [68] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@return
findcol::@return: scope:[findcol]  from findcol::@8 findcol::@9
  [69] (byte) findcol::return#0 ← phi( findcol::@9/(byte) 0 findcol::@8/(byte) findcol::mincol#2 ) [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  [70] return  [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
  to:@return
findcol::@2: scope:[findcol]  from findcol::@1 findcol::@9
  [71] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@12
findcol::@12: scope:[findcol]  from findcol::@2
  [72] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#1 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@5
findcol::@5: scope:[findcol]  from findcol::@12 findcol::@4
  [73] (byte) findcol::diff#4 ← phi( findcol::@12/(byte) findcol::diff#1 findcol::@4/(byte) findcol::diff#0 ) [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [74] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@14
findcol::@14: scope:[findcol]  from findcol::@5
  [75] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::$12 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [76] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#3 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@7
findcol::@7: scope:[findcol]  from findcol::@14 findcol::@6
  [77] (byte) findcol::diff#6 ← phi( findcol::@14/(byte) findcol::diff#3 findcol::@6/(byte) findcol::diff#2 ) [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  [78] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@16
findcol::@16: scope:[findcol]  from findcol::@7
  [79] (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mincol#1 numpoints#1 ]
  to:findcol::@8
findcol::@8: scope:[findcol]  from findcol::@16 findcol::@21
  [80] (byte) findcol::mindiff#11 ← phi( findcol::@16/(byte) findcol::diff#6 findcol::@21/(byte~) findcol::mindiff#14 ) [ render::x#2 render::y#2 render::colline#2 findcol::mincol#2 findcol::i#12 findcol::x#0 findcol::y#0 numpoints#1 findcol::mindiff#11 ]
  [80] (byte) findcol::mincol#2 ← phi( findcol::@16/(byte) findcol::mincol#1 findcol::@21/(byte) findcol::mincol#11 ) [ render::x#2 render::y#2 render::colline#2 findcol::mincol#2 findcol::i#12 findcol::x#0 findcol::y#0 numpoints#1 findcol::mindiff#11 ]
  [81] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 findcol::mindiff#11 ]
  [82] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@19 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 findcol::mindiff#11 ]
  to:findcol::@return
findcol::@19: scope:[findcol]  from findcol::@8
  [83] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 ]
  to:findcol::@1
findcol::@21: scope:[findcol]  from findcol::@7
  [84] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#11 findcol::mindiff#14 numpoints#1 ]
  to:findcol::@8
findcol::@6: scope:[findcol]  from findcol::@5
  [85] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 findcol::$14 ]
  [86] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#2 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@7
findcol::@4: scope:[findcol]  from findcol::@2
  [87] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ]
  to:findcol::@5
initscreen: scope:[initscreen]  from main::@8
  to:initscreen::@1
initscreen::@1: scope:[initscreen]  from initscreen initscreen::@1
  [88] (byte*) initscreen::screen#2 ← phi( initscreen/(word) 1024 initscreen::@1/(byte*) initscreen::screen#1 ) [ initscreen::screen#2 ]
  [89] *((byte*) initscreen::screen#2) ← (byte) 230 [ initscreen::screen#2 ]
  [90] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ]
  [91] if((byte*) initscreen::screen#1<(word) 2024) goto initscreen::@1 [ initscreen::screen#1 ]
  to:initscreen::@return
initscreen::@return: scope:[initscreen]  from initscreen::@1
  [92] return  [ ]
  to:@return
addpoint: scope:[addpoint]  from main main::@3 main::@4 main::@5 main::@6 main::@7
  [93] (byte) addpoint::c#6 ← phi( main/(byte) 1 main::@3/(byte) 2 main::@4/(byte) 3 main::@5/(byte) 4 main::@6/(byte) 5 main::@7/(byte) 7 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [93] (byte) addpoint::y#6 ← phi( main/(byte) 5 main::@3/(byte) 8 main::@4/(byte) 14 main::@5/(byte) 2 main::@6/(byte) 17 main::@7/(byte) 22 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [93] (byte) numpoints#19 ← phi( main/(byte) 0 main::@3/(byte) numpoints#1 main::@4/(byte) numpoints#1 main::@5/(byte) numpoints#1 main::@6/(byte) numpoints#1 main::@7/(byte) numpoints#1 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [93] (byte) addpoint::x#6 ← phi( main/(byte) 5 main::@3/(byte) 15 main::@4/(byte) 6 main::@5/(byte) 34 main::@6/(byte) 21 main::@7/(byte) 31 ) [ numpoints#19 addpoint::x#6 addpoint::y#6 addpoint::c#6 ]
  [94] *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ]
  [95] *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ]
  [96] *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ]
  [97] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ ]
  to:addpoint::@return
addpoint::@return: scope:[addpoint]  from addpoint
  [98] return  [ ]
  to:@return

CALL GRAPH
Calls in [] to 0:main 
Calls in [main] to 1:addpoint 2:addpoint 3:addpoint 4:addpoint 5:addpoint 6:addpoint 7:initscreen 8:render 9:animate 
Calls in [render] to 55:findcol 

DOMINATORS
@begin dominated by  @begin 
@end dominated by  @end @begin 
main dominated by  @begin main 
main::@3 dominated by  @begin main::@3 main 
main::@4 dominated by  @begin main::@4 main::@3 main 
main::@5 dominated by  @begin main::@4 main::@3 main::@5 main 
main::@6 dominated by  @begin main::@4 main::@3 main::@6 main::@5 main 
main::@7 dominated by  @begin main::@4 main::@3 main::@6 main::@5 main::@7 main 
main::@8 dominated by  @begin main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
main::@1 dominated by  @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
main::@10 dominated by  main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
main::@11 dominated by  main::@10 main::@11 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
main::@return dominated by  main::@return main::@10 main::@11 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate dominated by  animate main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@7 dominated by  animate animate::@7 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@1 dominated by  animate animate::@1 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@8 dominated by  animate animate::@1 animate::@8 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@2 dominated by  animate animate::@1 animate::@2 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@9 dominated by  animate animate::@1 animate::@2 animate::@9 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@3 dominated by  animate animate::@3 animate::@1 animate::@2 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@10 dominated by  animate animate::@10 animate::@3 animate::@1 animate::@2 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@4 dominated by  animate animate::@3 animate::@4 animate::@1 animate::@2 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@11 dominated by  animate animate::@11 animate::@3 animate::@4 animate::@1 animate::@2 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@12 dominated by  animate animate::@11 animate::@12 animate::@3 animate::@4 animate::@1 animate::@2 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
animate::@return dominated by  animate animate::@return animate::@3 animate::@4 animate::@1 animate::@2 main::@10 @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
render dominated by  render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
render::@1 dominated by  render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
render::@2 dominated by  render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
render::@5 dominated by  render::@2 render::@5 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
render::@3 dominated by  render::@3 render::@2 render::@5 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
render::@return dominated by  render::@3 render::@2 render::@5 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 render::@return main 
findcol dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
findcol::@1 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@1 main 
findcol::@9 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@1 findcol::@9 main 
findcol::@return dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@1 findcol::@return main 
findcol::@2 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@2 findcol::@1 main 
findcol::@12 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@2 findcol::@1 findcol::@12 main 
findcol::@5 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@5 findcol::@2 findcol::@1 main 
findcol::@14 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@5 findcol::@2 findcol::@1 findcol::@14 main 
findcol::@7 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 findcol::@7 main::@8 findcol::@5 findcol::@2 findcol::@1 main 
findcol::@16 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@7 findcol::@5 findcol::@2 findcol::@1 findcol::@16 main 
findcol::@8 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 findcol::@8 main::@7 main::@8 findcol::@7 findcol::@5 findcol::@2 findcol::@1 main 
findcol::@19 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 findcol::@8 main::@8 findcol::@7 findcol::@5 findcol::@2 findcol::@1 findcol::@19 main 
findcol::@21 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@7 findcol::@5 findcol::@2 findcol::@1 main findcol::@21 
findcol::@6 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@6 findcol::@5 findcol::@2 findcol::@1 main 
findcol::@4 dominated by  findcol render::@2 render::@1 render @begin main::@1 main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 findcol::@4 findcol::@2 findcol::@1 main 
initscreen dominated by  @begin initscreen main::@4 main::@3 main::@6 main::@5 main::@7 main::@8 main 
initscreen::@1 dominated by  @begin main::@4 initscreen main::@3 main::@6 main::@5 main::@7 main::@8 main initscreen::@1 
initscreen::@return dominated by  @begin main::@4 initscreen main::@3 main::@6 main::@5 main::@7 main::@8 initscreen::@return main initscreen::@1 
addpoint dominated by  addpoint @begin main 
addpoint::@return dominated by  addpoint addpoint::@return @begin main 

Found back edge: Loop head: main::@1 tails: main::@11 blocks: null
Found back edge: Loop head: render::@2 tails: render::@5 blocks: null
Found back edge: Loop head: render::@1 tails: render::@3 blocks: null
Found back edge: Loop head: findcol::@1 tails: findcol::@19 blocks: null
Found back edge: Loop head: initscreen::@1 tails: initscreen::@1 blocks: null
Populated: Loop head: main::@1 tails: main::@11 blocks: main::@11 main::@10 main::@1 
Populated: Loop head: render::@2 tails: render::@5 blocks: render::@5 render::@2 
Populated: Loop head: render::@1 tails: render::@3 blocks: render::@3 render::@5 render::@2 render::@1 
Populated: Loop head: findcol::@1 tails: findcol::@19 blocks: findcol::@19 findcol::@8 findcol::@16 findcol::@21 findcol::@7 findcol::@14 findcol::@6 findcol::@5 findcol::@12 findcol::@4 findcol::@2 findcol::@1 findcol::@9 
Populated: Loop head: initscreen::@1 tails: initscreen::@1 blocks: initscreen::@1 
NATURAL LOOPS
Loop head: main::@1 tails: main::@11 blocks: main::@11 main::@10 main::@1 
Loop head: render::@2 tails: render::@5 blocks: render::@5 render::@2 
Loop head: render::@1 tails: render::@3 blocks: render::@3 render::@5 render::@2 render::@1 
Loop head: findcol::@1 tails: findcol::@19 blocks: findcol::@19 findcol::@8 findcol::@16 findcol::@21 findcol::@7 findcol::@14 findcol::@6 findcol::@5 findcol::@12 findcol::@4 findcol::@2 findcol::@1 findcol::@9 
Loop head: initscreen::@1 tails: initscreen::@1 blocks: initscreen::@1 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@11 blocks: main::@11 main::@10 main::@1 
Found 0 loops in scope [addpoint]
Found 1 loops in scope [initscreen]
  Loop head: initscreen::@1 tails: initscreen::@1 blocks: initscreen::@1 
Found 2 loops in scope [render]
  Loop head: render::@2 tails: render::@5 blocks: render::@5 render::@2 
  Loop head: render::@1 tails: render::@3 blocks: render::@3 render::@5 render::@2 render::@1 
Found 0 loops in scope [animate]
Found 1 loops in scope [findcol]
  Loop head: findcol::@1 tails: findcol::@19 blocks: findcol::@19 findcol::@8 findcol::@16 findcol::@21 findcol::@7 findcol::@14 findcol::@6 findcol::@5 findcol::@12 findcol::@4 findcol::@2 findcol::@1 findcol::@9 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@11 blocks: main::@11 main::@10 main::@1  depth: 1
Loop head: render::@2 tails: render::@5 blocks: render::@5 render::@2  depth: 3
Loop head: render::@1 tails: render::@3 blocks: render::@3 render::@5 render::@2 render::@1  depth: 2
Loop head: findcol::@1 tails: findcol::@19 blocks: findcol::@19 findcol::@8 findcol::@16 findcol::@21 findcol::@7 findcol::@14 findcol::@6 findcol::@5 findcol::@12 findcol::@4 findcol::@2 findcol::@1 findcol::@9  depth: 4
Loop head: initscreen::@1 tails: initscreen::@1 blocks: initscreen::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) COLORS
(byte[256]) COLS
(byte) FILL
(byte*) SCREEN
(byte[256]) XPOS
(byte[256]) YPOS
(void()) addpoint((byte) addpoint::x , (byte) addpoint::y , (byte) addpoint::c)
(byte) addpoint::c
(byte) addpoint::c#6 0.6666666666666666
(byte) addpoint::x
(byte) addpoint::x#6 2.0
(byte) addpoint::y
(byte) addpoint::y#6 1.0
(void()) animate()
(byte~) animate::$0 4.0
(byte~) animate::$1 4.0
(byte~) animate::$10 4.0
(byte~) animate::$11 4.0
(byte~) animate::$12 4.0
(byte~) animate::$15 4.0
(byte~) animate::$16 4.0
(byte~) animate::$17 4.0
(byte~) animate::$2 4.0
(byte~) animate::$20 4.0
(byte~) animate::$21 4.0
(byte~) animate::$22 4.0
(byte~) animate::$25 4.0
(byte~) animate::$26 4.0
(byte~) animate::$27 4.0
(byte~) animate::$30 4.0
(byte~) animate::$31 4.0
(byte~) animate::$5 4.0
(byte~) animate::$6 4.0
(byte~) animate::$7 4.0
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$12 20002.0
(byte~) findcol::$14 20002.0
(byte) findcol::diff
(byte) findcol::diff#0 20002.0
(byte) findcol::diff#1 20002.0
(byte) findcol::diff#2 20002.0
(byte) findcol::diff#3 20002.0
(byte) findcol::diff#4 10001.0
(byte) findcol::diff#6 13334.666666666666
(byte) findcol::i
(byte) findcol::i#1 10001.0
(byte) findcol::i#12 2631.842105263158
(byte) findcol::mincol
(byte) findcol::mincol#1 20002.0
(byte) findcol::mincol#11 1176.5882352941176
(byte) findcol::mincol#2 10001.0
(byte) findcol::mindiff
(byte) findcol::mindiff#10 1875.1875
(byte) findcol::mindiff#11 10001.0
(byte~) findcol::mindiff#13 20002.0
(byte~) findcol::mindiff#14 20002.0
(byte) findcol::return
(byte) findcol::return#0 3667.333333333333
(byte) findcol::x
(byte) findcol::x#0 1863.8636363636363
(byte) findcol::xp
(byte) findcol::xp#0 10001.0
(byte) findcol::y
(byte) findcol::y#0 1863.8636363636363
(byte) findcol::yp
(byte) findcol::yp#0 6250.625
(void()) initscreen()
(byte*) initscreen::screen
(byte*) initscreen::screen#1 16.5
(byte*) initscreen::screen#2 16.5
(void()) main()
(byte) numpoints
(byte) numpoints#1 455.13636363636346
(byte) numpoints#19 4.5
(void()) render()
(byte) render::col
(byte) render::col#0 2002.0
(byte*) render::colline
(byte*) render::colline#1 67.33333333333333
(byte*) render::colline#2 36.45454545454545
(byte) render::x
(byte) render::x#1 1501.5
(byte) render::x#2 133.46666666666667
(byte) render::y
(byte) render::y#1 151.5
(byte) render::y#2 35.38235294117647

Initial phi equivalence classes
[ render::y#2 render::y#1 ]
[ render::colline#2 render::colline#1 ]
[ render::x#2 render::x#1 ]
[ findcol::i#12 findcol::i#1 ]
[ findcol::mindiff#10 findcol::mindiff#13 ]
[ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ]
[ findcol::diff#4 findcol::diff#1 findcol::diff#0 ]
[ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ]
[ initscreen::screen#2 initscreen::screen#1 ]
[ addpoint::x#6 ]
[ numpoints#19 numpoints#1 ]
[ addpoint::y#6 ]
[ addpoint::c#6 ]
Added variable animate::$0 to zero page equivalence class [ animate::$0 ]
Added variable animate::$1 to zero page equivalence class [ animate::$1 ]
Added variable animate::$2 to zero page equivalence class [ animate::$2 ]
Added variable animate::$5 to zero page equivalence class [ animate::$5 ]
Added variable animate::$6 to zero page equivalence class [ animate::$6 ]
Added variable animate::$7 to zero page equivalence class [ animate::$7 ]
Added variable animate::$10 to zero page equivalence class [ animate::$10 ]
Added variable animate::$11 to zero page equivalence class [ animate::$11 ]
Added variable animate::$12 to zero page equivalence class [ animate::$12 ]
Added variable animate::$15 to zero page equivalence class [ animate::$15 ]
Added variable animate::$16 to zero page equivalence class [ animate::$16 ]
Added variable animate::$17 to zero page equivalence class [ animate::$17 ]
Added variable animate::$20 to zero page equivalence class [ animate::$20 ]
Added variable animate::$21 to zero page equivalence class [ animate::$21 ]
Added variable animate::$22 to zero page equivalence class [ animate::$22 ]
Added variable animate::$25 to zero page equivalence class [ animate::$25 ]
Added variable animate::$26 to zero page equivalence class [ animate::$26 ]
Added variable animate::$27 to zero page equivalence class [ animate::$27 ]
Added variable animate::$30 to zero page equivalence class [ animate::$30 ]
Added variable animate::$31 to zero page equivalence class [ animate::$31 ]
Added variable findcol::x#0 to zero page equivalence class [ findcol::x#0 ]
Added variable findcol::y#0 to zero page equivalence class [ findcol::y#0 ]
Added variable render::col#0 to zero page equivalence class [ render::col#0 ]
Added variable findcol::xp#0 to zero page equivalence class [ findcol::xp#0 ]
Added variable findcol::yp#0 to zero page equivalence class [ findcol::yp#0 ]
Added variable findcol::$12 to zero page equivalence class [ findcol::$12 ]
Added variable findcol::$14 to zero page equivalence class [ findcol::$14 ]
Complete equivalence classes
[ render::y#2 render::y#1 ]
[ render::colline#2 render::colline#1 ]
[ render::x#2 render::x#1 ]
[ findcol::i#12 findcol::i#1 ]
[ findcol::mindiff#10 findcol::mindiff#13 ]
[ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ]
[ findcol::diff#4 findcol::diff#1 findcol::diff#0 ]
[ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ]
[ initscreen::screen#2 initscreen::screen#1 ]
[ addpoint::x#6 ]
[ numpoints#19 numpoints#1 ]
[ addpoint::y#6 ]
[ addpoint::c#6 ]
[ animate::$0 ]
[ animate::$1 ]
[ animate::$2 ]
[ animate::$5 ]
[ animate::$6 ]
[ animate::$7 ]
[ animate::$10 ]
[ animate::$11 ]
[ animate::$12 ]
[ animate::$15 ]
[ animate::$16 ]
[ animate::$17 ]
[ animate::$20 ]
[ animate::$21 ]
[ animate::$22 ]
[ animate::$25 ]
[ animate::$26 ]
[ animate::$27 ]
[ animate::$30 ]
[ animate::$31 ]
[ findcol::x#0 ]
[ findcol::y#0 ]
[ render::col#0 ]
[ findcol::xp#0 ]
[ findcol::yp#0 ]
[ findcol::$12 ]
[ findcol::$14 ]
Allocated zp ZP_BYTE:2 [ render::y#2 render::y#1 ]
Allocated zp ZP_PTR_BYTE:3 [ render::colline#2 render::colline#1 ]
Allocated zp ZP_BYTE:5 [ render::x#2 render::x#1 ]
Allocated zp ZP_BYTE:6 [ findcol::i#12 findcol::i#1 ]
Allocated zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ]
Allocated zp ZP_BYTE:8 [ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ]
Allocated zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ]
Allocated zp ZP_BYTE:10 [ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ]
Allocated zp ZP_PTR_BYTE:11 [ initscreen::screen#2 initscreen::screen#1 ]
Allocated zp ZP_BYTE:13 [ addpoint::x#6 ]
Allocated zp ZP_BYTE:14 [ numpoints#19 numpoints#1 ]
Allocated zp ZP_BYTE:15 [ addpoint::y#6 ]
Allocated zp ZP_BYTE:16 [ addpoint::c#6 ]
Allocated zp ZP_BYTE:17 [ animate::$0 ]
Allocated zp ZP_BYTE:18 [ animate::$1 ]
Allocated zp ZP_BYTE:19 [ animate::$2 ]
Allocated zp ZP_BYTE:20 [ animate::$5 ]
Allocated zp ZP_BYTE:21 [ animate::$6 ]
Allocated zp ZP_BYTE:22 [ animate::$7 ]
Allocated zp ZP_BYTE:23 [ animate::$10 ]
Allocated zp ZP_BYTE:24 [ animate::$11 ]
Allocated zp ZP_BYTE:25 [ animate::$12 ]
Allocated zp ZP_BYTE:26 [ animate::$15 ]
Allocated zp ZP_BYTE:27 [ animate::$16 ]
Allocated zp ZP_BYTE:28 [ animate::$17 ]
Allocated zp ZP_BYTE:29 [ animate::$20 ]
Allocated zp ZP_BYTE:30 [ animate::$21 ]
Allocated zp ZP_BYTE:31 [ animate::$22 ]
Allocated zp ZP_BYTE:32 [ animate::$25 ]
Allocated zp ZP_BYTE:33 [ animate::$26 ]
Allocated zp ZP_BYTE:34 [ animate::$27 ]
Allocated zp ZP_BYTE:35 [ animate::$30 ]
Allocated zp ZP_BYTE:36 [ animate::$31 ]
Allocated zp ZP_BYTE:37 [ findcol::x#0 ]
Allocated zp ZP_BYTE:38 [ findcol::y#0 ]
Allocated zp ZP_BYTE:39 [ render::col#0 ]
Allocated zp ZP_BYTE:40 [ findcol::xp#0 ]
Allocated zp ZP_BYTE:41 [ findcol::yp#0 ]
Allocated zp ZP_BYTE:42 [ findcol::$12 ]
Allocated zp ZP_BYTE:43 [ findcol::$14 ]
INITIAL ASM
//SEG0 Global ZP labels
  .label numpoints = 14
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
  jsr main
  jmp bend
//SEG3 @end
bend:
//SEG4 main
main: {
  //SEG5 [1] call addpoint param-assignment [ ]
  //SEG6 [93] phi from main to addpoint
  addpoint_from_main:
  //SEG7 [1] phi (byte) addpoint::c#6 = (byte) 1 -- zpby1=coby1 
    lda #$1
    sta addpoint.c
  //SEG8 [1] phi (byte) addpoint::y#6 = (byte) 5 -- zpby1=coby1 
    lda #$5
    sta addpoint.y
  //SEG9 [1] phi (byte) numpoints#19 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta numpoints
  //SEG10 [1] phi (byte) addpoint::x#6 = (byte) 5 -- zpby1=coby1 
    lda #$5
    sta addpoint.x
    jsr addpoint
    jmp b3
  //SEG11 main::@3
  b3:
  //SEG12 [2] call addpoint param-assignment [ ]
  //SEG13 [93] phi from main::@3 to addpoint
  addpoint_from_b3:
  //SEG14 [2] phi (byte) addpoint::c#6 = (byte) 2 -- zpby1=coby1 
    lda #$2
    sta addpoint.c
  //SEG15 [2] phi (byte) addpoint::y#6 = (byte) 8 -- zpby1=coby1 
    lda #$8
    sta addpoint.y
  //SEG16 [2] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG17 [2] phi (byte) addpoint::x#6 = (byte) 15 -- zpby1=coby1 
    lda #$f
    sta addpoint.x
    jsr addpoint
    jmp b4
  //SEG18 main::@4
  b4:
  //SEG19 [3] call addpoint param-assignment [ ]
  //SEG20 [93] phi from main::@4 to addpoint
  addpoint_from_b4:
  //SEG21 [3] phi (byte) addpoint::c#6 = (byte) 3 -- zpby1=coby1 
    lda #$3
    sta addpoint.c
  //SEG22 [3] phi (byte) addpoint::y#6 = (byte) 14 -- zpby1=coby1 
    lda #$e
    sta addpoint.y
  //SEG23 [3] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG24 [3] phi (byte) addpoint::x#6 = (byte) 6 -- zpby1=coby1 
    lda #$6
    sta addpoint.x
    jsr addpoint
    jmp b5
  //SEG25 main::@5
  b5:
  //SEG26 [4] call addpoint param-assignment [ ]
  //SEG27 [93] phi from main::@5 to addpoint
  addpoint_from_b5:
  //SEG28 [4] phi (byte) addpoint::c#6 = (byte) 4 -- zpby1=coby1 
    lda #$4
    sta addpoint.c
  //SEG29 [4] phi (byte) addpoint::y#6 = (byte) 2 -- zpby1=coby1 
    lda #$2
    sta addpoint.y
  //SEG30 [4] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG31 [4] phi (byte) addpoint::x#6 = (byte) 34 -- zpby1=coby1 
    lda #$22
    sta addpoint.x
    jsr addpoint
    jmp b6
  //SEG32 main::@6
  b6:
  //SEG33 [5] call addpoint param-assignment [ ]
  //SEG34 [93] phi from main::@6 to addpoint
  addpoint_from_b6:
  //SEG35 [5] phi (byte) addpoint::c#6 = (byte) 5 -- zpby1=coby1 
    lda #$5
    sta addpoint.c
  //SEG36 [5] phi (byte) addpoint::y#6 = (byte) 17 -- zpby1=coby1 
    lda #$11
    sta addpoint.y
  //SEG37 [5] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG38 [5] phi (byte) addpoint::x#6 = (byte) 21 -- zpby1=coby1 
    lda #$15
    sta addpoint.x
    jsr addpoint
    jmp b7
  //SEG39 main::@7
  b7:
  //SEG40 [6] call addpoint param-assignment [ ]
  //SEG41 [93] phi from main::@7 to addpoint
  addpoint_from_b7:
  //SEG42 [6] phi (byte) addpoint::c#6 = (byte) 7 -- zpby1=coby1 
    lda #$7
    sta addpoint.c
  //SEG43 [6] phi (byte) addpoint::y#6 = (byte) 22 -- zpby1=coby1 
    lda #$16
    sta addpoint.y
  //SEG44 [6] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG45 [6] phi (byte) addpoint::x#6 = (byte) 31 -- zpby1=coby1 
    lda #$1f
    sta addpoint.x
    jsr addpoint
    jmp b8
  //SEG46 main::@8
  b8:
  //SEG47 [7] call initscreen param-assignment [ ]
    jsr initscreen
    jmp b1
  //SEG48 main::@1
  b1:
  //SEG49 [8] call render param-assignment [ ]
    jsr render
    jmp b10
  //SEG50 main::@10
  b10:
  //SEG51 [9] call animate param-assignment [ ]
    jsr animate
    jmp b11
  //SEG52 main::@11
  b11:
  //SEG53 [10] if(true) goto main::@1 [ ] -- true_then_la1 
    jmp b1
    jmp breturn
  //SEG54 main::@return
  breturn:
  //SEG55 [11] return  [ ]
    rts
}
//SEG56 animate
animate: {
    .label $0 = 17
    .label $1 = 18
    .label $2 = 19
    .label $5 = 20
    .label $6 = 21
    .label $7 = 22
    .label $10 = 23
    .label $11 = 24
    .label $12 = 25
    .label $15 = 26
    .label $16 = 27
    .label $17 = 28
    .label $20 = 29
    .label $21 = 30
    .label $22 = 31
    .label $25 = 32
    .label $26 = 33
    .label $27 = 34
    .label $30 = 35
    .label $31 = 36
  //SEG57 [12] (byte~) animate::$0 ← * (word) 4096 [ animate::$0 ] -- zpby1=_star_cowo1 
    lda $1000
    sta $0
  //SEG58 [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ] -- zpby1=zpby2_plus_1 
    lda $0
    clc
    adc #$1
    sta $1
  //SEG59 [14] *((word) 4096) ← (byte~) animate::$1 [ ] -- _star_cowo1=zpby1 
    lda $1
    sta $1000
  //SEG60 [15] (byte~) animate::$2 ← * (word) 4096 [ animate::$2 ] -- zpby1=_star_cowo1 
    lda $1000
    sta $2
  //SEG61 [16] if((byte~) animate::$2!=(byte) 40) goto animate::@1 [ ] -- zpby1_neq_coby1_then_la1 
    lda $2
    cmp #$28
    bne b1
    jmp b7
  //SEG62 animate::@7
  b7:
  //SEG63 [17] *((word) 4096) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #$0
    sta $1000
    jmp b1
  //SEG64 animate::@1
  b1:
  //SEG65 [18] (byte~) animate::$5 ← * (word) 4352 [ animate::$5 ] -- zpby1=_star_cowo1 
    lda $1100
    sta $5
  //SEG66 [19] (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1 [ animate::$6 ] -- zpby1=zpby2_plus_1 
    lda $5
    clc
    adc #$1
    sta $6
  //SEG67 [20] *((word) 4352) ← (byte~) animate::$6 [ ] -- _star_cowo1=zpby1 
    lda $6
    sta $1100
  //SEG68 [21] (byte~) animate::$7 ← * (word) 4352 [ animate::$7 ] -- zpby1=_star_cowo1 
    lda $1100
    sta $7
  //SEG69 [22] if((byte~) animate::$7!=(byte) 25) goto animate::@2 [ ] -- zpby1_neq_coby1_then_la1 
    lda $7
    cmp #$19
    bne b2
    jmp b8
  //SEG70 animate::@8
  b8:
  //SEG71 [23] *((word) 4352) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #$0
    sta $1100
    jmp b2
  //SEG72 animate::@2
  b2:
  //SEG73 [24] (byte~) animate::$10 ← * (word) 4097 [ animate::$10 ] -- zpby1=_star_cowo1 
    lda $1001
    sta $10
  //SEG74 [25] (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1 [ animate::$11 ] -- zpby1=zpby2_minus_1 
    lda $10
    sec
    sbc #$1
    sta $11
  //SEG75 [26] *((word) 4097) ← (byte~) animate::$11 [ ] -- _star_cowo1=zpby1 
    lda $11
    sta $1001
  //SEG76 [27] (byte~) animate::$12 ← * (word) 4097 [ animate::$12 ] -- zpby1=_star_cowo1 
    lda $1001
    sta $12
  //SEG77 [28] if((byte~) animate::$12!=(byte) 255) goto animate::@3 [ ] -- zpby1_neq_coby1_then_la1 
    lda $12
    cmp #$ff
    bne b3
    jmp b9
  //SEG78 animate::@9
  b9:
  //SEG79 [29] *((word) 4097) ← (byte) 40 [ ] -- _star_cowo1=coby2 
    lda #$28
    sta $1001
    jmp b3
  //SEG80 animate::@3
  b3:
  //SEG81 [30] (byte~) animate::$15 ← * (word) 4354 [ animate::$15 ] -- zpby1=_star_cowo1 
    lda $1102
    sta $15
  //SEG82 [31] (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1 [ animate::$16 ] -- zpby1=zpby2_plus_1 
    lda $15
    clc
    adc #$1
    sta $16
  //SEG83 [32] *((word) 4354) ← (byte~) animate::$16 [ ] -- _star_cowo1=zpby1 
    lda $16
    sta $1102
  //SEG84 [33] (byte~) animate::$17 ← * (word) 4354 [ animate::$17 ] -- zpby1=_star_cowo1 
    lda $1102
    sta $17
  //SEG85 [34] if((byte~) animate::$17!=(byte) 25) goto animate::@4 [ ] -- zpby1_neq_coby1_then_la1 
    lda $17
    cmp #$19
    bne b4
    jmp b10
  //SEG86 animate::@10
  b10:
  //SEG87 [35] *((word) 4354) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #$0
    sta $1102
    jmp b4
  //SEG88 animate::@4
  b4:
  //SEG89 [36] (byte~) animate::$20 ← * (word) 4355 [ animate::$20 ] -- zpby1=_star_cowo1 
    lda $1103
    sta $20
  //SEG90 [37] (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1 [ animate::$21 ] -- zpby1=zpby2_minus_1 
    lda $20
    sec
    sbc #$1
    sta $21
  //SEG91 [38] *((word) 4355) ← (byte~) animate::$21 [ ] -- _star_cowo1=zpby1 
    lda $21
    sta $1103
  //SEG92 [39] (byte~) animate::$22 ← * (word) 4355 [ animate::$22 ] -- zpby1=_star_cowo1 
    lda $1103
    sta $22
  //SEG93 [40] if((byte~) animate::$22!=(byte) 255) goto animate::@return [ ] -- zpby1_neq_coby1_then_la1 
    lda $22
    cmp #$ff
    bne breturn
    jmp b11
  //SEG94 animate::@11
  b11:
  //SEG95 [41] *((word) 4355) ← (byte) 25 [ ] -- _star_cowo1=coby2 
    lda #$19
    sta $1103
  //SEG96 [42] (byte~) animate::$25 ← * (word) 4099 [ animate::$25 ] -- zpby1=_star_cowo1 
    lda $1003
    sta $25
  //SEG97 [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ] -- zpby1=zpby2_plus_coby1 
    lda $25
    clc
    adc #$7
    sta $26
  //SEG98 [44] *((word) 4099) ← (byte~) animate::$26 [ ] -- _star_cowo1=zpby1 
    lda $26
    sta $1003
  //SEG99 [45] (byte~) animate::$27 ← * (word) 4099 [ animate::$27 ] -- zpby1=_star_cowo1 
    lda $1003
    sta $27
  //SEG100 [46] if((byte~) animate::$27<(byte) 40) goto animate::@return [ ] -- zpby1_lt_coby1_then_la1 
    lda $27
    cmp #$28
    bcc breturn
    jmp b12
  //SEG101 animate::@12
  b12:
  //SEG102 [47] (byte~) animate::$30 ← * (word) 4099 [ animate::$30 ] -- zpby1=_star_cowo1 
    lda $1003
    sta $30
  //SEG103 [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ] -- zpby1=zpby2_minus_coby1 
    lda $30
    sec
    sbc #$28
    sta $31
  //SEG104 [49] *((word) 4099) ← (byte~) animate::$31 [ ] -- _star_cowo1=zpby1 
    lda $31
    sta $1003
    jmp breturn
  //SEG105 animate::@return
  breturn:
  //SEG106 [50] return  [ ]
    rts
}
//SEG107 render
render: {
    .label col = 39
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG108 [51] phi from render to render::@1
  b1_from_render:
  //SEG109 [51] phi (byte*) render::colline#2 = (word) 55296 -- zpptrby1=cowo1 
    lda #<$d800
    sta colline
    lda #>$d800
    sta colline+$1
  //SEG110 [51] phi (byte) render::y#2 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta y
    jmp b1
  //SEG111 [51] phi from render::@3 to render::@1
  b1_from_b3:
  //SEG112 [51] phi (byte*) render::colline#2 = (byte*) render::colline#1 -- register_copy 
  //SEG113 [51] phi (byte) render::y#2 = (byte) render::y#1 -- register_copy 
    jmp b1
  //SEG114 render::@1
  b1:
  //SEG115 [52] phi from render::@1 to render::@2
  b2_from_b1:
  //SEG116 [52] phi (byte) render::x#2 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta x
    jmp b2
  //SEG117 [52] phi from render::@5 to render::@2
  b2_from_b5:
  //SEG118 [52] phi (byte) render::x#2 = (byte) render::x#1 -- register_copy 
    jmp b2
  //SEG119 render::@2
  b2:
  //SEG120 [53] (byte) findcol::x#0 ← (byte) render::x#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
    lda x
    sta findcol.x
  //SEG121 [54] (byte) findcol::y#0 ← (byte) render::y#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
    lda y
    sta findcol.y
  //SEG122 [55] call findcol param-assignment [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
    jsr findcol
    jmp b5
  //SEG123 render::@5
  b5:
  //SEG124 [56] (byte) render::col#0 ← (byte) findcol::return#0 [ render::x#2 render::y#2 render::colline#2 render::col#0 ] -- zpby1=zpby2 
    lda findcol.return
    sta col
  //SEG125 [57] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::x#2 render::y#2 render::colline#2 ] -- zpptrby1_staridx_zpby1=zpby2 
    lda col
    ldy x
    sta (colline),y
  //SEG126 [58] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG127 [59] if((byte) render::x#1!=(byte) 40) goto render::@2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2_from_b5
    jmp b3
  //SEG128 render::@3
  b3:
  //SEG129 [60] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::colline#1 render::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+$1
  !:
  //SEG130 [61] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 ] -- zpby1=_inc_zpby1 
    inc y
  //SEG131 [62] if((byte) render::y#1!=(byte) 25) goto render::@1 [ render::y#1 render::colline#1 ] -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1_from_b3
    jmp breturn
  //SEG132 render::@return
  breturn:
  //SEG133 [63] return  [ ]
    rts
}
//SEG134 findcol
findcol: {
    .label $12 = 42
    .label $14 = 43
    .label x = 37
    .label y = 38
    .label return = 8
    .label xp = 40
    .label yp = 41
    .label diff = 9
    .label diff#2 = 10
    .label diff#3 = 10
    .label i = 6
    .label mincol = 8
    .label diff#6 = 10
    .label mindiff = 7
    .label mindiff#11 = 10
    .label mindiff#14 = 10
  //SEG135 [64] phi from findcol to findcol::@1
  b1_from_findcol:
  //SEG136 [64] phi (byte) findcol::mincol#11 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta mincol
  //SEG137 [64] phi (byte) findcol::mindiff#10 = (byte) 255 -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG138 [64] phi (byte) findcol::i#12 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta i
    jmp b1
  //SEG139 findcol::@1
  b1:
  //SEG140 [65] (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_zpby2 
    ldx i
    lda $1000,x
    sta xp
  //SEG141 [66] (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_zpby2 
    ldx i
    lda $1100,x
    sta yp
  //SEG142 [67] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
    jmp b9
  //SEG143 findcol::@9
  b9:
  //SEG144 [68] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG145 [69] phi from findcol::@9 to findcol::@return
  breturn_from_b9:
  //SEG146 [69] phi (byte) findcol::return#0 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta return
    jmp breturn
  //SEG147 findcol::@return
  breturn:
  //SEG148 [70] return  [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
    rts
  //SEG149 findcol::@2
  b2:
  //SEG150 [71] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
    jmp b12
  //SEG151 findcol::@12
  b12:
  //SEG152 [72] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#1 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby2_minus_zpby3 
    lda xp
    sec
    sbc x
    sta diff
  //SEG153 [73] phi from findcol::@12 to findcol::@5
  b5_from_b12:
  //SEG154 [73] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 -- register_copy 
    jmp b5
  //SEG155 findcol::@5
  b5:
  //SEG156 [74] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
    jmp b14
  //SEG157 findcol::@14
  b14:
  //SEG158 [75] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::$12 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby2_minus_zpby3 
    lda yp
    sec
    sbc y
    sta $12
  //SEG159 [76] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#3 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby2_plus_zpby3 
    lda diff
    clc
    adc $12
    sta diff_3
  //SEG160 [77] phi from findcol::@14 to findcol::@7
  b7_from_b14:
  //SEG161 [77] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 -- register_copy 
    jmp b7
  //SEG162 findcol::@7
  b7:
  //SEG163 [78] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda diff_6
    cmp mindiff
    bcs b21
    jmp b16
  //SEG164 findcol::@16
  b16:
  //SEG165 [79] (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mincol#1 numpoints#1 ] -- zpby1=cowo1_staridx_zpby2 
    ldx i
    lda $1200,x
    sta mincol
  //SEG166 [80] phi from findcol::@16 to findcol::@8
  b8_from_b16:
  //SEG167 [80] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 -- register_copy 
  //SEG168 [80] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 -- register_copy 
    jmp b8
  //SEG169 findcol::@8
  b8:
  //SEG170 [81] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 findcol::mindiff#11 ] -- zpby1=_inc_zpby1 
    inc i
  //SEG171 [82] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@19 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 findcol::mindiff#11 ] -- zpby1_lt_zpby2_then_la1 
    lda i
    cmp numpoints
    bcc b19
  //SEG172 [69] phi from findcol::@8 to findcol::@return
  breturn_from_b8:
  //SEG173 [69] phi (byte) findcol::return#0 = (byte) findcol::mincol#2 -- register_copy 
    jmp breturn
  //SEG174 findcol::@19
  b19:
  //SEG175 [83] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- zpby1=zpby2 
    lda mindiff_11
    sta mindiff
  //SEG176 [64] phi from findcol::@19 to findcol::@1
  b1_from_b19:
  //SEG177 [64] phi (byte) findcol::mincol#11 = (byte) findcol::mincol#2 -- register_copy 
  //SEG178 [64] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 -- register_copy 
  //SEG179 [64] phi (byte) findcol::i#12 = (byte) findcol::i#1 -- register_copy 
    jmp b1
  //SEG180 findcol::@21
  b21:
  //SEG181 [84] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#11 findcol::mindiff#14 numpoints#1 ] -- zpby1=zpby2 
    lda mindiff
    sta mindiff_14
  //SEG182 [80] phi from findcol::@21 to findcol::@8
  b8_from_b21:
  //SEG183 [80] phi (byte) findcol::mindiff#11 = (byte~) findcol::mindiff#14 -- register_copy 
  //SEG184 [80] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#11 -- register_copy 
    jmp b8
  //SEG185 findcol::@6
  b6:
  //SEG186 [85] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 findcol::$14 ] -- zpby1=zpby2_minus_zpby3 
    lda y
    sec
    sbc yp
    sta $14
  //SEG187 [86] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#2 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby2_plus_zpby3 
    lda diff
    clc
    adc $14
    sta diff_2
  //SEG188 [77] phi from findcol::@6 to findcol::@7
  b7_from_b6:
  //SEG189 [77] phi (byte) findcol::diff#6 = (byte) findcol::diff#2 -- register_copy 
    jmp b7
  //SEG190 findcol::@4
  b4:
  //SEG191 [87] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby2_minus_zpby3 
    lda x
    sec
    sbc xp
    sta diff
  //SEG192 [73] phi from findcol::@4 to findcol::@5
  b5_from_b4:
  //SEG193 [73] phi (byte) findcol::diff#4 = (byte) findcol::diff#0 -- register_copy 
    jmp b5
}
//SEG194 initscreen
initscreen: {
    .label screen = 11
  //SEG195 [88] phi from initscreen to initscreen::@1
  b1_from_initscreen:
  //SEG196 [88] phi (byte*) initscreen::screen#2 = (word) 1024 -- zpptrby1=cowo1 
    lda #<$400
    sta screen
    lda #>$400
    sta screen+$1
    jmp b1
  //SEG197 [88] phi from initscreen::@1 to initscreen::@1
  b1_from_b1:
  //SEG198 [88] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 -- register_copy 
    jmp b1
  //SEG199 initscreen::@1
  b1:
  //SEG200 [89] *((byte*) initscreen::screen#2) ← (byte) 230 [ initscreen::screen#2 ] -- _star_zpptrby1=coby1 
    ldy #$0
    lda #$e6
    sta (screen),y
  //SEG201 [90] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+$1
  !:
  //SEG202 [91] if((byte*) initscreen::screen#1<(word) 2024) goto initscreen::@1 [ initscreen::screen#1 ] -- zpptrby1_lt_cowo1_then_la1 
    lda screen+$1
    cmp #>$7e8
    bcc b1_from_b1
    bne !+
    lda screen
    cmp #<$7e8
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG203 initscreen::@return
  breturn:
  //SEG204 [92] return  [ ]
    rts
}
//SEG205 addpoint
addpoint: {
    .label x = 13
    .label y = 15
    .label c = 16
  //SEG206 [94] *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ] -- cowo1_staridx_zpby1=zpby2 
    lda x
    ldx numpoints
    sta $1000,x
  //SEG207 [95] *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ] -- cowo1_staridx_zpby1=zpby2 
    lda y
    ldx numpoints
    sta $1100,x
  //SEG208 [96] *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ] -- cowo1_staridx_zpby1=zpby2 
    lda c
    ldx numpoints
    sta $1200,x
  //SEG209 [97] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ ] -- zpby1=_inc_zpby1 
    inc numpoints
    jmp breturn
  //SEG210 addpoint::@return
  breturn:
  //SEG211 [98] return  [ ]
    rts
}

Statement [17] *((word) 4096) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [23] *((word) 4352) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [29] *((word) 4097) ← (byte) 40 [ ] always clobbers reg byte a 
Statement [35] *((word) 4354) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [41] *((word) 4355) ← (byte) 25 [ ] always clobbers reg byte a 
Statement [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ] always clobbers reg byte a 
Statement [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ] always clobbers reg byte a 
Statement [60] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::colline#1 render::y#2 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ render::y#2 render::y#1 ]
Statement [72] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#1 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ render::x#2 render::x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ findcol::i#12 findcol::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:37 [ findcol::x#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:38 [ findcol::y#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:41 [ findcol::yp#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:14 [ numpoints#19 numpoints#1 ]
Statement [75] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::$12 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ]
Statement [85] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 findcol::$14 ] always clobbers reg byte a 
Statement [87] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] always clobbers reg byte a 
Statement [89] *((byte*) initscreen::screen#2) ← (byte) 230 [ initscreen::screen#2 ] always clobbers reg byte a reg byte y 
Statement [91] if((byte*) initscreen::screen#1<(word) 2024) goto initscreen::@1 [ initscreen::screen#1 ] always clobbers reg byte a 
Statement [17] *((word) 4096) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [23] *((word) 4352) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [29] *((word) 4097) ← (byte) 40 [ ] always clobbers reg byte a 
Statement [35] *((word) 4354) ← (byte) 0 [ ] always clobbers reg byte a 
Statement [41] *((word) 4355) ← (byte) 25 [ ] always clobbers reg byte a 
Statement [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ] always clobbers reg byte a 
Statement [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ] always clobbers reg byte a 
Statement [60] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::colline#1 render::y#2 ] always clobbers reg byte a 
Statement [72] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#1 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] always clobbers reg byte a 
Statement [75] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::$12 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] always clobbers reg byte a 
Statement [85] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 findcol::$14 ] always clobbers reg byte a 
Statement [87] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] always clobbers reg byte a 
Statement [89] *((byte*) initscreen::screen#2) ← (byte) 230 [ initscreen::screen#2 ] always clobbers reg byte a reg byte y 
Statement [91] if((byte*) initscreen::screen#1<(word) 2024) goto initscreen::@1 [ initscreen::screen#1 ] always clobbers reg byte a 
Equivalence Class zp ZP_BYTE:17 [ animate::$0 ] has ALU potential.
Equivalence Class zp ZP_BYTE:20 [ animate::$5 ] has ALU potential.
Equivalence Class zp ZP_BYTE:26 [ animate::$15 ] has ALU potential.
Equivalence Class zp ZP_BYTE:32 [ animate::$25 ] has ALU potential.
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ render::y#2 render::y#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_PTR_BYTE:3 [ render::colline#2 render::colline#1 ] : zp ZP_PTR_BYTE:3 , 
Potential registers zp ZP_BYTE:5 [ render::x#2 render::x#1 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ findcol::i#12 findcol::i#1 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ] : zp ZP_BYTE:7 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] : zp ZP_BYTE:9 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_PTR_BYTE:11 [ initscreen::screen#2 initscreen::screen#1 ] : zp ZP_PTR_BYTE:11 , 
Potential registers zp ZP_BYTE:13 [ addpoint::x#6 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ numpoints#19 numpoints#1 ] : zp ZP_BYTE:14 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ addpoint::y#6 ] : zp ZP_BYTE:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ addpoint::c#6 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ animate::$0 ] : zp ZP_BYTE:17 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:18 [ animate::$1 ] : zp ZP_BYTE:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:19 [ animate::$2 ] : zp ZP_BYTE:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ animate::$5 ] : zp ZP_BYTE:20 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:21 [ animate::$6 ] : zp ZP_BYTE:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ animate::$7 ] : zp ZP_BYTE:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:23 [ animate::$10 ] : zp ZP_BYTE:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ animate::$11 ] : zp ZP_BYTE:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:25 [ animate::$12 ] : zp ZP_BYTE:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ animate::$15 ] : zp ZP_BYTE:26 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:27 [ animate::$16 ] : zp ZP_BYTE:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:28 [ animate::$17 ] : zp ZP_BYTE:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:29 [ animate::$20 ] : zp ZP_BYTE:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:30 [ animate::$21 ] : zp ZP_BYTE:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ animate::$22 ] : zp ZP_BYTE:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ animate::$25 ] : zp ZP_BYTE:32 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp ZP_BYTE:33 [ animate::$26 ] : zp ZP_BYTE:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:34 [ animate::$27 ] : zp ZP_BYTE:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:35 [ animate::$30 ] : zp ZP_BYTE:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:36 [ animate::$31 ] : zp ZP_BYTE:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:37 [ findcol::x#0 ] : zp ZP_BYTE:37 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:38 [ findcol::y#0 ] : zp ZP_BYTE:38 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:39 [ render::col#0 ] : zp ZP_BYTE:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:40 [ findcol::xp#0 ] : zp ZP_BYTE:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:41 [ findcol::yp#0 ] : zp ZP_BYTE:41 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:42 [ findcol::$12 ] : zp ZP_BYTE:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:43 [ findcol::$14 ] : zp ZP_BYTE:43 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [findcol] 83,341.67: zp ZP_BYTE:10 [ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ] 50,005: zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] 34,846.92: zp ZP_BYTE:8 [ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ] 21,877.19: zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ] 20,002: zp ZP_BYTE:42 [ findcol::$12 ] 20,002: zp ZP_BYTE:43 [ findcol::$14 ] 12,632.84: zp ZP_BYTE:6 [ findcol::i#12 findcol::i#1 ] 10,001: zp ZP_BYTE:40 [ findcol::xp#0 ] 6,250.62: zp ZP_BYTE:41 [ findcol::yp#0 ] 1,863.86: zp ZP_BYTE:37 [ findcol::x#0 ] 1,863.86: zp ZP_BYTE:38 [ findcol::y#0 ] 
Uplift Scope [render] 2,002: zp ZP_BYTE:39 [ render::col#0 ] 1,634.97: zp ZP_BYTE:5 [ render::x#2 render::x#1 ] 186.88: zp ZP_BYTE:2 [ render::y#2 render::y#1 ] 103.79: zp ZP_PTR_BYTE:3 [ render::colline#2 render::colline#1 ] 
Uplift Scope [] 459.64: zp ZP_BYTE:14 [ numpoints#19 numpoints#1 ] 
Uplift Scope [animate] 4: zp ZP_BYTE:17 [ animate::$0 ] 4: zp ZP_BYTE:18 [ animate::$1 ] 4: zp ZP_BYTE:19 [ animate::$2 ] 4: zp ZP_BYTE:20 [ animate::$5 ] 4: zp ZP_BYTE:21 [ animate::$6 ] 4: zp ZP_BYTE:22 [ animate::$7 ] 4: zp ZP_BYTE:23 [ animate::$10 ] 4: zp ZP_BYTE:24 [ animate::$11 ] 4: zp ZP_BYTE:25 [ animate::$12 ] 4: zp ZP_BYTE:26 [ animate::$15 ] 4: zp ZP_BYTE:27 [ animate::$16 ] 4: zp ZP_BYTE:28 [ animate::$17 ] 4: zp ZP_BYTE:29 [ animate::$20 ] 4: zp ZP_BYTE:30 [ animate::$21 ] 4: zp ZP_BYTE:31 [ animate::$22 ] 4: zp ZP_BYTE:32 [ animate::$25 ] 4: zp ZP_BYTE:33 [ animate::$26 ] 4: zp ZP_BYTE:34 [ animate::$27 ] 4: zp ZP_BYTE:35 [ animate::$30 ] 4: zp ZP_BYTE:36 [ animate::$31 ] 
Uplift Scope [initscreen] 33: zp ZP_PTR_BYTE:11 [ initscreen::screen#2 initscreen::screen#1 ] 
Uplift Scope [addpoint] 2: zp ZP_BYTE:13 [ addpoint::x#6 ] 1: zp ZP_BYTE:15 [ addpoint::y#6 ] 0.67: zp ZP_BYTE:16 [ addpoint::c#6 ] 
Uplift Scope [main] 

Uplift attempts [findcol] 10000/559872 (limiting to 10000)
Uplifting [findcol] best 2005183 combination reg byte a [ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ] zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] reg byte y [ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ] zp ZP_BYTE:7 [ findcol::mindiff#10 findcol::mindiff#13 ] reg byte a [ findcol::$12 ] reg byte a [ findcol::$14 ] reg byte x [ findcol::i#12 findcol::i#1 ] zp ZP_BYTE:40 [ findcol::xp#0 ] zp ZP_BYTE:41 [ findcol::yp#0 ] zp ZP_BYTE:37 [ findcol::x#0 ] zp ZP_BYTE:38 [ findcol::y#0 ] 
Limited combination testing to 10000 combinations of 559872 possible.
Uplifting [render] best 1999183 combination reg byte a [ render::col#0 ] zp ZP_BYTE:5 [ render::x#2 render::x#1 ] zp ZP_BYTE:2 [ render::y#2 render::y#1 ] zp ZP_PTR_BYTE:3 [ render::colline#2 render::colline#1 ] 
Uplifting [] best 1999183 combination zp ZP_BYTE:14 [ numpoints#19 numpoints#1 ] 
Uplifting [initscreen] best 1999183 combination zp ZP_PTR_BYTE:11 [ initscreen::screen#2 initscreen::screen#1 ] 
Uplifting [addpoint] best 1999129 combination reg byte a [ addpoint::x#6 ] reg byte y [ addpoint::y#6 ] zp ZP_BYTE:16 [ addpoint::c#6 ] 
Uplifting [main] best 1999129 combination 
Uplifting remains [reg byte a [ animate::$0 ]] best 1999123 combination reg byte a [ animate::$0 ] 
Uplifting remains [reg byte a [ animate::$1 ]] best 1999117 combination reg byte a [ animate::$1 ] 
Uplifting remains [reg byte a [ animate::$2 ]] best 1999111 combination reg byte a [ animate::$2 ] 
Uplifting remains [reg byte a [ animate::$5 ]] best 1999105 combination reg byte a [ animate::$5 ] 
Uplifting remains [reg byte a [ animate::$6 ]] best 1999099 combination reg byte a [ animate::$6 ] 
Uplifting remains [reg byte a [ animate::$7 ]] best 1999093 combination reg byte a [ animate::$7 ] 
Uplifting remains [reg byte x [ animate::$10 ]] best 1999087 combination reg byte x [ animate::$10 ] 
Uplifting remains [reg byte x [ animate::$11 ]] best 1999079 combination reg byte x [ animate::$11 ] 
Uplifting remains [reg byte a [ animate::$12 ]] best 1999073 combination reg byte a [ animate::$12 ] 
Uplifting remains [reg byte a [ animate::$15 ]] best 1999067 combination reg byte a [ animate::$15 ] 
Uplifting remains [reg byte a [ animate::$16 ]] best 1999061 combination reg byte a [ animate::$16 ] 
Uplifting remains [reg byte a [ animate::$17 ]] best 1999055 combination reg byte a [ animate::$17 ] 
Uplifting remains [reg byte x [ animate::$20 ]] best 1999049 combination reg byte x [ animate::$20 ] 
Uplifting remains [reg byte x [ animate::$21 ]] best 1999041 combination reg byte x [ animate::$21 ] 
Uplifting remains [reg byte a [ animate::$22 ]] best 1999035 combination reg byte a [ animate::$22 ] 
Uplifting remains [reg byte a [ animate::$25 ]] best 1999029 combination reg byte a [ animate::$25 ] 
Uplifting remains [reg byte a [ animate::$26 ]] best 1999023 combination reg byte a [ animate::$26 ] 
Uplifting remains [reg byte a [ animate::$27 ]] best 1999017 combination reg byte a [ animate::$27 ] 
Uplifting remains [reg byte a [ animate::$30 ]] best 1999011 combination reg byte a [ animate::$30 ] 
Uplifting remains [reg byte a [ animate::$31 ]] best 1999005 combination reg byte a [ animate::$31 ] 
Coalescing zero page register [ zp ZP_BYTE:2 [ render::y#2 render::y#1 ] ] with [ zp ZP_BYTE:16 [ addpoint::c#6 ] ]
Coalescing zero page register [ zp ZP_PTR_BYTE:3 [ render::colline#2 render::colline#1 ] ] with [ zp ZP_PTR_BYTE:11 [ initscreen::screen#2 initscreen::screen#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:9 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 ] ] with [ zp ZP_BYTE:40 [ findcol::xp#0 ] ]
Allocated (was zp ZP_BYTE:7) zp ZP_BYTE:6 [ findcol::mindiff#10 findcol::mindiff#13 ]
Allocated (was zp ZP_BYTE:9) zp ZP_BYTE:7 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 findcol::xp#0 ]
Allocated (was zp ZP_BYTE:14) zp ZP_BYTE:8 [ numpoints#19 numpoints#1 ]
Allocated (was zp ZP_BYTE:37) zp ZP_BYTE:9 [ findcol::x#0 ]
Allocated (was zp ZP_BYTE:38) zp ZP_BYTE:10 [ findcol::y#0 ]
Allocated (was zp ZP_BYTE:41) zp ZP_BYTE:11 [ findcol::yp#0 ]
Removing instruction jmp bend
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b1
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b7
Removing instruction jmp b1
Removing instruction jmp b8
Removing instruction jmp b2
Removing instruction jmp b9
Removing instruction jmp b3
Removing instruction jmp b10
Removing instruction jmp b4
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b9
Removing instruction jmp breturn
Removing instruction jmp b12
Removing instruction jmp b5
Removing instruction jmp b14
Removing instruction jmp b7
Removing instruction jmp b16
Removing instruction jmp b8
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global ZP labels
  .label numpoints = 8
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
bend:
//SEG4 main
main: {
  //SEG5 [1] call addpoint param-assignment [ ]
  //SEG6 [93] phi from main to addpoint
  addpoint_from_main:
  //SEG7 [1] phi (byte) addpoint::c#6 = (byte) 1 -- zpby1=coby1 
    lda #$1
    sta addpoint.c
  //SEG8 [1] phi (byte) addpoint::y#6 = (byte) 5 -- yby=coby1 
    ldy #$5
  //SEG9 [1] phi (byte) numpoints#19 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta numpoints
  //SEG10 [1] phi (byte) addpoint::x#6 = (byte) 5 -- aby=coby1 
    lda #$5
    jsr addpoint
  //SEG11 main::@3
  b3:
  //SEG12 [2] call addpoint param-assignment [ ]
  //SEG13 [93] phi from main::@3 to addpoint
  addpoint_from_b3:
  //SEG14 [2] phi (byte) addpoint::c#6 = (byte) 2 -- zpby1=coby1 
    lda #$2
    sta addpoint.c
  //SEG15 [2] phi (byte) addpoint::y#6 = (byte) 8 -- yby=coby1 
    ldy #$8
  //SEG16 [2] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG17 [2] phi (byte) addpoint::x#6 = (byte) 15 -- aby=coby1 
    lda #$f
    jsr addpoint
  //SEG18 main::@4
  b4:
  //SEG19 [3] call addpoint param-assignment [ ]
  //SEG20 [93] phi from main::@4 to addpoint
  addpoint_from_b4:
  //SEG21 [3] phi (byte) addpoint::c#6 = (byte) 3 -- zpby1=coby1 
    lda #$3
    sta addpoint.c
  //SEG22 [3] phi (byte) addpoint::y#6 = (byte) 14 -- yby=coby1 
    ldy #$e
  //SEG23 [3] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG24 [3] phi (byte) addpoint::x#6 = (byte) 6 -- aby=coby1 
    lda #$6
    jsr addpoint
  //SEG25 main::@5
  b5:
  //SEG26 [4] call addpoint param-assignment [ ]
  //SEG27 [93] phi from main::@5 to addpoint
  addpoint_from_b5:
  //SEG28 [4] phi (byte) addpoint::c#6 = (byte) 4 -- zpby1=coby1 
    lda #$4
    sta addpoint.c
  //SEG29 [4] phi (byte) addpoint::y#6 = (byte) 2 -- yby=coby1 
    ldy #$2
  //SEG30 [4] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG31 [4] phi (byte) addpoint::x#6 = (byte) 34 -- aby=coby1 
    lda #$22
    jsr addpoint
  //SEG32 main::@6
  b6:
  //SEG33 [5] call addpoint param-assignment [ ]
  //SEG34 [93] phi from main::@6 to addpoint
  addpoint_from_b6:
  //SEG35 [5] phi (byte) addpoint::c#6 = (byte) 5 -- zpby1=coby1 
    lda #$5
    sta addpoint.c
  //SEG36 [5] phi (byte) addpoint::y#6 = (byte) 17 -- yby=coby1 
    ldy #$11
  //SEG37 [5] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG38 [5] phi (byte) addpoint::x#6 = (byte) 21 -- aby=coby1 
    lda #$15
    jsr addpoint
  //SEG39 main::@7
  b7:
  //SEG40 [6] call addpoint param-assignment [ ]
  //SEG41 [93] phi from main::@7 to addpoint
  addpoint_from_b7:
  //SEG42 [6] phi (byte) addpoint::c#6 = (byte) 7 -- zpby1=coby1 
    lda #$7
    sta addpoint.c
  //SEG43 [6] phi (byte) addpoint::y#6 = (byte) 22 -- yby=coby1 
    ldy #$16
  //SEG44 [6] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG45 [6] phi (byte) addpoint::x#6 = (byte) 31 -- aby=coby1 
    lda #$1f
    jsr addpoint
  //SEG46 main::@8
  b8:
  //SEG47 [7] call initscreen param-assignment [ ]
    jsr initscreen
  //SEG48 main::@1
  b1:
  //SEG49 [8] call render param-assignment [ ]
    jsr render
  //SEG50 main::@10
  b10:
  //SEG51 [9] call animate param-assignment [ ]
    jsr animate
  //SEG52 main::@11
  b11:
  //SEG53 [10] if(true) goto main::@1 [ ] -- true_then_la1 
    jmp b1
  //SEG54 main::@return
  breturn:
  //SEG55 [11] return  [ ]
    rts
}
//SEG56 animate
animate: {
  //SEG57 [12] (byte~) animate::$0 ← * (word) 4096 [ animate::$0 ] -- aby=_star_cowo1 
    lda $1000
  //SEG58 [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ] -- aby=aby_plus_1 
    clc
    adc #$1
  //SEG59 [14] *((word) 4096) ← (byte~) animate::$1 [ ] -- _star_cowo1=aby 
    sta $1000
  //SEG60 [15] (byte~) animate::$2 ← * (word) 4096 [ animate::$2 ] -- aby=_star_cowo1 
    lda $1000
  //SEG61 [16] if((byte~) animate::$2!=(byte) 40) goto animate::@1 [ ] -- aby_neq_coby1_then_la1 
    cmp #$28
    bne b1
  //SEG62 animate::@7
  b7:
  //SEG63 [17] *((word) 4096) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #$0
    sta $1000
  //SEG64 animate::@1
  b1:
  //SEG65 [18] (byte~) animate::$5 ← * (word) 4352 [ animate::$5 ] -- aby=_star_cowo1 
    lda $1100
  //SEG66 [19] (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1 [ animate::$6 ] -- aby=aby_plus_1 
    clc
    adc #$1
  //SEG67 [20] *((word) 4352) ← (byte~) animate::$6 [ ] -- _star_cowo1=aby 
    sta $1100
  //SEG68 [21] (byte~) animate::$7 ← * (word) 4352 [ animate::$7 ] -- aby=_star_cowo1 
    lda $1100
  //SEG69 [22] if((byte~) animate::$7!=(byte) 25) goto animate::@2 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b2
  //SEG70 animate::@8
  b8:
  //SEG71 [23] *((word) 4352) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #$0
    sta $1100
  //SEG72 animate::@2
  b2:
  //SEG73 [24] (byte~) animate::$10 ← * (word) 4097 [ animate::$10 ] -- xby=_star_cowo1 
    ldx $1001
  //SEG74 [25] (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1 [ animate::$11 ] -- xby=xby_minus_1 
    dex
  //SEG75 [26] *((word) 4097) ← (byte~) animate::$11 [ ] -- _star_cowo1=xby 
    stx $1001
  //SEG76 [27] (byte~) animate::$12 ← * (word) 4097 [ animate::$12 ] -- aby=_star_cowo1 
    lda $1001
  //SEG77 [28] if((byte~) animate::$12!=(byte) 255) goto animate::@3 [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b3
  //SEG78 animate::@9
  b9:
  //SEG79 [29] *((word) 4097) ← (byte) 40 [ ] -- _star_cowo1=coby2 
    lda #$28
    sta $1001
  //SEG80 animate::@3
  b3:
  //SEG81 [30] (byte~) animate::$15 ← * (word) 4354 [ animate::$15 ] -- aby=_star_cowo1 
    lda $1102
  //SEG82 [31] (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1 [ animate::$16 ] -- aby=aby_plus_1 
    clc
    adc #$1
  //SEG83 [32] *((word) 4354) ← (byte~) animate::$16 [ ] -- _star_cowo1=aby 
    sta $1102
  //SEG84 [33] (byte~) animate::$17 ← * (word) 4354 [ animate::$17 ] -- aby=_star_cowo1 
    lda $1102
  //SEG85 [34] if((byte~) animate::$17!=(byte) 25) goto animate::@4 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b4
  //SEG86 animate::@10
  b10:
  //SEG87 [35] *((word) 4354) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #$0
    sta $1102
  //SEG88 animate::@4
  b4:
  //SEG89 [36] (byte~) animate::$20 ← * (word) 4355 [ animate::$20 ] -- xby=_star_cowo1 
    ldx $1103
  //SEG90 [37] (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1 [ animate::$21 ] -- xby=xby_minus_1 
    dex
  //SEG91 [38] *((word) 4355) ← (byte~) animate::$21 [ ] -- _star_cowo1=xby 
    stx $1103
  //SEG92 [39] (byte~) animate::$22 ← * (word) 4355 [ animate::$22 ] -- aby=_star_cowo1 
    lda $1103
  //SEG93 [40] if((byte~) animate::$22!=(byte) 255) goto animate::@return [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne breturn
  //SEG94 animate::@11
  b11:
  //SEG95 [41] *((word) 4355) ← (byte) 25 [ ] -- _star_cowo1=coby2 
    lda #$19
    sta $1103
  //SEG96 [42] (byte~) animate::$25 ← * (word) 4099 [ animate::$25 ] -- aby=_star_cowo1 
    lda $1003
  //SEG97 [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ] -- aby=aby_plus_coby1 
    clc
    adc #$7
  //SEG98 [44] *((word) 4099) ← (byte~) animate::$26 [ ] -- _star_cowo1=aby 
    sta $1003
  //SEG99 [45] (byte~) animate::$27 ← * (word) 4099 [ animate::$27 ] -- aby=_star_cowo1 
    lda $1003
  //SEG100 [46] if((byte~) animate::$27<(byte) 40) goto animate::@return [ ] -- aby_lt_coby1_then_la1 
    cmp #$28
    bcc breturn
  //SEG101 animate::@12
  b12:
  //SEG102 [47] (byte~) animate::$30 ← * (word) 4099 [ animate::$30 ] -- aby=_star_cowo1 
    lda $1003
  //SEG103 [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ] -- aby=aby_minus_coby1 
    sec
    sbc #$28
  //SEG104 [49] *((word) 4099) ← (byte~) animate::$31 [ ] -- _star_cowo1=aby 
    sta $1003
  //SEG105 animate::@return
  breturn:
  //SEG106 [50] return  [ ]
    rts
}
//SEG107 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG108 [51] phi from render to render::@1
  b1_from_render:
  //SEG109 [51] phi (byte*) render::colline#2 = (word) 55296 -- zpptrby1=cowo1 
    lda #<$d800
    sta colline
    lda #>$d800
    sta colline+$1
  //SEG110 [51] phi (byte) render::y#2 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta y
    jmp b1
  //SEG111 [51] phi from render::@3 to render::@1
  b1_from_b3:
  //SEG112 [51] phi (byte*) render::colline#2 = (byte*) render::colline#1 -- register_copy 
  //SEG113 [51] phi (byte) render::y#2 = (byte) render::y#1 -- register_copy 
  //SEG114 render::@1
  b1:
  //SEG115 [52] phi from render::@1 to render::@2
  b2_from_b1:
  //SEG116 [52] phi (byte) render::x#2 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta x
    jmp b2
  //SEG117 [52] phi from render::@5 to render::@2
  b2_from_b5:
  //SEG118 [52] phi (byte) render::x#2 = (byte) render::x#1 -- register_copy 
  //SEG119 render::@2
  b2:
  //SEG120 [53] (byte) findcol::x#0 ← (byte) render::x#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
    lda x
    sta findcol.x
  //SEG121 [54] (byte) findcol::y#0 ← (byte) render::y#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
    lda y
    sta findcol.y
  //SEG122 [55] call findcol param-assignment [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
    jsr findcol
  //SEG123 render::@5
  b5:
  //SEG124 [56] (byte) render::col#0 ← (byte) findcol::return#0 [ render::x#2 render::y#2 render::colline#2 render::col#0 ] -- aby=yby 
    tya
  //SEG125 [57] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::x#2 render::y#2 render::colline#2 ] -- zpptrby1_staridx_zpby1=aby 
    ldy x
    sta (colline),y
  //SEG126 [58] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG127 [59] if((byte) render::x#1!=(byte) 40) goto render::@2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2_from_b5
  //SEG128 render::@3
  b3:
  //SEG129 [60] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::colline#1 render::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+$1
  !:
  //SEG130 [61] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 ] -- zpby1=_inc_zpby1 
    inc y
  //SEG131 [62] if((byte) render::y#1!=(byte) 25) goto render::@1 [ render::y#1 render::colline#1 ] -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1_from_b3
  //SEG132 render::@return
  breturn:
  //SEG133 [63] return  [ ]
    rts
}
//SEG134 findcol
findcol: {
    .label x = 9
    .label y = 10
    .label xp = 7
    .label yp = 11
    .label diff = 7
    .label mindiff = 6
  //SEG135 [64] phi from findcol to findcol::@1
  b1_from_findcol:
  //SEG136 [64] phi (byte) findcol::mincol#11 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG137 [64] phi (byte) findcol::mindiff#10 = (byte) 255 -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG138 [64] phi (byte) findcol::i#12 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG139 findcol::@1
  b1:
  //SEG140 [65] (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda $1000,x
    sta xp
  //SEG141 [66] (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda $1100,x
    sta yp
  //SEG142 [67] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
  //SEG143 findcol::@9
  b9:
  //SEG144 [68] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG145 [69] phi from findcol::@9 to findcol::@return
  breturn_from_b9:
  //SEG146 [69] phi (byte) findcol::return#0 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG147 findcol::@return
  breturn:
  //SEG148 [70] return  [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
    rts
  //SEG149 findcol::@2
  b2:
  //SEG150 [71] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
  //SEG151 findcol::@12
  b12:
  //SEG152 [72] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#1 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby1_minus_zpby2 
    lda diff
    sec
    sbc x
    sta diff
  //SEG153 [73] phi from findcol::@12 to findcol::@5
  b5_from_b12:
  //SEG154 [73] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 -- register_copy 
  //SEG155 findcol::@5
  b5:
  //SEG156 [74] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
  //SEG157 findcol::@14
  b14:
  //SEG158 [75] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::$12 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_minus_zpby2 
    lda yp
    sec
    sbc y
  //SEG159 [76] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#3 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG160 [77] phi from findcol::@14 to findcol::@7
  b7_from_b14:
  //SEG161 [77] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 -- register_copy 
  //SEG162 findcol::@7
  b7:
  //SEG163 [78] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby_ge_zpby1_then_la1 
    cmp mindiff
    bcs b21
  //SEG164 findcol::@16
  b16:
  //SEG165 [79] (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mincol#1 numpoints#1 ] -- yby=cowo1_staridx_xby 
    ldy $1200,x
  //SEG166 [80] phi from findcol::@16 to findcol::@8
  b8_from_b16:
  //SEG167 [80] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 -- register_copy 
  //SEG168 [80] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 -- register_copy 
  //SEG169 findcol::@8
  b8:
  //SEG170 [81] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 findcol::mindiff#11 ] -- xby=_inc_xby 
    inx
  //SEG171 [82] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@19 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 findcol::mindiff#11 ] -- xby_lt_zpby1_then_la1 
    cpx numpoints
    bcc b19
  //SEG172 [69] phi from findcol::@8 to findcol::@return
  breturn_from_b8:
  //SEG173 [69] phi (byte) findcol::return#0 = (byte) findcol::mincol#2 -- register_copy 
    jmp breturn
  //SEG174 findcol::@19
  b19:
  //SEG175 [83] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- zpby1=aby 
    sta mindiff
  //SEG176 [64] phi from findcol::@19 to findcol::@1
  b1_from_b19:
  //SEG177 [64] phi (byte) findcol::mincol#11 = (byte) findcol::mincol#2 -- register_copy 
  //SEG178 [64] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 -- register_copy 
  //SEG179 [64] phi (byte) findcol::i#12 = (byte) findcol::i#1 -- register_copy 
    jmp b1
  //SEG180 findcol::@21
  b21:
  //SEG181 [84] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#11 findcol::mindiff#14 numpoints#1 ] -- aby=zpby1 
    lda mindiff
  //SEG182 [80] phi from findcol::@21 to findcol::@8
  b8_from_b21:
  //SEG183 [80] phi (byte) findcol::mindiff#11 = (byte~) findcol::mindiff#14 -- register_copy 
  //SEG184 [80] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#11 -- register_copy 
    jmp b8
  //SEG185 findcol::@6
  b6:
  //SEG186 [85] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 findcol::$14 ] -- aby=zpby1_minus_zpby2 
    lda y
    sec
    sbc yp
  //SEG187 [86] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#2 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG188 [77] phi from findcol::@6 to findcol::@7
  b7_from_b6:
  //SEG189 [77] phi (byte) findcol::diff#6 = (byte) findcol::diff#2 -- register_copy 
    jmp b7
  //SEG190 findcol::@4
  b4:
  //SEG191 [87] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby2_minus_zpby1 
    lda x
    sec
    sbc diff
    sta diff
  //SEG192 [73] phi from findcol::@4 to findcol::@5
  b5_from_b4:
  //SEG193 [73] phi (byte) findcol::diff#4 = (byte) findcol::diff#0 -- register_copy 
    jmp b5
}
//SEG194 initscreen
initscreen: {
    .label screen = 3
  //SEG195 [88] phi from initscreen to initscreen::@1
  b1_from_initscreen:
  //SEG196 [88] phi (byte*) initscreen::screen#2 = (word) 1024 -- zpptrby1=cowo1 
    lda #<$400
    sta screen
    lda #>$400
    sta screen+$1
    jmp b1
  //SEG197 [88] phi from initscreen::@1 to initscreen::@1
  b1_from_b1:
  //SEG198 [88] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 -- register_copy 
  //SEG199 initscreen::@1
  b1:
  //SEG200 [89] *((byte*) initscreen::screen#2) ← (byte) 230 [ initscreen::screen#2 ] -- _star_zpptrby1=coby1 
    ldy #$0
    lda #$e6
    sta (screen),y
  //SEG201 [90] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+$1
  !:
  //SEG202 [91] if((byte*) initscreen::screen#1<(word) 2024) goto initscreen::@1 [ initscreen::screen#1 ] -- zpptrby1_lt_cowo1_then_la1 
    lda screen+$1
    cmp #>$7e8
    bcc b1_from_b1
    bne !+
    lda screen
    cmp #<$7e8
    bcc b1_from_b1
  !:
  //SEG203 initscreen::@return
  breturn:
  //SEG204 [92] return  [ ]
    rts
}
//SEG205 addpoint
addpoint: {
    .label c = 2
  //SEG206 [94] *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ] -- cowo1_staridx_zpby1=aby 
    ldx numpoints
    sta $1000,x
  //SEG207 [95] *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ] -- cowo1_staridx_zpby1=yby 
    tya
    ldy numpoints
    sta $1100,y
  //SEG208 [96] *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ] -- cowo1_staridx_zpby1=zpby2 
    lda c
    ldx numpoints
    sta $1200,x
  //SEG209 [97] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ ] -- zpby1=_inc_zpby1 
    inc numpoints
  //SEG210 addpoint::@return
  breturn:
  //SEG211 [98] return  [ ]
    rts
}

Replacing label b2_from_b5 with b2
Replacing label b1_from_b3 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction addpoint_from_b3:
Removing instruction addpoint_from_b4:
Removing instruction addpoint_from_b5:
Removing instruction addpoint_from_b6:
Removing instruction addpoint_from_b7:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b5:
Removing instruction b5_from_b12:
Removing instruction b7_from_b14:
Removing instruction b8_from_b16:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Global ZP labels
  .label numpoints = 8
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
bend:
//SEG4 main
main: {
  //SEG5 [1] call addpoint param-assignment [ ]
  //SEG6 [93] phi from main to addpoint
  addpoint_from_main:
  //SEG7 [1] phi (byte) addpoint::c#6 = (byte) 1 -- zpby1=coby1 
    lda #$1
    sta addpoint.c
  //SEG8 [1] phi (byte) addpoint::y#6 = (byte) 5 -- yby=coby1 
    ldy #$5
  //SEG9 [1] phi (byte) numpoints#19 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta numpoints
  //SEG10 [1] phi (byte) addpoint::x#6 = (byte) 5 -- aby=coby1 
    lda #$5
    jsr addpoint
  //SEG11 main::@3
  b3:
  //SEG12 [2] call addpoint param-assignment [ ]
  //SEG13 [93] phi from main::@3 to addpoint
  //SEG14 [2] phi (byte) addpoint::c#6 = (byte) 2 -- zpby1=coby1 
    lda #$2
    sta addpoint.c
  //SEG15 [2] phi (byte) addpoint::y#6 = (byte) 8 -- yby=coby1 
    ldy #$8
  //SEG16 [2] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG17 [2] phi (byte) addpoint::x#6 = (byte) 15 -- aby=coby1 
    lda #$f
    jsr addpoint
  //SEG18 main::@4
  b4:
  //SEG19 [3] call addpoint param-assignment [ ]
  //SEG20 [93] phi from main::@4 to addpoint
  //SEG21 [3] phi (byte) addpoint::c#6 = (byte) 3 -- zpby1=coby1 
    lda #$3
    sta addpoint.c
  //SEG22 [3] phi (byte) addpoint::y#6 = (byte) 14 -- yby=coby1 
    ldy #$e
  //SEG23 [3] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG24 [3] phi (byte) addpoint::x#6 = (byte) 6 -- aby=coby1 
    lda #$6
    jsr addpoint
  //SEG25 main::@5
  b5:
  //SEG26 [4] call addpoint param-assignment [ ]
  //SEG27 [93] phi from main::@5 to addpoint
  //SEG28 [4] phi (byte) addpoint::c#6 = (byte) 4 -- zpby1=coby1 
    lda #$4
    sta addpoint.c
  //SEG29 [4] phi (byte) addpoint::y#6 = (byte) 2 -- yby=coby1 
    ldy #$2
  //SEG30 [4] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG31 [4] phi (byte) addpoint::x#6 = (byte) 34 -- aby=coby1 
    lda #$22
    jsr addpoint
  //SEG32 main::@6
  b6:
  //SEG33 [5] call addpoint param-assignment [ ]
  //SEG34 [93] phi from main::@6 to addpoint
  //SEG35 [5] phi (byte) addpoint::c#6 = (byte) 5 -- zpby1=coby1 
    lda #$5
    sta addpoint.c
  //SEG36 [5] phi (byte) addpoint::y#6 = (byte) 17 -- yby=coby1 
    ldy #$11
  //SEG37 [5] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG38 [5] phi (byte) addpoint::x#6 = (byte) 21 -- aby=coby1 
    lda #$15
    jsr addpoint
  //SEG39 main::@7
  b7:
  //SEG40 [6] call addpoint param-assignment [ ]
  //SEG41 [93] phi from main::@7 to addpoint
  //SEG42 [6] phi (byte) addpoint::c#6 = (byte) 7 -- zpby1=coby1 
    lda #$7
    sta addpoint.c
  //SEG43 [6] phi (byte) addpoint::y#6 = (byte) 22 -- yby=coby1 
    ldy #$16
  //SEG44 [6] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG45 [6] phi (byte) addpoint::x#6 = (byte) 31 -- aby=coby1 
    lda #$1f
    jsr addpoint
  //SEG46 main::@8
  b8:
  //SEG47 [7] call initscreen param-assignment [ ]
    jsr initscreen
  //SEG48 main::@1
  b1:
  //SEG49 [8] call render param-assignment [ ]
    jsr render
  //SEG50 main::@10
  b10:
  //SEG51 [9] call animate param-assignment [ ]
    jsr animate
  //SEG52 main::@11
  b11:
  //SEG53 [10] if(true) goto main::@1 [ ] -- true_then_la1 
    jmp b1
  //SEG54 main::@return
  breturn:
  //SEG55 [11] return  [ ]
    rts
}
//SEG56 animate
animate: {
  //SEG57 [12] (byte~) animate::$0 ← * (word) 4096 [ animate::$0 ] -- aby=_star_cowo1 
    lda $1000
  //SEG58 [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ] -- aby=aby_plus_1 
    clc
    adc #$1
  //SEG59 [14] *((word) 4096) ← (byte~) animate::$1 [ ] -- _star_cowo1=aby 
    sta $1000
  //SEG60 [15] (byte~) animate::$2 ← * (word) 4096 [ animate::$2 ] -- aby=_star_cowo1 
    lda $1000
  //SEG61 [16] if((byte~) animate::$2!=(byte) 40) goto animate::@1 [ ] -- aby_neq_coby1_then_la1 
    cmp #$28
    bne b1
  //SEG62 animate::@7
  b7:
  //SEG63 [17] *((word) 4096) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #$0
    sta $1000
  //SEG64 animate::@1
  b1:
  //SEG65 [18] (byte~) animate::$5 ← * (word) 4352 [ animate::$5 ] -- aby=_star_cowo1 
    lda $1100
  //SEG66 [19] (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1 [ animate::$6 ] -- aby=aby_plus_1 
    clc
    adc #$1
  //SEG67 [20] *((word) 4352) ← (byte~) animate::$6 [ ] -- _star_cowo1=aby 
    sta $1100
  //SEG68 [21] (byte~) animate::$7 ← * (word) 4352 [ animate::$7 ] -- aby=_star_cowo1 
    lda $1100
  //SEG69 [22] if((byte~) animate::$7!=(byte) 25) goto animate::@2 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b2
  //SEG70 animate::@8
  b8:
  //SEG71 [23] *((word) 4352) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #$0
    sta $1100
  //SEG72 animate::@2
  b2:
  //SEG73 [24] (byte~) animate::$10 ← * (word) 4097 [ animate::$10 ] -- xby=_star_cowo1 
    ldx $1001
  //SEG74 [25] (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1 [ animate::$11 ] -- xby=xby_minus_1 
    dex
  //SEG75 [26] *((word) 4097) ← (byte~) animate::$11 [ ] -- _star_cowo1=xby 
    stx $1001
  //SEG76 [27] (byte~) animate::$12 ← * (word) 4097 [ animate::$12 ] -- aby=_star_cowo1 
    lda $1001
  //SEG77 [28] if((byte~) animate::$12!=(byte) 255) goto animate::@3 [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b3
  //SEG78 animate::@9
  b9:
  //SEG79 [29] *((word) 4097) ← (byte) 40 [ ] -- _star_cowo1=coby2 
    lda #$28
    sta $1001
  //SEG80 animate::@3
  b3:
  //SEG81 [30] (byte~) animate::$15 ← * (word) 4354 [ animate::$15 ] -- aby=_star_cowo1 
    lda $1102
  //SEG82 [31] (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1 [ animate::$16 ] -- aby=aby_plus_1 
    clc
    adc #$1
  //SEG83 [32] *((word) 4354) ← (byte~) animate::$16 [ ] -- _star_cowo1=aby 
    sta $1102
  //SEG84 [33] (byte~) animate::$17 ← * (word) 4354 [ animate::$17 ] -- aby=_star_cowo1 
    lda $1102
  //SEG85 [34] if((byte~) animate::$17!=(byte) 25) goto animate::@4 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b4
  //SEG86 animate::@10
  b10:
  //SEG87 [35] *((word) 4354) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #$0
    sta $1102
  //SEG88 animate::@4
  b4:
  //SEG89 [36] (byte~) animate::$20 ← * (word) 4355 [ animate::$20 ] -- xby=_star_cowo1 
    ldx $1103
  //SEG90 [37] (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1 [ animate::$21 ] -- xby=xby_minus_1 
    dex
  //SEG91 [38] *((word) 4355) ← (byte~) animate::$21 [ ] -- _star_cowo1=xby 
    stx $1103
  //SEG92 [39] (byte~) animate::$22 ← * (word) 4355 [ animate::$22 ] -- aby=_star_cowo1 
    lda $1103
  //SEG93 [40] if((byte~) animate::$22!=(byte) 255) goto animate::@return [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne breturn
  //SEG94 animate::@11
  b11:
  //SEG95 [41] *((word) 4355) ← (byte) 25 [ ] -- _star_cowo1=coby2 
    lda #$19
    sta $1103
  //SEG96 [42] (byte~) animate::$25 ← * (word) 4099 [ animate::$25 ] -- aby=_star_cowo1 
    lda $1003
  //SEG97 [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ] -- aby=aby_plus_coby1 
    clc
    adc #$7
  //SEG98 [44] *((word) 4099) ← (byte~) animate::$26 [ ] -- _star_cowo1=aby 
    sta $1003
  //SEG99 [45] (byte~) animate::$27 ← * (word) 4099 [ animate::$27 ] -- aby=_star_cowo1 
    lda $1003
  //SEG100 [46] if((byte~) animate::$27<(byte) 40) goto animate::@return [ ] -- aby_lt_coby1_then_la1 
    cmp #$28
    bcc breturn
  //SEG101 animate::@12
  b12:
  //SEG102 [47] (byte~) animate::$30 ← * (word) 4099 [ animate::$30 ] -- aby=_star_cowo1 
    lda $1003
  //SEG103 [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ] -- aby=aby_minus_coby1 
    sec
    sbc #$28
  //SEG104 [49] *((word) 4099) ← (byte~) animate::$31 [ ] -- _star_cowo1=aby 
    sta $1003
  //SEG105 animate::@return
  breturn:
  //SEG106 [50] return  [ ]
    rts
}
//SEG107 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG108 [51] phi from render to render::@1
  b1_from_render:
  //SEG109 [51] phi (byte*) render::colline#2 = (word) 55296 -- zpptrby1=cowo1 
    lda #<$d800
    sta colline
    lda #>$d800
    sta colline+$1
  //SEG110 [51] phi (byte) render::y#2 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta y
    jmp b1
  //SEG111 [51] phi from render::@3 to render::@1
  //SEG112 [51] phi (byte*) render::colline#2 = (byte*) render::colline#1 -- register_copy 
  //SEG113 [51] phi (byte) render::y#2 = (byte) render::y#1 -- register_copy 
  //SEG114 render::@1
  b1:
  //SEG115 [52] phi from render::@1 to render::@2
  //SEG116 [52] phi (byte) render::x#2 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta x
    jmp b2
  //SEG117 [52] phi from render::@5 to render::@2
  //SEG118 [52] phi (byte) render::x#2 = (byte) render::x#1 -- register_copy 
  //SEG119 render::@2
  b2:
  //SEG120 [53] (byte) findcol::x#0 ← (byte) render::x#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
    lda x
    sta findcol.x
  //SEG121 [54] (byte) findcol::y#0 ← (byte) render::y#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
    lda y
    sta findcol.y
  //SEG122 [55] call findcol param-assignment [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
    jsr findcol
  //SEG123 render::@5
  b5:
  //SEG124 [56] (byte) render::col#0 ← (byte) findcol::return#0 [ render::x#2 render::y#2 render::colline#2 render::col#0 ] -- aby=yby 
    tya
  //SEG125 [57] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::x#2 render::y#2 render::colline#2 ] -- zpptrby1_staridx_zpby1=aby 
    ldy x
    sta (colline),y
  //SEG126 [58] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG127 [59] if((byte) render::x#1!=(byte) 40) goto render::@2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2
  //SEG128 render::@3
  b3:
  //SEG129 [60] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::colline#1 render::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+$1
  !:
  //SEG130 [61] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 ] -- zpby1=_inc_zpby1 
    inc y
  //SEG131 [62] if((byte) render::y#1!=(byte) 25) goto render::@1 [ render::y#1 render::colline#1 ] -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1
  //SEG132 render::@return
  breturn:
  //SEG133 [63] return  [ ]
    rts
}
//SEG134 findcol
findcol: {
    .label x = 9
    .label y = 10
    .label xp = 7
    .label yp = 11
    .label diff = 7
    .label mindiff = 6
  //SEG135 [64] phi from findcol to findcol::@1
  b1_from_findcol:
  //SEG136 [64] phi (byte) findcol::mincol#11 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG137 [64] phi (byte) findcol::mindiff#10 = (byte) 255 -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG138 [64] phi (byte) findcol::i#12 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG139 findcol::@1
  b1:
  //SEG140 [65] (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda $1000,x
    sta xp
  //SEG141 [66] (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda $1100,x
    sta yp
  //SEG142 [67] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
  //SEG143 findcol::@9
  b9:
  //SEG144 [68] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG145 [69] phi from findcol::@9 to findcol::@return
  breturn_from_b9:
  //SEG146 [69] phi (byte) findcol::return#0 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG147 findcol::@return
  breturn:
  //SEG148 [70] return  [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
    rts
  //SEG149 findcol::@2
  b2:
  //SEG150 [71] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
  //SEG151 findcol::@12
  b12:
  //SEG152 [72] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#1 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby1_minus_zpby2 
    lda diff
    sec
    sbc x
    sta diff
  //SEG153 [73] phi from findcol::@12 to findcol::@5
  //SEG154 [73] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 -- register_copy 
  //SEG155 findcol::@5
  b5:
  //SEG156 [74] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
  //SEG157 findcol::@14
  b14:
  //SEG158 [75] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::$12 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_minus_zpby2 
    lda yp
    sec
    sbc y
  //SEG159 [76] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#3 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG160 [77] phi from findcol::@14 to findcol::@7
  //SEG161 [77] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 -- register_copy 
  //SEG162 findcol::@7
  b7:
  //SEG163 [78] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby_ge_zpby1_then_la1 
    cmp mindiff
    bcs b21
  //SEG164 findcol::@16
  b16:
  //SEG165 [79] (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mincol#1 numpoints#1 ] -- yby=cowo1_staridx_xby 
    ldy $1200,x
  //SEG166 [80] phi from findcol::@16 to findcol::@8
  //SEG167 [80] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 -- register_copy 
  //SEG168 [80] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 -- register_copy 
  //SEG169 findcol::@8
  b8:
  //SEG170 [81] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 findcol::mindiff#11 ] -- xby=_inc_xby 
    inx
  //SEG171 [82] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@19 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 findcol::mindiff#11 ] -- xby_lt_zpby1_then_la1 
    cpx numpoints
    bcc b19
  //SEG172 [69] phi from findcol::@8 to findcol::@return
  breturn_from_b8:
  //SEG173 [69] phi (byte) findcol::return#0 = (byte) findcol::mincol#2 -- register_copy 
    jmp breturn
  //SEG174 findcol::@19
  b19:
  //SEG175 [83] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- zpby1=aby 
    sta mindiff
  //SEG176 [64] phi from findcol::@19 to findcol::@1
  b1_from_b19:
  //SEG177 [64] phi (byte) findcol::mincol#11 = (byte) findcol::mincol#2 -- register_copy 
  //SEG178 [64] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 -- register_copy 
  //SEG179 [64] phi (byte) findcol::i#12 = (byte) findcol::i#1 -- register_copy 
    jmp b1
  //SEG180 findcol::@21
  b21:
  //SEG181 [84] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#11 findcol::mindiff#14 numpoints#1 ] -- aby=zpby1 
    lda mindiff
  //SEG182 [80] phi from findcol::@21 to findcol::@8
  b8_from_b21:
  //SEG183 [80] phi (byte) findcol::mindiff#11 = (byte~) findcol::mindiff#14 -- register_copy 
  //SEG184 [80] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#11 -- register_copy 
    jmp b8
  //SEG185 findcol::@6
  b6:
  //SEG186 [85] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 findcol::$14 ] -- aby=zpby1_minus_zpby2 
    lda y
    sec
    sbc yp
  //SEG187 [86] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#2 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG188 [77] phi from findcol::@6 to findcol::@7
  b7_from_b6:
  //SEG189 [77] phi (byte) findcol::diff#6 = (byte) findcol::diff#2 -- register_copy 
    jmp b7
  //SEG190 findcol::@4
  b4:
  //SEG191 [87] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby2_minus_zpby1 
    lda x
    sec
    sbc diff
    sta diff
  //SEG192 [73] phi from findcol::@4 to findcol::@5
  b5_from_b4:
  //SEG193 [73] phi (byte) findcol::diff#4 = (byte) findcol::diff#0 -- register_copy 
    jmp b5
}
//SEG194 initscreen
initscreen: {
    .label screen = 3
  //SEG195 [88] phi from initscreen to initscreen::@1
  b1_from_initscreen:
  //SEG196 [88] phi (byte*) initscreen::screen#2 = (word) 1024 -- zpptrby1=cowo1 
    lda #<$400
    sta screen
    lda #>$400
    sta screen+$1
    jmp b1
  //SEG197 [88] phi from initscreen::@1 to initscreen::@1
  //SEG198 [88] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 -- register_copy 
  //SEG199 initscreen::@1
  b1:
  //SEG200 [89] *((byte*) initscreen::screen#2) ← (byte) 230 [ initscreen::screen#2 ] -- _star_zpptrby1=coby1 
    ldy #$0
    lda #$e6
    sta (screen),y
  //SEG201 [90] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+$1
  !:
  //SEG202 [91] if((byte*) initscreen::screen#1<(word) 2024) goto initscreen::@1 [ initscreen::screen#1 ] -- zpptrby1_lt_cowo1_then_la1 
    lda screen+$1
    cmp #>$7e8
    bcc b1
    bne !+
    lda screen
    cmp #<$7e8
    bcc b1
  !:
  //SEG203 initscreen::@return
  breturn:
  //SEG204 [92] return  [ ]
    rts
}
//SEG205 addpoint
addpoint: {
    .label c = 2
  //SEG206 [94] *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ] -- cowo1_staridx_zpby1=aby 
    ldx numpoints
    sta $1000,x
  //SEG207 [95] *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ] -- cowo1_staridx_zpby1=yby 
    tya
    ldy numpoints
    sta $1100,y
  //SEG208 [96] *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ] -- cowo1_staridx_zpby1=zpby2 
    lda c
    ldx numpoints
    sta $1200,x
  //SEG209 [97] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ ] -- zpby1=_inc_zpby1 
    inc numpoints
  //SEG210 addpoint::@return
  breturn:
  //SEG211 [98] return  [ ]
    rts
}

Removing instruction bbegin:
Removing instruction bend:
Removing instruction addpoint_from_main:
Removing instruction b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b10:
Removing instruction b11:
Removing instruction breturn:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction b1_from_render:
Removing instruction b5:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_findcol:
Removing instruction b9:
Removing instruction breturn_from_b9:
Removing instruction b12:
Removing instruction b14:
Removing instruction b16:
Removing instruction breturn_from_b8:
Removing instruction b1_from_b19:
Removing instruction b8_from_b21:
Removing instruction b7_from_b6:
Removing instruction b5_from_b4:
Removing instruction b1_from_initscreen:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Global ZP labels
  .label numpoints = 8
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
//SEG4 main
main: {
  //SEG5 [1] call addpoint param-assignment [ ]
  //SEG6 [93] phi from main to addpoint
  //SEG7 [1] phi (byte) addpoint::c#6 = (byte) 1 -- zpby1=coby1 
    lda #$1
    sta addpoint.c
  //SEG8 [1] phi (byte) addpoint::y#6 = (byte) 5 -- yby=coby1 
    ldy #$5
  //SEG9 [1] phi (byte) numpoints#19 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta numpoints
  //SEG10 [1] phi (byte) addpoint::x#6 = (byte) 5 -- aby=coby1 
    lda #$5
    jsr addpoint
  //SEG11 main::@3
  //SEG12 [2] call addpoint param-assignment [ ]
  //SEG13 [93] phi from main::@3 to addpoint
  //SEG14 [2] phi (byte) addpoint::c#6 = (byte) 2 -- zpby1=coby1 
    lda #$2
    sta addpoint.c
  //SEG15 [2] phi (byte) addpoint::y#6 = (byte) 8 -- yby=coby1 
    ldy #$8
  //SEG16 [2] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG17 [2] phi (byte) addpoint::x#6 = (byte) 15 -- aby=coby1 
    lda #$f
    jsr addpoint
  //SEG18 main::@4
  //SEG19 [3] call addpoint param-assignment [ ]
  //SEG20 [93] phi from main::@4 to addpoint
  //SEG21 [3] phi (byte) addpoint::c#6 = (byte) 3 -- zpby1=coby1 
    lda #$3
    sta addpoint.c
  //SEG22 [3] phi (byte) addpoint::y#6 = (byte) 14 -- yby=coby1 
    ldy #$e
  //SEG23 [3] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG24 [3] phi (byte) addpoint::x#6 = (byte) 6 -- aby=coby1 
    lda #$6
    jsr addpoint
  //SEG25 main::@5
  //SEG26 [4] call addpoint param-assignment [ ]
  //SEG27 [93] phi from main::@5 to addpoint
  //SEG28 [4] phi (byte) addpoint::c#6 = (byte) 4 -- zpby1=coby1 
    lda #$4
    sta addpoint.c
  //SEG29 [4] phi (byte) addpoint::y#6 = (byte) 2 -- yby=coby1 
    ldy #$2
  //SEG30 [4] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG31 [4] phi (byte) addpoint::x#6 = (byte) 34 -- aby=coby1 
    lda #$22
    jsr addpoint
  //SEG32 main::@6
  //SEG33 [5] call addpoint param-assignment [ ]
  //SEG34 [93] phi from main::@6 to addpoint
  //SEG35 [5] phi (byte) addpoint::c#6 = (byte) 5 -- zpby1=coby1 
    lda #$5
    sta addpoint.c
  //SEG36 [5] phi (byte) addpoint::y#6 = (byte) 17 -- yby=coby1 
    ldy #$11
  //SEG37 [5] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG38 [5] phi (byte) addpoint::x#6 = (byte) 21 -- aby=coby1 
    lda #$15
    jsr addpoint
  //SEG39 main::@7
  //SEG40 [6] call addpoint param-assignment [ ]
  //SEG41 [93] phi from main::@7 to addpoint
  //SEG42 [6] phi (byte) addpoint::c#6 = (byte) 7 -- zpby1=coby1 
    lda #$7
    sta addpoint.c
  //SEG43 [6] phi (byte) addpoint::y#6 = (byte) 22 -- yby=coby1 
    ldy #$16
  //SEG44 [6] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG45 [6] phi (byte) addpoint::x#6 = (byte) 31 -- aby=coby1 
    lda #$1f
    jsr addpoint
  //SEG46 main::@8
  //SEG47 [7] call initscreen param-assignment [ ]
    jsr initscreen
  //SEG48 main::@1
  b1:
  //SEG49 [8] call render param-assignment [ ]
    jsr render
  //SEG50 main::@10
  //SEG51 [9] call animate param-assignment [ ]
    jsr animate
  //SEG52 main::@11
  //SEG53 [10] if(true) goto main::@1 [ ] -- true_then_la1 
    jmp b1
  //SEG54 main::@return
  //SEG55 [11] return  [ ]
    rts
}
//SEG56 animate
animate: {
  //SEG57 [12] (byte~) animate::$0 ← * (word) 4096 [ animate::$0 ] -- aby=_star_cowo1 
    lda $1000
  //SEG58 [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ] -- aby=aby_plus_1 
    clc
    adc #$1
  //SEG59 [14] *((word) 4096) ← (byte~) animate::$1 [ ] -- _star_cowo1=aby 
    sta $1000
  //SEG60 [15] (byte~) animate::$2 ← * (word) 4096 [ animate::$2 ] -- aby=_star_cowo1 
    lda $1000
  //SEG61 [16] if((byte~) animate::$2!=(byte) 40) goto animate::@1 [ ] -- aby_neq_coby1_then_la1 
    cmp #$28
    bne b1
  //SEG62 animate::@7
  //SEG63 [17] *((word) 4096) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #$0
    sta $1000
  //SEG64 animate::@1
  b1:
  //SEG65 [18] (byte~) animate::$5 ← * (word) 4352 [ animate::$5 ] -- aby=_star_cowo1 
    lda $1100
  //SEG66 [19] (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1 [ animate::$6 ] -- aby=aby_plus_1 
    clc
    adc #$1
  //SEG67 [20] *((word) 4352) ← (byte~) animate::$6 [ ] -- _star_cowo1=aby 
    sta $1100
  //SEG68 [21] (byte~) animate::$7 ← * (word) 4352 [ animate::$7 ] -- aby=_star_cowo1 
    lda $1100
  //SEG69 [22] if((byte~) animate::$7!=(byte) 25) goto animate::@2 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b2
  //SEG70 animate::@8
  //SEG71 [23] *((word) 4352) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #$0
    sta $1100
  //SEG72 animate::@2
  b2:
  //SEG73 [24] (byte~) animate::$10 ← * (word) 4097 [ animate::$10 ] -- xby=_star_cowo1 
    ldx $1001
  //SEG74 [25] (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1 [ animate::$11 ] -- xby=xby_minus_1 
    dex
  //SEG75 [26] *((word) 4097) ← (byte~) animate::$11 [ ] -- _star_cowo1=xby 
    stx $1001
  //SEG76 [27] (byte~) animate::$12 ← * (word) 4097 [ animate::$12 ] -- aby=_star_cowo1 
    lda $1001
  //SEG77 [28] if((byte~) animate::$12!=(byte) 255) goto animate::@3 [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b3
  //SEG78 animate::@9
  //SEG79 [29] *((word) 4097) ← (byte) 40 [ ] -- _star_cowo1=coby2 
    lda #$28
    sta $1001
  //SEG80 animate::@3
  b3:
  //SEG81 [30] (byte~) animate::$15 ← * (word) 4354 [ animate::$15 ] -- aby=_star_cowo1 
    lda $1102
  //SEG82 [31] (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1 [ animate::$16 ] -- aby=aby_plus_1 
    clc
    adc #$1
  //SEG83 [32] *((word) 4354) ← (byte~) animate::$16 [ ] -- _star_cowo1=aby 
    sta $1102
  //SEG84 [33] (byte~) animate::$17 ← * (word) 4354 [ animate::$17 ] -- aby=_star_cowo1 
    lda $1102
  //SEG85 [34] if((byte~) animate::$17!=(byte) 25) goto animate::@4 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b4
  //SEG86 animate::@10
  //SEG87 [35] *((word) 4354) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #$0
    sta $1102
  //SEG88 animate::@4
  b4:
  //SEG89 [36] (byte~) animate::$20 ← * (word) 4355 [ animate::$20 ] -- xby=_star_cowo1 
    ldx $1103
  //SEG90 [37] (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1 [ animate::$21 ] -- xby=xby_minus_1 
    dex
  //SEG91 [38] *((word) 4355) ← (byte~) animate::$21 [ ] -- _star_cowo1=xby 
    stx $1103
  //SEG92 [39] (byte~) animate::$22 ← * (word) 4355 [ animate::$22 ] -- aby=_star_cowo1 
    lda $1103
  //SEG93 [40] if((byte~) animate::$22!=(byte) 255) goto animate::@return [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne breturn
  //SEG94 animate::@11
  //SEG95 [41] *((word) 4355) ← (byte) 25 [ ] -- _star_cowo1=coby2 
    lda #$19
    sta $1103
  //SEG96 [42] (byte~) animate::$25 ← * (word) 4099 [ animate::$25 ] -- aby=_star_cowo1 
    lda $1003
  //SEG97 [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ] -- aby=aby_plus_coby1 
    clc
    adc #$7
  //SEG98 [44] *((word) 4099) ← (byte~) animate::$26 [ ] -- _star_cowo1=aby 
    sta $1003
  //SEG99 [45] (byte~) animate::$27 ← * (word) 4099 [ animate::$27 ] -- aby=_star_cowo1 
    lda $1003
  //SEG100 [46] if((byte~) animate::$27<(byte) 40) goto animate::@return [ ] -- aby_lt_coby1_then_la1 
    cmp #$28
    bcc breturn
  //SEG101 animate::@12
  //SEG102 [47] (byte~) animate::$30 ← * (word) 4099 [ animate::$30 ] -- aby=_star_cowo1 
    lda $1003
  //SEG103 [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ] -- aby=aby_minus_coby1 
    sec
    sbc #$28
  //SEG104 [49] *((word) 4099) ← (byte~) animate::$31 [ ] -- _star_cowo1=aby 
    sta $1003
  //SEG105 animate::@return
  breturn:
  //SEG106 [50] return  [ ]
    rts
}
//SEG107 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG108 [51] phi from render to render::@1
  //SEG109 [51] phi (byte*) render::colline#2 = (word) 55296 -- zpptrby1=cowo1 
    lda #<$d800
    sta colline
    lda #>$d800
    sta colline+$1
  //SEG110 [51] phi (byte) render::y#2 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta y
    jmp b1
  //SEG111 [51] phi from render::@3 to render::@1
  //SEG112 [51] phi (byte*) render::colline#2 = (byte*) render::colline#1 -- register_copy 
  //SEG113 [51] phi (byte) render::y#2 = (byte) render::y#1 -- register_copy 
  //SEG114 render::@1
  b1:
  //SEG115 [52] phi from render::@1 to render::@2
  //SEG116 [52] phi (byte) render::x#2 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta x
    jmp b2
  //SEG117 [52] phi from render::@5 to render::@2
  //SEG118 [52] phi (byte) render::x#2 = (byte) render::x#1 -- register_copy 
  //SEG119 render::@2
  b2:
  //SEG120 [53] (byte) findcol::x#0 ← (byte) render::x#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
    lda x
    sta findcol.x
  //SEG121 [54] (byte) findcol::y#0 ← (byte) render::y#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
    lda y
    sta findcol.y
  //SEG122 [55] call findcol param-assignment [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
    jsr findcol
  //SEG123 render::@5
  //SEG124 [56] (byte) render::col#0 ← (byte) findcol::return#0 [ render::x#2 render::y#2 render::colline#2 render::col#0 ] -- aby=yby 
    tya
  //SEG125 [57] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::x#2 render::y#2 render::colline#2 ] -- zpptrby1_staridx_zpby1=aby 
    ldy x
    sta (colline),y
  //SEG126 [58] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG127 [59] if((byte) render::x#1!=(byte) 40) goto render::@2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2
  //SEG128 render::@3
  //SEG129 [60] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::colline#1 render::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+$1
  !:
  //SEG130 [61] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 ] -- zpby1=_inc_zpby1 
    inc y
  //SEG131 [62] if((byte) render::y#1!=(byte) 25) goto render::@1 [ render::y#1 render::colline#1 ] -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1
  //SEG132 render::@return
  //SEG133 [63] return  [ ]
    rts
}
//SEG134 findcol
findcol: {
    .label x = 9
    .label y = 10
    .label xp = 7
    .label yp = 11
    .label diff = 7
    .label mindiff = 6
  //SEG135 [64] phi from findcol to findcol::@1
  //SEG136 [64] phi (byte) findcol::mincol#11 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG137 [64] phi (byte) findcol::mindiff#10 = (byte) 255 -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG138 [64] phi (byte) findcol::i#12 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG139 findcol::@1
  b1:
  //SEG140 [65] (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda $1000,x
    sta xp
  //SEG141 [66] (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda $1100,x
    sta yp
  //SEG142 [67] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
  //SEG143 findcol::@9
  //SEG144 [68] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG145 [69] phi from findcol::@9 to findcol::@return
  //SEG146 [69] phi (byte) findcol::return#0 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG147 findcol::@return
  breturn:
  //SEG148 [70] return  [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
    rts
  //SEG149 findcol::@2
  b2:
  //SEG150 [71] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
  //SEG151 findcol::@12
  //SEG152 [72] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#1 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby1_minus_zpby2 
    lda diff
    sec
    sbc x
    sta diff
  //SEG153 [73] phi from findcol::@12 to findcol::@5
  //SEG154 [73] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 -- register_copy 
  //SEG155 findcol::@5
  b5:
  //SEG156 [74] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
  //SEG157 findcol::@14
  //SEG158 [75] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::$12 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_minus_zpby2 
    lda yp
    sec
    sbc y
  //SEG159 [76] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#3 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG160 [77] phi from findcol::@14 to findcol::@7
  //SEG161 [77] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 -- register_copy 
  //SEG162 findcol::@7
  b7:
  //SEG163 [78] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby_ge_zpby1_then_la1 
    cmp mindiff
    bcs b21
  //SEG164 findcol::@16
  //SEG165 [79] (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mincol#1 numpoints#1 ] -- yby=cowo1_staridx_xby 
    ldy $1200,x
  //SEG166 [80] phi from findcol::@16 to findcol::@8
  //SEG167 [80] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 -- register_copy 
  //SEG168 [80] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 -- register_copy 
  //SEG169 findcol::@8
  b8:
  //SEG170 [81] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 findcol::mindiff#11 ] -- xby=_inc_xby 
    inx
  //SEG171 [82] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@19 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 findcol::mindiff#11 ] -- xby_lt_zpby1_then_la1 
    cpx numpoints
    bcc b19
  //SEG172 [69] phi from findcol::@8 to findcol::@return
  //SEG173 [69] phi (byte) findcol::return#0 = (byte) findcol::mincol#2 -- register_copy 
    jmp breturn
  //SEG174 findcol::@19
  b19:
  //SEG175 [83] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- zpby1=aby 
    sta mindiff
  //SEG176 [64] phi from findcol::@19 to findcol::@1
  //SEG177 [64] phi (byte) findcol::mincol#11 = (byte) findcol::mincol#2 -- register_copy 
  //SEG178 [64] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 -- register_copy 
  //SEG179 [64] phi (byte) findcol::i#12 = (byte) findcol::i#1 -- register_copy 
    jmp b1
  //SEG180 findcol::@21
  b21:
  //SEG181 [84] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#11 findcol::mindiff#14 numpoints#1 ] -- aby=zpby1 
    lda mindiff
  //SEG182 [80] phi from findcol::@21 to findcol::@8
  //SEG183 [80] phi (byte) findcol::mindiff#11 = (byte~) findcol::mindiff#14 -- register_copy 
  //SEG184 [80] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#11 -- register_copy 
    jmp b8
  //SEG185 findcol::@6
  b6:
  //SEG186 [85] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 findcol::$14 ] -- aby=zpby1_minus_zpby2 
    lda y
    sec
    sbc yp
  //SEG187 [86] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#2 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG188 [77] phi from findcol::@6 to findcol::@7
  //SEG189 [77] phi (byte) findcol::diff#6 = (byte) findcol::diff#2 -- register_copy 
    jmp b7
  //SEG190 findcol::@4
  b4:
  //SEG191 [87] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby2_minus_zpby1 
    lda x
    sec
    sbc diff
    sta diff
  //SEG192 [73] phi from findcol::@4 to findcol::@5
  //SEG193 [73] phi (byte) findcol::diff#4 = (byte) findcol::diff#0 -- register_copy 
    jmp b5
}
//SEG194 initscreen
initscreen: {
    .label screen = 3
  //SEG195 [88] phi from initscreen to initscreen::@1
  //SEG196 [88] phi (byte*) initscreen::screen#2 = (word) 1024 -- zpptrby1=cowo1 
    lda #<$400
    sta screen
    lda #>$400
    sta screen+$1
    jmp b1
  //SEG197 [88] phi from initscreen::@1 to initscreen::@1
  //SEG198 [88] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 -- register_copy 
  //SEG199 initscreen::@1
  b1:
  //SEG200 [89] *((byte*) initscreen::screen#2) ← (byte) 230 [ initscreen::screen#2 ] -- _star_zpptrby1=coby1 
    ldy #$0
    lda #$e6
    sta (screen),y
  //SEG201 [90] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+$1
  !:
  //SEG202 [91] if((byte*) initscreen::screen#1<(word) 2024) goto initscreen::@1 [ initscreen::screen#1 ] -- zpptrby1_lt_cowo1_then_la1 
    lda screen+$1
    cmp #>$7e8
    bcc b1
    bne !+
    lda screen
    cmp #<$7e8
    bcc b1
  !:
  //SEG203 initscreen::@return
  //SEG204 [92] return  [ ]
    rts
}
//SEG205 addpoint
addpoint: {
    .label c = 2
  //SEG206 [94] *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ] -- cowo1_staridx_zpby1=aby 
    ldx numpoints
    sta $1000,x
  //SEG207 [95] *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ] -- cowo1_staridx_zpby1=yby 
    tya
    ldy numpoints
    sta $1100,y
  //SEG208 [96] *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ] -- cowo1_staridx_zpby1=zpby2 
    lda c
    ldx numpoints
    sta $1200,x
  //SEG209 [97] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ ] -- zpby1=_inc_zpby1 
    inc numpoints
  //SEG210 addpoint::@return
  //SEG211 [98] return  [ ]
    rts
}

Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global ZP labels
  .label numpoints = 8
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
//SEG4 main
main: {
  //SEG5 [1] call addpoint param-assignment [ ]
  //SEG6 [93] phi from main to addpoint
  //SEG7 [1] phi (byte) addpoint::c#6 = (byte) 1 -- zpby1=coby1 
    lda #$1
    sta addpoint.c
  //SEG8 [1] phi (byte) addpoint::y#6 = (byte) 5 -- yby=coby1 
    ldy #$5
  //SEG9 [1] phi (byte) numpoints#19 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta numpoints
  //SEG10 [1] phi (byte) addpoint::x#6 = (byte) 5 -- aby=coby1 
    lda #$5
    jsr addpoint
  //SEG11 main::@3
  //SEG12 [2] call addpoint param-assignment [ ]
  //SEG13 [93] phi from main::@3 to addpoint
  //SEG14 [2] phi (byte) addpoint::c#6 = (byte) 2 -- zpby1=coby1 
    lda #$2
    sta addpoint.c
  //SEG15 [2] phi (byte) addpoint::y#6 = (byte) 8 -- yby=coby1 
    ldy #$8
  //SEG16 [2] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG17 [2] phi (byte) addpoint::x#6 = (byte) 15 -- aby=coby1 
    lda #$f
    jsr addpoint
  //SEG18 main::@4
  //SEG19 [3] call addpoint param-assignment [ ]
  //SEG20 [93] phi from main::@4 to addpoint
  //SEG21 [3] phi (byte) addpoint::c#6 = (byte) 3 -- zpby1=coby1 
    lda #$3
    sta addpoint.c
  //SEG22 [3] phi (byte) addpoint::y#6 = (byte) 14 -- yby=coby1 
    ldy #$e
  //SEG23 [3] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG24 [3] phi (byte) addpoint::x#6 = (byte) 6 -- aby=coby1 
    lda #$6
    jsr addpoint
  //SEG25 main::@5
  //SEG26 [4] call addpoint param-assignment [ ]
  //SEG27 [93] phi from main::@5 to addpoint
  //SEG28 [4] phi (byte) addpoint::c#6 = (byte) 4 -- zpby1=coby1 
    lda #$4
    sta addpoint.c
  //SEG29 [4] phi (byte) addpoint::y#6 = (byte) 2 -- yby=coby1 
    ldy #$2
  //SEG30 [4] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG31 [4] phi (byte) addpoint::x#6 = (byte) 34 -- aby=coby1 
    lda #$22
    jsr addpoint
  //SEG32 main::@6
  //SEG33 [5] call addpoint param-assignment [ ]
  //SEG34 [93] phi from main::@6 to addpoint
  //SEG35 [5] phi (byte) addpoint::c#6 = (byte) 5 -- zpby1=coby1 
    lda #$5
    sta addpoint.c
  //SEG36 [5] phi (byte) addpoint::y#6 = (byte) 17 -- yby=coby1 
    ldy #$11
  //SEG37 [5] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG38 [5] phi (byte) addpoint::x#6 = (byte) 21 -- aby=coby1 
    lda #$15
    jsr addpoint
  //SEG39 main::@7
  //SEG40 [6] call addpoint param-assignment [ ]
  //SEG41 [93] phi from main::@7 to addpoint
  //SEG42 [6] phi (byte) addpoint::c#6 = (byte) 7 -- zpby1=coby1 
    lda #$7
    sta addpoint.c
  //SEG43 [6] phi (byte) addpoint::y#6 = (byte) 22 -- yby=coby1 
    ldy #$16
  //SEG44 [6] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG45 [6] phi (byte) addpoint::x#6 = (byte) 31 -- aby=coby1 
    lda #$1f
    jsr addpoint
  //SEG46 main::@8
  //SEG47 [7] call initscreen param-assignment [ ]
    jsr initscreen
  //SEG48 main::@1
  b1:
  //SEG49 [8] call render param-assignment [ ]
    jsr render
  //SEG50 main::@10
  //SEG51 [9] call animate param-assignment [ ]
    jsr animate
  //SEG52 main::@11
  //SEG53 [10] if(true) goto main::@1 [ ] -- true_then_la1 
    jmp b1
  //SEG54 main::@return
  //SEG55 [11] return  [ ]
    rts
}
//SEG56 animate
animate: {
  //SEG57 [12] (byte~) animate::$0 ← * (word) 4096 [ animate::$0 ] -- aby=_star_cowo1 
    lda $1000
  //SEG58 [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ] -- aby=aby_plus_1 
    clc
    adc #$1
  //SEG59 [14] *((word) 4096) ← (byte~) animate::$1 [ ] -- _star_cowo1=aby 
    sta $1000
  //SEG60 [15] (byte~) animate::$2 ← * (word) 4096 [ animate::$2 ] -- aby=_star_cowo1 
    lda $1000
  //SEG61 [16] if((byte~) animate::$2!=(byte) 40) goto animate::@1 [ ] -- aby_neq_coby1_then_la1 
    cmp #$28
    bne b1
  //SEG62 animate::@7
  //SEG63 [17] *((word) 4096) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #$0
    sta $1000
  //SEG64 animate::@1
  b1:
  //SEG65 [18] (byte~) animate::$5 ← * (word) 4352 [ animate::$5 ] -- aby=_star_cowo1 
    lda $1100
  //SEG66 [19] (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1 [ animate::$6 ] -- aby=aby_plus_1 
    clc
    adc #$1
  //SEG67 [20] *((word) 4352) ← (byte~) animate::$6 [ ] -- _star_cowo1=aby 
    sta $1100
  //SEG68 [21] (byte~) animate::$7 ← * (word) 4352 [ animate::$7 ] -- aby=_star_cowo1 
    lda $1100
  //SEG69 [22] if((byte~) animate::$7!=(byte) 25) goto animate::@2 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b2
  //SEG70 animate::@8
  //SEG71 [23] *((word) 4352) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #$0
    sta $1100
  //SEG72 animate::@2
  b2:
  //SEG73 [24] (byte~) animate::$10 ← * (word) 4097 [ animate::$10 ] -- xby=_star_cowo1 
    ldx $1001
  //SEG74 [25] (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1 [ animate::$11 ] -- xby=xby_minus_1 
    dex
  //SEG75 [26] *((word) 4097) ← (byte~) animate::$11 [ ] -- _star_cowo1=xby 
    stx $1001
  //SEG76 [27] (byte~) animate::$12 ← * (word) 4097 [ animate::$12 ] -- aby=_star_cowo1 
    lda $1001
  //SEG77 [28] if((byte~) animate::$12!=(byte) 255) goto animate::@3 [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b3
  //SEG78 animate::@9
  //SEG79 [29] *((word) 4097) ← (byte) 40 [ ] -- _star_cowo1=coby2 
    lda #$28
    sta $1001
  //SEG80 animate::@3
  b3:
  //SEG81 [30] (byte~) animate::$15 ← * (word) 4354 [ animate::$15 ] -- aby=_star_cowo1 
    lda $1102
  //SEG82 [31] (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1 [ animate::$16 ] -- aby=aby_plus_1 
    clc
    adc #$1
  //SEG83 [32] *((word) 4354) ← (byte~) animate::$16 [ ] -- _star_cowo1=aby 
    sta $1102
  //SEG84 [33] (byte~) animate::$17 ← * (word) 4354 [ animate::$17 ] -- aby=_star_cowo1 
    lda $1102
  //SEG85 [34] if((byte~) animate::$17!=(byte) 25) goto animate::@4 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b4
  //SEG86 animate::@10
  //SEG87 [35] *((word) 4354) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #$0
    sta $1102
  //SEG88 animate::@4
  b4:
  //SEG89 [36] (byte~) animate::$20 ← * (word) 4355 [ animate::$20 ] -- xby=_star_cowo1 
    ldx $1103
  //SEG90 [37] (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1 [ animate::$21 ] -- xby=xby_minus_1 
    dex
  //SEG91 [38] *((word) 4355) ← (byte~) animate::$21 [ ] -- _star_cowo1=xby 
    stx $1103
  //SEG92 [39] (byte~) animate::$22 ← * (word) 4355 [ animate::$22 ] -- aby=_star_cowo1 
    lda $1103
  //SEG93 [40] if((byte~) animate::$22!=(byte) 255) goto animate::@return [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne breturn
  //SEG94 animate::@11
  //SEG95 [41] *((word) 4355) ← (byte) 25 [ ] -- _star_cowo1=coby2 
    lda #$19
    sta $1103
  //SEG96 [42] (byte~) animate::$25 ← * (word) 4099 [ animate::$25 ] -- aby=_star_cowo1 
    lda $1003
  //SEG97 [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ] -- aby=aby_plus_coby1 
    clc
    adc #$7
  //SEG98 [44] *((word) 4099) ← (byte~) animate::$26 [ ] -- _star_cowo1=aby 
    sta $1003
  //SEG99 [45] (byte~) animate::$27 ← * (word) 4099 [ animate::$27 ] -- aby=_star_cowo1 
    lda $1003
  //SEG100 [46] if((byte~) animate::$27<(byte) 40) goto animate::@return [ ] -- aby_lt_coby1_then_la1 
    cmp #$28
    bcc breturn
  //SEG101 animate::@12
  //SEG102 [47] (byte~) animate::$30 ← * (word) 4099 [ animate::$30 ] -- aby=_star_cowo1 
    lda $1003
  //SEG103 [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ] -- aby=aby_minus_coby1 
    sec
    sbc #$28
  //SEG104 [49] *((word) 4099) ← (byte~) animate::$31 [ ] -- _star_cowo1=aby 
    sta $1003
  //SEG105 animate::@return
  breturn:
  //SEG106 [50] return  [ ]
    rts
}
//SEG107 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG108 [51] phi from render to render::@1
  //SEG109 [51] phi (byte*) render::colline#2 = (word) 55296 -- zpptrby1=cowo1 
    lda #<$d800
    sta colline
    lda #>$d800
    sta colline+$1
  //SEG110 [51] phi (byte) render::y#2 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta y
  //SEG111 [51] phi from render::@3 to render::@1
  //SEG112 [51] phi (byte*) render::colline#2 = (byte*) render::colline#1 -- register_copy 
  //SEG113 [51] phi (byte) render::y#2 = (byte) render::y#1 -- register_copy 
  //SEG114 render::@1
  b1:
  //SEG115 [52] phi from render::@1 to render::@2
  //SEG116 [52] phi (byte) render::x#2 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta x
  //SEG117 [52] phi from render::@5 to render::@2
  //SEG118 [52] phi (byte) render::x#2 = (byte) render::x#1 -- register_copy 
  //SEG119 render::@2
  b2:
  //SEG120 [53] (byte) findcol::x#0 ← (byte) render::x#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
    lda x
    sta findcol.x
  //SEG121 [54] (byte) findcol::y#0 ← (byte) render::y#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
    lda y
    sta findcol.y
  //SEG122 [55] call findcol param-assignment [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
    jsr findcol
  //SEG123 render::@5
  //SEG124 [56] (byte) render::col#0 ← (byte) findcol::return#0 [ render::x#2 render::y#2 render::colline#2 render::col#0 ] -- aby=yby 
    tya
  //SEG125 [57] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::x#2 render::y#2 render::colline#2 ] -- zpptrby1_staridx_zpby1=aby 
    ldy x
    sta (colline),y
  //SEG126 [58] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG127 [59] if((byte) render::x#1!=(byte) 40) goto render::@2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2
  //SEG128 render::@3
  //SEG129 [60] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::colline#1 render::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+$1
  !:
  //SEG130 [61] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 ] -- zpby1=_inc_zpby1 
    inc y
  //SEG131 [62] if((byte) render::y#1!=(byte) 25) goto render::@1 [ render::y#1 render::colline#1 ] -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1
  //SEG132 render::@return
  //SEG133 [63] return  [ ]
    rts
}
//SEG134 findcol
findcol: {
    .label x = 9
    .label y = 10
    .label xp = 7
    .label yp = 11
    .label diff = 7
    .label mindiff = 6
  //SEG135 [64] phi from findcol to findcol::@1
  //SEG136 [64] phi (byte) findcol::mincol#11 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG137 [64] phi (byte) findcol::mindiff#10 = (byte) 255 -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG138 [64] phi (byte) findcol::i#12 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG139 findcol::@1
  b1:
  //SEG140 [65] (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda $1000,x
    sta xp
  //SEG141 [66] (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda $1100,x
    sta yp
  //SEG142 [67] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
  //SEG143 findcol::@9
  //SEG144 [68] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG145 [69] phi from findcol::@9 to findcol::@return
  //SEG146 [69] phi (byte) findcol::return#0 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG147 findcol::@return
  breturn:
  //SEG148 [70] return  [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
    rts
  //SEG149 findcol::@2
  b2:
  //SEG150 [71] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
  //SEG151 findcol::@12
  //SEG152 [72] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#1 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby1_minus_zpby2 
    lda diff
    sec
    sbc x
    sta diff
  //SEG153 [73] phi from findcol::@12 to findcol::@5
  //SEG154 [73] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 -- register_copy 
  //SEG155 findcol::@5
  b5:
  //SEG156 [74] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
  //SEG157 findcol::@14
  //SEG158 [75] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::$12 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_minus_zpby2 
    lda yp
    sec
    sbc y
  //SEG159 [76] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#3 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG160 [77] phi from findcol::@14 to findcol::@7
  //SEG161 [77] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 -- register_copy 
  //SEG162 findcol::@7
  b7:
  //SEG163 [78] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby_ge_zpby1_then_la1 
    cmp mindiff
    bcs b21
  //SEG164 findcol::@16
  //SEG165 [79] (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mincol#1 numpoints#1 ] -- yby=cowo1_staridx_xby 
    ldy $1200,x
  //SEG166 [80] phi from findcol::@16 to findcol::@8
  //SEG167 [80] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 -- register_copy 
  //SEG168 [80] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 -- register_copy 
  //SEG169 findcol::@8
  b8:
  //SEG170 [81] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 findcol::mindiff#11 ] -- xby=_inc_xby 
    inx
  //SEG171 [82] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@19 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 findcol::mindiff#11 ] -- xby_lt_zpby1_then_la1 
    cpx numpoints
    bcc b19
  //SEG172 [69] phi from findcol::@8 to findcol::@return
  //SEG173 [69] phi (byte) findcol::return#0 = (byte) findcol::mincol#2 -- register_copy 
    jmp breturn
  //SEG174 findcol::@19
  b19:
  //SEG175 [83] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- zpby1=aby 
    sta mindiff
  //SEG176 [64] phi from findcol::@19 to findcol::@1
  //SEG177 [64] phi (byte) findcol::mincol#11 = (byte) findcol::mincol#2 -- register_copy 
  //SEG178 [64] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 -- register_copy 
  //SEG179 [64] phi (byte) findcol::i#12 = (byte) findcol::i#1 -- register_copy 
    jmp b1
  //SEG180 findcol::@21
  b21:
  //SEG181 [84] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#11 findcol::mindiff#14 numpoints#1 ] -- aby=zpby1 
    lda mindiff
  //SEG182 [80] phi from findcol::@21 to findcol::@8
  //SEG183 [80] phi (byte) findcol::mindiff#11 = (byte~) findcol::mindiff#14 -- register_copy 
  //SEG184 [80] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#11 -- register_copy 
    jmp b8
  //SEG185 findcol::@6
  b6:
  //SEG186 [85] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 findcol::$14 ] -- aby=zpby1_minus_zpby2 
    lda y
    sec
    sbc yp
  //SEG187 [86] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#2 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG188 [77] phi from findcol::@6 to findcol::@7
  //SEG189 [77] phi (byte) findcol::diff#6 = (byte) findcol::diff#2 -- register_copy 
    jmp b7
  //SEG190 findcol::@4
  b4:
  //SEG191 [87] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby2_minus_zpby1 
    lda x
    sec
    sbc diff
    sta diff
  //SEG192 [73] phi from findcol::@4 to findcol::@5
  //SEG193 [73] phi (byte) findcol::diff#4 = (byte) findcol::diff#0 -- register_copy 
    jmp b5
}
//SEG194 initscreen
initscreen: {
    .label screen = 3
  //SEG195 [88] phi from initscreen to initscreen::@1
  //SEG196 [88] phi (byte*) initscreen::screen#2 = (word) 1024 -- zpptrby1=cowo1 
    lda #<$400
    sta screen
    lda #>$400
    sta screen+$1
  //SEG197 [88] phi from initscreen::@1 to initscreen::@1
  //SEG198 [88] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 -- register_copy 
  //SEG199 initscreen::@1
  b1:
  //SEG200 [89] *((byte*) initscreen::screen#2) ← (byte) 230 [ initscreen::screen#2 ] -- _star_zpptrby1=coby1 
    ldy #$0
    lda #$e6
    sta (screen),y
  //SEG201 [90] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+$1
  !:
  //SEG202 [91] if((byte*) initscreen::screen#1<(word) 2024) goto initscreen::@1 [ initscreen::screen#1 ] -- zpptrby1_lt_cowo1_then_la1 
    lda screen+$1
    cmp #>$7e8
    bcc b1
    bne !+
    lda screen
    cmp #<$7e8
    bcc b1
  !:
  //SEG203 initscreen::@return
  //SEG204 [92] return  [ ]
    rts
}
//SEG205 addpoint
addpoint: {
    .label c = 2
  //SEG206 [94] *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ] -- cowo1_staridx_zpby1=aby 
    ldx numpoints
    sta $1000,x
  //SEG207 [95] *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ] -- cowo1_staridx_zpby1=yby 
    tya
    ldy numpoints
    sta $1100,y
  //SEG208 [96] *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ] -- cowo1_staridx_zpby1=zpby2 
    lda c
    ldx numpoints
    sta $1200,x
  //SEG209 [97] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ ] -- zpby1=_inc_zpby1 
    inc numpoints
  //SEG210 addpoint::@return
  //SEG211 [98] return  [ ]
    rts
}

FINAL SYMBOL TABLE
(label) @begin
(label) @end
(byte*) COLORS
(byte[256]) COLS
(byte) FILL
(byte*) SCREEN
(byte[256]) XPOS
(byte[256]) YPOS
(void()) addpoint((byte) addpoint::x , (byte) addpoint::y , (byte) addpoint::c)
(label) addpoint::@return
(byte) addpoint::c
(byte) addpoint::c#6 c zp ZP_BYTE:2 0.6666666666666666
(byte) addpoint::x
(byte) addpoint::x#6 reg byte a 2.0
(byte) addpoint::y
(byte) addpoint::y#6 reg byte y 1.0
(void()) animate()
(byte~) animate::$0 reg byte a 4.0
(byte~) animate::$1 reg byte a 4.0
(byte~) animate::$10 reg byte x 4.0
(byte~) animate::$11 reg byte x 4.0
(byte~) animate::$12 reg byte a 4.0
(byte~) animate::$15 reg byte a 4.0
(byte~) animate::$16 reg byte a 4.0
(byte~) animate::$17 reg byte a 4.0
(byte~) animate::$2 reg byte a 4.0
(byte~) animate::$20 reg byte x 4.0
(byte~) animate::$21 reg byte x 4.0
(byte~) animate::$22 reg byte a 4.0
(byte~) animate::$25 reg byte a 4.0
(byte~) animate::$26 reg byte a 4.0
(byte~) animate::$27 reg byte a 4.0
(byte~) animate::$30 reg byte a 4.0
(byte~) animate::$31 reg byte a 4.0
(byte~) animate::$5 reg byte a 4.0
(byte~) animate::$6 reg byte a 4.0
(byte~) animate::$7 reg byte a 4.0
(label) animate::@1
(label) animate::@10
(label) animate::@11
(label) animate::@12
(label) animate::@2
(label) animate::@3
(label) animate::@4
(label) animate::@7
(label) animate::@8
(label) animate::@9
(label) animate::@return
(byte()) findcol((byte) findcol::x , (byte) findcol::y)
(byte~) findcol::$12 reg byte a 20002.0
(byte~) findcol::$14 reg byte a 20002.0
(label) findcol::@1
(label) findcol::@12
(label) findcol::@14
(label) findcol::@16
(label) findcol::@19
(label) findcol::@2
(label) findcol::@21
(label) findcol::@4
(label) findcol::@5
(label) findcol::@6
(label) findcol::@7
(label) findcol::@8
(label) findcol::@9
(label) findcol::@return
(byte) findcol::diff
(byte) findcol::diff#0 diff zp ZP_BYTE:7 20002.0
(byte) findcol::diff#1 diff zp ZP_BYTE:7 20002.0
(byte) findcol::diff#2 reg byte a 20002.0
(byte) findcol::diff#3 reg byte a 20002.0
(byte) findcol::diff#4 diff zp ZP_BYTE:7 10001.0
(byte) findcol::diff#6 reg byte a 13334.666666666666
(byte) findcol::i
(byte) findcol::i#1 reg byte x 10001.0
(byte) findcol::i#12 reg byte x 2631.842105263158
(byte) findcol::mincol
(byte) findcol::mincol#1 reg byte y 20002.0
(byte) findcol::mincol#11 reg byte y 1176.5882352941176
(byte) findcol::mincol#2 reg byte y 10001.0
(byte) findcol::mindiff
(byte) findcol::mindiff#10 mindiff zp ZP_BYTE:6 1875.1875
(byte) findcol::mindiff#11 reg byte a 10001.0
(byte~) findcol::mindiff#13 mindiff zp ZP_BYTE:6 20002.0
(byte~) findcol::mindiff#14 reg byte a 20002.0
(byte) findcol::return
(byte) findcol::return#0 reg byte y 3667.333333333333
(byte) findcol::x
(byte) findcol::x#0 x zp ZP_BYTE:9 1863.8636363636363
(byte) findcol::xp
(byte) findcol::xp#0 xp zp ZP_BYTE:7 10001.0
(byte) findcol::y
(byte) findcol::y#0 y zp ZP_BYTE:10 1863.8636363636363
(byte) findcol::yp
(byte) findcol::yp#0 yp zp ZP_BYTE:11 6250.625
(void()) initscreen()
(label) initscreen::@1
(label) initscreen::@return
(byte*) initscreen::screen
(byte*) initscreen::screen#1 screen zp ZP_PTR_BYTE:3 16.5
(byte*) initscreen::screen#2 screen zp ZP_PTR_BYTE:3 16.5
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@return
(byte) numpoints
(byte) numpoints#1 numpoints zp ZP_BYTE:8 455.13636363636346
(byte) numpoints#19 numpoints zp ZP_BYTE:8 4.5
(void()) render()
(label) render::@1
(label) render::@2
(label) render::@3
(label) render::@5
(label) render::@return
(byte) render::col
(byte) render::col#0 reg byte a 2002.0
(byte*) render::colline
(byte*) render::colline#1 colline zp ZP_PTR_BYTE:3 67.33333333333333
(byte*) render::colline#2 colline zp ZP_PTR_BYTE:3 36.45454545454545
(byte) render::x
(byte) render::x#1 x zp ZP_BYTE:5 1501.5
(byte) render::x#2 x zp ZP_BYTE:5 133.46666666666667
(byte) render::y
(byte) render::y#1 y zp ZP_BYTE:2 151.5
(byte) render::y#2 y zp ZP_BYTE:2 35.38235294117647

zp ZP_BYTE:2 [ render::y#2 render::y#1 addpoint::c#6 ]
zp ZP_PTR_BYTE:3 [ render::colline#2 render::colline#1 initscreen::screen#2 initscreen::screen#1 ]
zp ZP_BYTE:5 [ render::x#2 render::x#1 ]
reg byte x [ findcol::i#12 findcol::i#1 ]
zp ZP_BYTE:6 [ findcol::mindiff#10 findcol::mindiff#13 ]
reg byte y [ findcol::return#0 findcol::mincol#11 findcol::mincol#2 findcol::mincol#1 ]
zp ZP_BYTE:7 [ findcol::diff#4 findcol::diff#1 findcol::diff#0 findcol::xp#0 ]
reg byte a [ findcol::mindiff#11 findcol::diff#6 findcol::diff#3 findcol::diff#2 findcol::mindiff#14 ]
reg byte a [ addpoint::x#6 ]
zp ZP_BYTE:8 [ numpoints#19 numpoints#1 ]
reg byte y [ addpoint::y#6 ]
reg byte a [ animate::$0 ]
reg byte a [ animate::$1 ]
reg byte a [ animate::$2 ]
reg byte a [ animate::$5 ]
reg byte a [ animate::$6 ]
reg byte a [ animate::$7 ]
reg byte x [ animate::$10 ]
reg byte x [ animate::$11 ]
reg byte a [ animate::$12 ]
reg byte a [ animate::$15 ]
reg byte a [ animate::$16 ]
reg byte a [ animate::$17 ]
reg byte x [ animate::$20 ]
reg byte x [ animate::$21 ]
reg byte a [ animate::$22 ]
reg byte a [ animate::$25 ]
reg byte a [ animate::$26 ]
reg byte a [ animate::$27 ]
reg byte a [ animate::$30 ]
reg byte a [ animate::$31 ]
zp ZP_BYTE:9 [ findcol::x#0 ]
zp ZP_BYTE:10 [ findcol::y#0 ]
reg byte a [ render::col#0 ]
zp ZP_BYTE:11 [ findcol::yp#0 ]
reg byte a [ findcol::$12 ]
reg byte a [ findcol::$14 ]

FINAL CODE
//SEG0 Global ZP labels
  .label numpoints = 8
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
//SEG4 main
main: {
  //SEG5 [1] call addpoint param-assignment [ ]
  //SEG6 [93] phi from main to addpoint
  //SEG7 [1] phi (byte) addpoint::c#6 = (byte) 1 -- zpby1=coby1 
    lda #$1
    sta addpoint.c
  //SEG8 [1] phi (byte) addpoint::y#6 = (byte) 5 -- yby=coby1 
    ldy #$5
  //SEG9 [1] phi (byte) numpoints#19 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta numpoints
  //SEG10 [1] phi (byte) addpoint::x#6 = (byte) 5 -- aby=coby1 
    lda #$5
    jsr addpoint
  //SEG11 main::@3
  //SEG12 [2] call addpoint param-assignment [ ]
  //SEG13 [93] phi from main::@3 to addpoint
  //SEG14 [2] phi (byte) addpoint::c#6 = (byte) 2 -- zpby1=coby1 
    lda #$2
    sta addpoint.c
  //SEG15 [2] phi (byte) addpoint::y#6 = (byte) 8 -- yby=coby1 
    ldy #$8
  //SEG16 [2] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG17 [2] phi (byte) addpoint::x#6 = (byte) 15 -- aby=coby1 
    lda #$f
    jsr addpoint
  //SEG18 main::@4
  //SEG19 [3] call addpoint param-assignment [ ]
  //SEG20 [93] phi from main::@4 to addpoint
  //SEG21 [3] phi (byte) addpoint::c#6 = (byte) 3 -- zpby1=coby1 
    lda #$3
    sta addpoint.c
  //SEG22 [3] phi (byte) addpoint::y#6 = (byte) 14 -- yby=coby1 
    ldy #$e
  //SEG23 [3] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG24 [3] phi (byte) addpoint::x#6 = (byte) 6 -- aby=coby1 
    lda #$6
    jsr addpoint
  //SEG25 main::@5
  //SEG26 [4] call addpoint param-assignment [ ]
  //SEG27 [93] phi from main::@5 to addpoint
  //SEG28 [4] phi (byte) addpoint::c#6 = (byte) 4 -- zpby1=coby1 
    lda #$4
    sta addpoint.c
  //SEG29 [4] phi (byte) addpoint::y#6 = (byte) 2 -- yby=coby1 
    ldy #$2
  //SEG30 [4] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG31 [4] phi (byte) addpoint::x#6 = (byte) 34 -- aby=coby1 
    lda #$22
    jsr addpoint
  //SEG32 main::@6
  //SEG33 [5] call addpoint param-assignment [ ]
  //SEG34 [93] phi from main::@6 to addpoint
  //SEG35 [5] phi (byte) addpoint::c#6 = (byte) 5 -- zpby1=coby1 
    lda #$5
    sta addpoint.c
  //SEG36 [5] phi (byte) addpoint::y#6 = (byte) 17 -- yby=coby1 
    ldy #$11
  //SEG37 [5] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG38 [5] phi (byte) addpoint::x#6 = (byte) 21 -- aby=coby1 
    lda #$15
    jsr addpoint
  //SEG39 main::@7
  //SEG40 [6] call addpoint param-assignment [ ]
  //SEG41 [93] phi from main::@7 to addpoint
  //SEG42 [6] phi (byte) addpoint::c#6 = (byte) 7 -- zpby1=coby1 
    lda #$7
    sta addpoint.c
  //SEG43 [6] phi (byte) addpoint::y#6 = (byte) 22 -- yby=coby1 
    ldy #$16
  //SEG44 [6] phi (byte) numpoints#19 = (byte) numpoints#1 -- register_copy 
  //SEG45 [6] phi (byte) addpoint::x#6 = (byte) 31 -- aby=coby1 
    lda #$1f
    jsr addpoint
  //SEG46 main::@8
  //SEG47 [7] call initscreen param-assignment [ ]
    jsr initscreen
  //SEG48 main::@1
  b1:
  //SEG49 [8] call render param-assignment [ ]
    jsr render
  //SEG50 main::@10
  //SEG51 [9] call animate param-assignment [ ]
    jsr animate
  //SEG52 main::@11
  //SEG53 [10] if(true) goto main::@1 [ ] -- true_then_la1 
    jmp b1
  //SEG54 main::@return
  //SEG55 [11] return  [ ]
    rts
}
//SEG56 animate
animate: {
  //SEG57 [12] (byte~) animate::$0 ← * (word) 4096 [ animate::$0 ] -- aby=_star_cowo1 
    lda $1000
  //SEG58 [13] (byte~) animate::$1 ← (byte~) animate::$0 + (byte) 1 [ animate::$1 ] -- aby=aby_plus_1 
    clc
    adc #$1
  //SEG59 [14] *((word) 4096) ← (byte~) animate::$1 [ ] -- _star_cowo1=aby 
    sta $1000
  //SEG60 [15] (byte~) animate::$2 ← * (word) 4096 [ animate::$2 ] -- aby=_star_cowo1 
    lda $1000
  //SEG61 [16] if((byte~) animate::$2!=(byte) 40) goto animate::@1 [ ] -- aby_neq_coby1_then_la1 
    cmp #$28
    bne b1
  //SEG62 animate::@7
  //SEG63 [17] *((word) 4096) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #$0
    sta $1000
  //SEG64 animate::@1
  b1:
  //SEG65 [18] (byte~) animate::$5 ← * (word) 4352 [ animate::$5 ] -- aby=_star_cowo1 
    lda $1100
  //SEG66 [19] (byte~) animate::$6 ← (byte~) animate::$5 + (byte) 1 [ animate::$6 ] -- aby=aby_plus_1 
    clc
    adc #$1
  //SEG67 [20] *((word) 4352) ← (byte~) animate::$6 [ ] -- _star_cowo1=aby 
    sta $1100
  //SEG68 [21] (byte~) animate::$7 ← * (word) 4352 [ animate::$7 ] -- aby=_star_cowo1 
    lda $1100
  //SEG69 [22] if((byte~) animate::$7!=(byte) 25) goto animate::@2 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b2
  //SEG70 animate::@8
  //SEG71 [23] *((word) 4352) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #$0
    sta $1100
  //SEG72 animate::@2
  b2:
  //SEG73 [24] (byte~) animate::$10 ← * (word) 4097 [ animate::$10 ] -- xby=_star_cowo1 
    ldx $1001
  //SEG74 [25] (byte~) animate::$11 ← (byte~) animate::$10 - (byte) 1 [ animate::$11 ] -- xby=xby_minus_1 
    dex
  //SEG75 [26] *((word) 4097) ← (byte~) animate::$11 [ ] -- _star_cowo1=xby 
    stx $1001
  //SEG76 [27] (byte~) animate::$12 ← * (word) 4097 [ animate::$12 ] -- aby=_star_cowo1 
    lda $1001
  //SEG77 [28] if((byte~) animate::$12!=(byte) 255) goto animate::@3 [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b3
  //SEG78 animate::@9
  //SEG79 [29] *((word) 4097) ← (byte) 40 [ ] -- _star_cowo1=coby2 
    lda #$28
    sta $1001
  //SEG80 animate::@3
  b3:
  //SEG81 [30] (byte~) animate::$15 ← * (word) 4354 [ animate::$15 ] -- aby=_star_cowo1 
    lda $1102
  //SEG82 [31] (byte~) animate::$16 ← (byte~) animate::$15 + (byte) 1 [ animate::$16 ] -- aby=aby_plus_1 
    clc
    adc #$1
  //SEG83 [32] *((word) 4354) ← (byte~) animate::$16 [ ] -- _star_cowo1=aby 
    sta $1102
  //SEG84 [33] (byte~) animate::$17 ← * (word) 4354 [ animate::$17 ] -- aby=_star_cowo1 
    lda $1102
  //SEG85 [34] if((byte~) animate::$17!=(byte) 25) goto animate::@4 [ ] -- aby_neq_coby1_then_la1 
    cmp #$19
    bne b4
  //SEG86 animate::@10
  //SEG87 [35] *((word) 4354) ← (byte) 0 [ ] -- _star_cowo1=coby2 
    lda #$0
    sta $1102
  //SEG88 animate::@4
  b4:
  //SEG89 [36] (byte~) animate::$20 ← * (word) 4355 [ animate::$20 ] -- xby=_star_cowo1 
    ldx $1103
  //SEG90 [37] (byte~) animate::$21 ← (byte~) animate::$20 - (byte) 1 [ animate::$21 ] -- xby=xby_minus_1 
    dex
  //SEG91 [38] *((word) 4355) ← (byte~) animate::$21 [ ] -- _star_cowo1=xby 
    stx $1103
  //SEG92 [39] (byte~) animate::$22 ← * (word) 4355 [ animate::$22 ] -- aby=_star_cowo1 
    lda $1103
  //SEG93 [40] if((byte~) animate::$22!=(byte) 255) goto animate::@return [ ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne breturn
  //SEG94 animate::@11
  //SEG95 [41] *((word) 4355) ← (byte) 25 [ ] -- _star_cowo1=coby2 
    lda #$19
    sta $1103
  //SEG96 [42] (byte~) animate::$25 ← * (word) 4099 [ animate::$25 ] -- aby=_star_cowo1 
    lda $1003
  //SEG97 [43] (byte~) animate::$26 ← (byte~) animate::$25 + (byte) 7 [ animate::$26 ] -- aby=aby_plus_coby1 
    clc
    adc #$7
  //SEG98 [44] *((word) 4099) ← (byte~) animate::$26 [ ] -- _star_cowo1=aby 
    sta $1003
  //SEG99 [45] (byte~) animate::$27 ← * (word) 4099 [ animate::$27 ] -- aby=_star_cowo1 
    lda $1003
  //SEG100 [46] if((byte~) animate::$27<(byte) 40) goto animate::@return [ ] -- aby_lt_coby1_then_la1 
    cmp #$28
    bcc breturn
  //SEG101 animate::@12
  //SEG102 [47] (byte~) animate::$30 ← * (word) 4099 [ animate::$30 ] -- aby=_star_cowo1 
    lda $1003
  //SEG103 [48] (byte~) animate::$31 ← (byte~) animate::$30 - (byte) 40 [ animate::$31 ] -- aby=aby_minus_coby1 
    sec
    sbc #$28
  //SEG104 [49] *((word) 4099) ← (byte~) animate::$31 [ ] -- _star_cowo1=aby 
    sta $1003
  //SEG105 animate::@return
  breturn:
  //SEG106 [50] return  [ ]
    rts
}
//SEG107 render
render: {
    .label x = 5
    .label colline = 3
    .label y = 2
  //SEG108 [51] phi from render to render::@1
  //SEG109 [51] phi (byte*) render::colline#2 = (word) 55296 -- zpptrby1=cowo1 
    lda #<$d800
    sta colline
    lda #>$d800
    sta colline+$1
  //SEG110 [51] phi (byte) render::y#2 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta y
  //SEG111 [51] phi from render::@3 to render::@1
  //SEG112 [51] phi (byte*) render::colline#2 = (byte*) render::colline#1 -- register_copy 
  //SEG113 [51] phi (byte) render::y#2 = (byte) render::y#1 -- register_copy 
  //SEG114 render::@1
  b1:
  //SEG115 [52] phi from render::@1 to render::@2
  //SEG116 [52] phi (byte) render::x#2 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta x
  //SEG117 [52] phi from render::@5 to render::@2
  //SEG118 [52] phi (byte) render::x#2 = (byte) render::x#1 -- register_copy 
  //SEG119 render::@2
  b2:
  //SEG120 [53] (byte) findcol::x#0 ← (byte) render::x#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
    lda x
    sta findcol.x
  //SEG121 [54] (byte) findcol::y#0 ← (byte) render::y#2 [ render::x#2 render::y#2 render::colline#2 ] -- zpby1=zpby2 
    lda y
    sta findcol.y
  //SEG122 [55] call findcol param-assignment [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
    jsr findcol
  //SEG123 render::@5
  //SEG124 [56] (byte) render::col#0 ← (byte) findcol::return#0 [ render::x#2 render::y#2 render::colline#2 render::col#0 ] -- aby=yby 
    tya
  //SEG125 [57] *((byte*) render::colline#2 + (byte) render::x#2) ← (byte) render::col#0 [ render::x#2 render::y#2 render::colline#2 ] -- zpptrby1_staridx_zpby1=aby 
    ldy x
    sta (colline),y
  //SEG126 [58] (byte) render::x#1 ← ++ (byte) render::x#2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG127 [59] if((byte) render::x#1!=(byte) 40) goto render::@2 [ render::x#1 render::y#2 render::colline#2 ] -- zpby1_neq_coby1_then_la1 
    lda x
    cmp #$28
    bne b2
  //SEG128 render::@3
  //SEG129 [60] (byte*) render::colline#1 ← (byte*) render::colline#2 + (byte) 40 [ render::colline#1 render::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda colline
    clc
    adc #$28
    sta colline
    bcc !+
    inc colline+$1
  !:
  //SEG130 [61] (byte) render::y#1 ← ++ (byte) render::y#2 [ render::y#1 render::colline#1 ] -- zpby1=_inc_zpby1 
    inc y
  //SEG131 [62] if((byte) render::y#1!=(byte) 25) goto render::@1 [ render::y#1 render::colline#1 ] -- zpby1_neq_coby1_then_la1 
    lda y
    cmp #$19
    bne b1
  //SEG132 render::@return
  //SEG133 [63] return  [ ]
    rts
}
//SEG134 findcol
findcol: {
    .label x = 9
    .label y = 10
    .label xp = 7
    .label yp = 11
    .label diff = 7
    .label mindiff = 6
  //SEG135 [64] phi from findcol to findcol::@1
  //SEG136 [64] phi (byte) findcol::mincol#11 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG137 [64] phi (byte) findcol::mindiff#10 = (byte) 255 -- zpby1=coby1 
    lda #$ff
    sta mindiff
  //SEG138 [64] phi (byte) findcol::i#12 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG139 findcol::@1
  b1:
  //SEG140 [65] (byte) findcol::xp#0 ← (word) 4096 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda $1000,x
    sta xp
  //SEG141 [66] (byte) findcol::yp#0 ← (word) 4352 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=cowo1_staridx_xby 
    lda $1100,x
    sta yp
  //SEG142 [67] if((byte) findcol::x#0!=(byte) findcol::xp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda x
    cmp xp
    bne b2
  //SEG143 findcol::@9
  //SEG144 [68] if((byte) findcol::y#0!=(byte) findcol::yp#0) goto findcol::@2 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_neq_zpby2_then_la1 
    lda y
    cmp yp
    bne b2
  //SEG145 [69] phi from findcol::@9 to findcol::@return
  //SEG146 [69] phi (byte) findcol::return#0 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG147 findcol::@return
  breturn:
  //SEG148 [70] return  [ render::x#2 render::y#2 findcol::return#0 render::colline#2 ]
    rts
  //SEG149 findcol::@2
  b2:
  //SEG150 [71] if((byte) findcol::x#0>=(byte) findcol::xp#0) goto findcol::@4 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::xp#0 findcol::y#0 findcol::yp#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda x
    cmp xp
    bcs b4
  //SEG151 findcol::@12
  //SEG152 [72] (byte) findcol::diff#1 ← (byte) findcol::xp#0 - (byte) findcol::x#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#1 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby1_minus_zpby2 
    lda diff
    sec
    sbc x
    sta diff
  //SEG153 [73] phi from findcol::@12 to findcol::@5
  //SEG154 [73] phi (byte) findcol::diff#4 = (byte) findcol::diff#1 -- register_copy 
  //SEG155 findcol::@5
  b5:
  //SEG156 [74] if((byte) findcol::y#0>=(byte) findcol::yp#0) goto findcol::@6 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1_ge_zpby2_then_la1 
    lda y
    cmp yp
    bcs b6
  //SEG157 findcol::@14
  //SEG158 [75] (byte~) findcol::$12 ← (byte) findcol::yp#0 - (byte) findcol::y#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::$12 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_minus_zpby2 
    lda yp
    sec
    sbc y
  //SEG159 [76] (byte) findcol::diff#3 ← (byte) findcol::diff#4 + (byte~) findcol::$12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#3 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG160 [77] phi from findcol::@14 to findcol::@7
  //SEG161 [77] phi (byte) findcol::diff#6 = (byte) findcol::diff#3 -- register_copy 
  //SEG162 findcol::@7
  b7:
  //SEG163 [78] if((byte) findcol::diff#6>=(byte) findcol::mindiff#10) goto findcol::@21 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby_ge_zpby1_then_la1 
    cmp mindiff
    bcs b21
  //SEG164 findcol::@16
  //SEG165 [79] (byte) findcol::mincol#1 ← (word) 4608 *idx (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#6 findcol::mincol#1 numpoints#1 ] -- yby=cowo1_staridx_xby 
    ldy $1200,x
  //SEG166 [80] phi from findcol::@16 to findcol::@8
  //SEG167 [80] phi (byte) findcol::mindiff#11 = (byte) findcol::diff#6 -- register_copy 
  //SEG168 [80] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#1 -- register_copy 
  //SEG169 findcol::@8
  b8:
  //SEG170 [81] (byte) findcol::i#1 ← ++ (byte) findcol::i#12 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 findcol::mindiff#11 ] -- xby=_inc_xby 
    inx
  //SEG171 [82] if((byte) findcol::i#1<(byte) numpoints#1) goto findcol::@19 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 findcol::mindiff#11 ] -- xby_lt_zpby1_then_la1 
    cpx numpoints
    bcc b19
  //SEG172 [69] phi from findcol::@8 to findcol::@return
  //SEG173 [69] phi (byte) findcol::return#0 = (byte) findcol::mincol#2 -- register_copy 
    jmp breturn
  //SEG174 findcol::@19
  b19:
  //SEG175 [83] (byte~) findcol::mindiff#13 ← (byte) findcol::mindiff#11 [ render::x#2 render::y#2 render::colline#2 findcol::i#1 findcol::mindiff#13 findcol::mincol#2 findcol::x#0 findcol::y#0 numpoints#1 ] -- zpby1=aby 
    sta mindiff
  //SEG176 [64] phi from findcol::@19 to findcol::@1
  //SEG177 [64] phi (byte) findcol::mincol#11 = (byte) findcol::mincol#2 -- register_copy 
  //SEG178 [64] phi (byte) findcol::mindiff#10 = (byte~) findcol::mindiff#13 -- register_copy 
  //SEG179 [64] phi (byte) findcol::i#12 = (byte) findcol::i#1 -- register_copy 
    jmp b1
  //SEG180 findcol::@21
  b21:
  //SEG181 [84] (byte~) findcol::mindiff#14 ← (byte) findcol::mindiff#10 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::mincol#11 findcol::mindiff#14 numpoints#1 ] -- aby=zpby1 
    lda mindiff
  //SEG182 [80] phi from findcol::@21 to findcol::@8
  //SEG183 [80] phi (byte) findcol::mindiff#11 = (byte~) findcol::mindiff#14 -- register_copy 
  //SEG184 [80] phi (byte) findcol::mincol#2 = (byte) findcol::mincol#11 -- register_copy 
    jmp b8
  //SEG185 findcol::@6
  b6:
  //SEG186 [85] (byte~) findcol::$14 ← (byte) findcol::y#0 - (byte) findcol::yp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#4 findcol::mindiff#10 findcol::mincol#11 numpoints#1 findcol::$14 ] -- aby=zpby1_minus_zpby2 
    lda y
    sec
    sbc yp
  //SEG187 [86] (byte) findcol::diff#2 ← (byte) findcol::diff#4 + (byte~) findcol::$14 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::diff#2 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- aby=zpby1_plus_aby 
    clc
    adc diff
  //SEG188 [77] phi from findcol::@6 to findcol::@7
  //SEG189 [77] phi (byte) findcol::diff#6 = (byte) findcol::diff#2 -- register_copy 
    jmp b7
  //SEG190 findcol::@4
  b4:
  //SEG191 [87] (byte) findcol::diff#0 ← (byte) findcol::x#0 - (byte) findcol::xp#0 [ render::x#2 render::y#2 render::colline#2 findcol::i#12 findcol::x#0 findcol::y#0 findcol::yp#0 findcol::diff#0 findcol::mindiff#10 findcol::mincol#11 numpoints#1 ] -- zpby1=zpby2_minus_zpby1 
    lda x
    sec
    sbc diff
    sta diff
  //SEG192 [73] phi from findcol::@4 to findcol::@5
  //SEG193 [73] phi (byte) findcol::diff#4 = (byte) findcol::diff#0 -- register_copy 
    jmp b5
}
//SEG194 initscreen
initscreen: {
    .label screen = 3
  //SEG195 [88] phi from initscreen to initscreen::@1
  //SEG196 [88] phi (byte*) initscreen::screen#2 = (word) 1024 -- zpptrby1=cowo1 
    lda #<$400
    sta screen
    lda #>$400
    sta screen+$1
  //SEG197 [88] phi from initscreen::@1 to initscreen::@1
  //SEG198 [88] phi (byte*) initscreen::screen#2 = (byte*) initscreen::screen#1 -- register_copy 
  //SEG199 initscreen::@1
  b1:
  //SEG200 [89] *((byte*) initscreen::screen#2) ← (byte) 230 [ initscreen::screen#2 ] -- _star_zpptrby1=coby1 
    ldy #$0
    lda #$e6
    sta (screen),y
  //SEG201 [90] (byte*) initscreen::screen#1 ← ++ (byte*) initscreen::screen#2 [ initscreen::screen#1 ] -- zpptrby1=_inc_zpptrby1 
    inc screen
    bne !+
    inc screen+$1
  !:
  //SEG202 [91] if((byte*) initscreen::screen#1<(word) 2024) goto initscreen::@1 [ initscreen::screen#1 ] -- zpptrby1_lt_cowo1_then_la1 
    lda screen+$1
    cmp #>$7e8
    bcc b1
    bne !+
    lda screen
    cmp #<$7e8
    bcc b1
  !:
  //SEG203 initscreen::@return
  //SEG204 [92] return  [ ]
    rts
}
//SEG205 addpoint
addpoint: {
    .label c = 2
  //SEG206 [94] *((word) 4096 + (byte) numpoints#19) ← (byte) addpoint::x#6 [ numpoints#19 addpoint::y#6 addpoint::c#6 ] -- cowo1_staridx_zpby1=aby 
    ldx numpoints
    sta $1000,x
  //SEG207 [95] *((word) 4352 + (byte) numpoints#19) ← (byte) addpoint::y#6 [ numpoints#19 addpoint::c#6 ] -- cowo1_staridx_zpby1=yby 
    tya
    ldy numpoints
    sta $1100,y
  //SEG208 [96] *((word) 4608 + (byte) numpoints#19) ← (byte) addpoint::c#6 [ numpoints#19 ] -- cowo1_staridx_zpby1=zpby2 
    lda c
    ldx numpoints
    sta $1200,x
  //SEG209 [97] (byte) numpoints#1 ← ++ (byte) numpoints#19 [ ] -- zpby1=_inc_zpby1 
    inc numpoints
  //SEG210 addpoint::@return
  //SEG211 [98] return  [ ]
    rts
}

