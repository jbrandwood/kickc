Inlined call call __init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from __start::@1
  (byte) b#15 ← phi( __start::@1/(byte) b#16 )
  call s 
  (byte) s::return#0 ← (byte) s::return#2
  to:main::@2
main::@2: scope:[main]  from main
  (byte) b#8 ← phi( main/(byte) b#4 )
  (byte) b#0 ← (byte) b#8
  (byte) b#1 ← ++ (byte) b#0
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@2
  (byte) b#9 ← phi( main::@1/(byte) b#9 main::@2/(byte) b#1 )
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#1 main::@2/(byte) main::i#0 )
  *((const byte*) main::COLS + (byte) main::i#2) ← (const byte) main::col
  *((const nomodify byte*) SCREEN + (byte) main::i#2) ← (byte) b#9
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,$64)
  (bool~) main::$4 ← (byte) main::i#1 != rangelast(0,$64)
  if((bool~) main::$4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  (byte) b#10 ← phi( main::@1/(byte) b#9 )
  (byte) b#2 ← (byte) b#10
  return 
  to:@return

(byte()) s()
s: scope:[s]  from main
  (byte) b#11 ← phi( main/(byte) b#15 )
  (byte) b#3 ← ++ (byte) b#11
  (byte) s::return#1 ← (number) 2
  to:s::@return
s::@return: scope:[s]  from s
  (byte) b#12 ← phi( s/(byte) b#3 )
  (byte) s::return#3 ← phi( s/(byte) s::return#1 )
  (byte) s::return#2 ← (byte) s::return#3
  (byte) b#4 ← (byte) b#12
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  (byte) b#5 ← (byte)(number) 2/(number) 2
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  (byte) b#16 ← phi( __start::__init1/(byte) b#5 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  (byte) b#13 ← phi( __start::@1/(byte) b#2 )
  (byte) b#6 ← (byte) b#13
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  (byte) b#14 ← phi( __start::@2/(byte) b#6 )
  (byte) b#7 ← (byte) b#14
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(byte) b
(byte) b#0
(byte) b#1
(byte) b#10
(byte) b#11
(byte) b#12
(byte) b#13
(byte) b#14
(byte) b#15
(byte) b#16
(byte) b#2
(byte) b#3
(byte) b#4
(byte) b#5
(byte) b#6
(byte) b#7
(byte) b#8
(byte) b#9
(void()) main()
(bool~) main::$4
(label) main::@1
(label) main::@2
(label) main::@return
(const byte*) main::COLS = (byte*)(number) $d800
(const byte) main::col = (byte) 2
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte()) s()
(label) s::@return
(byte) s::return
(byte) s::return#0
(byte) s::return#1
(byte) s::return#2
(byte) s::return#3

Adding number conversion cast (unumber) 2 in (byte) s::return#1 ← (number) 2
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) s::return#1 ← (unumber)(number) 2
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 55296
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias b#0 = b#8 
Alias b#10 = b#9 b#2 
Alias s::return#1 = s::return#3 s::return#2 
Alias b#12 = b#3 b#4 
Alias b#16 = b#5 
Alias b#13 = b#6 b#14 b#7 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) b#15 (byte) b#16
Identical Phi Values (byte) b#0 (byte) b#12
Identical Phi Values (byte) b#10 (byte) b#1
Identical Phi Values (byte) b#11 (byte) b#15
Identical Phi Values (byte) b#13 (byte) b#10
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$4 [11] if((byte) main::i#1!=rangelast(0,$64)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::i#0 = 0
Constant (const byte) s::return#1 = 2
Constant (const byte) b#16 = (byte)2/2
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) s::return#0 = s::return#1
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [9] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [11] if(main::i#1!=rangelast(0,$64)) goto main::@1 to (number) $65
Eliminating unused constant (const byte) s::return#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) s::return#1
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $65 in [6] if((byte) main::i#1!=(number) $65) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $65
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $65
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [8] (byte) b#12 ← ++ (const byte) b#16
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) b#12 = ++b#16
Successful SSA optimization Pass2ConstantIdentification
Removing call to empty procedure [0] call s 
Removing unused procedure s
Removing unused procedure block s
Removing unused procedure block s::@return
Successful SSA optimization PassNEliminateEmptyProcedure
Constant right-side identified [0] (byte) b#1 ← ++ (const byte) b#12
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) b#1 = ++b#12
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with different constant siblings (const byte) b#16
Inlining constant with different constant siblings (const byte) b#12
Inlining constant with different constant siblings (const byte) b#1
Constant inlined main::i#0 = (byte) 0
Constant inlined b#1 = ++++(byte)(number) 2/(number) 2
Constant inlined b#16 = (byte)(number) 2/(number) 2
Constant inlined b#12 = ++(byte)(number) 2/(number) 2
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [8] main::i#3 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) main::@2
Culled Empty Block (label) main::@3
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] (byte) main::i#2 ← phi( main::@1/(byte) main::i#1 main/(byte) 0 )
  [2] *((const byte*) main::COLS + (byte) main::i#2) ← (const byte) main::col
  [3] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← ++++(byte)(number) 2/(number) 2
  [4] (byte) main::i#1 ← ++ (byte) main::i#2
  [5] if((byte) main::i#1!=(byte) $65) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) b
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 14.666666666666666

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// used vars
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // used vars
    .const col = 2
    .label COLS = $d800
    .label i = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] *((const byte*) main::COLS + (byte) main::i#2) ← (const byte) main::col -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #col
    ldy.z i
    sta COLS,y
    // [3] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← ++++(byte)(number) 2/(number) 2 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #2/2+1+1
    ldy.z i
    sta SCREEN,y
    // [4] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [5] if((byte) main::i#1!=(byte) $65) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$65
    cmp.z i
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] *((const byte*) main::COLS + (byte) main::i#2) ← (const byte) main::col [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [3] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← ++++(byte)(number) 2/(number) 2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [2] *((const byte*) main::COLS + (byte) main::i#2) ← (const byte) main::col [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [3] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← ++++(byte)(number) 2/(number) 2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 31.17: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 321 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 321 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// used vars
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // used vars
    .const col = 2
    .label COLS = $d800
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] *((const byte*) main::COLS + (byte) main::i#2) ← (const byte) main::col -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #col
    sta COLS,x
    // [3] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← ++++(byte)(number) 2/(number) 2 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #2/2+1+1
    sta SCREEN,x
    // [4] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] if((byte) main::i#1!=(byte) $65) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$65
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(byte) b
(void()) main()
(label) main::@1
(label) main::@return
(const byte*) main::COLS = (byte*) 55296
(const byte) main::col = (byte) 2
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 14.666666666666666

reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 231

  // File Comments
// used vars
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // used vars
    .const col = 2
    .label COLS = $d800
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // COLS[i] = col
    // [2] *((const byte*) main::COLS + (byte) main::i#2) ← (const byte) main::col -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #col
    sta COLS,x
    // SCREEN[i] = b
    // [3] *((const nomodify byte*) SCREEN + (byte) main::i#2) ← ++++(byte)(number) 2/(number) 2 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #2/2+1+1
    sta SCREEN,x
    // for(byte i : 0..100)
    // [4] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] if((byte) main::i#1!=(byte) $65) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$65
    bne __b1
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data

