
(void()) main()
main: scope:[main]  from
  asm { sei  }
  [1] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) WHITE
  [2] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1) ← (const nomodify byte) DARK_GREY
  [3] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR1)
  [4] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR2) ← (const nomodify byte) BLACK
  to:main::toD0181
main::toD0181: scope:[main]  from main
  [5] phi()
  to:main::@3
main::@3: scope:[main]  from main::toD0181
  [6] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0
  [7] *((const nomodify byte*) D016) ← (const nomodify byte) VIC_MCM
  [8] call memset 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [9] phi()
  [10] call memset 
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@4
  [11] (byte) main::ch#2 ← phi( main::@1/(byte) main::ch#1 main::@4/(byte) 0 )
  [12] *((const byte*) SCREEN + (byte) main::ch#2) ← (byte) main::ch#2
  [13] (byte) main::ch#1 ← ++ (byte) main::ch#2
  [14] if((byte) main::ch#1!=(byte) $f0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [15] phi()
  [16] call sin16s_gen2 
  to:main::@5
main::@5: scope:[main]  from main::@2
  [17] phi()
  [18] call loop 
  to:main::@return
main::@return: scope:[main]  from main::@5
  [19] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from main::@3 main::@4
  [20] (byte) memset::c#4 ← phi( main::@3/(const nomodify byte) BLACK main::@4/(const nomodify byte) WHITE|(byte) 8 )
  [20] (void*) memset::str#3 ← phi( main::@3/(void*)(const byte*) SCREEN main::@4/(void*)(const nomodify byte*) COLS )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [21] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) $3e8
  [22] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [23] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [24] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [25] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [26] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [27] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void()) sin16s_gen2((signed word*) sin16s_gen2::sintab , (word) sin16s_gen2::wavelength , (signed word) sin16s_gen2::min , (signed word) sin16s_gen2::max)
sin16s_gen2: scope:[sin16s_gen2]  from main::@2
  [28] phi()
  [29] call div32u16u 
  [30] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
  to:sin16s_gen2::@3
sin16s_gen2::@3: scope:[sin16s_gen2]  from sin16s_gen2
  [31] (dword) sin16s_gen2::step#0 ← (dword) div32u16u::return#2
  to:sin16s_gen2::@1
sin16s_gen2::@1: scope:[sin16s_gen2]  from sin16s_gen2::@3 sin16s_gen2::@5
  [32] (signed word*) sin16s_gen2::sintab#2 ← phi( sin16s_gen2::@3/(const signed word*) xsin sin16s_gen2::@5/(signed word*) sin16s_gen2::sintab#0 )
  [32] (dword) sin16s_gen2::x#2 ← phi( sin16s_gen2::@3/(dword) 0 sin16s_gen2::@5/(dword) sin16s_gen2::x#1 )
  [32] (word) sin16s_gen2::i#2 ← phi( sin16s_gen2::@3/(word) 0 sin16s_gen2::@5/(word) sin16s_gen2::i#1 )
  [33] if((word) sin16s_gen2::i#2<(const nomodify word) XSIN_SIZE) goto sin16s_gen2::@2
  to:sin16s_gen2::@return
sin16s_gen2::@return: scope:[sin16s_gen2]  from sin16s_gen2::@1
  [34] return 
  to:@return
sin16s_gen2::@2: scope:[sin16s_gen2]  from sin16s_gen2::@1
  [35] (dword) sin16s::x#0 ← (dword) sin16s_gen2::x#2
  [36] call sin16s 
  [37] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
  to:sin16s_gen2::@4
sin16s_gen2::@4: scope:[sin16s_gen2]  from sin16s_gen2::@2
  [38] (signed word) mul16s::a#0 ← (signed word) sin16s::return#0
  [39] call mul16s 
  [40] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0
  to:sin16s_gen2::@5
sin16s_gen2::@5: scope:[sin16s_gen2]  from sin16s_gen2::@4
  [41] (signed dword~) sin16s_gen2::$6 ← (signed dword) mul16s::return#2
  [42] (word~) sin16s_gen2::$8 ← > (signed dword~) sin16s_gen2::$6
  [43] *((signed word*) sin16s_gen2::sintab#2) ← (signed word)(word~) sin16s_gen2::$8
  [44] (signed word*) sin16s_gen2::sintab#0 ← (signed word*) sin16s_gen2::sintab#2 + (const byte) SIZEOF_SIGNED_WORD
  [45] (dword) sin16s_gen2::x#1 ← (dword) sin16s_gen2::x#2 + (dword) sin16s_gen2::step#0
  [46] (word) sin16s_gen2::i#1 ← ++ (word) sin16s_gen2::i#2
  to:sin16s_gen2::@1

(void()) loop()
loop: scope:[loop]  from main::@5
  [47] phi()
  to:loop::@1
loop::@1: scope:[loop]  from loop loop::@4
  [48] (word) xsin_idx#12 ← phi( loop/(word) 0 loop::@4/(word) xsin_idx#21 )
  to:loop::@2
loop::@2: scope:[loop]  from loop::@1 loop::@2
  [49] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto loop::@2
  to:loop::@3
loop::@3: scope:[loop]  from loop::@2
  [50] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← ++ *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR)
  [51] (word~) loop::$7 ← (word) xsin_idx#12 << (byte) 1
  [52] (signed word*~) loop::$2 ← (const signed word*) xsin + (word~) loop::$7
  [53] (signed word) loop::xpos#0 ← *((signed word*~) loop::$2)
  [54] (signed word) render_logo::xpos#0 ← (signed word) loop::xpos#0
  [55] call render_logo 
  to:loop::@5
loop::@5: scope:[loop]  from loop::@3
  [56] (word) xsin_idx#2 ← ++ (word) xsin_idx#12
  [57] if((word) xsin_idx#2!=(const nomodify word) XSIN_SIZE) goto loop::@6
  to:loop::@4
loop::@6: scope:[loop]  from loop::@5
  [58] phi()
  to:loop::@4
loop::@4: scope:[loop]  from loop::@5 loop::@6
  [59] (word) xsin_idx#21 ← phi( loop::@5/(byte) 0 loop::@6/(word) xsin_idx#2 )
  [60] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← -- *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR)
  to:loop::@1

(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
div32u16u: scope:[div32u16u]  from sin16s_gen2
  [61] phi()
  [62] call divr16u 
  [63] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  [64] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2
  [65] (word) divr16u::rem#4 ← (word) rem16u#0
  [66] call divr16u 
  [67] (word) divr16u::return#3 ← (word) divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  [68] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3
  [69] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  [70] return 
  to:@return

(signed word()) sin16s((dword) sin16s::x)
sin16s: scope:[sin16s]  from sin16s_gen2::@2
  [71] if((dword) sin16s::x#0<(const nomodify dword) PI_u4f28) goto sin16s::@1
  to:sin16s::@4
sin16s::@4: scope:[sin16s]  from sin16s
  [72] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const nomodify dword) PI_u4f28
  to:sin16s::@1
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  [73] (byte) sin16s::isUpper#2 ← phi( sin16s/(byte) 0 sin16s::@4/(byte) 1 )
  [73] (dword) sin16s::x#4 ← phi( sin16s/(dword) sin16s::x#0 sin16s::@4/(dword) sin16s::x#1 )
  [74] if((dword) sin16s::x#4<(const nomodify dword) PI_HALF_u4f28) goto sin16s::@2
  to:sin16s::@5
sin16s::@5: scope:[sin16s]  from sin16s::@1
  [75] (dword) sin16s::x#2 ← (const nomodify dword) PI_u4f28 - (dword) sin16s::x#4
  to:sin16s::@2
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  [76] (dword) sin16s::x#6 ← phi( sin16s::@1/(dword) sin16s::x#4 sin16s::@5/(dword) sin16s::x#2 )
  [77] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3
  [78] (word) sin16s::x1#0 ← > (dword~) sin16s::$4
  [79] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0
  [80] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0
  [81] call mulu16_sel 
  [82] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  [83] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0
  [84] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  [85] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0
  [86] call mulu16_sel 
  [87] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  [88] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
  [89] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  [90] call mulu16_sel 
  [91] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  [92] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2
  [93] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0
  [94] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
  [95] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0
  [96] call mulu16_sel 
  [97] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  [98] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10
  [99] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  [100] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0
  [101] call mulu16_sel 
  [102] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  [103] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11
  [104] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4
  [105] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0
  [106] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@12
  to:sin16s::@6
sin16s::@6: scope:[sin16s]  from sin16s::@11
  [107] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1
  to:sin16s::@3
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  [108] (signed word) sin16s::return#1 ← phi( sin16s::@12/(signed word) sin16s::return#5 sin16s::@6/(signed word) sin16s::sinx#1 )
  to:sin16s::@return
sin16s::@return: scope:[sin16s]  from sin16s::@3
  [109] return 
  to:@return
sin16s::@12: scope:[sin16s]  from sin16s::@11
  [110] (signed word) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
  to:sin16s::@3

(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
mul16s: scope:[mul16s]  from sin16s_gen2::@4
  [111] (word) mul16u::a#1 ← (word)(signed word) mul16s::a#0
  [112] call mul16u 
  [113] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  to:mul16s::@4
mul16s::@4: scope:[mul16s]  from mul16s
  [114] (dword) mul16s::m#0 ← (dword) mul16u::return#2
  [115] if((signed word) mul16s::a#0>=(signed byte) 0) goto mul16s::@1
  to:mul16s::@3
mul16s::@3: scope:[mul16s]  from mul16s::@4
  [116] (word~) mul16s::$6 ← > (dword) mul16s::m#0
  [117] (word~) mul16s::$11 ← (word~) mul16s::$6 - (word)(const signed word) sin16s_gen2::ampl#0
  [118] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$11
  to:mul16s::@1
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@4
  [119] (dword) mul16s::m#4 ← phi( mul16s::@3/(dword) mul16s::m#1 mul16s::@4/(dword) mul16s::m#0 )
  to:mul16s::@2
mul16s::@2: scope:[mul16s]  from mul16s::@1
  [120] (signed dword) mul16s::return#0 ← (signed dword)(dword) mul16s::m#4
  to:mul16s::@return
mul16s::@return: scope:[mul16s]  from mul16s::@2
  [121] return 
  to:@return

(void()) render_logo((signed word) render_logo::xpos)
render_logo: scope:[render_logo]  from loop::@3
  [122] (byte~) render_logo::$25 ← (byte)(signed word) render_logo::xpos#0
  [123] (byte~) render_logo::$0 ← (byte~) render_logo::$25 & (byte) 7
  [124] (byte~) render_logo::$1 ← (const nomodify byte) VIC_MCM | (byte~) render_logo::$0
  [125] *((const nomodify byte*) D016) ← (byte~) render_logo::$1
  [126] (signed word~) render_logo::$2 ← (signed word) render_logo::xpos#0 >> (byte) 3
  [127] (signed byte) render_logo::x_char#0 ← (signed byte)(signed word~) render_logo::$2
  [128] if((signed word) render_logo::xpos#0<(signed byte) 0) goto render_logo::@1
  to:render_logo::@2
render_logo::@2: scope:[render_logo]  from render_logo render_logo::@4
  [129] (byte) render_logo::screen_idx#18 ← phi( render_logo/(byte) 0 render_logo::@4/(byte) render_logo::screen_idx#3 )
  [130] if((byte) render_logo::screen_idx#18!=(byte)(signed byte) render_logo::x_char#0) goto render_logo::@3
  to:render_logo::@5
render_logo::@5: scope:[render_logo]  from render_logo::@2 render_logo::@7
  [131] (byte) render_logo::logo_idx#10 ← phi( render_logo::@7/(byte) render_logo::logo_idx#3 render_logo::@2/(byte) 0 )
  [131] (byte) render_logo::screen_idx#10 ← phi( render_logo::@7/(byte) render_logo::screen_idx#4 render_logo::@2/(byte) render_logo::screen_idx#18 )
  [132] if((byte) render_logo::screen_idx#10!=(byte) $28) goto render_logo::@6
  to:render_logo::@return
render_logo::@return: scope:[render_logo]  from render_logo::@11 render_logo::@5
  [133] return 
  to:@return
render_logo::@6: scope:[render_logo]  from render_logo::@5
  [134] *((const byte*) SCREEN + (byte) render_logo::screen_idx#10) ← (byte) render_logo::logo_idx#10
  to:render_logo::@10_1
render_logo::@10_1: scope:[render_logo]  from render_logo::@6
  [135] (byte~) render_logo::$30 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 1
  [136] *((const byte*) SCREEN+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$30
  to:render_logo::@10_2
render_logo::@10_2: scope:[render_logo]  from render_logo::@10_1
  [137] (byte~) render_logo::$33 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 2
  [138] *((const byte*) SCREEN+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$33
  to:render_logo::@10_3
render_logo::@10_3: scope:[render_logo]  from render_logo::@10_2
  [139] (byte~) render_logo::$36 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 3
  [140] *((const byte*) SCREEN+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$36
  to:render_logo::@10_4
render_logo::@10_4: scope:[render_logo]  from render_logo::@10_3
  [141] (byte~) render_logo::$39 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 4
  [142] *((const byte*) SCREEN+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$39
  to:render_logo::@10_5
render_logo::@10_5: scope:[render_logo]  from render_logo::@10_4
  [143] (byte~) render_logo::$42 ← (byte) render_logo::logo_idx#10 + (byte) $28*(byte) 5
  [144] *((const byte*) SCREEN+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#10) ← (byte~) render_logo::$42
  to:render_logo::@7
render_logo::@7: scope:[render_logo]  from render_logo::@10_5
  [145] (byte) render_logo::screen_idx#4 ← ++ (byte) render_logo::screen_idx#10
  [146] (byte) render_logo::logo_idx#3 ← ++ (byte) render_logo::logo_idx#10
  to:render_logo::@5
render_logo::@3: scope:[render_logo]  from render_logo::@2
  [147] *((const byte*) SCREEN + (byte) render_logo::screen_idx#18) ← (byte) 0
  to:render_logo::@6_1
render_logo::@6_1: scope:[render_logo]  from render_logo::@3
  [148] *((const byte*) SCREEN+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#18) ← (byte) 0
  to:render_logo::@6_2
render_logo::@6_2: scope:[render_logo]  from render_logo::@6_1
  [149] *((const byte*) SCREEN+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#18) ← (byte) 0
  to:render_logo::@6_3
render_logo::@6_3: scope:[render_logo]  from render_logo::@6_2
  [150] *((const byte*) SCREEN+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#18) ← (byte) 0
  to:render_logo::@6_4
render_logo::@6_4: scope:[render_logo]  from render_logo::@6_3
  [151] *((const byte*) SCREEN+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#18) ← (byte) 0
  to:render_logo::@6_5
render_logo::@6_5: scope:[render_logo]  from render_logo::@6_4
  [152] *((const byte*) SCREEN+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#18) ← (byte) 0
  to:render_logo::@4
render_logo::@4: scope:[render_logo]  from render_logo::@6_5
  [153] (byte) render_logo::screen_idx#3 ← ++ (byte) render_logo::screen_idx#18
  to:render_logo::@2
render_logo::@1: scope:[render_logo]  from render_logo
  [154] (signed byte) render_logo::logo_idx#1 ← - (signed byte) render_logo::x_char#0
  [155] (byte) render_logo::logo_idx#14 ← (byte)(signed byte) render_logo::logo_idx#1
  to:render_logo::@8
render_logo::@8: scope:[render_logo]  from render_logo::@1 render_logo::@10
  [156] (byte) render_logo::screen_idx#21 ← phi( render_logo::@1/(byte) 0 render_logo::@10/(byte) render_logo::screen_idx#5 )
  [156] (byte) render_logo::logo_idx#11 ← phi( render_logo::@1/(byte) render_logo::logo_idx#14 render_logo::@10/(byte) render_logo::logo_idx#4 )
  [157] if((byte) render_logo::logo_idx#11!=(byte) $28) goto render_logo::@9
  to:render_logo::@11
render_logo::@11: scope:[render_logo]  from render_logo::@13 render_logo::@8
  [158] (byte) render_logo::screen_idx#15 ← phi( render_logo::@8/(byte) render_logo::screen_idx#21 render_logo::@13/(byte) render_logo::screen_idx#6 )
  [159] if((byte) render_logo::screen_idx#15!=(byte) $28) goto render_logo::@12
  to:render_logo::@return
render_logo::@12: scope:[render_logo]  from render_logo::@11
  [160] *((const byte*) SCREEN + (byte) render_logo::screen_idx#15) ← (byte) 0
  to:render_logo::@18_1
render_logo::@18_1: scope:[render_logo]  from render_logo::@12
  [161] *((const byte*) SCREEN+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#15) ← (byte) 0
  to:render_logo::@18_2
render_logo::@18_2: scope:[render_logo]  from render_logo::@18_1
  [162] *((const byte*) SCREEN+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#15) ← (byte) 0
  to:render_logo::@18_3
render_logo::@18_3: scope:[render_logo]  from render_logo::@18_2
  [163] *((const byte*) SCREEN+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#15) ← (byte) 0
  to:render_logo::@18_4
render_logo::@18_4: scope:[render_logo]  from render_logo::@18_3
  [164] *((const byte*) SCREEN+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#15) ← (byte) 0
  to:render_logo::@18_5
render_logo::@18_5: scope:[render_logo]  from render_logo::@18_4
  [165] *((const byte*) SCREEN+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#15) ← (byte) 0
  to:render_logo::@13
render_logo::@13: scope:[render_logo]  from render_logo::@18_5
  [166] (byte) render_logo::screen_idx#6 ← ++ (byte) render_logo::screen_idx#15
  to:render_logo::@11
render_logo::@9: scope:[render_logo]  from render_logo::@8
  [167] *((const byte*) SCREEN + (byte) render_logo::screen_idx#21) ← (byte) render_logo::logo_idx#11
  to:render_logo::@14_1
render_logo::@14_1: scope:[render_logo]  from render_logo::@9
  [168] (byte~) render_logo::$70 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 1
  [169] *((const byte*) SCREEN+(byte) $28*(byte) 1 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$70
  to:render_logo::@14_2
render_logo::@14_2: scope:[render_logo]  from render_logo::@14_1
  [170] (byte~) render_logo::$73 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 2
  [171] *((const byte*) SCREEN+(byte) $28*(byte) 2 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$73
  to:render_logo::@14_3
render_logo::@14_3: scope:[render_logo]  from render_logo::@14_2
  [172] (byte~) render_logo::$76 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 3
  [173] *((const byte*) SCREEN+(byte) $28*(byte) 3 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$76
  to:render_logo::@14_4
render_logo::@14_4: scope:[render_logo]  from render_logo::@14_3
  [174] (byte~) render_logo::$79 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 4
  [175] *((const byte*) SCREEN+(byte) $28*(byte) 4 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$79
  to:render_logo::@14_5
render_logo::@14_5: scope:[render_logo]  from render_logo::@14_4
  [176] (byte~) render_logo::$82 ← (byte) render_logo::logo_idx#11 + (byte) $28*(byte) 5
  [177] *((const byte*) SCREEN+(byte) $28*(byte) 5 + (byte) render_logo::screen_idx#21) ← (byte~) render_logo::$82
  to:render_logo::@10
render_logo::@10: scope:[render_logo]  from render_logo::@14_5
  [178] (byte) render_logo::screen_idx#5 ← ++ (byte) render_logo::screen_idx#21
  [179] (byte) render_logo::logo_idx#4 ← ++ (byte) render_logo::logo_idx#11
  to:render_logo::@8

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from div32u16u div32u16u::@1
  [180] (word) divr16u::dividend#5 ← phi( div32u16u/>(const nomodify dword) PI2_u4f28 div32u16u::@1/<(const nomodify dword) PI2_u4f28 )
  [180] (word) divr16u::rem#10 ← phi( div32u16u/(byte) 0 div32u16u::@1/(word) divr16u::rem#4 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [181] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [181] (word) divr16u::quotient#3 ← phi( divr16u/(word) 0 divr16u::@3/(word) divr16u::return#0 )
  [181] (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#0 )
  [181] (word) divr16u::rem#5 ← phi( divr16u/(word) divr16u::rem#10 divr16u::@3/(word) divr16u::rem#11 )
  [182] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1
  [183] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  [184] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [185] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [186] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [187] (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [188] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1
  [189] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [190] if((word) divr16u::rem#6<(const nomodify word) XSIN_SIZE) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [191] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [192] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const nomodify word) XSIN_SIZE
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [193] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [193] (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  [194] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [195] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [196] (word) rem16u#0 ← (word) divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [197] return 
  to:@return

(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9
  [198] (byte) mulu16_sel::select#5 ← phi( sin16s::@10/(byte) 0 sin16s::@2/(byte) 0 sin16s::@7/(byte) 1 sin16s::@8/(byte) 1 sin16s::@9/(byte) 0 )
  [198] (word) mulu16_sel::v2#5 ← phi( sin16s::@10/(word) mulu16_sel::v2#4 sin16s::@2/(word) mulu16_sel::v2#0 sin16s::@7/(word) mulu16_sel::v2#1 sin16s::@8/(word)(number) $10000/(number) 6 sin16s::@9/(word) mulu16_sel::v2#3 )
  [198] (word) mulu16_sel::v1#5 ← phi( sin16s::@10/(word) mulu16_sel::v1#4 sin16s::@2/(word) mulu16_sel::v1#0 sin16s::@7/(word) mulu16_sel::v1#1 sin16s::@8/(word) mulu16_sel::v1#2 sin16s::@9/(word) mulu16_sel::v1#3 )
  [199] (word) mul16u::a#2 ← (word) mulu16_sel::v1#5
  [200] (word) mul16u::b#1 ← (word) mulu16_sel::v2#5
  [201] call mul16u 
  [202] (dword) mul16u::return#3 ← (dword) mul16u::res#2
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  [203] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#3
  [204] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5
  [205] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  [206] return 
  to:@return

(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
mul16u: scope:[mul16u]  from mul16s mulu16_sel
  [207] (word) mul16u::a#6 ← phi( mul16s/(word) mul16u::a#1 mulu16_sel/(word) mul16u::a#2 )
  [207] (word) mul16u::b#2 ← phi( mul16s/(word)(const signed word) sin16s_gen2::ampl#0 mulu16_sel/(word) mul16u::b#1 )
  [208] (dword) mul16u::mb#0 ← (dword)(word) mul16u::b#2
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [209] (dword) mul16u::mb#2 ← phi( mul16u/(dword) mul16u::mb#0 mul16u::@3/(dword) mul16u::mb#1 )
  [209] (dword) mul16u::res#2 ← phi( mul16u/(dword) 0 mul16u::@3/(dword) mul16u::res#6 )
  [209] (word) mul16u::a#3 ← phi( mul16u/(word) mul16u::a#6 mul16u::@3/(word) mul16u::a#0 )
  [210] if((word) mul16u::a#3!=(byte) 0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [211] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [212] (byte~) mul16u::$1 ← (word) mul16u::a#3 & (byte) 1
  [213] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [214] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [215] (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#2 mul16u::@4/(dword) mul16u::res#1 )
  [216] (word) mul16u::a#0 ← (word) mul16u::a#3 >> (byte) 1
  [217] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1
  to:mul16u::@1
