Fixing struct type size struct MOS7360_TED to 63
Fixing struct type SIZE_OF struct MOS7360_TED to 63
Fixing struct type SIZE_OF struct MOS7360_TED to 63

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@2
  call kbhit 
  (byte) kbhit::return#0 ← (byte) kbhit::return#2
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) kbhit::return#3 ← phi( main::@1/(byte) kbhit::return#0 )
  (byte~) main::$0 ← (byte) kbhit::return#3
  (bool~) main::$2 ← (number) 0 != (byte~) main::$0
  (bool~) main::$1 ← ! (bool~) main::$2
  if((bool~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

(byte()) kbhit()
kbhit: scope:[kbhit]  from main::@1
  *((byte*)(const nomodify struct MOS6529_PIO*) KEYBOARD_PORT+(const byte) OFFSET_STRUCT_MOS6529_PIO_PORT) ← (number) 0
  *((byte*)(const nomodify struct MOS7360_TED*) TED+(const byte) OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) ← (number) 0
  (byte~) kbhit::$0 ← ~ *((byte*)(const nomodify struct MOS7360_TED*) TED+(const byte) OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT)
  (byte) kbhit::return#1 ← (byte~) kbhit::$0
  to:kbhit::@return
kbhit::@return: scope:[kbhit]  from kbhit
  (byte) kbhit::return#4 ← phi( kbhit/(byte) kbhit::return#1 )
  (byte) kbhit::return#2 ← (byte) kbhit::return#4
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(byte) $0::BASIC
(byte) $0::CARTRIDGE_HIGH
(byte) $0::CARTRIDGE_LOW
(byte) $0::FUNCTION_HIGH
(byte) $0::FUNCTION_LOW
(byte) $0::KERNAL
(byte) $0::UNUSED
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify struct MOS6529_PIO*) KEYBOARD_PORT = (struct MOS6529_PIO*)(number) $fd30
(byte) MOS6529_PIO::PORT
(byte) MOS6551_ACIA::COMMAND
(byte) MOS6551_ACIA::CONTROL
(byte) MOS6551_ACIA::DATA
(byte) MOS6551_ACIA::STATUS
(byte) MOS7360_TED::BG_COLOR
(byte) MOS7360_TED::BG_COLOR1
(byte) MOS7360_TED::BG_COLOR2
(byte) MOS7360_TED::BG_COLOR3
(byte) MOS7360_TED::BORDER_COLOR
(byte) MOS7360_TED::CH1_FREQ_HI
(byte) MOS7360_TED::CH1_FREQ_LO
(byte) MOS7360_TED::CH2_FREQ_LO
(byte) MOS7360_TED::CHARPOS_HI
(byte) MOS7360_TED::CHARPOS_LO
(byte) MOS7360_TED::CONTROL1
(byte) MOS7360_TED::CONTROL2
(word) MOS7360_TED::COUNTER1
(word) MOS7360_TED::COUNTER2
(word) MOS7360_TED::COUNTER3
(byte) MOS7360_TED::CURSOR_HI
(byte) MOS7360_TED::CURSOR_LO
(byte) MOS7360_TED::HSCAN_POS
(byte) MOS7360_TED::IRQ_MASK
(byte) MOS7360_TED::IRQ_REQUEST
(volatile byte) MOS7360_TED::KEYBOARD_INPUT loadstore
(byte) MOS7360_TED::MEMORY1
(byte) MOS7360_TED::MEMORY2
(byte) MOS7360_TED::MEMORY3
(byte) MOS7360_TED::RAM_SWITCH
(byte) MOS7360_TED::RASTER_HI
(byte) MOS7360_TED::RASTER_IRQ
(byte) MOS7360_TED::RASTER_LO
(byte) MOS7360_TED::ROM_SWITCH
(byte) MOS7360_TED::SOUND_CONTROL
(const byte*) MOS7360_TED::UNUSED[(number) $1d]  = { fill( $1d, 0) }
(byte) MOS7360_TED::VSCAN_POS
(byte) MOS7501_PORT::DDR
(byte) MOS7501_PORT::PORT
(const byte) OFFSET_STRUCT_MOS6529_PIO_PORT = (byte) 0
(const byte) OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT = (byte) 8
(const nomodify struct MOS7360_TED*) TED = (struct MOS7360_TED*)(number) $ff00
(byte()) kbhit()
(byte~) kbhit::$0
(label) kbhit::@return
(byte) kbhit::return
(byte) kbhit::return#0
(byte) kbhit::return#1
(byte) kbhit::return#2
(byte) kbhit::return#3
(byte) kbhit::return#4
(void()) main()
(byte~) main::$0
(bool~) main::$1
(bool~) main::$2
(label) main::@1
(label) main::@2
(label) main::@return

Adding number conversion cast (unumber) 0 in (bool~) main::$2 ← (number) 0 != (byte~) main::$0
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct MOS6529_PIO*) KEYBOARD_PORT+(const byte) OFFSET_STRUCT_MOS6529_PIO_PORT) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct MOS7360_TED*) TED+(const byte) OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((byte*)(const nomodify struct MOS6529_PIO*) KEYBOARD_PORT+(const byte) OFFSET_STRUCT_MOS6529_PIO_PORT) ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct MOS7360_TED*) TED+(const byte) OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (struct MOS6529_PIO*) 64816
Simplifying constant pointer cast (struct MOS7360_TED*) 65280
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [5] (bool~) main::$1 ← (byte) 0 == (byte~) main::$0 from [4] (bool~) main::$2 ← (byte) 0 != (byte~) main::$0
Successful SSA optimization Pass2UnaryNotSimplification
Alias kbhit::return#0 = kbhit::return#3 
Alias kbhit::return#1 = kbhit::$0 kbhit::return#4 kbhit::return#2 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$1 [4] if((byte) 0==(byte~) main::$0) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Simplifying expression containing zero (byte*)KEYBOARD_PORT in [6] *((byte*)(const nomodify struct MOS6529_PIO*) KEYBOARD_PORT+(const byte) OFFSET_STRUCT_MOS6529_PIO_PORT) ← (byte) 0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) OFFSET_STRUCT_MOS6529_PIO_PORT
Successful SSA optimization PassNEliminateUnusedVars
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to kbhit:7 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] phi()
  [6] call kbhit 
  [7] (byte) kbhit::return#0 ← (byte) kbhit::return#1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] (byte~) main::$0 ← (byte) kbhit::return#0
  [9] if((byte) 0==(byte~) main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return 
  to:@return

(byte()) kbhit()
kbhit: scope:[kbhit]  from main::@1
  [11] *((byte*)(const nomodify struct MOS6529_PIO*) KEYBOARD_PORT) ← (byte) 0
  [12] *((byte*)(const nomodify struct MOS7360_TED*) TED+(const byte) OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) ← (byte) 0
  [13] (byte) kbhit::return#1 ← ~ *((byte*)(const nomodify struct MOS7360_TED*) TED+(const byte) OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT)
  to:kbhit::@return
kbhit::@return: scope:[kbhit]  from kbhit
  [14] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) $0::BASIC
(byte) $0::CARTRIDGE_HIGH
(byte) $0::CARTRIDGE_LOW
(byte) $0::FUNCTION_HIGH
(byte) $0::FUNCTION_LOW
(byte) $0::KERNAL
(byte) $0::UNUSED
(byte) MOS6529_PIO::PORT
(byte) MOS6551_ACIA::COMMAND
(byte) MOS6551_ACIA::CONTROL
(byte) MOS6551_ACIA::DATA
(byte) MOS6551_ACIA::STATUS
(byte) MOS7360_TED::BG_COLOR
(byte) MOS7360_TED::BG_COLOR1
(byte) MOS7360_TED::BG_COLOR2
(byte) MOS7360_TED::BG_COLOR3
(byte) MOS7360_TED::BORDER_COLOR
(byte) MOS7360_TED::CH1_FREQ_HI
(byte) MOS7360_TED::CH1_FREQ_LO
(byte) MOS7360_TED::CH2_FREQ_LO
(byte) MOS7360_TED::CHARPOS_HI
(byte) MOS7360_TED::CHARPOS_LO
(byte) MOS7360_TED::CONTROL1
(byte) MOS7360_TED::CONTROL2
(word) MOS7360_TED::COUNTER1
(word) MOS7360_TED::COUNTER2
(word) MOS7360_TED::COUNTER3
(byte) MOS7360_TED::CURSOR_HI
(byte) MOS7360_TED::CURSOR_LO
(byte) MOS7360_TED::HSCAN_POS
(byte) MOS7360_TED::IRQ_MASK
(byte) MOS7360_TED::IRQ_REQUEST
(volatile byte) MOS7360_TED::KEYBOARD_INPUT loadstore
(byte) MOS7360_TED::MEMORY1
(byte) MOS7360_TED::MEMORY2
(byte) MOS7360_TED::MEMORY3
(byte) MOS7360_TED::RAM_SWITCH
(byte) MOS7360_TED::RASTER_HI
(byte) MOS7360_TED::RASTER_IRQ
(byte) MOS7360_TED::RASTER_LO
(byte) MOS7360_TED::ROM_SWITCH
(byte) MOS7360_TED::SOUND_CONTROL
(byte) MOS7360_TED::VSCAN_POS
(byte) MOS7501_PORT::DDR
(byte) MOS7501_PORT::PORT
(byte()) kbhit()
(byte) kbhit::return
(byte) kbhit::return#0 202.0
(byte) kbhit::return#1 367.33333333333337
(void()) main()
(byte~) main::$0 202.0

Initial phi equivalence classes
Added variable kbhit::return#0 to live range equivalence class [ kbhit::return#0 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable kbhit::return#1 to live range equivalence class [ kbhit::return#1 ]
Complete equivalence classes
[ kbhit::return#0 ]
[ main::$0 ]
[ kbhit::return#1 ]
Allocated zp[1]:2 [ kbhit::return#0 ]
Allocated zp[1]:3 [ main::$0 ]
Allocated zp[1]:4 [ kbhit::return#1 ]

INITIAL ASM
Target platform is plus4basic / MOS6502X
  // File Comments
// Test implementation of kbhit() for Plus/4
// Plus/4 / Commodore 16 registers and memory layout
// http://zimmers.net/anonftp/pub/cbm/schematics/computers/plus4/264_Hardware_Spec.pdf
// http://www.zimmers.net/anonftp/pub/cbm/schematics/computers/plus4/Plus_4_Technical_Docs.pdf
// http://personalpages.tds.net/~rcarlsen/cbm/c16/C16_Service_Manual_314001-03_(1984_Oct).pdf
// https://www.floodgap.com/retrobits/ckb/secret/264memory.txt
// The MOS 7360/8360 TED chip used for graphics and sound in Plus/4 and Commodore 16
// https://www.karlstechnology.com/commodore/TED7360-datasheet.pdf
// http://mclauchlan.site.net.au/scott/C=Hacking/C-Hacking12/gfx.html
  // Upstart
.pc = $1001 "Basic"
:BasicUpstart(main)
.pc = $100d "Program"

  // Global Constants & labels
  .const OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT = 8
  // Keyboard Port PIO (P0-P7)
  // The input latch is part of the TED.
  .label KEYBOARD_PORT = $fd30
  // The TED chip controlling video and sound on the Plus/4 and Commodore 16
  .label TED = $ff00
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label __0 = 3
    // [5] phi from main main::@2 to main::@1 [phi:main/main::@2->main::@1]
  __b1_from_main:
  __b1_from___b2:
    jmp __b1
    // main::@1
  __b1:
    // [6] call kbhit 
    jsr kbhit
    // [7] (byte) kbhit::return#0 ← (byte) kbhit::return#1 -- vbuz1=vbuz2 
    lda.z kbhit.return_1
    sta.z kbhit.return
    jmp __b2
    // main::@2
  __b2:
    // [8] (byte~) main::$0 ← (byte) kbhit::return#0 -- vbuz1=vbuz2 
    lda.z kbhit.return
    sta.z __0
    // [9] if((byte) 0==(byte~) main::$0) goto main::@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z __0
    beq __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // kbhit
// Return true if there's a key waiting, return false if not
kbhit: {
    .label return = 2
    .label return_1 = 4
    // [11] *((byte*)(const nomodify struct MOS6529_PIO*) KEYBOARD_PORT) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Read all keyboard matrix rows
    lda #0
    sta KEYBOARD_PORT
    // [12] *((byte*)(const nomodify struct MOS7360_TED*) TED+(const byte) OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Write to the keyboard input to latch the matrix column values
    lda #0
    sta TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT
    // [13] (byte) kbhit::return#1 ← ~ *((byte*)(const nomodify struct MOS7360_TED*) TED+(const byte) OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) -- vbuz1=_bnot__deref_pbuc1 
    lda TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT
    eor #$ff
    sta.z return_1
    jmp __breturn
    // kbhit::@return
  __breturn:
    // [14] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [11] *((byte*)(const nomodify struct MOS6529_PIO*) KEYBOARD_PORT) ← (byte) 0 [ ] ( main:2::kbhit:6 [ ] { { kbhit::return#0 = kbhit::return#1 } }  ) always clobbers reg byte a 
Statement [12] *((byte*)(const nomodify struct MOS7360_TED*) TED+(const byte) OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) ← (byte) 0 [ ] ( main:2::kbhit:6 [ ] { { kbhit::return#0 = kbhit::return#1 } }  ) always clobbers reg byte a 
Statement [13] (byte) kbhit::return#1 ← ~ *((byte*)(const nomodify struct MOS7360_TED*) TED+(const byte) OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) [ kbhit::return#1 ] ( main:2::kbhit:6 [ kbhit::return#1 ] { { kbhit::return#0 = kbhit::return#1 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ kbhit::return#0 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::$0 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ kbhit::return#1 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [kbhit] 367.33: zp[1]:4 [ kbhit::return#1 ] 202: zp[1]:2 [ kbhit::return#0 ] 
Uplift Scope [main] 202: zp[1]:3 [ main::$0 ] 
Uplift Scope [MOS7360_TED] 
Uplift Scope [MOS6551_ACIA] 
Uplift Scope [MOS6529_PIO] 
Uplift Scope [MOS7501_PORT] 
Uplift Scope [$0] 
Uplift Scope [] 

Uplifting [kbhit] best 300 combination reg byte a [ kbhit::return#1 ] reg byte a [ kbhit::return#0 ] 
Uplifting [main] best 240 combination reg byte a [ main::$0 ] 
Uplifting [MOS7360_TED] best 240 combination 
Uplifting [MOS6551_ACIA] best 240 combination 
Uplifting [MOS6529_PIO] best 240 combination 
Uplifting [MOS7501_PORT] best 240 combination 
Uplifting [$0] best 240 combination 
Uplifting [] best 240 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test implementation of kbhit() for Plus/4
// Plus/4 / Commodore 16 registers and memory layout
// http://zimmers.net/anonftp/pub/cbm/schematics/computers/plus4/264_Hardware_Spec.pdf
// http://www.zimmers.net/anonftp/pub/cbm/schematics/computers/plus4/Plus_4_Technical_Docs.pdf
// http://personalpages.tds.net/~rcarlsen/cbm/c16/C16_Service_Manual_314001-03_(1984_Oct).pdf
// https://www.floodgap.com/retrobits/ckb/secret/264memory.txt
// The MOS 7360/8360 TED chip used for graphics and sound in Plus/4 and Commodore 16
// https://www.karlstechnology.com/commodore/TED7360-datasheet.pdf
// http://mclauchlan.site.net.au/scott/C=Hacking/C-Hacking12/gfx.html
  // Upstart
.pc = $1001 "Basic"
:BasicUpstart(main)
.pc = $100d "Program"

  // Global Constants & labels
  .const OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT = 8
  // Keyboard Port PIO (P0-P7)
  // The input latch is part of the TED.
  .label KEYBOARD_PORT = $fd30
  // The TED chip controlling video and sound on the Plus/4 and Commodore 16
  .label TED = $ff00
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] phi from main main::@2 to main::@1 [phi:main/main::@2->main::@1]
  __b1_from_main:
  __b1_from___b2:
    jmp __b1
    // main::@1
  __b1:
    // [6] call kbhit 
    jsr kbhit
    // [7] (byte) kbhit::return#0 ← (byte) kbhit::return#1
    jmp __b2
    // main::@2
  __b2:
    // [8] (byte~) main::$0 ← (byte) kbhit::return#0
    // [9] if((byte) 0==(byte~) main::$0) goto main::@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // kbhit
// Return true if there's a key waiting, return false if not
kbhit: {
    // [11] *((byte*)(const nomodify struct MOS6529_PIO*) KEYBOARD_PORT) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Read all keyboard matrix rows
    lda #0
    sta KEYBOARD_PORT
    // [12] *((byte*)(const nomodify struct MOS7360_TED*) TED+(const byte) OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Write to the keyboard input to latch the matrix column values
    lda #0
    sta TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT
    // [13] (byte) kbhit::return#1 ← ~ *((byte*)(const nomodify struct MOS7360_TED*) TED+(const byte) OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) -- vbuaa=_bnot__deref_pbuc1 
    lda TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT
    eor #$ff
    jmp __breturn
    // kbhit::@return
  __breturn:
    // [14] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from_main:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin

FINAL SYMBOL TABLE
(byte) $0::BASIC
(byte) $0::CARTRIDGE_HIGH
(byte) $0::CARTRIDGE_LOW
(byte) $0::FUNCTION_HIGH
(byte) $0::FUNCTION_LOW
(byte) $0::KERNAL
(byte) $0::UNUSED
(label) @1
(label) @begin
(label) @end
(const nomodify struct MOS6529_PIO*) KEYBOARD_PORT = (struct MOS6529_PIO*) 64816
(byte) MOS6529_PIO::PORT
(byte) MOS6551_ACIA::COMMAND
(byte) MOS6551_ACIA::CONTROL
(byte) MOS6551_ACIA::DATA
(byte) MOS6551_ACIA::STATUS
(byte) MOS7360_TED::BG_COLOR
(byte) MOS7360_TED::BG_COLOR1
(byte) MOS7360_TED::BG_COLOR2
(byte) MOS7360_TED::BG_COLOR3
(byte) MOS7360_TED::BORDER_COLOR
(byte) MOS7360_TED::CH1_FREQ_HI
(byte) MOS7360_TED::CH1_FREQ_LO
(byte) MOS7360_TED::CH2_FREQ_LO
(byte) MOS7360_TED::CHARPOS_HI
(byte) MOS7360_TED::CHARPOS_LO
(byte) MOS7360_TED::CONTROL1
(byte) MOS7360_TED::CONTROL2
(word) MOS7360_TED::COUNTER1
(word) MOS7360_TED::COUNTER2
(word) MOS7360_TED::COUNTER3
(byte) MOS7360_TED::CURSOR_HI
(byte) MOS7360_TED::CURSOR_LO
(byte) MOS7360_TED::HSCAN_POS
(byte) MOS7360_TED::IRQ_MASK
(byte) MOS7360_TED::IRQ_REQUEST
(volatile byte) MOS7360_TED::KEYBOARD_INPUT loadstore
(byte) MOS7360_TED::MEMORY1
(byte) MOS7360_TED::MEMORY2
(byte) MOS7360_TED::MEMORY3
(byte) MOS7360_TED::RAM_SWITCH
(byte) MOS7360_TED::RASTER_HI
(byte) MOS7360_TED::RASTER_IRQ
(byte) MOS7360_TED::RASTER_LO
(byte) MOS7360_TED::ROM_SWITCH
(byte) MOS7360_TED::SOUND_CONTROL
(const byte*) MOS7360_TED::UNUSED[(number) $1d]  = { fill( $1d, 0) }
(byte) MOS7360_TED::VSCAN_POS
(byte) MOS7501_PORT::DDR
(byte) MOS7501_PORT::PORT
(const byte) OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT = (byte) 8
(const nomodify struct MOS7360_TED*) TED = (struct MOS7360_TED*) 65280
(byte()) kbhit()
(label) kbhit::@return
(byte) kbhit::return
(byte) kbhit::return#0 reg byte a 202.0
(byte) kbhit::return#1 reg byte a 367.33333333333337
(void()) main()
(byte~) main::$0 reg byte a 202.0
(label) main::@1
(label) main::@2
(label) main::@return

reg byte a [ kbhit::return#0 ]
reg byte a [ main::$0 ]
reg byte a [ kbhit::return#1 ]


FINAL ASSEMBLER
Score: 129

  // File Comments
// Test implementation of kbhit() for Plus/4
// Plus/4 / Commodore 16 registers and memory layout
// http://zimmers.net/anonftp/pub/cbm/schematics/computers/plus4/264_Hardware_Spec.pdf
// http://www.zimmers.net/anonftp/pub/cbm/schematics/computers/plus4/Plus_4_Technical_Docs.pdf
// http://personalpages.tds.net/~rcarlsen/cbm/c16/C16_Service_Manual_314001-03_(1984_Oct).pdf
// https://www.floodgap.com/retrobits/ckb/secret/264memory.txt
// The MOS 7360/8360 TED chip used for graphics and sound in Plus/4 and Commodore 16
// https://www.karlstechnology.com/commodore/TED7360-datasheet.pdf
// http://mclauchlan.site.net.au/scott/C=Hacking/C-Hacking12/gfx.html
  // Upstart
.pc = $1001 "Basic"
:BasicUpstart(main)
.pc = $100d "Program"

  // Global Constants & labels
  .const OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT = 8
  // Keyboard Port PIO (P0-P7)
  // The input latch is part of the TED.
  .label KEYBOARD_PORT = $fd30
  // The TED chip controlling video and sound on the Plus/4 and Commodore 16
  .label TED = $ff00
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // [5] phi from main main::@2 to main::@1 [phi:main/main::@2->main::@1]
    // main::@1
  __b1:
    // kbhit()
    // [6] call kbhit 
    jsr kbhit
    // [7] (byte) kbhit::return#0 ← (byte) kbhit::return#1
    // main::@2
    // [8] (byte~) main::$0 ← (byte) kbhit::return#0
    // while(!kbhit())
    // [9] if((byte) 0==(byte~) main::$0) goto main::@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b1
    // main::@return
    // }
    // [10] return 
    rts
}
  // kbhit
// Return true if there's a key waiting, return false if not
kbhit: {
    // KEYBOARD_PORT->PORT = 0x00
    // [11] *((byte*)(const nomodify struct MOS6529_PIO*) KEYBOARD_PORT) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Read all keyboard matrix rows
    lda #0
    sta KEYBOARD_PORT
    // TED->KEYBOARD_INPUT = 0
    // [12] *((byte*)(const nomodify struct MOS7360_TED*) TED+(const byte) OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Write to the keyboard input to latch the matrix column values
    sta TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT
    // ~TED->KEYBOARD_INPUT
    // [13] (byte) kbhit::return#1 ← ~ *((byte*)(const nomodify struct MOS7360_TED*) TED+(const byte) OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) -- vbuaa=_bnot__deref_pbuc1 
    eor #$ff
    // kbhit::@return
    // }
    // [14] return 
    rts
}
  // File Data

