Resolved forward reference fn1 to byte fn1()
Resolved forward reference fn2 to byte fn2()

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::f#0 = (byte()*) 0
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  main::i#3 = phi( main/main::i#0, main::@4/main::i#4 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::i#2 = phi( main::@1/main::i#3 )
  main::i#1 = ++ main::i#2
  main::$0 = main::i#1 & 1
  main::$1 = main::$0 == 0
  if(main::$1) goto main::@3
  to:main::@5
main::@3: scope:[main]  from main::@2
  main::i#5 = phi( main::@2/main::i#1 )
  main::f#1 = &fn1
  to:main::@4
main::@5: scope:[main]  from main::@2
  main::i#6 = phi( main::@2/main::i#1 )
  main::f#2 = &fn2
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@5
  main::i#4 = phi( main::@3/main::i#5, main::@5/main::i#6 )
  main::f#3 = phi( main::@3/main::f#1, main::@5/main::f#2 )
  main::SCREEN[0] = (byte)main::f#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

byte fn1()
fn1: scope:[fn1]  from
  *fn1::BORDER_COLOR = ++ *fn1::BORDER_COLOR
  fn1::return#0 = *fn1::BORDER_COLOR
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  fn1::return#2 = phi( fn1/fn1::return#0 )
  fn1::return#1 = fn1::return#2
  return 
  to:@return

byte fn2()
fn2: scope:[fn2]  from
  *fn2::BG_COLOR = ++ *fn2::BG_COLOR
  fn2::return#0 = *fn2::BG_COLOR
  to:fn2::@return
fn2::@return: scope:[fn2]  from fn2
  fn2::return#2 = phi( fn2/fn2::return#0 )
  fn2::return#1 = fn2::return#2
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
label __start::@1
label __start::@return
byte fn1()
label fn1::@return
const nomodify byte* fn1::BORDER_COLOR = (byte*)$d020
byte fn1::return
byte fn1::return#0
byte fn1::return#1
byte fn1::return#2
byte fn2()
label fn2::@return
const nomodify byte* fn2::BG_COLOR = (byte*)$d021
byte fn2::return
byte fn2::return#0
byte fn2::return#1
byte fn2::return#2
void main()
number~ main::$0
bool~ main::$1
label main::@1
label main::@2
label main::@3
label main::@4
label main::@5
label main::@return
const nomodify byte* main::SCREEN = (byte*)$400
byte()* main::f
byte()* main::f#0
byte()* main::f#1
byte()* main::f#2
byte()* main::f#3
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i#4
byte main::i#5
byte main::i#6

Adding number conversion cast (unumber) 1 in main::$0 = main::i#1 & 1
Adding number conversion cast (unumber) main::$0 in main::$0 = main::i#1 & (unumber)1
Adding number conversion cast (unumber) 0 in main::$1 = main::$0 == 0
Adding number conversion cast (unumber) 0 in main::SCREEN[0] = (byte)main::f#3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53281
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$0 = main::i#1 & 1
Alias main::i#2 = main::i#3 
Alias main::i#1 = main::i#5 main::i#6 
Alias fn1::return#0 = fn1::return#2 fn1::return#1 
Alias fn2::return#0 = fn2::return#2 fn2::return#1 
Successful SSA optimization Pass2AliasElimination
Alias main::i#1 = main::i#4 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$1 [7] if(main::$0==0) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::f#0 = (byte()*) 0
Constant main::i#0 = 0
Constant main::f#1 = &fn1
Constant main::f#2 = &fn2
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [3] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Simplifying expression containing zero main::SCREEN in [11] main::SCREEN[0] = (byte)main::f#3
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable fn1::return#0 and assignment [8] fn1::return#0 = *fn1::BORDER_COLOR
Eliminating unused variable fn2::return#0 and assignment [11] fn2::return#0 = *fn2::BG_COLOR
Eliminating unused constant main::f#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::f#1
Inlining constant with var siblings main::f#2
Constant inlined main::i#0 = 0
Constant inlined main::f#2 = &fn2
Constant inlined main::f#1 = &fn1
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@3
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [12] main::i#7 = main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@5
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3

FINAL CONTROL FLOW GRAPH

byte fn2()
fn2: scope:[fn2]  from
  [0] *fn2::BG_COLOR = ++ *fn2::BG_COLOR
  to:fn2::@return
fn2::@return: scope:[fn2]  from fn2
  [1] return 
  to:@return

byte fn1()
fn1: scope:[fn1]  from
  [2] *fn1::BORDER_COLOR = ++ *fn1::BORDER_COLOR
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  [3] return 
  to:@return

void main()
main: scope:[main]  from
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [5] main::i#2 = phi( main/0, main::@4/main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] main::i#1 = ++ main::i#2
  [7] main::$0 = main::i#1 & 1
  [8] if(main::$0==0) goto main::@3
  to:main::@4
main::@3: scope:[main]  from main::@2
  [9] phi()
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@3
  [10] main::f#3 = phi( main::@3/&fn1, main::@2/&fn2 )
  [11] *main::SCREEN = (byte)main::f#3
  to:main::@1


VARIABLE REGISTER WEIGHTS
byte fn1()
byte fn1::return
byte fn2()
byte fn2::return
void main()
byte~ main::$0 22.0
byte()* main::f
byte()* main::f#3
byte main::i
byte main::i#1 5.5
byte main::i#2 22.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::f#3 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::f#3 ]
[ main::$0 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:3 [ main::f#3 ]
Allocated zp[1]:5 [ main::$0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [11] *main::SCREEN = (byte)main::f#3 [ main::i#1 ] (  [ main::i#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [7] main::$0 = main::i#1 & 1 [ main::i#1 main::$0 ] (  [ main::i#1 main::$0 ] { }  ) always clobbers reg byte a 
Statement [11] *main::SCREEN = (byte)main::f#3 [ main::i#1 ] (  [ main::i#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[2]:3 [ main::f#3 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ main::$0 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 27.5: zp[1]:2 [ main::i#2 main::i#1 ] 22: zp[1]:5 [ main::$0 ] 0: zp[2]:3 [ main::f#3 ] 
Uplift Scope [fn1] 
Uplift Scope [fn2] 
Uplift Scope [] 

Uplifting [main] best 605 combination reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$0 ] zp[2]:3 [ main::f#3 ] 
Uplifting [fn1] best 605 combination 
Uplifting [fn2] best 605 combination 
Uplifting [] best 605 combination 
Allocated (was zp[2]:3) zp[2]:2 [ main::f#3 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests creating and assigning pointers to non-args return with function value
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // fn2
fn2: {
    .label BG_COLOR = $d021
    // [0] *fn2::BG_COLOR = ++ *fn2::BG_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    jmp __breturn
    // fn2::@return
  __breturn:
    // [1] return 
    rts
}
  // fn1
fn1: {
    .label BORDER_COLOR = $d020
    // [2] *fn1::BORDER_COLOR = ++ *fn1::BORDER_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDER_COLOR
    jmp __breturn
    // fn1::@return
  __breturn:
    // [3] return 
    rts
}
  // main
main: {
    .label SCREEN = $400
    .label f = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // main::@1
  __b1:
    jmp __b2
    // main::@2
  __b2:
    // [6] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [7] main::$0 = main::i#1 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [8] if(main::$0==0) goto main::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    // [10] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  __b4_from___b2:
    // [10] phi main::f#3 = &fn2 [phi:main::@2->main::@4#0] -- pprz1=pprc1 
    lda #<fn2
    sta.z f
    lda #>fn2
    sta.z f+1
    jmp __b4
    // [9] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [10] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    // [10] phi main::f#3 = &fn1 [phi:main::@3->main::@4#0] -- pprz1=pprc1 
    lda #<fn1
    sta.z f
    lda #>fn1
    sta.z f+1
    jmp __b4
    // main::@4
  __b4:
    // [11] *main::SCREEN = (byte)main::f#3 -- _deref_pbuc1=_byte_pprz1 
    lda.z f
    sta SCREEN
    // [5] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [5] phi main::i#2 = main::i#1 [phi:main::@4->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b3_from___b2 with __b3
Replacing label __b1 with __b2
Removing instruction __b1:
Removing instruction __b3_from___b2:
Removing instruction __b4_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_main:
Removing instruction __b4_from___b2:
Removing instruction __b1_from___b4:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
byte fn1()
label fn1::@return
const nomodify byte* fn1::BORDER_COLOR = (byte*) 53280
byte fn1::return
byte fn2()
label fn2::@return
const nomodify byte* fn2::BG_COLOR = (byte*) 53281
byte fn2::return
void main()
byte~ main::$0 reg byte a 22.0
label main::@1
label main::@2
label main::@3
label main::@4
const nomodify byte* main::SCREEN = (byte*) 1024
byte()* main::f
byte()* main::f#3 f zp[2]:2
byte main::i
byte main::i#1 reg byte x 5.5
byte main::i#2 reg byte x 22.0

reg byte x [ main::i#2 main::i#1 ]
zp[2]:2 [ main::f#3 ]
reg byte a [ main::$0 ]


FINAL ASSEMBLER
Score: 479

  // File Comments
// Tests creating and assigning pointers to non-args return with function value
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // fn2
fn2: {
    .label BG_COLOR = $d021
    // (*BG_COLOR)++;
    // [0] *fn2::BG_COLOR = ++ *fn2::BG_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    // fn2::@return
    // }
    // [1] return 
    rts
}
  // fn1
fn1: {
    .label BORDER_COLOR = $d020
    // (*BORDER_COLOR)++;
    // [2] *fn1::BORDER_COLOR = ++ *fn1::BORDER_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDER_COLOR
    // fn1::@return
    // }
    // [3] return 
    rts
}
  // main
main: {
    .label SCREEN = $400
    .label f = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // main::@1
    // main::@2
  __b2:
    // ++i;
    // [6] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // i&1
    // [7] main::$0 = main::i#1 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if((i&1)==0)
    // [8] if(main::$0==0) goto main::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // [10] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
    // [10] phi main::f#3 = &fn2 [phi:main::@2->main::@4#0] -- pprz1=pprc1 
    lda #<fn2
    sta.z f
    lda #>fn2
    sta.z f+1
    jmp __b4
    // [9] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
  __b3:
    // [10] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // [10] phi main::f#3 = &fn1 [phi:main::@3->main::@4#0] -- pprz1=pprc1 
    lda #<fn1
    sta.z f
    lda #>fn1
    sta.z f+1
    // main::@4
  __b4:
    // SCREEN[0] = (byte)f
    // [11] *main::SCREEN = (byte)main::f#3 -- _deref_pbuc1=_byte_pprz1 
    lda.z f
    sta SCREEN
    // [5] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [5] phi main::i#2 = main::i#1 [phi:main::@4->main::@1#0] -- register_copy 
    jmp __b2
}
  // File Data

