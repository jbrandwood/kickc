const byte* SCREEN = $0400;
const byte STAR = 81;

byte* VIC = $d000;
byte* BGCOL = VIC+$10*2+1;
byte RED = 2;

void main() {
  *SCREEN = STAR;
  *BGCOL = RED;
  for(byte i: 40..79) {
    SCREEN[i] = (STAR+1);
  }
}
PROGRAM
  (byte*) SCREEN ← (word/signed word) 1024
  (byte) STAR ← (byte/signed byte/word/signed word) 81
  (byte*) VIC ← (word) 53248
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 16 * (byte/signed byte/word/signed word) 2
  (byte*~) $1 ← (byte*) VIC + (byte/signed byte/word/signed word~) $0
  (byte*~) $2 ← (byte*~) $1 + (byte/signed byte/word/signed word) 1
  (byte*) BGCOL ← (byte*~) $2
  (byte) RED ← (byte/signed byte/word/signed word) 2
proc (void()) main()
  *((byte*) SCREEN) ← (byte) STAR
  *((byte*) BGCOL) ← (byte) RED
  (byte) main::i ← (byte/signed byte/word/signed word) 40
main::@1:
  (byte~) main::$0 ← (byte) STAR + (byte/signed byte/word/signed word) 1
  *((byte*) SCREEN + (byte) main::i) ← (byte~) main::$0
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$1 ← (byte) main::i != (byte/signed byte/word/signed word) 80
  if((boolean~) main::$1) goto main::@1
main::@return:
  return 
endproc // main()
  call main 

SYMBOLS
(byte/signed byte/word/signed word~) $0
(byte*~) $1
(byte*~) $2
(byte*) BGCOL
(byte) RED
(byte*) SCREEN
(byte) STAR
(byte*) VIC
(void()) main()
(byte~) main::$0
(boolean~) main::$1
(label) main::@1
(label) main::@return
(byte) main::i

Promoting word/signed word to byte* in SCREEN ← ((byte*)) 1024
Promoting word to byte* in VIC ← ((byte*)) 53248
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word) 1024
  (byte) STAR ← (byte/signed byte/word/signed word) 81
  (byte*) VIC ← ((byte*)) (word) 53248
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 16 * (byte/signed byte/word/signed word) 2
  (byte*~) $1 ← (byte*) VIC + (byte/signed byte/word/signed word~) $0
  (byte*~) $2 ← (byte*~) $1 + (byte/signed byte/word/signed word) 1
  (byte*) BGCOL ← (byte*~) $2
  (byte) RED ← (byte/signed byte/word/signed word) 2
  to:@1
main: scope:[main]  from
  *((byte*) SCREEN) ← (byte) STAR
  *((byte*) BGCOL) ← (byte) RED
  (byte) main::i ← (byte/signed byte/word/signed word) 40
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte~) main::$0 ← (byte) STAR + (byte/signed byte/word/signed word) 1
  *((byte*) SCREEN + (byte) main::i) ← (byte~) main::$0
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$1 ← (byte) main::i != (byte/signed byte/word/signed word) 80
  if((boolean~) main::$1) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

Removing empty block main::@2
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word) 1024
  (byte) STAR ← (byte/signed byte/word/signed word) 81
  (byte*) VIC ← ((byte*)) (word) 53248
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 16 * (byte/signed byte/word/signed word) 2
  (byte*~) $1 ← (byte*) VIC + (byte/signed byte/word/signed word~) $0
  (byte*~) $2 ← (byte*~) $1 + (byte/signed byte/word/signed word) 1
  (byte*) BGCOL ← (byte*~) $2
  (byte) RED ← (byte/signed byte/word/signed word) 2
  to:@1
main: scope:[main]  from
  *((byte*) SCREEN) ← (byte) STAR
  *((byte*) BGCOL) ← (byte) RED
  (byte) main::i ← (byte/signed byte/word/signed word) 40
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte~) main::$0 ← (byte) STAR + (byte/signed byte/word/signed word) 1
  *((byte*) SCREEN + (byte) main::i) ← (byte~) main::$0
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$1 ← (byte) main::i != (byte/signed byte/word/signed word) 80
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word) 1024
  (byte) STAR ← (byte/signed byte/word/signed word) 81
  (byte*) VIC ← ((byte*)) (word) 53248
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 16 * (byte/signed byte/word/signed word) 2
  (byte*~) $1 ← (byte*) VIC + (byte/signed byte/word/signed word~) $0
  (byte*~) $2 ← (byte*~) $1 + (byte/signed byte/word/signed word) 1
  (byte*) BGCOL ← (byte*~) $2
  (byte) RED ← (byte/signed byte/word/signed word) 2
  to:@1
main: scope:[main]  from @1
  *((byte*) SCREEN) ← (byte) STAR
  *((byte*) BGCOL) ← (byte) RED
  (byte) main::i ← (byte/signed byte/word/signed word) 40
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte~) main::$0 ← (byte) STAR + (byte/signed byte/word/signed word) 1
  *((byte*) SCREEN + (byte) main::i) ← (byte~) main::$0
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$1 ← (byte) main::i != (byte/signed byte/word/signed word) 80
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte) STAR#0 ← (byte/signed byte/word/signed word) 81
  (byte*) VIC#0 ← ((byte*)) (word) 53248
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 16 * (byte/signed byte/word/signed word) 2
  (byte*~) $1 ← (byte*) VIC#0 + (byte/signed byte/word/signed word~) $0
  (byte*~) $2 ← (byte*~) $1 + (byte/signed byte/word/signed word) 1
  (byte*) BGCOL#0 ← (byte*~) $2
  (byte) RED#0 ← (byte/signed byte/word/signed word) 2
  to:@1
main: scope:[main]  from @1
  (byte*) BGCOL#1 ← phi( @1/(byte*) BGCOL#2 )
  (byte) RED#1 ← phi( @1/(byte) RED#2 )
  *((byte*) SCREEN#0) ← (byte) STAR#0
  *((byte*) BGCOL#1) ← (byte) RED#1
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 40
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) STAR#0 + (byte/signed byte/word/signed word) 1
  *((byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 80
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) BGCOL#2 ← phi( @begin/(byte*) BGCOL#0 )
  (byte) RED#2 ← phi( @begin/(byte) RED#0 )
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte) STAR#0 ← (byte/signed byte/word/signed word) 81
  (byte*) VIC#0 ← ((byte*)) (word) 53248
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 16 * (byte/signed byte/word/signed word) 2
  (byte*~) $1 ← (byte*) VIC#0 + (byte/signed byte/word/signed word~) $0
  (byte*~) $2 ← (byte*~) $1 + (byte/signed byte/word/signed word) 1
  (byte*) BGCOL#0 ← (byte*~) $2
  (byte) RED#0 ← (byte/signed byte/word/signed word) 2
  to:@1
main: scope:[main]  from @1
  (byte*) BGCOL#1 ← phi( @1/(byte*) BGCOL#2 )
  (byte) RED#1 ← phi( @1/(byte) RED#2 )
  *((byte*) SCREEN#0) ← (byte) STAR#0
  *((byte*) BGCOL#1) ← (byte) RED#1
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 40
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) STAR#0 + (byte/signed byte/word/signed word) 1
  *((byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 80
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) BGCOL#2 ← phi( @begin/(byte*) BGCOL#0 )
  (byte) RED#2 ← phi( @begin/(byte) RED#0 )
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

INITIAL SSA SYMBOL TABLE
(byte/signed byte/word/signed word~) $0
(byte*~) $1
(byte*~) $2
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte*) BGCOL#1
(byte*) BGCOL#2
(byte) RED
(byte) RED#0
(byte) RED#1
(byte) RED#2
(byte*) SCREEN
(byte*) SCREEN#0
(byte) STAR
(byte) STAR#0
(byte*) VIC
(byte*) VIC#0
(void()) main()
(byte~) main::$0
(boolean~) main::$1
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2

Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte) STAR#0 ← (byte/signed byte/word/signed word) 81
  (byte*) VIC#0 ← ((byte*)) (word) 53248
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 16 * (byte/signed byte/word/signed word) 2
  (byte*~) $1 ← (byte*) VIC#0 + (byte/signed byte/word/signed word~) $0
  (byte*~) $2 ← (byte*~) $1 + (byte/signed byte/word/signed word) 1
  (byte*) BGCOL#0 ← (byte*~) $2
  (byte) RED#0 ← (byte/signed byte/word/signed word) 2
  to:@1
main: scope:[main]  from @1
  (byte*) BGCOL#1 ← phi( @1/(byte*) BGCOL#2 )
  (byte) RED#1 ← phi( @1/(byte) RED#2 )
  *((byte*) SCREEN#0) ← (byte) STAR#0
  *((byte*) BGCOL#1) ← (byte) RED#1
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 40
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) STAR#0 + (byte/signed byte/word/signed word) 1
  *((byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 80
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) BGCOL#2 ← phi( @begin/(byte*) BGCOL#0 )
  (byte) RED#2 ← phi( @begin/(byte) RED#0 )
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Not aliassing across scopes: RED#1 RED#2
Not aliassing across scopes: BGCOL#1 BGCOL#2
Alias (byte*) BGCOL#0 = (byte*~) $2 (byte*) BGCOL#2 
Alias (byte) RED#0 = (byte) RED#2 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte) STAR#0 ← (byte/signed byte/word/signed word) 81
  (byte*) VIC#0 ← ((byte*)) (word) 53248
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 16 * (byte/signed byte/word/signed word) 2
  (byte*~) $1 ← (byte*) VIC#0 + (byte/signed byte/word/signed word~) $0
  (byte*) BGCOL#0 ← (byte*~) $1 + (byte/signed byte/word/signed word) 1
  (byte) RED#0 ← (byte/signed byte/word/signed word) 2
  to:@1
main: scope:[main]  from @1
  (byte*) BGCOL#1 ← phi( @1/(byte*) BGCOL#0 )
  (byte) RED#1 ← phi( @1/(byte) RED#0 )
  *((byte*) SCREEN#0) ← (byte) STAR#0
  *((byte*) BGCOL#1) ← (byte) RED#1
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 40
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) STAR#0 + (byte/signed byte/word/signed word) 1
  *((byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 80
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Not aliassing across scopes: RED#1 RED#0
Not aliassing across scopes: BGCOL#1 BGCOL#0
Redundant Phi (byte) RED#1 (byte) RED#0
Redundant Phi (byte*) BGCOL#1 (byte*) BGCOL#0
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte) STAR#0 ← (byte/signed byte/word/signed word) 81
  (byte*) VIC#0 ← ((byte*)) (word) 53248
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 16 * (byte/signed byte/word/signed word) 2
  (byte*~) $1 ← (byte*) VIC#0 + (byte/signed byte/word/signed word~) $0
  (byte*) BGCOL#0 ← (byte*~) $1 + (byte/signed byte/word/signed word) 1
  (byte) RED#0 ← (byte/signed byte/word/signed word) 2
  to:@1
main: scope:[main]  from @1
  *((byte*) SCREEN#0) ← (byte) STAR#0
  *((byte*) BGCOL#0) ← (byte) RED#0
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 40
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) STAR#0 + (byte/signed byte/word/signed word) 1
  *((byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 80
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Simple Condition (boolean~) main::$1 if((byte) main::i#1!=(byte/signed byte/word/signed word) 80) goto main::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte) STAR#0 ← (byte/signed byte/word/signed word) 81
  (byte*) VIC#0 ← ((byte*)) (word) 53248
  (byte/signed byte/word/signed word~) $0 ← (byte/signed byte/word/signed word) 16 * (byte/signed byte/word/signed word) 2
  (byte*~) $1 ← (byte*) VIC#0 + (byte/signed byte/word/signed word~) $0
  (byte*) BGCOL#0 ← (byte*~) $1 + (byte/signed byte/word/signed word) 1
  (byte) RED#0 ← (byte/signed byte/word/signed word) 2
  to:@1
main: scope:[main]  from @1
  *((byte*) SCREEN#0) ← (byte) STAR#0
  *((byte*) BGCOL#0) ← (byte) RED#0
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 40
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) STAR#0 + (byte/signed byte/word/signed word) 1
  *((byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte/signed byte/word/signed word) 80) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Constant (const byte*) SCREEN#0 = ((byte*))1024
Constant (const byte) STAR#0 = 81
Constant (const byte*) VIC#0 = ((byte*))53248
Constant (const byte/signed byte/word/signed word) $0 = 16*2
Constant (const byte) RED#0 = 2
Constant (const byte) main::i#0 = 40
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*~) $1 ← (const byte*) VIC#0 + (const byte/signed byte/word/signed word) $0
  (byte*) BGCOL#0 ← (byte*~) $1 + (byte/signed byte/word/signed word) 1
  to:@1
main: scope:[main]  from @1
  *((const byte*) SCREEN#0) ← (const byte) STAR#0
  *((byte*) BGCOL#0) ← (const byte) RED#0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$0 ← (const byte) STAR#0 + (byte/signed byte/word/signed word) 1
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte/signed byte/word/signed word) 80) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Constant (const byte*) $1 = VIC#0+$0
Constant (const byte) main::$0 = STAR#0+1
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) BGCOL#0 ← (const byte*) $1 + (byte/signed byte/word/signed word) 1
  to:@1
main: scope:[main]  from @1
  *((const byte*) SCREEN#0) ← (const byte) STAR#0
  *((byte*) BGCOL#0) ← (const byte) RED#0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@1/(byte) main::i#1 )
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (const byte) main::$0
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte/signed byte/word/signed word) 80) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Constant (const byte*) BGCOL#0 = $1+1
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  *((const byte*) SCREEN#0) ← (const byte) STAR#0
  *((const byte*) BGCOL#0) ← (const byte) RED#0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@1/(byte) main::i#1 )
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (const byte) main::$0
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte/signed byte/word/signed word) 80) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte/signed byte/word/signed word) 40
Constant inlined $0 = (byte/signed byte/word/signed word) 16*(byte/signed byte/word/signed word) 2
Constant inlined $1 = (const byte*) VIC#0+(byte/signed byte/word/signed word) 16*(byte/signed byte/word/signed word) 2
Constant inlined main::$0 = (const byte) STAR#0+(byte/signed byte/word/signed word) 1
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  *((const byte*) SCREEN#0) ← (const byte) STAR#0
  *((const byte*) BGCOL#0) ← (const byte) RED#0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 40 main::@1/(byte) main::i#1 )
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (const byte) STAR#0+(byte/signed byte/word/signed word) 1
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte/signed byte/word/signed word) 80) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 = (const byte*) VIC#0+(byte/signed byte/word/signed word) 16*(byte/signed byte/word/signed word) 2+(byte/signed byte/word/signed word) 1
(byte) RED
(const byte) RED#0 = (byte/signed byte/word/signed word) 2
(byte*) SCREEN
(const byte*) SCREEN#0 = ((byte*))(word/signed word) 1024
(byte) STAR
(const byte) STAR#0 = (byte/signed byte/word/signed word) 81
(byte*) VIC
(const byte*) VIC#0 = ((byte*))(word) 53248
(void()) main()
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#1
(byte) main::i#2

Block Sequence Planned @begin @1 @end main main::@1 main::@return 
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Block Sequence Planned @begin @1 @end main main::@1 main::@return main::@3 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  *((const byte*) SCREEN#0) ← (const byte) STAR#0
  *((const byte*) BGCOL#0) ← (const byte) RED#0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 40 main::@3/(byte~) main::i#3 )
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (const byte) STAR#0+(byte/signed byte/word/signed word) 1
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte/signed byte/word/signed word) 80) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
main::@3: scope:[main]  from main::@1
  (byte~) main::i#3 ← (byte) main::i#1
  to:main::@1

Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  [0] phi() [ ]
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ]
  [2] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ]
main: scope:[main]  from @1
  [4] *((const byte*) SCREEN#0) ← (const byte) STAR#0 [ ]
  [5] *((const byte*) BGCOL#0) ← (const byte) RED#0 [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [6] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 40 main::@3/(byte~) main::i#3 ) [ main::i#2 ]
  [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (const byte) STAR#0+(byte/signed byte/word/signed word) 1 [ main::i#2 ]
  [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  [9] if((byte) main::i#1!=(byte/signed byte/word/signed word) 80) goto main::@3 [ main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@1
  [10] return  [ ]
  to:@return
main::@3: scope:[main]  from main::@1
  [11] (byte~) main::i#3 ← (byte) main::i#1 [ main::i#3 ]
  to:main::@1

Created 1 initial phi equivalence classes
Coalesced [11] main::i#3 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) main::@3
Block Sequence Planned @begin @1 @end main main::@1 main::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - BEFORE EFFECTIVE LIVE RANGES
@begin: scope:[]  from
  [0] phi() [ ]
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ]
  [2] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ]
main: scope:[main]  from @1
  [4] *((const byte*) SCREEN#0) ← (const byte) STAR#0 [ ]
  [5] *((const byte*) BGCOL#0) ← (const byte) RED#0 [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [6] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 40 main::@1/(byte) main::i#1 ) [ main::i#2 ]
  [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (const byte) STAR#0+(byte/signed byte/word/signed word) 1 [ main::i#2 ]
  [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  [9] if((byte) main::i#1!=(byte/signed byte/word/signed word) 80) goto main::@1 [ main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@1
  [10] return  [ ]
  to:@return

CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ] ( )
main: scope:[main]  from @1
  [4] *((const byte*) SCREEN#0) ← (const byte) STAR#0 [ ] ( main:2 [ ] )
  [5] *((const byte*) BGCOL#0) ← (const byte) RED#0 [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [6] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 40 main::@1/(byte) main::i#1 ) [ main::i#2 ] ( main:2 [ main::i#2 ] )
  [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (const byte) STAR#0+(byte/signed byte/word/signed word) 1 [ main::i#2 ] ( main:2 [ main::i#2 ] )
  [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] )
  [9] if((byte) main::i#1!=(byte/signed byte/word/signed word) 80) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] )
  to:main::@return
main::@return: scope:[main]  from main::@1
  [10] return  [ ] ( main:2 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @begin @end 
main dominated by  @1 @begin main 
main::@1 dominated by  @1 @begin main::@1 main 
main::@return dominated by  main::@return @1 @begin main::@1 main 

Found back edge: Loop head: main::@1 tails: main::@1 blocks: null
Populated: Loop head: main::@1 tails: main::@1 blocks: main::@1 
NATURAL LOOPS
Loop head: main::@1 tails: main::@1 blocks: main::@1 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@1 blocks: main::@1 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@1 blocks: main::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte) RED
(byte*) SCREEN
(byte) STAR
(byte*) VIC
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 16.5

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const STAR = $51
  .const VIC = $d000
  .const RED = 2
  .const BGCOL = VIC+$10*2+1
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
  jsr main
//SEG6 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
    .label i = 2
  //SEG9 [4] *((const byte*) SCREEN#0) ← (const byte) STAR#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #STAR
    sta SCREEN
  //SEG10 [5] *((const byte*) BGCOL#0) ← (const byte) RED#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #RED
    sta BGCOL
  //SEG11 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [6] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 40 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #$28
    sta i
    jmp b1
  //SEG13 [6] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG14 [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (const byte) STAR#0+(byte/signed byte/word/signed word) 1 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #STAR+1
    ldx i
    sta SCREEN,x
  //SEG17 [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG18 [9] if((byte) main::i#1!=(byte/signed byte/word/signed word) 80) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$50
    bne b1_from_b1
    jmp breturn
  //SEG19 main::@return
  breturn:
  //SEG20 [10] return  [ ] ( main:2 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) SCREEN#0) ← (const byte) STAR#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) BGCOL#0) ← (const byte) RED#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (const byte) STAR#0+(byte/signed byte/word/signed word) 1 [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [4] *((const byte*) SCREEN#0) ← (const byte) STAR#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) BGCOL#0) ← (const byte) RED#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (const byte) STAR#0+(byte/signed byte/word/signed word) 1 [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 33: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 275 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 275 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const STAR = $51
  .const VIC = $d000
  .const RED = 2
  .const BGCOL = VIC+$10*2+1
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
  jsr main
//SEG6 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
  //SEG9 [4] *((const byte*) SCREEN#0) ← (const byte) STAR#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #STAR
    sta SCREEN
  //SEG10 [5] *((const byte*) BGCOL#0) ← (const byte) RED#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #RED
    sta BGCOL
  //SEG11 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [6] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 40 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #$28
    jmp b1
  //SEG13 [6] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG14 [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (const byte) STAR#0+(byte/signed byte/word/signed word) 1 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #STAR+1
    sta SCREEN,x
  //SEG17 [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG18 [9] if((byte) main::i#1!=(byte/signed byte/word/signed word) 80) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$50
    bne b1_from_b1
    jmp breturn
  //SEG19 main::@return
  breturn:
  //SEG20 [10] return  [ ] ( main:2 [ ] )
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b1_from_bbegin:
Removing instruction bend_from_b1:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b1:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = (const byte*) VIC#0+(byte/signed byte/word/signed word) 16*(byte/signed byte/word/signed word) 2+(byte/signed byte/word/signed word) 1
(byte) RED
(const byte) RED#0 RED = (byte/signed byte/word/signed word) 2
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word) 1024
(byte) STAR
(const byte) STAR#0 STAR = (byte/signed byte/word/signed word) 81
(byte*) VIC
(const byte*) VIC#0 VIC = ((byte*))(word) 53248
(void()) main()
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 16.5

reg byte x [ main::i#2 main::i#1 ]

FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const STAR = $51
  .const VIC = $d000
  .const RED = 2
  .const BGCOL = VIC+$10*2+1
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
  jsr main
//SEG6 [3] phi from @1 to @end [phi:@1->@end]
//SEG7 @end
//SEG8 main
main: {
  //SEG9 [4] *((const byte*) SCREEN#0) ← (const byte) STAR#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #STAR
    sta SCREEN
  //SEG10 [5] *((const byte*) BGCOL#0) ← (const byte) RED#0 [ ] ( main:2 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #RED
    sta BGCOL
  //SEG11 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG12 [6] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 40 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #$28
  //SEG13 [6] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG14 [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG15 main::@1
  b1:
  //SEG16 [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (const byte) STAR#0+(byte/signed byte/word/signed word) 1 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #STAR+1
    sta SCREEN,x
  //SEG17 [8] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG18 [9] if((byte) main::i#1!=(byte/signed byte/word/signed word) 80) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$50
    bne b1
  //SEG19 main::@return
  //SEG20 [10] return  [ ] ( main:2 [ ] )
    rts
}

