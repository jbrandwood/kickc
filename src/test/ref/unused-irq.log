Resolved forward reference irq2 to interrupt(KERNEL_MIN)(void()) irq2()

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from __start
  *((const nomodify byte*) SCREEN) ← (byte) 'x'
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

interrupt(KERNEL_MIN)(void()) irq1()
irq1: scope:[irq1]  from
  *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq2()
  to:irq1::@return
irq1::@return: scope:[irq1]  from irq1
  return 
  to:@return

interrupt(KERNEL_MIN)(void()) irq2()
irq2: scope:[irq2]  from
  *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq1()
  to:irq2::@return
irq2::@return: scope:[irq2]  from irq2
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify void()**) HARDWARE_IRQ = (void()**)(number) $fffe
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) __start()
(label) __start::@1
(label) __start::@return
interrupt(KERNEL_MIN)(void()) irq1()
(label) irq1::@return
interrupt(KERNEL_MIN)(void()) irq2()
(label) irq2::@return
(void()) main()
(label) main::@return

Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (void()**) 65534
Successful SSA optimization PassNCastSimplification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

interrupt(KERNEL_MIN)(void()) irq2()
irq2: scope:[irq2]  from
  [0] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq1()
  to:irq2::@return
irq2::@return: scope:[irq2]  from irq2
  [1] return 
  to:@return

interrupt(KERNEL_MIN)(void()) irq1()
irq1: scope:[irq1]  from
  [2] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq2()
  to:irq1::@return
irq1::@return: scope:[irq1]  from irq1
  [3] return 
  to:@return

(void()) main()
main: scope:[main]  from
  [4] *((const nomodify byte*) SCREEN) ← (byte) 'x'
  to:main::@return
main::@return: scope:[main]  from main
  [5] return 
  to:@return


VARIABLE REGISTER WEIGHTS
interrupt(KERNEL_MIN)(void()) irq1()
interrupt(KERNEL_MIN)(void()) irq2()
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Unused interrupts pointing to each other but never used from main loop - should be optimized away
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label HARDWARE_IRQ = $fffe
  // irq2
// Unused Interrupt Routine
irq2: {
    // entry interrupt(KERNEL_MIN)
    // [0] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq1() -- _deref_pptc1=pprc2 
    lda #<irq1
    sta HARDWARE_IRQ
    lda #>irq1
    sta HARDWARE_IRQ+1
    jmp __breturn
    // irq2::@return
  __breturn:
    // [1] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // irq1
// Unused Interrupt Routine
irq1: {
    // entry interrupt(KERNEL_MIN)
    // [2] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq2() -- _deref_pptc1=pprc2 
    lda #<irq2
    sta HARDWARE_IRQ
    lda #>irq2
    sta HARDWARE_IRQ+1
    jmp __breturn
    // irq1::@return
  __breturn:
    // [3] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // main
main: {
    // [4] *((const nomodify byte*) SCREEN) ← (byte) 'x' -- _deref_pbuc1=vbuc2 
    lda #'x'
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq1() [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq2() [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *((const nomodify byte*) SCREEN) ← (byte) 'x' [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [irq1] 
Uplift Scope [irq2] 
Uplift Scope [] 

Uplifting [main] best 51 combination 
Uplifting [irq1] best 51 combination 
Uplifting [irq2] best 51 combination 
Uplifting [] best 51 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Unused interrupts pointing to each other but never used from main loop - should be optimized away
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label HARDWARE_IRQ = $fffe
  // irq2
// Unused Interrupt Routine
irq2: {
    // entry interrupt(KERNEL_MIN)
    // [0] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq1() -- _deref_pptc1=pprc2 
    lda #<irq1
    sta HARDWARE_IRQ
    lda #>irq1
    sta HARDWARE_IRQ+1
    jmp __breturn
    // irq2::@return
  __breturn:
    // [1] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // irq1
// Unused Interrupt Routine
irq1: {
    // entry interrupt(KERNEL_MIN)
    // [2] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq2() -- _deref_pptc1=pprc2 
    lda #<irq2
    sta HARDWARE_IRQ
    lda #>irq2
    sta HARDWARE_IRQ+1
    jmp __breturn
    // irq1::@return
  __breturn:
    // [3] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // main
main: {
    // [4] *((const nomodify byte*) SCREEN) ← (byte) 'x' -- _deref_pbuc1=vbuc2 
    lda #'x'
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify void()**) HARDWARE_IRQ = (void()**) 65534
(const nomodify byte*) SCREEN = (byte*) 1024
interrupt(KERNEL_MIN)(void()) irq1()
(label) irq1::@return
interrupt(KERNEL_MIN)(void()) irq2()
(label) irq2::@return
(void()) main()
(label) main::@return



FINAL ASSEMBLER
Score: 42

  // File Comments
// Unused interrupts pointing to each other but never used from main loop - should be optimized away
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label HARDWARE_IRQ = $fffe
  // irq2
// Unused Interrupt Routine
irq2: {
    // entry interrupt(KERNEL_MIN)
    // *HARDWARE_IRQ = &irq1
    // [0] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq1() -- _deref_pptc1=pprc2 
    lda #<irq1
    sta HARDWARE_IRQ
    lda #>irq1
    sta HARDWARE_IRQ+1
    // irq2::@return
    // }
    // [1] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // irq1
// Unused Interrupt Routine
irq1: {
    // entry interrupt(KERNEL_MIN)
    // *HARDWARE_IRQ = &irq2
    // [2] *((const nomodify void()**) HARDWARE_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq2() -- _deref_pptc1=pprc2 
    lda #<irq2
    sta HARDWARE_IRQ
    lda #>irq2
    sta HARDWARE_IRQ+1
    // irq1::@return
    // }
    // [3] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // main
main: {
    // *SCREEN = 'x'
    // [4] *((const nomodify byte*) SCREEN) ← (byte) 'x' -- _deref_pbuc1=vbuc2 
    lda #'x'
    sta SCREEN
    // main::@return
    // }
    // [5] return 
    rts
}
  // File Data

