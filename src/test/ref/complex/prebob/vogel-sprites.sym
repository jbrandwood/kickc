const nomodify byte BLACK = 0
const nomodify byte* BORDER_COLOR = (byte*) 53280
const nomodify struct MOS6526_CIA* CIA1 = (struct MOS6526_CIA*) 56320
const signed byte* COS = SIN+$40
const nomodify byte* D011 = (byte*) 53265
const nomodify byte GREEN = 5
const nomodify byte KEY_SPACE = $3c
const nomodify byte NUM_BOBS = $10
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
const nomodify byte PLEX_COUNT = $20
const byte* PLEX_FREE_YPOS[8]  = { fill( 8, 0) }
const byte* PLEX_PTR[PLEX_COUNT]  = { fill( PLEX_COUNT, 0) }
volatile byte* PLEX_SCREEN_PTR loadstore zp[2]:17 952.8679245283018
const byte* PLEX_SORTED_IDX[PLEX_COUNT]  = { fill( PLEX_COUNT, 0) }
const word* PLEX_XPOS[PLEX_COUNT]  = { fill( PLEX_COUNT, 0) }
const byte* PLEX_YPOS[PLEX_COUNT]  = { fill( PLEX_COUNT, 0) }
const nomodify byte* RASTER = (byte*) 53266
const nomodify byte* SCREEN = (byte*) 1024
const signed byte* SIN[$140]  = kickasm {{ .for(var i=0;i<$140;i++)
        .byte >round($7fff*sin(i*2*PI/256))
 }}
const byte* SPRITE[]  = kickasm {{ .var pic = LoadPicture("smiley.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
const nomodify byte* SPRITES_COLOR = (byte*) 53287
const nomodify byte* SPRITES_ENABLE = (byte*) 53269
const nomodify byte* SPRITES_XMSB = (byte*) 53264
const nomodify byte* SPRITES_XPOS = (byte*) 53248
const nomodify byte* SPRITES_YPOS = (byte*) 53249
const nomodify byte VIC_DEN = $10
const nomodify byte VIC_RSEL = 8
const nomodify byte VIC_RST8 = $80
void __start()
void exit()
byte~ exit::$0 reg byte a 2002.0
void init()
byte~ init::$10 reg byte a 2002.0
byte~ init::$3 reg byte a 2002.0
byte~ init::$4 reg byte x 1001.0
byte~ init::$5 reg byte a 2002.0
byte~ init::$6 reg byte a 2002.0
byte~ init::$9 reg byte a 2002.0
byte init::i
byte init::i#1 i zp[1]:2 1501.5
byte init::i#2 i zp[1]:2 800.8000000000001
byte init::i1
byte init::i1#1 reg byte x 1501.5
byte init::i1#2 reg byte x 1501.5
byte keyboard_key_pressed(byte keyboard_key_pressed::key)
byte~ keyboard_key_pressed::$2 reg byte a 20002.0
byte keyboard_key_pressed::colidx
const byte keyboard_key_pressed::colidx#0 colidx = KEY_SPACE&7
byte keyboard_key_pressed::key
byte keyboard_key_pressed::return
byte keyboard_key_pressed::return#0 reg byte a 3000.75
byte keyboard_key_pressed::return#2 reg byte a 2002.0
byte keyboard_key_pressed::return#3 reg byte a 2002.0
byte keyboard_key_pressed::rowidx
const byte keyboard_key_pressed::rowidx#0 rowidx = KEY_SPACE>>3
const byte* keyboard_matrix_col_bitmask[8]  = { 1, 2, 4, 8, $10, $20, $40, $80 }
byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
byte keyboard_matrix_read::return
byte keyboard_matrix_read::return#0 reg byte a 36667.33333333333
byte keyboard_matrix_read::return#2 reg byte a 20002.0
byte keyboard_matrix_read::row_pressed_bits
byte keyboard_matrix_read::rowid
const byte* keyboard_matrix_row_bitmask[8]  = { $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f }
void loop()
signed word~ loop::$1 zp[2]:15 20002.0
byte~ loop::$11 reg byte a 20002.0
byte~ loop::$18 reg byte a 2002.0
signed word~ loop::$2 zp[2]:15 20002.0
byte~ loop::$20 reg byte a 20002.0
byte~ loop::$4 reg byte x 10001.0
signed word~ loop::$5 zp[2]:15 20002.0
signed word~ loop::$6 zp[2]:15 20002.0
byte~ loop::$8 reg byte a 20002.0
byte loop::a
byte loop::a#1 a zp[1]:10 5000.5
byte loop::a#2 a zp[1]:10 1952.6190476190475
byte loop::a#6 a zp[1]:10 2002.0
byte loop::angle
byte loop::angle#1 angle zp[1]:2 117.76470588235294
byte loop::angle#6 angle zp[1]:2 96.87096774193549
byte loop::i
byte loop::i#1 i zp[1]:3 15001.5
byte loop::i#2 i zp[1]:3 1739.304347826087
byte loop::i1
byte loop::i1#1 i1 zp[1]:4 15001.5
byte loop::i1#5 i1 zp[1]:4 3333.6666666666665
byte loop::plexFreeNextYpos1_return
byte loop::plexFreeNextYpos1_return#0 plexFreeNextYpos1_return zp[1]:23 55001.0
signed byte loop::r
signed byte loop::r#1 r zp[1]:5 6667.333333333333
signed byte loop::r#2 r zp[1]:5 1818.3636363636363
byte loop::rasterY
signed word loop::x
signed word loop::x#0 x zp[2]:15 20002.0
signed word loop::y
signed word loop::y#0 y zp[2]:15 20002.0
void main()
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
const byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:13 20002.0
byte* memset::dst#2 dst zp[2]:13 13334.666666666666
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $3e8
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)SCREEN
signed word mulf8s(signed byte mulf8s::a , signed byte mulf8s::b)
signed byte mulf8s::a
signed byte mulf8s::a#0 reg byte a 10001.0
signed byte mulf8s::a#1 reg byte a 10001.0
signed byte mulf8s::b
signed byte mulf8s::b#0 reg byte x 20002.0
signed byte mulf8s::b#1 reg byte x 20002.0
signed byte mulf8s::b#2 reg byte x 40001.0
signed byte mulf8s::mulf8s_prepare1_a
signed byte mulf8s::mulf8s_prepare1_a#0 reg byte a 20002.0
signed word mulf8s::return
signed word mulf8s::return#0 return zp[2]:15 30000.75
signed word mulf8s::return#2 return zp[2]:15 20002.0
signed word mulf8s::return#3 return zp[2]:15 20002.0
signed word mulf8s_prepared(signed byte mulf8s_prepared::b)
byte~ mulf8s_prepared::$11 reg byte a 2000002.0
byte~ mulf8s_prepared::$12 reg byte a 2000002.0
byte~ mulf8s_prepared::$6 reg byte a 2000002.0
byte~ mulf8s_prepared::$9 reg byte a 2000002.0
signed byte mulf8s_prepared::b
signed byte mulf8s_prepared::b#0 b zp[1]:24 110000.20000000001
word mulf8s_prepared::m
word mulf8s_prepared::m#0 m zp[2]:15 1000001.0
word mulf8s_prepared::m#1 m zp[2]:15 2000002.0
word mulf8s_prepared::m#2 m zp[2]:15 2000002.0
word mulf8s_prepared::m#4 m zp[2]:15 666667.3333333334
word mulf8s_prepared::m#5 m zp[2]:15 1250001.25
const nomodify signed byte* mulf8s_prepared::memA = (signed byte*) 253
signed word mulf8s_prepared::return
void mulf8u_prepare(byte mulf8u_prepare::a)
byte mulf8u_prepare::a
byte mulf8u_prepare::a#0 reg byte a 1100002.0
const nomodify byte* mulf8u_prepare::memA = (byte*) 253
word mulf8u_prepared(byte mulf8u_prepared::b)
byte mulf8u_prepared::b
byte mulf8u_prepared::b#0 reg byte a 1.1000002E7
const nomodify byte* mulf8u_prepared::memB = (byte*) 255
const nomodify byte* mulf8u_prepared::resL = (byte*) 254
word mulf8u_prepared::return
word mulf8u_prepared::return#0 return zp[2]:15 3666667.333333333
word mulf8u_prepared::return#2 return zp[2]:15 2000002.0
void mulf_init()
byte~ mulf_init::$1 reg byte a 20002.0
byte~ mulf_init::$4 reg byte a 20002.0
byte~ mulf_init::$5 reg byte a 20002.0
byte mulf_init::c
byte mulf_init::c#1 c zp[1]:5 2307.9230769230767
byte mulf_init::c#2 c zp[1]:5 10001.0
byte mulf_init::dir
byte mulf_init::dir#2 dir zp[1]:10 3750.375
byte mulf_init::dir#4 dir zp[1]:10 10001.0
word mulf_init::sqr
word mulf_init::sqr#1 sqr zp[2]:11 10001.0
word mulf_init::sqr#2 sqr zp[2]:11 20002.0
word mulf_init::sqr#3 sqr zp[2]:11 8334.166666666666
word mulf_init::sqr#4 sqr zp[2]:11 5000.5
byte* mulf_init::sqr1_hi
byte* mulf_init::sqr1_hi#1 sqr1_hi zp[2]:15 6667.333333333333
byte* mulf_init::sqr1_hi#2 sqr1_hi zp[2]:15 2500.25
byte* mulf_init::sqr1_lo
byte* mulf_init::sqr1_lo#1 sqr1_lo zp[2]:13 20002.0
byte* mulf_init::sqr1_lo#2 sqr1_lo zp[2]:13 2857.4285714285716
byte* mulf_init::sqr2_hi
byte* mulf_init::sqr2_hi#1 sqr2_hi zp[2]:8 3333.6666666666665
byte* mulf_init::sqr2_hi#2 sqr2_hi zp[2]:8 7500.75
byte* mulf_init::sqr2_lo
byte* mulf_init::sqr2_lo#1 sqr2_lo zp[2]:6 20002.0
byte* mulf_init::sqr2_lo#2 sqr2_lo zp[2]:6 4444.888888888889
byte mulf_init::x_2
byte mulf_init::x_2#1 reg byte x 10001.0
byte mulf_init::x_2#2 reg byte x 5000.5
byte mulf_init::x_2#3 reg byte x 6000.6
byte mulf_init::x_255
byte mulf_init::x_255#1 reg byte x 6000.6
byte mulf_init::x_255#2 reg byte x 8000.8
const byte* mulf_sqr1_hi[$200]  = { fill( $200, 0) }
const byte* mulf_sqr1_lo[$200]  = { fill( $200, 0) }
const byte* mulf_sqr2_hi[$200]  = { fill( $200, 0) }
const byte* mulf_sqr2_lo[$200]  = { fill( $200, 0) }
void plexInit(byte* plexInit::screen)
byte plexInit::i
byte plexInit::i#1 reg byte x 15001.5
byte plexInit::i#2 reg byte x 20002.0
byte* plexInit::plexSetScreen1_screen
byte* plexInit::screen
void plexShowSprite()
byte~ plexShowSprite::$11 reg byte x 100001.0
byte~ plexShowSprite::$2 reg byte a 200002.0
byte~ plexShowSprite::$3 reg byte a 200002.0
byte~ plexShowSprite::$5 reg byte x 200002.0
byte~ plexShowSprite::$6 reg byte a 200002.0
byte~ plexShowSprite::$9 reg byte a 200002.0
byte~ plexShowSprite::plexFreeAdd1_$0 reg byte a 200002.0
byte~ plexShowSprite::plexFreeAdd1_$1 reg byte a 200002.0
byte~ plexShowSprite::plexFreeAdd1_$2 reg byte a 200002.0
byte plexShowSprite::plexFreeAdd1_ypos
byte plexShowSprite::plexFreeAdd1_ypos#0 reg byte a 150001.5
byte plexShowSprite::plex_sprite_idx2
byte plexShowSprite::plex_sprite_idx2#0 plex_sprite_idx2 zp[1]:25 25000.25
byte plexShowSprite::xpos_idx
byte plexShowSprite::xpos_idx#0 reg byte a 200002.0
byte plexShowSprite::ypos
void plexSort()
byte plexSort::m
byte plexSort::m#1 m zp[1]:23 1500001.5
byte plexSort::m#2 m zp[1]:23 416667.0833333334
byte plexSort::nxt_idx
byte plexSort::nxt_idx#0 nxt_idx zp[1]:24 300000.30000000005
byte plexSort::nxt_y
byte plexSort::nxt_y#0 nxt_y zp[1]:25 1500000.375
byte plexSort::plexFreePrepare1_s
byte plexSort::plexFreePrepare1_s#1 reg byte x 1500001.5
byte plexSort::plexFreePrepare1_s#2 reg byte x 1500001.5
byte plexSort::s
byte plexSort::s#1 reg byte x 1.3666668333333332E7
byte plexSort::s#2 reg byte x 2000002.0
byte plexSort::s#3 reg byte x 2.05000025E7
byte plexSort::s#6 reg byte x 2000002.0
volatile byte plex_free_next loadstore zp[1]:22 8205.307692307691
volatile byte plex_show_idx loadstore zp[1]:19 10408.326530612245
volatile byte plex_sprite_idx loadstore zp[1]:20 8913.195652173914
volatile byte plex_sprite_msb loadstore zp[1]:21 12978.91489361702

reg byte x [ init::i1#2 init::i1#1 ]
zp[1]:2 [ loop::angle#6 loop::angle#1 init::i#2 init::i#1 ]
zp[1]:3 [ loop::i#2 loop::i#1 ]
zp[1]:4 [ loop::i1#5 loop::i1#1 ]
reg byte x [ plexInit::i#2 plexInit::i#1 ]
zp[1]:5 [ mulf_init::c#2 mulf_init::c#1 loop::r#2 loop::r#1 ]
reg byte x [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
zp[2]:6 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ]
zp[2]:8 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
zp[1]:10 [ mulf_init::dir#2 mulf_init::dir#4 loop::a#2 loop::a#1 loop::a#6 ]
zp[2]:11 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
zp[2]:13 [ memset::dst#2 memset::dst#1 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
reg byte a [ mulf8s::mulf8s_prepare1_a#0 mulf8s::a#1 mulf8s::a#0 ]
reg byte x [ mulf8s::b#2 mulf8s::b#1 mulf8s::b#0 ]
reg byte x [ plexSort::s#3 plexSort::s#1 plexSort::s#6 ]
reg byte x [ plexSort::plexFreePrepare1_s#2 plexSort::plexFreePrepare1_s#1 ]
zp[2]:15 [ mulf8s_prepared::m#4 mulf8s_prepared::m#5 mulf8s_prepared::m#1 mulf8s_prepared::m#0 mulf8s_prepared::m#2 mulf8s::return#0 mulf8u_prepared::return#2 mulf8s::return#2 loop::$1 mulf8s::return#3 loop::$5 mulf8u_prepared::return#0 loop::$2 loop::x#0 loop::$6 loop::y#0 mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
zp[2]:17 [ PLEX_SCREEN_PTR ]
zp[1]:19 [ plex_show_idx ]
zp[1]:20 [ plex_sprite_idx ]
zp[1]:21 [ plex_sprite_msb ]
zp[1]:22 [ plex_free_next ]
reg byte a [ init::$10 ]
reg byte a [ init::$3 ]
reg byte x [ init::$4 ]
reg byte a [ init::$9 ]
reg byte a [ init::$5 ]
reg byte a [ init::$6 ]
reg byte x [ loop::$4 ]
reg byte a [ loop::$20 ]
reg byte a [ loop::$8 ]
reg byte a [ loop::$11 ]
zp[1]:23 [ loop::plexFreeNextYpos1_return#0 plexSort::m#2 plexSort::m#1 ]
reg byte a [ keyboard_key_pressed::return#3 ]
reg byte a [ loop::$18 ]
reg byte a [ keyboard_key_pressed::return#2 ]
reg byte a [ exit::$0 ]
reg byte a [ mulf_init::$1 ]
reg byte a [ mulf_init::$4 ]
reg byte a [ mulf_init::$5 ]
reg byte a [ mulf8u_prepare::a#0 ]
zp[1]:24 [ plexSort::nxt_idx#0 mulf8s_prepared::b#0 ]
reg byte x [ plexSort::s#2 ]
zp[1]:25 [ plexShowSprite::plex_sprite_idx2#0 plexSort::nxt_y#0 ]
reg byte a [ plexShowSprite::plexFreeAdd1_ypos#0 ]
reg byte a [ plexShowSprite::plexFreeAdd1_$0 ]
reg byte a [ plexShowSprite::plexFreeAdd1_$1 ]
reg byte a [ plexShowSprite::plexFreeAdd1_$2 ]
reg byte a [ plexShowSprite::xpos_idx#0 ]
reg byte x [ plexShowSprite::$11 ]
reg byte a [ plexShowSprite::$2 ]
reg byte a [ plexShowSprite::$3 ]
reg byte a [ plexShowSprite::$9 ]
reg byte x [ plexShowSprite::$5 ]
reg byte a [ plexShowSprite::$6 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_key_pressed::$2 ]
reg byte a [ keyboard_key_pressed::return#0 ]
reg byte a [ mulf8u_prepared::b#0 ]
reg byte a [ mulf8s_prepared::$6 ]
reg byte a [ mulf8s_prepared::$11 ]
reg byte a [ mulf8s_prepared::$9 ]
reg byte a [ mulf8s_prepared::$12 ]
reg byte a [ keyboard_matrix_read::return#0 ]
