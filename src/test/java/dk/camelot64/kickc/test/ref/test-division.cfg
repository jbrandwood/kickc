@begin: scope:[]  from
  [0] phi() [ test_8u::rem#0 ] ( )
  to:@15
@15: scope:[]  from @begin
  [1] phi() [ test_8u::rem#0 ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @15
  [3] phi() [ ] ( )
main: scope:[main]  from @15
  [4] phi() [ test_8u::rem#0 ] ( main:2 [ test_8u::rem#0 ] )
  [5] call print_cls param-assignment [ test_8u::rem#0 ] ( main:2 [ test_8u::rem#0 ] )
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi() [ test_8u::rem#0 ] ( main:2 [ test_8u::rem#0 ] )
  [7] call test_8s param-assignment [ line_cursor#1 div8s::rem8u#0 ] ( main:2 [ line_cursor#1 div8s::rem8u#0 ] )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi() [ line_cursor#1 div8s::rem8u#0 ] ( main:2 [ line_cursor#1 div8s::rem8u#0 ] )
  [9] call test_8u param-assignment [ ] ( main:2 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return  [ ] ( main:2 [ ] )
  to:@return
test_8u: scope:[test_8u]  from main::@2
  [11] (byte) test_8u::rem#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ test_8u::rem#0 line_cursor#1 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 line_cursor#1 div8s::rem8u#0 ] )
  to:test_8u::@1
test_8u::@1: scope:[test_8u]  from test_8u test_8u::@11
  [12] (byte) test_8u::i#10 ← phi( test_8u/(byte/signed byte/word/signed word/dword/signed dword) 0 test_8u::@11/(byte) test_8u::i#1 ) [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 ] )
  [13] (byte) test_8u::dividend#0 ← *((const byte[]) test_8u::dividends#0 + (byte) test_8u::i#10) [ test_8u::rem#0 test_8u::i#10 test_8u::dividend#0 line_cursor#1 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 test_8u::dividend#0 line_cursor#1 div8s::rem8u#0 ] )
  [14] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ test_8u::rem#0 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 div8s::rem8u#0 ] )
  [15] (byte) div8u::dividend#2 ← (byte) test_8u::dividend#0 [ test_8u::rem#0 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 line_cursor#1 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 line_cursor#1 div8s::rem8u#0 ] )
  [16] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 [ test_8u::rem#0 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 div8u::divisor#1 line_cursor#1 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 div8u::divisor#1 line_cursor#1 div8s::rem8u#0 ] )
  [17] call div8u param-assignment [ test_8u::rem#0 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 line_cursor#1 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 line_cursor#1 div8s::rem8u#0 ] )
  [18] (byte) div8u::return#3 ← (byte) div8u::return#0 [ test_8u::rem#0 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 line_cursor#1 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 line_cursor#1 div8s::rem8u#0 ] )
  to:test_8u::@3
test_8u::@3: scope:[test_8u]  from test_8u::@1
  [19] (byte) test_8u::res#0 ← (byte) div8u::return#3 [ test_8u::rem#0 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 ] )
  [20] (byte) print_byte::b#1 ← (byte) test_8u::dividend#0 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#1 line_cursor#1 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#1 line_cursor#1 div8s::rem8u#0 ] )
  [21] (byte*~) char_cursor#91 ← (byte*) line_cursor#1 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#1 char_cursor#91 line_cursor#1 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#1 char_cursor#91 line_cursor#1 div8s::rem8u#0 ] )
  [22] call print_byte param-assignment [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 char_cursor#11 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 char_cursor#11 div8s::rem8u#0 ] )
  to:test_8u::@4
test_8u::@4: scope:[test_8u]  from test_8u::@3
  [23] phi() [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 char_cursor#11 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 char_cursor#11 div8s::rem8u#0 ] )
  [24] call print_str param-assignment [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 char_cursor#2 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 char_cursor#2 div8s::rem8u#0 ] )
  to:test_8u::@5
test_8u::@5: scope:[test_8u]  from test_8u::@4
  [25] (byte) print_byte::b#2 ← (byte) test_8u::divisor#0 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 print_byte::b#2 char_cursor#2 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 print_byte::b#2 char_cursor#2 div8s::rem8u#0 ] )
  [26] call print_byte param-assignment [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 char_cursor#11 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 char_cursor#11 div8s::rem8u#0 ] )
  to:test_8u::@6
test_8u::@6: scope:[test_8u]  from test_8u::@5
  [27] phi() [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 char_cursor#11 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 char_cursor#11 div8s::rem8u#0 ] )
  [28] call print_str param-assignment [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 char_cursor#2 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 char_cursor#2 div8s::rem8u#0 ] )
  to:test_8u::@7
test_8u::@7: scope:[test_8u]  from test_8u::@6
  [29] (byte) print_byte::b#3 ← (byte) test_8u::res#0 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 print_byte::b#3 char_cursor#2 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 print_byte::b#3 char_cursor#2 div8s::rem8u#0 ] )
  [30] call print_byte param-assignment [ test_8u::rem#0 test_8u::i#10 line_cursor#1 char_cursor#11 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 char_cursor#11 div8s::rem8u#0 ] )
  to:test_8u::@8
test_8u::@8: scope:[test_8u]  from test_8u::@7
  [31] phi() [ test_8u::rem#0 test_8u::i#10 line_cursor#1 char_cursor#11 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 char_cursor#11 div8s::rem8u#0 ] )
  [32] call print_str param-assignment [ test_8u::rem#0 test_8u::i#10 line_cursor#1 char_cursor#2 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 char_cursor#2 div8s::rem8u#0 ] )
  to:test_8u::@9
test_8u::@9: scope:[test_8u]  from test_8u::@8
  [33] (byte) print_byte::b#4 ← (byte) test_8u::rem#0 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 print_byte::b#4 char_cursor#2 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 print_byte::b#4 char_cursor#2 div8s::rem8u#0 ] )
  [34] call print_byte param-assignment [ test_8u::rem#0 test_8u::i#10 line_cursor#1 char_cursor#11 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 char_cursor#11 div8s::rem8u#0 ] )
  to:test_8u::@10
test_8u::@10: scope:[test_8u]  from test_8u::@9
  [35] phi() [ test_8u::rem#0 test_8u::i#10 line_cursor#1 char_cursor#11 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 char_cursor#11 div8s::rem8u#0 ] )
  [36] call print_ln param-assignment [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 ] )
  to:test_8u::@11
test_8u::@11: scope:[test_8u]  from test_8u::@10
  [37] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 [ test_8u::rem#0 test_8u::i#1 line_cursor#1 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#1 line_cursor#1 div8s::rem8u#0 ] )
  [38] if((byte) test_8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8u::@1 [ test_8u::rem#0 test_8u::i#1 line_cursor#1 div8s::rem8u#0 ] ( main:2::test_8u:9 [ test_8u::rem#0 test_8u::i#1 line_cursor#1 div8s::rem8u#0 ] )
  to:test_8u::@return
test_8u::@return: scope:[test_8u]  from test_8u::@11
  [39] return  [ ] ( main:2::test_8u:9 [ ] )
  to:@return
print_ln: scope:[print_ln]  from test_8s::@10 test_8u::@10
  [40] (byte*) line_cursor#27 ← phi( test_8s::@10/(byte*) line_cursor#30 test_8u::@10/(byte*) line_cursor#1 ) [ line_cursor#27 char_cursor#11 ] ( main:2::test_8u:9::print_ln:36 [ test_8u::rem#0 test_8u::i#10 div8s::rem8u#0 line_cursor#27 char_cursor#11 ] main:2::test_8s:7::print_ln:105 [ test_8u::rem#0 test_8s::i#10 rem8s#3 div8s::rem8u#0 line_cursor#27 char_cursor#11 ] )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [41] (byte*) line_cursor#14 ← phi( print_ln/(byte*) line_cursor#27 print_ln::@1/(byte*) line_cursor#1 ) [ line_cursor#14 char_cursor#11 ] ( main:2::test_8u:9::print_ln:36 [ test_8u::rem#0 test_8u::i#10 div8s::rem8u#0 line_cursor#14 char_cursor#11 ] main:2::test_8s:7::print_ln:105 [ test_8u::rem#0 test_8s::i#10 rem8s#3 div8s::rem8u#0 line_cursor#14 char_cursor#11 ] )
  [42] (byte*) line_cursor#1 ← (byte*) line_cursor#14 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#11 ] ( main:2::test_8u:9::print_ln:36 [ test_8u::rem#0 test_8u::i#10 div8s::rem8u#0 line_cursor#1 char_cursor#11 ] main:2::test_8s:7::print_ln:105 [ test_8u::rem#0 test_8s::i#10 rem8s#3 div8s::rem8u#0 line_cursor#1 char_cursor#11 ] )
  [43] if((byte*) line_cursor#1<(byte*) char_cursor#11) goto print_ln::@1 [ line_cursor#1 char_cursor#11 ] ( main:2::test_8u:9::print_ln:36 [ test_8u::rem#0 test_8u::i#10 div8s::rem8u#0 line_cursor#1 char_cursor#11 ] main:2::test_8s:7::print_ln:105 [ test_8u::rem#0 test_8s::i#10 rem8s#3 div8s::rem8u#0 line_cursor#1 char_cursor#11 ] )
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [44] return  [ line_cursor#1 ] ( main:2::test_8u:9::print_ln:36 [ test_8u::rem#0 test_8u::i#10 div8s::rem8u#0 line_cursor#1 ] main:2::test_8s:7::print_ln:105 [ test_8u::rem#0 test_8s::i#10 rem8s#3 div8s::rem8u#0 line_cursor#1 ] )
  to:@return
print_byte: scope:[print_byte]  from print_sbyte::@1 test_8u::@3 test_8u::@5 test_8u::@7 test_8u::@9
  [45] (byte*) char_cursor#78 ← phi( print_sbyte::@1/(byte*) char_cursor#76 test_8u::@3/(byte*~) char_cursor#91 test_8u::@5/(byte*) char_cursor#2 test_8u::@7/(byte*) char_cursor#2 test_8u::@9/(byte*) char_cursor#2 ) [ print_byte::b#5 char_cursor#78 ] ( main:2::test_8u:9::print_byte:22 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#78 ] main:2::test_8u:9::print_byte:26 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#78 ] main:2::test_8u:9::print_byte:30 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#78 ] main:2::test_8u:9::print_byte:34 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#78 ] main:2::test_8s:7::print_sbyte:91::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 print_byte::b#5 char_cursor#78 ] main:2::test_8s:7::print_sbyte:95::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 print_byte::b#5 char_cursor#78 ] main:2::test_8s:7::print_sbyte:99::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#5 char_cursor#78 ] main:2::test_8s:7::print_sbyte:103::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#5 char_cursor#78 ] )
  [45] (byte) print_byte::b#5 ← phi( print_sbyte::@1/(byte~) print_byte::b#7 test_8u::@3/(byte) print_byte::b#1 test_8u::@5/(byte) print_byte::b#2 test_8u::@7/(byte) print_byte::b#3 test_8u::@9/(byte) print_byte::b#4 ) [ print_byte::b#5 char_cursor#78 ] ( main:2::test_8u:9::print_byte:22 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#78 ] main:2::test_8u:9::print_byte:26 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#78 ] main:2::test_8u:9::print_byte:30 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#78 ] main:2::test_8u:9::print_byte:34 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#78 ] main:2::test_8s:7::print_sbyte:91::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 print_byte::b#5 char_cursor#78 ] main:2::test_8s:7::print_sbyte:95::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 print_byte::b#5 char_cursor#78 ] main:2::test_8s:7::print_sbyte:99::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#5 char_cursor#78 ] main:2::test_8s:7::print_sbyte:103::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#5 char_cursor#78 ] )
  [46] (byte~) print_byte::$0 ← (byte) print_byte::b#5 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#5 char_cursor#78 print_byte::$0 ] ( main:2::test_8u:9::print_byte:22 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#78 print_byte::$0 ] main:2::test_8u:9::print_byte:26 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#78 print_byte::$0 ] main:2::test_8u:9::print_byte:30 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#78 print_byte::$0 ] main:2::test_8u:9::print_byte:34 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#78 print_byte::$0 ] main:2::test_8s:7::print_sbyte:91::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 print_byte::b#5 char_cursor#78 print_byte::$0 ] main:2::test_8s:7::print_sbyte:95::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 print_byte::b#5 char_cursor#78 print_byte::$0 ] main:2::test_8s:7::print_sbyte:99::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#5 char_cursor#78 print_byte::$0 ] main:2::test_8s:7::print_sbyte:103::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#5 char_cursor#78 print_byte::$0 ] )
  [47] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#5 char_cursor#78 print_char::ch#1 ] ( main:2::test_8u:9::print_byte:22 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#78 print_char::ch#1 ] main:2::test_8u:9::print_byte:26 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#78 print_char::ch#1 ] main:2::test_8u:9::print_byte:30 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#78 print_char::ch#1 ] main:2::test_8u:9::print_byte:34 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#78 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:91::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 print_byte::b#5 char_cursor#78 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:95::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 print_byte::b#5 char_cursor#78 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:99::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#5 char_cursor#78 print_char::ch#1 ] main:2::test_8s:7::print_sbyte:103::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#5 char_cursor#78 print_char::ch#1 ] )
  [48] call print_char param-assignment [ char_cursor#11 print_byte::b#5 ] ( main:2::test_8u:9::print_byte:22 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#11 print_byte::b#5 ] main:2::test_8u:9::print_byte:26 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#11 print_byte::b#5 ] main:2::test_8u:9::print_byte:30 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#11 print_byte::b#5 ] main:2::test_8u:9::print_byte:34 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#11 print_byte::b#5 ] main:2::test_8s:7::print_sbyte:91::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#11 print_byte::b#5 ] main:2::test_8s:7::print_sbyte:95::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#11 print_byte::b#5 ] main:2::test_8s:7::print_sbyte:99::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 print_byte::b#5 ] main:2::test_8s:7::print_sbyte:103::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 print_byte::b#5 ] )
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [49] (byte~) print_byte::$2 ← (byte) print_byte::b#5 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#11 print_byte::$2 ] ( main:2::test_8u:9::print_byte:22 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#11 print_byte::$2 ] main:2::test_8u:9::print_byte:26 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#11 print_byte::$2 ] main:2::test_8u:9::print_byte:30 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#11 print_byte::$2 ] main:2::test_8u:9::print_byte:34 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#11 print_byte::$2 ] main:2::test_8s:7::print_sbyte:91::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#11 print_byte::$2 ] main:2::test_8s:7::print_sbyte:95::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#11 print_byte::$2 ] main:2::test_8s:7::print_sbyte:99::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 print_byte::$2 ] main:2::test_8s:7::print_sbyte:103::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 print_byte::$2 ] )
  [50] (byte) print_char::ch#2 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#11 print_char::ch#2 ] ( main:2::test_8u:9::print_byte:22 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#11 print_char::ch#2 ] main:2::test_8u:9::print_byte:26 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#11 print_char::ch#2 ] main:2::test_8u:9::print_byte:30 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#11 print_char::ch#2 ] main:2::test_8u:9::print_byte:34 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#11 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:91::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#11 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:95::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#11 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:99::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 print_char::ch#2 ] main:2::test_8s:7::print_sbyte:103::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 print_char::ch#2 ] )
  [51] call print_char param-assignment [ char_cursor#11 ] ( main:2::test_8u:9::print_byte:22 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#11 ] main:2::test_8u:9::print_byte:26 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#11 ] main:2::test_8u:9::print_byte:30 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#11 ] main:2::test_8u:9::print_byte:34 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:91::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:95::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:99::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:103::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 ] )
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [52] return  [ char_cursor#11 ] ( main:2::test_8u:9::print_byte:22 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#11 ] main:2::test_8u:9::print_byte:26 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#11 ] main:2::test_8u:9::print_byte:30 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#11 ] main:2::test_8u:9::print_byte:34 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:91::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:95::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:99::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:103::print_byte:117 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 ] )
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@2
  [53] (byte*) char_cursor#48 ← phi( print_byte/(byte*) char_cursor#78 print_byte::@1/(byte*) char_cursor#11 print_sbyte::@2/(byte*) char_cursor#77 ) [ print_char::ch#3 char_cursor#48 ] ( main:2::test_8u:9::print_byte:22::print_char:48 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_byte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8u:9::print_byte:26::print_char:48 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_byte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8u:9::print_byte:30::print_char:48 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_byte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8u:9::print_byte:34::print_char:48 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_byte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:91::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 print_byte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:95::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 print_byte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:99::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:103::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8u:9::print_byte:22::print_char:51 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_char::ch#3 char_cursor#48 ] main:2::test_8u:9::print_byte:26::print_char:51 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_char::ch#3 char_cursor#48 ] main:2::test_8u:9::print_byte:30::print_char:51 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_char::ch#3 char_cursor#48 ] main:2::test_8u:9::print_byte:34::print_char:51 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:91::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:95::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:99::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:103::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:91::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 print_sbyte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:95::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 print_sbyte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:99::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_sbyte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:103::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_sbyte::b#5 print_char::ch#3 char_cursor#48 ] )
  [53] (byte) print_char::ch#3 ← phi( print_byte/(byte) print_char::ch#1 print_byte::@1/(byte) print_char::ch#2 print_sbyte::@2/(byte) '-' ) [ print_char::ch#3 char_cursor#48 ] ( main:2::test_8u:9::print_byte:22::print_char:48 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_byte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8u:9::print_byte:26::print_char:48 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_byte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8u:9::print_byte:30::print_char:48 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_byte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8u:9::print_byte:34::print_char:48 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_byte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:91::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 print_byte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:95::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 print_byte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:99::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:103::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8u:9::print_byte:22::print_char:51 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_char::ch#3 char_cursor#48 ] main:2::test_8u:9::print_byte:26::print_char:51 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_char::ch#3 char_cursor#48 ] main:2::test_8u:9::print_byte:30::print_char:51 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_char::ch#3 char_cursor#48 ] main:2::test_8u:9::print_byte:34::print_char:51 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:91::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:95::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:99::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:103::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:91::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 print_sbyte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:95::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 print_sbyte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:99::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_sbyte::b#5 print_char::ch#3 char_cursor#48 ] main:2::test_8s:7::print_sbyte:103::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_sbyte::b#5 print_char::ch#3 char_cursor#48 ] )
  [54] *((byte*) char_cursor#48) ← (byte) print_char::ch#3 [ char_cursor#48 ] ( main:2::test_8u:9::print_byte:22::print_char:48 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#48 ] main:2::test_8u:9::print_byte:26::print_char:48 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#48 ] main:2::test_8u:9::print_byte:30::print_char:48 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#48 ] main:2::test_8u:9::print_byte:34::print_char:48 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#48 ] main:2::test_8s:7::print_sbyte:91::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 print_byte::b#5 char_cursor#48 ] main:2::test_8s:7::print_sbyte:95::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 print_byte::b#5 char_cursor#48 ] main:2::test_8s:7::print_sbyte:99::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#5 char_cursor#48 ] main:2::test_8s:7::print_sbyte:103::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#5 char_cursor#48 ] main:2::test_8u:9::print_byte:22::print_char:51 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#48 ] main:2::test_8u:9::print_byte:26::print_char:51 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#48 ] main:2::test_8u:9::print_byte:30::print_char:51 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#48 ] main:2::test_8u:9::print_byte:34::print_char:51 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#48 ] main:2::test_8s:7::print_sbyte:91::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#48 ] main:2::test_8s:7::print_sbyte:95::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#48 ] main:2::test_8s:7::print_sbyte:99::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#48 ] main:2::test_8s:7::print_sbyte:103::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#48 ] main:2::test_8s:7::print_sbyte:91::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 print_sbyte::b#5 char_cursor#48 ] main:2::test_8s:7::print_sbyte:95::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 print_sbyte::b#5 char_cursor#48 ] main:2::test_8s:7::print_sbyte:99::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_sbyte::b#5 char_cursor#48 ] main:2::test_8s:7::print_sbyte:103::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_sbyte::b#5 char_cursor#48 ] )
  [55] (byte*) char_cursor#11 ← ++ (byte*) char_cursor#48 [ char_cursor#11 ] ( main:2::test_8u:9::print_byte:22::print_char:48 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#11 ] main:2::test_8u:9::print_byte:26::print_char:48 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#11 ] main:2::test_8u:9::print_byte:30::print_char:48 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#11 ] main:2::test_8u:9::print_byte:34::print_char:48 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#11 ] main:2::test_8s:7::print_sbyte:91::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 print_byte::b#5 char_cursor#11 ] main:2::test_8s:7::print_sbyte:95::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 print_byte::b#5 char_cursor#11 ] main:2::test_8s:7::print_sbyte:99::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#5 char_cursor#11 ] main:2::test_8s:7::print_sbyte:103::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#5 char_cursor#11 ] main:2::test_8u:9::print_byte:22::print_char:51 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#11 ] main:2::test_8u:9::print_byte:26::print_char:51 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#11 ] main:2::test_8u:9::print_byte:30::print_char:51 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#11 ] main:2::test_8u:9::print_byte:34::print_char:51 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:91::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:95::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:99::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:103::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:91::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 print_sbyte::b#5 char_cursor#11 ] main:2::test_8s:7::print_sbyte:95::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 print_sbyte::b#5 char_cursor#11 ] main:2::test_8s:7::print_sbyte:99::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_sbyte::b#5 char_cursor#11 ] main:2::test_8s:7::print_sbyte:103::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_sbyte::b#5 char_cursor#11 ] )
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [56] return  [ char_cursor#11 ] ( main:2::test_8u:9::print_byte:22::print_char:48 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#11 ] main:2::test_8u:9::print_byte:26::print_char:48 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#11 ] main:2::test_8u:9::print_byte:30::print_char:48 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#11 ] main:2::test_8u:9::print_byte:34::print_char:48 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_byte::b#5 char_cursor#11 ] main:2::test_8s:7::print_sbyte:91::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 print_byte::b#5 char_cursor#11 ] main:2::test_8s:7::print_sbyte:95::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 print_byte::b#5 char_cursor#11 ] main:2::test_8s:7::print_sbyte:99::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#5 char_cursor#11 ] main:2::test_8s:7::print_sbyte:103::print_byte:117::print_char:48 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#5 char_cursor#11 ] main:2::test_8u:9::print_byte:22::print_char:51 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#11 ] main:2::test_8u:9::print_byte:26::print_char:51 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#11 ] main:2::test_8u:9::print_byte:30::print_char:51 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#11 ] main:2::test_8u:9::print_byte:34::print_char:51 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:91::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:95::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:99::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:103::print_byte:117::print_char:51 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:91::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 print_sbyte::b#5 char_cursor#11 ] main:2::test_8s:7::print_sbyte:95::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 print_sbyte::b#5 char_cursor#11 ] main:2::test_8s:7::print_sbyte:99::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_sbyte::b#5 char_cursor#11 ] main:2::test_8s:7::print_sbyte:103::print_char:113 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_sbyte::b#5 char_cursor#11 ] )
  to:@return
print_str: scope:[print_str]  from test_8s::@4 test_8s::@6 test_8s::@8 test_8u::@4 test_8u::@6 test_8u::@8
  [57] (byte*) print_str::str#9 ← phi( test_8s::@4/(const string) test_8s::str test_8s::@6/(const string) test_8s::str1 test_8s::@8/(const string) test_8s::str2 test_8u::@4/(const string) test_8u::str test_8u::@6/(const string) test_8u::str1 test_8u::@8/(const string) test_8u::str2 ) [ char_cursor#11 print_str::str#9 ] ( main:2::test_8u:9::print_str:24 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#11 print_str::str#9 ] main:2::test_8u:9::print_str:28 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#11 print_str::str#9 ] main:2::test_8u:9::print_str:32 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#11 print_str::str#9 ] main:2::test_8s:7::print_str:93 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#11 print_str::str#9 ] main:2::test_8s:7::print_str:97 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#11 print_str::str#9 ] main:2::test_8s:7::print_str:101 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 print_str::str#9 ] )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [58] (byte*) char_cursor#2 ← phi( print_str/(byte*) char_cursor#11 print_str::@2/(byte*) char_cursor#1 ) [ char_cursor#2 print_str::str#7 ] ( main:2::test_8u:9::print_str:24 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8u:9::print_str:28 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8u:9::print_str:32 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8s:7::print_str:93 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8s:7::print_str:97 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8s:7::print_str:101 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] )
  [58] (byte*) print_str::str#7 ← phi( print_str/(byte*) print_str::str#9 print_str::@2/(byte*) print_str::str#0 ) [ char_cursor#2 print_str::str#7 ] ( main:2::test_8u:9::print_str:24 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8u:9::print_str:28 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8u:9::print_str:32 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8s:7::print_str:93 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8s:7::print_str:97 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8s:7::print_str:101 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] )
  [59] if(*((byte*) print_str::str#7)!=(byte) '@') goto print_str::@2 [ char_cursor#2 print_str::str#7 ] ( main:2::test_8u:9::print_str:24 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8u:9::print_str:28 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8u:9::print_str:32 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8s:7::print_str:93 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8s:7::print_str:97 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8s:7::print_str:101 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] )
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [60] return  [ char_cursor#2 ] ( main:2::test_8u:9::print_str:24 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#2 ] main:2::test_8u:9::print_str:28 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#2 ] main:2::test_8u:9::print_str:32 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#2 ] main:2::test_8s:7::print_str:93 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#2 ] main:2::test_8s:7::print_str:97 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#2 ] main:2::test_8s:7::print_str:101 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#2 ] )
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [61] *((byte*) char_cursor#2) ← *((byte*) print_str::str#7) [ char_cursor#2 print_str::str#7 ] ( main:2::test_8u:9::print_str:24 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8u:9::print_str:28 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8u:9::print_str:32 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8s:7::print_str:93 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8s:7::print_str:97 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] main:2::test_8s:7::print_str:101 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#2 print_str::str#7 ] )
  [62] (byte*) char_cursor#1 ← ++ (byte*) char_cursor#2 [ print_str::str#7 char_cursor#1 ] ( main:2::test_8u:9::print_str:24 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_str::str#7 char_cursor#1 ] main:2::test_8u:9::print_str:28 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_str::str#7 char_cursor#1 ] main:2::test_8u:9::print_str:32 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_str::str#7 char_cursor#1 ] main:2::test_8s:7::print_str:93 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 print_str::str#7 char_cursor#1 ] main:2::test_8s:7::print_str:97 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 print_str::str#7 char_cursor#1 ] main:2::test_8s:7::print_str:101 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_str::str#7 char_cursor#1 ] )
  [63] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#7 [ print_str::str#0 char_cursor#1 ] ( main:2::test_8u:9::print_str:24 [ test_8u::rem#0 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_str::str#0 char_cursor#1 ] main:2::test_8u:9::print_str:28 [ test_8u::rem#0 test_8u::i#10 test_8u::res#0 line_cursor#1 div8s::rem8u#0 print_str::str#0 char_cursor#1 ] main:2::test_8u:9::print_str:32 [ test_8u::rem#0 test_8u::i#10 line_cursor#1 div8s::rem8u#0 print_str::str#0 char_cursor#1 ] main:2::test_8s:7::print_str:93 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 print_str::str#0 char_cursor#1 ] main:2::test_8s:7::print_str:97 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 print_str::str#0 char_cursor#1 ] main:2::test_8s:7::print_str:101 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_str::str#0 char_cursor#1 ] )
  to:print_str::@1
div8u: scope:[div8u]  from div8s::@4 test_8u::@1
  [64] (byte*) div8u::remainder#8 ← phi( div8s::@4/&(byte) div8s::rem8u#0 test_8u::@1/&(byte) test_8u::rem#0 ) [ test_8u::rem#0 div8u::dividend#5 div8u::divisor#6 div8u::remainder#8 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::dividend#5 div8u::divisor#6 div8u::remainder#8 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::dividend#5 div8u::divisor#6 div8u::remainder#8 div8s::rem8u#0 ] )
  [64] (byte) div8u::divisor#6 ← phi( div8s::@4/(byte) div8u::divisor#0 test_8u::@1/(byte) div8u::divisor#1 ) [ test_8u::rem#0 div8u::dividend#5 div8u::divisor#6 div8u::remainder#8 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::dividend#5 div8u::divisor#6 div8u::remainder#8 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::dividend#5 div8u::divisor#6 div8u::remainder#8 div8s::rem8u#0 ] )
  [64] (byte) div8u::dividend#5 ← phi( div8s::@4/(byte) div8u::dividend#1 test_8u::@1/(byte) div8u::dividend#2 ) [ test_8u::rem#0 div8u::dividend#5 div8u::divisor#6 div8u::remainder#8 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::dividend#5 div8u::divisor#6 div8u::remainder#8 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::dividend#5 div8u::divisor#6 div8u::remainder#8 div8s::rem8u#0 ] )
  to:div8u::@1
div8u::@1: scope:[div8u]  from div8u div8u::@3
  [65] (byte) div8u::i#2 ← phi( div8u/(byte/signed byte/word/signed word/dword/signed dword) 0 div8u::@3/(byte) div8u::i#1 ) [ test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8s::rem8u#0 ] )
  [65] (byte) div8u::quotient#3 ← phi( div8u/(byte/signed byte/word/signed word/dword/signed dword) 0 div8u::@3/(byte) div8u::return#0 ) [ test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8s::rem8u#0 ] )
  [65] (byte) div8u::dividend#3 ← phi( div8u/(byte) div8u::dividend#5 div8u::@3/(byte) div8u::dividend#0 ) [ test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8s::rem8u#0 ] )
  [65] (byte) div8u::rem#4 ← phi( div8u/(byte/signed byte/word/signed word/dword/signed dword) 0 div8u::@3/(byte) div8u::rem#8 ) [ test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::rem#4 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8s::rem8u#0 ] )
  [66] (byte) div8u::rem#1 ← (byte) div8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8s::rem8u#0 ] )
  [67] (byte~) div8u::$1 ← (byte) div8u::dividend#3 & (byte/word/signed word/dword/signed dword) 128 [ test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8u::$1 div8s::rem8u#0 ] )
  [68] if((byte~) div8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8u::@2 [ test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#1 div8s::rem8u#0 ] )
  to:div8u::@4
div8u::@4: scope:[div8u]  from div8u::@1
  [69] (byte) div8u::rem#2 ← ++ (byte) div8u::rem#1 [ test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#2 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#2 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#2 div8s::rem8u#0 ] )
  to:div8u::@2
div8u::@2: scope:[div8u]  from div8u::@1 div8u::@4
  [70] (byte) div8u::rem#5 ← phi( div8u::@1/(byte) div8u::rem#1 div8u::@4/(byte) div8u::rem#2 ) [ test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#5 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#5 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::dividend#3 div8u::quotient#3 div8u::i#2 div8u::rem#5 div8s::rem8u#0 ] )
  [71] (byte) div8u::dividend#0 ← (byte) div8u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::quotient#3 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::quotient#3 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::quotient#3 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8s::rem8u#0 ] )
  [72] (byte) div8u::quotient#1 ← (byte) div8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 div8s::rem8u#0 ] )
  [73] if((byte) div8u::rem#5<(byte) div8u::divisor#6) goto div8u::@3 [ test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#1 div8s::rem8u#0 ] )
  to:div8u::@5
div8u::@5: scope:[div8u]  from div8u::@2
  [74] (byte) div8u::quotient#2 ← ++ (byte) div8u::quotient#1 [ test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#2 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#2 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::i#2 div8u::dividend#0 div8u::rem#5 div8u::quotient#2 div8s::rem8u#0 ] )
  [75] (byte) div8u::rem#3 ← (byte) div8u::rem#5 - (byte) div8u::divisor#6 [ test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::divisor#6 div8u::remainder#8 div8u::i#2 div8u::dividend#0 div8u::quotient#2 div8u::rem#3 div8s::rem8u#0 ] )
  to:div8u::@3
div8u::@3: scope:[div8u]  from div8u::@2 div8u::@5
  [76] (byte) div8u::return#0 ← phi( div8u::@2/(byte) div8u::quotient#1 div8u::@5/(byte) div8u::quotient#2 ) [ test_8u::rem#0 div8u::return#0 div8u::divisor#6 div8u::remainder#8 div8u::i#2 div8u::rem#8 div8u::dividend#0 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::return#0 div8u::divisor#6 div8u::remainder#8 div8u::i#2 div8u::rem#8 div8u::dividend#0 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::return#0 div8u::divisor#6 div8u::remainder#8 div8u::i#2 div8u::rem#8 div8u::dividend#0 div8s::rem8u#0 ] )
  [76] (byte) div8u::rem#8 ← phi( div8u::@2/(byte) div8u::rem#5 div8u::@5/(byte) div8u::rem#3 ) [ test_8u::rem#0 div8u::return#0 div8u::divisor#6 div8u::remainder#8 div8u::i#2 div8u::rem#8 div8u::dividend#0 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::return#0 div8u::divisor#6 div8u::remainder#8 div8u::i#2 div8u::rem#8 div8u::dividend#0 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::return#0 div8u::divisor#6 div8u::remainder#8 div8u::i#2 div8u::rem#8 div8u::dividend#0 div8s::rem8u#0 ] )
  [77] (byte) div8u::i#1 ← ++ (byte) div8u::i#2 [ test_8u::rem#0 div8u::return#0 div8u::divisor#6 div8u::remainder#8 div8u::rem#8 div8u::dividend#0 div8u::i#1 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::return#0 div8u::divisor#6 div8u::remainder#8 div8u::rem#8 div8u::dividend#0 div8u::i#1 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::return#0 div8u::divisor#6 div8u::remainder#8 div8u::rem#8 div8u::dividend#0 div8u::i#1 div8s::rem8u#0 ] )
  [78] if((byte) div8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto div8u::@1 [ test_8u::rem#0 div8u::return#0 div8u::divisor#6 div8u::remainder#8 div8u::rem#8 div8u::dividend#0 div8u::i#1 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::return#0 div8u::divisor#6 div8u::remainder#8 div8u::rem#8 div8u::dividend#0 div8u::i#1 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::return#0 div8u::divisor#6 div8u::remainder#8 div8u::rem#8 div8u::dividend#0 div8u::i#1 div8s::rem8u#0 ] )
  to:div8u::@6
div8u::@6: scope:[div8u]  from div8u::@3
  [79] *((byte*) div8u::remainder#8) ← (byte) div8u::rem#8 [ test_8u::rem#0 div8u::return#0 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::return#0 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::return#0 div8s::rem8u#0 ] )
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u::@6
  [80] return  [ test_8u::rem#0 div8u::return#0 div8s::rem8u#0 ] ( main:2::test_8u:9::div8u:17 [ test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 line_cursor#1 test_8u::rem#0 div8u::return#0 div8s::rem8u#0 ] main:2::test_8s:7::div8s:87::div8u:131 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 test_8u::rem#0 div8u::return#0 div8s::rem8u#0 ] )
  to:@return
test_8s: scope:[test_8s]  from main::@1
  [81] phi() [ test_8u::rem#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 ] )
  to:test_8s::@1
test_8s::@1: scope:[test_8s]  from test_8s test_8s::@12
  [82] (byte*) line_cursor#30 ← phi( test_8s/(const byte*) SCREEN#0 test_8s::@12/(byte*) line_cursor#1 ) [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 ] )
  [82] (byte*) char_cursor#81 ← phi( test_8s/(const byte*) SCREEN#0 test_8s::@12/(byte*~) char_cursor#100 ) [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 ] )
  [82] (signed byte) rem8s#18 ← phi( test_8s/(byte/signed byte/word/signed word/dword/signed dword) 0 test_8s::@12/(signed byte) rem8s#3 ) [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 ] )
  [82] (byte) test_8s::i#10 ← phi( test_8s/(byte/signed byte/word/signed word/dword/signed dword) 0 test_8s::@12/(byte) test_8s::i#1 ) [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 ] )
  [83] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10) [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 ] )
  [84] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 ] )
  [85] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] )
  [86] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] )
  [87] call div8s param-assignment [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 div8s::rem8u#0 ] )
  [88] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 div8s::rem8u#0 ] )
  to:test_8s::@3
test_8s::@3: scope:[test_8s]  from test_8s::@1
  [89] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 ] )
  [90] (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#0 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 char_cursor#81 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 div8s::rem8u#0 ] )
  [91] call print_sbyte param-assignment [ test_8u::rem#0 line_cursor#30 char_cursor#11 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 char_cursor#11 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 ] )
  to:test_8s::@4
test_8s::@4: scope:[test_8s]  from test_8s::@3
  [92] phi() [ test_8u::rem#0 line_cursor#30 char_cursor#11 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 char_cursor#11 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 ] )
  [93] call print_str param-assignment [ test_8u::rem#0 line_cursor#30 char_cursor#2 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 char_cursor#2 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 ] )
  to:test_8s::@5
test_8s::@5: scope:[test_8s]  from test_8s::@4
  [94] (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#0 [ test_8u::rem#0 line_cursor#30 char_cursor#2 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 char_cursor#2 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 div8s::rem8u#0 ] )
  [95] call print_sbyte param-assignment [ test_8u::rem#0 line_cursor#30 char_cursor#11 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 char_cursor#11 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 ] )
  to:test_8s::@6
test_8s::@6: scope:[test_8s]  from test_8s::@5
  [96] phi() [ test_8u::rem#0 line_cursor#30 char_cursor#11 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 char_cursor#11 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 ] )
  [97] call print_str param-assignment [ test_8u::rem#0 line_cursor#30 char_cursor#2 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 char_cursor#2 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 ] )
  to:test_8s::@7
test_8s::@7: scope:[test_8s]  from test_8s::@6
  [98] (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#0 [ test_8u::rem#0 line_cursor#30 char_cursor#2 test_8s::i#10 rem8s#3 print_sbyte::b#3 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 char_cursor#2 test_8s::i#10 rem8s#3 print_sbyte::b#3 div8s::rem8u#0 ] )
  [99] call print_sbyte param-assignment [ test_8u::rem#0 line_cursor#30 char_cursor#11 test_8s::i#10 rem8s#3 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 char_cursor#11 test_8s::i#10 rem8s#3 div8s::rem8u#0 ] )
  to:test_8s::@8
test_8s::@8: scope:[test_8s]  from test_8s::@7
  [100] phi() [ test_8u::rem#0 line_cursor#30 char_cursor#11 test_8s::i#10 rem8s#3 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 char_cursor#11 test_8s::i#10 rem8s#3 div8s::rem8u#0 ] )
  [101] call print_str param-assignment [ test_8u::rem#0 line_cursor#30 char_cursor#2 test_8s::i#10 rem8s#3 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 char_cursor#2 test_8s::i#10 rem8s#3 div8s::rem8u#0 ] )
  to:test_8s::@9
test_8s::@9: scope:[test_8s]  from test_8s::@8
  [102] (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#3 [ test_8u::rem#0 line_cursor#30 char_cursor#2 test_8s::i#10 rem8s#3 print_sbyte::b#4 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 char_cursor#2 test_8s::i#10 rem8s#3 print_sbyte::b#4 div8s::rem8u#0 ] )
  [103] call print_sbyte param-assignment [ test_8u::rem#0 line_cursor#30 char_cursor#11 test_8s::i#10 rem8s#3 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 char_cursor#11 test_8s::i#10 rem8s#3 div8s::rem8u#0 ] )
  to:test_8s::@10
test_8s::@10: scope:[test_8s]  from test_8s::@9
  [104] phi() [ test_8u::rem#0 line_cursor#30 char_cursor#11 test_8s::i#10 rem8s#3 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#30 char_cursor#11 test_8s::i#10 rem8s#3 div8s::rem8u#0 ] )
  [105] call print_ln param-assignment [ test_8u::rem#0 line_cursor#1 test_8s::i#10 rem8s#3 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#1 test_8s::i#10 rem8s#3 div8s::rem8u#0 ] )
  to:test_8s::@11
test_8s::@11: scope:[test_8s]  from test_8s::@10
  [106] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 [ test_8u::rem#0 line_cursor#1 test_8s::i#1 rem8s#3 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#1 test_8s::i#1 rem8s#3 div8s::rem8u#0 ] )
  [107] if((byte) test_8s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8s::@12 [ test_8u::rem#0 line_cursor#1 test_8s::i#1 rem8s#3 div8s::rem8u#0 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#1 test_8s::i#1 rem8s#3 div8s::rem8u#0 ] )
  to:test_8s::@return
test_8s::@return: scope:[test_8s]  from test_8s::@11
  [108] return  [ line_cursor#1 div8s::rem8u#0 ] ( main:2::test_8s:7 [ line_cursor#1 div8s::rem8u#0 ] )
  to:@return
test_8s::@12: scope:[test_8s]  from test_8s::@11
  [109] (byte*~) char_cursor#100 ← (byte*) line_cursor#1 [ test_8u::rem#0 line_cursor#1 test_8s::i#1 rem8s#3 char_cursor#100 ] ( main:2::test_8s:7 [ test_8u::rem#0 line_cursor#1 test_8s::i#1 rem8s#3 char_cursor#100 ] )
  to:test_8s::@1
print_sbyte: scope:[print_sbyte]  from test_8s::@3 test_8s::@5 test_8s::@7 test_8s::@9
  [110] (byte*) char_cursor#77 ← phi( test_8s::@3/(byte*) char_cursor#81 test_8s::@5/(byte*) char_cursor#2 test_8s::@7/(byte*) char_cursor#2 test_8s::@9/(byte*) char_cursor#2 ) [ char_cursor#77 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:91 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#77 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:95 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#77 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:99 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#77 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:103 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#77 print_sbyte::b#5 ] )
  [110] (signed byte) print_sbyte::b#5 ← phi( test_8s::@3/(signed byte) print_sbyte::b#1 test_8s::@5/(signed byte) print_sbyte::b#2 test_8s::@7/(signed byte) print_sbyte::b#3 test_8s::@9/(signed byte) print_sbyte::b#4 ) [ char_cursor#77 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:91 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#77 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:95 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#77 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:99 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#77 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:103 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#77 print_sbyte::b#5 ] )
  [111] if((signed byte) print_sbyte::b#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte::@1 [ char_cursor#77 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:91 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#77 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:95 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#77 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:99 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#77 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:103 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#77 print_sbyte::b#5 ] )
  to:print_sbyte::@2
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte
  [112] phi() [ char_cursor#77 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:91 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#77 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:95 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#77 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:99 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#77 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:103 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#77 print_sbyte::b#5 ] )
  [113] call print_char param-assignment [ char_cursor#11 print_sbyte::b#5 ] ( main:2::test_8s:7::print_sbyte:91 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#11 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:95 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#11 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:99 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 print_sbyte::b#5 ] main:2::test_8s:7::print_sbyte:103 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 print_sbyte::b#5 ] )
  to:print_sbyte::@4
print_sbyte::@4: scope:[print_sbyte]  from print_sbyte::@2
  [114] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ char_cursor#11 print_sbyte::b#0 ] ( main:2::test_8s:7::print_sbyte:91 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#11 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:95 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#11 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:99 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 print_sbyte::b#0 ] main:2::test_8s:7::print_sbyte:103 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 print_sbyte::b#0 ] )
  to:print_sbyte::@1
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte print_sbyte::@4
  [115] (byte*) char_cursor#76 ← phi( print_sbyte/(byte*) char_cursor#77 print_sbyte::@4/(byte*) char_cursor#11 ) [ char_cursor#76 print_sbyte::b#6 ] ( main:2::test_8s:7::print_sbyte:91 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#76 print_sbyte::b#6 ] main:2::test_8s:7::print_sbyte:95 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#76 print_sbyte::b#6 ] main:2::test_8s:7::print_sbyte:99 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#76 print_sbyte::b#6 ] main:2::test_8s:7::print_sbyte:103 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#76 print_sbyte::b#6 ] )
  [115] (signed byte) print_sbyte::b#6 ← phi( print_sbyte/(signed byte) print_sbyte::b#5 print_sbyte::@4/(signed byte) print_sbyte::b#0 ) [ char_cursor#76 print_sbyte::b#6 ] ( main:2::test_8s:7::print_sbyte:91 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#76 print_sbyte::b#6 ] main:2::test_8s:7::print_sbyte:95 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#76 print_sbyte::b#6 ] main:2::test_8s:7::print_sbyte:99 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#76 print_sbyte::b#6 ] main:2::test_8s:7::print_sbyte:103 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#76 print_sbyte::b#6 ] )
  [116] (byte~) print_byte::b#7 ← (byte)(signed byte) print_sbyte::b#6 [ print_byte::b#7 char_cursor#76 ] ( main:2::test_8s:7::print_sbyte:91 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 print_byte::b#7 char_cursor#76 ] main:2::test_8s:7::print_sbyte:95 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 print_byte::b#7 char_cursor#76 ] main:2::test_8s:7::print_sbyte:99 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#7 char_cursor#76 ] main:2::test_8s:7::print_sbyte:103 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 print_byte::b#7 char_cursor#76 ] )
  [117] call print_byte param-assignment [ char_cursor#11 ] ( main:2::test_8s:7::print_sbyte:91 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:95 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:99 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:103 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 ] )
  to:print_sbyte::@return
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@1
  [118] return  [ char_cursor#11 ] ( main:2::test_8s:7::print_sbyte:91 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:95 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 test_8s::res#0 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:99 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 ] main:2::test_8s:7::print_sbyte:103 [ test_8u::rem#0 line_cursor#30 test_8s::i#10 rem8s#3 div8s::rem8u#0 char_cursor#11 ] )
  to:@return
div8s: scope:[div8s]  from test_8s::@1
  [119] if((signed byte) div8s::dividend#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@16 [ test_8u::rem#0 div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::dividend#0 div8s::divisor#0 ] )
  to:div8s::@7
div8s::@7: scope:[div8s]  from div8s
  [120] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ test_8u::rem#0 div8s::divisor#0 div8s::$2 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::divisor#0 div8s::$2 ] )
  [121] (byte~) div8s::dividendb#8 ← (byte)(signed byte~) div8s::$2 [ test_8u::rem#0 div8s::divisor#0 div8s::dividendb#8 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::divisor#0 div8s::dividendb#8 ] )
  to:div8s::@2
div8s::@2: scope:[div8s]  from div8s::@16 div8s::@7
  [122] (byte) div8s::dividendb#3 ← phi( div8s::@16/(byte~) div8s::dividendb#7 div8s::@7/(byte~) div8s::dividendb#8 ) [ test_8u::rem#0 div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] )
  [122] (byte) div8s::neg#3 ← phi( div8s::@16/(byte/signed byte/word/signed word/dword/signed dword) 0 div8s::@7/(byte/signed byte/word/signed word/dword/signed dword) 1 ) [ test_8u::rem#0 div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] )
  [123] if((signed byte) div8s::divisor#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@17 [ test_8u::rem#0 div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::divisor#0 div8s::neg#3 div8s::dividendb#3 ] )
  to:div8s::@9
div8s::@9: scope:[div8s]  from div8s::@2
  [124] (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor#0 [ test_8u::rem#0 div8s::neg#3 div8s::dividendb#3 div8s::$7 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::neg#3 div8s::dividendb#3 div8s::$7 ] )
  [125] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ test_8u::rem#0 div8s::dividendb#3 div8s::$7 div8s::neg#2 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::dividendb#3 div8s::$7 div8s::neg#2 ] )
  [126] (byte~) div8s::divisorb#5 ← (byte)(signed byte~) div8s::$7 [ test_8u::rem#0 div8s::dividendb#3 div8s::neg#2 div8s::divisorb#5 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::dividendb#3 div8s::neg#2 div8s::divisorb#5 ] )
  to:div8s::@4
div8s::@4: scope:[div8s]  from div8s::@17 div8s::@9
  [127] (byte) div8s::neg#4 ← phi( div8s::@17/(byte) div8s::neg#3 div8s::@9/(byte) div8s::neg#2 ) [ test_8u::rem#0 div8s::dividendb#3 div8s::divisorb#3 div8s::neg#4 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::dividendb#3 div8s::divisorb#3 div8s::neg#4 ] )
  [127] (byte) div8s::divisorb#3 ← phi( div8s::@17/(byte~) div8s::divisorb#4 div8s::@9/(byte~) div8s::divisorb#5 ) [ test_8u::rem#0 div8s::dividendb#3 div8s::divisorb#3 div8s::neg#4 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::dividendb#3 div8s::divisorb#3 div8s::neg#4 ] )
  [128] (byte) div8s::rem8u#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ test_8u::rem#0 div8s::dividendb#3 div8s::divisorb#3 div8s::neg#4 div8s::rem8u#0 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::dividendb#3 div8s::divisorb#3 div8s::neg#4 div8s::rem8u#0 ] )
  [129] (byte) div8u::dividend#1 ← (byte) div8s::dividendb#3 [ test_8u::rem#0 div8u::dividend#1 div8s::divisorb#3 div8s::neg#4 div8s::rem8u#0 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8u::dividend#1 div8s::divisorb#3 div8s::neg#4 div8s::rem8u#0 ] )
  [130] (byte) div8u::divisor#0 ← (byte) div8s::divisorb#3 [ test_8u::rem#0 div8u::dividend#1 div8u::divisor#0 div8s::neg#4 div8s::rem8u#0 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8u::dividend#1 div8u::divisor#0 div8s::neg#4 div8s::rem8u#0 ] )
  [131] call div8u param-assignment [ test_8u::rem#0 div8u::return#0 div8s::neg#4 div8s::rem8u#0 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8u::return#0 div8s::neg#4 div8s::rem8u#0 ] )
  [132] (byte) div8u::return#2 ← (byte) div8u::return#0 [ test_8u::rem#0 div8s::neg#4 div8s::rem8u#0 div8u::return#2 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::neg#4 div8s::rem8u#0 div8u::return#2 ] )
  to:div8s::@15
div8s::@15: scope:[div8s]  from div8s::@4
  [133] (byte) div8s::resultb#0 ← (byte) div8u::return#2 [ test_8u::rem#0 div8s::neg#4 div8s::rem8u#0 div8s::resultb#0 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::neg#4 div8s::rem8u#0 div8s::resultb#0 ] )
  [134] if((byte) div8s::neg#4!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@5 [ test_8u::rem#0 div8s::rem8u#0 div8s::resultb#0 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::rem8u#0 div8s::resultb#0 ] )
  to:div8s::@18
div8s::@18: scope:[div8s]  from div8s::@15
  [135] (signed byte~) div8s::return#6 ← (signed byte)(byte) div8s::resultb#0 [ test_8u::rem#0 div8s::rem8u#0 div8s::return#6 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::rem8u#0 div8s::return#6 ] )
  [136] (signed byte~) rem8s#30 ← (signed byte)(byte) div8s::rem8u#0 [ test_8u::rem#0 div8s::rem8u#0 div8s::return#6 rem8s#30 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::rem8u#0 div8s::return#6 rem8s#30 ] )
  to:div8s::@return
div8s::@return: scope:[div8s]  from div8s::@18 div8s::@5
  [137] (signed byte) rem8s#3 ← phi( div8s::@18/(signed byte~) rem8s#30 div8s::@5/(signed byte) rem8s#1 ) [ test_8u::rem#0 rem8s#3 div8s::return#2 div8s::rem8u#0 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 rem8s#3 div8s::return#2 div8s::rem8u#0 ] )
  [137] (signed byte) div8s::return#2 ← phi( div8s::@18/(signed byte~) div8s::return#6 div8s::@5/(signed byte) div8s::return#0 ) [ test_8u::rem#0 rem8s#3 div8s::return#2 div8s::rem8u#0 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 rem8s#3 div8s::return#2 div8s::rem8u#0 ] )
  [138] return  [ test_8u::rem#0 rem8s#3 div8s::return#2 div8s::rem8u#0 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 rem8s#3 div8s::return#2 div8s::rem8u#0 ] )
  to:@return
div8s::@5: scope:[div8s]  from div8s::@15
  [139] (signed byte) rem8s#1 ← - (signed byte)(byte) div8s::rem8u#0 [ test_8u::rem#0 div8s::rem8u#0 div8s::resultb#0 rem8s#1 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::rem8u#0 div8s::resultb#0 rem8s#1 ] )
  [140] (signed byte) div8s::return#0 ← - (signed byte)(byte) div8s::resultb#0 [ test_8u::rem#0 div8s::rem8u#0 div8s::return#0 rem8s#1 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::rem8u#0 div8s::return#0 rem8s#1 ] )
  to:div8s::@return
div8s::@17: scope:[div8s]  from div8s::@2
  [141] (byte~) div8s::divisorb#4 ← (byte)(signed byte) div8s::divisor#0 [ test_8u::rem#0 div8s::neg#3 div8s::dividendb#3 div8s::divisorb#4 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::neg#3 div8s::dividendb#3 div8s::divisorb#4 ] )
  to:div8s::@4
div8s::@16: scope:[div8s]  from div8s
  [142] (byte~) div8s::dividendb#7 ← (byte)(signed byte) div8s::dividend#0 [ test_8u::rem#0 div8s::divisor#0 div8s::dividendb#7 ] ( main:2::test_8s:7::div8s:87 [ line_cursor#30 test_8s::i#10 char_cursor#81 test_8s::dividend#0 test_8s::divisor#0 test_8u::rem#0 div8s::divisor#0 div8s::dividendb#7 ] )
  to:div8s::@2
print_cls: scope:[print_cls]  from main
  [143] phi() [ ] ( main:2::print_cls:5 [ test_8u::rem#0 ] )
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [144] (byte*) print_cls::sc#2 ← phi( print_cls/(const byte*) SCREEN#0 print_cls::@1/(byte*) print_cls::sc#1 ) [ print_cls::sc#2 ] ( main:2::print_cls:5 [ test_8u::rem#0 print_cls::sc#2 ] )
  [145] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ test_8u::rem#0 print_cls::sc#2 ] )
  [146] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ test_8u::rem#0 print_cls::sc#1 ] )
  [147] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ test_8u::rem#0 print_cls::sc#1 ] )
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [148] return  [ ] ( main:2::print_cls:5 [ test_8u::rem#0 ] )
  to:@return
