Inlined call call __init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from __start::@1
  (byte) idx#7 ← phi( __start::@1/(byte) idx#11 )
  *((const nomodify byte*) SCREEN + (byte) idx#7) ← (byte) 'c'
  (byte) idx#0 ← ++ (byte) idx#7
  *((const nomodify byte*) SCREEN + (byte) idx#0) ← (byte) 'm'
  (byte) idx#1 ← ++ (byte) idx#0
  *((const nomodify byte*) SCREEN + (byte) idx#1) ← (byte) 'l'
  (byte) idx#2 ← ++ (byte) idx#1
  to:main::@return
main::@return: scope:[main]  from main
  (byte) idx#8 ← phi( main/(byte) idx#2 )
  (byte) idx#3 ← (byte) idx#8
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  (byte) idx#4 ← (byte) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  (byte) idx#11 ← phi( __start::__init1/(byte) idx#4 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  (byte) idx#9 ← phi( __start::@1/(byte) idx#3 )
  (byte) idx#5 ← (byte) idx#9
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  (byte) idx#10 ← phi( __start::@2/(byte) idx#5 )
  (byte) idx#6 ← (byte) idx#10
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(byte) idx
(byte) idx#0
(byte) idx#1
(byte) idx#10
(byte) idx#11
(byte) idx#2
(byte) idx#3
(byte) idx#4
(byte) idx#5
(byte) idx#6
(byte) idx#7
(byte) idx#8
(byte) idx#9
(void()) main()
(label) main::@return

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias idx#2 = idx#8 idx#3 
Alias idx#11 = idx#4 
Alias idx#10 = idx#5 idx#9 idx#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) idx#7 (byte) idx#11
Identical Phi Values (byte) idx#10 (byte) idx#2
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte) idx#11 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN in [1] *((const nomodify byte*) SCREEN + (const byte) idx#11) ← (byte) 'c'
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte) idx#2 and assignment [5] (byte) idx#2 ← ++ (byte) idx#1
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [1] (byte) idx#0 ← ++ (const byte) idx#11
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) idx#0 = ++idx#11
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [2] (byte) idx#1 ← ++ (const byte) idx#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) idx#1 = ++idx#0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings (const byte) idx#11
Inlining constant with different constant siblings (const byte) idx#0
Inlining constant with different constant siblings (const byte) idx#1
Constant inlined idx#11 = (byte) 0
Constant inlined idx#0 = ++(byte) 0
Constant inlined idx#1 = ++++(byte) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN+++0)
Consolidated array index constant in *(SCREEN+++++0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Successful SSA optimization Pass2ConstantSimplification
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify byte*) SCREEN) ← (byte) 'c'
  [1] *((const nomodify byte*) SCREEN+(byte) 1) ← (byte) 'm'
  [2] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) 'l'
  to:main::@return
main::@return: scope:[main]  from main
  [3] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) idx
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test declarations of variables without definition
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // The actual declarations
  .label SCREEN = $400
  // main
// And a little code using them
main: {
    // [0] *((const nomodify byte*) SCREEN) ← (byte) 'c' -- _deref_pbuc1=vbuc2 
    lda #'c'
    sta SCREEN
    // [1] *((const nomodify byte*) SCREEN+(byte) 1) ← (byte) 'm' -- _deref_pbuc1=vbuc2 
    lda #'m'
    sta SCREEN+1
    // [2] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) 'l' -- _deref_pbuc1=vbuc2 
    lda #'l'
    sta SCREEN+2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify byte*) SCREEN) ← (byte) 'c' [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const nomodify byte*) SCREEN+(byte) 1) ← (byte) 'm' [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) 'l' [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 27 combination 
Uplifting [] best 27 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test declarations of variables without definition
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // The actual declarations
  .label SCREEN = $400
  // main
// And a little code using them
main: {
    // [0] *((const nomodify byte*) SCREEN) ← (byte) 'c' -- _deref_pbuc1=vbuc2 
    lda #'c'
    sta SCREEN
    // [1] *((const nomodify byte*) SCREEN+(byte) 1) ← (byte) 'm' -- _deref_pbuc1=vbuc2 
    lda #'m'
    sta SCREEN+1
    // [2] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) 'l' -- _deref_pbuc1=vbuc2 
    lda #'l'
    sta SCREEN+2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(byte) idx
(void()) main()
(label) main::@return



FINAL ASSEMBLER
Score: 24

  // File Comments
// Test declarations of variables without definition
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // The actual declarations
  .label SCREEN = $400
  // main
// And a little code using them
main: {
    // SCREEN[idx++] = 'c'
    // [0] *((const nomodify byte*) SCREEN) ← (byte) 'c' -- _deref_pbuc1=vbuc2 
    lda #'c'
    sta SCREEN
    // SCREEN[idx++] = 'm'
    // [1] *((const nomodify byte*) SCREEN+(byte) 1) ← (byte) 'm' -- _deref_pbuc1=vbuc2 
    lda #'m'
    sta SCREEN+1
    // SCREEN[idx++] = 'l'
    // [2] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) 'l' -- _deref_pbuc1=vbuc2 
    lda #'l'
    sta SCREEN+2
    // main::@return
    // }
    // [3] return 
    rts
}
  // File Data

