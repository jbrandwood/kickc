Fixing pointer increment (struct Point*) points ← ++ (struct Point*) points
Rewriting struct pointer member access *((struct Point*) points).x
Rewriting struct pointer member access *((struct Point*) points).y
Rewriting struct pointer member access *((struct Point*) points).x
Rewriting struct pointer member access *((struct Point*) points).y

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (struct Point*) points#0 ← ((struct Point*)) (number) $1000
  to:@1

(void()) main()
main: scope:[main]  from @1
  (struct Point*) points#4 ← phi( @1/(struct Point*) points#7 )
  (byte*) main::SCREEN ← ((byte*)) (number) $400
  (byte*) main::$0 ← (byte*)(struct Point*) points#4 + (const byte) OFFSET_STRUCT_POINT_X
  *((byte*) main::SCREEN + (number) 0) ← *((byte*) main::$0)
  (byte*) main::$1 ← (byte*)(struct Point*) points#4 + (const byte) OFFSET_STRUCT_POINT_Y
  *((byte*) main::SCREEN + (number) 1) ← *((byte*) main::$1)
  (struct Point*) points#1 ← (struct Point*) points#4 + (const byte) SIZEOF_STRUCT_POINT
  (byte*) main::$2 ← (byte*)(struct Point*) points#1 + (const byte) OFFSET_STRUCT_POINT_X
  *((byte*) main::SCREEN + (number) 2) ← *((byte*) main::$2)
  (byte*) main::$3 ← (byte*)(struct Point*) points#1 + (const byte) OFFSET_STRUCT_POINT_Y
  *((byte*) main::SCREEN + (number) 3) ← *((byte*) main::$3)
  to:main::@return
main::@return: scope:[main]  from main
  (struct Point*) points#5 ← phi( main/(struct Point*) points#1 )
  (struct Point*) points#2 ← (struct Point*) points#5
  return 
  to:@return
@1: scope:[]  from @begin
  (struct Point*) points#7 ← phi( @begin/(struct Point*) points#0 )
  call main 
  to:@2
@2: scope:[]  from @1
  (struct Point*) points#6 ← phi( @1/(struct Point*) points#2 )
  (struct Point*) points#3 ← (struct Point*) points#6
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_X = (byte) 0
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(const byte) SIZEOF_STRUCT_POINT = (byte) 2
(void()) main()
(byte*) main::$0
(byte*) main::$1
(byte*) main::$2
(byte*) main::$3
(label) main::@return
(byte*) main::SCREEN
(struct Point*) points
(struct Point*) points#0
(struct Point*) points#1
(struct Point*) points#2
(struct Point*) points#3
(struct Point*) points#4
(struct Point*) points#5
(struct Point*) points#6
(struct Point*) points#7

Adding number conversion cast (unumber) 0 in *((byte*) main::SCREEN + (number) 0) ← *((byte*) main::$0)
Adding number conversion cast (unumber) 1 in *((byte*) main::SCREEN + (number) 1) ← *((byte*) main::$1)
Adding number conversion cast (unumber) 2 in *((byte*) main::SCREEN + (number) 2) ← *((byte*) main::$2)
Adding number conversion cast (unumber) 3 in *((byte*) main::SCREEN + (number) 3) ← *((byte*) main::$3)
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (struct Point*) points#0 ← (struct Point*)(number) $1000
Inlining cast (byte*) main::SCREEN ← (byte*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (struct Point*) 4096
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (struct Point*) points#1 = (struct Point*) points#5 (struct Point*) points#2 
Alias (struct Point*) points#0 = (struct Point*) points#7 
Alias (struct Point*) points#3 = (struct Point*) points#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (struct Point*) points#4 (struct Point*) points#0
Identical Phi Values (struct Point*) points#3 (struct Point*) points#1
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const struct Point*) points#0 = (struct Point*) 4096
Constant (const byte*) main::SCREEN = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte*)points#0 in [3] (byte*) main::$0 ← (byte*)(const struct Point*) points#0 + (const byte) OFFSET_STRUCT_POINT_X
Constant value identified (byte*)points#0 in [5] (byte*) main::$1 ← (byte*)(const struct Point*) points#0 + (const byte) OFFSET_STRUCT_POINT_Y
Successful SSA optimization Pass2ConstantValues
Converting *(pointer+n) to pointer[n] [4] *((const byte*) main::SCREEN + (byte) 0) ← *((byte*) main::$0)  -- *((byte*)points#0 + OFFSET_STRUCT_POINT_X)
Converting *(pointer+n) to pointer[n] [6] *((const byte*) main::SCREEN + (byte) 1) ← *((byte*) main::$1)  -- *((byte*)points#0 + OFFSET_STRUCT_POINT_Y)
Converting *(pointer+n) to pointer[n] [9] *((const byte*) main::SCREEN + (byte) 2) ← *((byte*) main::$2)  -- *((byte*)points#1 + OFFSET_STRUCT_POINT_X)
Converting *(pointer+n) to pointer[n] [11] *((const byte*) main::SCREEN + (byte) 3) ← *((byte*) main::$3)  -- *((byte*)points#1 + OFFSET_STRUCT_POINT_Y)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero (byte*)points#0 in [3] (byte*) main::$0 ← (byte*)(const struct Point*) points#0 + (const byte) OFFSET_STRUCT_POINT_X
Simplifying expression containing zero (byte*)points#0 in [4] *((const byte*) main::SCREEN + (byte) 0) ← *((byte*)(const struct Point*) points#0 + (const byte) OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero main::SCREEN in [4] *((const byte*) main::SCREEN + (byte) 0) ← *((byte*)(const struct Point*) points#0)
Simplifying expression containing zero (byte*)points#1 in [8] (byte*) main::$2 ← (byte*)(struct Point*) points#1 + (const byte) OFFSET_STRUCT_POINT_X
Simplifying expression containing zero (byte*)points#1 in [9] *((const byte*) main::SCREEN + (byte) 2) ← *((byte*)(struct Point*) points#1 + (const byte) OFFSET_STRUCT_POINT_X)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*) main::$0 and assignment [0] (byte*) main::$0 ← (byte*)(const struct Point*) points#0
Eliminating unused variable (byte*) main::$1 and assignment [2] (byte*) main::$1 ← (byte*)(const struct Point*) points#0 + (const byte) OFFSET_STRUCT_POINT_Y
Eliminating unused variable (byte*) main::$2 and assignment [5] (byte*) main::$2 ← (byte*)(struct Point*) points#1
Eliminating unused variable (byte*) main::$3 and assignment [7] (byte*) main::$3 ← (byte*)(struct Point*) points#1 + (const byte) OFFSET_STRUCT_POINT_Y
Eliminating unused constant (const byte) OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [2] (struct Point*) points#1 ← (const struct Point*) points#0 + (const byte) SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const struct Point*) points#1 = points#0+SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte*)points#1 in [3] *((const byte*) main::SCREEN + (byte) 2) ← *((byte*)(const struct Point*) points#1)
Constant value identified (byte*)points#1 in [4] *((const byte*) main::SCREEN + (byte) 3) ← *((byte*)(const struct Point*) points#1 + (const byte) OFFSET_STRUCT_POINT_Y)
Successful SSA optimization Pass2ConstantValues
Inlining constant with different constant siblings (const struct Point*) points#0
Inlining constant with different constant siblings (const struct Point*) points#1
Constant inlined points#0 = (struct Point*) 4096
Constant inlined points#1 = (struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((byte*)(struct Point*) 4096+OFFSET_STRUCT_POINT_Y)
Consolidated array index constant in *(main::SCREEN+1)
Consolidated array index constant in *(main::SCREEN+2)
Consolidated array index constant in *((byte*)(struct Point*) 4096+SIZEOF_STRUCT_POINT+OFFSET_STRUCT_POINT_Y)
Consolidated array index constant in *(main::SCREEN+3)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((const byte*) main::SCREEN) ← *((byte*)(struct Point*) 4096)
  [5] *((const byte*) main::SCREEN+(byte) 1) ← *((byte*)(struct Point*) 4096+(const byte) OFFSET_STRUCT_POINT_Y)
  [6] *((const byte*) main::SCREEN+(byte) 2) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT)
  [7] *((const byte*) main::SCREEN+(byte) 3) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT+(const byte) OFFSET_STRUCT_POINT_Y)
  to:main::@return
main::@return: scope:[main]  from main
  [8] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) Point::x
(byte) Point::y
(void()) main()
(struct Point*) points

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Minimal struct - accessing pointer to struct in memory using arrow operator
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 2
  .const OFFSET_STRUCT_POINT_Y = 1
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    // [4] *((const byte*) main::SCREEN) ← *((byte*)(struct Point*) 4096) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000
    sta SCREEN
    // [5] *((const byte*) main::SCREEN+(byte) 1) ← *((byte*)(struct Point*) 4096+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    // [6] *((const byte*) main::SCREEN+(byte) 2) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000+SIZEOF_STRUCT_POINT
    sta SCREEN+2
    // [7] *((const byte*) main::SCREEN+(byte) 3) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000+SIZEOF_STRUCT_POINT+OFFSET_STRUCT_POINT_Y
    sta SCREEN+3
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) main::SCREEN) ← *((byte*)(struct Point*) 4096) [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) main::SCREEN+(byte) 1) ← *((byte*)(struct Point*) 4096+(const byte) OFFSET_STRUCT_POINT_Y) [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) main::SCREEN+(byte) 2) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT) [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) main::SCREEN+(byte) 3) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT+(const byte) OFFSET_STRUCT_POINT_Y) [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [Point] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [Point] best 53 combination 
Uplifting [main] best 53 combination 
Uplifting [] best 53 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct - accessing pointer to struct in memory using arrow operator
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 2
  .const OFFSET_STRUCT_POINT_Y = 1
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label SCREEN = $400
    // [4] *((const byte*) main::SCREEN) ← *((byte*)(struct Point*) 4096) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000
    sta SCREEN
    // [5] *((const byte*) main::SCREEN+(byte) 1) ← *((byte*)(struct Point*) 4096+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    // [6] *((const byte*) main::SCREEN+(byte) 2) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000+SIZEOF_STRUCT_POINT
    sta SCREEN+2
    // [7] *((const byte*) main::SCREEN+(byte) 3) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000+SIZEOF_STRUCT_POINT+OFFSET_STRUCT_POINT_Y
    sta SCREEN+3
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __bbegin with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_Y OFFSET_STRUCT_POINT_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(const byte) SIZEOF_STRUCT_POINT SIZEOF_STRUCT_POINT = (byte) 2
(void()) main()
(label) main::@return
(const byte*) main::SCREEN SCREEN = (byte*) 1024
(struct Point*) points



FINAL ASSEMBLER
Score: 38

  // File Comments
// Minimal struct - accessing pointer to struct in memory using arrow operator
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_POINT = 2
  .const OFFSET_STRUCT_POINT_Y = 1
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    // SCREEN[0] = points->x
    // [4] *((const byte*) main::SCREEN) ← *((byte*)(struct Point*) 4096) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000
    sta SCREEN
    // SCREEN[1] = points->y
    // [5] *((const byte*) main::SCREEN+(byte) 1) ← *((byte*)(struct Point*) 4096+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    // SCREEN[2] = points->x
    // [6] *((const byte*) main::SCREEN+(byte) 2) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000+SIZEOF_STRUCT_POINT
    sta SCREEN+2
    // SCREEN[3] = points->y
    // [7] *((const byte*) main::SCREEN+(byte) 3) ← *((byte*)(struct Point*) 4096+(const byte) SIZEOF_STRUCT_POINT+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda $1000+SIZEOF_STRUCT_POINT+OFFSET_STRUCT_POINT_Y
    sta SCREEN+3
    // main::@return
    // }
    // [8] return 
    rts
}
  // File Data

