
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::$0 = 0 * SIZEOF_STRUCT_POINT
  main::$4 = (byte*)points + main::$0
  main::$4[OFFSET_STRUCT_POINT_X] = 2
  main::$1 = 0 * SIZEOF_STRUCT_POINT
  main::$5 = (byte*)points + main::$1
  main::$5[OFFSET_STRUCT_POINT_Y] = 3
  main::$2 = 0 * SIZEOF_STRUCT_POINT
  main::$6 = (byte*)points + main::$2
  SCREEN[0] = main::$6[OFFSET_STRUCT_POINT_X]
  main::$3 = 0 * SIZEOF_STRUCT_POINT
  main::$7 = (byte*)points + main::$3
  SCREEN[1] = main::$7[OFFSET_STRUCT_POINT_Y]
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const byte OFFSET_STRUCT_POINT_X = 0
const byte OFFSET_STRUCT_POINT_Y = 1
const nomodify byte* SCREEN = (byte*)$400
const byte SIZEOF_STRUCT_POINT = 2
void __start()
void main()
number~ main::$0
number~ main::$1
number~ main::$2
number~ main::$3
byte*~ main::$4
byte*~ main::$5
byte*~ main::$6
byte*~ main::$7
const struct Point* points[1]  = { fill( 1, 0) }

Adding number conversion cast (unumber) 0 in main::$0 = 0 * SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) main::$0 in main::$0 = (unumber)0 * SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) 2 in main::$4[OFFSET_STRUCT_POINT_X] = 2
Adding number conversion cast (unumber) 0 in main::$1 = 0 * SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) main::$1 in main::$1 = (unumber)0 * SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) 3 in main::$5[OFFSET_STRUCT_POINT_Y] = 3
Adding number conversion cast (unumber) 0 in main::$2 = 0 * SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) main::$2 in main::$2 = (unumber)0 * SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) 0 in SCREEN[0] = main::$6[OFFSET_STRUCT_POINT_X]
Adding number conversion cast (unumber) 0 in main::$3 = 0 * SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) main::$3 in main::$3 = (unumber)0 * SIZEOF_STRUCT_POINT
Adding number conversion cast (unumber) 1 in SCREEN[1] = main::$7[OFFSET_STRUCT_POINT_Y]
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast main::$4[OFFSET_STRUCT_POINT_X] = (unumber)2
Inlining cast main::$5[OFFSET_STRUCT_POINT_Y] = (unumber)3
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Finalized unsigned number type 2
Finalized unsigned number type 0
Finalized unsigned number type 3
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$0 = 0 * SIZEOF_STRUCT_POINT
Inferred type updated to byte in main::$1 = 0 * SIZEOF_STRUCT_POINT
Inferred type updated to byte in main::$2 = 0 * SIZEOF_STRUCT_POINT
Inferred type updated to byte in main::$3 = 0 * SIZEOF_STRUCT_POINT
Constant right-side identified [0] main::$0 = 0 * SIZEOF_STRUCT_POINT
Constant right-side identified [3] main::$1 = 0 * SIZEOF_STRUCT_POINT
Constant right-side identified [6] main::$2 = 0 * SIZEOF_STRUCT_POINT
Constant right-side identified [9] main::$3 = 0 * SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$0 = 0*SIZEOF_STRUCT_POINT
Constant main::$1 = 0*SIZEOF_STRUCT_POINT
Constant main::$2 = 0*SIZEOF_STRUCT_POINT
Constant main::$3 = 0*SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero 0*SIZEOF_STRUCT_POINT in 
Simplifying constant evaluating to zero 0*SIZEOF_STRUCT_POINT in 
Simplifying constant evaluating to zero 0*SIZEOF_STRUCT_POINT in 
Simplifying constant evaluating to zero 0*SIZEOF_STRUCT_POINT in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero (byte*)points in [1] main::$4 = (byte*)points + main::$0
Simplifying expression containing zero main::$4 in [2] main::$4[OFFSET_STRUCT_POINT_X] = 2
Simplifying expression containing zero (byte*)points in [4] main::$5 = (byte*)points + main::$1
Simplifying expression containing zero (byte*)points in [7] main::$6 = (byte*)points + main::$2
Simplifying expression containing zero main::$6 in [8] SCREEN[0] = main::$6[OFFSET_STRUCT_POINT_X]
Simplifying expression containing zero SCREEN in [8] SCREEN[0] = *main::$6
Simplifying expression containing zero (byte*)points in [10] main::$7 = (byte*)points + main::$3
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant main::$0
Eliminating unused constant main::$1
Eliminating unused constant main::$2
Eliminating unused constant main::$3
Eliminating unused constant SIZEOF_STRUCT_POINT
Eliminating unused constant OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant main::$4 = (byte*)points
Constant main::$5 = (byte*)points
Constant main::$6 = (byte*)points
Constant main::$7 = (byte*)points
Successful SSA optimization Pass2ConstantIdentification
Constant inlined main::$5 = (byte*)points
Constant inlined main::$6 = (byte*)points
Constant inlined main::$4 = (byte*)points
Constant inlined main::$7 = (byte*)points
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((byte*)points+OFFSET_STRUCT_POINT_Y)
Consolidated array index constant in *((byte*)points+OFFSET_STRUCT_POINT_Y)
Consolidated array index constant in *(SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
Finalized unsigned number type 1
Finalized unsigned number type 1
Successful SSA optimization Pass2FinalizeAllNumbers
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *((byte*)points) = 2
  [1] *((byte*)points+OFFSET_STRUCT_POINT_Y) = 3
  [2] *SCREEN = *((byte*)points)
  [3] *(SCREEN+1) = *((byte*)points+OFFSET_STRUCT_POINT_Y)
  to:main::@return
main::@return: scope:[main]  from main
  [4] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((byte*)points) = 2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((byte*)points+OFFSET_STRUCT_POINT_Y) = 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *SCREEN = *((byte*)points) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *(SCREEN+1) = *((byte*)points+OFFSET_STRUCT_POINT_Y) [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [Point] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [Point] best 37 combination 
Uplifting [main] best 37 combination 
Uplifting [] best 37 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct with C-Standard behavior - declaration, instantiation and usage
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
  // main
main: {
    // [0] *((byte*)points) = 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta points
    // [1] *((byte*)points+OFFSET_STRUCT_POINT_Y) = 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta points+OFFSET_STRUCT_POINT_Y
    // [2] *SCREEN = *((byte*)points) -- _deref_pbuc1=_deref_pbuc2 
    lda points
    sta SCREEN
    // [3] *(SCREEN+1) = *((byte*)points+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda points+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // File Data
  points: .fill 2*1, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const byte OFFSET_STRUCT_POINT_Y = 1
const nomodify byte* SCREEN = (byte*) 1024
void main()
const struct Point* points[1]  = { fill( 1, 0) }



FINAL ASSEMBLER
Score: 34

  // File Comments
// Minimal struct with C-Standard behavior - declaration, instantiation and usage
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
  // main
main: {
    // points[0].x = 2
    // [0] *((byte*)points) = 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta points
    // points[0].y = 3
    // [1] *((byte*)points+OFFSET_STRUCT_POINT_Y) = 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta points+OFFSET_STRUCT_POINT_Y
    // SCREEN[0] = points[0].x
    // [2] *SCREEN = *((byte*)points) -- _deref_pbuc1=_deref_pbuc2 
    lda points
    sta SCREEN
    // SCREEN[1] = points[0].y
    // [3] *(SCREEN+1) = *((byte*)points+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda points+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    // main::@return
    // }
    // [4] return 
    rts
}
  // File Data
  points: .fill 2*1, 0

