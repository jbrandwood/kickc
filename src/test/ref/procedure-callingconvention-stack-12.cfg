
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] idx = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [2] phi()
  [3] callexecute main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [4] return 
  to:@return

__stackcall void print(byte* print::str , byte print::spacing)
print: scope:[print]  from
  [5] print::str#0 = stackidx(byte*,print::OFFSET_STACK_STR)
  [6] print::spacing#0 = stackidx(byte,print::OFFSET_STACK_SPACING)
  to:print::@1
print::@1: scope:[print]  from print print::@3
  [7] print::str#2 = phi( print/print::str#0, print::@3/print::str#1 )
  [8] if(0!=*print::str#2) goto print::@2
  to:print::@return
print::@return: scope:[print]  from print::@1
  [9] return 
  to:@return
print::@2: scope:[print]  from print::@1
  [10] SCREEN[idx] = *print::str#2
  [11] idx = ++ idx
  [12] print::str#1 = ++ print::str#2
  to:print::@3
print::@3: scope:[print]  from print::@2 print::@4
  [13] print::c#2 = phi( print::@2/0, print::@4/print::c#1 )
  [14] if(print::c#2<print::spacing#0) goto print::@4
  to:print::@1
print::@4: scope:[print]  from print::@3
  [15] SCREEN[idx] = ' '
  [16] idx = ++ idx
  [17] print::c#1 = ++ print::c#2
  to:print::@3

__stackcall void main()
main: scope:[main]  from
  [18] stackpush(byte*) = main::str
  [19] stackpush(byte) = 1
  [20] callexecute print 
  sideeffect stackpullbytes(3)
  [22] stackpush(byte*) = main::str1
  [23] stackpush(byte) = 2
  [24] callexecute print 
  sideeffect stackpullbytes(3)
  to:main::@return
main::@return: scope:[main]  from main
  [26] return 
  to:@return
