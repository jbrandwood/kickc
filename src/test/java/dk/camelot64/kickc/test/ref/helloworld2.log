PARSING src/test/java/dk/camelot64/kickc/test/kc/helloworld2.kc
byte* screen = $400;
void main() {
    byte* hello = "hello world!@";
    print_spaced(screen, hello);
    print_spaced(screen+40, hello);
}

void print_spaced(byte* at, byte* msg) {
    byte j=0;
    for(byte i=0; msg[i]!='@'; i++) {
        at[j] = msg[i];
        j = j + 2;
    }
}

Adding pre/post-modifier (byte) print_spaced::i ← ++ (byte) print_spaced::i
SYMBOLS
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(void~) main::$0
(byte*~) main::$1
(void~) main::$2
(label) main::@return
(byte*) main::hello
(void()) print_spaced((byte*) print_spaced::at , (byte*) print_spaced::msg)
(byte/signed word/word/dword/signed dword~) print_spaced::$0
(boolean~) print_spaced::$1
(label) print_spaced::@1
(label) print_spaced::@2
(label) print_spaced::@return
(byte*) print_spaced::at
(byte) print_spaced::i
(byte) print_spaced::j
(byte*) print_spaced::msg
(byte*) screen

Promoting word/signed word/dword/signed dword to byte* in screen ← ((byte*)) 1024
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) screen ← ((byte*)) (word/signed word/dword/signed dword) 1024
  to:@1
main: scope:[main]  from
  (byte*) main::hello ← (string) "hello world!@"
  (void~) main::$0 ← call print_spaced (byte*) screen (byte*) main::hello 
  (byte*~) main::$1 ← (byte*) screen + (byte/signed byte/word/signed word/dword/signed dword) 40
  (void~) main::$2 ← call print_spaced (byte*~) main::$1 (byte*) main::hello 
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
print_spaced: scope:[print_spaced]  from
  (byte) print_spaced::j ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) print_spaced::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:print_spaced::@1
print_spaced::@1: scope:[print_spaced]  from print_spaced print_spaced::@1
  *((byte*) print_spaced::at + (byte) print_spaced::j) ← *((byte*) print_spaced::msg + (byte) print_spaced::i)
  (byte/signed word/word/dword/signed dword~) print_spaced::$0 ← (byte) print_spaced::j + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) print_spaced::j ← (byte/signed word/word/dword/signed dword~) print_spaced::$0
  (byte) print_spaced::i ← ++ (byte) print_spaced::i
  (boolean~) print_spaced::$1 ← *((byte*) print_spaced::msg + (byte) print_spaced::i) != (byte) '@'
  if((boolean~) print_spaced::$1) goto print_spaced::@1
  to:print_spaced::@2
print_spaced::@2: scope:[print_spaced]  from print_spaced::@1
  to:print_spaced::@return
print_spaced::@return: scope:[print_spaced]  from print_spaced::@2
  return 
  to:@return
@2: scope:[]  from @1
  call main 
  to:@end
@end: scope:[]  from @2

Eliminating unused variable - keeping the call (void~) main::$0
Eliminating unused variable - keeping the call (void~) main::$2
Creating constant string variable for inline (const string) main::$3 "hello world!@"
Removing empty block @1
Removing empty block print_spaced::@2
PROCEDURE MODIFY VARIABLE ANALYSIS

Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) screen#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  to:@2
main: scope:[main]  from @2
  (byte*) screen#1 ← phi( @2/(byte*) screen#3 )
  (byte*) main::hello#0 ← (const string) main::$3
  (byte*) print_spaced::at#0 ← (byte*) screen#1
  (byte*) print_spaced::msg#0 ← (byte*) main::hello#0
  call print_spaced param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) main::hello#1 ← phi( main/(byte*) main::hello#0 )
  (byte*) screen#2 ← phi( main/(byte*) screen#1 )
  (byte*~) main::$1 ← (byte*) screen#2 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) print_spaced::at#1 ← (byte*~) main::$1
  (byte*) print_spaced::msg#1 ← (byte*) main::hello#1
  call print_spaced param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
print_spaced: scope:[print_spaced]  from main main::@1
  (byte*) print_spaced::at#3 ← phi( main/(byte*) print_spaced::at#0 main::@1/(byte*) print_spaced::at#1 )
  (byte*) print_spaced::msg#3 ← phi( main/(byte*) print_spaced::msg#0 main::@1/(byte*) print_spaced::msg#1 )
  (byte) print_spaced::j#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) print_spaced::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:print_spaced::@1
print_spaced::@1: scope:[print_spaced]  from print_spaced print_spaced::@1
  (byte) print_spaced::j#2 ← phi( print_spaced/(byte) print_spaced::j#0 print_spaced::@1/(byte) print_spaced::j#1 )
  (byte*) print_spaced::at#2 ← phi( print_spaced/(byte*) print_spaced::at#3 print_spaced::@1/(byte*) print_spaced::at#2 )
  (byte) print_spaced::i#2 ← phi( print_spaced/(byte) print_spaced::i#0 print_spaced::@1/(byte) print_spaced::i#1 )
  (byte*) print_spaced::msg#2 ← phi( print_spaced/(byte*) print_spaced::msg#3 print_spaced::@1/(byte*) print_spaced::msg#2 )
  *((byte*) print_spaced::at#2 + (byte) print_spaced::j#2) ← *((byte*) print_spaced::msg#2 + (byte) print_spaced::i#2)
  (byte/signed word/word/dword/signed dword~) print_spaced::$0 ← (byte) print_spaced::j#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) print_spaced::j#1 ← (byte/signed word/word/dword/signed dword~) print_spaced::$0
  (byte) print_spaced::i#1 ← ++ (byte) print_spaced::i#2
  (boolean~) print_spaced::$1 ← *((byte*) print_spaced::msg#2 + (byte) print_spaced::i#1) != (byte) '@'
  if((boolean~) print_spaced::$1) goto print_spaced::@1
  to:print_spaced::@return
print_spaced::@return: scope:[print_spaced]  from print_spaced::@1
  return 
  to:@return
@2: scope:[]  from @begin
  (byte*) screen#3 ← phi( @begin/(byte*) screen#0 )
  call main param-assignment
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @begin
(label) @end
(void()) main()
(byte*~) main::$1
(const string) main::$3 = (string) "hello world!@"
(label) main::@1
(label) main::@2
(label) main::@return
(byte*) main::hello
(byte*) main::hello#0
(byte*) main::hello#1
(void()) print_spaced((byte*) print_spaced::at , (byte*) print_spaced::msg)
(byte/signed word/word/dword/signed dword~) print_spaced::$0
(boolean~) print_spaced::$1
(label) print_spaced::@1
(label) print_spaced::@return
(byte*) print_spaced::at
(byte*) print_spaced::at#0
(byte*) print_spaced::at#1
(byte*) print_spaced::at#2
(byte*) print_spaced::at#3
(byte) print_spaced::i
(byte) print_spaced::i#0
(byte) print_spaced::i#1
(byte) print_spaced::i#2
(byte) print_spaced::j
(byte) print_spaced::j#0
(byte) print_spaced::j#1
(byte) print_spaced::j#2
(byte*) print_spaced::msg
(byte*) print_spaced::msg#0
(byte*) print_spaced::msg#1
(byte*) print_spaced::msg#2
(byte*) print_spaced::msg#3
(byte*) screen
(byte*) screen#0
(byte*) screen#1
(byte*) screen#2
(byte*) screen#3

OPTIMIZING CONTROL FLOW GRAPH
Culled Empty Block (label) main::@2
Culled Empty Block (label) @3
Succesful SSA optimization Pass2CullEmptyBlocks
Not aliassing across scopes: screen#1 screen#3
Not aliassing across scopes: print_spaced::at#0 screen#1
Not aliassing across scopes: print_spaced::msg#0 main::hello#0
Not aliassing across scopes: print_spaced::msg#1 main::hello#1
Not aliassing across scopes: print_spaced::msg#3 print_spaced::msg#0
Not aliassing across scopes: print_spaced::at#3 print_spaced::at#0
Alias (byte*) screen#1 = (byte*) screen#2 
Alias (byte*) main::hello#0 = (byte*) main::hello#1 
Alias (byte*) print_spaced::at#1 = (byte*~) main::$1 
Alias (byte) print_spaced::j#1 = (byte/signed word/word/dword/signed dword~) print_spaced::$0 
Alias (byte*) screen#0 = (byte*) screen#3 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: screen#1 screen#0
Not aliassing across scopes: print_spaced::at#0 screen#1
Not aliassing across scopes: print_spaced::msg#0 main::hello#0
Not aliassing across scopes: print_spaced::msg#1 main::hello#0
Not aliassing across scopes: print_spaced::msg#3 print_spaced::msg#0
Not aliassing across scopes: print_spaced::at#3 print_spaced::at#0
Self Phi Eliminated (byte*) print_spaced::msg#2
Self Phi Eliminated (byte*) print_spaced::at#2
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) screen#1 (byte*) screen#0
Redundant Phi (byte*) print_spaced::msg#2 (byte*) print_spaced::msg#3
Redundant Phi (byte*) print_spaced::at#2 (byte*) print_spaced::at#3
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (boolean~) print_spaced::$1 if(*((byte*) print_spaced::msg#3 + (byte) print_spaced::i#1)!=(byte) '@') goto print_spaced::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) screen#0 = ((byte*))1024
Constant (const string) main::hello#0 = main::$3
Constant (const byte) print_spaced::j#0 = 0
Constant (const byte) print_spaced::i#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_spaced::at#0 = screen#0
Constant (const string) print_spaced::msg#0 = main::hello#0
Constant (const byte*) print_spaced::at#1 = screen#0+40
Constant (const string) print_spaced::msg#1 = main::hello#0
Succesful SSA optimization Pass2ConstantIdentification
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const byte) print_spaced::j#0
Inlining constant with var siblings (const byte) print_spaced::j#0
Inlining constant with var siblings (const byte) print_spaced::i#0
Inlining constant with var siblings (const byte) print_spaced::i#0
Inlining constant with var siblings (const byte*) print_spaced::at#0
Inlining constant with different constant siblings (const byte*) print_spaced::at#0
Inlining constant with var siblings (const string) print_spaced::msg#0
Inlining constant with var siblings (const byte*) print_spaced::at#1
Inlining constant with var siblings (const string) print_spaced::msg#1
Constant inlined print_spaced::j#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_spaced::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_spaced::at#0 = (const byte*) screen#0
Constant inlined print_spaced::at#1 = (const byte*) screen#0+(byte/signed byte/word/signed word/dword/signed dword) 40
Constant inlined main::$3 = (const string) main::hello#0
Constant inlined print_spaced::msg#1 = (const string) main::hello#0
Constant inlined print_spaced::msg#0 = (const string) main::hello#0
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @2 @end main main::@1 main::@return print_spaced print_spaced::@1 print_spaced::@return 
Added new block during phi lifting print_spaced::@3(between print_spaced::@1 and print_spaced::@1)
Block Sequence Planned @begin @2 @end main main::@1 main::@return print_spaced print_spaced::@1 print_spaced::@return print_spaced::@3 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to print_spaced:5 print_spaced:7 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 4 initial phi equivalence classes
Coalesced [16] print_spaced::i#3 ← print_spaced::i#1
Coalesced [17] print_spaced::j#3 ← print_spaced::j#1
Coalesced down to 4 phi equivalence classes
Culled Empty Block (label) print_spaced::@3
Block Sequence Planned @begin @2 @end main main::@1 main::@return print_spaced print_spaced::@1 print_spaced::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@2
@2: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @2
  [3] phi() [ ] ( )
main: scope:[main]  from @2
  [4] phi() [ ] ( main:2 [ ] )
  [5] call print_spaced param-assignment [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi() [ ] ( main:2 [ ] )
  [7] call print_spaced param-assignment [ ] ( main:2 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return  [ ] ( main:2 [ ] )
  to:@return
print_spaced: scope:[print_spaced]  from main main::@1
  [9] (byte*) print_spaced::at#3 ← phi( main/(const byte*) screen#0 main::@1/(const byte*) screen#0+(byte/signed byte/word/signed word/dword/signed dword) 40 ) [ print_spaced::msg#3 print_spaced::at#3 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 ] )
  [9] (byte*) print_spaced::msg#3 ← phi( main/(const string) main::hello#0 main::@1/(const string) main::hello#0 ) [ print_spaced::msg#3 print_spaced::at#3 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 ] )
  to:print_spaced::@1
print_spaced::@1: scope:[print_spaced]  from print_spaced print_spaced::@1
  [10] (byte) print_spaced::j#2 ← phi( print_spaced/(byte/signed byte/word/signed word/dword/signed dword) 0 print_spaced::@1/(byte) print_spaced::j#1 ) [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] )
  [10] (byte) print_spaced::i#2 ← phi( print_spaced/(byte/signed byte/word/signed word/dword/signed dword) 0 print_spaced::@1/(byte) print_spaced::i#1 ) [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] )
  [11] *((byte*) print_spaced::at#3 + (byte) print_spaced::j#2) ← *((byte*) print_spaced::msg#3 + (byte) print_spaced::i#2) [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] )
  [12] (byte) print_spaced::j#1 ← (byte) print_spaced::j#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#1 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#1 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#1 ] )
  [13] (byte) print_spaced::i#1 ← ++ (byte) print_spaced::i#2 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] )
  [14] if(*((byte*) print_spaced::msg#3 + (byte) print_spaced::i#1)!=(byte) '@') goto print_spaced::@1 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] )
  to:print_spaced::@return
print_spaced::@return: scope:[print_spaced]  from print_spaced::@1
  [15] return  [ ] ( main:2::print_spaced:5 [ ] main:2::print_spaced:7 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@2 dominated by  @2 @begin 
@end dominated by  @2 @begin @end 
main dominated by  @2 @begin main 
main::@1 dominated by  @2 @begin main::@1 main 
main::@return dominated by  main::@return @2 @begin main::@1 main 
print_spaced dominated by  @2 @begin print_spaced main 
print_spaced::@1 dominated by  @2 @begin print_spaced print_spaced::@1 main 
print_spaced::@return dominated by  @2 @begin print_spaced print_spaced::@1 print_spaced::@return main 

NATURAL LOOPS
Found back edge: Loop head: print_spaced::@1 tails: print_spaced::@1 blocks: null
Populated: Loop head: print_spaced::@1 tails: print_spaced::@1 blocks: print_spaced::@1 
Loop head: print_spaced::@1 tails: print_spaced::@1 blocks: print_spaced::@1 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 0 loops in scope [main]
Found 1 loops in scope [print_spaced]
  Loop head: print_spaced::@1 tails: print_spaced::@1 blocks: print_spaced::@1 
Loop head: print_spaced::@1 tails: print_spaced::@1 blocks: print_spaced::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte*) main::hello
(void()) print_spaced((byte*) print_spaced::at , (byte*) print_spaced::msg)
(byte*) print_spaced::at
(byte*) print_spaced::at#3 1.8333333333333333
(byte) print_spaced::i
(byte) print_spaced::i#1 16.5
(byte) print_spaced::i#2 11.0
(byte) print_spaced::j
(byte) print_spaced::j#1 7.333333333333333
(byte) print_spaced::j#2 16.5
(byte*) print_spaced::msg
(byte*) print_spaced::msg#3 3.6666666666666665
(byte*) screen

Initial phi equivalence classes
[ print_spaced::msg#3 ]
[ print_spaced::at#3 ]
[ print_spaced::i#2 print_spaced::i#1 ]
[ print_spaced::j#2 print_spaced::j#1 ]
Complete equivalence classes
[ print_spaced::msg#3 ]
[ print_spaced::at#3 ]
[ print_spaced::i#2 print_spaced::i#1 ]
[ print_spaced::j#2 print_spaced::j#1 ]
Allocated zp ZP_WORD:2 [ print_spaced::msg#3 ]
Allocated zp ZP_WORD:4 [ print_spaced::at#3 ]
Allocated zp ZP_BYTE:6 [ print_spaced::i#2 print_spaced::i#1 ]
Allocated zp ZP_BYTE:7 [ print_spaced::j#2 print_spaced::j#1 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label screen = $400
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @2 [phi:@begin->@2]
b2_from_bbegin:
  jmp b2
//SEG4 @2
b2:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
//SEG7 [3] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call print_spaced param-assignment [ ] ( main:2 [ ] )
  //SEG11 [9] phi from main to print_spaced [phi:main->print_spaced]
  print_spaced_from_main:
  //SEG12 [9] phi (byte*) print_spaced::at#3 = (const byte*) screen#0 [phi:main->print_spaced#0] -- pbuz1=pbuc1 
    lda #<screen
    sta print_spaced.at
    lda #>screen
    sta print_spaced.at+1
  //SEG13 [9] phi (byte*) print_spaced::msg#3 = (const string) main::hello#0 [phi:main->print_spaced#1] -- pbuz1=pbuc1 
    lda #<hello
    sta print_spaced.msg
    lda #>hello
    sta print_spaced.msg+1
    jsr print_spaced
  //SEG14 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [7] call print_spaced param-assignment [ ] ( main:2 [ ] )
  //SEG17 [9] phi from main::@1 to print_spaced [phi:main::@1->print_spaced]
  print_spaced_from_b1:
  //SEG18 [9] phi (byte*) print_spaced::at#3 = (const byte*) screen#0+(byte/signed byte/word/signed word/dword/signed dword) 40 [phi:main::@1->print_spaced#0] -- pbuz1=pbuc1 
    lda #<screen+$28
    sta print_spaced.at
    lda #>screen+$28
    sta print_spaced.at+1
  //SEG19 [9] phi (byte*) print_spaced::msg#3 = (const string) main::hello#0 [phi:main::@1->print_spaced#1] -- pbuz1=pbuc1 
    lda #<hello
    sta print_spaced.msg
    lda #>hello
    sta print_spaced.msg+1
    jsr print_spaced
    jmp breturn
  //SEG20 main::@return
  breturn:
  //SEG21 [8] return  [ ] ( main:2 [ ] )
    rts
    hello: .text "hello world!@"
}
//SEG22 print_spaced
print_spaced: {
    .label j = 7
    .label i = 6
    .label msg = 2
    .label at = 4
  //SEG23 [10] phi from print_spaced to print_spaced::@1 [phi:print_spaced->print_spaced::@1]
  b1_from_print_spaced:
  //SEG24 [10] phi (byte) print_spaced::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:print_spaced->print_spaced::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta j
  //SEG25 [10] phi (byte) print_spaced::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:print_spaced->print_spaced::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG26 [10] phi from print_spaced::@1 to print_spaced::@1 [phi:print_spaced::@1->print_spaced::@1]
  b1_from_b1:
  //SEG27 [10] phi (byte) print_spaced::j#2 = (byte) print_spaced::j#1 [phi:print_spaced::@1->print_spaced::@1#0] -- register_copy 
  //SEG28 [10] phi (byte) print_spaced::i#2 = (byte) print_spaced::i#1 [phi:print_spaced::@1->print_spaced::@1#1] -- register_copy 
    jmp b1
  //SEG29 print_spaced::@1
  b1:
  //SEG30 [11] *((byte*) print_spaced::at#3 + (byte) print_spaced::j#2) ← *((byte*) print_spaced::msg#3 + (byte) print_spaced::i#2) [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] ) -- pbuz1_derefidx_vbuz2=pbuz3_derefidx_vbuz4 
    ldy j
    sty $ff
    ldy i
    lda (msg),y
    ldy $ff
    sta (at),y
  //SEG31 [12] (byte) print_spaced::j#1 ← (byte) print_spaced::j#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#1 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#1 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#1 ] ) -- vbuz1=vbuz1_plus_2 
    lda j
    clc
    adc #2
    sta j
  //SEG32 [13] (byte) print_spaced::i#1 ← ++ (byte) print_spaced::i#2 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG33 [14] if(*((byte*) print_spaced::msg#3 + (byte) print_spaced::i#1)!=(byte) '@') goto print_spaced::@1 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] ) -- pbuz1_derefidx_vbuz2_neq_vbuc1_then_la1 
    ldy i
    lda (msg),y
    cmp #'@'
    bne b1_from_b1
    jmp breturn
  //SEG34 print_spaced::@return
  breturn:
  //SEG35 [15] return  [ ] ( main:2::print_spaced:5 [ ] main:2::print_spaced:7 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential register analysis [11] *(print_spaced::at#3 + print_spaced::j#2) ← *(print_spaced::msg#3 + print_spaced::i#2) missing fragment pbuz1_derefidx_vbuxx=pbuz2_derefidx_vbuaa allocation: zp ZP_WORD:2 [ print_spaced::msg#3 ] zp ZP_WORD:4 [ print_spaced::at#3 ] reg byte x [ print_spaced::j#2 print_spaced::j#1 ] reg byte a [ print_spaced::i#2 print_spaced::i#1 ] 
Potential register analysis [11] *(print_spaced::at#3 + print_spaced::j#2) ← *(print_spaced::msg#3 + print_spaced::i#2) missing fragment pbuz1_derefidx_vbuaa=pbuz2_derefidx_vbuyy allocation: zp ZP_WORD:2 [ print_spaced::msg#3 ] zp ZP_WORD:4 [ print_spaced::at#3 ] reg byte a [ print_spaced::j#2 print_spaced::j#1 ] reg byte y [ print_spaced::i#2 print_spaced::i#1 ] 
Potential register analysis [11] *(print_spaced::at#3 + print_spaced::j#2) ← *(print_spaced::msg#3 + print_spaced::i#2) missing fragment pbuz1_derefidx_vbuxx=pbuz2_derefidx_vbuyy allocation: zp ZP_WORD:2 [ print_spaced::msg#3 ] zp ZP_WORD:4 [ print_spaced::at#3 ] reg byte x [ print_spaced::j#2 print_spaced::j#1 ] reg byte y [ print_spaced::i#2 print_spaced::i#1 ] 
MISSING FRAGMENTS
  pbuz1_derefidx_vbuxx=pbuz2_derefidx_vbuaa
  pbuz1_derefidx_vbuaa=pbuz2_derefidx_vbuyy
  pbuz1_derefidx_vbuxx=pbuz2_derefidx_vbuyy
Statement [11] *((byte*) print_spaced::at#3 + (byte) print_spaced::j#2) ← *((byte*) print_spaced::msg#3 + (byte) print_spaced::i#2) [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ print_spaced::i#2 print_spaced::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:6 [ print_spaced::i#2 print_spaced::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ print_spaced::j#2 print_spaced::j#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:7 [ print_spaced::j#2 print_spaced::j#1 ]
Statement [14] if(*((byte*) print_spaced::msg#3 + (byte) print_spaced::i#1)!=(byte) '@') goto print_spaced::@1 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] ) always clobbers reg byte a reg byte y 
Statement [11] *((byte*) print_spaced::at#3 + (byte) print_spaced::j#2) ← *((byte*) print_spaced::msg#3 + (byte) print_spaced::i#2) [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] ) always clobbers reg byte a reg byte y 
Statement [14] if(*((byte*) print_spaced::msg#3 + (byte) print_spaced::i#1)!=(byte) '@') goto print_spaced::@1 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] ) always clobbers reg byte a reg byte y 
Potential registers zp ZP_WORD:2 [ print_spaced::msg#3 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_WORD:4 [ print_spaced::at#3 ] : zp ZP_WORD:4 , 
Potential registers zp ZP_BYTE:6 [ print_spaced::i#2 print_spaced::i#1 ] : zp ZP_BYTE:6 , reg byte x , 
Potential registers zp ZP_BYTE:7 [ print_spaced::j#2 print_spaced::j#1 ] : zp ZP_BYTE:7 , reg byte x , 

REGISTER UPLIFT SCOPES
Uplift Scope [print_spaced] 27.5: zp ZP_BYTE:6 [ print_spaced::i#2 print_spaced::i#1 ] 23.83: zp ZP_BYTE:7 [ print_spaced::j#2 print_spaced::j#1 ] 3.67: zp ZP_WORD:2 [ print_spaced::msg#3 ] 1.83: zp ZP_WORD:4 [ print_spaced::at#3 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [print_spaced] best 687 combination reg byte x [ print_spaced::i#2 print_spaced::i#1 ] zp ZP_BYTE:7 [ print_spaced::j#2 print_spaced::j#1 ] zp ZP_WORD:2 [ print_spaced::msg#3 ] zp ZP_WORD:4 [ print_spaced::at#3 ] 
Uplifting [main] best 687 combination 
Uplifting [] best 687 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ print_spaced::j#2 print_spaced::j#1 ]
Uplifting [print_spaced] best 687 combination zp ZP_BYTE:7 [ print_spaced::j#2 print_spaced::j#1 ] 
Allocated (was zp ZP_BYTE:7) zp ZP_BYTE:6 [ print_spaced::j#2 print_spaced::j#1 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label screen = $400
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @2 [phi:@begin->@2]
b2_from_bbegin:
  jmp b2
//SEG4 @2
b2:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
//SEG7 [3] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call print_spaced param-assignment [ ] ( main:2 [ ] )
  //SEG11 [9] phi from main to print_spaced [phi:main->print_spaced]
  print_spaced_from_main:
  //SEG12 [9] phi (byte*) print_spaced::at#3 = (const byte*) screen#0 [phi:main->print_spaced#0] -- pbuz1=pbuc1 
    lda #<screen
    sta print_spaced.at
    lda #>screen
    sta print_spaced.at+1
  //SEG13 [9] phi (byte*) print_spaced::msg#3 = (const string) main::hello#0 [phi:main->print_spaced#1] -- pbuz1=pbuc1 
    lda #<hello
    sta print_spaced.msg
    lda #>hello
    sta print_spaced.msg+1
    jsr print_spaced
  //SEG14 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [7] call print_spaced param-assignment [ ] ( main:2 [ ] )
  //SEG17 [9] phi from main::@1 to print_spaced [phi:main::@1->print_spaced]
  print_spaced_from_b1:
  //SEG18 [9] phi (byte*) print_spaced::at#3 = (const byte*) screen#0+(byte/signed byte/word/signed word/dword/signed dword) 40 [phi:main::@1->print_spaced#0] -- pbuz1=pbuc1 
    lda #<screen+$28
    sta print_spaced.at
    lda #>screen+$28
    sta print_spaced.at+1
  //SEG19 [9] phi (byte*) print_spaced::msg#3 = (const string) main::hello#0 [phi:main::@1->print_spaced#1] -- pbuz1=pbuc1 
    lda #<hello
    sta print_spaced.msg
    lda #>hello
    sta print_spaced.msg+1
    jsr print_spaced
    jmp breturn
  //SEG20 main::@return
  breturn:
  //SEG21 [8] return  [ ] ( main:2 [ ] )
    rts
    hello: .text "hello world!@"
}
//SEG22 print_spaced
print_spaced: {
    .label j = 6
    .label msg = 2
    .label at = 4
  //SEG23 [10] phi from print_spaced to print_spaced::@1 [phi:print_spaced->print_spaced::@1]
  b1_from_print_spaced:
  //SEG24 [10] phi (byte) print_spaced::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:print_spaced->print_spaced::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta j
  //SEG25 [10] phi (byte) print_spaced::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:print_spaced->print_spaced::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG26 [10] phi from print_spaced::@1 to print_spaced::@1 [phi:print_spaced::@1->print_spaced::@1]
  b1_from_b1:
  //SEG27 [10] phi (byte) print_spaced::j#2 = (byte) print_spaced::j#1 [phi:print_spaced::@1->print_spaced::@1#0] -- register_copy 
  //SEG28 [10] phi (byte) print_spaced::i#2 = (byte) print_spaced::i#1 [phi:print_spaced::@1->print_spaced::@1#1] -- register_copy 
    jmp b1
  //SEG29 print_spaced::@1
  b1:
  //SEG30 [11] *((byte*) print_spaced::at#3 + (byte) print_spaced::j#2) ← *((byte*) print_spaced::msg#3 + (byte) print_spaced::i#2) [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] ) -- pbuz1_derefidx_vbuz2=pbuz3_derefidx_vbuxx 
    txa
    tay
    lda (msg),y
    ldy j
    sta (at),y
  //SEG31 [12] (byte) print_spaced::j#1 ← (byte) print_spaced::j#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#1 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#1 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#1 ] ) -- vbuz1=vbuz1_plus_2 
    lda j
    clc
    adc #2
    sta j
  //SEG32 [13] (byte) print_spaced::i#1 ← ++ (byte) print_spaced::i#2 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG33 [14] if(*((byte*) print_spaced::msg#3 + (byte) print_spaced::i#1)!=(byte) '@') goto print_spaced::@1 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] ) -- pbuz1_derefidx_vbuxx_neq_vbuc1_then_la1 
    txa
    tay
    lda (msg),y
    cmp #'@'
    bne b1_from_b1
    jmp breturn
  //SEG34 print_spaced::@return
  breturn:
  //SEG35 [15] return  [ ] ( main:2::print_spaced:5 [ ] main:2::print_spaced:7 [ ] )
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b2
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldx #0 with TAX
Replacing instruction lda j with TYA
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b2_from_bbegin:
Removing instruction main_from_b2:
Removing instruction bend_from_b2:
Removing instruction b1_from_main:
Removing instruction print_spaced_from_b1:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b2:
Removing instruction bend:
Removing instruction print_spaced_from_main:
Removing instruction b1:
Removing instruction breturn:
Removing instruction b1_from_print_spaced:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @2
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@return
(byte*) main::hello
(const string) main::hello#0 hello = (string) "hello world!@"
(void()) print_spaced((byte*) print_spaced::at , (byte*) print_spaced::msg)
(label) print_spaced::@1
(label) print_spaced::@return
(byte*) print_spaced::at
(byte*) print_spaced::at#3 at zp ZP_WORD:4 1.8333333333333333
(byte) print_spaced::i
(byte) print_spaced::i#1 reg byte x 16.5
(byte) print_spaced::i#2 reg byte x 11.0
(byte) print_spaced::j
(byte) print_spaced::j#1 j zp ZP_BYTE:6 7.333333333333333
(byte) print_spaced::j#2 j zp ZP_BYTE:6 16.5
(byte*) print_spaced::msg
(byte*) print_spaced::msg#3 msg zp ZP_WORD:2 3.6666666666666665
(byte*) screen
(const byte*) screen#0 screen = ((byte*))(word/signed word/dword/signed dword) 1024

zp ZP_WORD:2 [ print_spaced::msg#3 ]
zp ZP_WORD:4 [ print_spaced::at#3 ]
reg byte x [ print_spaced::i#2 print_spaced::i#1 ]
zp ZP_BYTE:6 [ print_spaced::j#2 print_spaced::j#1 ]


FINAL ASSEMBLER
Score: 575

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label screen = $400
//SEG2 @begin
//SEG3 [1] phi from @begin to @2 [phi:@begin->@2]
//SEG4 @2
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @2 to main [phi:@2->main]
  jsr main
//SEG7 [3] phi from @2 to @end [phi:@2->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] call print_spaced param-assignment [ ] ( main:2 [ ] )
  //SEG11 [9] phi from main to print_spaced [phi:main->print_spaced]
  //SEG12 [9] phi (byte*) print_spaced::at#3 = (const byte*) screen#0 [phi:main->print_spaced#0] -- pbuz1=pbuc1 
    lda #<screen
    sta print_spaced.at
    lda #>screen
    sta print_spaced.at+1
  //SEG13 [9] phi (byte*) print_spaced::msg#3 = (const string) main::hello#0 [phi:main->print_spaced#1] -- pbuz1=pbuc1 
    lda #<hello
    sta print_spaced.msg
    lda #>hello
    sta print_spaced.msg+1
    jsr print_spaced
  //SEG14 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG15 main::@1
  //SEG16 [7] call print_spaced param-assignment [ ] ( main:2 [ ] )
  //SEG17 [9] phi from main::@1 to print_spaced [phi:main::@1->print_spaced]
  //SEG18 [9] phi (byte*) print_spaced::at#3 = (const byte*) screen#0+(byte/signed byte/word/signed word/dword/signed dword) 40 [phi:main::@1->print_spaced#0] -- pbuz1=pbuc1 
    lda #<screen+$28
    sta print_spaced.at
    lda #>screen+$28
    sta print_spaced.at+1
  //SEG19 [9] phi (byte*) print_spaced::msg#3 = (const string) main::hello#0 [phi:main::@1->print_spaced#1] -- pbuz1=pbuc1 
    lda #<hello
    sta print_spaced.msg
    lda #>hello
    sta print_spaced.msg+1
    jsr print_spaced
  //SEG20 main::@return
  //SEG21 [8] return  [ ] ( main:2 [ ] )
    rts
    hello: .text "hello world!@"
}
//SEG22 print_spaced
print_spaced: {
    .label j = 6
    .label msg = 2
    .label at = 4
  //SEG23 [10] phi from print_spaced to print_spaced::@1 [phi:print_spaced->print_spaced::@1]
  //SEG24 [10] phi (byte) print_spaced::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:print_spaced->print_spaced::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta j
  //SEG25 [10] phi (byte) print_spaced::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:print_spaced->print_spaced::@1#1] -- vbuxx=vbuc1 
    tax
  //SEG26 [10] phi from print_spaced::@1 to print_spaced::@1 [phi:print_spaced::@1->print_spaced::@1]
  //SEG27 [10] phi (byte) print_spaced::j#2 = (byte) print_spaced::j#1 [phi:print_spaced::@1->print_spaced::@1#0] -- register_copy 
  //SEG28 [10] phi (byte) print_spaced::i#2 = (byte) print_spaced::i#1 [phi:print_spaced::@1->print_spaced::@1#1] -- register_copy 
  //SEG29 print_spaced::@1
  b1:
  //SEG30 [11] *((byte*) print_spaced::at#3 + (byte) print_spaced::j#2) ← *((byte*) print_spaced::msg#3 + (byte) print_spaced::i#2) [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#2 ] ) -- pbuz1_derefidx_vbuz2=pbuz3_derefidx_vbuxx 
    txa
    tay
    lda (msg),y
    ldy j
    sta (at),y
  //SEG31 [12] (byte) print_spaced::j#1 ← (byte) print_spaced::j#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#1 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#1 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#2 print_spaced::j#1 ] ) -- vbuz1=vbuz1_plus_2 
    tya
    clc
    adc #2
    sta j
  //SEG32 [13] (byte) print_spaced::i#1 ← ++ (byte) print_spaced::i#2 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG33 [14] if(*((byte*) print_spaced::msg#3 + (byte) print_spaced::i#1)!=(byte) '@') goto print_spaced::@1 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] ( main:2::print_spaced:5 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] main:2::print_spaced:7 [ print_spaced::msg#3 print_spaced::at#3 print_spaced::i#1 print_spaced::j#1 ] ) -- pbuz1_derefidx_vbuxx_neq_vbuc1_then_la1 
    txa
    tay
    lda (msg),y
    cmp #'@'
    bne b1
  //SEG34 print_spaced::@return
  //SEG35 [15] return  [ ] ( main:2::print_spaced:5 [ ] main:2::print_spaced:7 [ ] )
    rts
}

