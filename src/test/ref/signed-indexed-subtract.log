Inlined call call __init
Eliminating unused variable with no statement memset::$2

CONTROL FLOW GRAPH SSA

void print_ln()
print_ln: scope:[print_ln]  from main::@8
  print_char_cursor#44 = phi( main::@8/print_char_cursor#17 )
  print_line_cursor#19 = phi( main::@8/print_line_cursor#21 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  print_char_cursor#23 = phi( print_ln/print_char_cursor#44, print_ln::@1/print_char_cursor#23 )
  print_line_cursor#10 = phi( print_ln/print_line_cursor#19, print_ln::@1/print_line_cursor#0 )
  print_ln::$0 = print_line_cursor#10 + $28
  print_line_cursor#0 = print_ln::$0
  print_ln::$1 = print_line_cursor#0 < print_char_cursor#23
  if(print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  print_line_cursor#11 = phi( print_ln::@1/print_line_cursor#0 )
  print_char_cursor#0 = print_line_cursor#11
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  print_char_cursor#24 = phi( print_ln::@2/print_char_cursor#0 )
  print_line_cursor#12 = phi( print_ln::@2/print_line_cursor#11 )
  print_line_cursor#1 = print_line_cursor#12
  print_char_cursor#1 = print_char_cursor#24
  return 
  to:@return

void print_sint(int w)
print_sint: scope:[print_sint]  from main::@3
  print_char_cursor#53 = phi( main::@3/print_char_cursor#51 )
  print_sint::w#2 = phi( main::@3/print_sint::w#1 )
  print_sint::$0 = print_sint::w#2 < 0
  if(print_sint::$0) goto print_sint::@1
  to:print_sint::@3
print_sint::@1: scope:[print_sint]  from print_sint
  print_sint::w#5 = phi( print_sint/print_sint::w#2 )
  print_char_cursor#45 = phi( print_sint/print_char_cursor#53 )
  print_char::ch#0 = '-'
  call print_char
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  print_sint::w#3 = phi( print_sint::@1/print_sint::w#5 )
  print_char_cursor#25 = phi( print_sint::@1/print_char_cursor#13 )
  print_char_cursor#2 = print_char_cursor#25
  print_sint::$4 = - print_sint::w#3
  print_sint::w#0 = print_sint::$4
  to:print_sint::@2
print_sint::@3: scope:[print_sint]  from print_sint
  print_sint::w#7 = phi( print_sint/print_sint::w#2 )
  print_char_cursor#46 = phi( print_sint/print_char_cursor#53 )
  print_char::ch#1 = ' '
  call print_char
  to:print_sint::@5
print_sint::@5: scope:[print_sint]  from print_sint::@3
  print_sint::w#6 = phi( print_sint::@3/print_sint::w#7 )
  print_char_cursor#26 = phi( print_sint::@3/print_char_cursor#13 )
  print_char_cursor#3 = print_char_cursor#26
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@4 print_sint::@5
  print_char_cursor#47 = phi( print_sint::@4/print_char_cursor#2, print_sint::@5/print_char_cursor#3 )
  print_sint::w#4 = phi( print_sint::@4/print_sint::w#0, print_sint::@5/print_sint::w#6 )
  print_uint::w#0 = (unsigned int)print_sint::w#4
  call print_uint
  to:print_sint::@6
print_sint::@6: scope:[print_sint]  from print_sint::@2
  print_char_cursor#27 = phi( print_sint::@2/print_char_cursor#8 )
  print_char_cursor#4 = print_char_cursor#27
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@6
  print_char_cursor#28 = phi( print_sint::@6/print_char_cursor#4 )
  print_char_cursor#5 = print_char_cursor#28
  return 
  to:@return

void print_uint(unsigned int w)
print_uint: scope:[print_uint]  from print_sint::@2
  print_char_cursor#48 = phi( print_sint::@2/print_char_cursor#47 )
  print_uint::w#1 = phi( print_sint::@2/print_uint::w#0 )
  print_uint::$0 = byte1  print_uint::w#1
  print_uchar::b#0 = print_uint::$0
  call print_uchar
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  print_uint::w#2 = phi( print_uint/print_uint::w#1 )
  print_char_cursor#29 = phi( print_uint/print_char_cursor#11 )
  print_char_cursor#6 = print_char_cursor#29
  print_uint::$2 = byte0  print_uint::w#2
  print_uchar::b#1 = print_uint::$2
  call print_uchar
  to:print_uint::@2
print_uint::@2: scope:[print_uint]  from print_uint::@1
  print_char_cursor#30 = phi( print_uint::@1/print_char_cursor#11 )
  print_char_cursor#7 = print_char_cursor#30
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@2
  print_char_cursor#31 = phi( print_uint::@2/print_char_cursor#7 )
  print_char_cursor#8 = print_char_cursor#31
  return 
  to:@return

void print_uchar(char b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  print_char_cursor#49 = phi( print_uint/print_char_cursor#48, print_uint::@1/print_char_cursor#6 )
  print_uchar::b#2 = phi( print_uint/print_uchar::b#0, print_uint::@1/print_uchar::b#1 )
  print_uchar::$0 = print_uchar::b#2 >> 4
  print_char::ch#2 = print_hextab[print_uchar::$0]
  call print_char
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  print_uchar::b#3 = phi( print_uchar/print_uchar::b#2 )
  print_char_cursor#32 = phi( print_uchar/print_char_cursor#13 )
  print_char_cursor#9 = print_char_cursor#32
  print_uchar::$2 = print_uchar::b#3 & $f
  print_char::ch#3 = print_hextab[print_uchar::$2]
  call print_char
  to:print_uchar::@2
print_uchar::@2: scope:[print_uchar]  from print_uchar::@1
  print_char_cursor#33 = phi( print_uchar::@1/print_char_cursor#13 )
  print_char_cursor#10 = print_char_cursor#33
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@2
  print_char_cursor#34 = phi( print_uchar::@2/print_char_cursor#10 )
  print_char_cursor#11 = print_char_cursor#34
  return 
  to:@return

void print_char(char ch)
print_char: scope:[print_char]  from print_sint::@1 print_sint::@3 print_uchar print_uchar::@1
  print_char_cursor#35 = phi( print_sint::@1/print_char_cursor#45, print_sint::@3/print_char_cursor#46, print_uchar/print_char_cursor#49, print_uchar::@1/print_char_cursor#9 )
  print_char::ch#4 = phi( print_sint::@1/print_char::ch#0, print_sint::@3/print_char::ch#1, print_uchar/print_char::ch#2, print_uchar::@1/print_char::ch#3 )
  *print_char_cursor#35 = print_char::ch#4
  print_char_cursor#12 = ++ print_char_cursor#35
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  print_char_cursor#36 = phi( print_char/print_char_cursor#12 )
  print_char_cursor#13 = print_char_cursor#36
  return 
  to:@return

void print_cls()
print_cls: scope:[print_cls]  from main::@2
  print_screen#2 = phi( main::@2/print_screen#5 )
  memset::str#0 = (void *)print_screen#2
  memset::c#0 = ' '
  memset::num#0 = $3e8
  call memset
  memset::return#0 = memset::return#2
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  print_screen#3 = phi( print_cls/print_screen#2 )
  print_line_cursor#2 = print_screen#3
  print_char_cursor#14 = print_line_cursor#2
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  print_char_cursor#37 = phi( print_cls::@1/print_char_cursor#14 )
  print_line_cursor#13 = phi( print_cls::@1/print_line_cursor#2 )
  print_line_cursor#3 = print_line_cursor#13
  print_char_cursor#15 = print_char_cursor#37
  return 
  to:@return

void * memset(void *str , char c , unsigned int num)
memset: scope:[memset]  from print_cls
  memset::c#4 = phi( print_cls/memset::c#0 )
  memset::str#3 = phi( print_cls/memset::str#0 )
  memset::num#1 = phi( print_cls/memset::num#0 )
  memset::$0 = memset::num#1 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#1 = phi( memset/memset::str#3, memset::@3/memset::str#4 )
  memset::return#1 = memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#3 = phi( memset/memset::c#4 )
  memset::num#2 = phi( memset/memset::num#1 )
  memset::str#2 = phi( memset/memset::str#3 )
  memset::$4 = (char *)memset::str#2
  memset::end#0 = memset::$4 + memset::num#2
  memset::dst#0 = ((char *)) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#2 = phi( memset::@2/memset::c#3, memset::@4/memset::c#1 )
  memset::str#4 = phi( memset::@2/memset::str#2, memset::@4/memset::str#5 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#5 = phi( memset::@3/memset::str#4 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#1 = phi( memset::@3/memset::c#2 )
  *memset::dst#3 = memset::c#1
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#3 = phi( memset::@1/memset::return#1 )
  memset::return#2 = memset::return#3
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  print_char_cursor#58 = phi( __start::@1/print_char_cursor#52 )
  print_line_cursor#28 = phi( __start::@1/print_line_cursor#22 )
  print_screen#12 = phi( __start::@1/print_screen#8 )
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@6
  print_char_cursor#57 = phi( main/print_char_cursor#58, main::@6/print_char_cursor#54 )
  print_line_cursor#27 = phi( main/print_line_cursor#28, main::@6/print_line_cursor#23 )
  print_screen#11 = phi( main/print_screen#12, main::@6/print_screen#7 )
  main::i#2 = phi( main/main::i#0, main::@6/main::i#1 )
  sub::idx#0 = main::i#2
  sub::s#0 = $80
  call sub
  to:main::@4
main::@4: scope:[main]  from main::@1
  print_char_cursor#56 = phi( main::@1/print_char_cursor#57 )
  print_line_cursor#26 = phi( main::@1/print_line_cursor#27 )
  print_screen#10 = phi( main::@1/print_screen#11 )
  main::i#3 = phi( main::@1/main::i#2 )
  sub::idx#1 = main::i#3
  sub::s#1 = $40
  call sub
  to:main::@5
main::@5: scope:[main]  from main::@4
  print_char_cursor#55 = phi( main::@4/print_char_cursor#56 )
  print_line_cursor#25 = phi( main::@4/print_line_cursor#26 )
  print_screen#9 = phi( main::@4/print_screen#10 )
  main::i#4 = phi( main::@4/main::i#3 )
  sub::idx#2 = main::i#4
  sub::s#2 = $40
  call sub
  to:main::@6
main::@6: scope:[main]  from main::@5
  print_char_cursor#54 = phi( main::@5/print_char_cursor#55 )
  print_line_cursor#23 = phi( main::@5/print_line_cursor#25 )
  print_screen#7 = phi( main::@5/print_screen#9 )
  main::i#5 = phi( main::@5/main::i#4 )
  main::i#1 = main::i#5 + rangenext(0,8)
  main::$4 = main::i#1 != rangelast(0,8)
  if(main::$4) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@6
  print_char_cursor#50 = phi( main::@6/print_char_cursor#54 )
  print_line_cursor#20 = phi( main::@6/print_line_cursor#23 )
  print_screen#5 = phi( main::@6/print_screen#7 )
  call print_cls
  to:main::@7
main::@7: scope:[main]  from main::@2
  print_char_cursor#38 = phi( main::@2/print_char_cursor#15 )
  print_line_cursor#14 = phi( main::@2/print_line_cursor#3 )
  print_line_cursor#4 = print_line_cursor#14
  print_char_cursor#16 = print_char_cursor#38
  main::j#0 = 0
  to:main::@3
main::@3: scope:[main]  from main::@7 main::@9
  print_line_cursor#24 = phi( main::@7/print_line_cursor#4, main::@9/print_line_cursor#5 )
  print_char_cursor#51 = phi( main::@7/print_char_cursor#16, main::@9/print_char_cursor#18 )
  main::j#2 = phi( main::@7/main::j#0, main::@9/main::j#1 )
  main::$8 = main::j#2 * SIZEOF_INT
  print_sint::w#1 = words[main::$8]
  call print_sint
  to:main::@8
main::@8: scope:[main]  from main::@3
  main::j#4 = phi( main::@3/main::j#2 )
  print_line_cursor#21 = phi( main::@3/print_line_cursor#24 )
  print_char_cursor#39 = phi( main::@3/print_char_cursor#5 )
  print_char_cursor#17 = print_char_cursor#39
  call print_ln
  to:main::@9
main::@9: scope:[main]  from main::@8
  main::j#3 = phi( main::@8/main::j#4 )
  print_char_cursor#40 = phi( main::@8/print_char_cursor#1 )
  print_line_cursor#15 = phi( main::@8/print_line_cursor#1 )
  print_line_cursor#5 = print_line_cursor#15
  print_char_cursor#18 = print_char_cursor#40
  main::j#1 = main::j#3 + rangenext(0,8)
  main::$7 = main::j#1 != rangelast(0,8)
  if(main::$7) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@9
  print_char_cursor#41 = phi( main::@9/print_char_cursor#18 )
  print_line_cursor#16 = phi( main::@9/print_line_cursor#5 )
  print_line_cursor#6 = print_line_cursor#16
  print_char_cursor#19 = print_char_cursor#41
  return 
  to:@return

void sub(char idx , char s)
sub: scope:[sub]  from main::@1 main::@4 main::@5
  sub::s#3 = phi( main::@1/sub::s#0, main::@4/sub::s#1, main::@5/sub::s#2 )
  sub::idx#3 = phi( main::@1/sub::idx#0, main::@4/sub::idx#1, main::@5/sub::idx#2 )
  sub::$0 = sub::idx#3 * SIZEOF_INT
  words[sub::$0] = words[sub::$0] - sub::s#3
  to:sub::@return
sub::@return: scope:[sub]  from sub
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  print_screen#0 = (char *)$400
  print_line_cursor#7 = print_screen#0
  print_char_cursor#20 = print_line_cursor#7
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  print_screen#8 = phi( __start::__init1/print_screen#0 )
  print_char_cursor#52 = phi( __start::__init1/print_char_cursor#20 )
  print_line_cursor#22 = phi( __start::__init1/print_line_cursor#7 )
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  print_screen#6 = phi( __start::@1/print_screen#8 )
  print_char_cursor#42 = phi( __start::@1/print_char_cursor#19 )
  print_line_cursor#17 = phi( __start::@1/print_line_cursor#6 )
  print_line_cursor#8 = print_line_cursor#17
  print_char_cursor#21 = print_char_cursor#42
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  print_char_cursor#43 = phi( __start::@2/print_char_cursor#21 )
  print_line_cursor#18 = phi( __start::@2/print_line_cursor#8 )
  print_screen#4 = phi( __start::@2/print_screen#6 )
  print_screen#1 = print_screen#4
  print_line_cursor#9 = print_line_cursor#18
  print_char_cursor#22 = print_char_cursor#43
  return 
  to:@return

SYMBOL TABLE SSA
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant char SIZEOF_INT = 2
void __start()
void main()
bool main::$4
bool main::$7
char main::$8
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::i#3
char main::i#4
char main::i#5
char main::j
char main::j#0
char main::j#1
char main::j#2
char main::j#3
char main::j#4
void * memset(void *str , char c , unsigned int num)
bool memset::$0
bool memset::$1
bool memset::$3
char *memset::$4
char memset::c
char memset::c#0
char memset::c#1
char memset::c#2
char memset::c#3
char memset::c#4
char *memset::dst
char *memset::dst#0
char *memset::dst#1
char *memset::dst#2
char *memset::dst#3
char *memset::end
char *memset::end#0
char *memset::end#1
char *memset::end#2
unsigned int memset::num
unsigned int memset::num#0
unsigned int memset::num#1
unsigned int memset::num#2
void *memset::return
void *memset::return#0
void *memset::return#1
void *memset::return#2
void *memset::return#3
void *memset::str
void *memset::str#0
void *memset::str#1
void *memset::str#2
void *memset::str#3
void *memset::str#4
void *memset::str#5
void print_char(char ch)
char print_char::ch
char print_char::ch#0
char print_char::ch#1
char print_char::ch#2
char print_char::ch#3
char print_char::ch#4
char *print_char_cursor
char *print_char_cursor#0
char *print_char_cursor#1
char *print_char_cursor#10
char *print_char_cursor#11
char *print_char_cursor#12
char *print_char_cursor#13
char *print_char_cursor#14
char *print_char_cursor#15
char *print_char_cursor#16
char *print_char_cursor#17
char *print_char_cursor#18
char *print_char_cursor#19
char *print_char_cursor#2
char *print_char_cursor#20
char *print_char_cursor#21
char *print_char_cursor#22
char *print_char_cursor#23
char *print_char_cursor#24
char *print_char_cursor#25
char *print_char_cursor#26
char *print_char_cursor#27
char *print_char_cursor#28
char *print_char_cursor#29
char *print_char_cursor#3
char *print_char_cursor#30
char *print_char_cursor#31
char *print_char_cursor#32
char *print_char_cursor#33
char *print_char_cursor#34
char *print_char_cursor#35
char *print_char_cursor#36
char *print_char_cursor#37
char *print_char_cursor#38
char *print_char_cursor#39
char *print_char_cursor#4
char *print_char_cursor#40
char *print_char_cursor#41
char *print_char_cursor#42
char *print_char_cursor#43
char *print_char_cursor#44
char *print_char_cursor#45
char *print_char_cursor#46
char *print_char_cursor#47
char *print_char_cursor#48
char *print_char_cursor#49
char *print_char_cursor#5
char *print_char_cursor#50
char *print_char_cursor#51
char *print_char_cursor#52
char *print_char_cursor#53
char *print_char_cursor#54
char *print_char_cursor#55
char *print_char_cursor#56
char *print_char_cursor#57
char *print_char_cursor#58
char *print_char_cursor#6
char *print_char_cursor#7
char *print_char_cursor#8
char *print_char_cursor#9
void print_cls()
__constant const char print_hextab[] = "0123456789abcdef"z
char *print_line_cursor
char *print_line_cursor#0
char *print_line_cursor#1
char *print_line_cursor#10
char *print_line_cursor#11
char *print_line_cursor#12
char *print_line_cursor#13
char *print_line_cursor#14
char *print_line_cursor#15
char *print_line_cursor#16
char *print_line_cursor#17
char *print_line_cursor#18
char *print_line_cursor#19
char *print_line_cursor#2
char *print_line_cursor#20
char *print_line_cursor#21
char *print_line_cursor#22
char *print_line_cursor#23
char *print_line_cursor#24
char *print_line_cursor#25
char *print_line_cursor#26
char *print_line_cursor#27
char *print_line_cursor#28
char *print_line_cursor#3
char *print_line_cursor#4
char *print_line_cursor#5
char *print_line_cursor#6
char *print_line_cursor#7
char *print_line_cursor#8
char *print_line_cursor#9
void print_ln()
char *print_ln::$0
bool print_ln::$1
char *print_screen
char *print_screen#0
char *print_screen#1
char *print_screen#10
char *print_screen#11
char *print_screen#12
char *print_screen#2
char *print_screen#3
char *print_screen#4
char *print_screen#5
char *print_screen#6
char *print_screen#7
char *print_screen#8
char *print_screen#9
void print_sint(int w)
bool print_sint::$0
int print_sint::$4
int print_sint::w
int print_sint::w#0
int print_sint::w#1
int print_sint::w#2
int print_sint::w#3
int print_sint::w#4
int print_sint::w#5
int print_sint::w#6
int print_sint::w#7
void print_uchar(char b)
char print_uchar::$0
number print_uchar::$2
char print_uchar::b
char print_uchar::b#0
char print_uchar::b#1
char print_uchar::b#2
char print_uchar::b#3
void print_uint(unsigned int w)
char print_uint::$0
char print_uint::$2
unsigned int print_uint::w
unsigned int print_uint::w#0
unsigned int print_uint::w#1
unsigned int print_uint::w#2
void sub(char idx , char s)
char sub::$0
char sub::idx
char sub::idx#0
char sub::idx#1
char sub::idx#2
char sub::idx#3
char sub::s
char sub::s#0
char sub::s#1
char sub::s#2
char sub::s#3
__constant int words[] = { -$6000, -$600, -$60, -6, 0, 6, $60, $600, $6000 }

Adding number conversion cast (unumber) $28 in print_ln::$0 = print_line_cursor#10 + $28
Adding number conversion cast (snumber) 0 in print_sint::$0 = print_sint::w#2 < 0
Adding number conversion cast (unumber) 4 in print_uchar::$0 = print_uchar::b#2 >> 4
Adding number conversion cast (unumber) $f in print_uchar::$2 = print_uchar::b#3 & $f
Adding number conversion cast (unumber) print_uchar::$2 in print_uchar::$2 = print_uchar::b#3 & (unumber)$f
Adding number conversion cast (unumber) $3e8 in memset::num#0 = $3e8
Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#1 > 0
Adding number conversion cast (unumber) $80 in sub::s#0 = $80
Adding number conversion cast (unumber) $40 in sub::s#1 = $40
Adding number conversion cast (unumber) $40 in sub::s#2 = $40
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast memset::num#0 = (unumber)$3e8
Inlining cast memset::dst#0 = (char *)memset::str#2
Inlining cast sub::s#0 = (unumber)$80
Inlining cast sub::s#1 = (unumber)$40
Inlining cast sub::s#2 = (unumber)$40
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast $40
Simplifying constant integer cast $40
Simplifying constant pointer cast (char *) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $28
Finalized signed number type (signed char) 0
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) $f
Finalized unsigned number type (unsigned int) $3e8
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) $80
Finalized unsigned number type (char) $40
Finalized unsigned number type (char) $40
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in print_uchar::$2 = print_uchar::b#3 & $f
Inversing boolean not [84] memset::$1 = memset::num#1 <= 0 from [83] memset::$0 = memset::num#1 > 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias print_line_cursor#0 = print_ln::$0 print_line_cursor#11 print_char_cursor#0 print_line_cursor#12 print_char_cursor#24 print_line_cursor#1 print_char_cursor#1 
Alias print_char_cursor#45 = print_char_cursor#53 print_char_cursor#46 
Alias print_sint::w#2 = print_sint::w#5 print_sint::w#3 print_sint::w#7 print_sint::w#6 
Alias print_char_cursor#2 = print_char_cursor#25 
Alias print_sint::w#0 = print_sint::$4 
Alias print_char_cursor#26 = print_char_cursor#3 
Alias print_char_cursor#27 = print_char_cursor#4 print_char_cursor#28 print_char_cursor#5 
Alias print_uchar::b#0 = print_uint::$0 
Alias print_uint::w#1 = print_uint::w#2 
Alias print_char_cursor#29 = print_char_cursor#6 
Alias print_uchar::b#1 = print_uint::$2 
Alias print_char_cursor#30 = print_char_cursor#7 print_char_cursor#31 print_char_cursor#8 
Alias print_uchar::b#2 = print_uchar::b#3 
Alias print_char_cursor#32 = print_char_cursor#9 
Alias print_char_cursor#10 = print_char_cursor#33 print_char_cursor#34 print_char_cursor#11 
Alias print_char_cursor#12 = print_char_cursor#36 print_char_cursor#13 
Alias print_line_cursor#13 = print_screen#3 print_screen#2 print_line_cursor#2 print_char_cursor#14 print_char_cursor#37 print_line_cursor#3 print_char_cursor#15 
Alias memset::return#1 = memset::str#1 memset::return#3 memset::return#2 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias main::i#2 = main::i#3 main::i#4 main::i#5 
Alias print_screen#10 = print_screen#11 print_screen#9 print_screen#7 print_screen#5 
Alias print_line_cursor#20 = print_line_cursor#26 print_line_cursor#27 print_line_cursor#25 print_line_cursor#23 
Alias print_char_cursor#50 = print_char_cursor#56 print_char_cursor#57 print_char_cursor#55 print_char_cursor#54 
Alias print_line_cursor#14 = print_line_cursor#4 
Alias print_char_cursor#16 = print_char_cursor#38 
Alias print_line_cursor#21 = print_line_cursor#24 
Alias main::j#2 = main::j#4 main::j#3 
Alias print_char_cursor#17 = print_char_cursor#39 
Alias print_line_cursor#15 = print_line_cursor#5 print_line_cursor#16 print_line_cursor#6 
Alias print_char_cursor#18 = print_char_cursor#40 print_char_cursor#41 print_char_cursor#19 
Alias print_screen#0 = print_line_cursor#7 print_char_cursor#20 print_line_cursor#22 print_char_cursor#52 print_screen#8 print_screen#6 print_screen#4 print_screen#1 
Alias print_line_cursor#17 = print_line_cursor#8 print_line_cursor#18 print_line_cursor#9 
Alias print_char_cursor#21 = print_char_cursor#42 print_char_cursor#43 print_char_cursor#22 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values print_line_cursor#19 print_line_cursor#21
Identical Phi Values print_char_cursor#44 print_char_cursor#17
Identical Phi Values print_char_cursor#23 print_char_cursor#44
Identical Phi Values print_sint::w#2 print_sint::w#1
Identical Phi Values print_char_cursor#45 print_char_cursor#51
Identical Phi Values print_char_cursor#2 print_char_cursor#12
Identical Phi Values print_char_cursor#26 print_char_cursor#12
Identical Phi Values print_char_cursor#27 print_char_cursor#30
Identical Phi Values print_uint::w#1 print_uint::w#0
Identical Phi Values print_char_cursor#48 print_char_cursor#47
Identical Phi Values print_char_cursor#29 print_char_cursor#10
Identical Phi Values print_char_cursor#30 print_char_cursor#10
Identical Phi Values print_char_cursor#32 print_char_cursor#12
Identical Phi Values print_char_cursor#10 print_char_cursor#12
Identical Phi Values print_line_cursor#13 print_screen#10
Identical Phi Values memset::num#1 memset::num#0
Identical Phi Values memset::str#2 memset::str#0
Identical Phi Values memset::c#3 memset::c#0
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#4 memset::str#2
Identical Phi Values memset::c#1 memset::c#3
Identical Phi Values print_screen#12 print_screen#0
Identical Phi Values print_line_cursor#28 print_screen#0
Identical Phi Values print_char_cursor#58 print_screen#0
Identical Phi Values print_screen#10 print_screen#12
Identical Phi Values print_line_cursor#20 print_line_cursor#28
Identical Phi Values print_char_cursor#50 print_char_cursor#58
Identical Phi Values print_line_cursor#14 print_line_cursor#13
Identical Phi Values print_char_cursor#16 print_line_cursor#13
Identical Phi Values print_char_cursor#17 print_char_cursor#27
Identical Phi Values print_line_cursor#15 print_line_cursor#0
Identical Phi Values print_char_cursor#18 print_line_cursor#0
Identical Phi Values print_line_cursor#17 print_line_cursor#15
Identical Phi Values print_char_cursor#21 print_char_cursor#18
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values print_char_cursor#47 print_char_cursor#12
Identical Phi Values memset::return#1 memset::str#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values print_char_cursor#49 print_char_cursor#12
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition print_ln::$1 [4] if(print_line_cursor#0<print_char_cursor#12) goto print_ln::@1
Simple Condition print_sint::$0 [8] if(print_sint::w#1<0) goto print_sint::@1
Simple Condition memset::$1 [52] if(memset::num#0<=0) goto memset::@1
Simple Condition memset::$3 [59] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition main::$4 [77] if(main::i#1!=rangelast(0,8)) goto main::@1
Simple Condition main::$7 [90] if(main::j#1!=rangelast(0,8)) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant print_char::ch#0 = '-'
Constant print_char::ch#1 = ' '
Constant memset::c#0 = ' '
Constant memset::num#0 = $3e8
Constant main::i#0 = 0
Constant sub::s#0 = $80
Constant sub::s#1 = $40
Constant sub::s#2 = $40
Constant main::j#0 = 0
Constant print_screen#0 = (char *) 1024
Successful SSA optimization Pass2ConstantIdentification
Constant memset::str#0 = (void *)print_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant memset::return#0 = memset::str#0
Constant memset::$4 = (char *)memset::str#0
Constant memset::dst#0 = (char *)memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [52] if(memset::num#0<=0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [75] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [77] if(main::i#1!=rangelast(0,8)) goto main::@1 to 9
Resolved ranged next value [88] main::j#1 = ++ main::j#2 to ++
Resolved ranged comparison value [90] if(main::j#1!=rangelast(0,8)) goto main::@3 to 9
Eliminating unused constant memset::return#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 9 in [45] if(main::i#1!=9) goto main::@1
Adding number conversion cast (unumber) 9 in [53] if(main::j#1!=9) goto main::@3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 9
Simplifying constant integer cast 9
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 9
Finalized unsigned number type (char) 9
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [31] memset::end#0 = memset::$4 + memset::num#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant memset::end#0 = memset::$4+memset::num#0
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to use shift [47] main::$8 = main::j#2 * SIZEOF_INT
Rewriting multiplication to use shift [55] sub::$0 = sub::idx#3 * SIZEOF_INT
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings print_char::ch#0
Inlining constant with var siblings print_char::ch#1
Inlining constant with var siblings memset::dst#0
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::j#0
Inlining constant with var siblings sub::s#0
Inlining constant with var siblings sub::s#1
Inlining constant with var siblings sub::s#2
Constant inlined memset::$4 = (char *)memset::str#0
Constant inlined print_char::ch#1 = ' '
Constant inlined print_char::ch#0 = '-'
Constant inlined main::i#0 = 0
Constant inlined sub::s#0 = $80
Constant inlined sub::s#1 = $40
Constant inlined memset::dst#0 = (char *)memset::str#0
Constant inlined sub::s#2 = $40
Constant inlined main::j#0 = 0
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant SIZEOF_INT
Successful SSA optimization PassNEliminateUnusedVars
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 8
Finalized unsigned number type (char) $a
Finalized unsigned number type (char) $10
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting main::@10(between main::@6 and main::@1)
Added new block during phi lifting main::@11(between main::@9 and main::@3)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of print_sint::@6
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of print_uint::@2
Adding NOP phi() at start of print_uchar::@2
CALL GRAPH
Calls in [main] to sub:4 sub:7 sub:10 print_cls:14 print_sint:19 print_ln:21 
Calls in [print_cls] to memset:34 
Calls in [print_sint] to print_char:39 print_uint:43 print_char:47 
Calls in [print_uint] to print_uchar:72 print_uchar:75 
Calls in [print_uchar] to print_char:83 print_char:88 

Created 12 initial phi equivalence classes
Coalesced [3] sub::idx#4 = sub::idx#0
Coalesced [6] sub::idx#5 = sub::idx#1
Coalesced [9] sub::idx#6 = sub::idx#2
Coalesced [25] main::j#5 = main::j#1
Not coalescing [26] print_char_cursor#63 = print_line_cursor#0
Coalesced [27] print_line_cursor#31 = print_line_cursor#0
Coalesced [28] main::i#6 = main::i#1
Coalesced [38] print_char_cursor#60 = print_char_cursor#51
Coalesced [40] print_sint::w#9 = print_sint::w#1
Coalesced (already) [46] print_char_cursor#59 = print_char_cursor#51
Coalesced [49] print_sint::w#8 = print_sint::w#0
Coalesced [50] print_line_cursor#29 = print_line_cursor#21
Coalesced (already) [56] print_line_cursor#30 = print_line_cursor#0
Coalesced [65] memset::dst#4 = memset::dst#1
Coalesced [71] print_uchar::b#4 = print_uchar::b#0
Coalesced [74] print_uchar::b#5 = print_uchar::b#1
Coalesced [81] print_char::ch#5 = print_char::ch#2
Coalesced [82] print_char_cursor#61 = print_char_cursor#12
Coalesced [86] print_char::ch#6 = print_char::ch#3
Coalesced (already) [87] print_char_cursor#62 = print_char_cursor#12
Coalesced down to 10 phi equivalence classes
Culled Empty Block label main::@7
Culled Empty Block label main::@10
Culled Empty Block label print_cls::@1
Culled Empty Block label print_sint::@5
Culled Empty Block label print_sint::@6
Culled Empty Block label print_ln::@2
Culled Empty Block label print_ln::@3
Culled Empty Block label memset::@2
Culled Empty Block label memset::@1
Culled Empty Block label print_uint::@2
Culled Empty Block label print_uchar::@2
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block main::@8 to main::@7
Renumbering block main::@9 to main::@8
Renumbering block main::@11 to main::@9
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_sint::@3
Adding NOP phi() at start of print_sint::@1
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@6
  [1] main::i#2 = phi( main/0, main::@6/main::i#1 )
  [2] sub::idx#0 = main::i#2
  [3] call sub
  to:main::@4
main::@4: scope:[main]  from main::@1
  [4] sub::idx#1 = main::i#2
  [5] call sub
  to:main::@5
main::@5: scope:[main]  from main::@4
  [6] sub::idx#2 = main::i#2
  [7] call sub
  to:main::@6
main::@6: scope:[main]  from main::@5
  [8] main::i#1 = ++ main::i#2
  [9] if(main::i#1!=9) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@6
  [10] phi()
  [11] call print_cls
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@9
  [12] print_line_cursor#21 = phi( main::@2/print_screen#0, main::@9/print_line_cursor#0 )
  [12] print_char_cursor#51 = phi( main::@2/print_screen#0, main::@9/print_char_cursor#63 )
  [12] main::j#2 = phi( main::@2/0, main::@9/main::j#1 )
  [13] main::$8 = main::j#2 << 1
  [14] print_sint::w#1 = words[main::$8]
  [15] call print_sint
  to:main::@7
main::@7: scope:[main]  from main::@3
  [16] phi()
  [17] call print_ln
  to:main::@8
main::@8: scope:[main]  from main::@7
  [18] main::j#1 = ++ main::j#2
  [19] if(main::j#1!=9) goto main::@9
  to:main::@return
main::@return: scope:[main]  from main::@8
  [20] return 
  to:@return
main::@9: scope:[main]  from main::@8
  [21] print_char_cursor#63 = print_line_cursor#0
  to:main::@3

void sub(char idx , char s)
sub: scope:[sub]  from main::@1 main::@4 main::@5
  [22] sub::s#3 = phi( main::@1/$80, main::@4/$40, main::@5/$40 )
  [22] sub::idx#3 = phi( main::@1/sub::idx#0, main::@4/sub::idx#1, main::@5/sub::idx#2 )
  [23] sub::$0 = sub::idx#3 << 1
  [24] words[sub::$0] = words[sub::$0] - sub::s#3
  to:sub::@return
sub::@return: scope:[sub]  from sub
  [25] return 
  to:@return

void print_cls()
print_cls: scope:[print_cls]  from main::@2
  [26] phi()
  [27] call memset
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [28] return 
  to:@return

void print_sint(int w)
print_sint: scope:[print_sint]  from main::@3
  [29] if(print_sint::w#1<0) goto print_sint::@1
  to:print_sint::@3
print_sint::@3: scope:[print_sint]  from print_sint
  [30] phi()
  [31] call print_char
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@3 print_sint::@4
  [32] print_sint::w#4 = phi( print_sint::@4/print_sint::w#0, print_sint::@3/print_sint::w#1 )
  [33] print_uint::w#0 = (unsigned int)print_sint::w#4
  [34] call print_uint
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@2
  [35] return 
  to:@return
print_sint::@1: scope:[print_sint]  from print_sint
  [36] phi()
  [37] call print_char
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  [38] print_sint::w#0 = - print_sint::w#1
  to:print_sint::@2

void print_ln()
print_ln: scope:[print_ln]  from main::@7
  [39] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [40] print_line_cursor#10 = phi( print_ln/print_line_cursor#21, print_ln::@1/print_line_cursor#0 )
  [41] print_line_cursor#0 = print_line_cursor#10 + $28
  [42] if(print_line_cursor#0<print_char_cursor#12) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [43] return 
  to:@return

void * memset(void *str , char c , unsigned int num)
memset: scope:[memset]  from print_cls
  [44] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [45] memset::dst#2 = phi( memset/(char *)memset::str#0, memset::@2/memset::dst#1 )
  [46] if(memset::dst#2!=memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [47] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [48] *memset::dst#2 = memset::c#0
  [49] memset::dst#1 = ++ memset::dst#2
  to:memset::@1

void print_char(char ch)
print_char: scope:[print_char]  from print_sint::@1 print_sint::@3 print_uchar print_uchar::@1
  [50] print_char_cursor#35 = phi( print_sint::@1/print_char_cursor#51, print_sint::@3/print_char_cursor#51, print_uchar/print_char_cursor#12, print_uchar::@1/print_char_cursor#12 )
  [50] print_char::ch#4 = phi( print_sint::@1/'-', print_sint::@3/' ', print_uchar/print_char::ch#2, print_uchar::@1/print_char::ch#3 )
  [51] *print_char_cursor#35 = print_char::ch#4
  [52] print_char_cursor#12 = ++ print_char_cursor#35
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [53] return 
  to:@return

void print_uint(unsigned int w)
print_uint: scope:[print_uint]  from print_sint::@2
  [54] print_uchar::b#0 = byte1  print_uint::w#0
  [55] call print_uchar
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [56] print_uchar::b#1 = byte0  print_uint::w#0
  [57] call print_uchar
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [58] return 
  to:@return

void print_uchar(char b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  [59] print_uchar::b#2 = phi( print_uint/print_uchar::b#0, print_uint::@1/print_uchar::b#1 )
  [60] print_uchar::$0 = print_uchar::b#2 >> 4
  [61] print_char::ch#2 = print_hextab[print_uchar::$0]
  [62] call print_char
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [63] print_uchar::$2 = print_uchar::b#2 & $f
  [64] print_char::ch#3 = print_hextab[print_uchar::$2]
  [65] call print_char
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [66] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
char main::$8 // 22.0
char main::i
char main::i#1 // 16.5
char main::i#2 // 7.857142857142857
char main::j
char main::j#1 // 11.0
char main::j#2 // 5.5
void * memset(void *str , char c , unsigned int num)
char memset::c
char *memset::dst
char *memset::dst#1 // 2002.0
char *memset::dst#2 // 1334.6666666666667
char *memset::end
unsigned int memset::num
void *memset::return
void *memset::str
void print_char(char ch)
char print_char::ch
char print_char::ch#2 // 20002.0
char print_char::ch#3 // 20002.0
char print_char::ch#4 // 120003.0
char *print_char_cursor
char *print_char_cursor#12 // 4643.0
char *print_char_cursor#35 // 110103.0
char *print_char_cursor#51 // 35.5
char *print_char_cursor#63 // 22.0
void print_cls()
char *print_line_cursor
char *print_line_cursor#0 // 4289.285714285714
char *print_line_cursor#10 // 20103.0
char *print_line_cursor#21 // 18.666666666666664
void print_ln()
char *print_screen
void print_sint(int w)
int print_sint::w
int print_sint::w#0 // 202.0
int print_sint::w#1 // 52.33333333333333
int print_sint::w#4 // 202.0
void print_uchar(char b)
char print_uchar::$0 // 20002.0
char print_uchar::$2 // 20002.0
char print_uchar::b
char print_uchar::b#0 // 2002.0
char print_uchar::b#1 // 2002.0
char print_uchar::b#2 // 5501.0
void print_uint(unsigned int w)
unsigned int print_uint::w
unsigned int print_uint::w#0 // 701.0
void sub(char idx , char s)
char sub::$0 // 303.0
char sub::idx
char sub::idx#0 // 22.0
char sub::idx#1 // 22.0
char sub::idx#2 // 22.0
char sub::idx#3 // 134.0
char sub::s
char sub::s#3 // 50.5

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ sub::idx#3 sub::idx#0 sub::idx#1 sub::idx#2 ]
[ sub::s#3 ]
[ print_sint::w#4 print_sint::w#0 print_sint::w#1 ]
[ print_line_cursor#10 print_line_cursor#21 print_line_cursor#0 ]
[ memset::dst#2 memset::dst#1 ]
[ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
[ print_char_cursor#35 print_char_cursor#51 print_char_cursor#63 print_char_cursor#12 ]
[ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Added variable main::$8 to live range equivalence class [ main::$8 ]
Added variable sub::$0 to live range equivalence class [ sub::$0 ]
Added variable print_uint::w#0 to live range equivalence class [ print_uint::w#0 ]
Added variable print_uchar::$0 to live range equivalence class [ print_uchar::$0 ]
Added variable print_uchar::$2 to live range equivalence class [ print_uchar::$2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ sub::idx#3 sub::idx#0 sub::idx#1 sub::idx#2 ]
[ sub::s#3 ]
[ print_sint::w#4 print_sint::w#0 print_sint::w#1 ]
[ print_line_cursor#10 print_line_cursor#21 print_line_cursor#0 ]
[ memset::dst#2 memset::dst#1 ]
[ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
[ print_char_cursor#35 print_char_cursor#51 print_char_cursor#63 print_char_cursor#12 ]
[ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
[ main::$8 ]
[ sub::$0 ]
[ print_uint::w#0 ]
[ print_uchar::$0 ]
[ print_uchar::$2 ]
Allocated zp[1]:2 [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
Allocated zp[2]:3 [ print_char_cursor#35 print_char_cursor#51 print_char_cursor#63 print_char_cursor#12 ]
Allocated zp[2]:5 [ print_line_cursor#10 print_line_cursor#21 print_line_cursor#0 ]
Allocated zp[1]:7 [ print_uchar::$0 ]
Allocated zp[1]:8 [ print_uchar::$2 ]
Allocated zp[1]:9 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Allocated zp[2]:10 [ memset::dst#2 memset::dst#1 ]
Allocated zp[2]:12 [ print_uint::w#0 ]
Allocated zp[2]:14 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ]
Allocated zp[1]:16 [ sub::$0 ]
Allocated zp[1]:17 [ sub::idx#3 sub::idx#0 sub::idx#1 sub::idx#2 ]
Allocated zp[1]:18 [ sub::s#3 ]
Allocated zp[1]:19 [ main::i#2 main::i#1 ]
Allocated zp[1]:20 [ main::$8 ]
Allocated zp[1]:21 [ main::j#2 main::j#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [13] main::$8 = main::j#2 << 1 [ main::j#2 print_char_cursor#51 print_line_cursor#21 main::$8 ] (  [ main::j#2 print_char_cursor#51 print_line_cursor#21 main::$8 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:21 [ main::j#2 main::j#1 ]
Statement [14] print_sint::w#1 = words[main::$8] [ main::j#2 print_char_cursor#51 print_line_cursor#21 print_sint::w#1 ] (  [ main::j#2 print_char_cursor#51 print_line_cursor#21 print_sint::w#1 ] { }  ) always clobbers reg byte a 
Statement [21] print_char_cursor#63 = print_line_cursor#0 [ main::j#1 print_char_cursor#63 print_line_cursor#0 ] (  [ main::j#1 print_char_cursor#63 print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [23] sub::$0 = sub::idx#3 << 1 [ sub::s#3 sub::$0 ] ( sub:3 [ main::i#2 sub::s#3 sub::$0 ] { { sub::idx#0 = sub::idx#3 main::i#2 } }  sub:5 [ main::i#2 sub::s#3 sub::$0 ] { { sub::idx#1 = sub::idx#3 main::i#2 } }  sub:7 [ main::i#2 sub::s#3 sub::$0 ] { { sub::idx#2 = sub::idx#3 main::i#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:19 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:18 [ sub::s#3 ]
Statement [24] words[sub::$0] = words[sub::$0] - sub::s#3 [ ] ( sub:3 [ main::i#2 ] { { sub::idx#0 = sub::idx#3 main::i#2 } }  sub:5 [ main::i#2 ] { { sub::idx#1 = sub::idx#3 main::i#2 } }  sub:7 [ main::i#2 ] { { sub::idx#2 = sub::idx#3 main::i#2 } }  ) always clobbers reg byte a 
Statement [29] if(print_sint::w#1<0) goto print_sint::@1 [ print_char_cursor#51 print_sint::w#1 ] ( print_sint:15 [ main::j#2 print_line_cursor#21 print_char_cursor#51 print_sint::w#1 ] { }  ) always clobbers reg byte a 
Statement [33] print_uint::w#0 = (unsigned int)print_sint::w#4 [ print_uint::w#0 print_char_cursor#12 ] ( print_sint:15 [ main::j#2 print_line_cursor#21 print_uint::w#0 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [38] print_sint::w#0 = - print_sint::w#1 [ print_sint::w#0 print_char_cursor#12 ] ( print_sint:15 [ main::j#2 print_line_cursor#21 print_sint::w#0 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [41] print_line_cursor#0 = print_line_cursor#10 + $28 [ print_line_cursor#0 print_char_cursor#12 ] ( print_ln:17 [ main::j#2 print_line_cursor#0 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [42] if(print_line_cursor#0<print_char_cursor#12) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#12 ] ( print_ln:17 [ main::j#2 print_line_cursor#0 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [46] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:11::memset:27 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [48] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( print_cls:11::memset:27 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [51] *print_char_cursor#35 = print_char::ch#4 [ print_char_cursor#35 ] ( print_sint:15::print_char:31 [ main::j#2 print_line_cursor#21 print_sint::w#1 print_char_cursor#35 ] { { print_char_cursor#35 = print_char_cursor#51 } }  print_sint:15::print_char:37 [ main::j#2 print_line_cursor#21 print_sint::w#1 print_char_cursor#35 ] { { print_char_cursor#35 = print_char_cursor#51 } }  print_sint:15::print_uint:34::print_uchar:55::print_char:62 [ main::j#2 print_line_cursor#21 print_uint::w#0 print_uchar::b#2 print_char_cursor#35 ] { { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#4 } { print_char_cursor#12 = print_char_cursor#35 } }  print_sint:15::print_uint:34::print_uchar:57::print_char:62 [ main::j#2 print_line_cursor#21 print_uchar::b#2 print_char_cursor#35 ] { { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#4 } { print_char_cursor#12 = print_char_cursor#35 } }  print_sint:15::print_uint:34::print_uchar:55::print_char:65 [ main::j#2 print_line_cursor#21 print_uint::w#0 print_char_cursor#35 ] { { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#4 } { print_char_cursor#12 = print_char_cursor#35 } }  print_sint:15::print_uint:34::print_uchar:57::print_char:65 [ main::j#2 print_line_cursor#21 print_char_cursor#35 ] { { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#4 } { print_char_cursor#12 = print_char_cursor#35 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:21 [ main::j#2 main::j#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:9 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Statement [60] print_uchar::$0 = print_uchar::b#2 >> 4 [ print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] ( print_sint:15::print_uint:34::print_uchar:55 [ main::j#2 print_line_cursor#21 print_uint::w#0 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#4 } { print_char_cursor#12 = print_char_cursor#35 } }  print_sint:15::print_uint:34::print_uchar:57 [ main::j#2 print_line_cursor#21 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#4 } { print_char_cursor#12 = print_char_cursor#35 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:9 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
Statement [63] print_uchar::$2 = print_uchar::b#2 & $f [ print_char_cursor#12 print_uchar::$2 ] ( print_sint:15::print_uint:34::print_uchar:55 [ main::j#2 print_line_cursor#21 print_uint::w#0 print_char_cursor#12 print_uchar::$2 ] { { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#4 } { print_char_cursor#12 = print_char_cursor#35 } }  print_sint:15::print_uint:34::print_uchar:57 [ main::j#2 print_line_cursor#21 print_char_cursor#12 print_uchar::$2 ] { { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#4 } { print_char_cursor#12 = print_char_cursor#35 } }  ) always clobbers reg byte a 
Statement [13] main::$8 = main::j#2 << 1 [ main::j#2 print_char_cursor#51 print_line_cursor#21 main::$8 ] (  [ main::j#2 print_char_cursor#51 print_line_cursor#21 main::$8 ] { }  ) always clobbers reg byte a 
Statement [14] print_sint::w#1 = words[main::$8] [ main::j#2 print_char_cursor#51 print_line_cursor#21 print_sint::w#1 ] (  [ main::j#2 print_char_cursor#51 print_line_cursor#21 print_sint::w#1 ] { }  ) always clobbers reg byte a 
Statement [21] print_char_cursor#63 = print_line_cursor#0 [ main::j#1 print_char_cursor#63 print_line_cursor#0 ] (  [ main::j#1 print_char_cursor#63 print_line_cursor#0 ] { }  ) always clobbers reg byte a 
Statement [23] sub::$0 = sub::idx#3 << 1 [ sub::s#3 sub::$0 ] ( sub:3 [ main::i#2 sub::s#3 sub::$0 ] { { sub::idx#0 = sub::idx#3 main::i#2 } }  sub:5 [ main::i#2 sub::s#3 sub::$0 ] { { sub::idx#1 = sub::idx#3 main::i#2 } }  sub:7 [ main::i#2 sub::s#3 sub::$0 ] { { sub::idx#2 = sub::idx#3 main::i#2 } }  ) always clobbers reg byte a 
Statement [24] words[sub::$0] = words[sub::$0] - sub::s#3 [ ] ( sub:3 [ main::i#2 ] { { sub::idx#0 = sub::idx#3 main::i#2 } }  sub:5 [ main::i#2 ] { { sub::idx#1 = sub::idx#3 main::i#2 } }  sub:7 [ main::i#2 ] { { sub::idx#2 = sub::idx#3 main::i#2 } }  ) always clobbers reg byte a 
Statement [29] if(print_sint::w#1<0) goto print_sint::@1 [ print_char_cursor#51 print_sint::w#1 ] ( print_sint:15 [ main::j#2 print_line_cursor#21 print_char_cursor#51 print_sint::w#1 ] { }  ) always clobbers reg byte a 
Statement [33] print_uint::w#0 = (unsigned int)print_sint::w#4 [ print_uint::w#0 print_char_cursor#12 ] ( print_sint:15 [ main::j#2 print_line_cursor#21 print_uint::w#0 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [38] print_sint::w#0 = - print_sint::w#1 [ print_sint::w#0 print_char_cursor#12 ] ( print_sint:15 [ main::j#2 print_line_cursor#21 print_sint::w#0 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [41] print_line_cursor#0 = print_line_cursor#10 + $28 [ print_line_cursor#0 print_char_cursor#12 ] ( print_ln:17 [ main::j#2 print_line_cursor#0 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [42] if(print_line_cursor#0<print_char_cursor#12) goto print_ln::@1 [ print_line_cursor#0 print_char_cursor#12 ] ( print_ln:17 [ main::j#2 print_line_cursor#0 print_char_cursor#12 ] { }  ) always clobbers reg byte a 
Statement [46] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( print_cls:11::memset:27 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [48] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( print_cls:11::memset:27 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [51] *print_char_cursor#35 = print_char::ch#4 [ print_char_cursor#35 ] ( print_sint:15::print_char:31 [ main::j#2 print_line_cursor#21 print_sint::w#1 print_char_cursor#35 ] { { print_char_cursor#35 = print_char_cursor#51 } }  print_sint:15::print_char:37 [ main::j#2 print_line_cursor#21 print_sint::w#1 print_char_cursor#35 ] { { print_char_cursor#35 = print_char_cursor#51 } }  print_sint:15::print_uint:34::print_uchar:55::print_char:62 [ main::j#2 print_line_cursor#21 print_uint::w#0 print_uchar::b#2 print_char_cursor#35 ] { { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#4 } { print_char_cursor#12 = print_char_cursor#35 } }  print_sint:15::print_uint:34::print_uchar:57::print_char:62 [ main::j#2 print_line_cursor#21 print_uchar::b#2 print_char_cursor#35 ] { { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#4 } { print_char_cursor#12 = print_char_cursor#35 } }  print_sint:15::print_uint:34::print_uchar:55::print_char:65 [ main::j#2 print_line_cursor#21 print_uint::w#0 print_char_cursor#35 ] { { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#4 } { print_char_cursor#12 = print_char_cursor#35 } }  print_sint:15::print_uint:34::print_uchar:57::print_char:65 [ main::j#2 print_line_cursor#21 print_char_cursor#35 ] { { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#4 } { print_char_cursor#12 = print_char_cursor#35 } }  ) always clobbers reg byte y 
Statement [60] print_uchar::$0 = print_uchar::b#2 >> 4 [ print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] ( print_sint:15::print_uint:34::print_uchar:55 [ main::j#2 print_line_cursor#21 print_uint::w#0 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#4 } { print_char_cursor#12 = print_char_cursor#35 } }  print_sint:15::print_uint:34::print_uchar:57 [ main::j#2 print_line_cursor#21 print_char_cursor#12 print_uchar::b#2 print_uchar::$0 ] { { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#2 = print_char::ch#4 } { print_char_cursor#12 = print_char_cursor#35 } }  ) always clobbers reg byte a 
Statement [63] print_uchar::$2 = print_uchar::b#2 & $f [ print_char_cursor#12 print_uchar::$2 ] ( print_sint:15::print_uint:34::print_uchar:55 [ main::j#2 print_line_cursor#21 print_uint::w#0 print_char_cursor#12 print_uchar::$2 ] { { print_uchar::b#0 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#4 } { print_char_cursor#12 = print_char_cursor#35 } }  print_sint:15::print_uint:34::print_uchar:57 [ main::j#2 print_line_cursor#21 print_char_cursor#12 print_uchar::$2 ] { { print_uchar::b#1 = print_uchar::b#2 } { print_char::ch#3 = print_char::ch#4 } { print_char_cursor#12 = print_char_cursor#35 } }  ) always clobbers reg byte a 
Potential registers zp[1]:19 [ main::i#2 main::i#1 ] : zp[1]:19 , reg byte x , reg byte y , 
Potential registers zp[1]:21 [ main::j#2 main::j#1 ] : zp[1]:21 , reg byte x , 
Potential registers zp[1]:17 [ sub::idx#3 sub::idx#0 sub::idx#1 sub::idx#2 ] : zp[1]:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:18 [ sub::s#3 ] : zp[1]:18 , reg byte x , reg byte y , 
Potential registers zp[2]:14 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] : zp[2]:14 , 
Potential registers zp[2]:5 [ print_line_cursor#10 print_line_cursor#21 print_line_cursor#0 ] : zp[2]:5 , 
Potential registers zp[2]:10 [ memset::dst#2 memset::dst#1 ] : zp[2]:10 , 
Potential registers zp[1]:2 [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:3 [ print_char_cursor#35 print_char_cursor#51 print_char_cursor#63 print_char_cursor#12 ] : zp[2]:3 , 
Potential registers zp[1]:9 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] : zp[1]:9 , reg byte x , 
Potential registers zp[1]:20 [ main::$8 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:16 [ sub::$0 ] : zp[1]:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:12 [ print_uint::w#0 ] : zp[2]:12 , 
Potential registers zp[1]:7 [ print_uchar::$0 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ print_uchar::$2 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print_char] 160,007: zp[1]:2 [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ] 
Uplift Scope [] 114,803.5: zp[2]:3 [ print_char_cursor#35 print_char_cursor#51 print_char_cursor#63 print_char_cursor#12 ] 24,410.95: zp[2]:5 [ print_line_cursor#10 print_line_cursor#21 print_line_cursor#0 ] 
Uplift Scope [print_uchar] 20,002: zp[1]:7 [ print_uchar::$0 ] 20,002: zp[1]:8 [ print_uchar::$2 ] 9,505: zp[1]:9 [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] 
Uplift Scope [memset] 3,336.67: zp[2]:10 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [print_uint] 701: zp[2]:12 [ print_uint::w#0 ] 
Uplift Scope [sub] 303: zp[1]:16 [ sub::$0 ] 200: zp[1]:17 [ sub::idx#3 sub::idx#0 sub::idx#1 sub::idx#2 ] 50.5: zp[1]:18 [ sub::s#3 ] 
Uplift Scope [print_sint] 456.33: zp[2]:14 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] 
Uplift Scope [main] 24.36: zp[1]:19 [ main::i#2 main::i#1 ] 22: zp[1]:20 [ main::$8 ] 16.5: zp[1]:21 [ main::j#2 main::j#1 ] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 
Uplift Scope [RADIX] 

Uplifting [print_char] best 6558 combination reg byte a [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ] 
Uplifting [] best 6558 combination zp[2]:3 [ print_char_cursor#35 print_char_cursor#51 print_char_cursor#63 print_char_cursor#12 ] zp[2]:5 [ print_line_cursor#10 print_line_cursor#21 print_line_cursor#0 ] 
Uplifting [print_uchar] best 6540 combination reg byte a [ print_uchar::$0 ] reg byte x [ print_uchar::$2 ] reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ] 
Uplifting [memset] best 6540 combination zp[2]:10 [ memset::dst#2 memset::dst#1 ] 
Uplifting [print_uint] best 6540 combination zp[2]:12 [ print_uint::w#0 ] 
Uplifting [sub] best 6437 combination reg byte a [ sub::$0 ] reg byte a [ sub::idx#3 sub::idx#0 sub::idx#1 sub::idx#2 ] reg byte x [ sub::s#3 ] 
Uplifting [print_sint] best 6437 combination zp[2]:14 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] 
Uplifting [main] best 6277 combination reg byte y [ main::i#2 main::i#1 ] reg byte a [ main::$8 ] zp[1]:21 [ main::j#2 main::j#1 ] 
Uplifting [print_ln] best 6277 combination 
Uplifting [print_cls] best 6277 combination 
Uplifting [RADIX] best 6277 combination 
Attempting to uplift remaining variables inzp[1]:21 [ main::j#2 main::j#1 ]
Uplifting [main] best 6277 combination zp[1]:21 [ main::j#2 main::j#1 ] 
Coalescing zero page register [ zp[2]:14 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] ] with [ zp[2]:12 [ print_uint::w#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:10 [ memset::dst#2 memset::dst#1 ] ] with [ zp[2]:14 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 print_uint::w#0 ] ]
Allocated (was zp[2]:3) zp[2]:2 [ print_char_cursor#35 print_char_cursor#51 print_char_cursor#63 print_char_cursor#12 ]
Allocated (was zp[2]:5) zp[2]:4 [ print_line_cursor#10 print_line_cursor#21 print_line_cursor#0 ]
Allocated (was zp[2]:10) zp[2]:6 [ memset::dst#2 memset::dst#1 print_sint::w#4 print_sint::w#0 print_sint::w#1 print_uint::w#0 ]
Allocated (was zp[1]:21) zp[1]:8 [ main::j#2 main::j#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests that signed indexed subtract works as intended
  // Upstart
  // Commodore 64 PRG executable file
.file [name="signed-indexed-subtract.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label print_screen = $400
  .label print_line_cursor = 4
  .label print_char_cursor = 2
.segment Code
  // main
main: {
    .label j = 8
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [1] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  __b1_from___b6:
    // [1] phi main::i#2 = main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] sub::idx#0 = main::i#2 -- vbuaa=vbuyy 
    tya
    // [3] call sub
    // [22] phi from main::@1 to sub [phi:main::@1->sub]
  sub_from___b1:
    // [22] phi sub::s#3 = $80 [phi:main::@1->sub#0] -- vbuxx=vbuc1 
    ldx #$80
    // [22] phi sub::idx#3 = sub::idx#0 [phi:main::@1->sub#1] -- register_copy 
    jsr sub
    jmp __b4
    // main::@4
  __b4:
    // [4] sub::idx#1 = main::i#2 -- vbuaa=vbuyy 
    tya
    // [5] call sub
    // [22] phi from main::@4 to sub [phi:main::@4->sub]
  sub_from___b4:
    // [22] phi sub::s#3 = $40 [phi:main::@4->sub#0] -- vbuxx=vbuc1 
    ldx #$40
    // [22] phi sub::idx#3 = sub::idx#1 [phi:main::@4->sub#1] -- register_copy 
    jsr sub
    jmp __b5
    // main::@5
  __b5:
    // [6] sub::idx#2 = main::i#2 -- vbuaa=vbuyy 
    tya
    // [7] call sub
    // [22] phi from main::@5 to sub [phi:main::@5->sub]
  sub_from___b5:
    // [22] phi sub::s#3 = $40 [phi:main::@5->sub#0] -- vbuxx=vbuc1 
    ldx #$40
    // [22] phi sub::idx#3 = sub::idx#2 [phi:main::@5->sub#1] -- register_copy 
    jsr sub
    jmp __b6
    // main::@6
  __b6:
    // [8] main::i#1 = ++ main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [9] if(main::i#1!=9) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #9
    bne __b1_from___b6
    // [10] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  __b2_from___b6:
    jmp __b2
    // main::@2
  __b2:
    // [11] call print_cls
    // [26] phi from main::@2 to print_cls [phi:main::@2->print_cls]
  print_cls_from___b2:
    jsr print_cls
    // [12] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [12] phi print_line_cursor#21 = print_screen#0 [phi:main::@2->main::@3#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [12] phi print_char_cursor#51 = print_screen#0 [phi:main::@2->main::@3#1] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [12] phi main::j#2 = 0 [phi:main::@2->main::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    jmp __b3
    // main::@3
  __b3:
    // [13] main::$8 = main::j#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z j
    asl
    // [14] print_sint::w#1 = words[main::$8] -- vwsz1=pwsc1_derefidx_vbuaa 
    tay
    lda words,y
    sta.z print_sint.w
    lda words+1,y
    sta.z print_sint.w+1
    // [15] call print_sint
    jsr print_sint
    // [16] phi from main::@3 to main::@7 [phi:main::@3->main::@7]
  __b7_from___b3:
    jmp __b7
    // main::@7
  __b7:
    // [17] call print_ln
    // [39] phi from main::@7 to print_ln [phi:main::@7->print_ln]
  print_ln_from___b7:
    jsr print_ln
    jmp __b8
    // main::@8
  __b8:
    // [18] main::j#1 = ++ main::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [19] if(main::j#1!=9) goto main::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp.z j
    bne __b9
    jmp __breturn
    // main::@return
  __breturn:
    // [20] return 
    rts
    // main::@9
  __b9:
    // [21] print_char_cursor#63 = print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [12] phi from main::@9 to main::@3 [phi:main::@9->main::@3]
  __b3_from___b9:
    // [12] phi print_line_cursor#21 = print_line_cursor#0 [phi:main::@9->main::@3#0] -- register_copy 
    // [12] phi print_char_cursor#51 = print_char_cursor#63 [phi:main::@9->main::@3#1] -- register_copy 
    // [12] phi main::j#2 = main::j#1 [phi:main::@9->main::@3#2] -- register_copy 
    jmp __b3
}
  // sub
// void sub(__register(A) char idx, __register(X) char s)
sub: {
    // [23] sub::$0 = sub::idx#3 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [24] words[sub::$0] = words[sub::$0] - sub::s#3 -- pwsc1_derefidx_vbuaa=pwsc1_derefidx_vbuaa_minus_vbuxx 
    stx.z $ff
    tax
    lda words,x
    sec
    sbc.z $ff
    sta words,x
    bcs !+
    dec words+1,x
  !:
    jmp __breturn
    // sub::@return
  __breturn:
    // [25] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [27] call memset
    // [44] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [28] return 
    rts
}
  // print_sint
// Print a signed int as HEX
// void print_sint(__zp(6) int w)
print_sint: {
    .label w = 6
    // [29] if(print_sint::w#1<0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sint
    // [30] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
  __b3_from_print_sint:
    jmp __b3
    // print_sint::@3
  __b3:
    // [31] call print_char
    // [50] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
  print_char_from___b3:
    // [50] phi print_char_cursor#35 = print_char_cursor#51 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [50] phi print_char::ch#4 = ' ' [phi:print_sint::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [32] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [32] phi print_sint::w#4 = print_sint::w#1 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    jmp __b2
    // print_sint::@2
  __b2:
    // [33] print_uint::w#0 = (unsigned int)print_sint::w#4
    // [34] call print_uint
    jsr print_uint
    jmp __breturn
    // print_sint::@return
  __breturn:
    // [35] return 
    rts
    // [36] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
  __b1_from_print_sint:
    jmp __b1
    // print_sint::@1
  __b1:
    // [37] call print_char
    // [50] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
  print_char_from___b1:
    // [50] phi print_char_cursor#35 = print_char_cursor#51 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [50] phi print_char::ch#4 = '-' [phi:print_sint::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_sint::@4
  __b4:
    // [38] print_sint::w#0 = - print_sint::w#1 -- vwsz1=_neg_vwsz1 
    lda #0
    sec
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // print_ln
// Print a newline
print_ln: {
    // [40] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [40] phi print_line_cursor#10 = print_line_cursor#21 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [41] print_line_cursor#0 = print_line_cursor#10 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [42] if(print_line_cursor#0<print_char_cursor#12) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [43] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// void * memset(void *str, char c, unsigned int num)
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = 6
    // [45] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [45] phi memset::dst#2 = (char *)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [46] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [47] return 
    rts
    // memset::@2
  __b2:
    // [48] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [49] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [45] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [45] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // print_char
// Print a single char
// void print_char(__register(A) char ch)
print_char: {
    // [51] *print_char_cursor#35 = print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [52] print_char_cursor#12 = ++ print_char_cursor#35 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [53] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// void print_uint(__zp(6) unsigned int w)
print_uint: {
    .label w = 6
    // [54] print_uchar::b#0 = byte1  print_uint::w#0 -- vbuxx=_byte1_vwuz1 
    ldx.z w+1
    // [55] call print_uchar
    // [59] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
  print_uchar_from_print_uint:
    // [59] phi print_uchar::b#2 = print_uchar::b#0 [phi:print_uint->print_uchar#0] -- register_copy 
    jsr print_uchar
    jmp __b1
    // print_uint::@1
  __b1:
    // [56] print_uchar::b#1 = byte0  print_uint::w#0 -- vbuxx=_byte0_vwuz1 
    ldx.z w
    // [57] call print_uchar
    // [59] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
  print_uchar_from___b1:
    // [59] phi print_uchar::b#2 = print_uchar::b#1 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    jsr print_uchar
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [58] return 
    rts
}
  // print_uchar
// Print a char as HEX
// void print_uchar(__register(X) char b)
print_uchar: {
    // [60] print_uchar::$0 = print_uchar::b#2 >> 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [61] print_char::ch#2 = print_hextab[print_uchar::$0] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [62] call print_char
  // Table of hexadecimal digits
    // [50] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [50] phi print_char_cursor#35 = print_char_cursor#12 [phi:print_uchar->print_char#0] -- register_copy 
    // [50] phi print_char::ch#4 = print_char::ch#2 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [63] print_uchar::$2 = print_uchar::b#2 & $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [64] print_char::ch#3 = print_hextab[print_uchar::$2] -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [65] call print_char
    // [50] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [50] phi print_char_cursor#35 = print_char_cursor#12 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [50] phi print_char::ch#4 = print_char::ch#3 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [66] return 
    rts
}
  // File Data
.segment Data
  print_hextab: .text "0123456789abcdef"
  words: .word -$6000, -$600, -$60, -6, 0, 6, $60, $600, $6000

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b6 with __b1
Replacing label __b1_from_print_sint with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b6:
Removing instruction __b2_from___b6:
Removing instruction print_cls_from___b2:
Removing instruction __b7_from___b3:
Removing instruction print_ln_from___b7:
Removing instruction __b3_from_print_sint:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_print_sint:
Removing instruction print_char_from___b1:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction sub_from___b1:
Removing instruction __b4:
Removing instruction sub_from___b4:
Removing instruction __b5:
Removing instruction sub_from___b5:
Removing instruction __b6:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __breturn:
Removing instruction __b3_from___b9:
Removing instruction __breturn:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Removing instruction print_uchar_from_print_uint:
Removing instruction __b1:
Removing instruction print_uchar_from___b1:
Removing instruction __breturn:
Removing instruction print_char_from_print_uchar:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
void main()
char main::$8 // reg byte a 22.0
char main::i
char main::i#1 // reg byte y 16.5
char main::i#2 // reg byte y 7.857142857142857
char main::j
char main::j#1 // j zp[1]:8 11.0
char main::j#2 // j zp[1]:8 5.5
void * memset(void *str , char c , unsigned int num)
char memset::c
__constant char memset::c#0 = ' ' // c
char *memset::dst
char *memset::dst#1 // dst zp[2]:6 2002.0
char *memset::dst#2 // dst zp[2]:6 1334.6666666666667
char *memset::end
__constant char *memset::end#0 = (char *)memset::str#0+memset::num#0 // end
unsigned int memset::num
__constant unsigned int memset::num#0 = $3e8 // num
void *memset::return
void *memset::str
__constant void *memset::str#0 = (void *)print_screen#0 // str
void print_char(char ch)
char print_char::ch
char print_char::ch#2 // reg byte a 20002.0
char print_char::ch#3 // reg byte a 20002.0
char print_char::ch#4 // reg byte a 120003.0
char *print_char_cursor
char *print_char_cursor#12 // print_char_cursor zp[2]:2 4643.0
char *print_char_cursor#35 // print_char_cursor zp[2]:2 110103.0
char *print_char_cursor#51 // print_char_cursor zp[2]:2 35.5
char *print_char_cursor#63 // print_char_cursor zp[2]:2 22.0
void print_cls()
__constant const char print_hextab[] = "0123456789abcdef"z
char *print_line_cursor
char *print_line_cursor#0 // print_line_cursor zp[2]:4 4289.285714285714
char *print_line_cursor#10 // print_line_cursor zp[2]:4 20103.0
char *print_line_cursor#21 // print_line_cursor zp[2]:4 18.666666666666664
void print_ln()
char *print_screen
__constant char *print_screen#0 = (char *) 1024 // print_screen
void print_sint(int w)
int print_sint::w
int print_sint::w#0 // w zp[2]:6 202.0
int print_sint::w#1 // w zp[2]:6 52.33333333333333
int print_sint::w#4 // w zp[2]:6 202.0
void print_uchar(char b)
char print_uchar::$0 // reg byte a 20002.0
char print_uchar::$2 // reg byte x 20002.0
char print_uchar::b
char print_uchar::b#0 // reg byte x 2002.0
char print_uchar::b#1 // reg byte x 2002.0
char print_uchar::b#2 // reg byte x 5501.0
void print_uint(unsigned int w)
unsigned int print_uint::w
unsigned int print_uint::w#0 // w zp[2]:6 701.0
void sub(char idx , char s)
char sub::$0 // reg byte a 303.0
char sub::idx
char sub::idx#0 // reg byte a 22.0
char sub::idx#1 // reg byte a 22.0
char sub::idx#2 // reg byte a 22.0
char sub::idx#3 // reg byte a 134.0
char sub::s
char sub::s#3 // reg byte x 50.5
__constant int words[] = { -$6000, -$600, -$60, -6, 0, 6, $60, $600, $6000 }

reg byte y [ main::i#2 main::i#1 ]
zp[1]:8 [ main::j#2 main::j#1 ]
reg byte a [ sub::idx#3 sub::idx#0 sub::idx#1 sub::idx#2 ]
reg byte x [ sub::s#3 ]
zp[2]:4 [ print_line_cursor#10 print_line_cursor#21 print_line_cursor#0 ]
zp[2]:6 [ memset::dst#2 memset::dst#1 print_sint::w#4 print_sint::w#0 print_sint::w#1 print_uint::w#0 ]
reg byte a [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
zp[2]:2 [ print_char_cursor#35 print_char_cursor#51 print_char_cursor#63 print_char_cursor#12 ]
reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
reg byte a [ main::$8 ]
reg byte a [ sub::$0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]


FINAL ASSEMBLER
Score: 5404

  // File Comments
// Tests that signed indexed subtract works as intended
  // Upstart
  // Commodore 64 PRG executable file
.file [name="signed-indexed-subtract.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label print_screen = $400
  .label print_line_cursor = 4
  .label print_char_cursor = 2
.segment Code
  // main
main: {
    .label j = 8
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [1] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // sub(i, $80)
    // [2] sub::idx#0 = main::i#2 -- vbuaa=vbuyy 
    tya
    // [3] call sub
    // [22] phi from main::@1 to sub [phi:main::@1->sub]
    // [22] phi sub::s#3 = $80 [phi:main::@1->sub#0] -- vbuxx=vbuc1 
    ldx #$80
    // [22] phi sub::idx#3 = sub::idx#0 [phi:main::@1->sub#1] -- register_copy 
    jsr sub
    // main::@4
    // sub(i, $40)
    // [4] sub::idx#1 = main::i#2 -- vbuaa=vbuyy 
    tya
    // [5] call sub
    // [22] phi from main::@4 to sub [phi:main::@4->sub]
    // [22] phi sub::s#3 = $40 [phi:main::@4->sub#0] -- vbuxx=vbuc1 
    ldx #$40
    // [22] phi sub::idx#3 = sub::idx#1 [phi:main::@4->sub#1] -- register_copy 
    jsr sub
    // main::@5
    // sub(i, $40)
    // [6] sub::idx#2 = main::i#2 -- vbuaa=vbuyy 
    tya
    // [7] call sub
    // [22] phi from main::@5 to sub [phi:main::@5->sub]
    // [22] phi sub::s#3 = $40 [phi:main::@5->sub#0] -- vbuxx=vbuc1 
    ldx #$40
    // [22] phi sub::idx#3 = sub::idx#2 [phi:main::@5->sub#1] -- register_copy 
    jsr sub
    // main::@6
    // for(byte i: 0..8)
    // [8] main::i#1 = ++ main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [9] if(main::i#1!=9) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #9
    bne __b1
    // [10] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
    // main::@2
    // print_cls()
    // [11] call print_cls
    // [26] phi from main::@2 to print_cls [phi:main::@2->print_cls]
    jsr print_cls
    // [12] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // [12] phi print_line_cursor#21 = print_screen#0 [phi:main::@2->main::@3#0] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_line_cursor
    lda #>print_screen
    sta.z print_line_cursor+1
    // [12] phi print_char_cursor#51 = print_screen#0 [phi:main::@2->main::@3#1] -- pbuz1=pbuc1 
    lda #<print_screen
    sta.z print_char_cursor
    lda #>print_screen
    sta.z print_char_cursor+1
    // [12] phi main::j#2 = 0 [phi:main::@2->main::@3#2] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    // main::@3
  __b3:
    // print_sint(words[j])
    // [13] main::$8 = main::j#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z j
    asl
    // [14] print_sint::w#1 = words[main::$8] -- vwsz1=pwsc1_derefidx_vbuaa 
    tay
    lda words,y
    sta.z print_sint.w
    lda words+1,y
    sta.z print_sint.w+1
    // [15] call print_sint
    jsr print_sint
    // [16] phi from main::@3 to main::@7 [phi:main::@3->main::@7]
    // main::@7
    // print_ln()
    // [17] call print_ln
    // [39] phi from main::@7 to print_ln [phi:main::@7->print_ln]
    jsr print_ln
    // main::@8
    // for(byte j: 0..8)
    // [18] main::j#1 = ++ main::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [19] if(main::j#1!=9) goto main::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp.z j
    bne __b9
    // main::@return
    // }
    // [20] return 
    rts
    // main::@9
  __b9:
    // [21] print_char_cursor#63 = print_line_cursor#0 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [12] phi from main::@9 to main::@3 [phi:main::@9->main::@3]
    // [12] phi print_line_cursor#21 = print_line_cursor#0 [phi:main::@9->main::@3#0] -- register_copy 
    // [12] phi print_char_cursor#51 = print_char_cursor#63 [phi:main::@9->main::@3#1] -- register_copy 
    // [12] phi main::j#2 = main::j#1 [phi:main::@9->main::@3#2] -- register_copy 
    jmp __b3
}
  // sub
// void sub(__register(A) char idx, __register(X) char s)
sub: {
    // words[idx] -= s
    // [23] sub::$0 = sub::idx#3 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [24] words[sub::$0] = words[sub::$0] - sub::s#3 -- pwsc1_derefidx_vbuaa=pwsc1_derefidx_vbuaa_minus_vbuxx 
    stx.z $ff
    tax
    lda words,x
    sec
    sbc.z $ff
    sta words,x
    bcs !+
    dec words+1,x
  !:
    // sub::@return
    // }
    // [25] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [27] call memset
    // [44] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [28] return 
    rts
}
  // print_sint
// Print a signed int as HEX
// void print_sint(__zp(6) int w)
print_sint: {
    .label w = 6
    // if(w<0)
    // [29] if(print_sint::w#1<0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1
    // [30] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
    // print_sint::@3
    // print_char(' ')
    // [31] call print_char
    // [50] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
    // [50] phi print_char_cursor#35 = print_char_cursor#51 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [50] phi print_char::ch#4 = ' ' [phi:print_sint::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [32] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
    // [32] phi print_sint::w#4 = print_sint::w#1 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    // print_sint::@2
  __b2:
    // print_uint((unsigned int)w)
    // [33] print_uint::w#0 = (unsigned int)print_sint::w#4
    // [34] call print_uint
    jsr print_uint
    // print_sint::@return
    // }
    // [35] return 
    rts
    // [36] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
    // print_sint::@1
  __b1:
    // print_char('-')
    // [37] call print_char
    // [50] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
    // [50] phi print_char_cursor#35 = print_char_cursor#51 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [50] phi print_char::ch#4 = '-' [phi:print_sint::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_sint::@4
    // w = -w
    // [38] print_sint::w#0 = - print_sint::w#1 -- vwsz1=_neg_vwsz1 
    lda #0
    sec
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2
}
  // print_ln
// Print a newline
print_ln: {
    // [40] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [40] phi print_line_cursor#10 = print_line_cursor#21 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + 0x28
    // [41] print_line_cursor#0 = print_line_cursor#10 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [42] if(print_line_cursor#0<print_char_cursor#12) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [43] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// void * memset(void *str, char c, unsigned int num)
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = print_screen
    .label end = str+num
    .label dst = 6
    // [45] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [45] phi memset::dst#2 = (char *)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [46] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [47] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [48] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [49] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [45] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [45] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // print_char
// Print a single char
// void print_char(__register(A) char ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [51] *print_char_cursor#35 = print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [52] print_char_cursor#12 = ++ print_char_cursor#35 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [53] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// void print_uint(__zp(6) unsigned int w)
print_uint: {
    .label w = 6
    // print_uchar(BYTE1(w))
    // [54] print_uchar::b#0 = byte1  print_uint::w#0 -- vbuxx=_byte1_vwuz1 
    ldx.z w+1
    // [55] call print_uchar
    // [59] phi from print_uint to print_uchar [phi:print_uint->print_uchar]
    // [59] phi print_uchar::b#2 = print_uchar::b#0 [phi:print_uint->print_uchar#0] -- register_copy 
    jsr print_uchar
    // print_uint::@1
    // print_uchar(BYTE0(w))
    // [56] print_uchar::b#1 = byte0  print_uint::w#0 -- vbuxx=_byte0_vwuz1 
    ldx.z w
    // [57] call print_uchar
    // [59] phi from print_uint::@1 to print_uchar [phi:print_uint::@1->print_uchar]
    // [59] phi print_uchar::b#2 = print_uchar::b#1 [phi:print_uint::@1->print_uchar#0] -- register_copy 
    jsr print_uchar
    // print_uint::@return
    // }
    // [58] return 
    rts
}
  // print_uchar
// Print a char as HEX
// void print_uchar(__register(X) char b)
print_uchar: {
    // b>>4
    // [60] print_uchar::$0 = print_uchar::b#2 >> 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [61] print_char::ch#2 = print_hextab[print_uchar::$0] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [62] call print_char
  // Table of hexadecimal digits
    // [50] phi from print_uchar to print_char [phi:print_uchar->print_char]
    // [50] phi print_char_cursor#35 = print_char_cursor#12 [phi:print_uchar->print_char#0] -- register_copy 
    // [50] phi print_char::ch#4 = print_char::ch#2 [phi:print_uchar->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@1
    // b&0xf
    // [63] print_uchar::$2 = print_uchar::b#2 & $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&0xf])
    // [64] print_char::ch#3 = print_hextab[print_uchar::$2] -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [65] call print_char
    // [50] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
    // [50] phi print_char_cursor#35 = print_char_cursor#12 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [50] phi print_char::ch#4 = print_char::ch#3 [phi:print_uchar::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_uchar::@return
    // }
    // [66] return 
    rts
}
  // File Data
.segment Data
  print_hextab: .text "0123456789abcdef"
  words: .word -$6000, -$600, -$60, -6, 0, 6, $60, $600, $6000

