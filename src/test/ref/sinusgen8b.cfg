
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call sin8s_gen 
  to:main::@2
main::@2: scope:[main]  from main
  [2] phi()
  [3] call sin16s_gen 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  [6] (byte*) print_char_cursor#45 ← phi( main::@3/(const byte*) print_screen#0 main::@5/(byte*) print_char_cursor#10 )
  [6] (byte) main::i#2 ← phi( main::@3/(byte) 0 main::@5/(byte) main::i#1 )
  [7] (signed byte) main::sb#0 ← *((const signed byte*) main::sintabb + (byte) main::i#2)
  [8] (word~) main::$10 ← (word)(byte) main::i#2
  [9] (word~) main::$9 ← (word~) main::$10 << (byte) 1
  [10] (signed word*~) main::$3 ← (const signed word*) main::sintabw + (word~) main::$9
  [11] (signed word) main::sw#0 ← *((signed word*~) main::$3)
  [12] (byte~) main::$11 ← > (signed word) main::sw#0
  [13] (signed byte) main::sd#0 ← (signed byte) main::sb#0 - (signed byte)(byte~) main::$11
  [14] (signed byte) print_schar::b#1 ← (signed byte) main::sd#0
  [15] call print_schar 
  to:main::@4
main::@4: scope:[main]  from main::@1
  [16] phi()
  [17] call print_str 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [18] (byte) main::i#1 ← ++ (byte) main::i#2
  [19] if((byte) main::i#1!=(byte) $c0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  [20] return 
  to:@return

(void()) sin8s_gen((signed byte*) sin8s_gen::sintab , (word) sin8s_gen::wavelength)
sin8s_gen: scope:[sin8s_gen]  from main
  [21] phi()
  [22] call div16u 
  [23] (word) div16u::return#2 ← (word) div16u::return#0
  to:sin8s_gen::@3
sin8s_gen::@3: scope:[sin8s_gen]  from sin8s_gen
  [24] (word) sin8s_gen::step#0 ← (word) div16u::return#2
  to:sin8s_gen::@1
sin8s_gen::@1: scope:[sin8s_gen]  from sin8s_gen::@3 sin8s_gen::@4
  [25] (signed byte*) sin8s_gen::sintab#2 ← phi( sin8s_gen::@3/(const signed byte*) main::sintabb sin8s_gen::@4/(signed byte*) sin8s_gen::sintab#0 )
  [25] (word) sin8s_gen::x#2 ← phi( sin8s_gen::@3/(word) 0 sin8s_gen::@4/(word) sin8s_gen::x#1 )
  [25] (word) sin8s_gen::i#2 ← phi( sin8s_gen::@3/(word) 0 sin8s_gen::@4/(word) sin8s_gen::i#1 )
  [26] if((word) sin8s_gen::i#2<(const word) main::wavelength) goto sin8s_gen::@2
  to:sin8s_gen::@return
sin8s_gen::@return: scope:[sin8s_gen]  from sin8s_gen::@1
  [27] return 
  to:@return
sin8s_gen::@2: scope:[sin8s_gen]  from sin8s_gen::@1
  [28] (word) sin8s::x#0 ← (word) sin8s_gen::x#2
  [29] call sin8s 
  [30] (signed byte) sin8s::return#0 ← (signed byte) sin8s::return#1
  to:sin8s_gen::@4
sin8s_gen::@4: scope:[sin8s_gen]  from sin8s_gen::@2
  [31] (signed byte~) sin8s_gen::$2 ← (signed byte) sin8s::return#0
  [32] *((signed byte*) sin8s_gen::sintab#2) ← (signed byte~) sin8s_gen::$2
  [33] (signed byte*) sin8s_gen::sintab#0 ← ++ (signed byte*) sin8s_gen::sintab#2
  [34] (word) sin8s_gen::x#1 ← (word) sin8s_gen::x#2 + (word) sin8s_gen::step#0
  [35] (word) sin8s_gen::i#1 ← ++ (word) sin8s_gen::i#2
  to:sin8s_gen::@1

(void()) sin16s_gen((signed word*) sin16s_gen::sintab , (word) sin16s_gen::wavelength)
sin16s_gen: scope:[sin16s_gen]  from main::@2
  [36] phi()
  [37] call div32u16u 
  [38] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
  to:sin16s_gen::@3
sin16s_gen::@3: scope:[sin16s_gen]  from sin16s_gen
  [39] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2
  to:sin16s_gen::@1
sin16s_gen::@1: scope:[sin16s_gen]  from sin16s_gen::@3 sin16s_gen::@4
  [40] (signed word*) sin16s_gen::sintab#2 ← phi( sin16s_gen::@3/(const signed word*) main::sintabw sin16s_gen::@4/(signed word*) sin16s_gen::sintab#0 )
  [40] (dword) sin16s_gen::x#2 ← phi( sin16s_gen::@3/(dword) 0 sin16s_gen::@4/(dword) sin16s_gen::x#1 )
  [40] (word) sin16s_gen::i#2 ← phi( sin16s_gen::@3/(word) 0 sin16s_gen::@4/(word) sin16s_gen::i#1 )
  [41] if((word) sin16s_gen::i#2<(const word) main::wavelength) goto sin16s_gen::@2
  to:sin16s_gen::@return
sin16s_gen::@return: scope:[sin16s_gen]  from sin16s_gen::@1
  [42] return 
  to:@return
sin16s_gen::@2: scope:[sin16s_gen]  from sin16s_gen::@1
  [43] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2
  [44] call sin16s 
  [45] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
  to:sin16s_gen::@4
sin16s_gen::@4: scope:[sin16s_gen]  from sin16s_gen::@2
  [46] (signed word~) sin16s_gen::$2 ← (signed word) sin16s::return#0
  [47] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$2
  [48] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (const byte) SIZEOF_SIGNED_WORD
  [49] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0
  [50] (word) sin16s_gen::i#1 ← ++ (word) sin16s_gen::i#2
  to:sin16s_gen::@1

(void()) print_cls()
print_cls: scope:[print_cls]  from main::@3
  [51] phi()
  [52] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [53] return 
  to:@return

(void()) print_schar((signed byte) print_schar::b)
print_schar: scope:[print_schar]  from main::@1
  [54] if((signed byte) print_schar::b#1<(signed byte) 0) goto print_schar::@1
  to:print_schar::@3
print_schar::@3: scope:[print_schar]  from print_schar
  [55] phi()
  [56] call print_char 
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@3 print_schar::@4
  [57] (signed byte) print_schar::b#4 ← phi( print_schar::@4/(signed byte) print_schar::b#0 print_schar::@3/(signed byte) print_schar::b#1 )
  [58] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#4
  [59] call print_uchar 
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@2
  [60] return 
  to:@return
print_schar::@1: scope:[print_schar]  from print_schar
  [61] phi()
  [62] call print_char 
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  [63] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#1
  to:print_schar::@2

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from main::@4
  [64] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [65] (byte*) print_str::str#2 ← phi( print_str/(const byte*) main::str print_str::@3/(byte*) print_str::str#0 )
  [66] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [67] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [68] (byte) print_char::ch#0 ← *((byte*) print_str::str#2)
  [69] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [70] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2
  to:print_str::@1

(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
div16u: scope:[div16u]  from sin8s_gen
  [71] phi()
  [72] call divr16u 
  [73] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  [74] (word) div16u::return#0 ← (word) divr16u::return#2
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  [75] return 
  to:@return

(signed byte()) sin8s((word) sin8s::x)
sin8s: scope:[sin8s]  from sin8s_gen::@2
  [76] if((word) sin8s::x#0<(const nomodify word) PI_u4f12) goto sin8s::@1
  to:sin8s::@5
sin8s::@5: scope:[sin8s]  from sin8s
  [77] (word) sin8s::x#1 ← (word) sin8s::x#0 - (const nomodify word) PI_u4f12
  to:sin8s::@1
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  [78] (byte) sin8s::isUpper#10 ← phi( sin8s/(byte) 0 sin8s::@5/(byte) 1 )
  [78] (word) sin8s::x#4 ← phi( sin8s/(word) sin8s::x#0 sin8s::@5/(word) sin8s::x#1 )
  [79] if((word) sin8s::x#4<(const nomodify word) PI_HALF_u4f12) goto sin8s::@2
  to:sin8s::@6
sin8s::@6: scope:[sin8s]  from sin8s::@1
  [80] (word) sin8s::x#2 ← (const nomodify word) PI_u4f12 - (word) sin8s::x#4
  to:sin8s::@2
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  [81] (word) sin8s::x#6 ← phi( sin8s::@1/(word) sin8s::x#4 sin8s::@6/(word) sin8s::x#2 )
  [82] (word~) sin8s::$4 ← (word) sin8s::x#6 << (byte) 3
  [83] (byte) sin8s::x1#0 ← > (word~) sin8s::$4
  [84] (byte) mulu8_sel::v1#0 ← (byte) sin8s::x1#0
  [85] (byte) mulu8_sel::v2#0 ← (byte) sin8s::x1#0
  [86] call mulu8_sel 
  [87] (byte) mulu8_sel::return#0 ← (byte) mulu8_sel::return#12
  to:sin8s::@9
sin8s::@9: scope:[sin8s]  from sin8s::@2
  [88] (byte) sin8s::x2#0 ← (byte) mulu8_sel::return#0
  [89] (byte) mulu8_sel::v1#1 ← (byte) sin8s::x2#0
  [90] (byte) mulu8_sel::v2#1 ← (byte) sin8s::x1#0
  [91] call mulu8_sel 
  [92] (byte) mulu8_sel::return#1 ← (byte) mulu8_sel::return#12
  to:sin8s::@10
sin8s::@10: scope:[sin8s]  from sin8s::@9
  [93] (byte) sin8s::x3#0 ← (byte) mulu8_sel::return#1
  [94] (byte) mulu8_sel::v1#2 ← (byte) sin8s::x3#0
  [95] call mulu8_sel 
  [96] (byte) mulu8_sel::return#2 ← (byte) mulu8_sel::return#12
  to:sin8s::@11
sin8s::@11: scope:[sin8s]  from sin8s::@10
  [97] (byte) sin8s::x3_6#0 ← (byte) mulu8_sel::return#2
  [98] (byte) sin8s::usinx#0 ← (byte) sin8s::x1#0 - (byte) sin8s::x3_6#0
  [99] (byte) mulu8_sel::v1#3 ← (byte) sin8s::x3#0
  [100] (byte) mulu8_sel::v2#3 ← (byte) sin8s::x1#0
  [101] call mulu8_sel 
  [102] (byte) mulu8_sel::return#10 ← (byte) mulu8_sel::return#12
  to:sin8s::@12
sin8s::@12: scope:[sin8s]  from sin8s::@11
  [103] (byte) sin8s::x4#0 ← (byte) mulu8_sel::return#10
  [104] (byte) mulu8_sel::v1#4 ← (byte) sin8s::x4#0
  [105] (byte) mulu8_sel::v2#4 ← (byte) sin8s::x1#0
  [106] call mulu8_sel 
  [107] (byte) mulu8_sel::return#11 ← (byte) mulu8_sel::return#12
  to:sin8s::@13
sin8s::@13: scope:[sin8s]  from sin8s::@12
  [108] (byte) sin8s::x5#0 ← (byte) mulu8_sel::return#11
  [109] (byte) sin8s::x5_128#0 ← (byte) sin8s::x5#0 >> (byte) 4
  [110] (byte) sin8s::usinx#1 ← (byte) sin8s::usinx#0 + (byte) sin8s::x5_128#0
  [111] if((byte) sin8s::usinx#1<(byte) $80) goto sin8s::@3
  to:sin8s::@7
sin8s::@7: scope:[sin8s]  from sin8s::@13
  [112] (byte) sin8s::usinx#2 ← -- (byte) sin8s::usinx#1
  to:sin8s::@3
sin8s::@3: scope:[sin8s]  from sin8s::@13 sin8s::@7
  [113] (byte) sin8s::usinx#4 ← phi( sin8s::@13/(byte) sin8s::usinx#1 sin8s::@7/(byte) sin8s::usinx#2 )
  [114] if((byte) sin8s::isUpper#10==(byte) 0) goto sin8s::@14
  to:sin8s::@8
sin8s::@8: scope:[sin8s]  from sin8s::@3
  [115] (signed byte) sin8s::sinx#1 ← - (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4
sin8s::@4: scope:[sin8s]  from sin8s::@14 sin8s::@8
  [116] (signed byte) sin8s::return#1 ← phi( sin8s::@14/(signed byte) sin8s::return#5 sin8s::@8/(signed byte) sin8s::sinx#1 )
  to:sin8s::@return
sin8s::@return: scope:[sin8s]  from sin8s::@4
  [117] return 
  to:@return
sin8s::@14: scope:[sin8s]  from sin8s::@3
  [118] (signed byte) sin8s::return#5 ← (signed byte)(byte) sin8s::usinx#4
  to:sin8s::@4

(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
div32u16u: scope:[div32u16u]  from sin16s_gen
  [119] phi()
  [120] call divr16u 
  [121] (word) divr16u::return#3 ← (word) divr16u::return#0
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  [122] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#3
  [123] (word) divr16u::rem#5 ← (word) rem16u#0
  [124] call divr16u 
  [125] (word) divr16u::return#4 ← (word) divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  [126] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#4
  [127] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  [128] return 
  to:@return

(signed word()) sin16s((dword) sin16s::x)
sin16s: scope:[sin16s]  from sin16s_gen::@2
  [129] if((dword) sin16s::x#0<(const nomodify dword) PI_u4f28) goto sin16s::@1
  to:sin16s::@4
sin16s::@4: scope:[sin16s]  from sin16s
  [130] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const nomodify dword) PI_u4f28
  to:sin16s::@1
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  [131] (byte) sin16s::isUpper#2 ← phi( sin16s/(byte) 0 sin16s::@4/(byte) 1 )
  [131] (dword) sin16s::x#4 ← phi( sin16s/(dword) sin16s::x#0 sin16s::@4/(dword) sin16s::x#1 )
  [132] if((dword) sin16s::x#4<(const nomodify dword) PI_HALF_u4f28) goto sin16s::@2
  to:sin16s::@5
sin16s::@5: scope:[sin16s]  from sin16s::@1
  [133] (dword) sin16s::x#2 ← (const nomodify dword) PI_u4f28 - (dword) sin16s::x#4
  to:sin16s::@2
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  [134] (dword) sin16s::x#6 ← phi( sin16s::@1/(dword) sin16s::x#4 sin16s::@5/(dword) sin16s::x#2 )
  [135] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3
  [136] (word) sin16s::x1#0 ← > (dword~) sin16s::$4
  [137] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0
  [138] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0
  [139] call mulu16_sel 
  [140] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  [141] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0
  [142] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  [143] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0
  [144] call mulu16_sel 
  [145] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  [146] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
  [147] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  [148] call mulu16_sel 
  [149] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  [150] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2
  [151] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0
  [152] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
  [153] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0
  [154] call mulu16_sel 
  [155] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  [156] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10
  [157] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  [158] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0
  [159] call mulu16_sel 
  [160] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  [161] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11
  [162] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4
  [163] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0
  [164] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@12
  to:sin16s::@6
sin16s::@6: scope:[sin16s]  from sin16s::@11
  [165] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1
  to:sin16s::@3
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  [166] (signed word) sin16s::return#1 ← phi( sin16s::@12/(signed word) sin16s::return#5 sin16s::@6/(signed word) sin16s::sinx#1 )
  to:sin16s::@return
sin16s::@return: scope:[sin16s]  from sin16s::@3
  [167] return 
  to:@return
sin16s::@12: scope:[sin16s]  from sin16s::@11
  [168] (signed word) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
  to:sin16s::@3

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [169] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [170] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [171] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [172] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [173] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [174] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_str::@2 print_uchar print_uchar::@1
  [175] (byte*) print_char_cursor#29 ← phi( print_schar::@1/(byte*) print_char_cursor#45 print_schar::@3/(byte*) print_char_cursor#45 print_str::@2/(byte*) print_char_cursor#10 print_uchar/(byte*) print_char_cursor#10 print_uchar::@1/(byte*) print_char_cursor#10 )
  [175] (byte) print_char::ch#5 ← phi( print_schar::@1/(byte) '-' print_schar::@3/(byte) ' ' print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#3 print_uchar::@1/(byte) print_char::ch#4 )
  [176] *((byte*) print_char_cursor#29) ← (byte) print_char::ch#5
  [177] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#29
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [178] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_schar::@2
  [179] (byte~) print_uchar::$0 ← (byte) print_uchar::b#0 >> (byte) 4
  [180] (byte) print_char::ch#3 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [181] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [182] (byte~) print_uchar::$2 ← (byte) print_uchar::b#0 & (byte) $f
  [183] (byte) print_char::ch#4 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [184] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [185] return 
  to:@return

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from div16u div32u16u div32u16u::@1
  [186] (word) divr16u::dividend#6 ← phi( div16u/(const nomodify word) PI2_u4f12 div32u16u/>(const nomodify dword) PI2_u4f28 div32u16u::@1/<(const nomodify dword) PI2_u4f28 )
  [186] (word) divr16u::rem#11 ← phi( div16u/(byte) 0 div32u16u/(byte) 0 div32u16u::@1/(word) divr16u::rem#5 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [187] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [187] (word) divr16u::quotient#3 ← phi( divr16u/(word) 0 divr16u::@3/(word) divr16u::return#0 )
  [187] (word) divr16u::dividend#4 ← phi( divr16u/(word) divr16u::dividend#6 divr16u::@3/(word) divr16u::dividend#0 )
  [187] (word) divr16u::rem#6 ← phi( divr16u/(word) divr16u::rem#11 divr16u::@3/(word) divr16u::rem#10 )
  [188] (word) divr16u::rem#0 ← (word) divr16u::rem#6 << (byte) 1
  [189] (byte~) divr16u::$1 ← > (word) divr16u::dividend#4
  [190] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [191] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [192] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [193] (word) divr16u::rem#7 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [194] (word) divr16u::dividend#0 ← (word) divr16u::dividend#4 << (byte) 1
  [195] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [196] if((word) divr16u::rem#7<(const word) main::wavelength) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [197] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [198] (word) divr16u::rem#2 ← (word) divr16u::rem#7 - (const word) main::wavelength
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [199] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [199] (word) divr16u::rem#10 ← phi( divr16u::@2/(word) divr16u::rem#7 divr16u::@5/(word) divr16u::rem#2 )
  [200] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [201] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [202] (word) rem16u#0 ← (word) divr16u::rem#10
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [203] return 
  to:@return

(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
mulu8_sel: scope:[mulu8_sel]  from sin8s::@10 sin8s::@11 sin8s::@12 sin8s::@2 sin8s::@9
  [204] (byte) mulu8_sel::select#5 ← phi( sin8s::@10/(byte) 1 sin8s::@11/(byte) 0 sin8s::@12/(byte) 0 sin8s::@2/(byte) 0 sin8s::@9/(byte) 1 )
  [204] (byte) mulu8_sel::v2#5 ← phi( sin8s::@10/(const nomodify byte) sin8s::DIV_6 sin8s::@11/(byte) mulu8_sel::v2#3 sin8s::@12/(byte) mulu8_sel::v2#4 sin8s::@2/(byte) mulu8_sel::v2#0 sin8s::@9/(byte) mulu8_sel::v2#1 )
  [204] (byte) mulu8_sel::v1#5 ← phi( sin8s::@10/(byte) mulu8_sel::v1#2 sin8s::@11/(byte) mulu8_sel::v1#3 sin8s::@12/(byte) mulu8_sel::v1#4 sin8s::@2/(byte) mulu8_sel::v1#0 sin8s::@9/(byte) mulu8_sel::v1#1 )
  [205] (byte) mul8u::a#1 ← (byte) mulu8_sel::v1#5
  [206] (byte) mul8u::b#0 ← (byte) mulu8_sel::v2#5
  [207] call mul8u 
  [208] (word) mul8u::return#2 ← (word) mul8u::res#2
  to:mulu8_sel::@1
mulu8_sel::@1: scope:[mulu8_sel]  from mulu8_sel
  [209] (word~) mulu8_sel::$0 ← (word) mul8u::return#2
  [210] (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select#5
  [211] (byte) mulu8_sel::return#12 ← > (word~) mulu8_sel::$1
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel::@1
  [212] return 
  to:@return

(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9
  [213] (byte) mulu16_sel::select#5 ← phi( sin16s::@10/(byte) 0 sin16s::@2/(byte) 0 sin16s::@7/(byte) 1 sin16s::@8/(byte) 1 sin16s::@9/(byte) 0 )
  [213] (word) mulu16_sel::v2#5 ← phi( sin16s::@10/(word) mulu16_sel::v2#4 sin16s::@2/(word) mulu16_sel::v2#0 sin16s::@7/(word) mulu16_sel::v2#1 sin16s::@8/(word)(number) $10000/(number) 6 sin16s::@9/(word) mulu16_sel::v2#3 )
  [213] (word) mulu16_sel::v1#5 ← phi( sin16s::@10/(word) mulu16_sel::v1#4 sin16s::@2/(word) mulu16_sel::v1#0 sin16s::@7/(word) mulu16_sel::v1#1 sin16s::@8/(word) mulu16_sel::v1#2 sin16s::@9/(word) mulu16_sel::v1#3 )
  [214] (word) mul16u::a#1 ← (word) mulu16_sel::v1#5
  [215] (word) mul16u::b#0 ← (word) mulu16_sel::v2#5
  [216] call mul16u 
  [217] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  [218] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2
  [219] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5
  [220] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  [221] return 
  to:@return

(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
mul8u: scope:[mul8u]  from mulu8_sel
  [222] (word) mul8u::mb#0 ← (word)(byte) mul8u::b#0
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [223] (word) mul8u::mb#2 ← phi( mul8u/(word) mul8u::mb#0 mul8u::@3/(word) mul8u::mb#1 )
  [223] (word) mul8u::res#2 ← phi( mul8u/(word) 0 mul8u::@3/(word) mul8u::res#6 )
  [223] (byte) mul8u::a#2 ← phi( mul8u/(byte) mul8u::a#1 mul8u::@3/(byte) mul8u::a#0 )
  [224] if((byte) mul8u::a#2!=(byte) 0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [225] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [226] (byte~) mul8u::$1 ← (byte) mul8u::a#2 & (byte) 1
  [227] if((byte~) mul8u::$1==(byte) 0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [228] (word) mul8u::res#1 ← (word) mul8u::res#2 + (word) mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [229] (word) mul8u::res#6 ← phi( mul8u::@2/(word) mul8u::res#2 mul8u::@4/(word) mul8u::res#1 )
  [230] (byte) mul8u::a#0 ← (byte) mul8u::a#2 >> (byte) 1
  [231] (word) mul8u::mb#1 ← (word) mul8u::mb#2 << (byte) 1
  to:mul8u::@1

(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
mul16u: scope:[mul16u]  from mulu16_sel
  [232] (dword) mul16u::mb#0 ← (dword)(word) mul16u::b#0
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [233] (dword) mul16u::mb#2 ← phi( mul16u/(dword) mul16u::mb#0 mul16u::@3/(dword) mul16u::mb#1 )
  [233] (dword) mul16u::res#2 ← phi( mul16u/(dword) 0 mul16u::@3/(dword) mul16u::res#6 )
  [233] (word) mul16u::a#2 ← phi( mul16u/(word) mul16u::a#1 mul16u::@3/(word) mul16u::a#0 )
  [234] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [235] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [236] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1
  [237] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [238] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [239] (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#2 mul16u::@4/(dword) mul16u::res#1 )
  [240] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte) 1
  [241] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1
  to:mul16u::@1
