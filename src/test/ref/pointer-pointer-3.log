Setting inferred volatile on symbol affected by address-of (void~) main::$0 ← call setscreen &(byte*) screen (byte*) screen1 
Setting inferred volatile on symbol affected by address-of (void~) main::$1 ← call setscreen &(volatile byte*) screen (byte*) screen2 
Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  (byte**) setscreen::screen#0 ← &(volatile byte*) screen
  (byte*) setscreen::val#0 ← (const byte*) screen1
  call setscreen 
  to:main::@1
main::@1: scope:[main]  from main
  *((volatile byte*) screen + (number) 0) ← (byte) 'a'
  (byte**) setscreen::screen#1 ← &(volatile byte*) screen
  (byte*) setscreen::val#1 ← (const byte*) screen2
  call setscreen 
  to:main::@2
main::@2: scope:[main]  from main::@1
  *((volatile byte*) screen + (number) 0) ← (byte) 'a'
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

(void()) setscreen((byte**) setscreen::screen , (byte*) setscreen::val)
setscreen: scope:[setscreen]  from main main::@1
  (byte**) setscreen::screen#2 ← phi( main/(byte**) setscreen::screen#0 main::@1/(byte**) setscreen::screen#1 )
  (byte*) setscreen::val#2 ← phi( main/(byte*) setscreen::val#0 main::@1/(byte*) setscreen::val#1 )
  *((byte**) setscreen::screen#2) ← (byte*) setscreen::val#2
  to:setscreen::@return
setscreen::@return: scope:[setscreen]  from setscreen
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (volatile byte*) screen ← (byte*)(number) $400
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(volatile byte*) screen loadstore
(const byte*) screen1 = (byte*)(number) $400
(const byte*) screen2 = (byte*)(number) $400+(number) $28
(void()) setscreen((byte**) setscreen::screen , (byte*) setscreen::val)
(label) setscreen::@return
(byte**) setscreen::screen
(byte**) setscreen::screen#0
(byte**) setscreen::screen#1
(byte**) setscreen::screen#2
(byte*) setscreen::val
(byte*) setscreen::val#0
(byte*) setscreen::val#1
(byte*) setscreen::val#2

Adding number conversion cast (unumber) 0 in *((volatile byte*) screen + (number) 0) ← (byte) 'a'
Adding number conversion cast (unumber) 0 in *((volatile byte*) screen + (number) 0) ← (byte) 'a'
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant (const byte**) setscreen::screen#0 = &screen
Constant (const byte*) setscreen::val#0 = screen1
Constant (const byte**) setscreen::screen#1 = &screen
Constant (const byte*) setscreen::val#1 = screen2
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero screen in [3] *((volatile byte*) screen + (byte) 0) ← (byte) 'a'
Simplifying expression containing zero screen in [7] *((volatile byte*) screen + (byte) 0) ← (byte) 'a'
Successful SSA optimization PassNSimplifyExpressionWithZero
Inlining constant with var siblings (const byte**) setscreen::screen#0
Inlining constant with var siblings (const byte*) setscreen::val#0
Inlining constant with var siblings (const byte**) setscreen::screen#1
Inlining constant with var siblings (const byte*) setscreen::val#1
Constant inlined setscreen::screen#0 = &(volatile byte*) screen
Constant inlined setscreen::val#1 = (const byte*) screen2
Constant inlined setscreen::screen#1 = &(volatile byte*) screen
Constant inlined setscreen::val#0 = (const byte*) screen1
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values (byte**) setscreen::screen#2 &(volatile byte*) screen
Successful SSA optimization Pass2IdenticalPhiElimination
Adding NOP phi() at start of _start
Adding NOP phi() at start of _start::@1
Adding NOP phi() at start of _start::@2
Adding NOP phi() at start of main
CALL GRAPH
Calls in [_start] to main:3 
Calls in [main] to setscreen:7 setscreen:9 

Created 1 initial phi equivalence classes
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) _start::@2
Adding NOP phi() at start of _start
Adding NOP phi() at start of _start::@1
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) _start()
_start: scope:[_start]  from
  [0] phi()
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  [1] (volatile byte*) screen ← (byte*) 1024
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  [2] phi()
  [3] call main 
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  [4] return 
  to:@return

(void()) main()
main: scope:[main]  from _start::@1
  [5] phi()
  [6] call setscreen 
  to:main::@1
main::@1: scope:[main]  from main
  [7] *((volatile byte*) screen) ← (byte) 'a'
  [8] call setscreen 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [9] *((volatile byte*) screen) ← (byte) 'a'
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return 
  to:@return

(void()) setscreen((byte**) setscreen::screen , (byte*) setscreen::val)
setscreen: scope:[setscreen]  from main main::@1
  [11] (byte*) setscreen::val#2 ← phi( main/(const byte*) screen1 main::@1/(const byte*) screen2 )
  [12] *(&(volatile byte*) screen) ← (byte*) setscreen::val#2
  to:setscreen::@return
setscreen::@return: scope:[setscreen]  from setscreen
  [13] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) _start()
(void()) main()
(volatile byte*) screen loadstore 2.666666666666667
(void()) setscreen((byte**) setscreen::screen , (byte*) setscreen::val)
(byte**) setscreen::screen
(byte*) setscreen::val
(byte*) setscreen::val#2 101.0

Initial phi equivalence classes
[ setscreen::val#2 ]
Added variable screen to live range equivalence class [ screen ]
Complete equivalence classes
[ setscreen::val#2 ]
[ screen ]
Allocated zp[2]:2 [ setscreen::val#2 ]
Allocated zp[2]:4 [ screen ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests pointer to pointer in a more complex setup
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen1 = $400
  .label screen2 = $400+$28
  .label screen = 4
  // _start
_start: {
    jmp _init1
    // _start::_init1
  _init1:
    // [1] (volatile byte*) screen ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [2] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
  __b1_from__init1:
    jmp __b1
    // _start::@1
  __b1:
    // [3] call main 
    // [5] phi from _start::@1 to main [phi:_start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // _start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    // [6] call setscreen 
    // [11] phi from main to setscreen [phi:main->setscreen]
  setscreen_from_main:
    // [11] phi (byte*) setscreen::val#2 = (const byte*) screen1 [phi:main->setscreen#0] -- pbuz1=pbuc1 
    lda #<screen1
    sta.z setscreen.val
    lda #>screen1
    sta.z setscreen.val+1
    jsr setscreen
    jmp __b1
    // main::@1
  __b1:
    // [7] *((volatile byte*) screen) ← (byte) 'a' -- _deref_pbuz1=vbuc1 
    lda #'a'
    ldy #0
    sta (screen),y
    // [8] call setscreen 
    // [11] phi from main::@1 to setscreen [phi:main::@1->setscreen]
  setscreen_from___b1:
    // [11] phi (byte*) setscreen::val#2 = (const byte*) screen2 [phi:main::@1->setscreen#0] -- pbuz1=pbuc1 
    lda #<screen2
    sta.z setscreen.val
    lda #>screen2
    sta.z setscreen.val+1
    jsr setscreen
    jmp __b2
    // main::@2
  __b2:
    // [9] *((volatile byte*) screen) ← (byte) 'a' -- _deref_pbuz1=vbuc1 
    lda #'a'
    ldy #0
    sta (screen),y
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // setscreen
// setscreen(byte* zp(2) val)
setscreen: {
    .label val = 2
    // [12] *(&(volatile byte*) screen) ← (byte*) setscreen::val#2 -- _deref_pptc1=pbuz1 
    lda.z val
    sta.z @screen
    lda.z val+1
    sta.z @screen+1
    jmp __breturn
    // setscreen::@return
  __breturn:
    // [13] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (volatile byte*) screen ← (byte*) 1024 [ screen ] (  [ screen ] { }  ) always clobbers reg byte a 
Statement [7] *((volatile byte*) screen) ← (byte) 'a' [ screen ] ( main:3 [ screen ] { }  ) always clobbers reg byte a reg byte y 
Statement [9] *((volatile byte*) screen) ← (byte) 'a' [ ] ( main:3 [ ] { }  ) always clobbers reg byte a reg byte y 
Statement [12] *(&(volatile byte*) screen) ← (byte*) setscreen::val#2 [ screen ] ( main:3::setscreen:6 [ screen ] { }  main:3::setscreen:8 [ screen ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ setscreen::val#2 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ screen ] : zp[2]:4 , 

REGISTER UPLIFT SCOPES
Uplift Scope [setscreen] 101: zp[2]:2 [ setscreen::val#2 ] 
Uplift Scope [] 2.67: zp[2]:4 [ screen ] 
Uplift Scope [main] 
Uplift Scope [_start] 

Uplifting [setscreen] best 146 combination zp[2]:2 [ setscreen::val#2 ] 
Uplifting [] best 146 combination zp[2]:4 [ screen ] 
Uplifting [main] best 146 combination 
Uplifting [_start] best 146 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests pointer to pointer in a more complex setup
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen1 = $400
  .label screen2 = $400+$28
  .label screen = 4
  // _start
_start: {
    jmp _init1
    // _start::_init1
  _init1:
    // [1] (volatile byte*) screen ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [2] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
  __b1_from__init1:
    jmp __b1
    // _start::@1
  __b1:
    // [3] call main 
    // [5] phi from _start::@1 to main [phi:_start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // _start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    // [6] call setscreen 
    // [11] phi from main to setscreen [phi:main->setscreen]
  setscreen_from_main:
    // [11] phi (byte*) setscreen::val#2 = (const byte*) screen1 [phi:main->setscreen#0] -- pbuz1=pbuc1 
    lda #<screen1
    sta.z setscreen.val
    lda #>screen1
    sta.z setscreen.val+1
    jsr setscreen
    jmp __b1
    // main::@1
  __b1:
    // [7] *((volatile byte*) screen) ← (byte) 'a' -- _deref_pbuz1=vbuc1 
    lda #'a'
    ldy #0
    sta (screen),y
    // [8] call setscreen 
    // [11] phi from main::@1 to setscreen [phi:main::@1->setscreen]
  setscreen_from___b1:
    // [11] phi (byte*) setscreen::val#2 = (const byte*) screen2 [phi:main::@1->setscreen#0] -- pbuz1=pbuc1 
    lda #<screen2
    sta.z setscreen.val
    lda #>screen2
    sta.z setscreen.val+1
    jsr setscreen
    jmp __b2
    // main::@2
  __b2:
    // [9] *((volatile byte*) screen) ← (byte) 'a' -- _deref_pbuz1=vbuc1 
    lda #'a'
    ldy #0
    sta (screen),y
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // setscreen
// setscreen(byte* zp(2) val)
setscreen: {
    .label val = 2
    // [12] *(&(volatile byte*) screen) ← (byte*) setscreen::val#2 -- _deref_pptc1=pbuz1 
    lda.z val
    sta.z @screen
    lda.z val+1
    sta.z @screen+1
    jmp __breturn
    // setscreen::@return
  __breturn:
    // [13] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp _init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from__init1:
Removing instruction main_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction _init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction setscreen_from_main:
Removing instruction __b1:
Removing instruction setscreen_from___b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) _start()
(label) _start::@1
(label) _start::@return
(label) _start::_init1
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(volatile byte*) screen loadstore zp[2]:4 2.666666666666667
(const byte*) screen1 = (byte*) 1024
(const byte*) screen2 = (byte*)(number) $400+(number) $28
(void()) setscreen((byte**) setscreen::screen , (byte*) setscreen::val)
(label) setscreen::@return
(byte**) setscreen::screen
(byte*) setscreen::val
(byte*) setscreen::val#2 val zp[2]:2 101.0

zp[2]:2 [ setscreen::val#2 ]
zp[2]:4 [ screen ]


FINAL ASSEMBLER
Score: 98

  // File Comments
// Tests pointer to pointer in a more complex setup
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(_start)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen1 = $400
  .label screen2 = $400+$28
  .label screen = 4
  // _start
_start: {
    // _start::_init1
    // screen = $400
    // [1] (volatile byte*) screen ← (byte*) 1024 -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [2] phi from _start::_init1 to _start::@1 [phi:_start::_init1->_start::@1]
    // _start::@1
    // [3] call main 
    // [5] phi from _start::@1 to main [phi:_start::@1->main]
    jsr main
    // _start::@return
    // [4] return 
    rts
}
  // main
main: {
    // setscreen(&screen, screen1)
    // [6] call setscreen 
    // [11] phi from main to setscreen [phi:main->setscreen]
    // [11] phi (byte*) setscreen::val#2 = (const byte*) screen1 [phi:main->setscreen#0] -- pbuz1=pbuc1 
    lda #<screen1
    sta.z setscreen.val
    lda #>screen1
    sta.z setscreen.val+1
    jsr setscreen
    // main::@1
    // screen[0] = 'a'
    // [7] *((volatile byte*) screen) ← (byte) 'a' -- _deref_pbuz1=vbuc1 
    lda #'a'
    ldy #0
    sta (screen),y
    // setscreen(&screen, screen2)
    // [8] call setscreen 
    // [11] phi from main::@1 to setscreen [phi:main::@1->setscreen]
    // [11] phi (byte*) setscreen::val#2 = (const byte*) screen2 [phi:main::@1->setscreen#0] -- pbuz1=pbuc1 
    lda #<screen2
    sta.z setscreen.val
    lda #>screen2
    sta.z setscreen.val+1
    jsr setscreen
    // main::@2
    // screen[0] = 'a'
    // [9] *((volatile byte*) screen) ← (byte) 'a' -- _deref_pbuz1=vbuc1 
    lda #'a'
    ldy #0
    sta (screen),y
    // main::@return
    // }
    // [10] return 
    rts
}
  // setscreen
// setscreen(byte* zp(2) val)
setscreen: {
    .label val = 2
    // *screen = val
    // [12] *(&(volatile byte*) screen) ← (byte*) setscreen::val#2 -- _deref_pptc1=pbuz1 
    lda.z val
    sta.z @screen
    lda.z val+1
    sta.z @screen+1
    // setscreen::@return
    // }
    // [13] return 
    rts
}
  // File Data

