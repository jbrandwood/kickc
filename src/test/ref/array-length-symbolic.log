Identified constant variable (byte) ITEM_COUNT
Identified constant variable (byte) ITEM_SIZE
Culled Empty Block (label) main::@4

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) ITEM_COUNT ← (number) 3
  (byte) ITEM_SIZE ← (number) 5
  (byte~) $0 ← (byte) ITEM_COUNT * (byte) ITEM_SIZE
  (byte[$0]) items ← { (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte*) main::cur_item#0 ← (byte[$0]) items
  (number~) main::$0 ← (byte) ITEM_COUNT - (number) 1
  (byte) main::item#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) main::cur_item#4 ← phi( main/(byte*) main::cur_item#0 main::@3/(byte*) main::cur_item#1 )
  (byte) main::item#4 ← phi( main/(byte) main::item#0 main::@3/(byte) main::item#1 )
  (number~) main::$1 ← (byte) ITEM_SIZE - (number) 1
  (byte) main::sub#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  (byte*) main::cur_item#2 ← phi( main::@1/(byte*) main::cur_item#4 main::@2/(byte*) main::cur_item#2 )
  (byte) main::sub#2 ← phi( main::@1/(byte) main::sub#0 main::@2/(byte) main::sub#1 )
  (byte) main::item#2 ← phi( main::@1/(byte) main::item#4 main::@2/(byte) main::item#2 )
  (number~) main::$2 ← (byte) main::item#2 * (number) $10
  (number~) main::$3 ← (number~) main::$2 | (byte) main::sub#2
  *((byte*) main::cur_item#2 + (byte) main::sub#2) ← (number~) main::$3
  (byte) main::sub#1 ← (byte) main::sub#2 + rangenext(0,main::$1)
  (bool~) main::$4 ← (byte) main::sub#1 != rangelast(0,main::$1)
  if((bool~) main::$4) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::item#3 ← phi( main::@2/(byte) main::item#2 )
  (byte*) main::cur_item#3 ← phi( main::@2/(byte*) main::cur_item#2 )
  (byte*) main::cur_item#1 ← (byte*) main::cur_item#3 + (byte) ITEM_SIZE
  (byte) main::item#1 ← (byte) main::item#3 + rangenext(0,main::$0)
  (bool~) main::$5 ← (byte) main::item#1 != rangelast(0,main::$0)
  if((bool~) main::$5) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(byte~) $0
(label) @1
(label) @2
(label) @begin
(label) @end
(byte) ITEM_COUNT
(byte) ITEM_SIZE
(byte[$0]) items
(void()) main()
(number~) main::$0
(number~) main::$1
(number~) main::$2
(number~) main::$3
(bool~) main::$4
(bool~) main::$5
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte*) main::cur_item
(byte*) main::cur_item#0
(byte*) main::cur_item#1
(byte*) main::cur_item#2
(byte*) main::cur_item#3
(byte*) main::cur_item#4
(byte) main::item
(byte) main::item#0
(byte) main::item#1
(byte) main::item#2
(byte) main::item#3
(byte) main::item#4
(byte) main::sub
(byte) main::sub#0
(byte) main::sub#1
(byte) main::sub#2

Adding number conversion cast (unumber) 3 in (byte) ITEM_COUNT ← (number) 3
Adding number conversion cast (unumber) 5 in (byte) ITEM_SIZE ← (number) 5
Adding number conversion cast (unumber) 1 in (number~) main::$0 ← (byte) ITEM_COUNT - (number) 1
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (byte) ITEM_COUNT - (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (number~) main::$1 ← (byte) ITEM_SIZE - (number) 1
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (byte) ITEM_SIZE - (unumber)(number) 1
Adding number conversion cast (unumber) $10 in (number~) main::$2 ← (byte) main::item#2 * (number) $10
Adding number conversion cast (unumber) main::$2 in (number~) main::$2 ← (byte) main::item#2 * (unumber)(number) $10
Adding number conversion cast (unumber) main::$3 in (number~) main::$3 ← (unumber~) main::$2 | (byte) main::sub#2
Successful SSA optimization PassNAddNumberTypeConversions
Added casts to value list in (byte[$0]) items ← (byte[$0]){ (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Successful SSA optimization PassNAddInitializerValueListTypeCasts
Inlining cast (byte) ITEM_COUNT ← (unumber)(number) 3
Inlining cast (byte) ITEM_SIZE ← (unumber)(number) 5
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 3
Simplifying constant integer cast 5
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $10
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $10
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) ITEM_COUNT - (byte) 1
Inferred type updated to byte in (unumber~) main::$1 ← (byte) ITEM_SIZE - (byte) 1
Inferred type updated to byte in (unumber~) main::$2 ← (byte) main::item#2 * (byte) $10
Inferred type updated to byte in (unumber~) main::$3 ← (byte~) main::$2 | (byte) main::sub#2
Alias (byte*) main::cur_item#2 = (byte*) main::cur_item#3 
Alias (byte) main::item#2 = (byte) main::item#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) main::item#2 (byte) main::item#4
Identical Phi Values (byte*) main::cur_item#2 (byte*) main::cur_item#4
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$4 [16] if((byte) main::sub#1!=rangelast(0,main::$1)) goto main::@2
Simple Condition (bool~) main::$5 [21] if((byte) main::item#1!=rangelast(0,main::$0)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Identified constant from value list (byte[$0]) { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Successful SSA optimization Pass2ConstantInitializerValueLists
Constant (const byte) ITEM_COUNT = 3
Constant (const byte) ITEM_SIZE = 5
Constant (const byte[$0]) items = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte) main::item#0 = 0
Constant (const byte) main::sub#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) main::cur_item#0 = items
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [0] (byte~) $0 ← (const byte) ITEM_COUNT * (const byte) ITEM_SIZE
Constant right-side identified [1] (byte~) main::$0 ← (const byte) ITEM_COUNT - (byte) 1
Constant right-side identified [3] (byte~) main::$1 ← (const byte) ITEM_SIZE - (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) $0 = ITEM_COUNT*ITEM_SIZE
Constant (const byte) main::$0 = ITEM_COUNT-1
Constant (const byte) main::$1 = ITEM_SIZE-1
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [8] main::sub#1 ← ++ main::sub#2 to ++
Resolved ranged comparison value [9] if(main::sub#1!=rangelast(0,main::$1)) goto main::@2 to (const byte) main::$1+(number) 1
Resolved ranged next value [11] main::item#1 ← ++ main::item#4 to ++
Resolved ranged comparison value [12] if(main::item#1!=rangelast(0,main::$0)) goto main::@1 to (const byte) main::$0+(number) 1
Adding number conversion cast (unumber) main::$1+1 in if((byte) main::sub#1!=(const byte) main::$1+(number) 1) goto main::@2
Adding number conversion cast (unumber) 1 in if((byte) main::sub#1!=(unumber)(const byte) main::$1+(number) 1) goto main::@2
Adding number conversion cast (unumber) main::$0+1 in if((byte) main::item#1!=(const byte) main::$0+(number) 1) goto main::@1
Adding number conversion cast (unumber) 1 in if((byte) main::item#1!=(unumber)(const byte) main::$0+(number) 1) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (const byte) main::$1+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (const byte) main::$0+(unumber)(number) 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Rewriting multiplication to use shift [2] (byte~) main::$2 ← (byte) main::item#4 * (byte) $10
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) main::item#0
Inlining constant with var siblings (const byte) main::sub#0
Inlining constant with var siblings (const byte*) main::cur_item#0
Constant inlined main::sub#0 = (byte) 0
Constant inlined main::$1 = (const byte) ITEM_SIZE-(byte) 1
Constant inlined $0 = (const byte) ITEM_COUNT*(const byte) ITEM_SIZE
Constant inlined main::cur_item#0 = (const byte[ITEM_COUNT*ITEM_SIZE]) items
Constant inlined main::$0 = (const byte) ITEM_COUNT-(byte) 1
Constant inlined main::item#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@5(between main::@3 and main::@1)
Added new block during phi lifting main::@6(between main::@2 and main::@2)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 3 initial phi equivalence classes
Coalesced [17] main::item#5 ← main::item#1
Coalesced [18] main::cur_item#5 ← main::cur_item#1
Coalesced [19] main::sub#3 ← main::sub#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [5] (byte*) main::cur_item#4 ← phi( main/(const byte[ITEM_COUNT*ITEM_SIZE]) items main::@3/(byte*) main::cur_item#1 )
  [5] (byte) main::item#4 ← phi( main/(byte) 0 main::@3/(byte) main::item#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [6] (byte) main::sub#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::sub#1 )
  [7] (byte~) main::$2 ← (byte) main::item#4 << (byte) 4
  [8] (byte~) main::$3 ← (byte~) main::$2 | (byte) main::sub#2
  [9] *((byte*) main::cur_item#4 + (byte) main::sub#2) ← (byte~) main::$3
  [10] (byte) main::sub#1 ← ++ (byte) main::sub#2
  [11] if((byte) main::sub#1!=(const byte) ITEM_SIZE-(byte) 1+(byte) 1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [12] (byte*) main::cur_item#1 ← (byte*) main::cur_item#4 + (const byte) ITEM_SIZE
  [13] (byte) main::item#1 ← ++ (byte) main::item#4
  [14] if((byte) main::item#1!=(const byte) ITEM_COUNT-(byte) 1+(byte) 1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [15] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$2 202.0
(byte~) main::$3 202.0
(byte*) main::cur_item
(byte*) main::cur_item#1 7.333333333333333
(byte*) main::cur_item#4 17.571428571428573
(byte) main::item
(byte) main::item#1 16.5
(byte) main::item#4 15.375
(byte) main::sub
(byte) main::sub#1 151.5
(byte) main::sub#2 101.0

Initial phi equivalence classes
[ main::item#4 main::item#1 ]
[ main::cur_item#4 main::cur_item#1 ]
[ main::sub#2 main::sub#1 ]
Added variable main::$2 to zero page equivalence class [ main::$2 ]
Added variable main::$3 to zero page equivalence class [ main::$3 ]
Complete equivalence classes
[ main::item#4 main::item#1 ]
[ main::cur_item#4 main::cur_item#1 ]
[ main::sub#2 main::sub#1 ]
[ main::$2 ]
[ main::$3 ]
Allocated zp[1]:2 [ main::item#4 main::item#1 ]
Allocated zp[2]:3 [ main::cur_item#4 main::cur_item#1 ]
Allocated zp[1]:5 [ main::sub#2 main::sub#1 ]
Allocated zp[1]:6 [ main::$2 ]
Allocated zp[1]:7 [ main::$3 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Illustrates symbolic array lengths
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const ITEM_COUNT = 3
  .const ITEM_SIZE = 5
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
// Fills the array item by item with $is, where i is the item# and s is the sub#
main: {
    .label __2 = 6
    .label __3 = 7
    .label sub = 5
    .label cur_item = 3
    .label item = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte*) main::cur_item#4 = (const byte[ITEM_COUNT*ITEM_SIZE]) items [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<items
    sta.z cur_item
    lda #>items
    sta.z cur_item+1
    // [5] phi (byte) main::item#4 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z item
    jmp __b1
    // [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [5] phi (byte*) main::cur_item#4 = (byte*) main::cur_item#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [5] phi (byte) main::item#4 = (byte) main::item#1 [phi:main::@3->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [6] phi (byte) main::sub#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z sub
    jmp __b2
    // [6] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  __b2_from___b2:
    // [6] phi (byte) main::sub#2 = (byte) main::sub#1 [phi:main::@2->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [7] (byte~) main::$2 ← (byte) main::item#4 << (byte) 4 -- vbuz1=vbuz2_rol_4 
    lda.z item
    asl
    asl
    asl
    asl
    sta.z __2
    // [8] (byte~) main::$3 ← (byte~) main::$2 | (byte) main::sub#2 -- vbuz1=vbuz2_bor_vbuz3 
    lda.z __2
    ora.z sub
    sta.z __3
    // [9] *((byte*) main::cur_item#4 + (byte) main::sub#2) ← (byte~) main::$3 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z __3
    ldy.z sub
    sta (cur_item),y
    // [10] (byte) main::sub#1 ← ++ (byte) main::sub#2 -- vbuz1=_inc_vbuz1 
    inc.z sub
    // [11] if((byte) main::sub#1!=(const byte) ITEM_SIZE-(byte) 1+(byte) 1) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #ITEM_SIZE-1+1
    cmp.z sub
    bne __b2_from___b2
    jmp __b3
    // main::@3
  __b3:
    // [12] (byte*) main::cur_item#1 ← (byte*) main::cur_item#4 + (const byte) ITEM_SIZE -- pbuz1=pbuz1_plus_vbuc1 
    lda #ITEM_SIZE
    clc
    adc.z cur_item
    sta.z cur_item
    bcc !+
    inc.z cur_item+1
  !:
    // [13] (byte) main::item#1 ← ++ (byte) main::item#4 -- vbuz1=_inc_vbuz1 
    inc.z item
    // [14] if((byte) main::item#1!=(const byte) ITEM_COUNT-(byte) 1+(byte) 1) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #ITEM_COUNT-1+1
    cmp.z item
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [15] return 
    rts
}
  // File Data
  items: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] (byte~) main::$2 ← (byte) main::item#4 << (byte) 4 [ main::item#4 main::cur_item#4 main::sub#2 main::$2 ] ( main:2 [ main::item#4 main::cur_item#4 main::sub#2 main::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::item#4 main::item#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:5 [ main::sub#2 main::sub#1 ]
Statement [12] (byte*) main::cur_item#1 ← (byte*) main::cur_item#4 + (const byte) ITEM_SIZE [ main::item#4 main::cur_item#1 ] ( main:2 [ main::item#4 main::cur_item#1 ] ) always clobbers reg byte a 
Statement [7] (byte~) main::$2 ← (byte) main::item#4 << (byte) 4 [ main::item#4 main::cur_item#4 main::sub#2 main::$2 ] ( main:2 [ main::item#4 main::cur_item#4 main::sub#2 main::$2 ] ) always clobbers reg byte a 
Statement [12] (byte*) main::cur_item#1 ← (byte*) main::cur_item#4 + (const byte) ITEM_SIZE [ main::item#4 main::cur_item#1 ] ( main:2 [ main::item#4 main::cur_item#1 ] ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::item#4 main::item#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[2]:3 [ main::cur_item#4 main::cur_item#1 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ main::sub#2 main::sub#1 ] : zp[1]:5 , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ main::$2 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::$3 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 252.5: zp[1]:5 [ main::sub#2 main::sub#1 ] 202: zp[1]:6 [ main::$2 ] 202: zp[1]:7 [ main::$3 ] 31.88: zp[1]:2 [ main::item#4 main::item#1 ] 24.9: zp[2]:3 [ main::cur_item#4 main::cur_item#1 ] 
Uplift Scope [] 

Uplifting [main] best 4418 combination reg byte y [ main::sub#2 main::sub#1 ] reg byte a [ main::$2 ] reg byte a [ main::$3 ] reg byte x [ main::item#4 main::item#1 ] zp[2]:3 [ main::cur_item#4 main::cur_item#1 ] 
Limited combination testing to 100 combinations of 144 possible.
Uplifting [] best 4418 combination 
Allocated (was zp[2]:3) zp[2]:2 [ main::cur_item#4 main::cur_item#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates symbolic array lengths
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const ITEM_COUNT = 3
  .const ITEM_SIZE = 5
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
// Fills the array item by item with $is, where i is the item# and s is the sub#
main: {
    .label cur_item = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte*) main::cur_item#4 = (const byte[ITEM_COUNT*ITEM_SIZE]) items [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<items
    sta.z cur_item
    lda #>items
    sta.z cur_item+1
    // [5] phi (byte) main::item#4 = (byte) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [5] phi (byte*) main::cur_item#4 = (byte*) main::cur_item#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [5] phi (byte) main::item#4 = (byte) main::item#1 [phi:main::@3->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [6] phi (byte) main::sub#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b2
    // [6] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  __b2_from___b2:
    // [6] phi (byte) main::sub#2 = (byte) main::sub#1 [phi:main::@2->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [7] (byte~) main::$2 ← (byte) main::item#4 << (byte) 4 -- vbuaa=vbuxx_rol_4 
    txa
    asl
    asl
    asl
    asl
    // [8] (byte~) main::$3 ← (byte~) main::$2 | (byte) main::sub#2 -- vbuaa=vbuaa_bor_vbuyy 
    sty.z $ff
    ora.z $ff
    // [9] *((byte*) main::cur_item#4 + (byte) main::sub#2) ← (byte~) main::$3 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (cur_item),y
    // [10] (byte) main::sub#1 ← ++ (byte) main::sub#2 -- vbuyy=_inc_vbuyy 
    iny
    // [11] if((byte) main::sub#1!=(const byte) ITEM_SIZE-(byte) 1+(byte) 1) goto main::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #ITEM_SIZE-1+1
    bne __b2_from___b2
    jmp __b3
    // main::@3
  __b3:
    // [12] (byte*) main::cur_item#1 ← (byte*) main::cur_item#4 + (const byte) ITEM_SIZE -- pbuz1=pbuz1_plus_vbuc1 
    lda #ITEM_SIZE
    clc
    adc.z cur_item
    sta.z cur_item
    bcc !+
    inc.z cur_item+1
  !:
    // [13] (byte) main::item#1 ← ++ (byte) main::item#4 -- vbuxx=_inc_vbuxx 
    inx
    // [14] if((byte) main::item#1!=(const byte) ITEM_COUNT-(byte) 1+(byte) 1) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #ITEM_COUNT-1+1
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [15] return 
    rts
}
  // File Data
  items: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __bbegin with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) ITEM_COUNT = (byte) 3
(const byte) ITEM_SIZE = (byte) 5
(const byte[ITEM_COUNT*ITEM_SIZE]) items = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(void()) main()
(byte~) main::$2 reg byte a 202.0
(byte~) main::$3 reg byte a 202.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte*) main::cur_item
(byte*) main::cur_item#1 cur_item zp[2]:2 7.333333333333333
(byte*) main::cur_item#4 cur_item zp[2]:2 17.571428571428573
(byte) main::item
(byte) main::item#1 reg byte x 16.5
(byte) main::item#4 reg byte x 15.375
(byte) main::sub
(byte) main::sub#1 reg byte y 151.5
(byte) main::sub#2 reg byte y 101.0

reg byte x [ main::item#4 main::item#1 ]
zp[2]:2 [ main::cur_item#4 main::cur_item#1 ]
reg byte y [ main::sub#2 main::sub#1 ]
reg byte a [ main::$2 ]
reg byte a [ main::$3 ]


FINAL ASSEMBLER
Score: 3416

  // File Comments
// Illustrates symbolic array lengths
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const ITEM_COUNT = 3
  .const ITEM_SIZE = 5
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
// Fills the array item by item with $is, where i is the item# and s is the sub#
main: {
    .label cur_item = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte*) main::cur_item#4 = (const byte[ITEM_COUNT*ITEM_SIZE]) items [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<items
    sta.z cur_item
    lda #>items
    sta.z cur_item+1
    // [5] phi (byte) main::item#4 = (byte) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [5] phi (byte*) main::cur_item#4 = (byte*) main::cur_item#1 [phi:main::@3->main::@1#0] -- register_copy 
    // [5] phi (byte) main::item#4 = (byte) main::item#1 [phi:main::@3->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [6] phi (byte) main::sub#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuyy=vbuc1 
    ldy #0
    // [6] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
    // [6] phi (byte) main::sub#2 = (byte) main::sub#1 [phi:main::@2->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // item*$10
    // [7] (byte~) main::$2 ← (byte) main::item#4 << (byte) 4 -- vbuaa=vbuxx_rol_4 
    txa
    asl
    asl
    asl
    asl
    // item*$10|sub
    // [8] (byte~) main::$3 ← (byte~) main::$2 | (byte) main::sub#2 -- vbuaa=vbuaa_bor_vbuyy 
    sty.z $ff
    ora.z $ff
    // cur_item[sub] = item*$10|sub
    // [9] *((byte*) main::cur_item#4 + (byte) main::sub#2) ← (byte~) main::$3 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (cur_item),y
    // for( byte sub: 0..ITEM_SIZE-1)
    // [10] (byte) main::sub#1 ← ++ (byte) main::sub#2 -- vbuyy=_inc_vbuyy 
    iny
    // [11] if((byte) main::sub#1!=(const byte) ITEM_SIZE-(byte) 1+(byte) 1) goto main::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #ITEM_SIZE-1+1
    bne __b2
    // main::@3
    // cur_item += ITEM_SIZE
    // [12] (byte*) main::cur_item#1 ← (byte*) main::cur_item#4 + (const byte) ITEM_SIZE -- pbuz1=pbuz1_plus_vbuc1 
    lda #ITEM_SIZE
    clc
    adc.z cur_item
    sta.z cur_item
    bcc !+
    inc.z cur_item+1
  !:
    // for( byte item: 0..ITEM_COUNT-1)
    // [13] (byte) main::item#1 ← ++ (byte) main::item#4 -- vbuxx=_inc_vbuxx 
    inx
    // [14] if((byte) main::item#1!=(const byte) ITEM_COUNT-(byte) 1+(byte) 1) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #ITEM_COUNT-1+1
    bne __b1
    // main::@return
    // }
    // [15] return 
    rts
}
  // File Data
  items: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

