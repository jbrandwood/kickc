
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call clock_start 
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [2] phi()
  [3] call clock 
  [4] (dword) clock::return#2 ← (dword) clock::return#0
  to:main::@2
main::@2: scope:[main]  from main::@1
  [5] (dword) print_ulong_at::dw#0 ← (dword) clock::return#2
  [6] call print_ulong_at 
  to:main::@1

(void()) print_ulong_at((dword) print_ulong_at::dw , (byte*) print_ulong_at::at)
print_ulong_at: scope:[print_ulong_at]  from main::@2
  [7] (word) print_uint_at::w#0 ← > (dword) print_ulong_at::dw#0
  [8] call print_uint_at 
  to:print_ulong_at::@1
print_ulong_at::@1: scope:[print_ulong_at]  from print_ulong_at
  [9] (word) print_uint_at::w#1 ← < (dword) print_ulong_at::dw#0
  [10] call print_uint_at 
  to:print_ulong_at::@return
print_ulong_at::@return: scope:[print_ulong_at]  from print_ulong_at::@1
  [11] return 
  to:@return

(void()) print_uint_at((word) print_uint_at::w , (byte*) print_uint_at::at)
print_uint_at: scope:[print_uint_at]  from print_ulong_at print_ulong_at::@1
  [12] (byte*) print_uint_at::at#2 ← phi( print_ulong_at/(const nomodify byte*) SCREEN print_ulong_at::@1/(const nomodify byte*) SCREEN+(byte) 4 )
  [12] (word) print_uint_at::w#2 ← phi( print_ulong_at/(word) print_uint_at::w#0 print_ulong_at::@1/(word) print_uint_at::w#1 )
  [13] (byte) print_uchar_at::b#0 ← > (word) print_uint_at::w#2
  [14] (byte*) print_uchar_at::at#0 ← (byte*) print_uint_at::at#2
  [15] call print_uchar_at 
  to:print_uint_at::@1
print_uint_at::@1: scope:[print_uint_at]  from print_uint_at
  [16] (byte) print_uchar_at::b#1 ← < (word) print_uint_at::w#2
  [17] (byte*) print_uchar_at::at#1 ← (byte*) print_uint_at::at#2 + (byte) 2
  [18] call print_uchar_at 
  to:print_uint_at::@return
print_uint_at::@return: scope:[print_uint_at]  from print_uint_at::@1
  [19] return 
  to:@return

(void()) print_uchar_at((byte) print_uchar_at::b , (byte*) print_uchar_at::at)
print_uchar_at: scope:[print_uchar_at]  from print_uint_at print_uint_at::@1
  [20] (byte*) print_uchar_at::at#2 ← phi( print_uint_at/(byte*) print_uchar_at::at#0 print_uint_at::@1/(byte*) print_uchar_at::at#1 )
  [20] (byte) print_uchar_at::b#2 ← phi( print_uint_at/(byte) print_uchar_at::b#0 print_uint_at::@1/(byte) print_uchar_at::b#1 )
  [21] (byte~) print_uchar_at::$0 ← (byte) print_uchar_at::b#2 >> (byte) 4
  [22] (byte) print_char_at::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar_at::$0)
  [23] (byte*) print_char_at::at#0 ← (byte*) print_uchar_at::at#2
  [24] call print_char_at 
  to:print_uchar_at::@1
print_uchar_at::@1: scope:[print_uchar_at]  from print_uchar_at
  [25] (byte~) print_uchar_at::$2 ← (byte) print_uchar_at::b#2 & (byte) $f
  [26] (byte*) print_char_at::at#1 ← (byte*) print_uchar_at::at#2 + (byte) 1
  [27] (byte) print_char_at::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar_at::$2)
  [28] call print_char_at 
  to:print_uchar_at::@return
print_uchar_at::@return: scope:[print_uchar_at]  from print_uchar_at::@1
  [29] return 
  to:@return

(void()) print_char_at((byte) print_char_at::ch , (byte*) print_char_at::at)
print_char_at: scope:[print_char_at]  from print_uchar_at print_uchar_at::@1
  [30] (byte*) print_char_at::at#2 ← phi( print_uchar_at/(byte*) print_char_at::at#0 print_uchar_at::@1/(byte*) print_char_at::at#1 )
  [30] (byte) print_char_at::ch#2 ← phi( print_uchar_at/(byte) print_char_at::ch#0 print_uchar_at::@1/(byte) print_char_at::ch#1 )
  [31] *((byte*) print_char_at::at#2) ← (byte) print_char_at::ch#2
  to:print_char_at::@return
print_char_at::@return: scope:[print_char_at]  from print_char_at
  [32] return 
  to:@return

(dword()) clock()
clock: scope:[clock]  from main::@1
  [33] (dword) clock::return#0 ← (dword) $ffffffff - *((const nomodify dword*) CIA2_TIMER_AB)
  to:clock::@return
clock::@return: scope:[clock]  from clock
  [34] return 
  to:@return

(void()) clock_start()
clock_start: scope:[clock_start]  from main
  [35] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (byte) 0
  [36] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [37] *((const nomodify dword*) CIA2_TIMER_AB) ← (dword) $ffffffff
  [38] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START|(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [39] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START
  to:clock_start::@return
clock_start::@return: scope:[clock_start]  from clock_start
  [40] return 
  to:@return
