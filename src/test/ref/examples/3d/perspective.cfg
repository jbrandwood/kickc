
(void()) main()
main: scope:[main]  from
  asm { sei  }
  [1] call mulf_init 
  to:main::@1
main::@1: scope:[main]  from main
  [2] *((const word*) psp1) ← (word)(const byte*) mulf_sqr1
  [3] *((const word*) psp2) ← (word)(const byte*) mulf_sqr2
  [4] call print_cls 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [5] phi()
  [6] call do_perspective 
  to:main::@return
main::@return: scope:[main]  from main::@2
  [7] return 
  to:@return

(void()) mulf_init()
mulf_init: scope:[mulf_init]  from main
  [8] phi()
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@1
  [9] (signed word) mulf_init::add#2 ← phi( mulf_init/(signed word) 1 mulf_init::@1/(signed word) mulf_init::add#1 )
  [9] (byte) mulf_init::i#2 ← phi( mulf_init/(byte) 0 mulf_init::@1/(byte) mulf_init::i#1 )
  [9] (signed word) mulf_init::sqr#2 ← phi( mulf_init/(signed word) 0 mulf_init::@1/(signed word) mulf_init::sqr#1 )
  [10] (byte) mulf_init::val#0 ← > (signed word) mulf_init::sqr#2
  [11] *((const byte*) mulf_sqr1 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0
  [12] *((const byte*) mulf_sqr1+(word) $100 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0
  [13] (byte~) mulf_init::$2 ← - (byte) mulf_init::i#2
  [14] *((const byte*) mulf_sqr1 + (byte~) mulf_init::$2) ← (byte) mulf_init::val#0
  [15] *((const byte*) mulf_sqr1+(word) $100 + (byte~) mulf_init::$2) ← (byte) mulf_init::val#0
  [16] *((const byte*) mulf_sqr2+(byte) 1 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0
  [17] *((const byte*) mulf_sqr2+(word) $100+(byte) 1 + (byte) mulf_init::i#2) ← (byte) mulf_init::val#0
  [18] (byte~) mulf_init::$6 ← (byte) 1 - (byte) mulf_init::i#2
  [19] *((const byte*) mulf_sqr2 + (byte~) mulf_init::$6) ← (byte) mulf_init::val#0
  [20] *((const byte*) mulf_sqr2+(word) $100 + (byte~) mulf_init::$6) ← (byte) mulf_init::val#0
  [21] (signed word) mulf_init::sqr#1 ← (signed word) mulf_init::sqr#2 + (signed word) mulf_init::add#2
  [22] (signed word) mulf_init::add#1 ← (signed word) mulf_init::add#2 + (signed byte) 2
  [23] (byte) mulf_init::i#1 ← ++ (byte) mulf_init::i#2
  [24] if((byte) mulf_init::i#1!=(byte) $81) goto mulf_init::@1
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@1
  [25] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main::@1
  [26] phi()
  [27] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [28] return 
  to:@return

(void()) do_perspective((signed byte) do_perspective::x , (signed byte) do_perspective::y , (signed byte) do_perspective::z)
do_perspective: scope:[do_perspective]  from main::@2
  [29] phi()
  [30] call print_str 
  to:do_perspective::@1
do_perspective::@1: scope:[do_perspective]  from do_perspective
  [31] phi()
  [32] call print_schar 
  to:do_perspective::@2
do_perspective::@2: scope:[do_perspective]  from do_perspective::@1
  [33] phi()
  [34] call print_str 
  to:do_perspective::@3
do_perspective::@3: scope:[do_perspective]  from do_perspective::@2
  [35] phi()
  [36] call print_schar 
  to:do_perspective::@4
do_perspective::@4: scope:[do_perspective]  from do_perspective::@3
  [37] phi()
  [38] call print_str 
  to:do_perspective::@5
do_perspective::@5: scope:[do_perspective]  from do_perspective::@4
  [39] phi()
  [40] call print_schar 
  to:do_perspective::@6
do_perspective::@6: scope:[do_perspective]  from do_perspective::@5
  [41] phi()
  [42] call print_str 
  to:do_perspective::@7
do_perspective::@7: scope:[do_perspective]  from do_perspective::@6
  [43] phi()
  [44] call perspective 
  to:do_perspective::@8
do_perspective::@8: scope:[do_perspective]  from do_perspective::@7
  [45] (byte) print_uchar::b#6 ← (byte)*((const signed byte*) xr)
  [46] call print_uchar 
  to:do_perspective::@9
do_perspective::@9: scope:[do_perspective]  from do_perspective::@8
  [47] phi()
  [48] call print_str 
  to:do_perspective::@10
do_perspective::@10: scope:[do_perspective]  from do_perspective::@9
  [49] (byte) print_uchar::b#5 ← (byte)*((const signed byte*) yr)
  [50] call print_uchar 
  to:do_perspective::@11
do_perspective::@11: scope:[do_perspective]  from do_perspective::@10
  [51] phi()
  [52] call print_str 
  to:do_perspective::@12
do_perspective::@12: scope:[do_perspective]  from do_perspective::@11
  [53] phi()
  [54] call print_ln 
  to:do_perspective::@return
do_perspective::@return: scope:[do_perspective]  from do_perspective::@12
  [55] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [56] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [57] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [58] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [59] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [60] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [61] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from do_perspective do_perspective::@11 do_perspective::@2 do_perspective::@4 do_perspective::@6 do_perspective::@9
  [62] (byte*) print_char_cursor#77 ← phi( do_perspective/(const byte*) print_screen#0 do_perspective::@11/(byte*) print_char_cursor#11 do_perspective::@2/(byte*) print_char_cursor#11 do_perspective::@4/(byte*) print_char_cursor#11 do_perspective::@6/(byte*) print_char_cursor#11 do_perspective::@9/(byte*) print_char_cursor#11 )
  [62] (byte*) print_str::str#10 ← phi( do_perspective/(const byte*) do_perspective::str do_perspective::@11/(const byte*) do_perspective::str5 do_perspective::@2/(const byte*) do_perspective::str1 do_perspective::@4/(const byte*) do_perspective::str1 do_perspective::@6/(const byte*) do_perspective::str3 do_perspective::@9/(const byte*) do_perspective::str1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [63] (byte*) print_char_cursor#1 ← phi( print_str/(byte*) print_char_cursor#77 print_str::@3/(byte*) print_char_cursor#11 )
  [63] (byte*) print_str::str#7 ← phi( print_str/(byte*) print_str::str#10 print_str::@3/(byte*) print_str::str#0 )
  [64] if((byte) 0!=*((byte*) print_str::str#7)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [65] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [66] (byte) print_char::ch#0 ← *((byte*) print_str::str#7)
  [67] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [68] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#7
  to:print_str::@1

(void()) print_schar((signed byte) print_schar::b)
print_schar: scope:[print_schar]  from do_perspective::@1 do_perspective::@3 do_perspective::@5
  [69] (signed byte) print_schar::b#4 ← phi( do_perspective::@1/(const signed byte) do_perspective::x#0 do_perspective::@3/(const signed byte) do_perspective::y#0 do_perspective::@5/(const signed byte) do_perspective::z#0 )
  [70] if((signed byte) print_schar::b#4<(signed byte) 0) goto print_schar::@1
  to:print_schar::@3
print_schar::@3: scope:[print_schar]  from print_schar
  [71] phi()
  [72] call print_char 
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@3 print_schar::@4
  [73] (signed byte) print_schar::b#6 ← phi( print_schar::@4/(signed byte) print_schar::b#0 print_schar::@3/(signed byte) print_schar::b#4 )
  [74] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#6
  [75] call print_uchar 
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@2
  [76] return 
  to:@return
print_schar::@1: scope:[print_schar]  from print_schar
  [77] phi()
  [78] call print_char 
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  [79] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#4
  to:print_schar::@2

(void()) perspective((signed byte) perspective::x , (signed byte) perspective::y , (signed byte) perspective::z)
perspective: scope:[perspective]  from do_perspective::@7
  [80] *((const signed byte*) xr) ← (const signed byte) do_perspective::x#0
  [81] *((const signed byte*) yr) ← (const signed byte) do_perspective::y#0
  [82] *((const signed byte*) zr) ← (const signed byte) do_perspective::z#0
  asm { ldazr staPP+1 PP: ldaPERSP_Z stapsp1 eor#$ff stapsp2 clc ldyyr lda(psp1),y sbc(psp2),y adc#$80 stayr clc ldyxr lda(psp1),y sbc(psp2),y adc#$80 staxr  }
  to:perspective::@return
perspective::@return: scope:[perspective]  from perspective
  [84] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from do_perspective::@10 do_perspective::@8 print_schar::@2
  [85] (byte*) print_char_cursor#72 ← phi( do_perspective::@10/(byte*) print_char_cursor#1 do_perspective::@8/(byte*) print_char_cursor#1 print_schar::@2/(byte*) print_char_cursor#11 )
  [85] (byte) print_uchar::b#3 ← phi( do_perspective::@10/(byte) print_uchar::b#5 do_perspective::@8/(byte) print_uchar::b#6 print_schar::@2/(byte) print_uchar::b#0 )
  [86] (byte~) print_uchar::$0 ← (byte) print_uchar::b#3 >> (byte) 4
  [87] (byte) print_char::ch#3 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [88] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [89] (byte~) print_uchar::$2 ← (byte) print_uchar::b#3 & (byte) $f
  [90] (byte) print_char::ch#4 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [91] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [92] return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from do_perspective::@12
  [93] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [94] (byte*) print_line_cursor#12 ← phi( print_ln/(const byte*) print_screen#0 print_ln::@1/(byte*) print_line_cursor#0 )
  [95] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#12 + (byte) $28
  [96] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#1) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [97] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_str::@2 print_uchar print_uchar::@1
  [98] (byte*) print_char_cursor#45 ← phi( print_schar::@1/(byte*) print_char_cursor#1 print_schar::@3/(byte*) print_char_cursor#1 print_str::@2/(byte*) print_char_cursor#1 print_uchar/(byte*) print_char_cursor#72 print_uchar::@1/(byte*) print_char_cursor#11 )
  [98] (byte) print_char::ch#5 ← phi( print_schar::@1/(byte) '-' print_schar::@3/(byte) ' ' print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#3 print_uchar::@1/(byte) print_char::ch#4 )
  [99] *((byte*) print_char_cursor#45) ← (byte) print_char::ch#5
  [100] (byte*) print_char_cursor#11 ← ++ (byte*) print_char_cursor#45
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [101] return 
  to:@return
