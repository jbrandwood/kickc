(label) @13
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = ((byte*))(word) 53281
(byte[512]) asm_mul_sqr1_hi
(const byte[512]) asm_mul_sqr1_hi#0 asm_mul_sqr1_hi = { fill( 512, 0) }
(byte[512]) asm_mul_sqr1_lo
(const byte[512]) asm_mul_sqr1_lo#0 asm_mul_sqr1_lo = { fill( 512, 0) }
(byte[512]) asm_mul_sqr2_hi
(const byte[512]) asm_mul_sqr2_hi#0 asm_mul_sqr2_hi = { fill( 512, 0) }
(byte[512]) asm_mul_sqr2_lo
(const byte[512]) asm_mul_sqr2_lo#0 asm_mul_sqr2_lo = { fill( 512, 0) }
(byte*) char_cursor
(byte*) char_cursor#1 char_cursor zp ZP_WORD:8 11.0
(byte*~) char_cursor#100 char_cursor zp ZP_WORD:8 4.0
(byte*) char_cursor#11 char_cursor zp ZP_WORD:8 0.823529411764706
(byte*) char_cursor#2 char_cursor zp ZP_WORD:8 2.1818181818181817
(byte*) char_cursor#20 char_cursor zp ZP_WORD:8 0.3333333333333333
(byte*) char_cursor#27 char_cursor zp ZP_WORD:8 40.0
(byte*) char_cursor#41 char_cursor zp ZP_WORD:8 4.0
(byte*) char_cursor#64 char_cursor zp ZP_WORD:8 2.0
(byte*) char_cursor#71 char_cursor zp ZP_WORD:8 10.0
(byte*~) char_cursor#89 char_cursor zp ZP_WORD:8 4.0
(void()) init_multiply()
(byte~) init_multiply::$2 reg byte a 22.0
(byte~) init_multiply::$5 reg byte a 22.0
(byte~) init_multiply::$6 reg byte a 22.0
(label) init_multiply::@1
(label) init_multiply::@12
(label) init_multiply::@2
(label) init_multiply::@3
(label) init_multiply::@4
(label) init_multiply::@5
(label) init_multiply::@8
(label) init_multiply::@return
(byte) init_multiply::c
(byte) init_multiply::c#1 reg byte x 2.357142857142857
(byte) init_multiply::c#2 reg byte x 22.0
(byte) init_multiply::dir
(byte) init_multiply::dir#2 dir zp ZP_BYTE:2 4.714285714285714
(byte) init_multiply::dir#3 dir zp ZP_BYTE:2 7.333333333333333
(word) init_multiply::sqr
(word) init_multiply::sqr#1 sqr zp ZP_WORD:8 7.333333333333333
(word) init_multiply::sqr#2 sqr zp ZP_WORD:8 22.0
(word) init_multiply::sqr#3 sqr zp ZP_WORD:8 9.166666666666666
(word) init_multiply::sqr#4 sqr zp ZP_WORD:8 6.6000000000000005
(byte*) init_multiply::sqr1_hi
(byte*) init_multiply::sqr1_hi#1 sqr1_hi zp ZP_WORD:6 5.5
(byte*) init_multiply::sqr1_hi#2 sqr1_hi zp ZP_WORD:6 3.0
(byte*) init_multiply::sqr1_lo
(byte*) init_multiply::sqr1_lo#1 sqr1_lo zp ZP_WORD:4 16.5
(byte*) init_multiply::sqr1_lo#2 sqr1_lo zp ZP_WORD:4 2.5384615384615383
(byte*) init_multiply::sqr2_hi
(byte*) init_multiply::sqr2_hi#1 sqr2_hi zp ZP_WORD:6 3.142857142857143
(byte*) init_multiply::sqr2_hi#2 sqr2_hi zp ZP_WORD:6 11.0
(byte*) init_multiply::sqr2_lo
(byte*) init_multiply::sqr2_lo#1 sqr2_lo zp ZP_WORD:4 16.5
(byte*) init_multiply::sqr2_lo#2 sqr2_lo zp ZP_WORD:4 4.125
(byte) init_multiply::x_2
(byte) init_multiply::x_2#1 x_2 zp ZP_BYTE:2 11.0
(byte) init_multiply::x_2#2 x_2 zp ZP_BYTE:2 4.888888888888889
(byte) init_multiply::x_2#3 x_2 zp ZP_BYTE:2 8.25
(byte) init_multiply::x_255
(byte) init_multiply::x_255#1 reg byte x 5.5
(byte) init_multiply::x_255#2 reg byte x 11.0
(void()) init_multiply_asm()
(label) init_multiply_asm::@return
(byte*) init_multiply_asm::mem
(const byte*) init_multiply_asm::mem#0 mem = ((byte*))(byte/word/signed word) 255
(byte*) line_cursor
(byte*) line_cursor#1 line_cursor zp ZP_WORD:4 5.857142857142857
(byte*) line_cursor#11 line_cursor zp ZP_WORD:4 24.0
(byte*) line_cursor#17 line_cursor zp ZP_WORD:4 0.18181818181818182
(byte*) line_cursor#19 line_cursor zp ZP_WORD:4 40.0
(byte*) line_cursor#22 line_cursor zp ZP_WORD:4 4.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(byte[512]) mul_sqr1_hi
(const byte[512]) mul_sqr1_hi#0 mul_sqr1_hi = { fill( 512, 0) }
(byte[512]) mul_sqr1_lo
(const byte[512]) mul_sqr1_lo#0 mul_sqr1_lo = { fill( 512, 0) }
(byte[512]) mul_sqr2_hi
(const byte[512]) mul_sqr2_hi#0 mul_sqr2_hi = { fill( 512, 0) }
(byte[512]) mul_sqr2_lo
(const byte[512]) mul_sqr2_lo#0 mul_sqr2_lo = { fill( 512, 0) }
(word()) multiply((byte) multiply::a , (byte) multiply::b)
(label) multiply::@return
(byte) multiply::a
(byte) multiply::a#0 reg byte x 51.5
(byte) multiply::b
(byte) multiply::b#0 reg byte a 51.5
(byte*) multiply::memA
(const byte*) multiply::memA#0 memA = ((byte*))(byte/word/signed word) 254
(byte*) multiply::memB
(const byte*) multiply::memB#0 memB = ((byte*))(byte/word/signed word) 255
(word) multiply::return
(word) multiply::return#0 return zp ZP_WORD:6 34.33333333333333
(word) multiply::return#2 return zp ZP_WORD:6 202.0
(void()) multiply_results_compare()
(label) multiply_results_compare::@1
(label) multiply_results_compare::@10
(label) multiply_results_compare::@11
(label) multiply_results_compare::@12
(label) multiply_results_compare::@14
(label) multiply_results_compare::@2
(label) multiply_results_compare::@3
(label) multiply_results_compare::@4
(label) multiply_results_compare::@6
(label) multiply_results_compare::@7
(label) multiply_results_compare::@8
(label) multiply_results_compare::@9
(label) multiply_results_compare::@return
(byte) multiply_results_compare::a
(byte) multiply_results_compare::a#1 a zp ZP_BYTE:2 16.5
(byte) multiply_results_compare::a#5 a zp ZP_BYTE:2 14.933333333333332
(byte) multiply_results_compare::b
(byte) multiply_results_compare::b#1 b zp ZP_BYTE:3 151.5
(byte) multiply_results_compare::b#2 b zp ZP_BYTE:3 33.666666666666664
(word) multiply_results_compare::ma
(word) multiply_results_compare::ma#0 ma zp ZP_WORD:12 25.5
(word) multiply_results_compare::ms
(word) multiply_results_compare::ms#0 ms zp ZP_WORD:10 22.666666666666664
(const string) multiply_results_compare::str str = (string) "multiply mismatch slow:@"
(const string) multiply_results_compare::str1 str1 = (string) " / fast asm:"
(const string) multiply_results_compare::str2 str2 = (string) "multiply results match!@"
(void()) multiply_tables_compare()
(label) multiply_tables_compare::@1
(label) multiply_tables_compare::@10
(label) multiply_tables_compare::@2
(label) multiply_tables_compare::@3
(label) multiply_tables_compare::@5
(label) multiply_tables_compare::@6
(label) multiply_tables_compare::@7
(label) multiply_tables_compare::@8
(label) multiply_tables_compare::@return
(byte*) multiply_tables_compare::asm_sqr
(byte*) multiply_tables_compare::asm_sqr#1 asm_sqr zp ZP_WORD:10 7.333333333333333
(byte*) multiply_tables_compare::asm_sqr#2 asm_sqr zp ZP_WORD:10 8.75
(byte*) multiply_tables_compare::kc_sqr
(byte*) multiply_tables_compare::kc_sqr#1 kc_sqr zp ZP_WORD:4 16.5
(byte*) multiply_tables_compare::kc_sqr#2 kc_sqr zp ZP_WORD:4 3.8888888888888893
(const string) multiply_tables_compare::str str = (string) "multiply table mismatch at @"
(const string) multiply_tables_compare::str1 str1 = (string) " / @"
(const string) multiply_tables_compare::str2 str2 = (string) "multiply tables match!@"
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte y 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 reg byte x 4.0
(byte) print_byte::b#1 reg byte x 4.0
(byte) print_byte::b#2 reg byte x 2.0
(byte[]) print_byte::hextab
(const byte[]) print_byte::hextab#0 hextab = { (byte) '0', (byte) '1', (byte) '2', (byte) '3', (byte) '4', (byte) '5', (byte) '6', (byte) '7', (byte) '8', (byte) '9', (byte) 'a', (byte) 'b', (byte) 'c', (byte) 'd', (byte) 'e', (byte) 'f' }
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 4.0
(byte) print_char::ch#1 reg byte a 4.0
(byte) print_char::ch#2 reg byte a 6.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:4 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:4 16.5
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:6 22.0
(byte*) print_str::str#7 str zp ZP_WORD:6 11.5
(byte*) print_str::str#9 str zp ZP_WORD:6 2.0
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0 w zp ZP_WORD:6 4.0
(word) print_word::w#1 w zp ZP_WORD:6 4.0
(word) print_word::w#2 w zp ZP_WORD:6 4.0
(word) print_word::w#3 w zp ZP_WORD:6 4.0
(word) print_word::w#4 w zp ZP_WORD:6 3.9999999999999996
(word()) slow_multiply((byte) slow_multiply::a , (byte) slow_multiply::b)
(label) slow_multiply::@1
(label) slow_multiply::@2
(label) slow_multiply::@return
(byte) slow_multiply::a
(byte) slow_multiply::a#0 a zp ZP_BYTE:2 157.71428571428572
(byte) slow_multiply::b
(byte) slow_multiply::b#0 reg byte x 183.66666666666669
(byte) slow_multiply::i
(byte) slow_multiply::i#1 reg byte y 1501.5
(byte) slow_multiply::i#2 reg byte y 1001.0
(word) slow_multiply::m
(word) slow_multiply::m#1 m zp ZP_WORD:6 1001.0
(word) slow_multiply::m#3 m zp ZP_WORD:6 2002.0
(word) slow_multiply::return
(word) slow_multiply::return#0 return zp ZP_WORD:6 367.33333333333337
(word) slow_multiply::return#2 return zp ZP_WORD:6 202.0

zp ZP_BYTE:2 [ multiply_results_compare::a#5 multiply_results_compare::a#1 init_multiply::x_2#3 init_multiply::x_2#2 init_multiply::x_2#1 init_multiply::dir#2 init_multiply::dir#3 slow_multiply::a#0 ]
zp ZP_BYTE:3 [ multiply_results_compare::b#2 multiply_results_compare::b#1 ]
zp ZP_WORD:4 [ line_cursor#11 line_cursor#22 line_cursor#19 line_cursor#17 line_cursor#1 multiply_tables_compare::kc_sqr#2 multiply_tables_compare::kc_sqr#1 init_multiply::sqr1_lo#2 init_multiply::sqr1_lo#1 init_multiply::sqr2_lo#2 init_multiply::sqr2_lo#1 print_cls::sc#2 print_cls::sc#1 ]
zp ZP_WORD:6 [ print_str::str#7 print_str::str#9 print_str::str#0 print_word::w#4 print_word::w#2 print_word::w#3 print_word::w#0 print_word::w#1 slow_multiply::return#0 slow_multiply::m#3 slow_multiply::m#1 init_multiply::sqr1_hi#2 init_multiply::sqr1_hi#1 init_multiply::sqr2_hi#2 init_multiply::sqr2_hi#1 slow_multiply::return#2 multiply::return#2 multiply::return#0 ]
reg byte x [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
zp ZP_WORD:8 [ char_cursor#41 char_cursor#64 char_cursor#2 char_cursor#71 char_cursor#27 char_cursor#11 char_cursor#89 char_cursor#20 char_cursor#1 char_cursor#100 init_multiply::sqr#3 init_multiply::sqr#4 init_multiply::sqr#1 init_multiply::sqr#2 ]
reg byte y [ slow_multiply::i#2 slow_multiply::i#1 ]
zp ZP_WORD:10 [ multiply_tables_compare::asm_sqr#2 multiply_tables_compare::asm_sqr#1 multiply_results_compare::ms#0 ]
reg byte x [ init_multiply::c#2 init_multiply::c#1 ]
reg byte x [ init_multiply::x_255#2 init_multiply::x_255#1 ]
reg byte x [ slow_multiply::b#0 ]
reg byte x [ multiply::a#0 ]
reg byte a [ multiply::b#0 ]
zp ZP_WORD:12 [ multiply_results_compare::ma#0 ]
reg byte y [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]
reg byte a [ init_multiply::$2 ]
reg byte a [ init_multiply::$5 ]
reg byte a [ init_multiply::$6 ]
