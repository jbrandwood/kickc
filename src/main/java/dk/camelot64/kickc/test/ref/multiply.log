// Implementation of the Seriously Fast Multiplication
// See http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
// Utilizes the fact that a*b = ((a+b)/2)^2 - ((a-b)/2)^2

byte* BGCOL = $d021;

void main() {
    init_mul_tables();
    init_mul_tables_asm();
    mul_tables_compare();
}

// mul_sqr tables will contain f(x)=int(x*x/4).
byte[512] mul_sqr_lo;
byte[512] mul_sqr_hi;

// Initialize the mul_sqr multiplication tables with f(x)=int(x*x/4)
void init_mul_tables() {
  // If f(x) = x*x/4 then f(x+1) = f(x) + x/2 + 1/4
  word sqr = 0; // sqr = (x*x)/4
  byte x_2 = 0; // x/2
  byte c = 0;   // Counter used for determining x%2==0
  byte* sqr_hi = mul_sqr_hi+1;
  for(byte* sqr_lo = mul_sqr_lo+1; sqr_lo!=mul_sqr_lo+512; sqr_lo++) {
    if((++c&1)==0) {
        x_2++; // increase i/2 on even numbers
        sqr++; // sqr++ on even numbers because 1 = 2*1/4 (from the two previous numbers) + 1/2 (half of the previous uneven number)
    }
    *sqr_lo = <sqr;
    *sqr_hi++ = >sqr;
    sqr = sqr + x_2; // sqr = sqr + i/2 (when uneven the 1/2 is not added here - see above)
  }

}

// ASM based multiplication tables
byte[512] asm_mul_sqr_lo;
byte[512] asm_mul_sqr_hi;
// Initialize the multiplication tables using ASM code from
// http://codebase64.org/doku.php?id=base:seriously_fast_multiplication
void init_mul_tables_asm() {
    asm{
        ldx #$00
        txa
        .byte $c9
    lb1:
        tya
        adc #$00
    ml1:
        sta asm_mul_sqr_hi,x
        tay
        cmp #$40
        txa
        ror
    ml9:
        adc #$00
        sta ml9+1
        inx
    ml0:
        sta asm_mul_sqr_lo,x
        bne lb1
        inc ml0+2
        inc ml1+2
        clc
        iny
        bne lb1
    }
}

// Compare the ASM-based mul tables with the KC-based mul tables
// Red screen on failure - green on success
void mul_tables_compare() {
     *BGCOL = 5;
    for( byte i: 0..255) {
        if(mul_sqr_lo[i] != asm_mul_sqr_lo[i])
            *BGCOL = 2;
        if((mul_sqr_hi+$100)[i] != (asm_mul_sqr_hi+$100)[i])
            *BGCOL = 2;
        if(mul_sqr_lo[i] != asm_mul_sqr_lo[i])
            *BGCOL = 2;
        if((mul_sqr_hi+$100)[i] != (asm_mul_sqr_hi+$100)[i])
            *BGCOL = 2;
    }
}
Adding pre/post-modifier (byte) init_mul_tables::c ← ++ (byte) init_mul_tables::c
Adding pre/post-modifier (byte) init_mul_tables::x_2 ← ++ (byte) init_mul_tables::x_2
Adding pre/post-modifier (word) init_mul_tables::sqr ← ++ (word) init_mul_tables::sqr
Adding pre/post-modifier (byte*) init_mul_tables::sqr_hi ← ++ (byte*) init_mul_tables::sqr_hi
Adding pre/post-modifier (byte*) init_mul_tables::sqr_lo ← ++ (byte*) init_mul_tables::sqr_lo
PROGRAM
  (byte*) BGCOL ← (word) 53281
proc (void()) main()
  (void~) main::$0 ← call init_mul_tables 
  (void~) main::$1 ← call init_mul_tables_asm 
  (void~) main::$2 ← call mul_tables_compare 
main::@return:
  return 
endproc // main()
  (byte[512]) mul_sqr_lo ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi ← { fill( 512, 0) }
proc (void()) init_mul_tables()
  (word) init_mul_tables::sqr ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::x_2 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::c ← (byte/signed byte/word/signed word) 0
  (byte*~) init_mul_tables::$0 ← (byte[512]) mul_sqr_hi + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_hi ← (byte*~) init_mul_tables::$0
  (byte*~) init_mul_tables::$1 ← (byte[512]) mul_sqr_lo + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_lo ← (byte*~) init_mul_tables::$1
init_mul_tables::@1:
  (byte) init_mul_tables::c ← ++ (byte) init_mul_tables::c
  (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$3 ← (byte~) init_mul_tables::$2 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$4 ← ! (boolean~) init_mul_tables::$3
  if((boolean~) init_mul_tables::$4) goto init_mul_tables::@2
  (byte) init_mul_tables::x_2 ← ++ (byte) init_mul_tables::x_2
  (word) init_mul_tables::sqr ← ++ (word) init_mul_tables::sqr
init_mul_tables::@2:
  (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr
  *((byte*) init_mul_tables::sqr_lo) ← (byte~) init_mul_tables::$5
  (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr
  *((byte*) init_mul_tables::sqr_hi) ← (byte~) init_mul_tables::$6
  (byte*) init_mul_tables::sqr_hi ← ++ (byte*) init_mul_tables::sqr_hi
  (word~) init_mul_tables::$7 ← (word) init_mul_tables::sqr + (byte) init_mul_tables::x_2
  (word) init_mul_tables::sqr ← (word~) init_mul_tables::$7
  (byte*) init_mul_tables::sqr_lo ← ++ (byte*) init_mul_tables::sqr_lo
  (byte*~) init_mul_tables::$8 ← (byte[512]) mul_sqr_lo + (word/signed word) 512
  (boolean~) init_mul_tables::$9 ← (byte*) init_mul_tables::sqr_lo != (byte*~) init_mul_tables::$8
  if((boolean~) init_mul_tables::$9) goto init_mul_tables::@1
init_mul_tables::@return:
  return 
endproc // init_mul_tables()
  (byte[512]) asm_mul_sqr_lo ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi ← { fill( 512, 0) }
proc (void()) init_mul_tables_asm()
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
init_mul_tables_asm::@return:
  return 
endproc // init_mul_tables_asm()
proc (void()) mul_tables_compare()
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i ← (byte/signed byte/word/signed word) 0
mul_tables_compare::@1:
  (boolean~) mul_tables_compare::$0 ← *((byte[512]) mul_sqr_lo + (byte) mul_tables_compare::i) != *((byte[512]) asm_mul_sqr_lo + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$1 ← ! (boolean~) mul_tables_compare::$0
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
mul_tables_compare::@2:
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi + (word/signed word) 256
  (boolean~) mul_tables_compare::$4 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i) != *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$5 ← ! (boolean~) mul_tables_compare::$4
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
mul_tables_compare::@3:
  (boolean~) mul_tables_compare::$6 ← *((byte[512]) mul_sqr_lo + (byte) mul_tables_compare::i) != *((byte[512]) asm_mul_sqr_lo + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$7 ← ! (boolean~) mul_tables_compare::$6
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
mul_tables_compare::@4:
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi + (word/signed word) 256
  (boolean~) mul_tables_compare::$10 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i) != *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$11 ← ! (boolean~) mul_tables_compare::$10
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
mul_tables_compare::@5:
  (byte) mul_tables_compare::i ← ++ (byte) mul_tables_compare::i
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
mul_tables_compare::@return:
  return 
endproc // mul_tables_compare()
  call main 

SYMBOLS
(byte*) BGCOL
(byte[512]) asm_mul_sqr_hi
(byte[512]) asm_mul_sqr_lo
(void()) init_mul_tables()
(byte*~) init_mul_tables::$0
(byte*~) init_mul_tables::$1
(byte~) init_mul_tables::$2
(boolean~) init_mul_tables::$3
(boolean~) init_mul_tables::$4
(byte~) init_mul_tables::$5
(byte~) init_mul_tables::$6
(word~) init_mul_tables::$7
(byte*~) init_mul_tables::$8
(boolean~) init_mul_tables::$9
(label) init_mul_tables::@1
(label) init_mul_tables::@2
(label) init_mul_tables::@return
(byte) init_mul_tables::c
(word) init_mul_tables::sqr
(byte*) init_mul_tables::sqr_hi
(byte*) init_mul_tables::sqr_lo
(byte) init_mul_tables::x_2
(void()) init_mul_tables_asm()
(label) init_mul_tables_asm::@return
(void()) main()
(void~) main::$0
(void~) main::$1
(void~) main::$2
(label) main::@return
(byte[512]) mul_sqr_hi
(byte[512]) mul_sqr_lo
(void()) mul_tables_compare()
(boolean~) mul_tables_compare::$0
(boolean~) mul_tables_compare::$1
(boolean~) mul_tables_compare::$10
(boolean~) mul_tables_compare::$11
(boolean~) mul_tables_compare::$12
(byte*~) mul_tables_compare::$2
(byte*~) mul_tables_compare::$3
(boolean~) mul_tables_compare::$4
(boolean~) mul_tables_compare::$5
(boolean~) mul_tables_compare::$6
(boolean~) mul_tables_compare::$7
(byte*~) mul_tables_compare::$8
(byte*~) mul_tables_compare::$9
(label) mul_tables_compare::@1
(label) mul_tables_compare::@2
(label) mul_tables_compare::@3
(label) mul_tables_compare::@4
(label) mul_tables_compare::@5
(label) mul_tables_compare::@return
(byte) mul_tables_compare::i

Promoting word to byte* in BGCOL ← ((byte*)) 53281
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) BGCOL ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from
  (void~) main::$0 ← call init_mul_tables 
  (void~) main::$1 ← call init_mul_tables_asm 
  (void~) main::$2 ← call mul_tables_compare 
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[512]) mul_sqr_lo ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from
  (word) init_mul_tables::sqr ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::x_2 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::c ← (byte/signed byte/word/signed word) 0
  (byte*~) init_mul_tables::$0 ← (byte[512]) mul_sqr_hi + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_hi ← (byte*~) init_mul_tables::$0
  (byte*~) init_mul_tables::$1 ← (byte[512]) mul_sqr_lo + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_lo ← (byte*~) init_mul_tables::$1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (byte) init_mul_tables::c ← ++ (byte) init_mul_tables::c
  (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$3 ← (byte~) init_mul_tables::$2 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$4 ← ! (boolean~) init_mul_tables::$3
  if((boolean~) init_mul_tables::$4) goto init_mul_tables::@2
  to:init_mul_tables::@3
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@3
  (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr
  *((byte*) init_mul_tables::sqr_lo) ← (byte~) init_mul_tables::$5
  (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr
  *((byte*) init_mul_tables::sqr_hi) ← (byte~) init_mul_tables::$6
  (byte*) init_mul_tables::sqr_hi ← ++ (byte*) init_mul_tables::sqr_hi
  (word~) init_mul_tables::$7 ← (word) init_mul_tables::sqr + (byte) init_mul_tables::x_2
  (word) init_mul_tables::sqr ← (word~) init_mul_tables::$7
  (byte*) init_mul_tables::sqr_lo ← ++ (byte*) init_mul_tables::sqr_lo
  (byte*~) init_mul_tables::$8 ← (byte[512]) mul_sqr_lo + (word/signed word) 512
  (boolean~) init_mul_tables::$9 ← (byte*) init_mul_tables::sqr_lo != (byte*~) init_mul_tables::$8
  if((boolean~) init_mul_tables::$9) goto init_mul_tables::@1
  to:init_mul_tables::@4
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::x_2 ← ++ (byte) init_mul_tables::x_2
  (word) init_mul_tables::sqr ← ++ (word) init_mul_tables::sqr
  to:init_mul_tables::@2
init_mul_tables::@4: scope:[init_mul_tables]  from init_mul_tables::@2
  to:init_mul_tables::@return
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@4
  return 
  to:@return
@2: scope:[]  from @1
  (byte[512]) asm_mul_sqr_lo ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi ← { fill( 512, 0) }
  to:@3
init_mul_tables_asm: scope:[init_mul_tables_asm]  from
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
@3: scope:[]  from @2
  to:@4
mul_tables_compare: scope:[mul_tables_compare]  from
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (boolean~) mul_tables_compare::$0 ← *((byte[512]) mul_sqr_lo + (byte) mul_tables_compare::i) != *((byte[512]) asm_mul_sqr_lo + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$1 ← ! (boolean~) mul_tables_compare::$0
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi + (word/signed word) 256
  (boolean~) mul_tables_compare::$4 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i) != *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$5 ← ! (boolean~) mul_tables_compare::$4
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (boolean~) mul_tables_compare::$6 ← *((byte[512]) mul_sqr_lo + (byte) mul_tables_compare::i) != *((byte[512]) asm_mul_sqr_lo + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$7 ← ! (boolean~) mul_tables_compare::$6
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi + (word/signed word) 256
  (boolean~) mul_tables_compare::$10 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i) != *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$11 ← ! (boolean~) mul_tables_compare::$10
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i ← ++ (byte) mul_tables_compare::i
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@10
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@10: scope:[mul_tables_compare]  from mul_tables_compare::@5
  to:mul_tables_compare::@return
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@10
  return 
  to:@return
@4: scope:[]  from @3
  call main 
  to:@end
@end: scope:[]  from @4

Eliminating unused variable - keeping the call (void~) main::$0
Eliminating unused variable - keeping the call (void~) main::$1
Eliminating unused variable - keeping the call (void~) main::$2
Removing empty block init_mul_tables::@4
Removing empty block @3
Removing empty block mul_tables_compare::@10
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) BGCOL ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from
  call init_mul_tables 
  call init_mul_tables_asm 
  call mul_tables_compare 
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[512]) mul_sqr_lo ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from
  (word) init_mul_tables::sqr ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::x_2 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::c ← (byte/signed byte/word/signed word) 0
  (byte*~) init_mul_tables::$0 ← (byte[512]) mul_sqr_hi + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_hi ← (byte*~) init_mul_tables::$0
  (byte*~) init_mul_tables::$1 ← (byte[512]) mul_sqr_lo + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_lo ← (byte*~) init_mul_tables::$1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (byte) init_mul_tables::c ← ++ (byte) init_mul_tables::c
  (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$3 ← (byte~) init_mul_tables::$2 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$4 ← ! (boolean~) init_mul_tables::$3
  if((boolean~) init_mul_tables::$4) goto init_mul_tables::@2
  to:init_mul_tables::@3
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@3
  (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr
  *((byte*) init_mul_tables::sqr_lo) ← (byte~) init_mul_tables::$5
  (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr
  *((byte*) init_mul_tables::sqr_hi) ← (byte~) init_mul_tables::$6
  (byte*) init_mul_tables::sqr_hi ← ++ (byte*) init_mul_tables::sqr_hi
  (word~) init_mul_tables::$7 ← (word) init_mul_tables::sqr + (byte) init_mul_tables::x_2
  (word) init_mul_tables::sqr ← (word~) init_mul_tables::$7
  (byte*) init_mul_tables::sqr_lo ← ++ (byte*) init_mul_tables::sqr_lo
  (byte*~) init_mul_tables::$8 ← (byte[512]) mul_sqr_lo + (word/signed word) 512
  (boolean~) init_mul_tables::$9 ← (byte*) init_mul_tables::sqr_lo != (byte*~) init_mul_tables::$8
  if((boolean~) init_mul_tables::$9) goto init_mul_tables::@1
  to:init_mul_tables::@return
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::x_2 ← ++ (byte) init_mul_tables::x_2
  (word) init_mul_tables::sqr ← ++ (word) init_mul_tables::sqr
  to:init_mul_tables::@2
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@2
  return 
  to:@return
@2: scope:[]  from @1
  (byte[512]) asm_mul_sqr_lo ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (boolean~) mul_tables_compare::$0 ← *((byte[512]) mul_sqr_lo + (byte) mul_tables_compare::i) != *((byte[512]) asm_mul_sqr_lo + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$1 ← ! (boolean~) mul_tables_compare::$0
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi + (word/signed word) 256
  (boolean~) mul_tables_compare::$4 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i) != *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$5 ← ! (boolean~) mul_tables_compare::$4
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (boolean~) mul_tables_compare::$6 ← *((byte[512]) mul_sqr_lo + (byte) mul_tables_compare::i) != *((byte[512]) asm_mul_sqr_lo + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$7 ← ! (boolean~) mul_tables_compare::$6
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi + (word/signed word) 256
  (boolean~) mul_tables_compare::$10 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i) != *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$11 ← ! (boolean~) mul_tables_compare::$10
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i ← ++ (byte) mul_tables_compare::i
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  call main 
  to:@end
@end: scope:[]  from @4

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) BGCOL ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[512]) mul_sqr_lo ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::x_2 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::c ← (byte/signed byte/word/signed word) 0
  (byte*~) init_mul_tables::$0 ← (byte[512]) mul_sqr_hi + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_hi ← (byte*~) init_mul_tables::$0
  (byte*~) init_mul_tables::$1 ← (byte[512]) mul_sqr_lo + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_lo ← (byte*~) init_mul_tables::$1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (byte) init_mul_tables::c ← ++ (byte) init_mul_tables::c
  (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$3 ← (byte~) init_mul_tables::$2 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$4 ← ! (boolean~) init_mul_tables::$3
  if((boolean~) init_mul_tables::$4) goto init_mul_tables::@2
  to:init_mul_tables::@3
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@3
  (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr
  *((byte*) init_mul_tables::sqr_lo) ← (byte~) init_mul_tables::$5
  (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr
  *((byte*) init_mul_tables::sqr_hi) ← (byte~) init_mul_tables::$6
  (byte*) init_mul_tables::sqr_hi ← ++ (byte*) init_mul_tables::sqr_hi
  (word~) init_mul_tables::$7 ← (word) init_mul_tables::sqr + (byte) init_mul_tables::x_2
  (word) init_mul_tables::sqr ← (word~) init_mul_tables::$7
  (byte*) init_mul_tables::sqr_lo ← ++ (byte*) init_mul_tables::sqr_lo
  (byte*~) init_mul_tables::$8 ← (byte[512]) mul_sqr_lo + (word/signed word) 512
  (boolean~) init_mul_tables::$9 ← (byte*) init_mul_tables::sqr_lo != (byte*~) init_mul_tables::$8
  if((boolean~) init_mul_tables::$9) goto init_mul_tables::@1
  to:init_mul_tables::@return
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::x_2 ← ++ (byte) init_mul_tables::x_2
  (word) init_mul_tables::sqr ← ++ (word) init_mul_tables::sqr
  to:init_mul_tables::@2
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@2
  return 
  to:@return
@2: scope:[]  from @1
  (byte[512]) asm_mul_sqr_lo ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (boolean~) mul_tables_compare::$0 ← *((byte[512]) mul_sqr_lo + (byte) mul_tables_compare::i) != *((byte[512]) asm_mul_sqr_lo + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$1 ← ! (boolean~) mul_tables_compare::$0
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi + (word/signed word) 256
  (boolean~) mul_tables_compare::$4 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i) != *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$5 ← ! (boolean~) mul_tables_compare::$4
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (boolean~) mul_tables_compare::$6 ← *((byte[512]) mul_sqr_lo + (byte) mul_tables_compare::i) != *((byte[512]) asm_mul_sqr_lo + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$7 ← ! (boolean~) mul_tables_compare::$6
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi + (word/signed word) 256
  (boolean~) mul_tables_compare::$10 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i) != *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i)
  (boolean~) mul_tables_compare::$11 ← ! (boolean~) mul_tables_compare::$10
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i ← ++ (byte) mul_tables_compare::i
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((byte*) BGCOL) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  call main param-assignment
  to:@5
@5: scope:[]  from @4
  to:@end
@end: scope:[]  from @5

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) BGCOL#0 ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  (byte*) BGCOL#13 ← phi( @4/(byte*) BGCOL#14 )
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) BGCOL#11 ← phi( main/(byte*) BGCOL#13 )
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) BGCOL#6 ← phi( main::@1/(byte*) BGCOL#11 )
  call mul_tables_compare param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) BGCOL#16 ← phi( @begin/(byte*) BGCOL#0 )
  (byte[512]) mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::x_2#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::c#0 ← (byte/signed byte/word/signed word) 0
  (byte*~) init_mul_tables::$0 ← (byte[512]) mul_sqr_hi#0 + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_hi#0 ← (byte*~) init_mul_tables::$0
  (byte*~) init_mul_tables::$1 ← (byte[512]) mul_sqr_lo#0 + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_lo#0 ← (byte*~) init_mul_tables::$1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (byte) init_mul_tables::x_2#4 ← phi( init_mul_tables/(byte) init_mul_tables::x_2#0 init_mul_tables::@2/(byte) init_mul_tables::x_2#2 )
  (byte*) init_mul_tables::sqr_hi#3 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_hi#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_hi#1 )
  (byte*) init_mul_tables::sqr_lo#3 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_lo#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_lo#1 )
  (word) init_mul_tables::sqr#5 ← phi( init_mul_tables/(word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::c#2 ← phi( init_mul_tables/(byte) init_mul_tables::c#0 init_mul_tables::@2/(byte) init_mul_tables::c#3 )
  (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2
  (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$3 ← (byte~) init_mul_tables::$2 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$4 ← ! (boolean~) init_mul_tables::$3
  if((boolean~) init_mul_tables::$4) goto init_mul_tables::@2
  to:init_mul_tables::@3
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@3
  (byte) init_mul_tables::c#3 ← phi( init_mul_tables::@1/(byte) init_mul_tables::c#1 init_mul_tables::@3/(byte) init_mul_tables::c#4 )
  (byte) init_mul_tables::x_2#2 ← phi( init_mul_tables::@1/(byte) init_mul_tables::x_2#4 init_mul_tables::@3/(byte) init_mul_tables::x_2#1 )
  (byte*) init_mul_tables::sqr_hi#2 ← phi( init_mul_tables::@1/(byte*) init_mul_tables::sqr_hi#3 init_mul_tables::@3/(byte*) init_mul_tables::sqr_hi#4 )
  (byte*) init_mul_tables::sqr_lo#2 ← phi( init_mul_tables::@1/(byte*) init_mul_tables::sqr_lo#3 init_mul_tables::@3/(byte*) init_mul_tables::sqr_lo#4 )
  (word) init_mul_tables::sqr#3 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#5 init_mul_tables::@3/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5
  (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6
  (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2
  (word~) init_mul_tables::$7 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2
  (word) init_mul_tables::sqr#1 ← (word~) init_mul_tables::$7
  (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2
  (byte*~) init_mul_tables::$8 ← (byte[512]) mul_sqr_lo#0 + (word/signed word) 512
  (boolean~) init_mul_tables::$9 ← (byte*) init_mul_tables::sqr_lo#1 != (byte*~) init_mul_tables::$8
  if((boolean~) init_mul_tables::$9) goto init_mul_tables::@1
  to:init_mul_tables::@return
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::c#4 ← phi( init_mul_tables::@1/(byte) init_mul_tables::c#1 )
  (byte*) init_mul_tables::sqr_hi#4 ← phi( init_mul_tables::@1/(byte*) init_mul_tables::sqr_hi#3 )
  (byte*) init_mul_tables::sqr_lo#4 ← phi( init_mul_tables::@1/(byte*) init_mul_tables::sqr_lo#3 )
  (word) init_mul_tables::sqr#4 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#5 )
  (byte) init_mul_tables::x_2#3 ← phi( init_mul_tables::@1/(byte) init_mul_tables::x_2#4 )
  (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4
  to:init_mul_tables::@2
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@2
  return 
  to:@return
@2: scope:[]  from @1
  (byte*) BGCOL#15 ← phi( @1/(byte*) BGCOL#16 )
  (byte[512]) asm_mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  (byte*) BGCOL#1 ← phi( main::@2/(byte*) BGCOL#6 )
  *((byte*) BGCOL#1) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i#0 ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte*) BGCOL#7 ← phi( mul_tables_compare/(byte*) BGCOL#1 mul_tables_compare::@5/(byte*) BGCOL#12 )
  (byte) mul_tables_compare::i#2 ← phi( mul_tables_compare/(byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  (boolean~) mul_tables_compare::$0 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#2) != *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#2)
  (boolean~) mul_tables_compare::$1 ← ! (boolean~) mul_tables_compare::$0
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*) BGCOL#8 ← phi( mul_tables_compare::@1/(byte*) BGCOL#7 mul_tables_compare::@6/(byte*) BGCOL#2 )
  (byte) mul_tables_compare::i#3 ← phi( mul_tables_compare::@1/(byte) mul_tables_compare::i#2 mul_tables_compare::@6/(byte) mul_tables_compare::i#7 )
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$4 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#3) != *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#3)
  (boolean~) mul_tables_compare::$5 ← ! (boolean~) mul_tables_compare::$4
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  (byte) mul_tables_compare::i#7 ← phi( mul_tables_compare::@1/(byte) mul_tables_compare::i#2 )
  (byte*) BGCOL#2 ← phi( mul_tables_compare::@1/(byte*) BGCOL#7 )
  *((byte*) BGCOL#2) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (byte*) BGCOL#9 ← phi( mul_tables_compare::@2/(byte*) BGCOL#8 mul_tables_compare::@7/(byte*) BGCOL#3 )
  (byte) mul_tables_compare::i#4 ← phi( mul_tables_compare::@2/(byte) mul_tables_compare::i#3 mul_tables_compare::@7/(byte) mul_tables_compare::i#8 )
  (boolean~) mul_tables_compare::$6 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#4) != *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#4)
  (boolean~) mul_tables_compare::$7 ← ! (boolean~) mul_tables_compare::$6
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  (byte) mul_tables_compare::i#8 ← phi( mul_tables_compare::@2/(byte) mul_tables_compare::i#3 )
  (byte*) BGCOL#3 ← phi( mul_tables_compare::@2/(byte*) BGCOL#8 )
  *((byte*) BGCOL#3) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*) BGCOL#10 ← phi( mul_tables_compare::@3/(byte*) BGCOL#9 mul_tables_compare::@8/(byte*) BGCOL#4 )
  (byte) mul_tables_compare::i#5 ← phi( mul_tables_compare::@3/(byte) mul_tables_compare::i#4 mul_tables_compare::@8/(byte) mul_tables_compare::i#9 )
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$10 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#5) != *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#5)
  (boolean~) mul_tables_compare::$11 ← ! (boolean~) mul_tables_compare::$10
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  (byte) mul_tables_compare::i#9 ← phi( mul_tables_compare::@3/(byte) mul_tables_compare::i#4 )
  (byte*) BGCOL#4 ← phi( mul_tables_compare::@3/(byte*) BGCOL#9 )
  *((byte*) BGCOL#4) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte*) BGCOL#12 ← phi( mul_tables_compare::@4/(byte*) BGCOL#10 mul_tables_compare::@9/(byte*) BGCOL#5 )
  (byte) mul_tables_compare::i#6 ← phi( mul_tables_compare::@4/(byte) mul_tables_compare::i#5 mul_tables_compare::@9/(byte) mul_tables_compare::i#10 )
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#6
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare::@4/(byte) mul_tables_compare::i#5 )
  (byte*) BGCOL#5 ← phi( mul_tables_compare::@4/(byte*) BGCOL#10 )
  *((byte*) BGCOL#5) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  (byte*) BGCOL#14 ← phi( @2/(byte*) BGCOL#15 )
  call main param-assignment
  to:@5
@5: scope:[]  from @4
  to:@end
@end: scope:[]  from @5

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) BGCOL#0 ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  (byte*) BGCOL#13 ← phi( @4/(byte*) BGCOL#14 )
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) BGCOL#11 ← phi( main/(byte*) BGCOL#13 )
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) BGCOL#6 ← phi( main::@1/(byte*) BGCOL#11 )
  call mul_tables_compare param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) BGCOL#16 ← phi( @begin/(byte*) BGCOL#0 )
  (byte[512]) mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::x_2#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::c#0 ← (byte/signed byte/word/signed word) 0
  (byte*~) init_mul_tables::$0 ← (byte[512]) mul_sqr_hi#0 + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_hi#0 ← (byte*~) init_mul_tables::$0
  (byte*~) init_mul_tables::$1 ← (byte[512]) mul_sqr_lo#0 + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_lo#0 ← (byte*~) init_mul_tables::$1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (byte) init_mul_tables::x_2#4 ← phi( init_mul_tables/(byte) init_mul_tables::x_2#0 init_mul_tables::@2/(byte) init_mul_tables::x_2#2 )
  (byte*) init_mul_tables::sqr_hi#3 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_hi#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_hi#1 )
  (byte*) init_mul_tables::sqr_lo#3 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_lo#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_lo#1 )
  (word) init_mul_tables::sqr#5 ← phi( init_mul_tables/(word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::c#2 ← phi( init_mul_tables/(byte) init_mul_tables::c#0 init_mul_tables::@2/(byte) init_mul_tables::c#3 )
  (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2
  (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$3 ← (byte~) init_mul_tables::$2 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$4 ← ! (boolean~) init_mul_tables::$3
  if((boolean~) init_mul_tables::$4) goto init_mul_tables::@2
  to:init_mul_tables::@3
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@3
  (byte) init_mul_tables::c#3 ← phi( init_mul_tables::@1/(byte) init_mul_tables::c#1 init_mul_tables::@3/(byte) init_mul_tables::c#4 )
  (byte) init_mul_tables::x_2#2 ← phi( init_mul_tables::@1/(byte) init_mul_tables::x_2#4 init_mul_tables::@3/(byte) init_mul_tables::x_2#1 )
  (byte*) init_mul_tables::sqr_hi#2 ← phi( init_mul_tables::@1/(byte*) init_mul_tables::sqr_hi#3 init_mul_tables::@3/(byte*) init_mul_tables::sqr_hi#4 )
  (byte*) init_mul_tables::sqr_lo#2 ← phi( init_mul_tables::@1/(byte*) init_mul_tables::sqr_lo#3 init_mul_tables::@3/(byte*) init_mul_tables::sqr_lo#4 )
  (word) init_mul_tables::sqr#3 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#5 init_mul_tables::@3/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5
  (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6
  (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2
  (word~) init_mul_tables::$7 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2
  (word) init_mul_tables::sqr#1 ← (word~) init_mul_tables::$7
  (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2
  (byte*~) init_mul_tables::$8 ← (byte[512]) mul_sqr_lo#0 + (word/signed word) 512
  (boolean~) init_mul_tables::$9 ← (byte*) init_mul_tables::sqr_lo#1 != (byte*~) init_mul_tables::$8
  if((boolean~) init_mul_tables::$9) goto init_mul_tables::@1
  to:init_mul_tables::@return
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::c#4 ← phi( init_mul_tables::@1/(byte) init_mul_tables::c#1 )
  (byte*) init_mul_tables::sqr_hi#4 ← phi( init_mul_tables::@1/(byte*) init_mul_tables::sqr_hi#3 )
  (byte*) init_mul_tables::sqr_lo#4 ← phi( init_mul_tables::@1/(byte*) init_mul_tables::sqr_lo#3 )
  (word) init_mul_tables::sqr#4 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#5 )
  (byte) init_mul_tables::x_2#3 ← phi( init_mul_tables::@1/(byte) init_mul_tables::x_2#4 )
  (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4
  to:init_mul_tables::@2
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@2
  return 
  to:@return
@2: scope:[]  from @1
  (byte*) BGCOL#15 ← phi( @1/(byte*) BGCOL#16 )
  (byte[512]) asm_mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  (byte*) BGCOL#1 ← phi( main::@2/(byte*) BGCOL#6 )
  *((byte*) BGCOL#1) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i#0 ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte*) BGCOL#7 ← phi( mul_tables_compare/(byte*) BGCOL#1 mul_tables_compare::@5/(byte*) BGCOL#12 )
  (byte) mul_tables_compare::i#2 ← phi( mul_tables_compare/(byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  (boolean~) mul_tables_compare::$0 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#2) != *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#2)
  (boolean~) mul_tables_compare::$1 ← ! (boolean~) mul_tables_compare::$0
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*) BGCOL#8 ← phi( mul_tables_compare::@1/(byte*) BGCOL#7 mul_tables_compare::@6/(byte*) BGCOL#2 )
  (byte) mul_tables_compare::i#3 ← phi( mul_tables_compare::@1/(byte) mul_tables_compare::i#2 mul_tables_compare::@6/(byte) mul_tables_compare::i#7 )
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$4 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#3) != *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#3)
  (boolean~) mul_tables_compare::$5 ← ! (boolean~) mul_tables_compare::$4
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  (byte) mul_tables_compare::i#7 ← phi( mul_tables_compare::@1/(byte) mul_tables_compare::i#2 )
  (byte*) BGCOL#2 ← phi( mul_tables_compare::@1/(byte*) BGCOL#7 )
  *((byte*) BGCOL#2) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (byte*) BGCOL#9 ← phi( mul_tables_compare::@2/(byte*) BGCOL#8 mul_tables_compare::@7/(byte*) BGCOL#3 )
  (byte) mul_tables_compare::i#4 ← phi( mul_tables_compare::@2/(byte) mul_tables_compare::i#3 mul_tables_compare::@7/(byte) mul_tables_compare::i#8 )
  (boolean~) mul_tables_compare::$6 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#4) != *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#4)
  (boolean~) mul_tables_compare::$7 ← ! (boolean~) mul_tables_compare::$6
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  (byte) mul_tables_compare::i#8 ← phi( mul_tables_compare::@2/(byte) mul_tables_compare::i#3 )
  (byte*) BGCOL#3 ← phi( mul_tables_compare::@2/(byte*) BGCOL#8 )
  *((byte*) BGCOL#3) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*) BGCOL#10 ← phi( mul_tables_compare::@3/(byte*) BGCOL#9 mul_tables_compare::@8/(byte*) BGCOL#4 )
  (byte) mul_tables_compare::i#5 ← phi( mul_tables_compare::@3/(byte) mul_tables_compare::i#4 mul_tables_compare::@8/(byte) mul_tables_compare::i#9 )
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$10 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#5) != *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#5)
  (boolean~) mul_tables_compare::$11 ← ! (boolean~) mul_tables_compare::$10
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  (byte) mul_tables_compare::i#9 ← phi( mul_tables_compare::@3/(byte) mul_tables_compare::i#4 )
  (byte*) BGCOL#4 ← phi( mul_tables_compare::@3/(byte*) BGCOL#9 )
  *((byte*) BGCOL#4) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte*) BGCOL#12 ← phi( mul_tables_compare::@4/(byte*) BGCOL#10 mul_tables_compare::@9/(byte*) BGCOL#5 )
  (byte) mul_tables_compare::i#6 ← phi( mul_tables_compare::@4/(byte) mul_tables_compare::i#5 mul_tables_compare::@9/(byte) mul_tables_compare::i#10 )
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#6
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare::@4/(byte) mul_tables_compare::i#5 )
  (byte*) BGCOL#5 ← phi( mul_tables_compare::@4/(byte*) BGCOL#10 )
  *((byte*) BGCOL#5) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  (byte*) BGCOL#14 ← phi( @2/(byte*) BGCOL#15 )
  call main param-assignment
  to:@5
@5: scope:[]  from @4
  to:@end
@end: scope:[]  from @5

INITIAL SSA SYMBOL TABLE
(label) @1
(label) @2
(label) @4
(label) @5
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte*) BGCOL#1
(byte*) BGCOL#10
(byte*) BGCOL#11
(byte*) BGCOL#12
(byte*) BGCOL#13
(byte*) BGCOL#14
(byte*) BGCOL#15
(byte*) BGCOL#16
(byte*) BGCOL#2
(byte*) BGCOL#3
(byte*) BGCOL#4
(byte*) BGCOL#5
(byte*) BGCOL#6
(byte*) BGCOL#7
(byte*) BGCOL#8
(byte*) BGCOL#9
(byte[512]) asm_mul_sqr_hi
(byte[512]) asm_mul_sqr_hi#0
(byte[512]) asm_mul_sqr_lo
(byte[512]) asm_mul_sqr_lo#0
(void()) init_mul_tables()
(byte*~) init_mul_tables::$0
(byte*~) init_mul_tables::$1
(byte~) init_mul_tables::$2
(boolean~) init_mul_tables::$3
(boolean~) init_mul_tables::$4
(byte~) init_mul_tables::$5
(byte~) init_mul_tables::$6
(word~) init_mul_tables::$7
(byte*~) init_mul_tables::$8
(boolean~) init_mul_tables::$9
(label) init_mul_tables::@1
(label) init_mul_tables::@2
(label) init_mul_tables::@3
(label) init_mul_tables::@return
(byte) init_mul_tables::c
(byte) init_mul_tables::c#0
(byte) init_mul_tables::c#1
(byte) init_mul_tables::c#2
(byte) init_mul_tables::c#3
(byte) init_mul_tables::c#4
(word) init_mul_tables::sqr
(word) init_mul_tables::sqr#0
(word) init_mul_tables::sqr#1
(word) init_mul_tables::sqr#2
(word) init_mul_tables::sqr#3
(word) init_mul_tables::sqr#4
(word) init_mul_tables::sqr#5
(byte*) init_mul_tables::sqr_hi
(byte*) init_mul_tables::sqr_hi#0
(byte*) init_mul_tables::sqr_hi#1
(byte*) init_mul_tables::sqr_hi#2
(byte*) init_mul_tables::sqr_hi#3
(byte*) init_mul_tables::sqr_hi#4
(byte*) init_mul_tables::sqr_lo
(byte*) init_mul_tables::sqr_lo#0
(byte*) init_mul_tables::sqr_lo#1
(byte*) init_mul_tables::sqr_lo#2
(byte*) init_mul_tables::sqr_lo#3
(byte*) init_mul_tables::sqr_lo#4
(byte) init_mul_tables::x_2
(byte) init_mul_tables::x_2#0
(byte) init_mul_tables::x_2#1
(byte) init_mul_tables::x_2#2
(byte) init_mul_tables::x_2#3
(byte) init_mul_tables::x_2#4
(void()) init_mul_tables_asm()
(label) init_mul_tables_asm::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte[512]) mul_sqr_hi
(byte[512]) mul_sqr_hi#0
(byte[512]) mul_sqr_lo
(byte[512]) mul_sqr_lo#0
(void()) mul_tables_compare()
(boolean~) mul_tables_compare::$0
(boolean~) mul_tables_compare::$1
(boolean~) mul_tables_compare::$10
(boolean~) mul_tables_compare::$11
(boolean~) mul_tables_compare::$12
(byte*~) mul_tables_compare::$2
(byte*~) mul_tables_compare::$3
(boolean~) mul_tables_compare::$4
(boolean~) mul_tables_compare::$5
(boolean~) mul_tables_compare::$6
(boolean~) mul_tables_compare::$7
(byte*~) mul_tables_compare::$8
(byte*~) mul_tables_compare::$9
(label) mul_tables_compare::@1
(label) mul_tables_compare::@2
(label) mul_tables_compare::@3
(label) mul_tables_compare::@4
(label) mul_tables_compare::@5
(label) mul_tables_compare::@6
(label) mul_tables_compare::@7
(label) mul_tables_compare::@8
(label) mul_tables_compare::@9
(label) mul_tables_compare::@return
(byte) mul_tables_compare::i
(byte) mul_tables_compare::i#0
(byte) mul_tables_compare::i#1
(byte) mul_tables_compare::i#10
(byte) mul_tables_compare::i#2
(byte) mul_tables_compare::i#3
(byte) mul_tables_compare::i#4
(byte) mul_tables_compare::i#5
(byte) mul_tables_compare::i#6
(byte) mul_tables_compare::i#7
(byte) mul_tables_compare::i#8
(byte) mul_tables_compare::i#9

Culled Empty Block (label) main::@3
Culled Empty Block (label) @5
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) BGCOL#0 ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  (byte*) BGCOL#13 ← phi( @4/(byte*) BGCOL#14 )
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) BGCOL#11 ← phi( main/(byte*) BGCOL#13 )
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) BGCOL#6 ← phi( main::@1/(byte*) BGCOL#11 )
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) BGCOL#16 ← phi( @begin/(byte*) BGCOL#0 )
  (byte[512]) mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::x_2#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::c#0 ← (byte/signed byte/word/signed word) 0
  (byte*~) init_mul_tables::$0 ← (byte[512]) mul_sqr_hi#0 + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_hi#0 ← (byte*~) init_mul_tables::$0
  (byte*~) init_mul_tables::$1 ← (byte[512]) mul_sqr_lo#0 + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_lo#0 ← (byte*~) init_mul_tables::$1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (byte) init_mul_tables::x_2#4 ← phi( init_mul_tables/(byte) init_mul_tables::x_2#0 init_mul_tables::@2/(byte) init_mul_tables::x_2#2 )
  (byte*) init_mul_tables::sqr_hi#3 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_hi#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_hi#1 )
  (byte*) init_mul_tables::sqr_lo#3 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_lo#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_lo#1 )
  (word) init_mul_tables::sqr#5 ← phi( init_mul_tables/(word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::c#2 ← phi( init_mul_tables/(byte) init_mul_tables::c#0 init_mul_tables::@2/(byte) init_mul_tables::c#3 )
  (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2
  (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$3 ← (byte~) init_mul_tables::$2 == (byte/signed byte/word/signed word) 0
  (boolean~) init_mul_tables::$4 ← ! (boolean~) init_mul_tables::$3
  if((boolean~) init_mul_tables::$4) goto init_mul_tables::@2
  to:init_mul_tables::@3
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@3
  (byte) init_mul_tables::c#3 ← phi( init_mul_tables::@1/(byte) init_mul_tables::c#1 init_mul_tables::@3/(byte) init_mul_tables::c#4 )
  (byte) init_mul_tables::x_2#2 ← phi( init_mul_tables::@1/(byte) init_mul_tables::x_2#4 init_mul_tables::@3/(byte) init_mul_tables::x_2#1 )
  (byte*) init_mul_tables::sqr_hi#2 ← phi( init_mul_tables::@1/(byte*) init_mul_tables::sqr_hi#3 init_mul_tables::@3/(byte*) init_mul_tables::sqr_hi#4 )
  (byte*) init_mul_tables::sqr_lo#2 ← phi( init_mul_tables::@1/(byte*) init_mul_tables::sqr_lo#3 init_mul_tables::@3/(byte*) init_mul_tables::sqr_lo#4 )
  (word) init_mul_tables::sqr#3 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#5 init_mul_tables::@3/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5
  (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6
  (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2
  (word~) init_mul_tables::$7 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2
  (word) init_mul_tables::sqr#1 ← (word~) init_mul_tables::$7
  (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2
  (byte*~) init_mul_tables::$8 ← (byte[512]) mul_sqr_lo#0 + (word/signed word) 512
  (boolean~) init_mul_tables::$9 ← (byte*) init_mul_tables::sqr_lo#1 != (byte*~) init_mul_tables::$8
  if((boolean~) init_mul_tables::$9) goto init_mul_tables::@1
  to:init_mul_tables::@return
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::c#4 ← phi( init_mul_tables::@1/(byte) init_mul_tables::c#1 )
  (byte*) init_mul_tables::sqr_hi#4 ← phi( init_mul_tables::@1/(byte*) init_mul_tables::sqr_hi#3 )
  (byte*) init_mul_tables::sqr_lo#4 ← phi( init_mul_tables::@1/(byte*) init_mul_tables::sqr_lo#3 )
  (word) init_mul_tables::sqr#4 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#5 )
  (byte) init_mul_tables::x_2#3 ← phi( init_mul_tables::@1/(byte) init_mul_tables::x_2#4 )
  (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4
  to:init_mul_tables::@2
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@2
  return 
  to:@return
@2: scope:[]  from @1
  (byte*) BGCOL#15 ← phi( @1/(byte*) BGCOL#16 )
  (byte[512]) asm_mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  (byte*) BGCOL#1 ← phi( main::@2/(byte*) BGCOL#6 )
  *((byte*) BGCOL#1) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i#0 ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte*) BGCOL#7 ← phi( mul_tables_compare/(byte*) BGCOL#1 mul_tables_compare::@5/(byte*) BGCOL#12 )
  (byte) mul_tables_compare::i#2 ← phi( mul_tables_compare/(byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  (boolean~) mul_tables_compare::$0 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#2) != *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#2)
  (boolean~) mul_tables_compare::$1 ← ! (boolean~) mul_tables_compare::$0
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*) BGCOL#8 ← phi( mul_tables_compare::@1/(byte*) BGCOL#7 mul_tables_compare::@6/(byte*) BGCOL#2 )
  (byte) mul_tables_compare::i#3 ← phi( mul_tables_compare::@1/(byte) mul_tables_compare::i#2 mul_tables_compare::@6/(byte) mul_tables_compare::i#7 )
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$4 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#3) != *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#3)
  (boolean~) mul_tables_compare::$5 ← ! (boolean~) mul_tables_compare::$4
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  (byte) mul_tables_compare::i#7 ← phi( mul_tables_compare::@1/(byte) mul_tables_compare::i#2 )
  (byte*) BGCOL#2 ← phi( mul_tables_compare::@1/(byte*) BGCOL#7 )
  *((byte*) BGCOL#2) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (byte*) BGCOL#9 ← phi( mul_tables_compare::@2/(byte*) BGCOL#8 mul_tables_compare::@7/(byte*) BGCOL#3 )
  (byte) mul_tables_compare::i#4 ← phi( mul_tables_compare::@2/(byte) mul_tables_compare::i#3 mul_tables_compare::@7/(byte) mul_tables_compare::i#8 )
  (boolean~) mul_tables_compare::$6 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#4) != *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#4)
  (boolean~) mul_tables_compare::$7 ← ! (boolean~) mul_tables_compare::$6
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  (byte) mul_tables_compare::i#8 ← phi( mul_tables_compare::@2/(byte) mul_tables_compare::i#3 )
  (byte*) BGCOL#3 ← phi( mul_tables_compare::@2/(byte*) BGCOL#8 )
  *((byte*) BGCOL#3) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*) BGCOL#10 ← phi( mul_tables_compare::@3/(byte*) BGCOL#9 mul_tables_compare::@8/(byte*) BGCOL#4 )
  (byte) mul_tables_compare::i#5 ← phi( mul_tables_compare::@3/(byte) mul_tables_compare::i#4 mul_tables_compare::@8/(byte) mul_tables_compare::i#9 )
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$10 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#5) != *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#5)
  (boolean~) mul_tables_compare::$11 ← ! (boolean~) mul_tables_compare::$10
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  (byte) mul_tables_compare::i#9 ← phi( mul_tables_compare::@3/(byte) mul_tables_compare::i#4 )
  (byte*) BGCOL#4 ← phi( mul_tables_compare::@3/(byte*) BGCOL#9 )
  *((byte*) BGCOL#4) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte*) BGCOL#12 ← phi( mul_tables_compare::@4/(byte*) BGCOL#10 mul_tables_compare::@9/(byte*) BGCOL#5 )
  (byte) mul_tables_compare::i#6 ← phi( mul_tables_compare::@4/(byte) mul_tables_compare::i#5 mul_tables_compare::@9/(byte) mul_tables_compare::i#10 )
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#6
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare::@4/(byte) mul_tables_compare::i#5 )
  (byte*) BGCOL#5 ← phi( mul_tables_compare::@4/(byte*) BGCOL#10 )
  *((byte*) BGCOL#5) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  (byte*) BGCOL#14 ← phi( @2/(byte*) BGCOL#15 )
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Inversing boolean not (boolean~) init_mul_tables::$4 ← (byte~) init_mul_tables::$2 != (byte/signed byte/word/signed word) 0 from (boolean~) init_mul_tables::$3 ← (byte~) init_mul_tables::$2 == (byte/signed byte/word/signed word) 0
Inversing boolean not (boolean~) mul_tables_compare::$1 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#2) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#2) from (boolean~) mul_tables_compare::$0 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#2) != *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#2)
Inversing boolean not (boolean~) mul_tables_compare::$5 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#3) == *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#3) from (boolean~) mul_tables_compare::$4 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#3) != *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#3)
Inversing boolean not (boolean~) mul_tables_compare::$7 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#4) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#4) from (boolean~) mul_tables_compare::$6 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#4) != *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#4)
Inversing boolean not (boolean~) mul_tables_compare::$11 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#5) == *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#5) from (boolean~) mul_tables_compare::$10 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#5) != *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#5)
Succesful SSA optimization Pass2UnaryNotSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) BGCOL#0 ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  (byte*) BGCOL#13 ← phi( @4/(byte*) BGCOL#14 )
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) BGCOL#11 ← phi( main/(byte*) BGCOL#13 )
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) BGCOL#6 ← phi( main::@1/(byte*) BGCOL#11 )
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) BGCOL#16 ← phi( @begin/(byte*) BGCOL#0 )
  (byte[512]) mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::x_2#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::c#0 ← (byte/signed byte/word/signed word) 0
  (byte*~) init_mul_tables::$0 ← (byte[512]) mul_sqr_hi#0 + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_hi#0 ← (byte*~) init_mul_tables::$0
  (byte*~) init_mul_tables::$1 ← (byte[512]) mul_sqr_lo#0 + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_lo#0 ← (byte*~) init_mul_tables::$1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (byte) init_mul_tables::x_2#4 ← phi( init_mul_tables/(byte) init_mul_tables::x_2#0 init_mul_tables::@2/(byte) init_mul_tables::x_2#2 )
  (byte*) init_mul_tables::sqr_hi#3 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_hi#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_hi#1 )
  (byte*) init_mul_tables::sqr_lo#3 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_lo#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_lo#1 )
  (word) init_mul_tables::sqr#5 ← phi( init_mul_tables/(word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::c#2 ← phi( init_mul_tables/(byte) init_mul_tables::c#0 init_mul_tables::@2/(byte) init_mul_tables::c#3 )
  (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2
  (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$4 ← (byte~) init_mul_tables::$2 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$4) goto init_mul_tables::@2
  to:init_mul_tables::@3
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@3
  (byte) init_mul_tables::c#3 ← phi( init_mul_tables::@1/(byte) init_mul_tables::c#1 init_mul_tables::@3/(byte) init_mul_tables::c#4 )
  (byte) init_mul_tables::x_2#2 ← phi( init_mul_tables::@1/(byte) init_mul_tables::x_2#4 init_mul_tables::@3/(byte) init_mul_tables::x_2#1 )
  (byte*) init_mul_tables::sqr_hi#2 ← phi( init_mul_tables::@1/(byte*) init_mul_tables::sqr_hi#3 init_mul_tables::@3/(byte*) init_mul_tables::sqr_hi#4 )
  (byte*) init_mul_tables::sqr_lo#2 ← phi( init_mul_tables::@1/(byte*) init_mul_tables::sqr_lo#3 init_mul_tables::@3/(byte*) init_mul_tables::sqr_lo#4 )
  (word) init_mul_tables::sqr#3 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#5 init_mul_tables::@3/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5
  (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6
  (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2
  (word~) init_mul_tables::$7 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2
  (word) init_mul_tables::sqr#1 ← (word~) init_mul_tables::$7
  (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2
  (byte*~) init_mul_tables::$8 ← (byte[512]) mul_sqr_lo#0 + (word/signed word) 512
  (boolean~) init_mul_tables::$9 ← (byte*) init_mul_tables::sqr_lo#1 != (byte*~) init_mul_tables::$8
  if((boolean~) init_mul_tables::$9) goto init_mul_tables::@1
  to:init_mul_tables::@return
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::c#4 ← phi( init_mul_tables::@1/(byte) init_mul_tables::c#1 )
  (byte*) init_mul_tables::sqr_hi#4 ← phi( init_mul_tables::@1/(byte*) init_mul_tables::sqr_hi#3 )
  (byte*) init_mul_tables::sqr_lo#4 ← phi( init_mul_tables::@1/(byte*) init_mul_tables::sqr_lo#3 )
  (word) init_mul_tables::sqr#4 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#5 )
  (byte) init_mul_tables::x_2#3 ← phi( init_mul_tables::@1/(byte) init_mul_tables::x_2#4 )
  (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4
  to:init_mul_tables::@2
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@2
  return 
  to:@return
@2: scope:[]  from @1
  (byte*) BGCOL#15 ← phi( @1/(byte*) BGCOL#16 )
  (byte[512]) asm_mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  (byte*) BGCOL#1 ← phi( main::@2/(byte*) BGCOL#6 )
  *((byte*) BGCOL#1) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i#0 ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte*) BGCOL#7 ← phi( mul_tables_compare/(byte*) BGCOL#1 mul_tables_compare::@5/(byte*) BGCOL#12 )
  (byte) mul_tables_compare::i#2 ← phi( mul_tables_compare/(byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  (boolean~) mul_tables_compare::$1 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#2) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#2)
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*) BGCOL#8 ← phi( mul_tables_compare::@1/(byte*) BGCOL#7 mul_tables_compare::@6/(byte*) BGCOL#2 )
  (byte) mul_tables_compare::i#3 ← phi( mul_tables_compare::@1/(byte) mul_tables_compare::i#2 mul_tables_compare::@6/(byte) mul_tables_compare::i#7 )
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$5 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#3) == *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#3)
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  (byte) mul_tables_compare::i#7 ← phi( mul_tables_compare::@1/(byte) mul_tables_compare::i#2 )
  (byte*) BGCOL#2 ← phi( mul_tables_compare::@1/(byte*) BGCOL#7 )
  *((byte*) BGCOL#2) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (byte*) BGCOL#9 ← phi( mul_tables_compare::@2/(byte*) BGCOL#8 mul_tables_compare::@7/(byte*) BGCOL#3 )
  (byte) mul_tables_compare::i#4 ← phi( mul_tables_compare::@2/(byte) mul_tables_compare::i#3 mul_tables_compare::@7/(byte) mul_tables_compare::i#8 )
  (boolean~) mul_tables_compare::$7 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#4) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#4)
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  (byte) mul_tables_compare::i#8 ← phi( mul_tables_compare::@2/(byte) mul_tables_compare::i#3 )
  (byte*) BGCOL#3 ← phi( mul_tables_compare::@2/(byte*) BGCOL#8 )
  *((byte*) BGCOL#3) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*) BGCOL#10 ← phi( mul_tables_compare::@3/(byte*) BGCOL#9 mul_tables_compare::@8/(byte*) BGCOL#4 )
  (byte) mul_tables_compare::i#5 ← phi( mul_tables_compare::@3/(byte) mul_tables_compare::i#4 mul_tables_compare::@8/(byte) mul_tables_compare::i#9 )
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$11 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#5) == *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#5)
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  (byte) mul_tables_compare::i#9 ← phi( mul_tables_compare::@3/(byte) mul_tables_compare::i#4 )
  (byte*) BGCOL#4 ← phi( mul_tables_compare::@3/(byte*) BGCOL#9 )
  *((byte*) BGCOL#4) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte*) BGCOL#12 ← phi( mul_tables_compare::@4/(byte*) BGCOL#10 mul_tables_compare::@9/(byte*) BGCOL#5 )
  (byte) mul_tables_compare::i#6 ← phi( mul_tables_compare::@4/(byte) mul_tables_compare::i#5 mul_tables_compare::@9/(byte) mul_tables_compare::i#10 )
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#6
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare::@4/(byte) mul_tables_compare::i#5 )
  (byte*) BGCOL#5 ← phi( mul_tables_compare::@4/(byte*) BGCOL#10 )
  *((byte*) BGCOL#5) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  (byte*) BGCOL#14 ← phi( @2/(byte*) BGCOL#15 )
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Not aliassing across scopes: BGCOL#13 BGCOL#14
Not aliassing across scopes: BGCOL#1 BGCOL#6
Alias (byte*) BGCOL#11 = (byte*) BGCOL#13 (byte*) BGCOL#6 
Alias (byte*) BGCOL#0 = (byte*) BGCOL#16 (byte*) BGCOL#15 (byte*) BGCOL#14 
Alias (byte*) init_mul_tables::sqr_hi#0 = (byte*~) init_mul_tables::$0 
Alias (byte*) init_mul_tables::sqr_lo#0 = (byte*~) init_mul_tables::$1 
Alias (word) init_mul_tables::sqr#1 = (word~) init_mul_tables::$7 
Alias (byte) init_mul_tables::x_2#3 = (byte) init_mul_tables::x_2#4 
Alias (word) init_mul_tables::sqr#4 = (word) init_mul_tables::sqr#5 
Alias (byte*) init_mul_tables::sqr_lo#3 = (byte*) init_mul_tables::sqr_lo#4 
Alias (byte*) init_mul_tables::sqr_hi#3 = (byte*) init_mul_tables::sqr_hi#4 
Alias (byte) init_mul_tables::c#1 = (byte) init_mul_tables::c#4 
Alias (byte*) BGCOL#2 = (byte*) BGCOL#7 
Alias (byte) mul_tables_compare::i#2 = (byte) mul_tables_compare::i#7 
Alias (byte*) BGCOL#3 = (byte*) BGCOL#8 
Alias (byte) mul_tables_compare::i#3 = (byte) mul_tables_compare::i#8 
Alias (byte*) BGCOL#4 = (byte*) BGCOL#9 
Alias (byte) mul_tables_compare::i#4 = (byte) mul_tables_compare::i#9 
Alias (byte*) BGCOL#10 = (byte*) BGCOL#5 
Alias (byte) mul_tables_compare::i#10 = (byte) mul_tables_compare::i#5 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) BGCOL#0 ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  (byte*) BGCOL#11 ← phi( @4/(byte*) BGCOL#0 )
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[512]) mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::x_2#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::c#0 ← (byte/signed byte/word/signed word) 0
  (byte*) init_mul_tables::sqr_hi#0 ← (byte[512]) mul_sqr_hi#0 + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_lo#0 ← (byte[512]) mul_sqr_lo#0 + (byte/signed byte/word/signed word) 1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (byte) init_mul_tables::x_2#3 ← phi( init_mul_tables/(byte) init_mul_tables::x_2#0 init_mul_tables::@2/(byte) init_mul_tables::x_2#2 )
  (byte*) init_mul_tables::sqr_hi#3 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_hi#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_hi#1 )
  (byte*) init_mul_tables::sqr_lo#3 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_lo#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_lo#1 )
  (word) init_mul_tables::sqr#4 ← phi( init_mul_tables/(word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::c#2 ← phi( init_mul_tables/(byte) init_mul_tables::c#0 init_mul_tables::@2/(byte) init_mul_tables::c#3 )
  (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2
  (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$4 ← (byte~) init_mul_tables::$2 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$4) goto init_mul_tables::@2
  to:init_mul_tables::@3
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@3
  (byte) init_mul_tables::c#3 ← phi( init_mul_tables::@1/(byte) init_mul_tables::c#1 init_mul_tables::@3/(byte) init_mul_tables::c#1 )
  (byte) init_mul_tables::x_2#2 ← phi( init_mul_tables::@1/(byte) init_mul_tables::x_2#3 init_mul_tables::@3/(byte) init_mul_tables::x_2#1 )
  (byte*) init_mul_tables::sqr_hi#2 ← phi( init_mul_tables::@1/(byte*) init_mul_tables::sqr_hi#3 init_mul_tables::@3/(byte*) init_mul_tables::sqr_hi#3 )
  (byte*) init_mul_tables::sqr_lo#2 ← phi( init_mul_tables::@1/(byte*) init_mul_tables::sqr_lo#3 init_mul_tables::@3/(byte*) init_mul_tables::sqr_lo#3 )
  (word) init_mul_tables::sqr#3 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#4 init_mul_tables::@3/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5
  (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6
  (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2
  (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2
  (byte*~) init_mul_tables::$8 ← (byte[512]) mul_sqr_lo#0 + (word/signed word) 512
  (boolean~) init_mul_tables::$9 ← (byte*) init_mul_tables::sqr_lo#1 != (byte*~) init_mul_tables::$8
  if((boolean~) init_mul_tables::$9) goto init_mul_tables::@1
  to:init_mul_tables::@return
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4
  to:init_mul_tables::@2
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@2
  return 
  to:@return
@2: scope:[]  from @1
  (byte[512]) asm_mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  (byte*) BGCOL#1 ← phi( main::@2/(byte*) BGCOL#11 )
  *((byte*) BGCOL#1) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i#0 ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte*) BGCOL#2 ← phi( mul_tables_compare/(byte*) BGCOL#1 mul_tables_compare::@5/(byte*) BGCOL#12 )
  (byte) mul_tables_compare::i#2 ← phi( mul_tables_compare/(byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  (boolean~) mul_tables_compare::$1 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#2) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#2)
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*) BGCOL#3 ← phi( mul_tables_compare::@1/(byte*) BGCOL#2 mul_tables_compare::@6/(byte*) BGCOL#2 )
  (byte) mul_tables_compare::i#3 ← phi( mul_tables_compare::@1/(byte) mul_tables_compare::i#2 mul_tables_compare::@6/(byte) mul_tables_compare::i#2 )
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$5 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#3) == *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#3)
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((byte*) BGCOL#2) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (byte*) BGCOL#4 ← phi( mul_tables_compare::@2/(byte*) BGCOL#3 mul_tables_compare::@7/(byte*) BGCOL#3 )
  (byte) mul_tables_compare::i#4 ← phi( mul_tables_compare::@2/(byte) mul_tables_compare::i#3 mul_tables_compare::@7/(byte) mul_tables_compare::i#3 )
  (boolean~) mul_tables_compare::$7 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#4) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#4)
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((byte*) BGCOL#3) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*) BGCOL#10 ← phi( mul_tables_compare::@3/(byte*) BGCOL#4 mul_tables_compare::@8/(byte*) BGCOL#4 )
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare::@3/(byte) mul_tables_compare::i#4 mul_tables_compare::@8/(byte) mul_tables_compare::i#4 )
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$11 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#10) == *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((byte*) BGCOL#4) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte*) BGCOL#12 ← phi( mul_tables_compare::@4/(byte*) BGCOL#10 mul_tables_compare::@9/(byte*) BGCOL#10 )
  (byte) mul_tables_compare::i#6 ← phi( mul_tables_compare::@4/(byte) mul_tables_compare::i#10 mul_tables_compare::@9/(byte) mul_tables_compare::i#10 )
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#6
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((byte*) BGCOL#10) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Not aliassing across scopes: BGCOL#11 BGCOL#0
Not aliassing across scopes: BGCOL#1 BGCOL#11
Alias (byte*) init_mul_tables::sqr_lo#2 = (byte*) init_mul_tables::sqr_lo#3 
Alias (byte*) init_mul_tables::sqr_hi#2 = (byte*) init_mul_tables::sqr_hi#3 
Alias (byte) init_mul_tables::c#1 = (byte) init_mul_tables::c#3 
Alias (byte) mul_tables_compare::i#10 = (byte) mul_tables_compare::i#3 (byte) mul_tables_compare::i#2 (byte) mul_tables_compare::i#4 (byte) mul_tables_compare::i#6 
Alias (byte*) BGCOL#10 = (byte*) BGCOL#3 (byte*) BGCOL#2 (byte*) BGCOL#4 (byte*) BGCOL#12 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) BGCOL#0 ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  (byte*) BGCOL#11 ← phi( @4/(byte*) BGCOL#0 )
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[512]) mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::x_2#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::c#0 ← (byte/signed byte/word/signed word) 0
  (byte*) init_mul_tables::sqr_hi#0 ← (byte[512]) mul_sqr_hi#0 + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_lo#0 ← (byte[512]) mul_sqr_lo#0 + (byte/signed byte/word/signed word) 1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (byte) init_mul_tables::x_2#3 ← phi( init_mul_tables/(byte) init_mul_tables::x_2#0 init_mul_tables::@2/(byte) init_mul_tables::x_2#2 )
  (byte*) init_mul_tables::sqr_hi#2 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_hi#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_hi#1 )
  (byte*) init_mul_tables::sqr_lo#2 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_lo#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_lo#1 )
  (word) init_mul_tables::sqr#4 ← phi( init_mul_tables/(word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::c#2 ← phi( init_mul_tables/(byte) init_mul_tables::c#0 init_mul_tables::@2/(byte) init_mul_tables::c#1 )
  (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2
  (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$4 ← (byte~) init_mul_tables::$2 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$4) goto init_mul_tables::@2
  to:init_mul_tables::@3
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@3
  (byte) init_mul_tables::x_2#2 ← phi( init_mul_tables::@1/(byte) init_mul_tables::x_2#3 init_mul_tables::@3/(byte) init_mul_tables::x_2#1 )
  (word) init_mul_tables::sqr#3 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#4 init_mul_tables::@3/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5
  (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6
  (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2
  (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2
  (byte*~) init_mul_tables::$8 ← (byte[512]) mul_sqr_lo#0 + (word/signed word) 512
  (boolean~) init_mul_tables::$9 ← (byte*) init_mul_tables::sqr_lo#1 != (byte*~) init_mul_tables::$8
  if((boolean~) init_mul_tables::$9) goto init_mul_tables::@1
  to:init_mul_tables::@return
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4
  to:init_mul_tables::@2
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@2
  return 
  to:@return
@2: scope:[]  from @1
  (byte[512]) asm_mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  (byte*) BGCOL#1 ← phi( main::@2/(byte*) BGCOL#11 )
  *((byte*) BGCOL#1) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i#0 ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte*) BGCOL#10 ← phi( mul_tables_compare/(byte*) BGCOL#1 mul_tables_compare::@5/(byte*) BGCOL#10 )
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  (boolean~) mul_tables_compare::$1 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$5 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#10) == *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((byte*) BGCOL#10) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (boolean~) mul_tables_compare::$7 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((byte*) BGCOL#10) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$11 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#10) == *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((byte*) BGCOL#10) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((byte*) BGCOL#10) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Not aliassing across scopes: BGCOL#11 BGCOL#0
Not aliassing across scopes: BGCOL#1 BGCOL#11
Self Phi Eliminated (byte*) BGCOL#10
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) BGCOL#0 ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  (byte*) BGCOL#11 ← phi( @4/(byte*) BGCOL#0 )
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[512]) mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::x_2#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::c#0 ← (byte/signed byte/word/signed word) 0
  (byte*) init_mul_tables::sqr_hi#0 ← (byte[512]) mul_sqr_hi#0 + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_lo#0 ← (byte[512]) mul_sqr_lo#0 + (byte/signed byte/word/signed word) 1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (byte) init_mul_tables::x_2#3 ← phi( init_mul_tables/(byte) init_mul_tables::x_2#0 init_mul_tables::@2/(byte) init_mul_tables::x_2#2 )
  (byte*) init_mul_tables::sqr_hi#2 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_hi#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_hi#1 )
  (byte*) init_mul_tables::sqr_lo#2 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_lo#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_lo#1 )
  (word) init_mul_tables::sqr#4 ← phi( init_mul_tables/(word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::c#2 ← phi( init_mul_tables/(byte) init_mul_tables::c#0 init_mul_tables::@2/(byte) init_mul_tables::c#1 )
  (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2
  (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$4 ← (byte~) init_mul_tables::$2 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$4) goto init_mul_tables::@2
  to:init_mul_tables::@3
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@3
  (byte) init_mul_tables::x_2#2 ← phi( init_mul_tables::@1/(byte) init_mul_tables::x_2#3 init_mul_tables::@3/(byte) init_mul_tables::x_2#1 )
  (word) init_mul_tables::sqr#3 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#4 init_mul_tables::@3/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5
  (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6
  (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2
  (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2
  (byte*~) init_mul_tables::$8 ← (byte[512]) mul_sqr_lo#0 + (word/signed word) 512
  (boolean~) init_mul_tables::$9 ← (byte*) init_mul_tables::sqr_lo#1 != (byte*~) init_mul_tables::$8
  if((boolean~) init_mul_tables::$9) goto init_mul_tables::@1
  to:init_mul_tables::@return
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4
  to:init_mul_tables::@2
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@2
  return 
  to:@return
@2: scope:[]  from @1
  (byte[512]) asm_mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  (byte*) BGCOL#1 ← phi( main::@2/(byte*) BGCOL#11 )
  *((byte*) BGCOL#1) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i#0 ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte*) BGCOL#10 ← phi( mul_tables_compare/(byte*) BGCOL#1 )
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  (boolean~) mul_tables_compare::$1 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$5 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#10) == *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((byte*) BGCOL#10) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (boolean~) mul_tables_compare::$7 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((byte*) BGCOL#10) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$11 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#10) == *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((byte*) BGCOL#10) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((byte*) BGCOL#10) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Redundant Phi (byte*) BGCOL#11 (byte*) BGCOL#0
Redundant Phi (byte*) BGCOL#1 (byte*) BGCOL#11
Redundant Phi (byte*) BGCOL#10 (byte*) BGCOL#1
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) BGCOL#0 ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[512]) mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::x_2#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::c#0 ← (byte/signed byte/word/signed word) 0
  (byte*) init_mul_tables::sqr_hi#0 ← (byte[512]) mul_sqr_hi#0 + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_lo#0 ← (byte[512]) mul_sqr_lo#0 + (byte/signed byte/word/signed word) 1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (byte) init_mul_tables::x_2#3 ← phi( init_mul_tables/(byte) init_mul_tables::x_2#0 init_mul_tables::@2/(byte) init_mul_tables::x_2#2 )
  (byte*) init_mul_tables::sqr_hi#2 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_hi#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_hi#1 )
  (byte*) init_mul_tables::sqr_lo#2 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_lo#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_lo#1 )
  (word) init_mul_tables::sqr#4 ← phi( init_mul_tables/(word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::c#2 ← phi( init_mul_tables/(byte) init_mul_tables::c#0 init_mul_tables::@2/(byte) init_mul_tables::c#1 )
  (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2
  (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1
  (boolean~) init_mul_tables::$4 ← (byte~) init_mul_tables::$2 != (byte/signed byte/word/signed word) 0
  if((boolean~) init_mul_tables::$4) goto init_mul_tables::@2
  to:init_mul_tables::@3
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@3
  (byte) init_mul_tables::x_2#2 ← phi( init_mul_tables::@1/(byte) init_mul_tables::x_2#3 init_mul_tables::@3/(byte) init_mul_tables::x_2#1 )
  (word) init_mul_tables::sqr#3 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#4 init_mul_tables::@3/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5
  (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6
  (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2
  (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2
  (byte*~) init_mul_tables::$8 ← (byte[512]) mul_sqr_lo#0 + (word/signed word) 512
  (boolean~) init_mul_tables::$9 ← (byte*) init_mul_tables::sqr_lo#1 != (byte*~) init_mul_tables::$8
  if((boolean~) init_mul_tables::$9) goto init_mul_tables::@1
  to:init_mul_tables::@return
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4
  to:init_mul_tables::@2
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@2
  return 
  to:@return
@2: scope:[]  from @1
  (byte[512]) asm_mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i#0 ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  (boolean~) mul_tables_compare::$1 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$1) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$5 ← *((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#10) == *((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$5) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  (boolean~) mul_tables_compare::$7 ← *((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10) == *((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$7) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  (boolean~) mul_tables_compare::$11 ← *((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#10) == *((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#10)
  if((boolean~) mul_tables_compare::$11) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10
  (boolean~) mul_tables_compare::$12 ← (byte) mul_tables_compare::i#1 != (byte/signed byte/word/signed word) 0
  if((boolean~) mul_tables_compare::$12) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Simple Condition (boolean~) init_mul_tables::$4 if((byte~) init_mul_tables::$2!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2
Simple Condition (boolean~) init_mul_tables::$9 if((byte*) init_mul_tables::sqr_lo#1!=(byte*~) init_mul_tables::$8) goto init_mul_tables::@1
Simple Condition (boolean~) mul_tables_compare::$1 if(*((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2
Simple Condition (boolean~) mul_tables_compare::$5 if(*((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#10)==*((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3
Simple Condition (boolean~) mul_tables_compare::$7 if(*((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4
Simple Condition (boolean~) mul_tables_compare::$11 if(*((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#10)==*((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5
Simple Condition (boolean~) mul_tables_compare::$12 if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) BGCOL#0 ← ((byte*)) (word) 53281
  to:@1
main: scope:[main]  from @4
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte[512]) mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (word) init_mul_tables::sqr#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::x_2#0 ← (byte/signed byte/word/signed word) 0
  (byte) init_mul_tables::c#0 ← (byte/signed byte/word/signed word) 0
  (byte*) init_mul_tables::sqr_hi#0 ← (byte[512]) mul_sqr_hi#0 + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_lo#0 ← (byte[512]) mul_sqr_lo#0 + (byte/signed byte/word/signed word) 1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (byte) init_mul_tables::x_2#3 ← phi( init_mul_tables/(byte) init_mul_tables::x_2#0 init_mul_tables::@2/(byte) init_mul_tables::x_2#2 )
  (byte*) init_mul_tables::sqr_hi#2 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_hi#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_hi#1 )
  (byte*) init_mul_tables::sqr_lo#2 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_lo#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_lo#1 )
  (word) init_mul_tables::sqr#4 ← phi( init_mul_tables/(word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::c#2 ← phi( init_mul_tables/(byte) init_mul_tables::c#0 init_mul_tables::@2/(byte) init_mul_tables::c#1 )
  (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2
  (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1
  if((byte~) init_mul_tables::$2!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2
  to:init_mul_tables::@3
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@3
  (byte) init_mul_tables::x_2#2 ← phi( init_mul_tables::@1/(byte) init_mul_tables::x_2#3 init_mul_tables::@3/(byte) init_mul_tables::x_2#1 )
  (word) init_mul_tables::sqr#3 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#4 init_mul_tables::@3/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5
  (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6
  (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2
  (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2
  (byte*~) init_mul_tables::$8 ← (byte[512]) mul_sqr_lo#0 + (word/signed word) 512
  if((byte*) init_mul_tables::sqr_lo#1!=(byte*~) init_mul_tables::$8) goto init_mul_tables::@1
  to:init_mul_tables::@return
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4
  to:init_mul_tables::@2
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@2
  return 
  to:@return
@2: scope:[]  from @1
  (byte[512]) asm_mul_sqr_lo#0 ← { fill( 512, 0) }
  (byte[512]) asm_mul_sqr_hi#0 ← { fill( 512, 0) }
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5
  (byte) mul_tables_compare::i#0 ← (byte/signed byte/word/signed word) 0
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  if(*((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*~) mul_tables_compare::$2 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  if(*((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#10)==*((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  if(*((byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*~) mul_tables_compare::$8 ← (byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  if(*((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#10)==*((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10
  if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Constant (const byte*) BGCOL#0 = ((byte*))53281
Constant (const byte[512]) mul_sqr_lo#0 = { fill( 512, 0) }
Constant (const byte[512]) mul_sqr_hi#0 = { fill( 512, 0) }
Constant (const word) init_mul_tables::sqr#0 = 0
Constant (const byte) init_mul_tables::x_2#0 = 0
Constant (const byte) init_mul_tables::c#0 = 0
Constant (const byte[512]) asm_mul_sqr_lo#0 = { fill( 512, 0) }
Constant (const byte[512]) asm_mul_sqr_hi#0 = { fill( 512, 0) }
Constant (const byte) mul_tables_compare::i#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @4
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  (byte*) init_mul_tables::sqr_hi#0 ← (const byte[512]) mul_sqr_hi#0 + (byte/signed byte/word/signed word) 1
  (byte*) init_mul_tables::sqr_lo#0 ← (const byte[512]) mul_sqr_lo#0 + (byte/signed byte/word/signed word) 1
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (byte) init_mul_tables::x_2#3 ← phi( init_mul_tables/(const byte) init_mul_tables::x_2#0 init_mul_tables::@2/(byte) init_mul_tables::x_2#2 )
  (byte*) init_mul_tables::sqr_hi#2 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_hi#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_hi#1 )
  (byte*) init_mul_tables::sqr_lo#2 ← phi( init_mul_tables/(byte*) init_mul_tables::sqr_lo#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_lo#1 )
  (word) init_mul_tables::sqr#4 ← phi( init_mul_tables/(const word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::c#2 ← phi( init_mul_tables/(const byte) init_mul_tables::c#0 init_mul_tables::@2/(byte) init_mul_tables::c#1 )
  (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2
  (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1
  if((byte~) init_mul_tables::$2!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2
  to:init_mul_tables::@3
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@3
  (byte) init_mul_tables::x_2#2 ← phi( init_mul_tables::@1/(byte) init_mul_tables::x_2#3 init_mul_tables::@3/(byte) init_mul_tables::x_2#1 )
  (word) init_mul_tables::sqr#3 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#4 init_mul_tables::@3/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5
  (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6
  (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2
  (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2
  (byte*~) init_mul_tables::$8 ← (const byte[512]) mul_sqr_lo#0 + (word/signed word) 512
  if((byte*) init_mul_tables::sqr_lo#1!=(byte*~) init_mul_tables::$8) goto init_mul_tables::@1
  to:init_mul_tables::@return
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4
  to:init_mul_tables::@2
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@2
  return 
  to:@return
@2: scope:[]  from @1
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(const byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  (byte*~) mul_tables_compare::$2 ← (const byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$3 ← (const byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  if(*((byte*~) mul_tables_compare::$2 + (byte) mul_tables_compare::i#10)==*((byte*~) mul_tables_compare::$3 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  (byte*~) mul_tables_compare::$8 ← (const byte[512]) mul_sqr_hi#0 + (word/signed word) 256
  (byte*~) mul_tables_compare::$9 ← (const byte[512]) asm_mul_sqr_hi#0 + (word/signed word) 256
  if(*((byte*~) mul_tables_compare::$8 + (byte) mul_tables_compare::i#10)==*((byte*~) mul_tables_compare::$9 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10
  if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Constant (const byte*) init_mul_tables::sqr_hi#0 = mul_sqr_hi#0+1
Constant (const byte*) init_mul_tables::sqr_lo#0 = mul_sqr_lo#0+1
Constant (const byte*) init_mul_tables::$8 = mul_sqr_lo#0+512
Constant (const byte*) mul_tables_compare::$2 = mul_sqr_hi#0+256
Constant (const byte*) mul_tables_compare::$3 = asm_mul_sqr_hi#0+256
Constant (const byte*) mul_tables_compare::$8 = mul_sqr_hi#0+256
Constant (const byte*) mul_tables_compare::$9 = asm_mul_sqr_hi#0+256
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @4
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
init_mul_tables: scope:[init_mul_tables]  from main
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (byte) init_mul_tables::x_2#3 ← phi( init_mul_tables/(const byte) init_mul_tables::x_2#0 init_mul_tables::@2/(byte) init_mul_tables::x_2#2 )
  (byte*) init_mul_tables::sqr_hi#2 ← phi( init_mul_tables/(const byte*) init_mul_tables::sqr_hi#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_hi#1 )
  (byte*) init_mul_tables::sqr_lo#2 ← phi( init_mul_tables/(const byte*) init_mul_tables::sqr_lo#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_lo#1 )
  (word) init_mul_tables::sqr#4 ← phi( init_mul_tables/(const word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::c#2 ← phi( init_mul_tables/(const byte) init_mul_tables::c#0 init_mul_tables::@2/(byte) init_mul_tables::c#1 )
  (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2
  (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1
  if((byte~) init_mul_tables::$2!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2
  to:init_mul_tables::@3
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@3
  (byte) init_mul_tables::x_2#2 ← phi( init_mul_tables::@1/(byte) init_mul_tables::x_2#3 init_mul_tables::@3/(byte) init_mul_tables::x_2#1 )
  (word) init_mul_tables::sqr#3 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#4 init_mul_tables::@3/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5
  (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6
  (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2
  (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2
  if((byte*) init_mul_tables::sqr_lo#1!=(const byte*) init_mul_tables::$8) goto init_mul_tables::@1
  to:init_mul_tables::@return
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4
  to:init_mul_tables::@2
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@2
  return 
  to:@return
@2: scope:[]  from @1
  to:@4
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(const byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  if(*((const byte*) mul_tables_compare::$2 + (byte) mul_tables_compare::i#10)==*((const byte*) mul_tables_compare::$3 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  if(*((const byte*) mul_tables_compare::$8 + (byte) mul_tables_compare::i#10)==*((const byte*) mul_tables_compare::$9 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10
  if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @2
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Culled Empty Block (label) @1
Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@4
main: scope:[main]  from @4
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
init_mul_tables: scope:[init_mul_tables]  from main
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (byte) init_mul_tables::x_2#3 ← phi( init_mul_tables/(const byte) init_mul_tables::x_2#0 init_mul_tables::@2/(byte) init_mul_tables::x_2#2 )
  (byte*) init_mul_tables::sqr_hi#2 ← phi( init_mul_tables/(const byte*) init_mul_tables::sqr_hi#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_hi#1 )
  (byte*) init_mul_tables::sqr_lo#2 ← phi( init_mul_tables/(const byte*) init_mul_tables::sqr_lo#0 init_mul_tables::@2/(byte*) init_mul_tables::sqr_lo#1 )
  (word) init_mul_tables::sqr#4 ← phi( init_mul_tables/(const word) init_mul_tables::sqr#0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::c#2 ← phi( init_mul_tables/(const byte) init_mul_tables::c#0 init_mul_tables::@2/(byte) init_mul_tables::c#1 )
  (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2
  (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1
  if((byte~) init_mul_tables::$2!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2
  to:init_mul_tables::@3
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@3
  (byte) init_mul_tables::x_2#2 ← phi( init_mul_tables::@1/(byte) init_mul_tables::x_2#3 init_mul_tables::@3/(byte) init_mul_tables::x_2#1 )
  (word) init_mul_tables::sqr#3 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#4 init_mul_tables::@3/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5
  (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6
  (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2
  (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2
  if((byte*) init_mul_tables::sqr_lo#1!=(const byte*) init_mul_tables::$8) goto init_mul_tables::@1
  to:init_mul_tables::@return
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4
  to:init_mul_tables::@2
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@2
  return 
  to:@return
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(const byte) mul_tables_compare::i#0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  if(*((const byte*) mul_tables_compare::$2 + (byte) mul_tables_compare::i#10)==*((const byte*) mul_tables_compare::$3 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  if(*((const byte*) mul_tables_compare::$8 + (byte) mul_tables_compare::i#10)==*((const byte*) mul_tables_compare::$9 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10
  if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4

Inlining constant with var siblings (const word) init_mul_tables::sqr#0
Inlining constant with var siblings (const word) init_mul_tables::sqr#0
Inlining constant with var siblings (const word) init_mul_tables::sqr#0
Inlining constant with var siblings (const word) init_mul_tables::sqr#0
Inlining constant with var siblings (const byte) init_mul_tables::x_2#0
Inlining constant with var siblings (const byte) init_mul_tables::x_2#0
Inlining constant with var siblings (const byte) init_mul_tables::x_2#0
Inlining constant with var siblings (const byte) init_mul_tables::c#0
Inlining constant with var siblings (const byte) init_mul_tables::c#0
Inlining constant with var siblings (const byte*) init_mul_tables::sqr_hi#0
Inlining constant with var siblings (const byte*) init_mul_tables::sqr_hi#0
Inlining constant with var siblings (const byte*) init_mul_tables::sqr_lo#0
Inlining constant with var siblings (const byte*) init_mul_tables::sqr_lo#0
Inlining constant with var siblings (const byte) mul_tables_compare::i#0
Inlining constant with var siblings (const byte) mul_tables_compare::i#0
Constant inlined mul_tables_compare::i#0 = (byte/signed byte/word/signed word) 0
Constant inlined init_mul_tables::sqr_lo#0 = (const byte[512]) mul_sqr_lo#0+(byte/signed byte/word/signed word) 1
Constant inlined init_mul_tables::sqr#0 = (byte/signed byte/word/signed word) 0
Constant inlined mul_tables_compare::$3 = (const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256
Constant inlined mul_tables_compare::$2 = (const byte[512]) mul_sqr_hi#0+(word/signed word) 256
Constant inlined init_mul_tables::$8 = (const byte[512]) mul_sqr_lo#0+(word/signed word) 512
Constant inlined init_mul_tables::x_2#0 = (byte/signed byte/word/signed word) 0
Constant inlined init_mul_tables::c#0 = (byte/signed byte/word/signed word) 0
Constant inlined mul_tables_compare::$9 = (const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256
Constant inlined mul_tables_compare::$8 = (const byte[512]) mul_sqr_hi#0+(word/signed word) 256
Constant inlined init_mul_tables::sqr_hi#0 = (const byte[512]) mul_sqr_hi#0+(byte/signed byte/word/signed word) 1
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@4
main: scope:[main]  from @4
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
init_mul_tables: scope:[init_mul_tables]  from main
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  (byte) init_mul_tables::x_2#3 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@2/(byte) init_mul_tables::x_2#2 )
  (byte*) init_mul_tables::sqr_hi#2 ← phi( init_mul_tables/(const byte[512]) mul_sqr_hi#0+(byte/signed byte/word/signed word) 1 init_mul_tables::@2/(byte*) init_mul_tables::sqr_hi#1 )
  (byte*) init_mul_tables::sqr_lo#2 ← phi( init_mul_tables/(const byte[512]) mul_sqr_lo#0+(byte/signed byte/word/signed word) 1 init_mul_tables::@2/(byte*) init_mul_tables::sqr_lo#1 )
  (word) init_mul_tables::sqr#4 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 )
  (byte) init_mul_tables::c#2 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@2/(byte) init_mul_tables::c#1 )
  (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2
  (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1
  if((byte~) init_mul_tables::$2!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2
  to:init_mul_tables::@3
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@3
  (byte) init_mul_tables::x_2#2 ← phi( init_mul_tables::@1/(byte) init_mul_tables::x_2#3 init_mul_tables::@3/(byte) init_mul_tables::x_2#1 )
  (word) init_mul_tables::sqr#3 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#4 init_mul_tables::@3/(word) init_mul_tables::sqr#2 )
  (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5
  (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6
  (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2
  (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2
  if((byte*) init_mul_tables::sqr_lo#1!=(const byte[512]) mul_sqr_lo#0+(word/signed word) 512) goto init_mul_tables::@1
  to:init_mul_tables::@return
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4
  to:init_mul_tables::@2
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@2
  return 
  to:@return
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(byte/signed byte/word/signed word) 0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 )
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10
  if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1
  to:mul_tables_compare::@return
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4

FINAL SYMBOL TABLE
(label) @4
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 = ((byte*))(word) 53281
(byte[512]) asm_mul_sqr_hi
(const byte[512]) asm_mul_sqr_hi#0 = { fill( 512, 0) }
(byte[512]) asm_mul_sqr_lo
(const byte[512]) asm_mul_sqr_lo#0 = { fill( 512, 0) }
(void()) init_mul_tables()
(byte~) init_mul_tables::$2
(byte~) init_mul_tables::$5
(byte~) init_mul_tables::$6
(label) init_mul_tables::@1
(label) init_mul_tables::@2
(label) init_mul_tables::@3
(label) init_mul_tables::@return
(byte) init_mul_tables::c
(byte) init_mul_tables::c#1
(byte) init_mul_tables::c#2
(word) init_mul_tables::sqr
(word) init_mul_tables::sqr#1
(word) init_mul_tables::sqr#2
(word) init_mul_tables::sqr#3
(word) init_mul_tables::sqr#4
(byte*) init_mul_tables::sqr_hi
(byte*) init_mul_tables::sqr_hi#1
(byte*) init_mul_tables::sqr_hi#2
(byte*) init_mul_tables::sqr_lo
(byte*) init_mul_tables::sqr_lo#1
(byte*) init_mul_tables::sqr_lo#2
(byte) init_mul_tables::x_2
(byte) init_mul_tables::x_2#1
(byte) init_mul_tables::x_2#2
(byte) init_mul_tables::x_2#3
(void()) init_mul_tables_asm()
(label) init_mul_tables_asm::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte[512]) mul_sqr_hi
(const byte[512]) mul_sqr_hi#0 = { fill( 512, 0) }
(byte[512]) mul_sqr_lo
(const byte[512]) mul_sqr_lo#0 = { fill( 512, 0) }
(void()) mul_tables_compare()
(label) mul_tables_compare::@1
(label) mul_tables_compare::@2
(label) mul_tables_compare::@3
(label) mul_tables_compare::@4
(label) mul_tables_compare::@5
(label) mul_tables_compare::@6
(label) mul_tables_compare::@7
(label) mul_tables_compare::@8
(label) mul_tables_compare::@9
(label) mul_tables_compare::@return
(byte) mul_tables_compare::i
(byte) mul_tables_compare::i#1
(byte) mul_tables_compare::i#10

Block Sequence Planned @begin @4 @end main main::@1 main::@2 main::@return mul_tables_compare mul_tables_compare::@1 mul_tables_compare::@6 mul_tables_compare::@2 mul_tables_compare::@7 mul_tables_compare::@3 mul_tables_compare::@8 mul_tables_compare::@4 mul_tables_compare::@9 mul_tables_compare::@5 mul_tables_compare::@return init_mul_tables_asm init_mul_tables_asm::@return init_mul_tables init_mul_tables::@1 init_mul_tables::@3 init_mul_tables::@2 init_mul_tables::@return 
Added new block during phi lifting mul_tables_compare::@11(between mul_tables_compare::@5 and mul_tables_compare::@1)
Added new block during phi lifting init_mul_tables::@5(between init_mul_tables::@2 and init_mul_tables::@1)
Added new block during phi lifting init_mul_tables::@6(between init_mul_tables::@1 and init_mul_tables::@2)
Block Sequence Planned @begin @4 @end main main::@1 main::@2 main::@return mul_tables_compare mul_tables_compare::@1 mul_tables_compare::@6 mul_tables_compare::@2 mul_tables_compare::@7 mul_tables_compare::@3 mul_tables_compare::@8 mul_tables_compare::@4 mul_tables_compare::@9 mul_tables_compare::@5 mul_tables_compare::@return mul_tables_compare::@11 init_mul_tables_asm init_mul_tables_asm::@return init_mul_tables init_mul_tables::@1 init_mul_tables::@3 init_mul_tables::@2 init_mul_tables::@return init_mul_tables::@5 init_mul_tables::@6 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@4
@4: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @4
main: scope:[main]  from @4
  call init_mul_tables param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  call init_mul_tables_asm param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  call mul_tables_compare param-assignment
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@11
  (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(byte/signed byte/word/signed word) 0 mul_tables_compare::@11/(byte~) mul_tables_compare::i#11 )
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2
  to:mul_tables_compare::@6
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@2
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3
  to:mul_tables_compare::@7
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@3
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4
  to:mul_tables_compare::@8
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@4
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5
  to:mul_tables_compare::@9
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2
  to:mul_tables_compare::@5
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10
  if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@11
  to:mul_tables_compare::@return
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  return 
  to:@return
mul_tables_compare::@11: scope:[mul_tables_compare]  from mul_tables_compare::@5
  (byte~) mul_tables_compare::i#11 ← (byte) mul_tables_compare::i#1
  to:mul_tables_compare::@1
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  return 
  to:@return
init_mul_tables: scope:[init_mul_tables]  from main
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@5
  (byte) init_mul_tables::x_2#3 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@5/(byte~) init_mul_tables::x_2#5 )
  (byte*) init_mul_tables::sqr_hi#2 ← phi( init_mul_tables/(const byte[512]) mul_sqr_hi#0+(byte/signed byte/word/signed word) 1 init_mul_tables::@5/(byte*~) init_mul_tables::sqr_hi#5 )
  (byte*) init_mul_tables::sqr_lo#2 ← phi( init_mul_tables/(const byte[512]) mul_sqr_lo#0+(byte/signed byte/word/signed word) 1 init_mul_tables::@5/(byte*~) init_mul_tables::sqr_lo#5 )
  (word) init_mul_tables::sqr#4 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@5/(word~) init_mul_tables::sqr#6 )
  (byte) init_mul_tables::c#2 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@5/(byte~) init_mul_tables::c#5 )
  (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2
  (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1
  if((byte~) init_mul_tables::$2!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@6
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3
  (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4
  (word~) init_mul_tables::sqr#8 ← (word) init_mul_tables::sqr#2
  (byte~) init_mul_tables::x_2#7 ← (byte) init_mul_tables::x_2#1
  to:init_mul_tables::@2
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@6
  (byte) init_mul_tables::x_2#2 ← phi( init_mul_tables::@6/(byte~) init_mul_tables::x_2#6 init_mul_tables::@3/(byte~) init_mul_tables::x_2#7 )
  (word) init_mul_tables::sqr#3 ← phi( init_mul_tables::@6/(word~) init_mul_tables::sqr#7 init_mul_tables::@3/(word~) init_mul_tables::sqr#8 )
  (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5
  (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3
  *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6
  (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2
  (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2
  (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2
  if((byte*) init_mul_tables::sqr_lo#1!=(const byte[512]) mul_sqr_lo#0+(word/signed word) 512) goto init_mul_tables::@5
  to:init_mul_tables::@return
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@2
  return 
  to:@return
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@2
  (byte~) init_mul_tables::c#5 ← (byte) init_mul_tables::c#1
  (word~) init_mul_tables::sqr#6 ← (word) init_mul_tables::sqr#1
  (byte*~) init_mul_tables::sqr_lo#5 ← (byte*) init_mul_tables::sqr_lo#1
  (byte*~) init_mul_tables::sqr_hi#5 ← (byte*) init_mul_tables::sqr_hi#1
  (byte~) init_mul_tables::x_2#5 ← (byte) init_mul_tables::x_2#2
  to:init_mul_tables::@1
init_mul_tables::@6: scope:[init_mul_tables]  from init_mul_tables::@1
  (word~) init_mul_tables::sqr#7 ← (word) init_mul_tables::sqr#4
  (byte~) init_mul_tables::x_2#6 ← (byte) init_mul_tables::x_2#3
  to:init_mul_tables::@2

Adding NOP phi() at start of @begin
Adding NOP phi() at start of @4
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of init_mul_tables
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to init_mul_tables:5 init_mul_tables_asm:7 mul_tables_compare:9 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  [0] phi() [ ]
  to:@4
@4: scope:[]  from @begin
  [1] phi() [ ]
  [2] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @4
  [3] phi() [ ]
main: scope:[main]  from @4
  [4] phi() [ ]
  [5] call init_mul_tables param-assignment [ ]
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi() [ ]
  [7] call init_mul_tables_asm param-assignment [ ]
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi() [ ]
  [9] call mul_tables_compare param-assignment [ ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return  [ ]
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  [11] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5 [ ]
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@11
  [12] (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(byte/signed byte/word/signed word) 0 mul_tables_compare::@11/(byte~) mul_tables_compare::i#11 ) [ mul_tables_compare::i#10 ]
  [13] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@6
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  [14] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@2
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  [15] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@7
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  [16] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@3
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  [17] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@8
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  [18] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@4
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  [19] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@9
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  [20] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@5
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  [21] (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10 [ mul_tables_compare::i#1 ]
  [22] if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@11 [ mul_tables_compare::i#1 ]
  to:mul_tables_compare::@return
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  [23] return  [ ]
  to:@return
mul_tables_compare::@11: scope:[mul_tables_compare]  from mul_tables_compare::@5
  [24] (byte~) mul_tables_compare::i#11 ← (byte) mul_tables_compare::i#1 [ mul_tables_compare::i#11 ]
  to:mul_tables_compare::@1
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  [26] return  [ ]
  to:@return
init_mul_tables: scope:[init_mul_tables]  from main
  [27] phi() [ ]
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@5
  [28] (byte) init_mul_tables::x_2#3 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@5/(byte~) init_mul_tables::x_2#5 ) [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ]
  [28] (byte*) init_mul_tables::sqr_hi#2 ← phi( init_mul_tables/(const byte[512]) mul_sqr_hi#0+(byte/signed byte/word/signed word) 1 init_mul_tables::@5/(byte*~) init_mul_tables::sqr_hi#5 ) [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ]
  [28] (byte*) init_mul_tables::sqr_lo#2 ← phi( init_mul_tables/(const byte[512]) mul_sqr_lo#0+(byte/signed byte/word/signed word) 1 init_mul_tables::@5/(byte*~) init_mul_tables::sqr_lo#5 ) [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ]
  [28] (word) init_mul_tables::sqr#4 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@5/(word~) init_mul_tables::sqr#6 ) [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ]
  [28] (byte) init_mul_tables::c#2 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@5/(byte~) init_mul_tables::c#5 ) [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ]
  [29] (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ]
  [30] (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 init_mul_tables::$2 ]
  [31] if((byte~) init_mul_tables::$2!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@6 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ]
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  [32] (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 ]
  [33] (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 init_mul_tables::sqr#2 ]
  [34] (word~) init_mul_tables::sqr#8 ← (word) init_mul_tables::sqr#2 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 init_mul_tables::sqr#8 ]
  [35] (byte~) init_mul_tables::x_2#7 ← (byte) init_mul_tables::x_2#1 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::sqr#8 init_mul_tables::x_2#7 ]
  to:init_mul_tables::@2
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@3 init_mul_tables::@6
  [36] (byte) init_mul_tables::x_2#2 ← phi( init_mul_tables::@6/(byte~) init_mul_tables::x_2#6 init_mul_tables::@3/(byte~) init_mul_tables::x_2#7 ) [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::sqr#3 init_mul_tables::x_2#2 ]
  [36] (word) init_mul_tables::sqr#3 ← phi( init_mul_tables::@6/(word~) init_mul_tables::sqr#7 init_mul_tables::@3/(word~) init_mul_tables::sqr#8 ) [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::sqr#3 init_mul_tables::x_2#2 ]
  [37] (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::sqr#3 init_mul_tables::x_2#2 init_mul_tables::$5 ]
  [38] *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::sqr#3 init_mul_tables::x_2#2 ]
  [39] (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::sqr#3 init_mul_tables::x_2#2 init_mul_tables::$6 ]
  [40] *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::sqr#3 init_mul_tables::x_2#2 ]
  [41] (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr#3 init_mul_tables::x_2#2 init_mul_tables::sqr_hi#1 ]
  [42] (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr_hi#1 init_mul_tables::sqr#1 ]
  [43] (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2 [ init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr_hi#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 ]
  [44] if((byte*) init_mul_tables::sqr_lo#1!=(const byte[512]) mul_sqr_lo#0+(word/signed word) 512) goto init_mul_tables::@5 [ init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr_hi#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 ]
  to:init_mul_tables::@return
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@2
  [45] return  [ ]
  to:@return
init_mul_tables::@5: scope:[init_mul_tables]  from init_mul_tables::@2
  [46] (byte~) init_mul_tables::c#5 ← (byte) init_mul_tables::c#1 [ init_mul_tables::c#5 init_mul_tables::x_2#2 init_mul_tables::sqr_hi#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 ]
  [47] (word~) init_mul_tables::sqr#6 ← (word) init_mul_tables::sqr#1 [ init_mul_tables::c#5 init_mul_tables::sqr#6 init_mul_tables::x_2#2 init_mul_tables::sqr_hi#1 init_mul_tables::sqr_lo#1 ]
  [48] (byte*~) init_mul_tables::sqr_lo#5 ← (byte*) init_mul_tables::sqr_lo#1 [ init_mul_tables::c#5 init_mul_tables::sqr#6 init_mul_tables::sqr_lo#5 init_mul_tables::x_2#2 init_mul_tables::sqr_hi#1 ]
  [49] (byte*~) init_mul_tables::sqr_hi#5 ← (byte*) init_mul_tables::sqr_hi#1 [ init_mul_tables::c#5 init_mul_tables::sqr#6 init_mul_tables::sqr_lo#5 init_mul_tables::sqr_hi#5 init_mul_tables::x_2#2 ]
  [50] (byte~) init_mul_tables::x_2#5 ← (byte) init_mul_tables::x_2#2 [ init_mul_tables::c#5 init_mul_tables::sqr#6 init_mul_tables::sqr_lo#5 init_mul_tables::sqr_hi#5 init_mul_tables::x_2#5 ]
  to:init_mul_tables::@1
init_mul_tables::@6: scope:[init_mul_tables]  from init_mul_tables::@1
  [51] (word~) init_mul_tables::sqr#7 ← (word) init_mul_tables::sqr#4 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 init_mul_tables::sqr#7 ]
  [52] (byte~) init_mul_tables::x_2#6 ← (byte) init_mul_tables::x_2#3 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::sqr#7 init_mul_tables::x_2#6 ]
  to:init_mul_tables::@2

Created 8 initial phi equivalence classes
Coalesced [24] mul_tables_compare::i#11 ← mul_tables_compare::i#1
Coalesced [34] init_mul_tables::sqr#8 ← init_mul_tables::sqr#2
Coalesced [35] init_mul_tables::x_2#7 ← init_mul_tables::x_2#1
Coalesced [46] init_mul_tables::c#5 ← init_mul_tables::c#1
Coalesced [47] init_mul_tables::sqr#6 ← init_mul_tables::sqr#1
Coalesced [48] init_mul_tables::sqr_lo#5 ← init_mul_tables::sqr_lo#1
Coalesced [49] init_mul_tables::sqr_hi#5 ← init_mul_tables::sqr_hi#1
Coalesced [50] init_mul_tables::x_2#5 ← init_mul_tables::x_2#2
Coalesced [51] init_mul_tables::sqr#7 ← init_mul_tables::sqr#4
Coalesced (already) [52] init_mul_tables::x_2#6 ← init_mul_tables::x_2#3
Coalesced down to 6 phi equivalence classes
Culled Empty Block (label) mul_tables_compare::@11
Culled Empty Block (label) init_mul_tables::@5
Culled Empty Block (label) init_mul_tables::@6
Block Sequence Planned @begin @4 @end main main::@1 main::@2 main::@return mul_tables_compare mul_tables_compare::@1 mul_tables_compare::@6 mul_tables_compare::@2 mul_tables_compare::@7 mul_tables_compare::@3 mul_tables_compare::@8 mul_tables_compare::@4 mul_tables_compare::@9 mul_tables_compare::@5 mul_tables_compare::@return init_mul_tables_asm init_mul_tables_asm::@return init_mul_tables init_mul_tables::@1 init_mul_tables::@3 init_mul_tables::@2 init_mul_tables::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @4
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of init_mul_tables
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - BEFORE EFFECTIVE LIVE RANGES
@begin: scope:[]  from
  [0] phi() [ ]
  to:@4
@4: scope:[]  from @begin
  [1] phi() [ ]
  [2] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @4
  [3] phi() [ ]
main: scope:[main]  from @4
  [4] phi() [ ]
  [5] call init_mul_tables param-assignment [ ]
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi() [ ]
  [7] call init_mul_tables_asm param-assignment [ ]
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi() [ ]
  [9] call mul_tables_compare param-assignment [ ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return  [ ]
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  [11] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5 [ ]
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  [12] (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(byte/signed byte/word/signed word) 0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 ) [ mul_tables_compare::i#10 ]
  [13] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@6
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  [14] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@2
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  [15] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@7
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  [16] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@3
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  [17] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@8
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  [18] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@4
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  [19] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@9
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  [20] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ]
  to:mul_tables_compare::@5
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  [21] (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10 [ mul_tables_compare::i#1 ]
  [22] if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1 [ mul_tables_compare::i#1 ]
  to:mul_tables_compare::@return
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  [23] return  [ ]
  to:@return
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  [25] return  [ ]
  to:@return
init_mul_tables: scope:[init_mul_tables]  from main
  [26] phi() [ ]
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  [27] (byte) init_mul_tables::x_2#3 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@2/(byte) init_mul_tables::x_2#2 ) [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ]
  [27] (byte*) init_mul_tables::sqr_hi#2 ← phi( init_mul_tables/(const byte[512]) mul_sqr_hi#0+(byte/signed byte/word/signed word) 1 init_mul_tables::@2/(byte*) init_mul_tables::sqr_hi#1 ) [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ]
  [27] (byte*) init_mul_tables::sqr_lo#2 ← phi( init_mul_tables/(const byte[512]) mul_sqr_lo#0+(byte/signed byte/word/signed word) 1 init_mul_tables::@2/(byte*) init_mul_tables::sqr_lo#1 ) [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ]
  [27] (word) init_mul_tables::sqr#4 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 ) [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ]
  [27] (byte) init_mul_tables::c#2 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@2/(byte) init_mul_tables::c#1 ) [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ]
  [28] (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ]
  [29] (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 init_mul_tables::$2 ]
  [30] if((byte~) init_mul_tables::$2!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ]
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  [31] (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 ]
  [32] (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 init_mul_tables::sqr#2 ]
  to:init_mul_tables::@2
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@3
  [33] (byte) init_mul_tables::x_2#2 ← phi( init_mul_tables::@1/(byte) init_mul_tables::x_2#3 init_mul_tables::@3/(byte) init_mul_tables::x_2#1 ) [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ]
  [33] (word) init_mul_tables::sqr#3 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#4 init_mul_tables::@3/(word) init_mul_tables::sqr#2 ) [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ]
  [34] (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$5 ]
  [35] *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ]
  [36] (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$6 ]
  [37] *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ]
  [38] (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ]
  [39] (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ]
  [40] (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ]
  [41] if((byte*) init_mul_tables::sqr_lo#1!=(const byte[512]) mul_sqr_lo#0+(word/signed word) 512) goto init_mul_tables::@1 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ]
  to:init_mul_tables::@return
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@2
  [42] return  [ ]
  to:@return

CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@4
@4: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @4
  [3] phi() [ ] ( )
main: scope:[main]  from @4
  [4] phi() [ ] ( main:2 [ ] )
  [5] call init_mul_tables param-assignment [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi() [ ] ( main:2 [ ] )
  [7] call init_mul_tables_asm param-assignment [ ] ( main:2 [ ] )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi() [ ] ( main:2 [ ] )
  [9] call mul_tables_compare param-assignment [ ] ( main:2 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return  [ ] ( main:2 [ ] )
  to:@return
mul_tables_compare: scope:[mul_tables_compare]  from main::@2
  [11] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5 [ ] ( main:2::mul_tables_compare:9 [ ] )
  to:mul_tables_compare::@1
mul_tables_compare::@1: scope:[mul_tables_compare]  from mul_tables_compare mul_tables_compare::@5
  [12] (byte) mul_tables_compare::i#10 ← phi( mul_tables_compare/(byte/signed byte/word/signed word) 0 mul_tables_compare::@5/(byte) mul_tables_compare::i#1 ) [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] )
  [13] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] )
  to:mul_tables_compare::@6
mul_tables_compare::@6: scope:[mul_tables_compare]  from mul_tables_compare::@1
  [14] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] )
  to:mul_tables_compare::@2
mul_tables_compare::@2: scope:[mul_tables_compare]  from mul_tables_compare::@1 mul_tables_compare::@6
  [15] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] )
  to:mul_tables_compare::@7
mul_tables_compare::@7: scope:[mul_tables_compare]  from mul_tables_compare::@2
  [16] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] )
  to:mul_tables_compare::@3
mul_tables_compare::@3: scope:[mul_tables_compare]  from mul_tables_compare::@2 mul_tables_compare::@7
  [17] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] )
  to:mul_tables_compare::@8
mul_tables_compare::@8: scope:[mul_tables_compare]  from mul_tables_compare::@3
  [18] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] )
  to:mul_tables_compare::@4
mul_tables_compare::@4: scope:[mul_tables_compare]  from mul_tables_compare::@3 mul_tables_compare::@8
  [19] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] )
  to:mul_tables_compare::@9
mul_tables_compare::@9: scope:[mul_tables_compare]  from mul_tables_compare::@4
  [20] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] )
  to:mul_tables_compare::@5
mul_tables_compare::@5: scope:[mul_tables_compare]  from mul_tables_compare::@4 mul_tables_compare::@9
  [21] (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10 [ mul_tables_compare::i#1 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#1 ] )
  [22] if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1 [ mul_tables_compare::i#1 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#1 ] )
  to:mul_tables_compare::@return
mul_tables_compare::@return: scope:[mul_tables_compare]  from mul_tables_compare::@5
  [23] return  [ ] ( main:2::mul_tables_compare:9 [ ] )
  to:@return
init_mul_tables_asm: scope:[init_mul_tables_asm]  from main::@1
  asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
  to:init_mul_tables_asm::@return
init_mul_tables_asm::@return: scope:[init_mul_tables_asm]  from init_mul_tables_asm
  [25] return  [ ] ( main:2::init_mul_tables_asm:7 [ ] )
  to:@return
init_mul_tables: scope:[init_mul_tables]  from main
  [26] phi() [ ] ( main:2::init_mul_tables:5 [ ] )
  to:init_mul_tables::@1
init_mul_tables::@1: scope:[init_mul_tables]  from init_mul_tables init_mul_tables::@2
  [27] (byte) init_mul_tables::x_2#3 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@2/(byte) init_mul_tables::x_2#2 ) [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ] )
  [27] (byte*) init_mul_tables::sqr_hi#2 ← phi( init_mul_tables/(const byte[512]) mul_sqr_hi#0+(byte/signed byte/word/signed word) 1 init_mul_tables::@2/(byte*) init_mul_tables::sqr_hi#1 ) [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ] )
  [27] (byte*) init_mul_tables::sqr_lo#2 ← phi( init_mul_tables/(const byte[512]) mul_sqr_lo#0+(byte/signed byte/word/signed word) 1 init_mul_tables::@2/(byte*) init_mul_tables::sqr_lo#1 ) [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ] )
  [27] (word) init_mul_tables::sqr#4 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@2/(word) init_mul_tables::sqr#1 ) [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ] )
  [27] (byte) init_mul_tables::c#2 ← phi( init_mul_tables/(byte/signed byte/word/signed word) 0 init_mul_tables::@2/(byte) init_mul_tables::c#1 ) [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::c#2 init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 ] )
  [28] (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ] )
  [29] (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 init_mul_tables::$2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 init_mul_tables::$2 ] )
  [30] if((byte~) init_mul_tables::$2!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ] )
  to:init_mul_tables::@3
init_mul_tables::@3: scope:[init_mul_tables]  from init_mul_tables::@1
  [31] (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 ] )
  [32] (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 init_mul_tables::sqr#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 init_mul_tables::sqr#2 ] )
  to:init_mul_tables::@2
init_mul_tables::@2: scope:[init_mul_tables]  from init_mul_tables::@1 init_mul_tables::@3
  [33] (byte) init_mul_tables::x_2#2 ← phi( init_mul_tables::@1/(byte) init_mul_tables::x_2#3 init_mul_tables::@3/(byte) init_mul_tables::x_2#1 ) [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] )
  [33] (word) init_mul_tables::sqr#3 ← phi( init_mul_tables::@1/(word) init_mul_tables::sqr#4 init_mul_tables::@3/(word) init_mul_tables::sqr#2 ) [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] )
  [34] (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$5 ] )
  [35] *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] )
  [36] (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$6 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$6 ] )
  [37] *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] )
  [38] (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] )
  [39] (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] )
  [40] (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] )
  [41] if((byte*) init_mul_tables::sqr_lo#1!=(const byte[512]) mul_sqr_lo#0+(word/signed word) 512) goto init_mul_tables::@1 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] )
  to:init_mul_tables::@return
init_mul_tables::@return: scope:[init_mul_tables]  from init_mul_tables::@2
  [42] return  [ ] ( main:2::init_mul_tables:5 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@4 dominated by  @begin @4 
@end dominated by  @end @begin @4 
main dominated by  main @begin @4 
main::@1 dominated by  main main::@1 @begin @4 
main::@2 dominated by  main main::@1 main::@2 @begin @4 
main::@return dominated by  main::@return main main::@1 main::@2 @begin @4 
mul_tables_compare dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 
mul_tables_compare::@1 dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 mul_tables_compare::@1 
mul_tables_compare::@6 dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 mul_tables_compare::@1 mul_tables_compare::@6 
mul_tables_compare::@2 dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 mul_tables_compare::@1 mul_tables_compare::@2 
mul_tables_compare::@7 dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 mul_tables_compare::@1 mul_tables_compare::@2 mul_tables_compare::@7 
mul_tables_compare::@3 dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 mul_tables_compare::@1 mul_tables_compare::@3 mul_tables_compare::@2 
mul_tables_compare::@8 dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 mul_tables_compare::@1 mul_tables_compare::@3 mul_tables_compare::@2 mul_tables_compare::@8 
mul_tables_compare::@4 dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 mul_tables_compare::@1 mul_tables_compare::@3 mul_tables_compare::@2 mul_tables_compare::@4 
mul_tables_compare::@9 dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 mul_tables_compare::@1 mul_tables_compare::@3 mul_tables_compare::@2 mul_tables_compare::@4 mul_tables_compare::@9 
mul_tables_compare::@5 dominated by  main main::@1 main::@2 @begin mul_tables_compare @4 mul_tables_compare::@1 mul_tables_compare::@3 mul_tables_compare::@2 mul_tables_compare::@5 mul_tables_compare::@4 
mul_tables_compare::@return dominated by  main main::@1 main::@2 @begin mul_tables_compare mul_tables_compare::@return @4 mul_tables_compare::@1 mul_tables_compare::@3 mul_tables_compare::@2 mul_tables_compare::@5 mul_tables_compare::@4 
init_mul_tables_asm dominated by  main init_mul_tables_asm main::@1 @begin @4 
init_mul_tables_asm::@return dominated by  main init_mul_tables_asm::@return init_mul_tables_asm main::@1 @begin @4 
init_mul_tables dominated by  main init_mul_tables @begin @4 
init_mul_tables::@1 dominated by  main init_mul_tables @begin @4 init_mul_tables::@1 
init_mul_tables::@3 dominated by  main init_mul_tables @begin @4 init_mul_tables::@1 init_mul_tables::@3 
init_mul_tables::@2 dominated by  main init_mul_tables @begin @4 init_mul_tables::@2 init_mul_tables::@1 
init_mul_tables::@return dominated by  main init_mul_tables init_mul_tables::@return @begin @4 init_mul_tables::@2 init_mul_tables::@1 

Found back edge: Loop head: mul_tables_compare::@1 tails: mul_tables_compare::@5 blocks: null
Found back edge: Loop head: init_mul_tables::@1 tails: init_mul_tables::@2 blocks: null
Populated: Loop head: mul_tables_compare::@1 tails: mul_tables_compare::@5 blocks: mul_tables_compare::@5 mul_tables_compare::@4 mul_tables_compare::@9 mul_tables_compare::@3 mul_tables_compare::@8 mul_tables_compare::@2 mul_tables_compare::@7 mul_tables_compare::@1 mul_tables_compare::@6 
Populated: Loop head: init_mul_tables::@1 tails: init_mul_tables::@2 blocks: init_mul_tables::@2 init_mul_tables::@1 init_mul_tables::@3 
NATURAL LOOPS
Loop head: mul_tables_compare::@1 tails: mul_tables_compare::@5 blocks: mul_tables_compare::@5 mul_tables_compare::@4 mul_tables_compare::@9 mul_tables_compare::@3 mul_tables_compare::@8 mul_tables_compare::@2 mul_tables_compare::@7 mul_tables_compare::@1 mul_tables_compare::@6 
Loop head: init_mul_tables::@1 tails: init_mul_tables::@2 blocks: init_mul_tables::@2 init_mul_tables::@1 init_mul_tables::@3 

Found 0 loops in scope []
Found 0 loops in scope [main]
Found 1 loops in scope [init_mul_tables]
  Loop head: init_mul_tables::@1 tails: init_mul_tables::@2 blocks: init_mul_tables::@2 init_mul_tables::@1 init_mul_tables::@3 
Found 0 loops in scope [init_mul_tables_asm]
Found 1 loops in scope [mul_tables_compare]
  Loop head: mul_tables_compare::@1 tails: mul_tables_compare::@5 blocks: mul_tables_compare::@5 mul_tables_compare::@4 mul_tables_compare::@9 mul_tables_compare::@3 mul_tables_compare::@8 mul_tables_compare::@2 mul_tables_compare::@7 mul_tables_compare::@1 mul_tables_compare::@6 
NATURAL LOOPS WITH DEPTH
Loop head: mul_tables_compare::@1 tails: mul_tables_compare::@5 blocks: mul_tables_compare::@5 mul_tables_compare::@4 mul_tables_compare::@9 mul_tables_compare::@3 mul_tables_compare::@8 mul_tables_compare::@2 mul_tables_compare::@7 mul_tables_compare::@1 mul_tables_compare::@6  depth: 1
Loop head: init_mul_tables::@1 tails: init_mul_tables::@2 blocks: init_mul_tables::@2 init_mul_tables::@1 init_mul_tables::@3  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte[512]) asm_mul_sqr_hi
(byte[512]) asm_mul_sqr_lo
(void()) init_mul_tables()
(byte~) init_mul_tables::$2 22.0
(byte~) init_mul_tables::$5 22.0
(byte~) init_mul_tables::$6 22.0
(byte) init_mul_tables::c
(byte) init_mul_tables::c#1 2.357142857142857
(byte) init_mul_tables::c#2 22.0
(word) init_mul_tables::sqr
(word) init_mul_tables::sqr#1 7.333333333333333
(word) init_mul_tables::sqr#2 22.0
(word) init_mul_tables::sqr#3 9.166666666666666
(word) init_mul_tables::sqr#4 6.6000000000000005
(byte*) init_mul_tables::sqr_hi
(byte*) init_mul_tables::sqr_hi#1 5.5
(byte*) init_mul_tables::sqr_hi#2 3.0
(byte*) init_mul_tables::sqr_lo
(byte*) init_mul_tables::sqr_lo#1 16.5
(byte*) init_mul_tables::sqr_lo#2 2.5384615384615383
(byte) init_mul_tables::x_2
(byte) init_mul_tables::x_2#1 11.0
(byte) init_mul_tables::x_2#2 4.888888888888889
(byte) init_mul_tables::x_2#3 8.25
(void()) init_mul_tables_asm()
(void()) main()
(byte[512]) mul_sqr_hi
(byte[512]) mul_sqr_lo
(void()) mul_tables_compare()
(byte) mul_tables_compare::i
(byte) mul_tables_compare::i#1 16.5
(byte) mul_tables_compare::i#10 12.222222222222221

Initial phi equivalence classes
[ mul_tables_compare::i#10 mul_tables_compare::i#1 ]
[ init_mul_tables::c#2 init_mul_tables::c#1 ]
[ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_lo#1 ]
[ init_mul_tables::sqr_hi#2 init_mul_tables::sqr_hi#1 ]
[ init_mul_tables::x_2#3 init_mul_tables::x_2#2 init_mul_tables::x_2#1 ]
[ init_mul_tables::sqr#3 init_mul_tables::sqr#4 init_mul_tables::sqr#1 init_mul_tables::sqr#2 ]
Added variable init_mul_tables::$2 to zero page equivalence class [ init_mul_tables::$2 ]
Added variable init_mul_tables::$5 to zero page equivalence class [ init_mul_tables::$5 ]
Added variable init_mul_tables::$6 to zero page equivalence class [ init_mul_tables::$6 ]
Complete equivalence classes
[ mul_tables_compare::i#10 mul_tables_compare::i#1 ]
[ init_mul_tables::c#2 init_mul_tables::c#1 ]
[ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_lo#1 ]
[ init_mul_tables::sqr_hi#2 init_mul_tables::sqr_hi#1 ]
[ init_mul_tables::x_2#3 init_mul_tables::x_2#2 init_mul_tables::x_2#1 ]
[ init_mul_tables::sqr#3 init_mul_tables::sqr#4 init_mul_tables::sqr#1 init_mul_tables::sqr#2 ]
[ init_mul_tables::$2 ]
[ init_mul_tables::$5 ]
[ init_mul_tables::$6 ]
Allocated zp ZP_BYTE:2 [ mul_tables_compare::i#10 mul_tables_compare::i#1 ]
Allocated zp ZP_BYTE:3 [ init_mul_tables::c#2 init_mul_tables::c#1 ]
Allocated zp ZP_WORD:4 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_lo#1 ]
Allocated zp ZP_WORD:6 [ init_mul_tables::sqr_hi#2 init_mul_tables::sqr_hi#1 ]
Allocated zp ZP_BYTE:8 [ init_mul_tables::x_2#3 init_mul_tables::x_2#2 init_mul_tables::x_2#1 ]
Allocated zp ZP_WORD:9 [ init_mul_tables::sqr#3 init_mul_tables::sqr#4 init_mul_tables::sqr#1 init_mul_tables::sqr#2 ]
Allocated zp ZP_BYTE:11 [ init_mul_tables::$2 ]
Allocated zp ZP_BYTE:12 [ init_mul_tables::$5 ]
Allocated zp ZP_BYTE:13 [ init_mul_tables::$6 ]
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const BGCOL = $d021
  mul_sqr_lo: .fill 512, 0
  mul_sqr_hi: .fill 512, 0
  asm_mul_sqr_lo: .fill 512, 0
  asm_mul_sqr_hi: .fill 512, 0
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @4 [phi:@begin->@4]
b4_from_bbegin:
  jmp b4
//SEG4 @4
b4:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @4 to main [phi:@4->main]
main_from_b4:
  jsr main
//SEG7 [3] phi from @4 to @end [phi:@4->@end]
bend_from_b4:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call init_mul_tables param-assignment [ ] ( main:2 [ ] )
  //SEG11 [26] phi from main to init_mul_tables [phi:main->init_mul_tables]
  init_mul_tables_from_main:
    jsr init_mul_tables
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [7] call init_mul_tables_asm param-assignment [ ] ( main:2 [ ] )
    jsr init_mul_tables_asm
  //SEG15 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG16 main::@2
  b2:
  //SEG17 [9] call mul_tables_compare param-assignment [ ] ( main:2 [ ] )
    jsr mul_tables_compare
    jmp breturn
  //SEG18 main::@return
  breturn:
  //SEG19 [10] return  [ ] ( main:2 [ ] )
    rts
}
//SEG20 mul_tables_compare
mul_tables_compare: {
    .label i = 2
  //SEG21 [11] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5 [ ] ( main:2::mul_tables_compare:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #5
    sta BGCOL
  //SEG22 [12] phi from mul_tables_compare to mul_tables_compare::@1 [phi:mul_tables_compare->mul_tables_compare::@1]
  b1_from_mul_tables_compare:
  //SEG23 [12] phi (byte) mul_tables_compare::i#10 = (byte/signed byte/word/signed word) 0 [phi:mul_tables_compare->mul_tables_compare::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG24 [12] phi from mul_tables_compare::@5 to mul_tables_compare::@1 [phi:mul_tables_compare::@5->mul_tables_compare::@1]
  b1_from_b5:
  //SEG25 [12] phi (byte) mul_tables_compare::i#10 = (byte) mul_tables_compare::i#1 [phi:mul_tables_compare::@5->mul_tables_compare::@1#0] -- register_copy 
    jmp b1
  //SEG26 mul_tables_compare::@1
  b1:
  //SEG27 [13] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuz1_eq_pbuc2_derefidx_vbuz1_then_la1 
    lda mul_sqr_lo,x
    cmp asm_mul_sqr_lo,x
    beq b2
    ldx i
    jmp b6
  //SEG28 mul_tables_compare::@6
  b6:
  //SEG29 [14] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
    jmp b2
  //SEG30 mul_tables_compare::@2
  b2:
  //SEG31 [15] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuz1_eq_pbuc2_derefidx_vbuz1_then_la1 
    lda mul_sqr_hi+$100,x
    cmp asm_mul_sqr_hi+$100,x
    beq b3
    ldx i
    jmp b7
  //SEG32 mul_tables_compare::@7
  b7:
  //SEG33 [16] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
    jmp b3
  //SEG34 mul_tables_compare::@3
  b3:
  //SEG35 [17] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuz1_eq_pbuc2_derefidx_vbuz1_then_la1 
    lda mul_sqr_lo,x
    cmp asm_mul_sqr_lo,x
    beq b4
    ldx i
    jmp b8
  //SEG36 mul_tables_compare::@8
  b8:
  //SEG37 [18] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
    jmp b4
  //SEG38 mul_tables_compare::@4
  b4:
  //SEG39 [19] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuz1_eq_pbuc2_derefidx_vbuz1_then_la1 
    lda mul_sqr_hi+$100,x
    cmp asm_mul_sqr_hi+$100,x
    beq b5
    ldx i
    jmp b9
  //SEG40 mul_tables_compare::@9
  b9:
  //SEG41 [20] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
    jmp b5
  //SEG42 mul_tables_compare::@5
  b5:
  //SEG43 [21] (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10 [ mul_tables_compare::i#1 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG44 [22] if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1 [ mul_tables_compare::i#1 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#1 ] ) -- vbuz1_neq_0_then_la1 
    lda i
    bne b1_from_b5
    jmp breturn
  //SEG45 mul_tables_compare::@return
  breturn:
  //SEG46 [23] return  [ ] ( main:2::mul_tables_compare:9 [ ] )
    rts
}
//SEG47 init_mul_tables_asm
init_mul_tables_asm: {
  //SEG48 asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
    ldx #0
    txa
    .byte $c9
  lb1:
    tya
    adc #0
  ml1:
    sta asm_mul_sqr_hi,x
    tay
    cmp #$40
    txa
    ror
  ml9:
    adc #0
    sta ml9+1
    inx
  ml0:
    sta asm_mul_sqr_lo,x
    bne lb1
    inc ml0+2
    inc ml1+2
    clc
    iny
    bne lb1
    jmp breturn
  //SEG49 init_mul_tables_asm::@return
  breturn:
  //SEG50 [25] return  [ ] ( main:2::init_mul_tables_asm:7 [ ] )
    rts
}
//SEG51 init_mul_tables
init_mul_tables: {
    .label _2 = $b
    .label _5 = $c
    .label _6 = $d
    .label c = 3
    .label sqr_hi = 6
    .label sqr = 9
    .label sqr_lo = 4
    .label x_2 = 8
  //SEG52 [27] phi from init_mul_tables to init_mul_tables::@1 [phi:init_mul_tables->init_mul_tables::@1]
  b1_from_init_mul_tables:
  //SEG53 [27] phi (byte) init_mul_tables::x_2#3 = (byte/signed byte/word/signed word) 0 [phi:init_mul_tables->init_mul_tables::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta x_2
  //SEG54 [27] phi (byte*) init_mul_tables::sqr_hi#2 = (const byte[512]) mul_sqr_hi#0+(byte/signed byte/word/signed word) 1 [phi:init_mul_tables->init_mul_tables::@1#1] -- pbuz1=pbuc1 
    lda #<mul_sqr_hi+1
    sta sqr_hi
    lda #>mul_sqr_hi+1
    sta sqr_hi+1
  //SEG55 [27] phi (byte*) init_mul_tables::sqr_lo#2 = (const byte[512]) mul_sqr_lo#0+(byte/signed byte/word/signed word) 1 [phi:init_mul_tables->init_mul_tables::@1#2] -- pbuz1=pbuc1 
    lda #<mul_sqr_lo+1
    sta sqr_lo
    lda #>mul_sqr_lo+1
    sta sqr_lo+1
  //SEG56 [27] phi (word) init_mul_tables::sqr#4 = (byte/signed byte/word/signed word) 0 [phi:init_mul_tables->init_mul_tables::@1#3] -- vwuz1=vbuc1 
    lda #0
    sta sqr
    lda #0
    sta sqr+1
  //SEG57 [27] phi (byte) init_mul_tables::c#2 = (byte/signed byte/word/signed word) 0 [phi:init_mul_tables->init_mul_tables::@1#4] -- vbuz1=vbuc1 
    lda #0
    sta c
    jmp b1
  //SEG58 [27] phi from init_mul_tables::@2 to init_mul_tables::@1 [phi:init_mul_tables::@2->init_mul_tables::@1]
  b1_from_b2:
  //SEG59 [27] phi (byte) init_mul_tables::x_2#3 = (byte) init_mul_tables::x_2#2 [phi:init_mul_tables::@2->init_mul_tables::@1#0] -- register_copy 
  //SEG60 [27] phi (byte*) init_mul_tables::sqr_hi#2 = (byte*) init_mul_tables::sqr_hi#1 [phi:init_mul_tables::@2->init_mul_tables::@1#1] -- register_copy 
  //SEG61 [27] phi (byte*) init_mul_tables::sqr_lo#2 = (byte*) init_mul_tables::sqr_lo#1 [phi:init_mul_tables::@2->init_mul_tables::@1#2] -- register_copy 
  //SEG62 [27] phi (word) init_mul_tables::sqr#4 = (word) init_mul_tables::sqr#1 [phi:init_mul_tables::@2->init_mul_tables::@1#3] -- register_copy 
  //SEG63 [27] phi (byte) init_mul_tables::c#2 = (byte) init_mul_tables::c#1 [phi:init_mul_tables::@2->init_mul_tables::@1#4] -- register_copy 
    jmp b1
  //SEG64 init_mul_tables::@1
  b1:
  //SEG65 [28] (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ] ) -- vbuz1=_inc_vbuz1 
    inc c
  //SEG66 [29] (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 init_mul_tables::$2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 init_mul_tables::$2 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda c
    and #1
    sta _2
  //SEG67 [30] if((byte~) init_mul_tables::$2!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ] ) -- vbuz1_neq_0_then_la1 
    lda _2
    bne b2_from_b1
    jmp b3
  //SEG68 init_mul_tables::@3
  b3:
  //SEG69 [31] (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 ] ) -- vbuz1=_inc_vbuz1 
    inc x_2
  //SEG70 [32] (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 init_mul_tables::sqr#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 init_mul_tables::sqr#2 ] ) -- vwuz1=_inc_vwuz1 
    inc sqr
    bne !+
    inc sqr+1
  !:
  //SEG71 [33] phi from init_mul_tables::@1 init_mul_tables::@3 to init_mul_tables::@2 [phi:init_mul_tables::@1/init_mul_tables::@3->init_mul_tables::@2]
  b2_from_b1:
  b2_from_b3:
  //SEG72 [33] phi (byte) init_mul_tables::x_2#2 = (byte) init_mul_tables::x_2#3 [phi:init_mul_tables::@1/init_mul_tables::@3->init_mul_tables::@2#0] -- register_copy 
  //SEG73 [33] phi (word) init_mul_tables::sqr#3 = (word) init_mul_tables::sqr#4 [phi:init_mul_tables::@1/init_mul_tables::@3->init_mul_tables::@2#1] -- register_copy 
    jmp b2
  //SEG74 init_mul_tables::@2
  b2:
  //SEG75 [34] (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$5 ] ) -- vbuz1=_lo_vwuz2 
    lda sqr
    sta _5
  //SEG76 [35] *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ) -- _deref_pbuz1=vbuz2 
    ldy #0
    lda _5
    sta (sqr_lo),y
  //SEG77 [36] (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$6 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$6 ] ) -- vbuz1=_hi_vwuz2 
    lda sqr+1
    sta _6
  //SEG78 [37] *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ) -- _deref_pbuz1=vbuz2 
    ldy #0
    lda _6
    sta (sqr_hi),y
  //SEG79 [38] (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ) -- pbuz1=_inc_pbuz1 
    inc sqr_hi
    bne !+
    inc sqr_hi+1
  !:
  //SEG80 [39] (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ) -- vwuz1=vwuz1_plus_vbuz2 
    lda x_2
    clc
    adc sqr
    sta sqr
    bcc !+
    inc sqr+1
  !:
  //SEG81 [40] (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ) -- pbuz1=_inc_pbuz1 
    inc sqr_lo
    bne !+
    inc sqr_lo+1
  !:
  //SEG82 [41] if((byte*) init_mul_tables::sqr_lo#1!=(const byte[512]) mul_sqr_lo#0+(word/signed word) 512) goto init_mul_tables::@1 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sqr_lo+1
    cmp #>mul_sqr_lo+$200
    bne b1_from_b2
    lda sqr_lo
    cmp #<mul_sqr_lo+$200
    bne b1_from_b2
    jmp breturn
  //SEG83 init_mul_tables::@return
  breturn:
  //SEG84 [42] return  [ ] ( main:2::init_mul_tables:5 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [11] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5 [ ] ( main:2::mul_tables_compare:9 [ ] ) always clobbers reg byte a 
Statement [13] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ mul_tables_compare::i#10 mul_tables_compare::i#1 ]
Statement [14] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [15] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [16] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [17] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [18] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [19] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [20] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 } always clobbers reg byte a reg byte x reg byte y 
Statement [29] (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 init_mul_tables::$2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 init_mul_tables::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ init_mul_tables::x_2#3 init_mul_tables::x_2#2 init_mul_tables::x_2#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ init_mul_tables::c#2 init_mul_tables::c#1 ]
Statement [34] (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$5 ] ) always clobbers reg byte a 
Statement [35] *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:3 [ init_mul_tables::c#2 init_mul_tables::c#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:8 [ init_mul_tables::x_2#3 init_mul_tables::x_2#2 init_mul_tables::x_2#1 ]
Statement [36] (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$6 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$6 ] ) always clobbers reg byte a 
Statement [37] *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ) always clobbers reg byte y 
Statement [39] (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ) always clobbers reg byte a 
Statement [41] if((byte*) init_mul_tables::sqr_lo#1!=(const byte[512]) mul_sqr_lo#0+(word/signed word) 512) goto init_mul_tables::@1 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ) always clobbers reg byte a 
Statement [11] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5 [ ] ( main:2::mul_tables_compare:9 [ ] ) always clobbers reg byte a 
Statement [13] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [14] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [15] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [16] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [17] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [18] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [19] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement [20] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) always clobbers reg byte a 
Statement asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 } always clobbers reg byte a reg byte x reg byte y 
Statement [29] (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 init_mul_tables::$2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 init_mul_tables::$2 ] ) always clobbers reg byte a 
Statement [34] (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$5 ] ) always clobbers reg byte a 
Statement [35] *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ) always clobbers reg byte y 
Statement [36] (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$6 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$6 ] ) always clobbers reg byte a 
Statement [37] *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ) always clobbers reg byte y 
Statement [39] (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ) always clobbers reg byte a 
Statement [41] if((byte*) init_mul_tables::sqr_lo#1!=(const byte[512]) mul_sqr_lo#0+(word/signed word) 512) goto init_mul_tables::@1 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ mul_tables_compare::i#10 mul_tables_compare::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ init_mul_tables::c#2 init_mul_tables::c#1 ] : zp ZP_BYTE:3 , reg byte x , 
Potential registers zp ZP_WORD:4 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_lo#1 ] : zp ZP_WORD:4 , 
Potential registers zp ZP_WORD:6 [ init_mul_tables::sqr_hi#2 init_mul_tables::sqr_hi#1 ] : zp ZP_WORD:6 , 
Potential registers zp ZP_BYTE:8 [ init_mul_tables::x_2#3 init_mul_tables::x_2#2 init_mul_tables::x_2#1 ] : zp ZP_BYTE:8 , reg byte x , 
Potential registers zp ZP_WORD:9 [ init_mul_tables::sqr#3 init_mul_tables::sqr#4 init_mul_tables::sqr#1 init_mul_tables::sqr#2 ] : zp ZP_WORD:9 , 
Potential registers zp ZP_BYTE:11 [ init_mul_tables::$2 ] : zp ZP_BYTE:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ init_mul_tables::$5 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ init_mul_tables::$6 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [init_mul_tables] 45.1: zp ZP_WORD:9 [ init_mul_tables::sqr#3 init_mul_tables::sqr#4 init_mul_tables::sqr#1 init_mul_tables::sqr#2 ] 24.36: zp ZP_BYTE:3 [ init_mul_tables::c#2 init_mul_tables::c#1 ] 24.14: zp ZP_BYTE:8 [ init_mul_tables::x_2#3 init_mul_tables::x_2#2 init_mul_tables::x_2#1 ] 22: zp ZP_BYTE:11 [ init_mul_tables::$2 ] 22: zp ZP_BYTE:12 [ init_mul_tables::$5 ] 22: zp ZP_BYTE:13 [ init_mul_tables::$6 ] 19.04: zp ZP_WORD:4 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_lo#1 ] 8.5: zp ZP_WORD:6 [ init_mul_tables::sqr_hi#2 init_mul_tables::sqr_hi#1 ] 
Uplift Scope [mul_tables_compare] 28.72: zp ZP_BYTE:2 [ mul_tables_compare::i#10 mul_tables_compare::i#1 ] 
Uplift Scope [main] 
Uplift Scope [init_mul_tables_asm] 
Uplift Scope [] 

Uplifting [init_mul_tables] best 3127 combination zp ZP_WORD:9 [ init_mul_tables::sqr#3 init_mul_tables::sqr#4 init_mul_tables::sqr#1 init_mul_tables::sqr#2 ] reg byte x [ init_mul_tables::c#2 init_mul_tables::c#1 ] zp ZP_BYTE:8 [ init_mul_tables::x_2#3 init_mul_tables::x_2#2 init_mul_tables::x_2#1 ] reg byte a [ init_mul_tables::$2 ] reg byte a [ init_mul_tables::$5 ] reg byte a [ init_mul_tables::$6 ] zp ZP_WORD:4 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_lo#1 ] zp ZP_WORD:6 [ init_mul_tables::sqr_hi#2 init_mul_tables::sqr_hi#1 ] 
Uplifting [mul_tables_compare] best 2937 combination reg byte x [ mul_tables_compare::i#10 mul_tables_compare::i#1 ] 
Uplifting [main] best 2937 combination 
Uplifting [init_mul_tables_asm] best 2937 combination 
Uplifting [] best 2937 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ init_mul_tables::x_2#3 init_mul_tables::x_2#2 init_mul_tables::x_2#1 ]
Uplifting [init_mul_tables] best 2937 combination zp ZP_BYTE:8 [ init_mul_tables::x_2#3 init_mul_tables::x_2#2 init_mul_tables::x_2#1 ] 
Allocated (was zp ZP_WORD:4) zp ZP_WORD:2 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_lo#1 ]
Allocated (was zp ZP_WORD:6) zp ZP_WORD:4 [ init_mul_tables::sqr_hi#2 init_mul_tables::sqr_hi#1 ]
Allocated (was zp ZP_BYTE:8) zp ZP_BYTE:6 [ init_mul_tables::x_2#3 init_mul_tables::x_2#2 init_mul_tables::x_2#1 ]
Allocated (was zp ZP_WORD:9) zp ZP_WORD:7 [ init_mul_tables::sqr#3 init_mul_tables::sqr#4 init_mul_tables::sqr#1 init_mul_tables::sqr#2 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const BGCOL = $d021
  mul_sqr_lo: .fill 512, 0
  mul_sqr_hi: .fill 512, 0
  asm_mul_sqr_lo: .fill 512, 0
  asm_mul_sqr_hi: .fill 512, 0
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @4 [phi:@begin->@4]
b4_from_bbegin:
  jmp b4
//SEG4 @4
b4:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @4 to main [phi:@4->main]
main_from_b4:
  jsr main
//SEG7 [3] phi from @4 to @end [phi:@4->@end]
bend_from_b4:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call init_mul_tables param-assignment [ ] ( main:2 [ ] )
  //SEG11 [26] phi from main to init_mul_tables [phi:main->init_mul_tables]
  init_mul_tables_from_main:
    jsr init_mul_tables
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [7] call init_mul_tables_asm param-assignment [ ] ( main:2 [ ] )
    jsr init_mul_tables_asm
  //SEG15 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG16 main::@2
  b2:
  //SEG17 [9] call mul_tables_compare param-assignment [ ] ( main:2 [ ] )
    jsr mul_tables_compare
    jmp breturn
  //SEG18 main::@return
  breturn:
  //SEG19 [10] return  [ ] ( main:2 [ ] )
    rts
}
//SEG20 mul_tables_compare
mul_tables_compare: {
  //SEG21 [11] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5 [ ] ( main:2::mul_tables_compare:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #5
    sta BGCOL
  //SEG22 [12] phi from mul_tables_compare to mul_tables_compare::@1 [phi:mul_tables_compare->mul_tables_compare::@1]
  b1_from_mul_tables_compare:
  //SEG23 [12] phi (byte) mul_tables_compare::i#10 = (byte/signed byte/word/signed word) 0 [phi:mul_tables_compare->mul_tables_compare::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG24 [12] phi from mul_tables_compare::@5 to mul_tables_compare::@1 [phi:mul_tables_compare::@5->mul_tables_compare::@1]
  b1_from_b5:
  //SEG25 [12] phi (byte) mul_tables_compare::i#10 = (byte) mul_tables_compare::i#1 [phi:mul_tables_compare::@5->mul_tables_compare::@1#0] -- register_copy 
    jmp b1
  //SEG26 mul_tables_compare::@1
  b1:
  //SEG27 [13] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1 
    lda mul_sqr_lo,x
    cmp asm_mul_sqr_lo,x
    beq b2
    jmp b6
  //SEG28 mul_tables_compare::@6
  b6:
  //SEG29 [14] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
    jmp b2
  //SEG30 mul_tables_compare::@2
  b2:
  //SEG31 [15] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1 
    lda mul_sqr_hi+$100,x
    cmp asm_mul_sqr_hi+$100,x
    beq b3
    jmp b7
  //SEG32 mul_tables_compare::@7
  b7:
  //SEG33 [16] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
    jmp b3
  //SEG34 mul_tables_compare::@3
  b3:
  //SEG35 [17] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1 
    lda mul_sqr_lo,x
    cmp asm_mul_sqr_lo,x
    beq b4
    jmp b8
  //SEG36 mul_tables_compare::@8
  b8:
  //SEG37 [18] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
    jmp b4
  //SEG38 mul_tables_compare::@4
  b4:
  //SEG39 [19] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1 
    lda mul_sqr_hi+$100,x
    cmp asm_mul_sqr_hi+$100,x
    beq b5
    jmp b9
  //SEG40 mul_tables_compare::@9
  b9:
  //SEG41 [20] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
    jmp b5
  //SEG42 mul_tables_compare::@5
  b5:
  //SEG43 [21] (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10 [ mul_tables_compare::i#1 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG44 [22] if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1 [ mul_tables_compare::i#1 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#1 ] ) -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1_from_b5
    jmp breturn
  //SEG45 mul_tables_compare::@return
  breturn:
  //SEG46 [23] return  [ ] ( main:2::mul_tables_compare:9 [ ] )
    rts
}
//SEG47 init_mul_tables_asm
init_mul_tables_asm: {
  //SEG48 asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
    ldx #0
    txa
    .byte $c9
  lb1:
    tya
    adc #0
  ml1:
    sta asm_mul_sqr_hi,x
    tay
    cmp #$40
    txa
    ror
  ml9:
    adc #0
    sta ml9+1
    inx
  ml0:
    sta asm_mul_sqr_lo,x
    bne lb1
    inc ml0+2
    inc ml1+2
    clc
    iny
    bne lb1
    jmp breturn
  //SEG49 init_mul_tables_asm::@return
  breturn:
  //SEG50 [25] return  [ ] ( main:2::init_mul_tables_asm:7 [ ] )
    rts
}
//SEG51 init_mul_tables
init_mul_tables: {
    .label sqr_hi = 4
    .label sqr = 7
    .label sqr_lo = 2
    .label x_2 = 6
  //SEG52 [27] phi from init_mul_tables to init_mul_tables::@1 [phi:init_mul_tables->init_mul_tables::@1]
  b1_from_init_mul_tables:
  //SEG53 [27] phi (byte) init_mul_tables::x_2#3 = (byte/signed byte/word/signed word) 0 [phi:init_mul_tables->init_mul_tables::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta x_2
  //SEG54 [27] phi (byte*) init_mul_tables::sqr_hi#2 = (const byte[512]) mul_sqr_hi#0+(byte/signed byte/word/signed word) 1 [phi:init_mul_tables->init_mul_tables::@1#1] -- pbuz1=pbuc1 
    lda #<mul_sqr_hi+1
    sta sqr_hi
    lda #>mul_sqr_hi+1
    sta sqr_hi+1
  //SEG55 [27] phi (byte*) init_mul_tables::sqr_lo#2 = (const byte[512]) mul_sqr_lo#0+(byte/signed byte/word/signed word) 1 [phi:init_mul_tables->init_mul_tables::@1#2] -- pbuz1=pbuc1 
    lda #<mul_sqr_lo+1
    sta sqr_lo
    lda #>mul_sqr_lo+1
    sta sqr_lo+1
  //SEG56 [27] phi (word) init_mul_tables::sqr#4 = (byte/signed byte/word/signed word) 0 [phi:init_mul_tables->init_mul_tables::@1#3] -- vwuz1=vbuc1 
    lda #0
    sta sqr
    lda #0
    sta sqr+1
  //SEG57 [27] phi (byte) init_mul_tables::c#2 = (byte/signed byte/word/signed word) 0 [phi:init_mul_tables->init_mul_tables::@1#4] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG58 [27] phi from init_mul_tables::@2 to init_mul_tables::@1 [phi:init_mul_tables::@2->init_mul_tables::@1]
  b1_from_b2:
  //SEG59 [27] phi (byte) init_mul_tables::x_2#3 = (byte) init_mul_tables::x_2#2 [phi:init_mul_tables::@2->init_mul_tables::@1#0] -- register_copy 
  //SEG60 [27] phi (byte*) init_mul_tables::sqr_hi#2 = (byte*) init_mul_tables::sqr_hi#1 [phi:init_mul_tables::@2->init_mul_tables::@1#1] -- register_copy 
  //SEG61 [27] phi (byte*) init_mul_tables::sqr_lo#2 = (byte*) init_mul_tables::sqr_lo#1 [phi:init_mul_tables::@2->init_mul_tables::@1#2] -- register_copy 
  //SEG62 [27] phi (word) init_mul_tables::sqr#4 = (word) init_mul_tables::sqr#1 [phi:init_mul_tables::@2->init_mul_tables::@1#3] -- register_copy 
  //SEG63 [27] phi (byte) init_mul_tables::c#2 = (byte) init_mul_tables::c#1 [phi:init_mul_tables::@2->init_mul_tables::@1#4] -- register_copy 
    jmp b1
  //SEG64 init_mul_tables::@1
  b1:
  //SEG65 [28] (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG66 [29] (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 init_mul_tables::$2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 init_mul_tables::$2 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG67 [30] if((byte~) init_mul_tables::$2!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ] ) -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b2_from_b1
    jmp b3
  //SEG68 init_mul_tables::@3
  b3:
  //SEG69 [31] (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 ] ) -- vbuz1=_inc_vbuz1 
    inc x_2
  //SEG70 [32] (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 init_mul_tables::sqr#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 init_mul_tables::sqr#2 ] ) -- vwuz1=_inc_vwuz1 
    inc sqr
    bne !+
    inc sqr+1
  !:
  //SEG71 [33] phi from init_mul_tables::@1 init_mul_tables::@3 to init_mul_tables::@2 [phi:init_mul_tables::@1/init_mul_tables::@3->init_mul_tables::@2]
  b2_from_b1:
  b2_from_b3:
  //SEG72 [33] phi (byte) init_mul_tables::x_2#2 = (byte) init_mul_tables::x_2#3 [phi:init_mul_tables::@1/init_mul_tables::@3->init_mul_tables::@2#0] -- register_copy 
  //SEG73 [33] phi (word) init_mul_tables::sqr#3 = (word) init_mul_tables::sqr#4 [phi:init_mul_tables::@1/init_mul_tables::@3->init_mul_tables::@2#1] -- register_copy 
    jmp b2
  //SEG74 init_mul_tables::@2
  b2:
  //SEG75 [34] (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$5 ] ) -- vbuaa=_lo_vwuz1 
    lda sqr
  //SEG76 [35] *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr_lo),y
  //SEG77 [36] (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$6 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$6 ] ) -- vbuaa=_hi_vwuz1 
    lda sqr+1
  //SEG78 [37] *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr_hi),y
  //SEG79 [38] (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ) -- pbuz1=_inc_pbuz1 
    inc sqr_hi
    bne !+
    inc sqr_hi+1
  !:
  //SEG80 [39] (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ) -- vwuz1=vwuz1_plus_vbuz2 
    lda x_2
    clc
    adc sqr
    sta sqr
    bcc !+
    inc sqr+1
  !:
  //SEG81 [40] (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ) -- pbuz1=_inc_pbuz1 
    inc sqr_lo
    bne !+
    inc sqr_lo+1
  !:
  //SEG82 [41] if((byte*) init_mul_tables::sqr_lo#1!=(const byte[512]) mul_sqr_lo#0+(word/signed word) 512) goto init_mul_tables::@1 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sqr_lo+1
    cmp #>mul_sqr_lo+$200
    bne b1_from_b2
    lda sqr_lo
    cmp #<mul_sqr_lo+$200
    bne b1_from_b2
    jmp breturn
  //SEG83 init_mul_tables::@return
  breturn:
  //SEG84 [42] return  [ ] ( main:2::init_mul_tables:5 [ ] )
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b4
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b6
Removing instruction jmp b2
Removing instruction jmp b7
Removing instruction jmp b3
Removing instruction jmp b8
Removing instruction jmp b4
Removing instruction jmp b9
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Replacing instruction ldx #0 with TAX
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b5 with b1
Replacing label b2_from_b1 with b2
Replacing label b1_from_b2 with b1
Replacing label b1_from_b2 with b1
Removing instruction bbegin:
Removing instruction b4_from_bbegin:
Removing instruction main_from_b4:
Removing instruction bend_from_b4:
Removing instruction b1_from_main:
Removing instruction b2_from_b1:
Removing instruction b1_from_b5:
Removing instruction b1_from_b2:
Removing instruction b2_from_b1:
Removing instruction b2_from_b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b4:
Removing instruction bend:
Removing instruction init_mul_tables_from_main:
Removing instruction b1:
Removing instruction b2:
Removing instruction breturn:
Removing instruction b1_from_mul_tables_compare:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_init_mul_tables:
Removing instruction b3:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @4
(label) @begin
(label) @end
(byte*) BGCOL
(const byte*) BGCOL#0 BGCOL = ((byte*))(word) 53281
(byte[512]) asm_mul_sqr_hi
(const byte[512]) asm_mul_sqr_hi#0 asm_mul_sqr_hi = { fill( 512, 0) }
(byte[512]) asm_mul_sqr_lo
(const byte[512]) asm_mul_sqr_lo#0 asm_mul_sqr_lo = { fill( 512, 0) }
(void()) init_mul_tables()
(byte~) init_mul_tables::$2 reg byte a 22.0
(byte~) init_mul_tables::$5 reg byte a 22.0
(byte~) init_mul_tables::$6 reg byte a 22.0
(label) init_mul_tables::@1
(label) init_mul_tables::@2
(label) init_mul_tables::@3
(label) init_mul_tables::@return
(byte) init_mul_tables::c
(byte) init_mul_tables::c#1 reg byte x 2.357142857142857
(byte) init_mul_tables::c#2 reg byte x 22.0
(word) init_mul_tables::sqr
(word) init_mul_tables::sqr#1 sqr zp ZP_WORD:7 7.333333333333333
(word) init_mul_tables::sqr#2 sqr zp ZP_WORD:7 22.0
(word) init_mul_tables::sqr#3 sqr zp ZP_WORD:7 9.166666666666666
(word) init_mul_tables::sqr#4 sqr zp ZP_WORD:7 6.6000000000000005
(byte*) init_mul_tables::sqr_hi
(byte*) init_mul_tables::sqr_hi#1 sqr_hi zp ZP_WORD:4 5.5
(byte*) init_mul_tables::sqr_hi#2 sqr_hi zp ZP_WORD:4 3.0
(byte*) init_mul_tables::sqr_lo
(byte*) init_mul_tables::sqr_lo#1 sqr_lo zp ZP_WORD:2 16.5
(byte*) init_mul_tables::sqr_lo#2 sqr_lo zp ZP_WORD:2 2.5384615384615383
(byte) init_mul_tables::x_2
(byte) init_mul_tables::x_2#1 x_2 zp ZP_BYTE:6 11.0
(byte) init_mul_tables::x_2#2 x_2 zp ZP_BYTE:6 4.888888888888889
(byte) init_mul_tables::x_2#3 x_2 zp ZP_BYTE:6 8.25
(void()) init_mul_tables_asm()
(label) init_mul_tables_asm::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte[512]) mul_sqr_hi
(const byte[512]) mul_sqr_hi#0 mul_sqr_hi = { fill( 512, 0) }
(byte[512]) mul_sqr_lo
(const byte[512]) mul_sqr_lo#0 mul_sqr_lo = { fill( 512, 0) }
(void()) mul_tables_compare()
(label) mul_tables_compare::@1
(label) mul_tables_compare::@2
(label) mul_tables_compare::@3
(label) mul_tables_compare::@4
(label) mul_tables_compare::@5
(label) mul_tables_compare::@6
(label) mul_tables_compare::@7
(label) mul_tables_compare::@8
(label) mul_tables_compare::@9
(label) mul_tables_compare::@return
(byte) mul_tables_compare::i
(byte) mul_tables_compare::i#1 reg byte x 16.5
(byte) mul_tables_compare::i#10 reg byte x 12.222222222222221

reg byte x [ mul_tables_compare::i#10 mul_tables_compare::i#1 ]
reg byte x [ init_mul_tables::c#2 init_mul_tables::c#1 ]
zp ZP_WORD:2 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_lo#1 ]
zp ZP_WORD:4 [ init_mul_tables::sqr_hi#2 init_mul_tables::sqr_hi#1 ]
zp ZP_BYTE:6 [ init_mul_tables::x_2#3 init_mul_tables::x_2#2 init_mul_tables::x_2#1 ]
zp ZP_WORD:7 [ init_mul_tables::sqr#3 init_mul_tables::sqr#4 init_mul_tables::sqr#1 init_mul_tables::sqr#2 ]
reg byte a [ init_mul_tables::$2 ]
reg byte a [ init_mul_tables::$5 ]
reg byte a [ init_mul_tables::$6 ]

FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const BGCOL = $d021
  mul_sqr_lo: .fill 512, 0
  mul_sqr_hi: .fill 512, 0
  asm_mul_sqr_lo: .fill 512, 0
  asm_mul_sqr_hi: .fill 512, 0
//SEG2 @begin
//SEG3 [1] phi from @begin to @4 [phi:@begin->@4]
//SEG4 @4
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @4 to main [phi:@4->main]
  jsr main
//SEG7 [3] phi from @4 to @end [phi:@4->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] call init_mul_tables param-assignment [ ] ( main:2 [ ] )
  //SEG11 [26] phi from main to init_mul_tables [phi:main->init_mul_tables]
    jsr init_mul_tables
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG13 main::@1
  //SEG14 [7] call init_mul_tables_asm param-assignment [ ] ( main:2 [ ] )
    jsr init_mul_tables_asm
  //SEG15 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG16 main::@2
  //SEG17 [9] call mul_tables_compare param-assignment [ ] ( main:2 [ ] )
    jsr mul_tables_compare
  //SEG18 main::@return
  //SEG19 [10] return  [ ] ( main:2 [ ] )
    rts
}
//SEG20 mul_tables_compare
mul_tables_compare: {
  //SEG21 [11] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 5 [ ] ( main:2::mul_tables_compare:9 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #5
    sta BGCOL
  //SEG22 [12] phi from mul_tables_compare to mul_tables_compare::@1 [phi:mul_tables_compare->mul_tables_compare::@1]
  //SEG23 [12] phi (byte) mul_tables_compare::i#10 = (byte/signed byte/word/signed word) 0 [phi:mul_tables_compare->mul_tables_compare::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG24 [12] phi from mul_tables_compare::@5 to mul_tables_compare::@1 [phi:mul_tables_compare::@5->mul_tables_compare::@1]
  //SEG25 [12] phi (byte) mul_tables_compare::i#10 = (byte) mul_tables_compare::i#1 [phi:mul_tables_compare::@5->mul_tables_compare::@1#0] -- register_copy 
  //SEG26 mul_tables_compare::@1
  b1:
  //SEG27 [13] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1 
    lda mul_sqr_lo,x
    cmp asm_mul_sqr_lo,x
    beq b2
  //SEG28 mul_tables_compare::@6
  //SEG29 [14] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
  //SEG30 mul_tables_compare::@2
  b2:
  //SEG31 [15] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@3 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1 
    lda mul_sqr_hi+$100,x
    cmp asm_mul_sqr_hi+$100,x
    beq b3
  //SEG32 mul_tables_compare::@7
  //SEG33 [16] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
  //SEG34 mul_tables_compare::@3
  b3:
  //SEG35 [17] if(*((const byte[512]) mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_lo#0 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@4 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1 
    lda mul_sqr_lo,x
    cmp asm_mul_sqr_lo,x
    beq b4
  //SEG36 mul_tables_compare::@8
  //SEG37 [18] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
  //SEG38 mul_tables_compare::@4
  b4:
  //SEG39 [19] if(*((const byte[512]) mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)==*((const byte[512]) asm_mul_sqr_hi#0+(word/signed word) 256 + (byte) mul_tables_compare::i#10)) goto mul_tables_compare::@5 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- pbuc1_derefidx_vbuxx_eq_pbuc2_derefidx_vbuxx_then_la1 
    lda mul_sqr_hi+$100,x
    cmp asm_mul_sqr_hi+$100,x
    beq b5
  //SEG40 mul_tables_compare::@9
  //SEG41 [20] *((const byte*) BGCOL#0) ← (byte/signed byte/word/signed word) 2 [ mul_tables_compare::i#10 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #2
    sta BGCOL
  //SEG42 mul_tables_compare::@5
  b5:
  //SEG43 [21] (byte) mul_tables_compare::i#1 ← ++ (byte) mul_tables_compare::i#10 [ mul_tables_compare::i#1 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG44 [22] if((byte) mul_tables_compare::i#1!=(byte/signed byte/word/signed word) 0) goto mul_tables_compare::@1 [ mul_tables_compare::i#1 ] ( main:2::mul_tables_compare:9 [ mul_tables_compare::i#1 ] ) -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG45 mul_tables_compare::@return
  //SEG46 [23] return  [ ] ( main:2::mul_tables_compare:9 [ ] )
    rts
}
//SEG47 init_mul_tables_asm
init_mul_tables_asm: {
  //SEG48 asm { ldx#$00txa.byte$c9lb1:tyaadc#$00ml1:staasm_mul_sqr_hi,xtaycmp#$40txarorml9:adc#$00staml9+1inxml0:staasm_mul_sqr_lo,xbnelb1incml0+2incml1+2clcinybnelb1 }
    ldx #0
    txa
    .byte $c9
  lb1:
    tya
    adc #0
  ml1:
    sta asm_mul_sqr_hi,x
    tay
    cmp #$40
    txa
    ror
  ml9:
    adc #0
    sta ml9+1
    inx
  ml0:
    sta asm_mul_sqr_lo,x
    bne lb1
    inc ml0+2
    inc ml1+2
    clc
    iny
    bne lb1
  //SEG49 init_mul_tables_asm::@return
  //SEG50 [25] return  [ ] ( main:2::init_mul_tables_asm:7 [ ] )
    rts
}
//SEG51 init_mul_tables
init_mul_tables: {
    .label sqr_hi = 4
    .label sqr = 7
    .label sqr_lo = 2
    .label x_2 = 6
  //SEG52 [27] phi from init_mul_tables to init_mul_tables::@1 [phi:init_mul_tables->init_mul_tables::@1]
  //SEG53 [27] phi (byte) init_mul_tables::x_2#3 = (byte/signed byte/word/signed word) 0 [phi:init_mul_tables->init_mul_tables::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta x_2
  //SEG54 [27] phi (byte*) init_mul_tables::sqr_hi#2 = (const byte[512]) mul_sqr_hi#0+(byte/signed byte/word/signed word) 1 [phi:init_mul_tables->init_mul_tables::@1#1] -- pbuz1=pbuc1 
    lda #<mul_sqr_hi+1
    sta sqr_hi
    lda #>mul_sqr_hi+1
    sta sqr_hi+1
  //SEG55 [27] phi (byte*) init_mul_tables::sqr_lo#2 = (const byte[512]) mul_sqr_lo#0+(byte/signed byte/word/signed word) 1 [phi:init_mul_tables->init_mul_tables::@1#2] -- pbuz1=pbuc1 
    lda #<mul_sqr_lo+1
    sta sqr_lo
    lda #>mul_sqr_lo+1
    sta sqr_lo+1
  //SEG56 [27] phi (word) init_mul_tables::sqr#4 = (byte/signed byte/word/signed word) 0 [phi:init_mul_tables->init_mul_tables::@1#3] -- vwuz1=vbuc1 
    lda #0
    sta sqr
    sta sqr+1
  //SEG57 [27] phi (byte) init_mul_tables::c#2 = (byte/signed byte/word/signed word) 0 [phi:init_mul_tables->init_mul_tables::@1#4] -- vbuxx=vbuc1 
    tax
  //SEG58 [27] phi from init_mul_tables::@2 to init_mul_tables::@1 [phi:init_mul_tables::@2->init_mul_tables::@1]
  //SEG59 [27] phi (byte) init_mul_tables::x_2#3 = (byte) init_mul_tables::x_2#2 [phi:init_mul_tables::@2->init_mul_tables::@1#0] -- register_copy 
  //SEG60 [27] phi (byte*) init_mul_tables::sqr_hi#2 = (byte*) init_mul_tables::sqr_hi#1 [phi:init_mul_tables::@2->init_mul_tables::@1#1] -- register_copy 
  //SEG61 [27] phi (byte*) init_mul_tables::sqr_lo#2 = (byte*) init_mul_tables::sqr_lo#1 [phi:init_mul_tables::@2->init_mul_tables::@1#2] -- register_copy 
  //SEG62 [27] phi (word) init_mul_tables::sqr#4 = (word) init_mul_tables::sqr#1 [phi:init_mul_tables::@2->init_mul_tables::@1#3] -- register_copy 
  //SEG63 [27] phi (byte) init_mul_tables::c#2 = (byte) init_mul_tables::c#1 [phi:init_mul_tables::@2->init_mul_tables::@1#4] -- register_copy 
  //SEG64 init_mul_tables::@1
  b1:
  //SEG65 [28] (byte) init_mul_tables::c#1 ← ++ (byte) init_mul_tables::c#2 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG66 [29] (byte~) init_mul_tables::$2 ← (byte) init_mul_tables::c#1 & (byte/signed byte/word/signed word) 1 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 init_mul_tables::$2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 init_mul_tables::$2 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
  //SEG67 [30] if((byte~) init_mul_tables::$2!=(byte/signed byte/word/signed word) 0) goto init_mul_tables::@2 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::x_2#3 init_mul_tables::c#1 ] ) -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b2
  //SEG68 init_mul_tables::@3
  //SEG69 [31] (byte) init_mul_tables::x_2#1 ← ++ (byte) init_mul_tables::x_2#3 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr#4 init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 ] ) -- vbuz1=_inc_vbuz1 
    inc x_2
  //SEG70 [32] (word) init_mul_tables::sqr#2 ← ++ (word) init_mul_tables::sqr#4 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 init_mul_tables::sqr#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#1 init_mul_tables::sqr#2 ] ) -- vwuz1=_inc_vwuz1 
    inc sqr
    bne !+
    inc sqr+1
  !:
  //SEG71 [33] phi from init_mul_tables::@1 init_mul_tables::@3 to init_mul_tables::@2 [phi:init_mul_tables::@1/init_mul_tables::@3->init_mul_tables::@2]
  //SEG72 [33] phi (byte) init_mul_tables::x_2#2 = (byte) init_mul_tables::x_2#3 [phi:init_mul_tables::@1/init_mul_tables::@3->init_mul_tables::@2#0] -- register_copy 
  //SEG73 [33] phi (word) init_mul_tables::sqr#3 = (word) init_mul_tables::sqr#4 [phi:init_mul_tables::@1/init_mul_tables::@3->init_mul_tables::@2#1] -- register_copy 
  //SEG74 init_mul_tables::@2
  b2:
  //SEG75 [34] (byte~) init_mul_tables::$5 ← < (word) init_mul_tables::sqr#3 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$5 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$5 ] ) -- vbuaa=_lo_vwuz1 
    lda sqr
  //SEG76 [35] *((byte*) init_mul_tables::sqr_lo#2) ← (byte~) init_mul_tables::$5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr_lo),y
  //SEG77 [36] (byte~) init_mul_tables::$6 ← > (word) init_mul_tables::sqr#3 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$6 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 init_mul_tables::$6 ] ) -- vbuaa=_hi_vwuz1 
    lda sqr+1
  //SEG78 [37] *((byte*) init_mul_tables::sqr_hi#2) ← (byte~) init_mul_tables::$6 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::sqr_hi#2 init_mul_tables::c#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ) -- _deref_pbuz1=vbuaa 
    sta (sqr_hi),y
  //SEG79 [38] (byte*) init_mul_tables::sqr_hi#1 ← ++ (byte*) init_mul_tables::sqr_hi#2 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 init_mul_tables::sqr#3 ] ) -- pbuz1=_inc_pbuz1 
    inc sqr_hi
    bne !+
    inc sqr_hi+1
  !:
  //SEG80 [39] (word) init_mul_tables::sqr#1 ← (word) init_mul_tables::sqr#3 + (byte) init_mul_tables::x_2#2 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::sqr_lo#2 init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ) -- vwuz1=vwuz1_plus_vbuz2 
    lda x_2
    clc
    adc sqr
    sta sqr
    bcc !+
    inc sqr+1
  !:
  //SEG81 [40] (byte*) init_mul_tables::sqr_lo#1 ← ++ (byte*) init_mul_tables::sqr_lo#2 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ) -- pbuz1=_inc_pbuz1 
    inc sqr_lo
    bne !+
    inc sqr_lo+1
  !:
  //SEG82 [41] if((byte*) init_mul_tables::sqr_lo#1!=(const byte[512]) mul_sqr_lo#0+(word/signed word) 512) goto init_mul_tables::@1 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ( main:2::init_mul_tables:5 [ init_mul_tables::c#1 init_mul_tables::sqr#1 init_mul_tables::sqr_lo#1 init_mul_tables::sqr_hi#1 init_mul_tables::x_2#2 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sqr_lo+1
    cmp #>mul_sqr_lo+$200
    bne b1
    lda sqr_lo
    cmp #<mul_sqr_lo+$200
    bne b1
  //SEG83 init_mul_tables::@return
  //SEG84 [42] return  [ ] ( main:2::init_mul_tables:5 [ ] )
    rts
}

