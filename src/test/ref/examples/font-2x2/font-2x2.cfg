
(void()) main()
main: scope:[main]  from
  asm { sei  }
  [1] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_RAM_CHARROM
  [2] call font_2x2 
  to:main::@6
main::@6: scope:[main]  from main
  [3] *((const nomodify byte*) PROCPORT) ← (const nomodify byte) PROCPORT_BASIC_KERNEL_IO
  asm { cli  }
  [5] call font_compress 
  to:main::toD0181
main::toD0181: scope:[main]  from main::@6
  [6] phi()
  to:main::@5
main::@5: scope:[main]  from main::toD0181
  [7] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0
  [8] (byte) memset::c#0 ← *((const byte*) FONT_COMPRESSED_MAP+(byte) ' ')
  [9] call memset 
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  [10] (byte) main::y#4 ← phi( main::@3/(byte) main::y#1 main::@5/(byte) 0 )
  [10] (byte) main::c#4 ← phi( main::@3/(byte) main::c#1 main::@5/(byte) 0 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@7
  [11] (byte) main::x#2 ← phi( main::@1/(byte) 0 main::@7/(byte) main::x#1 )
  [11] (byte) main::c#2 ← phi( main::@1/(byte) main::c#4 main::@7/(byte) main::c#1 )
  [12] (byte) show::c#0 ← (byte) main::c#2
  [13] (byte) show::x#0 ← (byte) main::x#2
  [14] (byte) show::y#0 ← (byte) main::y#4
  [15] call show 
  to:main::@7
main::@7: scope:[main]  from main::@2
  [16] (byte) main::c#1 ← ++ (byte) main::c#2
  [17] (byte) main::x#1 ← ++ (byte) main::x#2
  [18] if((byte) main::x#1!=(byte) 8) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@7
  [19] (byte) main::y#1 ← ++ (byte) main::y#4
  [20] if((byte) main::y#1!=(byte) 8) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  [21] *((const nomodify byte*) SCREEN+(word) $3e7) ← ++ *((const nomodify byte*) SCREEN+(word) $3e7)
  to:main::@4

(void()) show((byte) show::c , (byte) show::x , (byte) show::y , (byte*) show::font_mapping)
show: scope:[show]  from main::@2
  [22] (word~) show::$7 ← (word)(byte) show::y#0
  [23] (word~) show::$8 ← (word~) show::$7 << (byte) 2
  [24] (word~) show::$9 ← (word~) show::$8 + (word~) show::$7
  [25] (word~) show::$0 ← (word~) show::$9 << (byte) 4
  [26] (byte*~) show::$1 ← (const nomodify byte*) SCREEN + (word~) show::$0
  [27] (byte~) show::$2 ← (byte) show::x#0 << (byte) 1
  [28] (byte*) show::ptr#0 ← (byte*~) show::$1 + (byte~) show::$2
  [29] *((byte*) show::ptr#0) ← *((const byte*) FONT_COMPRESSED_MAP + (byte) show::c#0)
  [30] (byte~) show::$4 ← (byte) show::c#0
  [31] *((byte*) show::ptr#0 + (byte) 1) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $40 + (byte~) show::$4)
  [32] (byte~) show::$5 ← (byte) show::c#0
  [33] *((byte*) show::ptr#0 + (byte) $28) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $80 + (byte~) show::$5)
  [34] (byte~) show::$6 ← (byte) show::c#0
  [35] *((byte*) show::ptr#0 + (byte) $29) ← *((const byte*) FONT_COMPRESSED_MAP+(byte) $c0 + (byte~) show::$6)
  to:show::@return
show::@return: scope:[show]  from show
  [36] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from main::@5
  [37] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [38] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [39] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [40] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [41] *((byte*) memset::dst#2) ← (byte) memset::c#0
  [42] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(byte()) font_compress((byte*) font_compress::font_original , (byte*) font_compress::font_compressed , (byte*) font_compress::compress_mapping)
font_compress: scope:[font_compress]  from main::@6
  [43] phi()
  to:font_compress::@1
font_compress::@1: scope:[font_compress]  from font_compress font_compress::@6
  [44] (byte*) font_compress::next_compressed#4 ← phi( font_compress/(const nomodify byte*) FONT_COMPRESSED font_compress::@6/(byte*) font_compress::next_compressed#7 )
  [44] (byte) font_compress::i#4 ← phi( font_compress/(byte) 0 font_compress::@6/(byte) font_compress::i#1 )
  [44] (byte) font_compress::font_size#2 ← phi( font_compress/(byte) 0 font_compress::@6/(byte) font_compress::font_size#9 )
  [44] (byte*) font_compress::next_original#2 ← phi( font_compress/(const nomodify byte*) FONT_ORIGINAL font_compress::@6/(byte*) font_compress::next_original#1 )
  [45] (byte*) font_find::glyph#0 ← (byte*) font_compress::next_original#2
  [46] (byte) font_find::font_size#0 ← (byte) font_compress::font_size#2
  [47] call font_find 
  [48] (byte) font_find::return#0 ← (byte) font_find::return#3
  to:font_compress::@5
font_compress::@5: scope:[font_compress]  from font_compress::@1
  [49] (byte) font_compress::found#0 ← (byte) font_find::return#0
  [50] if((byte) font_compress::found#0!=(byte) $ff) goto font_compress::@7
  to:font_compress::@3
font_compress::@3: scope:[font_compress]  from font_compress::@3 font_compress::@5
  [51] (byte) font_compress::l#2 ← phi( font_compress::@3/(byte) font_compress::l#1 font_compress::@5/(byte) 0 )
  [52] *((byte*) font_compress::next_compressed#4 + (byte) font_compress::l#2) ← *((byte*) font_compress::next_original#2 + (byte) font_compress::l#2)
  [53] (byte) font_compress::l#1 ← ++ (byte) font_compress::l#2
  [54] if((byte) font_compress::l#1!=(byte) 8) goto font_compress::@3
  to:font_compress::@4
font_compress::@4: scope:[font_compress]  from font_compress::@3
  [55] (byte*) font_compress::next_compressed#1 ← (byte*) font_compress::next_compressed#4 + (byte) 8
  [56] (byte) font_compress::font_size#1 ← ++ (byte) font_compress::font_size#2
  [57] (byte) font_compress::found#3 ← (byte) font_compress::font_size#2
  to:font_compress::@2
font_compress::@2: scope:[font_compress]  from font_compress::@4 font_compress::@7
  [58] (byte*) font_compress::next_compressed#7 ← phi( font_compress::@4/(byte*) font_compress::next_compressed#1 font_compress::@7/(byte*) font_compress::next_compressed#4 )
  [58] (byte) font_compress::return#1 ← phi( font_compress::@4/(byte) font_compress::font_size#1 font_compress::@7/(byte) font_compress::return#5 )
  [58] (byte) font_compress::found#2 ← phi( font_compress::@4/(byte) font_compress::found#3 font_compress::@7/(byte) font_compress::found#0 )
  [59] *((const byte*) FONT_COMPRESSED_MAP + (byte) font_compress::i#4) ← (byte) font_compress::found#2
  [60] (byte*) font_compress::next_original#1 ← (byte*) font_compress::next_original#2 + (byte) 8
  [61] (byte) font_compress::i#1 ← ++ (byte) font_compress::i#4
  [62] if((byte) font_compress::i#1!=(byte) 0) goto font_compress::@6
  to:font_compress::@return
font_compress::@return: scope:[font_compress]  from font_compress::@2
  [63] return 
  to:@return
font_compress::@6: scope:[font_compress]  from font_compress::@2
  [64] (byte) font_compress::font_size#9 ← (byte) font_compress::return#1
  to:font_compress::@1
font_compress::@7: scope:[font_compress]  from font_compress::@5
  [65] (byte) font_compress::return#5 ← (byte) font_compress::font_size#2
  to:font_compress::@2

(byte()) font_find((byte*) font_find::glyph , (byte*) font_find::font , (byte) font_find::font_size)
font_find: scope:[font_find]  from font_compress::@1
  [66] phi()
  to:font_find::@1
font_find::@1: scope:[font_find]  from font_find font_find::@5
  [67] (byte*) font_find::font#4 ← phi( font_find/(const nomodify byte*) FONT_COMPRESSED font_find::@5/(byte*) font_find::font#1 )
  [67] (byte) font_find::i#2 ← phi( font_find/(byte) 0 font_find::@5/(byte) font_find::i#1 )
  [68] if((byte) font_find::i#2<(byte) font_find::font_size#0) goto font_find::@2
  to:font_find::@return
font_find::@return: scope:[font_find]  from font_find::@1 font_find::@4
  [69] (byte) font_find::return#3 ← phi( font_find::@1/(byte) $ff font_find::@4/(byte) font_find::i#2 )
  [70] return 
  to:@return
font_find::@2: scope:[font_find]  from font_find::@1 font_find::@3
  [71] (byte) font_find::l#2 ← phi( font_find::@1/(byte) 0 font_find::@3/(byte) font_find::l#1 )
  [72] if(*((byte*) font_find::glyph#0 + (byte) font_find::l#2)==*((byte*) font_find::font#4 + (byte) font_find::l#2)) goto font_find::@3
  to:font_find::@4
font_find::@3: scope:[font_find]  from font_find::@2
  [73] (byte) font_find::l#1 ← ++ (byte) font_find::l#2
  [74] if((byte) font_find::l#1!=(byte) 8) goto font_find::@2
  to:font_find::@4
font_find::@4: scope:[font_find]  from font_find::@2 font_find::@3
  [75] (byte) font_find::found#2 ← phi( font_find::@3/(byte) 1 font_find::@2/(byte) 0 )
  [76] if((byte) 0==(byte) font_find::found#2) goto font_find::@5
  to:font_find::@return
font_find::@5: scope:[font_find]  from font_find::@4
  [77] (byte*) font_find::font#1 ← (byte*) font_find::font#4 + (byte) 8
  [78] (byte) font_find::i#1 ← ++ (byte) font_find::i#2
  to:font_find::@1

(void()) font_2x2((byte*) font_2x2::font_original , (byte*) font_2x2::font_2x2)
font_2x2: scope:[font_2x2]  from main
  [79] phi()
  to:font_2x2::@1
font_2x2::@1: scope:[font_2x2]  from font_2x2 font_2x2::@9
  [80] (byte) font_2x2::c#11 ← phi( font_2x2/(byte) 0 font_2x2::@9/(byte) font_2x2::c#1 )
  [80] (byte*) font_2x2::next_original#4 ← phi( font_2x2/(const nomodify byte*) CHARGEN font_2x2::@9/(byte*) font_2x2::next_original#1 )
  [80] (byte*) font_2x2::next_2x2_left#0 ← phi( font_2x2/(const nomodify byte*) FONT_ORIGINAL font_2x2::@9/(byte*) font_2x2::next_2x2#1 )
  [81] (byte*) font_2x2::next_2x2_right#0 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $40*(number) 8
  [82] (byte*) font_2x2::next_2x2_left#10 ← (byte*) font_2x2::next_2x2_left#0
  to:font_2x2::@2
font_2x2::@2: scope:[font_2x2]  from font_2x2::@1 font_2x2::@8
  [83] (byte*) font_2x2::next_2x2_right#7 ← phi( font_2x2::@1/(byte*) font_2x2::next_2x2_right#0 font_2x2::@8/(byte*) font_2x2::next_2x2_right#8 )
  [83] (byte) font_2x2::l2#8 ← phi( font_2x2::@1/(byte) 0 font_2x2::@8/(byte) font_2x2::l2#9 )
  [83] (byte*) font_2x2::next_2x2_left#7 ← phi( font_2x2::@1/(byte*) font_2x2::next_2x2_left#10 font_2x2::@8/(byte*) font_2x2::next_2x2_left#8 )
  [83] (byte) font_2x2::l#2 ← phi( font_2x2::@1/(byte) 0 font_2x2::@8/(byte) font_2x2::l#1 )
  [84] (byte) font_2x2::glyph_bits#0 ← *((byte*) font_2x2::next_original#4 + (byte) font_2x2::l#2)
  to:font_2x2::@3
font_2x2::@3: scope:[font_2x2]  from font_2x2::@2 font_2x2::@5
  [85] (byte) font_2x2::b#2 ← phi( font_2x2::@2/(byte) 0 font_2x2::@5/(byte) font_2x2::b#1 )
  [85] (word) font_2x2::glyph_bits_2x2#3 ← phi( font_2x2::@2/(word) 0 font_2x2::@5/(word) font_2x2::glyph_bits_2x2#2 )
  [85] (byte) font_2x2::glyph_bits#2 ← phi( font_2x2::@2/(byte) font_2x2::glyph_bits#0 font_2x2::@5/(byte) font_2x2::glyph_bits#1 )
  [86] (byte~) font_2x2::$1 ← (byte) font_2x2::glyph_bits#2 & (byte) $80
  [87] if((byte) 0!=(byte~) font_2x2::$1) goto font_2x2::@4
  to:font_2x2::@5
font_2x2::@4: scope:[font_2x2]  from font_2x2::@3
  [88] phi()
  to:font_2x2::@5
font_2x2::@5: scope:[font_2x2]  from font_2x2::@3 font_2x2::@4
  [89] (byte) font_2x2::glyph_bit#0 ← phi( font_2x2::@4/(byte) 1 font_2x2::@3/(byte) 0 )
  [90] (word~) font_2x2::$5 ← (word) font_2x2::glyph_bits_2x2#3 << (byte) 1
  [91] (word) font_2x2::glyph_bits_2x2#1 ← (word~) font_2x2::$5 | (byte) font_2x2::glyph_bit#0
  [92] (word~) font_2x2::$7 ← (word) font_2x2::glyph_bits_2x2#1 << (byte) 1
  [93] (word) font_2x2::glyph_bits_2x2#2 ← (word~) font_2x2::$7 | (byte) font_2x2::glyph_bit#0
  [94] (byte) font_2x2::glyph_bits#1 ← (byte) font_2x2::glyph_bits#2 << (byte) 1
  [95] (byte) font_2x2::b#1 ← ++ (byte) font_2x2::b#2
  [96] if((byte) font_2x2::b#1!=(byte) 8) goto font_2x2::@3
  to:font_2x2::@6
font_2x2::@6: scope:[font_2x2]  from font_2x2::@5
  [97] (byte~) font_2x2::$12 ← > (word) font_2x2::glyph_bits_2x2#2
  [98] *((byte*) font_2x2::next_2x2_left#7 + (byte) font_2x2::l2#8) ← (byte~) font_2x2::$12
  [99] (byte~) font_2x2::$11 ← (byte) font_2x2::l2#8 + (byte) 1
  [100] *((byte*) font_2x2::next_2x2_left#7 + (byte~) font_2x2::$11) ← (byte~) font_2x2::$12
  [101] (byte~) font_2x2::$15 ← < (word) font_2x2::glyph_bits_2x2#2
  [102] *((byte*) font_2x2::next_2x2_right#7 + (byte) font_2x2::l2#8) ← (byte~) font_2x2::$15
  [103] (byte~) font_2x2::$14 ← (byte) font_2x2::l2#8 + (byte) 1
  [104] *((byte*) font_2x2::next_2x2_right#7 + (byte~) font_2x2::$14) ← (byte~) font_2x2::$15
  [105] (byte) font_2x2::l2#1 ← (byte) font_2x2::l2#8 + (byte) 2
  [106] if((byte) font_2x2::l2#1!=(byte) 8) goto font_2x2::@8
  to:font_2x2::@7
font_2x2::@7: scope:[font_2x2]  from font_2x2::@6
  [107] (byte*) font_2x2::next_2x2_left#1 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $80*(number) 8
  [108] (byte*) font_2x2::next_2x2_right#1 ← (byte*) font_2x2::next_2x2_left#0 + (word)(number) $c0*(number) 8
  to:font_2x2::@8
font_2x2::@8: scope:[font_2x2]  from font_2x2::@6 font_2x2::@7
  [109] (byte*) font_2x2::next_2x2_right#8 ← phi( font_2x2::@6/(byte*) font_2x2::next_2x2_right#7 font_2x2::@7/(byte*) font_2x2::next_2x2_right#1 )
  [109] (byte) font_2x2::l2#9 ← phi( font_2x2::@6/(byte) font_2x2::l2#1 font_2x2::@7/(byte) 0 )
  [109] (byte*) font_2x2::next_2x2_left#8 ← phi( font_2x2::@6/(byte*) font_2x2::next_2x2_left#7 font_2x2::@7/(byte*) font_2x2::next_2x2_left#1 )
  [110] (byte) font_2x2::l#1 ← ++ (byte) font_2x2::l#2
  [111] if((byte) font_2x2::l#1!=(byte) 8) goto font_2x2::@2
  to:font_2x2::@9
font_2x2::@9: scope:[font_2x2]  from font_2x2::@8
  [112] (byte*) font_2x2::next_2x2#1 ← (byte*) font_2x2::next_2x2_left#0 + (byte) 8
  [113] (byte*) font_2x2::next_original#1 ← (byte*) font_2x2::next_original#4 + (byte) 8
  [114] (byte) font_2x2::c#1 ← ++ (byte) font_2x2::c#11
  [115] if((byte) font_2x2::c#1!=(byte) $40) goto font_2x2::@1
  to:font_2x2::@return
font_2x2::@return: scope:[font_2x2]  from font_2x2::@9
  [116] return 
  to:@return
